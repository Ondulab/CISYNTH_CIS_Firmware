
SSS_CIS_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000258dc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005618  08025b80  08025b80  00035b80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802b198  0802b198  00043628  2**0
                  CONTENTS
  4 .ARM          00000008  0802b198  0802b198  0003b198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802b1a0  0802b1a0  00043628  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802b1a0  0802b1a0  0003b1a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802b1a4  0802b1a4  0003b1a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00003628  24000000  0802b1a8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000094bc  24003628  0802e7d0  00043628  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400cae4  0802e7d0  0004cae4  2**0
                  ALLOC
 11 .lwip_sec     000019d0  30040000  0802e7d0  00050000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00043628  2**0
                  CONTENTS, READONLY
 13 .debug_info   0007aec9  00000000  00000000  00043656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000cdd0  00000000  00000000  000be51f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003078  00000000  00000000  000cb2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002da0  00000000  00000000  000ce368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00053bf8  00000000  00000000  000d1108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00054775  00000000  00000000  00124d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001c159d  00000000  00000000  00179475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0033aa12  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000dfdc  00000000  00000000  0033aa68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24003628 	.word	0x24003628
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08025b64 	.word	0x08025b64

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400362c 	.word	0x2400362c
 80002dc:	08025b64 	.word	0x08025b64

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000718:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800071c:	f000 b9a6 	b.w	8000a6c <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468c      	mov	ip, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	f040 8083 	bne.w	80008be <__udivmoddi4+0x116>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4617      	mov	r7, r2
 80007bc:	d947      	bls.n	800084e <__udivmoddi4+0xa6>
 80007be:	fab2 f282 	clz	r2, r2
 80007c2:	b142      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c4:	f1c2 0020 	rsb	r0, r2, #32
 80007c8:	fa24 f000 	lsr.w	r0, r4, r0
 80007cc:	4091      	lsls	r1, r2
 80007ce:	4097      	lsls	r7, r2
 80007d0:	ea40 0c01 	orr.w	ip, r0, r1
 80007d4:	4094      	lsls	r4, r2
 80007d6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80007da:	0c23      	lsrs	r3, r4, #16
 80007dc:	fbbc f6f8 	udiv	r6, ip, r8
 80007e0:	fa1f fe87 	uxth.w	lr, r7
 80007e4:	fb08 c116 	mls	r1, r8, r6, ip
 80007e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ec:	fb06 f10e 	mul.w	r1, r6, lr
 80007f0:	4299      	cmp	r1, r3
 80007f2:	d909      	bls.n	8000808 <__udivmoddi4+0x60>
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80007fa:	f080 8119 	bcs.w	8000a30 <__udivmoddi4+0x288>
 80007fe:	4299      	cmp	r1, r3
 8000800:	f240 8116 	bls.w	8000a30 <__udivmoddi4+0x288>
 8000804:	3e02      	subs	r6, #2
 8000806:	443b      	add	r3, r7
 8000808:	1a5b      	subs	r3, r3, r1
 800080a:	b2a4      	uxth	r4, r4
 800080c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000810:	fb08 3310 	mls	r3, r8, r0, r3
 8000814:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000818:	fb00 fe0e 	mul.w	lr, r0, lr
 800081c:	45a6      	cmp	lr, r4
 800081e:	d909      	bls.n	8000834 <__udivmoddi4+0x8c>
 8000820:	193c      	adds	r4, r7, r4
 8000822:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000826:	f080 8105 	bcs.w	8000a34 <__udivmoddi4+0x28c>
 800082a:	45a6      	cmp	lr, r4
 800082c:	f240 8102 	bls.w	8000a34 <__udivmoddi4+0x28c>
 8000830:	3802      	subs	r0, #2
 8000832:	443c      	add	r4, r7
 8000834:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000838:	eba4 040e 	sub.w	r4, r4, lr
 800083c:	2600      	movs	r6, #0
 800083e:	b11d      	cbz	r5, 8000848 <__udivmoddi4+0xa0>
 8000840:	40d4      	lsrs	r4, r2
 8000842:	2300      	movs	r3, #0
 8000844:	e9c5 4300 	strd	r4, r3, [r5]
 8000848:	4631      	mov	r1, r6
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	b902      	cbnz	r2, 8000852 <__udivmoddi4+0xaa>
 8000850:	deff      	udf	#255	; 0xff
 8000852:	fab2 f282 	clz	r2, r2
 8000856:	2a00      	cmp	r2, #0
 8000858:	d150      	bne.n	80008fc <__udivmoddi4+0x154>
 800085a:	1bcb      	subs	r3, r1, r7
 800085c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000860:	fa1f f887 	uxth.w	r8, r7
 8000864:	2601      	movs	r6, #1
 8000866:	fbb3 fcfe 	udiv	ip, r3, lr
 800086a:	0c21      	lsrs	r1, r4, #16
 800086c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000870:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000874:	fb08 f30c 	mul.w	r3, r8, ip
 8000878:	428b      	cmp	r3, r1
 800087a:	d907      	bls.n	800088c <__udivmoddi4+0xe4>
 800087c:	1879      	adds	r1, r7, r1
 800087e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000882:	d202      	bcs.n	800088a <__udivmoddi4+0xe2>
 8000884:	428b      	cmp	r3, r1
 8000886:	f200 80e9 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 800088a:	4684      	mov	ip, r0
 800088c:	1ac9      	subs	r1, r1, r3
 800088e:	b2a3      	uxth	r3, r4
 8000890:	fbb1 f0fe 	udiv	r0, r1, lr
 8000894:	fb0e 1110 	mls	r1, lr, r0, r1
 8000898:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800089c:	fb08 f800 	mul.w	r8, r8, r0
 80008a0:	45a0      	cmp	r8, r4
 80008a2:	d907      	bls.n	80008b4 <__udivmoddi4+0x10c>
 80008a4:	193c      	adds	r4, r7, r4
 80008a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80008aa:	d202      	bcs.n	80008b2 <__udivmoddi4+0x10a>
 80008ac:	45a0      	cmp	r8, r4
 80008ae:	f200 80d9 	bhi.w	8000a64 <__udivmoddi4+0x2bc>
 80008b2:	4618      	mov	r0, r3
 80008b4:	eba4 0408 	sub.w	r4, r4, r8
 80008b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008bc:	e7bf      	b.n	800083e <__udivmoddi4+0x96>
 80008be:	428b      	cmp	r3, r1
 80008c0:	d909      	bls.n	80008d6 <__udivmoddi4+0x12e>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	f000 80b1 	beq.w	8000a2a <__udivmoddi4+0x282>
 80008c8:	2600      	movs	r6, #0
 80008ca:	e9c5 0100 	strd	r0, r1, [r5]
 80008ce:	4630      	mov	r0, r6
 80008d0:	4631      	mov	r1, r6
 80008d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d6:	fab3 f683 	clz	r6, r3
 80008da:	2e00      	cmp	r6, #0
 80008dc:	d14a      	bne.n	8000974 <__udivmoddi4+0x1cc>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d302      	bcc.n	80008e8 <__udivmoddi4+0x140>
 80008e2:	4282      	cmp	r2, r0
 80008e4:	f200 80b8 	bhi.w	8000a58 <__udivmoddi4+0x2b0>
 80008e8:	1a84      	subs	r4, r0, r2
 80008ea:	eb61 0103 	sbc.w	r1, r1, r3
 80008ee:	2001      	movs	r0, #1
 80008f0:	468c      	mov	ip, r1
 80008f2:	2d00      	cmp	r5, #0
 80008f4:	d0a8      	beq.n	8000848 <__udivmoddi4+0xa0>
 80008f6:	e9c5 4c00 	strd	r4, ip, [r5]
 80008fa:	e7a5      	b.n	8000848 <__udivmoddi4+0xa0>
 80008fc:	f1c2 0320 	rsb	r3, r2, #32
 8000900:	fa20 f603 	lsr.w	r6, r0, r3
 8000904:	4097      	lsls	r7, r2
 8000906:	fa01 f002 	lsl.w	r0, r1, r2
 800090a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800090e:	40d9      	lsrs	r1, r3
 8000910:	4330      	orrs	r0, r6
 8000912:	0c03      	lsrs	r3, r0, #16
 8000914:	fbb1 f6fe 	udiv	r6, r1, lr
 8000918:	fa1f f887 	uxth.w	r8, r7
 800091c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000920:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000924:	fb06 f108 	mul.w	r1, r6, r8
 8000928:	4299      	cmp	r1, r3
 800092a:	fa04 f402 	lsl.w	r4, r4, r2
 800092e:	d909      	bls.n	8000944 <__udivmoddi4+0x19c>
 8000930:	18fb      	adds	r3, r7, r3
 8000932:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000936:	f080 808d 	bcs.w	8000a54 <__udivmoddi4+0x2ac>
 800093a:	4299      	cmp	r1, r3
 800093c:	f240 808a 	bls.w	8000a54 <__udivmoddi4+0x2ac>
 8000940:	3e02      	subs	r6, #2
 8000942:	443b      	add	r3, r7
 8000944:	1a5b      	subs	r3, r3, r1
 8000946:	b281      	uxth	r1, r0
 8000948:	fbb3 f0fe 	udiv	r0, r3, lr
 800094c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000950:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000954:	fb00 f308 	mul.w	r3, r0, r8
 8000958:	428b      	cmp	r3, r1
 800095a:	d907      	bls.n	800096c <__udivmoddi4+0x1c4>
 800095c:	1879      	adds	r1, r7, r1
 800095e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000962:	d273      	bcs.n	8000a4c <__udivmoddi4+0x2a4>
 8000964:	428b      	cmp	r3, r1
 8000966:	d971      	bls.n	8000a4c <__udivmoddi4+0x2a4>
 8000968:	3802      	subs	r0, #2
 800096a:	4439      	add	r1, r7
 800096c:	1acb      	subs	r3, r1, r3
 800096e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000972:	e778      	b.n	8000866 <__udivmoddi4+0xbe>
 8000974:	f1c6 0c20 	rsb	ip, r6, #32
 8000978:	fa03 f406 	lsl.w	r4, r3, r6
 800097c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000980:	431c      	orrs	r4, r3
 8000982:	fa20 f70c 	lsr.w	r7, r0, ip
 8000986:	fa01 f306 	lsl.w	r3, r1, r6
 800098a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800098e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000992:	431f      	orrs	r7, r3
 8000994:	0c3b      	lsrs	r3, r7, #16
 8000996:	fbb1 f9fe 	udiv	r9, r1, lr
 800099a:	fa1f f884 	uxth.w	r8, r4
 800099e:	fb0e 1119 	mls	r1, lr, r9, r1
 80009a2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80009a6:	fb09 fa08 	mul.w	sl, r9, r8
 80009aa:	458a      	cmp	sl, r1
 80009ac:	fa02 f206 	lsl.w	r2, r2, r6
 80009b0:	fa00 f306 	lsl.w	r3, r0, r6
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x220>
 80009b6:	1861      	adds	r1, r4, r1
 80009b8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80009bc:	d248      	bcs.n	8000a50 <__udivmoddi4+0x2a8>
 80009be:	458a      	cmp	sl, r1
 80009c0:	d946      	bls.n	8000a50 <__udivmoddi4+0x2a8>
 80009c2:	f1a9 0902 	sub.w	r9, r9, #2
 80009c6:	4421      	add	r1, r4
 80009c8:	eba1 010a 	sub.w	r1, r1, sl
 80009cc:	b2bf      	uxth	r7, r7
 80009ce:	fbb1 f0fe 	udiv	r0, r1, lr
 80009d2:	fb0e 1110 	mls	r1, lr, r0, r1
 80009d6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80009da:	fb00 f808 	mul.w	r8, r0, r8
 80009de:	45b8      	cmp	r8, r7
 80009e0:	d907      	bls.n	80009f2 <__udivmoddi4+0x24a>
 80009e2:	19e7      	adds	r7, r4, r7
 80009e4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80009e8:	d22e      	bcs.n	8000a48 <__udivmoddi4+0x2a0>
 80009ea:	45b8      	cmp	r8, r7
 80009ec:	d92c      	bls.n	8000a48 <__udivmoddi4+0x2a0>
 80009ee:	3802      	subs	r0, #2
 80009f0:	4427      	add	r7, r4
 80009f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80009f6:	eba7 0708 	sub.w	r7, r7, r8
 80009fa:	fba0 8902 	umull	r8, r9, r0, r2
 80009fe:	454f      	cmp	r7, r9
 8000a00:	46c6      	mov	lr, r8
 8000a02:	4649      	mov	r1, r9
 8000a04:	d31a      	bcc.n	8000a3c <__udivmoddi4+0x294>
 8000a06:	d017      	beq.n	8000a38 <__udivmoddi4+0x290>
 8000a08:	b15d      	cbz	r5, 8000a22 <__udivmoddi4+0x27a>
 8000a0a:	ebb3 020e 	subs.w	r2, r3, lr
 8000a0e:	eb67 0701 	sbc.w	r7, r7, r1
 8000a12:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a16:	40f2      	lsrs	r2, r6
 8000a18:	ea4c 0202 	orr.w	r2, ip, r2
 8000a1c:	40f7      	lsrs	r7, r6
 8000a1e:	e9c5 2700 	strd	r2, r7, [r5]
 8000a22:	2600      	movs	r6, #0
 8000a24:	4631      	mov	r1, r6
 8000a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2a:	462e      	mov	r6, r5
 8000a2c:	4628      	mov	r0, r5
 8000a2e:	e70b      	b.n	8000848 <__udivmoddi4+0xa0>
 8000a30:	4606      	mov	r6, r0
 8000a32:	e6e9      	b.n	8000808 <__udivmoddi4+0x60>
 8000a34:	4618      	mov	r0, r3
 8000a36:	e6fd      	b.n	8000834 <__udivmoddi4+0x8c>
 8000a38:	4543      	cmp	r3, r8
 8000a3a:	d2e5      	bcs.n	8000a08 <__udivmoddi4+0x260>
 8000a3c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a40:	eb69 0104 	sbc.w	r1, r9, r4
 8000a44:	3801      	subs	r0, #1
 8000a46:	e7df      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a48:	4608      	mov	r0, r1
 8000a4a:	e7d2      	b.n	80009f2 <__udivmoddi4+0x24a>
 8000a4c:	4660      	mov	r0, ip
 8000a4e:	e78d      	b.n	800096c <__udivmoddi4+0x1c4>
 8000a50:	4681      	mov	r9, r0
 8000a52:	e7b9      	b.n	80009c8 <__udivmoddi4+0x220>
 8000a54:	4666      	mov	r6, ip
 8000a56:	e775      	b.n	8000944 <__udivmoddi4+0x19c>
 8000a58:	4630      	mov	r0, r6
 8000a5a:	e74a      	b.n	80008f2 <__udivmoddi4+0x14a>
 8000a5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a60:	4439      	add	r1, r7
 8000a62:	e713      	b.n	800088c <__udivmoddi4+0xe4>
 8000a64:	3802      	subs	r0, #2
 8000a66:	443c      	add	r4, r7
 8000a68:	e724      	b.n	80008b4 <__udivmoddi4+0x10c>
 8000a6a:	bf00      	nop

08000a6c <__aeabi_idiv0>:
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <cisynth_ifft>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int cisynth_ifft(void)
{
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	ed2d 8b02 	vpush	{d8}
 8000a76:	b0c7      	sub	sp, #284	; 0x11c
 8000a78:	af02      	add	r7, sp, #8
	uint8_t FreqStr[256] = {0};
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	3304      	adds	r3, #4
 8000a82:	22fc      	movs	r2, #252	; 0xfc
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f01f faf6 	bl	8020078 <memset>
	uint32_t cis_color = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	printf("Start BW ifft mode \n");
 8000a92:	4880      	ldr	r0, [pc, #512]	; (8000c94 <cisynth_ifft+0x224>)
 8000a94:	f020 fa70 	bl	8020f78 <puts>

	cisynth_ifft_SetHint();
 8000a98:	f000 f908 	bl	8000cac <cisynth_ifft_SetHint>
	synth_IfftInit();
 8000a9c:	f011 ff7e 	bl	801299c <synth_IfftInit>
	//	cis_Test();

	/* Infinite loop */
	static uint32_t start_tick;
	uint32_t latency;
	int32_t i = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	while (1)
	{
		start_tick = HAL_GetTick();
 8000aa6:	f003 fb21 	bl	80040ec <HAL_GetTick>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	4a7a      	ldr	r2, [pc, #488]	; (8000c98 <cisynth_ifft+0x228>)
 8000aae:	6013      	str	r3, [r2, #0]
		while ((synth_process_cnt) < (SAMPLING_FREQUENCY / DISPLAY_REFRESH_FPS))
 8000ab0:	e002      	b.n	8000ab8 <cisynth_ifft+0x48>
		{
			synth_AudioProcess(IFFT_MODE);
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	f012 fa76 	bl	8012fa4 <synth_AudioProcess>
		while ((synth_process_cnt) < (SAMPLING_FREQUENCY / DISPLAY_REFRESH_FPS))
 8000ab8:	4b78      	ldr	r3, [pc, #480]	; (8000c9c <cisynth_ifft+0x22c>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8000ac0:	d3f7      	bcc.n	8000ab2 <cisynth_ifft+0x42>
		}

		latency = HAL_GetTick() - start_tick;
 8000ac2:	f003 fb13 	bl	80040ec <HAL_GetTick>
 8000ac6:	4602      	mov	r2, r0
 8000ac8:	4b73      	ldr	r3, [pc, #460]	; (8000c98 <cisynth_ifft+0x228>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
		sprintf((char *)FreqStr, "%dHz", (int)((synth_process_cnt * 1000) / latency));
 8000ad2:	4b72      	ldr	r3, [pc, #456]	; (8000c9c <cisynth_ifft+0x22c>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ada:	fb02 f203 	mul.w	r2, r2, r3
 8000ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	496d      	ldr	r1, [pc, #436]	; (8000ca0 <cisynth_ifft+0x230>)
 8000aec:	4618      	mov	r0, r3
 8000aee:	f020 faa1 	bl	8021034 <siprintf>
		synth_process_cnt = 0;
 8000af2:	4b6a      	ldr	r3, [pc, #424]	; (8000c9c <cisynth_ifft+0x22c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]

		ssd1362_drawRect(0, DISPLAY_AERA1_Y1POS, DISPLAY_MAX_X_LENGTH / 2 - 1, DISPLAY_AERA1_Y2POS, 3, false);
 8000af8:	2300      	movs	r3, #0
 8000afa:	9301      	str	r3, [sp, #4]
 8000afc:	2303      	movs	r3, #3
 8000afe:	9300      	str	r3, [sp, #0]
 8000b00:	231c      	movs	r3, #28
 8000b02:	227f      	movs	r2, #127	; 0x7f
 8000b04:	210a      	movs	r1, #10
 8000b06:	2000      	movs	r0, #0
 8000b08:	f01e ff6a 	bl	801f9e0 <ssd1362_drawRect>
		ssd1362_drawRect(DISPLAY_MAX_X_LENGTH / 2 + 1, DISPLAY_AERA1_Y1POS, DISPLAY_MAX_X_LENGTH, DISPLAY_AERA1_Y2POS, 4, false);
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	9301      	str	r3, [sp, #4]
 8000b10:	2304      	movs	r3, #4
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	231c      	movs	r3, #28
 8000b16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b1a:	210a      	movs	r1, #10
 8000b1c:	2081      	movs	r0, #129	; 0x81
 8000b1e:	f01e ff5f 	bl	801f9e0 <ssd1362_drawRect>
		ssd1362_drawRect(0, DISPLAY_AERA2_Y1POS, DISPLAY_MAX_X_LENGTH, DISPLAY_AERA2_Y2POS, 3, false);
 8000b22:	2300      	movs	r3, #0
 8000b24:	9301      	str	r3, [sp, #4]
 8000b26:	2303      	movs	r3, #3
 8000b28:	9300      	str	r3, [sp, #0]
 8000b2a:	232e      	movs	r3, #46	; 0x2e
 8000b2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b30:	211d      	movs	r1, #29
 8000b32:	2000      	movs	r0, #0
 8000b34:	f01e ff54 	bl	801f9e0 <ssd1362_drawRect>
		ssd1362_drawRect(0, DISPLAY_AERA3_Y1POS, DISPLAY_MAX_X_LENGTH, DISPLAY_AERA3_Y2POS, 8, false);
 8000b38:	2300      	movs	r3, #0
 8000b3a:	9301      	str	r3, [sp, #4]
 8000b3c:	2308      	movs	r3, #8
 8000b3e:	9300      	str	r3, [sp, #0]
 8000b40:	2337      	movs	r3, #55	; 0x37
 8000b42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b46:	212f      	movs	r1, #47	; 0x2f
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f01e ff49 	bl	801f9e0 <ssd1362_drawRect>

		for (i = 0; i < ((DISPLAY_MAX_X_LENGTH / 2) - 1); i++)
 8000b4e:	2300      	movs	r3, #0
 8000b50:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000b54:	e037      	b.n	8000bc6 <cisynth_ifft+0x156>
		{
			ssd1362_drawPixel(i, DISPLAY_AERA1_Y1POS + (DISPLAY_AERAS1_HEIGHT / 2) + (pcm5102_GetAudioData(i * 2) / 2048) - 1, 10, false);
 8000b56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000b5a:	b29c      	uxth	r4, r3
 8000b5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	4618      	mov	r0, r3
 8000b64:	f01e fd8a 	bl	801f67c <pcm5102_GetAudioData>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	da01      	bge.n	8000b72 <cisynth_ifft+0x102>
 8000b6e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8000b72:	12db      	asrs	r3, r3, #11
 8000b74:	b21b      	sxth	r3, r3
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	3312      	adds	r3, #18
 8000b7a:	b299      	uxth	r1, r3
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	220a      	movs	r2, #10
 8000b80:	4620      	mov	r0, r4
 8000b82:	f01e fec3 	bl	801f90c <ssd1362_drawPixel>
			ssd1362_drawPixel(i + (DISPLAY_MAX_X_LENGTH / 2) + 1, DISPLAY_AERA1_Y1POS + (DISPLAY_AERAS1_HEIGHT / 2) + (pcm5102_GetAudioData(i * 2 + 1) / 2048) - 1, 10, false);
 8000b86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	3381      	adds	r3, #129	; 0x81
 8000b8e:	b29c      	uxth	r4, r3
 8000b90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	3301      	adds	r3, #1
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f01e fd6f 	bl	801f67c <pcm5102_GetAudioData>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	da01      	bge.n	8000ba8 <cisynth_ifft+0x138>
 8000ba4:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8000ba8:	12db      	asrs	r3, r3, #11
 8000baa:	b21b      	sxth	r3, r3
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	3312      	adds	r3, #18
 8000bb0:	b299      	uxth	r1, r3
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	220a      	movs	r2, #10
 8000bb6:	4620      	mov	r0, r4
 8000bb8:	f01e fea8 	bl	801f90c <ssd1362_drawPixel>
		for (i = 0; i < ((DISPLAY_MAX_X_LENGTH / 2) - 1); i++)
 8000bbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000bc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000bca:	2b7e      	cmp	r3, #126	; 0x7e
 8000bcc:	ddc3      	ble.n	8000b56 <cisynth_ifft+0xe6>
		}

		for (i = 0; i < (DISPLAY_MAX_X_LENGTH); i++)
 8000bce:	2300      	movs	r3, #0
 8000bd0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000bd4:	e040      	b.n	8000c58 <cisynth_ifft+0x1e8>
		{
//			cis_color = cis_GetBuffData((i * ((float)cis_GetEffectivePixelNb() / (float)DISPLAY_MAX_X_LENGTH))) >> 12;
			cis_color = synth_GetImageData((i * ((float)cis_GetEffectivePixelNb() / (float)DISPLAY_MAX_X_LENGTH))) >> 12;
 8000bd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000bda:	ee07 3a90 	vmov	s15, r3
 8000bde:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000be2:	f01d fc4b 	bl	801e47c <cis_GetEffectivePixelNb>
 8000be6:	4603      	mov	r3, r0
 8000be8:	ee07 3a90 	vmov	s15, r3
 8000bec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000bf0:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8000ca4 <cisynth_ifft+0x234>
 8000bf4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bf8:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000bfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c00:	ee17 0a90 	vmov	r0, s15
 8000c04:	f012 f826 	bl	8012c54 <synth_GetImageData>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	131b      	asrs	r3, r3, #12
 8000c0c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			ssd1362_drawPixel(DISPLAY_MAX_X_LENGTH - 1 - i, DISPLAY_AERA2_Y1POS + DISPLAY_AERAS2_HEIGHT - DISPLAY_INTER_AERAS_HEIGHT - (cis_color) - 1, 15, false);
 8000c10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8000c1a:	b298      	uxth	r0, r3
 8000c1c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	f1c3 032c 	rsb	r3, r3, #44	; 0x2c
 8000c26:	b299      	uxth	r1, r3
 8000c28:	2300      	movs	r3, #0
 8000c2a:	220f      	movs	r2, #15
 8000c2c:	f01e fe6e 	bl	801f90c <ssd1362_drawPixel>

			ssd1362_drawVLine(DISPLAY_MAX_X_LENGTH - 1 - i, DISPLAY_AERA3_Y1POS + 1, DISPLAY_AERAS3_HEIGHT - 2, cis_color, false);
 8000c30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8000c3a:	b298      	uxth	r0, r3
 8000c3c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	2200      	movs	r2, #0
 8000c44:	9200      	str	r2, [sp, #0]
 8000c46:	2206      	movs	r2, #6
 8000c48:	2130      	movs	r1, #48	; 0x30
 8000c4a:	f01e ff3a 	bl	801fac2 <ssd1362_drawVLine>
		for (i = 0; i < (DISPLAY_MAX_X_LENGTH); i++)
 8000c4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000c52:	3301      	adds	r3, #1
 8000c54:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000c58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000c5c:	2bff      	cmp	r3, #255	; 0xff
 8000c5e:	ddba      	ble.n	8000bd6 <cisynth_ifft+0x166>
		}
		ssd1362_drawRect(200, DISPLAY_HEAD_Y1POS, DISPLAY_MAX_X_LENGTH, DISPLAY_HEAD_Y2POS, 4, false);
 8000c60:	2300      	movs	r3, #0
 8000c62:	9301      	str	r3, [sp, #4]
 8000c64:	2304      	movs	r3, #4
 8000c66:	9300      	str	r3, [sp, #0]
 8000c68:	2309      	movs	r3, #9
 8000c6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c6e:	2100      	movs	r1, #0
 8000c70:	20c8      	movs	r0, #200	; 0xc8
 8000c72:	f01e feb5 	bl	801f9e0 <ssd1362_drawRect>
		ssd1362_drawString(200, 1, (int8_t*)FreqStr, 15, 8);
 8000c76:	1d3a      	adds	r2, r7, #4
 8000c78:	2308      	movs	r3, #8
 8000c7a:	9300      	str	r3, [sp, #0]
 8000c7c:	230f      	movs	r3, #15
 8000c7e:	2101      	movs	r1, #1
 8000c80:	20c8      	movs	r0, #200	; 0xc8
 8000c82:	f01f f810 	bl	801fca6 <ssd1362_drawString>
		ssd1362_writeFullBuffer();
 8000c86:	f01f f8dd 	bl	801fe44 <ssd1362_writeFullBuffer>

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000c8a:	2140      	movs	r1, #64	; 0x40
 8000c8c:	4806      	ldr	r0, [pc, #24]	; (8000ca8 <cisynth_ifft+0x238>)
 8000c8e:	f009 fd1a 	bl	800a6c6 <HAL_GPIO_TogglePin>
		start_tick = HAL_GetTick();
 8000c92:	e708      	b.n	8000aa6 <cisynth_ifft+0x36>
 8000c94:	08025b80 	.word	0x08025b80
 8000c98:	24003644 	.word	0x24003644
 8000c9c:	24004744 	.word	0x24004744
 8000ca0:	08025b94 	.word	0x08025b94
 8000ca4:	43800000 	.word	0x43800000
 8000ca8:	58021c00 	.word	0x58021c00

08000cac <cisynth_ifft_SetHint>:
 * @brief  Display Audio demo hint
 * @param  None
 * @retval None
 */
static void cisynth_ifft_SetHint(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af02      	add	r7, sp, #8
	/* Set Audio header description */
	ssd1362_clearBuffer();
 8000cb2:	f01f f899 	bl	801fde8 <ssd1362_clearBuffer>
	ssd1362_drawRect(0, DISPLAY_HEAD_Y1POS, DISPLAY_MAX_X_LENGTH, DISPLAY_HEAD_Y2POS, 4, false);
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	9301      	str	r3, [sp, #4]
 8000cba:	2304      	movs	r3, #4
 8000cbc:	9300      	str	r3, [sp, #0]
 8000cbe:	2309      	movs	r3, #9
 8000cc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f01e fe8a 	bl	801f9e0 <ssd1362_drawRect>
	ssd1362_drawString(100, 1, (int8_t *)"CISYNTH 3", 0xF, 8);
 8000ccc:	2308      	movs	r3, #8
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	230f      	movs	r3, #15
 8000cd2:	4a09      	ldr	r2, [pc, #36]	; (8000cf8 <cisynth_ifft_SetHint+0x4c>)
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	2064      	movs	r0, #100	; 0x64
 8000cd8:	f01e ffe5 	bl	801fca6 <ssd1362_drawString>
	ssd1362_drawString(0, 1, (int8_t *)"BW ifft", 0xF, 8);
 8000cdc:	2308      	movs	r3, #8
 8000cde:	9300      	str	r3, [sp, #0]
 8000ce0:	230f      	movs	r3, #15
 8000ce2:	4a06      	ldr	r2, [pc, #24]	; (8000cfc <cisynth_ifft_SetHint+0x50>)
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f01e ffdd 	bl	801fca6 <ssd1362_drawString>
	ssd1362_writeFullBuffer();
 8000cec:	f01f f8aa 	bl	801fe44 <ssd1362_writeFullBuffer>
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	08025b9c 	.word	0x08025b9c
 8000cfc:	08025ba8 	.word	0x08025ba8

08000d00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d04:	4b3f      	ldr	r3, [pc, #252]	; (8000e04 <SystemInit+0x104>)
 8000d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0a:	4a3e      	ldr	r2, [pc, #248]	; (8000e04 <SystemInit+0x104>)
 8000d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000d14:	4b3b      	ldr	r3, [pc, #236]	; (8000e04 <SystemInit+0x104>)
 8000d16:	691b      	ldr	r3, [r3, #16]
 8000d18:	4a3a      	ldr	r2, [pc, #232]	; (8000e04 <SystemInit+0x104>)
 8000d1a:	f043 0310 	orr.w	r3, r3, #16
 8000d1e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d20:	4b39      	ldr	r3, [pc, #228]	; (8000e08 <SystemInit+0x108>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f003 030f 	and.w	r3, r3, #15
 8000d28:	2b06      	cmp	r3, #6
 8000d2a:	d807      	bhi.n	8000d3c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d2c:	4b36      	ldr	r3, [pc, #216]	; (8000e08 <SystemInit+0x108>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f023 030f 	bic.w	r3, r3, #15
 8000d34:	4a34      	ldr	r2, [pc, #208]	; (8000e08 <SystemInit+0x108>)
 8000d36:	f043 0307 	orr.w	r3, r3, #7
 8000d3a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d3c:	4b33      	ldr	r3, [pc, #204]	; (8000e0c <SystemInit+0x10c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a32      	ldr	r2, [pc, #200]	; (8000e0c <SystemInit+0x10c>)
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d48:	4b30      	ldr	r3, [pc, #192]	; (8000e0c <SystemInit+0x10c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d4e:	4b2f      	ldr	r3, [pc, #188]	; (8000e0c <SystemInit+0x10c>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	492e      	ldr	r1, [pc, #184]	; (8000e0c <SystemInit+0x10c>)
 8000d54:	4b2e      	ldr	r3, [pc, #184]	; (8000e10 <SystemInit+0x110>)
 8000d56:	4013      	ands	r3, r2
 8000d58:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d5a:	4b2b      	ldr	r3, [pc, #172]	; (8000e08 <SystemInit+0x108>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f003 0308 	and.w	r3, r3, #8
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d007      	beq.n	8000d76 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d66:	4b28      	ldr	r3, [pc, #160]	; (8000e08 <SystemInit+0x108>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f023 030f 	bic.w	r3, r3, #15
 8000d6e:	4a26      	ldr	r2, [pc, #152]	; (8000e08 <SystemInit+0x108>)
 8000d70:	f043 0307 	orr.w	r3, r3, #7
 8000d74:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000d76:	4b25      	ldr	r3, [pc, #148]	; (8000e0c <SystemInit+0x10c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000d7c:	4b23      	ldr	r3, [pc, #140]	; (8000e0c <SystemInit+0x10c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000d82:	4b22      	ldr	r3, [pc, #136]	; (8000e0c <SystemInit+0x10c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d88:	4b20      	ldr	r3, [pc, #128]	; (8000e0c <SystemInit+0x10c>)
 8000d8a:	4a22      	ldr	r2, [pc, #136]	; (8000e14 <SystemInit+0x114>)
 8000d8c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d8e:	4b1f      	ldr	r3, [pc, #124]	; (8000e0c <SystemInit+0x10c>)
 8000d90:	4a21      	ldr	r2, [pc, #132]	; (8000e18 <SystemInit+0x118>)
 8000d92:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d94:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <SystemInit+0x10c>)
 8000d96:	4a21      	ldr	r2, [pc, #132]	; (8000e1c <SystemInit+0x11c>)
 8000d98:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d9a:	4b1c      	ldr	r3, [pc, #112]	; (8000e0c <SystemInit+0x10c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000da0:	4b1a      	ldr	r3, [pc, #104]	; (8000e0c <SystemInit+0x10c>)
 8000da2:	4a1e      	ldr	r2, [pc, #120]	; (8000e1c <SystemInit+0x11c>)
 8000da4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000da6:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <SystemInit+0x10c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000dac:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <SystemInit+0x10c>)
 8000dae:	4a1b      	ldr	r2, [pc, #108]	; (8000e1c <SystemInit+0x11c>)
 8000db0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000db2:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <SystemInit+0x10c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000db8:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <SystemInit+0x10c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a13      	ldr	r2, [pc, #76]	; (8000e0c <SystemInit+0x10c>)
 8000dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dc2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000dc4:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <SystemInit+0x10c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <SystemInit+0x120>)
 8000dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dce:	4a14      	ldr	r2, [pc, #80]	; (8000e20 <SystemInit+0x120>)
 8000dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000dd6:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <SystemInit+0x124>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <SystemInit+0x128>)
 8000ddc:	4013      	ands	r3, r2
 8000dde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000de2:	d202      	bcs.n	8000dea <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000de4:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <SystemInit+0x12c>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000dea:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <SystemInit+0x130>)
 8000dec:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000df0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000df2:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <SystemInit+0x104>)
 8000df4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000df8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000ed00 	.word	0xe000ed00
 8000e08:	52002000 	.word	0x52002000
 8000e0c:	58024400 	.word	0x58024400
 8000e10:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e14:	02020200 	.word	0x02020200
 8000e18:	01ff0000 	.word	0x01ff0000
 8000e1c:	01010280 	.word	0x01010280
 8000e20:	580000c0 	.word	0x580000c0
 8000e24:	5c001000 	.word	0x5c001000
 8000e28:	ffff0000 	.word	0xffff0000
 8000e2c:	51008108 	.word	0x51008108
 8000e30:	52004000 	.word	0x52004000

08000e34 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08c      	sub	sp, #48	; 0x30
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e3a:	f107 0320 	add.w	r3, r7, #32
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
 8000e54:	615a      	str	r2, [r3, #20]
 8000e56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN ADC1_Init 1 */

  uint32_t oversamplingRatio;

  oversamplingRatio = CIS_IFFT_OVERSAMPLING_RATIO;    /* Oversampling ratio */
 8000e58:	2308      	movs	r3, #8
 8000e5a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e5c:	4b38      	ldr	r3, [pc, #224]	; (8000f40 <MX_ADC1_Init+0x10c>)
 8000e5e:	4a39      	ldr	r2, [pc, #228]	; (8000f44 <MX_ADC1_Init+0x110>)
 8000e60:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000e62:	4b37      	ldr	r3, [pc, #220]	; (8000f40 <MX_ADC1_Init+0x10c>)
 8000e64:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e68:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000e6a:	4b35      	ldr	r3, [pc, #212]	; (8000f40 <MX_ADC1_Init+0x10c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e70:	4b33      	ldr	r3, [pc, #204]	; (8000f40 <MX_ADC1_Init+0x10c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e76:	4b32      	ldr	r3, [pc, #200]	; (8000f40 <MX_ADC1_Init+0x10c>)
 8000e78:	2204      	movs	r2, #4
 8000e7a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e7c:	4b30      	ldr	r3, [pc, #192]	; (8000f40 <MX_ADC1_Init+0x10c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e82:	4b2f      	ldr	r3, [pc, #188]	; (8000f40 <MX_ADC1_Init+0x10c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000e88:	4b2d      	ldr	r3, [pc, #180]	; (8000f40 <MX_ADC1_Init+0x10c>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e8e:	4b2c      	ldr	r3, [pc, #176]	; (8000f40 <MX_ADC1_Init+0x10c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC1;
 8000e94:	4b2a      	ldr	r3, [pc, #168]	; (8000f40 <MX_ADC1_Init+0x10c>)
 8000e96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e9a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000e9c:	4b28      	ldr	r3, [pc, #160]	; (8000f40 <MX_ADC1_Init+0x10c>)
 8000e9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ea2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000ea4:	4b26      	ldr	r3, [pc, #152]	; (8000f40 <MX_ADC1_Init+0x10c>)
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000eaa:	4b25      	ldr	r3, [pc, #148]	; (8000f40 <MX_ADC1_Init+0x10c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000eb0:	4b23      	ldr	r3, [pc, #140]	; (8000f40 <MX_ADC1_Init+0x10c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8000eb6:	4b22      	ldr	r3, [pc, #136]	; (8000f40 <MX_ADC1_Init+0x10c>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = oversamplingRatio;
 8000ebe:	4a20      	ldr	r2, [pc, #128]	; (8000f40 <MX_ADC1_Init+0x10c>)
 8000ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec2:	63d3      	str	r3, [r2, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000ec4:	4b1e      	ldr	r3, [pc, #120]	; (8000f40 <MX_ADC1_Init+0x10c>)
 8000ec6:	2280      	movs	r2, #128	; 0x80
 8000ec8:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_MULTI_TRIGGER;
 8000eca:	4b1d      	ldr	r3, [pc, #116]	; (8000f40 <MX_ADC1_Init+0x10c>)
 8000ecc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ed0:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_RESUMED_MODE;
 8000ed2:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <MX_ADC1_Init+0x10c>)
 8000ed4:	f240 4201 	movw	r2, #1025	; 0x401
 8000ed8:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eda:	4819      	ldr	r0, [pc, #100]	; (8000f40 <MX_ADC1_Init+0x10c>)
 8000edc:	f003 fb8e 	bl	80045fc <HAL_ADC_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000ee6:	f001 fe25 	bl	8002b34 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000eea:	2300      	movs	r3, #0
 8000eec:	623b      	str	r3, [r7, #32]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000eee:	f107 0320 	add.w	r3, r7, #32
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4812      	ldr	r0, [pc, #72]	; (8000f40 <MX_ADC1_Init+0x10c>)
 8000ef6:	f004 fc85 	bl	8005804 <HAL_ADCEx_MultiModeConfigChannel>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8000f00:	f001 fe18 	bl	8002b34 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f04:	2301      	movs	r3, #1
 8000f06:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f08:	2306      	movs	r3, #6
 8000f0a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f10:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000f14:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f16:	2304      	movs	r3, #4
 8000f18:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	4619      	mov	r1, r3
 8000f26:	4806      	ldr	r0, [pc, #24]	; (8000f40 <MX_ADC1_Init+0x10c>)
 8000f28:	f003 fdd6 	bl	8004ad8 <HAL_ADC_ConfigChannel>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8000f32:	f001 fdff 	bl	8002b34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f36:	bf00      	nop
 8000f38:	3730      	adds	r7, #48	; 0x30
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	24004bd0 	.word	0x24004bd0
 8000f44:	40022000 	.word	0x40022000

08000f48 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f4e:	463b      	mov	r3, r7
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
 8000f5c:	615a      	str	r2, [r3, #20]
 8000f5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN ADC2_Init 1 */

  uint32_t oversamplingRatio;

  oversamplingRatio = CIS_IFFT_OVERSAMPLING_RATIO;    /* Oversampling ratio */
 8000f60:	2308      	movs	r3, #8
 8000f62:	61fb      	str	r3, [r7, #28]

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000f64:	4b31      	ldr	r3, [pc, #196]	; (800102c <MX_ADC2_Init+0xe4>)
 8000f66:	4a32      	ldr	r2, [pc, #200]	; (8001030 <MX_ADC2_Init+0xe8>)
 8000f68:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000f6a:	4b30      	ldr	r3, [pc, #192]	; (800102c <MX_ADC2_Init+0xe4>)
 8000f6c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f70:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000f72:	4b2e      	ldr	r3, [pc, #184]	; (800102c <MX_ADC2_Init+0xe4>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f78:	4b2c      	ldr	r3, [pc, #176]	; (800102c <MX_ADC2_Init+0xe4>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f7e:	4b2b      	ldr	r3, [pc, #172]	; (800102c <MX_ADC2_Init+0xe4>)
 8000f80:	2204      	movs	r2, #4
 8000f82:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000f84:	4b29      	ldr	r3, [pc, #164]	; (800102c <MX_ADC2_Init+0xe4>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000f8a:	4b28      	ldr	r3, [pc, #160]	; (800102c <MX_ADC2_Init+0xe4>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000f90:	4b26      	ldr	r3, [pc, #152]	; (800102c <MX_ADC2_Init+0xe4>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f96:	4b25      	ldr	r3, [pc, #148]	; (800102c <MX_ADC2_Init+0xe4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC1;
 8000f9c:	4b23      	ldr	r3, [pc, #140]	; (800102c <MX_ADC2_Init+0xe4>)
 8000f9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fa2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000fa4:	4b21      	ldr	r3, [pc, #132]	; (800102c <MX_ADC2_Init+0xe4>)
 8000fa6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000faa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000fac:	4b1f      	ldr	r3, [pc, #124]	; (800102c <MX_ADC2_Init+0xe4>)
 8000fae:	2203      	movs	r2, #3
 8000fb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fb2:	4b1e      	ldr	r3, [pc, #120]	; (800102c <MX_ADC2_Init+0xe4>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000fb8:	4b1c      	ldr	r3, [pc, #112]	; (800102c <MX_ADC2_Init+0xe4>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = ENABLE;
 8000fbe:	4b1b      	ldr	r3, [pc, #108]	; (800102c <MX_ADC2_Init+0xe4>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Oversampling.Ratio = oversamplingRatio;
 8000fc6:	4a19      	ldr	r2, [pc, #100]	; (800102c <MX_ADC2_Init+0xe4>)
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	63d3      	str	r3, [r2, #60]	; 0x3c
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000fcc:	4b17      	ldr	r3, [pc, #92]	; (800102c <MX_ADC2_Init+0xe4>)
 8000fce:	2280      	movs	r2, #128	; 0x80
 8000fd0:	641a      	str	r2, [r3, #64]	; 0x40
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_MULTI_TRIGGER;
 8000fd2:	4b16      	ldr	r3, [pc, #88]	; (800102c <MX_ADC2_Init+0xe4>)
 8000fd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fd8:	645a      	str	r2, [r3, #68]	; 0x44
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_RESUMED_MODE;
 8000fda:	4b14      	ldr	r3, [pc, #80]	; (800102c <MX_ADC2_Init+0xe4>)
 8000fdc:	f240 4201 	movw	r2, #1025	; 0x401
 8000fe0:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000fe2:	4812      	ldr	r0, [pc, #72]	; (800102c <MX_ADC2_Init+0xe4>)
 8000fe4:	f003 fb0a 	bl	80045fc <HAL_ADC_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000fee:	f001 fda1 	bl	8002b34 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <MX_ADC2_Init+0xec>)
 8000ff4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ff6:	2306      	movs	r3, #6
 8000ff8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ffe:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001002:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001004:	2304      	movs	r3, #4
 8001006:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800100c:	2300      	movs	r3, #0
 800100e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001010:	463b      	mov	r3, r7
 8001012:	4619      	mov	r1, r3
 8001014:	4805      	ldr	r0, [pc, #20]	; (800102c <MX_ADC2_Init+0xe4>)
 8001016:	f003 fd5f 	bl	8004ad8 <HAL_ADC_ConfigChannel>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_ADC2_Init+0xdc>
  {
    Error_Handler();
 8001020:	f001 fd88 	bl	8002b34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	3720      	adds	r7, #32
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	24004af4 	.word	0x24004af4
 8001030:	40022100 	.word	0x40022100
 8001034:	04300002 	.word	0x04300002

08001038 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800103e:	463b      	mov	r3, r7
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
 800104c:	615a      	str	r2, [r3, #20]
 800104e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN ADC3_Init 1 */

  uint32_t oversamplingRatio;

  oversamplingRatio = CIS_IFFT_OVERSAMPLING_RATIO;    /* Oversampling ratio */
 8001050:	2308      	movs	r3, #8
 8001052:	61fb      	str	r3, [r7, #28]

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8001054:	4b31      	ldr	r3, [pc, #196]	; (800111c <MX_ADC3_Init+0xe4>)
 8001056:	4a32      	ldr	r2, [pc, #200]	; (8001120 <MX_ADC3_Init+0xe8>)
 8001058:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800105a:	4b30      	ldr	r3, [pc, #192]	; (800111c <MX_ADC3_Init+0xe4>)
 800105c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001060:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8001062:	4b2e      	ldr	r3, [pc, #184]	; (800111c <MX_ADC3_Init+0xe4>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001068:	4b2c      	ldr	r3, [pc, #176]	; (800111c <MX_ADC3_Init+0xe4>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800106e:	4b2b      	ldr	r3, [pc, #172]	; (800111c <MX_ADC3_Init+0xe4>)
 8001070:	2204      	movs	r2, #4
 8001072:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001074:	4b29      	ldr	r3, [pc, #164]	; (800111c <MX_ADC3_Init+0xe4>)
 8001076:	2200      	movs	r2, #0
 8001078:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800107a:	4b28      	ldr	r3, [pc, #160]	; (800111c <MX_ADC3_Init+0xe4>)
 800107c:	2200      	movs	r2, #0
 800107e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8001080:	4b26      	ldr	r3, [pc, #152]	; (800111c <MX_ADC3_Init+0xe4>)
 8001082:	2201      	movs	r2, #1
 8001084:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001086:	4b25      	ldr	r3, [pc, #148]	; (800111c <MX_ADC3_Init+0xe4>)
 8001088:	2200      	movs	r2, #0
 800108a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC1;
 800108c:	4b23      	ldr	r3, [pc, #140]	; (800111c <MX_ADC3_Init+0xe4>)
 800108e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001092:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001094:	4b21      	ldr	r3, [pc, #132]	; (800111c <MX_ADC3_Init+0xe4>)
 8001096:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800109a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800109c:	4b1f      	ldr	r3, [pc, #124]	; (800111c <MX_ADC3_Init+0xe4>)
 800109e:	2203      	movs	r2, #3
 80010a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010a2:	4b1e      	ldr	r3, [pc, #120]	; (800111c <MX_ADC3_Init+0xe4>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80010a8:	4b1c      	ldr	r3, [pc, #112]	; (800111c <MX_ADC3_Init+0xe4>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = ENABLE;
 80010ae:	4b1b      	ldr	r3, [pc, #108]	; (800111c <MX_ADC3_Init+0xe4>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Oversampling.Ratio = oversamplingRatio;
 80010b6:	4a19      	ldr	r2, [pc, #100]	; (800111c <MX_ADC3_Init+0xe4>)
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	63d3      	str	r3, [r2, #60]	; 0x3c
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 80010bc:	4b17      	ldr	r3, [pc, #92]	; (800111c <MX_ADC3_Init+0xe4>)
 80010be:	2280      	movs	r2, #128	; 0x80
 80010c0:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_MULTI_TRIGGER;
 80010c2:	4b16      	ldr	r3, [pc, #88]	; (800111c <MX_ADC3_Init+0xe4>)
 80010c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010c8:	645a      	str	r2, [r3, #68]	; 0x44
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_RESUMED_MODE;
 80010ca:	4b14      	ldr	r3, [pc, #80]	; (800111c <MX_ADC3_Init+0xe4>)
 80010cc:	f240 4201 	movw	r2, #1025	; 0x401
 80010d0:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80010d2:	4812      	ldr	r0, [pc, #72]	; (800111c <MX_ADC3_Init+0xe4>)
 80010d4:	f003 fa92 	bl	80045fc <HAL_ADC_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_ADC3_Init+0xaa>
  {
    Error_Handler();
 80010de:	f001 fd29 	bl	8002b34 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010e2:	4b10      	ldr	r3, [pc, #64]	; (8001124 <MX_ADC3_Init+0xec>)
 80010e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010e6:	2306      	movs	r3, #6
 80010e8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010ea:	2301      	movs	r3, #1
 80010ec:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010ee:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80010f2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010f4:	2304      	movs	r3, #4
 80010f6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001100:	463b      	mov	r3, r7
 8001102:	4619      	mov	r1, r3
 8001104:	4805      	ldr	r0, [pc, #20]	; (800111c <MX_ADC3_Init+0xe4>)
 8001106:	f003 fce7 	bl	8004ad8 <HAL_ADC_ConfigChannel>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8001110:	f001 fd10 	bl	8002b34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001114:	bf00      	nop
 8001116:	3720      	adds	r7, #32
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	24004c34 	.word	0x24004c34
 8001120:	58026000 	.word	0x58026000
 8001124:	04300002 	.word	0x04300002

08001128 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a91      	ldr	r2, [pc, #580]	; (800137c <HAL_ADC_MspInit+0x254>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d15e      	bne.n	80011f8 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800113a:	4b91      	ldr	r3, [pc, #580]	; (8001380 <HAL_ADC_MspInit+0x258>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	3301      	adds	r3, #1
 8001140:	4a8f      	ldr	r2, [pc, #572]	; (8001380 <HAL_ADC_MspInit+0x258>)
 8001142:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001144:	4b8e      	ldr	r3, [pc, #568]	; (8001380 <HAL_ADC_MspInit+0x258>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d10e      	bne.n	800116a <HAL_ADC_MspInit+0x42>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800114c:	4b8d      	ldr	r3, [pc, #564]	; (8001384 <HAL_ADC_MspInit+0x25c>)
 800114e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001152:	4a8c      	ldr	r2, [pc, #560]	; (8001384 <HAL_ADC_MspInit+0x25c>)
 8001154:	f043 0320 	orr.w	r3, r3, #32
 8001158:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800115c:	4b89      	ldr	r3, [pc, #548]	; (8001384 <HAL_ADC_MspInit+0x25c>)
 800115e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001162:	f003 0320 	and.w	r3, r3, #32
 8001166:	61fb      	str	r3, [r7, #28]
 8001168:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116a:	4b86      	ldr	r3, [pc, #536]	; (8001384 <HAL_ADC_MspInit+0x25c>)
 800116c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001170:	4a84      	ldr	r2, [pc, #528]	; (8001384 <HAL_ADC_MspInit+0x25c>)
 8001172:	f043 0301 	orr.w	r3, r3, #1
 8001176:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800117a:	4b82      	ldr	r3, [pc, #520]	; (8001384 <HAL_ADC_MspInit+0x25c>)
 800117c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	61bb      	str	r3, [r7, #24]
 8001186:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA0_C     ------> ADC1_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001188:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800118c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001190:	f002 fffc 	bl	800418c <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001194:	4b7c      	ldr	r3, [pc, #496]	; (8001388 <HAL_ADC_MspInit+0x260>)
 8001196:	4a7d      	ldr	r2, [pc, #500]	; (800138c <HAL_ADC_MspInit+0x264>)
 8001198:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800119a:	4b7b      	ldr	r3, [pc, #492]	; (8001388 <HAL_ADC_MspInit+0x260>)
 800119c:	2209      	movs	r2, #9
 800119e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011a0:	4b79      	ldr	r3, [pc, #484]	; (8001388 <HAL_ADC_MspInit+0x260>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011a6:	4b78      	ldr	r3, [pc, #480]	; (8001388 <HAL_ADC_MspInit+0x260>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011ac:	4b76      	ldr	r3, [pc, #472]	; (8001388 <HAL_ADC_MspInit+0x260>)
 80011ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011b2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011b4:	4b74      	ldr	r3, [pc, #464]	; (8001388 <HAL_ADC_MspInit+0x260>)
 80011b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011ba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011bc:	4b72      	ldr	r3, [pc, #456]	; (8001388 <HAL_ADC_MspInit+0x260>)
 80011be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011c2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011c4:	4b70      	ldr	r3, [pc, #448]	; (8001388 <HAL_ADC_MspInit+0x260>)
 80011c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011ca:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80011cc:	4b6e      	ldr	r3, [pc, #440]	; (8001388 <HAL_ADC_MspInit+0x260>)
 80011ce:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011d2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011d4:	4b6c      	ldr	r3, [pc, #432]	; (8001388 <HAL_ADC_MspInit+0x260>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011da:	486b      	ldr	r0, [pc, #428]	; (8001388 <HAL_ADC_MspInit+0x260>)
 80011dc:	f004 fe7a 	bl	8005ed4 <HAL_DMA_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 80011e6:	f001 fca5 	bl	8002b34 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a66      	ldr	r2, [pc, #408]	; (8001388 <HAL_ADC_MspInit+0x260>)
 80011ee:	64da      	str	r2, [r3, #76]	; 0x4c
 80011f0:	4a65      	ldr	r2, [pc, #404]	; (8001388 <HAL_ADC_MspInit+0x260>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80011f6:	e0bd      	b.n	8001374 <HAL_ADC_MspInit+0x24c>
  else if(adcHandle->Instance==ADC2)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a64      	ldr	r2, [pc, #400]	; (8001390 <HAL_ADC_MspInit+0x268>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d15e      	bne.n	80012c0 <HAL_ADC_MspInit+0x198>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001202:	4b5f      	ldr	r3, [pc, #380]	; (8001380 <HAL_ADC_MspInit+0x258>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	3301      	adds	r3, #1
 8001208:	4a5d      	ldr	r2, [pc, #372]	; (8001380 <HAL_ADC_MspInit+0x258>)
 800120a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800120c:	4b5c      	ldr	r3, [pc, #368]	; (8001380 <HAL_ADC_MspInit+0x258>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d10e      	bne.n	8001232 <HAL_ADC_MspInit+0x10a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001214:	4b5b      	ldr	r3, [pc, #364]	; (8001384 <HAL_ADC_MspInit+0x25c>)
 8001216:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800121a:	4a5a      	ldr	r2, [pc, #360]	; (8001384 <HAL_ADC_MspInit+0x25c>)
 800121c:	f043 0320 	orr.w	r3, r3, #32
 8001220:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001224:	4b57      	ldr	r3, [pc, #348]	; (8001384 <HAL_ADC_MspInit+0x25c>)
 8001226:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800122a:	f003 0320 	and.w	r3, r3, #32
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	4b54      	ldr	r3, [pc, #336]	; (8001384 <HAL_ADC_MspInit+0x25c>)
 8001234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001238:	4a52      	ldr	r2, [pc, #328]	; (8001384 <HAL_ADC_MspInit+0x25c>)
 800123a:	f043 0301 	orr.w	r3, r3, #1
 800123e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001242:	4b50      	ldr	r3, [pc, #320]	; (8001384 <HAL_ADC_MspInit+0x25c>)
 8001244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	693b      	ldr	r3, [r7, #16]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001250:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001254:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001258:	f002 ff98 	bl	800418c <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc2.Instance = DMA2_Stream1;
 800125c:	4b4d      	ldr	r3, [pc, #308]	; (8001394 <HAL_ADC_MspInit+0x26c>)
 800125e:	4a4e      	ldr	r2, [pc, #312]	; (8001398 <HAL_ADC_MspInit+0x270>)
 8001260:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001262:	4b4c      	ldr	r3, [pc, #304]	; (8001394 <HAL_ADC_MspInit+0x26c>)
 8001264:	220a      	movs	r2, #10
 8001266:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001268:	4b4a      	ldr	r3, [pc, #296]	; (8001394 <HAL_ADC_MspInit+0x26c>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800126e:	4b49      	ldr	r3, [pc, #292]	; (8001394 <HAL_ADC_MspInit+0x26c>)
 8001270:	2200      	movs	r2, #0
 8001272:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001274:	4b47      	ldr	r3, [pc, #284]	; (8001394 <HAL_ADC_MspInit+0x26c>)
 8001276:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800127a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800127c:	4b45      	ldr	r3, [pc, #276]	; (8001394 <HAL_ADC_MspInit+0x26c>)
 800127e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001282:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001284:	4b43      	ldr	r3, [pc, #268]	; (8001394 <HAL_ADC_MspInit+0x26c>)
 8001286:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800128a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800128c:	4b41      	ldr	r3, [pc, #260]	; (8001394 <HAL_ADC_MspInit+0x26c>)
 800128e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001292:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001294:	4b3f      	ldr	r3, [pc, #252]	; (8001394 <HAL_ADC_MspInit+0x26c>)
 8001296:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800129a:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800129c:	4b3d      	ldr	r3, [pc, #244]	; (8001394 <HAL_ADC_MspInit+0x26c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80012a2:	483c      	ldr	r0, [pc, #240]	; (8001394 <HAL_ADC_MspInit+0x26c>)
 80012a4:	f004 fe16 	bl	8005ed4 <HAL_DMA_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <HAL_ADC_MspInit+0x18a>
      Error_Handler();
 80012ae:	f001 fc41 	bl	8002b34 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a37      	ldr	r2, [pc, #220]	; (8001394 <HAL_ADC_MspInit+0x26c>)
 80012b6:	64da      	str	r2, [r3, #76]	; 0x4c
 80012b8:	4a36      	ldr	r2, [pc, #216]	; (8001394 <HAL_ADC_MspInit+0x26c>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6393      	str	r3, [r2, #56]	; 0x38
}
 80012be:	e059      	b.n	8001374 <HAL_ADC_MspInit+0x24c>
  else if(adcHandle->Instance==ADC3)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a35      	ldr	r2, [pc, #212]	; (800139c <HAL_ADC_MspInit+0x274>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d154      	bne.n	8001374 <HAL_ADC_MspInit+0x24c>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80012ca:	4b2e      	ldr	r3, [pc, #184]	; (8001384 <HAL_ADC_MspInit+0x25c>)
 80012cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d0:	4a2c      	ldr	r2, [pc, #176]	; (8001384 <HAL_ADC_MspInit+0x25c>)
 80012d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012da:	4b2a      	ldr	r3, [pc, #168]	; (8001384 <HAL_ADC_MspInit+0x25c>)
 80012dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e8:	4b26      	ldr	r3, [pc, #152]	; (8001384 <HAL_ADC_MspInit+0x25c>)
 80012ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ee:	4a25      	ldr	r2, [pc, #148]	; (8001384 <HAL_ADC_MspInit+0x25c>)
 80012f0:	f043 0304 	orr.w	r3, r3, #4
 80012f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012f8:	4b22      	ldr	r3, [pc, #136]	; (8001384 <HAL_ADC_MspInit+0x25c>)
 80012fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012fe:	f003 0304 	and.w	r3, r3, #4
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001306:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800130a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800130e:	f002 ff3d 	bl	800418c <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream2;
 8001312:	4b23      	ldr	r3, [pc, #140]	; (80013a0 <HAL_ADC_MspInit+0x278>)
 8001314:	4a23      	ldr	r2, [pc, #140]	; (80013a4 <HAL_ADC_MspInit+0x27c>)
 8001316:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001318:	4b21      	ldr	r3, [pc, #132]	; (80013a0 <HAL_ADC_MspInit+0x278>)
 800131a:	2273      	movs	r2, #115	; 0x73
 800131c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800131e:	4b20      	ldr	r3, [pc, #128]	; (80013a0 <HAL_ADC_MspInit+0x278>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001324:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <HAL_ADC_MspInit+0x278>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800132a:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <HAL_ADC_MspInit+0x278>)
 800132c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001330:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001332:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <HAL_ADC_MspInit+0x278>)
 8001334:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001338:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800133a:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <HAL_ADC_MspInit+0x278>)
 800133c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001340:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001342:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <HAL_ADC_MspInit+0x278>)
 8001344:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001348:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800134a:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <HAL_ADC_MspInit+0x278>)
 800134c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001350:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001352:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <HAL_ADC_MspInit+0x278>)
 8001354:	2200      	movs	r2, #0
 8001356:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001358:	4811      	ldr	r0, [pc, #68]	; (80013a0 <HAL_ADC_MspInit+0x278>)
 800135a:	f004 fdbb 	bl	8005ed4 <HAL_DMA_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <HAL_ADC_MspInit+0x240>
      Error_Handler();
 8001364:	f001 fbe6 	bl	8002b34 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a0d      	ldr	r2, [pc, #52]	; (80013a0 <HAL_ADC_MspInit+0x278>)
 800136c:	64da      	str	r2, [r3, #76]	; 0x4c
 800136e:	4a0c      	ldr	r2, [pc, #48]	; (80013a0 <HAL_ADC_MspInit+0x278>)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001374:	bf00      	nop
 8001376:	3720      	adds	r7, #32
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40022000 	.word	0x40022000
 8001380:	24003648 	.word	0x24003648
 8001384:	58024400 	.word	0x58024400
 8001388:	24004c98 	.word	0x24004c98
 800138c:	40020410 	.word	0x40020410
 8001390:	40022100 	.word	0x40022100
 8001394:	24004d10 	.word	0x24004d10
 8001398:	40020428 	.word	0x40020428
 800139c:	58026000 	.word	0x58026000
 80013a0:	24004b58 	.word	0x24004b58
 80013a4:	40020440 	.word	0x40020440

080013a8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80013ac:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <MX_CRC_Init+0x3c>)
 80013ae:	4a0e      	ldr	r2, [pc, #56]	; (80013e8 <MX_CRC_Init+0x40>)
 80013b0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80013b2:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <MX_CRC_Init+0x3c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80013b8:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <MX_CRC_Init+0x3c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <MX_CRC_Init+0x3c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80013c4:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <MX_CRC_Init+0x3c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <MX_CRC_Init+0x3c>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80013d0:	4804      	ldr	r0, [pc, #16]	; (80013e4 <MX_CRC_Init+0x3c>)
 80013d2:	f004 fc95 	bl	8005d00 <HAL_CRC_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80013dc:	f001 fbaa 	bl	8002b34 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	24004d88 	.word	0x24004d88
 80013e8:	58024c00 	.word	0x58024c00

080013ec <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a0b      	ldr	r2, [pc, #44]	; (8001428 <HAL_CRC_MspInit+0x3c>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d10e      	bne.n	800141c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80013fe:	4b0b      	ldr	r3, [pc, #44]	; (800142c <HAL_CRC_MspInit+0x40>)
 8001400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001404:	4a09      	ldr	r2, [pc, #36]	; (800142c <HAL_CRC_MspInit+0x40>)
 8001406:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800140a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800140e:	4b07      	ldr	r3, [pc, #28]	; (800142c <HAL_CRC_MspInit+0x40>)
 8001410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001414:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800141c:	bf00      	nop
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	58024c00 	.word	0x58024c00
 800142c:	58024400 	.word	0x58024400

08001430 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001436:	4b21      	ldr	r3, [pc, #132]	; (80014bc <MX_DMA_Init+0x8c>)
 8001438:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800143c:	4a1f      	ldr	r2, [pc, #124]	; (80014bc <MX_DMA_Init+0x8c>)
 800143e:	f043 0301 	orr.w	r3, r3, #1
 8001442:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001446:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <MX_DMA_Init+0x8c>)
 8001448:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001454:	4b19      	ldr	r3, [pc, #100]	; (80014bc <MX_DMA_Init+0x8c>)
 8001456:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800145a:	4a18      	ldr	r2, [pc, #96]	; (80014bc <MX_DMA_Init+0x8c>)
 800145c:	f043 0302 	orr.w	r3, r3, #2
 8001460:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001464:	4b15      	ldr	r3, [pc, #84]	; (80014bc <MX_DMA_Init+0x8c>)
 8001466:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	603b      	str	r3, [r7, #0]
 8001470:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2100      	movs	r1, #0
 8001476:	200c      	movs	r0, #12
 8001478:	f004 fb7d 	bl	8005b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800147c:	200c      	movs	r0, #12
 800147e:	f004 fb94 	bl	8005baa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001482:	2200      	movs	r2, #0
 8001484:	2100      	movs	r1, #0
 8001486:	2038      	movs	r0, #56	; 0x38
 8001488:	f004 fb75 	bl	8005b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800148c:	2038      	movs	r0, #56	; 0x38
 800148e:	f004 fb8c 	bl	8005baa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	2100      	movs	r1, #0
 8001496:	2039      	movs	r0, #57	; 0x39
 8001498:	f004 fb6d 	bl	8005b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800149c:	2039      	movs	r0, #57	; 0x39
 800149e:	f004 fb84 	bl	8005baa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2100      	movs	r1, #0
 80014a6:	203a      	movs	r0, #58	; 0x3a
 80014a8:	f004 fb65 	bl	8005b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80014ac:	203a      	movs	r0, #58	; 0x3a
 80014ae:	f004 fb7c 	bl	8005baa <HAL_NVIC_EnableIRQ>

}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	58024400 	.word	0x58024400

080014c0 <MX_FMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08e      	sub	sp, #56	; 0x38
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80014c6:	f107 031c 	add.w	r3, r7, #28
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
 80014d4:	611a      	str	r2, [r3, #16]
 80014d6:	615a      	str	r2, [r3, #20]
 80014d8:	619a      	str	r2, [r3, #24]
  FMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80014da:	463b      	mov	r3, r7
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
 80014e8:	615a      	str	r2, [r3, #20]
 80014ea:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80014ec:	4b32      	ldr	r3, [pc, #200]	; (80015b8 <MX_FMC_Init+0xf8>)
 80014ee:	4a33      	ldr	r2, [pc, #204]	; (80015bc <MX_FMC_Init+0xfc>)
 80014f0:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80014f2:	4b31      	ldr	r3, [pc, #196]	; (80015b8 <MX_FMC_Init+0xf8>)
 80014f4:	4a32      	ldr	r2, [pc, #200]	; (80015c0 <MX_FMC_Init+0x100>)
 80014f6:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80014f8:	4b2f      	ldr	r3, [pc, #188]	; (80015b8 <MX_FMC_Init+0xf8>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80014fe:	4b2e      	ldr	r3, [pc, #184]	; (80015b8 <MX_FMC_Init+0xf8>)
 8001500:	2200      	movs	r2, #0
 8001502:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001504:	4b2c      	ldr	r3, [pc, #176]	; (80015b8 <MX_FMC_Init+0xf8>)
 8001506:	2200      	movs	r2, #0
 8001508:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 800150a:	4b2b      	ldr	r3, [pc, #172]	; (80015b8 <MX_FMC_Init+0xf8>)
 800150c:	2200      	movs	r2, #0
 800150e:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001510:	4b29      	ldr	r3, [pc, #164]	; (80015b8 <MX_FMC_Init+0xf8>)
 8001512:	2200      	movs	r2, #0
 8001514:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001516:	4b28      	ldr	r3, [pc, #160]	; (80015b8 <MX_FMC_Init+0xf8>)
 8001518:	2200      	movs	r2, #0
 800151a:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800151c:	4b26      	ldr	r3, [pc, #152]	; (80015b8 <MX_FMC_Init+0xf8>)
 800151e:	2200      	movs	r2, #0
 8001520:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8001522:	4b25      	ldr	r3, [pc, #148]	; (80015b8 <MX_FMC_Init+0xf8>)
 8001524:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001528:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800152a:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <MX_FMC_Init+0xf8>)
 800152c:	2200      	movs	r2, #0
 800152e:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_ENABLE;
 8001530:	4b21      	ldr	r3, [pc, #132]	; (80015b8 <MX_FMC_Init+0xf8>)
 8001532:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001536:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001538:	4b1f      	ldr	r3, [pc, #124]	; (80015b8 <MX_FMC_Init+0xf8>)
 800153a:	2200      	movs	r2, #0
 800153c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800153e:	4b1e      	ldr	r3, [pc, #120]	; (80015b8 <MX_FMC_Init+0xf8>)
 8001540:	2200      	movs	r2, #0
 8001542:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001544:	4b1c      	ldr	r3, [pc, #112]	; (80015b8 <MX_FMC_Init+0xf8>)
 8001546:	2200      	movs	r2, #0
 8001548:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 800154a:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <MX_FMC_Init+0xf8>)
 800154c:	2200      	movs	r2, #0
 800154e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001550:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <MX_FMC_Init+0xf8>)
 8001552:	2200      	movs	r2, #0
 8001554:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 8;
 8001556:	2308      	movs	r3, #8
 8001558:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800155a:	230f      	movs	r3, #15
 800155c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 10;
 800155e:	230a      	movs	r3, #10
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 5;
 8001562:	2305      	movs	r3, #5
 8001564:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001566:	2310      	movs	r3, #16
 8001568:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800156a:	2311      	movs	r3, #17
 800156c:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800156e:	2300      	movs	r3, #0
 8001570:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001572:	2308      	movs	r3, #8
 8001574:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001576:	230f      	movs	r3, #15
 8001578:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 10;
 800157a:	230a      	movs	r3, #10
 800157c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 5;
 800157e:	2305      	movs	r3, #5
 8001580:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001582:	2310      	movs	r3, #16
 8001584:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001586:	2311      	movs	r3, #17
 8001588:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FMC_ACCESS_MODE_A;
 800158a:	2300      	movs	r3, #0
 800158c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800158e:	463a      	mov	r2, r7
 8001590:	f107 031c 	add.w	r3, r7, #28
 8001594:	4619      	mov	r1, r3
 8001596:	4808      	ldr	r0, [pc, #32]	; (80015b8 <MX_FMC_Init+0xf8>)
 8001598:	f00e f998 	bl	800f8cc <HAL_SRAM_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_FMC_Init+0xe6>
  {
    Error_Handler( );
 80015a2:	f001 fac7 	bl	8002b34 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 80015a6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80015aa:	f002 fe05 	bl	80041b8 <HAL_SetFMCMemorySwappingConfig>

  /* USER CODE END FMC_Init 2 */
}
 80015ae:	bf00      	nop
 80015b0:	3738      	adds	r7, #56	; 0x38
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	24004dac 	.word	0x24004dac
 80015bc:	52004000 	.word	0x52004000
 80015c0:	52004104 	.word	0x52004104

080015c4 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b0b6      	sub	sp, #216	; 0xd8
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ca:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
 80015d8:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80015da:	4b39      	ldr	r3, [pc, #228]	; (80016c0 <HAL_FMC_MspInit+0xfc>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d169      	bne.n	80016b6 <HAL_FMC_MspInit+0xf2>
    return;
  }
  FMC_Initialized = 1;
 80015e2:	4b37      	ldr	r3, [pc, #220]	; (80016c0 <HAL_FMC_MspInit+0xfc>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015e8:	f107 0308 	add.w	r3, r7, #8
 80015ec:	22bc      	movs	r2, #188	; 0xbc
 80015ee:	2100      	movs	r1, #0
 80015f0:	4618      	mov	r0, r3
 80015f2:	f01e fd41 	bl	8020078 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80015f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015fa:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80015fc:	2300      	movs	r3, #0
 80015fe:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001600:	f107 0308 	add.w	r3, r7, #8
 8001604:	4618      	mov	r0, r3
 8001606:	f00a f8c1 	bl	800b78c <HAL_RCCEx_PeriphCLKConfig>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <HAL_FMC_MspInit+0x50>
    {
      Error_Handler();
 8001610:	f001 fa90 	bl	8002b34 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001614:	4b2b      	ldr	r3, [pc, #172]	; (80016c4 <HAL_FMC_MspInit+0x100>)
 8001616:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800161a:	4a2a      	ldr	r2, [pc, #168]	; (80016c4 <HAL_FMC_MspInit+0x100>)
 800161c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001620:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001624:	4b27      	ldr	r3, [pc, #156]	; (80016c4 <HAL_FMC_MspInit+0x100>)
 8001626:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800162a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE10   ------> FMC_D7
  PE9   ------> FMC_D6
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4
 8001632:	f24c 03b3 	movw	r3, #49331	; 0xc0b3
 8001636:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163a:	2302      	movs	r3, #2
 800163c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001646:	2303      	movs	r3, #3
 8001648:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800164c:	230c      	movs	r3, #12
 800164e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001652:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001656:	4619      	mov	r1, r3
 8001658:	481b      	ldr	r0, [pc, #108]	; (80016c8 <HAL_FMC_MspInit+0x104>)
 800165a:	f008 fe6b 	bl	800a334 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800165e:	2301      	movs	r3, #1
 8001660:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001664:	2302      	movs	r3, #2
 8001666:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001670:	2303      	movs	r3, #3
 8001672:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001676:	230c      	movs	r3, #12
 8001678:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800167c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001680:	4619      	mov	r1, r3
 8001682:	4812      	ldr	r0, [pc, #72]	; (80016cc <HAL_FMC_MspInit+0x108>)
 8001684:	f008 fe56 	bl	800a334 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_9;
 8001688:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800168c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001690:	2302      	movs	r3, #2
 8001692:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169c:	2303      	movs	r3, #3
 800169e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016a2:	230c      	movs	r3, #12
 80016a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016a8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80016ac:	4619      	mov	r1, r3
 80016ae:	4808      	ldr	r0, [pc, #32]	; (80016d0 <HAL_FMC_MspInit+0x10c>)
 80016b0:	f008 fe40 	bl	800a334 <HAL_GPIO_Init>
 80016b4:	e000      	b.n	80016b8 <HAL_FMC_MspInit+0xf4>
    return;
 80016b6:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80016b8:	37d8      	adds	r7, #216	; 0xd8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	2400364c 	.word	0x2400364c
 80016c4:	58024400 	.word	0x58024400
 80016c8:	58020c00 	.word	0x58020c00
 80016cc:	58021400 	.word	0x58021400
 80016d0:	58021000 	.word	0x58021000

080016d4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80016dc:	f7ff ff72 	bl	80015c4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08e      	sub	sp, #56	; 0x38
 80016ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	60da      	str	r2, [r3, #12]
 80016fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fe:	4b96      	ldr	r3, [pc, #600]	; (8001958 <MX_GPIO_Init+0x270>)
 8001700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001704:	4a94      	ldr	r2, [pc, #592]	; (8001958 <MX_GPIO_Init+0x270>)
 8001706:	f043 0302 	orr.w	r3, r3, #2
 800170a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800170e:	4b92      	ldr	r3, [pc, #584]	; (8001958 <MX_GPIO_Init+0x270>)
 8001710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	623b      	str	r3, [r7, #32]
 800171a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800171c:	4b8e      	ldr	r3, [pc, #568]	; (8001958 <MX_GPIO_Init+0x270>)
 800171e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001722:	4a8d      	ldr	r2, [pc, #564]	; (8001958 <MX_GPIO_Init+0x270>)
 8001724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001728:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800172c:	4b8a      	ldr	r3, [pc, #552]	; (8001958 <MX_GPIO_Init+0x270>)
 800172e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001736:	61fb      	str	r3, [r7, #28]
 8001738:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800173a:	4b87      	ldr	r3, [pc, #540]	; (8001958 <MX_GPIO_Init+0x270>)
 800173c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001740:	4a85      	ldr	r2, [pc, #532]	; (8001958 <MX_GPIO_Init+0x270>)
 8001742:	f043 0308 	orr.w	r3, r3, #8
 8001746:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800174a:	4b83      	ldr	r3, [pc, #524]	; (8001958 <MX_GPIO_Init+0x270>)
 800174c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001750:	f003 0308 	and.w	r3, r3, #8
 8001754:	61bb      	str	r3, [r7, #24]
 8001756:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001758:	4b7f      	ldr	r3, [pc, #508]	; (8001958 <MX_GPIO_Init+0x270>)
 800175a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800175e:	4a7e      	ldr	r2, [pc, #504]	; (8001958 <MX_GPIO_Init+0x270>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001768:	4b7b      	ldr	r3, [pc, #492]	; (8001958 <MX_GPIO_Init+0x270>)
 800176a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	617b      	str	r3, [r7, #20]
 8001774:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001776:	4b78      	ldr	r3, [pc, #480]	; (8001958 <MX_GPIO_Init+0x270>)
 8001778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800177c:	4a76      	ldr	r2, [pc, #472]	; (8001958 <MX_GPIO_Init+0x270>)
 800177e:	f043 0310 	orr.w	r3, r3, #16
 8001782:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001786:	4b74      	ldr	r3, [pc, #464]	; (8001958 <MX_GPIO_Init+0x270>)
 8001788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800178c:	f003 0310 	and.w	r3, r3, #16
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001794:	4b70      	ldr	r3, [pc, #448]	; (8001958 <MX_GPIO_Init+0x270>)
 8001796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800179a:	4a6f      	ldr	r2, [pc, #444]	; (8001958 <MX_GPIO_Init+0x270>)
 800179c:	f043 0304 	orr.w	r3, r3, #4
 80017a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017a4:	4b6c      	ldr	r3, [pc, #432]	; (8001958 <MX_GPIO_Init+0x270>)
 80017a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017aa:	f003 0304 	and.w	r3, r3, #4
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017b2:	4b69      	ldr	r3, [pc, #420]	; (8001958 <MX_GPIO_Init+0x270>)
 80017b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b8:	4a67      	ldr	r2, [pc, #412]	; (8001958 <MX_GPIO_Init+0x270>)
 80017ba:	f043 0320 	orr.w	r3, r3, #32
 80017be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017c2:	4b65      	ldr	r3, [pc, #404]	; (8001958 <MX_GPIO_Init+0x270>)
 80017c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017c8:	f003 0320 	and.w	r3, r3, #32
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017d0:	4b61      	ldr	r3, [pc, #388]	; (8001958 <MX_GPIO_Init+0x270>)
 80017d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017d6:	4a60      	ldr	r2, [pc, #384]	; (8001958 <MX_GPIO_Init+0x270>)
 80017d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017e0:	4b5d      	ldr	r3, [pc, #372]	; (8001958 <MX_GPIO_Init+0x270>)
 80017e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_RESET_Pin|MEMS_CS_Pin, GPIO_PIN_RESET);
 80017ee:	2200      	movs	r2, #0
 80017f0:	f44f 7140 	mov.w	r1, #768	; 0x300
 80017f4:	4859      	ldr	r0, [pc, #356]	; (800195c <MX_GPIO_Init+0x274>)
 80017f6:	f008 ff4d 	bl	800a694 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CIS_RS_GPIO_Port, CIS_RS_Pin, GPIO_PIN_RESET);
 80017fa:	2200      	movs	r2, #0
 80017fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001800:	4857      	ldr	r0, [pc, #348]	; (8001960 <MX_GPIO_Init+0x278>)
 8001802:	f008 ff47 	bl	800a694 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DAC_FLT_Pin|DAC_XSMT_Pin, GPIO_PIN_RESET);
 8001806:	2200      	movs	r2, #0
 8001808:	f242 0104 	movw	r1, #8196	; 0x2004
 800180c:	4855      	ldr	r0, [pc, #340]	; (8001964 <MX_GPIO_Init+0x27c>)
 800180e:	f008 ff41 	bl	800a694 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, EN_12V_Pin|EN_5V_Pin, GPIO_PIN_RESET);
 8001812:	2200      	movs	r2, #0
 8001814:	2124      	movs	r1, #36	; 0x24
 8001816:	4854      	ldr	r0, [pc, #336]	; (8001968 <MX_GPIO_Init+0x280>)
 8001818:	f008 ff3c 	bl	800a694 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DAC_FMT_GPIO_Port, DAC_FMT_Pin, GPIO_PIN_RESET);
 800181c:	2200      	movs	r2, #0
 800181e:	2140      	movs	r1, #64	; 0x40
 8001820:	4852      	ldr	r0, [pc, #328]	; (800196c <MX_GPIO_Init+0x284>)
 8001822:	f008 ff37 	bl	800a694 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_Pin|DAC_DEMP_Pin, GPIO_PIN_RESET);
 8001826:	2200      	movs	r2, #0
 8001828:	2148      	movs	r1, #72	; 0x48
 800182a:	4851      	ldr	r0, [pc, #324]	; (8001970 <MX_GPIO_Init+0x288>)
 800182c:	f008 ff32 	bl	800a694 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = OLED_RESET_Pin|MEMS_CS_Pin;
 8001830:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001836:	2301      	movs	r3, #1
 8001838:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183e:	2303      	movs	r3, #3
 8001840:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001846:	4619      	mov	r1, r3
 8001848:	4844      	ldr	r0, [pc, #272]	; (800195c <MX_GPIO_Init+0x274>)
 800184a:	f008 fd73 	bl	800a334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_FSYNC_Pin;
 800184e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001854:	2300      	movs	r3, #0
 8001856:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MEMS_FSYNC_GPIO_Port, &GPIO_InitStruct);
 800185c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001860:	4619      	mov	r1, r3
 8001862:	483f      	ldr	r0, [pc, #252]	; (8001960 <MX_GPIO_Init+0x278>)
 8001864:	f008 fd66 	bl	800a334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CIS_RS_Pin;
 8001868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186e:	2301      	movs	r3, #1
 8001870:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001876:	2303      	movs	r3, #3
 8001878:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CIS_RS_GPIO_Port, &GPIO_InitStruct);
 800187a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800187e:	4619      	mov	r1, r3
 8001880:	4837      	ldr	r0, [pc, #220]	; (8001960 <MX_GPIO_Init+0x278>)
 8001882:	f008 fd57 	bl	800a334 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DAC_FLT_Pin|DAC_XSMT_Pin;
 8001886:	f242 0304 	movw	r3, #8196	; 0x2004
 800188a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188c:	2301      	movs	r3, #1
 800188e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001894:	2300      	movs	r3, #0
 8001896:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001898:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800189c:	4619      	mov	r1, r3
 800189e:	4831      	ldr	r0, [pc, #196]	; (8001964 <MX_GPIO_Init+0x27c>)
 80018a0:	f008 fd48 	bl	800a334 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = EN_12V_Pin|EN_5V_Pin;
 80018a4:	2324      	movs	r3, #36	; 0x24
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a8:	2301      	movs	r3, #1
 80018aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b0:	2300      	movs	r3, #0
 80018b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b8:	4619      	mov	r1, r3
 80018ba:	482b      	ldr	r0, [pc, #172]	; (8001968 <MX_GPIO_Init+0x280>)
 80018bc:	f008 fd3a 	bl	800a334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_FMT_Pin;
 80018c0:	2340      	movs	r3, #64	; 0x40
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c4:	2301      	movs	r3, #1
 80018c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018cc:	2300      	movs	r3, #0
 80018ce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DAC_FMT_GPIO_Port, &GPIO_InitStruct);
 80018d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d4:	4619      	mov	r1, r3
 80018d6:	4825      	ldr	r0, [pc, #148]	; (800196c <MX_GPIO_Init+0x284>)
 80018d8:	f008 fd2c 	bl	800a334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT_Pin;
 80018dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018e2:	4b24      	ldr	r3, [pc, #144]	; (8001974 <MX_GPIO_Init+0x28c>)
 80018e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MEMS_INT_GPIO_Port, &GPIO_InitStruct);
 80018ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ee:	4619      	mov	r1, r3
 80018f0:	4821      	ldr	r0, [pc, #132]	; (8001978 <MX_GPIO_Init+0x290>)
 80018f2:	f008 fd1f 	bl	800a334 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = SW_4_Pin|SW_5_Pin|SW_1_Pin|SW_3_Pin
 80018f6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
                          |SW_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018fc:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <MX_GPIO_Init+0x28c>)
 80018fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001908:	4619      	mov	r1, r3
 800190a:	481c      	ldr	r0, [pc, #112]	; (800197c <MX_GPIO_Init+0x294>)
 800190c:	f008 fd12 	bl	800a334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001910:	2340      	movs	r3, #64	; 0x40
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001914:	2301      	movs	r3, #1
 8001916:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191c:	2303      	movs	r3, #3
 800191e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001924:	4619      	mov	r1, r3
 8001926:	4812      	ldr	r0, [pc, #72]	; (8001970 <MX_GPIO_Init+0x288>)
 8001928:	f008 fd04 	bl	800a334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_DEMP_Pin;
 800192c:	2308      	movs	r3, #8
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001930:	2301      	movs	r3, #1
 8001932:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	2300      	movs	r3, #0
 800193a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DAC_DEMP_GPIO_Port, &GPIO_InitStruct);
 800193c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001940:	4619      	mov	r1, r3
 8001942:	480b      	ldr	r0, [pc, #44]	; (8001970 <MX_GPIO_Init+0x288>)
 8001944:	f008 fcf6 	bl	800a334 <HAL_GPIO_Init>

  /**/
  HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB8_FMP);
 8001948:	2040      	movs	r0, #64	; 0x40
 800194a:	f008 ff05 	bl	800a758 <HAL_I2CEx_EnableFastModePlus>

}
 800194e:	bf00      	nop
 8001950:	3738      	adds	r7, #56	; 0x38
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	58024400 	.word	0x58024400
 800195c:	58020400 	.word	0x58020400
 8001960:	58020000 	.word	0x58020000
 8001964:	58020800 	.word	0x58020800
 8001968:	58021800 	.word	0x58021800
 800196c:	58021400 	.word	0x58021400
 8001970:	58021c00 	.word	0x58021c00
 8001974:	11110000 	.word	0x11110000
 8001978:	58020c00 	.word	0x58020c00
 800197c:	58021000 	.word	0x58021000

08001980 <lwiperf_list_add>:


/** Add an iperf session to the 'active' list */
static void
lwiperf_list_add(lwiperf_state_base_t *item)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  item->next = lwiperf_all_connections;
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <lwiperf_list_add+0x24>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	601a      	str	r2, [r3, #0]
  lwiperf_all_connections = item;
 8001990:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <lwiperf_list_add+0x24>)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6013      	str	r3, [r2, #0]
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	24003650 	.word	0x24003650

080019a8 <lwiperf_list_remove>:

/** Remove an iperf session from the 'active' list */
static void
lwiperf_list_remove(lwiperf_state_base_t *item)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  lwiperf_state_base_t *prev = NULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60fb      	str	r3, [r7, #12]
  lwiperf_state_base_t *iter;
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 80019b4:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <lwiperf_list_remove+0x78>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	e029      	b.n	8001a10 <lwiperf_list_remove+0x68>
    if (iter == item) {
 80019bc:	68ba      	ldr	r2, [r7, #8]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d120      	bne.n	8001a06 <lwiperf_list_remove+0x5e>
      if (prev == NULL) {
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d104      	bne.n	80019d4 <lwiperf_list_remove+0x2c>
        lwiperf_all_connections = iter->next;
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a14      	ldr	r2, [pc, #80]	; (8001a20 <lwiperf_list_remove+0x78>)
 80019d0:	6013      	str	r3, [r2, #0]
 80019d2:	e003      	b.n	80019dc <lwiperf_list_remove+0x34>
      } else {
        prev->next = iter->next;
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	601a      	str	r2, [r3, #0]
      }
      /* @debug: ensure this item is listed only once */
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	e00c      	b.n	80019fe <lwiperf_list_remove+0x56>
        LWIP_ASSERT("duplicate entry", iter != item);
 80019e4:	68ba      	ldr	r2, [r7, #8]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d105      	bne.n	80019f8 <lwiperf_list_remove+0x50>
 80019ec:	4b0d      	ldr	r3, [pc, #52]	; (8001a24 <lwiperf_list_remove+0x7c>)
 80019ee:	22d0      	movs	r2, #208	; 0xd0
 80019f0:	490d      	ldr	r1, [pc, #52]	; (8001a28 <lwiperf_list_remove+0x80>)
 80019f2:	480e      	ldr	r0, [pc, #56]	; (8001a2c <lwiperf_list_remove+0x84>)
 80019f4:	f01f fa3a 	bl	8020e6c <iprintf>
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1ef      	bne.n	80019e4 <lwiperf_list_remove+0x3c>
      }
      break;
 8001a04:	e008      	b.n	8001a18 <lwiperf_list_remove+0x70>
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1d2      	bne.n	80019bc <lwiperf_list_remove+0x14>
    }
  }
}
 8001a16:	bf00      	nop
 8001a18:	bf00      	nop
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	24003650 	.word	0x24003650
 8001a24:	08025bb0 	.word	0x08025bb0
 8001a28:	08025bc8 	.word	0x08025bc8
 8001a2c:	08025bd8 	.word	0x08025bd8

08001a30 <lwiperf_list_find>:

static lwiperf_state_base_t *
lwiperf_list_find(lwiperf_state_base_t *item)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  lwiperf_state_base_t *iter;
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <lwiperf_list_find+0x38>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	e008      	b.n	8001a52 <lwiperf_list_find+0x22>
    if (iter == item) {
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d101      	bne.n	8001a4c <lwiperf_list_find+0x1c>
      return item;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	e006      	b.n	8001a5a <lwiperf_list_find+0x2a>
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1f3      	bne.n	8001a40 <lwiperf_list_find+0x10>
    }
  }
  return NULL;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	24003650 	.word	0x24003650

08001a6c <lwip_tcp_conn_report>:

/** Call the report function of an iperf tcp session */
static void
lwip_tcp_conn_report(lwiperf_state_tcp_t *conn, enum lwiperf_report_type report_type)
{
 8001a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a6e:	b08d      	sub	sp, #52	; 0x34
 8001a70:	af06      	add	r7, sp, #24
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	460b      	mov	r3, r1
 8001a76:	70fb      	strb	r3, [r7, #3]
  if ((conn != NULL) && (conn->report_fn != NULL)) {
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d038      	beq.n	8001af0 <lwip_tcp_conn_report+0x84>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d034      	beq.n	8001af0 <lwip_tcp_conn_report+0x84>
    u32_t now, duration_ms, bandwidth_kbitpsec;
    now = sys_now();
 8001a86:	f010 feaf 	bl	80127e8 <sys_now>
 8001a8a:	6138      	str	r0, [r7, #16]
    duration_ms = now - conn->time_started;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	60fb      	str	r3, [r7, #12]
    if (duration_ms == 0) {
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d102      	bne.n	8001aa2 <lwip_tcp_conn_report+0x36>
      bandwidth_kbitpsec = 0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	e006      	b.n	8001ab0 <lwip_tcp_conn_report+0x44>
    } else {
      bandwidth_kbitpsec = (conn->bytes_transferred / duration_ms) * 8U;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aac:	00db      	lsls	r3, r3, #3
 8001aae:	617b      	str	r3, [r7, #20]
    }
    conn->report_fn(conn->report_arg, report_type,
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	699c      	ldr	r4, [r3, #24]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69dd      	ldr	r5, [r3, #28]
                    &conn->conn_pcb->local_ip, conn->conn_pcb->local_port,
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	469e      	mov	lr, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	691b      	ldr	r3, [r3, #16]
    conn->report_fn(conn->report_arg, report_type,
 8001ac2:	f8b3 c016 	ldrh.w	ip, [r3, #22]
                    &conn->conn_pcb->remote_ip, conn->conn_pcb->remote_port,
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	3304      	adds	r3, #4
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	6912      	ldr	r2, [r2, #16]
    conn->report_fn(conn->report_arg, report_type,
 8001ad0:	8b12      	ldrh	r2, [r2, #24]
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8001ad6:	78fe      	ldrb	r6, [r7, #3]
 8001ad8:	6978      	ldr	r0, [r7, #20]
 8001ada:	9004      	str	r0, [sp, #16]
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	9003      	str	r0, [sp, #12]
 8001ae0:	9102      	str	r1, [sp, #8]
 8001ae2:	9201      	str	r2, [sp, #4]
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	4663      	mov	r3, ip
 8001ae8:	4672      	mov	r2, lr
 8001aea:	4631      	mov	r1, r6
 8001aec:	4628      	mov	r0, r5
 8001aee:	47a0      	blx	r4
                    conn->bytes_transferred, duration_ms, bandwidth_kbitpsec);
  }
}
 8001af0:	bf00      	nop
 8001af2:	371c      	adds	r7, #28
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001af8 <lwiperf_tcp_close>:

/** Close an iperf tcp session */
static void
lwiperf_tcp_close(lwiperf_state_tcp_t *conn, enum lwiperf_report_type report_type)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	70fb      	strb	r3, [r7, #3]
  err_t err;

  lwiperf_list_remove(&conn->base);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff ff4e 	bl	80019a8 <lwiperf_list_remove>
  lwip_tcp_conn_report(conn, report_type);
 8001b0c:	78fb      	ldrb	r3, [r7, #3]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff ffab 	bl	8001a6c <lwip_tcp_conn_report>
  if (conn->conn_pcb != NULL) {
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d02f      	beq.n	8001b7e <lwiperf_tcp_close+0x86>
    tcp_arg(conn->conn_pcb, NULL);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	2100      	movs	r1, #0
 8001b24:	4618      	mov	r0, r3
 8001b26:	f017 fb03 	bl	8019130 <tcp_arg>
    tcp_poll(conn->conn_pcb, NULL, 0);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2100      	movs	r1, #0
 8001b32:	4618      	mov	r0, r3
 8001b34:	f017 fb8c 	bl	8019250 <tcp_poll>
    tcp_sent(conn->conn_pcb, NULL);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f017 fb2a 	bl	8019198 <tcp_sent>
    tcp_recv(conn->conn_pcb, NULL);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	2100      	movs	r1, #0
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f017 fb02 	bl	8019154 <tcp_recv>
    tcp_err(conn->conn_pcb, NULL);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	2100      	movs	r1, #0
 8001b56:	4618      	mov	r0, r3
 8001b58:	f017 fb40 	bl	80191dc <tcp_err>
    err = tcp_close(conn->conn_pcb);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f016 f843 	bl	8017bec <tcp_close>
 8001b66:	4603      	mov	r3, r0
 8001b68:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8001b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d017      	beq.n	8001ba2 <lwiperf_tcp_close+0xaa>
      /* don't want to wait for free memory here... */
      tcp_abort(conn->conn_pcb);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f016 f922 	bl	8017dc0 <tcp_abort>
 8001b7c:	e011      	b.n	8001ba2 <lwiperf_tcp_close+0xaa>
    }
  } else {
    /* no conn pcb, this is the listener pcb */
    err = tcp_close(conn->server_pcb);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f016 f832 	bl	8017bec <tcp_close>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	73fb      	strb	r3, [r7, #15]
    LWIP_ASSERT("error", err == ERR_OK);
 8001b8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d006      	beq.n	8001ba2 <lwiperf_tcp_close+0xaa>
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <lwiperf_tcp_close+0xb8>)
 8001b96:	f240 120d 	movw	r2, #269	; 0x10d
 8001b9a:	4906      	ldr	r1, [pc, #24]	; (8001bb4 <lwiperf_tcp_close+0xbc>)
 8001b9c:	4806      	ldr	r0, [pc, #24]	; (8001bb8 <lwiperf_tcp_close+0xc0>)
 8001b9e:	f01f f965 	bl	8020e6c <iprintf>
  }
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f014 f8f0 	bl	8015d88 <mem_free>
}
 8001ba8:	bf00      	nop
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	08025bb0 	.word	0x08025bb0
 8001bb4:	08025c00 	.word	0x08025c00
 8001bb8:	08025bd8 	.word	0x08025bd8

08001bbc <lwiperf_tcp_client_send_more>:

/** Try to send more data on an iperf tcp session */
static err_t
lwiperf_tcp_client_send_more(lwiperf_state_tcp_t *conn)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08c      	sub	sp, #48	; 0x30
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  u16_t txlen;
  u16_t txlen_max;
  void *txptr;
  u8_t apiflags;

  LWIP_ASSERT("conn invalid", (conn != NULL) && conn->base.tcp && (conn->base.server == 0));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d007      	beq.n	8001bda <lwiperf_tcp_client_send_more+0x1e>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	791b      	ldrb	r3, [r3, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <lwiperf_tcp_client_send_more+0x1e>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	795b      	ldrb	r3, [r3, #5]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d006      	beq.n	8001be8 <lwiperf_tcp_client_send_more+0x2c>
 8001bda:	4b61      	ldr	r3, [pc, #388]	; (8001d60 <lwiperf_tcp_client_send_more+0x1a4>)
 8001bdc:	f240 121d 	movw	r2, #285	; 0x11d
 8001be0:	4960      	ldr	r1, [pc, #384]	; (8001d64 <lwiperf_tcp_client_send_more+0x1a8>)
 8001be2:	4861      	ldr	r0, [pc, #388]	; (8001d68 <lwiperf_tcp_client_send_more+0x1ac>)
 8001be4:	f01f f942 	bl	8020e6c <iprintf>

  do {
    send_more = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (conn->settings.amount & PP_HTONL(0x80000000)) {
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d01f      	beq.n	8001c38 <lwiperf_tcp_client_send_more+0x7c>
      /* this session is time-limited */
      u32_t now = sys_now();
 8001bf8:	f010 fdf6 	bl	80127e8 <sys_now>
 8001bfc:	61b8      	str	r0, [r7, #24]
      u32_t diff_ms = now - conn->time_started;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	617b      	str	r3, [r7, #20]
      u32_t time = (u32_t) - (s32_t)lwip_htonl(conn->settings.amount);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f011 fbb0 	bl	8013372 <lwip_htonl>
 8001c12:	4603      	mov	r3, r0
 8001c14:	425b      	negs	r3, r3
 8001c16:	613b      	str	r3, [r7, #16]
      u32_t time_ms = time * 10;
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	60fb      	str	r3, [r7, #12]
      if (diff_ms >= time_ms) {
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d316      	bcc.n	8001c5a <lwiperf_tcp_client_send_more+0x9e>
        /* time specified by the client is over -> close the connection */
        lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_CLIENT);
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff ff62 	bl	8001af8 <lwiperf_tcp_close>
        return ERR_OK;
 8001c34:	2300      	movs	r3, #0
 8001c36:	e08e      	b.n	8001d56 <lwiperf_tcp_client_send_more+0x19a>
      }
    } else {
      /* this session is byte-limited */
      u32_t amount_bytes = lwip_htonl(conn->settings.amount);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f011 fb98 	bl	8013372 <lwip_htonl>
 8001c42:	61f8      	str	r0, [r7, #28]
      /* @todo: this can send up to 1*MSS more than requested... */
      if (amount_bytes >= conn->bytes_transferred) {
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c48:	69fa      	ldr	r2, [r7, #28]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d305      	bcc.n	8001c5a <lwiperf_tcp_client_send_more+0x9e>
        /* all requested bytes transferred -> close the connection */
        lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_CLIENT);
 8001c4e:	2101      	movs	r1, #1
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff ff51 	bl	8001af8 <lwiperf_tcp_close>
        return ERR_OK;
 8001c56:	2300      	movs	r3, #0
 8001c58:	e07d      	b.n	8001d56 <lwiperf_tcp_client_send_more+0x19a>
      }
    }

    if (conn->bytes_transferred < 24) {
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5e:	2b17      	cmp	r3, #23
 8001c60:	d810      	bhi.n	8001c84 <lwiperf_tcp_client_send_more+0xc8>
      /* transmit the settings a first time */
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred];
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6c:	4413      	add	r3, r2
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
      txlen_max = (u16_t)(24 - conn->bytes_transferred);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	f1c3 0318 	rsb	r3, r3, #24
 8001c7a:	853b      	strh	r3, [r7, #40]	; 0x28
      apiflags = TCP_WRITE_FLAG_COPY;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001c82:	e034      	b.n	8001cee <lwiperf_tcp_client_send_more+0x132>
    } else if (conn->bytes_transferred < 48) {
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	2b2f      	cmp	r3, #47	; 0x2f
 8001c8a:	d813      	bhi.n	8001cb4 <lwiperf_tcp_client_send_more+0xf8>
      /* transmit the settings a second time */
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred - 24];
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c96:	3b18      	subs	r3, #24
 8001c98:	4413      	add	r3, r2
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
      txlen_max = (u16_t)(48 - conn->bytes_transferred);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	f1c3 0330 	rsb	r3, r3, #48	; 0x30
 8001ca6:	853b      	strh	r3, [r7, #40]	; 0x28
      apiflags = TCP_WRITE_FLAG_COPY | TCP_WRITE_FLAG_MORE;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      send_more = 1;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cb2:	e01c      	b.n	8001cee <lwiperf_tcp_client_send_more+0x132>
    } else {
      /* transmit data */
      /* @todo: every x bytes, transmit the settings again */
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001cb8:	4b2c      	ldr	r3, [pc, #176]	; (8001d6c <lwiperf_tcp_client_send_more+0x1b0>)
 8001cba:	fba3 2301 	umull	r2, r3, r3, r1
 8001cbe:	08da      	lsrs	r2, r3, #3
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	1aca      	subs	r2, r1, r3
 8001cca:	4b29      	ldr	r3, [pc, #164]	; (8001d70 <lwiperf_tcp_client_send_more+0x1b4>)
 8001ccc:	4413      	add	r3, r2
 8001cce:	627b      	str	r3, [r7, #36]	; 0x24
      txlen_max = TCP_MSS;
 8001cd0:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001cd4:	853b      	strh	r3, [r7, #40]	; 0x28
      if (conn->bytes_transferred == 48) { /* @todo: fix this for intermediate settings, too */
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cda:	2b30      	cmp	r3, #48	; 0x30
 8001cdc:	d102      	bne.n	8001ce4 <lwiperf_tcp_client_send_more+0x128>
        txlen_max = TCP_MSS - 24;
 8001cde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ce2:	853b      	strh	r3, [r7, #40]	; 0x28
      }
      apiflags = 0; /* no copying needed */
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      send_more = 1;
 8001cea:	2301      	movs	r3, #1
 8001cec:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    txlen = txlen_max;
 8001cee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001cf0:	857b      	strh	r3, [r7, #42]	; 0x2a
    do {
      err = tcp_write(conn->conn_pcb, txptr, txlen, apiflags);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6918      	ldr	r0, [r3, #16]
 8001cf6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001cfa:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001cfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cfe:	f01a f955 	bl	801bfac <tcp_write>
 8001d02:	4603      	mov	r3, r0
 8001d04:	72fb      	strb	r3, [r7, #11]
      if (err ==  ERR_MEM) {
 8001d06:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001d0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d0e:	d102      	bne.n	8001d16 <lwiperf_tcp_client_send_more+0x15a>
        txlen /= 2;
 8001d10:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d12:	085b      	lsrs	r3, r3, #1
 8001d14:	857b      	strh	r3, [r7, #42]	; 0x2a
      }
    } while ((err == ERR_MEM) && (txlen >= (TCP_MSS / 2)));
 8001d16:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001d1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d1e:	d103      	bne.n	8001d28 <lwiperf_tcp_client_send_more+0x16c>
 8001d20:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d22:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8001d26:	d2e4      	bcs.n	8001cf2 <lwiperf_tcp_client_send_more+0x136>

    if (err == ERR_OK) {
 8001d28:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d106      	bne.n	8001d3e <lwiperf_tcp_client_send_more+0x182>
      conn->bytes_transferred += txlen;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d34:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d36:	441a      	add	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	625a      	str	r2, [r3, #36]	; 0x24
 8001d3c:	e001      	b.n	8001d42 <lwiperf_tcp_client_send_more+0x186>
    } else {
      send_more = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  } while (send_more);
 8001d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f47f af4f 	bne.w	8001be8 <lwiperf_tcp_client_send_more+0x2c>

  tcp_output(conn->conn_pcb);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f01a ff16 	bl	801cb80 <tcp_output>
  return ERR_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3730      	adds	r7, #48	; 0x30
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	08025bb0 	.word	0x08025bb0
 8001d64:	08025c08 	.word	0x08025c08
 8001d68:	08025bd8 	.word	0x08025bd8
 8001d6c:	cccccccd 	.word	0xcccccccd
 8001d70:	08028a90 	.word	0x08028a90

08001d74 <lwiperf_tcp_client_sent>:

/** TCP sent callback, try to send more data */
static err_t
lwiperf_tcp_client_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	80fb      	strh	r3, [r7, #6]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	617b      	str	r3, [r7, #20]
  /* @todo: check 'len' (e.g. to time ACK of all data)? for now, we just send more... */
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d006      	beq.n	8001d9e <lwiperf_tcp_client_sent+0x2a>
 8001d90:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <lwiperf_tcp_client_sent+0x44>)
 8001d92:	f44f 72b3 	mov.w	r2, #358	; 0x166
 8001d96:	4909      	ldr	r1, [pc, #36]	; (8001dbc <lwiperf_tcp_client_sent+0x48>)
 8001d98:	4809      	ldr	r0, [pc, #36]	; (8001dc0 <lwiperf_tcp_client_sent+0x4c>)
 8001d9a:	f01f f867 	bl	8020e6c <iprintf>
  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  conn->poll_count = 0;
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2020 	strb.w	r2, [r3, #32]

  return lwiperf_tcp_client_send_more(conn);
 8001da6:	6978      	ldr	r0, [r7, #20]
 8001da8:	f7ff ff08 	bl	8001bbc <lwiperf_tcp_client_send_more>
 8001dac:	4603      	mov	r3, r0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	08025bb0 	.word	0x08025bb0
 8001dbc:	08025c18 	.word	0x08025c18
 8001dc0:	08025bd8 	.word	0x08025bd8

08001dc4 <lwiperf_tcp_client_connected>:

/** TCP connected callback (active connection), send data now */
static err_t
lwiperf_tcp_client_connected(void *arg, struct tcp_pcb *tpcb, err_t err)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	71fb      	strb	r3, [r7, #7]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d006      	beq.n	8001dee <lwiperf_tcp_client_connected+0x2a>
 8001de0:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <lwiperf_tcp_client_connected+0x60>)
 8001de2:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8001de6:	4910      	ldr	r1, [pc, #64]	; (8001e28 <lwiperf_tcp_client_connected+0x64>)
 8001de8:	4810      	ldr	r0, [pc, #64]	; (8001e2c <lwiperf_tcp_client_connected+0x68>)
 8001dea:	f01f f83f 	bl	8020e6c <iprintf>
  LWIP_UNUSED_ARG(tpcb);
  if (err != ERR_OK) {
 8001dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d005      	beq.n	8001e02 <lwiperf_tcp_client_connected+0x3e>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 8001df6:	2105      	movs	r1, #5
 8001df8:	6978      	ldr	r0, [r7, #20]
 8001dfa:	f7ff fe7d 	bl	8001af8 <lwiperf_tcp_close>
    return ERR_OK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	e00c      	b.n	8001e1c <lwiperf_tcp_client_connected+0x58>
  }
  conn->poll_count = 0;
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2020 	strb.w	r2, [r3, #32]
  conn->time_started = sys_now();
 8001e0a:	f010 fced 	bl	80127e8 <sys_now>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	615a      	str	r2, [r3, #20]
  return lwiperf_tcp_client_send_more(conn);
 8001e14:	6978      	ldr	r0, [r7, #20]
 8001e16:	f7ff fed1 	bl	8001bbc <lwiperf_tcp_client_send_more>
 8001e1a:	4603      	mov	r3, r0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3718      	adds	r7, #24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	08025bb0 	.word	0x08025bb0
 8001e28:	08025c18 	.word	0x08025c18
 8001e2c:	08025bd8 	.word	0x08025bd8

08001e30 <lwiperf_tx_start_impl>:
 * receive test has finished.
 */
static err_t
lwiperf_tx_start_impl(const ip_addr_t *remote_ip, u16_t remote_port, lwiperf_settings_t *settings, lwiperf_report_fn report_fn,
                      void *report_arg, lwiperf_state_base_t *related_master_state, lwiperf_state_tcp_t **new_conn)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b088      	sub	sp, #32
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	607a      	str	r2, [r7, #4]
 8001e3a:	603b      	str	r3, [r7, #0]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	817b      	strh	r3, [r7, #10]
  err_t err;
  lwiperf_state_tcp_t *client_conn;
  struct tcp_pcb *newpcb;
  ip_addr_t remote_addr;

  LWIP_ASSERT("remote_ip != NULL", remote_ip != NULL);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d106      	bne.n	8001e54 <lwiperf_tx_start_impl+0x24>
 8001e46:	4b4a      	ldr	r3, [pc, #296]	; (8001f70 <lwiperf_tx_start_impl+0x140>)
 8001e48:	f240 128b 	movw	r2, #395	; 0x18b
 8001e4c:	4949      	ldr	r1, [pc, #292]	; (8001f74 <lwiperf_tx_start_impl+0x144>)
 8001e4e:	484a      	ldr	r0, [pc, #296]	; (8001f78 <lwiperf_tx_start_impl+0x148>)
 8001e50:	f01f f80c 	bl	8020e6c <iprintf>
  LWIP_ASSERT("remote_ip != NULL", settings != NULL);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d106      	bne.n	8001e68 <lwiperf_tx_start_impl+0x38>
 8001e5a:	4b45      	ldr	r3, [pc, #276]	; (8001f70 <lwiperf_tx_start_impl+0x140>)
 8001e5c:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8001e60:	4944      	ldr	r1, [pc, #272]	; (8001f74 <lwiperf_tx_start_impl+0x144>)
 8001e62:	4845      	ldr	r0, [pc, #276]	; (8001f78 <lwiperf_tx_start_impl+0x148>)
 8001e64:	f01f f802 	bl	8020e6c <iprintf>
  LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 8001e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d106      	bne.n	8001e7c <lwiperf_tx_start_impl+0x4c>
 8001e6e:	4b40      	ldr	r3, [pc, #256]	; (8001f70 <lwiperf_tx_start_impl+0x140>)
 8001e70:	f240 128d 	movw	r2, #397	; 0x18d
 8001e74:	4941      	ldr	r1, [pc, #260]	; (8001f7c <lwiperf_tx_start_impl+0x14c>)
 8001e76:	4840      	ldr	r0, [pc, #256]	; (8001f78 <lwiperf_tx_start_impl+0x148>)
 8001e78:	f01e fff8 	bl	8020e6c <iprintf>
  *new_conn = NULL;
 8001e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]

  client_conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 8001e82:	2048      	movs	r0, #72	; 0x48
 8001e84:	f014 f8e6 	bl	8016054 <mem_malloc>
 8001e88:	61f8      	str	r0, [r7, #28]
  if (client_conn == NULL) {
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d102      	bne.n	8001e96 <lwiperf_tx_start_impl+0x66>
    return ERR_MEM;
 8001e90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e94:	e067      	b.n	8001f66 <lwiperf_tx_start_impl+0x136>
  }
  newpcb = tcp_new_ip_type(IP_GET_TYPE(remote_ip));
 8001e96:	2000      	movs	r0, #0
 8001e98:	f017 f93c 	bl	8019114 <tcp_new_ip_type>
 8001e9c:	61b8      	str	r0, [r7, #24]
  if (newpcb == NULL) {
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d105      	bne.n	8001eb0 <lwiperf_tx_start_impl+0x80>
    LWIPERF_FREE(lwiperf_state_tcp_t, client_conn);
 8001ea4:	69f8      	ldr	r0, [r7, #28]
 8001ea6:	f013 ff6f 	bl	8015d88 <mem_free>
    return ERR_MEM;
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eae:	e05a      	b.n	8001f66 <lwiperf_tx_start_impl+0x136>
  }
  memset(client_conn, 0, sizeof(lwiperf_state_tcp_t));
 8001eb0:	2248      	movs	r2, #72	; 0x48
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	69f8      	ldr	r0, [r7, #28]
 8001eb6:	f01e f8df 	bl	8020078 <memset>
  client_conn->base.tcp = 1;
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	711a      	strb	r2, [r3, #4]
  client_conn->base.related_master_state = related_master_state;
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ec4:	609a      	str	r2, [r3, #8]
  client_conn->conn_pcb = newpcb;
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	611a      	str	r2, [r3, #16]
  client_conn->time_started = sys_now(); /* @todo: set this again on 'connected' */
 8001ecc:	f010 fc8c 	bl	80127e8 <sys_now>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	615a      	str	r2, [r3, #20]
  client_conn->report_fn = report_fn;
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	619a      	str	r2, [r3, #24]
  client_conn->report_arg = report_arg;
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ee0:	61da      	str	r2, [r3, #28]
  client_conn->next_num = 4; /* initial nr is '4' since the header has 24 byte */
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	2204      	movs	r2, #4
 8001ee6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  client_conn->bytes_transferred = 0;
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	2200      	movs	r2, #0
 8001eee:	625a      	str	r2, [r3, #36]	; 0x24
  memcpy(&client_conn->settings, settings, sizeof(*settings));
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	3328      	adds	r3, #40	; 0x28
 8001ef4:	2218      	movs	r2, #24
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f01e f895 	bl	8020028 <memcpy>
  client_conn->have_settings_buf = 1;
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  tcp_arg(newpcb, client_conn);
 8001f06:	69f9      	ldr	r1, [r7, #28]
 8001f08:	69b8      	ldr	r0, [r7, #24]
 8001f0a:	f017 f911 	bl	8019130 <tcp_arg>
  tcp_sent(newpcb, lwiperf_tcp_client_sent);
 8001f0e:	491c      	ldr	r1, [pc, #112]	; (8001f80 <lwiperf_tx_start_impl+0x150>)
 8001f10:	69b8      	ldr	r0, [r7, #24]
 8001f12:	f017 f941 	bl	8019198 <tcp_sent>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 8001f16:	2202      	movs	r2, #2
 8001f18:	491a      	ldr	r1, [pc, #104]	; (8001f84 <lwiperf_tx_start_impl+0x154>)
 8001f1a:	69b8      	ldr	r0, [r7, #24]
 8001f1c:	f017 f998 	bl	8019250 <tcp_poll>
  tcp_err(newpcb, lwiperf_tcp_err);
 8001f20:	4919      	ldr	r1, [pc, #100]	; (8001f88 <lwiperf_tx_start_impl+0x158>)
 8001f22:	69b8      	ldr	r0, [r7, #24]
 8001f24:	f017 f95a 	bl	80191dc <tcp_err>

  ip_addr_copy(remote_addr, *remote_ip);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	613b      	str	r3, [r7, #16]

  err = tcp_connect(newpcb, &remote_addr, remote_port, lwiperf_tcp_client_connected);
 8001f2e:	897a      	ldrh	r2, [r7, #10]
 8001f30:	f107 0110 	add.w	r1, r7, #16
 8001f34:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <lwiperf_tx_start_impl+0x15c>)
 8001f36:	69b8      	ldr	r0, [r7, #24]
 8001f38:	f016 f9b2 	bl	80182a0 <tcp_connect>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8001f40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d006      	beq.n	8001f56 <lwiperf_tx_start_impl+0x126>
    lwiperf_tcp_close(client_conn, LWIPERF_TCP_ABORTED_LOCAL);
 8001f48:	2102      	movs	r1, #2
 8001f4a:	69f8      	ldr	r0, [r7, #28]
 8001f4c:	f7ff fdd4 	bl	8001af8 <lwiperf_tcp_close>
    return err;
 8001f50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f54:	e007      	b.n	8001f66 <lwiperf_tx_start_impl+0x136>
  }
  lwiperf_list_add(&client_conn->base);
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff fd11 	bl	8001980 <lwiperf_list_add>
  *new_conn = client_conn;
 8001f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f60:	69fa      	ldr	r2, [r7, #28]
 8001f62:	601a      	str	r2, [r3, #0]
  return ERR_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3720      	adds	r7, #32
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	08025bb0 	.word	0x08025bb0
 8001f74:	08025c28 	.word	0x08025c28
 8001f78:	08025bd8 	.word	0x08025bd8
 8001f7c:	08025c3c 	.word	0x08025c3c
 8001f80:	08001d75 	.word	0x08001d75
 8001f84:	08002265 	.word	0x08002265
 8001f88:	08002245 	.word	0x08002245
 8001f8c:	08001dc5 	.word	0x08001dc5

08001f90 <lwiperf_tx_start_passive>:

static err_t
lwiperf_tx_start_passive(lwiperf_state_tcp_t *conn)
{
 8001f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f92:	b089      	sub	sp, #36	; 0x24
 8001f94:	af04      	add	r7, sp, #16
 8001f96:	6078      	str	r0, [r7, #4]
  err_t ret;
  lwiperf_state_tcp_t *new_conn = NULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60bb      	str	r3, [r7, #8]
  u16_t remote_port = (u16_t)lwip_htonl(conn->settings.remote_port);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f011 f9e6 	bl	8013372 <lwip_htonl>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	81fb      	strh	r3, [r7, #14]

  ret = lwiperf_tx_start_impl(&conn->conn_pcb->remote_ip, remote_port, &conn->settings, conn->report_fn, conn->report_arg,
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	1d18      	adds	r0, r3, #4
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f103 0528 	add.w	r5, r3, #40	; 0x28
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	699e      	ldr	r6, [r3, #24]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6892      	ldr	r2, [r2, #8]
 8001fc2:	89fc      	ldrh	r4, [r7, #14]
 8001fc4:	f107 0108 	add.w	r1, r7, #8
 8001fc8:	9102      	str	r1, [sp, #8]
 8001fca:	9201      	str	r2, [sp, #4]
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	4633      	mov	r3, r6
 8001fd0:	462a      	mov	r2, r5
 8001fd2:	4621      	mov	r1, r4
 8001fd4:	f7ff ff2c 	bl	8001e30 <lwiperf_tx_start_impl>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	737b      	strb	r3, [r7, #13]
    conn->base.related_master_state, &new_conn);
  if (ret == ERR_OK) {
 8001fdc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d10c      	bne.n	8001ffe <lwiperf_tx_start_passive+0x6e>
    LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d106      	bne.n	8001ff8 <lwiperf_tx_start_passive+0x68>
 8001fea:	4b08      	ldr	r3, [pc, #32]	; (800200c <lwiperf_tx_start_passive+0x7c>)
 8001fec:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8001ff0:	4907      	ldr	r1, [pc, #28]	; (8002010 <lwiperf_tx_start_passive+0x80>)
 8001ff2:	4808      	ldr	r0, [pc, #32]	; (8002014 <lwiperf_tx_start_passive+0x84>)
 8001ff4:	f01e ff3a 	bl	8020e6c <iprintf>
    new_conn->settings.flags = 0; /* prevent the remote side starting back as client again */
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	629a      	str	r2, [r3, #40]	; 0x28
  }
  return ret;
 8001ffe:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8002002:	4618      	mov	r0, r3
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800200a:	bf00      	nop
 800200c:	08025bb0 	.word	0x08025bb0
 8002010:	08025c3c 	.word	0x08025c3c
 8002014:	08025bd8 	.word	0x08025bd8

08002018 <lwiperf_tcp_recv>:

/** Receive data on an iperf tcp session */
static err_t
lwiperf_tcp_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b088      	sub	sp, #32
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
 8002024:	70fb      	strb	r3, [r7, #3]
  u8_t tmp;
  u16_t tot_len;
  u32_t packet_idx;
  struct pbuf *q;
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	429a      	cmp	r2, r3
 8002032:	d006      	beq.n	8002042 <lwiperf_tcp_recv+0x2a>
 8002034:	4b7e      	ldr	r3, [pc, #504]	; (8002230 <lwiperf_tcp_recv+0x218>)
 8002036:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
 800203a:	497e      	ldr	r1, [pc, #504]	; (8002234 <lwiperf_tcp_recv+0x21c>)
 800203c:	487e      	ldr	r0, [pc, #504]	; (8002238 <lwiperf_tcp_recv+0x220>)
 800203e:	f01e ff15 	bl	8020e6c <iprintf>
  LWIP_UNUSED_ARG(tpcb);

  if (err != ERR_OK) {
 8002042:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d005      	beq.n	8002056 <lwiperf_tcp_recv+0x3e>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 800204a:	2105      	movs	r1, #5
 800204c:	6978      	ldr	r0, [r7, #20]
 800204e:	f7ff fd53 	bl	8001af8 <lwiperf_tcp_close>
    return ERR_OK;
 8002052:	2300      	movs	r3, #0
 8002054:	e0e8      	b.n	8002228 <lwiperf_tcp_recv+0x210>
  }
  if (p == NULL) {
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d114      	bne.n	8002086 <lwiperf_tcp_recv+0x6e>
    /* connection closed -> test done */
    if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002064:	2b00      	cmp	r3, #0
 8002066:	d008      	beq.n	800207a <lwiperf_tcp_recv+0x62>
      if ((conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) == 0) {
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d102      	bne.n	800207a <lwiperf_tcp_recv+0x62>
        /* client requested transmission after end of test */
        lwiperf_tx_start_passive(conn);
 8002074:	6978      	ldr	r0, [r7, #20]
 8002076:	f7ff ff8b 	bl	8001f90 <lwiperf_tx_start_passive>
      }
    }
    lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_SERVER);
 800207a:	2100      	movs	r1, #0
 800207c:	6978      	ldr	r0, [r7, #20]
 800207e:	f7ff fd3b 	bl	8001af8 <lwiperf_tcp_close>
    return ERR_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	e0d0      	b.n	8002228 <lwiperf_tcp_recv+0x210>
  }
  tot_len = p->tot_len;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	891b      	ldrh	r3, [r3, #8]
 800208a:	827b      	strh	r3, [r7, #18]

  conn->poll_count = 0;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 2020 	strb.w	r2, [r3, #32]

  if ((!conn->have_settings_buf) || ((conn->bytes_transferred - 24) % (1024 * 128) == 0)) {
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800209a:	2b00      	cmp	r3, #0
 800209c:	d007      	beq.n	80020ae <lwiperf_tcp_recv+0x96>
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a2:	3b18      	subs	r3, #24
 80020a4:	f3c3 0310 	ubfx	r3, r3, #0, #17
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f040 8090 	bne.w	80021ce <lwiperf_tcp_recv+0x1b6>
    /* wait for 24-byte header */
    if (p->tot_len < sizeof(lwiperf_settings_t)) {
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	891b      	ldrh	r3, [r3, #8]
 80020b2:	2b17      	cmp	r3, #23
 80020b4:	d808      	bhi.n	80020c8 <lwiperf_tcp_recv+0xb0>
      lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_DATAERROR);
 80020b6:	2103      	movs	r1, #3
 80020b8:	6978      	ldr	r0, [r7, #20]
 80020ba:	f7ff fd1d 	bl	8001af8 <lwiperf_tcp_close>
      pbuf_free(p);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f015 f83e 	bl	8017140 <pbuf_free>
      return ERR_OK;
 80020c4:	2300      	movs	r3, #0
 80020c6:	e0af      	b.n	8002228 <lwiperf_tcp_recv+0x210>
    }
    if (!conn->have_settings_buf) {
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d135      	bne.n	800213e <lwiperf_tcp_recv+0x126>
      if (pbuf_copy_partial(p, &conn->settings, sizeof(lwiperf_settings_t), 0) != sizeof(lwiperf_settings_t)) {
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80020d8:	2300      	movs	r3, #0
 80020da:	2218      	movs	r2, #24
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f015 fa19 	bl	8017514 <pbuf_copy_partial>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b18      	cmp	r3, #24
 80020e6:	d008      	beq.n	80020fa <lwiperf_tcp_recv+0xe2>
        lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 80020e8:	2102      	movs	r1, #2
 80020ea:	6978      	ldr	r0, [r7, #20]
 80020ec:	f7ff fd04 	bl	8001af8 <lwiperf_tcp_close>
        pbuf_free(p);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f015 f825 	bl	8017140 <pbuf_free>
        return ERR_OK;
 80020f6:	2300      	movs	r3, #0
 80020f8:	e096      	b.n	8002228 <lwiperf_tcp_recv+0x210>
      }
      conn->have_settings_buf = 1;
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800210a:	2b00      	cmp	r3, #0
 800210c:	d031      	beq.n	8002172 <lwiperf_tcp_recv+0x15a>
        if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) {
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002112:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d02b      	beq.n	8002172 <lwiperf_tcp_recv+0x15a>
          /* client requested parallel transmission test */
          err_t err2 = lwiperf_tx_start_passive(conn);
 800211a:	6978      	ldr	r0, [r7, #20]
 800211c:	f7ff ff38 	bl	8001f90 <lwiperf_tx_start_passive>
 8002120:	4603      	mov	r3, r0
 8002122:	747b      	strb	r3, [r7, #17]
          if (err2 != ERR_OK) {
 8002124:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d022      	beq.n	8002172 <lwiperf_tcp_recv+0x15a>
            lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_TXERROR);
 800212c:	2104      	movs	r1, #4
 800212e:	6978      	ldr	r0, [r7, #20]
 8002130:	f7ff fce2 	bl	8001af8 <lwiperf_tcp_close>
            pbuf_free(p);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f015 f803 	bl	8017140 <pbuf_free>
            return ERR_OK;
 800213a:	2300      	movs	r3, #0
 800213c:	e074      	b.n	8002228 <lwiperf_tcp_recv+0x210>
          }
        }
      }
    } else {
      if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002146:	2b00      	cmp	r3, #0
 8002148:	d013      	beq.n	8002172 <lwiperf_tcp_recv+0x15a>
        if (pbuf_memcmp(p, 0, &conn->settings, sizeof(lwiperf_settings_t)) != 0) {
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002150:	2318      	movs	r3, #24
 8002152:	2100      	movs	r1, #0
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f015 fae4 	bl	8017722 <pbuf_memcmp>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d008      	beq.n	8002172 <lwiperf_tcp_recv+0x15a>
          lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_DATAERROR);
 8002160:	2103      	movs	r1, #3
 8002162:	6978      	ldr	r0, [r7, #20]
 8002164:	f7ff fcc8 	bl	8001af8 <lwiperf_tcp_close>
          pbuf_free(p);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f014 ffe9 	bl	8017140 <pbuf_free>
          return ERR_OK;
 800216e:	2300      	movs	r3, #0
 8002170:	e05a      	b.n	8002228 <lwiperf_tcp_recv+0x210>
        }
      }
    }
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002176:	f103 0218 	add.w	r2, r3, #24
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	625a      	str	r2, [r3, #36]	; 0x24
    if (conn->bytes_transferred <= 24) {
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	2b18      	cmp	r3, #24
 8002184:	d80f      	bhi.n	80021a6 <lwiperf_tcp_recv+0x18e>
      conn->time_started = sys_now();
 8002186:	f010 fb2f 	bl	80127e8 <sys_now>
 800218a:	4602      	mov	r2, r0
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	615a      	str	r2, [r3, #20]
      tcp_recved(tpcb, p->tot_len);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	891b      	ldrh	r3, [r3, #8]
 8002194:	4619      	mov	r1, r3
 8002196:	68b8      	ldr	r0, [r7, #8]
 8002198:	f015 ffec 	bl	8018174 <tcp_recved>
      pbuf_free(p);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f014 ffcf 	bl	8017140 <pbuf_free>
      return ERR_OK;
 80021a2:	2300      	movs	r3, #0
 80021a4:	e040      	b.n	8002228 <lwiperf_tcp_recv+0x210>
    }
    conn->next_num = 4; /* 24 bytes received... */
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	2204      	movs	r2, #4
 80021aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    tmp = pbuf_remove_header(p, 24);
 80021ae:	2118      	movs	r1, #24
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f014 ff3f 	bl	8017034 <pbuf_remove_header>
 80021b6:	4603      	mov	r3, r0
 80021b8:	743b      	strb	r3, [r7, #16]
    LWIP_ASSERT("pbuf_remove_header failed", tmp == 0);
 80021ba:	7c3b      	ldrb	r3, [r7, #16]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d006      	beq.n	80021ce <lwiperf_tcp_recv+0x1b6>
 80021c0:	4b1b      	ldr	r3, [pc, #108]	; (8002230 <lwiperf_tcp_recv+0x218>)
 80021c2:	f240 2211 	movw	r2, #529	; 0x211
 80021c6:	491d      	ldr	r1, [pc, #116]	; (800223c <lwiperf_tcp_recv+0x224>)
 80021c8:	481b      	ldr	r0, [pc, #108]	; (8002238 <lwiperf_tcp_recv+0x220>)
 80021ca:	f01e fe4f 	bl	8020e6c <iprintf>
    LWIP_UNUSED_ARG(tmp); /* for LWIP_NOASSERT */
  }

  packet_idx = 0;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
  for (q = p; q != NULL; q = q->next) {
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	61bb      	str	r3, [r7, #24]
 80021d6:	e008      	b.n	80021ea <lwiperf_tcp_recv+0x1d2>
        pbuf_free(p);
        return ERR_OK;
      }
    }
#endif
    packet_idx += q->len;
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	895b      	ldrh	r3, [r3, #10]
 80021dc:	461a      	mov	r2, r3
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	4413      	add	r3, r2
 80021e2:	61fb      	str	r3, [r7, #28]
  for (q = p; q != NULL; q = q->next) {
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	61bb      	str	r3, [r7, #24]
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1f3      	bne.n	80021d8 <lwiperf_tcp_recv+0x1c0>
  }
  LWIP_ASSERT("count mismatch", packet_idx == p->tot_len);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	891b      	ldrh	r3, [r3, #8]
 80021f4:	461a      	mov	r2, r3
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d006      	beq.n	800220a <lwiperf_tcp_recv+0x1f2>
 80021fc:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <lwiperf_tcp_recv+0x218>)
 80021fe:	f240 222b 	movw	r2, #555	; 0x22b
 8002202:	490f      	ldr	r1, [pc, #60]	; (8002240 <lwiperf_tcp_recv+0x228>)
 8002204:	480c      	ldr	r0, [pc, #48]	; (8002238 <lwiperf_tcp_recv+0x220>)
 8002206:	f01e fe31 	bl	8020e6c <iprintf>
  conn->bytes_transferred += packet_idx;
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	441a      	add	r2, r3
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	625a      	str	r2, [r3, #36]	; 0x24
  tcp_recved(tpcb, tot_len);
 8002216:	8a7b      	ldrh	r3, [r7, #18]
 8002218:	4619      	mov	r1, r3
 800221a:	68b8      	ldr	r0, [r7, #8]
 800221c:	f015 ffaa 	bl	8018174 <tcp_recved>
  pbuf_free(p);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f014 ff8d 	bl	8017140 <pbuf_free>
  return ERR_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3720      	adds	r7, #32
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	08025bb0 	.word	0x08025bb0
 8002234:	08025c50 	.word	0x08025c50
 8002238:	08025bd8 	.word	0x08025bd8
 800223c:	08025c60 	.word	0x08025c60
 8002240:	08025c7c 	.word	0x08025c7c

08002244 <lwiperf_tcp_err>:

/** Error callback, iperf tcp session aborted */
static void
lwiperf_tcp_err(void *arg, err_t err)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	460b      	mov	r3, r1
 800224e:	70fb      	strb	r3, [r7, #3]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);
  lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 8002254:	2105      	movs	r1, #5
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f7ff fc4e 	bl	8001af8 <lwiperf_tcp_close>
}
 800225c:	bf00      	nop
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <lwiperf_tcp_poll>:

/** TCP poll callback, try to send more data */
static err_t
lwiperf_tcp_poll(void *arg, struct tcp_pcb *tpcb)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	429a      	cmp	r2, r3
 800227a:	d006      	beq.n	800228a <lwiperf_tcp_poll+0x26>
 800227c:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <lwiperf_tcp_poll+0x64>)
 800227e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8002282:	4912      	ldr	r1, [pc, #72]	; (80022cc <lwiperf_tcp_poll+0x68>)
 8002284:	4812      	ldr	r0, [pc, #72]	; (80022d0 <lwiperf_tcp_poll+0x6c>)
 8002286:	f01e fdf1 	bl	8020e6c <iprintf>
  LWIP_UNUSED_ARG(tpcb);
  if (++conn->poll_count >= LWIPERF_TCP_MAX_IDLE_SEC) {
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002290:	3301      	adds	r3, #1
 8002292:	b2da      	uxtb	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f883 2020 	strb.w	r2, [r3, #32]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022a0:	2b09      	cmp	r3, #9
 80022a2:	d905      	bls.n	80022b0 <lwiperf_tcp_poll+0x4c>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 80022a4:	2102      	movs	r1, #2
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f7ff fc26 	bl	8001af8 <lwiperf_tcp_close>
    return ERR_OK; /* lwiperf_tcp_close frees conn */
 80022ac:	2300      	movs	r3, #0
 80022ae:	e007      	b.n	80022c0 <lwiperf_tcp_poll+0x5c>
  }

  if (!conn->base.server) {
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	795b      	ldrb	r3, [r3, #5]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d102      	bne.n	80022be <lwiperf_tcp_poll+0x5a>
    lwiperf_tcp_client_send_more(conn);
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f7ff fc7f 	bl	8001bbc <lwiperf_tcp_client_send_more>
  }

  return ERR_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	08025bb0 	.word	0x08025bb0
 80022cc:	08025c50 	.word	0x08025c50
 80022d0:	08025bd8 	.word	0x08025bd8

080022d4 <lwiperf_tcp_accept>:

/** This is called when a new client connects for an iperf tcp session */
static err_t
lwiperf_tcp_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	4613      	mov	r3, r2
 80022e0:	71fb      	strb	r3, [r7, #7]
  lwiperf_state_tcp_t *s, *conn;
  if ((err != ERR_OK) || (newpcb == NULL) || (arg == NULL)) {
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d105      	bne.n	80022f6 <lwiperf_tcp_accept+0x22>
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d002      	beq.n	80022f6 <lwiperf_tcp_accept+0x22>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d102      	bne.n	80022fc <lwiperf_tcp_accept+0x28>
    return ERR_VAL;
 80022f6:	f06f 0305 	mvn.w	r3, #5
 80022fa:	e0a3      	b.n	8002444 <lwiperf_tcp_accept+0x170>
  }

  s = (lwiperf_state_tcp_t *)arg;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("invalid session", s->base.server);
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	795b      	ldrb	r3, [r3, #5]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d106      	bne.n	8002316 <lwiperf_tcp_accept+0x42>
 8002308:	4b50      	ldr	r3, [pc, #320]	; (800244c <lwiperf_tcp_accept+0x178>)
 800230a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800230e:	4950      	ldr	r1, [pc, #320]	; (8002450 <lwiperf_tcp_accept+0x17c>)
 8002310:	4850      	ldr	r0, [pc, #320]	; (8002454 <lwiperf_tcp_accept+0x180>)
 8002312:	f01e fdab 	bl	8020e6c <iprintf>
  LWIP_ASSERT("invalid listen pcb", s->server_pcb != NULL);
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d106      	bne.n	800232c <lwiperf_tcp_accept+0x58>
 800231e:	4b4b      	ldr	r3, [pc, #300]	; (800244c <lwiperf_tcp_accept+0x178>)
 8002320:	f240 2259 	movw	r2, #601	; 0x259
 8002324:	494c      	ldr	r1, [pc, #304]	; (8002458 <lwiperf_tcp_accept+0x184>)
 8002326:	484b      	ldr	r0, [pc, #300]	; (8002454 <lwiperf_tcp_accept+0x180>)
 8002328:	f01e fda0 	bl	8020e6c <iprintf>
  LWIP_ASSERT("invalid conn pcb", s->conn_pcb == NULL);
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d006      	beq.n	8002342 <lwiperf_tcp_accept+0x6e>
 8002334:	4b45      	ldr	r3, [pc, #276]	; (800244c <lwiperf_tcp_accept+0x178>)
 8002336:	f240 225a 	movw	r2, #602	; 0x25a
 800233a:	4948      	ldr	r1, [pc, #288]	; (800245c <lwiperf_tcp_accept+0x188>)
 800233c:	4845      	ldr	r0, [pc, #276]	; (8002454 <lwiperf_tcp_accept+0x180>)
 800233e:	f01e fd95 	bl	8020e6c <iprintf>
  if (s->specific_remote) {
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002348:	2b00      	cmp	r3, #0
 800234a:	d013      	beq.n	8002374 <lwiperf_tcp_accept+0xa0>
    LWIP_ASSERT("s->base.related_master_state != NULL", s->base.related_master_state != NULL);
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d106      	bne.n	8002362 <lwiperf_tcp_accept+0x8e>
 8002354:	4b3d      	ldr	r3, [pc, #244]	; (800244c <lwiperf_tcp_accept+0x178>)
 8002356:	f44f 7217 	mov.w	r2, #604	; 0x25c
 800235a:	4941      	ldr	r1, [pc, #260]	; (8002460 <lwiperf_tcp_accept+0x18c>)
 800235c:	483d      	ldr	r0, [pc, #244]	; (8002454 <lwiperf_tcp_accept+0x180>)
 800235e:	f01e fd85 	bl	8020e6c <iprintf>
    if (!ip_addr_cmp(&newpcb->remote_ip, &s->remote_addr)) {
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	429a      	cmp	r2, r3
 800236c:	d00d      	beq.n	800238a <lwiperf_tcp_accept+0xb6>
      /* this listener belongs to a client session, and this is not the correct remote */
      return ERR_VAL;
 800236e:	f06f 0305 	mvn.w	r3, #5
 8002372:	e067      	b.n	8002444 <lwiperf_tcp_accept+0x170>
    }
  } else {
    LWIP_ASSERT("s->base.related_master_state == NULL", s->base.related_master_state == NULL);
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d006      	beq.n	800238a <lwiperf_tcp_accept+0xb6>
 800237c:	4b33      	ldr	r3, [pc, #204]	; (800244c <lwiperf_tcp_accept+0x178>)
 800237e:	f240 2262 	movw	r2, #610	; 0x262
 8002382:	4938      	ldr	r1, [pc, #224]	; (8002464 <lwiperf_tcp_accept+0x190>)
 8002384:	4833      	ldr	r0, [pc, #204]	; (8002454 <lwiperf_tcp_accept+0x180>)
 8002386:	f01e fd71 	bl	8020e6c <iprintf>
  }

  conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 800238a:	2048      	movs	r0, #72	; 0x48
 800238c:	f013 fe62 	bl	8016054 <mem_malloc>
 8002390:	6138      	str	r0, [r7, #16]
  if (conn == NULL) {
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d102      	bne.n	800239e <lwiperf_tcp_accept+0xca>
    return ERR_MEM;
 8002398:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800239c:	e052      	b.n	8002444 <lwiperf_tcp_accept+0x170>
  }
  memset(conn, 0, sizeof(lwiperf_state_tcp_t));
 800239e:	2248      	movs	r2, #72	; 0x48
 80023a0:	2100      	movs	r1, #0
 80023a2:	6938      	ldr	r0, [r7, #16]
 80023a4:	f01d fe68 	bl	8020078 <memset>
  conn->base.tcp = 1;
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	2201      	movs	r2, #1
 80023ac:	711a      	strb	r2, [r3, #4]
  conn->base.server = 1;
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	2201      	movs	r2, #1
 80023b2:	715a      	strb	r2, [r3, #5]
  conn->base.related_master_state = &s->base;
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	609a      	str	r2, [r3, #8]
  conn->conn_pcb = newpcb;
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	611a      	str	r2, [r3, #16]
  conn->time_started = sys_now();
 80023c0:	f010 fa12 	bl	80127e8 <sys_now>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	615a      	str	r2, [r3, #20]
  conn->report_fn = s->report_fn;
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	699a      	ldr	r2, [r3, #24]
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	619a      	str	r2, [r3, #24]
  conn->report_arg = s->report_arg;
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	69da      	ldr	r2, [r3, #28]
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	61da      	str	r2, [r3, #28]

  /* setup the tcp rx connection */
  tcp_arg(newpcb, conn);
 80023da:	6939      	ldr	r1, [r7, #16]
 80023dc:	68b8      	ldr	r0, [r7, #8]
 80023de:	f016 fea7 	bl	8019130 <tcp_arg>
  tcp_recv(newpcb, lwiperf_tcp_recv);
 80023e2:	4921      	ldr	r1, [pc, #132]	; (8002468 <lwiperf_tcp_accept+0x194>)
 80023e4:	68b8      	ldr	r0, [r7, #8]
 80023e6:	f016 feb5 	bl	8019154 <tcp_recv>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 80023ea:	2202      	movs	r2, #2
 80023ec:	491f      	ldr	r1, [pc, #124]	; (800246c <lwiperf_tcp_accept+0x198>)
 80023ee:	68b8      	ldr	r0, [r7, #8]
 80023f0:	f016 ff2e 	bl	8019250 <tcp_poll>
  tcp_err(conn->conn_pcb, lwiperf_tcp_err);
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	491d      	ldr	r1, [pc, #116]	; (8002470 <lwiperf_tcp_accept+0x19c>)
 80023fa:	4618      	mov	r0, r3
 80023fc:	f016 feee 	bl	80191dc <tcp_err>

  if (s->specific_remote) {
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002406:	2b00      	cmp	r3, #0
 8002408:	d017      	beq.n	800243a <lwiperf_tcp_accept+0x166>
    /* this listener belongs to a client, so make the client the master of the newly created connection */
    conn->base.related_master_state = s->base.related_master_state;
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	689a      	ldr	r2, [r3, #8]
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	609a      	str	r2, [r3, #8]
    /* if dual mode or (tradeoff mode AND client is done): close the listener */
    if (!s->client_tradeoff_mode || !lwiperf_list_find(s->base.related_master_state)) {
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002418:	2b00      	cmp	r3, #0
 800241a:	d007      	beq.n	800242c <lwiperf_tcp_accept+0x158>
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff fb05 	bl	8001a30 <lwiperf_list_find>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d106      	bne.n	800243a <lwiperf_tcp_accept+0x166>
      /* prevent report when closing: this is expected */
      s->report_fn = NULL;
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	2200      	movs	r2, #0
 8002430:	619a      	str	r2, [r3, #24]
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
 8002432:	2102      	movs	r1, #2
 8002434:	6978      	ldr	r0, [r7, #20]
 8002436:	f7ff fb5f 	bl	8001af8 <lwiperf_tcp_close>
    }
  }
  lwiperf_list_add(&conn->base);
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff fa9f 	bl	8001980 <lwiperf_list_add>
  return ERR_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	08025bb0 	.word	0x08025bb0
 8002450:	08025c8c 	.word	0x08025c8c
 8002454:	08025bd8 	.word	0x08025bd8
 8002458:	08025c9c 	.word	0x08025c9c
 800245c:	08025cb0 	.word	0x08025cb0
 8002460:	08025cc4 	.word	0x08025cc4
 8002464:	08025cec 	.word	0x08025cec
 8002468:	08002019 	.word	0x08002019
 800246c:	08002265 	.word	0x08002265
 8002470:	08002245 	.word	0x08002245

08002474 <lwiperf_start_tcp_server_default>:
 * @returns a connection handle that can be used to abort the server
 *          by calling @ref lwiperf_abort()
 */
void *
lwiperf_start_tcp_server_default(lwiperf_report_fn report_fn, void *report_arg)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  return lwiperf_start_tcp_server(IP_ADDR_ANY, LWIPERF_TCP_PORT_DEFAULT,
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	f241 3189 	movw	r1, #5001	; 0x1389
 8002486:	4804      	ldr	r0, [pc, #16]	; (8002498 <lwiperf_start_tcp_server_default+0x24>)
 8002488:	f000 f808 	bl	800249c <lwiperf_start_tcp_server>
 800248c:	4603      	mov	r3, r0
                                  report_fn, report_arg);
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	0802911c 	.word	0x0802911c

0800249c <lwiperf_start_tcp_server>:
 *          by calling @ref lwiperf_abort()
 */
void *
lwiperf_start_tcp_server(const ip_addr_t *local_addr, u16_t local_port,
                         lwiperf_report_fn report_fn, void *report_arg)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b088      	sub	sp, #32
 80024a0:	af02      	add	r7, sp, #8
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	607a      	str	r2, [r7, #4]
 80024a6:	603b      	str	r3, [r7, #0]
 80024a8:	460b      	mov	r3, r1
 80024aa:	817b      	strh	r3, [r7, #10]
  err_t err;
  lwiperf_state_tcp_t *state = NULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	613b      	str	r3, [r7, #16]

  err = lwiperf_start_tcp_server_impl(local_addr, local_port, report_fn, report_arg,
 80024b0:	8979      	ldrh	r1, [r7, #10]
 80024b2:	f107 0310 	add.w	r3, r7, #16
 80024b6:	9301      	str	r3, [sp, #4]
 80024b8:	2300      	movs	r3, #0
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f000 f80d 	bl	80024e0 <lwiperf_start_tcp_server_impl>
 80024c6:	4603      	mov	r3, r0
 80024c8:	75fb      	strb	r3, [r7, #23]
    NULL, &state);
  if (err == ERR_OK) {
 80024ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <lwiperf_start_tcp_server+0x3a>
    return state;
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	e000      	b.n	80024d8 <lwiperf_start_tcp_server+0x3c>
  }
  return NULL;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3718      	adds	r7, #24
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <lwiperf_start_tcp_server_impl>:

static err_t lwiperf_start_tcp_server_impl(const ip_addr_t *local_addr, u16_t local_port,
                                           lwiperf_report_fn report_fn, void *report_arg,
                                           lwiperf_state_base_t *related_master_state, lwiperf_state_tcp_t **state)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b088      	sub	sp, #32
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	607a      	str	r2, [r7, #4]
 80024ea:	603b      	str	r3, [r7, #0]
 80024ec:	460b      	mov	r3, r1
 80024ee:	817b      	strh	r3, [r7, #10]
  struct tcp_pcb *pcb;
  lwiperf_state_tcp_t *s;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("state != NULL", state != NULL);
 80024f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d106      	bne.n	8002504 <lwiperf_start_tcp_server_impl+0x24>
 80024f6:	4b3a      	ldr	r3, [pc, #232]	; (80025e0 <lwiperf_start_tcp_server_impl+0x100>)
 80024f8:	f240 22b6 	movw	r2, #694	; 0x2b6
 80024fc:	4939      	ldr	r1, [pc, #228]	; (80025e4 <lwiperf_start_tcp_server_impl+0x104>)
 80024fe:	483a      	ldr	r0, [pc, #232]	; (80025e8 <lwiperf_start_tcp_server_impl+0x108>)
 8002500:	f01e fcb4 	bl	8020e6c <iprintf>

  if (local_addr == NULL) {
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d102      	bne.n	8002510 <lwiperf_start_tcp_server_impl+0x30>
    return ERR_ARG;
 800250a:	f06f 030f 	mvn.w	r3, #15
 800250e:	e063      	b.n	80025d8 <lwiperf_start_tcp_server_impl+0xf8>
  }

  s = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 8002510:	2048      	movs	r0, #72	; 0x48
 8002512:	f013 fd9f 	bl	8016054 <mem_malloc>
 8002516:	61f8      	str	r0, [r7, #28]
  if (s == NULL) {
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d102      	bne.n	8002524 <lwiperf_start_tcp_server_impl+0x44>
    return ERR_MEM;
 800251e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002522:	e059      	b.n	80025d8 <lwiperf_start_tcp_server_impl+0xf8>
  }
  memset(s, 0, sizeof(lwiperf_state_tcp_t));
 8002524:	2248      	movs	r2, #72	; 0x48
 8002526:	2100      	movs	r1, #0
 8002528:	69f8      	ldr	r0, [r7, #28]
 800252a:	f01d fda5 	bl	8020078 <memset>
  s->base.tcp = 1;
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	2201      	movs	r2, #1
 8002532:	711a      	strb	r2, [r3, #4]
  s->base.server = 1;
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	2201      	movs	r2, #1
 8002538:	715a      	strb	r2, [r3, #5]
  s->base.related_master_state = related_master_state;
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800253e:	609a      	str	r2, [r3, #8]
  s->report_fn = report_fn;
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	619a      	str	r2, [r3, #24]
  s->report_arg = report_arg;
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	61da      	str	r2, [r3, #28]

  pcb = tcp_new_ip_type(LWIPERF_SERVER_IP_TYPE);
 800254c:	202e      	movs	r0, #46	; 0x2e
 800254e:	f016 fde1 	bl	8019114 <tcp_new_ip_type>
 8002552:	61b8      	str	r0, [r7, #24]
  if (pcb == NULL) {
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d102      	bne.n	8002560 <lwiperf_start_tcp_server_impl+0x80>
    return ERR_MEM;
 800255a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800255e:	e03b      	b.n	80025d8 <lwiperf_start_tcp_server_impl+0xf8>
  }
  err = tcp_bind(pcb, local_addr, local_port);
 8002560:	897b      	ldrh	r3, [r7, #10]
 8002562:	461a      	mov	r2, r3
 8002564:	68f9      	ldr	r1, [r7, #12]
 8002566:	69b8      	ldr	r0, [r7, #24]
 8002568:	f015 fc36 	bl	8017dd8 <tcp_bind>
 800256c:	4603      	mov	r3, r0
 800256e:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8002570:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <lwiperf_start_tcp_server_impl+0x9e>
    return err;
 8002578:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800257c:	e02c      	b.n	80025d8 <lwiperf_start_tcp_server_impl+0xf8>
  }
  s->server_pcb = tcp_listen_with_backlog(pcb, 1);
 800257e:	2101      	movs	r1, #1
 8002580:	69b8      	ldr	r0, [r7, #24]
 8002582:	f015 fce1 	bl	8017f48 <tcp_listen_with_backlog>
 8002586:	4602      	mov	r2, r0
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	60da      	str	r2, [r3, #12]
  if (s->server_pcb == NULL) {
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10b      	bne.n	80025ac <lwiperf_start_tcp_server_impl+0xcc>
    if (pcb != NULL) {
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d002      	beq.n	80025a0 <lwiperf_start_tcp_server_impl+0xc0>
      tcp_close(pcb);
 800259a:	69b8      	ldr	r0, [r7, #24]
 800259c:	f015 fb26 	bl	8017bec <tcp_close>
    }
    LWIPERF_FREE(lwiperf_state_tcp_t, s);
 80025a0:	69f8      	ldr	r0, [r7, #28]
 80025a2:	f013 fbf1 	bl	8015d88 <mem_free>
    return ERR_MEM;
 80025a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025aa:	e015      	b.n	80025d8 <lwiperf_start_tcp_server_impl+0xf8>
  }
  pcb = NULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	61bb      	str	r3, [r7, #24]

  tcp_arg(s->server_pcb, s);
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	69f9      	ldr	r1, [r7, #28]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f016 fdba 	bl	8019130 <tcp_arg>
  tcp_accept(s->server_pcb, lwiperf_tcp_accept);
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	490a      	ldr	r1, [pc, #40]	; (80025ec <lwiperf_start_tcp_server_impl+0x10c>)
 80025c2:	4618      	mov	r0, r3
 80025c4:	f016 fe2c 	bl	8019220 <tcp_accept>

  lwiperf_list_add(&s->base);
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff f9d8 	bl	8001980 <lwiperf_list_add>
  *state = s;
 80025d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d2:	69fa      	ldr	r2, [r7, #28]
 80025d4:	601a      	str	r2, [r3, #0]
  return ERR_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3720      	adds	r7, #32
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	08025bb0 	.word	0x08025bb0
 80025e4:	08025d14 	.word	0x08025d14
 80025e8:	08025bd8 	.word	0x08025bd8
 80025ec:	080022d5 	.word	0x080022d5

080025f0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80025f0:	b590      	push	{r4, r7, lr}
 80025f2:	b0af      	sub	sp, #188	; 0xbc
 80025f4:	af04      	add	r7, sp, #16
	/* USER CODE BEGIN Boot_Mode_Sequence_0 */
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 80025f6:	f000 fa4f 	bl	8002a98 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80025fa:	4bdb      	ldr	r3, [pc, #876]	; (8002968 <main+0x378>)
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d11b      	bne.n	800263e <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002606:	f3bf 8f4f 	dsb	sy
}
 800260a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800260c:	f3bf 8f6f 	isb	sy
}
 8002610:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002612:	4bd5      	ldr	r3, [pc, #852]	; (8002968 <main+0x378>)
 8002614:	2200      	movs	r2, #0
 8002616:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800261a:	f3bf 8f4f 	dsb	sy
}
 800261e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002620:	f3bf 8f6f 	isb	sy
}
 8002624:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002626:	4bd0      	ldr	r3, [pc, #832]	; (8002968 <main+0x378>)
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	4acf      	ldr	r2, [pc, #828]	; (8002968 <main+0x378>)
 800262c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002630:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002632:	f3bf 8f4f 	dsb	sy
}
 8002636:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002638:	f3bf 8f6f 	isb	sy
}
 800263c:	e000      	b.n	8002640 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800263e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002640:	4bc9      	ldr	r3, [pc, #804]	; (8002968 <main+0x378>)
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d143      	bne.n	80026d4 <main+0xe4>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800264c:	4bc6      	ldr	r3, [pc, #792]	; (8002968 <main+0x378>)
 800264e:	2200      	movs	r2, #0
 8002650:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002654:	f3bf 8f4f 	dsb	sy
}
 8002658:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800265a:	4bc3      	ldr	r3, [pc, #780]	; (8002968 <main+0x378>)
 800265c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002660:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002664:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002668:	0b5b      	lsrs	r3, r3, #13
 800266a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800266e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002672:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002676:	08db      	lsrs	r3, r3, #3
 8002678:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800267c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002680:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002684:	015a      	lsls	r2, r3, #5
 8002686:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800268a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800268c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002690:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002692:	49b5      	ldr	r1, [pc, #724]	; (8002968 <main+0x378>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800269a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800269e:	1e5a      	subs	r2, r3, #1
 80026a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1eb      	bne.n	8002680 <main+0x90>
    } while(sets-- != 0U);
 80026a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026ac:	1e5a      	subs	r2, r3, #1
 80026ae:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1dd      	bne.n	8002672 <main+0x82>
  __ASM volatile ("dsb 0xF":::"memory");
 80026b6:	f3bf 8f4f 	dsb	sy
}
 80026ba:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80026bc:	4baa      	ldr	r3, [pc, #680]	; (8002968 <main+0x378>)
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	4aa9      	ldr	r2, [pc, #676]	; (8002968 <main+0x378>)
 80026c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80026c8:	f3bf 8f4f 	dsb	sy
}
 80026cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80026ce:	f3bf 8f6f 	isb	sy
}
 80026d2:	e000      	b.n	80026d6 <main+0xe6>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80026d4:	bf00      	nop
	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 80026d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80026de:	bf00      	nop
 80026e0:	4ba2      	ldr	r3, [pc, #648]	; (800296c <main+0x37c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d006      	beq.n	80026fa <main+0x10a>
 80026ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80026f0:	1e5a      	subs	r2, r3, #1
 80026f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	dcf2      	bgt.n	80026e0 <main+0xf0>
	if ( timeout < 0 )
 80026fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80026fe:	2b00      	cmp	r3, #0
 8002700:	da01      	bge.n	8002706 <main+0x116>
	{
		Error_Handler();
 8002702:	f000 fa17 	bl	8002b34 <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002706:	f001 fc6b 	bl	8003fe0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800270a:	f000 f93f 	bl	800298c <SystemClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 800270e:	4b97      	ldr	r3, [pc, #604]	; (800296c <main+0x37c>)
 8002710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002714:	4a95      	ldr	r2, [pc, #596]	; (800296c <main+0x37c>)
 8002716:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800271a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800271e:	4b93      	ldr	r3, [pc, #588]	; (800296c <main+0x37c>)
 8002720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002728:	66bb      	str	r3, [r7, #104]	; 0x68
 800272a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 800272c:	2000      	movs	r0, #0
 800272e:	f007 ffe5 	bl	800a6fc <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8002732:	2100      	movs	r1, #0
 8002734:	2000      	movs	r0, #0
 8002736:	f007 fffb 	bl	800a730 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 800273a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800273e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8002742:	bf00      	nop
 8002744:	4b89      	ldr	r3, [pc, #548]	; (800296c <main+0x37c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d106      	bne.n	800275e <main+0x16e>
 8002750:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002754:	1e5a      	subs	r2, r3, #1
 8002756:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800275a:	2b00      	cmp	r3, #0
 800275c:	dcf2      	bgt.n	8002744 <main+0x154>
	if ( timeout < 0 )
 800275e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002762:	2b00      	cmp	r3, #0
 8002764:	da01      	bge.n	800276a <main+0x17a>
	{
		Error_Handler();
 8002766:	f000 f9e5 	bl	8002b34 <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800276a:	f7fe ffbd 	bl	80016e8 <MX_GPIO_Init>
	MX_DMA_Init();
 800276e:	f7fe fe5f 	bl	8001430 <MX_DMA_Init>
	MX_ADC1_Init();
 8002772:	f7fe fb5f 	bl	8000e34 <MX_ADC1_Init>
	MX_ADC2_Init();
 8002776:	f7fe fbe7 	bl	8000f48 <MX_ADC2_Init>
	MX_ADC3_Init();
 800277a:	f7fe fc5d 	bl	8001038 <MX_ADC3_Init>
	MX_FMC_Init();
 800277e:	f7fe fe9f 	bl	80014c0 <MX_FMC_Init>
	MX_SAI1_Init();
 8002782:	f000 fa2b 	bl	8002bdc <MX_SAI1_Init>
	MX_SPI2_Init();
 8002786:	f000 fb27 	bl	8002dd8 <MX_SPI2_Init>
	MX_USART1_UART_Init();
 800278a:	f001 f999 	bl	8003ac0 <MX_USART1_UART_Init>
	MX_RNG_Init();
 800278e:	f000 f9d7 	bl	8002b40 <MX_RNG_Init>
	MX_CRC_Init();
 8002792:	f7fe fe09 	bl	80013a8 <MX_CRC_Init>
//	MX_LWIP_Init();
	/* USER CODE BEGIN 2 */

	/* Unlock the Flash Program Erase controller */
	HAL_FLASH_Unlock();
 8002796:	f007 fb8b 	bl	8009eb0 <HAL_FLASH_Unlock>

	/* EEPROM Init */
	if( EE_Init() != EE_OK)
 800279a:	f01c f86d 	bl	801e878 <EE_Init>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <main+0x1b8>
	{
		Error_Handler();
 80027a4:	f000 f9c6 	bl	8002b34 <Error_Handler>
	}

	ssd1362_init();
 80027a8:	f01d fb7e 	bl	801fea8 <ssd1362_init>

	ssd1362_clearBuffer();
 80027ac:	f01d fb1c 	bl	801fde8 <ssd1362_clearBuffer>
	ssd1362_drawHLine(0, 5, 256,0xF, 0);
 80027b0:	2300      	movs	r3, #0
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	230f      	movs	r3, #15
 80027b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027ba:	2105      	movs	r1, #5
 80027bc:	2000      	movs	r0, #0
 80027be:	f01d f957 	bl	801fa70 <ssd1362_drawHLine>
	ssd1362_drawHLine(0, 40, 256,0xF, 0);
 80027c2:	2300      	movs	r3, #0
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	230f      	movs	r3, #15
 80027c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027cc:	2128      	movs	r1, #40	; 0x28
 80027ce:	2000      	movs	r0, #0
 80027d0:	f01d f94e 	bl	801fa70 <ssd1362_drawHLine>
	ssd1362_drawString(16, 15, (int8_t *)"Hello Spectral Sound Scanner", 0xF, 16);
 80027d4:	2310      	movs	r3, #16
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	230f      	movs	r3, #15
 80027da:	4a65      	ldr	r2, [pc, #404]	; (8002970 <main+0x380>)
 80027dc:	210f      	movs	r1, #15
 80027de:	2010      	movs	r0, #16
 80027e0:	f01d fa61 	bl	801fca6 <ssd1362_drawString>
	ssd1362_writeFullBuffer();
 80027e4:	f01d fb2e 	bl	801fe44 <ssd1362_writeFullBuffer>

	MX_LWIP_Init();
 80027e8:	f00f fbd2 	bl	8011f90 <MX_LWIP_Init>
	//		{
	//			Error_Handler();
	//		}
	//	}

	cisynth_ifft();
 80027ec:	f7fe f940 	bl	8000a70 <cisynth_ifft>

	//  int8_t timeText[] = {'1', '2', ':', '3', '5'};
	//  uint32_t framecount = 0;

	//  HAL_GPIO_WritePin(MEMS_FSYNC_GPIO_Port, MEMS_FSYNC_Pin, GPIO_PIN_RESET);
	icm20602_init();
 80027f0:	f01c fc96 	bl	801f120 <icm20602_init>
	int16_t accel_x, accel_y, accel_z, gyro_x, gyro_y, gyro_z, tmp;

	const char* message = "Hello UDP message!\n\r";
 80027f4:	4b5f      	ldr	r3, [pc, #380]	; (8002974 <main+0x384>)
 80027f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	ip_addr_t PC_IPADDR;
	IP_ADDR4(&PC_IPADDR, 192, 168, 1, 1);
 80027fa:	4b5f      	ldr	r3, [pc, #380]	; (8002978 <main+0x388>)
 80027fc:	66fb      	str	r3, [r7, #108]	; 0x6c

	struct udp_pcb* my_udp = udp_new();
 80027fe:	f01b fd37 	bl	801e270 <udp_new>
 8002802:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
	udp_connect(my_udp, &PC_IPADDR, 55151);
 8002806:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800280a:	f24d 726f 	movw	r2, #55151	; 0xd76f
 800280e:	4619      	mov	r1, r3
 8002810:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002814:	f01b fcbe 	bl	801e194 <udp_connect>
	struct pbuf* udp_buffer = NULL;
 8002818:	2300      	movs	r3, #0
 800281a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800281e:	4b52      	ldr	r3, [pc, #328]	; (8002968 <main+0x378>)
 8002820:	2200      	movs	r2, #0
 8002822:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002826:	f3bf 8f4f 	dsb	sy
}
 800282a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800282c:	4b4e      	ldr	r3, [pc, #312]	; (8002968 <main+0x378>)
 800282e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002832:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002836:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800283a:	0b5b      	lsrs	r3, r3, #13
 800283c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002840:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002844:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002848:	08db      	lsrs	r3, r3, #3
 800284a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800284e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002852:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002856:	015a      	lsls	r2, r3, #5
 8002858:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800285c:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800285e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002862:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002864:	4940      	ldr	r1, [pc, #256]	; (8002968 <main+0x378>)
 8002866:	4313      	orrs	r3, r2
 8002868:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800286c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002870:	1e5a      	subs	r2, r3, #1
 8002872:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1eb      	bne.n	8002852 <main+0x262>
    } while(sets-- != 0U);
 800287a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800287e:	1e5a      	subs	r2, r3, #1
 8002880:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1dd      	bne.n	8002844 <main+0x254>
  __ASM volatile ("dsb 0xF":::"memory");
 8002888:	f3bf 8f4f 	dsb	sy
}
 800288c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800288e:	f3bf 8f6f 	isb	sy
}
 8002892:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8002894:	bf00      	nop

	SCB_CleanInvalidateDCache();

	lwiperf_start_tcp_server_default(NULL, NULL); // TCP Perf = iperf -c 192.168.1.1 -i1 -t60 -u -b 1000M UDP Perf = iperf -c 192.168.1.1 -i1 -t60
 8002896:	2100      	movs	r1, #0
 8002898:	2000      	movs	r0, #0
 800289a:	f7ff fdeb 	bl	8002474 <lwiperf_start_tcp_server_default>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		MX_LWIP_Process();
 800289e:	f00f fcc3 	bl	8012228 <MX_LWIP_Process>
		//	  ssd1362_writeFullBuffer();
		//	  HAL_Delay(1);

		//	  icm20602_read_accel(&accel_x, &accel_y, &accel_z);
		//	  icm20602_read_gyro(&gyro_x, &gyro_y, &gyro_z);
		icm20602_read_data_raw(&accel_x, &accel_y, &accel_z, &gyro_x, &gyro_y, &gyro_z, &tmp);
 80028a2:	f107 0478 	add.w	r4, r7, #120	; 0x78
 80028a6:	f107 027a 	add.w	r2, r7, #122	; 0x7a
 80028aa:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80028ae:	f107 007e 	add.w	r0, r7, #126	; 0x7e
 80028b2:	f107 0372 	add.w	r3, r7, #114	; 0x72
 80028b6:	9302      	str	r3, [sp, #8]
 80028b8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80028bc:	9301      	str	r3, [sp, #4]
 80028be:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	4623      	mov	r3, r4
 80028c6:	f01c fdf9 	bl	801f4bc <icm20602_read_data_raw>

		ssd1362_clearBuffer();
 80028ca:	f01d fa8d 	bl	801fde8 <ssd1362_clearBuffer>
		char text[100] = {0};
 80028ce:	2300      	movs	r3, #0
 80028d0:	607b      	str	r3, [r7, #4]
 80028d2:	f107 0308 	add.w	r3, r7, #8
 80028d6:	2260      	movs	r2, #96	; 0x60
 80028d8:	2100      	movs	r1, #0
 80028da:	4618      	mov	r0, r3
 80028dc:	f01d fbcc 	bl	8020078 <memset>
		//	  sprintf(text,"Accel : %.2f  %.2f  %.2f", accel_x, accel_y, accel_z);
		//	  ssd1362_drawString(0, 10, (int8_t *)text, 0xF, 16);
		//	  sprintf(text,"Gyro  : %.2f  %.2f  %.2f", gyro_x, gyro_y, gyro_z);
		//	  ssd1362_drawString(0, 30, (int8_t *)text, 0xF, 16);
		//	  sprintf(text,"temp. : %.2f", tmp);
		sprintf(text,"Accel : %d  %d  %d", accel_x, accel_y, accel_z);
 80028e0:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 80028e4:	461a      	mov	r2, r3
 80028e6:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 80028ea:	4619      	mov	r1, r3
 80028ec:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 80028f0:	1d38      	adds	r0, r7, #4
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	460b      	mov	r3, r1
 80028f6:	4921      	ldr	r1, [pc, #132]	; (800297c <main+0x38c>)
 80028f8:	f01e fb9c 	bl	8021034 <siprintf>
		ssd1362_drawString(0, 10, (int8_t *)text, 0xF, 16);
 80028fc:	1d3a      	adds	r2, r7, #4
 80028fe:	2310      	movs	r3, #16
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	230f      	movs	r3, #15
 8002904:	210a      	movs	r1, #10
 8002906:	2000      	movs	r0, #0
 8002908:	f01d f9cd 	bl	801fca6 <ssd1362_drawString>
		sprintf(text,"Gyro  : %d  %d  %d", gyro_x, gyro_y, gyro_z);
 800290c:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	; 0x78
 8002910:	461a      	mov	r2, r3
 8002912:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8002916:	4619      	mov	r1, r3
 8002918:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 800291c:	1d38      	adds	r0, r7, #4
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	460b      	mov	r3, r1
 8002922:	4917      	ldr	r1, [pc, #92]	; (8002980 <main+0x390>)
 8002924:	f01e fb86 	bl	8021034 <siprintf>
		ssd1362_drawString(0, 30, (int8_t *)text, 0xF, 16);
 8002928:	1d3a      	adds	r2, r7, #4
 800292a:	2310      	movs	r3, #16
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	230f      	movs	r3, #15
 8002930:	211e      	movs	r1, #30
 8002932:	2000      	movs	r0, #0
 8002934:	f01d f9b7 	bl	801fca6 <ssd1362_drawString>
		sprintf(text,"temp. : %d", tmp);
 8002938:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 800293c:	461a      	mov	r2, r3
 800293e:	1d3b      	adds	r3, r7, #4
 8002940:	4910      	ldr	r1, [pc, #64]	; (8002984 <main+0x394>)
 8002942:	4618      	mov	r0, r3
 8002944:	f01e fb76 	bl	8021034 <siprintf>
		ssd1362_drawString(0, 50, (int8_t *)text, 0xF, 16);
 8002948:	1d3a      	adds	r2, r7, #4
 800294a:	2310      	movs	r3, #16
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	230f      	movs	r3, #15
 8002950:	2132      	movs	r1, #50	; 0x32
 8002952:	2000      	movs	r0, #0
 8002954:	f01d f9a7 	bl	801fca6 <ssd1362_drawString>
		ssd1362_writeFullBuffer();
 8002958:	f01d fa74 	bl	801fe44 <ssd1362_writeFullBuffer>

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800295c:	2140      	movs	r1, #64	; 0x40
 800295e:	480a      	ldr	r0, [pc, #40]	; (8002988 <main+0x398>)
 8002960:	f007 feb1 	bl	800a6c6 <HAL_GPIO_TogglePin>
	{
 8002964:	e79b      	b.n	800289e <main+0x2ae>
 8002966:	bf00      	nop
 8002968:	e000ed00 	.word	0xe000ed00
 800296c:	58024400 	.word	0x58024400
 8002970:	08025d24 	.word	0x08025d24
 8002974:	08025d44 	.word	0x08025d44
 8002978:	0101a8c0 	.word	0x0101a8c0
 800297c:	08025d5c 	.word	0x08025d5c
 8002980:	08025d70 	.word	0x08025d70
 8002984:	08025d84 	.word	0x08025d84
 8002988:	58021c00 	.word	0x58021c00

0800298c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b09c      	sub	sp, #112	; 0x70
 8002990:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002996:	224c      	movs	r2, #76	; 0x4c
 8002998:	2100      	movs	r1, #0
 800299a:	4618      	mov	r0, r3
 800299c:	f01d fb6c 	bl	8020078 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029a0:	1d3b      	adds	r3, r7, #4
 80029a2:	2220      	movs	r2, #32
 80029a4:	2100      	movs	r1, #0
 80029a6:	4618      	mov	r0, r3
 80029a8:	f01d fb66 	bl	8020078 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80029ac:	2004      	movs	r0, #4
 80029ae:	f007 fef7 	bl	800a7a0 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80029b2:	2300      	movs	r3, #0
 80029b4:	603b      	str	r3, [r7, #0]
 80029b6:	4b35      	ldr	r3, [pc, #212]	; (8002a8c <SystemClock_Config+0x100>)
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	4a34      	ldr	r2, [pc, #208]	; (8002a8c <SystemClock_Config+0x100>)
 80029bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029c0:	6193      	str	r3, [r2, #24]
 80029c2:	4b32      	ldr	r3, [pc, #200]	; (8002a8c <SystemClock_Config+0x100>)
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80029ca:	603b      	str	r3, [r7, #0]
 80029cc:	4b30      	ldr	r3, [pc, #192]	; (8002a90 <SystemClock_Config+0x104>)
 80029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d0:	4a2f      	ldr	r2, [pc, #188]	; (8002a90 <SystemClock_Config+0x104>)
 80029d2:	f043 0301 	orr.w	r3, r3, #1
 80029d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80029d8:	4b2d      	ldr	r3, [pc, #180]	; (8002a90 <SystemClock_Config+0x104>)
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	603b      	str	r3, [r7, #0]
 80029e2:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80029e4:	bf00      	nop
 80029e6:	4b29      	ldr	r3, [pc, #164]	; (8002a8c <SystemClock_Config+0x100>)
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029f2:	d1f8      	bne.n	80029e6 <SystemClock_Config+0x5a>
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80029f4:	4b27      	ldr	r3, [pc, #156]	; (8002a94 <SystemClock_Config+0x108>)
 80029f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f8:	f023 0303 	bic.w	r3, r3, #3
 80029fc:	4a25      	ldr	r2, [pc, #148]	; (8002a94 <SystemClock_Config+0x108>)
 80029fe:	f043 0302 	orr.w	r3, r3, #2
 8002a02:	6293      	str	r3, [r2, #40]	; 0x28
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8002a04:	2321      	movs	r3, #33	; 0x21
 8002a06:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a0c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a12:	2302      	movs	r3, #2
 8002a14:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a16:	2302      	movs	r3, #2
 8002a18:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 5;
 8002a1a:	2305      	movs	r3, #5
 8002a1c:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 192;
 8002a1e:	23c0      	movs	r3, #192	; 0xc0
 8002a20:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8002a22:	2302      	movs	r3, #2
 8002a24:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 8;
 8002a26:	2308      	movs	r3, #8
 8002a28:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8002a2e:	2308      	movs	r3, #8
 8002a30:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002a32:	2300      	movs	r3, #0
 8002a34:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f007 ff08 	bl	800a854 <HAL_RCC_OscConfig>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8002a4a:	f000 f873 	bl	8002b34 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a4e:	233f      	movs	r3, #63	; 0x3f
 8002a50:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a52:	2303      	movs	r3, #3
 8002a54:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002a56:	2300      	movs	r3, #0
 8002a58:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002a5a:	2308      	movs	r3, #8
 8002a5c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002a5e:	2340      	movs	r3, #64	; 0x40
 8002a60:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002a62:	2340      	movs	r3, #64	; 0x40
 8002a64:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002a66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a6a:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002a6c:	2340      	movs	r3, #64	; 0x40
 8002a6e:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002a70:	1d3b      	adds	r3, r7, #4
 8002a72:	2104      	movs	r1, #4
 8002a74:	4618      	mov	r0, r3
 8002a76:	f008 fafd 	bl	800b074 <HAL_RCC_ClockConfig>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <SystemClock_Config+0xf8>
	{
		Error_Handler();
 8002a80:	f000 f858 	bl	8002b34 <Error_Handler>
	}
}
 8002a84:	bf00      	nop
 8002a86:	3770      	adds	r7, #112	; 0x70
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	58024800 	.word	0x58024800
 8002a90:	58000400 	.word	0x58000400
 8002a94:	58024400 	.word	0x58024400

08002a98 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002a9e:	463b      	mov	r3, r7
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	605a      	str	r2, [r3, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 8002aaa:	f003 f899 	bl	8005be0 <HAL_MPU_Disable>
	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x30040000;
 8002ab6:	4b1c      	ldr	r3, [pc, #112]	; (8002b28 <MPU_Config+0x90>)
 8002ab8:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8002aba:	2307      	movs	r3, #7
 8002abc:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8002aca:	2300      	movs	r3, #0
 8002acc:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002ada:	463b      	mov	r3, r7
 8002adc:	4618      	mov	r0, r3
 8002ade:	f003 f8b7 	bl	8005c50 <HAL_MPU_ConfigRegion>
	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x30044000;
 8002ae6:	4b11      	ldr	r3, [pc, #68]	; (8002b2c <MPU_Config+0x94>)
 8002ae8:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8002aea:	230d      	movs	r3, #13
 8002aec:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8002aee:	2301      	movs	r3, #1
 8002af0:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002af2:	2301      	movs	r3, #1
 8002af4:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002af6:	2300      	movs	r3, #0
 8002af8:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002afa:	463b      	mov	r3, r7
 8002afc:	4618      	mov	r0, r3
 8002afe:	f003 f8a7 	bl	8005c50 <HAL_MPU_ConfigRegion>
	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8002b02:	2302      	movs	r3, #2
 8002b04:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = ADDR_FLASH_SECTOR_6_BANK2;
 8002b06:	4b0a      	ldr	r3, [pc, #40]	; (8002b30 <MPU_Config+0x98>)
 8002b08:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8002b0a:	2311      	movs	r3, #17
 8002b0c:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	737b      	strb	r3, [r7, #13]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002b12:	463b      	mov	r3, r7
 8002b14:	4618      	mov	r0, r3
 8002b16:	f003 f89b 	bl	8005c50 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002b1a:	2004      	movs	r0, #4
 8002b1c:	f003 f878 	bl	8005c10 <HAL_MPU_Enable>

}
 8002b20:	bf00      	nop
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	30040000 	.word	0x30040000
 8002b2c:	30044000 	.word	0x30044000
 8002b30:	081c0000 	.word	0x081c0000

08002b34 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002b38:	b672      	cpsid	i
}
 8002b3a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002b3c:	e7fe      	b.n	8002b3c <Error_Handler+0x8>
	...

08002b40 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002b44:	4b07      	ldr	r3, [pc, #28]	; (8002b64 <MX_RNG_Init+0x24>)
 8002b46:	4a08      	ldr	r2, [pc, #32]	; (8002b68 <MX_RNG_Init+0x28>)
 8002b48:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8002b4a:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <MX_RNG_Init+0x24>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002b50:	4804      	ldr	r0, [pc, #16]	; (8002b64 <MX_RNG_Init+0x24>)
 8002b52:	f00a ffa1 	bl	800da98 <HAL_RNG_Init>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8002b5c:	f7ff ffea 	bl	8002b34 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002b60:	bf00      	nop
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	24004df8 	.word	0x24004df8
 8002b68:	48021800 	.word	0x48021800

08002b6c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b0b2      	sub	sp, #200	; 0xc8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b74:	f107 030c 	add.w	r3, r7, #12
 8002b78:	22bc      	movs	r2, #188	; 0xbc
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f01d fa7b 	bl	8020078 <memset>
  if(rngHandle->Instance==RNG)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a13      	ldr	r2, [pc, #76]	; (8002bd4 <HAL_RNG_MspInit+0x68>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d11e      	bne.n	8002bca <HAL_RNG_MspInit+0x5e>
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002b8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b90:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8002b92:	2300      	movs	r3, #0
 8002b94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b98:	f107 030c 	add.w	r3, r7, #12
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f008 fdf5 	bl	800b78c <HAL_RCCEx_PeriphCLKConfig>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8002ba8:	f7ff ffc4 	bl	8002b34 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002bac:	4b0a      	ldr	r3, [pc, #40]	; (8002bd8 <HAL_RNG_MspInit+0x6c>)
 8002bae:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002bb2:	4a09      	ldr	r2, [pc, #36]	; (8002bd8 <HAL_RNG_MspInit+0x6c>)
 8002bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bb8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002bbc:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <HAL_RNG_MspInit+0x6c>)
 8002bbe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc6:	60bb      	str	r3, [r7, #8]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8002bca:	bf00      	nop
 8002bcc:	37c8      	adds	r7, #200	; 0xc8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	48021800 	.word	0x48021800
 8002bd8:	58024400 	.word	0x58024400

08002bdc <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
DMA_HandleTypeDef hdma_sai1_a;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8002be0:	4b17      	ldr	r3, [pc, #92]	; (8002c40 <MX_SAI1_Init+0x64>)
 8002be2:	4a18      	ldr	r2, [pc, #96]	; (8002c44 <MX_SAI1_Init+0x68>)
 8002be4:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002be6:	4b16      	ldr	r3, [pc, #88]	; (8002c40 <MX_SAI1_Init+0x64>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002bec:	4b14      	ldr	r3, [pc, #80]	; (8002c40 <MX_SAI1_Init+0x64>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002bf2:	4b13      	ldr	r3, [pc, #76]	; (8002c40 <MX_SAI1_Init+0x64>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002bf8:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <MX_SAI1_Init+0x64>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_FULL;
 8002bfe:	4b10      	ldr	r3, [pc, #64]	; (8002c40 <MX_SAI1_Init+0x64>)
 8002c00:	2204      	movs	r2, #4
 8002c02:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8002c04:	4b0e      	ldr	r3, [pc, #56]	; (8002c40 <MX_SAI1_Init+0x64>)
 8002c06:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8002c0a:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <MX_SAI1_Init+0x64>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002c12:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <MX_SAI1_Init+0x64>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002c18:	4b09      	ldr	r3, [pc, #36]	; (8002c40 <MX_SAI1_Init+0x64>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002c1e:	4b08      	ldr	r3, [pc, #32]	; (8002c40 <MX_SAI1_Init+0x64>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8002c24:	2302      	movs	r3, #2
 8002c26:	2200      	movs	r2, #0
 8002c28:	2100      	movs	r1, #0
 8002c2a:	4805      	ldr	r0, [pc, #20]	; (8002c40 <MX_SAI1_Init+0x64>)
 8002c2c:	f00a ffde 	bl	800dbec <HAL_SAI_InitProtocol>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 8002c36:	f7ff ff7d 	bl	8002b34 <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8002c3a:	bf00      	nop
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	24004e84 	.word	0x24004e84
 8002c44:	40015804 	.word	0x40015804

08002c48 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b0b8      	sub	sp, #224	; 0xe0
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c50:	f107 0310 	add.w	r3, r7, #16
 8002c54:	22bc      	movs	r2, #188	; 0xbc
 8002c56:	2100      	movs	r1, #0
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f01d fa0d 	bl	8020078 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a56      	ldr	r2, [pc, #344]	; (8002dbc <HAL_SAI_MspInit+0x174>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	f040 80a4 	bne.w	8002db2 <HAL_SAI_MspInit+0x16a>
    {
    /* SAI1 clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8002c6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c6e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 12;
 8002c70:	230c      	movs	r3, #12
 8002c72:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 389;
 8002c74:	f240 1385 	movw	r3, #389	; 0x185
 8002c78:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 11;
 8002c7a:	230b      	movs	r3, #11
 8002c7c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 11;
 8002c7e:	230b      	movs	r3, #11
 8002c80:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 11;
 8002c82:	230b      	movs	r3, #11
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8002c86:	2340      	movs	r3, #64	; 0x40
 8002c88:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8002c92:	2301      	movs	r3, #1
 8002c94:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c96:	f107 0310 	add.w	r3, r7, #16
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f008 fd76 	bl	800b78c <HAL_RCCEx_PeriphCLKConfig>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <HAL_SAI_MspInit+0x62>
    {
      Error_Handler();
 8002ca6:	f7ff ff45 	bl	8002b34 <Error_Handler>
    }

    if (SAI1_client == 0)
 8002caa:	4b45      	ldr	r3, [pc, #276]	; (8002dc0 <HAL_SAI_MspInit+0x178>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10e      	bne.n	8002cd0 <HAL_SAI_MspInit+0x88>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002cb2:	4b44      	ldr	r3, [pc, #272]	; (8002dc4 <HAL_SAI_MspInit+0x17c>)
 8002cb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cb8:	4a42      	ldr	r2, [pc, #264]	; (8002dc4 <HAL_SAI_MspInit+0x17c>)
 8002cba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002cbe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002cc2:	4b40      	ldr	r3, [pc, #256]	; (8002dc4 <HAL_SAI_MspInit+0x17c>)
 8002cc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ccc:	60fb      	str	r3, [r7, #12]
 8002cce:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8002cd0:	4b3b      	ldr	r3, [pc, #236]	; (8002dc0 <HAL_SAI_MspInit+0x178>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	4a3a      	ldr	r2, [pc, #232]	; (8002dc0 <HAL_SAI_MspInit+0x178>)
 8002cd8:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE5     ------> SAI1_SCK_A
    PD6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_5;
 8002cda:	2334      	movs	r3, #52	; 0x34
 8002cdc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cec:	2303      	movs	r3, #3
 8002cee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002cf2:	2306      	movs	r3, #6
 8002cf4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cf8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4832      	ldr	r0, [pc, #200]	; (8002dc8 <HAL_SAI_MspInit+0x180>)
 8002d00:	f007 fb18 	bl	800a334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d04:	2340      	movs	r3, #64	; 0x40
 8002d06:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d10:	2300      	movs	r3, #0
 8002d12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d16:	2303      	movs	r3, #3
 8002d18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002d1c:	2306      	movs	r3, #6
 8002d1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d22:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d26:	4619      	mov	r1, r3
 8002d28:	4828      	ldr	r0, [pc, #160]	; (8002dcc <HAL_SAI_MspInit+0x184>)
 8002d2a:	f007 fb03 	bl	800a334 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream1;
 8002d2e:	4b28      	ldr	r3, [pc, #160]	; (8002dd0 <HAL_SAI_MspInit+0x188>)
 8002d30:	4a28      	ldr	r2, [pc, #160]	; (8002dd4 <HAL_SAI_MspInit+0x18c>)
 8002d32:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8002d34:	4b26      	ldr	r3, [pc, #152]	; (8002dd0 <HAL_SAI_MspInit+0x188>)
 8002d36:	2257      	movs	r2, #87	; 0x57
 8002d38:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d3a:	4b25      	ldr	r3, [pc, #148]	; (8002dd0 <HAL_SAI_MspInit+0x188>)
 8002d3c:	2240      	movs	r2, #64	; 0x40
 8002d3e:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d40:	4b23      	ldr	r3, [pc, #140]	; (8002dd0 <HAL_SAI_MspInit+0x188>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8002d46:	4b22      	ldr	r3, [pc, #136]	; (8002dd0 <HAL_SAI_MspInit+0x188>)
 8002d48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d4c:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d4e:	4b20      	ldr	r3, [pc, #128]	; (8002dd0 <HAL_SAI_MspInit+0x188>)
 8002d50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d54:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d56:	4b1e      	ldr	r3, [pc, #120]	; (8002dd0 <HAL_SAI_MspInit+0x188>)
 8002d58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d5c:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8002d5e:	4b1c      	ldr	r3, [pc, #112]	; (8002dd0 <HAL_SAI_MspInit+0x188>)
 8002d60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d64:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002d66:	4b1a      	ldr	r3, [pc, #104]	; (8002dd0 <HAL_SAI_MspInit+0x188>)
 8002d68:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002d6c:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002d6e:	4b18      	ldr	r3, [pc, #96]	; (8002dd0 <HAL_SAI_MspInit+0x188>)
 8002d70:	2204      	movs	r2, #4
 8002d72:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002d74:	4b16      	ldr	r3, [pc, #88]	; (8002dd0 <HAL_SAI_MspInit+0x188>)
 8002d76:	2203      	movs	r2, #3
 8002d78:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 8002d7a:	4b15      	ldr	r3, [pc, #84]	; (8002dd0 <HAL_SAI_MspInit+0x188>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002d80:	4b13      	ldr	r3, [pc, #76]	; (8002dd0 <HAL_SAI_MspInit+0x188>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8002d86:	4812      	ldr	r0, [pc, #72]	; (8002dd0 <HAL_SAI_MspInit+0x188>)
 8002d88:	f003 f8a4 	bl	8005ed4 <HAL_DMA_Init>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <HAL_SAI_MspInit+0x14e>
    {
      Error_Handler();
 8002d92:	f7ff fecf 	bl	8002b34 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a0d      	ldr	r2, [pc, #52]	; (8002dd0 <HAL_SAI_MspInit+0x188>)
 8002d9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002d9e:	4a0c      	ldr	r2, [pc, #48]	; (8002dd0 <HAL_SAI_MspInit+0x188>)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a0a      	ldr	r2, [pc, #40]	; (8002dd0 <HAL_SAI_MspInit+0x188>)
 8002da8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002dac:	4a08      	ldr	r2, [pc, #32]	; (8002dd0 <HAL_SAI_MspInit+0x188>)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8002db2:	bf00      	nop
 8002db4:	37e0      	adds	r7, #224	; 0xe0
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40015804 	.word	0x40015804
 8002dc0:	24003654 	.word	0x24003654
 8002dc4:	58024400 	.word	0x58024400
 8002dc8:	58021000 	.word	0x58021000
 8002dcc:	58020c00 	.word	0x58020c00
 8002dd0:	24004e0c 	.word	0x24004e0c
 8002dd4:	40020028 	.word	0x40020028

08002dd8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002ddc:	4b27      	ldr	r3, [pc, #156]	; (8002e7c <MX_SPI2_Init+0xa4>)
 8002dde:	4a28      	ldr	r2, [pc, #160]	; (8002e80 <MX_SPI2_Init+0xa8>)
 8002de0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002de2:	4b26      	ldr	r3, [pc, #152]	; (8002e7c <MX_SPI2_Init+0xa4>)
 8002de4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002de8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002dea:	4b24      	ldr	r3, [pc, #144]	; (8002e7c <MX_SPI2_Init+0xa4>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002df0:	4b22      	ldr	r3, [pc, #136]	; (8002e7c <MX_SPI2_Init+0xa4>)
 8002df2:	2207      	movs	r2, #7
 8002df4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002df6:	4b21      	ldr	r3, [pc, #132]	; (8002e7c <MX_SPI2_Init+0xa4>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002dfc:	4b1f      	ldr	r3, [pc, #124]	; (8002e7c <MX_SPI2_Init+0xa4>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002e02:	4b1e      	ldr	r3, [pc, #120]	; (8002e7c <MX_SPI2_Init+0xa4>)
 8002e04:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002e08:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002e0a:	4b1c      	ldr	r3, [pc, #112]	; (8002e7c <MX_SPI2_Init+0xa4>)
 8002e0c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8002e10:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e12:	4b1a      	ldr	r3, [pc, #104]	; (8002e7c <MX_SPI2_Init+0xa4>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e18:	4b18      	ldr	r3, [pc, #96]	; (8002e7c <MX_SPI2_Init+0xa4>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e1e:	4b17      	ldr	r3, [pc, #92]	; (8002e7c <MX_SPI2_Init+0xa4>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002e24:	4b15      	ldr	r3, [pc, #84]	; (8002e7c <MX_SPI2_Init+0xa4>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002e2a:	4b14      	ldr	r3, [pc, #80]	; (8002e7c <MX_SPI2_Init+0xa4>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002e30:	4b12      	ldr	r3, [pc, #72]	; (8002e7c <MX_SPI2_Init+0xa4>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002e36:	4b11      	ldr	r3, [pc, #68]	; (8002e7c <MX_SPI2_Init+0xa4>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002e3c:	4b0f      	ldr	r3, [pc, #60]	; (8002e7c <MX_SPI2_Init+0xa4>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002e42:	4b0e      	ldr	r3, [pc, #56]	; (8002e7c <MX_SPI2_Init+0xa4>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002e48:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <MX_SPI2_Init+0xa4>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002e4e:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <MX_SPI2_Init+0xa4>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002e54:	4b09      	ldr	r3, [pc, #36]	; (8002e7c <MX_SPI2_Init+0xa4>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002e5a:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <MX_SPI2_Init+0xa4>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002e60:	4b06      	ldr	r3, [pc, #24]	; (8002e7c <MX_SPI2_Init+0xa4>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002e66:	4805      	ldr	r0, [pc, #20]	; (8002e7c <MX_SPI2_Init+0xa4>)
 8002e68:	f00b fc66 	bl	800e738 <HAL_SPI_Init>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8002e72:	f7ff fe5f 	bl	8002b34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002e76:	bf00      	nop
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	24004f1c 	.word	0x24004f1c
 8002e80:	40003800 	.word	0x40003800

08002e84 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b0ba      	sub	sp, #232	; 0xe8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e8c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	605a      	str	r2, [r3, #4]
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	60da      	str	r2, [r3, #12]
 8002e9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e9c:	f107 0318 	add.w	r3, r7, #24
 8002ea0:	22bc      	movs	r2, #188	; 0xbc
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f01d f8e7 	bl	8020078 <memset>
  if(spiHandle->Instance==SPI2)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a37      	ldr	r2, [pc, #220]	; (8002f8c <HAL_SPI_MspInit+0x108>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d166      	bne.n	8002f82 <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002eb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eb8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ebe:	f107 0318 	add.w	r3, r7, #24
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f008 fc62 	bl	800b78c <HAL_RCCEx_PeriphCLKConfig>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002ece:	f7ff fe31 	bl	8002b34 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ed2:	4b2f      	ldr	r3, [pc, #188]	; (8002f90 <HAL_SPI_MspInit+0x10c>)
 8002ed4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ed8:	4a2d      	ldr	r2, [pc, #180]	; (8002f90 <HAL_SPI_MspInit+0x10c>)
 8002eda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ede:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ee2:	4b2b      	ldr	r3, [pc, #172]	; (8002f90 <HAL_SPI_MspInit+0x10c>)
 8002ee4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ee8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ef0:	4b27      	ldr	r3, [pc, #156]	; (8002f90 <HAL_SPI_MspInit+0x10c>)
 8002ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ef6:	4a26      	ldr	r2, [pc, #152]	; (8002f90 <HAL_SPI_MspInit+0x10c>)
 8002ef8:	f043 0308 	orr.w	r3, r3, #8
 8002efc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f00:	4b23      	ldr	r3, [pc, #140]	; (8002f90 <HAL_SPI_MspInit+0x10c>)
 8002f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f06:	f003 0308 	and.w	r3, r3, #8
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f0e:	4b20      	ldr	r3, [pc, #128]	; (8002f90 <HAL_SPI_MspInit+0x10c>)
 8002f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f14:	4a1e      	ldr	r2, [pc, #120]	; (8002f90 <HAL_SPI_MspInit+0x10c>)
 8002f16:	f043 0302 	orr.w	r3, r3, #2
 8002f1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f1e:	4b1c      	ldr	r3, [pc, #112]	; (8002f90 <HAL_SPI_MspInit+0x10c>)
 8002f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PD3     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f2c:	2308      	movs	r3, #8
 8002f2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f32:	2302      	movs	r3, #2
 8002f34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f44:	2305      	movs	r3, #5
 8002f46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f4a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4810      	ldr	r0, [pc, #64]	; (8002f94 <HAL_SPI_MspInit+0x110>)
 8002f52:	f007 f9ef 	bl	800a334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14;
 8002f56:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002f5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5e:	2302      	movs	r3, #2
 8002f60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f64:	2300      	movs	r3, #0
 8002f66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f70:	2305      	movs	r3, #5
 8002f72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f76:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4806      	ldr	r0, [pc, #24]	; (8002f98 <HAL_SPI_MspInit+0x114>)
 8002f7e:	f007 f9d9 	bl	800a334 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002f82:	bf00      	nop
 8002f84:	37e8      	adds	r7, #232	; 0xe8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40003800 	.word	0x40003800
 8002f90:	58024400 	.word	0x58024400
 8002f94:	58020c00 	.word	0x58020c00
 8002f98:	58020400 	.word	0x58020400

08002f9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fa2:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <HAL_MspInit+0x34>)
 8002fa4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002fa8:	4a09      	ldr	r2, [pc, #36]	; (8002fd0 <HAL_MspInit+0x34>)
 8002faa:	f043 0302 	orr.w	r3, r3, #2
 8002fae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002fb2:	4b07      	ldr	r3, [pc, #28]	; (8002fd0 <HAL_MspInit+0x34>)
 8002fb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	607b      	str	r3, [r7, #4]
 8002fbe:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002fc0:	2005      	movs	r0, #5
 8002fc2:	f002 fdcd 	bl	8005b60 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fc6:	bf00      	nop
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	58024400 	.word	0x58024400

08002fd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fd8:	e7fe      	b.n	8002fd8 <NMI_Handler+0x4>

08002fda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fde:	e7fe      	b.n	8002fde <HardFault_Handler+0x4>

08002fe0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fe4:	e7fe      	b.n	8002fe4 <MemManage_Handler+0x4>

08002fe6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fea:	e7fe      	b.n	8002fea <BusFault_Handler+0x4>

08002fec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ff0:	e7fe      	b.n	8002ff0 <UsageFault_Handler+0x4>

08002ff2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ff6:	bf00      	nop
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003004:	bf00      	nop
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800300e:	b480      	push	{r7}
 8003010:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003012:	bf00      	nop
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003020:	f001 f850 	bl	80040c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003024:	bf00      	nop
 8003026:	bd80      	pop	{r7, pc}

08003028 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 800302c:	4802      	ldr	r0, [pc, #8]	; (8003038 <DMA1_Stream1_IRQHandler+0x10>)
 800302e:	f003 fd17 	bl	8006a60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003032:	bf00      	nop
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	24004e0c 	.word	0x24004e0c

0800303c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003040:	4802      	ldr	r0, [pc, #8]	; (800304c <DMA2_Stream0_IRQHandler+0x10>)
 8003042:	f003 fd0d 	bl	8006a60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	24004c98 	.word	0x24004c98

08003050 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003054:	4802      	ldr	r0, [pc, #8]	; (8003060 <DMA2_Stream1_IRQHandler+0x10>)
 8003056:	f003 fd03 	bl	8006a60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800305a:	bf00      	nop
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	24004d10 	.word	0x24004d10

08003064 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003068:	4802      	ldr	r0, [pc, #8]	; (8003074 <DMA2_Stream2_IRQHandler+0x10>)
 800306a:	f003 fcf9 	bl	8006a60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800306e:	bf00      	nop
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	24004b58 	.word	0x24004b58

08003078 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800307c:	4802      	ldr	r0, [pc, #8]	; (8003088 <ETH_IRQHandler+0x10>)
 800307e:	f005 fc95 	bl	80089ac <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8003082:	bf00      	nop
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	2400530c 	.word	0x2400530c

0800308c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
	return 1;
 8003090:	2301      	movs	r3, #1
}
 8003092:	4618      	mov	r0, r3
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <_kill>:

int _kill(int pid, int sig)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80030a6:	4b05      	ldr	r3, [pc, #20]	; (80030bc <_kill+0x20>)
 80030a8:	2216      	movs	r2, #22
 80030aa:	601a      	str	r2, [r3, #0]
	return -1;
 80030ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	2400cad4 	.word	0x2400cad4

080030c0 <_exit>:

void _exit (int status)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80030c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7ff ffe5 	bl	800309c <_kill>
	while (1) {}		/* Make sure we hang here */
 80030d2:	e7fe      	b.n	80030d2 <_exit+0x12>

080030d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030e0:	2300      	movs	r3, #0
 80030e2:	617b      	str	r3, [r7, #20]
 80030e4:	e00a      	b.n	80030fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80030e6:	f3af 8000 	nop.w
 80030ea:	4601      	mov	r1, r0
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	1c5a      	adds	r2, r3, #1
 80030f0:	60ba      	str	r2, [r7, #8]
 80030f2:	b2ca      	uxtb	r2, r1
 80030f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	3301      	adds	r3, #1
 80030fa:	617b      	str	r3, [r7, #20]
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	429a      	cmp	r2, r3
 8003102:	dbf0      	blt.n	80030e6 <_read+0x12>
	}

return len;
 8003104:	687b      	ldr	r3, [r7, #4]
}
 8003106:	4618      	mov	r0, r3
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b086      	sub	sp, #24
 8003112:	af00      	add	r7, sp, #0
 8003114:	60f8      	str	r0, [r7, #12]
 8003116:	60b9      	str	r1, [r7, #8]
 8003118:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800311a:	2300      	movs	r3, #0
 800311c:	617b      	str	r3, [r7, #20]
 800311e:	e009      	b.n	8003134 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	1c5a      	adds	r2, r3, #1
 8003124:	60ba      	str	r2, [r7, #8]
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f000 fd79 	bl	8003c20 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	3301      	adds	r3, #1
 8003132:	617b      	str	r3, [r7, #20]
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	429a      	cmp	r2, r3
 800313a:	dbf1      	blt.n	8003120 <_write+0x12>
	}
	return len;
 800313c:	687b      	ldr	r3, [r7, #4]
}
 800313e:	4618      	mov	r0, r3
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <_close>:

int _close(int file)
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
	return -1;
 800314e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003152:	4618      	mov	r0, r3
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
 8003166:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800316e:	605a      	str	r2, [r3, #4]
	return 0;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr

0800317e <_isatty>:

int _isatty(int file)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
	return 1;
 8003186:	2301      	movs	r3, #1
}
 8003188:	4618      	mov	r0, r3
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
	return 0;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
	...

080031b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b087      	sub	sp, #28
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031b8:	4a14      	ldr	r2, [pc, #80]	; (800320c <_sbrk+0x5c>)
 80031ba:	4b15      	ldr	r3, [pc, #84]	; (8003210 <_sbrk+0x60>)
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031c4:	4b13      	ldr	r3, [pc, #76]	; (8003214 <_sbrk+0x64>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d102      	bne.n	80031d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031cc:	4b11      	ldr	r3, [pc, #68]	; (8003214 <_sbrk+0x64>)
 80031ce:	4a12      	ldr	r2, [pc, #72]	; (8003218 <_sbrk+0x68>)
 80031d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031d2:	4b10      	ldr	r3, [pc, #64]	; (8003214 <_sbrk+0x64>)
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4413      	add	r3, r2
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d205      	bcs.n	80031ec <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80031e0:	4b0e      	ldr	r3, [pc, #56]	; (800321c <_sbrk+0x6c>)
 80031e2:	220c      	movs	r2, #12
 80031e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031ea:	e009      	b.n	8003200 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80031ec:	4b09      	ldr	r3, [pc, #36]	; (8003214 <_sbrk+0x64>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031f2:	4b08      	ldr	r3, [pc, #32]	; (8003214 <_sbrk+0x64>)
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4413      	add	r3, r2
 80031fa:	4a06      	ldr	r2, [pc, #24]	; (8003214 <_sbrk+0x64>)
 80031fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031fe:	68fb      	ldr	r3, [r7, #12]
}
 8003200:	4618      	mov	r0, r3
 8003202:	371c      	adds	r7, #28
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	24080000 	.word	0x24080000
 8003210:	00000400 	.word	0x00000400
 8003214:	24003658 	.word	0x24003658
 8003218:	2400cae8 	.word	0x2400cae8
 800321c:	2400cad4 	.word	0x2400cad4

08003220 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b09a      	sub	sp, #104	; 0x68
 8003224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003226:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800322a:	2200      	movs	r2, #0
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	605a      	str	r2, [r3, #4]
 8003230:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003232:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003236:	2200      	movs	r2, #0
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	605a      	str	r2, [r3, #4]
 800323c:	609a      	str	r2, [r3, #8]
 800323e:	60da      	str	r2, [r3, #12]
 8003240:	611a      	str	r2, [r3, #16]
 8003242:	615a      	str	r2, [r3, #20]
 8003244:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003246:	1d3b      	adds	r3, r7, #4
 8003248:	222c      	movs	r2, #44	; 0x2c
 800324a:	2100      	movs	r1, #0
 800324c:	4618      	mov	r0, r3
 800324e:	f01c ff13 	bl	8020078 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

	uint32_t prescalerValue, counterPeriod, pulseValueCH1, pulseValueCH2;

	prescalerValue = (uint32_t)(((SystemCoreClock / 96) / (CIS_CLK_FREQ)) - 1);
 8003252:	4b48      	ldr	r3, [pc, #288]	; (8003374 <MX_TIM1_Init+0x154>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	0adb      	lsrs	r3, r3, #11
 8003258:	4a47      	ldr	r2, [pc, #284]	; (8003378 <MX_TIM1_Init+0x158>)
 800325a:	fba2 2303 	umull	r2, r3, r2, r3
 800325e:	09db      	lsrs	r3, r3, #7
 8003260:	3b01      	subs	r3, #1
 8003262:	667b      	str	r3, [r7, #100]	; 0x64
	counterPeriod = 48 - 1;
 8003264:	232f      	movs	r3, #47	; 0x2f
 8003266:	663b      	str	r3, [r7, #96]	; 0x60
	pulseValueCH2 = 24 - 1;
 8003268:	2317      	movs	r3, #23
 800326a:	65fb      	str	r3, [r7, #92]	; 0x5c
	pulseValueCH1 = 12 - 1;
 800326c:	230b      	movs	r3, #11
 800326e:	65bb      	str	r3, [r7, #88]	; 0x58

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003270:	4b42      	ldr	r3, [pc, #264]	; (800337c <MX_TIM1_Init+0x15c>)
 8003272:	4a43      	ldr	r2, [pc, #268]	; (8003380 <MX_TIM1_Init+0x160>)
 8003274:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = prescalerValue;
 8003276:	4a41      	ldr	r2, [pc, #260]	; (800337c <MX_TIM1_Init+0x15c>)
 8003278:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800327a:	6053      	str	r3, [r2, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800327c:	4b3f      	ldr	r3, [pc, #252]	; (800337c <MX_TIM1_Init+0x15c>)
 800327e:	2200      	movs	r2, #0
 8003280:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = counterPeriod;
 8003282:	4a3e      	ldr	r2, [pc, #248]	; (800337c <MX_TIM1_Init+0x15c>)
 8003284:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003286:	60d3      	str	r3, [r2, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003288:	4b3c      	ldr	r3, [pc, #240]	; (800337c <MX_TIM1_Init+0x15c>)
 800328a:	2200      	movs	r2, #0
 800328c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800328e:	4b3b      	ldr	r3, [pc, #236]	; (800337c <MX_TIM1_Init+0x15c>)
 8003290:	2200      	movs	r2, #0
 8003292:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003294:	4b39      	ldr	r3, [pc, #228]	; (800337c <MX_TIM1_Init+0x15c>)
 8003296:	2200      	movs	r2, #0
 8003298:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800329a:	4838      	ldr	r0, [pc, #224]	; (800337c <MX_TIM1_Init+0x15c>)
 800329c:	f00c fc01 	bl	800faa2 <HAL_TIM_PWM_Init>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80032a6:	f7ff fc45 	bl	8002b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 80032aa:	2330      	movs	r3, #48	; 0x30
 80032ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80032ae:	2300      	movs	r3, #0
 80032b0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80032b2:	2380      	movs	r3, #128	; 0x80
 80032b4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80032b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80032ba:	4619      	mov	r1, r3
 80032bc:	482f      	ldr	r0, [pc, #188]	; (800337c <MX_TIM1_Init+0x15c>)
 80032be:	f00d fb93 	bl	80109e8 <HAL_TIMEx_MasterConfigSynchronization>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80032c8:	f7ff fc34 	bl	8002b34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80032cc:	2370      	movs	r3, #112	; 0x70
 80032ce:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = pulseValueCH1;
 80032d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032d2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032d4:	2300      	movs	r3, #0
 80032d6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80032d8:	2300      	movs	r3, #0
 80032da:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032dc:	2300      	movs	r3, #0
 80032de:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80032e0:	2300      	movs	r3, #0
 80032e2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80032e4:	2300      	movs	r3, #0
 80032e6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80032ec:	2200      	movs	r2, #0
 80032ee:	4619      	mov	r1, r3
 80032f0:	4822      	ldr	r0, [pc, #136]	; (800337c <MX_TIM1_Init+0x15c>)
 80032f2:	f00c fd35 	bl	800fd60 <HAL_TIM_PWM_ConfigChannel>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 80032fc:	f7ff fc1a 	bl	8002b34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003300:	2360      	movs	r3, #96	; 0x60
 8003302:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = pulseValueCH2;
 8003304:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003306:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003308:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800330c:	2204      	movs	r2, #4
 800330e:	4619      	mov	r1, r3
 8003310:	481a      	ldr	r0, [pc, #104]	; (800337c <MX_TIM1_Init+0x15c>)
 8003312:	f00c fd25 	bl	800fd60 <HAL_TIM_PWM_ConfigChannel>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800331c:	f7ff fc0a 	bl	8002b34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003320:	2300      	movs	r3, #0
 8003322:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003324:	2300      	movs	r3, #0
 8003326:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003328:	2300      	movs	r3, #0
 800332a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800332c:	2300      	movs	r3, #0
 800332e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003330:	2300      	movs	r3, #0
 8003332:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003334:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003338:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800333a:	2300      	movs	r3, #0
 800333c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800333e:	2300      	movs	r3, #0
 8003340:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003342:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003346:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003348:	2300      	movs	r3, #0
 800334a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800334c:	2300      	movs	r3, #0
 800334e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003350:	1d3b      	adds	r3, r7, #4
 8003352:	4619      	mov	r1, r3
 8003354:	4809      	ldr	r0, [pc, #36]	; (800337c <MX_TIM1_Init+0x15c>)
 8003356:	f00d fbcf 	bl	8010af8 <HAL_TIMEx_ConfigBreakDeadTime>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8003360:	f7ff fbe8 	bl	8002b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003364:	4805      	ldr	r0, [pc, #20]	; (800337c <MX_TIM1_Init+0x15c>)
 8003366:	f000 facb 	bl	8003900 <HAL_TIM_MspPostInit>

}
 800336a:	bf00      	nop
 800336c:	3768      	adds	r7, #104	; 0x68
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	24000000 	.word	0x24000000
 8003378:	0023ca99 	.word	0x0023ca99
 800337c:	240050d4 	.word	0x240050d4
 8003380:	40010000 	.word	0x40010000

08003384 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b092      	sub	sp, #72	; 0x48
 8003388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800338a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800338e:	2200      	movs	r2, #0
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	605a      	str	r2, [r3, #4]
 8003394:	609a      	str	r2, [r3, #8]
 8003396:	60da      	str	r2, [r3, #12]
 8003398:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800339a:	f107 031c 	add.w	r3, r7, #28
 800339e:	2200      	movs	r2, #0
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	605a      	str	r2, [r3, #4]
 80033a4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033a6:	463b      	mov	r3, r7
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	605a      	str	r2, [r3, #4]
 80033ae:	609a      	str	r2, [r3, #8]
 80033b0:	60da      	str	r2, [r3, #12]
 80033b2:	611a      	str	r2, [r3, #16]
 80033b4:	615a      	str	r2, [r3, #20]
 80033b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  uint32_t prescalerValue, counterPeriod, pulseValue;

  prescalerValue = 0;
 80033b8:	2300      	movs	r3, #0
 80033ba:	647b      	str	r3, [r7, #68]	; 0x44

#ifdef CIS_BW
  counterPeriod = CIS_END_CAPTURE - 1;
 80033bc:	f240 23af 	movw	r3, #687	; 0x2af
 80033c0:	643b      	str	r3, [r7, #64]	; 0x40
#else
  counterPeriod = (CIS_END_CAPTURE * 3) - 1;
#endif

  if (CIS_LED_BLUE_OFF > 0)
	  pulseValue = CIS_LED_BLUE_OFF - 1;
 80033c2:	f240 43af 	movw	r3, #1199	; 0x4af
 80033c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  else
    pulseValue = 0;

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80033c8:	4b2c      	ldr	r3, [pc, #176]	; (800347c <MX_TIM3_Init+0xf8>)
 80033ca:	4a2d      	ldr	r2, [pc, #180]	; (8003480 <MX_TIM3_Init+0xfc>)
 80033cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = prescalerValue;
 80033ce:	4a2b      	ldr	r2, [pc, #172]	; (800347c <MX_TIM3_Init+0xf8>)
 80033d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033d2:	6053      	str	r3, [r2, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033d4:	4b29      	ldr	r3, [pc, #164]	; (800347c <MX_TIM3_Init+0xf8>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = counterPeriod;
 80033da:	4a28      	ldr	r2, [pc, #160]	; (800347c <MX_TIM3_Init+0xf8>)
 80033dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033de:	60d3      	str	r3, [r2, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033e0:	4b26      	ldr	r3, [pc, #152]	; (800347c <MX_TIM3_Init+0xf8>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033e6:	4b25      	ldr	r3, [pc, #148]	; (800347c <MX_TIM3_Init+0xf8>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80033ec:	4823      	ldr	r0, [pc, #140]	; (800347c <MX_TIM3_Init+0xf8>)
 80033ee:	f00c fb01 	bl	800f9f4 <HAL_TIM_Base_Init>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80033f8:	f7ff fb9c 	bl	8002b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80033fc:	481f      	ldr	r0, [pc, #124]	; (800347c <MX_TIM3_Init+0xf8>)
 80033fe:	f00c fb50 	bl	800faa2 <HAL_TIM_PWM_Init>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8003408:	f7ff fb94 	bl	8002b34 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 800340c:	2305      	movs	r3, #5
 800340e:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8003410:	2300      	movs	r3, #0
 8003412:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8003414:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003418:	4619      	mov	r1, r3
 800341a:	4818      	ldr	r0, [pc, #96]	; (800347c <MX_TIM3_Init+0xf8>)
 800341c:	f00c fdb0 	bl	800ff80 <HAL_TIM_SlaveConfigSynchro>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8003426:	f7ff fb85 	bl	8002b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800342a:	2300      	movs	r3, #0
 800342c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800342e:	2300      	movs	r3, #0
 8003430:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003432:	f107 031c 	add.w	r3, r7, #28
 8003436:	4619      	mov	r1, r3
 8003438:	4810      	ldr	r0, [pc, #64]	; (800347c <MX_TIM3_Init+0xf8>)
 800343a:	f00d fad5 	bl	80109e8 <HAL_TIMEx_MasterConfigSynchronization>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <MX_TIM3_Init+0xc4>
  {
    Error_Handler();
 8003444:	f7ff fb76 	bl	8002b34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003448:	2360      	movs	r3, #96	; 0x60
 800344a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = pulseValue;
 800344c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800344e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003450:	2300      	movs	r3, #0
 8003452:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003454:	2300      	movs	r3, #0
 8003456:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003458:	463b      	mov	r3, r7
 800345a:	2200      	movs	r2, #0
 800345c:	4619      	mov	r1, r3
 800345e:	4807      	ldr	r0, [pc, #28]	; (800347c <MX_TIM3_Init+0xf8>)
 8003460:	f00c fc7e 	bl	800fd60 <HAL_TIM_PWM_ConfigChannel>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 800346a:	f7ff fb63 	bl	8002b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800346e:	4803      	ldr	r0, [pc, #12]	; (800347c <MX_TIM3_Init+0xf8>)
 8003470:	f000 fa46 	bl	8003900 <HAL_TIM_MspPostInit>

}
 8003474:	bf00      	nop
 8003476:	3748      	adds	r7, #72	; 0x48
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	24005088 	.word	0x24005088
 8003480:	40000400 	.word	0x40000400

08003484 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b092      	sub	sp, #72	; 0x48
 8003488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800348a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	605a      	str	r2, [r3, #4]
 8003494:	609a      	str	r2, [r3, #8]
 8003496:	60da      	str	r2, [r3, #12]
 8003498:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800349a:	f107 031c 	add.w	r3, r7, #28
 800349e:	2200      	movs	r2, #0
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	605a      	str	r2, [r3, #4]
 80034a4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034a6:	463b      	mov	r3, r7
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	605a      	str	r2, [r3, #4]
 80034ae:	609a      	str	r2, [r3, #8]
 80034b0:	60da      	str	r2, [r3, #12]
 80034b2:	611a      	str	r2, [r3, #16]
 80034b4:	615a      	str	r2, [r3, #20]
 80034b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  uint32_t prescalerValue, counterPeriod, pulseValue;

  prescalerValue = 0;
 80034b8:	2300      	movs	r3, #0
 80034ba:	647b      	str	r3, [r7, #68]	; 0x44

#ifdef CIS_BW
  counterPeriod = CIS_END_CAPTURE - 1;
 80034bc:	f240 23af 	movw	r3, #687	; 0x2af
 80034c0:	643b      	str	r3, [r7, #64]	; 0x40
#else
  counterPeriod = (CIS_END_CAPTURE * 3) - 1;
#endif

  if (CIS_LED_RED_OFF > 0)
	  pulseValue = CIS_LED_RED_OFF - 1;
 80034c2:	f240 43af 	movw	r3, #1199	; 0x4af
 80034c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  else
    pulseValue = 0;

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80034c8:	4b2c      	ldr	r3, [pc, #176]	; (800357c <MX_TIM4_Init+0xf8>)
 80034ca:	4a2d      	ldr	r2, [pc, #180]	; (8003580 <MX_TIM4_Init+0xfc>)
 80034cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = prescalerValue;
 80034ce:	4a2b      	ldr	r2, [pc, #172]	; (800357c <MX_TIM4_Init+0xf8>)
 80034d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034d2:	6053      	str	r3, [r2, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034d4:	4b29      	ldr	r3, [pc, #164]	; (800357c <MX_TIM4_Init+0xf8>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = counterPeriod;
 80034da:	4a28      	ldr	r2, [pc, #160]	; (800357c <MX_TIM4_Init+0xf8>)
 80034dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034de:	60d3      	str	r3, [r2, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034e0:	4b26      	ldr	r3, [pc, #152]	; (800357c <MX_TIM4_Init+0xf8>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034e6:	4b25      	ldr	r3, [pc, #148]	; (800357c <MX_TIM4_Init+0xf8>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80034ec:	4823      	ldr	r0, [pc, #140]	; (800357c <MX_TIM4_Init+0xf8>)
 80034ee:	f00c fa81 	bl	800f9f4 <HAL_TIM_Base_Init>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80034f8:	f7ff fb1c 	bl	8002b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80034fc:	481f      	ldr	r0, [pc, #124]	; (800357c <MX_TIM4_Init+0xf8>)
 80034fe:	f00c fad0 	bl	800faa2 <HAL_TIM_PWM_Init>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8003508:	f7ff fb14 	bl	8002b34 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 800350c:	2305      	movs	r3, #5
 800350e:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8003510:	2300      	movs	r3, #0
 8003512:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8003514:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003518:	4619      	mov	r1, r3
 800351a:	4818      	ldr	r0, [pc, #96]	; (800357c <MX_TIM4_Init+0xf8>)
 800351c:	f00c fd30 	bl	800ff80 <HAL_TIM_SlaveConfigSynchro>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <MX_TIM4_Init+0xa6>
  {
    Error_Handler();
 8003526:	f7ff fb05 	bl	8002b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800352a:	2300      	movs	r3, #0
 800352c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800352e:	2300      	movs	r3, #0
 8003530:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003532:	f107 031c 	add.w	r3, r7, #28
 8003536:	4619      	mov	r1, r3
 8003538:	4810      	ldr	r0, [pc, #64]	; (800357c <MX_TIM4_Init+0xf8>)
 800353a:	f00d fa55 	bl	80109e8 <HAL_TIMEx_MasterConfigSynchronization>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <MX_TIM4_Init+0xc4>
  {
    Error_Handler();
 8003544:	f7ff faf6 	bl	8002b34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003548:	2360      	movs	r3, #96	; 0x60
 800354a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = pulseValue;
 800354c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800354e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003550:	2300      	movs	r3, #0
 8003552:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003554:	2300      	movs	r3, #0
 8003556:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003558:	463b      	mov	r3, r7
 800355a:	2204      	movs	r2, #4
 800355c:	4619      	mov	r1, r3
 800355e:	4807      	ldr	r0, [pc, #28]	; (800357c <MX_TIM4_Init+0xf8>)
 8003560:	f00c fbfe 	bl	800fd60 <HAL_TIM_PWM_ConfigChannel>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 800356a:	f7ff fae3 	bl	8002b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800356e:	4803      	ldr	r0, [pc, #12]	; (800357c <MX_TIM4_Init+0xf8>)
 8003570:	f000 f9c6 	bl	8003900 <HAL_TIM_MspPostInit>

}
 8003574:	bf00      	nop
 8003576:	3748      	adds	r7, #72	; 0x48
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	24004ff0 	.word	0x24004ff0
 8003580:	40000800 	.word	0x40000800

08003584 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b092      	sub	sp, #72	; 0x48
 8003588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800358a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	605a      	str	r2, [r3, #4]
 8003594:	609a      	str	r2, [r3, #8]
 8003596:	60da      	str	r2, [r3, #12]
 8003598:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800359a:	f107 031c 	add.w	r3, r7, #28
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	605a      	str	r2, [r3, #4]
 80035a4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035a6:	463b      	mov	r3, r7
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	605a      	str	r2, [r3, #4]
 80035ae:	609a      	str	r2, [r3, #8]
 80035b0:	60da      	str	r2, [r3, #12]
 80035b2:	611a      	str	r2, [r3, #16]
 80035b4:	615a      	str	r2, [r3, #20]
 80035b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  uint32_t prescalerValue, counterPeriod, pulseValue;

  prescalerValue = 0;
 80035b8:	2300      	movs	r3, #0
 80035ba:	647b      	str	r3, [r7, #68]	; 0x44

#ifdef CIS_BW
  counterPeriod = CIS_END_CAPTURE - 1;
 80035bc:	f240 23af 	movw	r3, #687	; 0x2af
 80035c0:	643b      	str	r3, [r7, #64]	; 0x40
#else
  counterPeriod = (CIS_END_CAPTURE * 3) - 1;
#endif

  if (CIS_LED_GREEN_OFF > 0)
	  pulseValue = CIS_LED_GREEN_OFF - 1;
 80035c2:	f240 43af 	movw	r3, #1199	; 0x4af
 80035c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  else
    pulseValue = 0;

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80035c8:	4b2c      	ldr	r3, [pc, #176]	; (800367c <MX_TIM5_Init+0xf8>)
 80035ca:	4a2d      	ldr	r2, [pc, #180]	; (8003680 <MX_TIM5_Init+0xfc>)
 80035cc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = prescalerValue;
 80035ce:	4a2b      	ldr	r2, [pc, #172]	; (800367c <MX_TIM5_Init+0xf8>)
 80035d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035d2:	6053      	str	r3, [r2, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035d4:	4b29      	ldr	r3, [pc, #164]	; (800367c <MX_TIM5_Init+0xf8>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = counterPeriod;
 80035da:	4a28      	ldr	r2, [pc, #160]	; (800367c <MX_TIM5_Init+0xf8>)
 80035dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035de:	60d3      	str	r3, [r2, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035e0:	4b26      	ldr	r3, [pc, #152]	; (800367c <MX_TIM5_Init+0xf8>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035e6:	4b25      	ldr	r3, [pc, #148]	; (800367c <MX_TIM5_Init+0xf8>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80035ec:	4823      	ldr	r0, [pc, #140]	; (800367c <MX_TIM5_Init+0xf8>)
 80035ee:	f00c fa01 	bl	800f9f4 <HAL_TIM_Base_Init>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 80035f8:	f7ff fa9c 	bl	8002b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80035fc:	481f      	ldr	r0, [pc, #124]	; (800367c <MX_TIM5_Init+0xf8>)
 80035fe:	f00c fa50 	bl	800faa2 <HAL_TIM_PWM_Init>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 8003608:	f7ff fa94 	bl	8002b34 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 800360c:	2305      	movs	r3, #5
 800360e:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8003610:	2300      	movs	r3, #0
 8003612:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8003614:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003618:	4619      	mov	r1, r3
 800361a:	4818      	ldr	r0, [pc, #96]	; (800367c <MX_TIM5_Init+0xf8>)
 800361c:	f00c fcb0 	bl	800ff80 <HAL_TIM_SlaveConfigSynchro>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <MX_TIM5_Init+0xa6>
  {
    Error_Handler();
 8003626:	f7ff fa85 	bl	8002b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800362a:	2300      	movs	r3, #0
 800362c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800362e:	2300      	movs	r3, #0
 8003630:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003632:	f107 031c 	add.w	r3, r7, #28
 8003636:	4619      	mov	r1, r3
 8003638:	4810      	ldr	r0, [pc, #64]	; (800367c <MX_TIM5_Init+0xf8>)
 800363a:	f00d f9d5 	bl	80109e8 <HAL_TIMEx_MasterConfigSynchronization>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <MX_TIM5_Init+0xc4>
  {
    Error_Handler();
 8003644:	f7ff fa76 	bl	8002b34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003648:	2360      	movs	r3, #96	; 0x60
 800364a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = pulseValue;
 800364c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800364e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003650:	2300      	movs	r3, #0
 8003652:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003654:	2300      	movs	r3, #0
 8003656:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003658:	463b      	mov	r3, r7
 800365a:	2208      	movs	r2, #8
 800365c:	4619      	mov	r1, r3
 800365e:	4807      	ldr	r0, [pc, #28]	; (800367c <MX_TIM5_Init+0xf8>)
 8003660:	f00c fb7e 	bl	800fd60 <HAL_TIM_PWM_ConfigChannel>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <MX_TIM5_Init+0xea>
  {
    Error_Handler();
 800366a:	f7ff fa63 	bl	8002b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800366e:	4803      	ldr	r0, [pc, #12]	; (800367c <MX_TIM5_Init+0xf8>)
 8003670:	f000 f946 	bl	8003900 <HAL_TIM_MspPostInit>

}
 8003674:	bf00      	nop
 8003676:	3748      	adds	r7, #72	; 0x48
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	2400503c 	.word	0x2400503c
 8003680:	40000c00 	.word	0x40000c00

08003684 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b09e      	sub	sp, #120	; 0x78
 8003688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800368a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	605a      	str	r2, [r3, #4]
 8003694:	609a      	str	r2, [r3, #8]
 8003696:	60da      	str	r2, [r3, #12]
 8003698:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800369a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800369e:	2200      	movs	r2, #0
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	605a      	str	r2, [r3, #4]
 80036a4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80036a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80036aa:	2200      	movs	r2, #0
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	605a      	str	r2, [r3, #4]
 80036b0:	609a      	str	r2, [r3, #8]
 80036b2:	60da      	str	r2, [r3, #12]
 80036b4:	611a      	str	r2, [r3, #16]
 80036b6:	615a      	str	r2, [r3, #20]
 80036b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80036ba:	1d3b      	adds	r3, r7, #4
 80036bc:	222c      	movs	r2, #44	; 0x2c
 80036be:	2100      	movs	r1, #0
 80036c0:	4618      	mov	r0, r3
 80036c2:	f01c fcd9 	bl	8020078 <memset>

//	prescalerValue = (uint32_t)(((SystemCoreClock / 96) / (CIS_CLK_FREQ)) - 1);
//	counterPeriod = 480 - 1;
//	pulseValue = 240 - 1;

  prescalerValue = 0;
 80036c6:	2300      	movs	r3, #0
 80036c8:	677b      	str	r3, [r7, #116]	; 0x74
  counterPeriod = CIS_END_CAPTURE - 1;
 80036ca:	f240 23af 	movw	r3, #687	; 0x2af
 80036ce:	673b      	str	r3, [r7, #112]	; 0x70
  pulseValue = CIS_SP_OFF - 1;
 80036d0:	230b      	movs	r3, #11
 80036d2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80036d4:	4b43      	ldr	r3, [pc, #268]	; (80037e4 <MX_TIM8_Init+0x160>)
 80036d6:	4a44      	ldr	r2, [pc, #272]	; (80037e8 <MX_TIM8_Init+0x164>)
 80036d8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = prescalerValue;
 80036da:	4a42      	ldr	r2, [pc, #264]	; (80037e4 <MX_TIM8_Init+0x160>)
 80036dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036de:	6053      	str	r3, [r2, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036e0:	4b40      	ldr	r3, [pc, #256]	; (80037e4 <MX_TIM8_Init+0x160>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = counterPeriod;
 80036e6:	4a3f      	ldr	r2, [pc, #252]	; (80037e4 <MX_TIM8_Init+0x160>)
 80036e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036ea:	60d3      	str	r3, [r2, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036ec:	4b3d      	ldr	r3, [pc, #244]	; (80037e4 <MX_TIM8_Init+0x160>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80036f2:	4b3c      	ldr	r3, [pc, #240]	; (80037e4 <MX_TIM8_Init+0x160>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036f8:	4b3a      	ldr	r3, [pc, #232]	; (80037e4 <MX_TIM8_Init+0x160>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80036fe:	4839      	ldr	r0, [pc, #228]	; (80037e4 <MX_TIM8_Init+0x160>)
 8003700:	f00c f978 	bl	800f9f4 <HAL_TIM_Base_Init>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 800370a:	f7ff fa13 	bl	8002b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800370e:	4835      	ldr	r0, [pc, #212]	; (80037e4 <MX_TIM8_Init+0x160>)
 8003710:	f00c f9c7 	bl	800faa2 <HAL_TIM_PWM_Init>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 800371a:	f7ff fa0b 	bl	8002b34 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 800371e:	2305      	movs	r3, #5
 8003720:	65bb      	str	r3, [r7, #88]	; 0x58
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8003722:	2300      	movs	r3, #0
 8003724:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8003726:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800372a:	4619      	mov	r1, r3
 800372c:	482d      	ldr	r0, [pc, #180]	; (80037e4 <MX_TIM8_Init+0x160>)
 800372e:	f00c fc27 	bl	800ff80 <HAL_TIM_SlaveConfigSynchro>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <MX_TIM8_Init+0xb8>
  {
    Error_Handler();
 8003738:	f7ff f9fc 	bl	8002b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800373c:	2300      	movs	r3, #0
 800373e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003740:	2300      	movs	r3, #0
 8003742:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003744:	2300      	movs	r3, #0
 8003746:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003748:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800374c:	4619      	mov	r1, r3
 800374e:	4825      	ldr	r0, [pc, #148]	; (80037e4 <MX_TIM8_Init+0x160>)
 8003750:	f00d f94a 	bl	80109e8 <HAL_TIMEx_MasterConfigSynchronization>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <MX_TIM8_Init+0xda>
  {
    Error_Handler();
 800375a:	f7ff f9eb 	bl	8002b34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800375e:	2370      	movs	r3, #112	; 0x70
 8003760:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = pulseValue;
 8003762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003764:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003766:	2302      	movs	r3, #2
 8003768:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800376a:	2300      	movs	r3, #0
 800376c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800376e:	2300      	movs	r3, #0
 8003770:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003772:	2300      	movs	r3, #0
 8003774:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003776:	2300      	movs	r3, #0
 8003778:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800377a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800377e:	2208      	movs	r2, #8
 8003780:	4619      	mov	r1, r3
 8003782:	4818      	ldr	r0, [pc, #96]	; (80037e4 <MX_TIM8_Init+0x160>)
 8003784:	f00c faec 	bl	800fd60 <HAL_TIM_PWM_ConfigChannel>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 800378e:	f7ff f9d1 	bl	8002b34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003792:	2300      	movs	r3, #0
 8003794:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003796:	2300      	movs	r3, #0
 8003798:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800379a:	2300      	movs	r3, #0
 800379c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800379e:	2300      	movs	r3, #0
 80037a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80037a2:	2300      	movs	r3, #0
 80037a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80037a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037aa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80037ac:	2300      	movs	r3, #0
 80037ae:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80037b0:	2300      	movs	r3, #0
 80037b2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80037b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037b8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80037ba:	2300      	movs	r3, #0
 80037bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80037be:	2300      	movs	r3, #0
 80037c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80037c2:	1d3b      	adds	r3, r7, #4
 80037c4:	4619      	mov	r1, r3
 80037c6:	4807      	ldr	r0, [pc, #28]	; (80037e4 <MX_TIM8_Init+0x160>)
 80037c8:	f00d f996 	bl	8010af8 <HAL_TIMEx_ConfigBreakDeadTime>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <MX_TIM8_Init+0x152>
  {
    Error_Handler();
 80037d2:	f7ff f9af 	bl	8002b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80037d6:	4803      	ldr	r0, [pc, #12]	; (80037e4 <MX_TIM8_Init+0x160>)
 80037d8:	f000 f892 	bl	8003900 <HAL_TIM_MspPostInit>

}
 80037dc:	bf00      	nop
 80037de:	3778      	adds	r7, #120	; 0x78
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	24004fa4 	.word	0x24004fa4
 80037e8:	40010400 	.word	0x40010400

080037ec <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a0b      	ldr	r2, [pc, #44]	; (8003828 <HAL_TIM_PWM_MspInit+0x3c>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d10e      	bne.n	800381c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80037fe:	4b0b      	ldr	r3, [pc, #44]	; (800382c <HAL_TIM_PWM_MspInit+0x40>)
 8003800:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003804:	4a09      	ldr	r2, [pc, #36]	; (800382c <HAL_TIM_PWM_MspInit+0x40>)
 8003806:	f043 0301 	orr.w	r3, r3, #1
 800380a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800380e:	4b07      	ldr	r3, [pc, #28]	; (800382c <HAL_TIM_PWM_MspInit+0x40>)
 8003810:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	60fb      	str	r3, [r7, #12]
 800381a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800381c:	bf00      	nop
 800381e:	3714      	adds	r7, #20
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr
 8003828:	40010000 	.word	0x40010000
 800382c:	58024400 	.word	0x58024400

08003830 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003830:	b480      	push	{r7}
 8003832:	b087      	sub	sp, #28
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a2b      	ldr	r2, [pc, #172]	; (80038ec <HAL_TIM_Base_MspInit+0xbc>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d10f      	bne.n	8003862 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003842:	4b2b      	ldr	r3, [pc, #172]	; (80038f0 <HAL_TIM_Base_MspInit+0xc0>)
 8003844:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003848:	4a29      	ldr	r2, [pc, #164]	; (80038f0 <HAL_TIM_Base_MspInit+0xc0>)
 800384a:	f043 0302 	orr.w	r3, r3, #2
 800384e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003852:	4b27      	ldr	r3, [pc, #156]	; (80038f0 <HAL_TIM_Base_MspInit+0xc0>)
 8003854:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	617b      	str	r3, [r7, #20]
 800385e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003860:	e03d      	b.n	80038de <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM4)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a23      	ldr	r2, [pc, #140]	; (80038f4 <HAL_TIM_Base_MspInit+0xc4>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d10f      	bne.n	800388c <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800386c:	4b20      	ldr	r3, [pc, #128]	; (80038f0 <HAL_TIM_Base_MspInit+0xc0>)
 800386e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003872:	4a1f      	ldr	r2, [pc, #124]	; (80038f0 <HAL_TIM_Base_MspInit+0xc0>)
 8003874:	f043 0304 	orr.w	r3, r3, #4
 8003878:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800387c:	4b1c      	ldr	r3, [pc, #112]	; (80038f0 <HAL_TIM_Base_MspInit+0xc0>)
 800387e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003882:	f003 0304 	and.w	r3, r3, #4
 8003886:	613b      	str	r3, [r7, #16]
 8003888:	693b      	ldr	r3, [r7, #16]
}
 800388a:	e028      	b.n	80038de <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM5)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a19      	ldr	r2, [pc, #100]	; (80038f8 <HAL_TIM_Base_MspInit+0xc8>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d10f      	bne.n	80038b6 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003896:	4b16      	ldr	r3, [pc, #88]	; (80038f0 <HAL_TIM_Base_MspInit+0xc0>)
 8003898:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800389c:	4a14      	ldr	r2, [pc, #80]	; (80038f0 <HAL_TIM_Base_MspInit+0xc0>)
 800389e:	f043 0308 	orr.w	r3, r3, #8
 80038a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038a6:	4b12      	ldr	r3, [pc, #72]	; (80038f0 <HAL_TIM_Base_MspInit+0xc0>)
 80038a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038ac:	f003 0308 	and.w	r3, r3, #8
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	68fb      	ldr	r3, [r7, #12]
}
 80038b4:	e013      	b.n	80038de <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM8)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a10      	ldr	r2, [pc, #64]	; (80038fc <HAL_TIM_Base_MspInit+0xcc>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d10e      	bne.n	80038de <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80038c0:	4b0b      	ldr	r3, [pc, #44]	; (80038f0 <HAL_TIM_Base_MspInit+0xc0>)
 80038c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038c6:	4a0a      	ldr	r2, [pc, #40]	; (80038f0 <HAL_TIM_Base_MspInit+0xc0>)
 80038c8:	f043 0302 	orr.w	r3, r3, #2
 80038cc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80038d0:	4b07      	ldr	r3, [pc, #28]	; (80038f0 <HAL_TIM_Base_MspInit+0xc0>)
 80038d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	60bb      	str	r3, [r7, #8]
 80038dc:	68bb      	ldr	r3, [r7, #8]
}
 80038de:	bf00      	nop
 80038e0:	371c      	adds	r7, #28
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	40000400 	.word	0x40000400
 80038f0:	58024400 	.word	0x58024400
 80038f4:	40000800 	.word	0x40000800
 80038f8:	40000c00 	.word	0x40000c00
 80038fc:	40010400 	.word	0x40010400

08003900 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b08c      	sub	sp, #48	; 0x30
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003908:	f107 031c 	add.w	r3, r7, #28
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	605a      	str	r2, [r3, #4]
 8003912:	609a      	str	r2, [r3, #8]
 8003914:	60da      	str	r2, [r3, #12]
 8003916:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a5e      	ldr	r2, [pc, #376]	; (8003a98 <HAL_TIM_MspPostInit+0x198>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d120      	bne.n	8003964 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003922:	4b5e      	ldr	r3, [pc, #376]	; (8003a9c <HAL_TIM_MspPostInit+0x19c>)
 8003924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003928:	4a5c      	ldr	r2, [pc, #368]	; (8003a9c <HAL_TIM_MspPostInit+0x19c>)
 800392a:	f043 0301 	orr.w	r3, r3, #1
 800392e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003932:	4b5a      	ldr	r3, [pc, #360]	; (8003a9c <HAL_TIM_MspPostInit+0x19c>)
 8003934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	61bb      	str	r3, [r7, #24]
 800393e:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = CIS_CP_Pin;
 8003940:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003946:	2302      	movs	r3, #2
 8003948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394a:	2300      	movs	r3, #0
 800394c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800394e:	2303      	movs	r3, #3
 8003950:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003952:	2301      	movs	r3, #1
 8003954:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_CP_GPIO_Port, &GPIO_InitStruct);
 8003956:	f107 031c 	add.w	r3, r7, #28
 800395a:	4619      	mov	r1, r3
 800395c:	4850      	ldr	r0, [pc, #320]	; (8003aa0 <HAL_TIM_MspPostInit+0x1a0>)
 800395e:	f006 fce9 	bl	800a334 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003962:	e095      	b.n	8003a90 <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM3)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a4e      	ldr	r2, [pc, #312]	; (8003aa4 <HAL_TIM_MspPostInit+0x1a4>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d11f      	bne.n	80039ae <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800396e:	4b4b      	ldr	r3, [pc, #300]	; (8003a9c <HAL_TIM_MspPostInit+0x19c>)
 8003970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003974:	4a49      	ldr	r2, [pc, #292]	; (8003a9c <HAL_TIM_MspPostInit+0x19c>)
 8003976:	f043 0304 	orr.w	r3, r3, #4
 800397a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800397e:	4b47      	ldr	r3, [pc, #284]	; (8003a9c <HAL_TIM_MspPostInit+0x19c>)
 8003980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	617b      	str	r3, [r7, #20]
 800398a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = CIS_VLED_G_Pin;
 800398c:	2340      	movs	r3, #64	; 0x40
 800398e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003990:	2302      	movs	r3, #2
 8003992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003994:	2300      	movs	r3, #0
 8003996:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003998:	2303      	movs	r3, #3
 800399a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800399c:	2302      	movs	r3, #2
 800399e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_VLED_G_GPIO_Port, &GPIO_InitStruct);
 80039a0:	f107 031c 	add.w	r3, r7, #28
 80039a4:	4619      	mov	r1, r3
 80039a6:	4840      	ldr	r0, [pc, #256]	; (8003aa8 <HAL_TIM_MspPostInit+0x1a8>)
 80039a8:	f006 fcc4 	bl	800a334 <HAL_GPIO_Init>
}
 80039ac:	e070      	b.n	8003a90 <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM4)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a3e      	ldr	r2, [pc, #248]	; (8003aac <HAL_TIM_MspPostInit+0x1ac>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d120      	bne.n	80039fa <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80039b8:	4b38      	ldr	r3, [pc, #224]	; (8003a9c <HAL_TIM_MspPostInit+0x19c>)
 80039ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039be:	4a37      	ldr	r2, [pc, #220]	; (8003a9c <HAL_TIM_MspPostInit+0x19c>)
 80039c0:	f043 0308 	orr.w	r3, r3, #8
 80039c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039c8:	4b34      	ldr	r3, [pc, #208]	; (8003a9c <HAL_TIM_MspPostInit+0x19c>)
 80039ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039ce:	f003 0308 	and.w	r3, r3, #8
 80039d2:	613b      	str	r3, [r7, #16]
 80039d4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = CIS_VLED_R_Pin;
 80039d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039dc:	2302      	movs	r3, #2
 80039de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e0:	2300      	movs	r3, #0
 80039e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039e4:	2303      	movs	r3, #3
 80039e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80039e8:	2302      	movs	r3, #2
 80039ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_VLED_R_GPIO_Port, &GPIO_InitStruct);
 80039ec:	f107 031c 	add.w	r3, r7, #28
 80039f0:	4619      	mov	r1, r3
 80039f2:	482f      	ldr	r0, [pc, #188]	; (8003ab0 <HAL_TIM_MspPostInit+0x1b0>)
 80039f4:	f006 fc9e 	bl	800a334 <HAL_GPIO_Init>
}
 80039f8:	e04a      	b.n	8003a90 <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM5)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a2d      	ldr	r2, [pc, #180]	; (8003ab4 <HAL_TIM_MspPostInit+0x1b4>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d120      	bne.n	8003a46 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a04:	4b25      	ldr	r3, [pc, #148]	; (8003a9c <HAL_TIM_MspPostInit+0x19c>)
 8003a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a0a:	4a24      	ldr	r2, [pc, #144]	; (8003a9c <HAL_TIM_MspPostInit+0x19c>)
 8003a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a14:	4b21      	ldr	r3, [pc, #132]	; (8003a9c <HAL_TIM_MspPostInit+0x19c>)
 8003a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a1e:	60fb      	str	r3, [r7, #12]
 8003a20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CIS_VLED_B_Pin;
 8003a22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a28:	2302      	movs	r3, #2
 8003a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a30:	2303      	movs	r3, #3
 8003a32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003a34:	2302      	movs	r3, #2
 8003a36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_VLED_B_GPIO_Port, &GPIO_InitStruct);
 8003a38:	f107 031c 	add.w	r3, r7, #28
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	481e      	ldr	r0, [pc, #120]	; (8003ab8 <HAL_TIM_MspPostInit+0x1b8>)
 8003a40:	f006 fc78 	bl	800a334 <HAL_GPIO_Init>
}
 8003a44:	e024      	b.n	8003a90 <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM8)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a1c      	ldr	r2, [pc, #112]	; (8003abc <HAL_TIM_MspPostInit+0x1bc>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d11f      	bne.n	8003a90 <HAL_TIM_MspPostInit+0x190>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a50:	4b12      	ldr	r3, [pc, #72]	; (8003a9c <HAL_TIM_MspPostInit+0x19c>)
 8003a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a56:	4a11      	ldr	r2, [pc, #68]	; (8003a9c <HAL_TIM_MspPostInit+0x19c>)
 8003a58:	f043 0304 	orr.w	r3, r3, #4
 8003a5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a60:	4b0e      	ldr	r3, [pc, #56]	; (8003a9c <HAL_TIM_MspPostInit+0x19c>)
 8003a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a66:	f003 0304 	and.w	r3, r3, #4
 8003a6a:	60bb      	str	r3, [r7, #8]
 8003a6c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CIS_SP_Pin;
 8003a6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a74:	2302      	movs	r3, #2
 8003a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003a80:	2303      	movs	r3, #3
 8003a82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_SP_GPIO_Port, &GPIO_InitStruct);
 8003a84:	f107 031c 	add.w	r3, r7, #28
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4807      	ldr	r0, [pc, #28]	; (8003aa8 <HAL_TIM_MspPostInit+0x1a8>)
 8003a8c:	f006 fc52 	bl	800a334 <HAL_GPIO_Init>
}
 8003a90:	bf00      	nop
 8003a92:	3730      	adds	r7, #48	; 0x30
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40010000 	.word	0x40010000
 8003a9c:	58024400 	.word	0x58024400
 8003aa0:	58020000 	.word	0x58020000
 8003aa4:	40000400 	.word	0x40000400
 8003aa8:	58020800 	.word	0x58020800
 8003aac:	40000800 	.word	0x40000800
 8003ab0:	58020c00 	.word	0x58020c00
 8003ab4:	40000c00 	.word	0x40000c00
 8003ab8:	58021c00 	.word	0x58021c00
 8003abc:	40010400 	.word	0x40010400

08003ac0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003ac4:	4b22      	ldr	r3, [pc, #136]	; (8003b50 <MX_USART1_UART_Init+0x90>)
 8003ac6:	4a23      	ldr	r2, [pc, #140]	; (8003b54 <MX_USART1_UART_Init+0x94>)
 8003ac8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003aca:	4b21      	ldr	r3, [pc, #132]	; (8003b50 <MX_USART1_UART_Init+0x90>)
 8003acc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ad0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ad2:	4b1f      	ldr	r3, [pc, #124]	; (8003b50 <MX_USART1_UART_Init+0x90>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ad8:	4b1d      	ldr	r3, [pc, #116]	; (8003b50 <MX_USART1_UART_Init+0x90>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003ade:	4b1c      	ldr	r3, [pc, #112]	; (8003b50 <MX_USART1_UART_Init+0x90>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003ae4:	4b1a      	ldr	r3, [pc, #104]	; (8003b50 <MX_USART1_UART_Init+0x90>)
 8003ae6:	220c      	movs	r2, #12
 8003ae8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003aea:	4b19      	ldr	r3, [pc, #100]	; (8003b50 <MX_USART1_UART_Init+0x90>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003af0:	4b17      	ldr	r3, [pc, #92]	; (8003b50 <MX_USART1_UART_Init+0x90>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003af6:	4b16      	ldr	r3, [pc, #88]	; (8003b50 <MX_USART1_UART_Init+0x90>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003afc:	4b14      	ldr	r3, [pc, #80]	; (8003b50 <MX_USART1_UART_Init+0x90>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b02:	4b13      	ldr	r3, [pc, #76]	; (8003b50 <MX_USART1_UART_Init+0x90>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003b08:	4811      	ldr	r0, [pc, #68]	; (8003b50 <MX_USART1_UART_Init+0x90>)
 8003b0a:	f00d f873 	bl	8010bf4 <HAL_UART_Init>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003b14:	f7ff f80e 	bl	8002b34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b18:	2100      	movs	r1, #0
 8003b1a:	480d      	ldr	r0, [pc, #52]	; (8003b50 <MX_USART1_UART_Init+0x90>)
 8003b1c:	f00e f856 	bl	8011bcc <HAL_UARTEx_SetTxFifoThreshold>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003b26:	f7ff f805 	bl	8002b34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	4808      	ldr	r0, [pc, #32]	; (8003b50 <MX_USART1_UART_Init+0x90>)
 8003b2e:	f00e f88b 	bl	8011c48 <HAL_UARTEx_SetRxFifoThreshold>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003b38:	f7fe fffc 	bl	8002b34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003b3c:	4804      	ldr	r0, [pc, #16]	; (8003b50 <MX_USART1_UART_Init+0x90>)
 8003b3e:	f00e f80c 	bl	8011b5a <HAL_UARTEx_DisableFifoMode>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003b48:	f7fe fff4 	bl	8002b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003b4c:	bf00      	nop
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	24005120 	.word	0x24005120
 8003b54:	40011000 	.word	0x40011000

08003b58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b0b8      	sub	sp, #224	; 0xe0
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b60:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	605a      	str	r2, [r3, #4]
 8003b6a:	609a      	str	r2, [r3, #8]
 8003b6c:	60da      	str	r2, [r3, #12]
 8003b6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b70:	f107 0310 	add.w	r3, r7, #16
 8003b74:	22bc      	movs	r2, #188	; 0xbc
 8003b76:	2100      	movs	r1, #0
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f01c fa7d 	bl	8020078 <memset>
  if(uartHandle->Instance==USART1)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a24      	ldr	r2, [pc, #144]	; (8003c14 <HAL_UART_MspInit+0xbc>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d141      	bne.n	8003c0c <HAL_UART_MspInit+0xb4>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b92:	f107 0310 	add.w	r3, r7, #16
 8003b96:	4618      	mov	r0, r3
 8003b98:	f007 fdf8 	bl	800b78c <HAL_RCCEx_PeriphCLKConfig>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003ba2:	f7fe ffc7 	bl	8002b34 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ba6:	4b1c      	ldr	r3, [pc, #112]	; (8003c18 <HAL_UART_MspInit+0xc0>)
 8003ba8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003bac:	4a1a      	ldr	r2, [pc, #104]	; (8003c18 <HAL_UART_MspInit+0xc0>)
 8003bae:	f043 0310 	orr.w	r3, r3, #16
 8003bb2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003bb6:	4b18      	ldr	r3, [pc, #96]	; (8003c18 <HAL_UART_MspInit+0xc0>)
 8003bb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003bbc:	f003 0310 	and.w	r3, r3, #16
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bc4:	4b14      	ldr	r3, [pc, #80]	; (8003c18 <HAL_UART_MspInit+0xc0>)
 8003bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bca:	4a13      	ldr	r2, [pc, #76]	; (8003c18 <HAL_UART_MspInit+0xc0>)
 8003bcc:	f043 0302 	orr.w	r3, r3, #2
 8003bd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003bd4:	4b10      	ldr	r3, [pc, #64]	; (8003c18 <HAL_UART_MspInit+0xc0>)
 8003bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	60bb      	str	r3, [r7, #8]
 8003be0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003be2:	23c0      	movs	r3, #192	; 0xc0
 8003be4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be8:	2302      	movs	r3, #2
 8003bea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003bfa:	2307      	movs	r3, #7
 8003bfc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c00:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003c04:	4619      	mov	r1, r3
 8003c06:	4805      	ldr	r0, [pc, #20]	; (8003c1c <HAL_UART_MspInit+0xc4>)
 8003c08:	f006 fb94 	bl	800a334 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003c0c:	bf00      	nop
 8003c0e:	37e0      	adds	r7, #224	; 0xe0
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40011000 	.word	0x40011000
 8003c18:	58024400 	.word	0x58024400
 8003c1c:	58020400 	.word	0x58020400

08003c20 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8003c28:	1d39      	adds	r1, r7, #4
 8003c2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c2e:	2201      	movs	r2, #1
 8003c30:	4803      	ldr	r0, [pc, #12]	; (8003c40 <__io_putchar+0x20>)
 8003c32:	f00d f82f 	bl	8010c94 <HAL_UART_Transmit>

  return ch;
 8003c36:	687b      	ldr	r3, [r7, #4]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	24005120 	.word	0x24005120

08003c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003c44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c7c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003c48:	f7fd f85a 	bl	8000d00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c4c:	480c      	ldr	r0, [pc, #48]	; (8003c80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003c4e:	490d      	ldr	r1, [pc, #52]	; (8003c84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003c50:	4a0d      	ldr	r2, [pc, #52]	; (8003c88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c54:	e002      	b.n	8003c5c <LoopCopyDataInit>

08003c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c5a:	3304      	adds	r3, #4

08003c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c60:	d3f9      	bcc.n	8003c56 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c62:	4a0a      	ldr	r2, [pc, #40]	; (8003c8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003c64:	4c0a      	ldr	r4, [pc, #40]	; (8003c90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c68:	e001      	b.n	8003c6e <LoopFillZerobss>

08003c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c6c:	3204      	adds	r2, #4

08003c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c70:	d3fb      	bcc.n	8003c6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003c72:	f01c f99f 	bl	801ffb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c76:	f7fe fcbb 	bl	80025f0 <main>
  bx  lr
 8003c7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003c7c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003c80:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003c84:	24003628 	.word	0x24003628
  ldr r2, =_sidata
 8003c88:	0802b1a8 	.word	0x0802b1a8
  ldr r2, =_sbss
 8003c8c:	24003628 	.word	0x24003628
  ldr r4, =_ebss
 8003c90:	2400cae4 	.word	0x2400cae4

08003c94 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c94:	e7fe      	b.n	8003c94 <ADC3_IRQHandler>

08003c96 <arm_copy_q15>:

void arm_copy_q15(
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b087      	sub	sp, #28
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	60f8      	str	r0, [r7, #12]
 8003c9e:	60b9      	str	r1, [r7, #8]
 8003ca0:	607a      	str	r2, [r7, #4]
#ifndef ARM_MATH_CM0_FAMILY

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  /*loop Unrolling */
  blkCnt = blockSize >> 2u;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	089b      	lsrs	r3, r3, #2
 8003ca6:	617b      	str	r3, [r7, #20]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8003ca8:	e01a      	b.n	8003ce0 <arm_copy_q15+0x4a>
  {
    /* C = A */
    /* Read two inputs */
    *__SIMD32(pDst)++ = *__SIMD32(pSrc)++;
 8003caa:	f107 030c 	add.w	r3, r7, #12
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	1d11      	adds	r1, r2, #4
 8003cb2:	6019      	str	r1, [r3, #0]
 8003cb4:	f107 0108 	add.w	r1, r7, #8
 8003cb8:	680b      	ldr	r3, [r1, #0]
 8003cba:	1d18      	adds	r0, r3, #4
 8003cbc:	6008      	str	r0, [r1, #0]
 8003cbe:	6812      	ldr	r2, [r2, #0]
 8003cc0:	601a      	str	r2, [r3, #0]
    *__SIMD32(pDst)++ = *__SIMD32(pSrc)++;
 8003cc2:	f107 030c 	add.w	r3, r7, #12
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	1d11      	adds	r1, r2, #4
 8003cca:	6019      	str	r1, [r3, #0]
 8003ccc:	f107 0108 	add.w	r1, r7, #8
 8003cd0:	680b      	ldr	r3, [r1, #0]
 8003cd2:	1d18      	adds	r0, r3, #4
 8003cd4:	6008      	str	r0, [r1, #0]
 8003cd6:	6812      	ldr	r2, [r2, #0]
 8003cd8:	601a      	str	r2, [r3, #0]

    /* Decrement the loop counter */
    blkCnt--;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	617b      	str	r3, [r7, #20]
  while(blkCnt > 0u)
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1e1      	bne.n	8003caa <arm_copy_q15+0x14>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f003 0303 	and.w	r3, r3, #3
 8003cec:	617b      	str	r3, [r7, #20]
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 8003cee:	e00b      	b.n	8003d08 <arm_copy_q15+0x72>
  {
    /* C = A */
    /* Copy and then store the value in the destination buffer */
    *pDst++ = *pSrc++;
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	1c93      	adds	r3, r2, #2
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	1c99      	adds	r1, r3, #2
 8003cfa:	60b9      	str	r1, [r7, #8]
 8003cfc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003d00:	801a      	strh	r2, [r3, #0]

    /* Decrement the loop counter */
    blkCnt--;
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	3b01      	subs	r3, #1
 8003d06:	617b      	str	r3, [r7, #20]
  while(blkCnt > 0u)
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1f0      	bne.n	8003cf0 <arm_copy_q15+0x5a>
  }
}
 8003d0e:	bf00      	nop
 8003d10:	bf00      	nop
 8003d12:	371c      	adds	r7, #28
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00b      	beq.n	8003d44 <LAN8742_RegisterBusIO+0x28>
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d007      	beq.n	8003d44 <LAN8742_RegisterBusIO+0x28>
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <LAN8742_RegisterBusIO+0x28>
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d102      	bne.n	8003d4a <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8003d44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d48:	e014      	b.n	8003d74 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	68da      	ldr	r2, [r3, #12]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	691a      	ldr	r2, [r3, #16]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	60bb      	str	r3, [r7, #8]
 8003d90:	2300      	movs	r3, #0
 8003d92:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8003d94:	2300      	movs	r3, #0
 8003d96:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d17c      	bne.n	8003e9a <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d002      	beq.n	8003dae <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2220      	movs	r2, #32
 8003db2:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003db4:	2300      	movs	r3, #0
 8003db6:	617b      	str	r3, [r7, #20]
 8003db8:	e01c      	b.n	8003df4 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	f107 0208 	add.w	r2, r7, #8
 8003dc2:	2112      	movs	r1, #18
 8003dc4:	6978      	ldr	r0, [r7, #20]
 8003dc6:	4798      	blx	r3
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	da03      	bge.n	8003dd6 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8003dce:	f06f 0304 	mvn.w	r3, #4
 8003dd2:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8003dd4:	e00b      	b.n	8003dee <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	f003 031f 	and.w	r3, r3, #31
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d105      	bne.n	8003dee <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8003de8:	2300      	movs	r3, #0
 8003dea:	613b      	str	r3, [r7, #16]
         break;
 8003dec:	e005      	b.n	8003dfa <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	3301      	adds	r3, #1
 8003df2:	617b      	str	r3, [r7, #20]
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	2b1f      	cmp	r3, #31
 8003df8:	d9df      	bls.n	8003dba <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b1f      	cmp	r3, #31
 8003e00:	d902      	bls.n	8003e08 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8003e02:	f06f 0302 	mvn.w	r3, #2
 8003e06:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d145      	bne.n	8003e9a <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6810      	ldr	r0, [r2, #0]
 8003e16:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	4798      	blx	r3
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	db37      	blt.n	8003e94 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	6810      	ldr	r0, [r2, #0]
 8003e2c:	f107 0208 	add.w	r2, r7, #8
 8003e30:	2100      	movs	r1, #0
 8003e32:	4798      	blx	r3
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	db28      	blt.n	8003e8c <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	4798      	blx	r3
 8003e40:	4603      	mov	r3, r0
 8003e42:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003e44:	e01c      	b.n	8003e80 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	4798      	blx	r3
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	461a      	mov	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003e58:	d80e      	bhi.n	8003e78 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6810      	ldr	r0, [r2, #0]
 8003e62:	f107 0208 	add.w	r2, r7, #8
 8003e66:	2100      	movs	r1, #0
 8003e68:	4798      	blx	r3
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	da07      	bge.n	8003e80 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8003e70:	f06f 0304 	mvn.w	r3, #4
 8003e74:	613b      	str	r3, [r7, #16]
                 break;
 8003e76:	e010      	b.n	8003e9a <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8003e78:	f06f 0301 	mvn.w	r3, #1
 8003e7c:	613b      	str	r3, [r7, #16]
               break;
 8003e7e:	e00c      	b.n	8003e9a <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1dd      	bne.n	8003e46 <LAN8742_Init+0xc6>
 8003e8a:	e006      	b.n	8003e9a <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8003e8c:	f06f 0304 	mvn.w	r3, #4
 8003e90:	613b      	str	r3, [r7, #16]
 8003e92:	e002      	b.n	8003e9a <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8003e94:	f06f 0303 	mvn.w	r3, #3
 8003e98:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d112      	bne.n	8003ec6 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	4798      	blx	r3
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8003eaa:	bf00      	nop
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	4798      	blx	r3
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003ebe:	d9f5      	bls.n	8003eac <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8003ec6:	693b      	ldr	r3, [r7, #16]
 }
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3718      	adds	r7, #24
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	6810      	ldr	r0, [r2, #0]
 8003ee4:	f107 020c 	add.w	r2, r7, #12
 8003ee8:	2101      	movs	r1, #1
 8003eea:	4798      	blx	r3
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	da02      	bge.n	8003ef8 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003ef2:	f06f 0304 	mvn.w	r3, #4
 8003ef6:	e06e      	b.n	8003fd6 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	6810      	ldr	r0, [r2, #0]
 8003f00:	f107 020c 	add.w	r2, r7, #12
 8003f04:	2101      	movs	r1, #1
 8003f06:	4798      	blx	r3
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	da02      	bge.n	8003f14 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003f0e:	f06f 0304 	mvn.w	r3, #4
 8003f12:	e060      	b.n	8003fd6 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f003 0304 	and.w	r3, r3, #4
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e059      	b.n	8003fd6 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	6810      	ldr	r0, [r2, #0]
 8003f2a:	f107 020c 	add.w	r2, r7, #12
 8003f2e:	2100      	movs	r1, #0
 8003f30:	4798      	blx	r3
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	da02      	bge.n	8003f3e <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003f38:	f06f 0304 	mvn.w	r3, #4
 8003f3c:	e04b      	b.n	8003fd6 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d11b      	bne.n	8003f80 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d006      	beq.n	8003f60 <LAN8742_GetLinkState+0x90>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	e03a      	b.n	8003fd6 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e033      	b.n	8003fd6 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003f78:	2304      	movs	r3, #4
 8003f7a:	e02c      	b.n	8003fd6 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003f7c:	2305      	movs	r3, #5
 8003f7e:	e02a      	b.n	8003fd6 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6810      	ldr	r0, [r2, #0]
 8003f88:	f107 020c 	add.w	r2, r7, #12
 8003f8c:	211f      	movs	r1, #31
 8003f8e:	4798      	blx	r3
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	da02      	bge.n	8003f9c <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8003f96:	f06f 0304 	mvn.w	r3, #4
 8003f9a:	e01c      	b.n	8003fd6 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8003fa6:	2306      	movs	r3, #6
 8003fa8:	e015      	b.n	8003fd6 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f003 031c 	and.w	r3, r3, #28
 8003fb0:	2b18      	cmp	r3, #24
 8003fb2:	d101      	bne.n	8003fb8 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	e00e      	b.n	8003fd6 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f003 031c 	and.w	r3, r3, #28
 8003fbe:	2b08      	cmp	r3, #8
 8003fc0:	d101      	bne.n	8003fc6 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e007      	b.n	8003fd6 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f003 031c 	and.w	r3, r3, #28
 8003fcc:	2b14      	cmp	r3, #20
 8003fce:	d101      	bne.n	8003fd4 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003fd0:	2304      	movs	r3, #4
 8003fd2:	e000      	b.n	8003fd6 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003fd4:	2305      	movs	r3, #5
    }				
  }
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
	...

08003fe0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fe6:	2003      	movs	r0, #3
 8003fe8:	f001 fdba 	bl	8005b60 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003fec:	f007 f9f8 	bl	800b3e0 <HAL_RCC_GetSysClockFreq>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	4b15      	ldr	r3, [pc, #84]	; (8004048 <HAL_Init+0x68>)
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	0a1b      	lsrs	r3, r3, #8
 8003ff8:	f003 030f 	and.w	r3, r3, #15
 8003ffc:	4913      	ldr	r1, [pc, #76]	; (800404c <HAL_Init+0x6c>)
 8003ffe:	5ccb      	ldrb	r3, [r1, r3]
 8004000:	f003 031f 	and.w	r3, r3, #31
 8004004:	fa22 f303 	lsr.w	r3, r2, r3
 8004008:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800400a:	4b0f      	ldr	r3, [pc, #60]	; (8004048 <HAL_Init+0x68>)
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	f003 030f 	and.w	r3, r3, #15
 8004012:	4a0e      	ldr	r2, [pc, #56]	; (800404c <HAL_Init+0x6c>)
 8004014:	5cd3      	ldrb	r3, [r2, r3]
 8004016:	f003 031f 	and.w	r3, r3, #31
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	fa22 f303 	lsr.w	r3, r2, r3
 8004020:	4a0b      	ldr	r2, [pc, #44]	; (8004050 <HAL_Init+0x70>)
 8004022:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004024:	4a0b      	ldr	r2, [pc, #44]	; (8004054 <HAL_Init+0x74>)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800402a:	2000      	movs	r0, #0
 800402c:	f000 f814 	bl	8004058 <HAL_InitTick>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e002      	b.n	8004040 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800403a:	f7fe ffaf 	bl	8002f9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	58024400 	.word	0x58024400
 800404c:	08028a80 	.word	0x08028a80
 8004050:	24000004 	.word	0x24000004
 8004054:	24000000 	.word	0x24000000

08004058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004060:	4b15      	ldr	r3, [pc, #84]	; (80040b8 <HAL_InitTick+0x60>)
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d101      	bne.n	800406c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e021      	b.n	80040b0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800406c:	4b13      	ldr	r3, [pc, #76]	; (80040bc <HAL_InitTick+0x64>)
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	4b11      	ldr	r3, [pc, #68]	; (80040b8 <HAL_InitTick+0x60>)
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	4619      	mov	r1, r3
 8004076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800407a:	fbb3 f3f1 	udiv	r3, r3, r1
 800407e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004082:	4618      	mov	r0, r3
 8004084:	f001 fd9f 	bl	8005bc6 <HAL_SYSTICK_Config>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e00e      	b.n	80040b0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b0f      	cmp	r3, #15
 8004096:	d80a      	bhi.n	80040ae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004098:	2200      	movs	r2, #0
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040a0:	f001 fd69 	bl	8005b76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040a4:	4a06      	ldr	r2, [pc, #24]	; (80040c0 <HAL_InitTick+0x68>)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
 80040ac:	e000      	b.n	80040b0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	24000014 	.word	0x24000014
 80040bc:	24000000 	.word	0x24000000
 80040c0:	24000010 	.word	0x24000010

080040c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80040c8:	4b06      	ldr	r3, [pc, #24]	; (80040e4 <HAL_IncTick+0x20>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	461a      	mov	r2, r3
 80040ce:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <HAL_IncTick+0x24>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4413      	add	r3, r2
 80040d4:	4a04      	ldr	r2, [pc, #16]	; (80040e8 <HAL_IncTick+0x24>)
 80040d6:	6013      	str	r3, [r2, #0]
}
 80040d8:	bf00      	nop
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	24000014 	.word	0x24000014
 80040e8:	240051b0 	.word	0x240051b0

080040ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  return uwTick;
 80040f0:	4b03      	ldr	r3, [pc, #12]	; (8004100 <HAL_GetTick+0x14>)
 80040f2:	681b      	ldr	r3, [r3, #0]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	240051b0 	.word	0x240051b0

08004104 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800410c:	f7ff ffee 	bl	80040ec <HAL_GetTick>
 8004110:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800411c:	d005      	beq.n	800412a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800411e:	4b0a      	ldr	r3, [pc, #40]	; (8004148 <HAL_Delay+0x44>)
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	461a      	mov	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	4413      	add	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800412a:	bf00      	nop
 800412c:	f7ff ffde 	bl	80040ec <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	429a      	cmp	r2, r3
 800413a:	d8f7      	bhi.n	800412c <HAL_Delay+0x28>
  {
  }
}
 800413c:	bf00      	nop
 800413e:	bf00      	nop
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	24000014 	.word	0x24000014

0800414c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004150:	4b03      	ldr	r3, [pc, #12]	; (8004160 <HAL_GetREVID+0x14>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	0c1b      	lsrs	r3, r3, #16
}
 8004156:	4618      	mov	r0, r3
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	5c001000 	.word	0x5c001000

08004164 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800416c:	4b06      	ldr	r3, [pc, #24]	; (8004188 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004174:	4904      	ldr	r1, [pc, #16]	; (8004188 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4313      	orrs	r3, r2
 800417a:	604b      	str	r3, [r1, #4]
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	58000400 	.word	0x58000400

0800418c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8004196:	4b07      	ldr	r3, [pc, #28]	; (80041b4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	43db      	mvns	r3, r3
 800419e:	401a      	ands	r2, r3
 80041a0:	4904      	ldr	r1, [pc, #16]	; (80041b4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	604b      	str	r3, [r1, #4]
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	58000400 	.word	0x58000400

080041b8 <HAL_SetFMCMemorySwappingConfig>:
  * @param  BankMapConfig: Defines the FMC Bank mapping configuration. This parameter can be
            FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
  * @retval HAL state
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 80041c0:	4b06      	ldr	r3, [pc, #24]	; (80041dc <HAL_SetFMCMemorySwappingConfig+0x24>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80041c8:	4904      	ldr	r1, [pc, #16]	; (80041dc <HAL_SetFMCMemorySwappingConfig+0x24>)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	600b      	str	r3, [r1, #0]
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr
 80041dc:	52004000 	.word	0x52004000

080041e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	431a      	orrs	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	609a      	str	r2, [r3, #8]
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004206:	b480      	push	{r7}
 8004208:	b083      	sub	sp, #12
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
 800420e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	431a      	orrs	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	609a      	str	r2, [r3, #8]
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800423c:	4618      	mov	r0, r3
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004248:	b480      	push	{r7}
 800424a:	b087      	sub	sp, #28
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
 8004254:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	3360      	adds	r3, #96	; 0x60
 800425a:	461a      	mov	r2, r3
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	430b      	orrs	r3, r1
 8004276:	431a      	orrs	r2, r3
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800427c:	bf00      	nop
 800427e:	371c      	adds	r7, #28
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	f003 031f 	and.w	r3, r3, #31
 80042a2:	6879      	ldr	r1, [r7, #4]
 80042a4:	fa01 f303 	lsl.w	r3, r1, r3
 80042a8:	431a      	orrs	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	611a      	str	r2, [r3, #16]
}
 80042ae:	bf00      	nop
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b087      	sub	sp, #28
 80042be:	af00      	add	r7, sp, #0
 80042c0:	60f8      	str	r0, [r7, #12]
 80042c2:	60b9      	str	r1, [r7, #8]
 80042c4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	3360      	adds	r3, #96	; 0x60
 80042ca:	461a      	mov	r2, r3
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	431a      	orrs	r2, r3
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	601a      	str	r2, [r3, #0]
  }
}
 80042e4:	bf00      	nop
 80042e6:	371c      	adds	r7, #28
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004304:	2301      	movs	r3, #1
 8004306:	e000      	b.n	800430a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004316:	b480      	push	{r7}
 8004318:	b087      	sub	sp, #28
 800431a:	af00      	add	r7, sp, #0
 800431c:	60f8      	str	r0, [r7, #12]
 800431e:	60b9      	str	r1, [r7, #8]
 8004320:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	3330      	adds	r3, #48	; 0x30
 8004326:	461a      	mov	r2, r3
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	0a1b      	lsrs	r3, r3, #8
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	f003 030c 	and.w	r3, r3, #12
 8004332:	4413      	add	r3, r2
 8004334:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f003 031f 	and.w	r3, r3, #31
 8004340:	211f      	movs	r1, #31
 8004342:	fa01 f303 	lsl.w	r3, r1, r3
 8004346:	43db      	mvns	r3, r3
 8004348:	401a      	ands	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	0e9b      	lsrs	r3, r3, #26
 800434e:	f003 011f 	and.w	r1, r3, #31
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	f003 031f 	and.w	r3, r3, #31
 8004358:	fa01 f303 	lsl.w	r3, r1, r3
 800435c:	431a      	orrs	r2, r3
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004362:	bf00      	nop
 8004364:	371c      	adds	r7, #28
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr

0800436e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800436e:	b480      	push	{r7}
 8004370:	b083      	sub	sp, #12
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
 8004376:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	f023 0203 	bic.w	r2, r3, #3
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	60da      	str	r2, [r3, #12]
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004394:	b480      	push	{r7}
 8004396:	b087      	sub	sp, #28
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	3314      	adds	r3, #20
 80043a4:	461a      	mov	r2, r3
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	0e5b      	lsrs	r3, r3, #25
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	4413      	add	r3, r2
 80043b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	0d1b      	lsrs	r3, r3, #20
 80043bc:	f003 031f 	and.w	r3, r3, #31
 80043c0:	2107      	movs	r1, #7
 80043c2:	fa01 f303 	lsl.w	r3, r1, r3
 80043c6:	43db      	mvns	r3, r3
 80043c8:	401a      	ands	r2, r3
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	0d1b      	lsrs	r3, r3, #20
 80043ce:	f003 031f 	and.w	r3, r3, #31
 80043d2:	6879      	ldr	r1, [r7, #4]
 80043d4:	fa01 f303 	lsl.w	r3, r1, r3
 80043d8:	431a      	orrs	r2, r3
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80043de:	bf00      	nop
 80043e0:	371c      	adds	r7, #28
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
	...

080043ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004404:	43db      	mvns	r3, r3
 8004406:	401a      	ands	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f003 0318 	and.w	r3, r3, #24
 800440e:	4908      	ldr	r1, [pc, #32]	; (8004430 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004410:	40d9      	lsrs	r1, r3
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	400b      	ands	r3, r1
 8004416:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800441a:	431a      	orrs	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8004422:	bf00      	nop
 8004424:	3714      	adds	r7, #20
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	000fffff 	.word	0x000fffff

08004434 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f003 031f 	and.w	r3, r3, #31
}
 8004444:	4618      	mov	r0, r3
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	4b04      	ldr	r3, [pc, #16]	; (8004470 <LL_ADC_DisableDeepPowerDown+0x20>)
 800445e:	4013      	ands	r3, r2
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	6093      	str	r3, [r2, #8]
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr
 8004470:	5fffffc0 	.word	0x5fffffc0

08004474 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004484:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004488:	d101      	bne.n	800448e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800448a:	2301      	movs	r3, #1
 800448c:	e000      	b.n	8004490 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689a      	ldr	r2, [r3, #8]
 80044a8:	4b05      	ldr	r3, [pc, #20]	; (80044c0 <LL_ADC_EnableInternalRegulator+0x24>)
 80044aa:	4013      	ands	r3, r2
 80044ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	6fffffc0 	.word	0x6fffffc0

080044c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044d8:	d101      	bne.n	80044de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80044da:	2301      	movs	r3, #1
 80044dc:	e000      	b.n	80044e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	4b05      	ldr	r3, [pc, #20]	; (8004510 <LL_ADC_Enable+0x24>)
 80044fa:	4013      	ands	r3, r2
 80044fc:	f043 0201 	orr.w	r2, r3, #1
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr
 8004510:	7fffffc0 	.word	0x7fffffc0

08004514 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689a      	ldr	r2, [r3, #8]
 8004520:	4b05      	ldr	r3, [pc, #20]	; (8004538 <LL_ADC_Disable+0x24>)
 8004522:	4013      	ands	r3, r2
 8004524:	f043 0202 	orr.w	r2, r3, #2
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	7fffffc0 	.word	0x7fffffc0

0800453c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	2b01      	cmp	r3, #1
 800454e:	d101      	bne.n	8004554 <LL_ADC_IsEnabled+0x18>
 8004550:	2301      	movs	r3, #1
 8004552:	e000      	b.n	8004556 <LL_ADC_IsEnabled+0x1a>
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004562:	b480      	push	{r7}
 8004564:	b083      	sub	sp, #12
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b02      	cmp	r3, #2
 8004574:	d101      	bne.n	800457a <LL_ADC_IsDisableOngoing+0x18>
 8004576:	2301      	movs	r3, #1
 8004578:	e000      	b.n	800457c <LL_ADC_IsDisableOngoing+0x1a>
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	4b05      	ldr	r3, [pc, #20]	; (80045ac <LL_ADC_REG_StartConversion+0x24>)
 8004596:	4013      	ands	r3, r2
 8004598:	f043 0204 	orr.w	r2, r3, #4
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	7fffffc0 	.word	0x7fffffc0

080045b0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b04      	cmp	r3, #4
 80045c2:	d101      	bne.n	80045c8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80045c4:	2301      	movs	r3, #1
 80045c6:	e000      	b.n	80045ca <LL_ADC_REG_IsConversionOngoing+0x1a>
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	370c      	adds	r7, #12
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80045d6:	b480      	push	{r7}
 80045d8:	b083      	sub	sp, #12
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f003 0308 	and.w	r3, r3, #8
 80045e6:	2b08      	cmp	r3, #8
 80045e8:	d101      	bne.n	80045ee <LL_ADC_INJ_IsConversionOngoing+0x18>
 80045ea:	2301      	movs	r3, #1
 80045ec:	e000      	b.n	80045f0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80045fc:	b590      	push	{r4, r7, lr}
 80045fe:	b089      	sub	sp, #36	; 0x24
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004604:	2300      	movs	r3, #0
 8004606:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004608:	2300      	movs	r3, #0
 800460a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e18e      	b.n	8004934 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004620:	2b00      	cmp	r3, #0
 8004622:	d109      	bne.n	8004638 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f7fc fd7f 	bl	8001128 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4618      	mov	r0, r3
 800463e:	f7ff ff19 	bl	8004474 <LL_ADC_IsDeepPowerDownEnabled>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d004      	beq.n	8004652 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4618      	mov	r0, r3
 800464e:	f7ff feff 	bl	8004450 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4618      	mov	r0, r3
 8004658:	f7ff ff34 	bl	80044c4 <LL_ADC_IsInternalRegulatorEnabled>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d114      	bne.n	800468c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4618      	mov	r0, r3
 8004668:	f7ff ff18 	bl	800449c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800466c:	4b9a      	ldr	r3, [pc, #616]	; (80048d8 <HAL_ADC_Init+0x2dc>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	099b      	lsrs	r3, r3, #6
 8004672:	4a9a      	ldr	r2, [pc, #616]	; (80048dc <HAL_ADC_Init+0x2e0>)
 8004674:	fba2 2303 	umull	r2, r3, r2, r3
 8004678:	099b      	lsrs	r3, r3, #6
 800467a:	3301      	adds	r3, #1
 800467c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800467e:	e002      	b.n	8004686 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	3b01      	subs	r3, #1
 8004684:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1f9      	bne.n	8004680 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4618      	mov	r0, r3
 8004692:	f7ff ff17 	bl	80044c4 <LL_ADC_IsInternalRegulatorEnabled>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10d      	bne.n	80046b8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a0:	f043 0210 	orr.w	r2, r3, #16
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ac:	f043 0201 	orr.w	r2, r3, #1
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4618      	mov	r0, r3
 80046be:	f7ff ff77 	bl	80045b0 <LL_ADC_REG_IsConversionOngoing>
 80046c2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c8:	f003 0310 	and.w	r3, r3, #16
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f040 8128 	bne.w	8004922 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f040 8124 	bne.w	8004922 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046de:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80046e2:	f043 0202 	orr.w	r2, r3, #2
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7ff ff24 	bl	800453c <LL_ADC_IsEnabled>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d136      	bne.n	8004768 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a78      	ldr	r2, [pc, #480]	; (80048e0 <HAL_ADC_Init+0x2e4>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d004      	beq.n	800470e <HAL_ADC_Init+0x112>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a76      	ldr	r2, [pc, #472]	; (80048e4 <HAL_ADC_Init+0x2e8>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d10e      	bne.n	800472c <HAL_ADC_Init+0x130>
 800470e:	4874      	ldr	r0, [pc, #464]	; (80048e0 <HAL_ADC_Init+0x2e4>)
 8004710:	f7ff ff14 	bl	800453c <LL_ADC_IsEnabled>
 8004714:	4604      	mov	r4, r0
 8004716:	4873      	ldr	r0, [pc, #460]	; (80048e4 <HAL_ADC_Init+0x2e8>)
 8004718:	f7ff ff10 	bl	800453c <LL_ADC_IsEnabled>
 800471c:	4603      	mov	r3, r0
 800471e:	4323      	orrs	r3, r4
 8004720:	2b00      	cmp	r3, #0
 8004722:	bf0c      	ite	eq
 8004724:	2301      	moveq	r3, #1
 8004726:	2300      	movne	r3, #0
 8004728:	b2db      	uxtb	r3, r3
 800472a:	e008      	b.n	800473e <HAL_ADC_Init+0x142>
 800472c:	486e      	ldr	r0, [pc, #440]	; (80048e8 <HAL_ADC_Init+0x2ec>)
 800472e:	f7ff ff05 	bl	800453c <LL_ADC_IsEnabled>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	bf0c      	ite	eq
 8004738:	2301      	moveq	r3, #1
 800473a:	2300      	movne	r3, #0
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d012      	beq.n	8004768 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a66      	ldr	r2, [pc, #408]	; (80048e0 <HAL_ADC_Init+0x2e4>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d004      	beq.n	8004756 <HAL_ADC_Init+0x15a>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a64      	ldr	r2, [pc, #400]	; (80048e4 <HAL_ADC_Init+0x2e8>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d101      	bne.n	800475a <HAL_ADC_Init+0x15e>
 8004756:	4a65      	ldr	r2, [pc, #404]	; (80048ec <HAL_ADC_Init+0x2f0>)
 8004758:	e000      	b.n	800475c <HAL_ADC_Init+0x160>
 800475a:	4a65      	ldr	r2, [pc, #404]	; (80048f0 <HAL_ADC_Init+0x2f4>)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	4619      	mov	r1, r3
 8004762:	4610      	mov	r0, r2
 8004764:	f7ff fd3c 	bl	80041e0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004768:	f7ff fcf0 	bl	800414c <HAL_GetREVID>
 800476c:	4603      	mov	r3, r0
 800476e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004772:	4293      	cmp	r3, r2
 8004774:	d914      	bls.n	80047a0 <HAL_ADC_Init+0x1a4>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	2b10      	cmp	r3, #16
 800477c:	d110      	bne.n	80047a0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	7d5b      	ldrb	r3, [r3, #21]
 8004782:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004788:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800478e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	7f1b      	ldrb	r3, [r3, #28]
 8004794:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004796:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004798:	f043 030c 	orr.w	r3, r3, #12
 800479c:	61bb      	str	r3, [r7, #24]
 800479e:	e00d      	b.n	80047bc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	7d5b      	ldrb	r3, [r3, #21]
 80047a4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80047aa:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80047b0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	7f1b      	ldrb	r3, [r3, #28]
 80047b6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80047b8:	4313      	orrs	r3, r2
 80047ba:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	7f1b      	ldrb	r3, [r3, #28]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d106      	bne.n	80047d2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	3b01      	subs	r3, #1
 80047ca:	045b      	lsls	r3, r3, #17
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d009      	beq.n	80047ee <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68da      	ldr	r2, [r3, #12]
 80047f4:	4b3f      	ldr	r3, [pc, #252]	; (80048f4 <HAL_ADC_Init+0x2f8>)
 80047f6:	4013      	ands	r3, r2
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	6812      	ldr	r2, [r2, #0]
 80047fc:	69b9      	ldr	r1, [r7, #24]
 80047fe:	430b      	orrs	r3, r1
 8004800:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f7ff fed2 	bl	80045b0 <LL_ADC_REG_IsConversionOngoing>
 800480c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4618      	mov	r0, r3
 8004814:	f7ff fedf 	bl	80045d6 <LL_ADC_INJ_IsConversionOngoing>
 8004818:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d14a      	bne.n	80048b6 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d147      	bne.n	80048b6 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	7d1b      	ldrb	r3, [r3, #20]
 800482a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004830:	4313      	orrs	r3, r2
 8004832:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68da      	ldr	r2, [r3, #12]
 800483a:	4b2f      	ldr	r3, [pc, #188]	; (80048f8 <HAL_ADC_Init+0x2fc>)
 800483c:	4013      	ands	r3, r2
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	6812      	ldr	r2, [r2, #0]
 8004842:	69b9      	ldr	r1, [r7, #24]
 8004844:	430b      	orrs	r3, r1
 8004846:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800484e:	2b01      	cmp	r3, #1
 8004850:	d11b      	bne.n	800488a <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004856:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	691a      	ldr	r2, [r3, #16]
 800485e:	4b27      	ldr	r3, [pc, #156]	; (80048fc <HAL_ADC_Init+0x300>)
 8004860:	4013      	ands	r3, r2
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004866:	3a01      	subs	r2, #1
 8004868:	0411      	lsls	r1, r2, #16
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800486e:	4311      	orrs	r1, r2
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004874:	4311      	orrs	r1, r2
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800487a:	430a      	orrs	r2, r1
 800487c:	431a      	orrs	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f042 0201 	orr.w	r2, r2, #1
 8004886:	611a      	str	r2, [r3, #16]
 8004888:	e007      	b.n	800489a <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	691a      	ldr	r2, [r3, #16]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 0201 	bic.w	r2, r2, #1
 8004898:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 fddf 	bl	8005474 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d120      	bne.n	8004900 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c4:	f023 010f 	bic.w	r1, r3, #15
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	1e5a      	subs	r2, r3, #1
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	631a      	str	r2, [r3, #48]	; 0x30
 80048d6:	e01b      	b.n	8004910 <HAL_ADC_Init+0x314>
 80048d8:	24000000 	.word	0x24000000
 80048dc:	053e2d63 	.word	0x053e2d63
 80048e0:	40022000 	.word	0x40022000
 80048e4:	40022100 	.word	0x40022100
 80048e8:	58026000 	.word	0x58026000
 80048ec:	40022300 	.word	0x40022300
 80048f0:	58026300 	.word	0x58026300
 80048f4:	fff0c003 	.word	0xfff0c003
 80048f8:	ffffbffc 	.word	0xffffbffc
 80048fc:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 020f 	bic.w	r2, r2, #15
 800490e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004914:	f023 0303 	bic.w	r3, r3, #3
 8004918:	f043 0201 	orr.w	r2, r3, #1
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	655a      	str	r2, [r3, #84]	; 0x54
 8004920:	e007      	b.n	8004932 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004926:	f043 0210 	orr.w	r2, r3, #16
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004932:	7ffb      	ldrb	r3, [r7, #31]
}
 8004934:	4618      	mov	r0, r3
 8004936:	3724      	adds	r7, #36	; 0x24
 8004938:	46bd      	mov	sp, r7
 800493a:	bd90      	pop	{r4, r7, pc}

0800493c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a55      	ldr	r2, [pc, #340]	; (8004aa4 <HAL_ADC_Start_DMA+0x168>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d004      	beq.n	800495c <HAL_ADC_Start_DMA+0x20>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a54      	ldr	r2, [pc, #336]	; (8004aa8 <HAL_ADC_Start_DMA+0x16c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d101      	bne.n	8004960 <HAL_ADC_Start_DMA+0x24>
 800495c:	4b53      	ldr	r3, [pc, #332]	; (8004aac <HAL_ADC_Start_DMA+0x170>)
 800495e:	e000      	b.n	8004962 <HAL_ADC_Start_DMA+0x26>
 8004960:	4b53      	ldr	r3, [pc, #332]	; (8004ab0 <HAL_ADC_Start_DMA+0x174>)
 8004962:	4618      	mov	r0, r3
 8004964:	f7ff fd66 	bl	8004434 <LL_ADC_GetMultimode>
 8004968:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4618      	mov	r0, r3
 8004970:	f7ff fe1e 	bl	80045b0 <LL_ADC_REG_IsConversionOngoing>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	f040 808c 	bne.w	8004a94 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004982:	2b01      	cmp	r3, #1
 8004984:	d101      	bne.n	800498a <HAL_ADC_Start_DMA+0x4e>
 8004986:	2302      	movs	r3, #2
 8004988:	e087      	b.n	8004a9a <HAL_ADC_Start_DMA+0x15e>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d005      	beq.n	80049a4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	2b05      	cmp	r3, #5
 800499c:	d002      	beq.n	80049a4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	2b09      	cmp	r3, #9
 80049a2:	d170      	bne.n	8004a86 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f000 fbe7 	bl	8005178 <ADC_Enable>
 80049aa:	4603      	mov	r3, r0
 80049ac:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80049ae:	7dfb      	ldrb	r3, [r7, #23]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d163      	bne.n	8004a7c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049b8:	4b3e      	ldr	r3, [pc, #248]	; (8004ab4 <HAL_ADC_Start_DMA+0x178>)
 80049ba:	4013      	ands	r3, r2
 80049bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a37      	ldr	r2, [pc, #220]	; (8004aa8 <HAL_ADC_Start_DMA+0x16c>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d002      	beq.n	80049d4 <HAL_ADC_Start_DMA+0x98>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	e000      	b.n	80049d6 <HAL_ADC_Start_DMA+0x9a>
 80049d4:	4b33      	ldr	r3, [pc, #204]	; (8004aa4 <HAL_ADC_Start_DMA+0x168>)
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	6812      	ldr	r2, [r2, #0]
 80049da:	4293      	cmp	r3, r2
 80049dc:	d002      	beq.n	80049e4 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d105      	bne.n	80049f0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d006      	beq.n	8004a0a <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a00:	f023 0206 	bic.w	r2, r3, #6
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	659a      	str	r2, [r3, #88]	; 0x58
 8004a08:	e002      	b.n	8004a10 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a14:	4a28      	ldr	r2, [pc, #160]	; (8004ab8 <HAL_ADC_Start_DMA+0x17c>)
 8004a16:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a1c:	4a27      	ldr	r2, [pc, #156]	; (8004abc <HAL_ADC_Start_DMA+0x180>)
 8004a1e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a24:	4a26      	ldr	r2, [pc, #152]	; (8004ac0 <HAL_ADC_Start_DMA+0x184>)
 8004a26:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	221c      	movs	r2, #28
 8004a2e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685a      	ldr	r2, [r3, #4]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 0210 	orr.w	r2, r2, #16
 8004a46:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a50:	4619      	mov	r1, r3
 8004a52:	4610      	mov	r0, r2
 8004a54:	f7ff fc8b 	bl	800436e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	3340      	adds	r3, #64	; 0x40
 8004a62:	4619      	mov	r1, r3
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f001 fd90 	bl	800658c <HAL_DMA_Start_IT>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7ff fd87 	bl	8004588 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004a7a:	e00d      	b.n	8004a98 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8004a84:	e008      	b.n	8004a98 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004a92:	e001      	b.n	8004a98 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004a94:	2302      	movs	r3, #2
 8004a96:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004a98:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3718      	adds	r7, #24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	40022000 	.word	0x40022000
 8004aa8:	40022100 	.word	0x40022100
 8004aac:	40022300 	.word	0x40022300
 8004ab0:	58026300 	.word	0x58026300
 8004ab4:	fffff0fe 	.word	0xfffff0fe
 8004ab8:	0800534b 	.word	0x0800534b
 8004abc:	08005423 	.word	0x08005423
 8004ac0:	0800543f 	.word	0x0800543f

08004ac4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004ad8:	b590      	push	{r4, r7, lr}
 8004ada:	b0a1      	sub	sp, #132	; 0x84
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	4a9d      	ldr	r2, [pc, #628]	; (8004d68 <HAL_ADC_ConfigChannel+0x290>)
 8004af2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d101      	bne.n	8004b02 <HAL_ADC_ConfigChannel+0x2a>
 8004afe:	2302      	movs	r3, #2
 8004b00:	e321      	b.n	8005146 <HAL_ADC_ConfigChannel+0x66e>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7ff fd4e 	bl	80045b0 <LL_ADC_REG_IsConversionOngoing>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f040 8306 	bne.w	8005128 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d108      	bne.n	8004b3a <HAL_ADC_ConfigChannel+0x62>
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	0e9b      	lsrs	r3, r3, #26
 8004b2e:	f003 031f 	and.w	r3, r3, #31
 8004b32:	2201      	movs	r2, #1
 8004b34:	fa02 f303 	lsl.w	r3, r2, r3
 8004b38:	e016      	b.n	8004b68 <HAL_ADC_ConfigChannel+0x90>
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b42:	fa93 f3a3 	rbit	r3, r3
 8004b46:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004b48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b4a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004b4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8004b52:	2320      	movs	r3, #32
 8004b54:	e003      	b.n	8004b5e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8004b56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b58:	fab3 f383 	clz	r3, r3
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	f003 031f 	and.w	r3, r3, #31
 8004b62:	2201      	movs	r2, #1
 8004b64:	fa02 f303 	lsl.w	r3, r2, r3
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	6812      	ldr	r2, [r2, #0]
 8004b6c:	69d1      	ldr	r1, [r2, #28]
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	6812      	ldr	r2, [r2, #0]
 8004b72:	430b      	orrs	r3, r1
 8004b74:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6818      	ldr	r0, [r3, #0]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	6859      	ldr	r1, [r3, #4]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	461a      	mov	r2, r3
 8004b84:	f7ff fbc7 	bl	8004316 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7ff fd0f 	bl	80045b0 <LL_ADC_REG_IsConversionOngoing>
 8004b92:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7ff fd1c 	bl	80045d6 <LL_ADC_INJ_IsConversionOngoing>
 8004b9e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004ba0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f040 80b3 	bne.w	8004d0e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004ba8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f040 80af 	bne.w	8004d0e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6818      	ldr	r0, [r3, #0]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	6819      	ldr	r1, [r3, #0]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	f7ff fbe9 	bl	8004394 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004bc2:	4b6a      	ldr	r3, [pc, #424]	; (8004d6c <HAL_ADC_ConfigChannel+0x294>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004bca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bce:	d10b      	bne.n	8004be8 <HAL_ADC_ConfigChannel+0x110>
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	695a      	ldr	r2, [r3, #20]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	089b      	lsrs	r3, r3, #2
 8004bdc:	f003 0307 	and.w	r3, r3, #7
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	fa02 f303 	lsl.w	r3, r2, r3
 8004be6:	e01d      	b.n	8004c24 <HAL_ADC_ConfigChannel+0x14c>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	f003 0310 	and.w	r3, r3, #16
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10b      	bne.n	8004c0e <HAL_ADC_ConfigChannel+0x136>
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	695a      	ldr	r2, [r3, #20]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	089b      	lsrs	r3, r3, #2
 8004c02:	f003 0307 	and.w	r3, r3, #7
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0c:	e00a      	b.n	8004c24 <HAL_ADC_ConfigChannel+0x14c>
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	695a      	ldr	r2, [r3, #20]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	089b      	lsrs	r3, r3, #2
 8004c1a:	f003 0304 	and.w	r3, r3, #4
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	fa02 f303 	lsl.w	r3, r2, r3
 8004c24:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	2b04      	cmp	r3, #4
 8004c2c:	d027      	beq.n	8004c7e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6818      	ldr	r0, [r3, #0]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	6919      	ldr	r1, [r3, #16]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c3c:	f7ff fb04 	bl	8004248 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6818      	ldr	r0, [r3, #0]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	6919      	ldr	r1, [r3, #16]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	7e5b      	ldrb	r3, [r3, #25]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d102      	bne.n	8004c56 <HAL_ADC_ConfigChannel+0x17e>
 8004c50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c54:	e000      	b.n	8004c58 <HAL_ADC_ConfigChannel+0x180>
 8004c56:	2300      	movs	r3, #0
 8004c58:	461a      	mov	r2, r3
 8004c5a:	f7ff fb2e 	bl	80042ba <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6818      	ldr	r0, [r3, #0]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	6919      	ldr	r1, [r3, #16]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	7e1b      	ldrb	r3, [r3, #24]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d102      	bne.n	8004c74 <HAL_ADC_ConfigChannel+0x19c>
 8004c6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c72:	e000      	b.n	8004c76 <HAL_ADC_ConfigChannel+0x19e>
 8004c74:	2300      	movs	r3, #0
 8004c76:	461a      	mov	r2, r3
 8004c78:	f7ff fb06 	bl	8004288 <LL_ADC_SetDataRightShift>
 8004c7c:	e047      	b.n	8004d0e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c84:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	069b      	lsls	r3, r3, #26
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d107      	bne.n	8004ca2 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004ca0:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ca8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	069b      	lsls	r3, r3, #26
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d107      	bne.n	8004cc6 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004cc4:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ccc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	069b      	lsls	r3, r3, #26
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d107      	bne.n	8004cea <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004ce8:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cf0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	069b      	lsls	r3, r3, #26
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d107      	bne.n	8004d0e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004d0c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7ff fc12 	bl	800453c <LL_ADC_IsEnabled>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f040 820d 	bne.w	800513a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6818      	ldr	r0, [r3, #0]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	6819      	ldr	r1, [r3, #0]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	f7ff fb5d 	bl	80043ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	4a0c      	ldr	r2, [pc, #48]	; (8004d68 <HAL_ADC_ConfigChannel+0x290>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	f040 8133 	bne.w	8004fa4 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d110      	bne.n	8004d70 <HAL_ADC_ConfigChannel+0x298>
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	0e9b      	lsrs	r3, r3, #26
 8004d54:	3301      	adds	r3, #1
 8004d56:	f003 031f 	and.w	r3, r3, #31
 8004d5a:	2b09      	cmp	r3, #9
 8004d5c:	bf94      	ite	ls
 8004d5e:	2301      	movls	r3, #1
 8004d60:	2300      	movhi	r3, #0
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	e01e      	b.n	8004da4 <HAL_ADC_ConfigChannel+0x2cc>
 8004d66:	bf00      	nop
 8004d68:	47ff0000 	.word	0x47ff0000
 8004d6c:	5c001000 	.word	0x5c001000
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d78:	fa93 f3a3 	rbit	r3, r3
 8004d7c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004d7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d80:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004d82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d101      	bne.n	8004d8c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8004d88:	2320      	movs	r3, #32
 8004d8a:	e003      	b.n	8004d94 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8004d8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d8e:	fab3 f383 	clz	r3, r3
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	3301      	adds	r3, #1
 8004d96:	f003 031f 	and.w	r3, r3, #31
 8004d9a:	2b09      	cmp	r3, #9
 8004d9c:	bf94      	ite	ls
 8004d9e:	2301      	movls	r3, #1
 8004da0:	2300      	movhi	r3, #0
 8004da2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d079      	beq.n	8004e9c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d107      	bne.n	8004dc4 <HAL_ADC_ConfigChannel+0x2ec>
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	0e9b      	lsrs	r3, r3, #26
 8004dba:	3301      	adds	r3, #1
 8004dbc:	069b      	lsls	r3, r3, #26
 8004dbe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004dc2:	e015      	b.n	8004df0 <HAL_ADC_ConfigChannel+0x318>
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dcc:	fa93 f3a3 	rbit	r3, r3
 8004dd0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004dd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dd4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004dd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d101      	bne.n	8004de0 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8004ddc:	2320      	movs	r3, #32
 8004dde:	e003      	b.n	8004de8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004de0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004de2:	fab3 f383 	clz	r3, r3
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	3301      	adds	r3, #1
 8004dea:	069b      	lsls	r3, r3, #26
 8004dec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d109      	bne.n	8004e10 <HAL_ADC_ConfigChannel+0x338>
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	0e9b      	lsrs	r3, r3, #26
 8004e02:	3301      	adds	r3, #1
 8004e04:	f003 031f 	and.w	r3, r3, #31
 8004e08:	2101      	movs	r1, #1
 8004e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e0e:	e017      	b.n	8004e40 <HAL_ADC_ConfigChannel+0x368>
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e18:	fa93 f3a3 	rbit	r3, r3
 8004e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e20:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004e22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8004e28:	2320      	movs	r3, #32
 8004e2a:	e003      	b.n	8004e34 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8004e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e2e:	fab3 f383 	clz	r3, r3
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	3301      	adds	r3, #1
 8004e36:	f003 031f 	and.w	r3, r3, #31
 8004e3a:	2101      	movs	r1, #1
 8004e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e40:	ea42 0103 	orr.w	r1, r2, r3
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10a      	bne.n	8004e66 <HAL_ADC_ConfigChannel+0x38e>
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	0e9b      	lsrs	r3, r3, #26
 8004e56:	3301      	adds	r3, #1
 8004e58:	f003 021f 	and.w	r2, r3, #31
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	005b      	lsls	r3, r3, #1
 8004e60:	4413      	add	r3, r2
 8004e62:	051b      	lsls	r3, r3, #20
 8004e64:	e018      	b.n	8004e98 <HAL_ADC_ConfigChannel+0x3c0>
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e6e:	fa93 f3a3 	rbit	r3, r3
 8004e72:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e76:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8004e7e:	2320      	movs	r3, #32
 8004e80:	e003      	b.n	8004e8a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8004e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e84:	fab3 f383 	clz	r3, r3
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	f003 021f 	and.w	r2, r3, #31
 8004e90:	4613      	mov	r3, r2
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	4413      	add	r3, r2
 8004e96:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e98:	430b      	orrs	r3, r1
 8004e9a:	e07e      	b.n	8004f9a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d107      	bne.n	8004eb8 <HAL_ADC_ConfigChannel+0x3e0>
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	0e9b      	lsrs	r3, r3, #26
 8004eae:	3301      	adds	r3, #1
 8004eb0:	069b      	lsls	r3, r3, #26
 8004eb2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004eb6:	e015      	b.n	8004ee4 <HAL_ADC_ConfigChannel+0x40c>
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec0:	fa93 f3a3 	rbit	r3, r3
 8004ec4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d101      	bne.n	8004ed4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004ed0:	2320      	movs	r3, #32
 8004ed2:	e003      	b.n	8004edc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed6:	fab3 f383 	clz	r3, r3
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	3301      	adds	r3, #1
 8004ede:	069b      	lsls	r3, r3, #26
 8004ee0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d109      	bne.n	8004f04 <HAL_ADC_ConfigChannel+0x42c>
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	0e9b      	lsrs	r3, r3, #26
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	f003 031f 	and.w	r3, r3, #31
 8004efc:	2101      	movs	r1, #1
 8004efe:	fa01 f303 	lsl.w	r3, r1, r3
 8004f02:	e017      	b.n	8004f34 <HAL_ADC_ConfigChannel+0x45c>
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	fa93 f3a3 	rbit	r3, r3
 8004f10:	61bb      	str	r3, [r7, #24]
  return result;
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004f16:	6a3b      	ldr	r3, [r7, #32]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d101      	bne.n	8004f20 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8004f1c:	2320      	movs	r3, #32
 8004f1e:	e003      	b.n	8004f28 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8004f20:	6a3b      	ldr	r3, [r7, #32]
 8004f22:	fab3 f383 	clz	r3, r3
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	3301      	adds	r3, #1
 8004f2a:	f003 031f 	and.w	r3, r3, #31
 8004f2e:	2101      	movs	r1, #1
 8004f30:	fa01 f303 	lsl.w	r3, r1, r3
 8004f34:	ea42 0103 	orr.w	r1, r2, r3
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10d      	bne.n	8004f60 <HAL_ADC_ConfigChannel+0x488>
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	0e9b      	lsrs	r3, r3, #26
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	f003 021f 	and.w	r2, r3, #31
 8004f50:	4613      	mov	r3, r2
 8004f52:	005b      	lsls	r3, r3, #1
 8004f54:	4413      	add	r3, r2
 8004f56:	3b1e      	subs	r3, #30
 8004f58:	051b      	lsls	r3, r3, #20
 8004f5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f5e:	e01b      	b.n	8004f98 <HAL_ADC_ConfigChannel+0x4c0>
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	fa93 f3a3 	rbit	r3, r3
 8004f6c:	60fb      	str	r3, [r7, #12]
  return result;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d101      	bne.n	8004f7c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8004f78:	2320      	movs	r3, #32
 8004f7a:	e003      	b.n	8004f84 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	fab3 f383 	clz	r3, r3
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	3301      	adds	r3, #1
 8004f86:	f003 021f 	and.w	r2, r3, #31
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	005b      	lsls	r3, r3, #1
 8004f8e:	4413      	add	r3, r2
 8004f90:	3b1e      	subs	r3, #30
 8004f92:	051b      	lsls	r3, r3, #20
 8004f94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f98:	430b      	orrs	r3, r1
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	6892      	ldr	r2, [r2, #8]
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	f7ff f9f8 	bl	8004394 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f280 80c6 	bge.w	800513a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a67      	ldr	r2, [pc, #412]	; (8005150 <HAL_ADC_ConfigChannel+0x678>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d004      	beq.n	8004fc2 <HAL_ADC_ConfigChannel+0x4ea>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a65      	ldr	r2, [pc, #404]	; (8005154 <HAL_ADC_ConfigChannel+0x67c>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d101      	bne.n	8004fc6 <HAL_ADC_ConfigChannel+0x4ee>
 8004fc2:	4b65      	ldr	r3, [pc, #404]	; (8005158 <HAL_ADC_ConfigChannel+0x680>)
 8004fc4:	e000      	b.n	8004fc8 <HAL_ADC_ConfigChannel+0x4f0>
 8004fc6:	4b65      	ldr	r3, [pc, #404]	; (800515c <HAL_ADC_ConfigChannel+0x684>)
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7ff f92f 	bl	800422c <LL_ADC_GetCommonPathInternalCh>
 8004fce:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a5e      	ldr	r2, [pc, #376]	; (8005150 <HAL_ADC_ConfigChannel+0x678>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d004      	beq.n	8004fe4 <HAL_ADC_ConfigChannel+0x50c>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a5d      	ldr	r2, [pc, #372]	; (8005154 <HAL_ADC_ConfigChannel+0x67c>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d10e      	bne.n	8005002 <HAL_ADC_ConfigChannel+0x52a>
 8004fe4:	485a      	ldr	r0, [pc, #360]	; (8005150 <HAL_ADC_ConfigChannel+0x678>)
 8004fe6:	f7ff faa9 	bl	800453c <LL_ADC_IsEnabled>
 8004fea:	4604      	mov	r4, r0
 8004fec:	4859      	ldr	r0, [pc, #356]	; (8005154 <HAL_ADC_ConfigChannel+0x67c>)
 8004fee:	f7ff faa5 	bl	800453c <LL_ADC_IsEnabled>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	4323      	orrs	r3, r4
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	bf0c      	ite	eq
 8004ffa:	2301      	moveq	r3, #1
 8004ffc:	2300      	movne	r3, #0
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	e008      	b.n	8005014 <HAL_ADC_ConfigChannel+0x53c>
 8005002:	4857      	ldr	r0, [pc, #348]	; (8005160 <HAL_ADC_ConfigChannel+0x688>)
 8005004:	f7ff fa9a 	bl	800453c <LL_ADC_IsEnabled>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	bf0c      	ite	eq
 800500e:	2301      	moveq	r3, #1
 8005010:	2300      	movne	r3, #0
 8005012:	b2db      	uxtb	r3, r3
 8005014:	2b00      	cmp	r3, #0
 8005016:	d07d      	beq.n	8005114 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a51      	ldr	r2, [pc, #324]	; (8005164 <HAL_ADC_ConfigChannel+0x68c>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d130      	bne.n	8005084 <HAL_ADC_ConfigChannel+0x5ac>
 8005022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005024:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d12b      	bne.n	8005084 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a4b      	ldr	r2, [pc, #300]	; (8005160 <HAL_ADC_ConfigChannel+0x688>)
 8005032:	4293      	cmp	r3, r2
 8005034:	f040 8081 	bne.w	800513a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a44      	ldr	r2, [pc, #272]	; (8005150 <HAL_ADC_ConfigChannel+0x678>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d004      	beq.n	800504c <HAL_ADC_ConfigChannel+0x574>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a43      	ldr	r2, [pc, #268]	; (8005154 <HAL_ADC_ConfigChannel+0x67c>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d101      	bne.n	8005050 <HAL_ADC_ConfigChannel+0x578>
 800504c:	4a42      	ldr	r2, [pc, #264]	; (8005158 <HAL_ADC_ConfigChannel+0x680>)
 800504e:	e000      	b.n	8005052 <HAL_ADC_ConfigChannel+0x57a>
 8005050:	4a42      	ldr	r2, [pc, #264]	; (800515c <HAL_ADC_ConfigChannel+0x684>)
 8005052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005054:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005058:	4619      	mov	r1, r3
 800505a:	4610      	mov	r0, r2
 800505c:	f7ff f8d3 	bl	8004206 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005060:	4b41      	ldr	r3, [pc, #260]	; (8005168 <HAL_ADC_ConfigChannel+0x690>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	099b      	lsrs	r3, r3, #6
 8005066:	4a41      	ldr	r2, [pc, #260]	; (800516c <HAL_ADC_ConfigChannel+0x694>)
 8005068:	fba2 2303 	umull	r2, r3, r2, r3
 800506c:	099b      	lsrs	r3, r3, #6
 800506e:	3301      	adds	r3, #1
 8005070:	005b      	lsls	r3, r3, #1
 8005072:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005074:	e002      	b.n	800507c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	3b01      	subs	r3, #1
 800507a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1f9      	bne.n	8005076 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005082:	e05a      	b.n	800513a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a39      	ldr	r2, [pc, #228]	; (8005170 <HAL_ADC_ConfigChannel+0x698>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d11e      	bne.n	80050cc <HAL_ADC_ConfigChannel+0x5f4>
 800508e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005090:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d119      	bne.n	80050cc <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a30      	ldr	r2, [pc, #192]	; (8005160 <HAL_ADC_ConfigChannel+0x688>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d14b      	bne.n	800513a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a2a      	ldr	r2, [pc, #168]	; (8005150 <HAL_ADC_ConfigChannel+0x678>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d004      	beq.n	80050b6 <HAL_ADC_ConfigChannel+0x5de>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a28      	ldr	r2, [pc, #160]	; (8005154 <HAL_ADC_ConfigChannel+0x67c>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d101      	bne.n	80050ba <HAL_ADC_ConfigChannel+0x5e2>
 80050b6:	4a28      	ldr	r2, [pc, #160]	; (8005158 <HAL_ADC_ConfigChannel+0x680>)
 80050b8:	e000      	b.n	80050bc <HAL_ADC_ConfigChannel+0x5e4>
 80050ba:	4a28      	ldr	r2, [pc, #160]	; (800515c <HAL_ADC_ConfigChannel+0x684>)
 80050bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050c2:	4619      	mov	r1, r3
 80050c4:	4610      	mov	r0, r2
 80050c6:	f7ff f89e 	bl	8004206 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80050ca:	e036      	b.n	800513a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a28      	ldr	r2, [pc, #160]	; (8005174 <HAL_ADC_ConfigChannel+0x69c>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d131      	bne.n	800513a <HAL_ADC_ConfigChannel+0x662>
 80050d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d12c      	bne.n	800513a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a1e      	ldr	r2, [pc, #120]	; (8005160 <HAL_ADC_ConfigChannel+0x688>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d127      	bne.n	800513a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a18      	ldr	r2, [pc, #96]	; (8005150 <HAL_ADC_ConfigChannel+0x678>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d004      	beq.n	80050fe <HAL_ADC_ConfigChannel+0x626>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a16      	ldr	r2, [pc, #88]	; (8005154 <HAL_ADC_ConfigChannel+0x67c>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d101      	bne.n	8005102 <HAL_ADC_ConfigChannel+0x62a>
 80050fe:	4a16      	ldr	r2, [pc, #88]	; (8005158 <HAL_ADC_ConfigChannel+0x680>)
 8005100:	e000      	b.n	8005104 <HAL_ADC_ConfigChannel+0x62c>
 8005102:	4a16      	ldr	r2, [pc, #88]	; (800515c <HAL_ADC_ConfigChannel+0x684>)
 8005104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005106:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800510a:	4619      	mov	r1, r3
 800510c:	4610      	mov	r0, r2
 800510e:	f7ff f87a 	bl	8004206 <LL_ADC_SetCommonPathInternalCh>
 8005112:	e012      	b.n	800513a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005118:	f043 0220 	orr.w	r2, r3, #32
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005126:	e008      	b.n	800513a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800512c:	f043 0220 	orr.w	r2, r3, #32
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005142:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005146:	4618      	mov	r0, r3
 8005148:	3784      	adds	r7, #132	; 0x84
 800514a:	46bd      	mov	sp, r7
 800514c:	bd90      	pop	{r4, r7, pc}
 800514e:	bf00      	nop
 8005150:	40022000 	.word	0x40022000
 8005154:	40022100 	.word	0x40022100
 8005158:	40022300 	.word	0x40022300
 800515c:	58026300 	.word	0x58026300
 8005160:	58026000 	.word	0x58026000
 8005164:	cb840000 	.word	0xcb840000
 8005168:	24000000 	.word	0x24000000
 800516c:	053e2d63 	.word	0x053e2d63
 8005170:	c7520000 	.word	0xc7520000
 8005174:	cfb80000 	.word	0xcfb80000

08005178 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4618      	mov	r0, r3
 8005186:	f7ff f9d9 	bl	800453c <LL_ADC_IsEnabled>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d16e      	bne.n	800526e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689a      	ldr	r2, [r3, #8]
 8005196:	4b38      	ldr	r3, [pc, #224]	; (8005278 <ADC_Enable+0x100>)
 8005198:	4013      	ands	r3, r2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00d      	beq.n	80051ba <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a2:	f043 0210 	orr.w	r2, r3, #16
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ae:	f043 0201 	orr.w	r2, r3, #1
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e05a      	b.n	8005270 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4618      	mov	r0, r3
 80051c0:	f7ff f994 	bl	80044ec <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80051c4:	f7fe ff92 	bl	80040ec <HAL_GetTick>
 80051c8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a2b      	ldr	r2, [pc, #172]	; (800527c <ADC_Enable+0x104>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d004      	beq.n	80051de <ADC_Enable+0x66>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a29      	ldr	r2, [pc, #164]	; (8005280 <ADC_Enable+0x108>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d101      	bne.n	80051e2 <ADC_Enable+0x6a>
 80051de:	4b29      	ldr	r3, [pc, #164]	; (8005284 <ADC_Enable+0x10c>)
 80051e0:	e000      	b.n	80051e4 <ADC_Enable+0x6c>
 80051e2:	4b29      	ldr	r3, [pc, #164]	; (8005288 <ADC_Enable+0x110>)
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7ff f925 	bl	8004434 <LL_ADC_GetMultimode>
 80051ea:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a23      	ldr	r2, [pc, #140]	; (8005280 <ADC_Enable+0x108>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d002      	beq.n	80051fc <ADC_Enable+0x84>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	e000      	b.n	80051fe <ADC_Enable+0x86>
 80051fc:	4b1f      	ldr	r3, [pc, #124]	; (800527c <ADC_Enable+0x104>)
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	6812      	ldr	r2, [r2, #0]
 8005202:	4293      	cmp	r3, r2
 8005204:	d02c      	beq.n	8005260 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d130      	bne.n	800526e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800520c:	e028      	b.n	8005260 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4618      	mov	r0, r3
 8005214:	f7ff f992 	bl	800453c <LL_ADC_IsEnabled>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d104      	bne.n	8005228 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4618      	mov	r0, r3
 8005224:	f7ff f962 	bl	80044ec <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005228:	f7fe ff60 	bl	80040ec <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	2b02      	cmp	r3, #2
 8005234:	d914      	bls.n	8005260 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b01      	cmp	r3, #1
 8005242:	d00d      	beq.n	8005260 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005248:	f043 0210 	orr.w	r2, r3, #16
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005254:	f043 0201 	orr.w	r2, r3, #1
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e007      	b.n	8005270 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b01      	cmp	r3, #1
 800526c:	d1cf      	bne.n	800520e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	8000003f 	.word	0x8000003f
 800527c:	40022000 	.word	0x40022000
 8005280:	40022100 	.word	0x40022100
 8005284:	40022300 	.word	0x40022300
 8005288:	58026300 	.word	0x58026300

0800528c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4618      	mov	r0, r3
 800529a:	f7ff f962 	bl	8004562 <LL_ADC_IsDisableOngoing>
 800529e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7ff f949 	bl	800453c <LL_ADC_IsEnabled>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d047      	beq.n	8005340 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d144      	bne.n	8005340 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f003 030d 	and.w	r3, r3, #13
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d10c      	bne.n	80052de <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7ff f923 	bl	8004514 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2203      	movs	r2, #3
 80052d4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80052d6:	f7fe ff09 	bl	80040ec <HAL_GetTick>
 80052da:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80052dc:	e029      	b.n	8005332 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e2:	f043 0210 	orr.w	r2, r3, #16
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ee:	f043 0201 	orr.w	r2, r3, #1
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e023      	b.n	8005342 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80052fa:	f7fe fef7 	bl	80040ec <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	2b02      	cmp	r3, #2
 8005306:	d914      	bls.n	8005332 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00d      	beq.n	8005332 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800531a:	f043 0210 	orr.w	r2, r3, #16
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005326:	f043 0201 	orr.w	r2, r3, #1
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e007      	b.n	8005342 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1dc      	bne.n	80052fa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800534a:	b580      	push	{r7, lr}
 800534c:	b084      	sub	sp, #16
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005356:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800535c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005360:	2b00      	cmp	r3, #0
 8005362:	d14b      	bne.n	80053fc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005368:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0308 	and.w	r3, r3, #8
 800537a:	2b00      	cmp	r3, #0
 800537c:	d021      	beq.n	80053c2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4618      	mov	r0, r3
 8005384:	f7fe ffb4 	bl	80042f0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d032      	beq.n	80053f4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d12b      	bne.n	80053f4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d11f      	bne.n	80053f4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b8:	f043 0201 	orr.w	r2, r3, #1
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	655a      	str	r2, [r3, #84]	; 0x54
 80053c0:	e018      	b.n	80053f4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f003 0303 	and.w	r3, r3, #3
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d111      	bne.n	80053f4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d105      	bne.n	80053f4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ec:	f043 0201 	orr.w	r2, r3, #1
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f019 fa13 	bl	801e820 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80053fa:	e00e      	b.n	800541a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005400:	f003 0310 	and.w	r3, r3, #16
 8005404:	2b00      	cmp	r3, #0
 8005406:	d003      	beq.n	8005410 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f7ff fb5b 	bl	8004ac4 <HAL_ADC_ErrorCallback>
}
 800540e:	e004      	b.n	800541a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	4798      	blx	r3
}
 800541a:	bf00      	nop
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005422:	b580      	push	{r7, lr}
 8005424:	b084      	sub	sp, #16
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	f019 f9c9 	bl	801e7c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005436:	bf00      	nop
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800543e:	b580      	push	{r7, lr}
 8005440:	b084      	sub	sp, #16
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005450:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800545c:	f043 0204 	orr.w	r2, r3, #4
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f7ff fb2d 	bl	8004ac4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800546a:	bf00      	nop
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
	...

08005474 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a79      	ldr	r2, [pc, #484]	; (8005668 <ADC_ConfigureBoostMode+0x1f4>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d004      	beq.n	8005490 <ADC_ConfigureBoostMode+0x1c>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a78      	ldr	r2, [pc, #480]	; (800566c <ADC_ConfigureBoostMode+0x1f8>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d109      	bne.n	80054a4 <ADC_ConfigureBoostMode+0x30>
 8005490:	4b77      	ldr	r3, [pc, #476]	; (8005670 <ADC_ConfigureBoostMode+0x1fc>)
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005498:	2b00      	cmp	r3, #0
 800549a:	bf14      	ite	ne
 800549c:	2301      	movne	r3, #1
 800549e:	2300      	moveq	r3, #0
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	e008      	b.n	80054b6 <ADC_ConfigureBoostMode+0x42>
 80054a4:	4b73      	ldr	r3, [pc, #460]	; (8005674 <ADC_ConfigureBoostMode+0x200>)
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	bf14      	ite	ne
 80054b0:	2301      	movne	r3, #1
 80054b2:	2300      	moveq	r3, #0
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d01c      	beq.n	80054f4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80054ba:	f006 f90b 	bl	800b6d4 <HAL_RCC_GetHCLKFreq>
 80054be:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80054c8:	d010      	beq.n	80054ec <ADC_ConfigureBoostMode+0x78>
 80054ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80054ce:	d871      	bhi.n	80055b4 <ADC_ConfigureBoostMode+0x140>
 80054d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054d4:	d002      	beq.n	80054dc <ADC_ConfigureBoostMode+0x68>
 80054d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054da:	d16b      	bne.n	80055b4 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	0c1b      	lsrs	r3, r3, #16
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e8:	60fb      	str	r3, [r7, #12]
        break;
 80054ea:	e066      	b.n	80055ba <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	089b      	lsrs	r3, r3, #2
 80054f0:	60fb      	str	r3, [r7, #12]
        break;
 80054f2:	e062      	b.n	80055ba <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80054f4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80054f8:	f007 f888 	bl	800c60c <HAL_RCCEx_GetPeriphCLKFreq>
 80054fc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005506:	d051      	beq.n	80055ac <ADC_ConfigureBoostMode+0x138>
 8005508:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800550c:	d854      	bhi.n	80055b8 <ADC_ConfigureBoostMode+0x144>
 800550e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005512:	d047      	beq.n	80055a4 <ADC_ConfigureBoostMode+0x130>
 8005514:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005518:	d84e      	bhi.n	80055b8 <ADC_ConfigureBoostMode+0x144>
 800551a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800551e:	d03d      	beq.n	800559c <ADC_ConfigureBoostMode+0x128>
 8005520:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005524:	d848      	bhi.n	80055b8 <ADC_ConfigureBoostMode+0x144>
 8005526:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800552a:	d033      	beq.n	8005594 <ADC_ConfigureBoostMode+0x120>
 800552c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005530:	d842      	bhi.n	80055b8 <ADC_ConfigureBoostMode+0x144>
 8005532:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005536:	d029      	beq.n	800558c <ADC_ConfigureBoostMode+0x118>
 8005538:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800553c:	d83c      	bhi.n	80055b8 <ADC_ConfigureBoostMode+0x144>
 800553e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005542:	d01a      	beq.n	800557a <ADC_ConfigureBoostMode+0x106>
 8005544:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005548:	d836      	bhi.n	80055b8 <ADC_ConfigureBoostMode+0x144>
 800554a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800554e:	d014      	beq.n	800557a <ADC_ConfigureBoostMode+0x106>
 8005550:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005554:	d830      	bhi.n	80055b8 <ADC_ConfigureBoostMode+0x144>
 8005556:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800555a:	d00e      	beq.n	800557a <ADC_ConfigureBoostMode+0x106>
 800555c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005560:	d82a      	bhi.n	80055b8 <ADC_ConfigureBoostMode+0x144>
 8005562:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005566:	d008      	beq.n	800557a <ADC_ConfigureBoostMode+0x106>
 8005568:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800556c:	d824      	bhi.n	80055b8 <ADC_ConfigureBoostMode+0x144>
 800556e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005572:	d002      	beq.n	800557a <ADC_ConfigureBoostMode+0x106>
 8005574:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005578:	d11e      	bne.n	80055b8 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	0c9b      	lsrs	r3, r3, #18
 8005580:	005b      	lsls	r3, r3, #1
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	fbb2 f3f3 	udiv	r3, r2, r3
 8005588:	60fb      	str	r3, [r7, #12]
        break;
 800558a:	e016      	b.n	80055ba <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	091b      	lsrs	r3, r3, #4
 8005590:	60fb      	str	r3, [r7, #12]
        break;
 8005592:	e012      	b.n	80055ba <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	095b      	lsrs	r3, r3, #5
 8005598:	60fb      	str	r3, [r7, #12]
        break;
 800559a:	e00e      	b.n	80055ba <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	099b      	lsrs	r3, r3, #6
 80055a0:	60fb      	str	r3, [r7, #12]
        break;
 80055a2:	e00a      	b.n	80055ba <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	09db      	lsrs	r3, r3, #7
 80055a8:	60fb      	str	r3, [r7, #12]
        break;
 80055aa:	e006      	b.n	80055ba <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	0a1b      	lsrs	r3, r3, #8
 80055b0:	60fb      	str	r3, [r7, #12]
        break;
 80055b2:	e002      	b.n	80055ba <ADC_ConfigureBoostMode+0x146>
        break;
 80055b4:	bf00      	nop
 80055b6:	e000      	b.n	80055ba <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80055b8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80055ba:	f7fe fdc7 	bl	800414c <HAL_GetREVID>
 80055be:	4603      	mov	r3, r0
 80055c0:	f241 0203 	movw	r2, #4099	; 0x1003
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d815      	bhi.n	80055f4 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	4a2b      	ldr	r2, [pc, #172]	; (8005678 <ADC_ConfigureBoostMode+0x204>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d908      	bls.n	80055e2 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	689a      	ldr	r2, [r3, #8]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055de:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80055e0:	e03e      	b.n	8005660 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	689a      	ldr	r2, [r3, #8]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055f0:	609a      	str	r2, [r3, #8]
}
 80055f2:	e035      	b.n	8005660 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	085b      	lsrs	r3, r3, #1
 80055f8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	4a1f      	ldr	r2, [pc, #124]	; (800567c <ADC_ConfigureBoostMode+0x208>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d808      	bhi.n	8005614 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	689a      	ldr	r2, [r3, #8]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005610:	609a      	str	r2, [r3, #8]
}
 8005612:	e025      	b.n	8005660 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	4a1a      	ldr	r2, [pc, #104]	; (8005680 <ADC_ConfigureBoostMode+0x20c>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d80a      	bhi.n	8005632 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800562e:	609a      	str	r2, [r3, #8]
}
 8005630:	e016      	b.n	8005660 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	4a13      	ldr	r2, [pc, #76]	; (8005684 <ADC_ConfigureBoostMode+0x210>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d80a      	bhi.n	8005650 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800564c:	609a      	str	r2, [r3, #8]
}
 800564e:	e007      	b.n	8005660 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	689a      	ldr	r2, [r3, #8]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800565e:	609a      	str	r2, [r3, #8]
}
 8005660:	bf00      	nop
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	40022000 	.word	0x40022000
 800566c:	40022100 	.word	0x40022100
 8005670:	40022300 	.word	0x40022300
 8005674:	58026300 	.word	0x58026300
 8005678:	01312d00 	.word	0x01312d00
 800567c:	005f5e10 	.word	0x005f5e10
 8005680:	00bebc20 	.word	0x00bebc20
 8005684:	017d7840 	.word	0x017d7840

08005688 <LL_ADC_IsEnabled>:
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	2b01      	cmp	r3, #1
 800569a:	d101      	bne.n	80056a0 <LL_ADC_IsEnabled+0x18>
 800569c:	2301      	movs	r3, #1
 800569e:	e000      	b.n	80056a2 <LL_ADC_IsEnabled+0x1a>
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
	...

080056b0 <LL_ADC_StartCalibration>:
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	689a      	ldr	r2, [r3, #8]
 80056c0:	4b09      	ldr	r3, [pc, #36]	; (80056e8 <LL_ADC_StartCalibration+0x38>)
 80056c2:	4013      	ands	r3, r2
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80056d0:	430a      	orrs	r2, r1
 80056d2:	4313      	orrs	r3, r2
 80056d4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	609a      	str	r2, [r3, #8]
}
 80056dc:	bf00      	nop
 80056de:	3714      	adds	r7, #20
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	3ffeffc0 	.word	0x3ffeffc0

080056ec <LL_ADC_IsCalibrationOnGoing>:
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005700:	d101      	bne.n	8005706 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005702:	2301      	movs	r3, #1
 8005704:	e000      	b.n	8005708 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <LL_ADC_REG_IsConversionOngoing>:
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f003 0304 	and.w	r3, r3, #4
 8005724:	2b04      	cmp	r3, #4
 8005726:	d101      	bne.n	800572c <LL_ADC_REG_IsConversionOngoing+0x18>
 8005728:	2301      	movs	r3, #1
 800572a:	e000      	b.n	800572e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
	...

0800573c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005748:	2300      	movs	r3, #0
 800574a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005752:	2b01      	cmp	r3, #1
 8005754:	d101      	bne.n	800575a <HAL_ADCEx_Calibration_Start+0x1e>
 8005756:	2302      	movs	r3, #2
 8005758:	e04c      	b.n	80057f4 <HAL_ADCEx_Calibration_Start+0xb8>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f7ff fd92 	bl	800528c <ADC_Disable>
 8005768:	4603      	mov	r3, r0
 800576a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800576c:	7dfb      	ldrb	r3, [r7, #23]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d135      	bne.n	80057de <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005776:	4b21      	ldr	r3, [pc, #132]	; (80057fc <HAL_ADCEx_Calibration_Start+0xc0>)
 8005778:	4013      	ands	r3, r2
 800577a:	f043 0202 	orr.w	r2, r3, #2
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	68b9      	ldr	r1, [r7, #8]
 800578a:	4618      	mov	r0, r3
 800578c:	f7ff ff90 	bl	80056b0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005790:	e014      	b.n	80057bc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	3301      	adds	r3, #1
 8005796:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	4a19      	ldr	r2, [pc, #100]	; (8005800 <HAL_ADCEx_Calibration_Start+0xc4>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d30d      	bcc.n	80057bc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a4:	f023 0312 	bic.w	r3, r3, #18
 80057a8:	f043 0210 	orr.w	r2, r3, #16
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e01b      	b.n	80057f4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4618      	mov	r0, r3
 80057c2:	f7ff ff93 	bl	80056ec <LL_ADC_IsCalibrationOnGoing>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1e2      	bne.n	8005792 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d0:	f023 0303 	bic.w	r3, r3, #3
 80057d4:	f043 0201 	orr.w	r2, r3, #1
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	655a      	str	r2, [r3, #84]	; 0x54
 80057dc:	e005      	b.n	80057ea <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e2:	f043 0210 	orr.w	r2, r3, #16
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80057f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3718      	adds	r7, #24
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	ffffeefd 	.word	0xffffeefd
 8005800:	25c3f800 	.word	0x25c3f800

08005804 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005804:	b590      	push	{r4, r7, lr}
 8005806:	b09f      	sub	sp, #124	; 0x7c
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800580e:	2300      	movs	r3, #0
 8005810:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800581a:	2b01      	cmp	r3, #1
 800581c:	d101      	bne.n	8005822 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800581e:	2302      	movs	r3, #2
 8005820:	e0be      	b.n	80059a0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800582a:	2300      	movs	r3, #0
 800582c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800582e:	2300      	movs	r3, #0
 8005830:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a5c      	ldr	r2, [pc, #368]	; (80059a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d102      	bne.n	8005842 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800583c:	4b5b      	ldr	r3, [pc, #364]	; (80059ac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800583e:	60bb      	str	r3, [r7, #8]
 8005840:	e001      	b.n	8005846 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005842:	2300      	movs	r3, #0
 8005844:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d10b      	bne.n	8005864 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005850:	f043 0220 	orr.w	r2, r3, #32
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e09d      	b.n	80059a0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	4618      	mov	r0, r3
 8005868:	f7ff ff54 	bl	8005714 <LL_ADC_REG_IsConversionOngoing>
 800586c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4618      	mov	r0, r3
 8005874:	f7ff ff4e 	bl	8005714 <LL_ADC_REG_IsConversionOngoing>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d17f      	bne.n	800597e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800587e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005880:	2b00      	cmp	r3, #0
 8005882:	d17c      	bne.n	800597e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a47      	ldr	r2, [pc, #284]	; (80059a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d004      	beq.n	8005898 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a46      	ldr	r2, [pc, #280]	; (80059ac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d101      	bne.n	800589c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005898:	4b45      	ldr	r3, [pc, #276]	; (80059b0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800589a:	e000      	b.n	800589e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800589c:	4b45      	ldr	r3, [pc, #276]	; (80059b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800589e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d039      	beq.n	800591c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80058a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	431a      	orrs	r2, r3
 80058b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058b8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a3a      	ldr	r2, [pc, #232]	; (80059a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d004      	beq.n	80058ce <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a38      	ldr	r2, [pc, #224]	; (80059ac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d10e      	bne.n	80058ec <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80058ce:	4836      	ldr	r0, [pc, #216]	; (80059a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80058d0:	f7ff feda 	bl	8005688 <LL_ADC_IsEnabled>
 80058d4:	4604      	mov	r4, r0
 80058d6:	4835      	ldr	r0, [pc, #212]	; (80059ac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80058d8:	f7ff fed6 	bl	8005688 <LL_ADC_IsEnabled>
 80058dc:	4603      	mov	r3, r0
 80058de:	4323      	orrs	r3, r4
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	bf0c      	ite	eq
 80058e4:	2301      	moveq	r3, #1
 80058e6:	2300      	movne	r3, #0
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	e008      	b.n	80058fe <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80058ec:	4832      	ldr	r0, [pc, #200]	; (80059b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80058ee:	f7ff fecb 	bl	8005688 <LL_ADC_IsEnabled>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	bf0c      	ite	eq
 80058f8:	2301      	moveq	r3, #1
 80058fa:	2300      	movne	r3, #0
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d047      	beq.n	8005992 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005904:	689a      	ldr	r2, [r3, #8]
 8005906:	4b2d      	ldr	r3, [pc, #180]	; (80059bc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005908:	4013      	ands	r3, r2
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	6811      	ldr	r1, [r2, #0]
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	6892      	ldr	r2, [r2, #8]
 8005912:	430a      	orrs	r2, r1
 8005914:	431a      	orrs	r2, r3
 8005916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005918:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800591a:	e03a      	b.n	8005992 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800591c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005926:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a1e      	ldr	r2, [pc, #120]	; (80059a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d004      	beq.n	800593c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a1d      	ldr	r2, [pc, #116]	; (80059ac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d10e      	bne.n	800595a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800593c:	481a      	ldr	r0, [pc, #104]	; (80059a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800593e:	f7ff fea3 	bl	8005688 <LL_ADC_IsEnabled>
 8005942:	4604      	mov	r4, r0
 8005944:	4819      	ldr	r0, [pc, #100]	; (80059ac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005946:	f7ff fe9f 	bl	8005688 <LL_ADC_IsEnabled>
 800594a:	4603      	mov	r3, r0
 800594c:	4323      	orrs	r3, r4
 800594e:	2b00      	cmp	r3, #0
 8005950:	bf0c      	ite	eq
 8005952:	2301      	moveq	r3, #1
 8005954:	2300      	movne	r3, #0
 8005956:	b2db      	uxtb	r3, r3
 8005958:	e008      	b.n	800596c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800595a:	4817      	ldr	r0, [pc, #92]	; (80059b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800595c:	f7ff fe94 	bl	8005688 <LL_ADC_IsEnabled>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	bf0c      	ite	eq
 8005966:	2301      	moveq	r3, #1
 8005968:	2300      	movne	r3, #0
 800596a:	b2db      	uxtb	r3, r3
 800596c:	2b00      	cmp	r3, #0
 800596e:	d010      	beq.n	8005992 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005972:	689a      	ldr	r2, [r3, #8]
 8005974:	4b11      	ldr	r3, [pc, #68]	; (80059bc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005976:	4013      	ands	r3, r2
 8005978:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800597a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800597c:	e009      	b.n	8005992 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005982:	f043 0220 	orr.w	r2, r3, #32
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005990:	e000      	b.n	8005994 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005992:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800599c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	377c      	adds	r7, #124	; 0x7c
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd90      	pop	{r4, r7, pc}
 80059a8:	40022000 	.word	0x40022000
 80059ac:	40022100 	.word	0x40022100
 80059b0:	40022300 	.word	0x40022300
 80059b4:	58026300 	.word	0x58026300
 80059b8:	58026000 	.word	0x58026000
 80059bc:	fffff0e0 	.word	0xfffff0e0

080059c0 <__NVIC_SetPriorityGrouping>:
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f003 0307 	and.w	r3, r3, #7
 80059ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80059d0:	4b0b      	ldr	r3, [pc, #44]	; (8005a00 <__NVIC_SetPriorityGrouping+0x40>)
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80059dc:	4013      	ands	r3, r2
 80059de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80059e8:	4b06      	ldr	r3, [pc, #24]	; (8005a04 <__NVIC_SetPriorityGrouping+0x44>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80059ee:	4a04      	ldr	r2, [pc, #16]	; (8005a00 <__NVIC_SetPriorityGrouping+0x40>)
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	60d3      	str	r3, [r2, #12]
}
 80059f4:	bf00      	nop
 80059f6:	3714      	adds	r7, #20
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	e000ed00 	.word	0xe000ed00
 8005a04:	05fa0000 	.word	0x05fa0000

08005a08 <__NVIC_GetPriorityGrouping>:
{
 8005a08:	b480      	push	{r7}
 8005a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a0c:	4b04      	ldr	r3, [pc, #16]	; (8005a20 <__NVIC_GetPriorityGrouping+0x18>)
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	0a1b      	lsrs	r3, r3, #8
 8005a12:	f003 0307 	and.w	r3, r3, #7
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	e000ed00 	.word	0xe000ed00

08005a24 <__NVIC_EnableIRQ>:
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005a2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	db0b      	blt.n	8005a4e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a36:	88fb      	ldrh	r3, [r7, #6]
 8005a38:	f003 021f 	and.w	r2, r3, #31
 8005a3c:	4907      	ldr	r1, [pc, #28]	; (8005a5c <__NVIC_EnableIRQ+0x38>)
 8005a3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a42:	095b      	lsrs	r3, r3, #5
 8005a44:	2001      	movs	r0, #1
 8005a46:	fa00 f202 	lsl.w	r2, r0, r2
 8005a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005a4e:	bf00      	nop
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	e000e100 	.word	0xe000e100

08005a60 <__NVIC_SetPriority>:
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	4603      	mov	r3, r0
 8005a68:	6039      	str	r1, [r7, #0]
 8005a6a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005a6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	db0a      	blt.n	8005a8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	b2da      	uxtb	r2, r3
 8005a78:	490c      	ldr	r1, [pc, #48]	; (8005aac <__NVIC_SetPriority+0x4c>)
 8005a7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a7e:	0112      	lsls	r2, r2, #4
 8005a80:	b2d2      	uxtb	r2, r2
 8005a82:	440b      	add	r3, r1
 8005a84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005a88:	e00a      	b.n	8005aa0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	b2da      	uxtb	r2, r3
 8005a8e:	4908      	ldr	r1, [pc, #32]	; (8005ab0 <__NVIC_SetPriority+0x50>)
 8005a90:	88fb      	ldrh	r3, [r7, #6]
 8005a92:	f003 030f 	and.w	r3, r3, #15
 8005a96:	3b04      	subs	r3, #4
 8005a98:	0112      	lsls	r2, r2, #4
 8005a9a:	b2d2      	uxtb	r2, r2
 8005a9c:	440b      	add	r3, r1
 8005a9e:	761a      	strb	r2, [r3, #24]
}
 8005aa0:	bf00      	nop
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr
 8005aac:	e000e100 	.word	0xe000e100
 8005ab0:	e000ed00 	.word	0xe000ed00

08005ab4 <NVIC_EncodePriority>:
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b089      	sub	sp, #36	; 0x24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f003 0307 	and.w	r3, r3, #7
 8005ac6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	f1c3 0307 	rsb	r3, r3, #7
 8005ace:	2b04      	cmp	r3, #4
 8005ad0:	bf28      	it	cs
 8005ad2:	2304      	movcs	r3, #4
 8005ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	3304      	adds	r3, #4
 8005ada:	2b06      	cmp	r3, #6
 8005adc:	d902      	bls.n	8005ae4 <NVIC_EncodePriority+0x30>
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	3b03      	subs	r3, #3
 8005ae2:	e000      	b.n	8005ae6 <NVIC_EncodePriority+0x32>
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ae8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	fa02 f303 	lsl.w	r3, r2, r3
 8005af2:	43da      	mvns	r2, r3
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	401a      	ands	r2, r3
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005afc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	fa01 f303 	lsl.w	r3, r1, r3
 8005b06:	43d9      	mvns	r1, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b0c:	4313      	orrs	r3, r2
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3724      	adds	r7, #36	; 0x24
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
	...

08005b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	3b01      	subs	r3, #1
 8005b28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b2c:	d301      	bcc.n	8005b32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e00f      	b.n	8005b52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b32:	4a0a      	ldr	r2, [pc, #40]	; (8005b5c <SysTick_Config+0x40>)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	3b01      	subs	r3, #1
 8005b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b3a:	210f      	movs	r1, #15
 8005b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b40:	f7ff ff8e 	bl	8005a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b44:	4b05      	ldr	r3, [pc, #20]	; (8005b5c <SysTick_Config+0x40>)
 8005b46:	2200      	movs	r2, #0
 8005b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b4a:	4b04      	ldr	r3, [pc, #16]	; (8005b5c <SysTick_Config+0x40>)
 8005b4c:	2207      	movs	r2, #7
 8005b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3708      	adds	r7, #8
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	e000e010 	.word	0xe000e010

08005b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f7ff ff29 	bl	80059c0 <__NVIC_SetPriorityGrouping>
}
 8005b6e:	bf00      	nop
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b086      	sub	sp, #24
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	60b9      	str	r1, [r7, #8]
 8005b80:	607a      	str	r2, [r7, #4]
 8005b82:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005b84:	f7ff ff40 	bl	8005a08 <__NVIC_GetPriorityGrouping>
 8005b88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	68b9      	ldr	r1, [r7, #8]
 8005b8e:	6978      	ldr	r0, [r7, #20]
 8005b90:	f7ff ff90 	bl	8005ab4 <NVIC_EncodePriority>
 8005b94:	4602      	mov	r2, r0
 8005b96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005b9a:	4611      	mov	r1, r2
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7ff ff5f 	bl	8005a60 <__NVIC_SetPriority>
}
 8005ba2:	bf00      	nop
 8005ba4:	3718      	adds	r7, #24
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b082      	sub	sp, #8
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005bb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7ff ff33 	bl	8005a24 <__NVIC_EnableIRQ>
}
 8005bbe:	bf00      	nop
 8005bc0:	3708      	adds	r7, #8
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b082      	sub	sp, #8
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f7ff ffa4 	bl	8005b1c <SysTick_Config>
 8005bd4:	4603      	mov	r3, r0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3708      	adds	r7, #8
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
	...

08005be0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005be0:	b480      	push	{r7}
 8005be2:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8005be4:	f3bf 8f5f 	dmb	sy
}
 8005be8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005bea:	4b07      	ldr	r3, [pc, #28]	; (8005c08 <HAL_MPU_Disable+0x28>)
 8005bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bee:	4a06      	ldr	r2, [pc, #24]	; (8005c08 <HAL_MPU_Disable+0x28>)
 8005bf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bf4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8005bf6:	4b05      	ldr	r3, [pc, #20]	; (8005c0c <HAL_MPU_Disable+0x2c>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	605a      	str	r2, [r3, #4]
}
 8005bfc:	bf00      	nop
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	e000ed00 	.word	0xe000ed00
 8005c0c:	e000ed90 	.word	0xe000ed90

08005c10 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005c18:	4a0b      	ldr	r2, [pc, #44]	; (8005c48 <HAL_MPU_Enable+0x38>)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f043 0301 	orr.w	r3, r3, #1
 8005c20:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005c22:	4b0a      	ldr	r3, [pc, #40]	; (8005c4c <HAL_MPU_Enable+0x3c>)
 8005c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c26:	4a09      	ldr	r2, [pc, #36]	; (8005c4c <HAL_MPU_Enable+0x3c>)
 8005c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c2c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8005c2e:	f3bf 8f4f 	dsb	sy
}
 8005c32:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005c34:	f3bf 8f6f 	isb	sy
}
 8005c38:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8005c3a:	bf00      	nop
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	e000ed90 	.word	0xe000ed90
 8005c4c:	e000ed00 	.word	0xe000ed00

08005c50 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	785a      	ldrb	r2, [r3, #1]
 8005c5c:	4b1d      	ldr	r3, [pc, #116]	; (8005cd4 <HAL_MPU_ConfigRegion+0x84>)
 8005c5e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d029      	beq.n	8005cbc <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8005c68:	4a1a      	ldr	r2, [pc, #104]	; (8005cd4 <HAL_MPU_ConfigRegion+0x84>)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	7b1b      	ldrb	r3, [r3, #12]
 8005c74:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	7adb      	ldrb	r3, [r3, #11]
 8005c7a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005c7c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	7a9b      	ldrb	r3, [r3, #10]
 8005c82:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005c84:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	7b5b      	ldrb	r3, [r3, #13]
 8005c8a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005c8c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	7b9b      	ldrb	r3, [r3, #14]
 8005c92:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005c94:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	7bdb      	ldrb	r3, [r3, #15]
 8005c9a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005c9c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	7a5b      	ldrb	r3, [r3, #9]
 8005ca2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005ca4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	7a1b      	ldrb	r3, [r3, #8]
 8005caa:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005cac:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	7812      	ldrb	r2, [r2, #0]
 8005cb2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005cb4:	4a07      	ldr	r2, [pc, #28]	; (8005cd4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005cb6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005cb8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8005cba:	e005      	b.n	8005cc8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8005cbc:	4b05      	ldr	r3, [pc, #20]	; (8005cd4 <HAL_MPU_ConfigRegion+0x84>)
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8005cc2:	4b04      	ldr	r3, [pc, #16]	; (8005cd4 <HAL_MPU_ConfigRegion+0x84>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	611a      	str	r2, [r3, #16]
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr
 8005cd4:	e000ed90 	.word	0xe000ed90

08005cd8 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8005cdc:	4b07      	ldr	r3, [pc, #28]	; (8005cfc <HAL_GetCurrentCPUID+0x24>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	091b      	lsrs	r3, r3, #4
 8005ce2:	f003 030f 	and.w	r3, r3, #15
 8005ce6:	2b07      	cmp	r3, #7
 8005ce8:	d101      	bne.n	8005cee <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e000      	b.n	8005cf0 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8005cee:	2301      	movs	r3, #1
  }
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	e000ed00 	.word	0xe000ed00

08005d00 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e054      	b.n	8005dbc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	7f5b      	ldrb	r3, [r3, #29]
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d105      	bne.n	8005d28 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f7fb fb62 	bl	80013ec <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	791b      	ldrb	r3, [r3, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10c      	bne.n	8005d50 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a22      	ldr	r2, [pc, #136]	; (8005dc4 <HAL_CRC_Init+0xc4>)
 8005d3c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689a      	ldr	r2, [r3, #8]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f022 0218 	bic.w	r2, r2, #24
 8005d4c:	609a      	str	r2, [r3, #8]
 8005d4e:	e00c      	b.n	8005d6a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6899      	ldr	r1, [r3, #8]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	461a      	mov	r2, r3
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f834 	bl	8005dc8 <HAL_CRCEx_Polynomial_Set>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d001      	beq.n	8005d6a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e028      	b.n	8005dbc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	795b      	ldrb	r3, [r3, #5]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d105      	bne.n	8005d7e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d7a:	611a      	str	r2, [r3, #16]
 8005d7c:	e004      	b.n	8005d88 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	6912      	ldr	r2, [r2, #16]
 8005d86:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	695a      	ldr	r2, [r3, #20]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	699a      	ldr	r2, [r3, #24]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	430a      	orrs	r2, r1
 8005db2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3708      	adds	r7, #8
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	04c11db7 	.word	0x04c11db7

08005dc8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b087      	sub	sp, #28
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005dd8:	231f      	movs	r3, #31
 8005dda:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005ddc:	bf00      	nop
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	1e5a      	subs	r2, r3, #1
 8005de2:	613a      	str	r2, [r7, #16]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d009      	beq.n	8005dfc <HAL_CRCEx_Polynomial_Set+0x34>
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	f003 031f 	and.w	r3, r3, #31
 8005dee:	68ba      	ldr	r2, [r7, #8]
 8005df0:	fa22 f303 	lsr.w	r3, r2, r3
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d0f0      	beq.n	8005dde <HAL_CRCEx_Polynomial_Set+0x16>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b18      	cmp	r3, #24
 8005e00:	d846      	bhi.n	8005e90 <HAL_CRCEx_Polynomial_Set+0xc8>
 8005e02:	a201      	add	r2, pc, #4	; (adr r2, 8005e08 <HAL_CRCEx_Polynomial_Set+0x40>)
 8005e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e08:	08005e97 	.word	0x08005e97
 8005e0c:	08005e91 	.word	0x08005e91
 8005e10:	08005e91 	.word	0x08005e91
 8005e14:	08005e91 	.word	0x08005e91
 8005e18:	08005e91 	.word	0x08005e91
 8005e1c:	08005e91 	.word	0x08005e91
 8005e20:	08005e91 	.word	0x08005e91
 8005e24:	08005e91 	.word	0x08005e91
 8005e28:	08005e85 	.word	0x08005e85
 8005e2c:	08005e91 	.word	0x08005e91
 8005e30:	08005e91 	.word	0x08005e91
 8005e34:	08005e91 	.word	0x08005e91
 8005e38:	08005e91 	.word	0x08005e91
 8005e3c:	08005e91 	.word	0x08005e91
 8005e40:	08005e91 	.word	0x08005e91
 8005e44:	08005e91 	.word	0x08005e91
 8005e48:	08005e79 	.word	0x08005e79
 8005e4c:	08005e91 	.word	0x08005e91
 8005e50:	08005e91 	.word	0x08005e91
 8005e54:	08005e91 	.word	0x08005e91
 8005e58:	08005e91 	.word	0x08005e91
 8005e5c:	08005e91 	.word	0x08005e91
 8005e60:	08005e91 	.word	0x08005e91
 8005e64:	08005e91 	.word	0x08005e91
 8005e68:	08005e6d 	.word	0x08005e6d
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	2b06      	cmp	r3, #6
 8005e70:	d913      	bls.n	8005e9a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005e76:	e010      	b.n	8005e9a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	2b07      	cmp	r3, #7
 8005e7c:	d90f      	bls.n	8005e9e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005e82:	e00c      	b.n	8005e9e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	2b0f      	cmp	r3, #15
 8005e88:	d90b      	bls.n	8005ea2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005e8e:	e008      	b.n	8005ea2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	75fb      	strb	r3, [r7, #23]
      break;
 8005e94:	e006      	b.n	8005ea4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005e96:	bf00      	nop
 8005e98:	e004      	b.n	8005ea4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005e9a:	bf00      	nop
 8005e9c:	e002      	b.n	8005ea4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005e9e:	bf00      	nop
 8005ea0:	e000      	b.n	8005ea4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005ea2:	bf00      	nop
  }
  if (status == HAL_OK)
 8005ea4:	7dfb      	ldrb	r3, [r7, #23]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d10d      	bne.n	8005ec6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f023 0118 	bic.w	r1, r3, #24
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	371c      	adds	r7, #28
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b086      	sub	sp, #24
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005edc:	f7fe f906 	bl	80040ec <HAL_GetTick>
 8005ee0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d101      	bne.n	8005eec <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e316      	b.n	800651a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a66      	ldr	r2, [pc, #408]	; (800608c <HAL_DMA_Init+0x1b8>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d04a      	beq.n	8005f8c <HAL_DMA_Init+0xb8>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a65      	ldr	r2, [pc, #404]	; (8006090 <HAL_DMA_Init+0x1bc>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d045      	beq.n	8005f8c <HAL_DMA_Init+0xb8>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a63      	ldr	r2, [pc, #396]	; (8006094 <HAL_DMA_Init+0x1c0>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d040      	beq.n	8005f8c <HAL_DMA_Init+0xb8>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a62      	ldr	r2, [pc, #392]	; (8006098 <HAL_DMA_Init+0x1c4>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d03b      	beq.n	8005f8c <HAL_DMA_Init+0xb8>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a60      	ldr	r2, [pc, #384]	; (800609c <HAL_DMA_Init+0x1c8>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d036      	beq.n	8005f8c <HAL_DMA_Init+0xb8>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a5f      	ldr	r2, [pc, #380]	; (80060a0 <HAL_DMA_Init+0x1cc>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d031      	beq.n	8005f8c <HAL_DMA_Init+0xb8>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a5d      	ldr	r2, [pc, #372]	; (80060a4 <HAL_DMA_Init+0x1d0>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d02c      	beq.n	8005f8c <HAL_DMA_Init+0xb8>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a5c      	ldr	r2, [pc, #368]	; (80060a8 <HAL_DMA_Init+0x1d4>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d027      	beq.n	8005f8c <HAL_DMA_Init+0xb8>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a5a      	ldr	r2, [pc, #360]	; (80060ac <HAL_DMA_Init+0x1d8>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d022      	beq.n	8005f8c <HAL_DMA_Init+0xb8>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a59      	ldr	r2, [pc, #356]	; (80060b0 <HAL_DMA_Init+0x1dc>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d01d      	beq.n	8005f8c <HAL_DMA_Init+0xb8>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a57      	ldr	r2, [pc, #348]	; (80060b4 <HAL_DMA_Init+0x1e0>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d018      	beq.n	8005f8c <HAL_DMA_Init+0xb8>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a56      	ldr	r2, [pc, #344]	; (80060b8 <HAL_DMA_Init+0x1e4>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d013      	beq.n	8005f8c <HAL_DMA_Init+0xb8>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a54      	ldr	r2, [pc, #336]	; (80060bc <HAL_DMA_Init+0x1e8>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d00e      	beq.n	8005f8c <HAL_DMA_Init+0xb8>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a53      	ldr	r2, [pc, #332]	; (80060c0 <HAL_DMA_Init+0x1ec>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d009      	beq.n	8005f8c <HAL_DMA_Init+0xb8>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a51      	ldr	r2, [pc, #324]	; (80060c4 <HAL_DMA_Init+0x1f0>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d004      	beq.n	8005f8c <HAL_DMA_Init+0xb8>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a50      	ldr	r2, [pc, #320]	; (80060c8 <HAL_DMA_Init+0x1f4>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d101      	bne.n	8005f90 <HAL_DMA_Init+0xbc>
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e000      	b.n	8005f92 <HAL_DMA_Init+0xbe>
 8005f90:	2300      	movs	r3, #0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f000 813b 	beq.w	800620e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2202      	movs	r2, #2
 8005fa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a37      	ldr	r2, [pc, #220]	; (800608c <HAL_DMA_Init+0x1b8>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d04a      	beq.n	8006048 <HAL_DMA_Init+0x174>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a36      	ldr	r2, [pc, #216]	; (8006090 <HAL_DMA_Init+0x1bc>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d045      	beq.n	8006048 <HAL_DMA_Init+0x174>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a34      	ldr	r2, [pc, #208]	; (8006094 <HAL_DMA_Init+0x1c0>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d040      	beq.n	8006048 <HAL_DMA_Init+0x174>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a33      	ldr	r2, [pc, #204]	; (8006098 <HAL_DMA_Init+0x1c4>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d03b      	beq.n	8006048 <HAL_DMA_Init+0x174>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a31      	ldr	r2, [pc, #196]	; (800609c <HAL_DMA_Init+0x1c8>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d036      	beq.n	8006048 <HAL_DMA_Init+0x174>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a30      	ldr	r2, [pc, #192]	; (80060a0 <HAL_DMA_Init+0x1cc>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d031      	beq.n	8006048 <HAL_DMA_Init+0x174>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a2e      	ldr	r2, [pc, #184]	; (80060a4 <HAL_DMA_Init+0x1d0>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d02c      	beq.n	8006048 <HAL_DMA_Init+0x174>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a2d      	ldr	r2, [pc, #180]	; (80060a8 <HAL_DMA_Init+0x1d4>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d027      	beq.n	8006048 <HAL_DMA_Init+0x174>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a2b      	ldr	r2, [pc, #172]	; (80060ac <HAL_DMA_Init+0x1d8>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d022      	beq.n	8006048 <HAL_DMA_Init+0x174>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a2a      	ldr	r2, [pc, #168]	; (80060b0 <HAL_DMA_Init+0x1dc>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d01d      	beq.n	8006048 <HAL_DMA_Init+0x174>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a28      	ldr	r2, [pc, #160]	; (80060b4 <HAL_DMA_Init+0x1e0>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d018      	beq.n	8006048 <HAL_DMA_Init+0x174>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a27      	ldr	r2, [pc, #156]	; (80060b8 <HAL_DMA_Init+0x1e4>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d013      	beq.n	8006048 <HAL_DMA_Init+0x174>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a25      	ldr	r2, [pc, #148]	; (80060bc <HAL_DMA_Init+0x1e8>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d00e      	beq.n	8006048 <HAL_DMA_Init+0x174>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a24      	ldr	r2, [pc, #144]	; (80060c0 <HAL_DMA_Init+0x1ec>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d009      	beq.n	8006048 <HAL_DMA_Init+0x174>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a22      	ldr	r2, [pc, #136]	; (80060c4 <HAL_DMA_Init+0x1f0>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d004      	beq.n	8006048 <HAL_DMA_Init+0x174>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a21      	ldr	r2, [pc, #132]	; (80060c8 <HAL_DMA_Init+0x1f4>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d108      	bne.n	800605a <HAL_DMA_Init+0x186>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f022 0201 	bic.w	r2, r2, #1
 8006056:	601a      	str	r2, [r3, #0]
 8006058:	e007      	b.n	800606a <HAL_DMA_Init+0x196>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f022 0201 	bic.w	r2, r2, #1
 8006068:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800606a:	e02f      	b.n	80060cc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800606c:	f7fe f83e 	bl	80040ec <HAL_GetTick>
 8006070:	4602      	mov	r2, r0
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	2b05      	cmp	r3, #5
 8006078:	d928      	bls.n	80060cc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2220      	movs	r2, #32
 800607e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2203      	movs	r2, #3
 8006084:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e246      	b.n	800651a <HAL_DMA_Init+0x646>
 800608c:	40020010 	.word	0x40020010
 8006090:	40020028 	.word	0x40020028
 8006094:	40020040 	.word	0x40020040
 8006098:	40020058 	.word	0x40020058
 800609c:	40020070 	.word	0x40020070
 80060a0:	40020088 	.word	0x40020088
 80060a4:	400200a0 	.word	0x400200a0
 80060a8:	400200b8 	.word	0x400200b8
 80060ac:	40020410 	.word	0x40020410
 80060b0:	40020428 	.word	0x40020428
 80060b4:	40020440 	.word	0x40020440
 80060b8:	40020458 	.word	0x40020458
 80060bc:	40020470 	.word	0x40020470
 80060c0:	40020488 	.word	0x40020488
 80060c4:	400204a0 	.word	0x400204a0
 80060c8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1c8      	bne.n	800606c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	4b83      	ldr	r3, [pc, #524]	; (80062f4 <HAL_DMA_Init+0x420>)
 80060e6:	4013      	ands	r3, r2
 80060e8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80060f2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80060fe:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800610a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	4313      	orrs	r3, r2
 8006116:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611c:	2b04      	cmp	r3, #4
 800611e:	d107      	bne.n	8006130 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006128:	4313      	orrs	r3, r2
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	4313      	orrs	r3, r2
 800612e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006130:	4b71      	ldr	r3, [pc, #452]	; (80062f8 <HAL_DMA_Init+0x424>)
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	4b71      	ldr	r3, [pc, #452]	; (80062fc <HAL_DMA_Init+0x428>)
 8006136:	4013      	ands	r3, r2
 8006138:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800613c:	d328      	bcc.n	8006190 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	2b28      	cmp	r3, #40	; 0x28
 8006144:	d903      	bls.n	800614e <HAL_DMA_Init+0x27a>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	2b2e      	cmp	r3, #46	; 0x2e
 800614c:	d917      	bls.n	800617e <HAL_DMA_Init+0x2aa>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	2b3e      	cmp	r3, #62	; 0x3e
 8006154:	d903      	bls.n	800615e <HAL_DMA_Init+0x28a>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	2b42      	cmp	r3, #66	; 0x42
 800615c:	d90f      	bls.n	800617e <HAL_DMA_Init+0x2aa>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	2b46      	cmp	r3, #70	; 0x46
 8006164:	d903      	bls.n	800616e <HAL_DMA_Init+0x29a>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	2b48      	cmp	r3, #72	; 0x48
 800616c:	d907      	bls.n	800617e <HAL_DMA_Init+0x2aa>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	2b4e      	cmp	r3, #78	; 0x4e
 8006174:	d905      	bls.n	8006182 <HAL_DMA_Init+0x2ae>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	2b52      	cmp	r3, #82	; 0x52
 800617c:	d801      	bhi.n	8006182 <HAL_DMA_Init+0x2ae>
 800617e:	2301      	movs	r3, #1
 8006180:	e000      	b.n	8006184 <HAL_DMA_Init+0x2b0>
 8006182:	2300      	movs	r3, #0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d003      	beq.n	8006190 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800618e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	f023 0307 	bic.w	r3, r3, #7
 80061a6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ac:	697a      	ldr	r2, [r7, #20]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b6:	2b04      	cmp	r3, #4
 80061b8:	d117      	bne.n	80061ea <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00e      	beq.n	80061ea <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f001 fddb 	bl	8007d88 <DMA_CheckFifoParam>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d008      	beq.n	80061ea <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2240      	movs	r2, #64	; 0x40
 80061dc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e197      	b.n	800651a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f001 fd16 	bl	8007c24 <DMA_CalcBaseAndBitshift>
 80061f8:	4603      	mov	r3, r0
 80061fa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006200:	f003 031f 	and.w	r3, r3, #31
 8006204:	223f      	movs	r2, #63	; 0x3f
 8006206:	409a      	lsls	r2, r3
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	609a      	str	r2, [r3, #8]
 800620c:	e0cd      	b.n	80063aa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a3b      	ldr	r2, [pc, #236]	; (8006300 <HAL_DMA_Init+0x42c>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d022      	beq.n	800625e <HAL_DMA_Init+0x38a>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a39      	ldr	r2, [pc, #228]	; (8006304 <HAL_DMA_Init+0x430>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d01d      	beq.n	800625e <HAL_DMA_Init+0x38a>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a38      	ldr	r2, [pc, #224]	; (8006308 <HAL_DMA_Init+0x434>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d018      	beq.n	800625e <HAL_DMA_Init+0x38a>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a36      	ldr	r2, [pc, #216]	; (800630c <HAL_DMA_Init+0x438>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d013      	beq.n	800625e <HAL_DMA_Init+0x38a>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a35      	ldr	r2, [pc, #212]	; (8006310 <HAL_DMA_Init+0x43c>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d00e      	beq.n	800625e <HAL_DMA_Init+0x38a>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a33      	ldr	r2, [pc, #204]	; (8006314 <HAL_DMA_Init+0x440>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d009      	beq.n	800625e <HAL_DMA_Init+0x38a>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a32      	ldr	r2, [pc, #200]	; (8006318 <HAL_DMA_Init+0x444>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d004      	beq.n	800625e <HAL_DMA_Init+0x38a>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a30      	ldr	r2, [pc, #192]	; (800631c <HAL_DMA_Init+0x448>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d101      	bne.n	8006262 <HAL_DMA_Init+0x38e>
 800625e:	2301      	movs	r3, #1
 8006260:	e000      	b.n	8006264 <HAL_DMA_Init+0x390>
 8006262:	2300      	movs	r3, #0
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 8097 	beq.w	8006398 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a24      	ldr	r2, [pc, #144]	; (8006300 <HAL_DMA_Init+0x42c>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d021      	beq.n	80062b8 <HAL_DMA_Init+0x3e4>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a22      	ldr	r2, [pc, #136]	; (8006304 <HAL_DMA_Init+0x430>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d01c      	beq.n	80062b8 <HAL_DMA_Init+0x3e4>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a21      	ldr	r2, [pc, #132]	; (8006308 <HAL_DMA_Init+0x434>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d017      	beq.n	80062b8 <HAL_DMA_Init+0x3e4>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a1f      	ldr	r2, [pc, #124]	; (800630c <HAL_DMA_Init+0x438>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d012      	beq.n	80062b8 <HAL_DMA_Init+0x3e4>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a1e      	ldr	r2, [pc, #120]	; (8006310 <HAL_DMA_Init+0x43c>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d00d      	beq.n	80062b8 <HAL_DMA_Init+0x3e4>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a1c      	ldr	r2, [pc, #112]	; (8006314 <HAL_DMA_Init+0x440>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d008      	beq.n	80062b8 <HAL_DMA_Init+0x3e4>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a1b      	ldr	r2, [pc, #108]	; (8006318 <HAL_DMA_Init+0x444>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d003      	beq.n	80062b8 <HAL_DMA_Init+0x3e4>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a19      	ldr	r2, [pc, #100]	; (800631c <HAL_DMA_Init+0x448>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2202      	movs	r2, #2
 80062c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	4b12      	ldr	r3, [pc, #72]	; (8006320 <HAL_DMA_Init+0x44c>)
 80062d6:	4013      	ands	r3, r2
 80062d8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	2b40      	cmp	r3, #64	; 0x40
 80062e0:	d020      	beq.n	8006324 <HAL_DMA_Init+0x450>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	2b80      	cmp	r3, #128	; 0x80
 80062e8:	d102      	bne.n	80062f0 <HAL_DMA_Init+0x41c>
 80062ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80062ee:	e01a      	b.n	8006326 <HAL_DMA_Init+0x452>
 80062f0:	2300      	movs	r3, #0
 80062f2:	e018      	b.n	8006326 <HAL_DMA_Init+0x452>
 80062f4:	fe10803f 	.word	0xfe10803f
 80062f8:	5c001000 	.word	0x5c001000
 80062fc:	ffff0000 	.word	0xffff0000
 8006300:	58025408 	.word	0x58025408
 8006304:	5802541c 	.word	0x5802541c
 8006308:	58025430 	.word	0x58025430
 800630c:	58025444 	.word	0x58025444
 8006310:	58025458 	.word	0x58025458
 8006314:	5802546c 	.word	0x5802546c
 8006318:	58025480 	.word	0x58025480
 800631c:	58025494 	.word	0x58025494
 8006320:	fffe000f 	.word	0xfffe000f
 8006324:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	68d2      	ldr	r2, [r2, #12]
 800632a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800632c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006334:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800633c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006344:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	69db      	ldr	r3, [r3, #28]
 800634a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800634c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006354:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	4313      	orrs	r3, r2
 800635a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	697a      	ldr	r2, [r7, #20]
 8006362:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	461a      	mov	r2, r3
 800636a:	4b6e      	ldr	r3, [pc, #440]	; (8006524 <HAL_DMA_Init+0x650>)
 800636c:	4413      	add	r3, r2
 800636e:	4a6e      	ldr	r2, [pc, #440]	; (8006528 <HAL_DMA_Init+0x654>)
 8006370:	fba2 2303 	umull	r2, r3, r2, r3
 8006374:	091b      	lsrs	r3, r3, #4
 8006376:	009a      	lsls	r2, r3, #2
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f001 fc51 	bl	8007c24 <DMA_CalcBaseAndBitshift>
 8006382:	4603      	mov	r3, r0
 8006384:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800638a:	f003 031f 	and.w	r3, r3, #31
 800638e:	2201      	movs	r2, #1
 8006390:	409a      	lsls	r2, r3
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	605a      	str	r2, [r3, #4]
 8006396:	e008      	b.n	80063aa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2240      	movs	r2, #64	; 0x40
 800639c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2203      	movs	r2, #3
 80063a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e0b7      	b.n	800651a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a5f      	ldr	r2, [pc, #380]	; (800652c <HAL_DMA_Init+0x658>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d072      	beq.n	800649a <HAL_DMA_Init+0x5c6>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a5d      	ldr	r2, [pc, #372]	; (8006530 <HAL_DMA_Init+0x65c>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d06d      	beq.n	800649a <HAL_DMA_Init+0x5c6>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a5c      	ldr	r2, [pc, #368]	; (8006534 <HAL_DMA_Init+0x660>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d068      	beq.n	800649a <HAL_DMA_Init+0x5c6>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a5a      	ldr	r2, [pc, #360]	; (8006538 <HAL_DMA_Init+0x664>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d063      	beq.n	800649a <HAL_DMA_Init+0x5c6>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a59      	ldr	r2, [pc, #356]	; (800653c <HAL_DMA_Init+0x668>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d05e      	beq.n	800649a <HAL_DMA_Init+0x5c6>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a57      	ldr	r2, [pc, #348]	; (8006540 <HAL_DMA_Init+0x66c>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d059      	beq.n	800649a <HAL_DMA_Init+0x5c6>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a56      	ldr	r2, [pc, #344]	; (8006544 <HAL_DMA_Init+0x670>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d054      	beq.n	800649a <HAL_DMA_Init+0x5c6>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a54      	ldr	r2, [pc, #336]	; (8006548 <HAL_DMA_Init+0x674>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d04f      	beq.n	800649a <HAL_DMA_Init+0x5c6>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a53      	ldr	r2, [pc, #332]	; (800654c <HAL_DMA_Init+0x678>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d04a      	beq.n	800649a <HAL_DMA_Init+0x5c6>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a51      	ldr	r2, [pc, #324]	; (8006550 <HAL_DMA_Init+0x67c>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d045      	beq.n	800649a <HAL_DMA_Init+0x5c6>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a50      	ldr	r2, [pc, #320]	; (8006554 <HAL_DMA_Init+0x680>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d040      	beq.n	800649a <HAL_DMA_Init+0x5c6>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a4e      	ldr	r2, [pc, #312]	; (8006558 <HAL_DMA_Init+0x684>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d03b      	beq.n	800649a <HAL_DMA_Init+0x5c6>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a4d      	ldr	r2, [pc, #308]	; (800655c <HAL_DMA_Init+0x688>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d036      	beq.n	800649a <HAL_DMA_Init+0x5c6>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a4b      	ldr	r2, [pc, #300]	; (8006560 <HAL_DMA_Init+0x68c>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d031      	beq.n	800649a <HAL_DMA_Init+0x5c6>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a4a      	ldr	r2, [pc, #296]	; (8006564 <HAL_DMA_Init+0x690>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d02c      	beq.n	800649a <HAL_DMA_Init+0x5c6>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a48      	ldr	r2, [pc, #288]	; (8006568 <HAL_DMA_Init+0x694>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d027      	beq.n	800649a <HAL_DMA_Init+0x5c6>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a47      	ldr	r2, [pc, #284]	; (800656c <HAL_DMA_Init+0x698>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d022      	beq.n	800649a <HAL_DMA_Init+0x5c6>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a45      	ldr	r2, [pc, #276]	; (8006570 <HAL_DMA_Init+0x69c>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d01d      	beq.n	800649a <HAL_DMA_Init+0x5c6>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a44      	ldr	r2, [pc, #272]	; (8006574 <HAL_DMA_Init+0x6a0>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d018      	beq.n	800649a <HAL_DMA_Init+0x5c6>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a42      	ldr	r2, [pc, #264]	; (8006578 <HAL_DMA_Init+0x6a4>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d013      	beq.n	800649a <HAL_DMA_Init+0x5c6>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a41      	ldr	r2, [pc, #260]	; (800657c <HAL_DMA_Init+0x6a8>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d00e      	beq.n	800649a <HAL_DMA_Init+0x5c6>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a3f      	ldr	r2, [pc, #252]	; (8006580 <HAL_DMA_Init+0x6ac>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d009      	beq.n	800649a <HAL_DMA_Init+0x5c6>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a3e      	ldr	r2, [pc, #248]	; (8006584 <HAL_DMA_Init+0x6b0>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d004      	beq.n	800649a <HAL_DMA_Init+0x5c6>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a3c      	ldr	r2, [pc, #240]	; (8006588 <HAL_DMA_Init+0x6b4>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d101      	bne.n	800649e <HAL_DMA_Init+0x5ca>
 800649a:	2301      	movs	r3, #1
 800649c:	e000      	b.n	80064a0 <HAL_DMA_Init+0x5cc>
 800649e:	2300      	movs	r3, #0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d032      	beq.n	800650a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f001 fceb 	bl	8007e80 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	2b80      	cmp	r3, #128	; 0x80
 80064b0:	d102      	bne.n	80064b8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685a      	ldr	r2, [r3, #4]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064c0:	b2d2      	uxtb	r2, r2
 80064c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80064cc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d010      	beq.n	80064f8 <HAL_DMA_Init+0x624>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	2b08      	cmp	r3, #8
 80064dc:	d80c      	bhi.n	80064f8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f001 fd68 	bl	8007fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064e8:	2200      	movs	r2, #0
 80064ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80064f4:	605a      	str	r2, [r3, #4]
 80064f6:	e008      	b.n	800650a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3718      	adds	r7, #24
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	a7fdabf8 	.word	0xa7fdabf8
 8006528:	cccccccd 	.word	0xcccccccd
 800652c:	40020010 	.word	0x40020010
 8006530:	40020028 	.word	0x40020028
 8006534:	40020040 	.word	0x40020040
 8006538:	40020058 	.word	0x40020058
 800653c:	40020070 	.word	0x40020070
 8006540:	40020088 	.word	0x40020088
 8006544:	400200a0 	.word	0x400200a0
 8006548:	400200b8 	.word	0x400200b8
 800654c:	40020410 	.word	0x40020410
 8006550:	40020428 	.word	0x40020428
 8006554:	40020440 	.word	0x40020440
 8006558:	40020458 	.word	0x40020458
 800655c:	40020470 	.word	0x40020470
 8006560:	40020488 	.word	0x40020488
 8006564:	400204a0 	.word	0x400204a0
 8006568:	400204b8 	.word	0x400204b8
 800656c:	58025408 	.word	0x58025408
 8006570:	5802541c 	.word	0x5802541c
 8006574:	58025430 	.word	0x58025430
 8006578:	58025444 	.word	0x58025444
 800657c:	58025458 	.word	0x58025458
 8006580:	5802546c 	.word	0x5802546c
 8006584:	58025480 	.word	0x58025480
 8006588:	58025494 	.word	0x58025494

0800658c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b086      	sub	sp, #24
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	607a      	str	r2, [r7, #4]
 8006598:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800659a:	2300      	movs	r3, #0
 800659c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d101      	bne.n	80065a8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e226      	b.n	80069f6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d101      	bne.n	80065b6 <HAL_DMA_Start_IT+0x2a>
 80065b2:	2302      	movs	r3, #2
 80065b4:	e21f      	b.n	80069f6 <HAL_DMA_Start_IT+0x46a>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	f040 820a 	bne.w	80069e0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2202      	movs	r2, #2
 80065d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a68      	ldr	r2, [pc, #416]	; (8006780 <HAL_DMA_Start_IT+0x1f4>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d04a      	beq.n	800667a <HAL_DMA_Start_IT+0xee>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a66      	ldr	r2, [pc, #408]	; (8006784 <HAL_DMA_Start_IT+0x1f8>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d045      	beq.n	800667a <HAL_DMA_Start_IT+0xee>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a65      	ldr	r2, [pc, #404]	; (8006788 <HAL_DMA_Start_IT+0x1fc>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d040      	beq.n	800667a <HAL_DMA_Start_IT+0xee>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a63      	ldr	r2, [pc, #396]	; (800678c <HAL_DMA_Start_IT+0x200>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d03b      	beq.n	800667a <HAL_DMA_Start_IT+0xee>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a62      	ldr	r2, [pc, #392]	; (8006790 <HAL_DMA_Start_IT+0x204>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d036      	beq.n	800667a <HAL_DMA_Start_IT+0xee>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a60      	ldr	r2, [pc, #384]	; (8006794 <HAL_DMA_Start_IT+0x208>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d031      	beq.n	800667a <HAL_DMA_Start_IT+0xee>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a5f      	ldr	r2, [pc, #380]	; (8006798 <HAL_DMA_Start_IT+0x20c>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d02c      	beq.n	800667a <HAL_DMA_Start_IT+0xee>
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a5d      	ldr	r2, [pc, #372]	; (800679c <HAL_DMA_Start_IT+0x210>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d027      	beq.n	800667a <HAL_DMA_Start_IT+0xee>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a5c      	ldr	r2, [pc, #368]	; (80067a0 <HAL_DMA_Start_IT+0x214>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d022      	beq.n	800667a <HAL_DMA_Start_IT+0xee>
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a5a      	ldr	r2, [pc, #360]	; (80067a4 <HAL_DMA_Start_IT+0x218>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d01d      	beq.n	800667a <HAL_DMA_Start_IT+0xee>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a59      	ldr	r2, [pc, #356]	; (80067a8 <HAL_DMA_Start_IT+0x21c>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d018      	beq.n	800667a <HAL_DMA_Start_IT+0xee>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a57      	ldr	r2, [pc, #348]	; (80067ac <HAL_DMA_Start_IT+0x220>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d013      	beq.n	800667a <HAL_DMA_Start_IT+0xee>
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a56      	ldr	r2, [pc, #344]	; (80067b0 <HAL_DMA_Start_IT+0x224>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d00e      	beq.n	800667a <HAL_DMA_Start_IT+0xee>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a54      	ldr	r2, [pc, #336]	; (80067b4 <HAL_DMA_Start_IT+0x228>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d009      	beq.n	800667a <HAL_DMA_Start_IT+0xee>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a53      	ldr	r2, [pc, #332]	; (80067b8 <HAL_DMA_Start_IT+0x22c>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d004      	beq.n	800667a <HAL_DMA_Start_IT+0xee>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a51      	ldr	r2, [pc, #324]	; (80067bc <HAL_DMA_Start_IT+0x230>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d108      	bne.n	800668c <HAL_DMA_Start_IT+0x100>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f022 0201 	bic.w	r2, r2, #1
 8006688:	601a      	str	r2, [r3, #0]
 800668a:	e007      	b.n	800669c <HAL_DMA_Start_IT+0x110>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f022 0201 	bic.w	r2, r2, #1
 800669a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	68b9      	ldr	r1, [r7, #8]
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f001 f912 	bl	80078cc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a34      	ldr	r2, [pc, #208]	; (8006780 <HAL_DMA_Start_IT+0x1f4>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d04a      	beq.n	8006748 <HAL_DMA_Start_IT+0x1bc>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a33      	ldr	r2, [pc, #204]	; (8006784 <HAL_DMA_Start_IT+0x1f8>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d045      	beq.n	8006748 <HAL_DMA_Start_IT+0x1bc>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a31      	ldr	r2, [pc, #196]	; (8006788 <HAL_DMA_Start_IT+0x1fc>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d040      	beq.n	8006748 <HAL_DMA_Start_IT+0x1bc>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a30      	ldr	r2, [pc, #192]	; (800678c <HAL_DMA_Start_IT+0x200>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d03b      	beq.n	8006748 <HAL_DMA_Start_IT+0x1bc>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a2e      	ldr	r2, [pc, #184]	; (8006790 <HAL_DMA_Start_IT+0x204>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d036      	beq.n	8006748 <HAL_DMA_Start_IT+0x1bc>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a2d      	ldr	r2, [pc, #180]	; (8006794 <HAL_DMA_Start_IT+0x208>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d031      	beq.n	8006748 <HAL_DMA_Start_IT+0x1bc>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a2b      	ldr	r2, [pc, #172]	; (8006798 <HAL_DMA_Start_IT+0x20c>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d02c      	beq.n	8006748 <HAL_DMA_Start_IT+0x1bc>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a2a      	ldr	r2, [pc, #168]	; (800679c <HAL_DMA_Start_IT+0x210>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d027      	beq.n	8006748 <HAL_DMA_Start_IT+0x1bc>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a28      	ldr	r2, [pc, #160]	; (80067a0 <HAL_DMA_Start_IT+0x214>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d022      	beq.n	8006748 <HAL_DMA_Start_IT+0x1bc>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a27      	ldr	r2, [pc, #156]	; (80067a4 <HAL_DMA_Start_IT+0x218>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d01d      	beq.n	8006748 <HAL_DMA_Start_IT+0x1bc>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a25      	ldr	r2, [pc, #148]	; (80067a8 <HAL_DMA_Start_IT+0x21c>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d018      	beq.n	8006748 <HAL_DMA_Start_IT+0x1bc>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a24      	ldr	r2, [pc, #144]	; (80067ac <HAL_DMA_Start_IT+0x220>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d013      	beq.n	8006748 <HAL_DMA_Start_IT+0x1bc>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a22      	ldr	r2, [pc, #136]	; (80067b0 <HAL_DMA_Start_IT+0x224>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d00e      	beq.n	8006748 <HAL_DMA_Start_IT+0x1bc>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a21      	ldr	r2, [pc, #132]	; (80067b4 <HAL_DMA_Start_IT+0x228>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d009      	beq.n	8006748 <HAL_DMA_Start_IT+0x1bc>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a1f      	ldr	r2, [pc, #124]	; (80067b8 <HAL_DMA_Start_IT+0x22c>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d004      	beq.n	8006748 <HAL_DMA_Start_IT+0x1bc>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a1e      	ldr	r2, [pc, #120]	; (80067bc <HAL_DMA_Start_IT+0x230>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d101      	bne.n	800674c <HAL_DMA_Start_IT+0x1c0>
 8006748:	2301      	movs	r3, #1
 800674a:	e000      	b.n	800674e <HAL_DMA_Start_IT+0x1c2>
 800674c:	2300      	movs	r3, #0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d036      	beq.n	80067c0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f023 021e 	bic.w	r2, r3, #30
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f042 0216 	orr.w	r2, r2, #22
 8006764:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676a:	2b00      	cmp	r3, #0
 800676c:	d03e      	beq.n	80067ec <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f042 0208 	orr.w	r2, r2, #8
 800677c:	601a      	str	r2, [r3, #0]
 800677e:	e035      	b.n	80067ec <HAL_DMA_Start_IT+0x260>
 8006780:	40020010 	.word	0x40020010
 8006784:	40020028 	.word	0x40020028
 8006788:	40020040 	.word	0x40020040
 800678c:	40020058 	.word	0x40020058
 8006790:	40020070 	.word	0x40020070
 8006794:	40020088 	.word	0x40020088
 8006798:	400200a0 	.word	0x400200a0
 800679c:	400200b8 	.word	0x400200b8
 80067a0:	40020410 	.word	0x40020410
 80067a4:	40020428 	.word	0x40020428
 80067a8:	40020440 	.word	0x40020440
 80067ac:	40020458 	.word	0x40020458
 80067b0:	40020470 	.word	0x40020470
 80067b4:	40020488 	.word	0x40020488
 80067b8:	400204a0 	.word	0x400204a0
 80067bc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f023 020e 	bic.w	r2, r3, #14
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f042 020a 	orr.w	r2, r2, #10
 80067d2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d007      	beq.n	80067ec <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f042 0204 	orr.w	r2, r2, #4
 80067ea:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a83      	ldr	r2, [pc, #524]	; (8006a00 <HAL_DMA_Start_IT+0x474>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d072      	beq.n	80068dc <HAL_DMA_Start_IT+0x350>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a82      	ldr	r2, [pc, #520]	; (8006a04 <HAL_DMA_Start_IT+0x478>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d06d      	beq.n	80068dc <HAL_DMA_Start_IT+0x350>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a80      	ldr	r2, [pc, #512]	; (8006a08 <HAL_DMA_Start_IT+0x47c>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d068      	beq.n	80068dc <HAL_DMA_Start_IT+0x350>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a7f      	ldr	r2, [pc, #508]	; (8006a0c <HAL_DMA_Start_IT+0x480>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d063      	beq.n	80068dc <HAL_DMA_Start_IT+0x350>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a7d      	ldr	r2, [pc, #500]	; (8006a10 <HAL_DMA_Start_IT+0x484>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d05e      	beq.n	80068dc <HAL_DMA_Start_IT+0x350>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a7c      	ldr	r2, [pc, #496]	; (8006a14 <HAL_DMA_Start_IT+0x488>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d059      	beq.n	80068dc <HAL_DMA_Start_IT+0x350>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a7a      	ldr	r2, [pc, #488]	; (8006a18 <HAL_DMA_Start_IT+0x48c>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d054      	beq.n	80068dc <HAL_DMA_Start_IT+0x350>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a79      	ldr	r2, [pc, #484]	; (8006a1c <HAL_DMA_Start_IT+0x490>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d04f      	beq.n	80068dc <HAL_DMA_Start_IT+0x350>
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a77      	ldr	r2, [pc, #476]	; (8006a20 <HAL_DMA_Start_IT+0x494>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d04a      	beq.n	80068dc <HAL_DMA_Start_IT+0x350>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a76      	ldr	r2, [pc, #472]	; (8006a24 <HAL_DMA_Start_IT+0x498>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d045      	beq.n	80068dc <HAL_DMA_Start_IT+0x350>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a74      	ldr	r2, [pc, #464]	; (8006a28 <HAL_DMA_Start_IT+0x49c>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d040      	beq.n	80068dc <HAL_DMA_Start_IT+0x350>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a73      	ldr	r2, [pc, #460]	; (8006a2c <HAL_DMA_Start_IT+0x4a0>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d03b      	beq.n	80068dc <HAL_DMA_Start_IT+0x350>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a71      	ldr	r2, [pc, #452]	; (8006a30 <HAL_DMA_Start_IT+0x4a4>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d036      	beq.n	80068dc <HAL_DMA_Start_IT+0x350>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a70      	ldr	r2, [pc, #448]	; (8006a34 <HAL_DMA_Start_IT+0x4a8>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d031      	beq.n	80068dc <HAL_DMA_Start_IT+0x350>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a6e      	ldr	r2, [pc, #440]	; (8006a38 <HAL_DMA_Start_IT+0x4ac>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d02c      	beq.n	80068dc <HAL_DMA_Start_IT+0x350>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a6d      	ldr	r2, [pc, #436]	; (8006a3c <HAL_DMA_Start_IT+0x4b0>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d027      	beq.n	80068dc <HAL_DMA_Start_IT+0x350>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a6b      	ldr	r2, [pc, #428]	; (8006a40 <HAL_DMA_Start_IT+0x4b4>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d022      	beq.n	80068dc <HAL_DMA_Start_IT+0x350>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a6a      	ldr	r2, [pc, #424]	; (8006a44 <HAL_DMA_Start_IT+0x4b8>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d01d      	beq.n	80068dc <HAL_DMA_Start_IT+0x350>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a68      	ldr	r2, [pc, #416]	; (8006a48 <HAL_DMA_Start_IT+0x4bc>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d018      	beq.n	80068dc <HAL_DMA_Start_IT+0x350>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a67      	ldr	r2, [pc, #412]	; (8006a4c <HAL_DMA_Start_IT+0x4c0>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d013      	beq.n	80068dc <HAL_DMA_Start_IT+0x350>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a65      	ldr	r2, [pc, #404]	; (8006a50 <HAL_DMA_Start_IT+0x4c4>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d00e      	beq.n	80068dc <HAL_DMA_Start_IT+0x350>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a64      	ldr	r2, [pc, #400]	; (8006a54 <HAL_DMA_Start_IT+0x4c8>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d009      	beq.n	80068dc <HAL_DMA_Start_IT+0x350>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a62      	ldr	r2, [pc, #392]	; (8006a58 <HAL_DMA_Start_IT+0x4cc>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d004      	beq.n	80068dc <HAL_DMA_Start_IT+0x350>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a61      	ldr	r2, [pc, #388]	; (8006a5c <HAL_DMA_Start_IT+0x4d0>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d101      	bne.n	80068e0 <HAL_DMA_Start_IT+0x354>
 80068dc:	2301      	movs	r3, #1
 80068de:	e000      	b.n	80068e2 <HAL_DMA_Start_IT+0x356>
 80068e0:	2300      	movs	r3, #0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d01a      	beq.n	800691c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d007      	beq.n	8006904 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006902:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006908:	2b00      	cmp	r3, #0
 800690a:	d007      	beq.n	800691c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006916:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800691a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a37      	ldr	r2, [pc, #220]	; (8006a00 <HAL_DMA_Start_IT+0x474>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d04a      	beq.n	80069bc <HAL_DMA_Start_IT+0x430>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a36      	ldr	r2, [pc, #216]	; (8006a04 <HAL_DMA_Start_IT+0x478>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d045      	beq.n	80069bc <HAL_DMA_Start_IT+0x430>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a34      	ldr	r2, [pc, #208]	; (8006a08 <HAL_DMA_Start_IT+0x47c>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d040      	beq.n	80069bc <HAL_DMA_Start_IT+0x430>
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a33      	ldr	r2, [pc, #204]	; (8006a0c <HAL_DMA_Start_IT+0x480>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d03b      	beq.n	80069bc <HAL_DMA_Start_IT+0x430>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a31      	ldr	r2, [pc, #196]	; (8006a10 <HAL_DMA_Start_IT+0x484>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d036      	beq.n	80069bc <HAL_DMA_Start_IT+0x430>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a30      	ldr	r2, [pc, #192]	; (8006a14 <HAL_DMA_Start_IT+0x488>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d031      	beq.n	80069bc <HAL_DMA_Start_IT+0x430>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a2e      	ldr	r2, [pc, #184]	; (8006a18 <HAL_DMA_Start_IT+0x48c>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d02c      	beq.n	80069bc <HAL_DMA_Start_IT+0x430>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a2d      	ldr	r2, [pc, #180]	; (8006a1c <HAL_DMA_Start_IT+0x490>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d027      	beq.n	80069bc <HAL_DMA_Start_IT+0x430>
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a2b      	ldr	r2, [pc, #172]	; (8006a20 <HAL_DMA_Start_IT+0x494>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d022      	beq.n	80069bc <HAL_DMA_Start_IT+0x430>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a2a      	ldr	r2, [pc, #168]	; (8006a24 <HAL_DMA_Start_IT+0x498>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d01d      	beq.n	80069bc <HAL_DMA_Start_IT+0x430>
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a28      	ldr	r2, [pc, #160]	; (8006a28 <HAL_DMA_Start_IT+0x49c>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d018      	beq.n	80069bc <HAL_DMA_Start_IT+0x430>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a27      	ldr	r2, [pc, #156]	; (8006a2c <HAL_DMA_Start_IT+0x4a0>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d013      	beq.n	80069bc <HAL_DMA_Start_IT+0x430>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a25      	ldr	r2, [pc, #148]	; (8006a30 <HAL_DMA_Start_IT+0x4a4>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d00e      	beq.n	80069bc <HAL_DMA_Start_IT+0x430>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a24      	ldr	r2, [pc, #144]	; (8006a34 <HAL_DMA_Start_IT+0x4a8>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d009      	beq.n	80069bc <HAL_DMA_Start_IT+0x430>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a22      	ldr	r2, [pc, #136]	; (8006a38 <HAL_DMA_Start_IT+0x4ac>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d004      	beq.n	80069bc <HAL_DMA_Start_IT+0x430>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a21      	ldr	r2, [pc, #132]	; (8006a3c <HAL_DMA_Start_IT+0x4b0>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d108      	bne.n	80069ce <HAL_DMA_Start_IT+0x442>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f042 0201 	orr.w	r2, r2, #1
 80069ca:	601a      	str	r2, [r3, #0]
 80069cc:	e012      	b.n	80069f4 <HAL_DMA_Start_IT+0x468>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f042 0201 	orr.w	r2, r2, #1
 80069dc:	601a      	str	r2, [r3, #0]
 80069de:	e009      	b.n	80069f4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069ee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80069f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3718      	adds	r7, #24
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	40020010 	.word	0x40020010
 8006a04:	40020028 	.word	0x40020028
 8006a08:	40020040 	.word	0x40020040
 8006a0c:	40020058 	.word	0x40020058
 8006a10:	40020070 	.word	0x40020070
 8006a14:	40020088 	.word	0x40020088
 8006a18:	400200a0 	.word	0x400200a0
 8006a1c:	400200b8 	.word	0x400200b8
 8006a20:	40020410 	.word	0x40020410
 8006a24:	40020428 	.word	0x40020428
 8006a28:	40020440 	.word	0x40020440
 8006a2c:	40020458 	.word	0x40020458
 8006a30:	40020470 	.word	0x40020470
 8006a34:	40020488 	.word	0x40020488
 8006a38:	400204a0 	.word	0x400204a0
 8006a3c:	400204b8 	.word	0x400204b8
 8006a40:	58025408 	.word	0x58025408
 8006a44:	5802541c 	.word	0x5802541c
 8006a48:	58025430 	.word	0x58025430
 8006a4c:	58025444 	.word	0x58025444
 8006a50:	58025458 	.word	0x58025458
 8006a54:	5802546c 	.word	0x5802546c
 8006a58:	58025480 	.word	0x58025480
 8006a5c:	58025494 	.word	0x58025494

08006a60 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b08a      	sub	sp, #40	; 0x28
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006a6c:	4b67      	ldr	r3, [pc, #412]	; (8006c0c <HAL_DMA_IRQHandler+0x1ac>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a67      	ldr	r2, [pc, #412]	; (8006c10 <HAL_DMA_IRQHandler+0x1b0>)
 8006a72:	fba2 2303 	umull	r2, r3, r2, r3
 8006a76:	0a9b      	lsrs	r3, r3, #10
 8006a78:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a7e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a84:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006a86:	6a3b      	ldr	r3, [r7, #32]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a5f      	ldr	r2, [pc, #380]	; (8006c14 <HAL_DMA_IRQHandler+0x1b4>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d04a      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xd2>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a5d      	ldr	r2, [pc, #372]	; (8006c18 <HAL_DMA_IRQHandler+0x1b8>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d045      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xd2>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a5c      	ldr	r2, [pc, #368]	; (8006c1c <HAL_DMA_IRQHandler+0x1bc>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d040      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xd2>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a5a      	ldr	r2, [pc, #360]	; (8006c20 <HAL_DMA_IRQHandler+0x1c0>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d03b      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xd2>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a59      	ldr	r2, [pc, #356]	; (8006c24 <HAL_DMA_IRQHandler+0x1c4>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d036      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xd2>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a57      	ldr	r2, [pc, #348]	; (8006c28 <HAL_DMA_IRQHandler+0x1c8>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d031      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xd2>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a56      	ldr	r2, [pc, #344]	; (8006c2c <HAL_DMA_IRQHandler+0x1cc>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d02c      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xd2>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a54      	ldr	r2, [pc, #336]	; (8006c30 <HAL_DMA_IRQHandler+0x1d0>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d027      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xd2>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a53      	ldr	r2, [pc, #332]	; (8006c34 <HAL_DMA_IRQHandler+0x1d4>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d022      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xd2>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a51      	ldr	r2, [pc, #324]	; (8006c38 <HAL_DMA_IRQHandler+0x1d8>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d01d      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xd2>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a50      	ldr	r2, [pc, #320]	; (8006c3c <HAL_DMA_IRQHandler+0x1dc>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d018      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xd2>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a4e      	ldr	r2, [pc, #312]	; (8006c40 <HAL_DMA_IRQHandler+0x1e0>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d013      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xd2>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a4d      	ldr	r2, [pc, #308]	; (8006c44 <HAL_DMA_IRQHandler+0x1e4>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d00e      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xd2>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a4b      	ldr	r2, [pc, #300]	; (8006c48 <HAL_DMA_IRQHandler+0x1e8>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d009      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xd2>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a4a      	ldr	r2, [pc, #296]	; (8006c4c <HAL_DMA_IRQHandler+0x1ec>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d004      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xd2>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a48      	ldr	r2, [pc, #288]	; (8006c50 <HAL_DMA_IRQHandler+0x1f0>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d101      	bne.n	8006b36 <HAL_DMA_IRQHandler+0xd6>
 8006b32:	2301      	movs	r3, #1
 8006b34:	e000      	b.n	8006b38 <HAL_DMA_IRQHandler+0xd8>
 8006b36:	2300      	movs	r3, #0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f000 842b 	beq.w	8007394 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b42:	f003 031f 	and.w	r3, r3, #31
 8006b46:	2208      	movs	r2, #8
 8006b48:	409a      	lsls	r2, r3
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f000 80a2 	beq.w	8006c98 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a2e      	ldr	r2, [pc, #184]	; (8006c14 <HAL_DMA_IRQHandler+0x1b4>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d04a      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x194>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a2d      	ldr	r2, [pc, #180]	; (8006c18 <HAL_DMA_IRQHandler+0x1b8>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d045      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x194>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a2b      	ldr	r2, [pc, #172]	; (8006c1c <HAL_DMA_IRQHandler+0x1bc>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d040      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x194>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a2a      	ldr	r2, [pc, #168]	; (8006c20 <HAL_DMA_IRQHandler+0x1c0>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d03b      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x194>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a28      	ldr	r2, [pc, #160]	; (8006c24 <HAL_DMA_IRQHandler+0x1c4>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d036      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x194>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a27      	ldr	r2, [pc, #156]	; (8006c28 <HAL_DMA_IRQHandler+0x1c8>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d031      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x194>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a25      	ldr	r2, [pc, #148]	; (8006c2c <HAL_DMA_IRQHandler+0x1cc>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d02c      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x194>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a24      	ldr	r2, [pc, #144]	; (8006c30 <HAL_DMA_IRQHandler+0x1d0>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d027      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x194>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a22      	ldr	r2, [pc, #136]	; (8006c34 <HAL_DMA_IRQHandler+0x1d4>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d022      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x194>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a21      	ldr	r2, [pc, #132]	; (8006c38 <HAL_DMA_IRQHandler+0x1d8>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d01d      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x194>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a1f      	ldr	r2, [pc, #124]	; (8006c3c <HAL_DMA_IRQHandler+0x1dc>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d018      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x194>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a1e      	ldr	r2, [pc, #120]	; (8006c40 <HAL_DMA_IRQHandler+0x1e0>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d013      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x194>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a1c      	ldr	r2, [pc, #112]	; (8006c44 <HAL_DMA_IRQHandler+0x1e4>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d00e      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x194>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a1b      	ldr	r2, [pc, #108]	; (8006c48 <HAL_DMA_IRQHandler+0x1e8>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d009      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x194>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a19      	ldr	r2, [pc, #100]	; (8006c4c <HAL_DMA_IRQHandler+0x1ec>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d004      	beq.n	8006bf4 <HAL_DMA_IRQHandler+0x194>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a18      	ldr	r2, [pc, #96]	; (8006c50 <HAL_DMA_IRQHandler+0x1f0>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d12f      	bne.n	8006c54 <HAL_DMA_IRQHandler+0x1f4>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 0304 	and.w	r3, r3, #4
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	bf14      	ite	ne
 8006c02:	2301      	movne	r3, #1
 8006c04:	2300      	moveq	r3, #0
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	e02e      	b.n	8006c68 <HAL_DMA_IRQHandler+0x208>
 8006c0a:	bf00      	nop
 8006c0c:	24000000 	.word	0x24000000
 8006c10:	1b4e81b5 	.word	0x1b4e81b5
 8006c14:	40020010 	.word	0x40020010
 8006c18:	40020028 	.word	0x40020028
 8006c1c:	40020040 	.word	0x40020040
 8006c20:	40020058 	.word	0x40020058
 8006c24:	40020070 	.word	0x40020070
 8006c28:	40020088 	.word	0x40020088
 8006c2c:	400200a0 	.word	0x400200a0
 8006c30:	400200b8 	.word	0x400200b8
 8006c34:	40020410 	.word	0x40020410
 8006c38:	40020428 	.word	0x40020428
 8006c3c:	40020440 	.word	0x40020440
 8006c40:	40020458 	.word	0x40020458
 8006c44:	40020470 	.word	0x40020470
 8006c48:	40020488 	.word	0x40020488
 8006c4c:	400204a0 	.word	0x400204a0
 8006c50:	400204b8 	.word	0x400204b8
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0308 	and.w	r3, r3, #8
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	bf14      	ite	ne
 8006c62:	2301      	movne	r3, #1
 8006c64:	2300      	moveq	r3, #0
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d015      	beq.n	8006c98 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f022 0204 	bic.w	r2, r2, #4
 8006c7a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c80:	f003 031f 	and.w	r3, r3, #31
 8006c84:	2208      	movs	r2, #8
 8006c86:	409a      	lsls	r2, r3
 8006c88:	6a3b      	ldr	r3, [r7, #32]
 8006c8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c90:	f043 0201 	orr.w	r2, r3, #1
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c9c:	f003 031f 	and.w	r3, r3, #31
 8006ca0:	69ba      	ldr	r2, [r7, #24]
 8006ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ca6:	f003 0301 	and.w	r3, r3, #1
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d06e      	beq.n	8006d8c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a69      	ldr	r2, [pc, #420]	; (8006e58 <HAL_DMA_IRQHandler+0x3f8>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d04a      	beq.n	8006d4e <HAL_DMA_IRQHandler+0x2ee>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a67      	ldr	r2, [pc, #412]	; (8006e5c <HAL_DMA_IRQHandler+0x3fc>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d045      	beq.n	8006d4e <HAL_DMA_IRQHandler+0x2ee>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a66      	ldr	r2, [pc, #408]	; (8006e60 <HAL_DMA_IRQHandler+0x400>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d040      	beq.n	8006d4e <HAL_DMA_IRQHandler+0x2ee>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a64      	ldr	r2, [pc, #400]	; (8006e64 <HAL_DMA_IRQHandler+0x404>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d03b      	beq.n	8006d4e <HAL_DMA_IRQHandler+0x2ee>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a63      	ldr	r2, [pc, #396]	; (8006e68 <HAL_DMA_IRQHandler+0x408>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d036      	beq.n	8006d4e <HAL_DMA_IRQHandler+0x2ee>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a61      	ldr	r2, [pc, #388]	; (8006e6c <HAL_DMA_IRQHandler+0x40c>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d031      	beq.n	8006d4e <HAL_DMA_IRQHandler+0x2ee>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a60      	ldr	r2, [pc, #384]	; (8006e70 <HAL_DMA_IRQHandler+0x410>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d02c      	beq.n	8006d4e <HAL_DMA_IRQHandler+0x2ee>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a5e      	ldr	r2, [pc, #376]	; (8006e74 <HAL_DMA_IRQHandler+0x414>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d027      	beq.n	8006d4e <HAL_DMA_IRQHandler+0x2ee>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a5d      	ldr	r2, [pc, #372]	; (8006e78 <HAL_DMA_IRQHandler+0x418>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d022      	beq.n	8006d4e <HAL_DMA_IRQHandler+0x2ee>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a5b      	ldr	r2, [pc, #364]	; (8006e7c <HAL_DMA_IRQHandler+0x41c>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d01d      	beq.n	8006d4e <HAL_DMA_IRQHandler+0x2ee>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a5a      	ldr	r2, [pc, #360]	; (8006e80 <HAL_DMA_IRQHandler+0x420>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d018      	beq.n	8006d4e <HAL_DMA_IRQHandler+0x2ee>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a58      	ldr	r2, [pc, #352]	; (8006e84 <HAL_DMA_IRQHandler+0x424>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d013      	beq.n	8006d4e <HAL_DMA_IRQHandler+0x2ee>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a57      	ldr	r2, [pc, #348]	; (8006e88 <HAL_DMA_IRQHandler+0x428>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d00e      	beq.n	8006d4e <HAL_DMA_IRQHandler+0x2ee>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a55      	ldr	r2, [pc, #340]	; (8006e8c <HAL_DMA_IRQHandler+0x42c>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d009      	beq.n	8006d4e <HAL_DMA_IRQHandler+0x2ee>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a54      	ldr	r2, [pc, #336]	; (8006e90 <HAL_DMA_IRQHandler+0x430>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d004      	beq.n	8006d4e <HAL_DMA_IRQHandler+0x2ee>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a52      	ldr	r2, [pc, #328]	; (8006e94 <HAL_DMA_IRQHandler+0x434>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d10a      	bne.n	8006d64 <HAL_DMA_IRQHandler+0x304>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	695b      	ldr	r3, [r3, #20]
 8006d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	bf14      	ite	ne
 8006d5c:	2301      	movne	r3, #1
 8006d5e:	2300      	moveq	r3, #0
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	e003      	b.n	8006d6c <HAL_DMA_IRQHandler+0x30c>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00d      	beq.n	8006d8c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d74:	f003 031f 	and.w	r3, r3, #31
 8006d78:	2201      	movs	r2, #1
 8006d7a:	409a      	lsls	r2, r3
 8006d7c:	6a3b      	ldr	r3, [r7, #32]
 8006d7e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d84:	f043 0202 	orr.w	r2, r3, #2
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d90:	f003 031f 	and.w	r3, r3, #31
 8006d94:	2204      	movs	r2, #4
 8006d96:	409a      	lsls	r2, r3
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f000 808f 	beq.w	8006ec0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a2c      	ldr	r2, [pc, #176]	; (8006e58 <HAL_DMA_IRQHandler+0x3f8>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d04a      	beq.n	8006e42 <HAL_DMA_IRQHandler+0x3e2>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a2a      	ldr	r2, [pc, #168]	; (8006e5c <HAL_DMA_IRQHandler+0x3fc>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d045      	beq.n	8006e42 <HAL_DMA_IRQHandler+0x3e2>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a29      	ldr	r2, [pc, #164]	; (8006e60 <HAL_DMA_IRQHandler+0x400>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d040      	beq.n	8006e42 <HAL_DMA_IRQHandler+0x3e2>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a27      	ldr	r2, [pc, #156]	; (8006e64 <HAL_DMA_IRQHandler+0x404>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d03b      	beq.n	8006e42 <HAL_DMA_IRQHandler+0x3e2>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a26      	ldr	r2, [pc, #152]	; (8006e68 <HAL_DMA_IRQHandler+0x408>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d036      	beq.n	8006e42 <HAL_DMA_IRQHandler+0x3e2>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a24      	ldr	r2, [pc, #144]	; (8006e6c <HAL_DMA_IRQHandler+0x40c>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d031      	beq.n	8006e42 <HAL_DMA_IRQHandler+0x3e2>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a23      	ldr	r2, [pc, #140]	; (8006e70 <HAL_DMA_IRQHandler+0x410>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d02c      	beq.n	8006e42 <HAL_DMA_IRQHandler+0x3e2>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a21      	ldr	r2, [pc, #132]	; (8006e74 <HAL_DMA_IRQHandler+0x414>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d027      	beq.n	8006e42 <HAL_DMA_IRQHandler+0x3e2>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a20      	ldr	r2, [pc, #128]	; (8006e78 <HAL_DMA_IRQHandler+0x418>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d022      	beq.n	8006e42 <HAL_DMA_IRQHandler+0x3e2>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a1e      	ldr	r2, [pc, #120]	; (8006e7c <HAL_DMA_IRQHandler+0x41c>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d01d      	beq.n	8006e42 <HAL_DMA_IRQHandler+0x3e2>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a1d      	ldr	r2, [pc, #116]	; (8006e80 <HAL_DMA_IRQHandler+0x420>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d018      	beq.n	8006e42 <HAL_DMA_IRQHandler+0x3e2>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a1b      	ldr	r2, [pc, #108]	; (8006e84 <HAL_DMA_IRQHandler+0x424>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d013      	beq.n	8006e42 <HAL_DMA_IRQHandler+0x3e2>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a1a      	ldr	r2, [pc, #104]	; (8006e88 <HAL_DMA_IRQHandler+0x428>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d00e      	beq.n	8006e42 <HAL_DMA_IRQHandler+0x3e2>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a18      	ldr	r2, [pc, #96]	; (8006e8c <HAL_DMA_IRQHandler+0x42c>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d009      	beq.n	8006e42 <HAL_DMA_IRQHandler+0x3e2>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a17      	ldr	r2, [pc, #92]	; (8006e90 <HAL_DMA_IRQHandler+0x430>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d004      	beq.n	8006e42 <HAL_DMA_IRQHandler+0x3e2>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a15      	ldr	r2, [pc, #84]	; (8006e94 <HAL_DMA_IRQHandler+0x434>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d12a      	bne.n	8006e98 <HAL_DMA_IRQHandler+0x438>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 0302 	and.w	r3, r3, #2
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	bf14      	ite	ne
 8006e50:	2301      	movne	r3, #1
 8006e52:	2300      	moveq	r3, #0
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	e023      	b.n	8006ea0 <HAL_DMA_IRQHandler+0x440>
 8006e58:	40020010 	.word	0x40020010
 8006e5c:	40020028 	.word	0x40020028
 8006e60:	40020040 	.word	0x40020040
 8006e64:	40020058 	.word	0x40020058
 8006e68:	40020070 	.word	0x40020070
 8006e6c:	40020088 	.word	0x40020088
 8006e70:	400200a0 	.word	0x400200a0
 8006e74:	400200b8 	.word	0x400200b8
 8006e78:	40020410 	.word	0x40020410
 8006e7c:	40020428 	.word	0x40020428
 8006e80:	40020440 	.word	0x40020440
 8006e84:	40020458 	.word	0x40020458
 8006e88:	40020470 	.word	0x40020470
 8006e8c:	40020488 	.word	0x40020488
 8006e90:	400204a0 	.word	0x400204a0
 8006e94:	400204b8 	.word	0x400204b8
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00d      	beq.n	8006ec0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ea8:	f003 031f 	and.w	r3, r3, #31
 8006eac:	2204      	movs	r2, #4
 8006eae:	409a      	lsls	r2, r3
 8006eb0:	6a3b      	ldr	r3, [r7, #32]
 8006eb2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eb8:	f043 0204 	orr.w	r2, r3, #4
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ec4:	f003 031f 	and.w	r3, r3, #31
 8006ec8:	2210      	movs	r2, #16
 8006eca:	409a      	lsls	r2, r3
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	4013      	ands	r3, r2
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f000 80a6 	beq.w	8007022 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a85      	ldr	r2, [pc, #532]	; (80070f0 <HAL_DMA_IRQHandler+0x690>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d04a      	beq.n	8006f76 <HAL_DMA_IRQHandler+0x516>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a83      	ldr	r2, [pc, #524]	; (80070f4 <HAL_DMA_IRQHandler+0x694>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d045      	beq.n	8006f76 <HAL_DMA_IRQHandler+0x516>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a82      	ldr	r2, [pc, #520]	; (80070f8 <HAL_DMA_IRQHandler+0x698>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d040      	beq.n	8006f76 <HAL_DMA_IRQHandler+0x516>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a80      	ldr	r2, [pc, #512]	; (80070fc <HAL_DMA_IRQHandler+0x69c>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d03b      	beq.n	8006f76 <HAL_DMA_IRQHandler+0x516>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a7f      	ldr	r2, [pc, #508]	; (8007100 <HAL_DMA_IRQHandler+0x6a0>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d036      	beq.n	8006f76 <HAL_DMA_IRQHandler+0x516>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a7d      	ldr	r2, [pc, #500]	; (8007104 <HAL_DMA_IRQHandler+0x6a4>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d031      	beq.n	8006f76 <HAL_DMA_IRQHandler+0x516>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a7c      	ldr	r2, [pc, #496]	; (8007108 <HAL_DMA_IRQHandler+0x6a8>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d02c      	beq.n	8006f76 <HAL_DMA_IRQHandler+0x516>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a7a      	ldr	r2, [pc, #488]	; (800710c <HAL_DMA_IRQHandler+0x6ac>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d027      	beq.n	8006f76 <HAL_DMA_IRQHandler+0x516>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a79      	ldr	r2, [pc, #484]	; (8007110 <HAL_DMA_IRQHandler+0x6b0>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d022      	beq.n	8006f76 <HAL_DMA_IRQHandler+0x516>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a77      	ldr	r2, [pc, #476]	; (8007114 <HAL_DMA_IRQHandler+0x6b4>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d01d      	beq.n	8006f76 <HAL_DMA_IRQHandler+0x516>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a76      	ldr	r2, [pc, #472]	; (8007118 <HAL_DMA_IRQHandler+0x6b8>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d018      	beq.n	8006f76 <HAL_DMA_IRQHandler+0x516>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a74      	ldr	r2, [pc, #464]	; (800711c <HAL_DMA_IRQHandler+0x6bc>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d013      	beq.n	8006f76 <HAL_DMA_IRQHandler+0x516>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a73      	ldr	r2, [pc, #460]	; (8007120 <HAL_DMA_IRQHandler+0x6c0>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d00e      	beq.n	8006f76 <HAL_DMA_IRQHandler+0x516>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a71      	ldr	r2, [pc, #452]	; (8007124 <HAL_DMA_IRQHandler+0x6c4>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d009      	beq.n	8006f76 <HAL_DMA_IRQHandler+0x516>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a70      	ldr	r2, [pc, #448]	; (8007128 <HAL_DMA_IRQHandler+0x6c8>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d004      	beq.n	8006f76 <HAL_DMA_IRQHandler+0x516>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a6e      	ldr	r2, [pc, #440]	; (800712c <HAL_DMA_IRQHandler+0x6cc>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d10a      	bne.n	8006f8c <HAL_DMA_IRQHandler+0x52c>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0308 	and.w	r3, r3, #8
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	bf14      	ite	ne
 8006f84:	2301      	movne	r3, #1
 8006f86:	2300      	moveq	r3, #0
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	e009      	b.n	8006fa0 <HAL_DMA_IRQHandler+0x540>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 0304 	and.w	r3, r3, #4
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	bf14      	ite	ne
 8006f9a:	2301      	movne	r3, #1
 8006f9c:	2300      	moveq	r3, #0
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d03e      	beq.n	8007022 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fa8:	f003 031f 	and.w	r3, r3, #31
 8006fac:	2210      	movs	r2, #16
 8006fae:	409a      	lsls	r2, r3
 8006fb0:	6a3b      	ldr	r3, [r7, #32]
 8006fb2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d018      	beq.n	8006ff4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d108      	bne.n	8006fe2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d024      	beq.n	8007022 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	4798      	blx	r3
 8006fe0:	e01f      	b.n	8007022 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d01b      	beq.n	8007022 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	4798      	blx	r3
 8006ff2:	e016      	b.n	8007022 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d107      	bne.n	8007012 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f022 0208 	bic.w	r2, r2, #8
 8007010:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007016:	2b00      	cmp	r3, #0
 8007018:	d003      	beq.n	8007022 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007026:	f003 031f 	and.w	r3, r3, #31
 800702a:	2220      	movs	r2, #32
 800702c:	409a      	lsls	r2, r3
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	4013      	ands	r3, r2
 8007032:	2b00      	cmp	r3, #0
 8007034:	f000 8110 	beq.w	8007258 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a2c      	ldr	r2, [pc, #176]	; (80070f0 <HAL_DMA_IRQHandler+0x690>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d04a      	beq.n	80070d8 <HAL_DMA_IRQHandler+0x678>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a2b      	ldr	r2, [pc, #172]	; (80070f4 <HAL_DMA_IRQHandler+0x694>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d045      	beq.n	80070d8 <HAL_DMA_IRQHandler+0x678>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a29      	ldr	r2, [pc, #164]	; (80070f8 <HAL_DMA_IRQHandler+0x698>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d040      	beq.n	80070d8 <HAL_DMA_IRQHandler+0x678>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a28      	ldr	r2, [pc, #160]	; (80070fc <HAL_DMA_IRQHandler+0x69c>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d03b      	beq.n	80070d8 <HAL_DMA_IRQHandler+0x678>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a26      	ldr	r2, [pc, #152]	; (8007100 <HAL_DMA_IRQHandler+0x6a0>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d036      	beq.n	80070d8 <HAL_DMA_IRQHandler+0x678>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a25      	ldr	r2, [pc, #148]	; (8007104 <HAL_DMA_IRQHandler+0x6a4>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d031      	beq.n	80070d8 <HAL_DMA_IRQHandler+0x678>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a23      	ldr	r2, [pc, #140]	; (8007108 <HAL_DMA_IRQHandler+0x6a8>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d02c      	beq.n	80070d8 <HAL_DMA_IRQHandler+0x678>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a22      	ldr	r2, [pc, #136]	; (800710c <HAL_DMA_IRQHandler+0x6ac>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d027      	beq.n	80070d8 <HAL_DMA_IRQHandler+0x678>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a20      	ldr	r2, [pc, #128]	; (8007110 <HAL_DMA_IRQHandler+0x6b0>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d022      	beq.n	80070d8 <HAL_DMA_IRQHandler+0x678>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a1f      	ldr	r2, [pc, #124]	; (8007114 <HAL_DMA_IRQHandler+0x6b4>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d01d      	beq.n	80070d8 <HAL_DMA_IRQHandler+0x678>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a1d      	ldr	r2, [pc, #116]	; (8007118 <HAL_DMA_IRQHandler+0x6b8>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d018      	beq.n	80070d8 <HAL_DMA_IRQHandler+0x678>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a1c      	ldr	r2, [pc, #112]	; (800711c <HAL_DMA_IRQHandler+0x6bc>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d013      	beq.n	80070d8 <HAL_DMA_IRQHandler+0x678>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a1a      	ldr	r2, [pc, #104]	; (8007120 <HAL_DMA_IRQHandler+0x6c0>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d00e      	beq.n	80070d8 <HAL_DMA_IRQHandler+0x678>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a19      	ldr	r2, [pc, #100]	; (8007124 <HAL_DMA_IRQHandler+0x6c4>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d009      	beq.n	80070d8 <HAL_DMA_IRQHandler+0x678>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a17      	ldr	r2, [pc, #92]	; (8007128 <HAL_DMA_IRQHandler+0x6c8>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d004      	beq.n	80070d8 <HAL_DMA_IRQHandler+0x678>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a16      	ldr	r2, [pc, #88]	; (800712c <HAL_DMA_IRQHandler+0x6cc>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d12b      	bne.n	8007130 <HAL_DMA_IRQHandler+0x6d0>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 0310 	and.w	r3, r3, #16
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	bf14      	ite	ne
 80070e6:	2301      	movne	r3, #1
 80070e8:	2300      	moveq	r3, #0
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	e02a      	b.n	8007144 <HAL_DMA_IRQHandler+0x6e4>
 80070ee:	bf00      	nop
 80070f0:	40020010 	.word	0x40020010
 80070f4:	40020028 	.word	0x40020028
 80070f8:	40020040 	.word	0x40020040
 80070fc:	40020058 	.word	0x40020058
 8007100:	40020070 	.word	0x40020070
 8007104:	40020088 	.word	0x40020088
 8007108:	400200a0 	.word	0x400200a0
 800710c:	400200b8 	.word	0x400200b8
 8007110:	40020410 	.word	0x40020410
 8007114:	40020428 	.word	0x40020428
 8007118:	40020440 	.word	0x40020440
 800711c:	40020458 	.word	0x40020458
 8007120:	40020470 	.word	0x40020470
 8007124:	40020488 	.word	0x40020488
 8007128:	400204a0 	.word	0x400204a0
 800712c:	400204b8 	.word	0x400204b8
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 0302 	and.w	r3, r3, #2
 800713a:	2b00      	cmp	r3, #0
 800713c:	bf14      	ite	ne
 800713e:	2301      	movne	r3, #1
 8007140:	2300      	moveq	r3, #0
 8007142:	b2db      	uxtb	r3, r3
 8007144:	2b00      	cmp	r3, #0
 8007146:	f000 8087 	beq.w	8007258 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800714e:	f003 031f 	and.w	r3, r3, #31
 8007152:	2220      	movs	r2, #32
 8007154:	409a      	lsls	r2, r3
 8007156:	6a3b      	ldr	r3, [r7, #32]
 8007158:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b04      	cmp	r3, #4
 8007164:	d139      	bne.n	80071da <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f022 0216 	bic.w	r2, r2, #22
 8007174:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	695a      	ldr	r2, [r3, #20]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007184:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718a:	2b00      	cmp	r3, #0
 800718c:	d103      	bne.n	8007196 <HAL_DMA_IRQHandler+0x736>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007192:	2b00      	cmp	r3, #0
 8007194:	d007      	beq.n	80071a6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f022 0208 	bic.w	r2, r2, #8
 80071a4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071aa:	f003 031f 	and.w	r3, r3, #31
 80071ae:	223f      	movs	r2, #63	; 0x3f
 80071b0:	409a      	lsls	r2, r3
 80071b2:	6a3b      	ldr	r3, [r7, #32]
 80071b4:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f000 834a 	beq.w	8007864 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	4798      	blx	r3
          }
          return;
 80071d8:	e344      	b.n	8007864 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d018      	beq.n	800721a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d108      	bne.n	8007208 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d02c      	beq.n	8007258 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	4798      	blx	r3
 8007206:	e027      	b.n	8007258 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800720c:	2b00      	cmp	r3, #0
 800720e:	d023      	beq.n	8007258 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	4798      	blx	r3
 8007218:	e01e      	b.n	8007258 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10f      	bne.n	8007248 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f022 0210 	bic.w	r2, r2, #16
 8007236:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800724c:	2b00      	cmp	r3, #0
 800724e:	d003      	beq.n	8007258 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800725c:	2b00      	cmp	r3, #0
 800725e:	f000 8306 	beq.w	800786e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007266:	f003 0301 	and.w	r3, r3, #1
 800726a:	2b00      	cmp	r3, #0
 800726c:	f000 8088 	beq.w	8007380 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2204      	movs	r2, #4
 8007274:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a7a      	ldr	r2, [pc, #488]	; (8007468 <HAL_DMA_IRQHandler+0xa08>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d04a      	beq.n	8007318 <HAL_DMA_IRQHandler+0x8b8>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a79      	ldr	r2, [pc, #484]	; (800746c <HAL_DMA_IRQHandler+0xa0c>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d045      	beq.n	8007318 <HAL_DMA_IRQHandler+0x8b8>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a77      	ldr	r2, [pc, #476]	; (8007470 <HAL_DMA_IRQHandler+0xa10>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d040      	beq.n	8007318 <HAL_DMA_IRQHandler+0x8b8>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a76      	ldr	r2, [pc, #472]	; (8007474 <HAL_DMA_IRQHandler+0xa14>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d03b      	beq.n	8007318 <HAL_DMA_IRQHandler+0x8b8>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a74      	ldr	r2, [pc, #464]	; (8007478 <HAL_DMA_IRQHandler+0xa18>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d036      	beq.n	8007318 <HAL_DMA_IRQHandler+0x8b8>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a73      	ldr	r2, [pc, #460]	; (800747c <HAL_DMA_IRQHandler+0xa1c>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d031      	beq.n	8007318 <HAL_DMA_IRQHandler+0x8b8>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a71      	ldr	r2, [pc, #452]	; (8007480 <HAL_DMA_IRQHandler+0xa20>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d02c      	beq.n	8007318 <HAL_DMA_IRQHandler+0x8b8>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a70      	ldr	r2, [pc, #448]	; (8007484 <HAL_DMA_IRQHandler+0xa24>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d027      	beq.n	8007318 <HAL_DMA_IRQHandler+0x8b8>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a6e      	ldr	r2, [pc, #440]	; (8007488 <HAL_DMA_IRQHandler+0xa28>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d022      	beq.n	8007318 <HAL_DMA_IRQHandler+0x8b8>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a6d      	ldr	r2, [pc, #436]	; (800748c <HAL_DMA_IRQHandler+0xa2c>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d01d      	beq.n	8007318 <HAL_DMA_IRQHandler+0x8b8>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a6b      	ldr	r2, [pc, #428]	; (8007490 <HAL_DMA_IRQHandler+0xa30>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d018      	beq.n	8007318 <HAL_DMA_IRQHandler+0x8b8>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a6a      	ldr	r2, [pc, #424]	; (8007494 <HAL_DMA_IRQHandler+0xa34>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d013      	beq.n	8007318 <HAL_DMA_IRQHandler+0x8b8>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a68      	ldr	r2, [pc, #416]	; (8007498 <HAL_DMA_IRQHandler+0xa38>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d00e      	beq.n	8007318 <HAL_DMA_IRQHandler+0x8b8>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a67      	ldr	r2, [pc, #412]	; (800749c <HAL_DMA_IRQHandler+0xa3c>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d009      	beq.n	8007318 <HAL_DMA_IRQHandler+0x8b8>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a65      	ldr	r2, [pc, #404]	; (80074a0 <HAL_DMA_IRQHandler+0xa40>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d004      	beq.n	8007318 <HAL_DMA_IRQHandler+0x8b8>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a64      	ldr	r2, [pc, #400]	; (80074a4 <HAL_DMA_IRQHandler+0xa44>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d108      	bne.n	800732a <HAL_DMA_IRQHandler+0x8ca>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f022 0201 	bic.w	r2, r2, #1
 8007326:	601a      	str	r2, [r3, #0]
 8007328:	e007      	b.n	800733a <HAL_DMA_IRQHandler+0x8da>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f022 0201 	bic.w	r2, r2, #1
 8007338:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	3301      	adds	r3, #1
 800733e:	60fb      	str	r3, [r7, #12]
 8007340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007342:	429a      	cmp	r2, r3
 8007344:	d307      	bcc.n	8007356 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 0301 	and.w	r3, r3, #1
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1f2      	bne.n	800733a <HAL_DMA_IRQHandler+0x8da>
 8007354:	e000      	b.n	8007358 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007356:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f003 0301 	and.w	r3, r3, #1
 800736a:	2b00      	cmp	r3, #0
 800736c:	d004      	beq.n	8007378 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2203      	movs	r2, #3
 8007372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007376:	e003      	b.n	8007380 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2201      	movs	r2, #1
 800737c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007384:	2b00      	cmp	r3, #0
 8007386:	f000 8272 	beq.w	800786e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	4798      	blx	r3
 8007392:	e26c      	b.n	800786e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a43      	ldr	r2, [pc, #268]	; (80074a8 <HAL_DMA_IRQHandler+0xa48>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d022      	beq.n	80073e4 <HAL_DMA_IRQHandler+0x984>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a42      	ldr	r2, [pc, #264]	; (80074ac <HAL_DMA_IRQHandler+0xa4c>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d01d      	beq.n	80073e4 <HAL_DMA_IRQHandler+0x984>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a40      	ldr	r2, [pc, #256]	; (80074b0 <HAL_DMA_IRQHandler+0xa50>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d018      	beq.n	80073e4 <HAL_DMA_IRQHandler+0x984>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a3f      	ldr	r2, [pc, #252]	; (80074b4 <HAL_DMA_IRQHandler+0xa54>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d013      	beq.n	80073e4 <HAL_DMA_IRQHandler+0x984>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a3d      	ldr	r2, [pc, #244]	; (80074b8 <HAL_DMA_IRQHandler+0xa58>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d00e      	beq.n	80073e4 <HAL_DMA_IRQHandler+0x984>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a3c      	ldr	r2, [pc, #240]	; (80074bc <HAL_DMA_IRQHandler+0xa5c>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d009      	beq.n	80073e4 <HAL_DMA_IRQHandler+0x984>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a3a      	ldr	r2, [pc, #232]	; (80074c0 <HAL_DMA_IRQHandler+0xa60>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d004      	beq.n	80073e4 <HAL_DMA_IRQHandler+0x984>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a39      	ldr	r2, [pc, #228]	; (80074c4 <HAL_DMA_IRQHandler+0xa64>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d101      	bne.n	80073e8 <HAL_DMA_IRQHandler+0x988>
 80073e4:	2301      	movs	r3, #1
 80073e6:	e000      	b.n	80073ea <HAL_DMA_IRQHandler+0x98a>
 80073e8:	2300      	movs	r3, #0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	f000 823f 	beq.w	800786e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073fc:	f003 031f 	and.w	r3, r3, #31
 8007400:	2204      	movs	r2, #4
 8007402:	409a      	lsls	r2, r3
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	4013      	ands	r3, r2
 8007408:	2b00      	cmp	r3, #0
 800740a:	f000 80cd 	beq.w	80075a8 <HAL_DMA_IRQHandler+0xb48>
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	f003 0304 	and.w	r3, r3, #4
 8007414:	2b00      	cmp	r3, #0
 8007416:	f000 80c7 	beq.w	80075a8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800741e:	f003 031f 	and.w	r3, r3, #31
 8007422:	2204      	movs	r2, #4
 8007424:	409a      	lsls	r2, r3
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007430:	2b00      	cmp	r3, #0
 8007432:	d049      	beq.n	80074c8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800743a:	2b00      	cmp	r3, #0
 800743c:	d109      	bne.n	8007452 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007442:	2b00      	cmp	r3, #0
 8007444:	f000 8210 	beq.w	8007868 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007450:	e20a      	b.n	8007868 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007456:	2b00      	cmp	r3, #0
 8007458:	f000 8206 	beq.w	8007868 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007464:	e200      	b.n	8007868 <HAL_DMA_IRQHandler+0xe08>
 8007466:	bf00      	nop
 8007468:	40020010 	.word	0x40020010
 800746c:	40020028 	.word	0x40020028
 8007470:	40020040 	.word	0x40020040
 8007474:	40020058 	.word	0x40020058
 8007478:	40020070 	.word	0x40020070
 800747c:	40020088 	.word	0x40020088
 8007480:	400200a0 	.word	0x400200a0
 8007484:	400200b8 	.word	0x400200b8
 8007488:	40020410 	.word	0x40020410
 800748c:	40020428 	.word	0x40020428
 8007490:	40020440 	.word	0x40020440
 8007494:	40020458 	.word	0x40020458
 8007498:	40020470 	.word	0x40020470
 800749c:	40020488 	.word	0x40020488
 80074a0:	400204a0 	.word	0x400204a0
 80074a4:	400204b8 	.word	0x400204b8
 80074a8:	58025408 	.word	0x58025408
 80074ac:	5802541c 	.word	0x5802541c
 80074b0:	58025430 	.word	0x58025430
 80074b4:	58025444 	.word	0x58025444
 80074b8:	58025458 	.word	0x58025458
 80074bc:	5802546c 	.word	0x5802546c
 80074c0:	58025480 	.word	0x58025480
 80074c4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	f003 0320 	and.w	r3, r3, #32
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d160      	bne.n	8007594 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a8c      	ldr	r2, [pc, #560]	; (8007708 <HAL_DMA_IRQHandler+0xca8>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d04a      	beq.n	8007572 <HAL_DMA_IRQHandler+0xb12>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a8a      	ldr	r2, [pc, #552]	; (800770c <HAL_DMA_IRQHandler+0xcac>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d045      	beq.n	8007572 <HAL_DMA_IRQHandler+0xb12>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a89      	ldr	r2, [pc, #548]	; (8007710 <HAL_DMA_IRQHandler+0xcb0>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d040      	beq.n	8007572 <HAL_DMA_IRQHandler+0xb12>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a87      	ldr	r2, [pc, #540]	; (8007714 <HAL_DMA_IRQHandler+0xcb4>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d03b      	beq.n	8007572 <HAL_DMA_IRQHandler+0xb12>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a86      	ldr	r2, [pc, #536]	; (8007718 <HAL_DMA_IRQHandler+0xcb8>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d036      	beq.n	8007572 <HAL_DMA_IRQHandler+0xb12>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a84      	ldr	r2, [pc, #528]	; (800771c <HAL_DMA_IRQHandler+0xcbc>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d031      	beq.n	8007572 <HAL_DMA_IRQHandler+0xb12>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a83      	ldr	r2, [pc, #524]	; (8007720 <HAL_DMA_IRQHandler+0xcc0>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d02c      	beq.n	8007572 <HAL_DMA_IRQHandler+0xb12>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a81      	ldr	r2, [pc, #516]	; (8007724 <HAL_DMA_IRQHandler+0xcc4>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d027      	beq.n	8007572 <HAL_DMA_IRQHandler+0xb12>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a80      	ldr	r2, [pc, #512]	; (8007728 <HAL_DMA_IRQHandler+0xcc8>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d022      	beq.n	8007572 <HAL_DMA_IRQHandler+0xb12>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a7e      	ldr	r2, [pc, #504]	; (800772c <HAL_DMA_IRQHandler+0xccc>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d01d      	beq.n	8007572 <HAL_DMA_IRQHandler+0xb12>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a7d      	ldr	r2, [pc, #500]	; (8007730 <HAL_DMA_IRQHandler+0xcd0>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d018      	beq.n	8007572 <HAL_DMA_IRQHandler+0xb12>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a7b      	ldr	r2, [pc, #492]	; (8007734 <HAL_DMA_IRQHandler+0xcd4>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d013      	beq.n	8007572 <HAL_DMA_IRQHandler+0xb12>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a7a      	ldr	r2, [pc, #488]	; (8007738 <HAL_DMA_IRQHandler+0xcd8>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d00e      	beq.n	8007572 <HAL_DMA_IRQHandler+0xb12>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a78      	ldr	r2, [pc, #480]	; (800773c <HAL_DMA_IRQHandler+0xcdc>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d009      	beq.n	8007572 <HAL_DMA_IRQHandler+0xb12>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a77      	ldr	r2, [pc, #476]	; (8007740 <HAL_DMA_IRQHandler+0xce0>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d004      	beq.n	8007572 <HAL_DMA_IRQHandler+0xb12>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a75      	ldr	r2, [pc, #468]	; (8007744 <HAL_DMA_IRQHandler+0xce4>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d108      	bne.n	8007584 <HAL_DMA_IRQHandler+0xb24>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f022 0208 	bic.w	r2, r2, #8
 8007580:	601a      	str	r2, [r3, #0]
 8007582:	e007      	b.n	8007594 <HAL_DMA_IRQHandler+0xb34>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f022 0204 	bic.w	r2, r2, #4
 8007592:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007598:	2b00      	cmp	r3, #0
 800759a:	f000 8165 	beq.w	8007868 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075a6:	e15f      	b.n	8007868 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ac:	f003 031f 	and.w	r3, r3, #31
 80075b0:	2202      	movs	r2, #2
 80075b2:	409a      	lsls	r2, r3
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	4013      	ands	r3, r2
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f000 80c5 	beq.w	8007748 <HAL_DMA_IRQHandler+0xce8>
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	f003 0302 	and.w	r3, r3, #2
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f000 80bf 	beq.w	8007748 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ce:	f003 031f 	and.w	r3, r3, #31
 80075d2:	2202      	movs	r2, #2
 80075d4:	409a      	lsls	r2, r3
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d018      	beq.n	8007616 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d109      	bne.n	8007602 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f000 813a 	beq.w	800786c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007600:	e134      	b.n	800786c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007606:	2b00      	cmp	r3, #0
 8007608:	f000 8130 	beq.w	800786c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007614:	e12a      	b.n	800786c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	f003 0320 	and.w	r3, r3, #32
 800761c:	2b00      	cmp	r3, #0
 800761e:	d168      	bne.n	80076f2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a38      	ldr	r2, [pc, #224]	; (8007708 <HAL_DMA_IRQHandler+0xca8>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d04a      	beq.n	80076c0 <HAL_DMA_IRQHandler+0xc60>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a37      	ldr	r2, [pc, #220]	; (800770c <HAL_DMA_IRQHandler+0xcac>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d045      	beq.n	80076c0 <HAL_DMA_IRQHandler+0xc60>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a35      	ldr	r2, [pc, #212]	; (8007710 <HAL_DMA_IRQHandler+0xcb0>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d040      	beq.n	80076c0 <HAL_DMA_IRQHandler+0xc60>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a34      	ldr	r2, [pc, #208]	; (8007714 <HAL_DMA_IRQHandler+0xcb4>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d03b      	beq.n	80076c0 <HAL_DMA_IRQHandler+0xc60>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a32      	ldr	r2, [pc, #200]	; (8007718 <HAL_DMA_IRQHandler+0xcb8>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d036      	beq.n	80076c0 <HAL_DMA_IRQHandler+0xc60>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a31      	ldr	r2, [pc, #196]	; (800771c <HAL_DMA_IRQHandler+0xcbc>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d031      	beq.n	80076c0 <HAL_DMA_IRQHandler+0xc60>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a2f      	ldr	r2, [pc, #188]	; (8007720 <HAL_DMA_IRQHandler+0xcc0>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d02c      	beq.n	80076c0 <HAL_DMA_IRQHandler+0xc60>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a2e      	ldr	r2, [pc, #184]	; (8007724 <HAL_DMA_IRQHandler+0xcc4>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d027      	beq.n	80076c0 <HAL_DMA_IRQHandler+0xc60>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a2c      	ldr	r2, [pc, #176]	; (8007728 <HAL_DMA_IRQHandler+0xcc8>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d022      	beq.n	80076c0 <HAL_DMA_IRQHandler+0xc60>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a2b      	ldr	r2, [pc, #172]	; (800772c <HAL_DMA_IRQHandler+0xccc>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d01d      	beq.n	80076c0 <HAL_DMA_IRQHandler+0xc60>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a29      	ldr	r2, [pc, #164]	; (8007730 <HAL_DMA_IRQHandler+0xcd0>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d018      	beq.n	80076c0 <HAL_DMA_IRQHandler+0xc60>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a28      	ldr	r2, [pc, #160]	; (8007734 <HAL_DMA_IRQHandler+0xcd4>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d013      	beq.n	80076c0 <HAL_DMA_IRQHandler+0xc60>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a26      	ldr	r2, [pc, #152]	; (8007738 <HAL_DMA_IRQHandler+0xcd8>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d00e      	beq.n	80076c0 <HAL_DMA_IRQHandler+0xc60>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a25      	ldr	r2, [pc, #148]	; (800773c <HAL_DMA_IRQHandler+0xcdc>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d009      	beq.n	80076c0 <HAL_DMA_IRQHandler+0xc60>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a23      	ldr	r2, [pc, #140]	; (8007740 <HAL_DMA_IRQHandler+0xce0>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d004      	beq.n	80076c0 <HAL_DMA_IRQHandler+0xc60>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a22      	ldr	r2, [pc, #136]	; (8007744 <HAL_DMA_IRQHandler+0xce4>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d108      	bne.n	80076d2 <HAL_DMA_IRQHandler+0xc72>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f022 0214 	bic.w	r2, r2, #20
 80076ce:	601a      	str	r2, [r3, #0]
 80076d0:	e007      	b.n	80076e2 <HAL_DMA_IRQHandler+0xc82>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f022 020a 	bic.w	r2, r2, #10
 80076e0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2201      	movs	r2, #1
 80076ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f000 80b8 	beq.w	800786c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007704:	e0b2      	b.n	800786c <HAL_DMA_IRQHandler+0xe0c>
 8007706:	bf00      	nop
 8007708:	40020010 	.word	0x40020010
 800770c:	40020028 	.word	0x40020028
 8007710:	40020040 	.word	0x40020040
 8007714:	40020058 	.word	0x40020058
 8007718:	40020070 	.word	0x40020070
 800771c:	40020088 	.word	0x40020088
 8007720:	400200a0 	.word	0x400200a0
 8007724:	400200b8 	.word	0x400200b8
 8007728:	40020410 	.word	0x40020410
 800772c:	40020428 	.word	0x40020428
 8007730:	40020440 	.word	0x40020440
 8007734:	40020458 	.word	0x40020458
 8007738:	40020470 	.word	0x40020470
 800773c:	40020488 	.word	0x40020488
 8007740:	400204a0 	.word	0x400204a0
 8007744:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800774c:	f003 031f 	and.w	r3, r3, #31
 8007750:	2208      	movs	r2, #8
 8007752:	409a      	lsls	r2, r3
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	4013      	ands	r3, r2
 8007758:	2b00      	cmp	r3, #0
 800775a:	f000 8088 	beq.w	800786e <HAL_DMA_IRQHandler+0xe0e>
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	f003 0308 	and.w	r3, r3, #8
 8007764:	2b00      	cmp	r3, #0
 8007766:	f000 8082 	beq.w	800786e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a41      	ldr	r2, [pc, #260]	; (8007874 <HAL_DMA_IRQHandler+0xe14>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d04a      	beq.n	800780a <HAL_DMA_IRQHandler+0xdaa>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a3f      	ldr	r2, [pc, #252]	; (8007878 <HAL_DMA_IRQHandler+0xe18>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d045      	beq.n	800780a <HAL_DMA_IRQHandler+0xdaa>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a3e      	ldr	r2, [pc, #248]	; (800787c <HAL_DMA_IRQHandler+0xe1c>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d040      	beq.n	800780a <HAL_DMA_IRQHandler+0xdaa>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a3c      	ldr	r2, [pc, #240]	; (8007880 <HAL_DMA_IRQHandler+0xe20>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d03b      	beq.n	800780a <HAL_DMA_IRQHandler+0xdaa>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a3b      	ldr	r2, [pc, #236]	; (8007884 <HAL_DMA_IRQHandler+0xe24>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d036      	beq.n	800780a <HAL_DMA_IRQHandler+0xdaa>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a39      	ldr	r2, [pc, #228]	; (8007888 <HAL_DMA_IRQHandler+0xe28>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d031      	beq.n	800780a <HAL_DMA_IRQHandler+0xdaa>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a38      	ldr	r2, [pc, #224]	; (800788c <HAL_DMA_IRQHandler+0xe2c>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d02c      	beq.n	800780a <HAL_DMA_IRQHandler+0xdaa>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a36      	ldr	r2, [pc, #216]	; (8007890 <HAL_DMA_IRQHandler+0xe30>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d027      	beq.n	800780a <HAL_DMA_IRQHandler+0xdaa>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a35      	ldr	r2, [pc, #212]	; (8007894 <HAL_DMA_IRQHandler+0xe34>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d022      	beq.n	800780a <HAL_DMA_IRQHandler+0xdaa>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a33      	ldr	r2, [pc, #204]	; (8007898 <HAL_DMA_IRQHandler+0xe38>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d01d      	beq.n	800780a <HAL_DMA_IRQHandler+0xdaa>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a32      	ldr	r2, [pc, #200]	; (800789c <HAL_DMA_IRQHandler+0xe3c>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d018      	beq.n	800780a <HAL_DMA_IRQHandler+0xdaa>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a30      	ldr	r2, [pc, #192]	; (80078a0 <HAL_DMA_IRQHandler+0xe40>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d013      	beq.n	800780a <HAL_DMA_IRQHandler+0xdaa>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a2f      	ldr	r2, [pc, #188]	; (80078a4 <HAL_DMA_IRQHandler+0xe44>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d00e      	beq.n	800780a <HAL_DMA_IRQHandler+0xdaa>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a2d      	ldr	r2, [pc, #180]	; (80078a8 <HAL_DMA_IRQHandler+0xe48>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d009      	beq.n	800780a <HAL_DMA_IRQHandler+0xdaa>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a2c      	ldr	r2, [pc, #176]	; (80078ac <HAL_DMA_IRQHandler+0xe4c>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d004      	beq.n	800780a <HAL_DMA_IRQHandler+0xdaa>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a2a      	ldr	r2, [pc, #168]	; (80078b0 <HAL_DMA_IRQHandler+0xe50>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d108      	bne.n	800781c <HAL_DMA_IRQHandler+0xdbc>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f022 021c 	bic.w	r2, r2, #28
 8007818:	601a      	str	r2, [r3, #0]
 800781a:	e007      	b.n	800782c <HAL_DMA_IRQHandler+0xdcc>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f022 020e 	bic.w	r2, r2, #14
 800782a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007830:	f003 031f 	and.w	r3, r3, #31
 8007834:	2201      	movs	r2, #1
 8007836:	409a      	lsls	r2, r3
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2201      	movs	r2, #1
 800784e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007856:	2b00      	cmp	r3, #0
 8007858:	d009      	beq.n	800786e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	4798      	blx	r3
 8007862:	e004      	b.n	800786e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007864:	bf00      	nop
 8007866:	e002      	b.n	800786e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007868:	bf00      	nop
 800786a:	e000      	b.n	800786e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800786c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800786e:	3728      	adds	r7, #40	; 0x28
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	40020010 	.word	0x40020010
 8007878:	40020028 	.word	0x40020028
 800787c:	40020040 	.word	0x40020040
 8007880:	40020058 	.word	0x40020058
 8007884:	40020070 	.word	0x40020070
 8007888:	40020088 	.word	0x40020088
 800788c:	400200a0 	.word	0x400200a0
 8007890:	400200b8 	.word	0x400200b8
 8007894:	40020410 	.word	0x40020410
 8007898:	40020428 	.word	0x40020428
 800789c:	40020440 	.word	0x40020440
 80078a0:	40020458 	.word	0x40020458
 80078a4:	40020470 	.word	0x40020470
 80078a8:	40020488 	.word	0x40020488
 80078ac:	400204a0 	.word	0x400204a0
 80078b0:	400204b8 	.word	0x400204b8

080078b4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b087      	sub	sp, #28
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	60b9      	str	r1, [r7, #8]
 80078d6:	607a      	str	r2, [r7, #4]
 80078d8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078de:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078e4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a84      	ldr	r2, [pc, #528]	; (8007afc <DMA_SetConfig+0x230>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d072      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a82      	ldr	r2, [pc, #520]	; (8007b00 <DMA_SetConfig+0x234>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d06d      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a81      	ldr	r2, [pc, #516]	; (8007b04 <DMA_SetConfig+0x238>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d068      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a7f      	ldr	r2, [pc, #508]	; (8007b08 <DMA_SetConfig+0x23c>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d063      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a7e      	ldr	r2, [pc, #504]	; (8007b0c <DMA_SetConfig+0x240>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d05e      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a7c      	ldr	r2, [pc, #496]	; (8007b10 <DMA_SetConfig+0x244>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d059      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a7b      	ldr	r2, [pc, #492]	; (8007b14 <DMA_SetConfig+0x248>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d054      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a79      	ldr	r2, [pc, #484]	; (8007b18 <DMA_SetConfig+0x24c>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d04f      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a78      	ldr	r2, [pc, #480]	; (8007b1c <DMA_SetConfig+0x250>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d04a      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a76      	ldr	r2, [pc, #472]	; (8007b20 <DMA_SetConfig+0x254>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d045      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a75      	ldr	r2, [pc, #468]	; (8007b24 <DMA_SetConfig+0x258>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d040      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a73      	ldr	r2, [pc, #460]	; (8007b28 <DMA_SetConfig+0x25c>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d03b      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a72      	ldr	r2, [pc, #456]	; (8007b2c <DMA_SetConfig+0x260>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d036      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a70      	ldr	r2, [pc, #448]	; (8007b30 <DMA_SetConfig+0x264>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d031      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a6f      	ldr	r2, [pc, #444]	; (8007b34 <DMA_SetConfig+0x268>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d02c      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a6d      	ldr	r2, [pc, #436]	; (8007b38 <DMA_SetConfig+0x26c>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d027      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a6c      	ldr	r2, [pc, #432]	; (8007b3c <DMA_SetConfig+0x270>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d022      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a6a      	ldr	r2, [pc, #424]	; (8007b40 <DMA_SetConfig+0x274>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d01d      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a69      	ldr	r2, [pc, #420]	; (8007b44 <DMA_SetConfig+0x278>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d018      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a67      	ldr	r2, [pc, #412]	; (8007b48 <DMA_SetConfig+0x27c>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d013      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a66      	ldr	r2, [pc, #408]	; (8007b4c <DMA_SetConfig+0x280>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d00e      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a64      	ldr	r2, [pc, #400]	; (8007b50 <DMA_SetConfig+0x284>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d009      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a63      	ldr	r2, [pc, #396]	; (8007b54 <DMA_SetConfig+0x288>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d004      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a61      	ldr	r2, [pc, #388]	; (8007b58 <DMA_SetConfig+0x28c>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d101      	bne.n	80079da <DMA_SetConfig+0x10e>
 80079d6:	2301      	movs	r3, #1
 80079d8:	e000      	b.n	80079dc <DMA_SetConfig+0x110>
 80079da:	2300      	movs	r3, #0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d00d      	beq.n	80079fc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80079e8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d004      	beq.n	80079fc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80079fa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a3e      	ldr	r2, [pc, #248]	; (8007afc <DMA_SetConfig+0x230>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d04a      	beq.n	8007a9c <DMA_SetConfig+0x1d0>
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a3d      	ldr	r2, [pc, #244]	; (8007b00 <DMA_SetConfig+0x234>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d045      	beq.n	8007a9c <DMA_SetConfig+0x1d0>
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a3b      	ldr	r2, [pc, #236]	; (8007b04 <DMA_SetConfig+0x238>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d040      	beq.n	8007a9c <DMA_SetConfig+0x1d0>
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a3a      	ldr	r2, [pc, #232]	; (8007b08 <DMA_SetConfig+0x23c>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d03b      	beq.n	8007a9c <DMA_SetConfig+0x1d0>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a38      	ldr	r2, [pc, #224]	; (8007b0c <DMA_SetConfig+0x240>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d036      	beq.n	8007a9c <DMA_SetConfig+0x1d0>
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a37      	ldr	r2, [pc, #220]	; (8007b10 <DMA_SetConfig+0x244>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d031      	beq.n	8007a9c <DMA_SetConfig+0x1d0>
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a35      	ldr	r2, [pc, #212]	; (8007b14 <DMA_SetConfig+0x248>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d02c      	beq.n	8007a9c <DMA_SetConfig+0x1d0>
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a34      	ldr	r2, [pc, #208]	; (8007b18 <DMA_SetConfig+0x24c>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d027      	beq.n	8007a9c <DMA_SetConfig+0x1d0>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a32      	ldr	r2, [pc, #200]	; (8007b1c <DMA_SetConfig+0x250>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d022      	beq.n	8007a9c <DMA_SetConfig+0x1d0>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a31      	ldr	r2, [pc, #196]	; (8007b20 <DMA_SetConfig+0x254>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d01d      	beq.n	8007a9c <DMA_SetConfig+0x1d0>
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a2f      	ldr	r2, [pc, #188]	; (8007b24 <DMA_SetConfig+0x258>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d018      	beq.n	8007a9c <DMA_SetConfig+0x1d0>
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a2e      	ldr	r2, [pc, #184]	; (8007b28 <DMA_SetConfig+0x25c>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d013      	beq.n	8007a9c <DMA_SetConfig+0x1d0>
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a2c      	ldr	r2, [pc, #176]	; (8007b2c <DMA_SetConfig+0x260>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d00e      	beq.n	8007a9c <DMA_SetConfig+0x1d0>
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a2b      	ldr	r2, [pc, #172]	; (8007b30 <DMA_SetConfig+0x264>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d009      	beq.n	8007a9c <DMA_SetConfig+0x1d0>
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a29      	ldr	r2, [pc, #164]	; (8007b34 <DMA_SetConfig+0x268>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d004      	beq.n	8007a9c <DMA_SetConfig+0x1d0>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a28      	ldr	r2, [pc, #160]	; (8007b38 <DMA_SetConfig+0x26c>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d101      	bne.n	8007aa0 <DMA_SetConfig+0x1d4>
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e000      	b.n	8007aa2 <DMA_SetConfig+0x1d6>
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d05a      	beq.n	8007b5c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aaa:	f003 031f 	and.w	r3, r3, #31
 8007aae:	223f      	movs	r2, #63	; 0x3f
 8007ab0:	409a      	lsls	r2, r3
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007ac4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	683a      	ldr	r2, [r7, #0]
 8007acc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	2b40      	cmp	r3, #64	; 0x40
 8007ad4:	d108      	bne.n	8007ae8 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	68ba      	ldr	r2, [r7, #8]
 8007ae4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007ae6:	e087      	b.n	8007bf8 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68ba      	ldr	r2, [r7, #8]
 8007aee:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	60da      	str	r2, [r3, #12]
}
 8007af8:	e07e      	b.n	8007bf8 <DMA_SetConfig+0x32c>
 8007afa:	bf00      	nop
 8007afc:	40020010 	.word	0x40020010
 8007b00:	40020028 	.word	0x40020028
 8007b04:	40020040 	.word	0x40020040
 8007b08:	40020058 	.word	0x40020058
 8007b0c:	40020070 	.word	0x40020070
 8007b10:	40020088 	.word	0x40020088
 8007b14:	400200a0 	.word	0x400200a0
 8007b18:	400200b8 	.word	0x400200b8
 8007b1c:	40020410 	.word	0x40020410
 8007b20:	40020428 	.word	0x40020428
 8007b24:	40020440 	.word	0x40020440
 8007b28:	40020458 	.word	0x40020458
 8007b2c:	40020470 	.word	0x40020470
 8007b30:	40020488 	.word	0x40020488
 8007b34:	400204a0 	.word	0x400204a0
 8007b38:	400204b8 	.word	0x400204b8
 8007b3c:	58025408 	.word	0x58025408
 8007b40:	5802541c 	.word	0x5802541c
 8007b44:	58025430 	.word	0x58025430
 8007b48:	58025444 	.word	0x58025444
 8007b4c:	58025458 	.word	0x58025458
 8007b50:	5802546c 	.word	0x5802546c
 8007b54:	58025480 	.word	0x58025480
 8007b58:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a28      	ldr	r2, [pc, #160]	; (8007c04 <DMA_SetConfig+0x338>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d022      	beq.n	8007bac <DMA_SetConfig+0x2e0>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a27      	ldr	r2, [pc, #156]	; (8007c08 <DMA_SetConfig+0x33c>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d01d      	beq.n	8007bac <DMA_SetConfig+0x2e0>
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a25      	ldr	r2, [pc, #148]	; (8007c0c <DMA_SetConfig+0x340>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d018      	beq.n	8007bac <DMA_SetConfig+0x2e0>
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a24      	ldr	r2, [pc, #144]	; (8007c10 <DMA_SetConfig+0x344>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d013      	beq.n	8007bac <DMA_SetConfig+0x2e0>
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a22      	ldr	r2, [pc, #136]	; (8007c14 <DMA_SetConfig+0x348>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d00e      	beq.n	8007bac <DMA_SetConfig+0x2e0>
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a21      	ldr	r2, [pc, #132]	; (8007c18 <DMA_SetConfig+0x34c>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d009      	beq.n	8007bac <DMA_SetConfig+0x2e0>
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a1f      	ldr	r2, [pc, #124]	; (8007c1c <DMA_SetConfig+0x350>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d004      	beq.n	8007bac <DMA_SetConfig+0x2e0>
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a1e      	ldr	r2, [pc, #120]	; (8007c20 <DMA_SetConfig+0x354>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d101      	bne.n	8007bb0 <DMA_SetConfig+0x2e4>
 8007bac:	2301      	movs	r3, #1
 8007bae:	e000      	b.n	8007bb2 <DMA_SetConfig+0x2e6>
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d020      	beq.n	8007bf8 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bba:	f003 031f 	and.w	r3, r3, #31
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	409a      	lsls	r2, r3
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	683a      	ldr	r2, [r7, #0]
 8007bcc:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	2b40      	cmp	r3, #64	; 0x40
 8007bd4:	d108      	bne.n	8007be8 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	68ba      	ldr	r2, [r7, #8]
 8007be4:	60da      	str	r2, [r3, #12]
}
 8007be6:	e007      	b.n	8007bf8 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68ba      	ldr	r2, [r7, #8]
 8007bee:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	60da      	str	r2, [r3, #12]
}
 8007bf8:	bf00      	nop
 8007bfa:	371c      	adds	r7, #28
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr
 8007c04:	58025408 	.word	0x58025408
 8007c08:	5802541c 	.word	0x5802541c
 8007c0c:	58025430 	.word	0x58025430
 8007c10:	58025444 	.word	0x58025444
 8007c14:	58025458 	.word	0x58025458
 8007c18:	5802546c 	.word	0x5802546c
 8007c1c:	58025480 	.word	0x58025480
 8007c20:	58025494 	.word	0x58025494

08007c24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a42      	ldr	r2, [pc, #264]	; (8007d3c <DMA_CalcBaseAndBitshift+0x118>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d04a      	beq.n	8007ccc <DMA_CalcBaseAndBitshift+0xa8>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a41      	ldr	r2, [pc, #260]	; (8007d40 <DMA_CalcBaseAndBitshift+0x11c>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d045      	beq.n	8007ccc <DMA_CalcBaseAndBitshift+0xa8>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a3f      	ldr	r2, [pc, #252]	; (8007d44 <DMA_CalcBaseAndBitshift+0x120>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d040      	beq.n	8007ccc <DMA_CalcBaseAndBitshift+0xa8>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a3e      	ldr	r2, [pc, #248]	; (8007d48 <DMA_CalcBaseAndBitshift+0x124>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d03b      	beq.n	8007ccc <DMA_CalcBaseAndBitshift+0xa8>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a3c      	ldr	r2, [pc, #240]	; (8007d4c <DMA_CalcBaseAndBitshift+0x128>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d036      	beq.n	8007ccc <DMA_CalcBaseAndBitshift+0xa8>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a3b      	ldr	r2, [pc, #236]	; (8007d50 <DMA_CalcBaseAndBitshift+0x12c>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d031      	beq.n	8007ccc <DMA_CalcBaseAndBitshift+0xa8>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a39      	ldr	r2, [pc, #228]	; (8007d54 <DMA_CalcBaseAndBitshift+0x130>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d02c      	beq.n	8007ccc <DMA_CalcBaseAndBitshift+0xa8>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a38      	ldr	r2, [pc, #224]	; (8007d58 <DMA_CalcBaseAndBitshift+0x134>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d027      	beq.n	8007ccc <DMA_CalcBaseAndBitshift+0xa8>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a36      	ldr	r2, [pc, #216]	; (8007d5c <DMA_CalcBaseAndBitshift+0x138>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d022      	beq.n	8007ccc <DMA_CalcBaseAndBitshift+0xa8>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a35      	ldr	r2, [pc, #212]	; (8007d60 <DMA_CalcBaseAndBitshift+0x13c>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d01d      	beq.n	8007ccc <DMA_CalcBaseAndBitshift+0xa8>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a33      	ldr	r2, [pc, #204]	; (8007d64 <DMA_CalcBaseAndBitshift+0x140>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d018      	beq.n	8007ccc <DMA_CalcBaseAndBitshift+0xa8>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a32      	ldr	r2, [pc, #200]	; (8007d68 <DMA_CalcBaseAndBitshift+0x144>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d013      	beq.n	8007ccc <DMA_CalcBaseAndBitshift+0xa8>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a30      	ldr	r2, [pc, #192]	; (8007d6c <DMA_CalcBaseAndBitshift+0x148>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d00e      	beq.n	8007ccc <DMA_CalcBaseAndBitshift+0xa8>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a2f      	ldr	r2, [pc, #188]	; (8007d70 <DMA_CalcBaseAndBitshift+0x14c>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d009      	beq.n	8007ccc <DMA_CalcBaseAndBitshift+0xa8>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a2d      	ldr	r2, [pc, #180]	; (8007d74 <DMA_CalcBaseAndBitshift+0x150>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d004      	beq.n	8007ccc <DMA_CalcBaseAndBitshift+0xa8>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a2c      	ldr	r2, [pc, #176]	; (8007d78 <DMA_CalcBaseAndBitshift+0x154>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d101      	bne.n	8007cd0 <DMA_CalcBaseAndBitshift+0xac>
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e000      	b.n	8007cd2 <DMA_CalcBaseAndBitshift+0xae>
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d024      	beq.n	8007d20 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	3b10      	subs	r3, #16
 8007cde:	4a27      	ldr	r2, [pc, #156]	; (8007d7c <DMA_CalcBaseAndBitshift+0x158>)
 8007ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ce4:	091b      	lsrs	r3, r3, #4
 8007ce6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f003 0307 	and.w	r3, r3, #7
 8007cee:	4a24      	ldr	r2, [pc, #144]	; (8007d80 <DMA_CalcBaseAndBitshift+0x15c>)
 8007cf0:	5cd3      	ldrb	r3, [r2, r3]
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2b03      	cmp	r3, #3
 8007cfc:	d908      	bls.n	8007d10 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	461a      	mov	r2, r3
 8007d04:	4b1f      	ldr	r3, [pc, #124]	; (8007d84 <DMA_CalcBaseAndBitshift+0x160>)
 8007d06:	4013      	ands	r3, r2
 8007d08:	1d1a      	adds	r2, r3, #4
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	659a      	str	r2, [r3, #88]	; 0x58
 8007d0e:	e00d      	b.n	8007d2c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	461a      	mov	r2, r3
 8007d16:	4b1b      	ldr	r3, [pc, #108]	; (8007d84 <DMA_CalcBaseAndBitshift+0x160>)
 8007d18:	4013      	ands	r3, r2
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	6593      	str	r3, [r2, #88]	; 0x58
 8007d1e:	e005      	b.n	8007d2c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3714      	adds	r7, #20
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr
 8007d3c:	40020010 	.word	0x40020010
 8007d40:	40020028 	.word	0x40020028
 8007d44:	40020040 	.word	0x40020040
 8007d48:	40020058 	.word	0x40020058
 8007d4c:	40020070 	.word	0x40020070
 8007d50:	40020088 	.word	0x40020088
 8007d54:	400200a0 	.word	0x400200a0
 8007d58:	400200b8 	.word	0x400200b8
 8007d5c:	40020410 	.word	0x40020410
 8007d60:	40020428 	.word	0x40020428
 8007d64:	40020440 	.word	0x40020440
 8007d68:	40020458 	.word	0x40020458
 8007d6c:	40020470 	.word	0x40020470
 8007d70:	40020488 	.word	0x40020488
 8007d74:	400204a0 	.word	0x400204a0
 8007d78:	400204b8 	.word	0x400204b8
 8007d7c:	aaaaaaab 	.word	0xaaaaaaab
 8007d80:	080290d0 	.word	0x080290d0
 8007d84:	fffffc00 	.word	0xfffffc00

08007d88 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b085      	sub	sp, #20
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d90:	2300      	movs	r3, #0
 8007d92:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	699b      	ldr	r3, [r3, #24]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d120      	bne.n	8007dde <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da0:	2b03      	cmp	r3, #3
 8007da2:	d858      	bhi.n	8007e56 <DMA_CheckFifoParam+0xce>
 8007da4:	a201      	add	r2, pc, #4	; (adr r2, 8007dac <DMA_CheckFifoParam+0x24>)
 8007da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007daa:	bf00      	nop
 8007dac:	08007dbd 	.word	0x08007dbd
 8007db0:	08007dcf 	.word	0x08007dcf
 8007db4:	08007dbd 	.word	0x08007dbd
 8007db8:	08007e57 	.word	0x08007e57
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d048      	beq.n	8007e5a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007dcc:	e045      	b.n	8007e5a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007dd6:	d142      	bne.n	8007e5e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007ddc:	e03f      	b.n	8007e5e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	699b      	ldr	r3, [r3, #24]
 8007de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007de6:	d123      	bne.n	8007e30 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dec:	2b03      	cmp	r3, #3
 8007dee:	d838      	bhi.n	8007e62 <DMA_CheckFifoParam+0xda>
 8007df0:	a201      	add	r2, pc, #4	; (adr r2, 8007df8 <DMA_CheckFifoParam+0x70>)
 8007df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df6:	bf00      	nop
 8007df8:	08007e09 	.word	0x08007e09
 8007dfc:	08007e0f 	.word	0x08007e0f
 8007e00:	08007e09 	.word	0x08007e09
 8007e04:	08007e21 	.word	0x08007e21
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	73fb      	strb	r3, [r7, #15]
        break;
 8007e0c:	e030      	b.n	8007e70 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d025      	beq.n	8007e66 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007e1e:	e022      	b.n	8007e66 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e24:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007e28:	d11f      	bne.n	8007e6a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007e2e:	e01c      	b.n	8007e6a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e34:	2b02      	cmp	r3, #2
 8007e36:	d902      	bls.n	8007e3e <DMA_CheckFifoParam+0xb6>
 8007e38:	2b03      	cmp	r3, #3
 8007e3a:	d003      	beq.n	8007e44 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007e3c:	e018      	b.n	8007e70 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	73fb      	strb	r3, [r7, #15]
        break;
 8007e42:	e015      	b.n	8007e70 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00e      	beq.n	8007e6e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	73fb      	strb	r3, [r7, #15]
    break;
 8007e54:	e00b      	b.n	8007e6e <DMA_CheckFifoParam+0xe6>
        break;
 8007e56:	bf00      	nop
 8007e58:	e00a      	b.n	8007e70 <DMA_CheckFifoParam+0xe8>
        break;
 8007e5a:	bf00      	nop
 8007e5c:	e008      	b.n	8007e70 <DMA_CheckFifoParam+0xe8>
        break;
 8007e5e:	bf00      	nop
 8007e60:	e006      	b.n	8007e70 <DMA_CheckFifoParam+0xe8>
        break;
 8007e62:	bf00      	nop
 8007e64:	e004      	b.n	8007e70 <DMA_CheckFifoParam+0xe8>
        break;
 8007e66:	bf00      	nop
 8007e68:	e002      	b.n	8007e70 <DMA_CheckFifoParam+0xe8>
        break;
 8007e6a:	bf00      	nop
 8007e6c:	e000      	b.n	8007e70 <DMA_CheckFifoParam+0xe8>
    break;
 8007e6e:	bf00      	nop
    }
  }

  return status;
 8007e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3714      	adds	r7, #20
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop

08007e80 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a38      	ldr	r2, [pc, #224]	; (8007f74 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d022      	beq.n	8007ede <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a36      	ldr	r2, [pc, #216]	; (8007f78 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d01d      	beq.n	8007ede <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a35      	ldr	r2, [pc, #212]	; (8007f7c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d018      	beq.n	8007ede <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a33      	ldr	r2, [pc, #204]	; (8007f80 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d013      	beq.n	8007ede <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a32      	ldr	r2, [pc, #200]	; (8007f84 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d00e      	beq.n	8007ede <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a30      	ldr	r2, [pc, #192]	; (8007f88 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d009      	beq.n	8007ede <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a2f      	ldr	r2, [pc, #188]	; (8007f8c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d004      	beq.n	8007ede <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a2d      	ldr	r2, [pc, #180]	; (8007f90 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d101      	bne.n	8007ee2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e000      	b.n	8007ee4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d01a      	beq.n	8007f1e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	3b08      	subs	r3, #8
 8007ef0:	4a28      	ldr	r2, [pc, #160]	; (8007f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ef6:	091b      	lsrs	r3, r3, #4
 8007ef8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	4b26      	ldr	r3, [pc, #152]	; (8007f98 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007efe:	4413      	add	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	461a      	mov	r2, r3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a24      	ldr	r2, [pc, #144]	; (8007f9c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007f0c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f003 031f 	and.w	r3, r3, #31
 8007f14:	2201      	movs	r2, #1
 8007f16:	409a      	lsls	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007f1c:	e024      	b.n	8007f68 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	3b10      	subs	r3, #16
 8007f26:	4a1e      	ldr	r2, [pc, #120]	; (8007fa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007f28:	fba2 2303 	umull	r2, r3, r2, r3
 8007f2c:	091b      	lsrs	r3, r3, #4
 8007f2e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	4a1c      	ldr	r2, [pc, #112]	; (8007fa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d806      	bhi.n	8007f46 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	4a1b      	ldr	r2, [pc, #108]	; (8007fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d902      	bls.n	8007f46 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	3308      	adds	r3, #8
 8007f44:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	4b18      	ldr	r3, [pc, #96]	; (8007fac <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007f4a:	4413      	add	r3, r2
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	461a      	mov	r2, r3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	4a16      	ldr	r2, [pc, #88]	; (8007fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007f58:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f003 031f 	and.w	r3, r3, #31
 8007f60:	2201      	movs	r2, #1
 8007f62:	409a      	lsls	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007f68:	bf00      	nop
 8007f6a:	3714      	adds	r7, #20
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr
 8007f74:	58025408 	.word	0x58025408
 8007f78:	5802541c 	.word	0x5802541c
 8007f7c:	58025430 	.word	0x58025430
 8007f80:	58025444 	.word	0x58025444
 8007f84:	58025458 	.word	0x58025458
 8007f88:	5802546c 	.word	0x5802546c
 8007f8c:	58025480 	.word	0x58025480
 8007f90:	58025494 	.word	0x58025494
 8007f94:	cccccccd 	.word	0xcccccccd
 8007f98:	16009600 	.word	0x16009600
 8007f9c:	58025880 	.word	0x58025880
 8007fa0:	aaaaaaab 	.word	0xaaaaaaab
 8007fa4:	400204b8 	.word	0x400204b8
 8007fa8:	4002040f 	.word	0x4002040f
 8007fac:	10008200 	.word	0x10008200
 8007fb0:	40020880 	.word	0x40020880

08007fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d04a      	beq.n	8008060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2b08      	cmp	r3, #8
 8007fce:	d847      	bhi.n	8008060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a25      	ldr	r2, [pc, #148]	; (800806c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d022      	beq.n	8008020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a24      	ldr	r2, [pc, #144]	; (8008070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d01d      	beq.n	8008020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a22      	ldr	r2, [pc, #136]	; (8008074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d018      	beq.n	8008020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a21      	ldr	r2, [pc, #132]	; (8008078 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d013      	beq.n	8008020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a1f      	ldr	r2, [pc, #124]	; (800807c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d00e      	beq.n	8008020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a1e      	ldr	r2, [pc, #120]	; (8008080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d009      	beq.n	8008020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a1c      	ldr	r2, [pc, #112]	; (8008084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d004      	beq.n	8008020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a1b      	ldr	r2, [pc, #108]	; (8008088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d101      	bne.n	8008024 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008020:	2301      	movs	r3, #1
 8008022:	e000      	b.n	8008026 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008024:	2300      	movs	r3, #0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00a      	beq.n	8008040 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	4b17      	ldr	r3, [pc, #92]	; (800808c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800802e:	4413      	add	r3, r2
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	461a      	mov	r2, r3
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4a15      	ldr	r2, [pc, #84]	; (8008090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800803c:	671a      	str	r2, [r3, #112]	; 0x70
 800803e:	e009      	b.n	8008054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	4b14      	ldr	r3, [pc, #80]	; (8008094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008044:	4413      	add	r3, r2
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	461a      	mov	r2, r3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4a11      	ldr	r2, [pc, #68]	; (8008098 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008052:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	3b01      	subs	r3, #1
 8008058:	2201      	movs	r2, #1
 800805a:	409a      	lsls	r2, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008060:	bf00      	nop
 8008062:	3714      	adds	r7, #20
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr
 800806c:	58025408 	.word	0x58025408
 8008070:	5802541c 	.word	0x5802541c
 8008074:	58025430 	.word	0x58025430
 8008078:	58025444 	.word	0x58025444
 800807c:	58025458 	.word	0x58025458
 8008080:	5802546c 	.word	0x5802546c
 8008084:	58025480 	.word	0x58025480
 8008088:	58025494 	.word	0x58025494
 800808c:	1600963f 	.word	0x1600963f
 8008090:	58025940 	.word	0x58025940
 8008094:	1000823f 	.word	0x1000823f
 8008098:	40020940 	.word	0x40020940

0800809c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d101      	bne.n	80080ae <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	e0c6      	b.n	800823c <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d102      	bne.n	80080bc <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f00a f8ce 	bl	8012258 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2223      	movs	r2, #35	; 0x23
 80080c0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80080c2:	4b60      	ldr	r3, [pc, #384]	; (8008244 <HAL_ETH_Init+0x1a8>)
 80080c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80080c8:	4a5e      	ldr	r2, [pc, #376]	; (8008244 <HAL_ETH_Init+0x1a8>)
 80080ca:	f043 0302 	orr.w	r3, r3, #2
 80080ce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80080d2:	4b5c      	ldr	r3, [pc, #368]	; (8008244 <HAL_ETH_Init+0x1a8>)
 80080d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80080d8:	f003 0302 	and.w	r3, r3, #2
 80080dc:	60bb      	str	r3, [r7, #8]
 80080de:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	7a1b      	ldrb	r3, [r3, #8]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d103      	bne.n	80080f0 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80080e8:	2000      	movs	r0, #0
 80080ea:	f7fc f83b 	bl	8004164 <HAL_SYSCFG_ETHInterfaceSelect>
 80080ee:	e003      	b.n	80080f8 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80080f0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80080f4:	f7fc f836 	bl	8004164 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f042 0201 	orr.w	r2, r2, #1
 800810a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800810e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008110:	f7fb ffec 	bl	80040ec <HAL_GetTick>
 8008114:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8008116:	e00f      	b.n	8008138 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8008118:	f7fb ffe8 	bl	80040ec <HAL_GetTick>
 800811c:	4602      	mov	r2, r0
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	1ad3      	subs	r3, r2, r3
 8008122:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008126:	d907      	bls.n	8008138 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2204      	movs	r2, #4
 800812c:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	22e0      	movs	r2, #224	; 0xe0
 8008132:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8008134:	2301      	movs	r3, #1
 8008136:	e081      	b.n	800823c <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f003 0301 	and.w	r3, r3, #1
 8008146:	2b00      	cmp	r3, #0
 8008148:	d1e6      	bne.n	8008118 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f001 faa4 	bl	8009698 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8008150:	f003 fac0 	bl	800b6d4 <HAL_RCC_GetHCLKFreq>
 8008154:	4603      	mov	r3, r0
 8008156:	4a3c      	ldr	r2, [pc, #240]	; (8008248 <HAL_ETH_Init+0x1ac>)
 8008158:	fba2 2303 	umull	r2, r3, r2, r3
 800815c:	0c9a      	lsrs	r2, r3, #18
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	3a01      	subs	r2, #1
 8008164:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f001 f9f7 	bl	800955c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8008184:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8008188:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	695b      	ldr	r3, [r3, #20]
 800818e:	f003 0303 	and.w	r3, r3, #3
 8008192:	2b00      	cmp	r3, #0
 8008194:	d007      	beq.n	80081a6 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2201      	movs	r2, #1
 800819a:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	22e0      	movs	r2, #224	; 0xe0
 80081a0:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	e04a      	b.n	800823c <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	f241 1308 	movw	r3, #4360	; 0x1108
 80081ae:	4413      	add	r3, r2
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	4b26      	ldr	r3, [pc, #152]	; (800824c <HAL_ETH_Init+0x1b0>)
 80081b4:	4013      	ands	r3, r2
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	6952      	ldr	r2, [r2, #20]
 80081ba:	0052      	lsls	r2, r2, #1
 80081bc:	6879      	ldr	r1, [r7, #4]
 80081be:	6809      	ldr	r1, [r1, #0]
 80081c0:	431a      	orrs	r2, r3
 80081c2:	f241 1308 	movw	r3, #4360	; 0x1108
 80081c6:	440b      	add	r3, r1
 80081c8:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f001 fabc 	bl	8009748 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f001 fb00 	bl	80097d6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	3305      	adds	r3, #5
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	021a      	lsls	r2, r3, #8
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	3304      	adds	r3, #4
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	4619      	mov	r1, r3
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	430a      	orrs	r2, r1
 80081f0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	3303      	adds	r3, #3
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	061a      	lsls	r2, r3, #24
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	3302      	adds	r3, #2
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	041b      	lsls	r3, r3, #16
 8008208:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	3301      	adds	r3, #1
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8008214:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8008222:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8008224:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2210      	movs	r2, #16
 8008232:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2210      	movs	r2, #16
 8008238:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800823a:	2300      	movs	r3, #0
}
 800823c:	4618      	mov	r0, r3
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}
 8008244:	58024400 	.word	0x58024400
 8008248:	431bde83 	.word	0x431bde83
 800824c:	ffff8001 	.word	0xffff8001

08008250 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8008250:	b480      	push	{r7}
 8008252:	b087      	sub	sp, #28
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]
 800825c:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 800825e:	68fa      	ldr	r2, [r7, #12]
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	3310      	adds	r3, #16
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	4413      	add	r3, r2
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d002      	beq.n	8008278 <HAL_ETH_DescAssignMemory+0x28>
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	2b03      	cmp	r3, #3
 8008276:	d904      	bls.n	8008282 <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2201      	movs	r2, #1
 800827c:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	e021      	b.n	80082c6 <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d00b      	beq.n	80082b8 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 80082a0:	683a      	ldr	r2, [r7, #0]
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 80082a6:	683a      	ldr	r2, [r7, #0]
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	371c      	adds	r7, #28
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr

080082d2 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80082d2:	b480      	push	{r7}
 80082d4:	b083      	sub	sp, #12
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
  if(heth->gState == HAL_ETH_STATE_READY)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082de:	2b10      	cmp	r3, #16
 80082e0:	d14c      	bne.n	800837c <HAL_ETH_Start+0xaa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2223      	movs	r2, #35	; 0x23
 80082e6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f042 0202 	orr.w	r2, r2, #2
 80082f6:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f042 0201 	orr.w	r2, r2, #1
 8008306:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f042 0201 	orr.w	r2, r2, #1
 8008318:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	f241 1304 	movw	r3, #4356	; 0x1104
 8008324:	4413      	add	r3, r2
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	6811      	ldr	r1, [r2, #0]
 800832c:	f043 0201 	orr.w	r2, r3, #1
 8008330:	f241 1304 	movw	r3, #4356	; 0x1104
 8008334:	440b      	add	r3, r1
 8008336:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	f241 1308 	movw	r3, #4360	; 0x1108
 8008340:	4413      	add	r3, r2
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	6811      	ldr	r1, [r2, #0]
 8008348:	f043 0201 	orr.w	r2, r3, #1
 800834c:	f241 1308 	movw	r3, #4360	; 0x1108
 8008350:	440b      	add	r3, r1
 8008352:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8008366:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800836a:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2210      	movs	r2, #16
 8008370:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2222      	movs	r2, #34	; 0x22
 8008376:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8008378:	2300      	movs	r3, #0
 800837a:	e000      	b.n	800837e <HAL_ETH_Start+0xac>
  }
  else
  {
    return HAL_ERROR;
 800837c:	2301      	movs	r3, #1
  }
}
 800837e:	4618      	mov	r0, r3
 8008380:	370c      	adds	r7, #12
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr

0800838a <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800838a:	b480      	push	{r7}
 800838c:	b083      	sub	sp, #12
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
  if(heth->gState != HAL_ETH_STATE_RESET)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008396:	2b00      	cmp	r3, #0
 8008398:	d040      	beq.n	800841c <HAL_ETH_Stop+0x92>
  {
     /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2223      	movs	r2, #35	; 0x23
 800839e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	f241 1304 	movw	r3, #4356	; 0x1104
 80083a8:	4413      	add	r3, r2
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	6811      	ldr	r1, [r2, #0]
 80083b0:	f023 0201 	bic.w	r2, r3, #1
 80083b4:	f241 1304 	movw	r3, #4356	; 0x1104
 80083b8:	440b      	add	r3, r1
 80083ba:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	f241 1308 	movw	r3, #4360	; 0x1108
 80083c4:	4413      	add	r3, r2
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	6811      	ldr	r1, [r2, #0]
 80083cc:	f023 0201 	bic.w	r2, r3, #1
 80083d0:	f241 1308 	movw	r3, #4360	; 0x1108
 80083d4:	440b      	add	r3, r1
 80083d6:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f022 0201 	bic.w	r2, r2, #1
 80083e6:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f042 0201 	orr.w	r2, r2, #1
 80083f8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f022 0202 	bic.w	r2, r2, #2
 800840a:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2210      	movs	r2, #16
 8008410:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2210      	movs	r2, #16
 8008416:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 8008418:	2300      	movs	r3, #0
 800841a:	e000      	b.n	800841e <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 800841c:	2301      	movs	r3, #1
  }
}
 800841e:	4618      	mov	r0, r3
 8008420:	370c      	adds	r7, #12
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr

0800842a <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b086      	sub	sp, #24
 800842e:	af00      	add	r7, sp, #0
 8008430:	60f8      	str	r0, [r7, #12]
 8008432:	60b9      	str	r1, [r7, #8]
 8008434:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d107      	bne.n	800844c <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008440:	f043 0201 	orr.w	r2, r3, #1
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	e073      	b.n	8008534 <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008450:	2b10      	cmp	r3, #16
 8008452:	d16e      	bne.n	8008532 <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8008454:	2200      	movs	r2, #0
 8008456:	68b9      	ldr	r1, [r7, #8]
 8008458:	68f8      	ldr	r0, [r7, #12]
 800845a:	f001 fa19 	bl	8009890 <ETH_Prepare_Tx_Descriptors>
 800845e:	4603      	mov	r3, r0
 8008460:	2b00      	cmp	r3, #0
 8008462:	d007      	beq.n	8008474 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008468:	f043 0202 	orr.w	r2, r3, #2
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 8008470:	2301      	movs	r3, #1
 8008472:	e05f      	b.n	8008534 <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	3206      	adds	r2, #6
 800847c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008480:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008486:	1c5a      	adds	r2, r3, #1
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	629a      	str	r2, [r3, #40]	; 0x28
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008490:	2b03      	cmp	r3, #3
 8008492:	d904      	bls.n	800849e <HAL_ETH_Transmit+0x74>
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008498:	1f1a      	subs	r2, r3, #4
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	68fa      	ldr	r2, [r7, #12]
 80084a8:	3106      	adds	r1, #6
 80084aa:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80084ae:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80084b2:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 80084b4:	f7fb fe1a 	bl	80040ec <HAL_GetTick>
 80084b8:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80084ba:	e034      	b.n	8008526 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d011      	beq.n	80084f2 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084d2:	f043 0208 	orr.w	r2, r3, #8
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	22e0      	movs	r2, #224	; 0xe0
 80084ec:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	e020      	b.n	8008534 <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084f8:	d015      	beq.n	8008526 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 80084fa:	f7fb fdf7 	bl	80040ec <HAL_GetTick>
 80084fe:	4602      	mov	r2, r0
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	1ad3      	subs	r3, r2, r3
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	429a      	cmp	r2, r3
 8008508:	d302      	bcc.n	8008510 <HAL_ETH_Transmit+0xe6>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d10a      	bne.n	8008526 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008514:	f043 0204 	orr.w	r2, r3, #4
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	22e0      	movs	r2, #224	; 0xe0
 8008520:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	e006      	b.n	8008534 <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	68db      	ldr	r3, [r3, #12]
 800852a:	2b00      	cmp	r3, #0
 800852c:	dbc6      	blt.n	80084bc <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800852e:	2300      	movs	r3, #0
 8008530:	e000      	b.n	8008534 <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 8008532:	2301      	movs	r3, #1
  }
}
 8008534:	4618      	mov	r0, r3
 8008536:	3718      	adds	r7, #24
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 800853c:	b480      	push	{r7}
 800853e:	b089      	sub	sp, #36	; 0x24
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	3344      	adds	r3, #68	; 0x44
 8008548:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	69fa      	ldr	r2, [r7, #28]
 8008554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008558:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 800855a:	2300      	movs	r3, #0
 800855c:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 800855e:	2300      	movs	r3, #0
 8008560:	613b      	str	r3, [r7, #16]
 8008562:	2300      	movs	r3, #0
 8008564:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	699b      	ldr	r3, [r3, #24]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d06b      	beq.n	8008646 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 800856e:	2300      	movs	r3, #0
 8008570:	e0ce      	b.n	8008710 <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	3301      	adds	r3, #1
 8008576:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8008578:	69bb      	ldr	r3, [r7, #24]
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008580:	2b00      	cmp	r3, #0
 8008582:	d036      	beq.n	80085f2 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	3301      	adds	r3, #1
 8008588:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	2b01      	cmp	r3, #1
 800858e:	d101      	bne.n	8008594 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	3301      	adds	r3, #1
 8008598:	61fb      	str	r3, [r7, #28]
 800859a:	69fb      	ldr	r3, [r7, #28]
 800859c:	2b03      	cmp	r3, #3
 800859e:	d902      	bls.n	80085a6 <HAL_ETH_IsRxDataAvailable+0x6a>
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	3b04      	subs	r3, #4
 80085a4:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	69fa      	ldr	r2, [r7, #28]
 80085aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ae:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 80085b0:	69bb      	ldr	r3, [r7, #24]
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	db11      	blt.n	80085dc <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00b      	beq.n	80085dc <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	2201      	movs	r2, #1
 80085c8:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	3301      	adds	r3, #1
 80085ce:	61fb      	str	r3, [r7, #28]
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	2b03      	cmp	r3, #3
 80085d4:	d902      	bls.n	80085dc <HAL_ETH_IsRxDataAvailable+0xa0>
 80085d6:	69fb      	ldr	r3, [r7, #28]
 80085d8:	3b04      	subs	r3, #4
 80085da:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	69fa      	ldr	r2, [r7, #28]
 80085e0:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	68fa      	ldr	r2, [r7, #12]
 80085e6:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	693a      	ldr	r2, [r7, #16]
 80085ec:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 80085ee:	2301      	movs	r3, #1
 80085f0:	e08e      	b.n	8008710 <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80085f2:	69bb      	ldr	r3, [r7, #24]
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d012      	beq.n	8008624 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8008602:	2301      	movs	r3, #1
 8008604:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	3301      	adds	r3, #1
 800860a:	61fb      	str	r3, [r7, #28]
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	2b03      	cmp	r3, #3
 8008610:	d902      	bls.n	8008618 <HAL_ETH_IsRxDataAvailable+0xdc>
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	3b04      	subs	r3, #4
 8008616:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	69fa      	ldr	r2, [r7, #28]
 800861c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008620:	61bb      	str	r3, [r7, #24]
 8008622:	e010      	b.n	8008646 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	3301      	adds	r3, #1
 8008628:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	3301      	adds	r3, #1
 800862e:	61fb      	str	r3, [r7, #28]
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	2b03      	cmp	r3, #3
 8008634:	d902      	bls.n	800863c <HAL_ETH_IsRxDataAvailable+0x100>
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	3b04      	subs	r3, #4
 800863a:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	69fa      	ldr	r2, [r7, #28]
 8008640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008644:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	68db      	ldr	r3, [r3, #12]
 800864a:	2b00      	cmp	r3, #0
 800864c:	db02      	blt.n	8008654 <HAL_ETH_IsRxDataAvailable+0x118>
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	2b03      	cmp	r3, #3
 8008652:	d98e      	bls.n	8008572 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d056      	beq.n	8008708 <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	69fa      	ldr	r2, [r7, #28]
 800865e:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	68fa      	ldr	r2, [r7, #12]
 8008664:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	69fa      	ldr	r2, [r7, #28]
 800866e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008672:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8008674:	2300      	movs	r3, #0
 8008676:	617b      	str	r3, [r7, #20]
 8008678:	e03b      	b.n	80086f2 <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	691a      	ldr	r2, [r3, #16]
 800867e:	69bb      	ldr	r3, [r7, #24]
 8008680:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8008682:	69bb      	ldr	r3, [r7, #24]
 8008684:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008688:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 800868a:	69bb      	ldr	r3, [r7, #24]
 800868c:	695b      	ldr	r3, [r3, #20]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d009      	beq.n	80086a6 <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	695a      	ldr	r2, [r3, #20]
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 800869a:	69bb      	ldr	r3, [r7, #24]
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80086a6:	69bb      	ldr	r3, [r7, #24]
 80086a8:	68db      	ldr	r3, [r3, #12]
 80086aa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	6a1b      	ldr	r3, [r3, #32]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d005      	beq.n	80086c6 <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	3b01      	subs	r3, #1
 80086ca:	697a      	ldr	r2, [r7, #20]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d20d      	bcs.n	80086ec <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 80086d0:	69fb      	ldr	r3, [r7, #28]
 80086d2:	3301      	adds	r3, #1
 80086d4:	61fb      	str	r3, [r7, #28]
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	2b03      	cmp	r3, #3
 80086da:	d902      	bls.n	80086e2 <HAL_ETH_IsRxDataAvailable+0x1a6>
 80086dc:	69fb      	ldr	r3, [r7, #28]
 80086de:	3b04      	subs	r3, #4
 80086e0:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	69fa      	ldr	r2, [r7, #28]
 80086e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086ea:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	3301      	adds	r3, #1
 80086f0:	617b      	str	r3, [r7, #20]
 80086f2:	697a      	ldr	r2, [r7, #20]
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d3bf      	bcc.n	800867a <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6819      	ldr	r1, [r3, #0]
 80086fe:	69ba      	ldr	r2, [r7, #24]
 8008700:	f241 1328 	movw	r3, #4392	; 0x1128
 8008704:	440b      	add	r3, r1
 8008706:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	2200      	movs	r2, #0
 800870c:	619a      	str	r2, [r3, #24]

  return 0;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3724      	adds	r7, #36	; 0x24
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b08a      	sub	sp, #40	; 0x28
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	3344      	adds	r3, #68	; 0x44
 800872a:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	695b      	ldr	r3, [r3, #20]
 8008730:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8008732:	2300      	movs	r3, #0
 8008734:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800873a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800873e:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d104      	bne.n	8008754 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2201      	movs	r2, #1
 800874e:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8008750:	2301      	movs	r3, #1
 8008752:	e07d      	b.n	8008850 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	699b      	ldr	r3, [r3, #24]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d10f      	bne.n	800877c <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f7ff feed 	bl	800853c <HAL_ETH_IsRxDataAvailable>
 8008762:	4603      	mov	r3, r0
 8008764:	2b00      	cmp	r3, #0
 8008766:	d101      	bne.n	800876c <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8008768:	2301      	movs	r3, #1
 800876a:	e071      	b.n	8008850 <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	695b      	ldr	r3, [r3, #20]
 8008770:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800877a:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 800877c:	2300      	movs	r3, #0
 800877e:	623b      	str	r3, [r7, #32]
 8008780:	e031      	b.n	80087e6 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8008782:	69bb      	ldr	r3, [r7, #24]
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	461a      	mov	r2, r3
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	695a      	ldr	r2, [r3, #20]
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	695b      	ldr	r3, [r3, #20]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d00b      	beq.n	80087b4 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	695b      	ldr	r3, [r3, #20]
 80087a6:	461a      	mov	r2, r3
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	695a      	ldr	r2, [r3, #20]
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80087bc:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80087be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c0:	3301      	adds	r3, #1
 80087c2:	627b      	str	r3, [r7, #36]	; 0x24
 80087c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c6:	2b03      	cmp	r3, #3
 80087c8:	d902      	bls.n	80087d0 <HAL_ETH_GetRxDataBuffer+0xb4>
 80087ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087cc:	3b04      	subs	r3, #4
 80087ce:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087d8:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80087e0:	6a3b      	ldr	r3, [r7, #32]
 80087e2:	3301      	adds	r3, #1
 80087e4:	623b      	str	r3, [r7, #32]
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	699b      	ldr	r3, [r3, #24]
 80087ea:	3b01      	subs	r3, #1
 80087ec:	6a3a      	ldr	r2, [r7, #32]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d3c7      	bcc.n	8008782 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 80087f2:	69bb      	ldr	r3, [r7, #24]
 80087f4:	68db      	ldr	r3, [r3, #12]
 80087f6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	1ad3      	subs	r3, r2, r3
 80087fe:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	461a      	mov	r2, r3
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	695b      	ldr	r3, [r3, #20]
 800880e:	68fa      	ldr	r2, [r7, #12]
 8008810:	429a      	cmp	r2, r3
 8008812:	d803      	bhi.n	800881c <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	68fa      	ldr	r2, [r7, #12]
 8008818:	605a      	str	r2, [r3, #4]
 800881a:	e018      	b.n	800884e <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 800881c:	69bb      	ldr	r3, [r7, #24]
 800881e:	695b      	ldr	r3, [r3, #20]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d012      	beq.n	800884a <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	695a      	ldr	r2, [r3, #20]
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8008832:	69bb      	ldr	r3, [r7, #24]
 8008834:	695b      	ldr	r3, [r3, #20]
 8008836:	461a      	mov	r2, r3
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	695b      	ldr	r3, [r3, #20]
 8008840:	68fa      	ldr	r2, [r7, #12]
 8008842:	1ad2      	subs	r2, r2, r3
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	605a      	str	r2, [r3, #4]
 8008848:	e001      	b.n	800884e <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	e000      	b.n	8008850 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	3728      	adds	r7, #40	; 0x28
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b086      	sub	sp, #24
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	3344      	adds	r3, #68	; 0x44
 8008866:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	695b      	ldr	r3, [r3, #20]
 800886c:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	699b      	ldr	r3, [r3, #24]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d107      	bne.n	8008886 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f7ff fe60 	bl	800853c <HAL_ETH_IsRxDataAvailable>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d101      	bne.n	8008886 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8008882:	2301      	movs	r3, #1
 8008884:	e017      	b.n	80088b6 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	699a      	ldr	r2, [r3, #24]
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	4413      	add	r3, r2
 800888e:	3b01      	subs	r3, #1
 8008890:	617b      	str	r3, [r7, #20]
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	2b03      	cmp	r3, #3
 8008896:	d902      	bls.n	800889e <HAL_ETH_GetRxDataLength+0x46>
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	3b04      	subs	r3, #4
 800889c:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	697a      	ldr	r2, [r7, #20]
 80088a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088a6:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80088b4:	2300      	movs	r3, #0
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3718      	adds	r7, #24
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 80088be:	b480      	push	{r7}
 80088c0:	b089      	sub	sp, #36	; 0x24
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	3344      	adds	r3, #68	; 0x44
 80088ca:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	695b      	ldr	r3, [r3, #20]
 80088d0:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	69fa      	ldr	r2, [r7, #28]
 80088d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088da:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	699b      	ldr	r3, [r3, #24]
 80088e0:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	699b      	ldr	r3, [r3, #24]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d101      	bne.n	80088ee <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 80088ea:	2301      	movs	r3, #1
 80088ec:	e057      	b.n	800899e <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	69db      	ldr	r3, [r3, #28]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d002      	beq.n	80088fc <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	3301      	adds	r3, #1
 80088fa:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80088fc:	2300      	movs	r3, #0
 80088fe:	613b      	str	r3, [r7, #16]
 8008900:	e03b      	b.n	800897a <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	691a      	ldr	r2, [r3, #16]
 8008906:	69bb      	ldr	r3, [r7, #24]
 8008908:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008910:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8008912:	69bb      	ldr	r3, [r7, #24]
 8008914:	695b      	ldr	r3, [r3, #20]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d009      	beq.n	800892e <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 800891a:	69bb      	ldr	r3, [r7, #24]
 800891c:	695a      	ldr	r2, [r3, #20]
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8008922:	69bb      	ldr	r3, [r7, #24]
 8008924:	68db      	ldr	r3, [r3, #12]
 8008926:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800892a:	69bb      	ldr	r3, [r7, #24]
 800892c:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 800892e:	69bb      	ldr	r3, [r7, #24]
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008936:	69bb      	ldr	r3, [r7, #24]
 8008938:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	6a1b      	ldr	r3, [r3, #32]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d005      	beq.n	800894e <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	68db      	ldr	r3, [r3, #12]
 8008946:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	3b01      	subs	r3, #1
 8008952:	693a      	ldr	r2, [r7, #16]
 8008954:	429a      	cmp	r2, r3
 8008956:	d20d      	bcs.n	8008974 <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	3301      	adds	r3, #1
 800895c:	61fb      	str	r3, [r7, #28]
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	2b03      	cmp	r3, #3
 8008962:	d902      	bls.n	800896a <HAL_ETH_BuildRxDescriptors+0xac>
 8008964:	69fb      	ldr	r3, [r7, #28]
 8008966:	3b04      	subs	r3, #4
 8008968:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	69fa      	ldr	r2, [r7, #28]
 800896e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008972:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	3301      	adds	r3, #1
 8008978:	613b      	str	r3, [r7, #16]
 800897a:	693a      	ldr	r2, [r7, #16]
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	429a      	cmp	r2, r3
 8008980:	d3bf      	bcc.n	8008902 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6819      	ldr	r1, [r3, #0]
 8008986:	69ba      	ldr	r2, [r7, #24]
 8008988:	f241 1328 	movw	r3, #4392	; 0x1128
 800898c:	440b      	add	r3, r1
 800898e:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2200      	movs	r2, #0
 8008994:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800899c:	2300      	movs	r3, #0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3724      	adds	r7, #36	; 0x24
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr
	...

080089ac <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089c2:	2b40      	cmp	r3, #64	; 0x40
 80089c4:	d113      	bne.n	80089ee <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	f241 1334 	movw	r3, #4404	; 0x1134
 80089ce:	4413      	add	r3, r2
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089d6:	2b40      	cmp	r3, #64	; 0x40
 80089d8:	d109      	bne.n	80089ee <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 f8f2 	bl	8008bc4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80089e8:	f248 0240 	movw	r2, #32832	; 0x8040
 80089ec:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f003 0301 	and.w	r3, r3, #1
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d113      	bne.n	8008a28 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	f241 1334 	movw	r3, #4404	; 0x1134
 8008a08:	4413      	add	r3, r2
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f003 0301 	and.w	r3, r3, #1
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d109      	bne.n	8008a28 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 f8cb 	bl	8008bb0 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8008a22:	f248 0201 	movw	r2, #32769	; 0x8001
 8008a26:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a3a:	d149      	bne.n	8008ad0 <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	f241 1334 	movw	r3, #4404	; 0x1134
 8008a44:	4413      	add	r3, r2
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a50:	d13e      	bne.n	8008ad0 <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a56:	f043 0208 	orr.w	r2, r3, #8
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	675a      	str	r2, [r3, #116]	; 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a70:	d11b      	bne.n	8008aaa <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	f241 1302 	movw	r3, #4354	; 0x1102
 8008a80:	4013      	ands	r3, r2
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	6793      	str	r3, [r2, #120]	; 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	f241 1334 	movw	r3, #4404	; 0x1134
 8008a8e:	4413      	add	r3, r2
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	6811      	ldr	r1, [r2, #0]
 8008a96:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008a9a:	f241 1334 	movw	r3, #4404	; 0x1134
 8008a9e:	440b      	add	r3, r1
 8008aa0:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	22e0      	movs	r2, #224	; 0xe0
 8008aa6:	66da      	str	r2, [r3, #108]	; 0x6c
 8008aa8:	e00f      	b.n	8008aca <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	679a      	str	r2, [r3, #120]	; 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8008ac4:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8008ac8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 f884 	bl	8008bd8 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008ad8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008adc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008ae0:	d10e      	bne.n	8008b00 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	67da      	str	r2, [r3, #124]	; 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	22e0      	movs	r2, #224	; 0xe0
 8008af2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 f879 	bl	8008bec <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2200      	movs	r2, #0
 8008afe:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b08:	f003 0310 	and.w	r3, r3, #16
 8008b0c:	2b10      	cmp	r3, #16
 8008b0e:	d10f      	bne.n	8008b30 <HAL_ETH_IRQHandler+0x184>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008b18:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 f86c 	bl	8008c00 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b38:	f003 0320 	and.w	r3, r3, #32
 8008b3c:	2b20      	cmp	r3, #32
 8008b3e:	d10f      	bne.n	8008b60 <HAL_ETH_IRQHandler+0x1b4>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008b48:	f003 020f 	and.w	r2, r3, #15
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 f85e 	bl	8008c14 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8008b60:	f7fd f8ba 	bl	8005cd8 <HAL_GetCurrentCPUID>
 8008b64:	4603      	mov	r3, r0
 8008b66:	2b03      	cmp	r3, #3
 8008b68:	d10d      	bne.n	8008b86 <HAL_ETH_IRQHandler+0x1da>
  {
    /* check ETH WAKEUP exti flag */
    if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8008b6a:	4b0f      	ldr	r3, [pc, #60]	; (8008ba8 <HAL_ETH_IRQHandler+0x1fc>)
 8008b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d014      	beq.n	8008ba0 <HAL_ETH_IRQHandler+0x1f4>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8008b76:	4b0c      	ldr	r3, [pc, #48]	; (8008ba8 <HAL_ETH_IRQHandler+0x1fc>)
 8008b78:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8008b7c:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 f852 	bl	8008c28 <HAL_ETH_WakeUpCallback>
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
#endif
  }
#endif
}
 8008b84:	e00c      	b.n	8008ba0 <HAL_ETH_IRQHandler+0x1f4>
    if(__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8008b86:	4b09      	ldr	r3, [pc, #36]	; (8008bac <HAL_ETH_IRQHandler+0x200>)
 8008b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d006      	beq.n	8008ba0 <HAL_ETH_IRQHandler+0x1f4>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8008b92:	4b06      	ldr	r3, [pc, #24]	; (8008bac <HAL_ETH_IRQHandler+0x200>)
 8008b94:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8008b98:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 f844 	bl	8008c28 <HAL_ETH_WakeUpCallback>
}
 8008ba0:	bf00      	nop
 8008ba2:	3708      	adds	r7, #8
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	58000080 	.word	0x58000080
 8008bac:	580000c0 	.word	0x580000c0

08008bb0 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8008bb8:	bf00      	nop
 8008bba:	370c      	adds	r7, #12
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8008bcc:	bf00      	nop
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8008be0:	bf00      	nop
 8008be2:	370c      	adds	r7, #12
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8008bf4:	bf00      	nop
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b083      	sub	sp, #12
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8008c08:	bf00      	nop
 8008c0a:	370c      	adds	r7, #12
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8008c1c:	bf00      	nop
 8008c1e:	370c      	adds	r7, #12
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8008c30:	bf00      	nop
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b086      	sub	sp, #24
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	60b9      	str	r1, [r7, #8]
 8008c46:	607a      	str	r2, [r7, #4]
 8008c48:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008c52:	f003 0301 	and.w	r3, r3, #1
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d001      	beq.n	8008c5e <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e03e      	b.n	8008cdc <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008c66:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	055b      	lsls	r3, r3, #21
 8008c72:	4313      	orrs	r3, r2
 8008c74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	041b      	lsls	r3, r3, #16
 8008c80:	4313      	orrs	r3, r2
 8008c82:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	f043 030c 	orr.w	r3, r3, #12
 8008c8a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	f043 0301 	orr.w	r3, r3, #1
 8008c92:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	697a      	ldr	r2, [r7, #20]
 8008c9a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8008c9e:	f7fb fa25 	bl	80040ec <HAL_GetTick>
 8008ca2:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8008ca4:	e009      	b.n	8008cba <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8008ca6:	f7fb fa21 	bl	80040ec <HAL_GetTick>
 8008caa:	4602      	mov	r2, r0
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	1ad3      	subs	r3, r2, r3
 8008cb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008cb4:	d901      	bls.n	8008cba <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e010      	b.n	8008cdc <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008cc2:	f003 0301 	and.w	r3, r3, #1
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d1ed      	bne.n	8008ca6 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008cda:	2300      	movs	r3, #0
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3718      	adds	r7, #24
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b086      	sub	sp, #24
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	60b9      	str	r1, [r7, #8]
 8008cee:	607a      	str	r2, [r7, #4]
 8008cf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008cfa:	f003 0301 	and.w	r3, r3, #1
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d001      	beq.n	8008d06 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8008d02:	2301      	movs	r3, #1
 8008d04:	e03c      	b.n	8008d80 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008d0e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	055b      	lsls	r3, r3, #21
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	041b      	lsls	r3, r3, #16
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	f023 030c 	bic.w	r3, r3, #12
 8008d32:	f043 0304 	orr.w	r3, r3, #4
 8008d36:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	f043 0301 	orr.w	r3, r3, #1
 8008d3e:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	b29a      	uxth	r2, r3
 8008d44:	4b10      	ldr	r3, [pc, #64]	; (8008d88 <HAL_ETH_WritePHYRegister+0xa4>)
 8008d46:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8008d4a:	4a0f      	ldr	r2, [pc, #60]	; (8008d88 <HAL_ETH_WritePHYRegister+0xa4>)
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8008d52:	f7fb f9cb 	bl	80040ec <HAL_GetTick>
 8008d56:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8008d58:	e009      	b.n	8008d6e <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8008d5a:	f7fb f9c7 	bl	80040ec <HAL_GetTick>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	1ad3      	subs	r3, r2, r3
 8008d64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d68:	d901      	bls.n	8008d6e <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e008      	b.n	8008d80 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008d76:	f003 0301 	and.w	r3, r3, #1
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d1ed      	bne.n	8008d5a <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8008d7e:	2300      	movs	r3, #0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3718      	adds	r7, #24
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	40028000 	.word	0x40028000

08008d8c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d101      	bne.n	8008da0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	e1c3      	b.n	8009128 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f003 020c 	and.w	r2, r3, #12
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f003 0310 	and.w	r3, r3, #16
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	bf14      	ite	ne
 8008dbc:	2301      	movne	r3, #1
 8008dbe:	2300      	moveq	r3, #0
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	bf0c      	ite	eq
 8008de6:	2301      	moveq	r3, #1
 8008de8:	2300      	movne	r3, #0
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	461a      	mov	r2, r3
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	bf14      	ite	ne
 8008e02:	2301      	movne	r3, #1
 8008e04:	2300      	moveq	r3, #0
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	461a      	mov	r2, r3
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	bf0c      	ite	eq
 8008e1c:	2301      	moveq	r3, #1
 8008e1e:	2300      	movne	r3, #0
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	461a      	mov	r2, r3
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	bf14      	ite	ne
 8008e36:	2301      	movne	r3, #1
 8008e38:	2300      	moveq	r3, #0
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	bf14      	ite	ne
 8008e50:	2301      	movne	r3, #1
 8008e52:	2300      	moveq	r3, #0
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	461a      	mov	r2, r3
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	bf14      	ite	ne
 8008e86:	2301      	movne	r3, #1
 8008e88:	2300      	moveq	r3, #0
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	bf0c      	ite	eq
 8008ea0:	2301      	moveq	r3, #1
 8008ea2:	2300      	movne	r3, #0
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	bf0c      	ite	eq
 8008eba:	2301      	moveq	r3, #1
 8008ebc:	2300      	movne	r3, #0
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	bf14      	ite	ne
 8008ed4:	2301      	movne	r3, #1
 8008ed6:	2300      	moveq	r3, #0
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	461a      	mov	r2, r3
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	bf14      	ite	ne
 8008eee:	2301      	movne	r3, #1
 8008ef0:	2300      	moveq	r3, #0
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	bf14      	ite	ne
 8008f08:	2301      	movne	r3, #1
 8008f0a:	2300      	moveq	r3, #0
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	461a      	mov	r2, r3
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	bf14      	ite	ne
 8008f22:	2301      	movne	r3, #1
 8008f24:	2300      	moveq	r3, #0
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	461a      	mov	r2, r3
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	bf14      	ite	ne
 8008f4a:	2301      	movne	r3, #1
 8008f4c:	2300      	moveq	r3, #0
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	461a      	mov	r2, r3
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	bf0c      	ite	eq
 8008f80:	2301      	moveq	r3, #1
 8008f82:	2300      	movne	r3, #0
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	461a      	mov	r2, r3
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	bf14      	ite	ne
 8008f9c:	2301      	movne	r3, #1
 8008f9e:	2300      	moveq	r3, #0
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	bf14      	ite	ne
 8008fb8:	2301      	movne	r3, #1
 8008fba:	2300      	moveq	r3, #0
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	bf14      	ite	ne
 8008fd4:	2301      	movne	r3, #1
 8008fd6:	2300      	moveq	r3, #0
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	461a      	mov	r2, r3
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	0e5b      	lsrs	r3, r3, #25
 8008fea:	f003 021f 	and.w	r2, r3, #31
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	bf14      	ite	ne
 8009000:	2301      	movne	r3, #1
 8009002:	2300      	moveq	r3, #0
 8009004:	b2db      	uxtb	r3, r3
 8009006:	461a      	mov	r2, r3
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	f003 020f 	and.w	r2, r3, #15
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009022:	f003 0302 	and.w	r3, r3, #2
 8009026:	2b00      	cmp	r3, #0
 8009028:	bf14      	ite	ne
 800902a:	2301      	movne	r3, #1
 800902c:	2300      	moveq	r3, #0
 800902e:	b2db      	uxtb	r3, r3
 8009030:	461a      	mov	r2, r3
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800903e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009042:	2b00      	cmp	r3, #0
 8009044:	bf0c      	ite	eq
 8009046:	2301      	moveq	r3, #1
 8009048:	2300      	movne	r3, #0
 800904a:	b2db      	uxtb	r3, r3
 800904c:	461a      	mov	r2, r3
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800905a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009068:	0c1b      	lsrs	r3, r3, #16
 800906a:	b29a      	uxth	r2, r3
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009078:	f003 0301 	and.w	r3, r3, #1
 800907c:	2b00      	cmp	r3, #0
 800907e:	bf14      	ite	ne
 8009080:	2301      	movne	r3, #1
 8009082:	2300      	moveq	r3, #0
 8009084:	b2db      	uxtb	r3, r3
 8009086:	461a      	mov	r2, r3
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009096:	f003 0302 	and.w	r3, r3, #2
 800909a:	2b00      	cmp	r3, #0
 800909c:	bf14      	ite	ne
 800909e:	2301      	movne	r3, #1
 80090a0:	2300      	moveq	r3, #0
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	461a      	mov	r2, r3
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80090b4:	f003 0272 	and.w	r2, r3, #114	; 0x72
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80090c4:	f003 0223 	and.w	r2, r3, #35	; 0x23
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80090d4:	f003 0308 	and.w	r3, r3, #8
 80090d8:	2b00      	cmp	r3, #0
 80090da:	bf14      	ite	ne
 80090dc:	2301      	movne	r3, #1
 80090de:	2300      	moveq	r3, #0
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	461a      	mov	r2, r3
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80090f2:	f003 0310 	and.w	r3, r3, #16
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	bf14      	ite	ne
 80090fa:	2301      	movne	r3, #1
 80090fc:	2300      	moveq	r3, #0
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	461a      	mov	r2, r3
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8009110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009114:	2b00      	cmp	r3, #0
 8009116:	bf0c      	ite	eq
 8009118:	2301      	moveq	r3, #1
 800911a:	2300      	movne	r3, #0
 800911c:	b2db      	uxtb	r3, r3
 800911e:	461a      	mov	r2, r3
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8009126:	2300      	movs	r3, #0
}
 8009128:	4618      	mov	r0, r3
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d101      	bne.n	8009148 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8009144:	2301      	movs	r3, #1
 8009146:	e00a      	b.n	800915e <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800914c:	2b10      	cmp	r3, #16
 800914e:	d105      	bne.n	800915c <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8009150:	6839      	ldr	r1, [r7, #0]
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 f860 	bl	8009218 <ETH_SetMACConfig>

    return HAL_OK;
 8009158:	2300      	movs	r3, #0
 800915a:	e000      	b.n	800915e <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 800915c:	2301      	movs	r3, #1
  }
}
 800915e:	4618      	mov	r0, r3
 8009160:	3708      	adds	r7, #8
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
	...

08009168 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009178:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009180:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8009182:	f002 faa7 	bl	800b6d4 <HAL_RCC_GetHCLKFreq>
 8009186:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	4a1e      	ldr	r2, [pc, #120]	; (8009204 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d908      	bls.n	80091a2 <HAL_ETH_SetMDIOClockRange+0x3a>
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	4a1d      	ldr	r2, [pc, #116]	; (8009208 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d804      	bhi.n	80091a2 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800919e:	60fb      	str	r3, [r7, #12]
 80091a0:	e027      	b.n	80091f2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	4a18      	ldr	r2, [pc, #96]	; (8009208 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d908      	bls.n	80091bc <HAL_ETH_SetMDIOClockRange+0x54>
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	4a17      	ldr	r2, [pc, #92]	; (800920c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d204      	bcs.n	80091bc <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80091b8:	60fb      	str	r3, [r7, #12]
 80091ba:	e01a      	b.n	80091f2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	4a13      	ldr	r2, [pc, #76]	; (800920c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d303      	bcc.n	80091cc <HAL_ETH_SetMDIOClockRange+0x64>
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	4a12      	ldr	r2, [pc, #72]	; (8009210 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d911      	bls.n	80091f0 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	4a10      	ldr	r2, [pc, #64]	; (8009210 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d908      	bls.n	80091e6 <HAL_ETH_SetMDIOClockRange+0x7e>
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	4a0f      	ldr	r2, [pc, #60]	; (8009214 <HAL_ETH_SetMDIOClockRange+0xac>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d804      	bhi.n	80091e6 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091e2:	60fb      	str	r3, [r7, #12]
 80091e4:	e005      	b.n	80091f2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80091ec:	60fb      	str	r3, [r7, #12]
 80091ee:	e000      	b.n	80091f2 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80091f0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	68fa      	ldr	r2, [r7, #12]
 80091f8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80091fc:	bf00      	nop
 80091fe:	3710      	adds	r7, #16
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}
 8009204:	01312cff 	.word	0x01312cff
 8009208:	02160ebf 	.word	0x02160ebf
 800920c:	03938700 	.word	0x03938700
 8009210:	05f5e0ff 	.word	0x05f5e0ff
 8009214:	08f0d17f 	.word	0x08f0d17f

08009218 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8009218:	b480      	push	{r7}
 800921a:	b085      	sub	sp, #20
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 800922a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	791b      	ldrb	r3, [r3, #4]
 8009230:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8009232:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	7b1b      	ldrb	r3, [r3, #12]
 8009238:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800923a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	7b5b      	ldrb	r3, [r3, #13]
 8009240:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8009242:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	7b9b      	ldrb	r3, [r3, #14]
 8009248:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800924a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	7bdb      	ldrb	r3, [r3, #15]
 8009250:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8009252:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8009254:	683a      	ldr	r2, [r7, #0]
 8009256:	7c12      	ldrb	r2, [r2, #16]
 8009258:	2a00      	cmp	r2, #0
 800925a:	d102      	bne.n	8009262 <ETH_SetMACConfig+0x4a>
 800925c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009260:	e000      	b.n	8009264 <ETH_SetMACConfig+0x4c>
 8009262:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8009264:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8009266:	683a      	ldr	r2, [r7, #0]
 8009268:	7c52      	ldrb	r2, [r2, #17]
 800926a:	2a00      	cmp	r2, #0
 800926c:	d102      	bne.n	8009274 <ETH_SetMACConfig+0x5c>
 800926e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009272:	e000      	b.n	8009276 <ETH_SetMACConfig+0x5e>
 8009274:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8009276:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	7c9b      	ldrb	r3, [r3, #18]
 800927c:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800927e:	431a      	orrs	r2, r3
                                macconf->Speed |
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8009284:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800928a:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	7f1b      	ldrb	r3, [r3, #28]
 8009290:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8009292:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	7f5b      	ldrb	r3, [r3, #29]
 8009298:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800929a:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800929c:	683a      	ldr	r2, [r7, #0]
 800929e:	7f92      	ldrb	r2, [r2, #30]
 80092a0:	2a00      	cmp	r2, #0
 80092a2:	d102      	bne.n	80092aa <ETH_SetMACConfig+0x92>
 80092a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80092a8:	e000      	b.n	80092ac <ETH_SetMACConfig+0x94>
 80092aa:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80092ac:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	7fdb      	ldrb	r3, [r3, #31]
 80092b2:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80092b4:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80092b6:	683a      	ldr	r2, [r7, #0]
 80092b8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80092bc:	2a00      	cmp	r2, #0
 80092be:	d102      	bne.n	80092c6 <ETH_SetMACConfig+0xae>
 80092c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80092c4:	e000      	b.n	80092c8 <ETH_SetMACConfig+0xb0>
 80092c6:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80092c8:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80092ce:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092d6:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80092d8:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80092de:	4313      	orrs	r3, r2
 80092e0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	4b56      	ldr	r3, [pc, #344]	; (8009444 <ETH_SetMACConfig+0x22c>)
 80092ea:	4013      	ands	r3, r2
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	6812      	ldr	r2, [r2, #0]
 80092f0:	68f9      	ldr	r1, [r7, #12]
 80092f2:	430b      	orrs	r3, r1
 80092f4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092fa:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009302:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8009304:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800930c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800930e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009316:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8009318:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800931a:	683a      	ldr	r2, [r7, #0]
 800931c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8009320:	2a00      	cmp	r2, #0
 8009322:	d102      	bne.n	800932a <ETH_SetMACConfig+0x112>
 8009324:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009328:	e000      	b.n	800932c <ETH_SetMACConfig+0x114>
 800932a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800932c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8009332:	4313      	orrs	r3, r2
 8009334:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	685a      	ldr	r2, [r3, #4]
 800933c:	4b42      	ldr	r3, [pc, #264]	; (8009448 <ETH_SetMACConfig+0x230>)
 800933e:	4013      	ands	r3, r2
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	6812      	ldr	r2, [r2, #0]
 8009344:	68f9      	ldr	r1, [r7, #12]
 8009346:	430b      	orrs	r3, r1
 8009348:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009350:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8009356:	4313      	orrs	r3, r2
 8009358:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	68da      	ldr	r2, [r3, #12]
 8009360:	4b3a      	ldr	r3, [pc, #232]	; (800944c <ETH_SetMACConfig+0x234>)
 8009362:	4013      	ands	r3, r2
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	6812      	ldr	r2, [r2, #0]
 8009368:	68f9      	ldr	r1, [r7, #12]
 800936a:	430b      	orrs	r3, r1
 800936c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8009374:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800937a:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 800937c:	683a      	ldr	r2, [r7, #0]
 800937e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8009382:	2a00      	cmp	r2, #0
 8009384:	d101      	bne.n	800938a <ETH_SetMACConfig+0x172>
 8009386:	2280      	movs	r2, #128	; 0x80
 8009388:	e000      	b.n	800938c <ETH_SetMACConfig+0x174>
 800938a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800938c:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009392:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8009394:	4313      	orrs	r3, r2
 8009396:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800939e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80093a2:	4013      	ands	r3, r2
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	6812      	ldr	r2, [r2, #0]
 80093a8:	68f9      	ldr	r1, [r7, #12]
 80093aa:	430b      	orrs	r3, r1
 80093ac:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80093b4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80093bc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80093be:	4313      	orrs	r3, r2
 80093c0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093ca:	f023 0103 	bic.w	r1, r3, #3
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	68fa      	ldr	r2, [r7, #12]
 80093d4:	430a      	orrs	r2, r1
 80093d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80093e2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	430a      	orrs	r2, r1
 80093f0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80093f8:	683a      	ldr	r2, [r7, #0]
 80093fa:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80093fe:	2a00      	cmp	r2, #0
 8009400:	d101      	bne.n	8009406 <ETH_SetMACConfig+0x1ee>
 8009402:	2240      	movs	r2, #64	; 0x40
 8009404:	e000      	b.n	8009408 <ETH_SetMACConfig+0x1f0>
 8009406:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8009408:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8009410:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8009412:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800941a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800941c:	4313      	orrs	r3, r2
 800941e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8009428:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	68fa      	ldr	r2, [r7, #12]
 8009432:	430a      	orrs	r2, r1
 8009434:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8009438:	bf00      	nop
 800943a:	3714      	adds	r7, #20
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr
 8009444:	00048083 	.word	0x00048083
 8009448:	c0f88000 	.word	0xc0f88000
 800944c:	fffffef0 	.word	0xfffffef0

08009450 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8009450:	b480      	push	{r7}
 8009452:	b085      	sub	sp, #20
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	4b38      	ldr	r3, [pc, #224]	; (8009548 <ETH_SetDMAConfig+0xf8>)
 8009466:	4013      	ands	r3, r2
 8009468:	683a      	ldr	r2, [r7, #0]
 800946a:	6812      	ldr	r2, [r2, #0]
 800946c:	6879      	ldr	r1, [r7, #4]
 800946e:	6809      	ldr	r1, [r1, #0]
 8009470:	431a      	orrs	r2, r3
 8009472:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8009476:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	791b      	ldrb	r3, [r3, #4]
 800947c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8009482:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	7b1b      	ldrb	r3, [r3, #12]
 8009488:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800948a:	4313      	orrs	r3, r2
 800948c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	f241 0304 	movw	r3, #4100	; 0x1004
 8009496:	4413      	add	r3, r2
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	4b2c      	ldr	r3, [pc, #176]	; (800954c <ETH_SetDMAConfig+0xfc>)
 800949c:	4013      	ands	r3, r2
 800949e:	687a      	ldr	r2, [r7, #4]
 80094a0:	6811      	ldr	r1, [r2, #0]
 80094a2:	68fa      	ldr	r2, [r7, #12]
 80094a4:	431a      	orrs	r2, r3
 80094a6:	f241 0304 	movw	r3, #4100	; 0x1004
 80094aa:	440b      	add	r3, r1
 80094ac:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	7b5b      	ldrb	r3, [r3, #13]
 80094b2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80094b8:	4313      	orrs	r3, r2
 80094ba:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	4b22      	ldr	r3, [pc, #136]	; (8009550 <ETH_SetDMAConfig+0x100>)
 80094c8:	4013      	ands	r3, r2
 80094ca:	687a      	ldr	r2, [r7, #4]
 80094cc:	6811      	ldr	r1, [r2, #0]
 80094ce:	68fa      	ldr	r2, [r7, #12]
 80094d0:	431a      	orrs	r2, r3
 80094d2:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80094d6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	7d1b      	ldrb	r3, [r3, #20]
 80094e0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80094e2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	7f5b      	ldrb	r3, [r3, #29]
 80094e8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80094ea:	4313      	orrs	r3, r2
 80094ec:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	f241 1304 	movw	r3, #4356	; 0x1104
 80094f6:	4413      	add	r3, r2
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	4b16      	ldr	r3, [pc, #88]	; (8009554 <ETH_SetDMAConfig+0x104>)
 80094fc:	4013      	ands	r3, r2
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	6811      	ldr	r1, [r2, #0]
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	431a      	orrs	r2, r3
 8009506:	f241 1304 	movw	r3, #4356	; 0x1104
 800950a:	440b      	add	r3, r1
 800950c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	7f1b      	ldrb	r3, [r3, #28]
 8009512:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8009518:	4313      	orrs	r3, r2
 800951a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681a      	ldr	r2, [r3, #0]
 8009520:	f241 1308 	movw	r3, #4360	; 0x1108
 8009524:	4413      	add	r3, r2
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	4b0b      	ldr	r3, [pc, #44]	; (8009558 <ETH_SetDMAConfig+0x108>)
 800952a:	4013      	ands	r3, r2
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	6811      	ldr	r1, [r2, #0]
 8009530:	68fa      	ldr	r2, [r7, #12]
 8009532:	431a      	orrs	r2, r3
 8009534:	f241 1308 	movw	r3, #4360	; 0x1108
 8009538:	440b      	add	r3, r1
 800953a:	601a      	str	r2, [r3, #0]
}
 800953c:	bf00      	nop
 800953e:	3714      	adds	r7, #20
 8009540:	46bd      	mov	sp, r7
 8009542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009546:	4770      	bx	lr
 8009548:	ffff87fd 	.word	0xffff87fd
 800954c:	ffff2ffe 	.word	0xffff2ffe
 8009550:	fffec000 	.word	0xfffec000
 8009554:	ffc0efef 	.word	0xffc0efef
 8009558:	7fc0ffff 	.word	0x7fc0ffff

0800955c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b0a4      	sub	sp, #144	; 0x90
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8009564:	2301      	movs	r3, #1
 8009566:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800956a:	2300      	movs	r3, #0
 800956c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800956e:	2300      	movs	r3, #0
 8009570:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8009574:	2300      	movs	r3, #0
 8009576:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800957a:	2301      	movs	r3, #1
 800957c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8009580:	2301      	movs	r3, #1
 8009582:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8009586:	2301      	movs	r3, #1
 8009588:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800958c:	2300      	movs	r3, #0
 800958e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8009592:	2301      	movs	r3, #1
 8009594:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8009598:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800959c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800959e:	2300      	movs	r3, #0
 80095a0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80095a4:	2300      	movs	r3, #0
 80095a6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80095a8:	2300      	movs	r3, #0
 80095aa:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80095ae:	2300      	movs	r3, #0
 80095b0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80095b4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80095b8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80095ba:	2300      	movs	r3, #0
 80095bc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80095c0:	2300      	movs	r3, #0
 80095c2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80095c4:	2301      	movs	r3, #1
 80095c6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80095ca:	2300      	movs	r3, #0
 80095cc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80095d0:	2300      	movs	r3, #0
 80095d2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80095d6:	2300      	movs	r3, #0
 80095d8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80095da:	2300      	movs	r3, #0
 80095dc:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80095de:	2300      	movs	r3, #0
 80095e0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80095e2:	2300      	movs	r3, #0
 80095e4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80095e8:	2300      	movs	r3, #0
 80095ea:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80095ee:	2301      	movs	r3, #1
 80095f0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80095f4:	2320      	movs	r3, #32
 80095f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80095fa:	2301      	movs	r3, #1
 80095fc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8009600:	2300      	movs	r3, #0
 8009602:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8009606:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800960a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800960c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009610:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8009612:	2300      	movs	r3, #0
 8009614:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8009618:	2302      	movs	r3, #2
 800961a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800961e:	2300      	movs	r3, #0
 8009620:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8009624:	2300      	movs	r3, #0
 8009626:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800962a:	2300      	movs	r3, #0
 800962c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8009630:	2301      	movs	r3, #1
 8009632:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8009636:	2300      	movs	r3, #0
 8009638:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800963a:	2301      	movs	r3, #1
 800963c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8009640:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009644:	4619      	mov	r1, r3
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f7ff fde6 	bl	8009218 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800964c:	2301      	movs	r3, #1
 800964e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8009650:	2301      	movs	r3, #1
 8009652:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8009654:	2300      	movs	r3, #0
 8009656:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8009658:	2300      	movs	r3, #0
 800965a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800965e:	2300      	movs	r3, #0
 8009660:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8009662:	2300      	movs	r3, #0
 8009664:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8009666:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800966a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800966c:	2300      	movs	r3, #0
 800966e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8009670:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009674:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8009676:	2300      	movs	r3, #0
 8009678:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 800967c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8009680:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8009682:	f107 0308 	add.w	r3, r7, #8
 8009686:	4619      	mov	r1, r3
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f7ff fee1 	bl	8009450 <ETH_SetDMAConfig>
}
 800968e:	bf00      	nop
 8009690:	3790      	adds	r7, #144	; 0x90
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
	...

08009698 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b084      	sub	sp, #16
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80096a8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80096b0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80096b2:	f002 f80f 	bl	800b6d4 <HAL_RCC_GetHCLKFreq>
 80096b6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	4a1e      	ldr	r2, [pc, #120]	; (8009734 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d908      	bls.n	80096d2 <ETH_MAC_MDIO_ClkConfig+0x3a>
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	4a1d      	ldr	r2, [pc, #116]	; (8009738 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d804      	bhi.n	80096d2 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80096ce:	60fb      	str	r3, [r7, #12]
 80096d0:	e027      	b.n	8009722 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	4a18      	ldr	r2, [pc, #96]	; (8009738 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d908      	bls.n	80096ec <ETH_MAC_MDIO_ClkConfig+0x54>
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	4a17      	ldr	r2, [pc, #92]	; (800973c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d204      	bcs.n	80096ec <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80096e8:	60fb      	str	r3, [r7, #12]
 80096ea:	e01a      	b.n	8009722 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	4a13      	ldr	r2, [pc, #76]	; (800973c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d303      	bcc.n	80096fc <ETH_MAC_MDIO_ClkConfig+0x64>
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	4a12      	ldr	r2, [pc, #72]	; (8009740 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d911      	bls.n	8009720 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	4a10      	ldr	r2, [pc, #64]	; (8009740 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d908      	bls.n	8009716 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	4a0f      	ldr	r2, [pc, #60]	; (8009744 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d804      	bhi.n	8009716 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009712:	60fb      	str	r3, [r7, #12]
 8009714:	e005      	b.n	8009722 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800971c:	60fb      	str	r3, [r7, #12]
 800971e:	e000      	b.n	8009722 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8009720:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	68fa      	ldr	r2, [r7, #12]
 8009728:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800972c:	bf00      	nop
 800972e:	3710      	adds	r7, #16
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}
 8009734:	01312cff 	.word	0x01312cff
 8009738:	02160ebf 	.word	0x02160ebf
 800973c:	03938700 	.word	0x03938700
 8009740:	05f5e0ff 	.word	0x05f5e0ff
 8009744:	08f0d17f 	.word	0x08f0d17f

08009748 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8009748:	b480      	push	{r7}
 800974a:	b085      	sub	sp, #20
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8009750:	2300      	movs	r3, #0
 8009752:	60fb      	str	r3, [r7, #12]
 8009754:	e01d      	b.n	8009792 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	68d9      	ldr	r1, [r3, #12]
 800975a:	68fa      	ldr	r2, [r7, #12]
 800975c:	4613      	mov	r3, r2
 800975e:	005b      	lsls	r3, r3, #1
 8009760:	4413      	add	r3, r2
 8009762:	00db      	lsls	r3, r3, #3
 8009764:	440b      	add	r3, r1
 8009766:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	2200      	movs	r2, #0
 800976c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	2200      	movs	r2, #0
 8009772:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	2200      	movs	r2, #0
 8009778:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	2200      	movs	r2, #0
 800977e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8009780:	68b9      	ldr	r1, [r7, #8]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	68fa      	ldr	r2, [r7, #12]
 8009786:	3206      	adds	r2, #6
 8009788:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	3301      	adds	r3, #1
 8009790:	60fb      	str	r3, [r7, #12]
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2b03      	cmp	r3, #3
 8009796:	d9de      	bls.n	8009756 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	f241 132c 	movw	r3, #4396	; 0x112c
 80097a6:	4413      	add	r3, r2
 80097a8:	2203      	movs	r2, #3
 80097aa:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	68d9      	ldr	r1, [r3, #12]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	f241 1314 	movw	r3, #4372	; 0x1114
 80097b8:	4413      	add	r3, r2
 80097ba:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	68da      	ldr	r2, [r3, #12]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80097c8:	601a      	str	r2, [r3, #0]
}
 80097ca:	bf00      	nop
 80097cc:	3714      	adds	r7, #20
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr

080097d6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80097d6:	b480      	push	{r7}
 80097d8:	b085      	sub	sp, #20
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80097de:	2300      	movs	r3, #0
 80097e0:	60fb      	str	r3, [r7, #12]
 80097e2:	e024      	b.n	800982e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6919      	ldr	r1, [r3, #16]
 80097e8:	68fa      	ldr	r2, [r7, #12]
 80097ea:	4613      	mov	r3, r2
 80097ec:	005b      	lsls	r3, r3, #1
 80097ee:	4413      	add	r3, r2
 80097f0:	00db      	lsls	r3, r3, #3
 80097f2:	440b      	add	r3, r1
 80097f4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	2200      	movs	r2, #0
 80097fa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	2200      	movs	r2, #0
 8009800:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	2200      	movs	r2, #0
 8009806:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	2200      	movs	r2, #0
 800980c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	2200      	movs	r2, #0
 8009812:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	2200      	movs	r2, #0
 8009818:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800981a:	68ba      	ldr	r2, [r7, #8]
 800981c:	6879      	ldr	r1, [r7, #4]
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	3310      	adds	r3, #16
 8009822:	009b      	lsls	r3, r3, #2
 8009824:	440b      	add	r3, r1
 8009826:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	3301      	adds	r3, #1
 800982c:	60fb      	str	r3, [r7, #12]
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2b03      	cmp	r3, #3
 8009832:	d9d7      	bls.n	80097e4 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2200      	movs	r2, #0
 8009838:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2200      	movs	r2, #0
 800983e:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2200      	movs	r2, #0
 800984a:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2200      	movs	r2, #0
 8009850:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681a      	ldr	r2, [r3, #0]
 8009856:	f241 1330 	movw	r3, #4400	; 0x1130
 800985a:	4413      	add	r3, r2
 800985c:	2203      	movs	r2, #3
 800985e:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6919      	ldr	r1, [r3, #16]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681a      	ldr	r2, [r3, #0]
 8009868:	f241 131c 	movw	r3, #4380	; 0x111c
 800986c:	4413      	add	r3, r2
 800986e:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	691b      	ldr	r3, [r3, #16]
 8009874:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	f241 1328 	movw	r3, #4392	; 0x1128
 8009880:	4413      	add	r3, r2
 8009882:	6019      	str	r1, [r3, #0]
}
 8009884:	bf00      	nop
 8009886:	3714      	adds	r7, #20
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8009890:	b480      	push	{r7}
 8009892:	b08d      	sub	sp, #52	; 0x34
 8009894:	af00      	add	r7, sp, #0
 8009896:	60f8      	str	r0, [r7, #12]
 8009898:	60b9      	str	r1, [r7, #8]
 800989a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	3318      	adds	r3, #24
 80098a0:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	691b      	ldr	r3, [r3, #16]
 80098a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	691b      	ldr	r3, [r3, #16]
 80098ac:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 80098ae:	2300      	movs	r3, #0
 80098b0:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098ba:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80098c2:	2300      	movs	r3, #0
 80098c4:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80098c6:	6a3b      	ldr	r3, [r7, #32]
 80098c8:	68db      	ldr	r3, [r3, #12]
 80098ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098d2:	d007      	beq.n	80098e4 <ETH_Prepare_Tx_Descriptors+0x54>
 80098d4:	697a      	ldr	r2, [r7, #20]
 80098d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d8:	3304      	adds	r3, #4
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	4413      	add	r3, r2
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d001      	beq.n	80098e8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80098e4:	2302      	movs	r3, #2
 80098e6:	e24a      	b.n	8009d7e <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f003 0304 	and.w	r3, r3, #4
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d044      	beq.n	800997e <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80098f4:	6a3b      	ldr	r3, [r7, #32]
 80098f6:	68da      	ldr	r2, [r3, #12]
 80098f8:	4b72      	ldr	r3, [pc, #456]	; (8009ac4 <ETH_Prepare_Tx_Descriptors+0x234>)
 80098fa:	4013      	ands	r3, r2
 80098fc:	68ba      	ldr	r2, [r7, #8]
 80098fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009900:	431a      	orrs	r2, r3
 8009902:	6a3b      	ldr	r3, [r7, #32]
 8009904:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8009906:	6a3b      	ldr	r3, [r7, #32]
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800990e:	6a3b      	ldr	r3, [r7, #32]
 8009910:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009920:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f003 0308 	and.w	r3, r3, #8
 800992a:	2b00      	cmp	r3, #0
 800992c:	d027      	beq.n	800997e <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 800992e:	6a3b      	ldr	r3, [r7, #32]
 8009930:	689b      	ldr	r3, [r3, #8]
 8009932:	b29a      	uxth	r2, r3
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009938:	041b      	lsls	r3, r3, #16
 800993a:	431a      	orrs	r2, r3
 800993c:	6a3b      	ldr	r3, [r7, #32]
 800993e:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8009940:	6a3b      	ldr	r3, [r7, #32]
 8009942:	68db      	ldr	r3, [r3, #12]
 8009944:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009948:	6a3b      	ldr	r3, [r7, #32]
 800994a:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 800994c:	6a3b      	ldr	r3, [r7, #32]
 800994e:	68db      	ldr	r3, [r3, #12]
 8009950:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009958:	431a      	orrs	r2, r3
 800995a:	6a3b      	ldr	r3, [r7, #32]
 800995c:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800996c:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800997c:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f003 0310 	and.w	r3, r3, #16
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00e      	beq.n	80099a8 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800998a:	6a3b      	ldr	r3, [r7, #32]
 800998c:	689a      	ldr	r2, [r3, #8]
 800998e:	4b4e      	ldr	r3, [pc, #312]	; (8009ac8 <ETH_Prepare_Tx_Descriptors+0x238>)
 8009990:	4013      	ands	r3, r2
 8009992:	68ba      	ldr	r2, [r7, #8]
 8009994:	6992      	ldr	r2, [r2, #24]
 8009996:	431a      	orrs	r2, r3
 8009998:	6a3b      	ldr	r3, [r7, #32]
 800999a:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 800999c:	6a3b      	ldr	r3, [r7, #32]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80099a4:	6a3b      	ldr	r3, [r7, #32]
 80099a6:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f003 0304 	and.w	r3, r3, #4
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d105      	bne.n	80099c0 <ETH_Prepare_Tx_Descriptors+0x130>
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f003 0310 	and.w	r3, r3, #16
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d030      	beq.n	8009a22 <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80099c0:	6a3b      	ldr	r3, [r7, #32]
 80099c2:	68db      	ldr	r3, [r3, #12]
 80099c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80099c8:	6a3b      	ldr	r3, [r7, #32]
 80099ca:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80099cc:	6a3b      	ldr	r3, [r7, #32]
 80099ce:	68db      	ldr	r3, [r3, #12]
 80099d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80099d4:	6a3b      	ldr	r3, [r7, #32]
 80099d6:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80099d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099da:	3301      	adds	r3, #1
 80099dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e0:	2b03      	cmp	r3, #3
 80099e2:	d902      	bls.n	80099ea <ETH_Prepare_Tx_Descriptors+0x15a>
 80099e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e6:	3b04      	subs	r3, #4
 80099e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099f2:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 80099f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f6:	3301      	adds	r3, #1
 80099f8:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80099fa:	6a3b      	ldr	r3, [r7, #32]
 80099fc:	68db      	ldr	r3, [r3, #12]
 80099fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a06:	d10c      	bne.n	8009a22 <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	693a      	ldr	r2, [r7, #16]
 8009a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a10:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8009a12:	6a3b      	ldr	r3, [r7, #32]
 8009a14:	68db      	ldr	r3, [r3, #12]
 8009a16:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009a1a:	6a3b      	ldr	r3, [r7, #32]
 8009a1c:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8009a1e:	2302      	movs	r3, #2
 8009a20:	e1ad      	b.n	8009d7e <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8009a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a24:	3301      	adds	r3, #1
 8009a26:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8009a28:	69fb      	ldr	r3, [r7, #28]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	6a3b      	ldr	r3, [r7, #32]
 8009a30:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8009a32:	6a3b      	ldr	r3, [r7, #32]
 8009a34:	689a      	ldr	r2, [r3, #8]
 8009a36:	4b24      	ldr	r3, [pc, #144]	; (8009ac8 <ETH_Prepare_Tx_Descriptors+0x238>)
 8009a38:	4013      	ands	r3, r2
 8009a3a:	69fa      	ldr	r2, [r7, #28]
 8009a3c:	6852      	ldr	r2, [r2, #4]
 8009a3e:	431a      	orrs	r2, r3
 8009a40:	6a3b      	ldr	r3, [r7, #32]
 8009a42:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8009a44:	69fb      	ldr	r3, [r7, #28]
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d012      	beq.n	8009a72 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 8009a4c:	69fb      	ldr	r3, [r7, #28]
 8009a4e:	689b      	ldr	r3, [r3, #8]
 8009a50:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8009a52:	69fb      	ldr	r3, [r7, #28]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	461a      	mov	r2, r3
 8009a58:	6a3b      	ldr	r3, [r7, #32]
 8009a5a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8009a5c:	6a3b      	ldr	r3, [r7, #32]
 8009a5e:	689a      	ldr	r2, [r3, #8]
 8009a60:	4b1a      	ldr	r3, [pc, #104]	; (8009acc <ETH_Prepare_Tx_Descriptors+0x23c>)
 8009a62:	4013      	ands	r3, r2
 8009a64:	69fa      	ldr	r2, [r7, #28]
 8009a66:	6852      	ldr	r2, [r2, #4]
 8009a68:	0412      	lsls	r2, r2, #16
 8009a6a:	431a      	orrs	r2, r3
 8009a6c:	6a3b      	ldr	r3, [r7, #32]
 8009a6e:	609a      	str	r2, [r3, #8]
 8009a70:	e008      	b.n	8009a84 <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8009a72:	6a3b      	ldr	r3, [r7, #32]
 8009a74:	2200      	movs	r2, #0
 8009a76:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8009a78:	6a3b      	ldr	r3, [r7, #32]
 8009a7a:	689a      	ldr	r2, [r3, #8]
 8009a7c:	4b13      	ldr	r3, [pc, #76]	; (8009acc <ETH_Prepare_Tx_Descriptors+0x23c>)
 8009a7e:	4013      	ands	r3, r2
 8009a80:	6a3a      	ldr	r2, [r7, #32]
 8009a82:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f003 0310 	and.w	r3, r3, #16
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d021      	beq.n	8009ad4 <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8009a90:	6a3b      	ldr	r3, [r7, #32]
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	6a1b      	ldr	r3, [r3, #32]
 8009a9c:	04db      	lsls	r3, r3, #19
 8009a9e:	431a      	orrs	r2, r3
 8009aa0:	6a3b      	ldr	r3, [r7, #32]
 8009aa2:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8009aa4:	6a3b      	ldr	r3, [r7, #32]
 8009aa6:	68da      	ldr	r2, [r3, #12]
 8009aa8:	4b09      	ldr	r3, [pc, #36]	; (8009ad0 <ETH_Prepare_Tx_Descriptors+0x240>)
 8009aaa:	4013      	ands	r3, r2
 8009aac:	68ba      	ldr	r2, [r7, #8]
 8009aae:	69d2      	ldr	r2, [r2, #28]
 8009ab0:	431a      	orrs	r2, r3
 8009ab2:	6a3b      	ldr	r3, [r7, #32]
 8009ab4:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8009ab6:	6a3b      	ldr	r3, [r7, #32]
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009abe:	6a3b      	ldr	r3, [r7, #32]
 8009ac0:	60da      	str	r2, [r3, #12]
 8009ac2:	e02e      	b.n	8009b22 <ETH_Prepare_Tx_Descriptors+0x292>
 8009ac4:	ffff0000 	.word	0xffff0000
 8009ac8:	ffffc000 	.word	0xffffc000
 8009acc:	c000ffff 	.word	0xc000ffff
 8009ad0:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8009ad4:	6a3b      	ldr	r3, [r7, #32]
 8009ad6:	68da      	ldr	r2, [r3, #12]
 8009ad8:	4b93      	ldr	r3, [pc, #588]	; (8009d28 <ETH_Prepare_Tx_Descriptors+0x498>)
 8009ada:	4013      	ands	r3, r2
 8009adc:	68ba      	ldr	r2, [r7, #8]
 8009ade:	6852      	ldr	r2, [r2, #4]
 8009ae0:	431a      	orrs	r2, r3
 8009ae2:	6a3b      	ldr	r3, [r7, #32]
 8009ae4:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f003 0301 	and.w	r3, r3, #1
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d008      	beq.n	8009b04 <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8009af2:	6a3b      	ldr	r3, [r7, #32]
 8009af4:	68db      	ldr	r3, [r3, #12]
 8009af6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	695b      	ldr	r3, [r3, #20]
 8009afe:	431a      	orrs	r2, r3
 8009b00:	6a3b      	ldr	r3, [r7, #32]
 8009b02:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f003 0320 	and.w	r3, r3, #32
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d008      	beq.n	8009b22 <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8009b10:	6a3b      	ldr	r3, [r7, #32]
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	691b      	ldr	r3, [r3, #16]
 8009b1c:	431a      	orrs	r2, r3
 8009b1e:	6a3b      	ldr	r3, [r7, #32]
 8009b20:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f003 0304 	and.w	r3, r3, #4
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d008      	beq.n	8009b40 <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8009b2e:	6a3b      	ldr	r3, [r7, #32]
 8009b30:	689b      	ldr	r3, [r3, #8]
 8009b32:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b3a:	431a      	orrs	r2, r3
 8009b3c:	6a3b      	ldr	r3, [r7, #32]
 8009b3e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8009b40:	6a3b      	ldr	r3, [r7, #32]
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009b48:	6a3b      	ldr	r3, [r7, #32]
 8009b4a:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8009b4c:	6a3b      	ldr	r3, [r7, #32]
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8009b54:	6a3b      	ldr	r3, [r7, #32]
 8009b56:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8009b58:	6a3b      	ldr	r3, [r7, #32]
 8009b5a:	68db      	ldr	r3, [r3, #12]
 8009b5c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009b60:	6a3b      	ldr	r3, [r7, #32]
 8009b62:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f003 0302 	and.w	r3, r3, #2
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	f000 80cb 	beq.w	8009d08 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8009b72:	6a3b      	ldr	r3, [r7, #32]
 8009b74:	68db      	ldr	r3, [r3, #12]
 8009b76:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	68db      	ldr	r3, [r3, #12]
 8009b7e:	431a      	orrs	r2, r3
 8009b80:	6a3b      	ldr	r3, [r7, #32]
 8009b82:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8009b84:	e0c0      	b.n	8009d08 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8009b86:	6a3b      	ldr	r3, [r7, #32]
 8009b88:	68db      	ldr	r3, [r3, #12]
 8009b8a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009b8e:	6a3b      	ldr	r3, [r7, #32]
 8009b90:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8009b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b94:	3301      	adds	r3, #1
 8009b96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b9a:	2b03      	cmp	r3, #3
 8009b9c:	d902      	bls.n	8009ba4 <ETH_Prepare_Tx_Descriptors+0x314>
 8009b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ba0:	3b04      	subs	r3, #4
 8009ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bac:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8009bae:	6a3b      	ldr	r3, [r7, #32]
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009bb6:	6a3b      	ldr	r3, [r7, #32]
 8009bb8:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8009bba:	6a3b      	ldr	r3, [r7, #32]
 8009bbc:	68db      	ldr	r3, [r3, #12]
 8009bbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009bc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bc6:	d007      	beq.n	8009bd8 <ETH_Prepare_Tx_Descriptors+0x348>
 8009bc8:	697a      	ldr	r2, [r7, #20]
 8009bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bcc:	3304      	adds	r3, #4
 8009bce:	009b      	lsls	r3, r3, #2
 8009bd0:	4413      	add	r3, r2
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d026      	beq.n	8009c26 <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009be4:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 8009be6:	2300      	movs	r3, #0
 8009be8:	627b      	str	r3, [r7, #36]	; 0x24
 8009bea:	e016      	b.n	8009c1a <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8009bec:	6a3b      	ldr	r3, [r7, #32]
 8009bee:	68db      	ldr	r3, [r3, #12]
 8009bf0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009bf4:	6a3b      	ldr	r3, [r7, #32]
 8009bf6:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8009bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c00:	2b03      	cmp	r3, #3
 8009c02:	d902      	bls.n	8009c0a <ETH_Prepare_Tx_Descriptors+0x37a>
 8009c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c06:	3b04      	subs	r3, #4
 8009c08:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c12:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8009c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c16:	3301      	adds	r3, #1
 8009c18:	627b      	str	r3, [r7, #36]	; 0x24
 8009c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d3e4      	bcc.n	8009bec <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 8009c22:	2302      	movs	r3, #2
 8009c24:	e0ab      	b.n	8009d7e <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 8009c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c28:	3301      	adds	r3, #1
 8009c2a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8009c2c:	69fb      	ldr	r3, [r7, #28]
 8009c2e:	689b      	ldr	r3, [r3, #8]
 8009c30:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8009c32:	69fb      	ldr	r3, [r7, #28]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	461a      	mov	r2, r3
 8009c38:	6a3b      	ldr	r3, [r7, #32]
 8009c3a:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8009c3c:	6a3b      	ldr	r3, [r7, #32]
 8009c3e:	689a      	ldr	r2, [r3, #8]
 8009c40:	4b3a      	ldr	r3, [pc, #232]	; (8009d2c <ETH_Prepare_Tx_Descriptors+0x49c>)
 8009c42:	4013      	ands	r3, r2
 8009c44:	69fa      	ldr	r2, [r7, #28]
 8009c46:	6852      	ldr	r2, [r2, #4]
 8009c48:	431a      	orrs	r2, r3
 8009c4a:	6a3b      	ldr	r3, [r7, #32]
 8009c4c:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8009c4e:	69fb      	ldr	r3, [r7, #28]
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d012      	beq.n	8009c7c <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8009c56:	69fb      	ldr	r3, [r7, #28]
 8009c58:	689b      	ldr	r3, [r3, #8]
 8009c5a:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8009c5c:	69fb      	ldr	r3, [r7, #28]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	461a      	mov	r2, r3
 8009c62:	6a3b      	ldr	r3, [r7, #32]
 8009c64:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8009c66:	6a3b      	ldr	r3, [r7, #32]
 8009c68:	689a      	ldr	r2, [r3, #8]
 8009c6a:	4b31      	ldr	r3, [pc, #196]	; (8009d30 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8009c6c:	4013      	ands	r3, r2
 8009c6e:	69fa      	ldr	r2, [r7, #28]
 8009c70:	6852      	ldr	r2, [r2, #4]
 8009c72:	0412      	lsls	r2, r2, #16
 8009c74:	431a      	orrs	r2, r3
 8009c76:	6a3b      	ldr	r3, [r7, #32]
 8009c78:	609a      	str	r2, [r3, #8]
 8009c7a:	e008      	b.n	8009c8e <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8009c7c:	6a3b      	ldr	r3, [r7, #32]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8009c82:	6a3b      	ldr	r3, [r7, #32]
 8009c84:	689a      	ldr	r2, [r3, #8]
 8009c86:	4b2a      	ldr	r3, [pc, #168]	; (8009d30 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8009c88:	4013      	ands	r3, r2
 8009c8a:	6a3a      	ldr	r2, [r7, #32]
 8009c8c:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f003 0310 	and.w	r3, r3, #16
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d00f      	beq.n	8009cba <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8009c9a:	6a3b      	ldr	r3, [r7, #32]
 8009c9c:	68da      	ldr	r2, [r3, #12]
 8009c9e:	4b25      	ldr	r3, [pc, #148]	; (8009d34 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8009ca0:	4013      	ands	r3, r2
 8009ca2:	68ba      	ldr	r2, [r7, #8]
 8009ca4:	69d2      	ldr	r2, [r2, #28]
 8009ca6:	431a      	orrs	r2, r3
 8009ca8:	6a3b      	ldr	r3, [r7, #32]
 8009caa:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8009cac:	6a3b      	ldr	r3, [r7, #32]
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009cb4:	6a3b      	ldr	r3, [r7, #32]
 8009cb6:	60da      	str	r2, [r3, #12]
 8009cb8:	e017      	b.n	8009cea <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8009cba:	6a3b      	ldr	r3, [r7, #32]
 8009cbc:	68da      	ldr	r2, [r3, #12]
 8009cbe:	4b1a      	ldr	r3, [pc, #104]	; (8009d28 <ETH_Prepare_Tx_Descriptors+0x498>)
 8009cc0:	4013      	ands	r3, r2
 8009cc2:	68ba      	ldr	r2, [r7, #8]
 8009cc4:	6852      	ldr	r2, [r2, #4]
 8009cc6:	431a      	orrs	r2, r3
 8009cc8:	6a3b      	ldr	r3, [r7, #32]
 8009cca:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f003 0301 	and.w	r3, r3, #1
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d008      	beq.n	8009cea <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8009cd8:	6a3b      	ldr	r3, [r7, #32]
 8009cda:	68db      	ldr	r3, [r3, #12]
 8009cdc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	695b      	ldr	r3, [r3, #20]
 8009ce4:	431a      	orrs	r2, r3
 8009ce6:	6a3b      	ldr	r3, [r7, #32]
 8009ce8:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8009cea:	69bb      	ldr	r3, [r7, #24]
 8009cec:	3301      	adds	r3, #1
 8009cee:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8009cf0:	6a3b      	ldr	r3, [r7, #32]
 8009cf2:	68db      	ldr	r3, [r3, #12]
 8009cf4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009cf8:	6a3b      	ldr	r3, [r7, #32]
 8009cfa:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8009cfc:	6a3b      	ldr	r3, [r7, #32]
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8009d04:	6a3b      	ldr	r3, [r7, #32]
 8009d06:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8009d08:	69fb      	ldr	r3, [r7, #28]
 8009d0a:	689b      	ldr	r3, [r3, #8]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	f47f af3a 	bne.w	8009b86 <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d00f      	beq.n	8009d38 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8009d18:	6a3b      	ldr	r3, [r7, #32]
 8009d1a:	689b      	ldr	r3, [r3, #8]
 8009d1c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009d20:	6a3b      	ldr	r3, [r7, #32]
 8009d22:	609a      	str	r2, [r3, #8]
 8009d24:	e00e      	b.n	8009d44 <ETH_Prepare_Tx_Descriptors+0x4b4>
 8009d26:	bf00      	nop
 8009d28:	ffff8000 	.word	0xffff8000
 8009d2c:	ffffc000 	.word	0xffffc000
 8009d30:	c000ffff 	.word	0xc000ffff
 8009d34:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8009d38:	6a3b      	ldr	r3, [r7, #32]
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009d40:	6a3b      	ldr	r3, [r7, #32]
 8009d42:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8009d44:	6a3b      	ldr	r3, [r7, #32]
 8009d46:	68db      	ldr	r3, [r3, #12]
 8009d48:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009d4c:	6a3b      	ldr	r3, [r7, #32]
 8009d4e:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d54:	6979      	ldr	r1, [r7, #20]
 8009d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d58:	3304      	adds	r3, #4
 8009d5a:	009b      	lsls	r3, r3, #2
 8009d5c:	440b      	add	r3, r1
 8009d5e:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d64:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009d66:	b672      	cpsid	i
}
 8009d68:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d6e:	69bb      	ldr	r3, [r7, #24]
 8009d70:	4413      	add	r3, r2
 8009d72:	1c5a      	adds	r2, r3, #1
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8009d78:	b662      	cpsie	i
}
 8009d7a:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8009d7c:	2300      	movs	r3, #0
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3734      	adds	r7, #52	; 0x34
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr
 8009d8a:	bf00      	nop

08009d8c <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b08a      	sub	sp, #40	; 0x28
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	60b9      	str	r1, [r7, #8]
 8009d96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 8009da0:	2308      	movs	r3, #8
 8009da2:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009da4:	4b40      	ldr	r3, [pc, #256]	; (8009ea8 <HAL_FLASH_Program+0x11c>)
 8009da6:	7d1b      	ldrb	r3, [r3, #20]
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d101      	bne.n	8009db0 <HAL_FLASH_Program+0x24>
 8009dac:	2302      	movs	r3, #2
 8009dae:	e076      	b.n	8009e9e <HAL_FLASH_Program+0x112>
 8009db0:	4b3d      	ldr	r3, [pc, #244]	; (8009ea8 <HAL_FLASH_Program+0x11c>)
 8009db2:	2201      	movs	r2, #1
 8009db4:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009dbc:	d306      	bcc.n	8009dcc <HAL_FLASH_Program+0x40>
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8009dc4:	d202      	bcs.n	8009dcc <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	61bb      	str	r3, [r7, #24]
 8009dca:	e00c      	b.n	8009de6 <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8009dd2:	d306      	bcc.n	8009de2 <HAL_FLASH_Program+0x56>
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 8009dda:	d202      	bcs.n	8009de2 <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 8009ddc:	2302      	movs	r3, #2
 8009dde:	61bb      	str	r3, [r7, #24]
 8009de0:	e001      	b.n	8009de6 <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 8009de2:	2301      	movs	r3, #1
 8009de4:	e05b      	b.n	8009e9e <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009de6:	4b30      	ldr	r3, [pc, #192]	; (8009ea8 <HAL_FLASH_Program+0x11c>)
 8009de8:	2200      	movs	r2, #0
 8009dea:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8009dec:	69b9      	ldr	r1, [r7, #24]
 8009dee:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009df2:	f000 f897 	bl	8009f24 <FLASH_WaitForLastOperation>
 8009df6:	4603      	mov	r3, r0
 8009df8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 8009dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d147      	bne.n	8009e94 <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 8009e04:	69bb      	ldr	r3, [r7, #24]
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d106      	bne.n	8009e18 <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 8009e0a:	4b28      	ldr	r3, [pc, #160]	; (8009eac <HAL_FLASH_Program+0x120>)
 8009e0c:	68db      	ldr	r3, [r3, #12]
 8009e0e:	4a27      	ldr	r2, [pc, #156]	; (8009eac <HAL_FLASH_Program+0x120>)
 8009e10:	f043 0302 	orr.w	r3, r3, #2
 8009e14:	60d3      	str	r3, [r2, #12]
 8009e16:	e007      	b.n	8009e28 <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 8009e18:	4b24      	ldr	r3, [pc, #144]	; (8009eac <HAL_FLASH_Program+0x120>)
 8009e1a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8009e1e:	4a23      	ldr	r2, [pc, #140]	; (8009eac <HAL_FLASH_Program+0x120>)
 8009e20:	f043 0302 	orr.w	r3, r3, #2
 8009e24:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 8009e28:	f3bf 8f6f 	isb	sy
}
 8009e2c:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8009e2e:	f3bf 8f4f 	dsb	sy
}
 8009e32:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 8009e34:	69fb      	ldr	r3, [r7, #28]
 8009e36:	681a      	ldr	r2, [r3, #0]
 8009e38:	6a3b      	ldr	r3, [r7, #32]
 8009e3a:	601a      	str	r2, [r3, #0]
        dest_addr++;
 8009e3c:	6a3b      	ldr	r3, [r7, #32]
 8009e3e:	3304      	adds	r3, #4
 8009e40:	623b      	str	r3, [r7, #32]
        src_addr++;
 8009e42:	69fb      	ldr	r3, [r7, #28]
 8009e44:	3304      	adds	r3, #4
 8009e46:	61fb      	str	r3, [r7, #28]
        row_index--;
 8009e48:	7dfb      	ldrb	r3, [r7, #23]
 8009e4a:	3b01      	subs	r3, #1
 8009e4c:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 8009e4e:	7dfb      	ldrb	r3, [r7, #23]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d1ef      	bne.n	8009e34 <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 8009e54:	f3bf 8f6f 	isb	sy
}
 8009e58:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8009e5a:	f3bf 8f4f 	dsb	sy
}
 8009e5e:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8009e60:	69b9      	ldr	r1, [r7, #24]
 8009e62:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009e66:	f000 f85d 	bl	8009f24 <FLASH_WaitForLastOperation>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 8009e70:	69bb      	ldr	r3, [r7, #24]
 8009e72:	2b01      	cmp	r3, #1
 8009e74:	d106      	bne.n	8009e84 <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 8009e76:	4b0d      	ldr	r3, [pc, #52]	; (8009eac <HAL_FLASH_Program+0x120>)
 8009e78:	68db      	ldr	r3, [r3, #12]
 8009e7a:	4a0c      	ldr	r2, [pc, #48]	; (8009eac <HAL_FLASH_Program+0x120>)
 8009e7c:	f023 0302 	bic.w	r3, r3, #2
 8009e80:	60d3      	str	r3, [r2, #12]
 8009e82:	e007      	b.n	8009e94 <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 8009e84:	4b09      	ldr	r3, [pc, #36]	; (8009eac <HAL_FLASH_Program+0x120>)
 8009e86:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8009e8a:	4a08      	ldr	r2, [pc, #32]	; (8009eac <HAL_FLASH_Program+0x120>)
 8009e8c:	f023 0302 	bic.w	r3, r3, #2
 8009e90:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009e94:	4b04      	ldr	r3, [pc, #16]	; (8009ea8 <HAL_FLASH_Program+0x11c>)
 8009e96:	2200      	movs	r2, #0
 8009e98:	751a      	strb	r2, [r3, #20]

  return status;
 8009e9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3728      	adds	r7, #40	; 0x28
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	240051b4 	.word	0x240051b4
 8009eac:	52002000 	.word	0x52002000

08009eb0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8009eb4:	4b18      	ldr	r3, [pc, #96]	; (8009f18 <HAL_FLASH_Unlock+0x68>)
 8009eb6:	68db      	ldr	r3, [r3, #12]
 8009eb8:	f003 0301 	and.w	r3, r3, #1
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d00d      	beq.n	8009edc <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8009ec0:	4b15      	ldr	r3, [pc, #84]	; (8009f18 <HAL_FLASH_Unlock+0x68>)
 8009ec2:	4a16      	ldr	r2, [pc, #88]	; (8009f1c <HAL_FLASH_Unlock+0x6c>)
 8009ec4:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 8009ec6:	4b14      	ldr	r3, [pc, #80]	; (8009f18 <HAL_FLASH_Unlock+0x68>)
 8009ec8:	4a15      	ldr	r2, [pc, #84]	; (8009f20 <HAL_FLASH_Unlock+0x70>)
 8009eca:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8009ecc:	4b12      	ldr	r3, [pc, #72]	; (8009f18 <HAL_FLASH_Unlock+0x68>)
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	f003 0301 	and.w	r3, r3, #1
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d001      	beq.n	8009edc <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	e018      	b.n	8009f0e <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8009edc:	4b0e      	ldr	r3, [pc, #56]	; (8009f18 <HAL_FLASH_Unlock+0x68>)
 8009ede:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8009ee2:	f003 0301 	and.w	r3, r3, #1
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d010      	beq.n	8009f0c <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 8009eea:	4b0b      	ldr	r3, [pc, #44]	; (8009f18 <HAL_FLASH_Unlock+0x68>)
 8009eec:	4a0b      	ldr	r2, [pc, #44]	; (8009f1c <HAL_FLASH_Unlock+0x6c>)
 8009eee:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 8009ef2:	4b09      	ldr	r3, [pc, #36]	; (8009f18 <HAL_FLASH_Unlock+0x68>)
 8009ef4:	4a0a      	ldr	r2, [pc, #40]	; (8009f20 <HAL_FLASH_Unlock+0x70>)
 8009ef6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8009efa:	4b07      	ldr	r3, [pc, #28]	; (8009f18 <HAL_FLASH_Unlock+0x68>)
 8009efc:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8009f00:	f003 0301 	and.w	r3, r3, #1
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d001      	beq.n	8009f0c <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	e000      	b.n	8009f0e <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8009f0c:	2300      	movs	r3, #0
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr
 8009f18:	52002000 	.word	0x52002000
 8009f1c:	45670123 	.word	0x45670123
 8009f20:	cdef89ab 	.word	0xcdef89ab

08009f24 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b086      	sub	sp, #24
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 8009f2e:	2304      	movs	r3, #4
 8009f30:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8009f32:	4b42      	ldr	r3, [pc, #264]	; (800a03c <FLASH_WaitForLastOperation+0x118>)
 8009f34:	691a      	ldr	r2, [r3, #16]
 8009f36:	4b42      	ldr	r3, [pc, #264]	; (800a040 <FLASH_WaitForLastOperation+0x11c>)
 8009f38:	4013      	ands	r3, r2
 8009f3a:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 8009f3c:	f7fa f8d6 	bl	80040ec <HAL_GetTick>
 8009f40:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	2b02      	cmp	r3, #2
 8009f46:	d11b      	bne.n	8009f80 <FLASH_WaitForLastOperation+0x5c>
  {
    /* Get Error Flags */
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 8009f48:	4b3c      	ldr	r3, [pc, #240]	; (800a03c <FLASH_WaitForLastOperation+0x118>)
 8009f4a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8009f4e:	4b3c      	ldr	r3, [pc, #240]	; (800a040 <FLASH_WaitForLastOperation+0x11c>)
 8009f50:	4013      	ands	r3, r2
 8009f52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009f56:	613b      	str	r3, [r7, #16]
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 8009f58:	4b3a      	ldr	r3, [pc, #232]	; (800a044 <FLASH_WaitForLastOperation+0x120>)
 8009f5a:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8009f5c:	e010      	b.n	8009f80 <FLASH_WaitForLastOperation+0x5c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f64:	d00c      	beq.n	8009f80 <FLASH_WaitForLastOperation+0x5c>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009f66:	f7fa f8c1 	bl	80040ec <HAL_GetTick>
 8009f6a:	4602      	mov	r2, r0
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	1ad3      	subs	r3, r2, r3
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d302      	bcc.n	8009f7c <FLASH_WaitForLastOperation+0x58>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d101      	bne.n	8009f80 <FLASH_WaitForLastOperation+0x5c>
      {
        return HAL_TIMEOUT;
 8009f7c:	2303      	movs	r3, #3
 8009f7e:	e059      	b.n	800a034 <FLASH_WaitForLastOperation+0x110>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8009f80:	697a      	ldr	r2, [r7, #20]
 8009f82:	4b31      	ldr	r3, [pc, #196]	; (800a048 <FLASH_WaitForLastOperation+0x124>)
 8009f84:	4013      	ands	r3, r2
 8009f86:	697a      	ldr	r2, [r7, #20]
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d10a      	bne.n	8009fa2 <FLASH_WaitForLastOperation+0x7e>
 8009f8c:	4b2b      	ldr	r3, [pc, #172]	; (800a03c <FLASH_WaitForLastOperation+0x118>)
 8009f8e:	691a      	ldr	r2, [r3, #16]
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	4013      	ands	r3, r2
 8009f94:	697a      	ldr	r2, [r7, #20]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	bf0c      	ite	eq
 8009f9a:	2301      	moveq	r3, #1
 8009f9c:	2300      	movne	r3, #0
 8009f9e:	b2db      	uxtb	r3, r3
 8009fa0:	e00c      	b.n	8009fbc <FLASH_WaitForLastOperation+0x98>
 8009fa2:	4b26      	ldr	r3, [pc, #152]	; (800a03c <FLASH_WaitForLastOperation+0x118>)
 8009fa4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8009fa8:	43da      	mvns	r2, r3
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	4013      	ands	r3, r2
 8009fae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	bf0c      	ite	eq
 8009fb6:	2301      	moveq	r3, #1
 8009fb8:	2300      	movne	r3, #0
 8009fba:	b2db      	uxtb	r3, r3
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d1ce      	bne.n	8009f5e <FLASH_WaitForLastOperation+0x3a>
      }
    }
  }

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d017      	beq.n	8009ffa <FLASH_WaitForLastOperation+0xd6>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 8009fca:	4b20      	ldr	r3, [pc, #128]	; (800a04c <FLASH_WaitForLastOperation+0x128>)
 8009fcc:	699a      	ldr	r2, [r3, #24]
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	4a1e      	ldr	r2, [pc, #120]	; (800a04c <FLASH_WaitForLastOperation+0x128>)
 8009fd4:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8009fd6:	693a      	ldr	r2, [r7, #16]
 8009fd8:	4b1b      	ldr	r3, [pc, #108]	; (800a048 <FLASH_WaitForLastOperation+0x124>)
 8009fda:	4013      	ands	r3, r2
 8009fdc:	693a      	ldr	r2, [r7, #16]
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	d103      	bne.n	8009fea <FLASH_WaitForLastOperation+0xc6>
 8009fe2:	4a16      	ldr	r2, [pc, #88]	; (800a03c <FLASH_WaitForLastOperation+0x118>)
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	6153      	str	r3, [r2, #20]
 8009fe8:	e005      	b.n	8009ff6 <FLASH_WaitForLastOperation+0xd2>
 8009fea:	4a14      	ldr	r2, [pc, #80]	; (800a03c <FLASH_WaitForLastOperation+0x118>)
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ff2:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	e01c      	b.n	800a034 <FLASH_WaitForLastOperation+0x110>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d10b      	bne.n	800a018 <FLASH_WaitForLastOperation+0xf4>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 800a000:	4b0e      	ldr	r3, [pc, #56]	; (800a03c <FLASH_WaitForLastOperation+0x118>)
 800a002:	691b      	ldr	r3, [r3, #16]
 800a004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a00c:	d111      	bne.n	800a032 <FLASH_WaitForLastOperation+0x10e>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800a00e:	4b0b      	ldr	r3, [pc, #44]	; (800a03c <FLASH_WaitForLastOperation+0x118>)
 800a010:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a014:	615a      	str	r2, [r3, #20]
 800a016:	e00c      	b.n	800a032 <FLASH_WaitForLastOperation+0x10e>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 800a018:	4b08      	ldr	r3, [pc, #32]	; (800a03c <FLASH_WaitForLastOperation+0x118>)
 800a01a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800a01e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a022:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a026:	d104      	bne.n	800a032 <FLASH_WaitForLastOperation+0x10e>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800a028:	4b04      	ldr	r3, [pc, #16]	; (800a03c <FLASH_WaitForLastOperation+0x118>)
 800a02a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a02e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800a032:	2300      	movs	r3, #0
}
 800a034:	4618      	mov	r0, r3
 800a036:	3718      	adds	r7, #24
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	52002000 	.word	0x52002000
 800a040:	17ee0000 	.word	0x17ee0000
 800a044:	80000004 	.word	0x80000004
 800a048:	1fef000f 	.word	0x1fef000f
 800a04c:	240051b4 	.word	0x240051b4

0800a050 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b084      	sub	sp, #16
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a05a:	2300      	movs	r3, #0
 800a05c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a05e:	4b5e      	ldr	r3, [pc, #376]	; (800a1d8 <HAL_FLASHEx_Erase+0x188>)
 800a060:	7d1b      	ldrb	r3, [r3, #20]
 800a062:	2b01      	cmp	r3, #1
 800a064:	d101      	bne.n	800a06a <HAL_FLASHEx_Erase+0x1a>
 800a066:	2302      	movs	r3, #2
 800a068:	e0b2      	b.n	800a1d0 <HAL_FLASHEx_Erase+0x180>
 800a06a:	4b5b      	ldr	r3, [pc, #364]	; (800a1d8 <HAL_FLASHEx_Erase+0x188>)
 800a06c:	2201      	movs	r2, #1
 800a06e:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a070:	4b59      	ldr	r3, [pc, #356]	; (800a1d8 <HAL_FLASHEx_Erase+0x188>)
 800a072:	2200      	movs	r2, #0
 800a074:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	f003 0301 	and.w	r3, r3, #1
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d009      	beq.n	800a096 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800a082:	2101      	movs	r1, #1
 800a084:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a088:	f7ff ff4c 	bl	8009f24 <FLASH_WaitForLastOperation>
 800a08c:	4603      	mov	r3, r0
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d001      	beq.n	800a096 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800a092:	2301      	movs	r3, #1
 800a094:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	f003 0302 	and.w	r3, r3, #2
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d009      	beq.n	800a0b6 <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800a0a2:	2102      	movs	r1, #2
 800a0a4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a0a8:	f7ff ff3c 	bl	8009f24 <FLASH_WaitForLastOperation>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d001      	beq.n	800a0b6 <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 800a0b6:	7bfb      	ldrb	r3, [r7, #15]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	f040 8085 	bne.w	800a1c8 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	2b01      	cmp	r3, #1
 800a0c4:	d136      	bne.n	800a134 <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	691a      	ldr	r2, [r3, #16]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	4610      	mov	r0, r2
 800a0d2:	f000 f887 	bl	800a1e4 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	f003 0301 	and.w	r3, r3, #1
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d00f      	beq.n	800a102 <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800a0e2:	2101      	movs	r1, #1
 800a0e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a0e8:	f7ff ff1c 	bl	8009f24 <FLASH_WaitForLastOperation>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d001      	beq.n	800a0f6 <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 800a0f6:	4b39      	ldr	r3, [pc, #228]	; (800a1dc <HAL_FLASHEx_Erase+0x18c>)
 800a0f8:	68db      	ldr	r3, [r3, #12]
 800a0fa:	4a38      	ldr	r2, [pc, #224]	; (800a1dc <HAL_FLASHEx_Erase+0x18c>)
 800a0fc:	f023 0308 	bic.w	r3, r3, #8
 800a100:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	f003 0302 	and.w	r3, r3, #2
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d05c      	beq.n	800a1c8 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800a10e:	2102      	movs	r1, #2
 800a110:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a114:	f7ff ff06 	bl	8009f24 <FLASH_WaitForLastOperation>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d001      	beq.n	800a122 <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 800a11e:	2301      	movs	r3, #1
 800a120:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 800a122:	4b2e      	ldr	r3, [pc, #184]	; (800a1dc <HAL_FLASHEx_Erase+0x18c>)
 800a124:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a128:	4a2c      	ldr	r2, [pc, #176]	; (800a1dc <HAL_FLASHEx_Erase+0x18c>)
 800a12a:	f023 0308 	bic.w	r3, r3, #8
 800a12e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800a132:	e049      	b.n	800a1c8 <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a13a:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	689b      	ldr	r3, [r3, #8]
 800a140:	60bb      	str	r3, [r7, #8]
 800a142:	e039      	b.n	800a1b8 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6859      	ldr	r1, [r3, #4]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	691b      	ldr	r3, [r3, #16]
 800a14c:	461a      	mov	r2, r3
 800a14e:	68b8      	ldr	r0, [r7, #8]
 800a150:	f000 f8b2 	bl	800a2b8 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	f003 0301 	and.w	r3, r3, #1
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d00c      	beq.n	800a17a <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800a160:	2101      	movs	r1, #1
 800a162:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a166:	f7ff fedd 	bl	8009f24 <FLASH_WaitForLastOperation>
 800a16a:	4603      	mov	r3, r0
 800a16c:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800a16e:	4b1b      	ldr	r3, [pc, #108]	; (800a1dc <HAL_FLASHEx_Erase+0x18c>)
 800a170:	68da      	ldr	r2, [r3, #12]
 800a172:	491a      	ldr	r1, [pc, #104]	; (800a1dc <HAL_FLASHEx_Erase+0x18c>)
 800a174:	4b1a      	ldr	r3, [pc, #104]	; (800a1e0 <HAL_FLASHEx_Erase+0x190>)
 800a176:	4013      	ands	r3, r2
 800a178:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	f003 0302 	and.w	r3, r3, #2
 800a182:	2b00      	cmp	r3, #0
 800a184:	d00e      	beq.n	800a1a4 <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 800a186:	2102      	movs	r1, #2
 800a188:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a18c:	f7ff feca 	bl	8009f24 <FLASH_WaitForLastOperation>
 800a190:	4603      	mov	r3, r0
 800a192:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800a194:	4b11      	ldr	r3, [pc, #68]	; (800a1dc <HAL_FLASHEx_Erase+0x18c>)
 800a196:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800a19a:	4910      	ldr	r1, [pc, #64]	; (800a1dc <HAL_FLASHEx_Erase+0x18c>)
 800a19c:	4b10      	ldr	r3, [pc, #64]	; (800a1e0 <HAL_FLASHEx_Erase+0x190>)
 800a19e:	4013      	ands	r3, r2
 800a1a0:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800a1a4:	7bfb      	ldrb	r3, [r7, #15]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d003      	beq.n	800a1b2 <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	68ba      	ldr	r2, [r7, #8]
 800a1ae:	601a      	str	r2, [r3, #0]
          break;
 800a1b0:	e00a      	b.n	800a1c8 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	60bb      	str	r3, [r7, #8]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	68da      	ldr	r2, [r3, #12]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	689b      	ldr	r3, [r3, #8]
 800a1c0:	4413      	add	r3, r2
 800a1c2:	68ba      	ldr	r2, [r7, #8]
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	d3bd      	bcc.n	800a144 <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a1c8:	4b03      	ldr	r3, [pc, #12]	; (800a1d8 <HAL_FLASHEx_Erase+0x188>)
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	751a      	strb	r2, [r3, #20]

  return status;
 800a1ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3710      	adds	r7, #16
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	240051b4 	.word	0x240051b4
 800a1dc:	52002000 	.word	0x52002000
 800a1e0:	fffff8fb 	.word	0xfffff8fb

0800a1e4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	f003 0303 	and.w	r3, r3, #3
 800a1f4:	2b03      	cmp	r3, #3
 800a1f6:	d122      	bne.n	800a23e <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800a1f8:	4b2e      	ldr	r3, [pc, #184]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a1fa:	68db      	ldr	r3, [r3, #12]
 800a1fc:	4a2d      	ldr	r2, [pc, #180]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a1fe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800a202:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800a204:	4b2b      	ldr	r3, [pc, #172]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a206:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a20a:	4a2a      	ldr	r2, [pc, #168]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a20c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800a210:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 800a214:	4b27      	ldr	r3, [pc, #156]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a216:	68da      	ldr	r2, [r3, #12]
 800a218:	4926      	ldr	r1, [pc, #152]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	4313      	orrs	r3, r2
 800a21e:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 800a220:	4b24      	ldr	r3, [pc, #144]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a222:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800a226:	4923      	ldr	r1, [pc, #140]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	4313      	orrs	r3, r2
 800a22c:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 800a230:	4b20      	ldr	r3, [pc, #128]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a232:	699b      	ldr	r3, [r3, #24]
 800a234:	4a1f      	ldr	r2, [pc, #124]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a236:	f043 0310 	orr.w	r3, r3, #16
 800a23a:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 800a23c:	e033      	b.n	800a2a6 <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	f003 0301 	and.w	r3, r3, #1
 800a244:	2b00      	cmp	r3, #0
 800a246:	d011      	beq.n	800a26c <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800a248:	4b1a      	ldr	r3, [pc, #104]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a24a:	68db      	ldr	r3, [r3, #12]
 800a24c:	4a19      	ldr	r2, [pc, #100]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a24e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800a252:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 800a254:	4b17      	ldr	r3, [pc, #92]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a256:	68da      	ldr	r2, [r3, #12]
 800a258:	4916      	ldr	r1, [pc, #88]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	4313      	orrs	r3, r2
 800a25e:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800a260:	4b14      	ldr	r3, [pc, #80]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a262:	68db      	ldr	r3, [r3, #12]
 800a264:	4a13      	ldr	r2, [pc, #76]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a266:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800a26a:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	f003 0302 	and.w	r3, r3, #2
 800a272:	2b00      	cmp	r3, #0
 800a274:	d017      	beq.n	800a2a6 <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800a276:	4b0f      	ldr	r3, [pc, #60]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a278:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a27c:	4a0d      	ldr	r2, [pc, #52]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a27e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800a282:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 800a286:	4b0b      	ldr	r3, [pc, #44]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a288:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800a28c:	4909      	ldr	r1, [pc, #36]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	4313      	orrs	r3, r2
 800a292:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 800a296:	4b07      	ldr	r3, [pc, #28]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a298:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a29c:	4a05      	ldr	r2, [pc, #20]	; (800a2b4 <FLASH_MassErase+0xd0>)
 800a29e:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800a2a2:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 800a2a6:	bf00      	nop
 800a2a8:	370c      	adds	r7, #12
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr
 800a2b2:	bf00      	nop
 800a2b4:	52002000 	.word	0x52002000

0800a2b8 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b085      	sub	sp, #20
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	60b9      	str	r1, [r7, #8]
 800a2c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	f003 0301 	and.w	r3, r3, #1
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d010      	beq.n	800a2f0 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800a2ce:	4b18      	ldr	r3, [pc, #96]	; (800a330 <FLASH_Erase_Sector+0x78>)
 800a2d0:	68db      	ldr	r3, [r3, #12]
 800a2d2:	4a17      	ldr	r2, [pc, #92]	; (800a330 <FLASH_Erase_Sector+0x78>)
 800a2d4:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800a2d8:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800a2da:	4b15      	ldr	r3, [pc, #84]	; (800a330 <FLASH_Erase_Sector+0x78>)
 800a2dc:	68da      	ldr	r2, [r3, #12]
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	0219      	lsls	r1, r3, #8
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	430b      	orrs	r3, r1
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	4a11      	ldr	r2, [pc, #68]	; (800a330 <FLASH_Erase_Sector+0x78>)
 800a2ea:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800a2ee:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	f003 0302 	and.w	r3, r3, #2
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d014      	beq.n	800a324 <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800a2fa:	4b0d      	ldr	r3, [pc, #52]	; (800a330 <FLASH_Erase_Sector+0x78>)
 800a2fc:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a300:	4a0b      	ldr	r2, [pc, #44]	; (800a330 <FLASH_Erase_Sector+0x78>)
 800a302:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800a306:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800a30a:	4b09      	ldr	r3, [pc, #36]	; (800a330 <FLASH_Erase_Sector+0x78>)
 800a30c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	0219      	lsls	r1, r3, #8
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	430b      	orrs	r3, r1
 800a318:	4313      	orrs	r3, r2
 800a31a:	4a05      	ldr	r2, [pc, #20]	; (800a330 <FLASH_Erase_Sector+0x78>)
 800a31c:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800a320:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800a324:	bf00      	nop
 800a326:	3714      	adds	r7, #20
 800a328:	46bd      	mov	sp, r7
 800a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32e:	4770      	bx	lr
 800a330:	52002000 	.word	0x52002000

0800a334 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a334:	b480      	push	{r7}
 800a336:	b089      	sub	sp, #36	; 0x24
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a33e:	2300      	movs	r3, #0
 800a340:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a342:	4b89      	ldr	r3, [pc, #548]	; (800a568 <HAL_GPIO_Init+0x234>)
 800a344:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a346:	e194      	b.n	800a672 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	681a      	ldr	r2, [r3, #0]
 800a34c:	2101      	movs	r1, #1
 800a34e:	69fb      	ldr	r3, [r7, #28]
 800a350:	fa01 f303 	lsl.w	r3, r1, r3
 800a354:	4013      	ands	r3, r2
 800a356:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	f000 8186 	beq.w	800a66c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	2b01      	cmp	r3, #1
 800a366:	d00b      	beq.n	800a380 <HAL_GPIO_Init+0x4c>
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	2b02      	cmp	r3, #2
 800a36e:	d007      	beq.n	800a380 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a374:	2b11      	cmp	r3, #17
 800a376:	d003      	beq.n	800a380 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	2b12      	cmp	r3, #18
 800a37e:	d130      	bne.n	800a3e2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	689b      	ldr	r3, [r3, #8]
 800a384:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a386:	69fb      	ldr	r3, [r7, #28]
 800a388:	005b      	lsls	r3, r3, #1
 800a38a:	2203      	movs	r2, #3
 800a38c:	fa02 f303 	lsl.w	r3, r2, r3
 800a390:	43db      	mvns	r3, r3
 800a392:	69ba      	ldr	r2, [r7, #24]
 800a394:	4013      	ands	r3, r2
 800a396:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	68da      	ldr	r2, [r3, #12]
 800a39c:	69fb      	ldr	r3, [r7, #28]
 800a39e:	005b      	lsls	r3, r3, #1
 800a3a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a3a4:	69ba      	ldr	r2, [r7, #24]
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	69ba      	ldr	r2, [r7, #24]
 800a3ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	69fb      	ldr	r3, [r7, #28]
 800a3ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a3be:	43db      	mvns	r3, r3
 800a3c0:	69ba      	ldr	r2, [r7, #24]
 800a3c2:	4013      	ands	r3, r2
 800a3c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	091b      	lsrs	r3, r3, #4
 800a3cc:	f003 0201 	and.w	r2, r3, #1
 800a3d0:	69fb      	ldr	r3, [r7, #28]
 800a3d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a3d6:	69ba      	ldr	r2, [r7, #24]
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	69ba      	ldr	r2, [r7, #24]
 800a3e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	68db      	ldr	r3, [r3, #12]
 800a3e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a3e8:	69fb      	ldr	r3, [r7, #28]
 800a3ea:	005b      	lsls	r3, r3, #1
 800a3ec:	2203      	movs	r2, #3
 800a3ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a3f2:	43db      	mvns	r3, r3
 800a3f4:	69ba      	ldr	r2, [r7, #24]
 800a3f6:	4013      	ands	r3, r2
 800a3f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	689a      	ldr	r2, [r3, #8]
 800a3fe:	69fb      	ldr	r3, [r7, #28]
 800a400:	005b      	lsls	r3, r3, #1
 800a402:	fa02 f303 	lsl.w	r3, r2, r3
 800a406:	69ba      	ldr	r2, [r7, #24]
 800a408:	4313      	orrs	r3, r2
 800a40a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	69ba      	ldr	r2, [r7, #24]
 800a410:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	685b      	ldr	r3, [r3, #4]
 800a416:	2b02      	cmp	r3, #2
 800a418:	d003      	beq.n	800a422 <HAL_GPIO_Init+0xee>
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	2b12      	cmp	r3, #18
 800a420:	d123      	bne.n	800a46a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a422:	69fb      	ldr	r3, [r7, #28]
 800a424:	08da      	lsrs	r2, r3, #3
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	3208      	adds	r2, #8
 800a42a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a42e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a430:	69fb      	ldr	r3, [r7, #28]
 800a432:	f003 0307 	and.w	r3, r3, #7
 800a436:	009b      	lsls	r3, r3, #2
 800a438:	220f      	movs	r2, #15
 800a43a:	fa02 f303 	lsl.w	r3, r2, r3
 800a43e:	43db      	mvns	r3, r3
 800a440:	69ba      	ldr	r2, [r7, #24]
 800a442:	4013      	ands	r3, r2
 800a444:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	691a      	ldr	r2, [r3, #16]
 800a44a:	69fb      	ldr	r3, [r7, #28]
 800a44c:	f003 0307 	and.w	r3, r3, #7
 800a450:	009b      	lsls	r3, r3, #2
 800a452:	fa02 f303 	lsl.w	r3, r2, r3
 800a456:	69ba      	ldr	r2, [r7, #24]
 800a458:	4313      	orrs	r3, r2
 800a45a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a45c:	69fb      	ldr	r3, [r7, #28]
 800a45e:	08da      	lsrs	r2, r3, #3
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	3208      	adds	r2, #8
 800a464:	69b9      	ldr	r1, [r7, #24]
 800a466:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a470:	69fb      	ldr	r3, [r7, #28]
 800a472:	005b      	lsls	r3, r3, #1
 800a474:	2203      	movs	r2, #3
 800a476:	fa02 f303 	lsl.w	r3, r2, r3
 800a47a:	43db      	mvns	r3, r3
 800a47c:	69ba      	ldr	r2, [r7, #24]
 800a47e:	4013      	ands	r3, r2
 800a480:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	f003 0203 	and.w	r2, r3, #3
 800a48a:	69fb      	ldr	r3, [r7, #28]
 800a48c:	005b      	lsls	r3, r3, #1
 800a48e:	fa02 f303 	lsl.w	r3, r2, r3
 800a492:	69ba      	ldr	r2, [r7, #24]
 800a494:	4313      	orrs	r3, r2
 800a496:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	69ba      	ldr	r2, [r7, #24]
 800a49c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	f000 80e0 	beq.w	800a66c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a4ac:	4b2f      	ldr	r3, [pc, #188]	; (800a56c <HAL_GPIO_Init+0x238>)
 800a4ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a4b2:	4a2e      	ldr	r2, [pc, #184]	; (800a56c <HAL_GPIO_Init+0x238>)
 800a4b4:	f043 0302 	orr.w	r3, r3, #2
 800a4b8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a4bc:	4b2b      	ldr	r3, [pc, #172]	; (800a56c <HAL_GPIO_Init+0x238>)
 800a4be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a4c2:	f003 0302 	and.w	r3, r3, #2
 800a4c6:	60fb      	str	r3, [r7, #12]
 800a4c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a4ca:	4a29      	ldr	r2, [pc, #164]	; (800a570 <HAL_GPIO_Init+0x23c>)
 800a4cc:	69fb      	ldr	r3, [r7, #28]
 800a4ce:	089b      	lsrs	r3, r3, #2
 800a4d0:	3302      	adds	r3, #2
 800a4d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a4d8:	69fb      	ldr	r3, [r7, #28]
 800a4da:	f003 0303 	and.w	r3, r3, #3
 800a4de:	009b      	lsls	r3, r3, #2
 800a4e0:	220f      	movs	r2, #15
 800a4e2:	fa02 f303 	lsl.w	r3, r2, r3
 800a4e6:	43db      	mvns	r3, r3
 800a4e8:	69ba      	ldr	r2, [r7, #24]
 800a4ea:	4013      	ands	r3, r2
 800a4ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	4a20      	ldr	r2, [pc, #128]	; (800a574 <HAL_GPIO_Init+0x240>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d052      	beq.n	800a59c <HAL_GPIO_Init+0x268>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	4a1f      	ldr	r2, [pc, #124]	; (800a578 <HAL_GPIO_Init+0x244>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d031      	beq.n	800a562 <HAL_GPIO_Init+0x22e>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	4a1e      	ldr	r2, [pc, #120]	; (800a57c <HAL_GPIO_Init+0x248>)
 800a502:	4293      	cmp	r3, r2
 800a504:	d02b      	beq.n	800a55e <HAL_GPIO_Init+0x22a>
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	4a1d      	ldr	r2, [pc, #116]	; (800a580 <HAL_GPIO_Init+0x24c>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d025      	beq.n	800a55a <HAL_GPIO_Init+0x226>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	4a1c      	ldr	r2, [pc, #112]	; (800a584 <HAL_GPIO_Init+0x250>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d01f      	beq.n	800a556 <HAL_GPIO_Init+0x222>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	4a1b      	ldr	r2, [pc, #108]	; (800a588 <HAL_GPIO_Init+0x254>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d019      	beq.n	800a552 <HAL_GPIO_Init+0x21e>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	4a1a      	ldr	r2, [pc, #104]	; (800a58c <HAL_GPIO_Init+0x258>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d013      	beq.n	800a54e <HAL_GPIO_Init+0x21a>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	4a19      	ldr	r2, [pc, #100]	; (800a590 <HAL_GPIO_Init+0x25c>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d00d      	beq.n	800a54a <HAL_GPIO_Init+0x216>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	4a18      	ldr	r2, [pc, #96]	; (800a594 <HAL_GPIO_Init+0x260>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d007      	beq.n	800a546 <HAL_GPIO_Init+0x212>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	4a17      	ldr	r2, [pc, #92]	; (800a598 <HAL_GPIO_Init+0x264>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d101      	bne.n	800a542 <HAL_GPIO_Init+0x20e>
 800a53e:	2309      	movs	r3, #9
 800a540:	e02d      	b.n	800a59e <HAL_GPIO_Init+0x26a>
 800a542:	230a      	movs	r3, #10
 800a544:	e02b      	b.n	800a59e <HAL_GPIO_Init+0x26a>
 800a546:	2308      	movs	r3, #8
 800a548:	e029      	b.n	800a59e <HAL_GPIO_Init+0x26a>
 800a54a:	2307      	movs	r3, #7
 800a54c:	e027      	b.n	800a59e <HAL_GPIO_Init+0x26a>
 800a54e:	2306      	movs	r3, #6
 800a550:	e025      	b.n	800a59e <HAL_GPIO_Init+0x26a>
 800a552:	2305      	movs	r3, #5
 800a554:	e023      	b.n	800a59e <HAL_GPIO_Init+0x26a>
 800a556:	2304      	movs	r3, #4
 800a558:	e021      	b.n	800a59e <HAL_GPIO_Init+0x26a>
 800a55a:	2303      	movs	r3, #3
 800a55c:	e01f      	b.n	800a59e <HAL_GPIO_Init+0x26a>
 800a55e:	2302      	movs	r3, #2
 800a560:	e01d      	b.n	800a59e <HAL_GPIO_Init+0x26a>
 800a562:	2301      	movs	r3, #1
 800a564:	e01b      	b.n	800a59e <HAL_GPIO_Init+0x26a>
 800a566:	bf00      	nop
 800a568:	58000080 	.word	0x58000080
 800a56c:	58024400 	.word	0x58024400
 800a570:	58000400 	.word	0x58000400
 800a574:	58020000 	.word	0x58020000
 800a578:	58020400 	.word	0x58020400
 800a57c:	58020800 	.word	0x58020800
 800a580:	58020c00 	.word	0x58020c00
 800a584:	58021000 	.word	0x58021000
 800a588:	58021400 	.word	0x58021400
 800a58c:	58021800 	.word	0x58021800
 800a590:	58021c00 	.word	0x58021c00
 800a594:	58022000 	.word	0x58022000
 800a598:	58022400 	.word	0x58022400
 800a59c:	2300      	movs	r3, #0
 800a59e:	69fa      	ldr	r2, [r7, #28]
 800a5a0:	f002 0203 	and.w	r2, r2, #3
 800a5a4:	0092      	lsls	r2, r2, #2
 800a5a6:	4093      	lsls	r3, r2
 800a5a8:	69ba      	ldr	r2, [r7, #24]
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a5ae:	4938      	ldr	r1, [pc, #224]	; (800a690 <HAL_GPIO_Init+0x35c>)
 800a5b0:	69fb      	ldr	r3, [r7, #28]
 800a5b2:	089b      	lsrs	r3, r3, #2
 800a5b4:	3302      	adds	r3, #2
 800a5b6:	69ba      	ldr	r2, [r7, #24]
 800a5b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	43db      	mvns	r3, r3
 800a5c6:	69ba      	ldr	r2, [r7, #24]
 800a5c8:	4013      	ands	r3, r2
 800a5ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d003      	beq.n	800a5e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800a5d8:	69ba      	ldr	r2, [r7, #24]
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	69ba      	ldr	r2, [r7, #24]
 800a5e4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	43db      	mvns	r3, r3
 800a5f0:	69ba      	ldr	r2, [r7, #24]
 800a5f2:	4013      	ands	r3, r2
 800a5f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d003      	beq.n	800a60a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800a602:	69ba      	ldr	r2, [r7, #24]
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	4313      	orrs	r3, r2
 800a608:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	69ba      	ldr	r2, [r7, #24]
 800a60e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	43db      	mvns	r3, r3
 800a61c:	69ba      	ldr	r2, [r7, #24]
 800a61e:	4013      	ands	r3, r2
 800a620:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d003      	beq.n	800a636 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800a62e:	69ba      	ldr	r2, [r7, #24]
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	4313      	orrs	r3, r2
 800a634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a636:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a63a:	69bb      	ldr	r3, [r7, #24]
 800a63c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a63e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	43db      	mvns	r3, r3
 800a64a:	69ba      	ldr	r2, [r7, #24]
 800a64c:	4013      	ands	r3, r2
 800a64e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d003      	beq.n	800a664 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800a65c:	69ba      	ldr	r2, [r7, #24]
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	4313      	orrs	r3, r2
 800a662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a664:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a668:	69bb      	ldr	r3, [r7, #24]
 800a66a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800a66c:	69fb      	ldr	r3, [r7, #28]
 800a66e:	3301      	adds	r3, #1
 800a670:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	681a      	ldr	r2, [r3, #0]
 800a676:	69fb      	ldr	r3, [r7, #28]
 800a678:	fa22 f303 	lsr.w	r3, r2, r3
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	f47f ae63 	bne.w	800a348 <HAL_GPIO_Init+0x14>
  }
}
 800a682:	bf00      	nop
 800a684:	bf00      	nop
 800a686:	3724      	adds	r7, #36	; 0x24
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr
 800a690:	58000400 	.word	0x58000400

0800a694 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a694:	b480      	push	{r7}
 800a696:	b083      	sub	sp, #12
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	460b      	mov	r3, r1
 800a69e:	807b      	strh	r3, [r7, #2]
 800a6a0:	4613      	mov	r3, r2
 800a6a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a6a4:	787b      	ldrb	r3, [r7, #1]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d003      	beq.n	800a6b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a6aa:	887a      	ldrh	r2, [r7, #2]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a6b0:	e003      	b.n	800a6ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a6b2:	887b      	ldrh	r3, [r7, #2]
 800a6b4:	041a      	lsls	r2, r3, #16
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	619a      	str	r2, [r3, #24]
}
 800a6ba:	bf00      	nop
 800a6bc:	370c      	adds	r7, #12
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr

0800a6c6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a6c6:	b480      	push	{r7}
 800a6c8:	b085      	sub	sp, #20
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
 800a6ce:	460b      	mov	r3, r1
 800a6d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	695b      	ldr	r3, [r3, #20]
 800a6d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a6d8:	887a      	ldrh	r2, [r7, #2]
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	4013      	ands	r3, r2
 800a6de:	041a      	lsls	r2, r3, #16
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	43d9      	mvns	r1, r3
 800a6e4:	887b      	ldrh	r3, [r7, #2]
 800a6e6:	400b      	ands	r3, r1
 800a6e8:	431a      	orrs	r2, r3
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	619a      	str	r2, [r3, #24]
}
 800a6ee:	bf00      	nop
 800a6f0:	3714      	adds	r7, #20
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f8:	4770      	bx	lr
	...

0800a6fc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b083      	sub	sp, #12
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800a704:	4a08      	ldr	r2, [pc, #32]	; (800a728 <HAL_HSEM_FastTake+0x2c>)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	3320      	adds	r3, #32
 800a70a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a70e:	4a07      	ldr	r2, [pc, #28]	; (800a72c <HAL_HSEM_FastTake+0x30>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d101      	bne.n	800a718 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800a714:	2300      	movs	r3, #0
 800a716:	e000      	b.n	800a71a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800a718:	2301      	movs	r3, #1
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	370c      	adds	r7, #12
 800a71e:	46bd      	mov	sp, r7
 800a720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a724:	4770      	bx	lr
 800a726:	bf00      	nop
 800a728:	58026400 	.word	0x58026400
 800a72c:	80000300 	.word	0x80000300

0800a730 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800a730:	b480      	push	{r7}
 800a732:	b083      	sub	sp, #12
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800a73a:	4906      	ldr	r1, [pc, #24]	; (800a754 <HAL_HSEM_Release+0x24>)
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800a748:	bf00      	nop
 800a74a:	370c      	adds	r7, #12
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr
 800a754:	58026400 	.word	0x58026400

0800a758 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800a758:	b480      	push	{r7}
 800a75a:	b085      	sub	sp, #20
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a760:	4b0d      	ldr	r3, [pc, #52]	; (800a798 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800a762:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a766:	4a0c      	ldr	r2, [pc, #48]	; (800a798 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800a768:	f043 0302 	orr.w	r3, r3, #2
 800a76c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a770:	4b09      	ldr	r3, [pc, #36]	; (800a798 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800a772:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a776:	f003 0302 	and.w	r3, r3, #2
 800a77a:	60fb      	str	r3, [r7, #12]
 800a77c:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800a77e:	4b07      	ldr	r3, [pc, #28]	; (800a79c <HAL_I2CEx_EnableFastModePlus+0x44>)
 800a780:	685a      	ldr	r2, [r3, #4]
 800a782:	4906      	ldr	r1, [pc, #24]	; (800a79c <HAL_I2CEx_EnableFastModePlus+0x44>)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	4313      	orrs	r3, r2
 800a788:	604b      	str	r3, [r1, #4]
}
 800a78a:	bf00      	nop
 800a78c:	3714      	adds	r7, #20
 800a78e:	46bd      	mov	sp, r7
 800a790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a794:	4770      	bx	lr
 800a796:	bf00      	nop
 800a798:	58024400 	.word	0x58024400
 800a79c:	58000400 	.word	0x58000400

0800a7a0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b084      	sub	sp, #16
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800a7a8:	4b29      	ldr	r3, [pc, #164]	; (800a850 <HAL_PWREx_ConfigSupply+0xb0>)
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	f003 0307 	and.w	r3, r3, #7
 800a7b0:	2b06      	cmp	r3, #6
 800a7b2:	d00a      	beq.n	800a7ca <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a7b4:	4b26      	ldr	r3, [pc, #152]	; (800a850 <HAL_PWREx_ConfigSupply+0xb0>)
 800a7b6:	68db      	ldr	r3, [r3, #12]
 800a7b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a7bc:	687a      	ldr	r2, [r7, #4]
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d001      	beq.n	800a7c6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	e040      	b.n	800a848 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	e03e      	b.n	800a848 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a7ca:	4b21      	ldr	r3, [pc, #132]	; (800a850 <HAL_PWREx_ConfigSupply+0xb0>)
 800a7cc:	68db      	ldr	r3, [r3, #12]
 800a7ce:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800a7d2:	491f      	ldr	r1, [pc, #124]	; (800a850 <HAL_PWREx_ConfigSupply+0xb0>)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a7da:	f7f9 fc87 	bl	80040ec <HAL_GetTick>
 800a7de:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a7e0:	e009      	b.n	800a7f6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a7e2:	f7f9 fc83 	bl	80040ec <HAL_GetTick>
 800a7e6:	4602      	mov	r2, r0
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	1ad3      	subs	r3, r2, r3
 800a7ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a7f0:	d901      	bls.n	800a7f6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	e028      	b.n	800a848 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a7f6:	4b16      	ldr	r3, [pc, #88]	; (800a850 <HAL_PWREx_ConfigSupply+0xb0>)
 800a7f8:	685b      	ldr	r3, [r3, #4]
 800a7fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a7fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a802:	d1ee      	bne.n	800a7e2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2b1e      	cmp	r3, #30
 800a808:	d008      	beq.n	800a81c <HAL_PWREx_ConfigSupply+0x7c>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2b2e      	cmp	r3, #46	; 0x2e
 800a80e:	d005      	beq.n	800a81c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2b1d      	cmp	r3, #29
 800a814:	d002      	beq.n	800a81c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2b2d      	cmp	r3, #45	; 0x2d
 800a81a:	d114      	bne.n	800a846 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800a81c:	f7f9 fc66 	bl	80040ec <HAL_GetTick>
 800a820:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a822:	e009      	b.n	800a838 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a824:	f7f9 fc62 	bl	80040ec <HAL_GetTick>
 800a828:	4602      	mov	r2, r0
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	1ad3      	subs	r3, r2, r3
 800a82e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a832:	d901      	bls.n	800a838 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800a834:	2301      	movs	r3, #1
 800a836:	e007      	b.n	800a848 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a838:	4b05      	ldr	r3, [pc, #20]	; (800a850 <HAL_PWREx_ConfigSupply+0xb0>)
 800a83a:	68db      	ldr	r3, [r3, #12]
 800a83c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a844:	d1ee      	bne.n	800a824 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a846:	2300      	movs	r3, #0
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3710      	adds	r7, #16
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}
 800a850:	58024800 	.word	0x58024800

0800a854 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b08c      	sub	sp, #48	; 0x30
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d101      	bne.n	800a866 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a862:	2301      	movs	r3, #1
 800a864:	e3ff      	b.n	800b066 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f003 0301 	and.w	r3, r3, #1
 800a86e:	2b00      	cmp	r3, #0
 800a870:	f000 8087 	beq.w	800a982 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a874:	4b99      	ldr	r3, [pc, #612]	; (800aadc <HAL_RCC_OscConfig+0x288>)
 800a876:	691b      	ldr	r3, [r3, #16]
 800a878:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a87c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a87e:	4b97      	ldr	r3, [pc, #604]	; (800aadc <HAL_RCC_OscConfig+0x288>)
 800a880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a882:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a886:	2b10      	cmp	r3, #16
 800a888:	d007      	beq.n	800a89a <HAL_RCC_OscConfig+0x46>
 800a88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a88c:	2b18      	cmp	r3, #24
 800a88e:	d110      	bne.n	800a8b2 <HAL_RCC_OscConfig+0x5e>
 800a890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a892:	f003 0303 	and.w	r3, r3, #3
 800a896:	2b02      	cmp	r3, #2
 800a898:	d10b      	bne.n	800a8b2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a89a:	4b90      	ldr	r3, [pc, #576]	; (800aadc <HAL_RCC_OscConfig+0x288>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d06c      	beq.n	800a980 <HAL_RCC_OscConfig+0x12c>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d168      	bne.n	800a980 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	e3d9      	b.n	800b066 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8ba:	d106      	bne.n	800a8ca <HAL_RCC_OscConfig+0x76>
 800a8bc:	4b87      	ldr	r3, [pc, #540]	; (800aadc <HAL_RCC_OscConfig+0x288>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a86      	ldr	r2, [pc, #536]	; (800aadc <HAL_RCC_OscConfig+0x288>)
 800a8c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8c6:	6013      	str	r3, [r2, #0]
 800a8c8:	e02e      	b.n	800a928 <HAL_RCC_OscConfig+0xd4>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d10c      	bne.n	800a8ec <HAL_RCC_OscConfig+0x98>
 800a8d2:	4b82      	ldr	r3, [pc, #520]	; (800aadc <HAL_RCC_OscConfig+0x288>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	4a81      	ldr	r2, [pc, #516]	; (800aadc <HAL_RCC_OscConfig+0x288>)
 800a8d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8dc:	6013      	str	r3, [r2, #0]
 800a8de:	4b7f      	ldr	r3, [pc, #508]	; (800aadc <HAL_RCC_OscConfig+0x288>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	4a7e      	ldr	r2, [pc, #504]	; (800aadc <HAL_RCC_OscConfig+0x288>)
 800a8e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a8e8:	6013      	str	r3, [r2, #0]
 800a8ea:	e01d      	b.n	800a928 <HAL_RCC_OscConfig+0xd4>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a8f4:	d10c      	bne.n	800a910 <HAL_RCC_OscConfig+0xbc>
 800a8f6:	4b79      	ldr	r3, [pc, #484]	; (800aadc <HAL_RCC_OscConfig+0x288>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4a78      	ldr	r2, [pc, #480]	; (800aadc <HAL_RCC_OscConfig+0x288>)
 800a8fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a900:	6013      	str	r3, [r2, #0]
 800a902:	4b76      	ldr	r3, [pc, #472]	; (800aadc <HAL_RCC_OscConfig+0x288>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4a75      	ldr	r2, [pc, #468]	; (800aadc <HAL_RCC_OscConfig+0x288>)
 800a908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a90c:	6013      	str	r3, [r2, #0]
 800a90e:	e00b      	b.n	800a928 <HAL_RCC_OscConfig+0xd4>
 800a910:	4b72      	ldr	r3, [pc, #456]	; (800aadc <HAL_RCC_OscConfig+0x288>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4a71      	ldr	r2, [pc, #452]	; (800aadc <HAL_RCC_OscConfig+0x288>)
 800a916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a91a:	6013      	str	r3, [r2, #0]
 800a91c:	4b6f      	ldr	r3, [pc, #444]	; (800aadc <HAL_RCC_OscConfig+0x288>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a6e      	ldr	r2, [pc, #440]	; (800aadc <HAL_RCC_OscConfig+0x288>)
 800a922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a926:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	685b      	ldr	r3, [r3, #4]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d013      	beq.n	800a958 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a930:	f7f9 fbdc 	bl	80040ec <HAL_GetTick>
 800a934:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a936:	e008      	b.n	800a94a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a938:	f7f9 fbd8 	bl	80040ec <HAL_GetTick>
 800a93c:	4602      	mov	r2, r0
 800a93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a940:	1ad3      	subs	r3, r2, r3
 800a942:	2b64      	cmp	r3, #100	; 0x64
 800a944:	d901      	bls.n	800a94a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a946:	2303      	movs	r3, #3
 800a948:	e38d      	b.n	800b066 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a94a:	4b64      	ldr	r3, [pc, #400]	; (800aadc <HAL_RCC_OscConfig+0x288>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a952:	2b00      	cmp	r3, #0
 800a954:	d0f0      	beq.n	800a938 <HAL_RCC_OscConfig+0xe4>
 800a956:	e014      	b.n	800a982 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a958:	f7f9 fbc8 	bl	80040ec <HAL_GetTick>
 800a95c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a95e:	e008      	b.n	800a972 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a960:	f7f9 fbc4 	bl	80040ec <HAL_GetTick>
 800a964:	4602      	mov	r2, r0
 800a966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a968:	1ad3      	subs	r3, r2, r3
 800a96a:	2b64      	cmp	r3, #100	; 0x64
 800a96c:	d901      	bls.n	800a972 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a96e:	2303      	movs	r3, #3
 800a970:	e379      	b.n	800b066 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a972:	4b5a      	ldr	r3, [pc, #360]	; (800aadc <HAL_RCC_OscConfig+0x288>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d1f0      	bne.n	800a960 <HAL_RCC_OscConfig+0x10c>
 800a97e:	e000      	b.n	800a982 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a980:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f003 0302 	and.w	r3, r3, #2
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	f000 80ae 	beq.w	800aaec <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a990:	4b52      	ldr	r3, [pc, #328]	; (800aadc <HAL_RCC_OscConfig+0x288>)
 800a992:	691b      	ldr	r3, [r3, #16]
 800a994:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a998:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a99a:	4b50      	ldr	r3, [pc, #320]	; (800aadc <HAL_RCC_OscConfig+0x288>)
 800a99c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a99e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a9a0:	6a3b      	ldr	r3, [r7, #32]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d007      	beq.n	800a9b6 <HAL_RCC_OscConfig+0x162>
 800a9a6:	6a3b      	ldr	r3, [r7, #32]
 800a9a8:	2b18      	cmp	r3, #24
 800a9aa:	d13a      	bne.n	800aa22 <HAL_RCC_OscConfig+0x1ce>
 800a9ac:	69fb      	ldr	r3, [r7, #28]
 800a9ae:	f003 0303 	and.w	r3, r3, #3
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d135      	bne.n	800aa22 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a9b6:	4b49      	ldr	r3, [pc, #292]	; (800aadc <HAL_RCC_OscConfig+0x288>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f003 0304 	and.w	r3, r3, #4
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d005      	beq.n	800a9ce <HAL_RCC_OscConfig+0x17a>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	68db      	ldr	r3, [r3, #12]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d101      	bne.n	800a9ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	e34b      	b.n	800b066 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9ce:	f7f9 fbbd 	bl	800414c <HAL_GetREVID>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	f241 0203 	movw	r2, #4099	; 0x1003
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d817      	bhi.n	800aa0c <HAL_RCC_OscConfig+0x1b8>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	691b      	ldr	r3, [r3, #16]
 800a9e0:	2b40      	cmp	r3, #64	; 0x40
 800a9e2:	d108      	bne.n	800a9f6 <HAL_RCC_OscConfig+0x1a2>
 800a9e4:	4b3d      	ldr	r3, [pc, #244]	; (800aadc <HAL_RCC_OscConfig+0x288>)
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a9ec:	4a3b      	ldr	r2, [pc, #236]	; (800aadc <HAL_RCC_OscConfig+0x288>)
 800a9ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9f2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a9f4:	e07a      	b.n	800aaec <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9f6:	4b39      	ldr	r3, [pc, #228]	; (800aadc <HAL_RCC_OscConfig+0x288>)
 800a9f8:	685b      	ldr	r3, [r3, #4]
 800a9fa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	691b      	ldr	r3, [r3, #16]
 800aa02:	031b      	lsls	r3, r3, #12
 800aa04:	4935      	ldr	r1, [pc, #212]	; (800aadc <HAL_RCC_OscConfig+0x288>)
 800aa06:	4313      	orrs	r3, r2
 800aa08:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aa0a:	e06f      	b.n	800aaec <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa0c:	4b33      	ldr	r3, [pc, #204]	; (800aadc <HAL_RCC_OscConfig+0x288>)
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	691b      	ldr	r3, [r3, #16]
 800aa18:	061b      	lsls	r3, r3, #24
 800aa1a:	4930      	ldr	r1, [pc, #192]	; (800aadc <HAL_RCC_OscConfig+0x288>)
 800aa1c:	4313      	orrs	r3, r2
 800aa1e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aa20:	e064      	b.n	800aaec <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	68db      	ldr	r3, [r3, #12]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d045      	beq.n	800aab6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800aa2a:	4b2c      	ldr	r3, [pc, #176]	; (800aadc <HAL_RCC_OscConfig+0x288>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f023 0219 	bic.w	r2, r3, #25
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	68db      	ldr	r3, [r3, #12]
 800aa36:	4929      	ldr	r1, [pc, #164]	; (800aadc <HAL_RCC_OscConfig+0x288>)
 800aa38:	4313      	orrs	r3, r2
 800aa3a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa3c:	f7f9 fb56 	bl	80040ec <HAL_GetTick>
 800aa40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aa42:	e008      	b.n	800aa56 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800aa44:	f7f9 fb52 	bl	80040ec <HAL_GetTick>
 800aa48:	4602      	mov	r2, r0
 800aa4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4c:	1ad3      	subs	r3, r2, r3
 800aa4e:	2b02      	cmp	r3, #2
 800aa50:	d901      	bls.n	800aa56 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800aa52:	2303      	movs	r3, #3
 800aa54:	e307      	b.n	800b066 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aa56:	4b21      	ldr	r3, [pc, #132]	; (800aadc <HAL_RCC_OscConfig+0x288>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f003 0304 	and.w	r3, r3, #4
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d0f0      	beq.n	800aa44 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa62:	f7f9 fb73 	bl	800414c <HAL_GetREVID>
 800aa66:	4603      	mov	r3, r0
 800aa68:	f241 0203 	movw	r2, #4099	; 0x1003
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d817      	bhi.n	800aaa0 <HAL_RCC_OscConfig+0x24c>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	691b      	ldr	r3, [r3, #16]
 800aa74:	2b40      	cmp	r3, #64	; 0x40
 800aa76:	d108      	bne.n	800aa8a <HAL_RCC_OscConfig+0x236>
 800aa78:	4b18      	ldr	r3, [pc, #96]	; (800aadc <HAL_RCC_OscConfig+0x288>)
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800aa80:	4a16      	ldr	r2, [pc, #88]	; (800aadc <HAL_RCC_OscConfig+0x288>)
 800aa82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa86:	6053      	str	r3, [r2, #4]
 800aa88:	e030      	b.n	800aaec <HAL_RCC_OscConfig+0x298>
 800aa8a:	4b14      	ldr	r3, [pc, #80]	; (800aadc <HAL_RCC_OscConfig+0x288>)
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	691b      	ldr	r3, [r3, #16]
 800aa96:	031b      	lsls	r3, r3, #12
 800aa98:	4910      	ldr	r1, [pc, #64]	; (800aadc <HAL_RCC_OscConfig+0x288>)
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	604b      	str	r3, [r1, #4]
 800aa9e:	e025      	b.n	800aaec <HAL_RCC_OscConfig+0x298>
 800aaa0:	4b0e      	ldr	r3, [pc, #56]	; (800aadc <HAL_RCC_OscConfig+0x288>)
 800aaa2:	685b      	ldr	r3, [r3, #4]
 800aaa4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	691b      	ldr	r3, [r3, #16]
 800aaac:	061b      	lsls	r3, r3, #24
 800aaae:	490b      	ldr	r1, [pc, #44]	; (800aadc <HAL_RCC_OscConfig+0x288>)
 800aab0:	4313      	orrs	r3, r2
 800aab2:	604b      	str	r3, [r1, #4]
 800aab4:	e01a      	b.n	800aaec <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aab6:	4b09      	ldr	r3, [pc, #36]	; (800aadc <HAL_RCC_OscConfig+0x288>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	4a08      	ldr	r2, [pc, #32]	; (800aadc <HAL_RCC_OscConfig+0x288>)
 800aabc:	f023 0301 	bic.w	r3, r3, #1
 800aac0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aac2:	f7f9 fb13 	bl	80040ec <HAL_GetTick>
 800aac6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800aac8:	e00a      	b.n	800aae0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800aaca:	f7f9 fb0f 	bl	80040ec <HAL_GetTick>
 800aace:	4602      	mov	r2, r0
 800aad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad2:	1ad3      	subs	r3, r2, r3
 800aad4:	2b02      	cmp	r3, #2
 800aad6:	d903      	bls.n	800aae0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800aad8:	2303      	movs	r3, #3
 800aada:	e2c4      	b.n	800b066 <HAL_RCC_OscConfig+0x812>
 800aadc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800aae0:	4ba4      	ldr	r3, [pc, #656]	; (800ad74 <HAL_RCC_OscConfig+0x520>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f003 0304 	and.w	r3, r3, #4
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d1ee      	bne.n	800aaca <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f003 0310 	and.w	r3, r3, #16
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	f000 80a9 	beq.w	800ac4c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aafa:	4b9e      	ldr	r3, [pc, #632]	; (800ad74 <HAL_RCC_OscConfig+0x520>)
 800aafc:	691b      	ldr	r3, [r3, #16]
 800aafe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab02:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ab04:	4b9b      	ldr	r3, [pc, #620]	; (800ad74 <HAL_RCC_OscConfig+0x520>)
 800ab06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab08:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ab0a:	69bb      	ldr	r3, [r7, #24]
 800ab0c:	2b08      	cmp	r3, #8
 800ab0e:	d007      	beq.n	800ab20 <HAL_RCC_OscConfig+0x2cc>
 800ab10:	69bb      	ldr	r3, [r7, #24]
 800ab12:	2b18      	cmp	r3, #24
 800ab14:	d13a      	bne.n	800ab8c <HAL_RCC_OscConfig+0x338>
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	f003 0303 	and.w	r3, r3, #3
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d135      	bne.n	800ab8c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ab20:	4b94      	ldr	r3, [pc, #592]	; (800ad74 <HAL_RCC_OscConfig+0x520>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d005      	beq.n	800ab38 <HAL_RCC_OscConfig+0x2e4>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	69db      	ldr	r3, [r3, #28]
 800ab30:	2b80      	cmp	r3, #128	; 0x80
 800ab32:	d001      	beq.n	800ab38 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800ab34:	2301      	movs	r3, #1
 800ab36:	e296      	b.n	800b066 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ab38:	f7f9 fb08 	bl	800414c <HAL_GetREVID>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	f241 0203 	movw	r2, #4099	; 0x1003
 800ab42:	4293      	cmp	r3, r2
 800ab44:	d817      	bhi.n	800ab76 <HAL_RCC_OscConfig+0x322>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6a1b      	ldr	r3, [r3, #32]
 800ab4a:	2b20      	cmp	r3, #32
 800ab4c:	d108      	bne.n	800ab60 <HAL_RCC_OscConfig+0x30c>
 800ab4e:	4b89      	ldr	r3, [pc, #548]	; (800ad74 <HAL_RCC_OscConfig+0x520>)
 800ab50:	685b      	ldr	r3, [r3, #4]
 800ab52:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800ab56:	4a87      	ldr	r2, [pc, #540]	; (800ad74 <HAL_RCC_OscConfig+0x520>)
 800ab58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab5c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ab5e:	e075      	b.n	800ac4c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ab60:	4b84      	ldr	r3, [pc, #528]	; (800ad74 <HAL_RCC_OscConfig+0x520>)
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6a1b      	ldr	r3, [r3, #32]
 800ab6c:	069b      	lsls	r3, r3, #26
 800ab6e:	4981      	ldr	r1, [pc, #516]	; (800ad74 <HAL_RCC_OscConfig+0x520>)
 800ab70:	4313      	orrs	r3, r2
 800ab72:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ab74:	e06a      	b.n	800ac4c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ab76:	4b7f      	ldr	r3, [pc, #508]	; (800ad74 <HAL_RCC_OscConfig+0x520>)
 800ab78:	68db      	ldr	r3, [r3, #12]
 800ab7a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6a1b      	ldr	r3, [r3, #32]
 800ab82:	061b      	lsls	r3, r3, #24
 800ab84:	497b      	ldr	r1, [pc, #492]	; (800ad74 <HAL_RCC_OscConfig+0x520>)
 800ab86:	4313      	orrs	r3, r2
 800ab88:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ab8a:	e05f      	b.n	800ac4c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	69db      	ldr	r3, [r3, #28]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d042      	beq.n	800ac1a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800ab94:	4b77      	ldr	r3, [pc, #476]	; (800ad74 <HAL_RCC_OscConfig+0x520>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	4a76      	ldr	r2, [pc, #472]	; (800ad74 <HAL_RCC_OscConfig+0x520>)
 800ab9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aba0:	f7f9 faa4 	bl	80040ec <HAL_GetTick>
 800aba4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aba6:	e008      	b.n	800abba <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800aba8:	f7f9 faa0 	bl	80040ec <HAL_GetTick>
 800abac:	4602      	mov	r2, r0
 800abae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb0:	1ad3      	subs	r3, r2, r3
 800abb2:	2b02      	cmp	r3, #2
 800abb4:	d901      	bls.n	800abba <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800abb6:	2303      	movs	r3, #3
 800abb8:	e255      	b.n	800b066 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800abba:	4b6e      	ldr	r3, [pc, #440]	; (800ad74 <HAL_RCC_OscConfig+0x520>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d0f0      	beq.n	800aba8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800abc6:	f7f9 fac1 	bl	800414c <HAL_GetREVID>
 800abca:	4603      	mov	r3, r0
 800abcc:	f241 0203 	movw	r2, #4099	; 0x1003
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d817      	bhi.n	800ac04 <HAL_RCC_OscConfig+0x3b0>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6a1b      	ldr	r3, [r3, #32]
 800abd8:	2b20      	cmp	r3, #32
 800abda:	d108      	bne.n	800abee <HAL_RCC_OscConfig+0x39a>
 800abdc:	4b65      	ldr	r3, [pc, #404]	; (800ad74 <HAL_RCC_OscConfig+0x520>)
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800abe4:	4a63      	ldr	r2, [pc, #396]	; (800ad74 <HAL_RCC_OscConfig+0x520>)
 800abe6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800abea:	6053      	str	r3, [r2, #4]
 800abec:	e02e      	b.n	800ac4c <HAL_RCC_OscConfig+0x3f8>
 800abee:	4b61      	ldr	r3, [pc, #388]	; (800ad74 <HAL_RCC_OscConfig+0x520>)
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6a1b      	ldr	r3, [r3, #32]
 800abfa:	069b      	lsls	r3, r3, #26
 800abfc:	495d      	ldr	r1, [pc, #372]	; (800ad74 <HAL_RCC_OscConfig+0x520>)
 800abfe:	4313      	orrs	r3, r2
 800ac00:	604b      	str	r3, [r1, #4]
 800ac02:	e023      	b.n	800ac4c <HAL_RCC_OscConfig+0x3f8>
 800ac04:	4b5b      	ldr	r3, [pc, #364]	; (800ad74 <HAL_RCC_OscConfig+0x520>)
 800ac06:	68db      	ldr	r3, [r3, #12]
 800ac08:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6a1b      	ldr	r3, [r3, #32]
 800ac10:	061b      	lsls	r3, r3, #24
 800ac12:	4958      	ldr	r1, [pc, #352]	; (800ad74 <HAL_RCC_OscConfig+0x520>)
 800ac14:	4313      	orrs	r3, r2
 800ac16:	60cb      	str	r3, [r1, #12]
 800ac18:	e018      	b.n	800ac4c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800ac1a:	4b56      	ldr	r3, [pc, #344]	; (800ad74 <HAL_RCC_OscConfig+0x520>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4a55      	ldr	r2, [pc, #340]	; (800ad74 <HAL_RCC_OscConfig+0x520>)
 800ac20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac26:	f7f9 fa61 	bl	80040ec <HAL_GetTick>
 800ac2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ac2c:	e008      	b.n	800ac40 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800ac2e:	f7f9 fa5d 	bl	80040ec <HAL_GetTick>
 800ac32:	4602      	mov	r2, r0
 800ac34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac36:	1ad3      	subs	r3, r2, r3
 800ac38:	2b02      	cmp	r3, #2
 800ac3a:	d901      	bls.n	800ac40 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800ac3c:	2303      	movs	r3, #3
 800ac3e:	e212      	b.n	800b066 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ac40:	4b4c      	ldr	r3, [pc, #304]	; (800ad74 <HAL_RCC_OscConfig+0x520>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d1f0      	bne.n	800ac2e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f003 0308 	and.w	r3, r3, #8
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d036      	beq.n	800acc6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	695b      	ldr	r3, [r3, #20]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d019      	beq.n	800ac94 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ac60:	4b44      	ldr	r3, [pc, #272]	; (800ad74 <HAL_RCC_OscConfig+0x520>)
 800ac62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac64:	4a43      	ldr	r2, [pc, #268]	; (800ad74 <HAL_RCC_OscConfig+0x520>)
 800ac66:	f043 0301 	orr.w	r3, r3, #1
 800ac6a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac6c:	f7f9 fa3e 	bl	80040ec <HAL_GetTick>
 800ac70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ac72:	e008      	b.n	800ac86 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ac74:	f7f9 fa3a 	bl	80040ec <HAL_GetTick>
 800ac78:	4602      	mov	r2, r0
 800ac7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7c:	1ad3      	subs	r3, r2, r3
 800ac7e:	2b02      	cmp	r3, #2
 800ac80:	d901      	bls.n	800ac86 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800ac82:	2303      	movs	r3, #3
 800ac84:	e1ef      	b.n	800b066 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ac86:	4b3b      	ldr	r3, [pc, #236]	; (800ad74 <HAL_RCC_OscConfig+0x520>)
 800ac88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac8a:	f003 0302 	and.w	r3, r3, #2
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d0f0      	beq.n	800ac74 <HAL_RCC_OscConfig+0x420>
 800ac92:	e018      	b.n	800acc6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ac94:	4b37      	ldr	r3, [pc, #220]	; (800ad74 <HAL_RCC_OscConfig+0x520>)
 800ac96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac98:	4a36      	ldr	r2, [pc, #216]	; (800ad74 <HAL_RCC_OscConfig+0x520>)
 800ac9a:	f023 0301 	bic.w	r3, r3, #1
 800ac9e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aca0:	f7f9 fa24 	bl	80040ec <HAL_GetTick>
 800aca4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aca6:	e008      	b.n	800acba <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aca8:	f7f9 fa20 	bl	80040ec <HAL_GetTick>
 800acac:	4602      	mov	r2, r0
 800acae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb0:	1ad3      	subs	r3, r2, r3
 800acb2:	2b02      	cmp	r3, #2
 800acb4:	d901      	bls.n	800acba <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800acb6:	2303      	movs	r3, #3
 800acb8:	e1d5      	b.n	800b066 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800acba:	4b2e      	ldr	r3, [pc, #184]	; (800ad74 <HAL_RCC_OscConfig+0x520>)
 800acbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acbe:	f003 0302 	and.w	r3, r3, #2
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d1f0      	bne.n	800aca8 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f003 0320 	and.w	r3, r3, #32
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d036      	beq.n	800ad40 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	699b      	ldr	r3, [r3, #24]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d019      	beq.n	800ad0e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800acda:	4b26      	ldr	r3, [pc, #152]	; (800ad74 <HAL_RCC_OscConfig+0x520>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4a25      	ldr	r2, [pc, #148]	; (800ad74 <HAL_RCC_OscConfig+0x520>)
 800ace0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ace4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ace6:	f7f9 fa01 	bl	80040ec <HAL_GetTick>
 800acea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800acec:	e008      	b.n	800ad00 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800acee:	f7f9 f9fd 	bl	80040ec <HAL_GetTick>
 800acf2:	4602      	mov	r2, r0
 800acf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf6:	1ad3      	subs	r3, r2, r3
 800acf8:	2b02      	cmp	r3, #2
 800acfa:	d901      	bls.n	800ad00 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800acfc:	2303      	movs	r3, #3
 800acfe:	e1b2      	b.n	800b066 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ad00:	4b1c      	ldr	r3, [pc, #112]	; (800ad74 <HAL_RCC_OscConfig+0x520>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d0f0      	beq.n	800acee <HAL_RCC_OscConfig+0x49a>
 800ad0c:	e018      	b.n	800ad40 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ad0e:	4b19      	ldr	r3, [pc, #100]	; (800ad74 <HAL_RCC_OscConfig+0x520>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	4a18      	ldr	r2, [pc, #96]	; (800ad74 <HAL_RCC_OscConfig+0x520>)
 800ad14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad18:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ad1a:	f7f9 f9e7 	bl	80040ec <HAL_GetTick>
 800ad1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ad20:	e008      	b.n	800ad34 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800ad22:	f7f9 f9e3 	bl	80040ec <HAL_GetTick>
 800ad26:	4602      	mov	r2, r0
 800ad28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad2a:	1ad3      	subs	r3, r2, r3
 800ad2c:	2b02      	cmp	r3, #2
 800ad2e:	d901      	bls.n	800ad34 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800ad30:	2303      	movs	r3, #3
 800ad32:	e198      	b.n	800b066 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ad34:	4b0f      	ldr	r3, [pc, #60]	; (800ad74 <HAL_RCC_OscConfig+0x520>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d1f0      	bne.n	800ad22 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f003 0304 	and.w	r3, r3, #4
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	f000 8085 	beq.w	800ae58 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ad4e:	4b0a      	ldr	r3, [pc, #40]	; (800ad78 <HAL_RCC_OscConfig+0x524>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	4a09      	ldr	r2, [pc, #36]	; (800ad78 <HAL_RCC_OscConfig+0x524>)
 800ad54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ad5a:	f7f9 f9c7 	bl	80040ec <HAL_GetTick>
 800ad5e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ad60:	e00c      	b.n	800ad7c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800ad62:	f7f9 f9c3 	bl	80040ec <HAL_GetTick>
 800ad66:	4602      	mov	r2, r0
 800ad68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6a:	1ad3      	subs	r3, r2, r3
 800ad6c:	2b64      	cmp	r3, #100	; 0x64
 800ad6e:	d905      	bls.n	800ad7c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800ad70:	2303      	movs	r3, #3
 800ad72:	e178      	b.n	800b066 <HAL_RCC_OscConfig+0x812>
 800ad74:	58024400 	.word	0x58024400
 800ad78:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ad7c:	4b96      	ldr	r3, [pc, #600]	; (800afd8 <HAL_RCC_OscConfig+0x784>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d0ec      	beq.n	800ad62 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	689b      	ldr	r3, [r3, #8]
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d106      	bne.n	800ad9e <HAL_RCC_OscConfig+0x54a>
 800ad90:	4b92      	ldr	r3, [pc, #584]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800ad92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad94:	4a91      	ldr	r2, [pc, #580]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800ad96:	f043 0301 	orr.w	r3, r3, #1
 800ad9a:	6713      	str	r3, [r2, #112]	; 0x70
 800ad9c:	e02d      	b.n	800adfa <HAL_RCC_OscConfig+0x5a6>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	689b      	ldr	r3, [r3, #8]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d10c      	bne.n	800adc0 <HAL_RCC_OscConfig+0x56c>
 800ada6:	4b8d      	ldr	r3, [pc, #564]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800ada8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adaa:	4a8c      	ldr	r2, [pc, #560]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800adac:	f023 0301 	bic.w	r3, r3, #1
 800adb0:	6713      	str	r3, [r2, #112]	; 0x70
 800adb2:	4b8a      	ldr	r3, [pc, #552]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800adb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adb6:	4a89      	ldr	r2, [pc, #548]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800adb8:	f023 0304 	bic.w	r3, r3, #4
 800adbc:	6713      	str	r3, [r2, #112]	; 0x70
 800adbe:	e01c      	b.n	800adfa <HAL_RCC_OscConfig+0x5a6>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	689b      	ldr	r3, [r3, #8]
 800adc4:	2b05      	cmp	r3, #5
 800adc6:	d10c      	bne.n	800ade2 <HAL_RCC_OscConfig+0x58e>
 800adc8:	4b84      	ldr	r3, [pc, #528]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800adca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adcc:	4a83      	ldr	r2, [pc, #524]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800adce:	f043 0304 	orr.w	r3, r3, #4
 800add2:	6713      	str	r3, [r2, #112]	; 0x70
 800add4:	4b81      	ldr	r3, [pc, #516]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800add6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800add8:	4a80      	ldr	r2, [pc, #512]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800adda:	f043 0301 	orr.w	r3, r3, #1
 800adde:	6713      	str	r3, [r2, #112]	; 0x70
 800ade0:	e00b      	b.n	800adfa <HAL_RCC_OscConfig+0x5a6>
 800ade2:	4b7e      	ldr	r3, [pc, #504]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800ade4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ade6:	4a7d      	ldr	r2, [pc, #500]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800ade8:	f023 0301 	bic.w	r3, r3, #1
 800adec:	6713      	str	r3, [r2, #112]	; 0x70
 800adee:	4b7b      	ldr	r3, [pc, #492]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800adf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adf2:	4a7a      	ldr	r2, [pc, #488]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800adf4:	f023 0304 	bic.w	r3, r3, #4
 800adf8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	689b      	ldr	r3, [r3, #8]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d015      	beq.n	800ae2e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae02:	f7f9 f973 	bl	80040ec <HAL_GetTick>
 800ae06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ae08:	e00a      	b.n	800ae20 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ae0a:	f7f9 f96f 	bl	80040ec <HAL_GetTick>
 800ae0e:	4602      	mov	r2, r0
 800ae10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae12:	1ad3      	subs	r3, r2, r3
 800ae14:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d901      	bls.n	800ae20 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800ae1c:	2303      	movs	r3, #3
 800ae1e:	e122      	b.n	800b066 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ae20:	4b6e      	ldr	r3, [pc, #440]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800ae22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae24:	f003 0302 	and.w	r3, r3, #2
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d0ee      	beq.n	800ae0a <HAL_RCC_OscConfig+0x5b6>
 800ae2c:	e014      	b.n	800ae58 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae2e:	f7f9 f95d 	bl	80040ec <HAL_GetTick>
 800ae32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ae34:	e00a      	b.n	800ae4c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ae36:	f7f9 f959 	bl	80040ec <HAL_GetTick>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae3e:	1ad3      	subs	r3, r2, r3
 800ae40:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d901      	bls.n	800ae4c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800ae48:	2303      	movs	r3, #3
 800ae4a:	e10c      	b.n	800b066 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ae4c:	4b63      	ldr	r3, [pc, #396]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800ae4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae50:	f003 0302 	and.w	r3, r3, #2
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d1ee      	bne.n	800ae36 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	f000 8101 	beq.w	800b064 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ae62:	4b5e      	ldr	r3, [pc, #376]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800ae64:	691b      	ldr	r3, [r3, #16]
 800ae66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ae6a:	2b18      	cmp	r3, #24
 800ae6c:	f000 80bc 	beq.w	800afe8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae74:	2b02      	cmp	r3, #2
 800ae76:	f040 8095 	bne.w	800afa4 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae7a:	4b58      	ldr	r3, [pc, #352]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4a57      	ldr	r2, [pc, #348]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800ae80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ae84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae86:	f7f9 f931 	bl	80040ec <HAL_GetTick>
 800ae8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ae8c:	e008      	b.n	800aea0 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ae8e:	f7f9 f92d 	bl	80040ec <HAL_GetTick>
 800ae92:	4602      	mov	r2, r0
 800ae94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae96:	1ad3      	subs	r3, r2, r3
 800ae98:	2b02      	cmp	r3, #2
 800ae9a:	d901      	bls.n	800aea0 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800ae9c:	2303      	movs	r3, #3
 800ae9e:	e0e2      	b.n	800b066 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aea0:	4b4e      	ldr	r3, [pc, #312]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d1f0      	bne.n	800ae8e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aeac:	4b4b      	ldr	r3, [pc, #300]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800aeae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aeb0:	4b4b      	ldr	r3, [pc, #300]	; (800afe0 <HAL_RCC_OscConfig+0x78c>)
 800aeb2:	4013      	ands	r3, r2
 800aeb4:	687a      	ldr	r2, [r7, #4]
 800aeb6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800aeb8:	687a      	ldr	r2, [r7, #4]
 800aeba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800aebc:	0112      	lsls	r2, r2, #4
 800aebe:	430a      	orrs	r2, r1
 800aec0:	4946      	ldr	r1, [pc, #280]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800aec2:	4313      	orrs	r3, r2
 800aec4:	628b      	str	r3, [r1, #40]	; 0x28
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeca:	3b01      	subs	r3, #1
 800aecc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aed4:	3b01      	subs	r3, #1
 800aed6:	025b      	lsls	r3, r3, #9
 800aed8:	b29b      	uxth	r3, r3
 800aeda:	431a      	orrs	r2, r3
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aee0:	3b01      	subs	r3, #1
 800aee2:	041b      	lsls	r3, r3, #16
 800aee4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800aee8:	431a      	orrs	r2, r3
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeee:	3b01      	subs	r3, #1
 800aef0:	061b      	lsls	r3, r3, #24
 800aef2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aef6:	4939      	ldr	r1, [pc, #228]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800aef8:	4313      	orrs	r3, r2
 800aefa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800aefc:	4b37      	ldr	r3, [pc, #220]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800aefe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af00:	4a36      	ldr	r2, [pc, #216]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800af02:	f023 0301 	bic.w	r3, r3, #1
 800af06:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800af08:	4b34      	ldr	r3, [pc, #208]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800af0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af0c:	4b35      	ldr	r3, [pc, #212]	; (800afe4 <HAL_RCC_OscConfig+0x790>)
 800af0e:	4013      	ands	r3, r2
 800af10:	687a      	ldr	r2, [r7, #4]
 800af12:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800af14:	00d2      	lsls	r2, r2, #3
 800af16:	4931      	ldr	r1, [pc, #196]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800af18:	4313      	orrs	r3, r2
 800af1a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800af1c:	4b2f      	ldr	r3, [pc, #188]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800af1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af20:	f023 020c 	bic.w	r2, r3, #12
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af28:	492c      	ldr	r1, [pc, #176]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800af2a:	4313      	orrs	r3, r2
 800af2c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800af2e:	4b2b      	ldr	r3, [pc, #172]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800af30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af32:	f023 0202 	bic.w	r2, r3, #2
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af3a:	4928      	ldr	r1, [pc, #160]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800af3c:	4313      	orrs	r3, r2
 800af3e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800af40:	4b26      	ldr	r3, [pc, #152]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800af42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af44:	4a25      	ldr	r2, [pc, #148]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800af46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af4c:	4b23      	ldr	r3, [pc, #140]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800af4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af50:	4a22      	ldr	r2, [pc, #136]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800af52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800af58:	4b20      	ldr	r3, [pc, #128]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800af5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af5c:	4a1f      	ldr	r2, [pc, #124]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800af5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800af62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800af64:	4b1d      	ldr	r3, [pc, #116]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800af66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af68:	4a1c      	ldr	r2, [pc, #112]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800af6a:	f043 0301 	orr.w	r3, r3, #1
 800af6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800af70:	4b1a      	ldr	r3, [pc, #104]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	4a19      	ldr	r2, [pc, #100]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800af76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800af7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af7c:	f7f9 f8b6 	bl	80040ec <HAL_GetTick>
 800af80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800af82:	e008      	b.n	800af96 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800af84:	f7f9 f8b2 	bl	80040ec <HAL_GetTick>
 800af88:	4602      	mov	r2, r0
 800af8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8c:	1ad3      	subs	r3, r2, r3
 800af8e:	2b02      	cmp	r3, #2
 800af90:	d901      	bls.n	800af96 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800af92:	2303      	movs	r3, #3
 800af94:	e067      	b.n	800b066 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800af96:	4b11      	ldr	r3, [pc, #68]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d0f0      	beq.n	800af84 <HAL_RCC_OscConfig+0x730>
 800afa2:	e05f      	b.n	800b064 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800afa4:	4b0d      	ldr	r3, [pc, #52]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4a0c      	ldr	r2, [pc, #48]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800afaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800afae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afb0:	f7f9 f89c 	bl	80040ec <HAL_GetTick>
 800afb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800afb6:	e008      	b.n	800afca <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800afb8:	f7f9 f898 	bl	80040ec <HAL_GetTick>
 800afbc:	4602      	mov	r2, r0
 800afbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc0:	1ad3      	subs	r3, r2, r3
 800afc2:	2b02      	cmp	r3, #2
 800afc4:	d901      	bls.n	800afca <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800afc6:	2303      	movs	r3, #3
 800afc8:	e04d      	b.n	800b066 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800afca:	4b04      	ldr	r3, [pc, #16]	; (800afdc <HAL_RCC_OscConfig+0x788>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d1f0      	bne.n	800afb8 <HAL_RCC_OscConfig+0x764>
 800afd6:	e045      	b.n	800b064 <HAL_RCC_OscConfig+0x810>
 800afd8:	58024800 	.word	0x58024800
 800afdc:	58024400 	.word	0x58024400
 800afe0:	fffffc0c 	.word	0xfffffc0c
 800afe4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800afe8:	4b21      	ldr	r3, [pc, #132]	; (800b070 <HAL_RCC_OscConfig+0x81c>)
 800afea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800afee:	4b20      	ldr	r3, [pc, #128]	; (800b070 <HAL_RCC_OscConfig+0x81c>)
 800aff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aff2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff8:	2b01      	cmp	r3, #1
 800affa:	d031      	beq.n	800b060 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	f003 0203 	and.w	r2, r3, #3
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b006:	429a      	cmp	r2, r3
 800b008:	d12a      	bne.n	800b060 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	091b      	lsrs	r3, r3, #4
 800b00e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b016:	429a      	cmp	r2, r3
 800b018:	d122      	bne.n	800b060 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b024:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b026:	429a      	cmp	r2, r3
 800b028:	d11a      	bne.n	800b060 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	0a5b      	lsrs	r3, r3, #9
 800b02e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b036:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b038:	429a      	cmp	r2, r3
 800b03a:	d111      	bne.n	800b060 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	0c1b      	lsrs	r3, r3, #16
 800b040:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b048:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d108      	bne.n	800b060 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	0e1b      	lsrs	r3, r3, #24
 800b052:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b05a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d001      	beq.n	800b064 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800b060:	2301      	movs	r3, #1
 800b062:	e000      	b.n	800b066 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800b064:	2300      	movs	r3, #0
}
 800b066:	4618      	mov	r0, r3
 800b068:	3730      	adds	r7, #48	; 0x30
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}
 800b06e:	bf00      	nop
 800b070:	58024400 	.word	0x58024400

0800b074 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b086      	sub	sp, #24
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d101      	bne.n	800b088 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b084:	2301      	movs	r3, #1
 800b086:	e19c      	b.n	800b3c2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b088:	4b8a      	ldr	r3, [pc, #552]	; (800b2b4 <HAL_RCC_ClockConfig+0x240>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f003 030f 	and.w	r3, r3, #15
 800b090:	683a      	ldr	r2, [r7, #0]
 800b092:	429a      	cmp	r2, r3
 800b094:	d910      	bls.n	800b0b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b096:	4b87      	ldr	r3, [pc, #540]	; (800b2b4 <HAL_RCC_ClockConfig+0x240>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f023 020f 	bic.w	r2, r3, #15
 800b09e:	4985      	ldr	r1, [pc, #532]	; (800b2b4 <HAL_RCC_ClockConfig+0x240>)
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	4313      	orrs	r3, r2
 800b0a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b0a6:	4b83      	ldr	r3, [pc, #524]	; (800b2b4 <HAL_RCC_ClockConfig+0x240>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f003 030f 	and.w	r3, r3, #15
 800b0ae:	683a      	ldr	r2, [r7, #0]
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d001      	beq.n	800b0b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	e184      	b.n	800b3c2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f003 0304 	and.w	r3, r3, #4
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d010      	beq.n	800b0e6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	691a      	ldr	r2, [r3, #16]
 800b0c8:	4b7b      	ldr	r3, [pc, #492]	; (800b2b8 <HAL_RCC_ClockConfig+0x244>)
 800b0ca:	699b      	ldr	r3, [r3, #24]
 800b0cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d908      	bls.n	800b0e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b0d4:	4b78      	ldr	r3, [pc, #480]	; (800b2b8 <HAL_RCC_ClockConfig+0x244>)
 800b0d6:	699b      	ldr	r3, [r3, #24]
 800b0d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	691b      	ldr	r3, [r3, #16]
 800b0e0:	4975      	ldr	r1, [pc, #468]	; (800b2b8 <HAL_RCC_ClockConfig+0x244>)
 800b0e2:	4313      	orrs	r3, r2
 800b0e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f003 0308 	and.w	r3, r3, #8
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d010      	beq.n	800b114 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	695a      	ldr	r2, [r3, #20]
 800b0f6:	4b70      	ldr	r3, [pc, #448]	; (800b2b8 <HAL_RCC_ClockConfig+0x244>)
 800b0f8:	69db      	ldr	r3, [r3, #28]
 800b0fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b0fe:	429a      	cmp	r2, r3
 800b100:	d908      	bls.n	800b114 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b102:	4b6d      	ldr	r3, [pc, #436]	; (800b2b8 <HAL_RCC_ClockConfig+0x244>)
 800b104:	69db      	ldr	r3, [r3, #28]
 800b106:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	695b      	ldr	r3, [r3, #20]
 800b10e:	496a      	ldr	r1, [pc, #424]	; (800b2b8 <HAL_RCC_ClockConfig+0x244>)
 800b110:	4313      	orrs	r3, r2
 800b112:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f003 0310 	and.w	r3, r3, #16
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d010      	beq.n	800b142 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	699a      	ldr	r2, [r3, #24]
 800b124:	4b64      	ldr	r3, [pc, #400]	; (800b2b8 <HAL_RCC_ClockConfig+0x244>)
 800b126:	69db      	ldr	r3, [r3, #28]
 800b128:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d908      	bls.n	800b142 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b130:	4b61      	ldr	r3, [pc, #388]	; (800b2b8 <HAL_RCC_ClockConfig+0x244>)
 800b132:	69db      	ldr	r3, [r3, #28]
 800b134:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	699b      	ldr	r3, [r3, #24]
 800b13c:	495e      	ldr	r1, [pc, #376]	; (800b2b8 <HAL_RCC_ClockConfig+0x244>)
 800b13e:	4313      	orrs	r3, r2
 800b140:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f003 0320 	and.w	r3, r3, #32
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d010      	beq.n	800b170 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	69da      	ldr	r2, [r3, #28]
 800b152:	4b59      	ldr	r3, [pc, #356]	; (800b2b8 <HAL_RCC_ClockConfig+0x244>)
 800b154:	6a1b      	ldr	r3, [r3, #32]
 800b156:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d908      	bls.n	800b170 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b15e:	4b56      	ldr	r3, [pc, #344]	; (800b2b8 <HAL_RCC_ClockConfig+0x244>)
 800b160:	6a1b      	ldr	r3, [r3, #32]
 800b162:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	69db      	ldr	r3, [r3, #28]
 800b16a:	4953      	ldr	r1, [pc, #332]	; (800b2b8 <HAL_RCC_ClockConfig+0x244>)
 800b16c:	4313      	orrs	r3, r2
 800b16e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f003 0302 	and.w	r3, r3, #2
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d010      	beq.n	800b19e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	68da      	ldr	r2, [r3, #12]
 800b180:	4b4d      	ldr	r3, [pc, #308]	; (800b2b8 <HAL_RCC_ClockConfig+0x244>)
 800b182:	699b      	ldr	r3, [r3, #24]
 800b184:	f003 030f 	and.w	r3, r3, #15
 800b188:	429a      	cmp	r2, r3
 800b18a:	d908      	bls.n	800b19e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b18c:	4b4a      	ldr	r3, [pc, #296]	; (800b2b8 <HAL_RCC_ClockConfig+0x244>)
 800b18e:	699b      	ldr	r3, [r3, #24]
 800b190:	f023 020f 	bic.w	r2, r3, #15
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	68db      	ldr	r3, [r3, #12]
 800b198:	4947      	ldr	r1, [pc, #284]	; (800b2b8 <HAL_RCC_ClockConfig+0x244>)
 800b19a:	4313      	orrs	r3, r2
 800b19c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f003 0301 	and.w	r3, r3, #1
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d055      	beq.n	800b256 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b1aa:	4b43      	ldr	r3, [pc, #268]	; (800b2b8 <HAL_RCC_ClockConfig+0x244>)
 800b1ac:	699b      	ldr	r3, [r3, #24]
 800b1ae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	689b      	ldr	r3, [r3, #8]
 800b1b6:	4940      	ldr	r1, [pc, #256]	; (800b2b8 <HAL_RCC_ClockConfig+0x244>)
 800b1b8:	4313      	orrs	r3, r2
 800b1ba:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	685b      	ldr	r3, [r3, #4]
 800b1c0:	2b02      	cmp	r3, #2
 800b1c2:	d107      	bne.n	800b1d4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b1c4:	4b3c      	ldr	r3, [pc, #240]	; (800b2b8 <HAL_RCC_ClockConfig+0x244>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d121      	bne.n	800b214 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	e0f6      	b.n	800b3c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	2b03      	cmp	r3, #3
 800b1da:	d107      	bne.n	800b1ec <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b1dc:	4b36      	ldr	r3, [pc, #216]	; (800b2b8 <HAL_RCC_ClockConfig+0x244>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d115      	bne.n	800b214 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	e0ea      	b.n	800b3c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	685b      	ldr	r3, [r3, #4]
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	d107      	bne.n	800b204 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b1f4:	4b30      	ldr	r3, [pc, #192]	; (800b2b8 <HAL_RCC_ClockConfig+0x244>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d109      	bne.n	800b214 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b200:	2301      	movs	r3, #1
 800b202:	e0de      	b.n	800b3c2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b204:	4b2c      	ldr	r3, [pc, #176]	; (800b2b8 <HAL_RCC_ClockConfig+0x244>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f003 0304 	and.w	r3, r3, #4
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d101      	bne.n	800b214 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b210:	2301      	movs	r3, #1
 800b212:	e0d6      	b.n	800b3c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b214:	4b28      	ldr	r3, [pc, #160]	; (800b2b8 <HAL_RCC_ClockConfig+0x244>)
 800b216:	691b      	ldr	r3, [r3, #16]
 800b218:	f023 0207 	bic.w	r2, r3, #7
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	4925      	ldr	r1, [pc, #148]	; (800b2b8 <HAL_RCC_ClockConfig+0x244>)
 800b222:	4313      	orrs	r3, r2
 800b224:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b226:	f7f8 ff61 	bl	80040ec <HAL_GetTick>
 800b22a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b22c:	e00a      	b.n	800b244 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b22e:	f7f8 ff5d 	bl	80040ec <HAL_GetTick>
 800b232:	4602      	mov	r2, r0
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	1ad3      	subs	r3, r2, r3
 800b238:	f241 3288 	movw	r2, #5000	; 0x1388
 800b23c:	4293      	cmp	r3, r2
 800b23e:	d901      	bls.n	800b244 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800b240:	2303      	movs	r3, #3
 800b242:	e0be      	b.n	800b3c2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b244:	4b1c      	ldr	r3, [pc, #112]	; (800b2b8 <HAL_RCC_ClockConfig+0x244>)
 800b246:	691b      	ldr	r3, [r3, #16]
 800b248:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	00db      	lsls	r3, r3, #3
 800b252:	429a      	cmp	r2, r3
 800b254:	d1eb      	bne.n	800b22e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f003 0302 	and.w	r3, r3, #2
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d010      	beq.n	800b284 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	68da      	ldr	r2, [r3, #12]
 800b266:	4b14      	ldr	r3, [pc, #80]	; (800b2b8 <HAL_RCC_ClockConfig+0x244>)
 800b268:	699b      	ldr	r3, [r3, #24]
 800b26a:	f003 030f 	and.w	r3, r3, #15
 800b26e:	429a      	cmp	r2, r3
 800b270:	d208      	bcs.n	800b284 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b272:	4b11      	ldr	r3, [pc, #68]	; (800b2b8 <HAL_RCC_ClockConfig+0x244>)
 800b274:	699b      	ldr	r3, [r3, #24]
 800b276:	f023 020f 	bic.w	r2, r3, #15
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	68db      	ldr	r3, [r3, #12]
 800b27e:	490e      	ldr	r1, [pc, #56]	; (800b2b8 <HAL_RCC_ClockConfig+0x244>)
 800b280:	4313      	orrs	r3, r2
 800b282:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b284:	4b0b      	ldr	r3, [pc, #44]	; (800b2b4 <HAL_RCC_ClockConfig+0x240>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f003 030f 	and.w	r3, r3, #15
 800b28c:	683a      	ldr	r2, [r7, #0]
 800b28e:	429a      	cmp	r2, r3
 800b290:	d214      	bcs.n	800b2bc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b292:	4b08      	ldr	r3, [pc, #32]	; (800b2b4 <HAL_RCC_ClockConfig+0x240>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f023 020f 	bic.w	r2, r3, #15
 800b29a:	4906      	ldr	r1, [pc, #24]	; (800b2b4 <HAL_RCC_ClockConfig+0x240>)
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	4313      	orrs	r3, r2
 800b2a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b2a2:	4b04      	ldr	r3, [pc, #16]	; (800b2b4 <HAL_RCC_ClockConfig+0x240>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f003 030f 	and.w	r3, r3, #15
 800b2aa:	683a      	ldr	r2, [r7, #0]
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d005      	beq.n	800b2bc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	e086      	b.n	800b3c2 <HAL_RCC_ClockConfig+0x34e>
 800b2b4:	52002000 	.word	0x52002000
 800b2b8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f003 0304 	and.w	r3, r3, #4
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d010      	beq.n	800b2ea <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	691a      	ldr	r2, [r3, #16]
 800b2cc:	4b3f      	ldr	r3, [pc, #252]	; (800b3cc <HAL_RCC_ClockConfig+0x358>)
 800b2ce:	699b      	ldr	r3, [r3, #24]
 800b2d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b2d4:	429a      	cmp	r2, r3
 800b2d6:	d208      	bcs.n	800b2ea <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b2d8:	4b3c      	ldr	r3, [pc, #240]	; (800b3cc <HAL_RCC_ClockConfig+0x358>)
 800b2da:	699b      	ldr	r3, [r3, #24]
 800b2dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	691b      	ldr	r3, [r3, #16]
 800b2e4:	4939      	ldr	r1, [pc, #228]	; (800b3cc <HAL_RCC_ClockConfig+0x358>)
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f003 0308 	and.w	r3, r3, #8
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d010      	beq.n	800b318 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	695a      	ldr	r2, [r3, #20]
 800b2fa:	4b34      	ldr	r3, [pc, #208]	; (800b3cc <HAL_RCC_ClockConfig+0x358>)
 800b2fc:	69db      	ldr	r3, [r3, #28]
 800b2fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b302:	429a      	cmp	r2, r3
 800b304:	d208      	bcs.n	800b318 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b306:	4b31      	ldr	r3, [pc, #196]	; (800b3cc <HAL_RCC_ClockConfig+0x358>)
 800b308:	69db      	ldr	r3, [r3, #28]
 800b30a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	695b      	ldr	r3, [r3, #20]
 800b312:	492e      	ldr	r1, [pc, #184]	; (800b3cc <HAL_RCC_ClockConfig+0x358>)
 800b314:	4313      	orrs	r3, r2
 800b316:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f003 0310 	and.w	r3, r3, #16
 800b320:	2b00      	cmp	r3, #0
 800b322:	d010      	beq.n	800b346 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	699a      	ldr	r2, [r3, #24]
 800b328:	4b28      	ldr	r3, [pc, #160]	; (800b3cc <HAL_RCC_ClockConfig+0x358>)
 800b32a:	69db      	ldr	r3, [r3, #28]
 800b32c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b330:	429a      	cmp	r2, r3
 800b332:	d208      	bcs.n	800b346 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b334:	4b25      	ldr	r3, [pc, #148]	; (800b3cc <HAL_RCC_ClockConfig+0x358>)
 800b336:	69db      	ldr	r3, [r3, #28]
 800b338:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	699b      	ldr	r3, [r3, #24]
 800b340:	4922      	ldr	r1, [pc, #136]	; (800b3cc <HAL_RCC_ClockConfig+0x358>)
 800b342:	4313      	orrs	r3, r2
 800b344:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f003 0320 	and.w	r3, r3, #32
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d010      	beq.n	800b374 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	69da      	ldr	r2, [r3, #28]
 800b356:	4b1d      	ldr	r3, [pc, #116]	; (800b3cc <HAL_RCC_ClockConfig+0x358>)
 800b358:	6a1b      	ldr	r3, [r3, #32]
 800b35a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b35e:	429a      	cmp	r2, r3
 800b360:	d208      	bcs.n	800b374 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b362:	4b1a      	ldr	r3, [pc, #104]	; (800b3cc <HAL_RCC_ClockConfig+0x358>)
 800b364:	6a1b      	ldr	r3, [r3, #32]
 800b366:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	69db      	ldr	r3, [r3, #28]
 800b36e:	4917      	ldr	r1, [pc, #92]	; (800b3cc <HAL_RCC_ClockConfig+0x358>)
 800b370:	4313      	orrs	r3, r2
 800b372:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b374:	f000 f834 	bl	800b3e0 <HAL_RCC_GetSysClockFreq>
 800b378:	4602      	mov	r2, r0
 800b37a:	4b14      	ldr	r3, [pc, #80]	; (800b3cc <HAL_RCC_ClockConfig+0x358>)
 800b37c:	699b      	ldr	r3, [r3, #24]
 800b37e:	0a1b      	lsrs	r3, r3, #8
 800b380:	f003 030f 	and.w	r3, r3, #15
 800b384:	4912      	ldr	r1, [pc, #72]	; (800b3d0 <HAL_RCC_ClockConfig+0x35c>)
 800b386:	5ccb      	ldrb	r3, [r1, r3]
 800b388:	f003 031f 	and.w	r3, r3, #31
 800b38c:	fa22 f303 	lsr.w	r3, r2, r3
 800b390:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b392:	4b0e      	ldr	r3, [pc, #56]	; (800b3cc <HAL_RCC_ClockConfig+0x358>)
 800b394:	699b      	ldr	r3, [r3, #24]
 800b396:	f003 030f 	and.w	r3, r3, #15
 800b39a:	4a0d      	ldr	r2, [pc, #52]	; (800b3d0 <HAL_RCC_ClockConfig+0x35c>)
 800b39c:	5cd3      	ldrb	r3, [r2, r3]
 800b39e:	f003 031f 	and.w	r3, r3, #31
 800b3a2:	693a      	ldr	r2, [r7, #16]
 800b3a4:	fa22 f303 	lsr.w	r3, r2, r3
 800b3a8:	4a0a      	ldr	r2, [pc, #40]	; (800b3d4 <HAL_RCC_ClockConfig+0x360>)
 800b3aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b3ac:	4a0a      	ldr	r2, [pc, #40]	; (800b3d8 <HAL_RCC_ClockConfig+0x364>)
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800b3b2:	4b0a      	ldr	r3, [pc, #40]	; (800b3dc <HAL_RCC_ClockConfig+0x368>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f7f8 fe4e 	bl	8004058 <HAL_InitTick>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b3c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3718      	adds	r7, #24
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}
 800b3ca:	bf00      	nop
 800b3cc:	58024400 	.word	0x58024400
 800b3d0:	08028a80 	.word	0x08028a80
 800b3d4:	24000004 	.word	0x24000004
 800b3d8:	24000000 	.word	0x24000000
 800b3dc:	24000010 	.word	0x24000010

0800b3e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b089      	sub	sp, #36	; 0x24
 800b3e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b3e6:	4bb3      	ldr	r3, [pc, #716]	; (800b6b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3e8:	691b      	ldr	r3, [r3, #16]
 800b3ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b3ee:	2b18      	cmp	r3, #24
 800b3f0:	f200 8155 	bhi.w	800b69e <HAL_RCC_GetSysClockFreq+0x2be>
 800b3f4:	a201      	add	r2, pc, #4	; (adr r2, 800b3fc <HAL_RCC_GetSysClockFreq+0x1c>)
 800b3f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3fa:	bf00      	nop
 800b3fc:	0800b461 	.word	0x0800b461
 800b400:	0800b69f 	.word	0x0800b69f
 800b404:	0800b69f 	.word	0x0800b69f
 800b408:	0800b69f 	.word	0x0800b69f
 800b40c:	0800b69f 	.word	0x0800b69f
 800b410:	0800b69f 	.word	0x0800b69f
 800b414:	0800b69f 	.word	0x0800b69f
 800b418:	0800b69f 	.word	0x0800b69f
 800b41c:	0800b487 	.word	0x0800b487
 800b420:	0800b69f 	.word	0x0800b69f
 800b424:	0800b69f 	.word	0x0800b69f
 800b428:	0800b69f 	.word	0x0800b69f
 800b42c:	0800b69f 	.word	0x0800b69f
 800b430:	0800b69f 	.word	0x0800b69f
 800b434:	0800b69f 	.word	0x0800b69f
 800b438:	0800b69f 	.word	0x0800b69f
 800b43c:	0800b48d 	.word	0x0800b48d
 800b440:	0800b69f 	.word	0x0800b69f
 800b444:	0800b69f 	.word	0x0800b69f
 800b448:	0800b69f 	.word	0x0800b69f
 800b44c:	0800b69f 	.word	0x0800b69f
 800b450:	0800b69f 	.word	0x0800b69f
 800b454:	0800b69f 	.word	0x0800b69f
 800b458:	0800b69f 	.word	0x0800b69f
 800b45c:	0800b493 	.word	0x0800b493
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b460:	4b94      	ldr	r3, [pc, #592]	; (800b6b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f003 0320 	and.w	r3, r3, #32
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d009      	beq.n	800b480 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b46c:	4b91      	ldr	r3, [pc, #580]	; (800b6b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	08db      	lsrs	r3, r3, #3
 800b472:	f003 0303 	and.w	r3, r3, #3
 800b476:	4a90      	ldr	r2, [pc, #576]	; (800b6b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b478:	fa22 f303 	lsr.w	r3, r2, r3
 800b47c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800b47e:	e111      	b.n	800b6a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b480:	4b8d      	ldr	r3, [pc, #564]	; (800b6b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b482:	61bb      	str	r3, [r7, #24]
    break;
 800b484:	e10e      	b.n	800b6a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800b486:	4b8d      	ldr	r3, [pc, #564]	; (800b6bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b488:	61bb      	str	r3, [r7, #24]
    break;
 800b48a:	e10b      	b.n	800b6a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800b48c:	4b8c      	ldr	r3, [pc, #560]	; (800b6c0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b48e:	61bb      	str	r3, [r7, #24]
    break;
 800b490:	e108      	b.n	800b6a4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b492:	4b88      	ldr	r3, [pc, #544]	; (800b6b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b496:	f003 0303 	and.w	r3, r3, #3
 800b49a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800b49c:	4b85      	ldr	r3, [pc, #532]	; (800b6b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b49e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4a0:	091b      	lsrs	r3, r3, #4
 800b4a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b4a6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b4a8:	4b82      	ldr	r3, [pc, #520]	; (800b6b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ac:	f003 0301 	and.w	r3, r3, #1
 800b4b0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b4b2:	4b80      	ldr	r3, [pc, #512]	; (800b6b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4b6:	08db      	lsrs	r3, r3, #3
 800b4b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b4bc:	68fa      	ldr	r2, [r7, #12]
 800b4be:	fb02 f303 	mul.w	r3, r2, r3
 800b4c2:	ee07 3a90 	vmov	s15, r3
 800b4c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4ca:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	f000 80e1 	beq.w	800b698 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	2b02      	cmp	r3, #2
 800b4da:	f000 8083 	beq.w	800b5e4 <HAL_RCC_GetSysClockFreq+0x204>
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	2b02      	cmp	r3, #2
 800b4e2:	f200 80a1 	bhi.w	800b628 <HAL_RCC_GetSysClockFreq+0x248>
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d003      	beq.n	800b4f4 <HAL_RCC_GetSysClockFreq+0x114>
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	2b01      	cmp	r3, #1
 800b4f0:	d056      	beq.n	800b5a0 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b4f2:	e099      	b.n	800b628 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4f4:	4b6f      	ldr	r3, [pc, #444]	; (800b6b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f003 0320 	and.w	r3, r3, #32
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d02d      	beq.n	800b55c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b500:	4b6c      	ldr	r3, [pc, #432]	; (800b6b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	08db      	lsrs	r3, r3, #3
 800b506:	f003 0303 	and.w	r3, r3, #3
 800b50a:	4a6b      	ldr	r2, [pc, #428]	; (800b6b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b50c:	fa22 f303 	lsr.w	r3, r2, r3
 800b510:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	ee07 3a90 	vmov	s15, r3
 800b518:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	ee07 3a90 	vmov	s15, r3
 800b522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b52a:	4b62      	ldr	r3, [pc, #392]	; (800b6b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b52c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b52e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b532:	ee07 3a90 	vmov	s15, r3
 800b536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b53a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b53e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b6c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b54a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b54e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b552:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b556:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800b55a:	e087      	b.n	800b66c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	ee07 3a90 	vmov	s15, r3
 800b562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b566:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b6c8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b56a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b56e:	4b51      	ldr	r3, [pc, #324]	; (800b6b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b576:	ee07 3a90 	vmov	s15, r3
 800b57a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b57e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b582:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b6c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b58a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b58e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b59a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b59e:	e065      	b.n	800b66c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	ee07 3a90 	vmov	s15, r3
 800b5a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5aa:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b6cc <HAL_RCC_GetSysClockFreq+0x2ec>
 800b5ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5b2:	4b40      	ldr	r3, [pc, #256]	; (800b6b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5ba:	ee07 3a90 	vmov	s15, r3
 800b5be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5c2:	ed97 6a02 	vldr	s12, [r7, #8]
 800b5c6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b6c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b5ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b5e2:	e043      	b.n	800b66c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	ee07 3a90 	vmov	s15, r3
 800b5ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5ee:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b6d0 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b5f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5f6:	4b2f      	ldr	r3, [pc, #188]	; (800b6b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5fe:	ee07 3a90 	vmov	s15, r3
 800b602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b606:	ed97 6a02 	vldr	s12, [r7, #8]
 800b60a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b6c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b60e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b616:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b61a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b61e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b622:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b626:	e021      	b.n	800b66c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	ee07 3a90 	vmov	s15, r3
 800b62e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b632:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b6cc <HAL_RCC_GetSysClockFreq+0x2ec>
 800b636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b63a:	4b1e      	ldr	r3, [pc, #120]	; (800b6b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b63c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b63e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b642:	ee07 3a90 	vmov	s15, r3
 800b646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b64a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b64e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b6c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b65a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b65e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b662:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b666:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b66a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800b66c:	4b11      	ldr	r3, [pc, #68]	; (800b6b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b66e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b670:	0a5b      	lsrs	r3, r3, #9
 800b672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b676:	3301      	adds	r3, #1
 800b678:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	ee07 3a90 	vmov	s15, r3
 800b680:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b684:	edd7 6a07 	vldr	s13, [r7, #28]
 800b688:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b68c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b690:	ee17 3a90 	vmov	r3, s15
 800b694:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800b696:	e005      	b.n	800b6a4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800b698:	2300      	movs	r3, #0
 800b69a:	61bb      	str	r3, [r7, #24]
    break;
 800b69c:	e002      	b.n	800b6a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800b69e:	4b07      	ldr	r3, [pc, #28]	; (800b6bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b6a0:	61bb      	str	r3, [r7, #24]
    break;
 800b6a2:	bf00      	nop
  }

  return sysclockfreq;
 800b6a4:	69bb      	ldr	r3, [r7, #24]
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3724      	adds	r7, #36	; 0x24
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b0:	4770      	bx	lr
 800b6b2:	bf00      	nop
 800b6b4:	58024400 	.word	0x58024400
 800b6b8:	03d09000 	.word	0x03d09000
 800b6bc:	003d0900 	.word	0x003d0900
 800b6c0:	017d7840 	.word	0x017d7840
 800b6c4:	46000000 	.word	0x46000000
 800b6c8:	4c742400 	.word	0x4c742400
 800b6cc:	4a742400 	.word	0x4a742400
 800b6d0:	4bbebc20 	.word	0x4bbebc20

0800b6d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b082      	sub	sp, #8
 800b6d8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b6da:	f7ff fe81 	bl	800b3e0 <HAL_RCC_GetSysClockFreq>
 800b6de:	4602      	mov	r2, r0
 800b6e0:	4b10      	ldr	r3, [pc, #64]	; (800b724 <HAL_RCC_GetHCLKFreq+0x50>)
 800b6e2:	699b      	ldr	r3, [r3, #24]
 800b6e4:	0a1b      	lsrs	r3, r3, #8
 800b6e6:	f003 030f 	and.w	r3, r3, #15
 800b6ea:	490f      	ldr	r1, [pc, #60]	; (800b728 <HAL_RCC_GetHCLKFreq+0x54>)
 800b6ec:	5ccb      	ldrb	r3, [r1, r3]
 800b6ee:	f003 031f 	and.w	r3, r3, #31
 800b6f2:	fa22 f303 	lsr.w	r3, r2, r3
 800b6f6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b6f8:	4b0a      	ldr	r3, [pc, #40]	; (800b724 <HAL_RCC_GetHCLKFreq+0x50>)
 800b6fa:	699b      	ldr	r3, [r3, #24]
 800b6fc:	f003 030f 	and.w	r3, r3, #15
 800b700:	4a09      	ldr	r2, [pc, #36]	; (800b728 <HAL_RCC_GetHCLKFreq+0x54>)
 800b702:	5cd3      	ldrb	r3, [r2, r3]
 800b704:	f003 031f 	and.w	r3, r3, #31
 800b708:	687a      	ldr	r2, [r7, #4]
 800b70a:	fa22 f303 	lsr.w	r3, r2, r3
 800b70e:	4a07      	ldr	r2, [pc, #28]	; (800b72c <HAL_RCC_GetHCLKFreq+0x58>)
 800b710:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b712:	4a07      	ldr	r2, [pc, #28]	; (800b730 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b718:	4b04      	ldr	r3, [pc, #16]	; (800b72c <HAL_RCC_GetHCLKFreq+0x58>)
 800b71a:	681b      	ldr	r3, [r3, #0]
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3708      	adds	r7, #8
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}
 800b724:	58024400 	.word	0x58024400
 800b728:	08028a80 	.word	0x08028a80
 800b72c:	24000004 	.word	0x24000004
 800b730:	24000000 	.word	0x24000000

0800b734 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b738:	f7ff ffcc 	bl	800b6d4 <HAL_RCC_GetHCLKFreq>
 800b73c:	4602      	mov	r2, r0
 800b73e:	4b06      	ldr	r3, [pc, #24]	; (800b758 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b740:	69db      	ldr	r3, [r3, #28]
 800b742:	091b      	lsrs	r3, r3, #4
 800b744:	f003 0307 	and.w	r3, r3, #7
 800b748:	4904      	ldr	r1, [pc, #16]	; (800b75c <HAL_RCC_GetPCLK1Freq+0x28>)
 800b74a:	5ccb      	ldrb	r3, [r1, r3]
 800b74c:	f003 031f 	and.w	r3, r3, #31
 800b750:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b754:	4618      	mov	r0, r3
 800b756:	bd80      	pop	{r7, pc}
 800b758:	58024400 	.word	0x58024400
 800b75c:	08028a80 	.word	0x08028a80

0800b760 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b764:	f7ff ffb6 	bl	800b6d4 <HAL_RCC_GetHCLKFreq>
 800b768:	4602      	mov	r2, r0
 800b76a:	4b06      	ldr	r3, [pc, #24]	; (800b784 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b76c:	69db      	ldr	r3, [r3, #28]
 800b76e:	0a1b      	lsrs	r3, r3, #8
 800b770:	f003 0307 	and.w	r3, r3, #7
 800b774:	4904      	ldr	r1, [pc, #16]	; (800b788 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b776:	5ccb      	ldrb	r3, [r1, r3]
 800b778:	f003 031f 	and.w	r3, r3, #31
 800b77c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b780:	4618      	mov	r0, r3
 800b782:	bd80      	pop	{r7, pc}
 800b784:	58024400 	.word	0x58024400
 800b788:	08028a80 	.word	0x08028a80

0800b78c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b086      	sub	sp, #24
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b794:	2300      	movs	r3, #0
 800b796:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b798:	2300      	movs	r3, #0
 800b79a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d03f      	beq.n	800b828 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b7b0:	d02a      	beq.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800b7b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b7b6:	d824      	bhi.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b7b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b7bc:	d018      	beq.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b7be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b7c2:	d81e      	bhi.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d003      	beq.n	800b7d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b7c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b7cc:	d007      	beq.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0x52>
 800b7ce:	e018      	b.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7d0:	4bab      	ldr	r3, [pc, #684]	; (800ba80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7d4:	4aaa      	ldr	r2, [pc, #680]	; (800ba80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b7d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b7dc:	e015      	b.n	800b80a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	3304      	adds	r3, #4
 800b7e2:	2102      	movs	r1, #2
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f001 fff3 	bl	800d7d0 <RCCEx_PLL2_Config>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b7ee:	e00c      	b.n	800b80a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	3324      	adds	r3, #36	; 0x24
 800b7f4:	2102      	movs	r1, #2
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f002 f89c 	bl	800d934 <RCCEx_PLL3_Config>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b800:	e003      	b.n	800b80a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b802:	2301      	movs	r3, #1
 800b804:	75fb      	strb	r3, [r7, #23]
      break;
 800b806:	e000      	b.n	800b80a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800b808:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b80a:	7dfb      	ldrb	r3, [r7, #23]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d109      	bne.n	800b824 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b810:	4b9b      	ldr	r3, [pc, #620]	; (800ba80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b814:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b81c:	4998      	ldr	r1, [pc, #608]	; (800ba80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b81e:	4313      	orrs	r3, r2
 800b820:	650b      	str	r3, [r1, #80]	; 0x50
 800b822:	e001      	b.n	800b828 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b824:	7dfb      	ldrb	r3, [r7, #23]
 800b826:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b830:	2b00      	cmp	r3, #0
 800b832:	d03d      	beq.n	800b8b0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b838:	2b04      	cmp	r3, #4
 800b83a:	d826      	bhi.n	800b88a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800b83c:	a201      	add	r2, pc, #4	; (adr r2, 800b844 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800b83e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b842:	bf00      	nop
 800b844:	0800b859 	.word	0x0800b859
 800b848:	0800b867 	.word	0x0800b867
 800b84c:	0800b879 	.word	0x0800b879
 800b850:	0800b891 	.word	0x0800b891
 800b854:	0800b891 	.word	0x0800b891
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b858:	4b89      	ldr	r3, [pc, #548]	; (800ba80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b85c:	4a88      	ldr	r2, [pc, #544]	; (800ba80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b85e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b862:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b864:	e015      	b.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	3304      	adds	r3, #4
 800b86a:	2100      	movs	r1, #0
 800b86c:	4618      	mov	r0, r3
 800b86e:	f001 ffaf 	bl	800d7d0 <RCCEx_PLL2_Config>
 800b872:	4603      	mov	r3, r0
 800b874:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b876:	e00c      	b.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	3324      	adds	r3, #36	; 0x24
 800b87c:	2100      	movs	r1, #0
 800b87e:	4618      	mov	r0, r3
 800b880:	f002 f858 	bl	800d934 <RCCEx_PLL3_Config>
 800b884:	4603      	mov	r3, r0
 800b886:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b888:	e003      	b.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b88a:	2301      	movs	r3, #1
 800b88c:	75fb      	strb	r3, [r7, #23]
      break;
 800b88e:	e000      	b.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800b890:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b892:	7dfb      	ldrb	r3, [r7, #23]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d109      	bne.n	800b8ac <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b898:	4b79      	ldr	r3, [pc, #484]	; (800ba80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b89a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b89c:	f023 0207 	bic.w	r2, r3, #7
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8a4:	4976      	ldr	r1, [pc, #472]	; (800ba80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b8a6:	4313      	orrs	r3, r2
 800b8a8:	650b      	str	r3, [r1, #80]	; 0x50
 800b8aa:	e001      	b.n	800b8b0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8ac:	7dfb      	ldrb	r3, [r7, #23]
 800b8ae:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d042      	beq.n	800b942 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8c4:	d02b      	beq.n	800b91e <HAL_RCCEx_PeriphCLKConfig+0x192>
 800b8c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8ca:	d825      	bhi.n	800b918 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b8cc:	2bc0      	cmp	r3, #192	; 0xc0
 800b8ce:	d028      	beq.n	800b922 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800b8d0:	2bc0      	cmp	r3, #192	; 0xc0
 800b8d2:	d821      	bhi.n	800b918 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b8d4:	2b80      	cmp	r3, #128	; 0x80
 800b8d6:	d016      	beq.n	800b906 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800b8d8:	2b80      	cmp	r3, #128	; 0x80
 800b8da:	d81d      	bhi.n	800b918 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d002      	beq.n	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800b8e0:	2b40      	cmp	r3, #64	; 0x40
 800b8e2:	d007      	beq.n	800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800b8e4:	e018      	b.n	800b918 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8e6:	4b66      	ldr	r3, [pc, #408]	; (800ba80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b8e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8ea:	4a65      	ldr	r2, [pc, #404]	; (800ba80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b8ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b8f2:	e017      	b.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	3304      	adds	r3, #4
 800b8f8:	2100      	movs	r1, #0
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f001 ff68 	bl	800d7d0 <RCCEx_PLL2_Config>
 800b900:	4603      	mov	r3, r0
 800b902:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b904:	e00e      	b.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	3324      	adds	r3, #36	; 0x24
 800b90a:	2100      	movs	r1, #0
 800b90c:	4618      	mov	r0, r3
 800b90e:	f002 f811 	bl	800d934 <RCCEx_PLL3_Config>
 800b912:	4603      	mov	r3, r0
 800b914:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b916:	e005      	b.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b918:	2301      	movs	r3, #1
 800b91a:	75fb      	strb	r3, [r7, #23]
      break;
 800b91c:	e002      	b.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b91e:	bf00      	nop
 800b920:	e000      	b.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b922:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b924:	7dfb      	ldrb	r3, [r7, #23]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d109      	bne.n	800b93e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b92a:	4b55      	ldr	r3, [pc, #340]	; (800ba80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b92c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b92e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b936:	4952      	ldr	r1, [pc, #328]	; (800ba80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b938:	4313      	orrs	r3, r2
 800b93a:	650b      	str	r3, [r1, #80]	; 0x50
 800b93c:	e001      	b.n	800b942 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b93e:	7dfb      	ldrb	r3, [r7, #23]
 800b940:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d049      	beq.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b954:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b958:	d030      	beq.n	800b9bc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800b95a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b95e:	d82a      	bhi.n	800b9b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b960:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b964:	d02c      	beq.n	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800b966:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b96a:	d824      	bhi.n	800b9b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b96c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b970:	d018      	beq.n	800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800b972:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b976:	d81e      	bhi.n	800b9b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d003      	beq.n	800b984 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800b97c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b980:	d007      	beq.n	800b992 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b982:	e018      	b.n	800b9b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b984:	4b3e      	ldr	r3, [pc, #248]	; (800ba80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b988:	4a3d      	ldr	r2, [pc, #244]	; (800ba80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b98a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b98e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b990:	e017      	b.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	3304      	adds	r3, #4
 800b996:	2100      	movs	r1, #0
 800b998:	4618      	mov	r0, r3
 800b99a:	f001 ff19 	bl	800d7d0 <RCCEx_PLL2_Config>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b9a2:	e00e      	b.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	3324      	adds	r3, #36	; 0x24
 800b9a8:	2100      	movs	r1, #0
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f001 ffc2 	bl	800d934 <RCCEx_PLL3_Config>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b9b4:	e005      	b.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	75fb      	strb	r3, [r7, #23]
      break;
 800b9ba:	e002      	b.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800b9bc:	bf00      	nop
 800b9be:	e000      	b.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800b9c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b9c2:	7dfb      	ldrb	r3, [r7, #23]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d10a      	bne.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b9c8:	4b2d      	ldr	r3, [pc, #180]	; (800ba80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b9ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9cc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b9d6:	492a      	ldr	r1, [pc, #168]	; (800ba80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b9d8:	4313      	orrs	r3, r2
 800b9da:	658b      	str	r3, [r1, #88]	; 0x58
 800b9dc:	e001      	b.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9de:	7dfb      	ldrb	r3, [r7, #23]
 800b9e0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d04c      	beq.n	800ba88 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b9f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b9f8:	d030      	beq.n	800ba5c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800b9fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b9fe:	d82a      	bhi.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800ba00:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ba04:	d02c      	beq.n	800ba60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800ba06:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ba0a:	d824      	bhi.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800ba0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba10:	d018      	beq.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800ba12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba16:	d81e      	bhi.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d003      	beq.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800ba1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ba20:	d007      	beq.n	800ba32 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800ba22:	e018      	b.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba24:	4b16      	ldr	r3, [pc, #88]	; (800ba80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ba26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba28:	4a15      	ldr	r2, [pc, #84]	; (800ba80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ba2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ba30:	e017      	b.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	3304      	adds	r3, #4
 800ba36:	2100      	movs	r1, #0
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f001 fec9 	bl	800d7d0 <RCCEx_PLL2_Config>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800ba42:	e00e      	b.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	3324      	adds	r3, #36	; 0x24
 800ba48:	2100      	movs	r1, #0
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f001 ff72 	bl	800d934 <RCCEx_PLL3_Config>
 800ba50:	4603      	mov	r3, r0
 800ba52:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ba54:	e005      	b.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800ba56:	2301      	movs	r3, #1
 800ba58:	75fb      	strb	r3, [r7, #23]
      break;
 800ba5a:	e002      	b.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800ba5c:	bf00      	nop
 800ba5e:	e000      	b.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800ba60:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba62:	7dfb      	ldrb	r3, [r7, #23]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d10d      	bne.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ba68:	4b05      	ldr	r3, [pc, #20]	; (800ba80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ba6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba6c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ba76:	4902      	ldr	r1, [pc, #8]	; (800ba80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ba78:	4313      	orrs	r3, r2
 800ba7a:	658b      	str	r3, [r1, #88]	; 0x58
 800ba7c:	e004      	b.n	800ba88 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800ba7e:	bf00      	nop
 800ba80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba84:	7dfb      	ldrb	r3, [r7, #23]
 800ba86:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d032      	beq.n	800bafa <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba98:	2b30      	cmp	r3, #48	; 0x30
 800ba9a:	d01c      	beq.n	800bad6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800ba9c:	2b30      	cmp	r3, #48	; 0x30
 800ba9e:	d817      	bhi.n	800bad0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800baa0:	2b20      	cmp	r3, #32
 800baa2:	d00c      	beq.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x332>
 800baa4:	2b20      	cmp	r3, #32
 800baa6:	d813      	bhi.n	800bad0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d016      	beq.n	800bada <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800baac:	2b10      	cmp	r3, #16
 800baae:	d10f      	bne.n	800bad0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bab0:	4baf      	ldr	r3, [pc, #700]	; (800bd70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bab4:	4aae      	ldr	r2, [pc, #696]	; (800bd70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800baba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800babc:	e00e      	b.n	800badc <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	3304      	adds	r3, #4
 800bac2:	2102      	movs	r1, #2
 800bac4:	4618      	mov	r0, r3
 800bac6:	f001 fe83 	bl	800d7d0 <RCCEx_PLL2_Config>
 800baca:	4603      	mov	r3, r0
 800bacc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800bace:	e005      	b.n	800badc <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800bad0:	2301      	movs	r3, #1
 800bad2:	75fb      	strb	r3, [r7, #23]
      break;
 800bad4:	e002      	b.n	800badc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800bad6:	bf00      	nop
 800bad8:	e000      	b.n	800badc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800bada:	bf00      	nop
    }

    if(ret == HAL_OK)
 800badc:	7dfb      	ldrb	r3, [r7, #23]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d109      	bne.n	800baf6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800bae2:	4ba3      	ldr	r3, [pc, #652]	; (800bd70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bae6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800baee:	49a0      	ldr	r1, [pc, #640]	; (800bd70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800baf0:	4313      	orrs	r3, r2
 800baf2:	64cb      	str	r3, [r1, #76]	; 0x4c
 800baf4:	e001      	b.n	800bafa <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baf6:	7dfb      	ldrb	r3, [r7, #23]
 800baf8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d047      	beq.n	800bb96 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bb0e:	d030      	beq.n	800bb72 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800bb10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bb14:	d82a      	bhi.n	800bb6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800bb16:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bb1a:	d02c      	beq.n	800bb76 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800bb1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bb20:	d824      	bhi.n	800bb6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800bb22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb26:	d018      	beq.n	800bb5a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800bb28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb2c:	d81e      	bhi.n	800bb6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d003      	beq.n	800bb3a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800bb32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb36:	d007      	beq.n	800bb48 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800bb38:	e018      	b.n	800bb6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb3a:	4b8d      	ldr	r3, [pc, #564]	; (800bd70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bb3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb3e:	4a8c      	ldr	r2, [pc, #560]	; (800bd70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bb40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800bb46:	e017      	b.n	800bb78 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	3304      	adds	r3, #4
 800bb4c:	2100      	movs	r1, #0
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f001 fe3e 	bl	800d7d0 <RCCEx_PLL2_Config>
 800bb54:	4603      	mov	r3, r0
 800bb56:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800bb58:	e00e      	b.n	800bb78 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	3324      	adds	r3, #36	; 0x24
 800bb5e:	2100      	movs	r1, #0
 800bb60:	4618      	mov	r0, r3
 800bb62:	f001 fee7 	bl	800d934 <RCCEx_PLL3_Config>
 800bb66:	4603      	mov	r3, r0
 800bb68:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800bb6a:	e005      	b.n	800bb78 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	75fb      	strb	r3, [r7, #23]
      break;
 800bb70:	e002      	b.n	800bb78 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800bb72:	bf00      	nop
 800bb74:	e000      	b.n	800bb78 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800bb76:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb78:	7dfb      	ldrb	r3, [r7, #23]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d109      	bne.n	800bb92 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bb7e:	4b7c      	ldr	r3, [pc, #496]	; (800bd70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bb80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb82:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb8a:	4979      	ldr	r1, [pc, #484]	; (800bd70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	650b      	str	r3, [r1, #80]	; 0x50
 800bb90:	e001      	b.n	800bb96 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb92:	7dfb      	ldrb	r3, [r7, #23]
 800bb94:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d049      	beq.n	800bc36 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bba6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bbaa:	d02e      	beq.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800bbac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bbb0:	d828      	bhi.n	800bc04 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800bbb2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bbb6:	d02a      	beq.n	800bc0e <HAL_RCCEx_PeriphCLKConfig+0x482>
 800bbb8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bbbc:	d822      	bhi.n	800bc04 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800bbbe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bbc2:	d026      	beq.n	800bc12 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800bbc4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bbc8:	d81c      	bhi.n	800bc04 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800bbca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bbce:	d010      	beq.n	800bbf2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 800bbd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bbd4:	d816      	bhi.n	800bc04 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d01d      	beq.n	800bc16 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800bbda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbde:	d111      	bne.n	800bc04 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	3304      	adds	r3, #4
 800bbe4:	2101      	movs	r1, #1
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f001 fdf2 	bl	800d7d0 <RCCEx_PLL2_Config>
 800bbec:	4603      	mov	r3, r0
 800bbee:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800bbf0:	e012      	b.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	3324      	adds	r3, #36	; 0x24
 800bbf6:	2101      	movs	r1, #1
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f001 fe9b 	bl	800d934 <RCCEx_PLL3_Config>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800bc02:	e009      	b.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bc04:	2301      	movs	r3, #1
 800bc06:	75fb      	strb	r3, [r7, #23]
      break;
 800bc08:	e006      	b.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800bc0a:	bf00      	nop
 800bc0c:	e004      	b.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800bc0e:	bf00      	nop
 800bc10:	e002      	b.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800bc12:	bf00      	nop
 800bc14:	e000      	b.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800bc16:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bc18:	7dfb      	ldrb	r3, [r7, #23]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d109      	bne.n	800bc32 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bc1e:	4b54      	ldr	r3, [pc, #336]	; (800bd70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bc20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc22:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc2a:	4951      	ldr	r1, [pc, #324]	; (800bd70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bc2c:	4313      	orrs	r3, r2
 800bc2e:	650b      	str	r3, [r1, #80]	; 0x50
 800bc30:	e001      	b.n	800bc36 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc32:	7dfb      	ldrb	r3, [r7, #23]
 800bc34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d04b      	beq.n	800bcda <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bc48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bc4c:	d02e      	beq.n	800bcac <HAL_RCCEx_PeriphCLKConfig+0x520>
 800bc4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bc52:	d828      	bhi.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800bc54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc58:	d02a      	beq.n	800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800bc5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc5e:	d822      	bhi.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800bc60:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bc64:	d026      	beq.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800bc66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bc6a:	d81c      	bhi.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800bc6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc70:	d010      	beq.n	800bc94 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800bc72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc76:	d816      	bhi.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d01d      	beq.n	800bcb8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800bc7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc80:	d111      	bne.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	3304      	adds	r3, #4
 800bc86:	2101      	movs	r1, #1
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f001 fda1 	bl	800d7d0 <RCCEx_PLL2_Config>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800bc92:	e012      	b.n	800bcba <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	3324      	adds	r3, #36	; 0x24
 800bc98:	2101      	movs	r1, #1
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f001 fe4a 	bl	800d934 <RCCEx_PLL3_Config>
 800bca0:	4603      	mov	r3, r0
 800bca2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800bca4:	e009      	b.n	800bcba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800bca6:	2301      	movs	r3, #1
 800bca8:	75fb      	strb	r3, [r7, #23]
      break;
 800bcaa:	e006      	b.n	800bcba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800bcac:	bf00      	nop
 800bcae:	e004      	b.n	800bcba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800bcb0:	bf00      	nop
 800bcb2:	e002      	b.n	800bcba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800bcb4:	bf00      	nop
 800bcb6:	e000      	b.n	800bcba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800bcb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bcba:	7dfb      	ldrb	r3, [r7, #23]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d10a      	bne.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bcc0:	4b2b      	ldr	r3, [pc, #172]	; (800bd70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bcc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcc4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bcce:	4928      	ldr	r1, [pc, #160]	; (800bd70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bcd0:	4313      	orrs	r3, r2
 800bcd2:	658b      	str	r3, [r1, #88]	; 0x58
 800bcd4:	e001      	b.n	800bcda <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcd6:	7dfb      	ldrb	r3, [r7, #23]
 800bcd8:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d02f      	beq.n	800bd46 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcee:	d00e      	beq.n	800bd0e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800bcf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcf4:	d814      	bhi.n	800bd20 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d015      	beq.n	800bd26 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800bcfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bcfe:	d10f      	bne.n	800bd20 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd00:	4b1b      	ldr	r3, [pc, #108]	; (800bd70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bd02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd04:	4a1a      	ldr	r2, [pc, #104]	; (800bd70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bd06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800bd0c:	e00c      	b.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	3304      	adds	r3, #4
 800bd12:	2101      	movs	r1, #1
 800bd14:	4618      	mov	r0, r3
 800bd16:	f001 fd5b 	bl	800d7d0 <RCCEx_PLL2_Config>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800bd1e:	e003      	b.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bd20:	2301      	movs	r3, #1
 800bd22:	75fb      	strb	r3, [r7, #23]
      break;
 800bd24:	e000      	b.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800bd26:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bd28:	7dfb      	ldrb	r3, [r7, #23]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d109      	bne.n	800bd42 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bd2e:	4b10      	ldr	r3, [pc, #64]	; (800bd70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bd30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd32:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd3a:	490d      	ldr	r1, [pc, #52]	; (800bd70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bd3c:	4313      	orrs	r3, r2
 800bd3e:	650b      	str	r3, [r1, #80]	; 0x50
 800bd40:	e001      	b.n	800bd46 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd42:	7dfb      	ldrb	r3, [r7, #23]
 800bd44:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d033      	beq.n	800bdba <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd56:	2b03      	cmp	r3, #3
 800bd58:	d81c      	bhi.n	800bd94 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800bd5a:	a201      	add	r2, pc, #4	; (adr r2, 800bd60 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800bd5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd60:	0800bd9b 	.word	0x0800bd9b
 800bd64:	0800bd75 	.word	0x0800bd75
 800bd68:	0800bd83 	.word	0x0800bd83
 800bd6c:	0800bd9b 	.word	0x0800bd9b
 800bd70:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd74:	4bb8      	ldr	r3, [pc, #736]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bd76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd78:	4ab7      	ldr	r2, [pc, #732]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bd7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800bd80:	e00c      	b.n	800bd9c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	3304      	adds	r3, #4
 800bd86:	2102      	movs	r1, #2
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f001 fd21 	bl	800d7d0 <RCCEx_PLL2_Config>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800bd92:	e003      	b.n	800bd9c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800bd94:	2301      	movs	r3, #1
 800bd96:	75fb      	strb	r3, [r7, #23]
      break;
 800bd98:	e000      	b.n	800bd9c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800bd9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bd9c:	7dfb      	ldrb	r3, [r7, #23]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d109      	bne.n	800bdb6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bda2:	4bad      	ldr	r3, [pc, #692]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bda4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bda6:	f023 0203 	bic.w	r2, r3, #3
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdae:	49aa      	ldr	r1, [pc, #680]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	64cb      	str	r3, [r1, #76]	; 0x4c
 800bdb4:	e001      	b.n	800bdba <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdb6:	7dfb      	ldrb	r3, [r7, #23]
 800bdb8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	f000 8086 	beq.w	800bed4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bdc8:	4ba4      	ldr	r3, [pc, #656]	; (800c05c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	4aa3      	ldr	r2, [pc, #652]	; (800c05c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800bdce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bdd2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bdd4:	f7f8 f98a 	bl	80040ec <HAL_GetTick>
 800bdd8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bdda:	e009      	b.n	800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bddc:	f7f8 f986 	bl	80040ec <HAL_GetTick>
 800bde0:	4602      	mov	r2, r0
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	1ad3      	subs	r3, r2, r3
 800bde6:	2b64      	cmp	r3, #100	; 0x64
 800bde8:	d902      	bls.n	800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800bdea:	2303      	movs	r3, #3
 800bdec:	75fb      	strb	r3, [r7, #23]
        break;
 800bdee:	e005      	b.n	800bdfc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bdf0:	4b9a      	ldr	r3, [pc, #616]	; (800c05c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d0ef      	beq.n	800bddc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800bdfc:	7dfb      	ldrb	r3, [r7, #23]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d166      	bne.n	800bed0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800be02:	4b95      	ldr	r3, [pc, #596]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800be04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800be0c:	4053      	eors	r3, r2
 800be0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be12:	2b00      	cmp	r3, #0
 800be14:	d013      	beq.n	800be3e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800be16:	4b90      	ldr	r3, [pc, #576]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800be18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be1e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800be20:	4b8d      	ldr	r3, [pc, #564]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800be22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be24:	4a8c      	ldr	r2, [pc, #560]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800be26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800be2a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800be2c:	4b8a      	ldr	r3, [pc, #552]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800be2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be30:	4a89      	ldr	r2, [pc, #548]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800be32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800be36:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800be38:	4a87      	ldr	r2, [pc, #540]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800be44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be48:	d115      	bne.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be4a:	f7f8 f94f 	bl	80040ec <HAL_GetTick>
 800be4e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800be50:	e00b      	b.n	800be6a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800be52:	f7f8 f94b 	bl	80040ec <HAL_GetTick>
 800be56:	4602      	mov	r2, r0
 800be58:	693b      	ldr	r3, [r7, #16]
 800be5a:	1ad3      	subs	r3, r2, r3
 800be5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800be60:	4293      	cmp	r3, r2
 800be62:	d902      	bls.n	800be6a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800be64:	2303      	movs	r3, #3
 800be66:	75fb      	strb	r3, [r7, #23]
            break;
 800be68:	e005      	b.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800be6a:	4b7b      	ldr	r3, [pc, #492]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800be6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be6e:	f003 0302 	and.w	r3, r3, #2
 800be72:	2b00      	cmp	r3, #0
 800be74:	d0ed      	beq.n	800be52 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800be76:	7dfb      	ldrb	r3, [r7, #23]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d126      	bne.n	800beca <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800be82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be8a:	d10d      	bne.n	800bea8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800be8c:	4b72      	ldr	r3, [pc, #456]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800be8e:	691b      	ldr	r3, [r3, #16]
 800be90:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800be9a:	0919      	lsrs	r1, r3, #4
 800be9c:	4b70      	ldr	r3, [pc, #448]	; (800c060 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800be9e:	400b      	ands	r3, r1
 800bea0:	496d      	ldr	r1, [pc, #436]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bea2:	4313      	orrs	r3, r2
 800bea4:	610b      	str	r3, [r1, #16]
 800bea6:	e005      	b.n	800beb4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800bea8:	4b6b      	ldr	r3, [pc, #428]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800beaa:	691b      	ldr	r3, [r3, #16]
 800beac:	4a6a      	ldr	r2, [pc, #424]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800beae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800beb2:	6113      	str	r3, [r2, #16]
 800beb4:	4b68      	ldr	r3, [pc, #416]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800beb6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bebe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bec2:	4965      	ldr	r1, [pc, #404]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bec4:	4313      	orrs	r3, r2
 800bec6:	670b      	str	r3, [r1, #112]	; 0x70
 800bec8:	e004      	b.n	800bed4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800beca:	7dfb      	ldrb	r3, [r7, #23]
 800becc:	75bb      	strb	r3, [r7, #22]
 800bece:	e001      	b.n	800bed4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bed0:	7dfb      	ldrb	r3, [r7, #23]
 800bed2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f003 0301 	and.w	r3, r3, #1
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d07e      	beq.n	800bfde <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bee4:	2b28      	cmp	r3, #40	; 0x28
 800bee6:	d867      	bhi.n	800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800bee8:	a201      	add	r2, pc, #4	; (adr r2, 800bef0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800beea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beee:	bf00      	nop
 800bef0:	0800bfbf 	.word	0x0800bfbf
 800bef4:	0800bfb9 	.word	0x0800bfb9
 800bef8:	0800bfb9 	.word	0x0800bfb9
 800befc:	0800bfb9 	.word	0x0800bfb9
 800bf00:	0800bfb9 	.word	0x0800bfb9
 800bf04:	0800bfb9 	.word	0x0800bfb9
 800bf08:	0800bfb9 	.word	0x0800bfb9
 800bf0c:	0800bfb9 	.word	0x0800bfb9
 800bf10:	0800bf95 	.word	0x0800bf95
 800bf14:	0800bfb9 	.word	0x0800bfb9
 800bf18:	0800bfb9 	.word	0x0800bfb9
 800bf1c:	0800bfb9 	.word	0x0800bfb9
 800bf20:	0800bfb9 	.word	0x0800bfb9
 800bf24:	0800bfb9 	.word	0x0800bfb9
 800bf28:	0800bfb9 	.word	0x0800bfb9
 800bf2c:	0800bfb9 	.word	0x0800bfb9
 800bf30:	0800bfa7 	.word	0x0800bfa7
 800bf34:	0800bfb9 	.word	0x0800bfb9
 800bf38:	0800bfb9 	.word	0x0800bfb9
 800bf3c:	0800bfb9 	.word	0x0800bfb9
 800bf40:	0800bfb9 	.word	0x0800bfb9
 800bf44:	0800bfb9 	.word	0x0800bfb9
 800bf48:	0800bfb9 	.word	0x0800bfb9
 800bf4c:	0800bfb9 	.word	0x0800bfb9
 800bf50:	0800bfbf 	.word	0x0800bfbf
 800bf54:	0800bfb9 	.word	0x0800bfb9
 800bf58:	0800bfb9 	.word	0x0800bfb9
 800bf5c:	0800bfb9 	.word	0x0800bfb9
 800bf60:	0800bfb9 	.word	0x0800bfb9
 800bf64:	0800bfb9 	.word	0x0800bfb9
 800bf68:	0800bfb9 	.word	0x0800bfb9
 800bf6c:	0800bfb9 	.word	0x0800bfb9
 800bf70:	0800bfbf 	.word	0x0800bfbf
 800bf74:	0800bfb9 	.word	0x0800bfb9
 800bf78:	0800bfb9 	.word	0x0800bfb9
 800bf7c:	0800bfb9 	.word	0x0800bfb9
 800bf80:	0800bfb9 	.word	0x0800bfb9
 800bf84:	0800bfb9 	.word	0x0800bfb9
 800bf88:	0800bfb9 	.word	0x0800bfb9
 800bf8c:	0800bfb9 	.word	0x0800bfb9
 800bf90:	0800bfbf 	.word	0x0800bfbf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	3304      	adds	r3, #4
 800bf98:	2101      	movs	r1, #1
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f001 fc18 	bl	800d7d0 <RCCEx_PLL2_Config>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800bfa4:	e00c      	b.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	3324      	adds	r3, #36	; 0x24
 800bfaa:	2101      	movs	r1, #1
 800bfac:	4618      	mov	r0, r3
 800bfae:	f001 fcc1 	bl	800d934 <RCCEx_PLL3_Config>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800bfb6:	e003      	b.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bfb8:	2301      	movs	r3, #1
 800bfba:	75fb      	strb	r3, [r7, #23]
      break;
 800bfbc:	e000      	b.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800bfbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bfc0:	7dfb      	ldrb	r3, [r7, #23]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d109      	bne.n	800bfda <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bfc6:	4b24      	ldr	r3, [pc, #144]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bfc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfca:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bfd2:	4921      	ldr	r1, [pc, #132]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bfd4:	4313      	orrs	r3, r2
 800bfd6:	654b      	str	r3, [r1, #84]	; 0x54
 800bfd8:	e001      	b.n	800bfde <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfda:	7dfb      	ldrb	r3, [r7, #23]
 800bfdc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f003 0302 	and.w	r3, r3, #2
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d03e      	beq.n	800c068 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfee:	2b05      	cmp	r3, #5
 800bff0:	d820      	bhi.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800bff2:	a201      	add	r2, pc, #4	; (adr r2, 800bff8 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800bff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bff8:	0800c03b 	.word	0x0800c03b
 800bffc:	0800c011 	.word	0x0800c011
 800c000:	0800c023 	.word	0x0800c023
 800c004:	0800c03b 	.word	0x0800c03b
 800c008:	0800c03b 	.word	0x0800c03b
 800c00c:	0800c03b 	.word	0x0800c03b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	3304      	adds	r3, #4
 800c014:	2101      	movs	r1, #1
 800c016:	4618      	mov	r0, r3
 800c018:	f001 fbda 	bl	800d7d0 <RCCEx_PLL2_Config>
 800c01c:	4603      	mov	r3, r0
 800c01e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800c020:	e00c      	b.n	800c03c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	3324      	adds	r3, #36	; 0x24
 800c026:	2101      	movs	r1, #1
 800c028:	4618      	mov	r0, r3
 800c02a:	f001 fc83 	bl	800d934 <RCCEx_PLL3_Config>
 800c02e:	4603      	mov	r3, r0
 800c030:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800c032:	e003      	b.n	800c03c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c034:	2301      	movs	r3, #1
 800c036:	75fb      	strb	r3, [r7, #23]
      break;
 800c038:	e000      	b.n	800c03c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800c03a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c03c:	7dfb      	ldrb	r3, [r7, #23]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d110      	bne.n	800c064 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c042:	4b05      	ldr	r3, [pc, #20]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c046:	f023 0207 	bic.w	r2, r3, #7
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c04e:	4902      	ldr	r1, [pc, #8]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c050:	4313      	orrs	r3, r2
 800c052:	654b      	str	r3, [r1, #84]	; 0x54
 800c054:	e008      	b.n	800c068 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800c056:	bf00      	nop
 800c058:	58024400 	.word	0x58024400
 800c05c:	58024800 	.word	0x58024800
 800c060:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c064:	7dfb      	ldrb	r3, [r7, #23]
 800c066:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f003 0304 	and.w	r3, r3, #4
 800c070:	2b00      	cmp	r3, #0
 800c072:	d039      	beq.n	800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c07a:	2b05      	cmp	r3, #5
 800c07c:	d820      	bhi.n	800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800c07e:	a201      	add	r2, pc, #4	; (adr r2, 800c084 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800c080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c084:	0800c0c7 	.word	0x0800c0c7
 800c088:	0800c09d 	.word	0x0800c09d
 800c08c:	0800c0af 	.word	0x0800c0af
 800c090:	0800c0c7 	.word	0x0800c0c7
 800c094:	0800c0c7 	.word	0x0800c0c7
 800c098:	0800c0c7 	.word	0x0800c0c7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	3304      	adds	r3, #4
 800c0a0:	2101      	movs	r1, #1
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f001 fb94 	bl	800d7d0 <RCCEx_PLL2_Config>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800c0ac:	e00c      	b.n	800c0c8 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	3324      	adds	r3, #36	; 0x24
 800c0b2:	2101      	movs	r1, #1
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f001 fc3d 	bl	800d934 <RCCEx_PLL3_Config>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800c0be:	e003      	b.n	800c0c8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	75fb      	strb	r3, [r7, #23]
      break;
 800c0c4:	e000      	b.n	800c0c8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800c0c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c0c8:	7dfb      	ldrb	r3, [r7, #23]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d10a      	bne.n	800c0e4 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c0ce:	4bb7      	ldr	r3, [pc, #732]	; (800c3ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c0d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0d2:	f023 0207 	bic.w	r2, r3, #7
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0dc:	49b3      	ldr	r1, [pc, #716]	; (800c3ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c0de:	4313      	orrs	r3, r2
 800c0e0:	658b      	str	r3, [r1, #88]	; 0x58
 800c0e2:	e001      	b.n	800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0e4:	7dfb      	ldrb	r3, [r7, #23]
 800c0e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	f003 0320 	and.w	r3, r3, #32
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d04b      	beq.n	800c18c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c0fe:	d02e      	beq.n	800c15e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800c100:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c104:	d828      	bhi.n	800c158 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800c106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c10a:	d02a      	beq.n	800c162 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800c10c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c110:	d822      	bhi.n	800c158 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800c112:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c116:	d026      	beq.n	800c166 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800c118:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c11c:	d81c      	bhi.n	800c158 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800c11e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c122:	d010      	beq.n	800c146 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800c124:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c128:	d816      	bhi.n	800c158 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d01d      	beq.n	800c16a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800c12e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c132:	d111      	bne.n	800c158 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	3304      	adds	r3, #4
 800c138:	2100      	movs	r1, #0
 800c13a:	4618      	mov	r0, r3
 800c13c:	f001 fb48 	bl	800d7d0 <RCCEx_PLL2_Config>
 800c140:	4603      	mov	r3, r0
 800c142:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800c144:	e012      	b.n	800c16c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	3324      	adds	r3, #36	; 0x24
 800c14a:	2102      	movs	r1, #2
 800c14c:	4618      	mov	r0, r3
 800c14e:	f001 fbf1 	bl	800d934 <RCCEx_PLL3_Config>
 800c152:	4603      	mov	r3, r0
 800c154:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800c156:	e009      	b.n	800c16c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c158:	2301      	movs	r3, #1
 800c15a:	75fb      	strb	r3, [r7, #23]
      break;
 800c15c:	e006      	b.n	800c16c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800c15e:	bf00      	nop
 800c160:	e004      	b.n	800c16c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800c162:	bf00      	nop
 800c164:	e002      	b.n	800c16c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800c166:	bf00      	nop
 800c168:	e000      	b.n	800c16c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800c16a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c16c:	7dfb      	ldrb	r3, [r7, #23]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d10a      	bne.n	800c188 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c172:	4b8e      	ldr	r3, [pc, #568]	; (800c3ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c176:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c180:	498a      	ldr	r1, [pc, #552]	; (800c3ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c182:	4313      	orrs	r3, r2
 800c184:	654b      	str	r3, [r1, #84]	; 0x54
 800c186:	e001      	b.n	800c18c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c188:	7dfb      	ldrb	r3, [r7, #23]
 800c18a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c194:	2b00      	cmp	r3, #0
 800c196:	d04b      	beq.n	800c230 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c19e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c1a2:	d02e      	beq.n	800c202 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800c1a4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c1a8:	d828      	bhi.n	800c1fc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800c1aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1ae:	d02a      	beq.n	800c206 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800c1b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1b4:	d822      	bhi.n	800c1fc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800c1b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c1ba:	d026      	beq.n	800c20a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800c1bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c1c0:	d81c      	bhi.n	800c1fc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800c1c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c1c6:	d010      	beq.n	800c1ea <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800c1c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c1cc:	d816      	bhi.n	800c1fc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d01d      	beq.n	800c20e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800c1d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1d6:	d111      	bne.n	800c1fc <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	3304      	adds	r3, #4
 800c1dc:	2100      	movs	r1, #0
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f001 faf6 	bl	800d7d0 <RCCEx_PLL2_Config>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c1e8:	e012      	b.n	800c210 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	3324      	adds	r3, #36	; 0x24
 800c1ee:	2102      	movs	r1, #2
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f001 fb9f 	bl	800d934 <RCCEx_PLL3_Config>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c1fa:	e009      	b.n	800c210 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	75fb      	strb	r3, [r7, #23]
      break;
 800c200:	e006      	b.n	800c210 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800c202:	bf00      	nop
 800c204:	e004      	b.n	800c210 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800c206:	bf00      	nop
 800c208:	e002      	b.n	800c210 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800c20a:	bf00      	nop
 800c20c:	e000      	b.n	800c210 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800c20e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c210:	7dfb      	ldrb	r3, [r7, #23]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d10a      	bne.n	800c22c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c216:	4b65      	ldr	r3, [pc, #404]	; (800c3ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c21a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c224:	4961      	ldr	r1, [pc, #388]	; (800c3ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c226:	4313      	orrs	r3, r2
 800c228:	658b      	str	r3, [r1, #88]	; 0x58
 800c22a:	e001      	b.n	800c230 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c22c:	7dfb      	ldrb	r3, [r7, #23]
 800c22e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d04b      	beq.n	800c2d4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c242:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c246:	d02e      	beq.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800c248:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c24c:	d828      	bhi.n	800c2a0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800c24e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c252:	d02a      	beq.n	800c2aa <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800c254:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c258:	d822      	bhi.n	800c2a0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800c25a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c25e:	d026      	beq.n	800c2ae <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800c260:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c264:	d81c      	bhi.n	800c2a0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800c266:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c26a:	d010      	beq.n	800c28e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800c26c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c270:	d816      	bhi.n	800c2a0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800c272:	2b00      	cmp	r3, #0
 800c274:	d01d      	beq.n	800c2b2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800c276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c27a:	d111      	bne.n	800c2a0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	3304      	adds	r3, #4
 800c280:	2100      	movs	r1, #0
 800c282:	4618      	mov	r0, r3
 800c284:	f001 faa4 	bl	800d7d0 <RCCEx_PLL2_Config>
 800c288:	4603      	mov	r3, r0
 800c28a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c28c:	e012      	b.n	800c2b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	3324      	adds	r3, #36	; 0x24
 800c292:	2102      	movs	r1, #2
 800c294:	4618      	mov	r0, r3
 800c296:	f001 fb4d 	bl	800d934 <RCCEx_PLL3_Config>
 800c29a:	4603      	mov	r3, r0
 800c29c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c29e:	e009      	b.n	800c2b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	75fb      	strb	r3, [r7, #23]
      break;
 800c2a4:	e006      	b.n	800c2b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800c2a6:	bf00      	nop
 800c2a8:	e004      	b.n	800c2b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800c2aa:	bf00      	nop
 800c2ac:	e002      	b.n	800c2b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800c2ae:	bf00      	nop
 800c2b0:	e000      	b.n	800c2b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800c2b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c2b4:	7dfb      	ldrb	r3, [r7, #23]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d10a      	bne.n	800c2d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c2ba:	4b3c      	ldr	r3, [pc, #240]	; (800c3ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c2bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c2c8:	4938      	ldr	r1, [pc, #224]	; (800c3ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c2ca:	4313      	orrs	r3, r2
 800c2cc:	658b      	str	r3, [r1, #88]	; 0x58
 800c2ce:	e001      	b.n	800c2d4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2d0:	7dfb      	ldrb	r3, [r7, #23]
 800c2d2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	f003 0308 	and.w	r3, r3, #8
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d01a      	beq.n	800c316 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2ea:	d10a      	bne.n	800c302 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	3324      	adds	r3, #36	; 0x24
 800c2f0:	2102      	movs	r1, #2
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f001 fb1e 	bl	800d934 <RCCEx_PLL3_Config>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d001      	beq.n	800c302 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800c2fe:	2301      	movs	r3, #1
 800c300:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c302:	4b2a      	ldr	r3, [pc, #168]	; (800c3ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c306:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c310:	4926      	ldr	r1, [pc, #152]	; (800c3ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c312:	4313      	orrs	r3, r2
 800c314:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f003 0310 	and.w	r3, r3, #16
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d01a      	beq.n	800c358 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c32c:	d10a      	bne.n	800c344 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	3324      	adds	r3, #36	; 0x24
 800c332:	2102      	movs	r1, #2
 800c334:	4618      	mov	r0, r3
 800c336:	f001 fafd 	bl	800d934 <RCCEx_PLL3_Config>
 800c33a:	4603      	mov	r3, r0
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d001      	beq.n	800c344 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800c340:	2301      	movs	r3, #1
 800c342:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c344:	4b19      	ldr	r3, [pc, #100]	; (800c3ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c348:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c352:	4916      	ldr	r1, [pc, #88]	; (800c3ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c354:	4313      	orrs	r3, r2
 800c356:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c360:	2b00      	cmp	r3, #0
 800c362:	d036      	beq.n	800c3d2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c36a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c36e:	d01f      	beq.n	800c3b0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800c370:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c374:	d817      	bhi.n	800c3a6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800c376:	2b00      	cmp	r3, #0
 800c378:	d003      	beq.n	800c382 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800c37a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c37e:	d009      	beq.n	800c394 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800c380:	e011      	b.n	800c3a6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	3304      	adds	r3, #4
 800c386:	2100      	movs	r1, #0
 800c388:	4618      	mov	r0, r3
 800c38a:	f001 fa21 	bl	800d7d0 <RCCEx_PLL2_Config>
 800c38e:	4603      	mov	r3, r0
 800c390:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c392:	e00e      	b.n	800c3b2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	3324      	adds	r3, #36	; 0x24
 800c398:	2102      	movs	r1, #2
 800c39a:	4618      	mov	r0, r3
 800c39c:	f001 faca 	bl	800d934 <RCCEx_PLL3_Config>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c3a4:	e005      	b.n	800c3b2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	75fb      	strb	r3, [r7, #23]
      break;
 800c3aa:	e002      	b.n	800c3b2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800c3ac:	58024400 	.word	0x58024400
      break;
 800c3b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c3b2:	7dfb      	ldrb	r3, [r7, #23]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d10a      	bne.n	800c3ce <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c3b8:	4b93      	ldr	r3, [pc, #588]	; (800c608 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c3ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c3c6:	4990      	ldr	r1, [pc, #576]	; (800c608 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c3c8:	4313      	orrs	r3, r2
 800c3ca:	658b      	str	r3, [r1, #88]	; 0x58
 800c3cc:	e001      	b.n	800c3d2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3ce:	7dfb      	ldrb	r3, [r7, #23]
 800c3d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d033      	beq.n	800c446 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c3e8:	d01c      	beq.n	800c424 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800c3ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c3ee:	d816      	bhi.n	800c41e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800c3f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c3f4:	d003      	beq.n	800c3fe <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800c3f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c3fa:	d007      	beq.n	800c40c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800c3fc:	e00f      	b.n	800c41e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3fe:	4b82      	ldr	r3, [pc, #520]	; (800c608 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c402:	4a81      	ldr	r2, [pc, #516]	; (800c608 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c408:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800c40a:	e00c      	b.n	800c426 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	3324      	adds	r3, #36	; 0x24
 800c410:	2101      	movs	r1, #1
 800c412:	4618      	mov	r0, r3
 800c414:	f001 fa8e 	bl	800d934 <RCCEx_PLL3_Config>
 800c418:	4603      	mov	r3, r0
 800c41a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800c41c:	e003      	b.n	800c426 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c41e:	2301      	movs	r3, #1
 800c420:	75fb      	strb	r3, [r7, #23]
      break;
 800c422:	e000      	b.n	800c426 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800c424:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c426:	7dfb      	ldrb	r3, [r7, #23]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d10a      	bne.n	800c442 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c42c:	4b76      	ldr	r3, [pc, #472]	; (800c608 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c42e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c430:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c43a:	4973      	ldr	r1, [pc, #460]	; (800c608 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c43c:	4313      	orrs	r3, r2
 800c43e:	654b      	str	r3, [r1, #84]	; 0x54
 800c440:	e001      	b.n	800c446 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c442:	7dfb      	ldrb	r3, [r7, #23]
 800c444:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d029      	beq.n	800c4a6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c456:	2b00      	cmp	r3, #0
 800c458:	d003      	beq.n	800c462 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800c45a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c45e:	d007      	beq.n	800c470 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800c460:	e00f      	b.n	800c482 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c462:	4b69      	ldr	r3, [pc, #420]	; (800c608 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c466:	4a68      	ldr	r2, [pc, #416]	; (800c608 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c46c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c46e:	e00b      	b.n	800c488 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	3304      	adds	r3, #4
 800c474:	2102      	movs	r1, #2
 800c476:	4618      	mov	r0, r3
 800c478:	f001 f9aa 	bl	800d7d0 <RCCEx_PLL2_Config>
 800c47c:	4603      	mov	r3, r0
 800c47e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c480:	e002      	b.n	800c488 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800c482:	2301      	movs	r3, #1
 800c484:	75fb      	strb	r3, [r7, #23]
      break;
 800c486:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c488:	7dfb      	ldrb	r3, [r7, #23]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d109      	bne.n	800c4a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c48e:	4b5e      	ldr	r3, [pc, #376]	; (800c608 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c492:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c49a:	495b      	ldr	r1, [pc, #364]	; (800c608 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c49c:	4313      	orrs	r3, r2
 800c49e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c4a0:	e001      	b.n	800c4a6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4a2:	7dfb      	ldrb	r3, [r7, #23]
 800c4a4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d00a      	beq.n	800c4c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	3324      	adds	r3, #36	; 0x24
 800c4b6:	2102      	movs	r1, #2
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f001 fa3b 	bl	800d934 <RCCEx_PLL3_Config>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d001      	beq.n	800c4c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800c4c4:	2301      	movs	r3, #1
 800c4c6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d030      	beq.n	800c536 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c4dc:	d017      	beq.n	800c50e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800c4de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c4e2:	d811      	bhi.n	800c508 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800c4e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4e8:	d013      	beq.n	800c512 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800c4ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4ee:	d80b      	bhi.n	800c508 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d010      	beq.n	800c516 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800c4f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4f8:	d106      	bne.n	800c508 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4fa:	4b43      	ldr	r3, [pc, #268]	; (800c608 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c4fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4fe:	4a42      	ldr	r2, [pc, #264]	; (800c608 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c504:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800c506:	e007      	b.n	800c518 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c508:	2301      	movs	r3, #1
 800c50a:	75fb      	strb	r3, [r7, #23]
      break;
 800c50c:	e004      	b.n	800c518 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800c50e:	bf00      	nop
 800c510:	e002      	b.n	800c518 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800c512:	bf00      	nop
 800c514:	e000      	b.n	800c518 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800c516:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c518:	7dfb      	ldrb	r3, [r7, #23]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d109      	bne.n	800c532 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c51e:	4b3a      	ldr	r3, [pc, #232]	; (800c608 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c522:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c52a:	4937      	ldr	r1, [pc, #220]	; (800c608 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c52c:	4313      	orrs	r3, r2
 800c52e:	654b      	str	r3, [r1, #84]	; 0x54
 800c530:	e001      	b.n	800c536 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c532:	7dfb      	ldrb	r3, [r7, #23]
 800c534:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d008      	beq.n	800c554 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c542:	4b31      	ldr	r3, [pc, #196]	; (800c608 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c546:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c54e:	492e      	ldr	r1, [pc, #184]	; (800c608 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c550:	4313      	orrs	r3, r2
 800c552:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d009      	beq.n	800c574 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c560:	4b29      	ldr	r3, [pc, #164]	; (800c608 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c562:	691b      	ldr	r3, [r3, #16]
 800c564:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c56e:	4926      	ldr	r1, [pc, #152]	; (800c608 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c570:	4313      	orrs	r3, r2
 800c572:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d008      	beq.n	800c592 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c580:	4b21      	ldr	r3, [pc, #132]	; (800c608 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c584:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c58c:	491e      	ldr	r1, [pc, #120]	; (800c608 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c58e:	4313      	orrs	r3, r2
 800c590:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d00d      	beq.n	800c5ba <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c59e:	4b1a      	ldr	r3, [pc, #104]	; (800c608 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c5a0:	691b      	ldr	r3, [r3, #16]
 800c5a2:	4a19      	ldr	r2, [pc, #100]	; (800c608 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c5a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c5a8:	6113      	str	r3, [r2, #16]
 800c5aa:	4b17      	ldr	r3, [pc, #92]	; (800c608 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c5ac:	691a      	ldr	r2, [r3, #16]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c5b4:	4914      	ldr	r1, [pc, #80]	; (800c608 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c5b6:	4313      	orrs	r3, r2
 800c5b8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	da08      	bge.n	800c5d4 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c5c2:	4b11      	ldr	r3, [pc, #68]	; (800c608 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c5c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5ce:	490e      	ldr	r1, [pc, #56]	; (800c608 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c5d0:	4313      	orrs	r3, r2
 800c5d2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d009      	beq.n	800c5f4 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c5e0:	4b09      	ldr	r3, [pc, #36]	; (800c608 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c5e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5ee:	4906      	ldr	r1, [pc, #24]	; (800c608 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c5f0:	4313      	orrs	r3, r2
 800c5f2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800c5f4:	7dbb      	ldrb	r3, [r7, #22]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d101      	bne.n	800c5fe <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	e000      	b.n	800c600 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800c5fe:	2301      	movs	r3, #1
}
 800c600:	4618      	mov	r0, r3
 800c602:	3718      	adds	r7, #24
 800c604:	46bd      	mov	sp, r7
 800c606:	bd80      	pop	{r7, pc}
 800c608:	58024400 	.word	0x58024400

0800c60c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b090      	sub	sp, #64	; 0x40
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c61a:	f040 8095 	bne.w	800c748 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800c61e:	4bae      	ldr	r3, [pc, #696]	; (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c622:	f003 0307 	and.w	r3, r3, #7
 800c626:	633b      	str	r3, [r7, #48]	; 0x30
 800c628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c62a:	2b04      	cmp	r3, #4
 800c62c:	f200 8088 	bhi.w	800c740 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800c630:	a201      	add	r2, pc, #4	; (adr r2, 800c638 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800c632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c636:	bf00      	nop
 800c638:	0800c64d 	.word	0x0800c64d
 800c63c:	0800c675 	.word	0x0800c675
 800c640:	0800c69d 	.word	0x0800c69d
 800c644:	0800c739 	.word	0x0800c739
 800c648:	0800c6c5 	.word	0x0800c6c5

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c64c:	4ba2      	ldr	r3, [pc, #648]	; (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c654:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c658:	d108      	bne.n	800c66c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c65a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c65e:	4618      	mov	r0, r3
 800c660:	f000 ff64 	bl	800d52c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800c664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c666:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c668:	f000 bc95 	b.w	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c66c:	2300      	movs	r3, #0
 800c66e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c670:	f000 bc91 	b.w	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c674:	4b98      	ldr	r3, [pc, #608]	; (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c67c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c680:	d108      	bne.n	800c694 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c682:	f107 0318 	add.w	r3, r7, #24
 800c686:	4618      	mov	r0, r3
 800c688:	f000 fca8 	bl	800cfdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c68c:	69bb      	ldr	r3, [r7, #24]
 800c68e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c690:	f000 bc81 	b.w	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c694:	2300      	movs	r3, #0
 800c696:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c698:	f000 bc7d 	b.w	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c69c:	4b8e      	ldr	r3, [pc, #568]	; (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c6a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6a8:	d108      	bne.n	800c6bc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6aa:	f107 030c 	add.w	r3, r7, #12
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f000 fde8 	bl	800d284 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c6b8:	f000 bc6d 	b.w	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c6bc:	2300      	movs	r3, #0
 800c6be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c6c0:	f000 bc69 	b.w	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800c6c4:	4b84      	ldr	r3, [pc, #528]	; (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c6c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c6cc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c6ce:	4b82      	ldr	r3, [pc, #520]	; (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	f003 0304 	and.w	r3, r3, #4
 800c6d6:	2b04      	cmp	r3, #4
 800c6d8:	d10c      	bne.n	800c6f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800c6da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d109      	bne.n	800c6f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c6e0:	4b7d      	ldr	r3, [pc, #500]	; (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	08db      	lsrs	r3, r3, #3
 800c6e6:	f003 0303 	and.w	r3, r3, #3
 800c6ea:	4a7c      	ldr	r2, [pc, #496]	; (800c8dc <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800c6ec:	fa22 f303 	lsr.w	r3, r2, r3
 800c6f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6f2:	e01f      	b.n	800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c6f4:	4b78      	ldr	r3, [pc, #480]	; (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c700:	d106      	bne.n	800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800c702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c704:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c708:	d102      	bne.n	800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800c70a:	4b75      	ldr	r3, [pc, #468]	; (800c8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c70c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c70e:	e011      	b.n	800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c710:	4b71      	ldr	r3, [pc, #452]	; (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c718:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c71c:	d106      	bne.n	800c72c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800c71e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c720:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c724:	d102      	bne.n	800c72c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800c726:	4b6f      	ldr	r3, [pc, #444]	; (800c8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800c728:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c72a:	e003      	b.n	800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800c72c:	2300      	movs	r3, #0
 800c72e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800c730:	f000 bc31 	b.w	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c734:	f000 bc2f 	b.w	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800c738:	4b6b      	ldr	r3, [pc, #428]	; (800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800c73a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c73c:	f000 bc2b 	b.w	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800c740:	2300      	movs	r3, #0
 800c742:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c744:	f000 bc27 	b.w	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c74e:	f040 8095 	bne.w	800c87c <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800c752:	4b61      	ldr	r3, [pc, #388]	; (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c756:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c75a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800c75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c75e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c762:	d04d      	beq.n	800c800 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800c764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c76a:	f200 8084 	bhi.w	800c876 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800c76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c770:	2bc0      	cmp	r3, #192	; 0xc0
 800c772:	d07d      	beq.n	800c870 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800c774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c776:	2bc0      	cmp	r3, #192	; 0xc0
 800c778:	d87d      	bhi.n	800c876 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800c77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c77c:	2b80      	cmp	r3, #128	; 0x80
 800c77e:	d02d      	beq.n	800c7dc <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800c780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c782:	2b80      	cmp	r3, #128	; 0x80
 800c784:	d877      	bhi.n	800c876 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800c786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d003      	beq.n	800c794 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800c78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c78e:	2b40      	cmp	r3, #64	; 0x40
 800c790:	d012      	beq.n	800c7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800c792:	e070      	b.n	800c876 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c794:	4b50      	ldr	r3, [pc, #320]	; (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c79c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c7a0:	d107      	bne.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c7a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f000 fec0 	bl	800d52c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c7b0:	e3f1      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c7b6:	e3ee      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c7b8:	4b47      	ldr	r3, [pc, #284]	; (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c7c4:	d107      	bne.n	800c7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7c6:	f107 0318 	add.w	r3, r7, #24
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f000 fc06 	bl	800cfdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c7d0:	69bb      	ldr	r3, [r7, #24]
 800c7d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c7d4:	e3df      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c7da:	e3dc      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c7dc:	4b3e      	ldr	r3, [pc, #248]	; (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c7e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7e8:	d107      	bne.n	800c7fa <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c7ea:	f107 030c 	add.w	r3, r7, #12
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f000 fd48 	bl	800d284 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c7f8:	e3cd      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c7fe:	e3ca      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800c800:	4b35      	ldr	r3, [pc, #212]	; (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c804:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c808:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c80a:	4b33      	ldr	r3, [pc, #204]	; (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f003 0304 	and.w	r3, r3, #4
 800c812:	2b04      	cmp	r3, #4
 800c814:	d10c      	bne.n	800c830 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800c816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d109      	bne.n	800c830 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c81c:	4b2e      	ldr	r3, [pc, #184]	; (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	08db      	lsrs	r3, r3, #3
 800c822:	f003 0303 	and.w	r3, r3, #3
 800c826:	4a2d      	ldr	r2, [pc, #180]	; (800c8dc <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800c828:	fa22 f303 	lsr.w	r3, r2, r3
 800c82c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c82e:	e01e      	b.n	800c86e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c830:	4b29      	ldr	r3, [pc, #164]	; (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c83c:	d106      	bne.n	800c84c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800c83e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c840:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c844:	d102      	bne.n	800c84c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800c846:	4b26      	ldr	r3, [pc, #152]	; (800c8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c848:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c84a:	e010      	b.n	800c86e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c84c:	4b22      	ldr	r3, [pc, #136]	; (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c854:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c858:	d106      	bne.n	800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800c85a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c85c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c860:	d102      	bne.n	800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800c862:	4b20      	ldr	r3, [pc, #128]	; (800c8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800c864:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c866:	e002      	b.n	800c86e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800c868:	2300      	movs	r3, #0
 800c86a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800c86c:	e393      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c86e:	e392      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800c870:	4b1d      	ldr	r3, [pc, #116]	; (800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800c872:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c874:	e38f      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800c876:	2300      	movs	r3, #0
 800c878:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c87a:	e38c      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c882:	f040 80a7 	bne.w	800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800c886:	4b14      	ldr	r3, [pc, #80]	; (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c88a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c88e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800c890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c892:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c896:	d05f      	beq.n	800c958 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c89a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c89e:	f200 8096 	bhi.w	800c9ce <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800c8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c8a8:	f000 808e 	beq.w	800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800c8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c8b2:	f200 808c 	bhi.w	800c9ce <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800c8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c8bc:	d03a      	beq.n	800c934 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800c8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c8c4:	f200 8083 	bhi.w	800c9ce <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800c8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d00e      	beq.n	800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800c8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c8d4:	d01c      	beq.n	800c910 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800c8d6:	e07a      	b.n	800c9ce <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800c8d8:	58024400 	.word	0x58024400
 800c8dc:	03d09000 	.word	0x03d09000
 800c8e0:	003d0900 	.word	0x003d0900
 800c8e4:	017d7840 	.word	0x017d7840
 800c8e8:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c8ec:	4baa      	ldr	r3, [pc, #680]	; (800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c8f8:	d107      	bne.n	800c90a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c8fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c8fe:	4618      	mov	r0, r3
 800c900:	f000 fe14 	bl	800d52c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c906:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c908:	e345      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c90a:	2300      	movs	r3, #0
 800c90c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c90e:	e342      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c910:	4ba1      	ldr	r3, [pc, #644]	; (800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c918:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c91c:	d107      	bne.n	800c92e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c91e:	f107 0318 	add.w	r3, r7, #24
 800c922:	4618      	mov	r0, r3
 800c924:	f000 fb5a 	bl	800cfdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c928:	69bb      	ldr	r3, [r7, #24]
 800c92a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c92c:	e333      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c92e:	2300      	movs	r3, #0
 800c930:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c932:	e330      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c934:	4b98      	ldr	r3, [pc, #608]	; (800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c93c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c940:	d107      	bne.n	800c952 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c942:	f107 030c 	add.w	r3, r7, #12
 800c946:	4618      	mov	r0, r3
 800c948:	f000 fc9c 	bl	800d284 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c950:	e321      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c952:	2300      	movs	r3, #0
 800c954:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c956:	e31e      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800c958:	4b8f      	ldr	r3, [pc, #572]	; (800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c95a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c95c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c960:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c962:	4b8d      	ldr	r3, [pc, #564]	; (800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	f003 0304 	and.w	r3, r3, #4
 800c96a:	2b04      	cmp	r3, #4
 800c96c:	d10c      	bne.n	800c988 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800c96e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c970:	2b00      	cmp	r3, #0
 800c972:	d109      	bne.n	800c988 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c974:	4b88      	ldr	r3, [pc, #544]	; (800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	08db      	lsrs	r3, r3, #3
 800c97a:	f003 0303 	and.w	r3, r3, #3
 800c97e:	4a87      	ldr	r2, [pc, #540]	; (800cb9c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c980:	fa22 f303 	lsr.w	r3, r2, r3
 800c984:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c986:	e01e      	b.n	800c9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c988:	4b83      	ldr	r3, [pc, #524]	; (800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c990:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c994:	d106      	bne.n	800c9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800c996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c998:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c99c:	d102      	bne.n	800c9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800c99e:	4b80      	ldr	r3, [pc, #512]	; (800cba0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800c9a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9a2:	e010      	b.n	800c9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c9a4:	4b7c      	ldr	r3, [pc, #496]	; (800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c9b0:	d106      	bne.n	800c9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800c9b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9b8:	d102      	bne.n	800c9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800c9ba:	4b7a      	ldr	r3, [pc, #488]	; (800cba4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800c9bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9be:	e002      	b.n	800c9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800c9c4:	e2e7      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c9c6:	e2e6      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800c9c8:	4b77      	ldr	r3, [pc, #476]	; (800cba8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800c9ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c9cc:	e2e3      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c9d2:	e2e0      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c9da:	f040 809c 	bne.w	800cb16 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800c9de:	4b6e      	ldr	r3, [pc, #440]	; (800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c9e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9e2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c9e6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800c9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c9ee:	d054      	beq.n	800ca9a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800c9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c9f6:	f200 808b 	bhi.w	800cb10 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800c9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ca00:	f000 8083 	beq.w	800cb0a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800ca04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca06:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ca0a:	f200 8081 	bhi.w	800cb10 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800ca0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca14:	d02f      	beq.n	800ca76 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800ca16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca1c:	d878      	bhi.n	800cb10 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800ca1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d004      	beq.n	800ca2e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800ca24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ca2a:	d012      	beq.n	800ca52 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800ca2c:	e070      	b.n	800cb10 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ca2e:	4b5a      	ldr	r3, [pc, #360]	; (800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca3a:	d107      	bne.n	800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ca3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca40:	4618      	mov	r0, r3
 800ca42:	f000 fd73 	bl	800d52c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ca46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca48:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ca4a:	e2a4      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ca50:	e2a1      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ca52:	4b51      	ldr	r3, [pc, #324]	; (800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca5e:	d107      	bne.n	800ca70 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca60:	f107 0318 	add.w	r3, r7, #24
 800ca64:	4618      	mov	r0, r3
 800ca66:	f000 fab9 	bl	800cfdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ca6a:	69bb      	ldr	r3, [r7, #24]
 800ca6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800ca6e:	e292      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ca70:	2300      	movs	r3, #0
 800ca72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ca74:	e28f      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ca76:	4b48      	ldr	r3, [pc, #288]	; (800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca82:	d107      	bne.n	800ca94 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca84:	f107 030c 	add.w	r3, r7, #12
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f000 fbfb 	bl	800d284 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ca92:	e280      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ca94:	2300      	movs	r3, #0
 800ca96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ca98:	e27d      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ca9a:	4b3f      	ldr	r3, [pc, #252]	; (800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ca9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800caa2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800caa4:	4b3c      	ldr	r3, [pc, #240]	; (800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	f003 0304 	and.w	r3, r3, #4
 800caac:	2b04      	cmp	r3, #4
 800caae:	d10c      	bne.n	800caca <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800cab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d109      	bne.n	800caca <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800cab6:	4b38      	ldr	r3, [pc, #224]	; (800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	08db      	lsrs	r3, r3, #3
 800cabc:	f003 0303 	and.w	r3, r3, #3
 800cac0:	4a36      	ldr	r2, [pc, #216]	; (800cb9c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800cac2:	fa22 f303 	lsr.w	r3, r2, r3
 800cac6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cac8:	e01e      	b.n	800cb08 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800caca:	4b33      	ldr	r3, [pc, #204]	; (800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cad6:	d106      	bne.n	800cae6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800cad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cada:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cade:	d102      	bne.n	800cae6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800cae0:	4b2f      	ldr	r3, [pc, #188]	; (800cba0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800cae2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cae4:	e010      	b.n	800cb08 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cae6:	4b2c      	ldr	r3, [pc, #176]	; (800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800caee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800caf2:	d106      	bne.n	800cb02 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800caf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cafa:	d102      	bne.n	800cb02 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800cafc:	4b29      	ldr	r3, [pc, #164]	; (800cba4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800cafe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb00:	e002      	b.n	800cb08 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800cb02:	2300      	movs	r3, #0
 800cb04:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800cb06:	e246      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cb08:	e245      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800cb0a:	4b27      	ldr	r3, [pc, #156]	; (800cba8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800cb0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cb0e:	e242      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800cb10:	2300      	movs	r3, #0
 800cb12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cb14:	e23f      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb1c:	f040 80a8 	bne.w	800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800cb20:	4b1d      	ldr	r3, [pc, #116]	; (800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800cb22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb24:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800cb28:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800cb2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cb30:	d060      	beq.n	800cbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800cb32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cb38:	f200 8097 	bhi.w	800cc6a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800cb3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb3e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cb42:	f000 808f 	beq.w	800cc64 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800cb46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cb4c:	f200 808d 	bhi.w	800cc6a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800cb50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb56:	d03b      	beq.n	800cbd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800cb58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb5e:	f200 8084 	bhi.w	800cc6a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800cb62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d004      	beq.n	800cb72 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800cb68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb6e:	d01d      	beq.n	800cbac <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 800cb70:	e07b      	b.n	800cc6a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cb72:	4b09      	ldr	r3, [pc, #36]	; (800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cb7e:	d107      	bne.n	800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cb80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb84:	4618      	mov	r0, r3
 800cb86:	f000 fcd1 	bl	800d52c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cb8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb8c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800cb8e:	e202      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800cb90:	2300      	movs	r3, #0
 800cb92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cb94:	e1ff      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cb96:	bf00      	nop
 800cb98:	58024400 	.word	0x58024400
 800cb9c:	03d09000 	.word	0x03d09000
 800cba0:	003d0900 	.word	0x003d0900
 800cba4:	017d7840 	.word	0x017d7840
 800cba8:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cbac:	4ba3      	ldr	r3, [pc, #652]	; (800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cbb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cbb8:	d107      	bne.n	800cbca <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbba:	f107 0318 	add.w	r3, r7, #24
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f000 fa0c 	bl	800cfdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cbc4:	69bb      	ldr	r3, [r7, #24]
 800cbc6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800cbc8:	e1e5      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cbce:	e1e2      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cbd0:	4b9a      	ldr	r3, [pc, #616]	; (800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cbd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbdc:	d107      	bne.n	800cbee <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbde:	f107 030c 	add.w	r3, r7, #12
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f000 fb4e 	bl	800d284 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800cbec:	e1d3      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800cbee:	2300      	movs	r3, #0
 800cbf0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cbf2:	e1d0      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800cbf4:	4b91      	ldr	r3, [pc, #580]	; (800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800cbf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbf8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cbfc:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cbfe:	4b8f      	ldr	r3, [pc, #572]	; (800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f003 0304 	and.w	r3, r3, #4
 800cc06:	2b04      	cmp	r3, #4
 800cc08:	d10c      	bne.n	800cc24 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800cc0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d109      	bne.n	800cc24 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800cc10:	4b8a      	ldr	r3, [pc, #552]	; (800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	08db      	lsrs	r3, r3, #3
 800cc16:	f003 0303 	and.w	r3, r3, #3
 800cc1a:	4a89      	ldr	r2, [pc, #548]	; (800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800cc1c:	fa22 f303 	lsr.w	r3, r2, r3
 800cc20:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc22:	e01e      	b.n	800cc62 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cc24:	4b85      	ldr	r3, [pc, #532]	; (800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc30:	d106      	bne.n	800cc40 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800cc32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cc38:	d102      	bne.n	800cc40 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800cc3a:	4b82      	ldr	r3, [pc, #520]	; (800ce44 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800cc3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc3e:	e010      	b.n	800cc62 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cc40:	4b7e      	ldr	r3, [pc, #504]	; (800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc4c:	d106      	bne.n	800cc5c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800cc4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc54:	d102      	bne.n	800cc5c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800cc56:	4b7c      	ldr	r3, [pc, #496]	; (800ce48 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cc58:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc5a:	e002      	b.n	800cc62 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800cc60:	e199      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cc62:	e198      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800cc64:	4b79      	ldr	r3, [pc, #484]	; (800ce4c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cc66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cc68:	e195      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cc6e:	e192      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800cc76:	d173      	bne.n	800cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800cc78:	4b70      	ldr	r3, [pc, #448]	; (800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800cc7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cc80:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800cc82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc88:	d02f      	beq.n	800ccea <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800cc8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc90:	d863      	bhi.n	800cd5a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800cc92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d004      	beq.n	800cca2 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800cc98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc9e:	d012      	beq.n	800ccc6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 800cca0:	e05b      	b.n	800cd5a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cca2:	4b66      	ldr	r3, [pc, #408]	; (800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ccaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ccae:	d107      	bne.n	800ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ccb0:	f107 0318 	add.w	r3, r7, #24
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f000 f991 	bl	800cfdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ccba:	69bb      	ldr	r3, [r7, #24]
 800ccbc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ccbe:	e16a      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ccc4:	e167      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ccc6:	4b5d      	ldr	r3, [pc, #372]	; (800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ccce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccd2:	d107      	bne.n	800cce4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ccd4:	f107 030c 	add.w	r3, r7, #12
 800ccd8:	4618      	mov	r0, r3
 800ccda:	f000 fad3 	bl	800d284 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800cce2:	e158      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800cce4:	2300      	movs	r3, #0
 800cce6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cce8:	e155      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ccea:	4b54      	ldr	r3, [pc, #336]	; (800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800ccec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ccee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ccf2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ccf4:	4b51      	ldr	r3, [pc, #324]	; (800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	f003 0304 	and.w	r3, r3, #4
 800ccfc:	2b04      	cmp	r3, #4
 800ccfe:	d10c      	bne.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 800cd00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d109      	bne.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800cd06:	4b4d      	ldr	r3, [pc, #308]	; (800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	08db      	lsrs	r3, r3, #3
 800cd0c:	f003 0303 	and.w	r3, r3, #3
 800cd10:	4a4b      	ldr	r2, [pc, #300]	; (800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800cd12:	fa22 f303 	lsr.w	r3, r2, r3
 800cd16:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd18:	e01e      	b.n	800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cd1a:	4b48      	ldr	r3, [pc, #288]	; (800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd26:	d106      	bne.n	800cd36 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800cd28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd2e:	d102      	bne.n	800cd36 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800cd30:	4b44      	ldr	r3, [pc, #272]	; (800ce44 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800cd32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd34:	e010      	b.n	800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cd36:	4b41      	ldr	r3, [pc, #260]	; (800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd42:	d106      	bne.n	800cd52 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800cd44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd4a:	d102      	bne.n	800cd52 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800cd4c:	4b3e      	ldr	r3, [pc, #248]	; (800ce48 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cd4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd50:	e002      	b.n	800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800cd52:	2300      	movs	r3, #0
 800cd54:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800cd56:	e11e      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cd58:	e11d      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cd5e:	e11a      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd66:	d133      	bne.n	800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800cd68:	4b34      	ldr	r3, [pc, #208]	; (800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800cd6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cd70:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800cd72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d004      	beq.n	800cd82 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 800cd78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd7e:	d012      	beq.n	800cda6 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 800cd80:	e023      	b.n	800cdca <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cd82:	4b2e      	ldr	r3, [pc, #184]	; (800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cd8e:	d107      	bne.n	800cda0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cd90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd94:	4618      	mov	r0, r3
 800cd96:	f000 fbc9 	bl	800d52c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cd9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd9c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800cd9e:	e0fa      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cda0:	2300      	movs	r3, #0
 800cda2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cda4:	e0f7      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cda6:	4b25      	ldr	r3, [pc, #148]	; (800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cdae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cdb2:	d107      	bne.n	800cdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cdb4:	f107 0318 	add.w	r3, r7, #24
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f000 f90f 	bl	800cfdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cdbe:	6a3b      	ldr	r3, [r7, #32]
 800cdc0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800cdc2:	e0e8      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cdc8:	e0e5      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cdce:	e0e2      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cdd6:	f040 808f 	bne.w	800cef8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800cdda:	4b18      	ldr	r3, [pc, #96]	; (800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800cddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdde:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800cde2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800cde4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cdea:	d075      	beq.n	800ced8 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 800cdec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cdf2:	d87e      	bhi.n	800cef2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800cdf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cdfa:	d060      	beq.n	800cebe <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800cdfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce02:	d876      	bhi.n	800cef2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800ce04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ce0a:	d045      	beq.n	800ce98 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800ce0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce0e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ce12:	d86e      	bhi.n	800cef2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800ce14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce1a:	d02b      	beq.n	800ce74 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800ce1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce22:	d866      	bhi.n	800cef2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800ce24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d004      	beq.n	800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800ce2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ce30:	d00e      	beq.n	800ce50 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800ce32:	e05e      	b.n	800cef2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ce34:	f000 f8bc 	bl	800cfb0 <HAL_RCCEx_GetD3PCLK1Freq>
 800ce38:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800ce3a:	e0ac      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ce3c:	58024400 	.word	0x58024400
 800ce40:	03d09000 	.word	0x03d09000
 800ce44:	003d0900 	.word	0x003d0900
 800ce48:	017d7840 	.word	0x017d7840
 800ce4c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce50:	4b53      	ldr	r3, [pc, #332]	; (800cfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ce5c:	d107      	bne.n	800ce6e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce5e:	f107 0318 	add.w	r3, r7, #24
 800ce62:	4618      	mov	r0, r3
 800ce64:	f000 f8ba 	bl	800cfdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ce68:	69fb      	ldr	r3, [r7, #28]
 800ce6a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ce6c:	e093      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ce72:	e090      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ce74:	4b4a      	ldr	r3, [pc, #296]	; (800cfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce80:	d107      	bne.n	800ce92 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce82:	f107 030c 	add.w	r3, r7, #12
 800ce86:	4618      	mov	r0, r3
 800ce88:	f000 f9fc 	bl	800d284 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ce8c:	693b      	ldr	r3, [r7, #16]
 800ce8e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ce90:	e081      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce92:	2300      	movs	r3, #0
 800ce94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ce96:	e07e      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ce98:	4b41      	ldr	r3, [pc, #260]	; (800cfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	f003 0304 	and.w	r3, r3, #4
 800cea0:	2b04      	cmp	r3, #4
 800cea2:	d109      	bne.n	800ceb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800cea4:	4b3e      	ldr	r3, [pc, #248]	; (800cfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	08db      	lsrs	r3, r3, #3
 800ceaa:	f003 0303 	and.w	r3, r3, #3
 800ceae:	4a3d      	ldr	r2, [pc, #244]	; (800cfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800ceb0:	fa22 f303 	lsr.w	r3, r2, r3
 800ceb4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ceb6:	e06e      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cebc:	e06b      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cebe:	4b38      	ldr	r3, [pc, #224]	; (800cfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ceca:	d102      	bne.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 800cecc:	4b36      	ldr	r3, [pc, #216]	; (800cfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800cece:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ced0:	e061      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ced2:	2300      	movs	r3, #0
 800ced4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ced6:	e05e      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ced8:	4b31      	ldr	r3, [pc, #196]	; (800cfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cee0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cee4:	d102      	bne.n	800ceec <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800cee6:	4b31      	ldr	r3, [pc, #196]	; (800cfac <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800cee8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ceea:	e054      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ceec:	2300      	movs	r3, #0
 800ceee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cef0:	e051      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800cef2:	2300      	movs	r3, #0
 800cef4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cef6:	e04e      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cefe:	d148      	bne.n	800cf92 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800cf00:	4b27      	ldr	r3, [pc, #156]	; (800cfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cf02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cf08:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800cf0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf10:	d02a      	beq.n	800cf68 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800cf12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf18:	d838      	bhi.n	800cf8c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800cf1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d004      	beq.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800cf20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cf26:	d00d      	beq.n	800cf44 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800cf28:	e030      	b.n	800cf8c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cf2a:	4b1d      	ldr	r3, [pc, #116]	; (800cfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf36:	d102      	bne.n	800cf3e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800cf38:	4b1c      	ldr	r3, [pc, #112]	; (800cfac <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800cf3a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800cf3c:	e02b      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cf42:	e028      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cf44:	4b16      	ldr	r3, [pc, #88]	; (800cfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf50:	d107      	bne.n	800cf62 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cf52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cf56:	4618      	mov	r0, r3
 800cf58:	f000 fae8 	bl	800d52c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cf5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf5e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800cf60:	e019      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf62:	2300      	movs	r3, #0
 800cf64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cf66:	e016      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cf68:	4b0d      	ldr	r3, [pc, #52]	; (800cfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cf74:	d107      	bne.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf76:	f107 0318 	add.w	r3, r7, #24
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f000 f82e 	bl	800cfdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cf80:	69fb      	ldr	r3, [r7, #28]
 800cf82:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800cf84:	e007      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf86:	2300      	movs	r3, #0
 800cf88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cf8a:	e004      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cf90:	e001      	b.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800cf92:	2300      	movs	r3, #0
 800cf94:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800cf96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	3740      	adds	r7, #64	; 0x40
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}
 800cfa0:	58024400 	.word	0x58024400
 800cfa4:	03d09000 	.word	0x03d09000
 800cfa8:	003d0900 	.word	0x003d0900
 800cfac:	017d7840 	.word	0x017d7840

0800cfb0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cfb4:	f7fe fb8e 	bl	800b6d4 <HAL_RCC_GetHCLKFreq>
 800cfb8:	4602      	mov	r2, r0
 800cfba:	4b06      	ldr	r3, [pc, #24]	; (800cfd4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cfbc:	6a1b      	ldr	r3, [r3, #32]
 800cfbe:	091b      	lsrs	r3, r3, #4
 800cfc0:	f003 0307 	and.w	r3, r3, #7
 800cfc4:	4904      	ldr	r1, [pc, #16]	; (800cfd8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cfc6:	5ccb      	ldrb	r3, [r1, r3]
 800cfc8:	f003 031f 	and.w	r3, r3, #31
 800cfcc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	bd80      	pop	{r7, pc}
 800cfd4:	58024400 	.word	0x58024400
 800cfd8:	08028a80 	.word	0x08028a80

0800cfdc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800cfdc:	b480      	push	{r7}
 800cfde:	b089      	sub	sp, #36	; 0x24
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cfe4:	4ba1      	ldr	r3, [pc, #644]	; (800d26c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cfe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfe8:	f003 0303 	and.w	r3, r3, #3
 800cfec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800cfee:	4b9f      	ldr	r3, [pc, #636]	; (800d26c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cff2:	0b1b      	lsrs	r3, r3, #12
 800cff4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cff8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cffa:	4b9c      	ldr	r3, [pc, #624]	; (800d26c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cffe:	091b      	lsrs	r3, r3, #4
 800d000:	f003 0301 	and.w	r3, r3, #1
 800d004:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800d006:	4b99      	ldr	r3, [pc, #612]	; (800d26c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d00a:	08db      	lsrs	r3, r3, #3
 800d00c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d010:	693a      	ldr	r2, [r7, #16]
 800d012:	fb02 f303 	mul.w	r3, r2, r3
 800d016:	ee07 3a90 	vmov	s15, r3
 800d01a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d01e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d022:	697b      	ldr	r3, [r7, #20]
 800d024:	2b00      	cmp	r3, #0
 800d026:	f000 8111 	beq.w	800d24c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d02a:	69bb      	ldr	r3, [r7, #24]
 800d02c:	2b02      	cmp	r3, #2
 800d02e:	f000 8083 	beq.w	800d138 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d032:	69bb      	ldr	r3, [r7, #24]
 800d034:	2b02      	cmp	r3, #2
 800d036:	f200 80a1 	bhi.w	800d17c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d03a:	69bb      	ldr	r3, [r7, #24]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d003      	beq.n	800d048 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d040:	69bb      	ldr	r3, [r7, #24]
 800d042:	2b01      	cmp	r3, #1
 800d044:	d056      	beq.n	800d0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d046:	e099      	b.n	800d17c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d048:	4b88      	ldr	r3, [pc, #544]	; (800d26c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	f003 0320 	and.w	r3, r3, #32
 800d050:	2b00      	cmp	r3, #0
 800d052:	d02d      	beq.n	800d0b0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d054:	4b85      	ldr	r3, [pc, #532]	; (800d26c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	08db      	lsrs	r3, r3, #3
 800d05a:	f003 0303 	and.w	r3, r3, #3
 800d05e:	4a84      	ldr	r2, [pc, #528]	; (800d270 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d060:	fa22 f303 	lsr.w	r3, r2, r3
 800d064:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	ee07 3a90 	vmov	s15, r3
 800d06c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d070:	697b      	ldr	r3, [r7, #20]
 800d072:	ee07 3a90 	vmov	s15, r3
 800d076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d07a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d07e:	4b7b      	ldr	r3, [pc, #492]	; (800d26c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d086:	ee07 3a90 	vmov	s15, r3
 800d08a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d08e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d092:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d274 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d09a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d09e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0aa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800d0ae:	e087      	b.n	800d1c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d0b0:	697b      	ldr	r3, [r7, #20]
 800d0b2:	ee07 3a90 	vmov	s15, r3
 800d0b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0ba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d278 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d0be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0c2:	4b6a      	ldr	r3, [pc, #424]	; (800d26c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0ca:	ee07 3a90 	vmov	s15, r3
 800d0ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0d6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d274 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d0da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d0f2:	e065      	b.n	800d1c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d0f4:	697b      	ldr	r3, [r7, #20]
 800d0f6:	ee07 3a90 	vmov	s15, r3
 800d0fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0fe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d27c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d106:	4b59      	ldr	r3, [pc, #356]	; (800d26c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d10a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d10e:	ee07 3a90 	vmov	s15, r3
 800d112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d116:	ed97 6a03 	vldr	s12, [r7, #12]
 800d11a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d274 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d11e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d126:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d12a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d12e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d132:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d136:	e043      	b.n	800d1c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d138:	697b      	ldr	r3, [r7, #20]
 800d13a:	ee07 3a90 	vmov	s15, r3
 800d13e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d142:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d280 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d14a:	4b48      	ldr	r3, [pc, #288]	; (800d26c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d14c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d14e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d152:	ee07 3a90 	vmov	s15, r3
 800d156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d15a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d15e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d274 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d16a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d16e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d172:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d176:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d17a:	e021      	b.n	800d1c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d17c:	697b      	ldr	r3, [r7, #20]
 800d17e:	ee07 3a90 	vmov	s15, r3
 800d182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d186:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d27c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d18a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d18e:	4b37      	ldr	r3, [pc, #220]	; (800d26c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d196:	ee07 3a90 	vmov	s15, r3
 800d19a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d19e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1a2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d274 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d1a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d1be:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800d1c0:	4b2a      	ldr	r3, [pc, #168]	; (800d26c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1c4:	0a5b      	lsrs	r3, r3, #9
 800d1c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1ca:	ee07 3a90 	vmov	s15, r3
 800d1ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d1d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d1da:	edd7 6a07 	vldr	s13, [r7, #28]
 800d1de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d1e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1e6:	ee17 2a90 	vmov	r2, s15
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800d1ee:	4b1f      	ldr	r3, [pc, #124]	; (800d26c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1f2:	0c1b      	lsrs	r3, r3, #16
 800d1f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1f8:	ee07 3a90 	vmov	s15, r3
 800d1fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d200:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d204:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d208:	edd7 6a07 	vldr	s13, [r7, #28]
 800d20c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d214:	ee17 2a90 	vmov	r2, s15
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800d21c:	4b13      	ldr	r3, [pc, #76]	; (800d26c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d21e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d220:	0e1b      	lsrs	r3, r3, #24
 800d222:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d226:	ee07 3a90 	vmov	s15, r3
 800d22a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d22e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d232:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d236:	edd7 6a07 	vldr	s13, [r7, #28]
 800d23a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d23e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d242:	ee17 2a90 	vmov	r2, s15
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d24a:	e008      	b.n	800d25e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2200      	movs	r2, #0
 800d250:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	2200      	movs	r2, #0
 800d256:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2200      	movs	r2, #0
 800d25c:	609a      	str	r2, [r3, #8]
}
 800d25e:	bf00      	nop
 800d260:	3724      	adds	r7, #36	; 0x24
 800d262:	46bd      	mov	sp, r7
 800d264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d268:	4770      	bx	lr
 800d26a:	bf00      	nop
 800d26c:	58024400 	.word	0x58024400
 800d270:	03d09000 	.word	0x03d09000
 800d274:	46000000 	.word	0x46000000
 800d278:	4c742400 	.word	0x4c742400
 800d27c:	4a742400 	.word	0x4a742400
 800d280:	4bbebc20 	.word	0x4bbebc20

0800d284 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800d284:	b480      	push	{r7}
 800d286:	b089      	sub	sp, #36	; 0x24
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d28c:	4ba1      	ldr	r3, [pc, #644]	; (800d514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d28e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d290:	f003 0303 	and.w	r3, r3, #3
 800d294:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800d296:	4b9f      	ldr	r3, [pc, #636]	; (800d514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d29a:	0d1b      	lsrs	r3, r3, #20
 800d29c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d2a0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d2a2:	4b9c      	ldr	r3, [pc, #624]	; (800d514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2a6:	0a1b      	lsrs	r3, r3, #8
 800d2a8:	f003 0301 	and.w	r3, r3, #1
 800d2ac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800d2ae:	4b99      	ldr	r3, [pc, #612]	; (800d514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2b2:	08db      	lsrs	r3, r3, #3
 800d2b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d2b8:	693a      	ldr	r2, [r7, #16]
 800d2ba:	fb02 f303 	mul.w	r3, r2, r3
 800d2be:	ee07 3a90 	vmov	s15, r3
 800d2c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	f000 8111 	beq.w	800d4f4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d2d2:	69bb      	ldr	r3, [r7, #24]
 800d2d4:	2b02      	cmp	r3, #2
 800d2d6:	f000 8083 	beq.w	800d3e0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d2da:	69bb      	ldr	r3, [r7, #24]
 800d2dc:	2b02      	cmp	r3, #2
 800d2de:	f200 80a1 	bhi.w	800d424 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d2e2:	69bb      	ldr	r3, [r7, #24]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d003      	beq.n	800d2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d2e8:	69bb      	ldr	r3, [r7, #24]
 800d2ea:	2b01      	cmp	r3, #1
 800d2ec:	d056      	beq.n	800d39c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d2ee:	e099      	b.n	800d424 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d2f0:	4b88      	ldr	r3, [pc, #544]	; (800d514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	f003 0320 	and.w	r3, r3, #32
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d02d      	beq.n	800d358 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d2fc:	4b85      	ldr	r3, [pc, #532]	; (800d514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	08db      	lsrs	r3, r3, #3
 800d302:	f003 0303 	and.w	r3, r3, #3
 800d306:	4a84      	ldr	r2, [pc, #528]	; (800d518 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d308:	fa22 f303 	lsr.w	r3, r2, r3
 800d30c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d30e:	68bb      	ldr	r3, [r7, #8]
 800d310:	ee07 3a90 	vmov	s15, r3
 800d314:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d318:	697b      	ldr	r3, [r7, #20]
 800d31a:	ee07 3a90 	vmov	s15, r3
 800d31e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d326:	4b7b      	ldr	r3, [pc, #492]	; (800d514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d32a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d32e:	ee07 3a90 	vmov	s15, r3
 800d332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d336:	ed97 6a03 	vldr	s12, [r7, #12]
 800d33a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d51c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d33e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d346:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d34a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d34e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d352:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800d356:	e087      	b.n	800d468 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	ee07 3a90 	vmov	s15, r3
 800d35e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d362:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d520 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d36a:	4b6a      	ldr	r3, [pc, #424]	; (800d514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d36c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d36e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d372:	ee07 3a90 	vmov	s15, r3
 800d376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d37a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d37e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d51c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d38a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d38e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d392:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d396:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d39a:	e065      	b.n	800d468 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d39c:	697b      	ldr	r3, [r7, #20]
 800d39e:	ee07 3a90 	vmov	s15, r3
 800d3a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3a6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d524 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d3aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3ae:	4b59      	ldr	r3, [pc, #356]	; (800d514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3b6:	ee07 3a90 	vmov	s15, r3
 800d3ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3be:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3c2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d51c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d3c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d3de:	e043      	b.n	800d468 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d3e0:	697b      	ldr	r3, [r7, #20]
 800d3e2:	ee07 3a90 	vmov	s15, r3
 800d3e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3ea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d528 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d3ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3f2:	4b48      	ldr	r3, [pc, #288]	; (800d514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3fa:	ee07 3a90 	vmov	s15, r3
 800d3fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d402:	ed97 6a03 	vldr	s12, [r7, #12]
 800d406:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d51c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d40a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d40e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d412:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d41a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d41e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d422:	e021      	b.n	800d468 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d424:	697b      	ldr	r3, [r7, #20]
 800d426:	ee07 3a90 	vmov	s15, r3
 800d42a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d42e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d524 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d436:	4b37      	ldr	r3, [pc, #220]	; (800d514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d43a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d43e:	ee07 3a90 	vmov	s15, r3
 800d442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d446:	ed97 6a03 	vldr	s12, [r7, #12]
 800d44a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d51c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d44e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d456:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d45a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d45e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d462:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d466:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800d468:	4b2a      	ldr	r3, [pc, #168]	; (800d514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d46a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d46c:	0a5b      	lsrs	r3, r3, #9
 800d46e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d472:	ee07 3a90 	vmov	s15, r3
 800d476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d47a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d47e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d482:	edd7 6a07 	vldr	s13, [r7, #28]
 800d486:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d48a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d48e:	ee17 2a90 	vmov	r2, s15
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800d496:	4b1f      	ldr	r3, [pc, #124]	; (800d514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d49a:	0c1b      	lsrs	r3, r3, #16
 800d49c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4a0:	ee07 3a90 	vmov	s15, r3
 800d4a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4b0:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4bc:	ee17 2a90 	vmov	r2, s15
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800d4c4:	4b13      	ldr	r3, [pc, #76]	; (800d514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4c8:	0e1b      	lsrs	r3, r3, #24
 800d4ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4ce:	ee07 3a90 	vmov	s15, r3
 800d4d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4de:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4ea:	ee17 2a90 	vmov	r2, s15
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d4f2:	e008      	b.n	800d506 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2200      	movs	r2, #0
 800d504:	609a      	str	r2, [r3, #8]
}
 800d506:	bf00      	nop
 800d508:	3724      	adds	r7, #36	; 0x24
 800d50a:	46bd      	mov	sp, r7
 800d50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d510:	4770      	bx	lr
 800d512:	bf00      	nop
 800d514:	58024400 	.word	0x58024400
 800d518:	03d09000 	.word	0x03d09000
 800d51c:	46000000 	.word	0x46000000
 800d520:	4c742400 	.word	0x4c742400
 800d524:	4a742400 	.word	0x4a742400
 800d528:	4bbebc20 	.word	0x4bbebc20

0800d52c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800d52c:	b480      	push	{r7}
 800d52e:	b089      	sub	sp, #36	; 0x24
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d534:	4ba0      	ldr	r3, [pc, #640]	; (800d7b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d538:	f003 0303 	and.w	r3, r3, #3
 800d53c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800d53e:	4b9e      	ldr	r3, [pc, #632]	; (800d7b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d542:	091b      	lsrs	r3, r3, #4
 800d544:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d548:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d54a:	4b9b      	ldr	r3, [pc, #620]	; (800d7b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d54c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d54e:	f003 0301 	and.w	r3, r3, #1
 800d552:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800d554:	4b98      	ldr	r3, [pc, #608]	; (800d7b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d558:	08db      	lsrs	r3, r3, #3
 800d55a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d55e:	693a      	ldr	r2, [r7, #16]
 800d560:	fb02 f303 	mul.w	r3, r2, r3
 800d564:	ee07 3a90 	vmov	s15, r3
 800d568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d56c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d570:	697b      	ldr	r3, [r7, #20]
 800d572:	2b00      	cmp	r3, #0
 800d574:	f000 8111 	beq.w	800d79a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d578:	69bb      	ldr	r3, [r7, #24]
 800d57a:	2b02      	cmp	r3, #2
 800d57c:	f000 8083 	beq.w	800d686 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d580:	69bb      	ldr	r3, [r7, #24]
 800d582:	2b02      	cmp	r3, #2
 800d584:	f200 80a1 	bhi.w	800d6ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d588:	69bb      	ldr	r3, [r7, #24]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d003      	beq.n	800d596 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d58e:	69bb      	ldr	r3, [r7, #24]
 800d590:	2b01      	cmp	r3, #1
 800d592:	d056      	beq.n	800d642 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d594:	e099      	b.n	800d6ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d596:	4b88      	ldr	r3, [pc, #544]	; (800d7b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	f003 0320 	and.w	r3, r3, #32
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d02d      	beq.n	800d5fe <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d5a2:	4b85      	ldr	r3, [pc, #532]	; (800d7b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	08db      	lsrs	r3, r3, #3
 800d5a8:	f003 0303 	and.w	r3, r3, #3
 800d5ac:	4a83      	ldr	r2, [pc, #524]	; (800d7bc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d5ae:	fa22 f303 	lsr.w	r3, r2, r3
 800d5b2:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	ee07 3a90 	vmov	s15, r3
 800d5ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	ee07 3a90 	vmov	s15, r3
 800d5c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5cc:	4b7a      	ldr	r3, [pc, #488]	; (800d7b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5d4:	ee07 3a90 	vmov	s15, r3
 800d5d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5dc:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5e0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d5e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d5f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5f8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800d5fc:	e087      	b.n	800d70e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	ee07 3a90 	vmov	s15, r3
 800d604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d608:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d7c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d60c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d610:	4b69      	ldr	r3, [pc, #420]	; (800d7b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d618:	ee07 3a90 	vmov	s15, r3
 800d61c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d620:	ed97 6a03 	vldr	s12, [r7, #12]
 800d624:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d628:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d62c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d630:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d634:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d63c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d640:	e065      	b.n	800d70e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d642:	697b      	ldr	r3, [r7, #20]
 800d644:	ee07 3a90 	vmov	s15, r3
 800d648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d64c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d650:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d654:	4b58      	ldr	r3, [pc, #352]	; (800d7b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d65c:	ee07 3a90 	vmov	s15, r3
 800d660:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d664:	ed97 6a03 	vldr	s12, [r7, #12]
 800d668:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d66c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d670:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d674:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d678:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d67c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d680:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d684:	e043      	b.n	800d70e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d686:	697b      	ldr	r3, [r7, #20]
 800d688:	ee07 3a90 	vmov	s15, r3
 800d68c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d690:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d7cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d694:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d698:	4b47      	ldr	r3, [pc, #284]	; (800d7b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d69a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d69c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6a0:	ee07 3a90 	vmov	s15, r3
 800d6a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6a8:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6ac:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d6b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d6c8:	e021      	b.n	800d70e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d6ca:	697b      	ldr	r3, [r7, #20]
 800d6cc:	ee07 3a90 	vmov	s15, r3
 800d6d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6d4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d7c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d6d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6dc:	4b36      	ldr	r3, [pc, #216]	; (800d7b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6e4:	ee07 3a90 	vmov	s15, r3
 800d6e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6ec:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6f0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d6f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d700:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d704:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d708:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d70c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800d70e:	4b2a      	ldr	r3, [pc, #168]	; (800d7b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d712:	0a5b      	lsrs	r3, r3, #9
 800d714:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d718:	ee07 3a90 	vmov	s15, r3
 800d71c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d720:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d724:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d728:	edd7 6a07 	vldr	s13, [r7, #28]
 800d72c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d730:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d734:	ee17 2a90 	vmov	r2, s15
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800d73c:	4b1e      	ldr	r3, [pc, #120]	; (800d7b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d73e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d740:	0c1b      	lsrs	r3, r3, #16
 800d742:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d746:	ee07 3a90 	vmov	s15, r3
 800d74a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d74e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d752:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d756:	edd7 6a07 	vldr	s13, [r7, #28]
 800d75a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d75e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d762:	ee17 2a90 	vmov	r2, s15
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800d76a:	4b13      	ldr	r3, [pc, #76]	; (800d7b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d76c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d76e:	0e1b      	lsrs	r3, r3, #24
 800d770:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d774:	ee07 3a90 	vmov	s15, r3
 800d778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d77c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d780:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d784:	edd7 6a07 	vldr	s13, [r7, #28]
 800d788:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d78c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d790:	ee17 2a90 	vmov	r2, s15
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d798:	e008      	b.n	800d7ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2200      	movs	r2, #0
 800d79e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	609a      	str	r2, [r3, #8]
}
 800d7ac:	bf00      	nop
 800d7ae:	3724      	adds	r7, #36	; 0x24
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b6:	4770      	bx	lr
 800d7b8:	58024400 	.word	0x58024400
 800d7bc:	03d09000 	.word	0x03d09000
 800d7c0:	46000000 	.word	0x46000000
 800d7c4:	4c742400 	.word	0x4c742400
 800d7c8:	4a742400 	.word	0x4a742400
 800d7cc:	4bbebc20 	.word	0x4bbebc20

0800d7d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b084      	sub	sp, #16
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
 800d7d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d7da:	2300      	movs	r3, #0
 800d7dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d7de:	4b53      	ldr	r3, [pc, #332]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d7e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7e2:	f003 0303 	and.w	r3, r3, #3
 800d7e6:	2b03      	cmp	r3, #3
 800d7e8:	d101      	bne.n	800d7ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	e099      	b.n	800d922 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d7ee:	4b4f      	ldr	r3, [pc, #316]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	4a4e      	ldr	r2, [pc, #312]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d7f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d7f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d7fa:	f7f6 fc77 	bl	80040ec <HAL_GetTick>
 800d7fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d800:	e008      	b.n	800d814 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d802:	f7f6 fc73 	bl	80040ec <HAL_GetTick>
 800d806:	4602      	mov	r2, r0
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	1ad3      	subs	r3, r2, r3
 800d80c:	2b02      	cmp	r3, #2
 800d80e:	d901      	bls.n	800d814 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d810:	2303      	movs	r3, #3
 800d812:	e086      	b.n	800d922 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d814:	4b45      	ldr	r3, [pc, #276]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d1f0      	bne.n	800d802 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d820:	4b42      	ldr	r3, [pc, #264]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d824:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	031b      	lsls	r3, r3, #12
 800d82e:	493f      	ldr	r1, [pc, #252]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d830:	4313      	orrs	r3, r2
 800d832:	628b      	str	r3, [r1, #40]	; 0x28
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	685b      	ldr	r3, [r3, #4]
 800d838:	3b01      	subs	r3, #1
 800d83a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	689b      	ldr	r3, [r3, #8]
 800d842:	3b01      	subs	r3, #1
 800d844:	025b      	lsls	r3, r3, #9
 800d846:	b29b      	uxth	r3, r3
 800d848:	431a      	orrs	r2, r3
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	68db      	ldr	r3, [r3, #12]
 800d84e:	3b01      	subs	r3, #1
 800d850:	041b      	lsls	r3, r3, #16
 800d852:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d856:	431a      	orrs	r2, r3
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	691b      	ldr	r3, [r3, #16]
 800d85c:	3b01      	subs	r3, #1
 800d85e:	061b      	lsls	r3, r3, #24
 800d860:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d864:	4931      	ldr	r1, [pc, #196]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d866:	4313      	orrs	r3, r2
 800d868:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d86a:	4b30      	ldr	r3, [pc, #192]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d86c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d86e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	695b      	ldr	r3, [r3, #20]
 800d876:	492d      	ldr	r1, [pc, #180]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d878:	4313      	orrs	r3, r2
 800d87a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d87c:	4b2b      	ldr	r3, [pc, #172]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d87e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d880:	f023 0220 	bic.w	r2, r3, #32
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	699b      	ldr	r3, [r3, #24]
 800d888:	4928      	ldr	r1, [pc, #160]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d88a:	4313      	orrs	r3, r2
 800d88c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d88e:	4b27      	ldr	r3, [pc, #156]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d892:	4a26      	ldr	r2, [pc, #152]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d894:	f023 0310 	bic.w	r3, r3, #16
 800d898:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d89a:	4b24      	ldr	r3, [pc, #144]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d89c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d89e:	4b24      	ldr	r3, [pc, #144]	; (800d930 <RCCEx_PLL2_Config+0x160>)
 800d8a0:	4013      	ands	r3, r2
 800d8a2:	687a      	ldr	r2, [r7, #4]
 800d8a4:	69d2      	ldr	r2, [r2, #28]
 800d8a6:	00d2      	lsls	r2, r2, #3
 800d8a8:	4920      	ldr	r1, [pc, #128]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d8aa:	4313      	orrs	r3, r2
 800d8ac:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d8ae:	4b1f      	ldr	r3, [pc, #124]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d8b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8b2:	4a1e      	ldr	r2, [pc, #120]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d8b4:	f043 0310 	orr.w	r3, r3, #16
 800d8b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d106      	bne.n	800d8ce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d8c0:	4b1a      	ldr	r3, [pc, #104]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8c4:	4a19      	ldr	r2, [pc, #100]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d8c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d8ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d8cc:	e00f      	b.n	800d8ee <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	2b01      	cmp	r3, #1
 800d8d2:	d106      	bne.n	800d8e2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d8d4:	4b15      	ldr	r3, [pc, #84]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d8d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8d8:	4a14      	ldr	r2, [pc, #80]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d8da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d8de:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d8e0:	e005      	b.n	800d8ee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d8e2:	4b12      	ldr	r3, [pc, #72]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d8e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8e6:	4a11      	ldr	r2, [pc, #68]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d8e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d8ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d8ee:	4b0f      	ldr	r3, [pc, #60]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	4a0e      	ldr	r2, [pc, #56]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d8f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d8f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d8fa:	f7f6 fbf7 	bl	80040ec <HAL_GetTick>
 800d8fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d900:	e008      	b.n	800d914 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d902:	f7f6 fbf3 	bl	80040ec <HAL_GetTick>
 800d906:	4602      	mov	r2, r0
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	1ad3      	subs	r3, r2, r3
 800d90c:	2b02      	cmp	r3, #2
 800d90e:	d901      	bls.n	800d914 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d910:	2303      	movs	r3, #3
 800d912:	e006      	b.n	800d922 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d914:	4b05      	ldr	r3, [pc, #20]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d0f0      	beq.n	800d902 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d920:	7bfb      	ldrb	r3, [r7, #15]
}
 800d922:	4618      	mov	r0, r3
 800d924:	3710      	adds	r7, #16
 800d926:	46bd      	mov	sp, r7
 800d928:	bd80      	pop	{r7, pc}
 800d92a:	bf00      	nop
 800d92c:	58024400 	.word	0x58024400
 800d930:	ffff0007 	.word	0xffff0007

0800d934 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b084      	sub	sp, #16
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
 800d93c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d93e:	2300      	movs	r3, #0
 800d940:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d942:	4b53      	ldr	r3, [pc, #332]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800d944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d946:	f003 0303 	and.w	r3, r3, #3
 800d94a:	2b03      	cmp	r3, #3
 800d94c:	d101      	bne.n	800d952 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d94e:	2301      	movs	r3, #1
 800d950:	e099      	b.n	800da86 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d952:	4b4f      	ldr	r3, [pc, #316]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	4a4e      	ldr	r2, [pc, #312]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800d958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d95c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d95e:	f7f6 fbc5 	bl	80040ec <HAL_GetTick>
 800d962:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d964:	e008      	b.n	800d978 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800d966:	f7f6 fbc1 	bl	80040ec <HAL_GetTick>
 800d96a:	4602      	mov	r2, r0
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	1ad3      	subs	r3, r2, r3
 800d970:	2b02      	cmp	r3, #2
 800d972:	d901      	bls.n	800d978 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d974:	2303      	movs	r3, #3
 800d976:	e086      	b.n	800da86 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d978:	4b45      	ldr	r3, [pc, #276]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d980:	2b00      	cmp	r3, #0
 800d982:	d1f0      	bne.n	800d966 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d984:	4b42      	ldr	r3, [pc, #264]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800d986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d988:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	051b      	lsls	r3, r3, #20
 800d992:	493f      	ldr	r1, [pc, #252]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800d994:	4313      	orrs	r3, r2
 800d996:	628b      	str	r3, [r1, #40]	; 0x28
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	685b      	ldr	r3, [r3, #4]
 800d99c:	3b01      	subs	r3, #1
 800d99e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	689b      	ldr	r3, [r3, #8]
 800d9a6:	3b01      	subs	r3, #1
 800d9a8:	025b      	lsls	r3, r3, #9
 800d9aa:	b29b      	uxth	r3, r3
 800d9ac:	431a      	orrs	r2, r3
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	68db      	ldr	r3, [r3, #12]
 800d9b2:	3b01      	subs	r3, #1
 800d9b4:	041b      	lsls	r3, r3, #16
 800d9b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d9ba:	431a      	orrs	r2, r3
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	691b      	ldr	r3, [r3, #16]
 800d9c0:	3b01      	subs	r3, #1
 800d9c2:	061b      	lsls	r3, r3, #24
 800d9c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d9c8:	4931      	ldr	r1, [pc, #196]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800d9ca:	4313      	orrs	r3, r2
 800d9cc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d9ce:	4b30      	ldr	r3, [pc, #192]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800d9d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	695b      	ldr	r3, [r3, #20]
 800d9da:	492d      	ldr	r1, [pc, #180]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800d9dc:	4313      	orrs	r3, r2
 800d9de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d9e0:	4b2b      	ldr	r3, [pc, #172]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800d9e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9e4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	699b      	ldr	r3, [r3, #24]
 800d9ec:	4928      	ldr	r1, [pc, #160]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800d9ee:	4313      	orrs	r3, r2
 800d9f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d9f2:	4b27      	ldr	r3, [pc, #156]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800d9f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9f6:	4a26      	ldr	r2, [pc, #152]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800d9f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d9fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d9fe:	4b24      	ldr	r3, [pc, #144]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800da00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800da02:	4b24      	ldr	r3, [pc, #144]	; (800da94 <RCCEx_PLL3_Config+0x160>)
 800da04:	4013      	ands	r3, r2
 800da06:	687a      	ldr	r2, [r7, #4]
 800da08:	69d2      	ldr	r2, [r2, #28]
 800da0a:	00d2      	lsls	r2, r2, #3
 800da0c:	4920      	ldr	r1, [pc, #128]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800da0e:	4313      	orrs	r3, r2
 800da10:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800da12:	4b1f      	ldr	r3, [pc, #124]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800da14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da16:	4a1e      	ldr	r2, [pc, #120]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800da18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d106      	bne.n	800da32 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800da24:	4b1a      	ldr	r3, [pc, #104]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800da26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da28:	4a19      	ldr	r2, [pc, #100]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800da2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800da2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800da30:	e00f      	b.n	800da52 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	2b01      	cmp	r3, #1
 800da36:	d106      	bne.n	800da46 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800da38:	4b15      	ldr	r3, [pc, #84]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800da3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da3c:	4a14      	ldr	r2, [pc, #80]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800da3e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800da42:	62d3      	str	r3, [r2, #44]	; 0x2c
 800da44:	e005      	b.n	800da52 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800da46:	4b12      	ldr	r3, [pc, #72]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800da48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da4a:	4a11      	ldr	r2, [pc, #68]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800da4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800da50:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800da52:	4b0f      	ldr	r3, [pc, #60]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	4a0e      	ldr	r2, [pc, #56]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800da58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800da5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800da5e:	f7f6 fb45 	bl	80040ec <HAL_GetTick>
 800da62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800da64:	e008      	b.n	800da78 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800da66:	f7f6 fb41 	bl	80040ec <HAL_GetTick>
 800da6a:	4602      	mov	r2, r0
 800da6c:	68bb      	ldr	r3, [r7, #8]
 800da6e:	1ad3      	subs	r3, r2, r3
 800da70:	2b02      	cmp	r3, #2
 800da72:	d901      	bls.n	800da78 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800da74:	2303      	movs	r3, #3
 800da76:	e006      	b.n	800da86 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800da78:	4b05      	ldr	r3, [pc, #20]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800da80:	2b00      	cmp	r3, #0
 800da82:	d0f0      	beq.n	800da66 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800da84:	7bfb      	ldrb	r3, [r7, #15]
}
 800da86:	4618      	mov	r0, r3
 800da88:	3710      	adds	r7, #16
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bd80      	pop	{r7, pc}
 800da8e:	bf00      	nop
 800da90:	58024400 	.word	0x58024400
 800da94:	ffff0007 	.word	0xffff0007

0800da98 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b084      	sub	sp, #16
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d101      	bne.n	800daaa <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800daa6:	2301      	movs	r3, #1
 800daa8:	e04d      	b.n	800db46 <HAL_RNG_Init+0xae>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	7a5b      	ldrb	r3, [r3, #9]
 800daae:	b2db      	uxtb	r3, r3
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d105      	bne.n	800dac0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2200      	movs	r2, #0
 800dab8:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800daba:	6878      	ldr	r0, [r7, #4]
 800dabc:	f7f5 f856 	bl	8002b6c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2202      	movs	r2, #2
 800dac4:	725a      	strb	r2, [r3, #9]
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	f023 0120 	bic.w	r1, r3, #32
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	685a      	ldr	r2, [r3, #4]
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	430a      	orrs	r2, r1
 800dada:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	681a      	ldr	r2, [r3, #0]
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	f042 0204 	orr.w	r2, r2, #4
 800daea:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	685b      	ldr	r3, [r3, #4]
 800daf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800daf6:	2b40      	cmp	r3, #64	; 0x40
 800daf8:	d104      	bne.n	800db04 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	2204      	movs	r2, #4
 800dafe:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800db00:	2301      	movs	r3, #1
 800db02:	e020      	b.n	800db46 <HAL_RNG_Init+0xae>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800db04:	f7f6 faf2 	bl	80040ec <HAL_GetTick>
 800db08:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800db0a:	e00e      	b.n	800db2a <HAL_RNG_Init+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800db0c:	f7f6 faee 	bl	80040ec <HAL_GetTick>
 800db10:	4602      	mov	r2, r0
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	1ad3      	subs	r3, r2, r3
 800db16:	2b02      	cmp	r3, #2
 800db18:	d907      	bls.n	800db2a <HAL_RNG_Init+0x92>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2204      	movs	r2, #4
 800db1e:	725a      	strb	r2, [r3, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2202      	movs	r2, #2
 800db24:	60da      	str	r2, [r3, #12]
      return HAL_ERROR;
 800db26:	2301      	movs	r3, #1
 800db28:	e00d      	b.n	800db46 <HAL_RNG_Init+0xae>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	685b      	ldr	r3, [r3, #4]
 800db30:	f003 0304 	and.w	r3, r3, #4
 800db34:	2b04      	cmp	r3, #4
 800db36:	d0e9      	beq.n	800db0c <HAL_RNG_Init+0x74>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2201      	movs	r2, #1
 800db3c:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	2200      	movs	r2, #0
 800db42:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800db44:	2300      	movs	r3, #0
}
 800db46:	4618      	mov	r0, r3
 800db48:	3710      	adds	r7, #16
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}

0800db4e <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800db4e:	b580      	push	{r7, lr}
 800db50:	b084      	sub	sp, #16
 800db52:	af00      	add	r7, sp, #0
 800db54:	6078      	str	r0, [r7, #4]
 800db56:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800db58:	2300      	movs	r3, #0
 800db5a:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	7a1b      	ldrb	r3, [r3, #8]
 800db60:	2b01      	cmp	r3, #1
 800db62:	d101      	bne.n	800db68 <HAL_RNG_GenerateRandomNumber+0x1a>
 800db64:	2302      	movs	r3, #2
 800db66:	e03d      	b.n	800dbe4 <HAL_RNG_GenerateRandomNumber+0x96>
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2201      	movs	r2, #1
 800db6c:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	7a5b      	ldrb	r3, [r3, #9]
 800db72:	b2db      	uxtb	r3, r3
 800db74:	2b01      	cmp	r3, #1
 800db76:	d12c      	bne.n	800dbd2 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2202      	movs	r2, #2
 800db7c:	725a      	strb	r2, [r3, #9]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 800db7e:	f7f6 fab5 	bl	80040ec <HAL_GetTick>
 800db82:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800db84:	e011      	b.n	800dbaa <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800db86:	f7f6 fab1 	bl	80040ec <HAL_GetTick>
 800db8a:	4602      	mov	r2, r0
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	1ad3      	subs	r3, r2, r3
 800db90:	2b02      	cmp	r3, #2
 800db92:	d90a      	bls.n	800dbaa <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2201      	movs	r2, #1
 800db98:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2202      	movs	r2, #2
 800db9e:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	2200      	movs	r2, #0
 800dba4:	721a      	strb	r2, [r3, #8]
        return HAL_ERROR;
 800dba6:	2301      	movs	r3, #1
 800dba8:	e01c      	b.n	800dbe4 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	685b      	ldr	r3, [r3, #4]
 800dbb0:	f003 0301 	and.w	r3, r3, #1
 800dbb4:	2b01      	cmp	r3, #1
 800dbb6:	d1e6      	bne.n	800db86 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	689a      	ldr	r2, [r3, #8]
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	611a      	str	r2, [r3, #16]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	691a      	ldr	r2, [r3, #16]
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2201      	movs	r2, #1
 800dbce:	725a      	strb	r2, [r3, #9]
 800dbd0:	e004      	b.n	800dbdc <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	2204      	movs	r2, #4
 800dbd6:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800dbd8:	2301      	movs	r3, #1
 800dbda:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	2200      	movs	r2, #0
 800dbe0:	721a      	strb	r2, [r3, #8]

  return status;
 800dbe2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	3710      	adds	r7, #16
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bd80      	pop	{r7, pc}

0800dbec <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b086      	sub	sp, #24
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	60f8      	str	r0, [r7, #12]
 800dbf4:	60b9      	str	r1, [r7, #8]
 800dbf6:	607a      	str	r2, [r7, #4]
 800dbf8:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800dbfa:	68bb      	ldr	r3, [r7, #8]
 800dbfc:	2b02      	cmp	r3, #2
 800dbfe:	d904      	bls.n	800dc0a <HAL_SAI_InitProtocol+0x1e>
 800dc00:	68bb      	ldr	r3, [r7, #8]
 800dc02:	3b03      	subs	r3, #3
 800dc04:	2b01      	cmp	r3, #1
 800dc06:	d812      	bhi.n	800dc2e <HAL_SAI_InitProtocol+0x42>
 800dc08:	e008      	b.n	800dc1c <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	687a      	ldr	r2, [r7, #4]
 800dc0e:	68b9      	ldr	r1, [r7, #8]
 800dc10:	68f8      	ldr	r0, [r7, #12]
 800dc12:	f000 fb7d 	bl	800e310 <SAI_InitI2S>
 800dc16:	4603      	mov	r3, r0
 800dc18:	75fb      	strb	r3, [r7, #23]
      break;
 800dc1a:	e00b      	b.n	800dc34 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	687a      	ldr	r2, [r7, #4]
 800dc20:	68b9      	ldr	r1, [r7, #8]
 800dc22:	68f8      	ldr	r0, [r7, #12]
 800dc24:	f000 fc26 	bl	800e474 <SAI_InitPCM>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	75fb      	strb	r3, [r7, #23]
      break;
 800dc2c:	e002      	b.n	800dc34 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800dc2e:	2301      	movs	r3, #1
 800dc30:	75fb      	strb	r3, [r7, #23]
      break;
 800dc32:	bf00      	nop
  }

  if (status == HAL_OK)
 800dc34:	7dfb      	ldrb	r3, [r7, #23]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d104      	bne.n	800dc44 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800dc3a:	68f8      	ldr	r0, [r7, #12]
 800dc3c:	f000 f808 	bl	800dc50 <HAL_SAI_Init>
 800dc40:	4603      	mov	r3, r0
 800dc42:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800dc44:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc46:	4618      	mov	r0, r3
 800dc48:	3718      	adds	r7, #24
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd80      	pop	{r7, pc}
	...

0800dc50 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b08a      	sub	sp, #40	; 0x28
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d101      	bne.n	800dc62 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800dc5e:	2301      	movs	r3, #1
 800dc60:	e283      	b.n	800e16a <HAL_SAI_Init+0x51a>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800dc62:	f7f6 fa73 	bl	800414c <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800dc6c:	2b01      	cmp	r3, #1
 800dc6e:	d113      	bne.n	800dc98 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	4a94      	ldr	r2, [pc, #592]	; (800dec8 <HAL_SAI_Init+0x278>)
 800dc76:	4293      	cmp	r3, r2
 800dc78:	d004      	beq.n	800dc84 <HAL_SAI_Init+0x34>
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	4a93      	ldr	r2, [pc, #588]	; (800decc <HAL_SAI_Init+0x27c>)
 800dc80:	4293      	cmp	r3, r2
 800dc82:	d107      	bne.n	800dc94 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800dc88:	2b01      	cmp	r3, #1
 800dc8a:	d103      	bne.n	800dc94 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d001      	beq.n	800dc98 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800dc94:	2301      	movs	r3, #1
 800dc96:	e268      	b.n	800e16a <HAL_SAI_Init+0x51a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	4a8a      	ldr	r2, [pc, #552]	; (800dec8 <HAL_SAI_Init+0x278>)
 800dc9e:	4293      	cmp	r3, r2
 800dca0:	d004      	beq.n	800dcac <HAL_SAI_Init+0x5c>
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	4a8a      	ldr	r2, [pc, #552]	; (800ded0 <HAL_SAI_Init+0x280>)
 800dca8:	4293      	cmp	r3, r2
 800dcaa:	d102      	bne.n	800dcb2 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800dcac:	4b89      	ldr	r3, [pc, #548]	; (800ded4 <HAL_SAI_Init+0x284>)
 800dcae:	61bb      	str	r3, [r7, #24]
 800dcb0:	e028      	b.n	800dd04 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	4a88      	ldr	r2, [pc, #544]	; (800ded8 <HAL_SAI_Init+0x288>)
 800dcb8:	4293      	cmp	r3, r2
 800dcba:	d004      	beq.n	800dcc6 <HAL_SAI_Init+0x76>
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	4a86      	ldr	r2, [pc, #536]	; (800dedc <HAL_SAI_Init+0x28c>)
 800dcc2:	4293      	cmp	r3, r2
 800dcc4:	d102      	bne.n	800dccc <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800dcc6:	4b86      	ldr	r3, [pc, #536]	; (800dee0 <HAL_SAI_Init+0x290>)
 800dcc8:	61bb      	str	r3, [r7, #24]
 800dcca:	e01b      	b.n	800dd04 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	4a84      	ldr	r2, [pc, #528]	; (800dee4 <HAL_SAI_Init+0x294>)
 800dcd2:	4293      	cmp	r3, r2
 800dcd4:	d004      	beq.n	800dce0 <HAL_SAI_Init+0x90>
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	4a83      	ldr	r2, [pc, #524]	; (800dee8 <HAL_SAI_Init+0x298>)
 800dcdc:	4293      	cmp	r3, r2
 800dcde:	d102      	bne.n	800dce6 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800dce0:	4b82      	ldr	r3, [pc, #520]	; (800deec <HAL_SAI_Init+0x29c>)
 800dce2:	61bb      	str	r3, [r7, #24]
 800dce4:	e00e      	b.n	800dd04 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	4a78      	ldr	r2, [pc, #480]	; (800decc <HAL_SAI_Init+0x27c>)
 800dcec:	4293      	cmp	r3, r2
 800dcee:	d004      	beq.n	800dcfa <HAL_SAI_Init+0xaa>
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	4a7e      	ldr	r2, [pc, #504]	; (800def0 <HAL_SAI_Init+0x2a0>)
 800dcf6:	4293      	cmp	r3, r2
 800dcf8:	d102      	bne.n	800dd00 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800dcfa:	4b7e      	ldr	r3, [pc, #504]	; (800def4 <HAL_SAI_Init+0x2a4>)
 800dcfc:	61bb      	str	r3, [r7, #24]
 800dcfe:	e001      	b.n	800dd04 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800dd00:	2301      	movs	r3, #1
 800dd02:	e232      	b.n	800e16a <HAL_SAI_Init+0x51a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800dd0a:	b2db      	uxtb	r3, r3
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d106      	bne.n	800dd1e <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	2200      	movs	r2, #0
 800dd14:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f7f4 ff95 	bl	8002c48 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f000 fc62 	bl	800e5e8 <SAI_Disable>
 800dd24:	4603      	mov	r3, r0
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d001      	beq.n	800dd2e <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	e21d      	b.n	800e16a <HAL_SAI_Init+0x51a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	2202      	movs	r2, #2
 800dd32:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	68db      	ldr	r3, [r3, #12]
 800dd3a:	2b02      	cmp	r3, #2
 800dd3c:	d00c      	beq.n	800dd58 <HAL_SAI_Init+0x108>
 800dd3e:	2b02      	cmp	r3, #2
 800dd40:	d80d      	bhi.n	800dd5e <HAL_SAI_Init+0x10e>
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d002      	beq.n	800dd4c <HAL_SAI_Init+0xfc>
 800dd46:	2b01      	cmp	r3, #1
 800dd48:	d003      	beq.n	800dd52 <HAL_SAI_Init+0x102>
 800dd4a:	e008      	b.n	800dd5e <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800dd50:	e008      	b.n	800dd64 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800dd52:	2310      	movs	r3, #16
 800dd54:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800dd56:	e005      	b.n	800dd64 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800dd58:	2320      	movs	r3, #32
 800dd5a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800dd5c:	e002      	b.n	800dd64 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800dd62:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	689b      	ldr	r3, [r3, #8]
 800dd68:	2b05      	cmp	r3, #5
 800dd6a:	d832      	bhi.n	800ddd2 <HAL_SAI_Init+0x182>
 800dd6c:	a201      	add	r2, pc, #4	; (adr r2, 800dd74 <HAL_SAI_Init+0x124>)
 800dd6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd72:	bf00      	nop
 800dd74:	0800dd8d 	.word	0x0800dd8d
 800dd78:	0800dd93 	.word	0x0800dd93
 800dd7c:	0800dd9b 	.word	0x0800dd9b
 800dd80:	0800dda3 	.word	0x0800dda3
 800dd84:	0800ddb3 	.word	0x0800ddb3
 800dd88:	0800ddc3 	.word	0x0800ddc3
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	61fb      	str	r3, [r7, #28]
      break;
 800dd90:	e022      	b.n	800ddd8 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800dd92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd96:	61fb      	str	r3, [r7, #28]
      break;
 800dd98:	e01e      	b.n	800ddd8 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800dd9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dd9e:	61fb      	str	r3, [r7, #28]
      break;
 800dda0:	e01a      	b.n	800ddd8 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800dda2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dda6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800dda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddaa:	f043 0301 	orr.w	r3, r3, #1
 800ddae:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800ddb0:	e012      	b.n	800ddd8 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ddb2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ddb6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800ddb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddba:	f043 0302 	orr.w	r3, r3, #2
 800ddbe:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800ddc0:	e00a      	b.n	800ddd8 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ddc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ddc6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800ddc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddca:	f043 0303 	orr.w	r3, r3, #3
 800ddce:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800ddd0:	e002      	b.n	800ddd8 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	61fb      	str	r3, [r7, #28]
      break;
 800ddd6:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800ddd8:	69bb      	ldr	r3, [r7, #24]
 800ddda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dddc:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6a1b      	ldr	r3, [r3, #32]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	f000 80ba 	beq.w	800df5c <HAL_SAI_Init+0x30c>
  {
    uint32_t freq = 0;
 800dde8:	2300      	movs	r3, #0
 800ddea:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	4a35      	ldr	r2, [pc, #212]	; (800dec8 <HAL_SAI_Init+0x278>)
 800ddf2:	4293      	cmp	r3, r2
 800ddf4:	d004      	beq.n	800de00 <HAL_SAI_Init+0x1b0>
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	4a35      	ldr	r2, [pc, #212]	; (800ded0 <HAL_SAI_Init+0x280>)
 800ddfc:	4293      	cmp	r3, r2
 800ddfe:	d104      	bne.n	800de0a <HAL_SAI_Init+0x1ba>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800de00:	f44f 7080 	mov.w	r0, #256	; 0x100
 800de04:	f7fe fc02 	bl	800c60c <HAL_RCCEx_GetPeriphCLKFreq>
 800de08:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	4a32      	ldr	r2, [pc, #200]	; (800ded8 <HAL_SAI_Init+0x288>)
 800de10:	4293      	cmp	r3, r2
 800de12:	d004      	beq.n	800de1e <HAL_SAI_Init+0x1ce>
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	4a30      	ldr	r2, [pc, #192]	; (800dedc <HAL_SAI_Init+0x28c>)
 800de1a:	4293      	cmp	r3, r2
 800de1c:	d104      	bne.n	800de28 <HAL_SAI_Init+0x1d8>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800de1e:	f44f 7000 	mov.w	r0, #512	; 0x200
 800de22:	f7fe fbf3 	bl	800c60c <HAL_RCCEx_GetPeriphCLKFreq>
 800de26:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	4a2d      	ldr	r2, [pc, #180]	; (800dee4 <HAL_SAI_Init+0x294>)
 800de2e:	4293      	cmp	r3, r2
 800de30:	d004      	beq.n	800de3c <HAL_SAI_Init+0x1ec>
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	4a2c      	ldr	r2, [pc, #176]	; (800dee8 <HAL_SAI_Init+0x298>)
 800de38:	4293      	cmp	r3, r2
 800de3a:	d104      	bne.n	800de46 <HAL_SAI_Init+0x1f6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800de3c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800de40:	f7fe fbe4 	bl	800c60c <HAL_RCCEx_GetPeriphCLKFreq>
 800de44:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	4a20      	ldr	r2, [pc, #128]	; (800decc <HAL_SAI_Init+0x27c>)
 800de4c:	4293      	cmp	r3, r2
 800de4e:	d104      	bne.n	800de5a <HAL_SAI_Init+0x20a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800de50:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800de54:	f7fe fbda 	bl	800c60c <HAL_RCCEx_GetPeriphCLKFreq>
 800de58:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	4a24      	ldr	r2, [pc, #144]	; (800def0 <HAL_SAI_Init+0x2a0>)
 800de60:	4293      	cmp	r3, r2
 800de62:	d104      	bne.n	800de6e <HAL_SAI_Init+0x21e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800de64:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800de68:	f7fe fbd0 	bl	800c60c <HAL_RCCEx_GetPeriphCLKFreq>
 800de6c:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	699b      	ldr	r3, [r3, #24]
 800de72:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800de76:	d120      	bne.n	800deba <HAL_SAI_Init+0x26a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de7c:	2b04      	cmp	r3, #4
 800de7e:	d102      	bne.n	800de86 <HAL_SAI_Init+0x236>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 800de80:	2340      	movs	r3, #64	; 0x40
 800de82:	60fb      	str	r3, [r7, #12]
 800de84:	e00a      	b.n	800de9c <HAL_SAI_Init+0x24c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de8a:	2b08      	cmp	r3, #8
 800de8c:	d103      	bne.n	800de96 <HAL_SAI_Init+0x246>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 800de8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800de92:	60fb      	str	r3, [r7, #12]
 800de94:	e002      	b.n	800de9c <HAL_SAI_Init+0x24c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de9a:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800de9c:	697a      	ldr	r2, [r7, #20]
 800de9e:	4613      	mov	r3, r2
 800dea0:	009b      	lsls	r3, r3, #2
 800dea2:	4413      	add	r3, r2
 800dea4:	005b      	lsls	r3, r3, #1
 800dea6:	4619      	mov	r1, r3
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	6a1b      	ldr	r3, [r3, #32]
 800deac:	68fa      	ldr	r2, [r7, #12]
 800deae:	fb02 f303 	mul.w	r3, r2, r3
 800deb2:	fbb1 f3f3 	udiv	r3, r1, r3
 800deb6:	613b      	str	r3, [r7, #16]
 800deb8:	e02f      	b.n	800df1a <HAL_SAI_Init+0x2ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800debe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800dec2:	d119      	bne.n	800def8 <HAL_SAI_Init+0x2a8>
 800dec4:	2302      	movs	r3, #2
 800dec6:	e018      	b.n	800defa <HAL_SAI_Init+0x2aa>
 800dec8:	40015804 	.word	0x40015804
 800decc:	58005404 	.word	0x58005404
 800ded0:	40015824 	.word	0x40015824
 800ded4:	40015800 	.word	0x40015800
 800ded8:	40015c04 	.word	0x40015c04
 800dedc:	40015c24 	.word	0x40015c24
 800dee0:	40015c00 	.word	0x40015c00
 800dee4:	40016004 	.word	0x40016004
 800dee8:	40016024 	.word	0x40016024
 800deec:	40016000 	.word	0x40016000
 800def0:	58005424 	.word	0x58005424
 800def4:	58005400 	.word	0x58005400
 800def8:	2301      	movs	r3, #1
 800defa:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800defc:	697a      	ldr	r2, [r7, #20]
 800defe:	4613      	mov	r3, r2
 800df00:	009b      	lsls	r3, r3, #2
 800df02:	4413      	add	r3, r2
 800df04:	005b      	lsls	r3, r3, #1
 800df06:	4619      	mov	r1, r3
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	6a1b      	ldr	r3, [r3, #32]
 800df0c:	68ba      	ldr	r2, [r7, #8]
 800df0e:	fb02 f303 	mul.w	r3, r2, r3
 800df12:	021b      	lsls	r3, r3, #8
 800df14:	fbb1 f3f3 	udiv	r3, r1, r3
 800df18:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800df1a:	693b      	ldr	r3, [r7, #16]
 800df1c:	4a95      	ldr	r2, [pc, #596]	; (800e174 <HAL_SAI_Init+0x524>)
 800df1e:	fba2 2303 	umull	r2, r3, r2, r3
 800df22:	08da      	lsrs	r2, r3, #3
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800df28:	6939      	ldr	r1, [r7, #16]
 800df2a:	4b92      	ldr	r3, [pc, #584]	; (800e174 <HAL_SAI_Init+0x524>)
 800df2c:	fba3 2301 	umull	r2, r3, r3, r1
 800df30:	08da      	lsrs	r2, r3, #3
 800df32:	4613      	mov	r3, r2
 800df34:	009b      	lsls	r3, r3, #2
 800df36:	4413      	add	r3, r2
 800df38:	005b      	lsls	r3, r3, #1
 800df3a:	1aca      	subs	r2, r1, r3
 800df3c:	2a08      	cmp	r2, #8
 800df3e:	d904      	bls.n	800df4a <HAL_SAI_Init+0x2fa>
    {
      hsai->Init.Mckdiv += 1U;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df44:	1c5a      	adds	r2, r3, #1
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df4e:	2b04      	cmp	r3, #4
 800df50:	d104      	bne.n	800df5c <HAL_SAI_Init+0x30c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df56:	085a      	lsrs	r2, r3, #1
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	685b      	ldr	r3, [r3, #4]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d003      	beq.n	800df6c <HAL_SAI_Init+0x31c>
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	685b      	ldr	r3, [r3, #4]
 800df68:	2b02      	cmp	r3, #2
 800df6a:	d109      	bne.n	800df80 <HAL_SAI_Init+0x330>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df70:	2b01      	cmp	r3, #1
 800df72:	d101      	bne.n	800df78 <HAL_SAI_Init+0x328>
 800df74:	2300      	movs	r3, #0
 800df76:	e001      	b.n	800df7c <HAL_SAI_Init+0x32c>
 800df78:	f44f 7300 	mov.w	r3, #512	; 0x200
 800df7c:	623b      	str	r3, [r7, #32]
 800df7e:	e008      	b.n	800df92 <HAL_SAI_Init+0x342>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df84:	2b01      	cmp	r3, #1
 800df86:	d102      	bne.n	800df8e <HAL_SAI_Init+0x33e>
 800df88:	f44f 7300 	mov.w	r3, #512	; 0x200
 800df8c:	e000      	b.n	800df90 <HAL_SAI_Init+0x340>
 800df8e:	2300      	movs	r3, #0
 800df90:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800df92:	f7f6 f8db 	bl	800414c <HAL_GetREVID>
 800df96:	4603      	mov	r3, r0
 800df98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800df9c:	d331      	bcc.n	800e002 <HAL_SAI_Init+0x3b2>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	6819      	ldr	r1, [r3, #0]
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681a      	ldr	r2, [r3, #0]
 800dfa8:	4b73      	ldr	r3, [pc, #460]	; (800e178 <HAL_SAI_Init+0x528>)
 800dfaa:	400b      	ands	r3, r1
 800dfac:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	6819      	ldr	r1, [r3, #0]
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	685a      	ldr	r2, [r3, #4]
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfbc:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800dfc2:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dfc8:	431a      	orrs	r2, r3
 800dfca:	6a3b      	ldr	r3, [r7, #32]
 800dfcc:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800dfce:	69fb      	ldr	r3, [r7, #28]
 800dfd0:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800dfd6:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	695b      	ldr	r3, [r3, #20]
 800dfdc:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800dfe2:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfe8:	051b      	lsls	r3, r3, #20
 800dfea:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800dff0:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	691b      	ldr	r3, [r3, #16]
 800dff6:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	430a      	orrs	r2, r1
 800dffe:	601a      	str	r2, [r3, #0]
 800e000:	e02d      	b.n	800e05e <HAL_SAI_Init+0x40e>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	6819      	ldr	r1, [r3, #0]
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681a      	ldr	r2, [r3, #0]
 800e00c:	4b5b      	ldr	r3, [pc, #364]	; (800e17c <HAL_SAI_Init+0x52c>)
 800e00e:	400b      	ands	r3, r1
 800e010:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	6819      	ldr	r1, [r3, #0]
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	685a      	ldr	r2, [r3, #4]
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e020:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e026:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e02c:	431a      	orrs	r2, r3
 800e02e:	6a3b      	ldr	r3, [r7, #32]
 800e030:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800e032:	69fb      	ldr	r3, [r7, #28]
 800e034:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800e03a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	695b      	ldr	r3, [r3, #20]
 800e040:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e046:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e04c:	051b      	lsls	r3, r3, #20
 800e04e:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e054:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	430a      	orrs	r2, r1
 800e05c:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	6859      	ldr	r1, [r3, #4]
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681a      	ldr	r2, [r3, #0]
 800e068:	4b45      	ldr	r3, [pc, #276]	; (800e180 <HAL_SAI_Init+0x530>)
 800e06a:	400b      	ands	r3, r1
 800e06c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	6859      	ldr	r1, [r3, #4]
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	69da      	ldr	r2, [r3, #28]
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e07c:	431a      	orrs	r2, r3
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e082:	431a      	orrs	r2, r3
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	430a      	orrs	r2, r1
 800e08a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	6899      	ldr	r1, [r3, #8]
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681a      	ldr	r2, [r3, #0]
 800e096:	4b3b      	ldr	r3, [pc, #236]	; (800e184 <HAL_SAI_Init+0x534>)
 800e098:	400b      	ands	r3, r1
 800e09a:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	6899      	ldr	r1, [r3, #8]
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0a6:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e0ac:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800e0b2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800e0b8:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e0be:	3b01      	subs	r3, #1
 800e0c0:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800e0c2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	430a      	orrs	r2, r1
 800e0ca:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	68d9      	ldr	r1, [r3, #12]
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	681a      	ldr	r2, [r3, #0]
 800e0d6:	f24f 0320 	movw	r3, #61472	; 0xf020
 800e0da:	400b      	ands	r3, r1
 800e0dc:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	68d9      	ldr	r1, [r3, #12]
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0ec:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0f2:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e0f4:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0fa:	3b01      	subs	r3, #1
 800e0fc:	021b      	lsls	r3, r3, #8
 800e0fe:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	430a      	orrs	r2, r1
 800e106:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	4a1e      	ldr	r2, [pc, #120]	; (800e188 <HAL_SAI_Init+0x538>)
 800e10e:	4293      	cmp	r3, r2
 800e110:	d004      	beq.n	800e11c <HAL_SAI_Init+0x4cc>
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	4a1d      	ldr	r2, [pc, #116]	; (800e18c <HAL_SAI_Init+0x53c>)
 800e118:	4293      	cmp	r3, r2
 800e11a:	d119      	bne.n	800e150 <HAL_SAI_Init+0x500>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800e11c:	69bb      	ldr	r3, [r7, #24]
 800e11e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e120:	f023 0201 	bic.w	r2, r3, #1
 800e124:	69bb      	ldr	r3, [r7, #24]
 800e126:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e12e:	2b01      	cmp	r3, #1
 800e130:	d10e      	bne.n	800e150 <HAL_SAI_Init+0x500>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e13a:	3b01      	subs	r3, #1
 800e13c:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800e13e:	431a      	orrs	r2, r3
 800e140:	69bb      	ldr	r3, [r7, #24]
 800e142:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800e144:	69bb      	ldr	r3, [r7, #24]
 800e146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e148:	f043 0201 	orr.w	r2, r3, #1
 800e14c:	69bb      	ldr	r3, [r7, #24]
 800e14e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2200      	movs	r2, #0
 800e154:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2201      	movs	r2, #1
 800e15c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2200      	movs	r2, #0
 800e164:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800e168:	2300      	movs	r3, #0
}
 800e16a:	4618      	mov	r0, r3
 800e16c:	3728      	adds	r7, #40	; 0x28
 800e16e:	46bd      	mov	sp, r7
 800e170:	bd80      	pop	{r7, pc}
 800e172:	bf00      	nop
 800e174:	cccccccd 	.word	0xcccccccd
 800e178:	f005c010 	.word	0xf005c010
 800e17c:	f805c010 	.word	0xf805c010
 800e180:	ffff1ff0 	.word	0xffff1ff0
 800e184:	fff88000 	.word	0xfff88000
 800e188:	40015804 	.word	0x40015804
 800e18c:	58005404 	.word	0x58005404

0800e190 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b086      	sub	sp, #24
 800e194:	af00      	add	r7, sp, #0
 800e196:	60f8      	str	r0, [r7, #12]
 800e198:	60b9      	str	r1, [r7, #8]
 800e19a:	4613      	mov	r3, r2
 800e19c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800e19e:	f7f5 ffa5 	bl	80040ec <HAL_GetTick>
 800e1a2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800e1a4:	68bb      	ldr	r3, [r7, #8]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d002      	beq.n	800e1b0 <HAL_SAI_Transmit_DMA+0x20>
 800e1aa:	88fb      	ldrh	r3, [r7, #6]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d101      	bne.n	800e1b4 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800e1b0:	2301      	movs	r3, #1
 800e1b2:	e098      	b.n	800e2e6 <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800e1ba:	b2db      	uxtb	r3, r3
 800e1bc:	2b01      	cmp	r3, #1
 800e1be:	f040 8091 	bne.w	800e2e4 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800e1c8:	2b01      	cmp	r3, #1
 800e1ca:	d101      	bne.n	800e1d0 <HAL_SAI_Transmit_DMA+0x40>
 800e1cc:	2302      	movs	r3, #2
 800e1ce:	e08a      	b.n	800e2e6 <HAL_SAI_Transmit_DMA+0x156>
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	2201      	movs	r2, #1
 800e1d4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	68ba      	ldr	r2, [r7, #8]
 800e1dc:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	88fa      	ldrh	r2, [r7, #6]
 800e1e2:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	88fa      	ldrh	r2, [r7, #6]
 800e1ea:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	2212      	movs	r2, #18
 800e1fa:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e204:	4a3a      	ldr	r2, [pc, #232]	; (800e2f0 <HAL_SAI_Transmit_DMA+0x160>)
 800e206:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e20e:	4a39      	ldr	r2, [pc, #228]	; (800e2f4 <HAL_SAI_Transmit_DMA+0x164>)
 800e210:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e218:	4a37      	ldr	r2, [pc, #220]	; (800e2f8 <HAL_SAI_Transmit_DMA+0x168>)
 800e21a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e222:	2200      	movs	r2, #0
 800e224:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e230:	4619      	mov	r1, r3
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	331c      	adds	r3, #28
 800e238:	461a      	mov	r2, r3
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800e240:	f7f8 f9a4 	bl	800658c <HAL_DMA_Start_IT>
 800e244:	4603      	mov	r3, r0
 800e246:	2b00      	cmp	r3, #0
 800e248:	d005      	beq.n	800e256 <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	2200      	movs	r2, #0
 800e24e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800e252:	2301      	movs	r3, #1
 800e254:	e047      	b.n	800e2e6 <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e256:	2100      	movs	r1, #0
 800e258:	68f8      	ldr	r0, [r7, #12]
 800e25a:	f000 f98d 	bl	800e578 <SAI_InterruptFlag>
 800e25e:	4601      	mov	r1, r0
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	691a      	ldr	r2, [r3, #16]
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	430a      	orrs	r2, r1
 800e26c:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	681a      	ldr	r2, [r3, #0]
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800e27c:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800e27e:	e015      	b.n	800e2ac <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800e280:	f7f5 ff34 	bl	80040ec <HAL_GetTick>
 800e284:	4602      	mov	r2, r0
 800e286:	697b      	ldr	r3, [r7, #20]
 800e288:	1ad3      	subs	r3, r2, r3
 800e28a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e28e:	d90d      	bls.n	800e2ac <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e296:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 800e2a8:	2303      	movs	r3, #3
 800e2aa:	e01c      	b.n	800e2e6 <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	695b      	ldr	r3, [r3, #20]
 800e2b2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d0e2      	beq.n	800e280 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d107      	bne.n	800e2d8 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	681a      	ldr	r2, [r3, #0]
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800e2d6:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	2200      	movs	r2, #0
 800e2dc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	e000      	b.n	800e2e6 <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 800e2e4:	2302      	movs	r3, #2
  }
}
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	3718      	adds	r7, #24
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd80      	pop	{r7, pc}
 800e2ee:	bf00      	nop
 800e2f0:	0800e6bd 	.word	0x0800e6bd
 800e2f4:	0800e65d 	.word	0x0800e65d
 800e2f8:	0800e6d9 	.word	0x0800e6d9

0800e2fc <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800e2fc:	b480      	push	{r7}
 800e2fe:	b083      	sub	sp, #12
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800e304:	bf00      	nop
 800e306:	370c      	adds	r7, #12
 800e308:	46bd      	mov	sp, r7
 800e30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30e:	4770      	bx	lr

0800e310 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e310:	b480      	push	{r7}
 800e312:	b087      	sub	sp, #28
 800e314:	af00      	add	r7, sp, #0
 800e316:	60f8      	str	r0, [r7, #12]
 800e318:	60b9      	str	r1, [r7, #8]
 800e31a:	607a      	str	r2, [r7, #4]
 800e31c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e31e:	2300      	movs	r3, #0
 800e320:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	2200      	movs	r2, #0
 800e326:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	2200      	movs	r2, #0
 800e32c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	685b      	ldr	r3, [r3, #4]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d003      	beq.n	800e33e <SAI_InitI2S+0x2e>
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	685b      	ldr	r3, [r3, #4]
 800e33a:	2b02      	cmp	r3, #2
 800e33c:	d103      	bne.n	800e346 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	2200      	movs	r2, #0
 800e342:	651a      	str	r2, [r3, #80]	; 0x50
 800e344:	e002      	b.n	800e34c <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	2201      	movs	r2, #1
 800e34a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800e352:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e35a:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	2200      	movs	r2, #0
 800e360:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	683a      	ldr	r2, [r7, #0]
 800e366:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800e368:	683b      	ldr	r3, [r7, #0]
 800e36a:	f003 0301 	and.w	r3, r3, #1
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d001      	beq.n	800e376 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800e372:	2301      	movs	r3, #1
 800e374:	e077      	b.n	800e466 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800e376:	68bb      	ldr	r3, [r7, #8]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d107      	bne.n	800e38c <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	2200      	movs	r2, #0
 800e380:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800e388:	665a      	str	r2, [r3, #100]	; 0x64
 800e38a:	e006      	b.n	800e39a <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800e392:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	2200      	movs	r2, #0
 800e398:	665a      	str	r2, [r3, #100]	; 0x64
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	2b03      	cmp	r3, #3
 800e39e:	d84f      	bhi.n	800e440 <SAI_InitI2S+0x130>
 800e3a0:	a201      	add	r2, pc, #4	; (adr r2, 800e3a8 <SAI_InitI2S+0x98>)
 800e3a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3a6:	bf00      	nop
 800e3a8:	0800e3b9 	.word	0x0800e3b9
 800e3ac:	0800e3db 	.word	0x0800e3db
 800e3b0:	0800e3fd 	.word	0x0800e3fd
 800e3b4:	0800e41f 	.word	0x0800e41f

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	2280      	movs	r2, #128	; 0x80
 800e3bc:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	085b      	lsrs	r3, r3, #1
 800e3c2:	015a      	lsls	r2, r3, #5
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	085b      	lsrs	r3, r3, #1
 800e3cc:	011a      	lsls	r2, r3, #4
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	2240      	movs	r2, #64	; 0x40
 800e3d6:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800e3d8:	e035      	b.n	800e446 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	2280      	movs	r2, #128	; 0x80
 800e3de:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	085b      	lsrs	r3, r3, #1
 800e3e4:	019a      	lsls	r2, r3, #6
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	085b      	lsrs	r3, r3, #1
 800e3ee:	015a      	lsls	r2, r3, #5
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	2280      	movs	r2, #128	; 0x80
 800e3f8:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800e3fa:	e024      	b.n	800e446 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	22c0      	movs	r2, #192	; 0xc0
 800e400:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	085b      	lsrs	r3, r3, #1
 800e406:	019a      	lsls	r2, r3, #6
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	085b      	lsrs	r3, r3, #1
 800e410:	015a      	lsls	r2, r3, #5
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	2280      	movs	r2, #128	; 0x80
 800e41a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800e41c:	e013      	b.n	800e446 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	22e0      	movs	r2, #224	; 0xe0
 800e422:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e424:	683b      	ldr	r3, [r7, #0]
 800e426:	085b      	lsrs	r3, r3, #1
 800e428:	019a      	lsls	r2, r3, #6
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e42e:	683b      	ldr	r3, [r7, #0]
 800e430:	085b      	lsrs	r3, r3, #1
 800e432:	015a      	lsls	r2, r3, #5
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	2280      	movs	r2, #128	; 0x80
 800e43c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800e43e:	e002      	b.n	800e446 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800e440:	2301      	movs	r3, #1
 800e442:	75fb      	strb	r3, [r7, #23]
      break;
 800e444:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800e446:	68bb      	ldr	r3, [r7, #8]
 800e448:	2b02      	cmp	r3, #2
 800e44a:	d10b      	bne.n	800e464 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2b01      	cmp	r3, #1
 800e450:	d102      	bne.n	800e458 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	2210      	movs	r2, #16
 800e456:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	2b02      	cmp	r3, #2
 800e45c:	d102      	bne.n	800e464 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	2208      	movs	r2, #8
 800e462:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 800e464:	7dfb      	ldrb	r3, [r7, #23]
}
 800e466:	4618      	mov	r0, r3
 800e468:	371c      	adds	r7, #28
 800e46a:	46bd      	mov	sp, r7
 800e46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e470:	4770      	bx	lr
 800e472:	bf00      	nop

0800e474 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e474:	b480      	push	{r7}
 800e476:	b087      	sub	sp, #28
 800e478:	af00      	add	r7, sp, #0
 800e47a:	60f8      	str	r0, [r7, #12]
 800e47c:	60b9      	str	r1, [r7, #8]
 800e47e:	607a      	str	r2, [r7, #4]
 800e480:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e482:	2300      	movs	r3, #0
 800e484:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	2200      	movs	r2, #0
 800e48a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	2200      	movs	r2, #0
 800e490:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	685b      	ldr	r3, [r3, #4]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d003      	beq.n	800e4a2 <SAI_InitPCM+0x2e>
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	685b      	ldr	r3, [r3, #4]
 800e49e:	2b02      	cmp	r3, #2
 800e4a0:	d103      	bne.n	800e4aa <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	2201      	movs	r2, #1
 800e4a6:	651a      	str	r2, [r3, #80]	; 0x50
 800e4a8:	e002      	b.n	800e4b0 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800e4bc:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800e4c4:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	683a      	ldr	r2, [r7, #0]
 800e4d0:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e4d8:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800e4da:	68bb      	ldr	r3, [r7, #8]
 800e4dc:	2b04      	cmp	r3, #4
 800e4de:	d103      	bne.n	800e4e8 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	2201      	movs	r2, #1
 800e4e4:	659a      	str	r2, [r3, #88]	; 0x58
 800e4e6:	e002      	b.n	800e4ee <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	220d      	movs	r2, #13
 800e4ec:	659a      	str	r2, [r3, #88]	; 0x58
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	2b03      	cmp	r3, #3
 800e4f2:	d837      	bhi.n	800e564 <SAI_InitPCM+0xf0>
 800e4f4:	a201      	add	r2, pc, #4	; (adr r2, 800e4fc <SAI_InitPCM+0x88>)
 800e4f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4fa:	bf00      	nop
 800e4fc:	0800e50d 	.word	0x0800e50d
 800e500:	0800e523 	.word	0x0800e523
 800e504:	0800e539 	.word	0x0800e539
 800e508:	0800e54f 	.word	0x0800e54f
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	2280      	movs	r2, #128	; 0x80
 800e510:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	011a      	lsls	r2, r3, #4
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	2240      	movs	r2, #64	; 0x40
 800e51e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800e520:	e023      	b.n	800e56a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	2280      	movs	r2, #128	; 0x80
 800e526:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e528:	683b      	ldr	r3, [r7, #0]
 800e52a:	015a      	lsls	r2, r3, #5
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	2280      	movs	r2, #128	; 0x80
 800e534:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800e536:	e018      	b.n	800e56a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	22c0      	movs	r2, #192	; 0xc0
 800e53c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	015a      	lsls	r2, r3, #5
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	2280      	movs	r2, #128	; 0x80
 800e54a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800e54c:	e00d      	b.n	800e56a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	22e0      	movs	r2, #224	; 0xe0
 800e552:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e554:	683b      	ldr	r3, [r7, #0]
 800e556:	015a      	lsls	r2, r3, #5
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	2280      	movs	r2, #128	; 0x80
 800e560:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800e562:	e002      	b.n	800e56a <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800e564:	2301      	movs	r3, #1
 800e566:	75fb      	strb	r3, [r7, #23]
      break;
 800e568:	bf00      	nop
  }

  return status;
 800e56a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e56c:	4618      	mov	r0, r3
 800e56e:	371c      	adds	r7, #28
 800e570:	46bd      	mov	sp, r7
 800e572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e576:	4770      	bx	lr

0800e578 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800e578:	b480      	push	{r7}
 800e57a:	b085      	sub	sp, #20
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
 800e580:	460b      	mov	r3, r1
 800e582:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800e584:	2301      	movs	r3, #1
 800e586:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800e588:	78fb      	ldrb	r3, [r7, #3]
 800e58a:	2b01      	cmp	r3, #1
 800e58c:	d103      	bne.n	800e596 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	f043 0308 	orr.w	r3, r3, #8
 800e594:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e59a:	2b08      	cmp	r3, #8
 800e59c:	d10b      	bne.n	800e5b6 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800e5a2:	2b03      	cmp	r3, #3
 800e5a4:	d003      	beq.n	800e5ae <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	685b      	ldr	r3, [r3, #4]
 800e5aa:	2b01      	cmp	r3, #1
 800e5ac:	d103      	bne.n	800e5b6 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	f043 0310 	orr.w	r3, r3, #16
 800e5b4:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	685b      	ldr	r3, [r3, #4]
 800e5ba:	2b03      	cmp	r3, #3
 800e5bc:	d003      	beq.n	800e5c6 <SAI_InterruptFlag+0x4e>
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	685b      	ldr	r3, [r3, #4]
 800e5c2:	2b02      	cmp	r3, #2
 800e5c4:	d104      	bne.n	800e5d0 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800e5cc:	60fb      	str	r3, [r7, #12]
 800e5ce:	e003      	b.n	800e5d8 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	f043 0304 	orr.w	r3, r3, #4
 800e5d6:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
}
 800e5da:	4618      	mov	r0, r3
 800e5dc:	3714      	adds	r7, #20
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e4:	4770      	bx	lr
	...

0800e5e8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800e5e8:	b480      	push	{r7}
 800e5ea:	b085      	sub	sp, #20
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800e5f0:	4b18      	ldr	r3, [pc, #96]	; (800e654 <SAI_Disable+0x6c>)
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	4a18      	ldr	r2, [pc, #96]	; (800e658 <SAI_Disable+0x70>)
 800e5f6:	fba2 2303 	umull	r2, r3, r2, r3
 800e5fa:	0b1b      	lsrs	r3, r3, #12
 800e5fc:	009b      	lsls	r3, r3, #2
 800e5fe:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800e600:	2300      	movs	r3, #0
 800e602:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	681a      	ldr	r2, [r3, #0]
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800e612:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d10a      	bne.n	800e630 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e620:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800e62a:	2303      	movs	r3, #3
 800e62c:	72fb      	strb	r3, [r7, #11]
      break;
 800e62e:	e009      	b.n	800e644 <SAI_Disable+0x5c>
    }
    count--;
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	3b01      	subs	r3, #1
 800e634:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e640:	2b00      	cmp	r3, #0
 800e642:	d1e7      	bne.n	800e614 <SAI_Disable+0x2c>

  return status;
 800e644:	7afb      	ldrb	r3, [r7, #11]
}
 800e646:	4618      	mov	r0, r3
 800e648:	3714      	adds	r7, #20
 800e64a:	46bd      	mov	sp, r7
 800e64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e650:	4770      	bx	lr
 800e652:	bf00      	nop
 800e654:	24000000 	.word	0x24000000
 800e658:	95cbec1b 	.word	0x95cbec1b

0800e65c <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b084      	sub	sp, #16
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e668:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	69db      	ldr	r3, [r3, #28]
 800e66e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e672:	d01c      	beq.n	800e6ae <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	2200      	movs	r2, #0
 800e678:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	681a      	ldr	r2, [r3, #0]
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800e68a:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e68c:	2100      	movs	r1, #0
 800e68e:	68f8      	ldr	r0, [r7, #12]
 800e690:	f7ff ff72 	bl	800e578 <SAI_InterruptFlag>
 800e694:	4603      	mov	r3, r0
 800e696:	43d9      	mvns	r1, r3
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	691a      	ldr	r2, [r3, #16]
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	400a      	ands	r2, r1
 800e6a4:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	2201      	movs	r2, #1
 800e6aa:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800e6ae:	68f8      	ldr	r0, [r7, #12]
 800e6b0:	f011 f82a 	bl	801f708 <HAL_SAI_TxCpltCallback>
#endif
}
 800e6b4:	bf00      	nop
 800e6b6:	3710      	adds	r7, #16
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	bd80      	pop	{r7, pc}

0800e6bc <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b084      	sub	sp, #16
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6c8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800e6ca:	68f8      	ldr	r0, [r7, #12]
 800e6cc:	f011 f80c 	bl	801f6e8 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800e6d0:	bf00      	nop
 800e6d2:	3710      	adds	r7, #16
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bd80      	pop	{r7, pc}

0800e6d8 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b084      	sub	sp, #16
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6e4:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800e6e6:	6878      	ldr	r0, [r7, #4]
 800e6e8:	f7f9 f8e4 	bl	80078b4 <HAL_DMA_GetError>
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	2b02      	cmp	r3, #2
 800e6f0:	d01d      	beq.n	800e72e <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e6f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	681a      	ldr	r2, [r3, #0]
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800e710:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800e712:	68f8      	ldr	r0, [r7, #12]
 800e714:	f7ff ff68 	bl	800e5e8 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	2201      	movs	r2, #1
 800e71c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	2200      	movs	r2, #0
 800e724:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800e728:	68f8      	ldr	r0, [r7, #12]
 800e72a:	f7ff fde7 	bl	800e2fc <HAL_SAI_ErrorCallback>
#endif
  }
}
 800e72e:	bf00      	nop
 800e730:	3710      	adds	r7, #16
 800e732:	46bd      	mov	sp, r7
 800e734:	bd80      	pop	{r7, pc}
	...

0800e738 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b084      	sub	sp, #16
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800e740:	2300      	movs	r3, #0
 800e742:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d101      	bne.n	800e74e <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800e74a:	2301      	movs	r3, #1
 800e74c:	e0eb      	b.n	800e926 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	2200      	movs	r2, #0
 800e752:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	4a75      	ldr	r2, [pc, #468]	; (800e930 <HAL_SPI_Init+0x1f8>)
 800e75a:	4293      	cmp	r3, r2
 800e75c:	d00f      	beq.n	800e77e <HAL_SPI_Init+0x46>
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	4a74      	ldr	r2, [pc, #464]	; (800e934 <HAL_SPI_Init+0x1fc>)
 800e764:	4293      	cmp	r3, r2
 800e766:	d00a      	beq.n	800e77e <HAL_SPI_Init+0x46>
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	4a72      	ldr	r2, [pc, #456]	; (800e938 <HAL_SPI_Init+0x200>)
 800e76e:	4293      	cmp	r3, r2
 800e770:	d005      	beq.n	800e77e <HAL_SPI_Init+0x46>
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	68db      	ldr	r3, [r3, #12]
 800e776:	2b0f      	cmp	r3, #15
 800e778:	d901      	bls.n	800e77e <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800e77a:	2301      	movs	r3, #1
 800e77c:	e0d3      	b.n	800e926 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e77e:	6878      	ldr	r0, [r7, #4]
 800e780:	f001 f888 	bl	800f894 <SPI_GetPacketSize>
 800e784:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	4a69      	ldr	r2, [pc, #420]	; (800e930 <HAL_SPI_Init+0x1f8>)
 800e78c:	4293      	cmp	r3, r2
 800e78e:	d00c      	beq.n	800e7aa <HAL_SPI_Init+0x72>
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	4a67      	ldr	r2, [pc, #412]	; (800e934 <HAL_SPI_Init+0x1fc>)
 800e796:	4293      	cmp	r3, r2
 800e798:	d007      	beq.n	800e7aa <HAL_SPI_Init+0x72>
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	4a66      	ldr	r2, [pc, #408]	; (800e938 <HAL_SPI_Init+0x200>)
 800e7a0:	4293      	cmp	r3, r2
 800e7a2:	d002      	beq.n	800e7aa <HAL_SPI_Init+0x72>
 800e7a4:	68bb      	ldr	r3, [r7, #8]
 800e7a6:	2b08      	cmp	r3, #8
 800e7a8:	d811      	bhi.n	800e7ce <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e7ae:	4a60      	ldr	r2, [pc, #384]	; (800e930 <HAL_SPI_Init+0x1f8>)
 800e7b0:	4293      	cmp	r3, r2
 800e7b2:	d009      	beq.n	800e7c8 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	4a5e      	ldr	r2, [pc, #376]	; (800e934 <HAL_SPI_Init+0x1fc>)
 800e7ba:	4293      	cmp	r3, r2
 800e7bc:	d004      	beq.n	800e7c8 <HAL_SPI_Init+0x90>
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	4a5d      	ldr	r2, [pc, #372]	; (800e938 <HAL_SPI_Init+0x200>)
 800e7c4:	4293      	cmp	r3, r2
 800e7c6:	d104      	bne.n	800e7d2 <HAL_SPI_Init+0x9a>
 800e7c8:	68bb      	ldr	r3, [r7, #8]
 800e7ca:	2b10      	cmp	r3, #16
 800e7cc:	d901      	bls.n	800e7d2 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800e7ce:	2301      	movs	r3, #1
 800e7d0:	e0a9      	b.n	800e926 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e7d8:	b2db      	uxtb	r3, r3
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d106      	bne.n	800e7ec <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e7e6:	6878      	ldr	r0, [r7, #4]
 800e7e8:	f7f4 fb4c 	bl	8002e84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	2202      	movs	r2, #2
 800e7f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	681a      	ldr	r2, [r3, #0]
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	f022 0201 	bic.w	r2, r2, #1
 800e802:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	699b      	ldr	r3, [r3, #24]
 800e808:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e80c:	d119      	bne.n	800e842 <HAL_SPI_Init+0x10a>
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	685b      	ldr	r3, [r3, #4]
 800e812:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e816:	d103      	bne.n	800e820 <HAL_SPI_Init+0xe8>
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d008      	beq.n	800e832 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e824:	2b00      	cmp	r3, #0
 800e826:	d10c      	bne.n	800e842 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e82c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e830:	d107      	bne.n	800e842 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	681a      	ldr	r2, [r3, #0]
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e840:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	69da      	ldr	r2, [r3, #28]
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e84a:	431a      	orrs	r2, r3
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	431a      	orrs	r2, r3
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e854:	ea42 0103 	orr.w	r1, r2, r3
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	68da      	ldr	r2, [r3, #12]
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	430a      	orrs	r2, r1
 800e862:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e86c:	431a      	orrs	r2, r3
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e872:	431a      	orrs	r2, r3
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	699b      	ldr	r3, [r3, #24]
 800e878:	431a      	orrs	r2, r3
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	691b      	ldr	r3, [r3, #16]
 800e87e:	431a      	orrs	r2, r3
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	695b      	ldr	r3, [r3, #20]
 800e884:	431a      	orrs	r2, r3
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	6a1b      	ldr	r3, [r3, #32]
 800e88a:	431a      	orrs	r2, r3
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	685b      	ldr	r3, [r3, #4]
 800e890:	431a      	orrs	r2, r3
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e896:	431a      	orrs	r2, r3
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	689b      	ldr	r3, [r3, #8]
 800e89c:	431a      	orrs	r2, r3
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e8a2:	ea42 0103 	orr.w	r1, r2, r3
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	430a      	orrs	r2, r1
 800e8b0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	685b      	ldr	r3, [r3, #4]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d113      	bne.n	800e8e2 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	689b      	ldr	r3, [r3, #8]
 800e8c0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e8cc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	689b      	ldr	r3, [r3, #8]
 800e8d4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e8e0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	f022 0201 	bic.w	r2, r2, #1
 800e8f0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	685b      	ldr	r3, [r3, #4]
 800e8f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d00a      	beq.n	800e914 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	68db      	ldr	r3, [r3, #12]
 800e904:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	430a      	orrs	r2, r1
 800e912:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2200      	movs	r2, #0
 800e918:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2201      	movs	r2, #1
 800e920:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e924:	2300      	movs	r3, #0
}
 800e926:	4618      	mov	r0, r3
 800e928:	3710      	adds	r7, #16
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bd80      	pop	{r7, pc}
 800e92e:	bf00      	nop
 800e930:	40013000 	.word	0x40013000
 800e934:	40003800 	.word	0x40003800
 800e938:	40003c00 	.word	0x40003c00

0800e93c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b08a      	sub	sp, #40	; 0x28
 800e940:	af02      	add	r7, sp, #8
 800e942:	60f8      	str	r0, [r7, #12]
 800e944:	60b9      	str	r1, [r7, #8]
 800e946:	603b      	str	r3, [r7, #0]
 800e948:	4613      	mov	r3, r2
 800e94a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	3320      	adds	r3, #32
 800e952:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e954:	2300      	movs	r3, #0
 800e956:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e95e:	2b01      	cmp	r3, #1
 800e960:	d101      	bne.n	800e966 <HAL_SPI_Transmit+0x2a>
 800e962:	2302      	movs	r3, #2
 800e964:	e1d7      	b.n	800ed16 <HAL_SPI_Transmit+0x3da>
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	2201      	movs	r2, #1
 800e96a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e96e:	f7f5 fbbd 	bl	80040ec <HAL_GetTick>
 800e972:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e97a:	b2db      	uxtb	r3, r3
 800e97c:	2b01      	cmp	r3, #1
 800e97e:	d007      	beq.n	800e990 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800e980:	2302      	movs	r3, #2
 800e982:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	2200      	movs	r2, #0
 800e988:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e98c:	7efb      	ldrb	r3, [r7, #27]
 800e98e:	e1c2      	b.n	800ed16 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e990:	68bb      	ldr	r3, [r7, #8]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d002      	beq.n	800e99c <HAL_SPI_Transmit+0x60>
 800e996:	88fb      	ldrh	r3, [r7, #6]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d107      	bne.n	800e9ac <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800e99c:	2301      	movs	r3, #1
 800e99e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e9a8:	7efb      	ldrb	r3, [r7, #27]
 800e9aa:	e1b4      	b.n	800ed16 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	2203      	movs	r2, #3
 800e9b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	68ba      	ldr	r2, [r7, #8]
 800e9c0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	88fa      	ldrh	r2, [r7, #6]
 800e9c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	88fa      	ldrh	r2, [r7, #6]
 800e9ce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	2200      	movs	r2, #0
 800e9dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	689b      	ldr	r3, [r3, #8]
 800e9f8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e9fc:	d107      	bne.n	800ea0e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	681a      	ldr	r2, [r3, #0]
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ea0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	685a      	ldr	r2, [r3, #4]
 800ea14:	4b96      	ldr	r3, [pc, #600]	; (800ec70 <HAL_SPI_Transmit+0x334>)
 800ea16:	4013      	ands	r3, r2
 800ea18:	88f9      	ldrh	r1, [r7, #6]
 800ea1a:	68fa      	ldr	r2, [r7, #12]
 800ea1c:	6812      	ldr	r2, [r2, #0]
 800ea1e:	430b      	orrs	r3, r1
 800ea20:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	681a      	ldr	r2, [r3, #0]
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	f042 0201 	orr.w	r2, r2, #1
 800ea30:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	685b      	ldr	r3, [r3, #4]
 800ea36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ea3a:	d107      	bne.n	800ea4c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	681a      	ldr	r2, [r3, #0]
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ea4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	68db      	ldr	r3, [r3, #12]
 800ea50:	2b0f      	cmp	r3, #15
 800ea52:	d947      	bls.n	800eae4 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ea54:	e03f      	b.n	800ead6 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	695b      	ldr	r3, [r3, #20]
 800ea5c:	f003 0302 	and.w	r3, r3, #2
 800ea60:	2b02      	cmp	r3, #2
 800ea62:	d114      	bne.n	800ea8e <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	6812      	ldr	r2, [r2, #0]
 800ea6e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ea74:	1d1a      	adds	r2, r3, #4
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ea80:	b29b      	uxth	r3, r3
 800ea82:	3b01      	subs	r3, #1
 800ea84:	b29a      	uxth	r2, r3
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ea8c:	e023      	b.n	800ead6 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ea8e:	f7f5 fb2d 	bl	80040ec <HAL_GetTick>
 800ea92:	4602      	mov	r2, r0
 800ea94:	697b      	ldr	r3, [r7, #20]
 800ea96:	1ad3      	subs	r3, r2, r3
 800ea98:	683a      	ldr	r2, [r7, #0]
 800ea9a:	429a      	cmp	r2, r3
 800ea9c:	d803      	bhi.n	800eaa6 <HAL_SPI_Transmit+0x16a>
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eaa4:	d102      	bne.n	800eaac <HAL_SPI_Transmit+0x170>
 800eaa6:	683b      	ldr	r3, [r7, #0]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d114      	bne.n	800ead6 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800eaac:	68f8      	ldr	r0, [r7, #12]
 800eaae:	f000 fe23 	bl	800f6f8 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	2200      	movs	r2, #0
 800eab6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eac0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	2201      	movs	r2, #1
 800eace:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800ead2:	2301      	movs	r3, #1
 800ead4:	e11f      	b.n	800ed16 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eadc:	b29b      	uxth	r3, r3
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d1b9      	bne.n	800ea56 <HAL_SPI_Transmit+0x11a>
 800eae2:	e0f2      	b.n	800ecca <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	68db      	ldr	r3, [r3, #12]
 800eae8:	2b07      	cmp	r3, #7
 800eaea:	f240 80e7 	bls.w	800ecbc <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800eaee:	e05d      	b.n	800ebac <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	695b      	ldr	r3, [r3, #20]
 800eaf6:	f003 0302 	and.w	r3, r3, #2
 800eafa:	2b02      	cmp	r3, #2
 800eafc:	d132      	bne.n	800eb64 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eb04:	b29b      	uxth	r3, r3
 800eb06:	2b01      	cmp	r3, #1
 800eb08:	d918      	bls.n	800eb3c <HAL_SPI_Transmit+0x200>
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d014      	beq.n	800eb3c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	6812      	ldr	r2, [r2, #0]
 800eb1c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb22:	1d1a      	adds	r2, r3, #4
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eb2e:	b29b      	uxth	r3, r3
 800eb30:	3b02      	subs	r3, #2
 800eb32:	b29a      	uxth	r2, r3
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800eb3a:	e037      	b.n	800ebac <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb40:	881a      	ldrh	r2, [r3, #0]
 800eb42:	69fb      	ldr	r3, [r7, #28]
 800eb44:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb4a:	1c9a      	adds	r2, r3, #2
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eb56:	b29b      	uxth	r3, r3
 800eb58:	3b01      	subs	r3, #1
 800eb5a:	b29a      	uxth	r2, r3
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800eb62:	e023      	b.n	800ebac <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eb64:	f7f5 fac2 	bl	80040ec <HAL_GetTick>
 800eb68:	4602      	mov	r2, r0
 800eb6a:	697b      	ldr	r3, [r7, #20]
 800eb6c:	1ad3      	subs	r3, r2, r3
 800eb6e:	683a      	ldr	r2, [r7, #0]
 800eb70:	429a      	cmp	r2, r3
 800eb72:	d803      	bhi.n	800eb7c <HAL_SPI_Transmit+0x240>
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb7a:	d102      	bne.n	800eb82 <HAL_SPI_Transmit+0x246>
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d114      	bne.n	800ebac <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800eb82:	68f8      	ldr	r0, [r7, #12]
 800eb84:	f000 fdb8 	bl	800f6f8 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb96:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	2201      	movs	r2, #1
 800eba4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800eba8:	2301      	movs	r3, #1
 800ebaa:	e0b4      	b.n	800ed16 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ebb2:	b29b      	uxth	r3, r3
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d19b      	bne.n	800eaf0 <HAL_SPI_Transmit+0x1b4>
 800ebb8:	e087      	b.n	800ecca <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	695b      	ldr	r3, [r3, #20]
 800ebc0:	f003 0302 	and.w	r3, r3, #2
 800ebc4:	2b02      	cmp	r3, #2
 800ebc6:	d155      	bne.n	800ec74 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ebce:	b29b      	uxth	r3, r3
 800ebd0:	2b03      	cmp	r3, #3
 800ebd2:	d918      	bls.n	800ec06 <HAL_SPI_Transmit+0x2ca>
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebd8:	2b40      	cmp	r3, #64	; 0x40
 800ebda:	d914      	bls.n	800ec06 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	6812      	ldr	r2, [r2, #0]
 800ebe6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ebec:	1d1a      	adds	r2, r3, #4
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ebf8:	b29b      	uxth	r3, r3
 800ebfa:	3b04      	subs	r3, #4
 800ebfc:	b29a      	uxth	r2, r3
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ec04:	e05a      	b.n	800ecbc <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ec0c:	b29b      	uxth	r3, r3
 800ec0e:	2b01      	cmp	r3, #1
 800ec10:	d917      	bls.n	800ec42 <HAL_SPI_Transmit+0x306>
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d013      	beq.n	800ec42 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec1e:	881a      	ldrh	r2, [r3, #0]
 800ec20:	69fb      	ldr	r3, [r7, #28]
 800ec22:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec28:	1c9a      	adds	r2, r3, #2
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ec34:	b29b      	uxth	r3, r3
 800ec36:	3b02      	subs	r3, #2
 800ec38:	b29a      	uxth	r2, r3
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ec40:	e03c      	b.n	800ecbc <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	3320      	adds	r3, #32
 800ec4c:	7812      	ldrb	r2, [r2, #0]
 800ec4e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec54:	1c5a      	adds	r2, r3, #1
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ec60:	b29b      	uxth	r3, r3
 800ec62:	3b01      	subs	r3, #1
 800ec64:	b29a      	uxth	r2, r3
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ec6c:	e026      	b.n	800ecbc <HAL_SPI_Transmit+0x380>
 800ec6e:	bf00      	nop
 800ec70:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ec74:	f7f5 fa3a 	bl	80040ec <HAL_GetTick>
 800ec78:	4602      	mov	r2, r0
 800ec7a:	697b      	ldr	r3, [r7, #20]
 800ec7c:	1ad3      	subs	r3, r2, r3
 800ec7e:	683a      	ldr	r2, [r7, #0]
 800ec80:	429a      	cmp	r2, r3
 800ec82:	d803      	bhi.n	800ec8c <HAL_SPI_Transmit+0x350>
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec8a:	d102      	bne.n	800ec92 <HAL_SPI_Transmit+0x356>
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d114      	bne.n	800ecbc <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ec92:	68f8      	ldr	r0, [r7, #12]
 800ec94:	f000 fd30 	bl	800f6f8 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eca6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	2201      	movs	r2, #1
 800ecb4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800ecb8:	2301      	movs	r3, #1
 800ecba:	e02c      	b.n	800ed16 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ecc2:	b29b      	uxth	r3, r3
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	f47f af78 	bne.w	800ebba <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800ecca:	683b      	ldr	r3, [r7, #0]
 800eccc:	9300      	str	r3, [sp, #0]
 800ecce:	697b      	ldr	r3, [r7, #20]
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	2108      	movs	r1, #8
 800ecd4:	68f8      	ldr	r0, [r7, #12]
 800ecd6:	f000 fdaf 	bl	800f838 <SPI_WaitOnFlagUntilTimeout>
 800ecda:	4603      	mov	r3, r0
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d007      	beq.n	800ecf0 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ece6:	f043 0220 	orr.w	r2, r3, #32
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ecf0:	68f8      	ldr	r0, [r7, #12]
 800ecf2:	f000 fd01 	bl	800f6f8 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	2201      	movs	r2, #1
 800ed02:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d001      	beq.n	800ed14 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800ed10:	2301      	movs	r3, #1
 800ed12:	e000      	b.n	800ed16 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800ed14:	7efb      	ldrb	r3, [r7, #27]
}
 800ed16:	4618      	mov	r0, r3
 800ed18:	3720      	adds	r7, #32
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	bd80      	pop	{r7, pc}
 800ed1e:	bf00      	nop

0800ed20 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b08a      	sub	sp, #40	; 0x28
 800ed24:	af02      	add	r7, sp, #8
 800ed26:	60f8      	str	r0, [r7, #12]
 800ed28:	60b9      	str	r1, [r7, #8]
 800ed2a:	603b      	str	r3, [r7, #0]
 800ed2c:	4613      	mov	r3, r2
 800ed2e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ed30:	2300      	movs	r3, #0
 800ed32:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	3330      	adds	r3, #48	; 0x30
 800ed3a:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	685b      	ldr	r3, [r3, #4]
 800ed40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ed44:	d112      	bne.n	800ed6c <HAL_SPI_Receive+0x4c>
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	689b      	ldr	r3, [r3, #8]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d10e      	bne.n	800ed6c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	2204      	movs	r2, #4
 800ed52:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ed56:	88fa      	ldrh	r2, [r7, #6]
 800ed58:	683b      	ldr	r3, [r7, #0]
 800ed5a:	9300      	str	r3, [sp, #0]
 800ed5c:	4613      	mov	r3, r2
 800ed5e:	68ba      	ldr	r2, [r7, #8]
 800ed60:	68b9      	ldr	r1, [r7, #8]
 800ed62:	68f8      	ldr	r0, [r7, #12]
 800ed64:	f000 f9ce 	bl	800f104 <HAL_SPI_TransmitReceive>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	e1c7      	b.n	800f0fc <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ed72:	2b01      	cmp	r3, #1
 800ed74:	d101      	bne.n	800ed7a <HAL_SPI_Receive+0x5a>
 800ed76:	2302      	movs	r3, #2
 800ed78:	e1c0      	b.n	800f0fc <HAL_SPI_Receive+0x3dc>
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	2201      	movs	r2, #1
 800ed7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ed82:	f7f5 f9b3 	bl	80040ec <HAL_GetTick>
 800ed86:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ed8e:	b2db      	uxtb	r3, r3
 800ed90:	2b01      	cmp	r3, #1
 800ed92:	d007      	beq.n	800eda4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800ed94:	2302      	movs	r3, #2
 800ed96:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800eda0:	7ffb      	ldrb	r3, [r7, #31]
 800eda2:	e1ab      	b.n	800f0fc <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800eda4:	68bb      	ldr	r3, [r7, #8]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d002      	beq.n	800edb0 <HAL_SPI_Receive+0x90>
 800edaa:	88fb      	ldrh	r3, [r7, #6]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d107      	bne.n	800edc0 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800edb0:	2301      	movs	r3, #1
 800edb2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	2200      	movs	r2, #0
 800edb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800edbc:	7ffb      	ldrb	r3, [r7, #31]
 800edbe:	e19d      	b.n	800f0fc <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	2204      	movs	r2, #4
 800edc4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	2200      	movs	r2, #0
 800edcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	68ba      	ldr	r2, [r7, #8]
 800edd4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	88fa      	ldrh	r2, [r7, #6]
 800edda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	88fa      	ldrh	r2, [r7, #6]
 800ede2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	2200      	movs	r2, #0
 800edea:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	2200      	movs	r2, #0
 800edf0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	2200      	movs	r2, #0
 800edf8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	2200      	movs	r2, #0
 800ee00:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	2200      	movs	r2, #0
 800ee06:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	689b      	ldr	r3, [r3, #8]
 800ee0c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ee10:	d107      	bne.n	800ee22 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	681a      	ldr	r2, [r3, #0]
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ee20:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	685a      	ldr	r2, [r3, #4]
 800ee28:	4b94      	ldr	r3, [pc, #592]	; (800f07c <HAL_SPI_Receive+0x35c>)
 800ee2a:	4013      	ands	r3, r2
 800ee2c:	88f9      	ldrh	r1, [r7, #6]
 800ee2e:	68fa      	ldr	r2, [r7, #12]
 800ee30:	6812      	ldr	r2, [r2, #0]
 800ee32:	430b      	orrs	r3, r1
 800ee34:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	681a      	ldr	r2, [r3, #0]
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	f042 0201 	orr.w	r2, r2, #1
 800ee44:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	685b      	ldr	r3, [r3, #4]
 800ee4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ee4e:	d107      	bne.n	800ee60 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	681a      	ldr	r2, [r3, #0]
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ee5e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	68db      	ldr	r3, [r3, #12]
 800ee64:	2b0f      	cmp	r3, #15
 800ee66:	d948      	bls.n	800eefa <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ee68:	e040      	b.n	800eeec <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	695a      	ldr	r2, [r3, #20]
 800ee70:	f248 0308 	movw	r3, #32776	; 0x8008
 800ee74:	4013      	ands	r3, r2
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d014      	beq.n	800eea4 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	681a      	ldr	r2, [r3, #0]
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee82:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ee84:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee8a:	1d1a      	adds	r2, r3, #4
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ee96:	b29b      	uxth	r3, r3
 800ee98:	3b01      	subs	r3, #1
 800ee9a:	b29a      	uxth	r2, r3
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800eea2:	e023      	b.n	800eeec <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eea4:	f7f5 f922 	bl	80040ec <HAL_GetTick>
 800eea8:	4602      	mov	r2, r0
 800eeaa:	697b      	ldr	r3, [r7, #20]
 800eeac:	1ad3      	subs	r3, r2, r3
 800eeae:	683a      	ldr	r2, [r7, #0]
 800eeb0:	429a      	cmp	r2, r3
 800eeb2:	d803      	bhi.n	800eebc <HAL_SPI_Receive+0x19c>
 800eeb4:	683b      	ldr	r3, [r7, #0]
 800eeb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eeba:	d102      	bne.n	800eec2 <HAL_SPI_Receive+0x1a2>
 800eebc:	683b      	ldr	r3, [r7, #0]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d114      	bne.n	800eeec <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800eec2:	68f8      	ldr	r0, [r7, #12]
 800eec4:	f000 fc18 	bl	800f6f8 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	2200      	movs	r2, #0
 800eecc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eed6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	2201      	movs	r2, #1
 800eee4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800eee8:	2301      	movs	r3, #1
 800eeea:	e107      	b.n	800f0fc <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800eef2:	b29b      	uxth	r3, r3
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d1b8      	bne.n	800ee6a <HAL_SPI_Receive+0x14a>
 800eef8:	e0ed      	b.n	800f0d6 <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	68db      	ldr	r3, [r3, #12]
 800eefe:	2b07      	cmp	r3, #7
 800ef00:	f240 80e2 	bls.w	800f0c8 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ef04:	e05b      	b.n	800efbe <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	695b      	ldr	r3, [r3, #20]
 800ef0c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d030      	beq.n	800ef76 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	695b      	ldr	r3, [r3, #20]
 800ef1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d014      	beq.n	800ef4c <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	681a      	ldr	r2, [r3, #0]
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef2a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ef2c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef32:	1d1a      	adds	r2, r3, #4
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ef3e:	b29b      	uxth	r3, r3
 800ef40:	3b02      	subs	r3, #2
 800ef42:	b29a      	uxth	r2, r3
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ef4a:	e038      	b.n	800efbe <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef50:	69ba      	ldr	r2, [r7, #24]
 800ef52:	8812      	ldrh	r2, [r2, #0]
 800ef54:	b292      	uxth	r2, r2
 800ef56:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef5c:	1c9a      	adds	r2, r3, #2
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ef68:	b29b      	uxth	r3, r3
 800ef6a:	3b01      	subs	r3, #1
 800ef6c:	b29a      	uxth	r2, r3
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ef74:	e023      	b.n	800efbe <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ef76:	f7f5 f8b9 	bl	80040ec <HAL_GetTick>
 800ef7a:	4602      	mov	r2, r0
 800ef7c:	697b      	ldr	r3, [r7, #20]
 800ef7e:	1ad3      	subs	r3, r2, r3
 800ef80:	683a      	ldr	r2, [r7, #0]
 800ef82:	429a      	cmp	r2, r3
 800ef84:	d803      	bhi.n	800ef8e <HAL_SPI_Receive+0x26e>
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef8c:	d102      	bne.n	800ef94 <HAL_SPI_Receive+0x274>
 800ef8e:	683b      	ldr	r3, [r7, #0]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d114      	bne.n	800efbe <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ef94:	68f8      	ldr	r0, [r7, #12]
 800ef96:	f000 fbaf 	bl	800f6f8 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800efa8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	2201      	movs	r2, #1
 800efb6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800efba:	2301      	movs	r3, #1
 800efbc:	e09e      	b.n	800f0fc <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800efc4:	b29b      	uxth	r3, r3
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d19d      	bne.n	800ef06 <HAL_SPI_Receive+0x1e6>
 800efca:	e084      	b.n	800f0d6 <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	695b      	ldr	r3, [r3, #20]
 800efd2:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d052      	beq.n	800f080 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	695b      	ldr	r3, [r3, #20]
 800efe0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d014      	beq.n	800f012 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	681a      	ldr	r2, [r3, #0]
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eff0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800eff2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eff8:	1d1a      	adds	r2, r3, #4
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f004:	b29b      	uxth	r3, r3
 800f006:	3b04      	subs	r3, #4
 800f008:	b29a      	uxth	r2, r3
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f010:	e05a      	b.n	800f0c8 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	695b      	ldr	r3, [r3, #20]
 800f018:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800f01c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f020:	d914      	bls.n	800f04c <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f026:	69ba      	ldr	r2, [r7, #24]
 800f028:	8812      	ldrh	r2, [r2, #0]
 800f02a:	b292      	uxth	r2, r2
 800f02c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f032:	1c9a      	adds	r2, r3, #2
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f03e:	b29b      	uxth	r3, r3
 800f040:	3b02      	subs	r3, #2
 800f042:	b29a      	uxth	r2, r3
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f04a:	e03d      	b.n	800f0c8 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f058:	7812      	ldrb	r2, [r2, #0]
 800f05a:	b2d2      	uxtb	r2, r2
 800f05c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f062:	1c5a      	adds	r2, r3, #1
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f06e:	b29b      	uxth	r3, r3
 800f070:	3b01      	subs	r3, #1
 800f072:	b29a      	uxth	r2, r3
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f07a:	e025      	b.n	800f0c8 <HAL_SPI_Receive+0x3a8>
 800f07c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f080:	f7f5 f834 	bl	80040ec <HAL_GetTick>
 800f084:	4602      	mov	r2, r0
 800f086:	697b      	ldr	r3, [r7, #20]
 800f088:	1ad3      	subs	r3, r2, r3
 800f08a:	683a      	ldr	r2, [r7, #0]
 800f08c:	429a      	cmp	r2, r3
 800f08e:	d803      	bhi.n	800f098 <HAL_SPI_Receive+0x378>
 800f090:	683b      	ldr	r3, [r7, #0]
 800f092:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f096:	d102      	bne.n	800f09e <HAL_SPI_Receive+0x37e>
 800f098:	683b      	ldr	r3, [r7, #0]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d114      	bne.n	800f0c8 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f09e:	68f8      	ldr	r0, [r7, #12]
 800f0a0:	f000 fb2a 	bl	800f6f8 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f0b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	2201      	movs	r2, #1
 800f0c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800f0c4:	2301      	movs	r3, #1
 800f0c6:	e019      	b.n	800f0fc <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f0ce:	b29b      	uxth	r3, r3
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	f47f af7b 	bne.w	800efcc <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f0d6:	68f8      	ldr	r0, [r7, #12]
 800f0d8:	f000 fb0e 	bl	800f6f8 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	2200      	movs	r2, #0
 800f0e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	2201      	movs	r2, #1
 800f0e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d001      	beq.n	800f0fa <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800f0f6:	2301      	movs	r3, #1
 800f0f8:	e000      	b.n	800f0fc <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800f0fa:	7ffb      	ldrb	r3, [r7, #31]
}
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	3720      	adds	r7, #32
 800f100:	46bd      	mov	sp, r7
 800f102:	bd80      	pop	{r7, pc}

0800f104 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800f104:	b580      	push	{r7, lr}
 800f106:	b08e      	sub	sp, #56	; 0x38
 800f108:	af02      	add	r7, sp, #8
 800f10a:	60f8      	str	r0, [r7, #12]
 800f10c:	60b9      	str	r1, [r7, #8]
 800f10e:	607a      	str	r2, [r7, #4]
 800f110:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f112:	2300      	movs	r3, #0
 800f114:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	3320      	adds	r3, #32
 800f11e:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	3330      	adds	r3, #48	; 0x30
 800f126:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f12e:	2b01      	cmp	r3, #1
 800f130:	d101      	bne.n	800f136 <HAL_SPI_TransmitReceive+0x32>
 800f132:	2302      	movs	r3, #2
 800f134:	e2ce      	b.n	800f6d4 <HAL_SPI_TransmitReceive+0x5d0>
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	2201      	movs	r2, #1
 800f13a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f13e:	f7f4 ffd5 	bl	80040ec <HAL_GetTick>
 800f142:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800f144:	887b      	ldrh	r3, [r7, #2]
 800f146:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800f148:	887b      	ldrh	r3, [r7, #2]
 800f14a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f152:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	685b      	ldr	r3, [r3, #4]
 800f158:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f15a:	7efb      	ldrb	r3, [r7, #27]
 800f15c:	2b01      	cmp	r3, #1
 800f15e:	d014      	beq.n	800f18a <HAL_SPI_TransmitReceive+0x86>
 800f160:	697b      	ldr	r3, [r7, #20]
 800f162:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f166:	d106      	bne.n	800f176 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	689b      	ldr	r3, [r3, #8]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d102      	bne.n	800f176 <HAL_SPI_TransmitReceive+0x72>
 800f170:	7efb      	ldrb	r3, [r7, #27]
 800f172:	2b04      	cmp	r3, #4
 800f174:	d009      	beq.n	800f18a <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800f176:	2302      	movs	r3, #2
 800f178:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	2200      	movs	r2, #0
 800f180:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f184:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f188:	e2a4      	b.n	800f6d4 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800f18a:	68bb      	ldr	r3, [r7, #8]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d005      	beq.n	800f19c <HAL_SPI_TransmitReceive+0x98>
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d002      	beq.n	800f19c <HAL_SPI_TransmitReceive+0x98>
 800f196:	887b      	ldrh	r3, [r7, #2]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d109      	bne.n	800f1b0 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800f19c:	2301      	movs	r3, #1
 800f19e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f1aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f1ae:	e291      	b.n	800f6d4 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f1b6:	b2db      	uxtb	r3, r3
 800f1b8:	2b04      	cmp	r3, #4
 800f1ba:	d003      	beq.n	800f1c4 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	2205      	movs	r2, #5
 800f1c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	687a      	ldr	r2, [r7, #4]
 800f1d0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	887a      	ldrh	r2, [r7, #2]
 800f1d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	887a      	ldrh	r2, [r7, #2]
 800f1de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	68ba      	ldr	r2, [r7, #8]
 800f1e6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	887a      	ldrh	r2, [r7, #2]
 800f1ec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	887a      	ldrh	r2, [r7, #2]
 800f1f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	2200      	movs	r2, #0
 800f202:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	685a      	ldr	r2, [r3, #4]
 800f20a:	4b9f      	ldr	r3, [pc, #636]	; (800f488 <HAL_SPI_TransmitReceive+0x384>)
 800f20c:	4013      	ands	r3, r2
 800f20e:	8879      	ldrh	r1, [r7, #2]
 800f210:	68fa      	ldr	r2, [r7, #12]
 800f212:	6812      	ldr	r2, [r2, #0]
 800f214:	430b      	orrs	r3, r1
 800f216:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	681a      	ldr	r2, [r3, #0]
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	f042 0201 	orr.w	r2, r2, #1
 800f226:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	685b      	ldr	r3, [r3, #4]
 800f22c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f230:	d107      	bne.n	800f242 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	681a      	ldr	r2, [r3, #0]
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f240:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	68db      	ldr	r3, [r3, #12]
 800f246:	2b0f      	cmp	r3, #15
 800f248:	d970      	bls.n	800f32c <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f24a:	e068      	b.n	800f31e <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	695b      	ldr	r3, [r3, #20]
 800f252:	f003 0302 	and.w	r3, r3, #2
 800f256:	2b02      	cmp	r3, #2
 800f258:	d11a      	bne.n	800f290 <HAL_SPI_TransmitReceive+0x18c>
 800f25a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d017      	beq.n	800f290 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	6812      	ldr	r2, [r2, #0]
 800f26a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f270:	1d1a      	adds	r2, r3, #4
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f27c:	b29b      	uxth	r3, r3
 800f27e:	3b01      	subs	r3, #1
 800f280:	b29a      	uxth	r2, r3
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f28e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	695a      	ldr	r2, [r3, #20]
 800f296:	f248 0308 	movw	r3, #32776	; 0x8008
 800f29a:	4013      	ands	r3, r2
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d01a      	beq.n	800f2d6 <HAL_SPI_TransmitReceive+0x1d2>
 800f2a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d017      	beq.n	800f2d6 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	681a      	ldr	r2, [r3, #0]
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f2ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f2b0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f2b6:	1d1a      	adds	r2, r3, #4
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f2c2:	b29b      	uxth	r3, r3
 800f2c4:	3b01      	subs	r3, #1
 800f2c6:	b29a      	uxth	r2, r3
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f2d4:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f2d6:	f7f4 ff09 	bl	80040ec <HAL_GetTick>
 800f2da:	4602      	mov	r2, r0
 800f2dc:	69fb      	ldr	r3, [r7, #28]
 800f2de:	1ad3      	subs	r3, r2, r3
 800f2e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f2e2:	429a      	cmp	r2, r3
 800f2e4:	d803      	bhi.n	800f2ee <HAL_SPI_TransmitReceive+0x1ea>
 800f2e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f2ec:	d102      	bne.n	800f2f4 <HAL_SPI_TransmitReceive+0x1f0>
 800f2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d114      	bne.n	800f31e <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800f2f4:	68f8      	ldr	r0, [r7, #12]
 800f2f6:	f000 f9ff 	bl	800f6f8 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f308:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	2201      	movs	r2, #1
 800f316:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800f31a:	2301      	movs	r3, #1
 800f31c:	e1da      	b.n	800f6d4 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f31e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f320:	2b00      	cmp	r3, #0
 800f322:	d193      	bne.n	800f24c <HAL_SPI_TransmitReceive+0x148>
 800f324:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f326:	2b00      	cmp	r3, #0
 800f328:	d190      	bne.n	800f24c <HAL_SPI_TransmitReceive+0x148>
 800f32a:	e1ac      	b.n	800f686 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	68db      	ldr	r3, [r3, #12]
 800f330:	2b07      	cmp	r3, #7
 800f332:	f240 81a0 	bls.w	800f676 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f336:	e0a9      	b.n	800f48c <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	695b      	ldr	r3, [r3, #20]
 800f33e:	f003 0302 	and.w	r3, r3, #2
 800f342:	2b02      	cmp	r3, #2
 800f344:	d139      	bne.n	800f3ba <HAL_SPI_TransmitReceive+0x2b6>
 800f346:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d036      	beq.n	800f3ba <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f34c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f34e:	2b01      	cmp	r3, #1
 800f350:	d91c      	bls.n	800f38c <HAL_SPI_TransmitReceive+0x288>
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f356:	2b00      	cmp	r3, #0
 800f358:	d018      	beq.n	800f38c <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	6812      	ldr	r2, [r2, #0]
 800f364:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f36a:	1d1a      	adds	r2, r3, #4
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f376:	b29b      	uxth	r3, r3
 800f378:	3b02      	subs	r3, #2
 800f37a:	b29a      	uxth	r2, r3
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f388:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f38a:	e016      	b.n	800f3ba <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f390:	881a      	ldrh	r2, [r3, #0]
 800f392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f394:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f39a:	1c9a      	adds	r2, r3, #2
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f3a6:	b29b      	uxth	r3, r3
 800f3a8:	3b01      	subs	r3, #1
 800f3aa:	b29a      	uxth	r2, r3
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f3b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	695b      	ldr	r3, [r3, #20]
 800f3c0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d03a      	beq.n	800f43e <HAL_SPI_TransmitReceive+0x33a>
 800f3c8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d037      	beq.n	800f43e <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	695b      	ldr	r3, [r3, #20]
 800f3d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d018      	beq.n	800f40e <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	681a      	ldr	r2, [r3, #0]
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f3e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f3e6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f3ec:	1d1a      	adds	r2, r3, #4
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f3f8:	b29b      	uxth	r3, r3
 800f3fa:	3b02      	subs	r3, #2
 800f3fc:	b29a      	uxth	r2, r3
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f40a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f40c:	e017      	b.n	800f43e <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f412:	6a3a      	ldr	r2, [r7, #32]
 800f414:	8812      	ldrh	r2, [r2, #0]
 800f416:	b292      	uxth	r2, r2
 800f418:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f41e:	1c9a      	adds	r2, r3, #2
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f42a:	b29b      	uxth	r3, r3
 800f42c:	3b01      	subs	r3, #1
 800f42e:	b29a      	uxth	r2, r3
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f43c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f43e:	f7f4 fe55 	bl	80040ec <HAL_GetTick>
 800f442:	4602      	mov	r2, r0
 800f444:	69fb      	ldr	r3, [r7, #28]
 800f446:	1ad3      	subs	r3, r2, r3
 800f448:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f44a:	429a      	cmp	r2, r3
 800f44c:	d803      	bhi.n	800f456 <HAL_SPI_TransmitReceive+0x352>
 800f44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f450:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f454:	d102      	bne.n	800f45c <HAL_SPI_TransmitReceive+0x358>
 800f456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d117      	bne.n	800f48c <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800f45c:	68f8      	ldr	r0, [r7, #12]
 800f45e:	f000 f94b 	bl	800f6f8 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	2200      	movs	r2, #0
 800f466:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f470:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	2201      	movs	r2, #1
 800f47e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800f482:	2301      	movs	r3, #1
 800f484:	e126      	b.n	800f6d4 <HAL_SPI_TransmitReceive+0x5d0>
 800f486:	bf00      	nop
 800f488:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f48c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f48e:	2b00      	cmp	r3, #0
 800f490:	f47f af52 	bne.w	800f338 <HAL_SPI_TransmitReceive+0x234>
 800f494:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f496:	2b00      	cmp	r3, #0
 800f498:	f47f af4e 	bne.w	800f338 <HAL_SPI_TransmitReceive+0x234>
 800f49c:	e0f3      	b.n	800f686 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	695b      	ldr	r3, [r3, #20]
 800f4a4:	f003 0302 	and.w	r3, r3, #2
 800f4a8:	2b02      	cmp	r3, #2
 800f4aa:	d15a      	bne.n	800f562 <HAL_SPI_TransmitReceive+0x45e>
 800f4ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d057      	beq.n	800f562 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800f4b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f4b4:	2b03      	cmp	r3, #3
 800f4b6:	d91c      	bls.n	800f4f2 <HAL_SPI_TransmitReceive+0x3ee>
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4bc:	2b40      	cmp	r3, #64	; 0x40
 800f4be:	d918      	bls.n	800f4f2 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	6812      	ldr	r2, [r2, #0]
 800f4ca:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f4d0:	1d1a      	adds	r2, r3, #4
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f4dc:	b29b      	uxth	r3, r3
 800f4de:	3b04      	subs	r3, #4
 800f4e0:	b29a      	uxth	r2, r3
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f4ee:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f4f0:	e037      	b.n	800f562 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f4f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f4f4:	2b01      	cmp	r3, #1
 800f4f6:	d91b      	bls.n	800f530 <HAL_SPI_TransmitReceive+0x42c>
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d017      	beq.n	800f530 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f504:	881a      	ldrh	r2, [r3, #0]
 800f506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f508:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f50e:	1c9a      	adds	r2, r3, #2
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f51a:	b29b      	uxth	r3, r3
 800f51c:	3b02      	subs	r3, #2
 800f51e:	b29a      	uxth	r2, r3
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f52c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f52e:	e018      	b.n	800f562 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	3320      	adds	r3, #32
 800f53a:	7812      	ldrb	r2, [r2, #0]
 800f53c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f542:	1c5a      	adds	r2, r3, #1
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f54e:	b29b      	uxth	r3, r3
 800f550:	3b01      	subs	r3, #1
 800f552:	b29a      	uxth	r2, r3
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f560:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	695b      	ldr	r3, [r3, #20]
 800f568:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d05e      	beq.n	800f62e <HAL_SPI_TransmitReceive+0x52a>
 800f570:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f572:	2b00      	cmp	r3, #0
 800f574:	d05b      	beq.n	800f62e <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	695b      	ldr	r3, [r3, #20]
 800f57c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f580:	2b00      	cmp	r3, #0
 800f582:	d018      	beq.n	800f5b6 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	681a      	ldr	r2, [r3, #0]
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f58c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f58e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f594:	1d1a      	adds	r2, r3, #4
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f5a0:	b29b      	uxth	r3, r3
 800f5a2:	3b04      	subs	r3, #4
 800f5a4:	b29a      	uxth	r2, r3
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f5b2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f5b4:	e03b      	b.n	800f62e <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	695b      	ldr	r3, [r3, #20]
 800f5bc:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800f5c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f5c4:	d918      	bls.n	800f5f8 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f5ca:	6a3a      	ldr	r2, [r7, #32]
 800f5cc:	8812      	ldrh	r2, [r2, #0]
 800f5ce:	b292      	uxth	r2, r2
 800f5d0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f5d6:	1c9a      	adds	r2, r3, #2
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f5e2:	b29b      	uxth	r3, r3
 800f5e4:	3b02      	subs	r3, #2
 800f5e6:	b29a      	uxth	r2, r3
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f5f4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f5f6:	e01a      	b.n	800f62e <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f604:	7812      	ldrb	r2, [r2, #0]
 800f606:	b2d2      	uxtb	r2, r2
 800f608:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f60e:	1c5a      	adds	r2, r3, #1
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f61a:	b29b      	uxth	r3, r3
 800f61c:	3b01      	subs	r3, #1
 800f61e:	b29a      	uxth	r2, r3
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f62c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f62e:	f7f4 fd5d 	bl	80040ec <HAL_GetTick>
 800f632:	4602      	mov	r2, r0
 800f634:	69fb      	ldr	r3, [r7, #28]
 800f636:	1ad3      	subs	r3, r2, r3
 800f638:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f63a:	429a      	cmp	r2, r3
 800f63c:	d803      	bhi.n	800f646 <HAL_SPI_TransmitReceive+0x542>
 800f63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f640:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f644:	d102      	bne.n	800f64c <HAL_SPI_TransmitReceive+0x548>
 800f646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d114      	bne.n	800f676 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800f64c:	68f8      	ldr	r0, [r7, #12]
 800f64e:	f000 f853 	bl	800f6f8 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	2200      	movs	r2, #0
 800f656:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f660:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	2201      	movs	r2, #1
 800f66e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800f672:	2301      	movs	r3, #1
 800f674:	e02e      	b.n	800f6d4 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f676:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f678:	2b00      	cmp	r3, #0
 800f67a:	f47f af10 	bne.w	800f49e <HAL_SPI_TransmitReceive+0x39a>
 800f67e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f680:	2b00      	cmp	r3, #0
 800f682:	f47f af0c 	bne.w	800f49e <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800f686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f688:	9300      	str	r3, [sp, #0]
 800f68a:	69fb      	ldr	r3, [r7, #28]
 800f68c:	2200      	movs	r2, #0
 800f68e:	2108      	movs	r1, #8
 800f690:	68f8      	ldr	r0, [r7, #12]
 800f692:	f000 f8d1 	bl	800f838 <SPI_WaitOnFlagUntilTimeout>
 800f696:	4603      	mov	r3, r0
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d007      	beq.n	800f6ac <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f6a2:	f043 0220 	orr.w	r2, r3, #32
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f6ac:	68f8      	ldr	r0, [r7, #12]
 800f6ae:	f000 f823 	bl	800f6f8 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	2201      	movs	r2, #1
 800f6be:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d001      	beq.n	800f6d0 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800f6cc:	2301      	movs	r3, #1
 800f6ce:	e001      	b.n	800f6d4 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800f6d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	3730      	adds	r7, #48	; 0x30
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	bd80      	pop	{r7, pc}

0800f6dc <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800f6dc:	b480      	push	{r7}
 800f6de:	b083      	sub	sp, #12
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f6ea:	b2db      	uxtb	r3, r3
}
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	370c      	adds	r7, #12
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f6:	4770      	bx	lr

0800f6f8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f6f8:	b480      	push	{r7}
 800f6fa:	b085      	sub	sp, #20
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	695b      	ldr	r3, [r3, #20]
 800f706:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	699a      	ldr	r2, [r3, #24]
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	f042 0208 	orr.w	r2, r2, #8
 800f716:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	699a      	ldr	r2, [r3, #24]
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	f042 0210 	orr.w	r2, r2, #16
 800f726:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	681a      	ldr	r2, [r3, #0]
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	f022 0201 	bic.w	r2, r2, #1
 800f736:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	6919      	ldr	r1, [r3, #16]
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	681a      	ldr	r2, [r3, #0]
 800f742:	4b3c      	ldr	r3, [pc, #240]	; (800f834 <SPI_CloseTransfer+0x13c>)
 800f744:	400b      	ands	r3, r1
 800f746:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	689a      	ldr	r2, [r3, #8]
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f756:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f75e:	b2db      	uxtb	r3, r3
 800f760:	2b04      	cmp	r3, #4
 800f762:	d014      	beq.n	800f78e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	f003 0320 	and.w	r3, r3, #32
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d00f      	beq.n	800f78e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f774:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	699a      	ldr	r2, [r3, #24]
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	f042 0220 	orr.w	r2, r2, #32
 800f78c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f794:	b2db      	uxtb	r3, r3
 800f796:	2b03      	cmp	r3, #3
 800f798:	d014      	beq.n	800f7c4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d00f      	beq.n	800f7c4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f7aa:	f043 0204 	orr.w	r2, r3, #4
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	699a      	ldr	r2, [r3, #24]
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f7c2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d00f      	beq.n	800f7ee <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f7d4:	f043 0201 	orr.w	r2, r3, #1
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	699a      	ldr	r2, [r3, #24]
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f7ec:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d00f      	beq.n	800f818 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f7fe:	f043 0208 	orr.w	r2, r3, #8
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	699a      	ldr	r2, [r3, #24]
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f816:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	2200      	movs	r2, #0
 800f81c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	2200      	movs	r2, #0
 800f824:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800f828:	bf00      	nop
 800f82a:	3714      	adds	r7, #20
 800f82c:	46bd      	mov	sp, r7
 800f82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f832:	4770      	bx	lr
 800f834:	fffffc90 	.word	0xfffffc90

0800f838 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b084      	sub	sp, #16
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	60f8      	str	r0, [r7, #12]
 800f840:	60b9      	str	r1, [r7, #8]
 800f842:	603b      	str	r3, [r7, #0]
 800f844:	4613      	mov	r3, r2
 800f846:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f848:	e010      	b.n	800f86c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f84a:	f7f4 fc4f 	bl	80040ec <HAL_GetTick>
 800f84e:	4602      	mov	r2, r0
 800f850:	683b      	ldr	r3, [r7, #0]
 800f852:	1ad3      	subs	r3, r2, r3
 800f854:	69ba      	ldr	r2, [r7, #24]
 800f856:	429a      	cmp	r2, r3
 800f858:	d803      	bhi.n	800f862 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f85a:	69bb      	ldr	r3, [r7, #24]
 800f85c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f860:	d102      	bne.n	800f868 <SPI_WaitOnFlagUntilTimeout+0x30>
 800f862:	69bb      	ldr	r3, [r7, #24]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d101      	bne.n	800f86c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f868:	2303      	movs	r3, #3
 800f86a:	e00f      	b.n	800f88c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	695a      	ldr	r2, [r3, #20]
 800f872:	68bb      	ldr	r3, [r7, #8]
 800f874:	4013      	ands	r3, r2
 800f876:	68ba      	ldr	r2, [r7, #8]
 800f878:	429a      	cmp	r2, r3
 800f87a:	bf0c      	ite	eq
 800f87c:	2301      	moveq	r3, #1
 800f87e:	2300      	movne	r3, #0
 800f880:	b2db      	uxtb	r3, r3
 800f882:	461a      	mov	r2, r3
 800f884:	79fb      	ldrb	r3, [r7, #7]
 800f886:	429a      	cmp	r2, r3
 800f888:	d0df      	beq.n	800f84a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800f88a:	2300      	movs	r3, #0
}
 800f88c:	4618      	mov	r0, r3
 800f88e:	3710      	adds	r7, #16
 800f890:	46bd      	mov	sp, r7
 800f892:	bd80      	pop	{r7, pc}

0800f894 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800f894:	b480      	push	{r7}
 800f896:	b085      	sub	sp, #20
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8a0:	095b      	lsrs	r3, r3, #5
 800f8a2:	3301      	adds	r3, #1
 800f8a4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	68db      	ldr	r3, [r3, #12]
 800f8aa:	3301      	adds	r3, #1
 800f8ac:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f8ae:	68bb      	ldr	r3, [r7, #8]
 800f8b0:	3307      	adds	r3, #7
 800f8b2:	08db      	lsrs	r3, r3, #3
 800f8b4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f8b6:	68bb      	ldr	r3, [r7, #8]
 800f8b8:	68fa      	ldr	r2, [r7, #12]
 800f8ba:	fb02 f303 	mul.w	r3, r2, r3
}
 800f8be:	4618      	mov	r0, r3
 800f8c0:	3714      	adds	r7, #20
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c8:	4770      	bx	lr
	...

0800f8cc <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b084      	sub	sp, #16
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	60f8      	str	r0, [r7, #12]
 800f8d4:	60b9      	str	r1, [r7, #8]
 800f8d6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d101      	bne.n	800f8e2 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800f8de:	2301      	movs	r3, #1
 800f8e0:	e03e      	b.n	800f960 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f8e8:	b2db      	uxtb	r3, r3
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d106      	bne.n	800f8fc <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800f8f6:	68f8      	ldr	r0, [r7, #12]
 800f8f8:	f7f1 feec 	bl	80016d4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	681a      	ldr	r2, [r3, #0]
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	3308      	adds	r3, #8
 800f904:	4619      	mov	r1, r3
 800f906:	4610      	mov	r0, r2
 800f908:	f002 fa2a 	bl	8011d60 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	6818      	ldr	r0, [r3, #0]
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	689b      	ldr	r3, [r3, #8]
 800f914:	461a      	mov	r2, r3
 800f916:	68b9      	ldr	r1, [r7, #8]
 800f918:	f002 fab2 	bl	8011e80 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	6858      	ldr	r0, [r3, #4]
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	689a      	ldr	r2, [r3, #8]
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f928:	6879      	ldr	r1, [r7, #4]
 800f92a:	f002 faf9 	bl	8011f20 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	68fa      	ldr	r2, [r7, #12]
 800f934:	6892      	ldr	r2, [r2, #8]
 800f936:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	68fa      	ldr	r2, [r7, #12]
 800f940:	6892      	ldr	r2, [r2, #8]
 800f942:	f041 0101 	orr.w	r1, r1, #1
 800f946:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800f94a:	4b07      	ldr	r3, [pc, #28]	; (800f968 <HAL_SRAM_Init+0x9c>)
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	4a06      	ldr	r2, [pc, #24]	; (800f968 <HAL_SRAM_Init+0x9c>)
 800f950:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f954:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	2201      	movs	r2, #1
 800f95a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800f95e:	2300      	movs	r3, #0
}
 800f960:	4618      	mov	r0, r3
 800f962:	3710      	adds	r7, #16
 800f964:	46bd      	mov	sp, r7
 800f966:	bd80      	pop	{r7, pc}
 800f968:	52004000 	.word	0x52004000

0800f96c <HAL_SRAM_Write_8b>:
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pSrcBuffer,
                                    uint32_t BufferSize)
{
 800f96c:	b480      	push	{r7}
 800f96e:	b089      	sub	sp, #36	; 0x24
 800f970:	af00      	add	r7, sp, #0
 800f972:	60f8      	str	r0, [r7, #12]
 800f974:	60b9      	str	r1, [r7, #8]
 800f976:	607a      	str	r2, [r7, #4]
 800f978:	603b      	str	r3, [r7, #0]
  uint32_t size;
  __IO uint8_t *psramaddress = (uint8_t *)pAddress;
 800f97a:	68bb      	ldr	r3, [r7, #8]
 800f97c:	61bb      	str	r3, [r7, #24]
  uint8_t *psrcbuff = pSrcBuffer;
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	617b      	str	r3, [r7, #20]

  /* Check the SRAM controller state */
  if (hsram->State == HAL_SRAM_STATE_READY)
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f988:	b2db      	uxtb	r3, r3
 800f98a:	2b01      	cmp	r3, #1
 800f98c:	d12b      	bne.n	800f9e6 <HAL_SRAM_Write_8b+0x7a>
  {
    /* Process Locked */
    __HAL_LOCK(hsram);
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f994:	2b01      	cmp	r3, #1
 800f996:	d101      	bne.n	800f99c <HAL_SRAM_Write_8b+0x30>
 800f998:	2302      	movs	r3, #2
 800f99a:	e025      	b.n	800f9e8 <HAL_SRAM_Write_8b+0x7c>
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	2201      	movs	r2, #1
 800f9a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_BUSY;
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	2202      	movs	r2, #2
 800f9a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Write data to memory */
    for (size = BufferSize; size != 0U; size--)
 800f9ac:	683b      	ldr	r3, [r7, #0]
 800f9ae:	61fb      	str	r3, [r7, #28]
 800f9b0:	e00c      	b.n	800f9cc <HAL_SRAM_Write_8b+0x60>
    {
      *psramaddress = *psrcbuff;
 800f9b2:	697b      	ldr	r3, [r7, #20]
 800f9b4:	781a      	ldrb	r2, [r3, #0]
 800f9b6:	69bb      	ldr	r3, [r7, #24]
 800f9b8:	701a      	strb	r2, [r3, #0]
      psrcbuff++;
 800f9ba:	697b      	ldr	r3, [r7, #20]
 800f9bc:	3301      	adds	r3, #1
 800f9be:	617b      	str	r3, [r7, #20]
      psramaddress++;
 800f9c0:	69bb      	ldr	r3, [r7, #24]
 800f9c2:	3301      	adds	r3, #1
 800f9c4:	61bb      	str	r3, [r7, #24]
    for (size = BufferSize; size != 0U; size--)
 800f9c6:	69fb      	ldr	r3, [r7, #28]
 800f9c8:	3b01      	subs	r3, #1
 800f9ca:	61fb      	str	r3, [r7, #28]
 800f9cc:	69fb      	ldr	r3, [r7, #28]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d1ef      	bne.n	800f9b2 <HAL_SRAM_Write_8b+0x46>
    }

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_READY;
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	2201      	movs	r2, #1
 800f9d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Process unlocked */
    __HAL_UNLOCK(hsram);
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	2200      	movs	r2, #0
 800f9de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	e000      	b.n	800f9e8 <HAL_SRAM_Write_8b+0x7c>
    return HAL_ERROR;
 800f9e6:	2301      	movs	r3, #1
}
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	3724      	adds	r7, #36	; 0x24
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f2:	4770      	bx	lr

0800f9f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b082      	sub	sp, #8
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d101      	bne.n	800fa06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800fa02:	2301      	movs	r3, #1
 800fa04:	e049      	b.n	800fa9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fa0c:	b2db      	uxtb	r3, r3
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d106      	bne.n	800fa20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	2200      	movs	r2, #0
 800fa16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fa1a:	6878      	ldr	r0, [r7, #4]
 800fa1c:	f7f3 ff08 	bl	8003830 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	2202      	movs	r2, #2
 800fa24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	681a      	ldr	r2, [r3, #0]
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	3304      	adds	r3, #4
 800fa30:	4619      	mov	r1, r3
 800fa32:	4610      	mov	r0, r2
 800fa34:	f000 fae6 	bl	8010004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	2201      	movs	r2, #1
 800fa3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	2201      	movs	r2, #1
 800fa44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	2201      	movs	r2, #1
 800fa4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	2201      	movs	r2, #1
 800fa54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	2201      	movs	r2, #1
 800fa5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	2201      	movs	r2, #1
 800fa64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	2201      	movs	r2, #1
 800fa6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	2201      	movs	r2, #1
 800fa74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	2201      	movs	r2, #1
 800fa7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	2201      	movs	r2, #1
 800fa84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	2201      	movs	r2, #1
 800fa8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	2201      	movs	r2, #1
 800fa94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fa98:	2300      	movs	r3, #0
}
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	3708      	adds	r7, #8
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	bd80      	pop	{r7, pc}

0800faa2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800faa2:	b580      	push	{r7, lr}
 800faa4:	b082      	sub	sp, #8
 800faa6:	af00      	add	r7, sp, #0
 800faa8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d101      	bne.n	800fab4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800fab0:	2301      	movs	r3, #1
 800fab2:	e049      	b.n	800fb48 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800faba:	b2db      	uxtb	r3, r3
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d106      	bne.n	800face <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	2200      	movs	r2, #0
 800fac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800fac8:	6878      	ldr	r0, [r7, #4]
 800faca:	f7f3 fe8f 	bl	80037ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2202      	movs	r2, #2
 800fad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	681a      	ldr	r2, [r3, #0]
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	3304      	adds	r3, #4
 800fade:	4619      	mov	r1, r3
 800fae0:	4610      	mov	r0, r2
 800fae2:	f000 fa8f 	bl	8010004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	2201      	movs	r2, #1
 800faea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	2201      	movs	r2, #1
 800faf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	2201      	movs	r2, #1
 800fafa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	2201      	movs	r2, #1
 800fb02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	2201      	movs	r2, #1
 800fb0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	2201      	movs	r2, #1
 800fb12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	2201      	movs	r2, #1
 800fb1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	2201      	movs	r2, #1
 800fb22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	2201      	movs	r2, #1
 800fb2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	2201      	movs	r2, #1
 800fb32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	2201      	movs	r2, #1
 800fb3a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	2201      	movs	r2, #1
 800fb42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fb46:	2300      	movs	r3, #0
}
 800fb48:	4618      	mov	r0, r3
 800fb4a:	3708      	adds	r7, #8
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	bd80      	pop	{r7, pc}

0800fb50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b084      	sub	sp, #16
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
 800fb58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800fb5a:	683b      	ldr	r3, [r7, #0]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d109      	bne.n	800fb74 <HAL_TIM_PWM_Start+0x24>
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fb66:	b2db      	uxtb	r3, r3
 800fb68:	2b01      	cmp	r3, #1
 800fb6a:	bf14      	ite	ne
 800fb6c:	2301      	movne	r3, #1
 800fb6e:	2300      	moveq	r3, #0
 800fb70:	b2db      	uxtb	r3, r3
 800fb72:	e03c      	b.n	800fbee <HAL_TIM_PWM_Start+0x9e>
 800fb74:	683b      	ldr	r3, [r7, #0]
 800fb76:	2b04      	cmp	r3, #4
 800fb78:	d109      	bne.n	800fb8e <HAL_TIM_PWM_Start+0x3e>
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800fb80:	b2db      	uxtb	r3, r3
 800fb82:	2b01      	cmp	r3, #1
 800fb84:	bf14      	ite	ne
 800fb86:	2301      	movne	r3, #1
 800fb88:	2300      	moveq	r3, #0
 800fb8a:	b2db      	uxtb	r3, r3
 800fb8c:	e02f      	b.n	800fbee <HAL_TIM_PWM_Start+0x9e>
 800fb8e:	683b      	ldr	r3, [r7, #0]
 800fb90:	2b08      	cmp	r3, #8
 800fb92:	d109      	bne.n	800fba8 <HAL_TIM_PWM_Start+0x58>
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fb9a:	b2db      	uxtb	r3, r3
 800fb9c:	2b01      	cmp	r3, #1
 800fb9e:	bf14      	ite	ne
 800fba0:	2301      	movne	r3, #1
 800fba2:	2300      	moveq	r3, #0
 800fba4:	b2db      	uxtb	r3, r3
 800fba6:	e022      	b.n	800fbee <HAL_TIM_PWM_Start+0x9e>
 800fba8:	683b      	ldr	r3, [r7, #0]
 800fbaa:	2b0c      	cmp	r3, #12
 800fbac:	d109      	bne.n	800fbc2 <HAL_TIM_PWM_Start+0x72>
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fbb4:	b2db      	uxtb	r3, r3
 800fbb6:	2b01      	cmp	r3, #1
 800fbb8:	bf14      	ite	ne
 800fbba:	2301      	movne	r3, #1
 800fbbc:	2300      	moveq	r3, #0
 800fbbe:	b2db      	uxtb	r3, r3
 800fbc0:	e015      	b.n	800fbee <HAL_TIM_PWM_Start+0x9e>
 800fbc2:	683b      	ldr	r3, [r7, #0]
 800fbc4:	2b10      	cmp	r3, #16
 800fbc6:	d109      	bne.n	800fbdc <HAL_TIM_PWM_Start+0x8c>
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fbce:	b2db      	uxtb	r3, r3
 800fbd0:	2b01      	cmp	r3, #1
 800fbd2:	bf14      	ite	ne
 800fbd4:	2301      	movne	r3, #1
 800fbd6:	2300      	moveq	r3, #0
 800fbd8:	b2db      	uxtb	r3, r3
 800fbda:	e008      	b.n	800fbee <HAL_TIM_PWM_Start+0x9e>
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fbe2:	b2db      	uxtb	r3, r3
 800fbe4:	2b01      	cmp	r3, #1
 800fbe6:	bf14      	ite	ne
 800fbe8:	2301      	movne	r3, #1
 800fbea:	2300      	moveq	r3, #0
 800fbec:	b2db      	uxtb	r3, r3
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d001      	beq.n	800fbf6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800fbf2:	2301      	movs	r3, #1
 800fbf4:	e09c      	b.n	800fd30 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fbf6:	683b      	ldr	r3, [r7, #0]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d104      	bne.n	800fc06 <HAL_TIM_PWM_Start+0xb6>
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	2202      	movs	r2, #2
 800fc00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fc04:	e023      	b.n	800fc4e <HAL_TIM_PWM_Start+0xfe>
 800fc06:	683b      	ldr	r3, [r7, #0]
 800fc08:	2b04      	cmp	r3, #4
 800fc0a:	d104      	bne.n	800fc16 <HAL_TIM_PWM_Start+0xc6>
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	2202      	movs	r2, #2
 800fc10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fc14:	e01b      	b.n	800fc4e <HAL_TIM_PWM_Start+0xfe>
 800fc16:	683b      	ldr	r3, [r7, #0]
 800fc18:	2b08      	cmp	r3, #8
 800fc1a:	d104      	bne.n	800fc26 <HAL_TIM_PWM_Start+0xd6>
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	2202      	movs	r2, #2
 800fc20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fc24:	e013      	b.n	800fc4e <HAL_TIM_PWM_Start+0xfe>
 800fc26:	683b      	ldr	r3, [r7, #0]
 800fc28:	2b0c      	cmp	r3, #12
 800fc2a:	d104      	bne.n	800fc36 <HAL_TIM_PWM_Start+0xe6>
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	2202      	movs	r2, #2
 800fc30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fc34:	e00b      	b.n	800fc4e <HAL_TIM_PWM_Start+0xfe>
 800fc36:	683b      	ldr	r3, [r7, #0]
 800fc38:	2b10      	cmp	r3, #16
 800fc3a:	d104      	bne.n	800fc46 <HAL_TIM_PWM_Start+0xf6>
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	2202      	movs	r2, #2
 800fc40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fc44:	e003      	b.n	800fc4e <HAL_TIM_PWM_Start+0xfe>
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	2202      	movs	r2, #2
 800fc4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	2201      	movs	r2, #1
 800fc54:	6839      	ldr	r1, [r7, #0]
 800fc56:	4618      	mov	r0, r3
 800fc58:	f000 fea1 	bl	801099e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	4a35      	ldr	r2, [pc, #212]	; (800fd38 <HAL_TIM_PWM_Start+0x1e8>)
 800fc62:	4293      	cmp	r3, r2
 800fc64:	d013      	beq.n	800fc8e <HAL_TIM_PWM_Start+0x13e>
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	4a34      	ldr	r2, [pc, #208]	; (800fd3c <HAL_TIM_PWM_Start+0x1ec>)
 800fc6c:	4293      	cmp	r3, r2
 800fc6e:	d00e      	beq.n	800fc8e <HAL_TIM_PWM_Start+0x13e>
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	4a32      	ldr	r2, [pc, #200]	; (800fd40 <HAL_TIM_PWM_Start+0x1f0>)
 800fc76:	4293      	cmp	r3, r2
 800fc78:	d009      	beq.n	800fc8e <HAL_TIM_PWM_Start+0x13e>
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	4a31      	ldr	r2, [pc, #196]	; (800fd44 <HAL_TIM_PWM_Start+0x1f4>)
 800fc80:	4293      	cmp	r3, r2
 800fc82:	d004      	beq.n	800fc8e <HAL_TIM_PWM_Start+0x13e>
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	4a2f      	ldr	r2, [pc, #188]	; (800fd48 <HAL_TIM_PWM_Start+0x1f8>)
 800fc8a:	4293      	cmp	r3, r2
 800fc8c:	d101      	bne.n	800fc92 <HAL_TIM_PWM_Start+0x142>
 800fc8e:	2301      	movs	r3, #1
 800fc90:	e000      	b.n	800fc94 <HAL_TIM_PWM_Start+0x144>
 800fc92:	2300      	movs	r3, #0
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d007      	beq.n	800fca8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fca6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	4a22      	ldr	r2, [pc, #136]	; (800fd38 <HAL_TIM_PWM_Start+0x1e8>)
 800fcae:	4293      	cmp	r3, r2
 800fcb0:	d01d      	beq.n	800fcee <HAL_TIM_PWM_Start+0x19e>
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fcba:	d018      	beq.n	800fcee <HAL_TIM_PWM_Start+0x19e>
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	4a22      	ldr	r2, [pc, #136]	; (800fd4c <HAL_TIM_PWM_Start+0x1fc>)
 800fcc2:	4293      	cmp	r3, r2
 800fcc4:	d013      	beq.n	800fcee <HAL_TIM_PWM_Start+0x19e>
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	4a21      	ldr	r2, [pc, #132]	; (800fd50 <HAL_TIM_PWM_Start+0x200>)
 800fccc:	4293      	cmp	r3, r2
 800fcce:	d00e      	beq.n	800fcee <HAL_TIM_PWM_Start+0x19e>
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	4a1f      	ldr	r2, [pc, #124]	; (800fd54 <HAL_TIM_PWM_Start+0x204>)
 800fcd6:	4293      	cmp	r3, r2
 800fcd8:	d009      	beq.n	800fcee <HAL_TIM_PWM_Start+0x19e>
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	4a17      	ldr	r2, [pc, #92]	; (800fd3c <HAL_TIM_PWM_Start+0x1ec>)
 800fce0:	4293      	cmp	r3, r2
 800fce2:	d004      	beq.n	800fcee <HAL_TIM_PWM_Start+0x19e>
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	4a1b      	ldr	r2, [pc, #108]	; (800fd58 <HAL_TIM_PWM_Start+0x208>)
 800fcea:	4293      	cmp	r3, r2
 800fcec:	d115      	bne.n	800fd1a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	689a      	ldr	r2, [r3, #8]
 800fcf4:	4b19      	ldr	r3, [pc, #100]	; (800fd5c <HAL_TIM_PWM_Start+0x20c>)
 800fcf6:	4013      	ands	r3, r2
 800fcf8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	2b06      	cmp	r3, #6
 800fcfe:	d015      	beq.n	800fd2c <HAL_TIM_PWM_Start+0x1dc>
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fd06:	d011      	beq.n	800fd2c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	681a      	ldr	r2, [r3, #0]
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	f042 0201 	orr.w	r2, r2, #1
 800fd16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fd18:	e008      	b.n	800fd2c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	681a      	ldr	r2, [r3, #0]
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	f042 0201 	orr.w	r2, r2, #1
 800fd28:	601a      	str	r2, [r3, #0]
 800fd2a:	e000      	b.n	800fd2e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fd2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fd2e:	2300      	movs	r3, #0
}
 800fd30:	4618      	mov	r0, r3
 800fd32:	3710      	adds	r7, #16
 800fd34:	46bd      	mov	sp, r7
 800fd36:	bd80      	pop	{r7, pc}
 800fd38:	40010000 	.word	0x40010000
 800fd3c:	40010400 	.word	0x40010400
 800fd40:	40014000 	.word	0x40014000
 800fd44:	40014400 	.word	0x40014400
 800fd48:	40014800 	.word	0x40014800
 800fd4c:	40000400 	.word	0x40000400
 800fd50:	40000800 	.word	0x40000800
 800fd54:	40000c00 	.word	0x40000c00
 800fd58:	40001800 	.word	0x40001800
 800fd5c:	00010007 	.word	0x00010007

0800fd60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fd60:	b580      	push	{r7, lr}
 800fd62:	b084      	sub	sp, #16
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	60f8      	str	r0, [r7, #12]
 800fd68:	60b9      	str	r1, [r7, #8]
 800fd6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fd72:	2b01      	cmp	r3, #1
 800fd74:	d101      	bne.n	800fd7a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800fd76:	2302      	movs	r3, #2
 800fd78:	e0fd      	b.n	800ff76 <HAL_TIM_PWM_ConfigChannel+0x216>
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	2201      	movs	r2, #1
 800fd7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	2b14      	cmp	r3, #20
 800fd86:	f200 80f0 	bhi.w	800ff6a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800fd8a:	a201      	add	r2, pc, #4	; (adr r2, 800fd90 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800fd8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd90:	0800fde5 	.word	0x0800fde5
 800fd94:	0800ff6b 	.word	0x0800ff6b
 800fd98:	0800ff6b 	.word	0x0800ff6b
 800fd9c:	0800ff6b 	.word	0x0800ff6b
 800fda0:	0800fe25 	.word	0x0800fe25
 800fda4:	0800ff6b 	.word	0x0800ff6b
 800fda8:	0800ff6b 	.word	0x0800ff6b
 800fdac:	0800ff6b 	.word	0x0800ff6b
 800fdb0:	0800fe67 	.word	0x0800fe67
 800fdb4:	0800ff6b 	.word	0x0800ff6b
 800fdb8:	0800ff6b 	.word	0x0800ff6b
 800fdbc:	0800ff6b 	.word	0x0800ff6b
 800fdc0:	0800fea7 	.word	0x0800fea7
 800fdc4:	0800ff6b 	.word	0x0800ff6b
 800fdc8:	0800ff6b 	.word	0x0800ff6b
 800fdcc:	0800ff6b 	.word	0x0800ff6b
 800fdd0:	0800fee9 	.word	0x0800fee9
 800fdd4:	0800ff6b 	.word	0x0800ff6b
 800fdd8:	0800ff6b 	.word	0x0800ff6b
 800fddc:	0800ff6b 	.word	0x0800ff6b
 800fde0:	0800ff29 	.word	0x0800ff29
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	68b9      	ldr	r1, [r7, #8]
 800fdea:	4618      	mov	r0, r3
 800fdec:	f000 f9a4 	bl	8010138 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	699a      	ldr	r2, [r3, #24]
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	f042 0208 	orr.w	r2, r2, #8
 800fdfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	699a      	ldr	r2, [r3, #24]
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	f022 0204 	bic.w	r2, r2, #4
 800fe0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	6999      	ldr	r1, [r3, #24]
 800fe16:	68bb      	ldr	r3, [r7, #8]
 800fe18:	691a      	ldr	r2, [r3, #16]
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	430a      	orrs	r2, r1
 800fe20:	619a      	str	r2, [r3, #24]
      break;
 800fe22:	e0a3      	b.n	800ff6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	68b9      	ldr	r1, [r7, #8]
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	f000 fa14 	bl	8010258 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	699a      	ldr	r2, [r3, #24]
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fe3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	699a      	ldr	r2, [r3, #24]
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fe4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	6999      	ldr	r1, [r3, #24]
 800fe56:	68bb      	ldr	r3, [r7, #8]
 800fe58:	691b      	ldr	r3, [r3, #16]
 800fe5a:	021a      	lsls	r2, r3, #8
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	430a      	orrs	r2, r1
 800fe62:	619a      	str	r2, [r3, #24]
      break;
 800fe64:	e082      	b.n	800ff6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	68b9      	ldr	r1, [r7, #8]
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	f000 fa7d 	bl	801036c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	69da      	ldr	r2, [r3, #28]
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	f042 0208 	orr.w	r2, r2, #8
 800fe80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	69da      	ldr	r2, [r3, #28]
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	f022 0204 	bic.w	r2, r2, #4
 800fe90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	69d9      	ldr	r1, [r3, #28]
 800fe98:	68bb      	ldr	r3, [r7, #8]
 800fe9a:	691a      	ldr	r2, [r3, #16]
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	430a      	orrs	r2, r1
 800fea2:	61da      	str	r2, [r3, #28]
      break;
 800fea4:	e062      	b.n	800ff6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	68b9      	ldr	r1, [r7, #8]
 800feac:	4618      	mov	r0, r3
 800feae:	f000 fae3 	bl	8010478 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	69da      	ldr	r2, [r3, #28]
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fec0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	69da      	ldr	r2, [r3, #28]
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fed0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	69d9      	ldr	r1, [r3, #28]
 800fed8:	68bb      	ldr	r3, [r7, #8]
 800feda:	691b      	ldr	r3, [r3, #16]
 800fedc:	021a      	lsls	r2, r3, #8
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	430a      	orrs	r2, r1
 800fee4:	61da      	str	r2, [r3, #28]
      break;
 800fee6:	e041      	b.n	800ff6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	68b9      	ldr	r1, [r7, #8]
 800feee:	4618      	mov	r0, r3
 800fef0:	f000 fb2a 	bl	8010548 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	f042 0208 	orr.w	r2, r2, #8
 800ff02:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	f022 0204 	bic.w	r2, r2, #4
 800ff12:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ff1a:	68bb      	ldr	r3, [r7, #8]
 800ff1c:	691a      	ldr	r2, [r3, #16]
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	430a      	orrs	r2, r1
 800ff24:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ff26:	e021      	b.n	800ff6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	68b9      	ldr	r1, [r7, #8]
 800ff2e:	4618      	mov	r0, r3
 800ff30:	f000 fb6c 	bl	801060c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ff42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ff52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ff5a:	68bb      	ldr	r3, [r7, #8]
 800ff5c:	691b      	ldr	r3, [r3, #16]
 800ff5e:	021a      	lsls	r2, r3, #8
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	430a      	orrs	r2, r1
 800ff66:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ff68:	e000      	b.n	800ff6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800ff6a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	2200      	movs	r2, #0
 800ff70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ff74:	2300      	movs	r3, #0
}
 800ff76:	4618      	mov	r0, r3
 800ff78:	3710      	adds	r7, #16
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}
 800ff7e:	bf00      	nop

0800ff80 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b082      	sub	sp, #8
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
 800ff88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ff90:	2b01      	cmp	r3, #1
 800ff92:	d101      	bne.n	800ff98 <HAL_TIM_SlaveConfigSynchro+0x18>
 800ff94:	2302      	movs	r3, #2
 800ff96:	e031      	b.n	800fffc <HAL_TIM_SlaveConfigSynchro+0x7c>
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	2201      	movs	r2, #1
 800ff9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	2202      	movs	r2, #2
 800ffa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800ffa8:	6839      	ldr	r1, [r7, #0]
 800ffaa:	6878      	ldr	r0, [r7, #4]
 800ffac:	f000 fb92 	bl	80106d4 <TIM_SlaveTimer_SetConfig>
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d009      	beq.n	800ffca <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	2201      	movs	r2, #1
 800ffba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	2200      	movs	r2, #0
 800ffc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800ffc6:	2301      	movs	r3, #1
 800ffc8:	e018      	b.n	800fffc <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	68da      	ldr	r2, [r3, #12]
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ffd8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	68da      	ldr	r2, [r3, #12]
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ffe8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	2201      	movs	r2, #1
 800ffee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	2200      	movs	r2, #0
 800fff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fffa:	2300      	movs	r3, #0
}
 800fffc:	4618      	mov	r0, r3
 800fffe:	3708      	adds	r7, #8
 8010000:	46bd      	mov	sp, r7
 8010002:	bd80      	pop	{r7, pc}

08010004 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010004:	b480      	push	{r7}
 8010006:	b085      	sub	sp, #20
 8010008:	af00      	add	r7, sp, #0
 801000a:	6078      	str	r0, [r7, #4]
 801000c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	4a40      	ldr	r2, [pc, #256]	; (8010118 <TIM_Base_SetConfig+0x114>)
 8010018:	4293      	cmp	r3, r2
 801001a:	d013      	beq.n	8010044 <TIM_Base_SetConfig+0x40>
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010022:	d00f      	beq.n	8010044 <TIM_Base_SetConfig+0x40>
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	4a3d      	ldr	r2, [pc, #244]	; (801011c <TIM_Base_SetConfig+0x118>)
 8010028:	4293      	cmp	r3, r2
 801002a:	d00b      	beq.n	8010044 <TIM_Base_SetConfig+0x40>
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	4a3c      	ldr	r2, [pc, #240]	; (8010120 <TIM_Base_SetConfig+0x11c>)
 8010030:	4293      	cmp	r3, r2
 8010032:	d007      	beq.n	8010044 <TIM_Base_SetConfig+0x40>
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	4a3b      	ldr	r2, [pc, #236]	; (8010124 <TIM_Base_SetConfig+0x120>)
 8010038:	4293      	cmp	r3, r2
 801003a:	d003      	beq.n	8010044 <TIM_Base_SetConfig+0x40>
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	4a3a      	ldr	r2, [pc, #232]	; (8010128 <TIM_Base_SetConfig+0x124>)
 8010040:	4293      	cmp	r3, r2
 8010042:	d108      	bne.n	8010056 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801004a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801004c:	683b      	ldr	r3, [r7, #0]
 801004e:	685b      	ldr	r3, [r3, #4]
 8010050:	68fa      	ldr	r2, [r7, #12]
 8010052:	4313      	orrs	r3, r2
 8010054:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	4a2f      	ldr	r2, [pc, #188]	; (8010118 <TIM_Base_SetConfig+0x114>)
 801005a:	4293      	cmp	r3, r2
 801005c:	d01f      	beq.n	801009e <TIM_Base_SetConfig+0x9a>
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010064:	d01b      	beq.n	801009e <TIM_Base_SetConfig+0x9a>
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	4a2c      	ldr	r2, [pc, #176]	; (801011c <TIM_Base_SetConfig+0x118>)
 801006a:	4293      	cmp	r3, r2
 801006c:	d017      	beq.n	801009e <TIM_Base_SetConfig+0x9a>
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	4a2b      	ldr	r2, [pc, #172]	; (8010120 <TIM_Base_SetConfig+0x11c>)
 8010072:	4293      	cmp	r3, r2
 8010074:	d013      	beq.n	801009e <TIM_Base_SetConfig+0x9a>
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	4a2a      	ldr	r2, [pc, #168]	; (8010124 <TIM_Base_SetConfig+0x120>)
 801007a:	4293      	cmp	r3, r2
 801007c:	d00f      	beq.n	801009e <TIM_Base_SetConfig+0x9a>
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	4a29      	ldr	r2, [pc, #164]	; (8010128 <TIM_Base_SetConfig+0x124>)
 8010082:	4293      	cmp	r3, r2
 8010084:	d00b      	beq.n	801009e <TIM_Base_SetConfig+0x9a>
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	4a28      	ldr	r2, [pc, #160]	; (801012c <TIM_Base_SetConfig+0x128>)
 801008a:	4293      	cmp	r3, r2
 801008c:	d007      	beq.n	801009e <TIM_Base_SetConfig+0x9a>
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	4a27      	ldr	r2, [pc, #156]	; (8010130 <TIM_Base_SetConfig+0x12c>)
 8010092:	4293      	cmp	r3, r2
 8010094:	d003      	beq.n	801009e <TIM_Base_SetConfig+0x9a>
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	4a26      	ldr	r2, [pc, #152]	; (8010134 <TIM_Base_SetConfig+0x130>)
 801009a:	4293      	cmp	r3, r2
 801009c:	d108      	bne.n	80100b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80100a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80100a6:	683b      	ldr	r3, [r7, #0]
 80100a8:	68db      	ldr	r3, [r3, #12]
 80100aa:	68fa      	ldr	r2, [r7, #12]
 80100ac:	4313      	orrs	r3, r2
 80100ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80100b6:	683b      	ldr	r3, [r7, #0]
 80100b8:	695b      	ldr	r3, [r3, #20]
 80100ba:	4313      	orrs	r3, r2
 80100bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	68fa      	ldr	r2, [r7, #12]
 80100c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80100c4:	683b      	ldr	r3, [r7, #0]
 80100c6:	689a      	ldr	r2, [r3, #8]
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80100cc:	683b      	ldr	r3, [r7, #0]
 80100ce:	681a      	ldr	r2, [r3, #0]
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	4a10      	ldr	r2, [pc, #64]	; (8010118 <TIM_Base_SetConfig+0x114>)
 80100d8:	4293      	cmp	r3, r2
 80100da:	d00f      	beq.n	80100fc <TIM_Base_SetConfig+0xf8>
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	4a12      	ldr	r2, [pc, #72]	; (8010128 <TIM_Base_SetConfig+0x124>)
 80100e0:	4293      	cmp	r3, r2
 80100e2:	d00b      	beq.n	80100fc <TIM_Base_SetConfig+0xf8>
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	4a11      	ldr	r2, [pc, #68]	; (801012c <TIM_Base_SetConfig+0x128>)
 80100e8:	4293      	cmp	r3, r2
 80100ea:	d007      	beq.n	80100fc <TIM_Base_SetConfig+0xf8>
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	4a10      	ldr	r2, [pc, #64]	; (8010130 <TIM_Base_SetConfig+0x12c>)
 80100f0:	4293      	cmp	r3, r2
 80100f2:	d003      	beq.n	80100fc <TIM_Base_SetConfig+0xf8>
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	4a0f      	ldr	r2, [pc, #60]	; (8010134 <TIM_Base_SetConfig+0x130>)
 80100f8:	4293      	cmp	r3, r2
 80100fa:	d103      	bne.n	8010104 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80100fc:	683b      	ldr	r3, [r7, #0]
 80100fe:	691a      	ldr	r2, [r3, #16]
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	2201      	movs	r2, #1
 8010108:	615a      	str	r2, [r3, #20]
}
 801010a:	bf00      	nop
 801010c:	3714      	adds	r7, #20
 801010e:	46bd      	mov	sp, r7
 8010110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010114:	4770      	bx	lr
 8010116:	bf00      	nop
 8010118:	40010000 	.word	0x40010000
 801011c:	40000400 	.word	0x40000400
 8010120:	40000800 	.word	0x40000800
 8010124:	40000c00 	.word	0x40000c00
 8010128:	40010400 	.word	0x40010400
 801012c:	40014000 	.word	0x40014000
 8010130:	40014400 	.word	0x40014400
 8010134:	40014800 	.word	0x40014800

08010138 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010138:	b480      	push	{r7}
 801013a:	b087      	sub	sp, #28
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
 8010140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	6a1b      	ldr	r3, [r3, #32]
 8010146:	f023 0201 	bic.w	r2, r3, #1
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	6a1b      	ldr	r3, [r3, #32]
 8010152:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	685b      	ldr	r3, [r3, #4]
 8010158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	699b      	ldr	r3, [r3, #24]
 801015e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010160:	68fa      	ldr	r2, [r7, #12]
 8010162:	4b37      	ldr	r3, [pc, #220]	; (8010240 <TIM_OC1_SetConfig+0x108>)
 8010164:	4013      	ands	r3, r2
 8010166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	f023 0303 	bic.w	r3, r3, #3
 801016e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010170:	683b      	ldr	r3, [r7, #0]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	68fa      	ldr	r2, [r7, #12]
 8010176:	4313      	orrs	r3, r2
 8010178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801017a:	697b      	ldr	r3, [r7, #20]
 801017c:	f023 0302 	bic.w	r3, r3, #2
 8010180:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010182:	683b      	ldr	r3, [r7, #0]
 8010184:	689b      	ldr	r3, [r3, #8]
 8010186:	697a      	ldr	r2, [r7, #20]
 8010188:	4313      	orrs	r3, r2
 801018a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	4a2d      	ldr	r2, [pc, #180]	; (8010244 <TIM_OC1_SetConfig+0x10c>)
 8010190:	4293      	cmp	r3, r2
 8010192:	d00f      	beq.n	80101b4 <TIM_OC1_SetConfig+0x7c>
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	4a2c      	ldr	r2, [pc, #176]	; (8010248 <TIM_OC1_SetConfig+0x110>)
 8010198:	4293      	cmp	r3, r2
 801019a:	d00b      	beq.n	80101b4 <TIM_OC1_SetConfig+0x7c>
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	4a2b      	ldr	r2, [pc, #172]	; (801024c <TIM_OC1_SetConfig+0x114>)
 80101a0:	4293      	cmp	r3, r2
 80101a2:	d007      	beq.n	80101b4 <TIM_OC1_SetConfig+0x7c>
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	4a2a      	ldr	r2, [pc, #168]	; (8010250 <TIM_OC1_SetConfig+0x118>)
 80101a8:	4293      	cmp	r3, r2
 80101aa:	d003      	beq.n	80101b4 <TIM_OC1_SetConfig+0x7c>
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	4a29      	ldr	r2, [pc, #164]	; (8010254 <TIM_OC1_SetConfig+0x11c>)
 80101b0:	4293      	cmp	r3, r2
 80101b2:	d10c      	bne.n	80101ce <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80101b4:	697b      	ldr	r3, [r7, #20]
 80101b6:	f023 0308 	bic.w	r3, r3, #8
 80101ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80101bc:	683b      	ldr	r3, [r7, #0]
 80101be:	68db      	ldr	r3, [r3, #12]
 80101c0:	697a      	ldr	r2, [r7, #20]
 80101c2:	4313      	orrs	r3, r2
 80101c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80101c6:	697b      	ldr	r3, [r7, #20]
 80101c8:	f023 0304 	bic.w	r3, r3, #4
 80101cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	4a1c      	ldr	r2, [pc, #112]	; (8010244 <TIM_OC1_SetConfig+0x10c>)
 80101d2:	4293      	cmp	r3, r2
 80101d4:	d00f      	beq.n	80101f6 <TIM_OC1_SetConfig+0xbe>
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	4a1b      	ldr	r2, [pc, #108]	; (8010248 <TIM_OC1_SetConfig+0x110>)
 80101da:	4293      	cmp	r3, r2
 80101dc:	d00b      	beq.n	80101f6 <TIM_OC1_SetConfig+0xbe>
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	4a1a      	ldr	r2, [pc, #104]	; (801024c <TIM_OC1_SetConfig+0x114>)
 80101e2:	4293      	cmp	r3, r2
 80101e4:	d007      	beq.n	80101f6 <TIM_OC1_SetConfig+0xbe>
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	4a19      	ldr	r2, [pc, #100]	; (8010250 <TIM_OC1_SetConfig+0x118>)
 80101ea:	4293      	cmp	r3, r2
 80101ec:	d003      	beq.n	80101f6 <TIM_OC1_SetConfig+0xbe>
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	4a18      	ldr	r2, [pc, #96]	; (8010254 <TIM_OC1_SetConfig+0x11c>)
 80101f2:	4293      	cmp	r3, r2
 80101f4:	d111      	bne.n	801021a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80101f6:	693b      	ldr	r3, [r7, #16]
 80101f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80101fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80101fe:	693b      	ldr	r3, [r7, #16]
 8010200:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010204:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010206:	683b      	ldr	r3, [r7, #0]
 8010208:	695b      	ldr	r3, [r3, #20]
 801020a:	693a      	ldr	r2, [r7, #16]
 801020c:	4313      	orrs	r3, r2
 801020e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010210:	683b      	ldr	r3, [r7, #0]
 8010212:	699b      	ldr	r3, [r3, #24]
 8010214:	693a      	ldr	r2, [r7, #16]
 8010216:	4313      	orrs	r3, r2
 8010218:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	693a      	ldr	r2, [r7, #16]
 801021e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	68fa      	ldr	r2, [r7, #12]
 8010224:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010226:	683b      	ldr	r3, [r7, #0]
 8010228:	685a      	ldr	r2, [r3, #4]
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	697a      	ldr	r2, [r7, #20]
 8010232:	621a      	str	r2, [r3, #32]
}
 8010234:	bf00      	nop
 8010236:	371c      	adds	r7, #28
 8010238:	46bd      	mov	sp, r7
 801023a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023e:	4770      	bx	lr
 8010240:	fffeff8f 	.word	0xfffeff8f
 8010244:	40010000 	.word	0x40010000
 8010248:	40010400 	.word	0x40010400
 801024c:	40014000 	.word	0x40014000
 8010250:	40014400 	.word	0x40014400
 8010254:	40014800 	.word	0x40014800

08010258 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010258:	b480      	push	{r7}
 801025a:	b087      	sub	sp, #28
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
 8010260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	6a1b      	ldr	r3, [r3, #32]
 8010266:	f023 0210 	bic.w	r2, r3, #16
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	6a1b      	ldr	r3, [r3, #32]
 8010272:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	685b      	ldr	r3, [r3, #4]
 8010278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	699b      	ldr	r3, [r3, #24]
 801027e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010280:	68fa      	ldr	r2, [r7, #12]
 8010282:	4b34      	ldr	r3, [pc, #208]	; (8010354 <TIM_OC2_SetConfig+0xfc>)
 8010284:	4013      	ands	r3, r2
 8010286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801028e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010290:	683b      	ldr	r3, [r7, #0]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	021b      	lsls	r3, r3, #8
 8010296:	68fa      	ldr	r2, [r7, #12]
 8010298:	4313      	orrs	r3, r2
 801029a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801029c:	697b      	ldr	r3, [r7, #20]
 801029e:	f023 0320 	bic.w	r3, r3, #32
 80102a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80102a4:	683b      	ldr	r3, [r7, #0]
 80102a6:	689b      	ldr	r3, [r3, #8]
 80102a8:	011b      	lsls	r3, r3, #4
 80102aa:	697a      	ldr	r2, [r7, #20]
 80102ac:	4313      	orrs	r3, r2
 80102ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	4a29      	ldr	r2, [pc, #164]	; (8010358 <TIM_OC2_SetConfig+0x100>)
 80102b4:	4293      	cmp	r3, r2
 80102b6:	d003      	beq.n	80102c0 <TIM_OC2_SetConfig+0x68>
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	4a28      	ldr	r2, [pc, #160]	; (801035c <TIM_OC2_SetConfig+0x104>)
 80102bc:	4293      	cmp	r3, r2
 80102be:	d10d      	bne.n	80102dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80102c0:	697b      	ldr	r3, [r7, #20]
 80102c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80102c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80102c8:	683b      	ldr	r3, [r7, #0]
 80102ca:	68db      	ldr	r3, [r3, #12]
 80102cc:	011b      	lsls	r3, r3, #4
 80102ce:	697a      	ldr	r2, [r7, #20]
 80102d0:	4313      	orrs	r3, r2
 80102d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80102d4:	697b      	ldr	r3, [r7, #20]
 80102d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80102da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	4a1e      	ldr	r2, [pc, #120]	; (8010358 <TIM_OC2_SetConfig+0x100>)
 80102e0:	4293      	cmp	r3, r2
 80102e2:	d00f      	beq.n	8010304 <TIM_OC2_SetConfig+0xac>
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	4a1d      	ldr	r2, [pc, #116]	; (801035c <TIM_OC2_SetConfig+0x104>)
 80102e8:	4293      	cmp	r3, r2
 80102ea:	d00b      	beq.n	8010304 <TIM_OC2_SetConfig+0xac>
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	4a1c      	ldr	r2, [pc, #112]	; (8010360 <TIM_OC2_SetConfig+0x108>)
 80102f0:	4293      	cmp	r3, r2
 80102f2:	d007      	beq.n	8010304 <TIM_OC2_SetConfig+0xac>
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	4a1b      	ldr	r2, [pc, #108]	; (8010364 <TIM_OC2_SetConfig+0x10c>)
 80102f8:	4293      	cmp	r3, r2
 80102fa:	d003      	beq.n	8010304 <TIM_OC2_SetConfig+0xac>
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	4a1a      	ldr	r2, [pc, #104]	; (8010368 <TIM_OC2_SetConfig+0x110>)
 8010300:	4293      	cmp	r3, r2
 8010302:	d113      	bne.n	801032c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010304:	693b      	ldr	r3, [r7, #16]
 8010306:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801030a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801030c:	693b      	ldr	r3, [r7, #16]
 801030e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010312:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010314:	683b      	ldr	r3, [r7, #0]
 8010316:	695b      	ldr	r3, [r3, #20]
 8010318:	009b      	lsls	r3, r3, #2
 801031a:	693a      	ldr	r2, [r7, #16]
 801031c:	4313      	orrs	r3, r2
 801031e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010320:	683b      	ldr	r3, [r7, #0]
 8010322:	699b      	ldr	r3, [r3, #24]
 8010324:	009b      	lsls	r3, r3, #2
 8010326:	693a      	ldr	r2, [r7, #16]
 8010328:	4313      	orrs	r3, r2
 801032a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	693a      	ldr	r2, [r7, #16]
 8010330:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	68fa      	ldr	r2, [r7, #12]
 8010336:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010338:	683b      	ldr	r3, [r7, #0]
 801033a:	685a      	ldr	r2, [r3, #4]
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	697a      	ldr	r2, [r7, #20]
 8010344:	621a      	str	r2, [r3, #32]
}
 8010346:	bf00      	nop
 8010348:	371c      	adds	r7, #28
 801034a:	46bd      	mov	sp, r7
 801034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010350:	4770      	bx	lr
 8010352:	bf00      	nop
 8010354:	feff8fff 	.word	0xfeff8fff
 8010358:	40010000 	.word	0x40010000
 801035c:	40010400 	.word	0x40010400
 8010360:	40014000 	.word	0x40014000
 8010364:	40014400 	.word	0x40014400
 8010368:	40014800 	.word	0x40014800

0801036c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801036c:	b480      	push	{r7}
 801036e:	b087      	sub	sp, #28
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
 8010374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	6a1b      	ldr	r3, [r3, #32]
 801037a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	6a1b      	ldr	r3, [r3, #32]
 8010386:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	685b      	ldr	r3, [r3, #4]
 801038c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	69db      	ldr	r3, [r3, #28]
 8010392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801039a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	f023 0303 	bic.w	r3, r3, #3
 80103a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80103a4:	683b      	ldr	r3, [r7, #0]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	68fa      	ldr	r2, [r7, #12]
 80103aa:	4313      	orrs	r3, r2
 80103ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80103ae:	697b      	ldr	r3, [r7, #20]
 80103b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80103b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80103b6:	683b      	ldr	r3, [r7, #0]
 80103b8:	689b      	ldr	r3, [r3, #8]
 80103ba:	021b      	lsls	r3, r3, #8
 80103bc:	697a      	ldr	r2, [r7, #20]
 80103be:	4313      	orrs	r3, r2
 80103c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	4a27      	ldr	r2, [pc, #156]	; (8010464 <TIM_OC3_SetConfig+0xf8>)
 80103c6:	4293      	cmp	r3, r2
 80103c8:	d003      	beq.n	80103d2 <TIM_OC3_SetConfig+0x66>
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	4a26      	ldr	r2, [pc, #152]	; (8010468 <TIM_OC3_SetConfig+0xfc>)
 80103ce:	4293      	cmp	r3, r2
 80103d0:	d10d      	bne.n	80103ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80103d2:	697b      	ldr	r3, [r7, #20]
 80103d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80103d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80103da:	683b      	ldr	r3, [r7, #0]
 80103dc:	68db      	ldr	r3, [r3, #12]
 80103de:	021b      	lsls	r3, r3, #8
 80103e0:	697a      	ldr	r2, [r7, #20]
 80103e2:	4313      	orrs	r3, r2
 80103e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80103e6:	697b      	ldr	r3, [r7, #20]
 80103e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80103ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	4a1c      	ldr	r2, [pc, #112]	; (8010464 <TIM_OC3_SetConfig+0xf8>)
 80103f2:	4293      	cmp	r3, r2
 80103f4:	d00f      	beq.n	8010416 <TIM_OC3_SetConfig+0xaa>
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	4a1b      	ldr	r2, [pc, #108]	; (8010468 <TIM_OC3_SetConfig+0xfc>)
 80103fa:	4293      	cmp	r3, r2
 80103fc:	d00b      	beq.n	8010416 <TIM_OC3_SetConfig+0xaa>
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	4a1a      	ldr	r2, [pc, #104]	; (801046c <TIM_OC3_SetConfig+0x100>)
 8010402:	4293      	cmp	r3, r2
 8010404:	d007      	beq.n	8010416 <TIM_OC3_SetConfig+0xaa>
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	4a19      	ldr	r2, [pc, #100]	; (8010470 <TIM_OC3_SetConfig+0x104>)
 801040a:	4293      	cmp	r3, r2
 801040c:	d003      	beq.n	8010416 <TIM_OC3_SetConfig+0xaa>
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	4a18      	ldr	r2, [pc, #96]	; (8010474 <TIM_OC3_SetConfig+0x108>)
 8010412:	4293      	cmp	r3, r2
 8010414:	d113      	bne.n	801043e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010416:	693b      	ldr	r3, [r7, #16]
 8010418:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801041c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801041e:	693b      	ldr	r3, [r7, #16]
 8010420:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010424:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010426:	683b      	ldr	r3, [r7, #0]
 8010428:	695b      	ldr	r3, [r3, #20]
 801042a:	011b      	lsls	r3, r3, #4
 801042c:	693a      	ldr	r2, [r7, #16]
 801042e:	4313      	orrs	r3, r2
 8010430:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010432:	683b      	ldr	r3, [r7, #0]
 8010434:	699b      	ldr	r3, [r3, #24]
 8010436:	011b      	lsls	r3, r3, #4
 8010438:	693a      	ldr	r2, [r7, #16]
 801043a:	4313      	orrs	r3, r2
 801043c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	693a      	ldr	r2, [r7, #16]
 8010442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	68fa      	ldr	r2, [r7, #12]
 8010448:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801044a:	683b      	ldr	r3, [r7, #0]
 801044c:	685a      	ldr	r2, [r3, #4]
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	697a      	ldr	r2, [r7, #20]
 8010456:	621a      	str	r2, [r3, #32]
}
 8010458:	bf00      	nop
 801045a:	371c      	adds	r7, #28
 801045c:	46bd      	mov	sp, r7
 801045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010462:	4770      	bx	lr
 8010464:	40010000 	.word	0x40010000
 8010468:	40010400 	.word	0x40010400
 801046c:	40014000 	.word	0x40014000
 8010470:	40014400 	.word	0x40014400
 8010474:	40014800 	.word	0x40014800

08010478 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010478:	b480      	push	{r7}
 801047a:	b087      	sub	sp, #28
 801047c:	af00      	add	r7, sp, #0
 801047e:	6078      	str	r0, [r7, #4]
 8010480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	6a1b      	ldr	r3, [r3, #32]
 8010486:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	6a1b      	ldr	r3, [r3, #32]
 8010492:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	685b      	ldr	r3, [r3, #4]
 8010498:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	69db      	ldr	r3, [r3, #28]
 801049e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80104a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80104ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80104b0:	683b      	ldr	r3, [r7, #0]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	021b      	lsls	r3, r3, #8
 80104b6:	68fa      	ldr	r2, [r7, #12]
 80104b8:	4313      	orrs	r3, r2
 80104ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80104bc:	693b      	ldr	r3, [r7, #16]
 80104be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80104c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80104c4:	683b      	ldr	r3, [r7, #0]
 80104c6:	689b      	ldr	r3, [r3, #8]
 80104c8:	031b      	lsls	r3, r3, #12
 80104ca:	693a      	ldr	r2, [r7, #16]
 80104cc:	4313      	orrs	r3, r2
 80104ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	4a18      	ldr	r2, [pc, #96]	; (8010534 <TIM_OC4_SetConfig+0xbc>)
 80104d4:	4293      	cmp	r3, r2
 80104d6:	d00f      	beq.n	80104f8 <TIM_OC4_SetConfig+0x80>
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	4a17      	ldr	r2, [pc, #92]	; (8010538 <TIM_OC4_SetConfig+0xc0>)
 80104dc:	4293      	cmp	r3, r2
 80104de:	d00b      	beq.n	80104f8 <TIM_OC4_SetConfig+0x80>
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	4a16      	ldr	r2, [pc, #88]	; (801053c <TIM_OC4_SetConfig+0xc4>)
 80104e4:	4293      	cmp	r3, r2
 80104e6:	d007      	beq.n	80104f8 <TIM_OC4_SetConfig+0x80>
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	4a15      	ldr	r2, [pc, #84]	; (8010540 <TIM_OC4_SetConfig+0xc8>)
 80104ec:	4293      	cmp	r3, r2
 80104ee:	d003      	beq.n	80104f8 <TIM_OC4_SetConfig+0x80>
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	4a14      	ldr	r2, [pc, #80]	; (8010544 <TIM_OC4_SetConfig+0xcc>)
 80104f4:	4293      	cmp	r3, r2
 80104f6:	d109      	bne.n	801050c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80104f8:	697b      	ldr	r3, [r7, #20]
 80104fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80104fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010500:	683b      	ldr	r3, [r7, #0]
 8010502:	695b      	ldr	r3, [r3, #20]
 8010504:	019b      	lsls	r3, r3, #6
 8010506:	697a      	ldr	r2, [r7, #20]
 8010508:	4313      	orrs	r3, r2
 801050a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	697a      	ldr	r2, [r7, #20]
 8010510:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	68fa      	ldr	r2, [r7, #12]
 8010516:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010518:	683b      	ldr	r3, [r7, #0]
 801051a:	685a      	ldr	r2, [r3, #4]
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	693a      	ldr	r2, [r7, #16]
 8010524:	621a      	str	r2, [r3, #32]
}
 8010526:	bf00      	nop
 8010528:	371c      	adds	r7, #28
 801052a:	46bd      	mov	sp, r7
 801052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010530:	4770      	bx	lr
 8010532:	bf00      	nop
 8010534:	40010000 	.word	0x40010000
 8010538:	40010400 	.word	0x40010400
 801053c:	40014000 	.word	0x40014000
 8010540:	40014400 	.word	0x40014400
 8010544:	40014800 	.word	0x40014800

08010548 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8010548:	b480      	push	{r7}
 801054a:	b087      	sub	sp, #28
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
 8010550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	6a1b      	ldr	r3, [r3, #32]
 8010556:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	6a1b      	ldr	r3, [r3, #32]
 8010562:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	685b      	ldr	r3, [r3, #4]
 8010568:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801056e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010578:	683b      	ldr	r3, [r7, #0]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	68fa      	ldr	r2, [r7, #12]
 801057e:	4313      	orrs	r3, r2
 8010580:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010582:	693b      	ldr	r3, [r7, #16]
 8010584:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010588:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801058a:	683b      	ldr	r3, [r7, #0]
 801058c:	689b      	ldr	r3, [r3, #8]
 801058e:	041b      	lsls	r3, r3, #16
 8010590:	693a      	ldr	r2, [r7, #16]
 8010592:	4313      	orrs	r3, r2
 8010594:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	4a17      	ldr	r2, [pc, #92]	; (80105f8 <TIM_OC5_SetConfig+0xb0>)
 801059a:	4293      	cmp	r3, r2
 801059c:	d00f      	beq.n	80105be <TIM_OC5_SetConfig+0x76>
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	4a16      	ldr	r2, [pc, #88]	; (80105fc <TIM_OC5_SetConfig+0xb4>)
 80105a2:	4293      	cmp	r3, r2
 80105a4:	d00b      	beq.n	80105be <TIM_OC5_SetConfig+0x76>
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	4a15      	ldr	r2, [pc, #84]	; (8010600 <TIM_OC5_SetConfig+0xb8>)
 80105aa:	4293      	cmp	r3, r2
 80105ac:	d007      	beq.n	80105be <TIM_OC5_SetConfig+0x76>
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	4a14      	ldr	r2, [pc, #80]	; (8010604 <TIM_OC5_SetConfig+0xbc>)
 80105b2:	4293      	cmp	r3, r2
 80105b4:	d003      	beq.n	80105be <TIM_OC5_SetConfig+0x76>
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	4a13      	ldr	r2, [pc, #76]	; (8010608 <TIM_OC5_SetConfig+0xc0>)
 80105ba:	4293      	cmp	r3, r2
 80105bc:	d109      	bne.n	80105d2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80105be:	697b      	ldr	r3, [r7, #20]
 80105c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80105c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80105c6:	683b      	ldr	r3, [r7, #0]
 80105c8:	695b      	ldr	r3, [r3, #20]
 80105ca:	021b      	lsls	r3, r3, #8
 80105cc:	697a      	ldr	r2, [r7, #20]
 80105ce:	4313      	orrs	r3, r2
 80105d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	697a      	ldr	r2, [r7, #20]
 80105d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	68fa      	ldr	r2, [r7, #12]
 80105dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80105de:	683b      	ldr	r3, [r7, #0]
 80105e0:	685a      	ldr	r2, [r3, #4]
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	693a      	ldr	r2, [r7, #16]
 80105ea:	621a      	str	r2, [r3, #32]
}
 80105ec:	bf00      	nop
 80105ee:	371c      	adds	r7, #28
 80105f0:	46bd      	mov	sp, r7
 80105f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f6:	4770      	bx	lr
 80105f8:	40010000 	.word	0x40010000
 80105fc:	40010400 	.word	0x40010400
 8010600:	40014000 	.word	0x40014000
 8010604:	40014400 	.word	0x40014400
 8010608:	40014800 	.word	0x40014800

0801060c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801060c:	b480      	push	{r7}
 801060e:	b087      	sub	sp, #28
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
 8010614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	6a1b      	ldr	r3, [r3, #32]
 801061a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	6a1b      	ldr	r3, [r3, #32]
 8010626:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	685b      	ldr	r3, [r3, #4]
 801062c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801063a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801063c:	683b      	ldr	r3, [r7, #0]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	021b      	lsls	r3, r3, #8
 8010642:	68fa      	ldr	r2, [r7, #12]
 8010644:	4313      	orrs	r3, r2
 8010646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010648:	693b      	ldr	r3, [r7, #16]
 801064a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801064e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010650:	683b      	ldr	r3, [r7, #0]
 8010652:	689b      	ldr	r3, [r3, #8]
 8010654:	051b      	lsls	r3, r3, #20
 8010656:	693a      	ldr	r2, [r7, #16]
 8010658:	4313      	orrs	r3, r2
 801065a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	4a18      	ldr	r2, [pc, #96]	; (80106c0 <TIM_OC6_SetConfig+0xb4>)
 8010660:	4293      	cmp	r3, r2
 8010662:	d00f      	beq.n	8010684 <TIM_OC6_SetConfig+0x78>
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	4a17      	ldr	r2, [pc, #92]	; (80106c4 <TIM_OC6_SetConfig+0xb8>)
 8010668:	4293      	cmp	r3, r2
 801066a:	d00b      	beq.n	8010684 <TIM_OC6_SetConfig+0x78>
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	4a16      	ldr	r2, [pc, #88]	; (80106c8 <TIM_OC6_SetConfig+0xbc>)
 8010670:	4293      	cmp	r3, r2
 8010672:	d007      	beq.n	8010684 <TIM_OC6_SetConfig+0x78>
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	4a15      	ldr	r2, [pc, #84]	; (80106cc <TIM_OC6_SetConfig+0xc0>)
 8010678:	4293      	cmp	r3, r2
 801067a:	d003      	beq.n	8010684 <TIM_OC6_SetConfig+0x78>
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	4a14      	ldr	r2, [pc, #80]	; (80106d0 <TIM_OC6_SetConfig+0xc4>)
 8010680:	4293      	cmp	r3, r2
 8010682:	d109      	bne.n	8010698 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010684:	697b      	ldr	r3, [r7, #20]
 8010686:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801068a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801068c:	683b      	ldr	r3, [r7, #0]
 801068e:	695b      	ldr	r3, [r3, #20]
 8010690:	029b      	lsls	r3, r3, #10
 8010692:	697a      	ldr	r2, [r7, #20]
 8010694:	4313      	orrs	r3, r2
 8010696:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	697a      	ldr	r2, [r7, #20]
 801069c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	68fa      	ldr	r2, [r7, #12]
 80106a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80106a4:	683b      	ldr	r3, [r7, #0]
 80106a6:	685a      	ldr	r2, [r3, #4]
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	693a      	ldr	r2, [r7, #16]
 80106b0:	621a      	str	r2, [r3, #32]
}
 80106b2:	bf00      	nop
 80106b4:	371c      	adds	r7, #28
 80106b6:	46bd      	mov	sp, r7
 80106b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106bc:	4770      	bx	lr
 80106be:	bf00      	nop
 80106c0:	40010000 	.word	0x40010000
 80106c4:	40010400 	.word	0x40010400
 80106c8:	40014000 	.word	0x40014000
 80106cc:	40014400 	.word	0x40014400
 80106d0:	40014800 	.word	0x40014800

080106d4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b086      	sub	sp, #24
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
 80106dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	689b      	ldr	r3, [r3, #8]
 80106e4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80106e6:	697a      	ldr	r2, [r7, #20]
 80106e8:	4b64      	ldr	r3, [pc, #400]	; (801087c <TIM_SlaveTimer_SetConfig+0x1a8>)
 80106ea:	4013      	ands	r3, r2
 80106ec:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80106ee:	683b      	ldr	r3, [r7, #0]
 80106f0:	685b      	ldr	r3, [r3, #4]
 80106f2:	697a      	ldr	r2, [r7, #20]
 80106f4:	4313      	orrs	r3, r2
 80106f6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80106f8:	697a      	ldr	r2, [r7, #20]
 80106fa:	4b61      	ldr	r3, [pc, #388]	; (8010880 <TIM_SlaveTimer_SetConfig+0x1ac>)
 80106fc:	4013      	ands	r3, r2
 80106fe:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8010700:	683b      	ldr	r3, [r7, #0]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	697a      	ldr	r2, [r7, #20]
 8010706:	4313      	orrs	r3, r2
 8010708:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	697a      	ldr	r2, [r7, #20]
 8010710:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8010712:	683b      	ldr	r3, [r7, #0]
 8010714:	685b      	ldr	r3, [r3, #4]
 8010716:	4a5b      	ldr	r2, [pc, #364]	; (8010884 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8010718:	4293      	cmp	r3, r2
 801071a:	f000 80a7 	beq.w	801086c <TIM_SlaveTimer_SetConfig+0x198>
 801071e:	4a59      	ldr	r2, [pc, #356]	; (8010884 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8010720:	4293      	cmp	r3, r2
 8010722:	f200 80a5 	bhi.w	8010870 <TIM_SlaveTimer_SetConfig+0x19c>
 8010726:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801072a:	f000 809f 	beq.w	801086c <TIM_SlaveTimer_SetConfig+0x198>
 801072e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010732:	f200 809d 	bhi.w	8010870 <TIM_SlaveTimer_SetConfig+0x19c>
 8010736:	4a54      	ldr	r2, [pc, #336]	; (8010888 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8010738:	4293      	cmp	r3, r2
 801073a:	f000 8097 	beq.w	801086c <TIM_SlaveTimer_SetConfig+0x198>
 801073e:	4a52      	ldr	r2, [pc, #328]	; (8010888 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8010740:	4293      	cmp	r3, r2
 8010742:	f200 8095 	bhi.w	8010870 <TIM_SlaveTimer_SetConfig+0x19c>
 8010746:	4a51      	ldr	r2, [pc, #324]	; (801088c <TIM_SlaveTimer_SetConfig+0x1b8>)
 8010748:	4293      	cmp	r3, r2
 801074a:	f000 808f 	beq.w	801086c <TIM_SlaveTimer_SetConfig+0x198>
 801074e:	4a4f      	ldr	r2, [pc, #316]	; (801088c <TIM_SlaveTimer_SetConfig+0x1b8>)
 8010750:	4293      	cmp	r3, r2
 8010752:	f200 808d 	bhi.w	8010870 <TIM_SlaveTimer_SetConfig+0x19c>
 8010756:	4a4e      	ldr	r2, [pc, #312]	; (8010890 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8010758:	4293      	cmp	r3, r2
 801075a:	f000 8087 	beq.w	801086c <TIM_SlaveTimer_SetConfig+0x198>
 801075e:	4a4c      	ldr	r2, [pc, #304]	; (8010890 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8010760:	4293      	cmp	r3, r2
 8010762:	f200 8085 	bhi.w	8010870 <TIM_SlaveTimer_SetConfig+0x19c>
 8010766:	4a4b      	ldr	r2, [pc, #300]	; (8010894 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8010768:	4293      	cmp	r3, r2
 801076a:	d07f      	beq.n	801086c <TIM_SlaveTimer_SetConfig+0x198>
 801076c:	4a49      	ldr	r2, [pc, #292]	; (8010894 <TIM_SlaveTimer_SetConfig+0x1c0>)
 801076e:	4293      	cmp	r3, r2
 8010770:	d87e      	bhi.n	8010870 <TIM_SlaveTimer_SetConfig+0x19c>
 8010772:	4a49      	ldr	r2, [pc, #292]	; (8010898 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8010774:	4293      	cmp	r3, r2
 8010776:	d079      	beq.n	801086c <TIM_SlaveTimer_SetConfig+0x198>
 8010778:	4a47      	ldr	r2, [pc, #284]	; (8010898 <TIM_SlaveTimer_SetConfig+0x1c4>)
 801077a:	4293      	cmp	r3, r2
 801077c:	d878      	bhi.n	8010870 <TIM_SlaveTimer_SetConfig+0x19c>
 801077e:	4a47      	ldr	r2, [pc, #284]	; (801089c <TIM_SlaveTimer_SetConfig+0x1c8>)
 8010780:	4293      	cmp	r3, r2
 8010782:	d073      	beq.n	801086c <TIM_SlaveTimer_SetConfig+0x198>
 8010784:	4a45      	ldr	r2, [pc, #276]	; (801089c <TIM_SlaveTimer_SetConfig+0x1c8>)
 8010786:	4293      	cmp	r3, r2
 8010788:	d872      	bhi.n	8010870 <TIM_SlaveTimer_SetConfig+0x19c>
 801078a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801078e:	d06d      	beq.n	801086c <TIM_SlaveTimer_SetConfig+0x198>
 8010790:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010794:	d86c      	bhi.n	8010870 <TIM_SlaveTimer_SetConfig+0x19c>
 8010796:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801079a:	d067      	beq.n	801086c <TIM_SlaveTimer_SetConfig+0x198>
 801079c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80107a0:	d866      	bhi.n	8010870 <TIM_SlaveTimer_SetConfig+0x19c>
 80107a2:	2b70      	cmp	r3, #112	; 0x70
 80107a4:	d01a      	beq.n	80107dc <TIM_SlaveTimer_SetConfig+0x108>
 80107a6:	2b70      	cmp	r3, #112	; 0x70
 80107a8:	d862      	bhi.n	8010870 <TIM_SlaveTimer_SetConfig+0x19c>
 80107aa:	2b60      	cmp	r3, #96	; 0x60
 80107ac:	d054      	beq.n	8010858 <TIM_SlaveTimer_SetConfig+0x184>
 80107ae:	2b60      	cmp	r3, #96	; 0x60
 80107b0:	d85e      	bhi.n	8010870 <TIM_SlaveTimer_SetConfig+0x19c>
 80107b2:	2b50      	cmp	r3, #80	; 0x50
 80107b4:	d046      	beq.n	8010844 <TIM_SlaveTimer_SetConfig+0x170>
 80107b6:	2b50      	cmp	r3, #80	; 0x50
 80107b8:	d85a      	bhi.n	8010870 <TIM_SlaveTimer_SetConfig+0x19c>
 80107ba:	2b40      	cmp	r3, #64	; 0x40
 80107bc:	d019      	beq.n	80107f2 <TIM_SlaveTimer_SetConfig+0x11e>
 80107be:	2b40      	cmp	r3, #64	; 0x40
 80107c0:	d856      	bhi.n	8010870 <TIM_SlaveTimer_SetConfig+0x19c>
 80107c2:	2b30      	cmp	r3, #48	; 0x30
 80107c4:	d052      	beq.n	801086c <TIM_SlaveTimer_SetConfig+0x198>
 80107c6:	2b30      	cmp	r3, #48	; 0x30
 80107c8:	d852      	bhi.n	8010870 <TIM_SlaveTimer_SetConfig+0x19c>
 80107ca:	2b20      	cmp	r3, #32
 80107cc:	d04e      	beq.n	801086c <TIM_SlaveTimer_SetConfig+0x198>
 80107ce:	2b20      	cmp	r3, #32
 80107d0:	d84e      	bhi.n	8010870 <TIM_SlaveTimer_SetConfig+0x19c>
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d04a      	beq.n	801086c <TIM_SlaveTimer_SetConfig+0x198>
 80107d6:	2b10      	cmp	r3, #16
 80107d8:	d048      	beq.n	801086c <TIM_SlaveTimer_SetConfig+0x198>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 80107da:	e049      	b.n	8010870 <TIM_SlaveTimer_SetConfig+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	6818      	ldr	r0, [r3, #0]
 80107e0:	683b      	ldr	r3, [r7, #0]
 80107e2:	68d9      	ldr	r1, [r3, #12]
 80107e4:	683b      	ldr	r3, [r7, #0]
 80107e6:	689a      	ldr	r2, [r3, #8]
 80107e8:	683b      	ldr	r3, [r7, #0]
 80107ea:	691b      	ldr	r3, [r3, #16]
 80107ec:	f000 f8b7 	bl	801095e <TIM_ETR_SetConfig>
      break;
 80107f0:	e03f      	b.n	8010872 <TIM_SlaveTimer_SetConfig+0x19e>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80107f2:	683b      	ldr	r3, [r7, #0]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	2b05      	cmp	r3, #5
 80107f8:	d101      	bne.n	80107fe <TIM_SlaveTimer_SetConfig+0x12a>
        return HAL_ERROR;
 80107fa:	2301      	movs	r3, #1
 80107fc:	e03a      	b.n	8010874 <TIM_SlaveTimer_SetConfig+0x1a0>
      tmpccer = htim->Instance->CCER;
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	6a1b      	ldr	r3, [r3, #32]
 8010804:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	6a1a      	ldr	r2, [r3, #32]
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	f022 0201 	bic.w	r2, r2, #1
 8010814:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	699b      	ldr	r3, [r3, #24]
 801081c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010824:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8010826:	683b      	ldr	r3, [r7, #0]
 8010828:	691b      	ldr	r3, [r3, #16]
 801082a:	011b      	lsls	r3, r3, #4
 801082c:	68fa      	ldr	r2, [r7, #12]
 801082e:	4313      	orrs	r3, r2
 8010830:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	68fa      	ldr	r2, [r7, #12]
 8010838:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	693a      	ldr	r2, [r7, #16]
 8010840:	621a      	str	r2, [r3, #32]
      break;
 8010842:	e016      	b.n	8010872 <TIM_SlaveTimer_SetConfig+0x19e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	6818      	ldr	r0, [r3, #0]
 8010848:	683b      	ldr	r3, [r7, #0]
 801084a:	6899      	ldr	r1, [r3, #8]
 801084c:	683b      	ldr	r3, [r7, #0]
 801084e:	691b      	ldr	r3, [r3, #16]
 8010850:	461a      	mov	r2, r3
 8010852:	f000 f825 	bl	80108a0 <TIM_TI1_ConfigInputStage>
      break;
 8010856:	e00c      	b.n	8010872 <TIM_SlaveTimer_SetConfig+0x19e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	6818      	ldr	r0, [r3, #0]
 801085c:	683b      	ldr	r3, [r7, #0]
 801085e:	6899      	ldr	r1, [r3, #8]
 8010860:	683b      	ldr	r3, [r7, #0]
 8010862:	691b      	ldr	r3, [r3, #16]
 8010864:	461a      	mov	r2, r3
 8010866:	f000 f84a 	bl	80108fe <TIM_TI2_ConfigInputStage>
      break;
 801086a:	e002      	b.n	8010872 <TIM_SlaveTimer_SetConfig+0x19e>
        break;
 801086c:	bf00      	nop
 801086e:	e000      	b.n	8010872 <TIM_SlaveTimer_SetConfig+0x19e>
      break;
 8010870:	bf00      	nop
  }
  return HAL_OK;
 8010872:	2300      	movs	r3, #0
}
 8010874:	4618      	mov	r0, r3
 8010876:	3718      	adds	r7, #24
 8010878:	46bd      	mov	sp, r7
 801087a:	bd80      	pop	{r7, pc}
 801087c:	ffcfff8f 	.word	0xffcfff8f
 8010880:	fffefff8 	.word	0xfffefff8
 8010884:	00200010 	.word	0x00200010
 8010888:	00100070 	.word	0x00100070
 801088c:	00100060 	.word	0x00100060
 8010890:	00100050 	.word	0x00100050
 8010894:	00100040 	.word	0x00100040
 8010898:	00100030 	.word	0x00100030
 801089c:	00100020 	.word	0x00100020

080108a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80108a0:	b480      	push	{r7}
 80108a2:	b087      	sub	sp, #28
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	60f8      	str	r0, [r7, #12]
 80108a8:	60b9      	str	r1, [r7, #8]
 80108aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	6a1b      	ldr	r3, [r3, #32]
 80108b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	6a1b      	ldr	r3, [r3, #32]
 80108b6:	f023 0201 	bic.w	r2, r3, #1
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	699b      	ldr	r3, [r3, #24]
 80108c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80108c4:	693b      	ldr	r3, [r7, #16]
 80108c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80108ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	011b      	lsls	r3, r3, #4
 80108d0:	693a      	ldr	r2, [r7, #16]
 80108d2:	4313      	orrs	r3, r2
 80108d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80108d6:	697b      	ldr	r3, [r7, #20]
 80108d8:	f023 030a 	bic.w	r3, r3, #10
 80108dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80108de:	697a      	ldr	r2, [r7, #20]
 80108e0:	68bb      	ldr	r3, [r7, #8]
 80108e2:	4313      	orrs	r3, r2
 80108e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	693a      	ldr	r2, [r7, #16]
 80108ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	697a      	ldr	r2, [r7, #20]
 80108f0:	621a      	str	r2, [r3, #32]
}
 80108f2:	bf00      	nop
 80108f4:	371c      	adds	r7, #28
 80108f6:	46bd      	mov	sp, r7
 80108f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fc:	4770      	bx	lr

080108fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80108fe:	b480      	push	{r7}
 8010900:	b087      	sub	sp, #28
 8010902:	af00      	add	r7, sp, #0
 8010904:	60f8      	str	r0, [r7, #12]
 8010906:	60b9      	str	r1, [r7, #8]
 8010908:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	6a1b      	ldr	r3, [r3, #32]
 801090e:	f023 0210 	bic.w	r2, r3, #16
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	699b      	ldr	r3, [r3, #24]
 801091a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	6a1b      	ldr	r3, [r3, #32]
 8010920:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010922:	697b      	ldr	r3, [r7, #20]
 8010924:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010928:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	031b      	lsls	r3, r3, #12
 801092e:	697a      	ldr	r2, [r7, #20]
 8010930:	4313      	orrs	r3, r2
 8010932:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010934:	693b      	ldr	r3, [r7, #16]
 8010936:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801093a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801093c:	68bb      	ldr	r3, [r7, #8]
 801093e:	011b      	lsls	r3, r3, #4
 8010940:	693a      	ldr	r2, [r7, #16]
 8010942:	4313      	orrs	r3, r2
 8010944:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	697a      	ldr	r2, [r7, #20]
 801094a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	693a      	ldr	r2, [r7, #16]
 8010950:	621a      	str	r2, [r3, #32]
}
 8010952:	bf00      	nop
 8010954:	371c      	adds	r7, #28
 8010956:	46bd      	mov	sp, r7
 8010958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801095c:	4770      	bx	lr

0801095e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801095e:	b480      	push	{r7}
 8010960:	b087      	sub	sp, #28
 8010962:	af00      	add	r7, sp, #0
 8010964:	60f8      	str	r0, [r7, #12]
 8010966:	60b9      	str	r1, [r7, #8]
 8010968:	607a      	str	r2, [r7, #4]
 801096a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	689b      	ldr	r3, [r3, #8]
 8010970:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010972:	697b      	ldr	r3, [r7, #20]
 8010974:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010978:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801097a:	683b      	ldr	r3, [r7, #0]
 801097c:	021a      	lsls	r2, r3, #8
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	431a      	orrs	r2, r3
 8010982:	68bb      	ldr	r3, [r7, #8]
 8010984:	4313      	orrs	r3, r2
 8010986:	697a      	ldr	r2, [r7, #20]
 8010988:	4313      	orrs	r3, r2
 801098a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	697a      	ldr	r2, [r7, #20]
 8010990:	609a      	str	r2, [r3, #8]
}
 8010992:	bf00      	nop
 8010994:	371c      	adds	r7, #28
 8010996:	46bd      	mov	sp, r7
 8010998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099c:	4770      	bx	lr

0801099e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801099e:	b480      	push	{r7}
 80109a0:	b087      	sub	sp, #28
 80109a2:	af00      	add	r7, sp, #0
 80109a4:	60f8      	str	r0, [r7, #12]
 80109a6:	60b9      	str	r1, [r7, #8]
 80109a8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80109aa:	68bb      	ldr	r3, [r7, #8]
 80109ac:	f003 031f 	and.w	r3, r3, #31
 80109b0:	2201      	movs	r2, #1
 80109b2:	fa02 f303 	lsl.w	r3, r2, r3
 80109b6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	6a1a      	ldr	r2, [r3, #32]
 80109bc:	697b      	ldr	r3, [r7, #20]
 80109be:	43db      	mvns	r3, r3
 80109c0:	401a      	ands	r2, r3
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	6a1a      	ldr	r2, [r3, #32]
 80109ca:	68bb      	ldr	r3, [r7, #8]
 80109cc:	f003 031f 	and.w	r3, r3, #31
 80109d0:	6879      	ldr	r1, [r7, #4]
 80109d2:	fa01 f303 	lsl.w	r3, r1, r3
 80109d6:	431a      	orrs	r2, r3
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	621a      	str	r2, [r3, #32]
}
 80109dc:	bf00      	nop
 80109de:	371c      	adds	r7, #28
 80109e0:	46bd      	mov	sp, r7
 80109e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e6:	4770      	bx	lr

080109e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80109e8:	b480      	push	{r7}
 80109ea:	b085      	sub	sp, #20
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	6078      	str	r0, [r7, #4]
 80109f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80109f8:	2b01      	cmp	r3, #1
 80109fa:	d101      	bne.n	8010a00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80109fc:	2302      	movs	r3, #2
 80109fe:	e068      	b.n	8010ad2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	2201      	movs	r2, #1
 8010a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	2202      	movs	r2, #2
 8010a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	685b      	ldr	r3, [r3, #4]
 8010a16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	689b      	ldr	r3, [r3, #8]
 8010a1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	4a2e      	ldr	r2, [pc, #184]	; (8010ae0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8010a26:	4293      	cmp	r3, r2
 8010a28:	d004      	beq.n	8010a34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	4a2d      	ldr	r2, [pc, #180]	; (8010ae4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8010a30:	4293      	cmp	r3, r2
 8010a32:	d108      	bne.n	8010a46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010a3a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010a3c:	683b      	ldr	r3, [r7, #0]
 8010a3e:	685b      	ldr	r3, [r3, #4]
 8010a40:	68fa      	ldr	r2, [r7, #12]
 8010a42:	4313      	orrs	r3, r2
 8010a44:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010a4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010a4e:	683b      	ldr	r3, [r7, #0]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	68fa      	ldr	r2, [r7, #12]
 8010a54:	4313      	orrs	r3, r2
 8010a56:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	68fa      	ldr	r2, [r7, #12]
 8010a5e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	4a1e      	ldr	r2, [pc, #120]	; (8010ae0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8010a66:	4293      	cmp	r3, r2
 8010a68:	d01d      	beq.n	8010aa6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010a72:	d018      	beq.n	8010aa6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	4a1b      	ldr	r2, [pc, #108]	; (8010ae8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8010a7a:	4293      	cmp	r3, r2
 8010a7c:	d013      	beq.n	8010aa6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	4a1a      	ldr	r2, [pc, #104]	; (8010aec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010a84:	4293      	cmp	r3, r2
 8010a86:	d00e      	beq.n	8010aa6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	4a18      	ldr	r2, [pc, #96]	; (8010af0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8010a8e:	4293      	cmp	r3, r2
 8010a90:	d009      	beq.n	8010aa6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	4a13      	ldr	r2, [pc, #76]	; (8010ae4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8010a98:	4293      	cmp	r3, r2
 8010a9a:	d004      	beq.n	8010aa6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	4a14      	ldr	r2, [pc, #80]	; (8010af4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8010aa2:	4293      	cmp	r3, r2
 8010aa4:	d10c      	bne.n	8010ac0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010aa6:	68bb      	ldr	r3, [r7, #8]
 8010aa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010aac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010aae:	683b      	ldr	r3, [r7, #0]
 8010ab0:	689b      	ldr	r3, [r3, #8]
 8010ab2:	68ba      	ldr	r2, [r7, #8]
 8010ab4:	4313      	orrs	r3, r2
 8010ab6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	68ba      	ldr	r2, [r7, #8]
 8010abe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	2201      	movs	r2, #1
 8010ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	2200      	movs	r2, #0
 8010acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010ad0:	2300      	movs	r3, #0
}
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	3714      	adds	r7, #20
 8010ad6:	46bd      	mov	sp, r7
 8010ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010adc:	4770      	bx	lr
 8010ade:	bf00      	nop
 8010ae0:	40010000 	.word	0x40010000
 8010ae4:	40010400 	.word	0x40010400
 8010ae8:	40000400 	.word	0x40000400
 8010aec:	40000800 	.word	0x40000800
 8010af0:	40000c00 	.word	0x40000c00
 8010af4:	40001800 	.word	0x40001800

08010af8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010af8:	b480      	push	{r7}
 8010afa:	b085      	sub	sp, #20
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
 8010b00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8010b02:	2300      	movs	r3, #0
 8010b04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010b0c:	2b01      	cmp	r3, #1
 8010b0e:	d101      	bne.n	8010b14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010b10:	2302      	movs	r3, #2
 8010b12:	e065      	b.n	8010be0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	2201      	movs	r2, #1
 8010b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8010b22:	683b      	ldr	r3, [r7, #0]
 8010b24:	68db      	ldr	r3, [r3, #12]
 8010b26:	4313      	orrs	r3, r2
 8010b28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010b30:	683b      	ldr	r3, [r7, #0]
 8010b32:	689b      	ldr	r3, [r3, #8]
 8010b34:	4313      	orrs	r3, r2
 8010b36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8010b3e:	683b      	ldr	r3, [r7, #0]
 8010b40:	685b      	ldr	r3, [r3, #4]
 8010b42:	4313      	orrs	r3, r2
 8010b44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8010b4c:	683b      	ldr	r3, [r7, #0]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	4313      	orrs	r3, r2
 8010b52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010b5a:	683b      	ldr	r3, [r7, #0]
 8010b5c:	691b      	ldr	r3, [r3, #16]
 8010b5e:	4313      	orrs	r3, r2
 8010b60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8010b68:	683b      	ldr	r3, [r7, #0]
 8010b6a:	695b      	ldr	r3, [r3, #20]
 8010b6c:	4313      	orrs	r3, r2
 8010b6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8010b76:	683b      	ldr	r3, [r7, #0]
 8010b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b7a:	4313      	orrs	r3, r2
 8010b7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8010b84:	683b      	ldr	r3, [r7, #0]
 8010b86:	699b      	ldr	r3, [r3, #24]
 8010b88:	041b      	lsls	r3, r3, #16
 8010b8a:	4313      	orrs	r3, r2
 8010b8c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	4a16      	ldr	r2, [pc, #88]	; (8010bec <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8010b94:	4293      	cmp	r3, r2
 8010b96:	d004      	beq.n	8010ba2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	4a14      	ldr	r2, [pc, #80]	; (8010bf0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8010b9e:	4293      	cmp	r3, r2
 8010ba0:	d115      	bne.n	8010bce <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8010ba8:	683b      	ldr	r3, [r7, #0]
 8010baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bac:	051b      	lsls	r3, r3, #20
 8010bae:	4313      	orrs	r3, r2
 8010bb0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8010bb8:	683b      	ldr	r3, [r7, #0]
 8010bba:	69db      	ldr	r3, [r3, #28]
 8010bbc:	4313      	orrs	r3, r2
 8010bbe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8010bc6:	683b      	ldr	r3, [r7, #0]
 8010bc8:	6a1b      	ldr	r3, [r3, #32]
 8010bca:	4313      	orrs	r3, r2
 8010bcc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	68fa      	ldr	r2, [r7, #12]
 8010bd4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	2200      	movs	r2, #0
 8010bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010bde:	2300      	movs	r3, #0
}
 8010be0:	4618      	mov	r0, r3
 8010be2:	3714      	adds	r7, #20
 8010be4:	46bd      	mov	sp, r7
 8010be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bea:	4770      	bx	lr
 8010bec:	40010000 	.word	0x40010000
 8010bf0:	40010400 	.word	0x40010400

08010bf4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010bf4:	b580      	push	{r7, lr}
 8010bf6:	b082      	sub	sp, #8
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d101      	bne.n	8010c06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010c02:	2301      	movs	r3, #1
 8010c04:	e042      	b.n	8010c8c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d106      	bne.n	8010c1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	2200      	movs	r2, #0
 8010c14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010c18:	6878      	ldr	r0, [r7, #4]
 8010c1a:	f7f2 ff9d 	bl	8003b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	2224      	movs	r2, #36	; 0x24
 8010c22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	681a      	ldr	r2, [r3, #0]
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	f022 0201 	bic.w	r2, r2, #1
 8010c34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010c36:	6878      	ldr	r0, [r7, #4]
 8010c38:	f000 f8c2 	bl	8010dc0 <UART_SetConfig>
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	2b01      	cmp	r3, #1
 8010c40:	d101      	bne.n	8010c46 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8010c42:	2301      	movs	r3, #1
 8010c44:	e022      	b.n	8010c8c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d002      	beq.n	8010c54 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8010c4e:	6878      	ldr	r0, [r7, #4]
 8010c50:	f000 fe16 	bl	8011880 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	685a      	ldr	r2, [r3, #4]
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010c62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	689a      	ldr	r2, [r3, #8]
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010c72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	681a      	ldr	r2, [r3, #0]
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	f042 0201 	orr.w	r2, r2, #1
 8010c82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010c84:	6878      	ldr	r0, [r7, #4]
 8010c86:	f000 fe9d 	bl	80119c4 <UART_CheckIdleState>
 8010c8a:	4603      	mov	r3, r0
}
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	3708      	adds	r7, #8
 8010c90:	46bd      	mov	sp, r7
 8010c92:	bd80      	pop	{r7, pc}

08010c94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b08a      	sub	sp, #40	; 0x28
 8010c98:	af02      	add	r7, sp, #8
 8010c9a:	60f8      	str	r0, [r7, #12]
 8010c9c:	60b9      	str	r1, [r7, #8]
 8010c9e:	603b      	str	r3, [r7, #0]
 8010ca0:	4613      	mov	r3, r2
 8010ca2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010caa:	2b20      	cmp	r3, #32
 8010cac:	f040 8083 	bne.w	8010db6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8010cb0:	68bb      	ldr	r3, [r7, #8]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d002      	beq.n	8010cbc <HAL_UART_Transmit+0x28>
 8010cb6:	88fb      	ldrh	r3, [r7, #6]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d101      	bne.n	8010cc0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8010cbc:	2301      	movs	r3, #1
 8010cbe:	e07b      	b.n	8010db8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010cc6:	2b01      	cmp	r3, #1
 8010cc8:	d101      	bne.n	8010cce <HAL_UART_Transmit+0x3a>
 8010cca:	2302      	movs	r3, #2
 8010ccc:	e074      	b.n	8010db8 <HAL_UART_Transmit+0x124>
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	2201      	movs	r2, #1
 8010cd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	2200      	movs	r2, #0
 8010cda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	2221      	movs	r2, #33	; 0x21
 8010ce2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010ce6:	f7f3 fa01 	bl	80040ec <HAL_GetTick>
 8010cea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	88fa      	ldrh	r2, [r7, #6]
 8010cf0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	88fa      	ldrh	r2, [r7, #6]
 8010cf8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	689b      	ldr	r3, [r3, #8]
 8010d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010d04:	d108      	bne.n	8010d18 <HAL_UART_Transmit+0x84>
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	691b      	ldr	r3, [r3, #16]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d104      	bne.n	8010d18 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8010d0e:	2300      	movs	r3, #0
 8010d10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8010d12:	68bb      	ldr	r3, [r7, #8]
 8010d14:	61bb      	str	r3, [r7, #24]
 8010d16:	e003      	b.n	8010d20 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8010d18:	68bb      	ldr	r3, [r7, #8]
 8010d1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010d1c:	2300      	movs	r3, #0
 8010d1e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	2200      	movs	r2, #0
 8010d24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8010d28:	e02c      	b.n	8010d84 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010d2a:	683b      	ldr	r3, [r7, #0]
 8010d2c:	9300      	str	r3, [sp, #0]
 8010d2e:	697b      	ldr	r3, [r7, #20]
 8010d30:	2200      	movs	r2, #0
 8010d32:	2180      	movs	r1, #128	; 0x80
 8010d34:	68f8      	ldr	r0, [r7, #12]
 8010d36:	f000 fe90 	bl	8011a5a <UART_WaitOnFlagUntilTimeout>
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d001      	beq.n	8010d44 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8010d40:	2303      	movs	r3, #3
 8010d42:	e039      	b.n	8010db8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8010d44:	69fb      	ldr	r3, [r7, #28]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d10b      	bne.n	8010d62 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010d4a:	69bb      	ldr	r3, [r7, #24]
 8010d4c:	881b      	ldrh	r3, [r3, #0]
 8010d4e:	461a      	mov	r2, r3
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010d58:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8010d5a:	69bb      	ldr	r3, [r7, #24]
 8010d5c:	3302      	adds	r3, #2
 8010d5e:	61bb      	str	r3, [r7, #24]
 8010d60:	e007      	b.n	8010d72 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010d62:	69fb      	ldr	r3, [r7, #28]
 8010d64:	781a      	ldrb	r2, [r3, #0]
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8010d6c:	69fb      	ldr	r3, [r7, #28]
 8010d6e:	3301      	adds	r3, #1
 8010d70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010d78:	b29b      	uxth	r3, r3
 8010d7a:	3b01      	subs	r3, #1
 8010d7c:	b29a      	uxth	r2, r3
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010d8a:	b29b      	uxth	r3, r3
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d1cc      	bne.n	8010d2a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010d90:	683b      	ldr	r3, [r7, #0]
 8010d92:	9300      	str	r3, [sp, #0]
 8010d94:	697b      	ldr	r3, [r7, #20]
 8010d96:	2200      	movs	r2, #0
 8010d98:	2140      	movs	r1, #64	; 0x40
 8010d9a:	68f8      	ldr	r0, [r7, #12]
 8010d9c:	f000 fe5d 	bl	8011a5a <UART_WaitOnFlagUntilTimeout>
 8010da0:	4603      	mov	r3, r0
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d001      	beq.n	8010daa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8010da6:	2303      	movs	r3, #3
 8010da8:	e006      	b.n	8010db8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	2220      	movs	r2, #32
 8010dae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8010db2:	2300      	movs	r3, #0
 8010db4:	e000      	b.n	8010db8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8010db6:	2302      	movs	r3, #2
  }
}
 8010db8:	4618      	mov	r0, r3
 8010dba:	3720      	adds	r7, #32
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	bd80      	pop	{r7, pc}

08010dc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010dc0:	b5b0      	push	{r4, r5, r7, lr}
 8010dc2:	b08e      	sub	sp, #56	; 0x38
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010dc8:	2300      	movs	r3, #0
 8010dca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	689a      	ldr	r2, [r3, #8]
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	691b      	ldr	r3, [r3, #16]
 8010dd6:	431a      	orrs	r2, r3
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	695b      	ldr	r3, [r3, #20]
 8010ddc:	431a      	orrs	r2, r3
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	69db      	ldr	r3, [r3, #28]
 8010de2:	4313      	orrs	r3, r2
 8010de4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	681a      	ldr	r2, [r3, #0]
 8010dec:	4bbf      	ldr	r3, [pc, #764]	; (80110ec <UART_SetConfig+0x32c>)
 8010dee:	4013      	ands	r3, r2
 8010df0:	687a      	ldr	r2, [r7, #4]
 8010df2:	6812      	ldr	r2, [r2, #0]
 8010df4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010df6:	430b      	orrs	r3, r1
 8010df8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	685b      	ldr	r3, [r3, #4]
 8010e00:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	68da      	ldr	r2, [r3, #12]
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	430a      	orrs	r2, r1
 8010e0e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	699b      	ldr	r3, [r3, #24]
 8010e14:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	4ab5      	ldr	r2, [pc, #724]	; (80110f0 <UART_SetConfig+0x330>)
 8010e1c:	4293      	cmp	r3, r2
 8010e1e:	d004      	beq.n	8010e2a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	6a1b      	ldr	r3, [r3, #32]
 8010e24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e26:	4313      	orrs	r3, r2
 8010e28:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	689a      	ldr	r2, [r3, #8]
 8010e30:	4bb0      	ldr	r3, [pc, #704]	; (80110f4 <UART_SetConfig+0x334>)
 8010e32:	4013      	ands	r3, r2
 8010e34:	687a      	ldr	r2, [r7, #4]
 8010e36:	6812      	ldr	r2, [r2, #0]
 8010e38:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010e3a:	430b      	orrs	r3, r1
 8010e3c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e44:	f023 010f 	bic.w	r1, r3, #15
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	430a      	orrs	r2, r1
 8010e52:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	4aa7      	ldr	r2, [pc, #668]	; (80110f8 <UART_SetConfig+0x338>)
 8010e5a:	4293      	cmp	r3, r2
 8010e5c:	d176      	bne.n	8010f4c <UART_SetConfig+0x18c>
 8010e5e:	4ba7      	ldr	r3, [pc, #668]	; (80110fc <UART_SetConfig+0x33c>)
 8010e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010e66:	2b28      	cmp	r3, #40	; 0x28
 8010e68:	d86c      	bhi.n	8010f44 <UART_SetConfig+0x184>
 8010e6a:	a201      	add	r2, pc, #4	; (adr r2, 8010e70 <UART_SetConfig+0xb0>)
 8010e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e70:	08010f15 	.word	0x08010f15
 8010e74:	08010f45 	.word	0x08010f45
 8010e78:	08010f45 	.word	0x08010f45
 8010e7c:	08010f45 	.word	0x08010f45
 8010e80:	08010f45 	.word	0x08010f45
 8010e84:	08010f45 	.word	0x08010f45
 8010e88:	08010f45 	.word	0x08010f45
 8010e8c:	08010f45 	.word	0x08010f45
 8010e90:	08010f1d 	.word	0x08010f1d
 8010e94:	08010f45 	.word	0x08010f45
 8010e98:	08010f45 	.word	0x08010f45
 8010e9c:	08010f45 	.word	0x08010f45
 8010ea0:	08010f45 	.word	0x08010f45
 8010ea4:	08010f45 	.word	0x08010f45
 8010ea8:	08010f45 	.word	0x08010f45
 8010eac:	08010f45 	.word	0x08010f45
 8010eb0:	08010f25 	.word	0x08010f25
 8010eb4:	08010f45 	.word	0x08010f45
 8010eb8:	08010f45 	.word	0x08010f45
 8010ebc:	08010f45 	.word	0x08010f45
 8010ec0:	08010f45 	.word	0x08010f45
 8010ec4:	08010f45 	.word	0x08010f45
 8010ec8:	08010f45 	.word	0x08010f45
 8010ecc:	08010f45 	.word	0x08010f45
 8010ed0:	08010f2d 	.word	0x08010f2d
 8010ed4:	08010f45 	.word	0x08010f45
 8010ed8:	08010f45 	.word	0x08010f45
 8010edc:	08010f45 	.word	0x08010f45
 8010ee0:	08010f45 	.word	0x08010f45
 8010ee4:	08010f45 	.word	0x08010f45
 8010ee8:	08010f45 	.word	0x08010f45
 8010eec:	08010f45 	.word	0x08010f45
 8010ef0:	08010f35 	.word	0x08010f35
 8010ef4:	08010f45 	.word	0x08010f45
 8010ef8:	08010f45 	.word	0x08010f45
 8010efc:	08010f45 	.word	0x08010f45
 8010f00:	08010f45 	.word	0x08010f45
 8010f04:	08010f45 	.word	0x08010f45
 8010f08:	08010f45 	.word	0x08010f45
 8010f0c:	08010f45 	.word	0x08010f45
 8010f10:	08010f3d 	.word	0x08010f3d
 8010f14:	2301      	movs	r3, #1
 8010f16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010f1a:	e222      	b.n	8011362 <UART_SetConfig+0x5a2>
 8010f1c:	2304      	movs	r3, #4
 8010f1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010f22:	e21e      	b.n	8011362 <UART_SetConfig+0x5a2>
 8010f24:	2308      	movs	r3, #8
 8010f26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010f2a:	e21a      	b.n	8011362 <UART_SetConfig+0x5a2>
 8010f2c:	2310      	movs	r3, #16
 8010f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010f32:	e216      	b.n	8011362 <UART_SetConfig+0x5a2>
 8010f34:	2320      	movs	r3, #32
 8010f36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010f3a:	e212      	b.n	8011362 <UART_SetConfig+0x5a2>
 8010f3c:	2340      	movs	r3, #64	; 0x40
 8010f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010f42:	e20e      	b.n	8011362 <UART_SetConfig+0x5a2>
 8010f44:	2380      	movs	r3, #128	; 0x80
 8010f46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010f4a:	e20a      	b.n	8011362 <UART_SetConfig+0x5a2>
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	4a6b      	ldr	r2, [pc, #428]	; (8011100 <UART_SetConfig+0x340>)
 8010f52:	4293      	cmp	r3, r2
 8010f54:	d130      	bne.n	8010fb8 <UART_SetConfig+0x1f8>
 8010f56:	4b69      	ldr	r3, [pc, #420]	; (80110fc <UART_SetConfig+0x33c>)
 8010f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f5a:	f003 0307 	and.w	r3, r3, #7
 8010f5e:	2b05      	cmp	r3, #5
 8010f60:	d826      	bhi.n	8010fb0 <UART_SetConfig+0x1f0>
 8010f62:	a201      	add	r2, pc, #4	; (adr r2, 8010f68 <UART_SetConfig+0x1a8>)
 8010f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f68:	08010f81 	.word	0x08010f81
 8010f6c:	08010f89 	.word	0x08010f89
 8010f70:	08010f91 	.word	0x08010f91
 8010f74:	08010f99 	.word	0x08010f99
 8010f78:	08010fa1 	.word	0x08010fa1
 8010f7c:	08010fa9 	.word	0x08010fa9
 8010f80:	2300      	movs	r3, #0
 8010f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010f86:	e1ec      	b.n	8011362 <UART_SetConfig+0x5a2>
 8010f88:	2304      	movs	r3, #4
 8010f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010f8e:	e1e8      	b.n	8011362 <UART_SetConfig+0x5a2>
 8010f90:	2308      	movs	r3, #8
 8010f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010f96:	e1e4      	b.n	8011362 <UART_SetConfig+0x5a2>
 8010f98:	2310      	movs	r3, #16
 8010f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010f9e:	e1e0      	b.n	8011362 <UART_SetConfig+0x5a2>
 8010fa0:	2320      	movs	r3, #32
 8010fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010fa6:	e1dc      	b.n	8011362 <UART_SetConfig+0x5a2>
 8010fa8:	2340      	movs	r3, #64	; 0x40
 8010faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010fae:	e1d8      	b.n	8011362 <UART_SetConfig+0x5a2>
 8010fb0:	2380      	movs	r3, #128	; 0x80
 8010fb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010fb6:	e1d4      	b.n	8011362 <UART_SetConfig+0x5a2>
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	4a51      	ldr	r2, [pc, #324]	; (8011104 <UART_SetConfig+0x344>)
 8010fbe:	4293      	cmp	r3, r2
 8010fc0:	d130      	bne.n	8011024 <UART_SetConfig+0x264>
 8010fc2:	4b4e      	ldr	r3, [pc, #312]	; (80110fc <UART_SetConfig+0x33c>)
 8010fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010fc6:	f003 0307 	and.w	r3, r3, #7
 8010fca:	2b05      	cmp	r3, #5
 8010fcc:	d826      	bhi.n	801101c <UART_SetConfig+0x25c>
 8010fce:	a201      	add	r2, pc, #4	; (adr r2, 8010fd4 <UART_SetConfig+0x214>)
 8010fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fd4:	08010fed 	.word	0x08010fed
 8010fd8:	08010ff5 	.word	0x08010ff5
 8010fdc:	08010ffd 	.word	0x08010ffd
 8010fe0:	08011005 	.word	0x08011005
 8010fe4:	0801100d 	.word	0x0801100d
 8010fe8:	08011015 	.word	0x08011015
 8010fec:	2300      	movs	r3, #0
 8010fee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010ff2:	e1b6      	b.n	8011362 <UART_SetConfig+0x5a2>
 8010ff4:	2304      	movs	r3, #4
 8010ff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010ffa:	e1b2      	b.n	8011362 <UART_SetConfig+0x5a2>
 8010ffc:	2308      	movs	r3, #8
 8010ffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011002:	e1ae      	b.n	8011362 <UART_SetConfig+0x5a2>
 8011004:	2310      	movs	r3, #16
 8011006:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801100a:	e1aa      	b.n	8011362 <UART_SetConfig+0x5a2>
 801100c:	2320      	movs	r3, #32
 801100e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011012:	e1a6      	b.n	8011362 <UART_SetConfig+0x5a2>
 8011014:	2340      	movs	r3, #64	; 0x40
 8011016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801101a:	e1a2      	b.n	8011362 <UART_SetConfig+0x5a2>
 801101c:	2380      	movs	r3, #128	; 0x80
 801101e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011022:	e19e      	b.n	8011362 <UART_SetConfig+0x5a2>
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	4a37      	ldr	r2, [pc, #220]	; (8011108 <UART_SetConfig+0x348>)
 801102a:	4293      	cmp	r3, r2
 801102c:	d130      	bne.n	8011090 <UART_SetConfig+0x2d0>
 801102e:	4b33      	ldr	r3, [pc, #204]	; (80110fc <UART_SetConfig+0x33c>)
 8011030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011032:	f003 0307 	and.w	r3, r3, #7
 8011036:	2b05      	cmp	r3, #5
 8011038:	d826      	bhi.n	8011088 <UART_SetConfig+0x2c8>
 801103a:	a201      	add	r2, pc, #4	; (adr r2, 8011040 <UART_SetConfig+0x280>)
 801103c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011040:	08011059 	.word	0x08011059
 8011044:	08011061 	.word	0x08011061
 8011048:	08011069 	.word	0x08011069
 801104c:	08011071 	.word	0x08011071
 8011050:	08011079 	.word	0x08011079
 8011054:	08011081 	.word	0x08011081
 8011058:	2300      	movs	r3, #0
 801105a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801105e:	e180      	b.n	8011362 <UART_SetConfig+0x5a2>
 8011060:	2304      	movs	r3, #4
 8011062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011066:	e17c      	b.n	8011362 <UART_SetConfig+0x5a2>
 8011068:	2308      	movs	r3, #8
 801106a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801106e:	e178      	b.n	8011362 <UART_SetConfig+0x5a2>
 8011070:	2310      	movs	r3, #16
 8011072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011076:	e174      	b.n	8011362 <UART_SetConfig+0x5a2>
 8011078:	2320      	movs	r3, #32
 801107a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801107e:	e170      	b.n	8011362 <UART_SetConfig+0x5a2>
 8011080:	2340      	movs	r3, #64	; 0x40
 8011082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011086:	e16c      	b.n	8011362 <UART_SetConfig+0x5a2>
 8011088:	2380      	movs	r3, #128	; 0x80
 801108a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801108e:	e168      	b.n	8011362 <UART_SetConfig+0x5a2>
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	4a1d      	ldr	r2, [pc, #116]	; (801110c <UART_SetConfig+0x34c>)
 8011096:	4293      	cmp	r3, r2
 8011098:	d142      	bne.n	8011120 <UART_SetConfig+0x360>
 801109a:	4b18      	ldr	r3, [pc, #96]	; (80110fc <UART_SetConfig+0x33c>)
 801109c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801109e:	f003 0307 	and.w	r3, r3, #7
 80110a2:	2b05      	cmp	r3, #5
 80110a4:	d838      	bhi.n	8011118 <UART_SetConfig+0x358>
 80110a6:	a201      	add	r2, pc, #4	; (adr r2, 80110ac <UART_SetConfig+0x2ec>)
 80110a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110ac:	080110c5 	.word	0x080110c5
 80110b0:	080110cd 	.word	0x080110cd
 80110b4:	080110d5 	.word	0x080110d5
 80110b8:	080110dd 	.word	0x080110dd
 80110bc:	080110e5 	.word	0x080110e5
 80110c0:	08011111 	.word	0x08011111
 80110c4:	2300      	movs	r3, #0
 80110c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80110ca:	e14a      	b.n	8011362 <UART_SetConfig+0x5a2>
 80110cc:	2304      	movs	r3, #4
 80110ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80110d2:	e146      	b.n	8011362 <UART_SetConfig+0x5a2>
 80110d4:	2308      	movs	r3, #8
 80110d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80110da:	e142      	b.n	8011362 <UART_SetConfig+0x5a2>
 80110dc:	2310      	movs	r3, #16
 80110de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80110e2:	e13e      	b.n	8011362 <UART_SetConfig+0x5a2>
 80110e4:	2320      	movs	r3, #32
 80110e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80110ea:	e13a      	b.n	8011362 <UART_SetConfig+0x5a2>
 80110ec:	cfff69f3 	.word	0xcfff69f3
 80110f0:	58000c00 	.word	0x58000c00
 80110f4:	11fff4ff 	.word	0x11fff4ff
 80110f8:	40011000 	.word	0x40011000
 80110fc:	58024400 	.word	0x58024400
 8011100:	40004400 	.word	0x40004400
 8011104:	40004800 	.word	0x40004800
 8011108:	40004c00 	.word	0x40004c00
 801110c:	40005000 	.word	0x40005000
 8011110:	2340      	movs	r3, #64	; 0x40
 8011112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011116:	e124      	b.n	8011362 <UART_SetConfig+0x5a2>
 8011118:	2380      	movs	r3, #128	; 0x80
 801111a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801111e:	e120      	b.n	8011362 <UART_SetConfig+0x5a2>
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	4acc      	ldr	r2, [pc, #816]	; (8011458 <UART_SetConfig+0x698>)
 8011126:	4293      	cmp	r3, r2
 8011128:	d176      	bne.n	8011218 <UART_SetConfig+0x458>
 801112a:	4bcc      	ldr	r3, [pc, #816]	; (801145c <UART_SetConfig+0x69c>)
 801112c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801112e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011132:	2b28      	cmp	r3, #40	; 0x28
 8011134:	d86c      	bhi.n	8011210 <UART_SetConfig+0x450>
 8011136:	a201      	add	r2, pc, #4	; (adr r2, 801113c <UART_SetConfig+0x37c>)
 8011138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801113c:	080111e1 	.word	0x080111e1
 8011140:	08011211 	.word	0x08011211
 8011144:	08011211 	.word	0x08011211
 8011148:	08011211 	.word	0x08011211
 801114c:	08011211 	.word	0x08011211
 8011150:	08011211 	.word	0x08011211
 8011154:	08011211 	.word	0x08011211
 8011158:	08011211 	.word	0x08011211
 801115c:	080111e9 	.word	0x080111e9
 8011160:	08011211 	.word	0x08011211
 8011164:	08011211 	.word	0x08011211
 8011168:	08011211 	.word	0x08011211
 801116c:	08011211 	.word	0x08011211
 8011170:	08011211 	.word	0x08011211
 8011174:	08011211 	.word	0x08011211
 8011178:	08011211 	.word	0x08011211
 801117c:	080111f1 	.word	0x080111f1
 8011180:	08011211 	.word	0x08011211
 8011184:	08011211 	.word	0x08011211
 8011188:	08011211 	.word	0x08011211
 801118c:	08011211 	.word	0x08011211
 8011190:	08011211 	.word	0x08011211
 8011194:	08011211 	.word	0x08011211
 8011198:	08011211 	.word	0x08011211
 801119c:	080111f9 	.word	0x080111f9
 80111a0:	08011211 	.word	0x08011211
 80111a4:	08011211 	.word	0x08011211
 80111a8:	08011211 	.word	0x08011211
 80111ac:	08011211 	.word	0x08011211
 80111b0:	08011211 	.word	0x08011211
 80111b4:	08011211 	.word	0x08011211
 80111b8:	08011211 	.word	0x08011211
 80111bc:	08011201 	.word	0x08011201
 80111c0:	08011211 	.word	0x08011211
 80111c4:	08011211 	.word	0x08011211
 80111c8:	08011211 	.word	0x08011211
 80111cc:	08011211 	.word	0x08011211
 80111d0:	08011211 	.word	0x08011211
 80111d4:	08011211 	.word	0x08011211
 80111d8:	08011211 	.word	0x08011211
 80111dc:	08011209 	.word	0x08011209
 80111e0:	2301      	movs	r3, #1
 80111e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80111e6:	e0bc      	b.n	8011362 <UART_SetConfig+0x5a2>
 80111e8:	2304      	movs	r3, #4
 80111ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80111ee:	e0b8      	b.n	8011362 <UART_SetConfig+0x5a2>
 80111f0:	2308      	movs	r3, #8
 80111f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80111f6:	e0b4      	b.n	8011362 <UART_SetConfig+0x5a2>
 80111f8:	2310      	movs	r3, #16
 80111fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80111fe:	e0b0      	b.n	8011362 <UART_SetConfig+0x5a2>
 8011200:	2320      	movs	r3, #32
 8011202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011206:	e0ac      	b.n	8011362 <UART_SetConfig+0x5a2>
 8011208:	2340      	movs	r3, #64	; 0x40
 801120a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801120e:	e0a8      	b.n	8011362 <UART_SetConfig+0x5a2>
 8011210:	2380      	movs	r3, #128	; 0x80
 8011212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011216:	e0a4      	b.n	8011362 <UART_SetConfig+0x5a2>
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	4a90      	ldr	r2, [pc, #576]	; (8011460 <UART_SetConfig+0x6a0>)
 801121e:	4293      	cmp	r3, r2
 8011220:	d130      	bne.n	8011284 <UART_SetConfig+0x4c4>
 8011222:	4b8e      	ldr	r3, [pc, #568]	; (801145c <UART_SetConfig+0x69c>)
 8011224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011226:	f003 0307 	and.w	r3, r3, #7
 801122a:	2b05      	cmp	r3, #5
 801122c:	d826      	bhi.n	801127c <UART_SetConfig+0x4bc>
 801122e:	a201      	add	r2, pc, #4	; (adr r2, 8011234 <UART_SetConfig+0x474>)
 8011230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011234:	0801124d 	.word	0x0801124d
 8011238:	08011255 	.word	0x08011255
 801123c:	0801125d 	.word	0x0801125d
 8011240:	08011265 	.word	0x08011265
 8011244:	0801126d 	.word	0x0801126d
 8011248:	08011275 	.word	0x08011275
 801124c:	2300      	movs	r3, #0
 801124e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011252:	e086      	b.n	8011362 <UART_SetConfig+0x5a2>
 8011254:	2304      	movs	r3, #4
 8011256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801125a:	e082      	b.n	8011362 <UART_SetConfig+0x5a2>
 801125c:	2308      	movs	r3, #8
 801125e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011262:	e07e      	b.n	8011362 <UART_SetConfig+0x5a2>
 8011264:	2310      	movs	r3, #16
 8011266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801126a:	e07a      	b.n	8011362 <UART_SetConfig+0x5a2>
 801126c:	2320      	movs	r3, #32
 801126e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011272:	e076      	b.n	8011362 <UART_SetConfig+0x5a2>
 8011274:	2340      	movs	r3, #64	; 0x40
 8011276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801127a:	e072      	b.n	8011362 <UART_SetConfig+0x5a2>
 801127c:	2380      	movs	r3, #128	; 0x80
 801127e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011282:	e06e      	b.n	8011362 <UART_SetConfig+0x5a2>
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	4a76      	ldr	r2, [pc, #472]	; (8011464 <UART_SetConfig+0x6a4>)
 801128a:	4293      	cmp	r3, r2
 801128c:	d130      	bne.n	80112f0 <UART_SetConfig+0x530>
 801128e:	4b73      	ldr	r3, [pc, #460]	; (801145c <UART_SetConfig+0x69c>)
 8011290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011292:	f003 0307 	and.w	r3, r3, #7
 8011296:	2b05      	cmp	r3, #5
 8011298:	d826      	bhi.n	80112e8 <UART_SetConfig+0x528>
 801129a:	a201      	add	r2, pc, #4	; (adr r2, 80112a0 <UART_SetConfig+0x4e0>)
 801129c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112a0:	080112b9 	.word	0x080112b9
 80112a4:	080112c1 	.word	0x080112c1
 80112a8:	080112c9 	.word	0x080112c9
 80112ac:	080112d1 	.word	0x080112d1
 80112b0:	080112d9 	.word	0x080112d9
 80112b4:	080112e1 	.word	0x080112e1
 80112b8:	2300      	movs	r3, #0
 80112ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80112be:	e050      	b.n	8011362 <UART_SetConfig+0x5a2>
 80112c0:	2304      	movs	r3, #4
 80112c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80112c6:	e04c      	b.n	8011362 <UART_SetConfig+0x5a2>
 80112c8:	2308      	movs	r3, #8
 80112ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80112ce:	e048      	b.n	8011362 <UART_SetConfig+0x5a2>
 80112d0:	2310      	movs	r3, #16
 80112d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80112d6:	e044      	b.n	8011362 <UART_SetConfig+0x5a2>
 80112d8:	2320      	movs	r3, #32
 80112da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80112de:	e040      	b.n	8011362 <UART_SetConfig+0x5a2>
 80112e0:	2340      	movs	r3, #64	; 0x40
 80112e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80112e6:	e03c      	b.n	8011362 <UART_SetConfig+0x5a2>
 80112e8:	2380      	movs	r3, #128	; 0x80
 80112ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80112ee:	e038      	b.n	8011362 <UART_SetConfig+0x5a2>
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	4a5c      	ldr	r2, [pc, #368]	; (8011468 <UART_SetConfig+0x6a8>)
 80112f6:	4293      	cmp	r3, r2
 80112f8:	d130      	bne.n	801135c <UART_SetConfig+0x59c>
 80112fa:	4b58      	ldr	r3, [pc, #352]	; (801145c <UART_SetConfig+0x69c>)
 80112fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80112fe:	f003 0307 	and.w	r3, r3, #7
 8011302:	2b05      	cmp	r3, #5
 8011304:	d826      	bhi.n	8011354 <UART_SetConfig+0x594>
 8011306:	a201      	add	r2, pc, #4	; (adr r2, 801130c <UART_SetConfig+0x54c>)
 8011308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801130c:	08011325 	.word	0x08011325
 8011310:	0801132d 	.word	0x0801132d
 8011314:	08011335 	.word	0x08011335
 8011318:	0801133d 	.word	0x0801133d
 801131c:	08011345 	.word	0x08011345
 8011320:	0801134d 	.word	0x0801134d
 8011324:	2302      	movs	r3, #2
 8011326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801132a:	e01a      	b.n	8011362 <UART_SetConfig+0x5a2>
 801132c:	2304      	movs	r3, #4
 801132e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011332:	e016      	b.n	8011362 <UART_SetConfig+0x5a2>
 8011334:	2308      	movs	r3, #8
 8011336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801133a:	e012      	b.n	8011362 <UART_SetConfig+0x5a2>
 801133c:	2310      	movs	r3, #16
 801133e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011342:	e00e      	b.n	8011362 <UART_SetConfig+0x5a2>
 8011344:	2320      	movs	r3, #32
 8011346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801134a:	e00a      	b.n	8011362 <UART_SetConfig+0x5a2>
 801134c:	2340      	movs	r3, #64	; 0x40
 801134e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011352:	e006      	b.n	8011362 <UART_SetConfig+0x5a2>
 8011354:	2380      	movs	r3, #128	; 0x80
 8011356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801135a:	e002      	b.n	8011362 <UART_SetConfig+0x5a2>
 801135c:	2380      	movs	r3, #128	; 0x80
 801135e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	4a40      	ldr	r2, [pc, #256]	; (8011468 <UART_SetConfig+0x6a8>)
 8011368:	4293      	cmp	r3, r2
 801136a:	f040 80ef 	bne.w	801154c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801136e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011372:	2b20      	cmp	r3, #32
 8011374:	dc46      	bgt.n	8011404 <UART_SetConfig+0x644>
 8011376:	2b02      	cmp	r3, #2
 8011378:	f2c0 8081 	blt.w	801147e <UART_SetConfig+0x6be>
 801137c:	3b02      	subs	r3, #2
 801137e:	2b1e      	cmp	r3, #30
 8011380:	d87d      	bhi.n	801147e <UART_SetConfig+0x6be>
 8011382:	a201      	add	r2, pc, #4	; (adr r2, 8011388 <UART_SetConfig+0x5c8>)
 8011384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011388:	0801140b 	.word	0x0801140b
 801138c:	0801147f 	.word	0x0801147f
 8011390:	08011413 	.word	0x08011413
 8011394:	0801147f 	.word	0x0801147f
 8011398:	0801147f 	.word	0x0801147f
 801139c:	0801147f 	.word	0x0801147f
 80113a0:	08011423 	.word	0x08011423
 80113a4:	0801147f 	.word	0x0801147f
 80113a8:	0801147f 	.word	0x0801147f
 80113ac:	0801147f 	.word	0x0801147f
 80113b0:	0801147f 	.word	0x0801147f
 80113b4:	0801147f 	.word	0x0801147f
 80113b8:	0801147f 	.word	0x0801147f
 80113bc:	0801147f 	.word	0x0801147f
 80113c0:	08011433 	.word	0x08011433
 80113c4:	0801147f 	.word	0x0801147f
 80113c8:	0801147f 	.word	0x0801147f
 80113cc:	0801147f 	.word	0x0801147f
 80113d0:	0801147f 	.word	0x0801147f
 80113d4:	0801147f 	.word	0x0801147f
 80113d8:	0801147f 	.word	0x0801147f
 80113dc:	0801147f 	.word	0x0801147f
 80113e0:	0801147f 	.word	0x0801147f
 80113e4:	0801147f 	.word	0x0801147f
 80113e8:	0801147f 	.word	0x0801147f
 80113ec:	0801147f 	.word	0x0801147f
 80113f0:	0801147f 	.word	0x0801147f
 80113f4:	0801147f 	.word	0x0801147f
 80113f8:	0801147f 	.word	0x0801147f
 80113fc:	0801147f 	.word	0x0801147f
 8011400:	08011471 	.word	0x08011471
 8011404:	2b40      	cmp	r3, #64	; 0x40
 8011406:	d036      	beq.n	8011476 <UART_SetConfig+0x6b6>
 8011408:	e039      	b.n	801147e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801140a:	f7fb fdd1 	bl	800cfb0 <HAL_RCCEx_GetD3PCLK1Freq>
 801140e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8011410:	e03b      	b.n	801148a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011412:	f107 0314 	add.w	r3, r7, #20
 8011416:	4618      	mov	r0, r3
 8011418:	f7fb fde0 	bl	800cfdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801141c:	69bb      	ldr	r3, [r7, #24]
 801141e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8011420:	e033      	b.n	801148a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011422:	f107 0308 	add.w	r3, r7, #8
 8011426:	4618      	mov	r0, r3
 8011428:	f7fb ff2c 	bl	800d284 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8011430:	e02b      	b.n	801148a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011432:	4b0a      	ldr	r3, [pc, #40]	; (801145c <UART_SetConfig+0x69c>)
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	f003 0320 	and.w	r3, r3, #32
 801143a:	2b00      	cmp	r3, #0
 801143c:	d009      	beq.n	8011452 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801143e:	4b07      	ldr	r3, [pc, #28]	; (801145c <UART_SetConfig+0x69c>)
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	08db      	lsrs	r3, r3, #3
 8011444:	f003 0303 	and.w	r3, r3, #3
 8011448:	4a08      	ldr	r2, [pc, #32]	; (801146c <UART_SetConfig+0x6ac>)
 801144a:	fa22 f303 	lsr.w	r3, r2, r3
 801144e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011450:	e01b      	b.n	801148a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8011452:	4b06      	ldr	r3, [pc, #24]	; (801146c <UART_SetConfig+0x6ac>)
 8011454:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8011456:	e018      	b.n	801148a <UART_SetConfig+0x6ca>
 8011458:	40011400 	.word	0x40011400
 801145c:	58024400 	.word	0x58024400
 8011460:	40007800 	.word	0x40007800
 8011464:	40007c00 	.word	0x40007c00
 8011468:	58000c00 	.word	0x58000c00
 801146c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011470:	4bc4      	ldr	r3, [pc, #784]	; (8011784 <UART_SetConfig+0x9c4>)
 8011472:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8011474:	e009      	b.n	801148a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801147a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801147c:	e005      	b.n	801148a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 801147e:	2300      	movs	r3, #0
 8011480:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8011482:	2301      	movs	r3, #1
 8011484:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8011488:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801148a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801148c:	2b00      	cmp	r3, #0
 801148e:	f000 81da 	beq.w	8011846 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011496:	4abc      	ldr	r2, [pc, #752]	; (8011788 <UART_SetConfig+0x9c8>)
 8011498:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801149c:	461a      	mov	r2, r3
 801149e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80114a4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	685a      	ldr	r2, [r3, #4]
 80114aa:	4613      	mov	r3, r2
 80114ac:	005b      	lsls	r3, r3, #1
 80114ae:	4413      	add	r3, r2
 80114b0:	6a3a      	ldr	r2, [r7, #32]
 80114b2:	429a      	cmp	r2, r3
 80114b4:	d305      	bcc.n	80114c2 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	685b      	ldr	r3, [r3, #4]
 80114ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80114bc:	6a3a      	ldr	r2, [r7, #32]
 80114be:	429a      	cmp	r2, r3
 80114c0:	d903      	bls.n	80114ca <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80114c2:	2301      	movs	r3, #1
 80114c4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80114c8:	e1bd      	b.n	8011846 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80114ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114cc:	4618      	mov	r0, r3
 80114ce:	f04f 0100 	mov.w	r1, #0
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114d6:	4aac      	ldr	r2, [pc, #688]	; (8011788 <UART_SetConfig+0x9c8>)
 80114d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80114dc:	b29a      	uxth	r2, r3
 80114de:	f04f 0300 	mov.w	r3, #0
 80114e2:	f7ef f911 	bl	8000708 <__aeabi_uldivmod>
 80114e6:	4602      	mov	r2, r0
 80114e8:	460b      	mov	r3, r1
 80114ea:	4610      	mov	r0, r2
 80114ec:	4619      	mov	r1, r3
 80114ee:	f04f 0200 	mov.w	r2, #0
 80114f2:	f04f 0300 	mov.w	r3, #0
 80114f6:	020b      	lsls	r3, r1, #8
 80114f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80114fc:	0202      	lsls	r2, r0, #8
 80114fe:	6879      	ldr	r1, [r7, #4]
 8011500:	6849      	ldr	r1, [r1, #4]
 8011502:	0849      	lsrs	r1, r1, #1
 8011504:	4608      	mov	r0, r1
 8011506:	f04f 0100 	mov.w	r1, #0
 801150a:	1814      	adds	r4, r2, r0
 801150c:	eb43 0501 	adc.w	r5, r3, r1
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	685b      	ldr	r3, [r3, #4]
 8011514:	461a      	mov	r2, r3
 8011516:	f04f 0300 	mov.w	r3, #0
 801151a:	4620      	mov	r0, r4
 801151c:	4629      	mov	r1, r5
 801151e:	f7ef f8f3 	bl	8000708 <__aeabi_uldivmod>
 8011522:	4602      	mov	r2, r0
 8011524:	460b      	mov	r3, r1
 8011526:	4613      	mov	r3, r2
 8011528:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801152a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801152c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011530:	d308      	bcc.n	8011544 <UART_SetConfig+0x784>
 8011532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011534:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011538:	d204      	bcs.n	8011544 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011540:	60da      	str	r2, [r3, #12]
 8011542:	e180      	b.n	8011846 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8011544:	2301      	movs	r3, #1
 8011546:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 801154a:	e17c      	b.n	8011846 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	69db      	ldr	r3, [r3, #28]
 8011550:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011554:	f040 80bf 	bne.w	80116d6 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8011558:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801155c:	2b20      	cmp	r3, #32
 801155e:	dc49      	bgt.n	80115f4 <UART_SetConfig+0x834>
 8011560:	2b00      	cmp	r3, #0
 8011562:	db7c      	blt.n	801165e <UART_SetConfig+0x89e>
 8011564:	2b20      	cmp	r3, #32
 8011566:	d87a      	bhi.n	801165e <UART_SetConfig+0x89e>
 8011568:	a201      	add	r2, pc, #4	; (adr r2, 8011570 <UART_SetConfig+0x7b0>)
 801156a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801156e:	bf00      	nop
 8011570:	080115fb 	.word	0x080115fb
 8011574:	08011603 	.word	0x08011603
 8011578:	0801165f 	.word	0x0801165f
 801157c:	0801165f 	.word	0x0801165f
 8011580:	0801160b 	.word	0x0801160b
 8011584:	0801165f 	.word	0x0801165f
 8011588:	0801165f 	.word	0x0801165f
 801158c:	0801165f 	.word	0x0801165f
 8011590:	0801161b 	.word	0x0801161b
 8011594:	0801165f 	.word	0x0801165f
 8011598:	0801165f 	.word	0x0801165f
 801159c:	0801165f 	.word	0x0801165f
 80115a0:	0801165f 	.word	0x0801165f
 80115a4:	0801165f 	.word	0x0801165f
 80115a8:	0801165f 	.word	0x0801165f
 80115ac:	0801165f 	.word	0x0801165f
 80115b0:	0801162b 	.word	0x0801162b
 80115b4:	0801165f 	.word	0x0801165f
 80115b8:	0801165f 	.word	0x0801165f
 80115bc:	0801165f 	.word	0x0801165f
 80115c0:	0801165f 	.word	0x0801165f
 80115c4:	0801165f 	.word	0x0801165f
 80115c8:	0801165f 	.word	0x0801165f
 80115cc:	0801165f 	.word	0x0801165f
 80115d0:	0801165f 	.word	0x0801165f
 80115d4:	0801165f 	.word	0x0801165f
 80115d8:	0801165f 	.word	0x0801165f
 80115dc:	0801165f 	.word	0x0801165f
 80115e0:	0801165f 	.word	0x0801165f
 80115e4:	0801165f 	.word	0x0801165f
 80115e8:	0801165f 	.word	0x0801165f
 80115ec:	0801165f 	.word	0x0801165f
 80115f0:	08011651 	.word	0x08011651
 80115f4:	2b40      	cmp	r3, #64	; 0x40
 80115f6:	d02e      	beq.n	8011656 <UART_SetConfig+0x896>
 80115f8:	e031      	b.n	801165e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80115fa:	f7fa f89b 	bl	800b734 <HAL_RCC_GetPCLK1Freq>
 80115fe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8011600:	e033      	b.n	801166a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011602:	f7fa f8ad 	bl	800b760 <HAL_RCC_GetPCLK2Freq>
 8011606:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8011608:	e02f      	b.n	801166a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801160a:	f107 0314 	add.w	r3, r7, #20
 801160e:	4618      	mov	r0, r3
 8011610:	f7fb fce4 	bl	800cfdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011614:	69bb      	ldr	r3, [r7, #24]
 8011616:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8011618:	e027      	b.n	801166a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801161a:	f107 0308 	add.w	r3, r7, #8
 801161e:	4618      	mov	r0, r3
 8011620:	f7fb fe30 	bl	800d284 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8011628:	e01f      	b.n	801166a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801162a:	4b58      	ldr	r3, [pc, #352]	; (801178c <UART_SetConfig+0x9cc>)
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	f003 0320 	and.w	r3, r3, #32
 8011632:	2b00      	cmp	r3, #0
 8011634:	d009      	beq.n	801164a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011636:	4b55      	ldr	r3, [pc, #340]	; (801178c <UART_SetConfig+0x9cc>)
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	08db      	lsrs	r3, r3, #3
 801163c:	f003 0303 	and.w	r3, r3, #3
 8011640:	4a53      	ldr	r2, [pc, #332]	; (8011790 <UART_SetConfig+0x9d0>)
 8011642:	fa22 f303 	lsr.w	r3, r2, r3
 8011646:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011648:	e00f      	b.n	801166a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 801164a:	4b51      	ldr	r3, [pc, #324]	; (8011790 <UART_SetConfig+0x9d0>)
 801164c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801164e:	e00c      	b.n	801166a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011650:	4b4c      	ldr	r3, [pc, #304]	; (8011784 <UART_SetConfig+0x9c4>)
 8011652:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8011654:	e009      	b.n	801166a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011656:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801165a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801165c:	e005      	b.n	801166a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 801165e:	2300      	movs	r3, #0
 8011660:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8011662:	2301      	movs	r3, #1
 8011664:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8011668:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801166a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801166c:	2b00      	cmp	r3, #0
 801166e:	f000 80ea 	beq.w	8011846 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011676:	4a44      	ldr	r2, [pc, #272]	; (8011788 <UART_SetConfig+0x9c8>)
 8011678:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801167c:	461a      	mov	r2, r3
 801167e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011680:	fbb3 f3f2 	udiv	r3, r3, r2
 8011684:	005a      	lsls	r2, r3, #1
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	685b      	ldr	r3, [r3, #4]
 801168a:	085b      	lsrs	r3, r3, #1
 801168c:	441a      	add	r2, r3
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	685b      	ldr	r3, [r3, #4]
 8011692:	fbb2 f3f3 	udiv	r3, r2, r3
 8011696:	b29b      	uxth	r3, r3
 8011698:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801169a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801169c:	2b0f      	cmp	r3, #15
 801169e:	d916      	bls.n	80116ce <UART_SetConfig+0x90e>
 80116a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80116a6:	d212      	bcs.n	80116ce <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80116a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116aa:	b29b      	uxth	r3, r3
 80116ac:	f023 030f 	bic.w	r3, r3, #15
 80116b0:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80116b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116b4:	085b      	lsrs	r3, r3, #1
 80116b6:	b29b      	uxth	r3, r3
 80116b8:	f003 0307 	and.w	r3, r3, #7
 80116bc:	b29a      	uxth	r2, r3
 80116be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80116c0:	4313      	orrs	r3, r2
 80116c2:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80116ca:	60da      	str	r2, [r3, #12]
 80116cc:	e0bb      	b.n	8011846 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80116ce:	2301      	movs	r3, #1
 80116d0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80116d4:	e0b7      	b.n	8011846 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80116d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80116da:	2b20      	cmp	r3, #32
 80116dc:	dc4a      	bgt.n	8011774 <UART_SetConfig+0x9b4>
 80116de:	2b00      	cmp	r3, #0
 80116e0:	f2c0 8086 	blt.w	80117f0 <UART_SetConfig+0xa30>
 80116e4:	2b20      	cmp	r3, #32
 80116e6:	f200 8083 	bhi.w	80117f0 <UART_SetConfig+0xa30>
 80116ea:	a201      	add	r2, pc, #4	; (adr r2, 80116f0 <UART_SetConfig+0x930>)
 80116ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116f0:	0801177b 	.word	0x0801177b
 80116f4:	08011795 	.word	0x08011795
 80116f8:	080117f1 	.word	0x080117f1
 80116fc:	080117f1 	.word	0x080117f1
 8011700:	0801179d 	.word	0x0801179d
 8011704:	080117f1 	.word	0x080117f1
 8011708:	080117f1 	.word	0x080117f1
 801170c:	080117f1 	.word	0x080117f1
 8011710:	080117ad 	.word	0x080117ad
 8011714:	080117f1 	.word	0x080117f1
 8011718:	080117f1 	.word	0x080117f1
 801171c:	080117f1 	.word	0x080117f1
 8011720:	080117f1 	.word	0x080117f1
 8011724:	080117f1 	.word	0x080117f1
 8011728:	080117f1 	.word	0x080117f1
 801172c:	080117f1 	.word	0x080117f1
 8011730:	080117bd 	.word	0x080117bd
 8011734:	080117f1 	.word	0x080117f1
 8011738:	080117f1 	.word	0x080117f1
 801173c:	080117f1 	.word	0x080117f1
 8011740:	080117f1 	.word	0x080117f1
 8011744:	080117f1 	.word	0x080117f1
 8011748:	080117f1 	.word	0x080117f1
 801174c:	080117f1 	.word	0x080117f1
 8011750:	080117f1 	.word	0x080117f1
 8011754:	080117f1 	.word	0x080117f1
 8011758:	080117f1 	.word	0x080117f1
 801175c:	080117f1 	.word	0x080117f1
 8011760:	080117f1 	.word	0x080117f1
 8011764:	080117f1 	.word	0x080117f1
 8011768:	080117f1 	.word	0x080117f1
 801176c:	080117f1 	.word	0x080117f1
 8011770:	080117e3 	.word	0x080117e3
 8011774:	2b40      	cmp	r3, #64	; 0x40
 8011776:	d037      	beq.n	80117e8 <UART_SetConfig+0xa28>
 8011778:	e03a      	b.n	80117f0 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801177a:	f7f9 ffdb 	bl	800b734 <HAL_RCC_GetPCLK1Freq>
 801177e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8011780:	e03c      	b.n	80117fc <UART_SetConfig+0xa3c>
 8011782:	bf00      	nop
 8011784:	003d0900 	.word	0x003d0900
 8011788:	080290d8 	.word	0x080290d8
 801178c:	58024400 	.word	0x58024400
 8011790:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011794:	f7f9 ffe4 	bl	800b760 <HAL_RCC_GetPCLK2Freq>
 8011798:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 801179a:	e02f      	b.n	80117fc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801179c:	f107 0314 	add.w	r3, r7, #20
 80117a0:	4618      	mov	r0, r3
 80117a2:	f7fb fc1b 	bl	800cfdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80117a6:	69bb      	ldr	r3, [r7, #24]
 80117a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80117aa:	e027      	b.n	80117fc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80117ac:	f107 0308 	add.w	r3, r7, #8
 80117b0:	4618      	mov	r0, r3
 80117b2:	f7fb fd67 	bl	800d284 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80117ba:	e01f      	b.n	80117fc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80117bc:	4b2c      	ldr	r3, [pc, #176]	; (8011870 <UART_SetConfig+0xab0>)
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	f003 0320 	and.w	r3, r3, #32
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d009      	beq.n	80117dc <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80117c8:	4b29      	ldr	r3, [pc, #164]	; (8011870 <UART_SetConfig+0xab0>)
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	08db      	lsrs	r3, r3, #3
 80117ce:	f003 0303 	and.w	r3, r3, #3
 80117d2:	4a28      	ldr	r2, [pc, #160]	; (8011874 <UART_SetConfig+0xab4>)
 80117d4:	fa22 f303 	lsr.w	r3, r2, r3
 80117d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80117da:	e00f      	b.n	80117fc <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80117dc:	4b25      	ldr	r3, [pc, #148]	; (8011874 <UART_SetConfig+0xab4>)
 80117de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80117e0:	e00c      	b.n	80117fc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80117e2:	4b25      	ldr	r3, [pc, #148]	; (8011878 <UART_SetConfig+0xab8>)
 80117e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80117e6:	e009      	b.n	80117fc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80117e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80117ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80117ee:	e005      	b.n	80117fc <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 80117f0:	2300      	movs	r3, #0
 80117f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80117f4:	2301      	movs	r3, #1
 80117f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80117fa:	bf00      	nop
    }

    if (pclk != 0U)
 80117fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d021      	beq.n	8011846 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011806:	4a1d      	ldr	r2, [pc, #116]	; (801187c <UART_SetConfig+0xabc>)
 8011808:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801180c:	461a      	mov	r2, r3
 801180e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011810:	fbb3 f2f2 	udiv	r2, r3, r2
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	685b      	ldr	r3, [r3, #4]
 8011818:	085b      	lsrs	r3, r3, #1
 801181a:	441a      	add	r2, r3
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	685b      	ldr	r3, [r3, #4]
 8011820:	fbb2 f3f3 	udiv	r3, r2, r3
 8011824:	b29b      	uxth	r3, r3
 8011826:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801182a:	2b0f      	cmp	r3, #15
 801182c:	d908      	bls.n	8011840 <UART_SetConfig+0xa80>
 801182e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011834:	d204      	bcs.n	8011840 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801183c:	60da      	str	r2, [r3, #12]
 801183e:	e002      	b.n	8011846 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8011840:	2301      	movs	r3, #1
 8011842:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	2201      	movs	r2, #1
 801184a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	2201      	movs	r2, #1
 8011852:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	2200      	movs	r2, #0
 801185a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	2200      	movs	r2, #0
 8011860:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8011862:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8011866:	4618      	mov	r0, r3
 8011868:	3738      	adds	r7, #56	; 0x38
 801186a:	46bd      	mov	sp, r7
 801186c:	bdb0      	pop	{r4, r5, r7, pc}
 801186e:	bf00      	nop
 8011870:	58024400 	.word	0x58024400
 8011874:	03d09000 	.word	0x03d09000
 8011878:	003d0900 	.word	0x003d0900
 801187c:	080290d8 	.word	0x080290d8

08011880 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011880:	b480      	push	{r7}
 8011882:	b083      	sub	sp, #12
 8011884:	af00      	add	r7, sp, #0
 8011886:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801188c:	f003 0301 	and.w	r3, r3, #1
 8011890:	2b00      	cmp	r3, #0
 8011892:	d00a      	beq.n	80118aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	685b      	ldr	r3, [r3, #4]
 801189a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	430a      	orrs	r2, r1
 80118a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118ae:	f003 0302 	and.w	r3, r3, #2
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d00a      	beq.n	80118cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	685b      	ldr	r3, [r3, #4]
 80118bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	430a      	orrs	r2, r1
 80118ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118d0:	f003 0304 	and.w	r3, r3, #4
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d00a      	beq.n	80118ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	685b      	ldr	r3, [r3, #4]
 80118de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	430a      	orrs	r2, r1
 80118ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118f2:	f003 0308 	and.w	r3, r3, #8
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d00a      	beq.n	8011910 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	685b      	ldr	r3, [r3, #4]
 8011900:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	430a      	orrs	r2, r1
 801190e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011914:	f003 0310 	and.w	r3, r3, #16
 8011918:	2b00      	cmp	r3, #0
 801191a:	d00a      	beq.n	8011932 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	689b      	ldr	r3, [r3, #8]
 8011922:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	430a      	orrs	r2, r1
 8011930:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011936:	f003 0320 	and.w	r3, r3, #32
 801193a:	2b00      	cmp	r3, #0
 801193c:	d00a      	beq.n	8011954 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	689b      	ldr	r3, [r3, #8]
 8011944:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	430a      	orrs	r2, r1
 8011952:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801195c:	2b00      	cmp	r3, #0
 801195e:	d01a      	beq.n	8011996 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	685b      	ldr	r3, [r3, #4]
 8011966:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	430a      	orrs	r2, r1
 8011974:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801197a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801197e:	d10a      	bne.n	8011996 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	685b      	ldr	r3, [r3, #4]
 8011986:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	430a      	orrs	r2, r1
 8011994:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801199a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d00a      	beq.n	80119b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	685b      	ldr	r3, [r3, #4]
 80119a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	430a      	orrs	r2, r1
 80119b6:	605a      	str	r2, [r3, #4]
  }
}
 80119b8:	bf00      	nop
 80119ba:	370c      	adds	r7, #12
 80119bc:	46bd      	mov	sp, r7
 80119be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c2:	4770      	bx	lr

080119c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b086      	sub	sp, #24
 80119c8:	af02      	add	r7, sp, #8
 80119ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	2200      	movs	r2, #0
 80119d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80119d4:	f7f2 fb8a 	bl	80040ec <HAL_GetTick>
 80119d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	f003 0308 	and.w	r3, r3, #8
 80119e4:	2b08      	cmp	r3, #8
 80119e6:	d10e      	bne.n	8011a06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80119e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80119ec:	9300      	str	r3, [sp, #0]
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	2200      	movs	r2, #0
 80119f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80119f6:	6878      	ldr	r0, [r7, #4]
 80119f8:	f000 f82f 	bl	8011a5a <UART_WaitOnFlagUntilTimeout>
 80119fc:	4603      	mov	r3, r0
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d001      	beq.n	8011a06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011a02:	2303      	movs	r3, #3
 8011a04:	e025      	b.n	8011a52 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	f003 0304 	and.w	r3, r3, #4
 8011a10:	2b04      	cmp	r3, #4
 8011a12:	d10e      	bne.n	8011a32 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011a14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011a18:	9300      	str	r3, [sp, #0]
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	2200      	movs	r2, #0
 8011a1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011a22:	6878      	ldr	r0, [r7, #4]
 8011a24:	f000 f819 	bl	8011a5a <UART_WaitOnFlagUntilTimeout>
 8011a28:	4603      	mov	r3, r0
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d001      	beq.n	8011a32 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011a2e:	2303      	movs	r3, #3
 8011a30:	e00f      	b.n	8011a52 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	2220      	movs	r2, #32
 8011a36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	2220      	movs	r2, #32
 8011a3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	2200      	movs	r2, #0
 8011a46:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	2200      	movs	r2, #0
 8011a4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011a50:	2300      	movs	r3, #0
}
 8011a52:	4618      	mov	r0, r3
 8011a54:	3710      	adds	r7, #16
 8011a56:	46bd      	mov	sp, r7
 8011a58:	bd80      	pop	{r7, pc}

08011a5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011a5a:	b580      	push	{r7, lr}
 8011a5c:	b084      	sub	sp, #16
 8011a5e:	af00      	add	r7, sp, #0
 8011a60:	60f8      	str	r0, [r7, #12]
 8011a62:	60b9      	str	r1, [r7, #8]
 8011a64:	603b      	str	r3, [r7, #0]
 8011a66:	4613      	mov	r3, r2
 8011a68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011a6a:	e062      	b.n	8011b32 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011a6c:	69bb      	ldr	r3, [r7, #24]
 8011a6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011a72:	d05e      	beq.n	8011b32 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011a74:	f7f2 fb3a 	bl	80040ec <HAL_GetTick>
 8011a78:	4602      	mov	r2, r0
 8011a7a:	683b      	ldr	r3, [r7, #0]
 8011a7c:	1ad3      	subs	r3, r2, r3
 8011a7e:	69ba      	ldr	r2, [r7, #24]
 8011a80:	429a      	cmp	r2, r3
 8011a82:	d302      	bcc.n	8011a8a <UART_WaitOnFlagUntilTimeout+0x30>
 8011a84:	69bb      	ldr	r3, [r7, #24]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d11d      	bne.n	8011ac6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	681a      	ldr	r2, [r3, #0]
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011a98:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	689a      	ldr	r2, [r3, #8]
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	f022 0201 	bic.w	r2, r2, #1
 8011aa8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	2220      	movs	r2, #32
 8011aae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	2220      	movs	r2, #32
 8011ab6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	2200      	movs	r2, #0
 8011abe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8011ac2:	2303      	movs	r3, #3
 8011ac4:	e045      	b.n	8011b52 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	f003 0304 	and.w	r3, r3, #4
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d02e      	beq.n	8011b32 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	69db      	ldr	r3, [r3, #28]
 8011ada:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011ade:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011ae2:	d126      	bne.n	8011b32 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011aec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	681a      	ldr	r2, [r3, #0]
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011afc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	689a      	ldr	r2, [r3, #8]
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	f022 0201 	bic.w	r2, r2, #1
 8011b0c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	2220      	movs	r2, #32
 8011b12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	2220      	movs	r2, #32
 8011b1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	2220      	movs	r2, #32
 8011b22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	2200      	movs	r2, #0
 8011b2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8011b2e:	2303      	movs	r3, #3
 8011b30:	e00f      	b.n	8011b52 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	69da      	ldr	r2, [r3, #28]
 8011b38:	68bb      	ldr	r3, [r7, #8]
 8011b3a:	4013      	ands	r3, r2
 8011b3c:	68ba      	ldr	r2, [r7, #8]
 8011b3e:	429a      	cmp	r2, r3
 8011b40:	bf0c      	ite	eq
 8011b42:	2301      	moveq	r3, #1
 8011b44:	2300      	movne	r3, #0
 8011b46:	b2db      	uxtb	r3, r3
 8011b48:	461a      	mov	r2, r3
 8011b4a:	79fb      	ldrb	r3, [r7, #7]
 8011b4c:	429a      	cmp	r2, r3
 8011b4e:	d08d      	beq.n	8011a6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011b50:	2300      	movs	r3, #0
}
 8011b52:	4618      	mov	r0, r3
 8011b54:	3710      	adds	r7, #16
 8011b56:	46bd      	mov	sp, r7
 8011b58:	bd80      	pop	{r7, pc}

08011b5a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011b5a:	b480      	push	{r7}
 8011b5c:	b085      	sub	sp, #20
 8011b5e:	af00      	add	r7, sp, #0
 8011b60:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011b68:	2b01      	cmp	r3, #1
 8011b6a:	d101      	bne.n	8011b70 <HAL_UARTEx_DisableFifoMode+0x16>
 8011b6c:	2302      	movs	r3, #2
 8011b6e:	e027      	b.n	8011bc0 <HAL_UARTEx_DisableFifoMode+0x66>
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	2201      	movs	r2, #1
 8011b74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	2224      	movs	r2, #36	; 0x24
 8011b7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	681a      	ldr	r2, [r3, #0]
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	f022 0201 	bic.w	r2, r2, #1
 8011b96:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011b9e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	2200      	movs	r2, #0
 8011ba4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	68fa      	ldr	r2, [r7, #12]
 8011bac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	2220      	movs	r2, #32
 8011bb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	2200      	movs	r2, #0
 8011bba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011bbe:	2300      	movs	r3, #0
}
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	3714      	adds	r7, #20
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bca:	4770      	bx	lr

08011bcc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b084      	sub	sp, #16
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]
 8011bd4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011bdc:	2b01      	cmp	r3, #1
 8011bde:	d101      	bne.n	8011be4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011be0:	2302      	movs	r3, #2
 8011be2:	e02d      	b.n	8011c40 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	2201      	movs	r2, #1
 8011be8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	2224      	movs	r2, #36	; 0x24
 8011bf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	681a      	ldr	r2, [r3, #0]
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	f022 0201 	bic.w	r2, r2, #1
 8011c0a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	689b      	ldr	r3, [r3, #8]
 8011c12:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	683a      	ldr	r2, [r7, #0]
 8011c1c:	430a      	orrs	r2, r1
 8011c1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011c20:	6878      	ldr	r0, [r7, #4]
 8011c22:	f000 f84f 	bl	8011cc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	68fa      	ldr	r2, [r7, #12]
 8011c2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	2220      	movs	r2, #32
 8011c32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	2200      	movs	r2, #0
 8011c3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011c3e:	2300      	movs	r3, #0
}
 8011c40:	4618      	mov	r0, r3
 8011c42:	3710      	adds	r7, #16
 8011c44:	46bd      	mov	sp, r7
 8011c46:	bd80      	pop	{r7, pc}

08011c48 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011c48:	b580      	push	{r7, lr}
 8011c4a:	b084      	sub	sp, #16
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	6078      	str	r0, [r7, #4]
 8011c50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011c58:	2b01      	cmp	r3, #1
 8011c5a:	d101      	bne.n	8011c60 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011c5c:	2302      	movs	r3, #2
 8011c5e:	e02d      	b.n	8011cbc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	2201      	movs	r2, #1
 8011c64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	2224      	movs	r2, #36	; 0x24
 8011c6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	681a      	ldr	r2, [r3, #0]
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	f022 0201 	bic.w	r2, r2, #1
 8011c86:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	689b      	ldr	r3, [r3, #8]
 8011c8e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	683a      	ldr	r2, [r7, #0]
 8011c98:	430a      	orrs	r2, r1
 8011c9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011c9c:	6878      	ldr	r0, [r7, #4]
 8011c9e:	f000 f811 	bl	8011cc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	68fa      	ldr	r2, [r7, #12]
 8011ca8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	2220      	movs	r2, #32
 8011cae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	2200      	movs	r2, #0
 8011cb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011cba:	2300      	movs	r3, #0
}
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	3710      	adds	r7, #16
 8011cc0:	46bd      	mov	sp, r7
 8011cc2:	bd80      	pop	{r7, pc}

08011cc4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011cc4:	b480      	push	{r7}
 8011cc6:	b085      	sub	sp, #20
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d108      	bne.n	8011ce6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	2201      	movs	r2, #1
 8011cd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	2201      	movs	r2, #1
 8011ce0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011ce4:	e031      	b.n	8011d4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011ce6:	2310      	movs	r3, #16
 8011ce8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011cea:	2310      	movs	r3, #16
 8011cec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	689b      	ldr	r3, [r3, #8]
 8011cf4:	0e5b      	lsrs	r3, r3, #25
 8011cf6:	b2db      	uxtb	r3, r3
 8011cf8:	f003 0307 	and.w	r3, r3, #7
 8011cfc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	689b      	ldr	r3, [r3, #8]
 8011d04:	0f5b      	lsrs	r3, r3, #29
 8011d06:	b2db      	uxtb	r3, r3
 8011d08:	f003 0307 	and.w	r3, r3, #7
 8011d0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011d0e:	7bbb      	ldrb	r3, [r7, #14]
 8011d10:	7b3a      	ldrb	r2, [r7, #12]
 8011d12:	4911      	ldr	r1, [pc, #68]	; (8011d58 <UARTEx_SetNbDataToProcess+0x94>)
 8011d14:	5c8a      	ldrb	r2, [r1, r2]
 8011d16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011d1a:	7b3a      	ldrb	r2, [r7, #12]
 8011d1c:	490f      	ldr	r1, [pc, #60]	; (8011d5c <UARTEx_SetNbDataToProcess+0x98>)
 8011d1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011d20:	fb93 f3f2 	sdiv	r3, r3, r2
 8011d24:	b29a      	uxth	r2, r3
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011d2c:	7bfb      	ldrb	r3, [r7, #15]
 8011d2e:	7b7a      	ldrb	r2, [r7, #13]
 8011d30:	4909      	ldr	r1, [pc, #36]	; (8011d58 <UARTEx_SetNbDataToProcess+0x94>)
 8011d32:	5c8a      	ldrb	r2, [r1, r2]
 8011d34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011d38:	7b7a      	ldrb	r2, [r7, #13]
 8011d3a:	4908      	ldr	r1, [pc, #32]	; (8011d5c <UARTEx_SetNbDataToProcess+0x98>)
 8011d3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011d3e:	fb93 f3f2 	sdiv	r3, r3, r2
 8011d42:	b29a      	uxth	r2, r3
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011d4a:	bf00      	nop
 8011d4c:	3714      	adds	r7, #20
 8011d4e:	46bd      	mov	sp, r7
 8011d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d54:	4770      	bx	lr
 8011d56:	bf00      	nop
 8011d58:	080290f0 	.word	0x080290f0
 8011d5c:	080290f8 	.word	0x080290f8

08011d60 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8011d60:	b480      	push	{r7}
 8011d62:	b087      	sub	sp, #28
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	6078      	str	r0, [r7, #4]
 8011d68:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8011d6a:	683b      	ldr	r3, [r7, #0]
 8011d6c:	681a      	ldr	r2, [r3, #0]
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d74:	683a      	ldr	r2, [r7, #0]
 8011d76:	6812      	ldr	r2, [r2, #0]
 8011d78:	f023 0101 	bic.w	r1, r3, #1
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8011d82:	683b      	ldr	r3, [r7, #0]
 8011d84:	689b      	ldr	r3, [r3, #8]
 8011d86:	2b08      	cmp	r3, #8
 8011d88:	d102      	bne.n	8011d90 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8011d8a:	2340      	movs	r3, #64	; 0x40
 8011d8c:	617b      	str	r3, [r7, #20]
 8011d8e:	e001      	b.n	8011d94 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8011d90:	2300      	movs	r3, #0
 8011d92:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8011d94:	683b      	ldr	r3, [r7, #0]
 8011d96:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8011d98:	697b      	ldr	r3, [r7, #20]
 8011d9a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8011d9c:	683b      	ldr	r3, [r7, #0]
 8011d9e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8011da0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8011da2:	683b      	ldr	r3, [r7, #0]
 8011da4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8011da6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8011da8:	683b      	ldr	r3, [r7, #0]
 8011daa:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8011dac:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8011dae:	683b      	ldr	r3, [r7, #0]
 8011db0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8011db2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8011db4:	683b      	ldr	r3, [r7, #0]
 8011db6:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8011db8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8011dba:	683b      	ldr	r3, [r7, #0]
 8011dbc:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8011dbe:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8011dc0:	683b      	ldr	r3, [r7, #0]
 8011dc2:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8011dc4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8011dc6:	683b      	ldr	r3, [r7, #0]
 8011dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8011dca:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8011dcc:	683b      	ldr	r3, [r7, #0]
 8011dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8011dd0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8011dd2:	683b      	ldr	r3, [r7, #0]
 8011dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8011dd6:	4313      	orrs	r3, r2
 8011dd8:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8011dda:	683b      	ldr	r3, [r7, #0]
 8011ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011dde:	693a      	ldr	r2, [r7, #16]
 8011de0:	4313      	orrs	r3, r2
 8011de2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8011de4:	683b      	ldr	r3, [r7, #0]
 8011de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011de8:	693a      	ldr	r2, [r7, #16]
 8011dea:	4313      	orrs	r3, r2
 8011dec:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8011dee:	683b      	ldr	r3, [r7, #0]
 8011df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011df2:	693a      	ldr	r2, [r7, #16]
 8011df4:	4313      	orrs	r3, r2
 8011df6:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8011df8:	4b20      	ldr	r3, [pc, #128]	; (8011e7c <FMC_NORSRAM_Init+0x11c>)
 8011dfa:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011e02:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011e0a:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8011e12:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8011e14:	683b      	ldr	r3, [r7, #0]
 8011e16:	681a      	ldr	r2, [r3, #0]
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	43db      	mvns	r3, r3
 8011e22:	ea02 0103 	and.w	r1, r2, r3
 8011e26:	683b      	ldr	r3, [r7, #0]
 8011e28:	681a      	ldr	r2, [r3, #0]
 8011e2a:	693b      	ldr	r3, [r7, #16]
 8011e2c:	4319      	orrs	r1, r3
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8011e34:	683b      	ldr	r3, [r7, #0]
 8011e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011e3c:	d10c      	bne.n	8011e58 <FMC_NORSRAM_Init+0xf8>
 8011e3e:	683b      	ldr	r3, [r7, #0]
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d008      	beq.n	8011e58 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8011e4e:	683b      	ldr	r3, [r7, #0]
 8011e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e52:	431a      	orrs	r2, r3
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8011e58:	683b      	ldr	r3, [r7, #0]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d006      	beq.n	8011e6e <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	681a      	ldr	r2, [r3, #0]
 8011e64:	683b      	ldr	r3, [r7, #0]
 8011e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011e68:	431a      	orrs	r2, r3
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8011e6e:	2300      	movs	r3, #0
}
 8011e70:	4618      	mov	r0, r3
 8011e72:	371c      	adds	r7, #28
 8011e74:	46bd      	mov	sp, r7
 8011e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e7a:	4770      	bx	lr
 8011e7c:	0008fb7f 	.word	0x0008fb7f

08011e80 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8011e80:	b480      	push	{r7}
 8011e82:	b087      	sub	sp, #28
 8011e84:	af00      	add	r7, sp, #0
 8011e86:	60f8      	str	r0, [r7, #12]
 8011e88:	60b9      	str	r1, [r7, #8]
 8011e8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	1c5a      	adds	r2, r3, #1
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e96:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8011e9a:	68bb      	ldr	r3, [r7, #8]
 8011e9c:	681a      	ldr	r2, [r3, #0]
 8011e9e:	68bb      	ldr	r3, [r7, #8]
 8011ea0:	685b      	ldr	r3, [r3, #4]
 8011ea2:	011b      	lsls	r3, r3, #4
 8011ea4:	431a      	orrs	r2, r3
 8011ea6:	68bb      	ldr	r3, [r7, #8]
 8011ea8:	689b      	ldr	r3, [r3, #8]
 8011eaa:	021b      	lsls	r3, r3, #8
 8011eac:	431a      	orrs	r2, r3
 8011eae:	68bb      	ldr	r3, [r7, #8]
 8011eb0:	68db      	ldr	r3, [r3, #12]
 8011eb2:	041b      	lsls	r3, r3, #16
 8011eb4:	431a      	orrs	r2, r3
 8011eb6:	68bb      	ldr	r3, [r7, #8]
 8011eb8:	691b      	ldr	r3, [r3, #16]
 8011eba:	3b01      	subs	r3, #1
 8011ebc:	051b      	lsls	r3, r3, #20
 8011ebe:	431a      	orrs	r2, r3
 8011ec0:	68bb      	ldr	r3, [r7, #8]
 8011ec2:	695b      	ldr	r3, [r3, #20]
 8011ec4:	3b02      	subs	r3, #2
 8011ec6:	061b      	lsls	r3, r3, #24
 8011ec8:	431a      	orrs	r2, r3
 8011eca:	68bb      	ldr	r3, [r7, #8]
 8011ecc:	699b      	ldr	r3, [r3, #24]
 8011ece:	4313      	orrs	r3, r2
 8011ed0:	687a      	ldr	r2, [r7, #4]
 8011ed2:	3201      	adds	r2, #1
 8011ed4:	4319      	orrs	r1, r3
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011ee4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011ee8:	d113      	bne.n	8011f12 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	685b      	ldr	r3, [r3, #4]
 8011eee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8011ef2:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8011ef4:	68bb      	ldr	r3, [r7, #8]
 8011ef6:	691b      	ldr	r3, [r3, #16]
 8011ef8:	3b01      	subs	r3, #1
 8011efa:	051b      	lsls	r3, r3, #20
 8011efc:	697a      	ldr	r2, [r7, #20]
 8011efe:	4313      	orrs	r3, r2
 8011f00:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	685b      	ldr	r3, [r3, #4]
 8011f06:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8011f0a:	697b      	ldr	r3, [r7, #20]
 8011f0c:	431a      	orrs	r2, r3
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8011f12:	2300      	movs	r3, #0
}
 8011f14:	4618      	mov	r0, r3
 8011f16:	371c      	adds	r7, #28
 8011f18:	46bd      	mov	sp, r7
 8011f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f1e:	4770      	bx	lr

08011f20 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8011f20:	b480      	push	{r7}
 8011f22:	b085      	sub	sp, #20
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	60f8      	str	r0, [r7, #12]
 8011f28:	60b9      	str	r1, [r7, #8]
 8011f2a:	607a      	str	r2, [r7, #4]
 8011f2c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8011f2e:	683b      	ldr	r3, [r7, #0]
 8011f30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011f34:	d11d      	bne.n	8011f72 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	687a      	ldr	r2, [r7, #4]
 8011f3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011f3e:	4b13      	ldr	r3, [pc, #76]	; (8011f8c <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8011f40:	4013      	ands	r3, r2
 8011f42:	68ba      	ldr	r2, [r7, #8]
 8011f44:	6811      	ldr	r1, [r2, #0]
 8011f46:	68ba      	ldr	r2, [r7, #8]
 8011f48:	6852      	ldr	r2, [r2, #4]
 8011f4a:	0112      	lsls	r2, r2, #4
 8011f4c:	4311      	orrs	r1, r2
 8011f4e:	68ba      	ldr	r2, [r7, #8]
 8011f50:	6892      	ldr	r2, [r2, #8]
 8011f52:	0212      	lsls	r2, r2, #8
 8011f54:	4311      	orrs	r1, r2
 8011f56:	68ba      	ldr	r2, [r7, #8]
 8011f58:	6992      	ldr	r2, [r2, #24]
 8011f5a:	4311      	orrs	r1, r2
 8011f5c:	68ba      	ldr	r2, [r7, #8]
 8011f5e:	68d2      	ldr	r2, [r2, #12]
 8011f60:	0412      	lsls	r2, r2, #16
 8011f62:	430a      	orrs	r2, r1
 8011f64:	ea43 0102 	orr.w	r1, r3, r2
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	687a      	ldr	r2, [r7, #4]
 8011f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8011f70:	e005      	b.n	8011f7e <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	687a      	ldr	r2, [r7, #4]
 8011f76:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8011f7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8011f7e:	2300      	movs	r3, #0
}
 8011f80:	4618      	mov	r0, r3
 8011f82:	3714      	adds	r7, #20
 8011f84:	46bd      	mov	sp, r7
 8011f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f8a:	4770      	bx	lr
 8011f8c:	cff00000 	.word	0xcff00000

08011f90 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8011f90:	b580      	push	{r7, lr}
 8011f92:	b084      	sub	sp, #16
 8011f94:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8011f96:	4b8d      	ldr	r3, [pc, #564]	; (80121cc <MX_LWIP_Init+0x23c>)
 8011f98:	22c0      	movs	r2, #192	; 0xc0
 8011f9a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8011f9c:	4b8b      	ldr	r3, [pc, #556]	; (80121cc <MX_LWIP_Init+0x23c>)
 8011f9e:	22a8      	movs	r2, #168	; 0xa8
 8011fa0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8011fa2:	4b8a      	ldr	r3, [pc, #552]	; (80121cc <MX_LWIP_Init+0x23c>)
 8011fa4:	2201      	movs	r2, #1
 8011fa6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 1;
 8011fa8:	4b88      	ldr	r3, [pc, #544]	; (80121cc <MX_LWIP_Init+0x23c>)
 8011faa:	2201      	movs	r2, #1
 8011fac:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8011fae:	4b88      	ldr	r3, [pc, #544]	; (80121d0 <MX_LWIP_Init+0x240>)
 8011fb0:	22ff      	movs	r2, #255	; 0xff
 8011fb2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8011fb4:	4b86      	ldr	r3, [pc, #536]	; (80121d0 <MX_LWIP_Init+0x240>)
 8011fb6:	22ff      	movs	r2, #255	; 0xff
 8011fb8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8011fba:	4b85      	ldr	r3, [pc, #532]	; (80121d0 <MX_LWIP_Init+0x240>)
 8011fbc:	22ff      	movs	r2, #255	; 0xff
 8011fbe:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8011fc0:	4b83      	ldr	r3, [pc, #524]	; (80121d0 <MX_LWIP_Init+0x240>)
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8011fc6:	4b83      	ldr	r3, [pc, #524]	; (80121d4 <MX_LWIP_Init+0x244>)
 8011fc8:	2200      	movs	r2, #0
 8011fca:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8011fcc:	4b81      	ldr	r3, [pc, #516]	; (80121d4 <MX_LWIP_Init+0x244>)
 8011fce:	2200      	movs	r2, #0
 8011fd0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8011fd2:	4b80      	ldr	r3, [pc, #512]	; (80121d4 <MX_LWIP_Init+0x244>)
 8011fd4:	2200      	movs	r2, #0
 8011fd6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8011fd8:	4b7e      	ldr	r3, [pc, #504]	; (80121d4 <MX_LWIP_Init+0x244>)
 8011fda:	2200      	movs	r2, #0
 8011fdc:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8011fde:	f002 fc73 	bl	80148c8 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8011fe2:	4b7a      	ldr	r3, [pc, #488]	; (80121cc <MX_LWIP_Init+0x23c>)
 8011fe4:	781b      	ldrb	r3, [r3, #0]
 8011fe6:	061a      	lsls	r2, r3, #24
 8011fe8:	4b78      	ldr	r3, [pc, #480]	; (80121cc <MX_LWIP_Init+0x23c>)
 8011fea:	785b      	ldrb	r3, [r3, #1]
 8011fec:	041b      	lsls	r3, r3, #16
 8011fee:	431a      	orrs	r2, r3
 8011ff0:	4b76      	ldr	r3, [pc, #472]	; (80121cc <MX_LWIP_Init+0x23c>)
 8011ff2:	789b      	ldrb	r3, [r3, #2]
 8011ff4:	021b      	lsls	r3, r3, #8
 8011ff6:	4313      	orrs	r3, r2
 8011ff8:	4a74      	ldr	r2, [pc, #464]	; (80121cc <MX_LWIP_Init+0x23c>)
 8011ffa:	78d2      	ldrb	r2, [r2, #3]
 8011ffc:	4313      	orrs	r3, r2
 8011ffe:	061a      	lsls	r2, r3, #24
 8012000:	4b72      	ldr	r3, [pc, #456]	; (80121cc <MX_LWIP_Init+0x23c>)
 8012002:	781b      	ldrb	r3, [r3, #0]
 8012004:	0619      	lsls	r1, r3, #24
 8012006:	4b71      	ldr	r3, [pc, #452]	; (80121cc <MX_LWIP_Init+0x23c>)
 8012008:	785b      	ldrb	r3, [r3, #1]
 801200a:	041b      	lsls	r3, r3, #16
 801200c:	4319      	orrs	r1, r3
 801200e:	4b6f      	ldr	r3, [pc, #444]	; (80121cc <MX_LWIP_Init+0x23c>)
 8012010:	789b      	ldrb	r3, [r3, #2]
 8012012:	021b      	lsls	r3, r3, #8
 8012014:	430b      	orrs	r3, r1
 8012016:	496d      	ldr	r1, [pc, #436]	; (80121cc <MX_LWIP_Init+0x23c>)
 8012018:	78c9      	ldrb	r1, [r1, #3]
 801201a:	430b      	orrs	r3, r1
 801201c:	021b      	lsls	r3, r3, #8
 801201e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012022:	431a      	orrs	r2, r3
 8012024:	4b69      	ldr	r3, [pc, #420]	; (80121cc <MX_LWIP_Init+0x23c>)
 8012026:	781b      	ldrb	r3, [r3, #0]
 8012028:	0619      	lsls	r1, r3, #24
 801202a:	4b68      	ldr	r3, [pc, #416]	; (80121cc <MX_LWIP_Init+0x23c>)
 801202c:	785b      	ldrb	r3, [r3, #1]
 801202e:	041b      	lsls	r3, r3, #16
 8012030:	4319      	orrs	r1, r3
 8012032:	4b66      	ldr	r3, [pc, #408]	; (80121cc <MX_LWIP_Init+0x23c>)
 8012034:	789b      	ldrb	r3, [r3, #2]
 8012036:	021b      	lsls	r3, r3, #8
 8012038:	430b      	orrs	r3, r1
 801203a:	4964      	ldr	r1, [pc, #400]	; (80121cc <MX_LWIP_Init+0x23c>)
 801203c:	78c9      	ldrb	r1, [r1, #3]
 801203e:	430b      	orrs	r3, r1
 8012040:	0a1b      	lsrs	r3, r3, #8
 8012042:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8012046:	431a      	orrs	r2, r3
 8012048:	4b60      	ldr	r3, [pc, #384]	; (80121cc <MX_LWIP_Init+0x23c>)
 801204a:	781b      	ldrb	r3, [r3, #0]
 801204c:	0619      	lsls	r1, r3, #24
 801204e:	4b5f      	ldr	r3, [pc, #380]	; (80121cc <MX_LWIP_Init+0x23c>)
 8012050:	785b      	ldrb	r3, [r3, #1]
 8012052:	041b      	lsls	r3, r3, #16
 8012054:	4319      	orrs	r1, r3
 8012056:	4b5d      	ldr	r3, [pc, #372]	; (80121cc <MX_LWIP_Init+0x23c>)
 8012058:	789b      	ldrb	r3, [r3, #2]
 801205a:	021b      	lsls	r3, r3, #8
 801205c:	430b      	orrs	r3, r1
 801205e:	495b      	ldr	r1, [pc, #364]	; (80121cc <MX_LWIP_Init+0x23c>)
 8012060:	78c9      	ldrb	r1, [r1, #3]
 8012062:	430b      	orrs	r3, r1
 8012064:	0e1b      	lsrs	r3, r3, #24
 8012066:	4313      	orrs	r3, r2
 8012068:	4a5b      	ldr	r2, [pc, #364]	; (80121d8 <MX_LWIP_Init+0x248>)
 801206a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 801206c:	4b58      	ldr	r3, [pc, #352]	; (80121d0 <MX_LWIP_Init+0x240>)
 801206e:	781b      	ldrb	r3, [r3, #0]
 8012070:	061a      	lsls	r2, r3, #24
 8012072:	4b57      	ldr	r3, [pc, #348]	; (80121d0 <MX_LWIP_Init+0x240>)
 8012074:	785b      	ldrb	r3, [r3, #1]
 8012076:	041b      	lsls	r3, r3, #16
 8012078:	431a      	orrs	r2, r3
 801207a:	4b55      	ldr	r3, [pc, #340]	; (80121d0 <MX_LWIP_Init+0x240>)
 801207c:	789b      	ldrb	r3, [r3, #2]
 801207e:	021b      	lsls	r3, r3, #8
 8012080:	4313      	orrs	r3, r2
 8012082:	4a53      	ldr	r2, [pc, #332]	; (80121d0 <MX_LWIP_Init+0x240>)
 8012084:	78d2      	ldrb	r2, [r2, #3]
 8012086:	4313      	orrs	r3, r2
 8012088:	061a      	lsls	r2, r3, #24
 801208a:	4b51      	ldr	r3, [pc, #324]	; (80121d0 <MX_LWIP_Init+0x240>)
 801208c:	781b      	ldrb	r3, [r3, #0]
 801208e:	0619      	lsls	r1, r3, #24
 8012090:	4b4f      	ldr	r3, [pc, #316]	; (80121d0 <MX_LWIP_Init+0x240>)
 8012092:	785b      	ldrb	r3, [r3, #1]
 8012094:	041b      	lsls	r3, r3, #16
 8012096:	4319      	orrs	r1, r3
 8012098:	4b4d      	ldr	r3, [pc, #308]	; (80121d0 <MX_LWIP_Init+0x240>)
 801209a:	789b      	ldrb	r3, [r3, #2]
 801209c:	021b      	lsls	r3, r3, #8
 801209e:	430b      	orrs	r3, r1
 80120a0:	494b      	ldr	r1, [pc, #300]	; (80121d0 <MX_LWIP_Init+0x240>)
 80120a2:	78c9      	ldrb	r1, [r1, #3]
 80120a4:	430b      	orrs	r3, r1
 80120a6:	021b      	lsls	r3, r3, #8
 80120a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80120ac:	431a      	orrs	r2, r3
 80120ae:	4b48      	ldr	r3, [pc, #288]	; (80121d0 <MX_LWIP_Init+0x240>)
 80120b0:	781b      	ldrb	r3, [r3, #0]
 80120b2:	0619      	lsls	r1, r3, #24
 80120b4:	4b46      	ldr	r3, [pc, #280]	; (80121d0 <MX_LWIP_Init+0x240>)
 80120b6:	785b      	ldrb	r3, [r3, #1]
 80120b8:	041b      	lsls	r3, r3, #16
 80120ba:	4319      	orrs	r1, r3
 80120bc:	4b44      	ldr	r3, [pc, #272]	; (80121d0 <MX_LWIP_Init+0x240>)
 80120be:	789b      	ldrb	r3, [r3, #2]
 80120c0:	021b      	lsls	r3, r3, #8
 80120c2:	430b      	orrs	r3, r1
 80120c4:	4942      	ldr	r1, [pc, #264]	; (80121d0 <MX_LWIP_Init+0x240>)
 80120c6:	78c9      	ldrb	r1, [r1, #3]
 80120c8:	430b      	orrs	r3, r1
 80120ca:	0a1b      	lsrs	r3, r3, #8
 80120cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80120d0:	431a      	orrs	r2, r3
 80120d2:	4b3f      	ldr	r3, [pc, #252]	; (80121d0 <MX_LWIP_Init+0x240>)
 80120d4:	781b      	ldrb	r3, [r3, #0]
 80120d6:	0619      	lsls	r1, r3, #24
 80120d8:	4b3d      	ldr	r3, [pc, #244]	; (80121d0 <MX_LWIP_Init+0x240>)
 80120da:	785b      	ldrb	r3, [r3, #1]
 80120dc:	041b      	lsls	r3, r3, #16
 80120de:	4319      	orrs	r1, r3
 80120e0:	4b3b      	ldr	r3, [pc, #236]	; (80121d0 <MX_LWIP_Init+0x240>)
 80120e2:	789b      	ldrb	r3, [r3, #2]
 80120e4:	021b      	lsls	r3, r3, #8
 80120e6:	430b      	orrs	r3, r1
 80120e8:	4939      	ldr	r1, [pc, #228]	; (80121d0 <MX_LWIP_Init+0x240>)
 80120ea:	78c9      	ldrb	r1, [r1, #3]
 80120ec:	430b      	orrs	r3, r1
 80120ee:	0e1b      	lsrs	r3, r3, #24
 80120f0:	4313      	orrs	r3, r2
 80120f2:	4a3a      	ldr	r2, [pc, #232]	; (80121dc <MX_LWIP_Init+0x24c>)
 80120f4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80120f6:	4b37      	ldr	r3, [pc, #220]	; (80121d4 <MX_LWIP_Init+0x244>)
 80120f8:	781b      	ldrb	r3, [r3, #0]
 80120fa:	061a      	lsls	r2, r3, #24
 80120fc:	4b35      	ldr	r3, [pc, #212]	; (80121d4 <MX_LWIP_Init+0x244>)
 80120fe:	785b      	ldrb	r3, [r3, #1]
 8012100:	041b      	lsls	r3, r3, #16
 8012102:	431a      	orrs	r2, r3
 8012104:	4b33      	ldr	r3, [pc, #204]	; (80121d4 <MX_LWIP_Init+0x244>)
 8012106:	789b      	ldrb	r3, [r3, #2]
 8012108:	021b      	lsls	r3, r3, #8
 801210a:	4313      	orrs	r3, r2
 801210c:	4a31      	ldr	r2, [pc, #196]	; (80121d4 <MX_LWIP_Init+0x244>)
 801210e:	78d2      	ldrb	r2, [r2, #3]
 8012110:	4313      	orrs	r3, r2
 8012112:	061a      	lsls	r2, r3, #24
 8012114:	4b2f      	ldr	r3, [pc, #188]	; (80121d4 <MX_LWIP_Init+0x244>)
 8012116:	781b      	ldrb	r3, [r3, #0]
 8012118:	0619      	lsls	r1, r3, #24
 801211a:	4b2e      	ldr	r3, [pc, #184]	; (80121d4 <MX_LWIP_Init+0x244>)
 801211c:	785b      	ldrb	r3, [r3, #1]
 801211e:	041b      	lsls	r3, r3, #16
 8012120:	4319      	orrs	r1, r3
 8012122:	4b2c      	ldr	r3, [pc, #176]	; (80121d4 <MX_LWIP_Init+0x244>)
 8012124:	789b      	ldrb	r3, [r3, #2]
 8012126:	021b      	lsls	r3, r3, #8
 8012128:	430b      	orrs	r3, r1
 801212a:	492a      	ldr	r1, [pc, #168]	; (80121d4 <MX_LWIP_Init+0x244>)
 801212c:	78c9      	ldrb	r1, [r1, #3]
 801212e:	430b      	orrs	r3, r1
 8012130:	021b      	lsls	r3, r3, #8
 8012132:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012136:	431a      	orrs	r2, r3
 8012138:	4b26      	ldr	r3, [pc, #152]	; (80121d4 <MX_LWIP_Init+0x244>)
 801213a:	781b      	ldrb	r3, [r3, #0]
 801213c:	0619      	lsls	r1, r3, #24
 801213e:	4b25      	ldr	r3, [pc, #148]	; (80121d4 <MX_LWIP_Init+0x244>)
 8012140:	785b      	ldrb	r3, [r3, #1]
 8012142:	041b      	lsls	r3, r3, #16
 8012144:	4319      	orrs	r1, r3
 8012146:	4b23      	ldr	r3, [pc, #140]	; (80121d4 <MX_LWIP_Init+0x244>)
 8012148:	789b      	ldrb	r3, [r3, #2]
 801214a:	021b      	lsls	r3, r3, #8
 801214c:	430b      	orrs	r3, r1
 801214e:	4921      	ldr	r1, [pc, #132]	; (80121d4 <MX_LWIP_Init+0x244>)
 8012150:	78c9      	ldrb	r1, [r1, #3]
 8012152:	430b      	orrs	r3, r1
 8012154:	0a1b      	lsrs	r3, r3, #8
 8012156:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801215a:	431a      	orrs	r2, r3
 801215c:	4b1d      	ldr	r3, [pc, #116]	; (80121d4 <MX_LWIP_Init+0x244>)
 801215e:	781b      	ldrb	r3, [r3, #0]
 8012160:	0619      	lsls	r1, r3, #24
 8012162:	4b1c      	ldr	r3, [pc, #112]	; (80121d4 <MX_LWIP_Init+0x244>)
 8012164:	785b      	ldrb	r3, [r3, #1]
 8012166:	041b      	lsls	r3, r3, #16
 8012168:	4319      	orrs	r1, r3
 801216a:	4b1a      	ldr	r3, [pc, #104]	; (80121d4 <MX_LWIP_Init+0x244>)
 801216c:	789b      	ldrb	r3, [r3, #2]
 801216e:	021b      	lsls	r3, r3, #8
 8012170:	430b      	orrs	r3, r1
 8012172:	4918      	ldr	r1, [pc, #96]	; (80121d4 <MX_LWIP_Init+0x244>)
 8012174:	78c9      	ldrb	r1, [r1, #3]
 8012176:	430b      	orrs	r3, r1
 8012178:	0e1b      	lsrs	r3, r3, #24
 801217a:	4313      	orrs	r3, r2
 801217c:	4a18      	ldr	r2, [pc, #96]	; (80121e0 <MX_LWIP_Init+0x250>)
 801217e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8012180:	4b18      	ldr	r3, [pc, #96]	; (80121e4 <MX_LWIP_Init+0x254>)
 8012182:	9302      	str	r3, [sp, #8]
 8012184:	4b18      	ldr	r3, [pc, #96]	; (80121e8 <MX_LWIP_Init+0x258>)
 8012186:	9301      	str	r3, [sp, #4]
 8012188:	2300      	movs	r3, #0
 801218a:	9300      	str	r3, [sp, #0]
 801218c:	4b14      	ldr	r3, [pc, #80]	; (80121e0 <MX_LWIP_Init+0x250>)
 801218e:	4a13      	ldr	r2, [pc, #76]	; (80121dc <MX_LWIP_Init+0x24c>)
 8012190:	4911      	ldr	r1, [pc, #68]	; (80121d8 <MX_LWIP_Init+0x248>)
 8012192:	4816      	ldr	r0, [pc, #88]	; (80121ec <MX_LWIP_Init+0x25c>)
 8012194:	f004 f990 	bl	80164b8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8012198:	4814      	ldr	r0, [pc, #80]	; (80121ec <MX_LWIP_Init+0x25c>)
 801219a:	f004 fb3f 	bl	801681c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 801219e:	4b13      	ldr	r3, [pc, #76]	; (80121ec <MX_LWIP_Init+0x25c>)
 80121a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80121a4:	089b      	lsrs	r3, r3, #2
 80121a6:	f003 0301 	and.w	r3, r3, #1
 80121aa:	b2db      	uxtb	r3, r3
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d003      	beq.n	80121b8 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80121b0:	480e      	ldr	r0, [pc, #56]	; (80121ec <MX_LWIP_Init+0x25c>)
 80121b2:	f004 fb43 	bl	801683c <netif_set_up>
 80121b6:	e002      	b.n	80121be <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80121b8:	480c      	ldr	r0, [pc, #48]	; (80121ec <MX_LWIP_Init+0x25c>)
 80121ba:	f004 fbab 	bl	8016914 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80121be:	490c      	ldr	r1, [pc, #48]	; (80121f0 <MX_LWIP_Init+0x260>)
 80121c0:	480a      	ldr	r0, [pc, #40]	; (80121ec <MX_LWIP_Init+0x25c>)
 80121c2:	f004 fc3d 	bl	8016a40 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80121c6:	bf00      	nop
 80121c8:	46bd      	mov	sp, r7
 80121ca:	bd80      	pop	{r7, pc}
 80121cc:	24005214 	.word	0x24005214
 80121d0:	24005210 	.word	0x24005210
 80121d4:	240051d0 	.word	0x240051d0
 80121d8:	24005208 	.word	0x24005208
 80121dc:	24005218 	.word	0x24005218
 80121e0:	2400521c 	.word	0x2400521c
 80121e4:	0801423d 	.word	0x0801423d
 80121e8:	0801276d 	.word	0x0801276d
 80121ec:	240051d4 	.word	0x240051d4
 80121f0:	08012245 	.word	0x08012245

080121f4 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 80121f4:	b580      	push	{r7, lr}
 80121f6:	b082      	sub	sp, #8
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 80121fc:	f7f1 ff76 	bl	80040ec <HAL_GetTick>
 8012200:	4602      	mov	r2, r0
 8012202:	4b08      	ldr	r3, [pc, #32]	; (8012224 <Ethernet_Link_Periodic_Handle+0x30>)
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	1ad3      	subs	r3, r2, r3
 8012208:	2b63      	cmp	r3, #99	; 0x63
 801220a:	d907      	bls.n	801221c <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 801220c:	f7f1 ff6e 	bl	80040ec <HAL_GetTick>
 8012210:	4603      	mov	r3, r0
 8012212:	4a04      	ldr	r2, [pc, #16]	; (8012224 <Ethernet_Link_Periodic_Handle+0x30>)
 8012214:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8012216:	6878      	ldr	r0, [r7, #4]
 8012218:	f000 fb3c 	bl	8012894 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 801221c:	bf00      	nop
 801221e:	3708      	adds	r7, #8
 8012220:	46bd      	mov	sp, r7
 8012222:	bd80      	pop	{r7, pc}
 8012224:	2400520c 	.word	0x2400520c

08012228 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8012228:	b580      	push	{r7, lr}
 801222a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 801222c:	4804      	ldr	r0, [pc, #16]	; (8012240 <MX_LWIP_Process+0x18>)
 801222e:	f000 fa7d 	bl	801272c <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8012232:	f00b fd23 	bl	801dc7c <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8012236:	4802      	ldr	r0, [pc, #8]	; (8012240 <MX_LWIP_Process+0x18>)
 8012238:	f7ff ffdc 	bl	80121f4 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 801223c:	bf00      	nop
 801223e:	bd80      	pop	{r7, pc}
 8012240:	240051d4 	.word	0x240051d4

08012244 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8012244:	b480      	push	{r7}
 8012246:	b083      	sub	sp, #12
 8012248:	af00      	add	r7, sp, #0
 801224a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 801224c:	bf00      	nop
 801224e:	370c      	adds	r7, #12
 8012250:	46bd      	mov	sp, r7
 8012252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012256:	4770      	bx	lr

08012258 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8012258:	b580      	push	{r7, lr}
 801225a:	b08e      	sub	sp, #56	; 0x38
 801225c:	af00      	add	r7, sp, #0
 801225e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012264:	2200      	movs	r2, #0
 8012266:	601a      	str	r2, [r3, #0]
 8012268:	605a      	str	r2, [r3, #4]
 801226a:	609a      	str	r2, [r3, #8]
 801226c:	60da      	str	r2, [r3, #12]
 801226e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	4a4d      	ldr	r2, [pc, #308]	; (80123ac <HAL_ETH_MspInit+0x154>)
 8012276:	4293      	cmp	r3, r2
 8012278:	f040 8093 	bne.w	80123a2 <HAL_ETH_MspInit+0x14a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 801227c:	4b4c      	ldr	r3, [pc, #304]	; (80123b0 <HAL_ETH_MspInit+0x158>)
 801227e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012282:	4a4b      	ldr	r2, [pc, #300]	; (80123b0 <HAL_ETH_MspInit+0x158>)
 8012284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012288:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801228c:	4b48      	ldr	r3, [pc, #288]	; (80123b0 <HAL_ETH_MspInit+0x158>)
 801228e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012292:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012296:	623b      	str	r3, [r7, #32]
 8012298:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 801229a:	4b45      	ldr	r3, [pc, #276]	; (80123b0 <HAL_ETH_MspInit+0x158>)
 801229c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80122a0:	4a43      	ldr	r2, [pc, #268]	; (80123b0 <HAL_ETH_MspInit+0x158>)
 80122a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80122a6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80122aa:	4b41      	ldr	r3, [pc, #260]	; (80123b0 <HAL_ETH_MspInit+0x158>)
 80122ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80122b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80122b4:	61fb      	str	r3, [r7, #28]
 80122b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80122b8:	4b3d      	ldr	r3, [pc, #244]	; (80123b0 <HAL_ETH_MspInit+0x158>)
 80122ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80122be:	4a3c      	ldr	r2, [pc, #240]	; (80123b0 <HAL_ETH_MspInit+0x158>)
 80122c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80122c4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80122c8:	4b39      	ldr	r3, [pc, #228]	; (80123b0 <HAL_ETH_MspInit+0x158>)
 80122ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80122ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80122d2:	61bb      	str	r3, [r7, #24]
 80122d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80122d6:	4b36      	ldr	r3, [pc, #216]	; (80123b0 <HAL_ETH_MspInit+0x158>)
 80122d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80122dc:	4a34      	ldr	r2, [pc, #208]	; (80123b0 <HAL_ETH_MspInit+0x158>)
 80122de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80122e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80122e6:	4b32      	ldr	r3, [pc, #200]	; (80123b0 <HAL_ETH_MspInit+0x158>)
 80122e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80122ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80122f0:	617b      	str	r3, [r7, #20]
 80122f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80122f4:	4b2e      	ldr	r3, [pc, #184]	; (80123b0 <HAL_ETH_MspInit+0x158>)
 80122f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80122fa:	4a2d      	ldr	r2, [pc, #180]	; (80123b0 <HAL_ETH_MspInit+0x158>)
 80122fc:	f043 0304 	orr.w	r3, r3, #4
 8012300:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012304:	4b2a      	ldr	r3, [pc, #168]	; (80123b0 <HAL_ETH_MspInit+0x158>)
 8012306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801230a:	f003 0304 	and.w	r3, r3, #4
 801230e:	613b      	str	r3, [r7, #16]
 8012310:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012312:	4b27      	ldr	r3, [pc, #156]	; (80123b0 <HAL_ETH_MspInit+0x158>)
 8012314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012318:	4a25      	ldr	r2, [pc, #148]	; (80123b0 <HAL_ETH_MspInit+0x158>)
 801231a:	f043 0301 	orr.w	r3, r3, #1
 801231e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012322:	4b23      	ldr	r3, [pc, #140]	; (80123b0 <HAL_ETH_MspInit+0x158>)
 8012324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012328:	f003 0301 	and.w	r3, r3, #1
 801232c:	60fb      	str	r3, [r7, #12]
 801232e:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> ETH_CRS_DV
    PA1     ------> ETH_REF_CLK
    PA2     ------> ETH_MDIO
    PC4     ------> ETH_RXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8012330:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8012334:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012336:	2302      	movs	r3, #2
 8012338:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801233a:	2300      	movs	r3, #0
 801233c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801233e:	2303      	movs	r3, #3
 8012340:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8012342:	230b      	movs	r3, #11
 8012344:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8012346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801234a:	4619      	mov	r1, r3
 801234c:	4819      	ldr	r0, [pc, #100]	; (80123b4 <HAL_ETH_MspInit+0x15c>)
 801234e:	f7f7 fff1 	bl	800a334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_4;
 8012352:	2332      	movs	r3, #50	; 0x32
 8012354:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012356:	2302      	movs	r3, #2
 8012358:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801235a:	2300      	movs	r3, #0
 801235c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801235e:	2303      	movs	r3, #3
 8012360:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8012362:	230b      	movs	r3, #11
 8012364:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801236a:	4619      	mov	r1, r3
 801236c:	4812      	ldr	r0, [pc, #72]	; (80123b8 <HAL_ETH_MspInit+0x160>)
 801236e:	f7f7 ffe1 	bl	800a334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1|GPIO_PIN_2;
 8012372:	2386      	movs	r3, #134	; 0x86
 8012374:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012376:	2302      	movs	r3, #2
 8012378:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801237a:	2300      	movs	r3, #0
 801237c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801237e:	2303      	movs	r3, #3
 8012380:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8012382:	230b      	movs	r3, #11
 8012384:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801238a:	4619      	mov	r1, r3
 801238c:	480b      	ldr	r0, [pc, #44]	; (80123bc <HAL_ETH_MspInit+0x164>)
 801238e:	f7f7 ffd1 	bl	800a334 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 1, 0);
 8012392:	2200      	movs	r2, #0
 8012394:	2101      	movs	r1, #1
 8012396:	203d      	movs	r0, #61	; 0x3d
 8012398:	f7f3 fbed 	bl	8005b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 801239c:	203d      	movs	r0, #61	; 0x3d
 801239e:	f7f3 fc04 	bl	8005baa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80123a2:	bf00      	nop
 80123a4:	3738      	adds	r7, #56	; 0x38
 80123a6:	46bd      	mov	sp, r7
 80123a8:	bd80      	pop	{r7, pc}
 80123aa:	bf00      	nop
 80123ac:	40028000 	.word	0x40028000
 80123b0:	58024400 	.word	0x58024400
 80123b4:	58021800 	.word	0x58021800
 80123b8:	58020800 	.word	0x58020800
 80123bc:	58020000 	.word	0x58020000

080123c0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80123c0:	b580      	push	{r7, lr}
 80123c2:	b086      	sub	sp, #24
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80123c8:	2300      	movs	r3, #0
 80123ca:	74fb      	strb	r3, [r7, #19]
  uint32_t idx = 0;
 80123cc:	2300      	movs	r3, #0
 80123ce:	617b      	str	r3, [r7, #20]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80123d0:	4b4a      	ldr	r3, [pc, #296]	; (80124fc <low_level_init+0x13c>)
 80123d2:	4a4b      	ldr	r2, [pc, #300]	; (8012500 <low_level_init+0x140>)
 80123d4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80123d6:	2300      	movs	r3, #0
 80123d8:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 80123da:	2380      	movs	r3, #128	; 0x80
 80123dc:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 80123de:	23e1      	movs	r3, #225	; 0xe1
 80123e0:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 80123e2:	2300      	movs	r3, #0
 80123e4:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 80123e6:	2300      	movs	r3, #0
 80123e8:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 80123ea:	2300      	movs	r3, #0
 80123ec:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 80123ee:	4a43      	ldr	r2, [pc, #268]	; (80124fc <low_level_init+0x13c>)
 80123f0:	f107 030c 	add.w	r3, r7, #12
 80123f4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80123f6:	4b41      	ldr	r3, [pc, #260]	; (80124fc <low_level_init+0x13c>)
 80123f8:	2201      	movs	r2, #1
 80123fa:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80123fc:	4b3f      	ldr	r3, [pc, #252]	; (80124fc <low_level_init+0x13c>)
 80123fe:	4a41      	ldr	r2, [pc, #260]	; (8012504 <low_level_init+0x144>)
 8012400:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8012402:	4b3e      	ldr	r3, [pc, #248]	; (80124fc <low_level_init+0x13c>)
 8012404:	4a40      	ldr	r2, [pc, #256]	; (8012508 <low_level_init+0x148>)
 8012406:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8012408:	4b3c      	ldr	r3, [pc, #240]	; (80124fc <low_level_init+0x13c>)
 801240a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 801240e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8012410:	483a      	ldr	r0, [pc, #232]	; (80124fc <low_level_init+0x13c>)
 8012412:	f7f5 fe43 	bl	800809c <HAL_ETH_Init>
 8012416:	4603      	mov	r3, r0
 8012418:	74fb      	strb	r3, [r7, #19]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 801241a:	2234      	movs	r2, #52	; 0x34
 801241c:	2100      	movs	r1, #0
 801241e:	483b      	ldr	r0, [pc, #236]	; (801250c <low_level_init+0x14c>)
 8012420:	f00d fe2a 	bl	8020078 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8012424:	4b39      	ldr	r3, [pc, #228]	; (801250c <low_level_init+0x14c>)
 8012426:	2221      	movs	r2, #33	; 0x21
 8012428:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 801242a:	4b38      	ldr	r3, [pc, #224]	; (801250c <low_level_init+0x14c>)
 801242c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8012430:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8012432:	4b36      	ldr	r3, [pc, #216]	; (801250c <low_level_init+0x14c>)
 8012434:	2200      	movs	r2, #0
 8012436:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8012438:	4835      	ldr	r0, [pc, #212]	; (8012510 <low_level_init+0x150>)
 801243a:	f003 ff05 	bl	8016248 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	2206      	movs	r2, #6
 8012442:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8012446:	4b2d      	ldr	r3, [pc, #180]	; (80124fc <low_level_init+0x13c>)
 8012448:	685b      	ldr	r3, [r3, #4]
 801244a:	781a      	ldrb	r2, [r3, #0]
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8012452:	4b2a      	ldr	r3, [pc, #168]	; (80124fc <low_level_init+0x13c>)
 8012454:	685b      	ldr	r3, [r3, #4]
 8012456:	785a      	ldrb	r2, [r3, #1]
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 801245e:	4b27      	ldr	r3, [pc, #156]	; (80124fc <low_level_init+0x13c>)
 8012460:	685b      	ldr	r3, [r3, #4]
 8012462:	789a      	ldrb	r2, [r3, #2]
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 801246a:	4b24      	ldr	r3, [pc, #144]	; (80124fc <low_level_init+0x13c>)
 801246c:	685b      	ldr	r3, [r3, #4]
 801246e:	78da      	ldrb	r2, [r3, #3]
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8012476:	4b21      	ldr	r3, [pc, #132]	; (80124fc <low_level_init+0x13c>)
 8012478:	685b      	ldr	r3, [r3, #4]
 801247a:	791a      	ldrb	r2, [r3, #4]
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8012482:	4b1e      	ldr	r3, [pc, #120]	; (80124fc <low_level_init+0x13c>)
 8012484:	685b      	ldr	r3, [r3, #4]
 8012486:	795a      	ldrb	r2, [r3, #5]
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8012494:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801249c:	f043 030a 	orr.w	r3, r3, #10
 80124a0:	b2da      	uxtb	r2, r3
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 80124a8:	2300      	movs	r3, #0
 80124aa:	617b      	str	r3, [r7, #20]
 80124ac:	e00e      	b.n	80124cc <low_level_init+0x10c>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 80124ae:	697b      	ldr	r3, [r7, #20]
 80124b0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80124b4:	fb02 f303 	mul.w	r3, r2, r3
 80124b8:	4a16      	ldr	r2, [pc, #88]	; (8012514 <low_level_init+0x154>)
 80124ba:	441a      	add	r2, r3
 80124bc:	2300      	movs	r3, #0
 80124be:	6979      	ldr	r1, [r7, #20]
 80124c0:	480e      	ldr	r0, [pc, #56]	; (80124fc <low_level_init+0x13c>)
 80124c2:	f7f5 fec5 	bl	8008250 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 80124c6:	697b      	ldr	r3, [r7, #20]
 80124c8:	3301      	adds	r3, #1
 80124ca:	617b      	str	r3, [r7, #20]
 80124cc:	697b      	ldr	r3, [r7, #20]
 80124ce:	2b03      	cmp	r3, #3
 80124d0:	d9ed      	bls.n	80124ae <low_level_init+0xee>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80124d2:	4911      	ldr	r1, [pc, #68]	; (8012518 <low_level_init+0x158>)
 80124d4:	4811      	ldr	r0, [pc, #68]	; (801251c <low_level_init+0x15c>)
 80124d6:	f7f1 fc21 	bl	8003d1c <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80124da:	4810      	ldr	r0, [pc, #64]	; (801251c <low_level_init+0x15c>)
 80124dc:	f7f1 fc50 	bl	8003d80 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80124e0:	7cfb      	ldrb	r3, [r7, #19]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d103      	bne.n	80124ee <low_level_init+0x12e>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 80124e6:	6878      	ldr	r0, [r7, #4]
 80124e8:	f000 f9d4 	bl	8012894 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80124ec:	e001      	b.n	80124f2 <low_level_init+0x132>
    Error_Handler();
 80124ee:	f7f0 fb21 	bl	8002b34 <Error_Handler>
}
 80124f2:	bf00      	nop
 80124f4:	3718      	adds	r7, #24
 80124f6:	46bd      	mov	sp, r7
 80124f8:	bd80      	pop	{r7, pc}
 80124fa:	bf00      	nop
 80124fc:	2400530c 	.word	0x2400530c
 8012500:	40028000 	.word	0x40028000
 8012504:	30040060 	.word	0x30040060
 8012508:	30040000 	.word	0x30040000
 801250c:	24005394 	.word	0x24005394
 8012510:	08029100 	.word	0x08029100
 8012514:	30040200 	.word	0x30040200
 8012518:	24000018 	.word	0x24000018
 801251c:	240052ec 	.word	0x240052ec

08012520 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8012520:	b580      	push	{r7, lr}
 8012522:	b092      	sub	sp, #72	; 0x48
 8012524:	af00      	add	r7, sp, #0
 8012526:	6078      	str	r0, [r7, #4]
 8012528:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 801252a:	2300      	movs	r3, #0
 801252c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 801252e:	2300      	movs	r3, #0
 8012530:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8012534:	f107 030c 	add.w	r3, r7, #12
 8012538:	2230      	movs	r2, #48	; 0x30
 801253a:	2100      	movs	r1, #0
 801253c:	4618      	mov	r0, r3
 801253e:	f00d fd9b 	bl	8020078 <memset>

  for(q = p; q != NULL; q = q->next)
 8012542:	683b      	ldr	r3, [r7, #0]
 8012544:	643b      	str	r3, [r7, #64]	; 0x40
 8012546:	e049      	b.n	80125dc <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 8012548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801254a:	2b03      	cmp	r3, #3
 801254c:	d902      	bls.n	8012554 <low_level_output+0x34>
      return ERR_IF;
 801254e:	f06f 030b 	mvn.w	r3, #11
 8012552:	e056      	b.n	8012602 <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 8012554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012556:	6859      	ldr	r1, [r3, #4]
 8012558:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801255a:	4613      	mov	r3, r2
 801255c:	005b      	lsls	r3, r3, #1
 801255e:	4413      	add	r3, r2
 8012560:	009b      	lsls	r3, r3, #2
 8012562:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8012566:	4413      	add	r3, r2
 8012568:	3b3c      	subs	r3, #60	; 0x3c
 801256a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 801256c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801256e:	895b      	ldrh	r3, [r3, #10]
 8012570:	4619      	mov	r1, r3
 8012572:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012574:	4613      	mov	r3, r2
 8012576:	005b      	lsls	r3, r3, #1
 8012578:	4413      	add	r3, r2
 801257a:	009b      	lsls	r3, r3, #2
 801257c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8012580:	4413      	add	r3, r2
 8012582:	3b38      	subs	r3, #56	; 0x38
 8012584:	6019      	str	r1, [r3, #0]

    if(i>0)
 8012586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012588:	2b00      	cmp	r3, #0
 801258a:	d012      	beq.n	80125b2 <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 801258c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801258e:	1e5a      	subs	r2, r3, #1
 8012590:	f107 000c 	add.w	r0, r7, #12
 8012594:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012596:	460b      	mov	r3, r1
 8012598:	005b      	lsls	r3, r3, #1
 801259a:	440b      	add	r3, r1
 801259c:	009b      	lsls	r3, r3, #2
 801259e:	18c1      	adds	r1, r0, r3
 80125a0:	4613      	mov	r3, r2
 80125a2:	005b      	lsls	r3, r3, #1
 80125a4:	4413      	add	r3, r2
 80125a6:	009b      	lsls	r3, r3, #2
 80125a8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80125ac:	4413      	add	r3, r2
 80125ae:	3b34      	subs	r3, #52	; 0x34
 80125b0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80125b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d10a      	bne.n	80125d0 <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 80125ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80125bc:	4613      	mov	r3, r2
 80125be:	005b      	lsls	r3, r3, #1
 80125c0:	4413      	add	r3, r2
 80125c2:	009b      	lsls	r3, r3, #2
 80125c4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80125c8:	4413      	add	r3, r2
 80125ca:	3b34      	subs	r3, #52	; 0x34
 80125cc:	2200      	movs	r2, #0
 80125ce:	601a      	str	r2, [r3, #0]
    }

    i++;
 80125d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80125d2:	3301      	adds	r3, #1
 80125d4:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80125d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	643b      	str	r3, [r7, #64]	; 0x40
 80125dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d1b2      	bne.n	8012548 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 80125e2:	683b      	ldr	r3, [r7, #0]
 80125e4:	891b      	ldrh	r3, [r3, #8]
 80125e6:	461a      	mov	r2, r3
 80125e8:	4b08      	ldr	r3, [pc, #32]	; (801260c <low_level_output+0xec>)
 80125ea:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80125ec:	4a07      	ldr	r2, [pc, #28]	; (801260c <low_level_output+0xec>)
 80125ee:	f107 030c 	add.w	r3, r7, #12
 80125f2:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80125f4:	2214      	movs	r2, #20
 80125f6:	4905      	ldr	r1, [pc, #20]	; (801260c <low_level_output+0xec>)
 80125f8:	4805      	ldr	r0, [pc, #20]	; (8012610 <low_level_output+0xf0>)
 80125fa:	f7f5 ff16 	bl	800842a <HAL_ETH_Transmit>

  return errval;
 80125fe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8012602:	4618      	mov	r0, r3
 8012604:	3748      	adds	r7, #72	; 0x48
 8012606:	46bd      	mov	sp, r7
 8012608:	bd80      	pop	{r7, pc}
 801260a:	bf00      	nop
 801260c:	24005394 	.word	0x24005394
 8012610:	2400530c 	.word	0x2400530c

08012614 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8012614:	b580      	push	{r7, lr}
 8012616:	b098      	sub	sp, #96	; 0x60
 8012618:	af02      	add	r7, sp, #8
 801261a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 801261c:	2300      	movs	r3, #0
 801261e:	653b      	str	r3, [r7, #80]	; 0x50
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 8012620:	2300      	movs	r3, #0
 8012622:	60bb      	str	r3, [r7, #8]
 8012624:	2300      	movs	r3, #0
 8012626:	657b      	str	r3, [r7, #84]	; 0x54
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8012628:	f107 030c 	add.w	r3, r7, #12
 801262c:	2230      	movs	r2, #48	; 0x30
 801262e:	2100      	movs	r1, #0
 8012630:	4618      	mov	r0, r3
 8012632:	f00d fd21 	bl	8020078 <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 8012636:	2300      	movs	r3, #0
 8012638:	657b      	str	r3, [r7, #84]	; 0x54
 801263a:	e015      	b.n	8012668 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 801263c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801263e:	1c5a      	adds	r2, r3, #1
 8012640:	f107 010c 	add.w	r1, r7, #12
 8012644:	4613      	mov	r3, r2
 8012646:	005b      	lsls	r3, r3, #1
 8012648:	4413      	add	r3, r2
 801264a:	009b      	lsls	r3, r3, #2
 801264c:	4419      	add	r1, r3
 801264e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012650:	4613      	mov	r3, r2
 8012652:	005b      	lsls	r3, r3, #1
 8012654:	4413      	add	r3, r2
 8012656:	009b      	lsls	r3, r3, #2
 8012658:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801265c:	4413      	add	r3, r2
 801265e:	3b44      	subs	r3, #68	; 0x44
 8012660:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 8012662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012664:	3301      	adds	r3, #1
 8012666:	657b      	str	r3, [r7, #84]	; 0x54
 8012668:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801266a:	2b02      	cmp	r3, #2
 801266c:	d9e6      	bls.n	801263c <low_level_input+0x28>
  }

  if (HAL_ETH_IsRxDataAvailable(&heth))
 801266e:	482b      	ldr	r0, [pc, #172]	; (801271c <low_level_input+0x108>)
 8012670:	f7f5 ff64 	bl	800853c <HAL_ETH_IsRxDataAvailable>
 8012674:	4603      	mov	r3, r0
 8012676:	2b00      	cmp	r3, #0
 8012678:	d04a      	beq.n	8012710 <low_level_input+0xfc>
  {
    HAL_ETH_GetRxDataBuffer(&heth, RxBuff);
 801267a:	f107 030c 	add.w	r3, r7, #12
 801267e:	4619      	mov	r1, r3
 8012680:	4826      	ldr	r0, [pc, #152]	; (801271c <low_level_input+0x108>)
 8012682:	f7f6 f84b 	bl	800871c <HAL_ETH_GetRxDataBuffer>
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 8012686:	f107 0308 	add.w	r3, r7, #8
 801268a:	4619      	mov	r1, r3
 801268c:	4823      	ldr	r0, [pc, #140]	; (801271c <low_level_input+0x108>)
 801268e:	f7f6 f8e3 	bl	8008858 <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 8012692:	4822      	ldr	r0, [pc, #136]	; (801271c <low_level_input+0x108>)
 8012694:	f7f6 f913 	bl	80088be <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	68ba      	ldr	r2, [r7, #8]
 801269c:	64bb      	str	r3, [r7, #72]	; 0x48
 801269e:	647a      	str	r2, [r7, #68]	; 0x44
    if ( dsize > 0 ) { 
 80126a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	dd1d      	ble.n	80126e2 <low_level_input+0xce>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80126a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80126a8:	f003 021f 	and.w	r2, r3, #31
 80126ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80126ae:	4413      	add	r3, r2
 80126b0:	643b      	str	r3, [r7, #64]	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80126b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80126b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 80126b6:	f3bf 8f4f 	dsb	sy
}
 80126ba:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80126bc:	4a18      	ldr	r2, [pc, #96]	; (8012720 <low_level_input+0x10c>)
 80126be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126c0:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80126c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126c6:	3320      	adds	r3, #32
 80126c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80126ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80126cc:	3b20      	subs	r3, #32
 80126ce:	643b      	str	r3, [r7, #64]	; 0x40
      } while ( op_size > 0 );
 80126d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	dcf2      	bgt.n	80126bc <low_level_input+0xa8>
  __ASM volatile ("dsb 0xF":::"memory");
 80126d6:	f3bf 8f4f 	dsb	sy
}
 80126da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80126dc:	f3bf 8f6f 	isb	sy
}
 80126e0:	bf00      	nop
}
 80126e2:	bf00      	nop
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 80126e4:	480f      	ldr	r0, [pc, #60]	; (8012724 <low_level_input+0x110>)
 80126e6:	f003 fe23 	bl	8016330 <memp_malloc_pool>
 80126ea:	64f8      	str	r0, [r7, #76]	; 0x4c
    custom_pbuf->custom_free_function = pbuf_free_custom;
 80126ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126ee:	4a0e      	ldr	r2, [pc, #56]	; (8012728 <low_level_input+0x114>)
 80126f0:	611a      	str	r2, [r3, #16]

    p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 80126f2:	68bb      	ldr	r3, [r7, #8]
 80126f4:	b299      	uxth	r1, r3
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	68ba      	ldr	r2, [r7, #8]
 80126fa:	b292      	uxth	r2, r2
 80126fc:	9201      	str	r2, [sp, #4]
 80126fe:	9300      	str	r3, [sp, #0]
 8012700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012702:	2241      	movs	r2, #65	; 0x41
 8012704:	2000      	movs	r0, #0
 8012706:	f004 fb61 	bl	8016dcc <pbuf_alloced_custom>
 801270a:	6538      	str	r0, [r7, #80]	; 0x50

    return p;
 801270c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801270e:	e000      	b.n	8012712 <low_level_input+0xfe>
  }
  else
  {
    return NULL;
 8012710:	2300      	movs	r3, #0
  }
}
 8012712:	4618      	mov	r0, r3
 8012714:	3758      	adds	r7, #88	; 0x58
 8012716:	46bd      	mov	sp, r7
 8012718:	bd80      	pop	{r7, pc}
 801271a:	bf00      	nop
 801271c:	2400530c 	.word	0x2400530c
 8012720:	e000ed00 	.word	0xe000ed00
 8012724:	08029100 	.word	0x08029100
 8012728:	080127c9 	.word	0x080127c9

0801272c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 801272c:	b580      	push	{r7, lr}
 801272e:	b084      	sub	sp, #16
 8012730:	af00      	add	r7, sp, #0
 8012732:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8012734:	6878      	ldr	r0, [r7, #4]
 8012736:	f7ff ff6d 	bl	8012614 <low_level_input>
 801273a:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d010      	beq.n	8012764 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	691b      	ldr	r3, [r3, #16]
 8012746:	6879      	ldr	r1, [r7, #4]
 8012748:	68f8      	ldr	r0, [r7, #12]
 801274a:	4798      	blx	r3
 801274c:	4603      	mov	r3, r0
 801274e:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8012750:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d006      	beq.n	8012766 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8012758:	68f8      	ldr	r0, [r7, #12]
 801275a:	f004 fcf1 	bl	8017140 <pbuf_free>
    p = NULL;
 801275e:	2300      	movs	r3, #0
 8012760:	60fb      	str	r3, [r7, #12]
 8012762:	e000      	b.n	8012766 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8012764:	bf00      	nop
  }

}
 8012766:	3710      	adds	r7, #16
 8012768:	46bd      	mov	sp, r7
 801276a:	bd80      	pop	{r7, pc}

0801276c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 801276c:	b580      	push	{r7, lr}
 801276e:	b082      	sub	sp, #8
 8012770:	af00      	add	r7, sp, #0
 8012772:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	2b00      	cmp	r3, #0
 8012778:	d106      	bne.n	8012788 <ethernetif_init+0x1c>
 801277a:	4b0e      	ldr	r3, [pc, #56]	; (80127b4 <ethernetif_init+0x48>)
 801277c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8012780:	490d      	ldr	r1, [pc, #52]	; (80127b8 <ethernetif_init+0x4c>)
 8012782:	480e      	ldr	r0, [pc, #56]	; (80127bc <ethernetif_init+0x50>)
 8012784:	f00e fb72 	bl	8020e6c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	2273      	movs	r2, #115	; 0x73
 801278c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	2274      	movs	r2, #116	; 0x74
 8012794:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	4a09      	ldr	r2, [pc, #36]	; (80127c0 <ethernetif_init+0x54>)
 801279c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	4a08      	ldr	r2, [pc, #32]	; (80127c4 <ethernetif_init+0x58>)
 80127a2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80127a4:	6878      	ldr	r0, [r7, #4]
 80127a6:	f7ff fe0b 	bl	80123c0 <low_level_init>

  return ERR_OK;
 80127aa:	2300      	movs	r3, #0
}
 80127ac:	4618      	mov	r0, r3
 80127ae:	3708      	adds	r7, #8
 80127b0:	46bd      	mov	sp, r7
 80127b2:	bd80      	pop	{r7, pc}
 80127b4:	08025d90 	.word	0x08025d90
 80127b8:	08025dac 	.word	0x08025dac
 80127bc:	08025dbc 	.word	0x08025dbc
 80127c0:	08013c3d 	.word	0x08013c3d
 80127c4:	08012521 	.word	0x08012521

080127c8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80127c8:	b580      	push	{r7, lr}
 80127ca:	b084      	sub	sp, #16
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80127d4:	68f9      	ldr	r1, [r7, #12]
 80127d6:	4803      	ldr	r0, [pc, #12]	; (80127e4 <pbuf_free_custom+0x1c>)
 80127d8:	f003 fe18 	bl	801640c <memp_free_pool>
}
 80127dc:	bf00      	nop
 80127de:	3710      	adds	r7, #16
 80127e0:	46bd      	mov	sp, r7
 80127e2:	bd80      	pop	{r7, pc}
 80127e4:	08029100 	.word	0x08029100

080127e8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80127e8:	b580      	push	{r7, lr}
 80127ea:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80127ec:	f7f1 fc7e 	bl	80040ec <HAL_GetTick>
 80127f0:	4603      	mov	r3, r0
}
 80127f2:	4618      	mov	r0, r3
 80127f4:	bd80      	pop	{r7, pc}
	...

080127f8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80127f8:	b580      	push	{r7, lr}
 80127fa:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80127fc:	4802      	ldr	r0, [pc, #8]	; (8012808 <ETH_PHY_IO_Init+0x10>)
 80127fe:	f7f6 fcb3 	bl	8009168 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8012802:	2300      	movs	r3, #0
}
 8012804:	4618      	mov	r0, r3
 8012806:	bd80      	pop	{r7, pc}
 8012808:	2400530c 	.word	0x2400530c

0801280c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 801280c:	b480      	push	{r7}
 801280e:	af00      	add	r7, sp, #0
  return 0;
 8012810:	2300      	movs	r3, #0
}
 8012812:	4618      	mov	r0, r3
 8012814:	46bd      	mov	sp, r7
 8012816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801281a:	4770      	bx	lr

0801281c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 801281c:	b580      	push	{r7, lr}
 801281e:	b084      	sub	sp, #16
 8012820:	af00      	add	r7, sp, #0
 8012822:	60f8      	str	r0, [r7, #12]
 8012824:	60b9      	str	r1, [r7, #8]
 8012826:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	68ba      	ldr	r2, [r7, #8]
 801282c:	68f9      	ldr	r1, [r7, #12]
 801282e:	4807      	ldr	r0, [pc, #28]	; (801284c <ETH_PHY_IO_ReadReg+0x30>)
 8012830:	f7f6 fa04 	bl	8008c3c <HAL_ETH_ReadPHYRegister>
 8012834:	4603      	mov	r3, r0
 8012836:	2b00      	cmp	r3, #0
 8012838:	d002      	beq.n	8012840 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 801283a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801283e:	e000      	b.n	8012842 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8012840:	2300      	movs	r3, #0
}
 8012842:	4618      	mov	r0, r3
 8012844:	3710      	adds	r7, #16
 8012846:	46bd      	mov	sp, r7
 8012848:	bd80      	pop	{r7, pc}
 801284a:	bf00      	nop
 801284c:	2400530c 	.word	0x2400530c

08012850 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8012850:	b580      	push	{r7, lr}
 8012852:	b084      	sub	sp, #16
 8012854:	af00      	add	r7, sp, #0
 8012856:	60f8      	str	r0, [r7, #12]
 8012858:	60b9      	str	r1, [r7, #8]
 801285a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	68ba      	ldr	r2, [r7, #8]
 8012860:	68f9      	ldr	r1, [r7, #12]
 8012862:	4807      	ldr	r0, [pc, #28]	; (8012880 <ETH_PHY_IO_WriteReg+0x30>)
 8012864:	f7f6 fa3e 	bl	8008ce4 <HAL_ETH_WritePHYRegister>
 8012868:	4603      	mov	r3, r0
 801286a:	2b00      	cmp	r3, #0
 801286c:	d002      	beq.n	8012874 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 801286e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012872:	e000      	b.n	8012876 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8012874:	2300      	movs	r3, #0
}
 8012876:	4618      	mov	r0, r3
 8012878:	3710      	adds	r7, #16
 801287a:	46bd      	mov	sp, r7
 801287c:	bd80      	pop	{r7, pc}
 801287e:	bf00      	nop
 8012880:	2400530c 	.word	0x2400530c

08012884 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8012884:	b580      	push	{r7, lr}
 8012886:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8012888:	f7f1 fc30 	bl	80040ec <HAL_GetTick>
 801288c:	4603      	mov	r3, r0
}
 801288e:	4618      	mov	r0, r3
 8012890:	bd80      	pop	{r7, pc}
	...

08012894 <ethernet_link_check_state>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8012894:	b580      	push	{r7, lr}
 8012896:	b0a0      	sub	sp, #128	; 0x80
 8012898:	af00      	add	r7, sp, #0
 801289a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 801289c:	2300      	movs	r3, #0
 801289e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80128a0:	2300      	movs	r3, #0
 80128a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80128a4:	2300      	movs	r3, #0
 80128a6:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80128a8:	483a      	ldr	r0, [pc, #232]	; (8012994 <ethernet_link_check_state+0x100>)
 80128aa:	f7f1 fb11 	bl	8003ed0 <LAN8742_GetLinkState>
 80128ae:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80128b6:	089b      	lsrs	r3, r3, #2
 80128b8:	f003 0301 	and.w	r3, r3, #1
 80128bc:	b2db      	uxtb	r3, r3
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d00c      	beq.n	80128dc <ethernet_link_check_state+0x48>
 80128c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80128c4:	2b01      	cmp	r3, #1
 80128c6:	dc09      	bgt.n	80128dc <ethernet_link_check_state+0x48>
  {
    HAL_ETH_Stop(&heth);
 80128c8:	4833      	ldr	r0, [pc, #204]	; (8012998 <ethernet_link_check_state+0x104>)
 80128ca:	f7f5 fd5e 	bl	800838a <HAL_ETH_Stop>
    netif_set_down(netif);
 80128ce:	6878      	ldr	r0, [r7, #4]
 80128d0:	f004 f820 	bl	8016914 <netif_set_down>
    netif_set_link_down(netif);
 80128d4:	6878      	ldr	r0, [r7, #4]
 80128d6:	f004 f883 	bl	80169e0 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80128da:	e056      	b.n	801298a <ethernet_link_check_state+0xf6>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80128e2:	f003 0304 	and.w	r3, r3, #4
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d14f      	bne.n	801298a <ethernet_link_check_state+0xf6>
 80128ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80128ec:	2b01      	cmp	r3, #1
 80128ee:	dd4c      	ble.n	801298a <ethernet_link_check_state+0xf6>
 80128f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80128f2:	3b02      	subs	r3, #2
 80128f4:	2b03      	cmp	r3, #3
 80128f6:	d82b      	bhi.n	8012950 <ethernet_link_check_state+0xbc>
 80128f8:	a201      	add	r2, pc, #4	; (adr r2, 8012900 <ethernet_link_check_state+0x6c>)
 80128fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80128fe:	bf00      	nop
 8012900:	08012911 	.word	0x08012911
 8012904:	08012923 	.word	0x08012923
 8012908:	08012933 	.word	0x08012933
 801290c:	08012943 	.word	0x08012943
      duplex = ETH_FULLDUPLEX_MODE;
 8012910:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012914:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8012916:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801291a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801291c:	2301      	movs	r3, #1
 801291e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8012920:	e017      	b.n	8012952 <ethernet_link_check_state+0xbe>
      duplex = ETH_HALFDUPLEX_MODE;
 8012922:	2300      	movs	r3, #0
 8012924:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8012926:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801292a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801292c:	2301      	movs	r3, #1
 801292e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8012930:	e00f      	b.n	8012952 <ethernet_link_check_state+0xbe>
      duplex = ETH_FULLDUPLEX_MODE;
 8012932:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012936:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8012938:	2300      	movs	r3, #0
 801293a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801293c:	2301      	movs	r3, #1
 801293e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8012940:	e007      	b.n	8012952 <ethernet_link_check_state+0xbe>
      duplex = ETH_HALFDUPLEX_MODE;
 8012942:	2300      	movs	r3, #0
 8012944:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8012946:	2300      	movs	r3, #0
 8012948:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801294a:	2301      	movs	r3, #1
 801294c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801294e:	e000      	b.n	8012952 <ethernet_link_check_state+0xbe>
      break;
 8012950:	bf00      	nop
    if(linkchanged)
 8012952:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012954:	2b00      	cmp	r3, #0
 8012956:	d018      	beq.n	801298a <ethernet_link_check_state+0xf6>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8012958:	f107 030c 	add.w	r3, r7, #12
 801295c:	4619      	mov	r1, r3
 801295e:	480e      	ldr	r0, [pc, #56]	; (8012998 <ethernet_link_check_state+0x104>)
 8012960:	f7f6 fa14 	bl	8008d8c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8012964:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012966:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8012968:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801296a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 801296c:	f107 030c 	add.w	r3, r7, #12
 8012970:	4619      	mov	r1, r3
 8012972:	4809      	ldr	r0, [pc, #36]	; (8012998 <ethernet_link_check_state+0x104>)
 8012974:	f7f6 fbde 	bl	8009134 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8012978:	4807      	ldr	r0, [pc, #28]	; (8012998 <ethernet_link_check_state+0x104>)
 801297a:	f7f5 fcaa 	bl	80082d2 <HAL_ETH_Start>
      netif_set_up(netif);
 801297e:	6878      	ldr	r0, [r7, #4]
 8012980:	f003 ff5c 	bl	801683c <netif_set_up>
      netif_set_link_up(netif);
 8012984:	6878      	ldr	r0, [r7, #4]
 8012986:	f003 fff7 	bl	8016978 <netif_set_link_up>
}
 801298a:	bf00      	nop
 801298c:	3780      	adds	r7, #128	; 0x80
 801298e:	46bd      	mov	sp, r7
 8012990:	bd80      	pop	{r7, pc}
 8012992:	bf00      	nop
 8012994:	240052ec 	.word	0x240052ec
 8012998:	2400530c 	.word	0x2400530c

0801299c <synth_IfftInit>:
 * @brief  synth ifft init.
 * @param
 * @retval Error
 */
int32_t synth_IfftInit(void)
{
 801299c:	b590      	push	{r4, r7, lr}
 801299e:	ed2d 8b02 	vpush	{d8}
 80129a2:	b0c7      	sub	sp, #284	; 0x11c
 80129a4:	af02      	add	r7, sp, #8
	int32_t buffer_len = 0;
 80129a6:	2300      	movs	r3, #0
 80129a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	uint32_t aRandom32bit = 0;
 80129ac:	2300      	movs	r3, #0
 80129ae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	uint8_t FreqStr[256] = {0};
 80129b2:	463b      	mov	r3, r7
 80129b4:	2200      	movs	r2, #0
 80129b6:	601a      	str	r2, [r3, #0]
 80129b8:	3304      	adds	r3, #4
 80129ba:	22fc      	movs	r2, #252	; 0xfc
 80129bc:	2100      	movs	r1, #0
 80129be:	4618      	mov	r0, r3
 80129c0:	f00d fb5a 	bl	8020078 <memset>

	//allocate the contiguous memory area for storage image data
	imageData = malloc(cis_GetEffectivePixelNb() * sizeof(uint16_t*));
 80129c4:	f00b fd5a 	bl	801e47c <cis_GetEffectivePixelNb>
 80129c8:	4603      	mov	r3, r0
 80129ca:	009b      	lsls	r3, r3, #2
 80129cc:	4618      	mov	r0, r3
 80129ce:	f00d fb15 	bl	801fffc <malloc>
 80129d2:	4603      	mov	r3, r0
 80129d4:	461a      	mov	r2, r3
 80129d6:	4b94      	ldr	r3, [pc, #592]	; (8012c28 <synth_IfftInit+0x28c>)
 80129d8:	601a      	str	r2, [r3, #0]
	if (imageData == NULL)
 80129da:	4b93      	ldr	r3, [pc, #588]	; (8012c28 <synth_IfftInit+0x28c>)
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d101      	bne.n	80129e6 <synth_IfftInit+0x4a>
	{
		Error_Handler();
 80129e2:	f7f0 f8a7 	bl	8002b34 <Error_Handler>
	}

	memset(imageData, 0, cis_GetEffectivePixelNb() * sizeof(uint16_t*));
 80129e6:	4b90      	ldr	r3, [pc, #576]	; (8012c28 <synth_IfftInit+0x28c>)
 80129e8:	681c      	ldr	r4, [r3, #0]
 80129ea:	f00b fd47 	bl	801e47c <cis_GetEffectivePixelNb>
 80129ee:	4603      	mov	r3, r0
 80129f0:	009b      	lsls	r3, r3, #2
 80129f2:	461a      	mov	r2, r3
 80129f4:	2100      	movs	r1, #0
 80129f6:	4620      	mov	r0, r4
 80129f8:	f00d fb3e 	bl	8020078 <memset>

	buffer_len = init_waves(&unitary_waveform, waves);
 80129fc:	498b      	ldr	r1, [pc, #556]	; (8012c2c <synth_IfftInit+0x290>)
 80129fe:	488c      	ldr	r0, [pc, #560]	; (8012c30 <synth_IfftInit+0x294>)
 8012a00:	f000 fb86 	bl	8013110 <init_waves>
 8012a04:	4603      	mov	r3, r0
 8012a06:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	// start with random index
	for (uint32_t i = 0; i < NUMBER_OF_NOTES; i++)
 8012a0a:	2300      	movs	r3, #0
 8012a0c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8012a10:	e037      	b.n	8012a82 <synth_IfftInit+0xe6>
	{
		if (HAL_RNG_GenerateRandomNumber(&hrng, &aRandom32bit) != HAL_OK)
 8012a12:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8012a16:	4619      	mov	r1, r3
 8012a18:	4886      	ldr	r0, [pc, #536]	; (8012c34 <synth_IfftInit+0x298>)
 8012a1a:	f7fb f898 	bl	800db4e <HAL_RNG_GenerateRandomNumber>
 8012a1e:	4603      	mov	r3, r0
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d001      	beq.n	8012a28 <synth_IfftInit+0x8c>
		{
			/* Random number generation error */
			Error_Handler();
 8012a24:	f7f0 f886 	bl	8002b34 <Error_Handler>
		}
		waves[i].current_idx = aRandom32bit % waves[i].aera_size;
 8012a28:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8012a2c:	487f      	ldr	r0, [pc, #508]	; (8012c2c <synth_IfftInit+0x290>)
 8012a2e:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8012a32:	460b      	mov	r3, r1
 8012a34:	009b      	lsls	r3, r3, #2
 8012a36:	440b      	add	r3, r1
 8012a38:	009b      	lsls	r3, r3, #2
 8012a3a:	4403      	add	r3, r0
 8012a3c:	3306      	adds	r3, #6
 8012a3e:	881b      	ldrh	r3, [r3, #0]
 8012a40:	fbb2 f1f3 	udiv	r1, r2, r3
 8012a44:	fb03 f301 	mul.w	r3, r3, r1
 8012a48:	1ad3      	subs	r3, r2, r3
 8012a4a:	b298      	uxth	r0, r3
 8012a4c:	4977      	ldr	r1, [pc, #476]	; (8012c2c <synth_IfftInit+0x290>)
 8012a4e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8012a52:	4613      	mov	r3, r2
 8012a54:	009b      	lsls	r3, r3, #2
 8012a56:	4413      	add	r3, r2
 8012a58:	009b      	lsls	r3, r3, #2
 8012a5a:	440b      	add	r3, r1
 8012a5c:	3304      	adds	r3, #4
 8012a5e:	4602      	mov	r2, r0
 8012a60:	801a      	strh	r2, [r3, #0]
		waves[i].current_volume = 0;
 8012a62:	4972      	ldr	r1, [pc, #456]	; (8012c2c <synth_IfftInit+0x290>)
 8012a64:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8012a68:	4613      	mov	r3, r2
 8012a6a:	009b      	lsls	r3, r3, #2
 8012a6c:	4413      	add	r3, r2
 8012a6e:	009b      	lsls	r3, r3, #2
 8012a70:	440b      	add	r3, r1
 8012a72:	330c      	adds	r3, #12
 8012a74:	2200      	movs	r2, #0
 8012a76:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < NUMBER_OF_NOTES; i++)
 8012a78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012a7c:	3301      	adds	r3, #1
 8012a7e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8012a82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012a86:	2bd7      	cmp	r3, #215	; 0xd7
 8012a88:	d9c3      	bls.n	8012a12 <synth_IfftInit+0x76>
	}

	if (buffer_len < 0)
 8012a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	da05      	bge.n	8012a9e <synth_IfftInit+0x102>
	{
		printf("RAM overflow");
 8012a92:	4869      	ldr	r0, [pc, #420]	; (8012c38 <synth_IfftInit+0x29c>)
 8012a94:	f00e f9ea 	bl	8020e6c <iprintf>
		return -1;
 8012a98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012a9c:	e0bc      	b.n	8012c18 <synth_IfftInit+0x27c>
	}

	printf("Buffer lengh = %d\n", (int)buffer_len);
 8012a9e:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8012aa2:	4866      	ldr	r0, [pc, #408]	; (8012c3c <synth_IfftInit+0x2a0>)
 8012aa4:	f00e f9e2 	bl	8020e6c <iprintf>

#ifdef PRINT_FREQUENCY
	ssd1362_drawRect(0, 57, 256, 64, 5, false);
 8012aa8:	2300      	movs	r3, #0
 8012aaa:	9301      	str	r3, [sp, #4]
 8012aac:	2305      	movs	r3, #5
 8012aae:	9300      	str	r3, [sp, #0]
 8012ab0:	2340      	movs	r3, #64	; 0x40
 8012ab2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012ab6:	2139      	movs	r1, #57	; 0x39
 8012ab8:	2000      	movs	r0, #0
 8012aba:	f00c ff91 	bl	801f9e0 <ssd1362_drawRect>
	sprintf((char *)FreqStr, "%dHz Sz%d Oc%d", (int)waves[0].frequency, (int)waves[0].aera_size, (int)waves[0].octave_coeff);
 8012abe:	4b5b      	ldr	r3, [pc, #364]	; (8012c2c <synth_IfftInit+0x290>)
 8012ac0:	edd3 7a04 	vldr	s15, [r3, #16]
 8012ac4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012ac8:	4b58      	ldr	r3, [pc, #352]	; (8012c2c <synth_IfftInit+0x290>)
 8012aca:	88db      	ldrh	r3, [r3, #6]
 8012acc:	461a      	mov	r2, r3
 8012ace:	4b57      	ldr	r3, [pc, #348]	; (8012c2c <synth_IfftInit+0x290>)
 8012ad0:	891b      	ldrh	r3, [r3, #8]
 8012ad2:	4638      	mov	r0, r7
 8012ad4:	9300      	str	r3, [sp, #0]
 8012ad6:	4613      	mov	r3, r2
 8012ad8:	ee17 2a90 	vmov	r2, s15
 8012adc:	4958      	ldr	r1, [pc, #352]	; (8012c40 <synth_IfftInit+0x2a4>)
 8012ade:	f00e faa9 	bl	8021034 <siprintf>
	ssd1362_drawString(0, 57, (int8_t*)FreqStr, 0, 8);
 8012ae2:	463a      	mov	r2, r7
 8012ae4:	2308      	movs	r3, #8
 8012ae6:	9300      	str	r3, [sp, #0]
 8012ae8:	2300      	movs	r3, #0
 8012aea:	2139      	movs	r1, #57	; 0x39
 8012aec:	2000      	movs	r0, #0
 8012aee:	f00d f8da 	bl	801fca6 <ssd1362_drawString>
	sprintf((char *)FreqStr, "%dHz Sz%d Oc%d", (int)waves[NUMBER_OF_NOTES - 1].frequency, (int)waves[NUMBER_OF_NOTES - 1].aera_size / (int)sqrt(waves[NUMBER_OF_NOTES - 1].octave_coeff), (int)sqrt(waves[NUMBER_OF_NOTES - 1].octave_coeff));
 8012af2:	4a4e      	ldr	r2, [pc, #312]	; (8012c2c <synth_IfftInit+0x290>)
 8012af4:	f241 03dc 	movw	r3, #4316	; 0x10dc
 8012af8:	4413      	add	r3, r2
 8012afa:	edd3 7a00 	vldr	s15, [r3]
 8012afe:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8012b02:	4a4a      	ldr	r2, [pc, #296]	; (8012c2c <synth_IfftInit+0x290>)
 8012b04:	f241 03d2 	movw	r3, #4306	; 0x10d2
 8012b08:	4413      	add	r3, r2
 8012b0a:	881b      	ldrh	r3, [r3, #0]
 8012b0c:	461c      	mov	r4, r3
 8012b0e:	4a47      	ldr	r2, [pc, #284]	; (8012c2c <synth_IfftInit+0x290>)
 8012b10:	f241 03d4 	movw	r3, #4308	; 0x10d4
 8012b14:	4413      	add	r3, r2
 8012b16:	881b      	ldrh	r3, [r3, #0]
 8012b18:	ee07 3a90 	vmov	s15, r3
 8012b1c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012b20:	eeb0 0b47 	vmov.f64	d0, d7
 8012b24:	f012 f9e8 	bl	8024ef8 <sqrt>
 8012b28:	eeb0 7b40 	vmov.f64	d7, d0
 8012b2c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8012b30:	ee17 3a90 	vmov	r3, s15
 8012b34:	fb94 f4f3 	sdiv	r4, r4, r3
 8012b38:	4a3c      	ldr	r2, [pc, #240]	; (8012c2c <synth_IfftInit+0x290>)
 8012b3a:	f241 03d4 	movw	r3, #4308	; 0x10d4
 8012b3e:	4413      	add	r3, r2
 8012b40:	881b      	ldrh	r3, [r3, #0]
 8012b42:	ee07 3a90 	vmov	s15, r3
 8012b46:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012b4a:	eeb0 0b47 	vmov.f64	d0, d7
 8012b4e:	f012 f9d3 	bl	8024ef8 <sqrt>
 8012b52:	eeb0 7b40 	vmov.f64	d7, d0
 8012b56:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8012b5a:	ee17 3a90 	vmov	r3, s15
 8012b5e:	4638      	mov	r0, r7
 8012b60:	9300      	str	r3, [sp, #0]
 8012b62:	4623      	mov	r3, r4
 8012b64:	ee18 2a10 	vmov	r2, s16
 8012b68:	4935      	ldr	r1, [pc, #212]	; (8012c40 <synth_IfftInit+0x2a4>)
 8012b6a:	f00e fa63 	bl	8021034 <siprintf>
	ssd1362_drawString(128, 57, (int8_t*)FreqStr, 0, 8);
 8012b6e:	463a      	mov	r2, r7
 8012b70:	2308      	movs	r3, #8
 8012b72:	9300      	str	r3, [sp, #0]
 8012b74:	2300      	movs	r3, #0
 8012b76:	2139      	movs	r1, #57	; 0x39
 8012b78:	2080      	movs	r0, #128	; 0x80
 8012b7a:	f00d f894 	bl	801fca6 <ssd1362_drawString>
	ssd1362_writeFullBuffer();
 8012b7e:	f00d f961 	bl	801fe44 <ssd1362_writeFullBuffer>

	for (uint32_t pix = 0; pix < NUMBER_OF_NOTES; pix++)
 8012b82:	2300      	movs	r3, #0
 8012b84:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8012b88:	e02d      	b.n	8012be6 <synth_IfftInit+0x24a>
	{
		printf("FREQ = %0.2f, SIZE = %d, OCTAVE = %d\n", waves[pix].frequency, (int)waves[pix].aera_size, (int)waves[pix].octave_coeff);
 8012b8a:	4928      	ldr	r1, [pc, #160]	; (8012c2c <synth_IfftInit+0x290>)
 8012b8c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8012b90:	4613      	mov	r3, r2
 8012b92:	009b      	lsls	r3, r3, #2
 8012b94:	4413      	add	r3, r2
 8012b96:	009b      	lsls	r3, r3, #2
 8012b98:	440b      	add	r3, r1
 8012b9a:	3310      	adds	r3, #16
 8012b9c:	edd3 7a00 	vldr	s15, [r3]
 8012ba0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8012ba4:	4921      	ldr	r1, [pc, #132]	; (8012c2c <synth_IfftInit+0x290>)
 8012ba6:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8012baa:	4613      	mov	r3, r2
 8012bac:	009b      	lsls	r3, r3, #2
 8012bae:	4413      	add	r3, r2
 8012bb0:	009b      	lsls	r3, r3, #2
 8012bb2:	440b      	add	r3, r1
 8012bb4:	3306      	adds	r3, #6
 8012bb6:	881b      	ldrh	r3, [r3, #0]
 8012bb8:	4618      	mov	r0, r3
 8012bba:	491c      	ldr	r1, [pc, #112]	; (8012c2c <synth_IfftInit+0x290>)
 8012bbc:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8012bc0:	4613      	mov	r3, r2
 8012bc2:	009b      	lsls	r3, r3, #2
 8012bc4:	4413      	add	r3, r2
 8012bc6:	009b      	lsls	r3, r3, #2
 8012bc8:	440b      	add	r3, r1
 8012bca:	3308      	adds	r3, #8
 8012bcc:	881b      	ldrh	r3, [r3, #0]
 8012bce:	9301      	str	r3, [sp, #4]
 8012bd0:	9000      	str	r0, [sp, #0]
 8012bd2:	ec53 2b17 	vmov	r2, r3, d7
 8012bd6:	481b      	ldr	r0, [pc, #108]	; (8012c44 <synth_IfftInit+0x2a8>)
 8012bd8:	f00e f948 	bl	8020e6c <iprintf>
	for (uint32_t pix = 0; pix < NUMBER_OF_NOTES; pix++)
 8012bdc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8012be0:	3301      	adds	r3, #1
 8012be2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8012be6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8012bea:	2bd7      	cmp	r3, #215	; 0xd7
 8012bec:	d9cd      	bls.n	8012b8a <synth_IfftInit+0x1ee>
		//					{
		//						output = *(waves[pix].start_ptr + (idx *  waves[pix].octave_coeff));
		//						printf("%d\n", output);
		//					}
	}
	printf("---- END ----\n");
 8012bee:	4816      	ldr	r0, [pc, #88]	; (8012c48 <synth_IfftInit+0x2ac>)
 8012bf0:	f00e f9c2 	bl	8020f78 <puts>
#endif

	cis_Init(IFFT_MODE);
 8012bf4:	2000      	movs	r0, #0
 8012bf6:	f00b fb83 	bl	801e300 <cis_Init>
	pcm5102_Init();
 8012bfa:	f00c fd11 	bl	801f620 <pcm5102_Init>
	half_audio_ptr = pcm5102_GetDataPtr(0);
 8012bfe:	2000      	movs	r0, #0
 8012c00:	f00c fd4c 	bl	801f69c <pcm5102_GetDataPtr>
 8012c04:	4603      	mov	r3, r0
 8012c06:	4a11      	ldr	r2, [pc, #68]	; (8012c4c <synth_IfftInit+0x2b0>)
 8012c08:	6013      	str	r3, [r2, #0]
	full_audio_ptr = pcm5102_GetDataPtr(AUDIO_BUFFER_SIZE / 2);
 8012c0a:	2080      	movs	r0, #128	; 0x80
 8012c0c:	f00c fd46 	bl	801f69c <pcm5102_GetDataPtr>
 8012c10:	4603      	mov	r3, r0
 8012c12:	4a0f      	ldr	r2, [pc, #60]	; (8012c50 <synth_IfftInit+0x2b4>)
 8012c14:	6013      	str	r3, [r2, #0]

	return 0;
 8012c16:	2300      	movs	r3, #0
}
 8012c18:	4618      	mov	r0, r3
 8012c1a:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8012c1e:	46bd      	mov	sp, r7
 8012c20:	ecbd 8b02 	vpop	{d8}
 8012c24:	bd90      	pop	{r4, r7, pc}
 8012c26:	bf00      	nop
 8012c28:	24004750 	.word	0x24004750
 8012c2c:	24003664 	.word	0x24003664
 8012c30:	24003660 	.word	0x24003660
 8012c34:	24004df8 	.word	0x24004df8
 8012c38:	08025de4 	.word	0x08025de4
 8012c3c:	08025df4 	.word	0x08025df4
 8012c40:	08025e08 	.word	0x08025e08
 8012c44:	08025e18 	.word	0x08025e18
 8012c48:	08025e40 	.word	0x08025e40
 8012c4c:	24004748 	.word	0x24004748
 8012c50:	2400474c 	.word	0x2400474c

08012c54 <synth_GetImageData>:
 * @brief  Get Image buffer data
 * @param  Index
 * @retval Value
 */
int32_t synth_GetImageData(uint32_t index)
{
 8012c54:	b480      	push	{r7}
 8012c56:	b083      	sub	sp, #12
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	6078      	str	r0, [r7, #4]
	//	if (index >= RFFT_BUFFER_SIZE)
	//		Error_Handler();
	return imageData[index];
 8012c5c:	4b05      	ldr	r3, [pc, #20]	; (8012c74 <synth_GetImageData+0x20>)
 8012c5e:	681a      	ldr	r2, [r3, #0]
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	005b      	lsls	r3, r3, #1
 8012c64:	4413      	add	r3, r2
 8012c66:	881b      	ldrh	r3, [r3, #0]
}
 8012c68:	4618      	mov	r0, r3
 8012c6a:	370c      	adds	r7, #12
 8012c6c:	46bd      	mov	sp, r7
 8012c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c72:	4770      	bx	lr
 8012c74:	24004750 	.word	0x24004750

08012c78 <synth_IfftMode>:
 * @retval None
 */
#pragma GCC push_options
#pragma GCC optimize ("unroll-loops")
void synth_IfftMode(uint16_t *imageData, int16_t *audioData, uint32_t NbrOfData)
{
 8012c78:	b480      	push	{r7}
 8012c7a:	b087      	sub	sp, #28
 8012c7c:	af00      	add	r7, sp, #0
 8012c7e:	60f8      	str	r0, [r7, #12]
 8012c80:	60b9      	str	r1, [r7, #8]
 8012c82:	607a      	str	r2, [r7, #4]
	static uint16_t new_idx;
	static uint32_t write_data_nbr;
	static int32_t max_volume;
	static int32_t current_image_data;

	write_data_nbr = 0;
 8012c84:	4b50      	ldr	r3, [pc, #320]	; (8012dc8 <synth_IfftMode+0x150>)
 8012c86:	2200      	movs	r2, #0
 8012c88:	601a      	str	r2, [r3, #0]

	while(write_data_nbr < NbrOfData)
 8012c8a:	e166      	b.n	8012f5a <synth_IfftMode+0x2e2>
	{
		signal_summation = 0;
 8012c8c:	4b4f      	ldr	r3, [pc, #316]	; (8012dcc <synth_IfftMode+0x154>)
 8012c8e:	2200      	movs	r2, #0
 8012c90:	601a      	str	r2, [r3, #0]
		signal_power_summation = 0;
 8012c92:	4b4f      	ldr	r3, [pc, #316]	; (8012dd0 <synth_IfftMode+0x158>)
 8012c94:	2200      	movs	r2, #0
 8012c96:	601a      	str	r2, [r3, #0]
		max_volume = 0;
 8012c98:	4b4e      	ldr	r3, [pc, #312]	; (8012dd4 <synth_IfftMode+0x15c>)
 8012c9a:	2200      	movs	r2, #0
 8012c9c:	601a      	str	r2, [r3, #0]

		//Summation for all pixel
		for (int32_t note = NUMBER_OF_NOTES; --note >= 1;)
 8012c9e:	23d8      	movs	r3, #216	; 0xd8
 8012ca0:	617b      	str	r3, [r7, #20]
 8012ca2:	e11e      	b.n	8012ee2 <synth_IfftMode+0x26a>
		{
			//octave_coeff jump current pointer into the fundamental waveform, for example : the 3th octave increment the current pointer 8 per 8 (2^3)
			//example for 17 cell waveform and 3th octave : [X][Y][Z][X][Y][Z][X][Y][Z][X][Y][[Z][X][Y][[Z][X][Y], X for the first pass, Y for second etc...
			new_idx = (waves[note].current_idx + waves[note].octave_coeff);
 8012ca4:	494c      	ldr	r1, [pc, #304]	; (8012dd8 <synth_IfftMode+0x160>)
 8012ca6:	697a      	ldr	r2, [r7, #20]
 8012ca8:	4613      	mov	r3, r2
 8012caa:	009b      	lsls	r3, r3, #2
 8012cac:	4413      	add	r3, r2
 8012cae:	009b      	lsls	r3, r3, #2
 8012cb0:	440b      	add	r3, r1
 8012cb2:	3304      	adds	r3, #4
 8012cb4:	8819      	ldrh	r1, [r3, #0]
 8012cb6:	4848      	ldr	r0, [pc, #288]	; (8012dd8 <synth_IfftMode+0x160>)
 8012cb8:	697a      	ldr	r2, [r7, #20]
 8012cba:	4613      	mov	r3, r2
 8012cbc:	009b      	lsls	r3, r3, #2
 8012cbe:	4413      	add	r3, r2
 8012cc0:	009b      	lsls	r3, r3, #2
 8012cc2:	4403      	add	r3, r0
 8012cc4:	3308      	adds	r3, #8
 8012cc6:	881b      	ldrh	r3, [r3, #0]
 8012cc8:	440b      	add	r3, r1
 8012cca:	b29a      	uxth	r2, r3
 8012ccc:	4b43      	ldr	r3, [pc, #268]	; (8012ddc <synth_IfftMode+0x164>)
 8012cce:	801a      	strh	r2, [r3, #0]
			if (new_idx >= waves[note].aera_size)
 8012cd0:	4941      	ldr	r1, [pc, #260]	; (8012dd8 <synth_IfftMode+0x160>)
 8012cd2:	697a      	ldr	r2, [r7, #20]
 8012cd4:	4613      	mov	r3, r2
 8012cd6:	009b      	lsls	r3, r3, #2
 8012cd8:	4413      	add	r3, r2
 8012cda:	009b      	lsls	r3, r3, #2
 8012cdc:	440b      	add	r3, r1
 8012cde:	3306      	adds	r3, #6
 8012ce0:	881a      	ldrh	r2, [r3, #0]
 8012ce2:	4b3e      	ldr	r3, [pc, #248]	; (8012ddc <synth_IfftMode+0x164>)
 8012ce4:	881b      	ldrh	r3, [r3, #0]
 8012ce6:	429a      	cmp	r2, r3
 8012ce8:	d80e      	bhi.n	8012d08 <synth_IfftMode+0x90>
				new_idx -= waves[note].aera_size;
 8012cea:	4b3c      	ldr	r3, [pc, #240]	; (8012ddc <synth_IfftMode+0x164>)
 8012cec:	8819      	ldrh	r1, [r3, #0]
 8012cee:	483a      	ldr	r0, [pc, #232]	; (8012dd8 <synth_IfftMode+0x160>)
 8012cf0:	697a      	ldr	r2, [r7, #20]
 8012cf2:	4613      	mov	r3, r2
 8012cf4:	009b      	lsls	r3, r3, #2
 8012cf6:	4413      	add	r3, r2
 8012cf8:	009b      	lsls	r3, r3, #2
 8012cfa:	4403      	add	r3, r0
 8012cfc:	3306      	adds	r3, #6
 8012cfe:	881b      	ldrh	r3, [r3, #0]
 8012d00:	1acb      	subs	r3, r1, r3
 8012d02:	b29a      	uxth	r2, r3
 8012d04:	4b35      	ldr	r3, [pc, #212]	; (8012ddc <synth_IfftMode+0x164>)
 8012d06:	801a      	strh	r2, [r3, #0]

			if (imageData[note - 1] - imageData[note] > 0)
 8012d08:	697a      	ldr	r2, [r7, #20]
 8012d0a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012d0e:	4413      	add	r3, r2
 8012d10:	005b      	lsls	r3, r3, #1
 8012d12:	68fa      	ldr	r2, [r7, #12]
 8012d14:	4413      	add	r3, r2
 8012d16:	881b      	ldrh	r3, [r3, #0]
 8012d18:	4619      	mov	r1, r3
 8012d1a:	697b      	ldr	r3, [r7, #20]
 8012d1c:	005b      	lsls	r3, r3, #1
 8012d1e:	68fa      	ldr	r2, [r7, #12]
 8012d20:	4413      	add	r3, r2
 8012d22:	881b      	ldrh	r3, [r3, #0]
 8012d24:	1acb      	subs	r3, r1, r3
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	dd11      	ble.n	8012d4e <synth_IfftMode+0xd6>
				current_image_data = imageData[note - 1] - imageData[note];
 8012d2a:	697a      	ldr	r2, [r7, #20]
 8012d2c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012d30:	4413      	add	r3, r2
 8012d32:	005b      	lsls	r3, r3, #1
 8012d34:	68fa      	ldr	r2, [r7, #12]
 8012d36:	4413      	add	r3, r2
 8012d38:	881b      	ldrh	r3, [r3, #0]
 8012d3a:	4619      	mov	r1, r3
 8012d3c:	697b      	ldr	r3, [r7, #20]
 8012d3e:	005b      	lsls	r3, r3, #1
 8012d40:	68fa      	ldr	r2, [r7, #12]
 8012d42:	4413      	add	r3, r2
 8012d44:	881b      	ldrh	r3, [r3, #0]
 8012d46:	1acb      	subs	r3, r1, r3
 8012d48:	4a25      	ldr	r2, [pc, #148]	; (8012de0 <synth_IfftMode+0x168>)
 8012d4a:	6013      	str	r3, [r2, #0]
 8012d4c:	e002      	b.n	8012d54 <synth_IfftMode+0xdc>
			else
				current_image_data = 0;//imageData[note] - imageData[note - 1];
 8012d4e:	4b24      	ldr	r3, [pc, #144]	; (8012de0 <synth_IfftMode+0x168>)
 8012d50:	2200      	movs	r2, #0
 8012d52:	601a      	str	r2, [r3, #0]

			if (waves[note].current_volume < current_image_data)
 8012d54:	4920      	ldr	r1, [pc, #128]	; (8012dd8 <synth_IfftMode+0x160>)
 8012d56:	697a      	ldr	r2, [r7, #20]
 8012d58:	4613      	mov	r3, r2
 8012d5a:	009b      	lsls	r3, r3, #2
 8012d5c:	4413      	add	r3, r2
 8012d5e:	009b      	lsls	r3, r3, #2
 8012d60:	440b      	add	r3, r1
 8012d62:	330c      	adds	r3, #12
 8012d64:	681a      	ldr	r2, [r3, #0]
 8012d66:	4b1e      	ldr	r3, [pc, #120]	; (8012de0 <synth_IfftMode+0x168>)
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	429a      	cmp	r2, r3
 8012d6c:	da3a      	bge.n	8012de4 <synth_IfftMode+0x16c>
			{
				waves[note].current_volume += IFFT_GAP_PER_MS / (SAMPLING_FREQUENCY / 1000);
 8012d6e:	491a      	ldr	r1, [pc, #104]	; (8012dd8 <synth_IfftMode+0x160>)
 8012d70:	697a      	ldr	r2, [r7, #20]
 8012d72:	4613      	mov	r3, r2
 8012d74:	009b      	lsls	r3, r3, #2
 8012d76:	4413      	add	r3, r2
 8012d78:	009b      	lsls	r3, r3, #2
 8012d7a:	440b      	add	r3, r1
 8012d7c:	330c      	adds	r3, #12
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	f103 01d0 	add.w	r1, r3, #208	; 0xd0
 8012d84:	4814      	ldr	r0, [pc, #80]	; (8012dd8 <synth_IfftMode+0x160>)
 8012d86:	697a      	ldr	r2, [r7, #20]
 8012d88:	4613      	mov	r3, r2
 8012d8a:	009b      	lsls	r3, r3, #2
 8012d8c:	4413      	add	r3, r2
 8012d8e:	009b      	lsls	r3, r3, #2
 8012d90:	4403      	add	r3, r0
 8012d92:	330c      	adds	r3, #12
 8012d94:	6019      	str	r1, [r3, #0]
				if (waves[note].current_volume > current_image_data)
 8012d96:	4910      	ldr	r1, [pc, #64]	; (8012dd8 <synth_IfftMode+0x160>)
 8012d98:	697a      	ldr	r2, [r7, #20]
 8012d9a:	4613      	mov	r3, r2
 8012d9c:	009b      	lsls	r3, r3, #2
 8012d9e:	4413      	add	r3, r2
 8012da0:	009b      	lsls	r3, r3, #2
 8012da2:	440b      	add	r3, r1
 8012da4:	330c      	adds	r3, #12
 8012da6:	681a      	ldr	r2, [r3, #0]
 8012da8:	4b0d      	ldr	r3, [pc, #52]	; (8012de0 <synth_IfftMode+0x168>)
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	429a      	cmp	r2, r3
 8012dae:	dd45      	ble.n	8012e3c <synth_IfftMode+0x1c4>
					waves[note].current_volume = current_image_data;
 8012db0:	4b0b      	ldr	r3, [pc, #44]	; (8012de0 <synth_IfftMode+0x168>)
 8012db2:	6819      	ldr	r1, [r3, #0]
 8012db4:	4808      	ldr	r0, [pc, #32]	; (8012dd8 <synth_IfftMode+0x160>)
 8012db6:	697a      	ldr	r2, [r7, #20]
 8012db8:	4613      	mov	r3, r2
 8012dba:	009b      	lsls	r3, r3, #2
 8012dbc:	4413      	add	r3, r2
 8012dbe:	009b      	lsls	r3, r3, #2
 8012dc0:	4403      	add	r3, r0
 8012dc2:	330c      	adds	r3, #12
 8012dc4:	6019      	str	r1, [r3, #0]
 8012dc6:	e039      	b.n	8012e3c <synth_IfftMode+0x1c4>
 8012dc8:	24004754 	.word	0x24004754
 8012dcc:	24004758 	.word	0x24004758
 8012dd0:	2400475c 	.word	0x2400475c
 8012dd4:	24004760 	.word	0x24004760
 8012dd8:	24003664 	.word	0x24003664
 8012ddc:	24004764 	.word	0x24004764
 8012de0:	24004768 	.word	0x24004768
			}
			else
			{
				waves[note].current_volume -= IFFT_GAP_PER_MS / (SAMPLING_FREQUENCY / 1000);
 8012de4:	4966      	ldr	r1, [pc, #408]	; (8012f80 <synth_IfftMode+0x308>)
 8012de6:	697a      	ldr	r2, [r7, #20]
 8012de8:	4613      	mov	r3, r2
 8012dea:	009b      	lsls	r3, r3, #2
 8012dec:	4413      	add	r3, r2
 8012dee:	009b      	lsls	r3, r3, #2
 8012df0:	440b      	add	r3, r1
 8012df2:	330c      	adds	r3, #12
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	f1a3 01d0 	sub.w	r1, r3, #208	; 0xd0
 8012dfa:	4861      	ldr	r0, [pc, #388]	; (8012f80 <synth_IfftMode+0x308>)
 8012dfc:	697a      	ldr	r2, [r7, #20]
 8012dfe:	4613      	mov	r3, r2
 8012e00:	009b      	lsls	r3, r3, #2
 8012e02:	4413      	add	r3, r2
 8012e04:	009b      	lsls	r3, r3, #2
 8012e06:	4403      	add	r3, r0
 8012e08:	330c      	adds	r3, #12
 8012e0a:	6019      	str	r1, [r3, #0]
				if (waves[note].current_volume < current_image_data)
 8012e0c:	495c      	ldr	r1, [pc, #368]	; (8012f80 <synth_IfftMode+0x308>)
 8012e0e:	697a      	ldr	r2, [r7, #20]
 8012e10:	4613      	mov	r3, r2
 8012e12:	009b      	lsls	r3, r3, #2
 8012e14:	4413      	add	r3, r2
 8012e16:	009b      	lsls	r3, r3, #2
 8012e18:	440b      	add	r3, r1
 8012e1a:	330c      	adds	r3, #12
 8012e1c:	681a      	ldr	r2, [r3, #0]
 8012e1e:	4b59      	ldr	r3, [pc, #356]	; (8012f84 <synth_IfftMode+0x30c>)
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	429a      	cmp	r2, r3
 8012e24:	da0a      	bge.n	8012e3c <synth_IfftMode+0x1c4>
					waves[note].current_volume = current_image_data;
 8012e26:	4b57      	ldr	r3, [pc, #348]	; (8012f84 <synth_IfftMode+0x30c>)
 8012e28:	6819      	ldr	r1, [r3, #0]
 8012e2a:	4855      	ldr	r0, [pc, #340]	; (8012f80 <synth_IfftMode+0x308>)
 8012e2c:	697a      	ldr	r2, [r7, #20]
 8012e2e:	4613      	mov	r3, r2
 8012e30:	009b      	lsls	r3, r3, #2
 8012e32:	4413      	add	r3, r2
 8012e34:	009b      	lsls	r3, r3, #2
 8012e36:	4403      	add	r3, r0
 8012e38:	330c      	adds	r3, #12
 8012e3a:	6019      	str	r1, [r3, #0]
			}

			if (waves[note].current_volume > max_volume)
 8012e3c:	4950      	ldr	r1, [pc, #320]	; (8012f80 <synth_IfftMode+0x308>)
 8012e3e:	697a      	ldr	r2, [r7, #20]
 8012e40:	4613      	mov	r3, r2
 8012e42:	009b      	lsls	r3, r3, #2
 8012e44:	4413      	add	r3, r2
 8012e46:	009b      	lsls	r3, r3, #2
 8012e48:	440b      	add	r3, r1
 8012e4a:	330c      	adds	r3, #12
 8012e4c:	681a      	ldr	r2, [r3, #0]
 8012e4e:	4b4e      	ldr	r3, [pc, #312]	; (8012f88 <synth_IfftMode+0x310>)
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	429a      	cmp	r2, r3
 8012e54:	dd0a      	ble.n	8012e6c <synth_IfftMode+0x1f4>
				max_volume = waves[note].current_volume;
 8012e56:	494a      	ldr	r1, [pc, #296]	; (8012f80 <synth_IfftMode+0x308>)
 8012e58:	697a      	ldr	r2, [r7, #20]
 8012e5a:	4613      	mov	r3, r2
 8012e5c:	009b      	lsls	r3, r3, #2
 8012e5e:	4413      	add	r3, r2
 8012e60:	009b      	lsls	r3, r3, #2
 8012e62:	440b      	add	r3, r1
 8012e64:	330c      	adds	r3, #12
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	4a47      	ldr	r2, [pc, #284]	; (8012f88 <synth_IfftMode+0x310>)
 8012e6a:	6013      	str	r3, [r2, #0]

			//current audio point summation
			signal_summation += ((*(waves[note].start_ptr + new_idx)) * waves[note].current_volume) >> 16;
 8012e6c:	4944      	ldr	r1, [pc, #272]	; (8012f80 <synth_IfftMode+0x308>)
 8012e6e:	697a      	ldr	r2, [r7, #20]
 8012e70:	4613      	mov	r3, r2
 8012e72:	009b      	lsls	r3, r3, #2
 8012e74:	4413      	add	r3, r2
 8012e76:	009b      	lsls	r3, r3, #2
 8012e78:	440b      	add	r3, r1
 8012e7a:	681a      	ldr	r2, [r3, #0]
 8012e7c:	4b43      	ldr	r3, [pc, #268]	; (8012f8c <synth_IfftMode+0x314>)
 8012e7e:	881b      	ldrh	r3, [r3, #0]
 8012e80:	005b      	lsls	r3, r3, #1
 8012e82:	4413      	add	r3, r2
 8012e84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012e88:	4618      	mov	r0, r3
 8012e8a:	493d      	ldr	r1, [pc, #244]	; (8012f80 <synth_IfftMode+0x308>)
 8012e8c:	697a      	ldr	r2, [r7, #20]
 8012e8e:	4613      	mov	r3, r2
 8012e90:	009b      	lsls	r3, r3, #2
 8012e92:	4413      	add	r3, r2
 8012e94:	009b      	lsls	r3, r3, #2
 8012e96:	440b      	add	r3, r1
 8012e98:	330c      	adds	r3, #12
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	fb03 f300 	mul.w	r3, r3, r0
 8012ea0:	141a      	asrs	r2, r3, #16
 8012ea2:	4b3b      	ldr	r3, [pc, #236]	; (8012f90 <synth_IfftMode+0x318>)
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	4413      	add	r3, r2
 8012ea8:	4a39      	ldr	r2, [pc, #228]	; (8012f90 <synth_IfftMode+0x318>)
 8012eaa:	6013      	str	r3, [r2, #0]

			//read equivalent power of current pixel
			signal_power_summation += waves[note].current_volume;
 8012eac:	4934      	ldr	r1, [pc, #208]	; (8012f80 <synth_IfftMode+0x308>)
 8012eae:	697a      	ldr	r2, [r7, #20]
 8012eb0:	4613      	mov	r3, r2
 8012eb2:	009b      	lsls	r3, r3, #2
 8012eb4:	4413      	add	r3, r2
 8012eb6:	009b      	lsls	r3, r3, #2
 8012eb8:	440b      	add	r3, r1
 8012eba:	330c      	adds	r3, #12
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	461a      	mov	r2, r3
 8012ec0:	4b34      	ldr	r3, [pc, #208]	; (8012f94 <synth_IfftMode+0x31c>)
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	4413      	add	r3, r2
 8012ec6:	4a33      	ldr	r2, [pc, #204]	; (8012f94 <synth_IfftMode+0x31c>)
 8012ec8:	6013      	str	r3, [r2, #0]

			waves[note].current_idx = new_idx;
 8012eca:	4b30      	ldr	r3, [pc, #192]	; (8012f8c <synth_IfftMode+0x314>)
 8012ecc:	8818      	ldrh	r0, [r3, #0]
 8012ece:	492c      	ldr	r1, [pc, #176]	; (8012f80 <synth_IfftMode+0x308>)
 8012ed0:	697a      	ldr	r2, [r7, #20]
 8012ed2:	4613      	mov	r3, r2
 8012ed4:	009b      	lsls	r3, r3, #2
 8012ed6:	4413      	add	r3, r2
 8012ed8:	009b      	lsls	r3, r3, #2
 8012eda:	440b      	add	r3, r1
 8012edc:	3304      	adds	r3, #4
 8012ede:	4602      	mov	r2, r0
 8012ee0:	801a      	strh	r2, [r3, #0]
		for (int32_t note = NUMBER_OF_NOTES; --note >= 1;)
 8012ee2:	697b      	ldr	r3, [r7, #20]
 8012ee4:	3b01      	subs	r3, #1
 8012ee6:	617b      	str	r3, [r7, #20]
 8012ee8:	697b      	ldr	r3, [r7, #20]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	f73f aeda 	bgt.w	8012ca4 <synth_IfftMode+0x2c>
		}

		rfft = (signal_summation * ((double)max_volume) / (double)signal_power_summation);
 8012ef0:	4b27      	ldr	r3, [pc, #156]	; (8012f90 <synth_IfftMode+0x318>)
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	ee07 3a90 	vmov	s15, r3
 8012ef8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8012efc:	4b22      	ldr	r3, [pc, #136]	; (8012f88 <synth_IfftMode+0x310>)
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	ee07 3a90 	vmov	s15, r3
 8012f04:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012f08:	ee26 5b07 	vmul.f64	d5, d6, d7
 8012f0c:	4b21      	ldr	r3, [pc, #132]	; (8012f94 <synth_IfftMode+0x31c>)
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	ee07 3a90 	vmov	s15, r3
 8012f14:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8012f18:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8012f1c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8012f20:	ee17 3a90 	vmov	r3, s15
 8012f24:	b21a      	sxth	r2, r3
 8012f26:	4b1c      	ldr	r3, [pc, #112]	; (8012f98 <synth_IfftMode+0x320>)
 8012f28:	801a      	strh	r2, [r3, #0]

		audioData[write_data_nbr] = rfft;		//L
 8012f2a:	4b1c      	ldr	r3, [pc, #112]	; (8012f9c <synth_IfftMode+0x324>)
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	005b      	lsls	r3, r3, #1
 8012f30:	68ba      	ldr	r2, [r7, #8]
 8012f32:	4413      	add	r3, r2
 8012f34:	4a18      	ldr	r2, [pc, #96]	; (8012f98 <synth_IfftMode+0x320>)
 8012f36:	f9b2 2000 	ldrsh.w	r2, [r2]
 8012f3a:	801a      	strh	r2, [r3, #0]
		audioData[write_data_nbr + 1] = rfft;	//R
 8012f3c:	4b17      	ldr	r3, [pc, #92]	; (8012f9c <synth_IfftMode+0x324>)
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	3301      	adds	r3, #1
 8012f42:	005b      	lsls	r3, r3, #1
 8012f44:	68ba      	ldr	r2, [r7, #8]
 8012f46:	4413      	add	r3, r2
 8012f48:	4a13      	ldr	r2, [pc, #76]	; (8012f98 <synth_IfftMode+0x320>)
 8012f4a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8012f4e:	801a      	strh	r2, [r3, #0]
		write_data_nbr += 2;
 8012f50:	4b12      	ldr	r3, [pc, #72]	; (8012f9c <synth_IfftMode+0x324>)
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	3302      	adds	r3, #2
 8012f56:	4a11      	ldr	r2, [pc, #68]	; (8012f9c <synth_IfftMode+0x324>)
 8012f58:	6013      	str	r3, [r2, #0]
	while(write_data_nbr < NbrOfData)
 8012f5a:	4b10      	ldr	r3, [pc, #64]	; (8012f9c <synth_IfftMode+0x324>)
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	687a      	ldr	r2, [r7, #4]
 8012f60:	429a      	cmp	r2, r3
 8012f62:	f63f ae93 	bhi.w	8012c8c <synth_IfftMode+0x14>
	}

	synth_process_cnt += NbrOfData / 2;
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	085a      	lsrs	r2, r3, #1
 8012f6a:	4b0d      	ldr	r3, [pc, #52]	; (8012fa0 <synth_IfftMode+0x328>)
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	4413      	add	r3, r2
 8012f70:	4a0b      	ldr	r2, [pc, #44]	; (8012fa0 <synth_IfftMode+0x328>)
 8012f72:	6013      	str	r3, [r2, #0]
}
 8012f74:	bf00      	nop
 8012f76:	371c      	adds	r7, #28
 8012f78:	46bd      	mov	sp, r7
 8012f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f7e:	4770      	bx	lr
 8012f80:	24003664 	.word	0x24003664
 8012f84:	24004768 	.word	0x24004768
 8012f88:	24004760 	.word	0x24004760
 8012f8c:	24004764 	.word	0x24004764
 8012f90:	24004758 	.word	0x24004758
 8012f94:	2400475c 	.word	0x2400475c
 8012f98:	2400476c 	.word	0x2400476c
 8012f9c:	24004754 	.word	0x24004754
 8012fa0:	24004744 	.word	0x24004744

08012fa4 <synth_AudioProcess>:
 *                                                                                 ^
 *                                                                                FULL
 *                                                                              COMPLETE
 */
void synth_AudioProcess(synthModeTypeDef mode)
{
 8012fa4:	b580      	push	{r7, lr}
 8012fa6:	b08a      	sub	sp, #40	; 0x28
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	4603      	mov	r3, r0
 8012fac:	71fb      	strb	r3, [r7, #7]
	/* 1st half buffer played; so fill it and continue playing from bottom*/
	if(*pcm5102_GetBufferState() == AUDIO_BUFFER_OFFSET_HALF)
 8012fae:	f00c fb85 	bl	801f6bc <pcm5102_GetBufferState>
 8012fb2:	4603      	mov	r3, r0
 8012fb4:	781b      	ldrb	r3, [r3, #0]
 8012fb6:	2b01      	cmp	r3, #1
 8012fb8:	d136      	bne.n	8013028 <synth_AudioProcess+0x84>
	{
		pcm5102_ResetBufferState();
 8012fba:	f00c fb89 	bl	801f6d0 <pcm5102_ResetBufferState>
		cis_ImageProcessBW(imageData);
 8012fbe:	4b3b      	ldr	r3, [pc, #236]	; (80130ac <synth_AudioProcess+0x108>)
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	4618      	mov	r0, r3
 8012fc4:	f00b fa66 	bl	801e494 <cis_ImageProcessBW>
		synth_IfftMode(imageData, half_audio_ptr, AUDIO_BUFFER_SIZE / 2);
 8012fc8:	4b38      	ldr	r3, [pc, #224]	; (80130ac <synth_AudioProcess+0x108>)
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	4a38      	ldr	r2, [pc, #224]	; (80130b0 <synth_AudioProcess+0x10c>)
 8012fce:	6811      	ldr	r1, [r2, #0]
 8012fd0:	2280      	movs	r2, #128	; 0x80
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	f7ff fe50 	bl	8012c78 <synth_IfftMode>
		SCB_CleanDCache_by_Addr((uint32_t *)half_audio_ptr, AUDIO_BUFFER_SIZE);
 8012fd8:	4b35      	ldr	r3, [pc, #212]	; (80130b0 <synth_AudioProcess+0x10c>)
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8012fde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012fe2:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8012fe4:	6a3b      	ldr	r3, [r7, #32]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	dd1d      	ble.n	8013026 <synth_AudioProcess+0x82>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8012fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fec:	f003 021f 	and.w	r2, r3, #31
 8012ff0:	6a3b      	ldr	r3, [r7, #32]
 8012ff2:	4413      	add	r3, r2
 8012ff4:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8012ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ff8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8012ffa:	f3bf 8f4f 	dsb	sy
}
 8012ffe:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8013000:	4a2c      	ldr	r2, [pc, #176]	; (80130b4 <synth_AudioProcess+0x110>)
 8013002:	69bb      	ldr	r3, [r7, #24]
 8013004:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8013008:	69bb      	ldr	r3, [r7, #24]
 801300a:	3320      	adds	r3, #32
 801300c:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 801300e:	69fb      	ldr	r3, [r7, #28]
 8013010:	3b20      	subs	r3, #32
 8013012:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8013014:	69fb      	ldr	r3, [r7, #28]
 8013016:	2b00      	cmp	r3, #0
 8013018:	dcf2      	bgt.n	8013000 <synth_AudioProcess+0x5c>
  __ASM volatile ("dsb 0xF":::"memory");
 801301a:	f3bf 8f4f 	dsb	sy
}
 801301e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8013020:	f3bf 8f6f 	isb	sy
}
 8013024:	bf00      	nop
}
 8013026:	bf00      	nop
	}

	/* 2nd half buffer played; so fill it and continue playing from top */
	if(*pcm5102_GetBufferState() == AUDIO_BUFFER_OFFSET_FULL)
 8013028:	f00c fb48 	bl	801f6bc <pcm5102_GetBufferState>
 801302c:	4603      	mov	r3, r0
 801302e:	781b      	ldrb	r3, [r3, #0]
 8013030:	2b02      	cmp	r3, #2
 8013032:	d136      	bne.n	80130a2 <synth_AudioProcess+0xfe>
	{
		pcm5102_ResetBufferState();
 8013034:	f00c fb4c 	bl	801f6d0 <pcm5102_ResetBufferState>
		cis_ImageProcessBW(imageData);
 8013038:	4b1c      	ldr	r3, [pc, #112]	; (80130ac <synth_AudioProcess+0x108>)
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	4618      	mov	r0, r3
 801303e:	f00b fa29 	bl	801e494 <cis_ImageProcessBW>
		synth_IfftMode(imageData, full_audio_ptr, AUDIO_BUFFER_SIZE / 2);
 8013042:	4b1a      	ldr	r3, [pc, #104]	; (80130ac <synth_AudioProcess+0x108>)
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	4a1c      	ldr	r2, [pc, #112]	; (80130b8 <synth_AudioProcess+0x114>)
 8013048:	6811      	ldr	r1, [r2, #0]
 801304a:	2280      	movs	r2, #128	; 0x80
 801304c:	4618      	mov	r0, r3
 801304e:	f7ff fe13 	bl	8012c78 <synth_IfftMode>
		SCB_CleanDCache_by_Addr((uint32_t *)full_audio_ptr, AUDIO_BUFFER_SIZE);
 8013052:	4b19      	ldr	r3, [pc, #100]	; (80130b8 <synth_AudioProcess+0x114>)
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	617b      	str	r3, [r7, #20]
 8013058:	f44f 7380 	mov.w	r3, #256	; 0x100
 801305c:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 801305e:	693b      	ldr	r3, [r7, #16]
 8013060:	2b00      	cmp	r3, #0
 8013062:	dd1d      	ble.n	80130a0 <synth_AudioProcess+0xfc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8013064:	697b      	ldr	r3, [r7, #20]
 8013066:	f003 021f 	and.w	r2, r3, #31
 801306a:	693b      	ldr	r3, [r7, #16]
 801306c:	4413      	add	r3, r2
 801306e:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8013070:	697b      	ldr	r3, [r7, #20]
 8013072:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8013074:	f3bf 8f4f 	dsb	sy
}
 8013078:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 801307a:	4a0e      	ldr	r2, [pc, #56]	; (80130b4 <synth_AudioProcess+0x110>)
 801307c:	68bb      	ldr	r3, [r7, #8]
 801307e:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8013082:	68bb      	ldr	r3, [r7, #8]
 8013084:	3320      	adds	r3, #32
 8013086:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	3b20      	subs	r3, #32
 801308c:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	2b00      	cmp	r3, #0
 8013092:	dcf2      	bgt.n	801307a <synth_AudioProcess+0xd6>
  __ASM volatile ("dsb 0xF":::"memory");
 8013094:	f3bf 8f4f 	dsb	sy
}
 8013098:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801309a:	f3bf 8f6f 	isb	sy
}
 801309e:	bf00      	nop
}
 80130a0:	bf00      	nop
	}
}
 80130a2:	bf00      	nop
 80130a4:	3728      	adds	r7, #40	; 0x28
 80130a6:	46bd      	mov	sp, r7
 80130a8:	bd80      	pop	{r7, pc}
 80130aa:	bf00      	nop
 80130ac:	24004750 	.word	0x24004750
 80130b0:	24004748 	.word	0x24004748
 80130b4:	e000ed00 	.word	0xe000ed00
 80130b8:	2400474c 	.word	0x2400474c

080130bc <calculate_frequency>:
 * @brief  calculate frequency,
 * @param  comma cnt
 * @retval frequency
 */
static float calculate_frequency(uint32_t comma_cnt)
{
 80130bc:	b580      	push	{r7, lr}
 80130be:	b084      	sub	sp, #16
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	6078      	str	r0, [r7, #4]
	float frequency = 0.0;
 80130c4:	f04f 0300 	mov.w	r3, #0
 80130c8:	60fb      	str	r3, [r7, #12]
	frequency = START_FREQUENCY * pow(2, (comma_cnt / (12.0 * (COMMA_PER_OCTAVE / (12.0 / (log(2)) * log((START_FREQUENCY * 2.0) / START_FREQUENCY))))));
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	ee07 3a90 	vmov	s15, r3
 80130d0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80130d4:	eeb3 5b08 	vmov.f64	d5, #56	; 0x41c00000  24.0
 80130d8:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80130dc:	eeb0 1b46 	vmov.f64	d1, d6
 80130e0:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80130e4:	f011 fbfc 	bl	80248e0 <pow>
 80130e8:	eeb0 7b40 	vmov.f64	d7, d0
 80130ec:	eeb3 6b0e 	vmov.f64	d6, #62	; 0x41f00000  30.0
 80130f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80130f4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80130f8:	edc7 7a03 	vstr	s15, [r7, #12]

	return frequency;
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	ee07 3a90 	vmov	s15, r3
}
 8013102:	eeb0 0a67 	vmov.f32	s0, s15
 8013106:	3710      	adds	r7, #16
 8013108:	46bd      	mov	sp, r7
 801310a:	bd80      	pop	{r7, pc}
 801310c:	0000      	movs	r0, r0
	...

08013110 <init_waves>:
 * @param  unitary_waveform pointer,
 * @param  waves structure pointer,
 * @retval buffer length on success, negative value otherwise
 */
uint32_t init_waves(int16_t **unitary_waveform, struct wave *waves)
{
 8013110:	b580      	push	{r7, lr}
 8013112:	ed2d 8b02 	vpush	{d8}
 8013116:	b08c      	sub	sp, #48	; 0x30
 8013118:	af00      	add	r7, sp, #0
 801311a:	6078      	str	r0, [r7, #4]
 801311c:	6039      	str	r1, [r7, #0]
	uint32_t buffer_len = 0;
 801311e:	2300      	movs	r3, #0
 8013120:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t current_unitary_waveform_cell = 0;
 8013122:	2300      	movs	r3, #0
 8013124:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t note = 0;
 8013126:	2300      	movs	r3, #0
 8013128:	627b      	str	r3, [r7, #36]	; 0x24

	//compute cell number for storage all oscillators waveform
	for (uint32_t comma_cnt = 0; comma_cnt < COMMA_PER_OCTAVE; comma_cnt++)
 801312a:	2300      	movs	r3, #0
 801312c:	623b      	str	r3, [r7, #32]
 801312e:	e014      	b.n	801315a <init_waves+0x4a>
	{
		//store only first octave_coeff frequencies ---- logarithmic distribution
		float frequency = calculate_frequency(comma_cnt);
 8013130:	6a38      	ldr	r0, [r7, #32]
 8013132:	f7ff ffc3 	bl	80130bc <calculate_frequency>
 8013136:	ed87 0a02 	vstr	s0, [r7, #8]
		buffer_len += (uint32_t)(SAMPLING_FREQUENCY / frequency);
 801313a:	eddf 6a81 	vldr	s13, [pc, #516]	; 8013340 <init_waves+0x230>
 801313e:	ed97 7a02 	vldr	s14, [r7, #8]
 8013142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013146:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801314a:	ee17 2a90 	vmov	r2, s15
 801314e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013150:	4413      	add	r3, r2
 8013152:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (uint32_t comma_cnt = 0; comma_cnt < COMMA_PER_OCTAVE; comma_cnt++)
 8013154:	6a3b      	ldr	r3, [r7, #32]
 8013156:	3301      	adds	r3, #1
 8013158:	623b      	str	r3, [r7, #32]
 801315a:	6a3b      	ldr	r3, [r7, #32]
 801315c:	2b17      	cmp	r3, #23
 801315e:	d9e7      	bls.n	8013130 <init_waves+0x20>
	}

	//allocate the contiguous memory area for storage all waveforms for the first octave_coeff
	*unitary_waveform = malloc(buffer_len * sizeof(uint16_t*));
 8013160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013162:	009b      	lsls	r3, r3, #2
 8013164:	4618      	mov	r0, r3
 8013166:	f00c ff49 	bl	801fffc <malloc>
 801316a:	4603      	mov	r3, r0
 801316c:	461a      	mov	r2, r3
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	601a      	str	r2, [r3, #0]
	if (*unitary_waveform == NULL)
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	2b00      	cmp	r3, #0
 8013178:	d101      	bne.n	801317e <init_waves+0x6e>
	{
		Error_Handler();
 801317a:	f7ef fcdb 	bl	8002b34 <Error_Handler>
	}

	//compute and store the waveform into unitary_waveform only for the first octave_coeff
	for (uint32_t current_comma_first_octave = 0; current_comma_first_octave < COMMA_PER_OCTAVE; current_comma_first_octave++)
 801317e:	2300      	movs	r3, #0
 8013180:	61fb      	str	r3, [r7, #28]
 8013182:	e0be      	b.n	8013302 <init_waves+0x1f2>
	{
		//compute frequency for each comma into the first octave_coeff
		float frequency = calculate_frequency(current_comma_first_octave);
 8013184:	69f8      	ldr	r0, [r7, #28]
 8013186:	f7ff ff99 	bl	80130bc <calculate_frequency>
 801318a:	ed87 0a04 	vstr	s0, [r7, #16]

		//current aera size is the number of char cell for storage a waveform at the current frequency (one pixel per frequency oscillator)
		uint32_t current_aera_size = (uint32_t)(SAMPLING_FREQUENCY / frequency);
 801318e:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8013340 <init_waves+0x230>
 8013192:	ed97 7a04 	vldr	s14, [r7, #16]
 8013196:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801319a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801319e:	ee17 3a90 	vmov	r3, s15
 80131a2:	60fb      	str	r3, [r7, #12]

		//fill unitary_waveform buffer with sinusoidal waveform for each comma
		for (uint32_t x = 0; x < current_aera_size; x++)
 80131a4:	2300      	movs	r3, #0
 80131a6:	61bb      	str	r3, [r7, #24]
 80131a8:	e030      	b.n	801320c <init_waves+0xfc>
		{
			//sanity check
			if (current_unitary_waveform_cell < buffer_len)
 80131aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80131ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131ae:	429a      	cmp	r2, r3
 80131b0:	d229      	bcs.n	8013206 <init_waves+0xf6>
			{
				(*unitary_waveform)[current_unitary_waveform_cell] = ((sin((x * 2.00 * PI )/ (double)current_aera_size))) * (WAVE_AMP_RESOLUTION / 2.00);
 80131b2:	69bb      	ldr	r3, [r7, #24]
 80131b4:	ee07 3a90 	vmov	s15, r3
 80131b8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80131bc:	ee37 7b07 	vadd.f64	d7, d7, d7
 80131c0:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 8013330 <init_waves+0x220>
 80131c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	ee07 3a90 	vmov	s15, r3
 80131ce:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80131d2:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80131d6:	eeb0 0b45 	vmov.f64	d0, d5
 80131da:	f011 fe45 	bl	8024e68 <sin>
 80131de:	eeb0 7b40 	vmov.f64	d7, d0
 80131e2:	ed9f 6b55 	vldr	d6, [pc, #340]	; 8013338 <init_waves+0x228>
 80131e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	681a      	ldr	r2, [r3, #0]
 80131ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131f0:	005b      	lsls	r3, r3, #1
 80131f2:	4413      	add	r3, r2
 80131f4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80131f8:	ee17 2a90 	vmov	r2, s15
 80131fc:	b212      	sxth	r2, r2
 80131fe:	801a      	strh	r2, [r3, #0]
				current_unitary_waveform_cell++;
 8013200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013202:	3301      	adds	r3, #1
 8013204:	62bb      	str	r3, [r7, #40]	; 0x28
		for (uint32_t x = 0; x < current_aera_size; x++)
 8013206:	69bb      	ldr	r3, [r7, #24]
 8013208:	3301      	adds	r3, #1
 801320a:	61bb      	str	r3, [r7, #24]
 801320c:	69ba      	ldr	r2, [r7, #24]
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	429a      	cmp	r2, r3
 8013212:	d3ca      	bcc.n	80131aa <init_waves+0x9a>
			}
		}

		//for each octave (only the first octave_coeff stay in RAM, for multiple octave_coeff start_ptr stay on first octave waveform but current_ptr jump cell according to multiple frequencies)
		for (uint32_t octave = 0; octave <= MAX_OCTAVE_NUMBER; octave++)
 8013214:	2300      	movs	r3, #0
 8013216:	617b      	str	r3, [r7, #20]
 8013218:	e06d      	b.n	80132f6 <init_waves+0x1e6>
			// *** is current pix, --- octave separation
			// *---------*---------*---------*---------*---------*---------*---------*--------- for current comma at each octave
			// ---*---------*---------*---------*---------*---------*---------*---------*------ for the second comma...
			// ------*---------*---------*---------*---------*---------*---------*---------*---
			// ---------*---------*---------*---------*---------*---------*---------*---------*
			note = current_comma_first_octave + COMMA_PER_OCTAVE * octave;
 801321a:	697a      	ldr	r2, [r7, #20]
 801321c:	4613      	mov	r3, r2
 801321e:	005b      	lsls	r3, r3, #1
 8013220:	4413      	add	r3, r2
 8013222:	00db      	lsls	r3, r3, #3
 8013224:	461a      	mov	r2, r3
 8013226:	69fb      	ldr	r3, [r7, #28]
 8013228:	4413      	add	r3, r2
 801322a:	627b      	str	r3, [r7, #36]	; 0x24
			//sanity check, if user demand is't possible
			if (note < NUMBER_OF_NOTES)
 801322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801322e:	2bd7      	cmp	r3, #215	; 0xd7
 8013230:	d85e      	bhi.n	80132f0 <init_waves+0x1e0>
			{
#ifdef PRINT_FREQUENCY
				//store frequencies
				waves[note].frequency = frequency * pow(2, octave);
 8013232:	edd7 7a04 	vldr	s15, [r7, #16]
 8013236:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 801323a:	697b      	ldr	r3, [r7, #20]
 801323c:	ee07 3a90 	vmov	s15, r3
 8013240:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8013244:	eeb0 1b47 	vmov.f64	d1, d7
 8013248:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 801324c:	f011 fb48 	bl	80248e0 <pow>
 8013250:	eeb0 7b40 	vmov.f64	d7, d0
 8013254:	ee28 7b07 	vmul.f64	d7, d8, d7
 8013258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801325a:	4613      	mov	r3, r2
 801325c:	009b      	lsls	r3, r3, #2
 801325e:	4413      	add	r3, r2
 8013260:	009b      	lsls	r3, r3, #2
 8013262:	461a      	mov	r2, r3
 8013264:	683b      	ldr	r3, [r7, #0]
 8013266:	4413      	add	r3, r2
 8013268:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801326c:	edc3 7a04 	vstr	s15, [r3, #16]
#endif
				//store octave number
				waves[note].octave_coeff = pow(2, octave);
 8013270:	697b      	ldr	r3, [r7, #20]
 8013272:	ee07 3a90 	vmov	s15, r3
 8013276:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801327a:	eeb0 1b47 	vmov.f64	d1, d7
 801327e:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8013282:	f011 fb2d 	bl	80248e0 <pow>
 8013286:	eeb0 7b40 	vmov.f64	d7, d0
 801328a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801328c:	4613      	mov	r3, r2
 801328e:	009b      	lsls	r3, r3, #2
 8013290:	4413      	add	r3, r2
 8013292:	009b      	lsls	r3, r3, #2
 8013294:	461a      	mov	r2, r3
 8013296:	683b      	ldr	r3, [r7, #0]
 8013298:	4413      	add	r3, r2
 801329a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 801329e:	ee17 2a90 	vmov	r2, s15
 80132a2:	b292      	uxth	r2, r2
 80132a4:	811a      	strh	r2, [r3, #8]
				//store aera size
				waves[note].aera_size = current_aera_size;
 80132a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80132a8:	4613      	mov	r3, r2
 80132aa:	009b      	lsls	r3, r3, #2
 80132ac:	4413      	add	r3, r2
 80132ae:	009b      	lsls	r3, r3, #2
 80132b0:	461a      	mov	r2, r3
 80132b2:	683b      	ldr	r3, [r7, #0]
 80132b4:	4413      	add	r3, r2
 80132b6:	68fa      	ldr	r2, [r7, #12]
 80132b8:	b292      	uxth	r2, r2
 80132ba:	80da      	strh	r2, [r3, #6]
				//store pointer address
				waves[note].start_ptr = &(*unitary_waveform)[current_unitary_waveform_cell - current_aera_size];
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	6818      	ldr	r0, [r3, #0]
 80132c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	1ad3      	subs	r3, r2, r3
 80132c6:	0059      	lsls	r1, r3, #1
 80132c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80132ca:	4613      	mov	r3, r2
 80132cc:	009b      	lsls	r3, r3, #2
 80132ce:	4413      	add	r3, r2
 80132d0:	009b      	lsls	r3, r3, #2
 80132d2:	461a      	mov	r2, r3
 80132d4:	683b      	ldr	r3, [r7, #0]
 80132d6:	4413      	add	r3, r2
 80132d8:	1842      	adds	r2, r0, r1
 80132da:	601a      	str	r2, [r3, #0]
				//set current pointer at the same address
				waves[note].current_idx = 0;
 80132dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80132de:	4613      	mov	r3, r2
 80132e0:	009b      	lsls	r3, r3, #2
 80132e2:	4413      	add	r3, r2
 80132e4:	009b      	lsls	r3, r3, #2
 80132e6:	461a      	mov	r2, r3
 80132e8:	683b      	ldr	r3, [r7, #0]
 80132ea:	4413      	add	r3, r2
 80132ec:	2200      	movs	r2, #0
 80132ee:	809a      	strh	r2, [r3, #4]
		for (uint32_t octave = 0; octave <= MAX_OCTAVE_NUMBER; octave++)
 80132f0:	697b      	ldr	r3, [r7, #20]
 80132f2:	3301      	adds	r3, #1
 80132f4:	617b      	str	r3, [r7, #20]
 80132f6:	697b      	ldr	r3, [r7, #20]
 80132f8:	2b0a      	cmp	r3, #10
 80132fa:	d98e      	bls.n	801321a <init_waves+0x10a>
	for (uint32_t current_comma_first_octave = 0; current_comma_first_octave < COMMA_PER_OCTAVE; current_comma_first_octave++)
 80132fc:	69fb      	ldr	r3, [r7, #28]
 80132fe:	3301      	adds	r3, #1
 8013300:	61fb      	str	r3, [r7, #28]
 8013302:	69fb      	ldr	r3, [r7, #28]
 8013304:	2b17      	cmp	r3, #23
 8013306:	f67f af3d 	bls.w	8013184 <init_waves+0x74>
			}
		}
	}

	if (note < NUMBER_OF_NOTES)
 801330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801330c:	2bd7      	cmp	r3, #215	; 0xd7
 801330e:	d806      	bhi.n	801331e <init_waves+0x20e>
	{
		printf("Configuration fail, current pix : %d\n", (int)note);
 8013310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013312:	4619      	mov	r1, r3
 8013314:	480b      	ldr	r0, [pc, #44]	; (8013344 <init_waves+0x234>)
 8013316:	f00d fda9 	bl	8020e6c <iprintf>
		Error_Handler();
 801331a:	f7ef fc0b 	bl	8002b34 <Error_Handler>
	}

	return buffer_len;
 801331e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8013320:	4618      	mov	r0, r3
 8013322:	3730      	adds	r7, #48	; 0x30
 8013324:	46bd      	mov	sp, r7
 8013326:	ecbd 8b02 	vpop	{d8}
 801332a:	bd80      	pop	{r7, pc}
 801332c:	f3af 8000 	nop.w
 8013330:	54442eea 	.word	0x54442eea
 8013334:	400921fb 	.word	0x400921fb
 8013338:	00000000 	.word	0x00000000
 801333c:	40dfffe0 	.word	0x40dfffe0
 8013340:	473b8000 	.word	0x473b8000
 8013344:	08025e74 	.word	0x08025e74

08013348 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8013348:	b480      	push	{r7}
 801334a:	b083      	sub	sp, #12
 801334c:	af00      	add	r7, sp, #0
 801334e:	4603      	mov	r3, r0
 8013350:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8013352:	88fb      	ldrh	r3, [r7, #6]
 8013354:	021b      	lsls	r3, r3, #8
 8013356:	b21a      	sxth	r2, r3
 8013358:	88fb      	ldrh	r3, [r7, #6]
 801335a:	0a1b      	lsrs	r3, r3, #8
 801335c:	b29b      	uxth	r3, r3
 801335e:	b21b      	sxth	r3, r3
 8013360:	4313      	orrs	r3, r2
 8013362:	b21b      	sxth	r3, r3
 8013364:	b29b      	uxth	r3, r3
}
 8013366:	4618      	mov	r0, r3
 8013368:	370c      	adds	r7, #12
 801336a:	46bd      	mov	sp, r7
 801336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013370:	4770      	bx	lr

08013372 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8013372:	b480      	push	{r7}
 8013374:	b083      	sub	sp, #12
 8013376:	af00      	add	r7, sp, #0
 8013378:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	061a      	lsls	r2, r3, #24
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	021b      	lsls	r3, r3, #8
 8013382:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013386:	431a      	orrs	r2, r3
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	0a1b      	lsrs	r3, r3, #8
 801338c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013390:	431a      	orrs	r2, r3
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	0e1b      	lsrs	r3, r3, #24
 8013396:	4313      	orrs	r3, r2
}
 8013398:	4618      	mov	r0, r3
 801339a:	370c      	adds	r7, #12
 801339c:	46bd      	mov	sp, r7
 801339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a2:	4770      	bx	lr

080133a4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80133a4:	b580      	push	{r7, lr}
 80133a6:	b082      	sub	sp, #8
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80133ac:	4915      	ldr	r1, [pc, #84]	; (8013404 <etharp_free_entry+0x60>)
 80133ae:	687a      	ldr	r2, [r7, #4]
 80133b0:	4613      	mov	r3, r2
 80133b2:	005b      	lsls	r3, r3, #1
 80133b4:	4413      	add	r3, r2
 80133b6:	00db      	lsls	r3, r3, #3
 80133b8:	440b      	add	r3, r1
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d013      	beq.n	80133e8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80133c0:	4910      	ldr	r1, [pc, #64]	; (8013404 <etharp_free_entry+0x60>)
 80133c2:	687a      	ldr	r2, [r7, #4]
 80133c4:	4613      	mov	r3, r2
 80133c6:	005b      	lsls	r3, r3, #1
 80133c8:	4413      	add	r3, r2
 80133ca:	00db      	lsls	r3, r3, #3
 80133cc:	440b      	add	r3, r1
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	4618      	mov	r0, r3
 80133d2:	f003 feb5 	bl	8017140 <pbuf_free>
    arp_table[i].q = NULL;
 80133d6:	490b      	ldr	r1, [pc, #44]	; (8013404 <etharp_free_entry+0x60>)
 80133d8:	687a      	ldr	r2, [r7, #4]
 80133da:	4613      	mov	r3, r2
 80133dc:	005b      	lsls	r3, r3, #1
 80133de:	4413      	add	r3, r2
 80133e0:	00db      	lsls	r3, r3, #3
 80133e2:	440b      	add	r3, r1
 80133e4:	2200      	movs	r2, #0
 80133e6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80133e8:	4906      	ldr	r1, [pc, #24]	; (8013404 <etharp_free_entry+0x60>)
 80133ea:	687a      	ldr	r2, [r7, #4]
 80133ec:	4613      	mov	r3, r2
 80133ee:	005b      	lsls	r3, r3, #1
 80133f0:	4413      	add	r3, r2
 80133f2:	00db      	lsls	r3, r3, #3
 80133f4:	440b      	add	r3, r1
 80133f6:	3314      	adds	r3, #20
 80133f8:	2200      	movs	r2, #0
 80133fa:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80133fc:	bf00      	nop
 80133fe:	3708      	adds	r7, #8
 8013400:	46bd      	mov	sp, r7
 8013402:	bd80      	pop	{r7, pc}
 8013404:	24004770 	.word	0x24004770

08013408 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013408:	b580      	push	{r7, lr}
 801340a:	b082      	sub	sp, #8
 801340c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801340e:	2300      	movs	r3, #0
 8013410:	607b      	str	r3, [r7, #4]
 8013412:	e096      	b.n	8013542 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013414:	494f      	ldr	r1, [pc, #316]	; (8013554 <etharp_tmr+0x14c>)
 8013416:	687a      	ldr	r2, [r7, #4]
 8013418:	4613      	mov	r3, r2
 801341a:	005b      	lsls	r3, r3, #1
 801341c:	4413      	add	r3, r2
 801341e:	00db      	lsls	r3, r3, #3
 8013420:	440b      	add	r3, r1
 8013422:	3314      	adds	r3, #20
 8013424:	781b      	ldrb	r3, [r3, #0]
 8013426:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013428:	78fb      	ldrb	r3, [r7, #3]
 801342a:	2b00      	cmp	r3, #0
 801342c:	f000 8086 	beq.w	801353c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013430:	4948      	ldr	r1, [pc, #288]	; (8013554 <etharp_tmr+0x14c>)
 8013432:	687a      	ldr	r2, [r7, #4]
 8013434:	4613      	mov	r3, r2
 8013436:	005b      	lsls	r3, r3, #1
 8013438:	4413      	add	r3, r2
 801343a:	00db      	lsls	r3, r3, #3
 801343c:	440b      	add	r3, r1
 801343e:	3312      	adds	r3, #18
 8013440:	881b      	ldrh	r3, [r3, #0]
 8013442:	3301      	adds	r3, #1
 8013444:	b298      	uxth	r0, r3
 8013446:	4943      	ldr	r1, [pc, #268]	; (8013554 <etharp_tmr+0x14c>)
 8013448:	687a      	ldr	r2, [r7, #4]
 801344a:	4613      	mov	r3, r2
 801344c:	005b      	lsls	r3, r3, #1
 801344e:	4413      	add	r3, r2
 8013450:	00db      	lsls	r3, r3, #3
 8013452:	440b      	add	r3, r1
 8013454:	3312      	adds	r3, #18
 8013456:	4602      	mov	r2, r0
 8013458:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801345a:	493e      	ldr	r1, [pc, #248]	; (8013554 <etharp_tmr+0x14c>)
 801345c:	687a      	ldr	r2, [r7, #4]
 801345e:	4613      	mov	r3, r2
 8013460:	005b      	lsls	r3, r3, #1
 8013462:	4413      	add	r3, r2
 8013464:	00db      	lsls	r3, r3, #3
 8013466:	440b      	add	r3, r1
 8013468:	3312      	adds	r3, #18
 801346a:	881b      	ldrh	r3, [r3, #0]
 801346c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013470:	d215      	bcs.n	801349e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013472:	4938      	ldr	r1, [pc, #224]	; (8013554 <etharp_tmr+0x14c>)
 8013474:	687a      	ldr	r2, [r7, #4]
 8013476:	4613      	mov	r3, r2
 8013478:	005b      	lsls	r3, r3, #1
 801347a:	4413      	add	r3, r2
 801347c:	00db      	lsls	r3, r3, #3
 801347e:	440b      	add	r3, r1
 8013480:	3314      	adds	r3, #20
 8013482:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013484:	2b01      	cmp	r3, #1
 8013486:	d10e      	bne.n	80134a6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013488:	4932      	ldr	r1, [pc, #200]	; (8013554 <etharp_tmr+0x14c>)
 801348a:	687a      	ldr	r2, [r7, #4]
 801348c:	4613      	mov	r3, r2
 801348e:	005b      	lsls	r3, r3, #1
 8013490:	4413      	add	r3, r2
 8013492:	00db      	lsls	r3, r3, #3
 8013494:	440b      	add	r3, r1
 8013496:	3312      	adds	r3, #18
 8013498:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801349a:	2b04      	cmp	r3, #4
 801349c:	d903      	bls.n	80134a6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801349e:	6878      	ldr	r0, [r7, #4]
 80134a0:	f7ff ff80 	bl	80133a4 <etharp_free_entry>
 80134a4:	e04a      	b.n	801353c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80134a6:	492b      	ldr	r1, [pc, #172]	; (8013554 <etharp_tmr+0x14c>)
 80134a8:	687a      	ldr	r2, [r7, #4]
 80134aa:	4613      	mov	r3, r2
 80134ac:	005b      	lsls	r3, r3, #1
 80134ae:	4413      	add	r3, r2
 80134b0:	00db      	lsls	r3, r3, #3
 80134b2:	440b      	add	r3, r1
 80134b4:	3314      	adds	r3, #20
 80134b6:	781b      	ldrb	r3, [r3, #0]
 80134b8:	2b03      	cmp	r3, #3
 80134ba:	d10a      	bne.n	80134d2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80134bc:	4925      	ldr	r1, [pc, #148]	; (8013554 <etharp_tmr+0x14c>)
 80134be:	687a      	ldr	r2, [r7, #4]
 80134c0:	4613      	mov	r3, r2
 80134c2:	005b      	lsls	r3, r3, #1
 80134c4:	4413      	add	r3, r2
 80134c6:	00db      	lsls	r3, r3, #3
 80134c8:	440b      	add	r3, r1
 80134ca:	3314      	adds	r3, #20
 80134cc:	2204      	movs	r2, #4
 80134ce:	701a      	strb	r2, [r3, #0]
 80134d0:	e034      	b.n	801353c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80134d2:	4920      	ldr	r1, [pc, #128]	; (8013554 <etharp_tmr+0x14c>)
 80134d4:	687a      	ldr	r2, [r7, #4]
 80134d6:	4613      	mov	r3, r2
 80134d8:	005b      	lsls	r3, r3, #1
 80134da:	4413      	add	r3, r2
 80134dc:	00db      	lsls	r3, r3, #3
 80134de:	440b      	add	r3, r1
 80134e0:	3314      	adds	r3, #20
 80134e2:	781b      	ldrb	r3, [r3, #0]
 80134e4:	2b04      	cmp	r3, #4
 80134e6:	d10a      	bne.n	80134fe <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80134e8:	491a      	ldr	r1, [pc, #104]	; (8013554 <etharp_tmr+0x14c>)
 80134ea:	687a      	ldr	r2, [r7, #4]
 80134ec:	4613      	mov	r3, r2
 80134ee:	005b      	lsls	r3, r3, #1
 80134f0:	4413      	add	r3, r2
 80134f2:	00db      	lsls	r3, r3, #3
 80134f4:	440b      	add	r3, r1
 80134f6:	3314      	adds	r3, #20
 80134f8:	2202      	movs	r2, #2
 80134fa:	701a      	strb	r2, [r3, #0]
 80134fc:	e01e      	b.n	801353c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80134fe:	4915      	ldr	r1, [pc, #84]	; (8013554 <etharp_tmr+0x14c>)
 8013500:	687a      	ldr	r2, [r7, #4]
 8013502:	4613      	mov	r3, r2
 8013504:	005b      	lsls	r3, r3, #1
 8013506:	4413      	add	r3, r2
 8013508:	00db      	lsls	r3, r3, #3
 801350a:	440b      	add	r3, r1
 801350c:	3314      	adds	r3, #20
 801350e:	781b      	ldrb	r3, [r3, #0]
 8013510:	2b01      	cmp	r3, #1
 8013512:	d113      	bne.n	801353c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013514:	490f      	ldr	r1, [pc, #60]	; (8013554 <etharp_tmr+0x14c>)
 8013516:	687a      	ldr	r2, [r7, #4]
 8013518:	4613      	mov	r3, r2
 801351a:	005b      	lsls	r3, r3, #1
 801351c:	4413      	add	r3, r2
 801351e:	00db      	lsls	r3, r3, #3
 8013520:	440b      	add	r3, r1
 8013522:	3308      	adds	r3, #8
 8013524:	6818      	ldr	r0, [r3, #0]
 8013526:	687a      	ldr	r2, [r7, #4]
 8013528:	4613      	mov	r3, r2
 801352a:	005b      	lsls	r3, r3, #1
 801352c:	4413      	add	r3, r2
 801352e:	00db      	lsls	r3, r3, #3
 8013530:	4a08      	ldr	r2, [pc, #32]	; (8013554 <etharp_tmr+0x14c>)
 8013532:	4413      	add	r3, r2
 8013534:	3304      	adds	r3, #4
 8013536:	4619      	mov	r1, r3
 8013538:	f000 fe6e 	bl	8014218 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	3301      	adds	r3, #1
 8013540:	607b      	str	r3, [r7, #4]
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	2b09      	cmp	r3, #9
 8013546:	f77f af65 	ble.w	8013414 <etharp_tmr+0xc>
      }
    }
  }
}
 801354a:	bf00      	nop
 801354c:	bf00      	nop
 801354e:	3708      	adds	r7, #8
 8013550:	46bd      	mov	sp, r7
 8013552:	bd80      	pop	{r7, pc}
 8013554:	24004770 	.word	0x24004770

08013558 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8013558:	b580      	push	{r7, lr}
 801355a:	b08a      	sub	sp, #40	; 0x28
 801355c:	af00      	add	r7, sp, #0
 801355e:	60f8      	str	r0, [r7, #12]
 8013560:	460b      	mov	r3, r1
 8013562:	607a      	str	r2, [r7, #4]
 8013564:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8013566:	230a      	movs	r3, #10
 8013568:	84fb      	strh	r3, [r7, #38]	; 0x26
 801356a:	230a      	movs	r3, #10
 801356c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801356e:	230a      	movs	r3, #10
 8013570:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8013572:	2300      	movs	r3, #0
 8013574:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8013576:	230a      	movs	r3, #10
 8013578:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801357a:	2300      	movs	r3, #0
 801357c:	83bb      	strh	r3, [r7, #28]
 801357e:	2300      	movs	r3, #0
 8013580:	837b      	strh	r3, [r7, #26]
 8013582:	2300      	movs	r3, #0
 8013584:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013586:	2300      	movs	r3, #0
 8013588:	843b      	strh	r3, [r7, #32]
 801358a:	e0ae      	b.n	80136ea <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801358c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013590:	49a6      	ldr	r1, [pc, #664]	; (801382c <etharp_find_entry+0x2d4>)
 8013592:	4613      	mov	r3, r2
 8013594:	005b      	lsls	r3, r3, #1
 8013596:	4413      	add	r3, r2
 8013598:	00db      	lsls	r3, r3, #3
 801359a:	440b      	add	r3, r1
 801359c:	3314      	adds	r3, #20
 801359e:	781b      	ldrb	r3, [r3, #0]
 80135a0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80135a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80135a6:	2b0a      	cmp	r3, #10
 80135a8:	d105      	bne.n	80135b6 <etharp_find_entry+0x5e>
 80135aa:	7dfb      	ldrb	r3, [r7, #23]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d102      	bne.n	80135b6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80135b0:	8c3b      	ldrh	r3, [r7, #32]
 80135b2:	847b      	strh	r3, [r7, #34]	; 0x22
 80135b4:	e095      	b.n	80136e2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80135b6:	7dfb      	ldrb	r3, [r7, #23]
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	f000 8092 	beq.w	80136e2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80135be:	7dfb      	ldrb	r3, [r7, #23]
 80135c0:	2b01      	cmp	r3, #1
 80135c2:	d009      	beq.n	80135d8 <etharp_find_entry+0x80>
 80135c4:	7dfb      	ldrb	r3, [r7, #23]
 80135c6:	2b01      	cmp	r3, #1
 80135c8:	d806      	bhi.n	80135d8 <etharp_find_entry+0x80>
 80135ca:	4b99      	ldr	r3, [pc, #612]	; (8013830 <etharp_find_entry+0x2d8>)
 80135cc:	f240 1223 	movw	r2, #291	; 0x123
 80135d0:	4998      	ldr	r1, [pc, #608]	; (8013834 <etharp_find_entry+0x2dc>)
 80135d2:	4899      	ldr	r0, [pc, #612]	; (8013838 <etharp_find_entry+0x2e0>)
 80135d4:	f00d fc4a 	bl	8020e6c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d020      	beq.n	8013620 <etharp_find_entry+0xc8>
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	6819      	ldr	r1, [r3, #0]
 80135e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80135e6:	4891      	ldr	r0, [pc, #580]	; (801382c <etharp_find_entry+0x2d4>)
 80135e8:	4613      	mov	r3, r2
 80135ea:	005b      	lsls	r3, r3, #1
 80135ec:	4413      	add	r3, r2
 80135ee:	00db      	lsls	r3, r3, #3
 80135f0:	4403      	add	r3, r0
 80135f2:	3304      	adds	r3, #4
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	4299      	cmp	r1, r3
 80135f8:	d112      	bne.n	8013620 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d00c      	beq.n	801361a <etharp_find_entry+0xc2>
 8013600:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013604:	4989      	ldr	r1, [pc, #548]	; (801382c <etharp_find_entry+0x2d4>)
 8013606:	4613      	mov	r3, r2
 8013608:	005b      	lsls	r3, r3, #1
 801360a:	4413      	add	r3, r2
 801360c:	00db      	lsls	r3, r3, #3
 801360e:	440b      	add	r3, r1
 8013610:	3308      	adds	r3, #8
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	687a      	ldr	r2, [r7, #4]
 8013616:	429a      	cmp	r2, r3
 8013618:	d102      	bne.n	8013620 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801361a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801361e:	e100      	b.n	8013822 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8013620:	7dfb      	ldrb	r3, [r7, #23]
 8013622:	2b01      	cmp	r3, #1
 8013624:	d140      	bne.n	80136a8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8013626:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801362a:	4980      	ldr	r1, [pc, #512]	; (801382c <etharp_find_entry+0x2d4>)
 801362c:	4613      	mov	r3, r2
 801362e:	005b      	lsls	r3, r3, #1
 8013630:	4413      	add	r3, r2
 8013632:	00db      	lsls	r3, r3, #3
 8013634:	440b      	add	r3, r1
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	2b00      	cmp	r3, #0
 801363a:	d01a      	beq.n	8013672 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801363c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013640:	497a      	ldr	r1, [pc, #488]	; (801382c <etharp_find_entry+0x2d4>)
 8013642:	4613      	mov	r3, r2
 8013644:	005b      	lsls	r3, r3, #1
 8013646:	4413      	add	r3, r2
 8013648:	00db      	lsls	r3, r3, #3
 801364a:	440b      	add	r3, r1
 801364c:	3312      	adds	r3, #18
 801364e:	881b      	ldrh	r3, [r3, #0]
 8013650:	8bba      	ldrh	r2, [r7, #28]
 8013652:	429a      	cmp	r2, r3
 8013654:	d845      	bhi.n	80136e2 <etharp_find_entry+0x18a>
            old_queue = i;
 8013656:	8c3b      	ldrh	r3, [r7, #32]
 8013658:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801365a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801365e:	4973      	ldr	r1, [pc, #460]	; (801382c <etharp_find_entry+0x2d4>)
 8013660:	4613      	mov	r3, r2
 8013662:	005b      	lsls	r3, r3, #1
 8013664:	4413      	add	r3, r2
 8013666:	00db      	lsls	r3, r3, #3
 8013668:	440b      	add	r3, r1
 801366a:	3312      	adds	r3, #18
 801366c:	881b      	ldrh	r3, [r3, #0]
 801366e:	83bb      	strh	r3, [r7, #28]
 8013670:	e037      	b.n	80136e2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8013672:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013676:	496d      	ldr	r1, [pc, #436]	; (801382c <etharp_find_entry+0x2d4>)
 8013678:	4613      	mov	r3, r2
 801367a:	005b      	lsls	r3, r3, #1
 801367c:	4413      	add	r3, r2
 801367e:	00db      	lsls	r3, r3, #3
 8013680:	440b      	add	r3, r1
 8013682:	3312      	adds	r3, #18
 8013684:	881b      	ldrh	r3, [r3, #0]
 8013686:	8b7a      	ldrh	r2, [r7, #26]
 8013688:	429a      	cmp	r2, r3
 801368a:	d82a      	bhi.n	80136e2 <etharp_find_entry+0x18a>
            old_pending = i;
 801368c:	8c3b      	ldrh	r3, [r7, #32]
 801368e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8013690:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013694:	4965      	ldr	r1, [pc, #404]	; (801382c <etharp_find_entry+0x2d4>)
 8013696:	4613      	mov	r3, r2
 8013698:	005b      	lsls	r3, r3, #1
 801369a:	4413      	add	r3, r2
 801369c:	00db      	lsls	r3, r3, #3
 801369e:	440b      	add	r3, r1
 80136a0:	3312      	adds	r3, #18
 80136a2:	881b      	ldrh	r3, [r3, #0]
 80136a4:	837b      	strh	r3, [r7, #26]
 80136a6:	e01c      	b.n	80136e2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80136a8:	7dfb      	ldrb	r3, [r7, #23]
 80136aa:	2b01      	cmp	r3, #1
 80136ac:	d919      	bls.n	80136e2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80136ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80136b2:	495e      	ldr	r1, [pc, #376]	; (801382c <etharp_find_entry+0x2d4>)
 80136b4:	4613      	mov	r3, r2
 80136b6:	005b      	lsls	r3, r3, #1
 80136b8:	4413      	add	r3, r2
 80136ba:	00db      	lsls	r3, r3, #3
 80136bc:	440b      	add	r3, r1
 80136be:	3312      	adds	r3, #18
 80136c0:	881b      	ldrh	r3, [r3, #0]
 80136c2:	8b3a      	ldrh	r2, [r7, #24]
 80136c4:	429a      	cmp	r2, r3
 80136c6:	d80c      	bhi.n	80136e2 <etharp_find_entry+0x18a>
            old_stable = i;
 80136c8:	8c3b      	ldrh	r3, [r7, #32]
 80136ca:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80136cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80136d0:	4956      	ldr	r1, [pc, #344]	; (801382c <etharp_find_entry+0x2d4>)
 80136d2:	4613      	mov	r3, r2
 80136d4:	005b      	lsls	r3, r3, #1
 80136d6:	4413      	add	r3, r2
 80136d8:	00db      	lsls	r3, r3, #3
 80136da:	440b      	add	r3, r1
 80136dc:	3312      	adds	r3, #18
 80136de:	881b      	ldrh	r3, [r3, #0]
 80136e0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80136e2:	8c3b      	ldrh	r3, [r7, #32]
 80136e4:	3301      	adds	r3, #1
 80136e6:	b29b      	uxth	r3, r3
 80136e8:	843b      	strh	r3, [r7, #32]
 80136ea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80136ee:	2b09      	cmp	r3, #9
 80136f0:	f77f af4c 	ble.w	801358c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80136f4:	7afb      	ldrb	r3, [r7, #11]
 80136f6:	f003 0302 	and.w	r3, r3, #2
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d108      	bne.n	8013710 <etharp_find_entry+0x1b8>
 80136fe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013702:	2b0a      	cmp	r3, #10
 8013704:	d107      	bne.n	8013716 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8013706:	7afb      	ldrb	r3, [r7, #11]
 8013708:	f003 0301 	and.w	r3, r3, #1
 801370c:	2b00      	cmp	r3, #0
 801370e:	d102      	bne.n	8013716 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8013710:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013714:	e085      	b.n	8013822 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8013716:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801371a:	2b09      	cmp	r3, #9
 801371c:	dc02      	bgt.n	8013724 <etharp_find_entry+0x1cc>
    i = empty;
 801371e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013720:	843b      	strh	r3, [r7, #32]
 8013722:	e039      	b.n	8013798 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8013724:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8013728:	2b09      	cmp	r3, #9
 801372a:	dc14      	bgt.n	8013756 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801372c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801372e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8013730:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013734:	493d      	ldr	r1, [pc, #244]	; (801382c <etharp_find_entry+0x2d4>)
 8013736:	4613      	mov	r3, r2
 8013738:	005b      	lsls	r3, r3, #1
 801373a:	4413      	add	r3, r2
 801373c:	00db      	lsls	r3, r3, #3
 801373e:	440b      	add	r3, r1
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	2b00      	cmp	r3, #0
 8013744:	d018      	beq.n	8013778 <etharp_find_entry+0x220>
 8013746:	4b3a      	ldr	r3, [pc, #232]	; (8013830 <etharp_find_entry+0x2d8>)
 8013748:	f240 126d 	movw	r2, #365	; 0x16d
 801374c:	493b      	ldr	r1, [pc, #236]	; (801383c <etharp_find_entry+0x2e4>)
 801374e:	483a      	ldr	r0, [pc, #232]	; (8013838 <etharp_find_entry+0x2e0>)
 8013750:	f00d fb8c 	bl	8020e6c <iprintf>
 8013754:	e010      	b.n	8013778 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8013756:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801375a:	2b09      	cmp	r3, #9
 801375c:	dc02      	bgt.n	8013764 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801375e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013760:	843b      	strh	r3, [r7, #32]
 8013762:	e009      	b.n	8013778 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8013764:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013768:	2b09      	cmp	r3, #9
 801376a:	dc02      	bgt.n	8013772 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801376c:	8bfb      	ldrh	r3, [r7, #30]
 801376e:	843b      	strh	r3, [r7, #32]
 8013770:	e002      	b.n	8013778 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8013772:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013776:	e054      	b.n	8013822 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013778:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801377c:	2b09      	cmp	r3, #9
 801377e:	dd06      	ble.n	801378e <etharp_find_entry+0x236>
 8013780:	4b2b      	ldr	r3, [pc, #172]	; (8013830 <etharp_find_entry+0x2d8>)
 8013782:	f240 127f 	movw	r2, #383	; 0x17f
 8013786:	492e      	ldr	r1, [pc, #184]	; (8013840 <etharp_find_entry+0x2e8>)
 8013788:	482b      	ldr	r0, [pc, #172]	; (8013838 <etharp_find_entry+0x2e0>)
 801378a:	f00d fb6f 	bl	8020e6c <iprintf>
    etharp_free_entry(i);
 801378e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013792:	4618      	mov	r0, r3
 8013794:	f7ff fe06 	bl	80133a4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013798:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801379c:	2b09      	cmp	r3, #9
 801379e:	dd06      	ble.n	80137ae <etharp_find_entry+0x256>
 80137a0:	4b23      	ldr	r3, [pc, #140]	; (8013830 <etharp_find_entry+0x2d8>)
 80137a2:	f240 1283 	movw	r2, #387	; 0x183
 80137a6:	4926      	ldr	r1, [pc, #152]	; (8013840 <etharp_find_entry+0x2e8>)
 80137a8:	4823      	ldr	r0, [pc, #140]	; (8013838 <etharp_find_entry+0x2e0>)
 80137aa:	f00d fb5f 	bl	8020e6c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80137ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80137b2:	491e      	ldr	r1, [pc, #120]	; (801382c <etharp_find_entry+0x2d4>)
 80137b4:	4613      	mov	r3, r2
 80137b6:	005b      	lsls	r3, r3, #1
 80137b8:	4413      	add	r3, r2
 80137ba:	00db      	lsls	r3, r3, #3
 80137bc:	440b      	add	r3, r1
 80137be:	3314      	adds	r3, #20
 80137c0:	781b      	ldrb	r3, [r3, #0]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d006      	beq.n	80137d4 <etharp_find_entry+0x27c>
 80137c6:	4b1a      	ldr	r3, [pc, #104]	; (8013830 <etharp_find_entry+0x2d8>)
 80137c8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80137cc:	491d      	ldr	r1, [pc, #116]	; (8013844 <etharp_find_entry+0x2ec>)
 80137ce:	481a      	ldr	r0, [pc, #104]	; (8013838 <etharp_find_entry+0x2e0>)
 80137d0:	f00d fb4c 	bl	8020e6c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d00b      	beq.n	80137f2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80137da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	6819      	ldr	r1, [r3, #0]
 80137e2:	4812      	ldr	r0, [pc, #72]	; (801382c <etharp_find_entry+0x2d4>)
 80137e4:	4613      	mov	r3, r2
 80137e6:	005b      	lsls	r3, r3, #1
 80137e8:	4413      	add	r3, r2
 80137ea:	00db      	lsls	r3, r3, #3
 80137ec:	4403      	add	r3, r0
 80137ee:	3304      	adds	r3, #4
 80137f0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80137f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80137f6:	490d      	ldr	r1, [pc, #52]	; (801382c <etharp_find_entry+0x2d4>)
 80137f8:	4613      	mov	r3, r2
 80137fa:	005b      	lsls	r3, r3, #1
 80137fc:	4413      	add	r3, r2
 80137fe:	00db      	lsls	r3, r3, #3
 8013800:	440b      	add	r3, r1
 8013802:	3312      	adds	r3, #18
 8013804:	2200      	movs	r2, #0
 8013806:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8013808:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801380c:	4907      	ldr	r1, [pc, #28]	; (801382c <etharp_find_entry+0x2d4>)
 801380e:	4613      	mov	r3, r2
 8013810:	005b      	lsls	r3, r3, #1
 8013812:	4413      	add	r3, r2
 8013814:	00db      	lsls	r3, r3, #3
 8013816:	440b      	add	r3, r1
 8013818:	3308      	adds	r3, #8
 801381a:	687a      	ldr	r2, [r7, #4]
 801381c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801381e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8013822:	4618      	mov	r0, r3
 8013824:	3728      	adds	r7, #40	; 0x28
 8013826:	46bd      	mov	sp, r7
 8013828:	bd80      	pop	{r7, pc}
 801382a:	bf00      	nop
 801382c:	24004770 	.word	0x24004770
 8013830:	08025e9c 	.word	0x08025e9c
 8013834:	08025f00 	.word	0x08025f00
 8013838:	08025f40 	.word	0x08025f40
 801383c:	08025f68 	.word	0x08025f68
 8013840:	08025f80 	.word	0x08025f80
 8013844:	08025f94 	.word	0x08025f94

08013848 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8013848:	b580      	push	{r7, lr}
 801384a:	b088      	sub	sp, #32
 801384c:	af02      	add	r7, sp, #8
 801384e:	60f8      	str	r0, [r7, #12]
 8013850:	60b9      	str	r1, [r7, #8]
 8013852:	607a      	str	r2, [r7, #4]
 8013854:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801385c:	2b06      	cmp	r3, #6
 801385e:	d006      	beq.n	801386e <etharp_update_arp_entry+0x26>
 8013860:	4b48      	ldr	r3, [pc, #288]	; (8013984 <etharp_update_arp_entry+0x13c>)
 8013862:	f240 12a9 	movw	r2, #425	; 0x1a9
 8013866:	4948      	ldr	r1, [pc, #288]	; (8013988 <etharp_update_arp_entry+0x140>)
 8013868:	4848      	ldr	r0, [pc, #288]	; (801398c <etharp_update_arp_entry+0x144>)
 801386a:	f00d faff 	bl	8020e6c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801386e:	68bb      	ldr	r3, [r7, #8]
 8013870:	2b00      	cmp	r3, #0
 8013872:	d012      	beq.n	801389a <etharp_update_arp_entry+0x52>
 8013874:	68bb      	ldr	r3, [r7, #8]
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	2b00      	cmp	r3, #0
 801387a:	d00e      	beq.n	801389a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801387c:	68bb      	ldr	r3, [r7, #8]
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	68f9      	ldr	r1, [r7, #12]
 8013882:	4618      	mov	r0, r3
 8013884:	f001 facc 	bl	8014e20 <ip4_addr_isbroadcast_u32>
 8013888:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801388a:	2b00      	cmp	r3, #0
 801388c:	d105      	bne.n	801389a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801388e:	68bb      	ldr	r3, [r7, #8]
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013896:	2be0      	cmp	r3, #224	; 0xe0
 8013898:	d102      	bne.n	80138a0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801389a:	f06f 030f 	mvn.w	r3, #15
 801389e:	e06c      	b.n	801397a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80138a0:	78fb      	ldrb	r3, [r7, #3]
 80138a2:	68fa      	ldr	r2, [r7, #12]
 80138a4:	4619      	mov	r1, r3
 80138a6:	68b8      	ldr	r0, [r7, #8]
 80138a8:	f7ff fe56 	bl	8013558 <etharp_find_entry>
 80138ac:	4603      	mov	r3, r0
 80138ae:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80138b0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	da02      	bge.n	80138be <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80138b8:	8afb      	ldrh	r3, [r7, #22]
 80138ba:	b25b      	sxtb	r3, r3
 80138bc:	e05d      	b.n	801397a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80138be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80138c2:	4933      	ldr	r1, [pc, #204]	; (8013990 <etharp_update_arp_entry+0x148>)
 80138c4:	4613      	mov	r3, r2
 80138c6:	005b      	lsls	r3, r3, #1
 80138c8:	4413      	add	r3, r2
 80138ca:	00db      	lsls	r3, r3, #3
 80138cc:	440b      	add	r3, r1
 80138ce:	3314      	adds	r3, #20
 80138d0:	2202      	movs	r2, #2
 80138d2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80138d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80138d8:	492d      	ldr	r1, [pc, #180]	; (8013990 <etharp_update_arp_entry+0x148>)
 80138da:	4613      	mov	r3, r2
 80138dc:	005b      	lsls	r3, r3, #1
 80138de:	4413      	add	r3, r2
 80138e0:	00db      	lsls	r3, r3, #3
 80138e2:	440b      	add	r3, r1
 80138e4:	3308      	adds	r3, #8
 80138e6:	68fa      	ldr	r2, [r7, #12]
 80138e8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80138ea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80138ee:	4613      	mov	r3, r2
 80138f0:	005b      	lsls	r3, r3, #1
 80138f2:	4413      	add	r3, r2
 80138f4:	00db      	lsls	r3, r3, #3
 80138f6:	3308      	adds	r3, #8
 80138f8:	4a25      	ldr	r2, [pc, #148]	; (8013990 <etharp_update_arp_entry+0x148>)
 80138fa:	4413      	add	r3, r2
 80138fc:	3304      	adds	r3, #4
 80138fe:	2206      	movs	r2, #6
 8013900:	6879      	ldr	r1, [r7, #4]
 8013902:	4618      	mov	r0, r3
 8013904:	f00c fb90 	bl	8020028 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8013908:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801390c:	4920      	ldr	r1, [pc, #128]	; (8013990 <etharp_update_arp_entry+0x148>)
 801390e:	4613      	mov	r3, r2
 8013910:	005b      	lsls	r3, r3, #1
 8013912:	4413      	add	r3, r2
 8013914:	00db      	lsls	r3, r3, #3
 8013916:	440b      	add	r3, r1
 8013918:	3312      	adds	r3, #18
 801391a:	2200      	movs	r2, #0
 801391c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801391e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013922:	491b      	ldr	r1, [pc, #108]	; (8013990 <etharp_update_arp_entry+0x148>)
 8013924:	4613      	mov	r3, r2
 8013926:	005b      	lsls	r3, r3, #1
 8013928:	4413      	add	r3, r2
 801392a:	00db      	lsls	r3, r3, #3
 801392c:	440b      	add	r3, r1
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	2b00      	cmp	r3, #0
 8013932:	d021      	beq.n	8013978 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8013934:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013938:	4915      	ldr	r1, [pc, #84]	; (8013990 <etharp_update_arp_entry+0x148>)
 801393a:	4613      	mov	r3, r2
 801393c:	005b      	lsls	r3, r3, #1
 801393e:	4413      	add	r3, r2
 8013940:	00db      	lsls	r3, r3, #3
 8013942:	440b      	add	r3, r1
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8013948:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801394c:	4910      	ldr	r1, [pc, #64]	; (8013990 <etharp_update_arp_entry+0x148>)
 801394e:	4613      	mov	r3, r2
 8013950:	005b      	lsls	r3, r3, #1
 8013952:	4413      	add	r3, r2
 8013954:	00db      	lsls	r3, r3, #3
 8013956:	440b      	add	r3, r1
 8013958:	2200      	movs	r2, #0
 801395a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8013962:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013966:	9300      	str	r3, [sp, #0]
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	6939      	ldr	r1, [r7, #16]
 801396c:	68f8      	ldr	r0, [r7, #12]
 801396e:	f000 fcf3 	bl	8014358 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8013972:	6938      	ldr	r0, [r7, #16]
 8013974:	f003 fbe4 	bl	8017140 <pbuf_free>
  }
  return ERR_OK;
 8013978:	2300      	movs	r3, #0
}
 801397a:	4618      	mov	r0, r3
 801397c:	3718      	adds	r7, #24
 801397e:	46bd      	mov	sp, r7
 8013980:	bd80      	pop	{r7, pc}
 8013982:	bf00      	nop
 8013984:	08025e9c 	.word	0x08025e9c
 8013988:	08025fc0 	.word	0x08025fc0
 801398c:	08025f40 	.word	0x08025f40
 8013990:	24004770 	.word	0x24004770

08013994 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8013994:	b580      	push	{r7, lr}
 8013996:	b084      	sub	sp, #16
 8013998:	af00      	add	r7, sp, #0
 801399a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801399c:	2300      	movs	r3, #0
 801399e:	60fb      	str	r3, [r7, #12]
 80139a0:	e01e      	b.n	80139e0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80139a2:	4913      	ldr	r1, [pc, #76]	; (80139f0 <etharp_cleanup_netif+0x5c>)
 80139a4:	68fa      	ldr	r2, [r7, #12]
 80139a6:	4613      	mov	r3, r2
 80139a8:	005b      	lsls	r3, r3, #1
 80139aa:	4413      	add	r3, r2
 80139ac:	00db      	lsls	r3, r3, #3
 80139ae:	440b      	add	r3, r1
 80139b0:	3314      	adds	r3, #20
 80139b2:	781b      	ldrb	r3, [r3, #0]
 80139b4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80139b6:	7afb      	ldrb	r3, [r7, #11]
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d00e      	beq.n	80139da <etharp_cleanup_netif+0x46>
 80139bc:	490c      	ldr	r1, [pc, #48]	; (80139f0 <etharp_cleanup_netif+0x5c>)
 80139be:	68fa      	ldr	r2, [r7, #12]
 80139c0:	4613      	mov	r3, r2
 80139c2:	005b      	lsls	r3, r3, #1
 80139c4:	4413      	add	r3, r2
 80139c6:	00db      	lsls	r3, r3, #3
 80139c8:	440b      	add	r3, r1
 80139ca:	3308      	adds	r3, #8
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	687a      	ldr	r2, [r7, #4]
 80139d0:	429a      	cmp	r2, r3
 80139d2:	d102      	bne.n	80139da <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80139d4:	68f8      	ldr	r0, [r7, #12]
 80139d6:	f7ff fce5 	bl	80133a4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	3301      	adds	r3, #1
 80139de:	60fb      	str	r3, [r7, #12]
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	2b09      	cmp	r3, #9
 80139e4:	dddd      	ble.n	80139a2 <etharp_cleanup_netif+0xe>
    }
  }
}
 80139e6:	bf00      	nop
 80139e8:	bf00      	nop
 80139ea:	3710      	adds	r7, #16
 80139ec:	46bd      	mov	sp, r7
 80139ee:	bd80      	pop	{r7, pc}
 80139f0:	24004770 	.word	0x24004770

080139f4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80139f4:	b5b0      	push	{r4, r5, r7, lr}
 80139f6:	b08a      	sub	sp, #40	; 0x28
 80139f8:	af04      	add	r7, sp, #16
 80139fa:	6078      	str	r0, [r7, #4]
 80139fc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80139fe:	683b      	ldr	r3, [r7, #0]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d107      	bne.n	8013a14 <etharp_input+0x20>
 8013a04:	4b3d      	ldr	r3, [pc, #244]	; (8013afc <etharp_input+0x108>)
 8013a06:	f240 228a 	movw	r2, #650	; 0x28a
 8013a0a:	493d      	ldr	r1, [pc, #244]	; (8013b00 <etharp_input+0x10c>)
 8013a0c:	483d      	ldr	r0, [pc, #244]	; (8013b04 <etharp_input+0x110>)
 8013a0e:	f00d fa2d 	bl	8020e6c <iprintf>
 8013a12:	e06f      	b.n	8013af4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	685b      	ldr	r3, [r3, #4]
 8013a18:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013a1a:	693b      	ldr	r3, [r7, #16]
 8013a1c:	881b      	ldrh	r3, [r3, #0]
 8013a1e:	b29b      	uxth	r3, r3
 8013a20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013a24:	d10c      	bne.n	8013a40 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013a26:	693b      	ldr	r3, [r7, #16]
 8013a28:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013a2a:	2b06      	cmp	r3, #6
 8013a2c:	d108      	bne.n	8013a40 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013a2e:	693b      	ldr	r3, [r7, #16]
 8013a30:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013a32:	2b04      	cmp	r3, #4
 8013a34:	d104      	bne.n	8013a40 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8013a36:	693b      	ldr	r3, [r7, #16]
 8013a38:	885b      	ldrh	r3, [r3, #2]
 8013a3a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013a3c:	2b08      	cmp	r3, #8
 8013a3e:	d003      	beq.n	8013a48 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8013a40:	6878      	ldr	r0, [r7, #4]
 8013a42:	f003 fb7d 	bl	8017140 <pbuf_free>
    return;
 8013a46:	e055      	b.n	8013af4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8013a48:	693b      	ldr	r3, [r7, #16]
 8013a4a:	330e      	adds	r3, #14
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8013a50:	693b      	ldr	r3, [r7, #16]
 8013a52:	3318      	adds	r3, #24
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013a58:	683b      	ldr	r3, [r7, #0]
 8013a5a:	3304      	adds	r3, #4
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d102      	bne.n	8013a68 <etharp_input+0x74>
    for_us = 0;
 8013a62:	2300      	movs	r3, #0
 8013a64:	75fb      	strb	r3, [r7, #23]
 8013a66:	e009      	b.n	8013a7c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8013a68:	68ba      	ldr	r2, [r7, #8]
 8013a6a:	683b      	ldr	r3, [r7, #0]
 8013a6c:	3304      	adds	r3, #4
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	429a      	cmp	r2, r3
 8013a72:	bf0c      	ite	eq
 8013a74:	2301      	moveq	r3, #1
 8013a76:	2300      	movne	r3, #0
 8013a78:	b2db      	uxtb	r3, r3
 8013a7a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8013a7c:	693b      	ldr	r3, [r7, #16]
 8013a7e:	f103 0208 	add.w	r2, r3, #8
 8013a82:	7dfb      	ldrb	r3, [r7, #23]
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d001      	beq.n	8013a8c <etharp_input+0x98>
 8013a88:	2301      	movs	r3, #1
 8013a8a:	e000      	b.n	8013a8e <etharp_input+0x9a>
 8013a8c:	2302      	movs	r3, #2
 8013a8e:	f107 010c 	add.w	r1, r7, #12
 8013a92:	6838      	ldr	r0, [r7, #0]
 8013a94:	f7ff fed8 	bl	8013848 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8013a98:	693b      	ldr	r3, [r7, #16]
 8013a9a:	88db      	ldrh	r3, [r3, #6]
 8013a9c:	b29b      	uxth	r3, r3
 8013a9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013aa2:	d003      	beq.n	8013aac <etharp_input+0xb8>
 8013aa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013aa8:	d01e      	beq.n	8013ae8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8013aaa:	e020      	b.n	8013aee <etharp_input+0xfa>
      if (for_us) {
 8013aac:	7dfb      	ldrb	r3, [r7, #23]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d01c      	beq.n	8013aec <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8013ab2:	683b      	ldr	r3, [r7, #0]
 8013ab4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8013ab8:	693b      	ldr	r3, [r7, #16]
 8013aba:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8013abe:	683b      	ldr	r3, [r7, #0]
 8013ac0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8013ac4:	683b      	ldr	r3, [r7, #0]
 8013ac6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8013ac8:	693a      	ldr	r2, [r7, #16]
 8013aca:	3208      	adds	r2, #8
        etharp_raw(netif,
 8013acc:	2102      	movs	r1, #2
 8013ace:	9103      	str	r1, [sp, #12]
 8013ad0:	f107 010c 	add.w	r1, r7, #12
 8013ad4:	9102      	str	r1, [sp, #8]
 8013ad6:	9201      	str	r2, [sp, #4]
 8013ad8:	9300      	str	r3, [sp, #0]
 8013ada:	462b      	mov	r3, r5
 8013adc:	4622      	mov	r2, r4
 8013ade:	4601      	mov	r1, r0
 8013ae0:	6838      	ldr	r0, [r7, #0]
 8013ae2:	f000 faeb 	bl	80140bc <etharp_raw>
      break;
 8013ae6:	e001      	b.n	8013aec <etharp_input+0xf8>
      break;
 8013ae8:	bf00      	nop
 8013aea:	e000      	b.n	8013aee <etharp_input+0xfa>
      break;
 8013aec:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8013aee:	6878      	ldr	r0, [r7, #4]
 8013af0:	f003 fb26 	bl	8017140 <pbuf_free>
}
 8013af4:	3718      	adds	r7, #24
 8013af6:	46bd      	mov	sp, r7
 8013af8:	bdb0      	pop	{r4, r5, r7, pc}
 8013afa:	bf00      	nop
 8013afc:	08025e9c 	.word	0x08025e9c
 8013b00:	08026018 	.word	0x08026018
 8013b04:	08025f40 	.word	0x08025f40

08013b08 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8013b08:	b580      	push	{r7, lr}
 8013b0a:	b086      	sub	sp, #24
 8013b0c:	af02      	add	r7, sp, #8
 8013b0e:	60f8      	str	r0, [r7, #12]
 8013b10:	60b9      	str	r1, [r7, #8]
 8013b12:	4613      	mov	r3, r2
 8013b14:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8013b16:	79fa      	ldrb	r2, [r7, #7]
 8013b18:	4944      	ldr	r1, [pc, #272]	; (8013c2c <etharp_output_to_arp_index+0x124>)
 8013b1a:	4613      	mov	r3, r2
 8013b1c:	005b      	lsls	r3, r3, #1
 8013b1e:	4413      	add	r3, r2
 8013b20:	00db      	lsls	r3, r3, #3
 8013b22:	440b      	add	r3, r1
 8013b24:	3314      	adds	r3, #20
 8013b26:	781b      	ldrb	r3, [r3, #0]
 8013b28:	2b01      	cmp	r3, #1
 8013b2a:	d806      	bhi.n	8013b3a <etharp_output_to_arp_index+0x32>
 8013b2c:	4b40      	ldr	r3, [pc, #256]	; (8013c30 <etharp_output_to_arp_index+0x128>)
 8013b2e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8013b32:	4940      	ldr	r1, [pc, #256]	; (8013c34 <etharp_output_to_arp_index+0x12c>)
 8013b34:	4840      	ldr	r0, [pc, #256]	; (8013c38 <etharp_output_to_arp_index+0x130>)
 8013b36:	f00d f999 	bl	8020e6c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8013b3a:	79fa      	ldrb	r2, [r7, #7]
 8013b3c:	493b      	ldr	r1, [pc, #236]	; (8013c2c <etharp_output_to_arp_index+0x124>)
 8013b3e:	4613      	mov	r3, r2
 8013b40:	005b      	lsls	r3, r3, #1
 8013b42:	4413      	add	r3, r2
 8013b44:	00db      	lsls	r3, r3, #3
 8013b46:	440b      	add	r3, r1
 8013b48:	3314      	adds	r3, #20
 8013b4a:	781b      	ldrb	r3, [r3, #0]
 8013b4c:	2b02      	cmp	r3, #2
 8013b4e:	d153      	bne.n	8013bf8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8013b50:	79fa      	ldrb	r2, [r7, #7]
 8013b52:	4936      	ldr	r1, [pc, #216]	; (8013c2c <etharp_output_to_arp_index+0x124>)
 8013b54:	4613      	mov	r3, r2
 8013b56:	005b      	lsls	r3, r3, #1
 8013b58:	4413      	add	r3, r2
 8013b5a:	00db      	lsls	r3, r3, #3
 8013b5c:	440b      	add	r3, r1
 8013b5e:	3312      	adds	r3, #18
 8013b60:	881b      	ldrh	r3, [r3, #0]
 8013b62:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8013b66:	d919      	bls.n	8013b9c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8013b68:	79fa      	ldrb	r2, [r7, #7]
 8013b6a:	4613      	mov	r3, r2
 8013b6c:	005b      	lsls	r3, r3, #1
 8013b6e:	4413      	add	r3, r2
 8013b70:	00db      	lsls	r3, r3, #3
 8013b72:	4a2e      	ldr	r2, [pc, #184]	; (8013c2c <etharp_output_to_arp_index+0x124>)
 8013b74:	4413      	add	r3, r2
 8013b76:	3304      	adds	r3, #4
 8013b78:	4619      	mov	r1, r3
 8013b7a:	68f8      	ldr	r0, [r7, #12]
 8013b7c:	f000 fb4c 	bl	8014218 <etharp_request>
 8013b80:	4603      	mov	r3, r0
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d138      	bne.n	8013bf8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013b86:	79fa      	ldrb	r2, [r7, #7]
 8013b88:	4928      	ldr	r1, [pc, #160]	; (8013c2c <etharp_output_to_arp_index+0x124>)
 8013b8a:	4613      	mov	r3, r2
 8013b8c:	005b      	lsls	r3, r3, #1
 8013b8e:	4413      	add	r3, r2
 8013b90:	00db      	lsls	r3, r3, #3
 8013b92:	440b      	add	r3, r1
 8013b94:	3314      	adds	r3, #20
 8013b96:	2203      	movs	r2, #3
 8013b98:	701a      	strb	r2, [r3, #0]
 8013b9a:	e02d      	b.n	8013bf8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8013b9c:	79fa      	ldrb	r2, [r7, #7]
 8013b9e:	4923      	ldr	r1, [pc, #140]	; (8013c2c <etharp_output_to_arp_index+0x124>)
 8013ba0:	4613      	mov	r3, r2
 8013ba2:	005b      	lsls	r3, r3, #1
 8013ba4:	4413      	add	r3, r2
 8013ba6:	00db      	lsls	r3, r3, #3
 8013ba8:	440b      	add	r3, r1
 8013baa:	3312      	adds	r3, #18
 8013bac:	881b      	ldrh	r3, [r3, #0]
 8013bae:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8013bb2:	d321      	bcc.n	8013bf8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013bb4:	79fa      	ldrb	r2, [r7, #7]
 8013bb6:	4613      	mov	r3, r2
 8013bb8:	005b      	lsls	r3, r3, #1
 8013bba:	4413      	add	r3, r2
 8013bbc:	00db      	lsls	r3, r3, #3
 8013bbe:	4a1b      	ldr	r2, [pc, #108]	; (8013c2c <etharp_output_to_arp_index+0x124>)
 8013bc0:	4413      	add	r3, r2
 8013bc2:	1d19      	adds	r1, r3, #4
 8013bc4:	79fa      	ldrb	r2, [r7, #7]
 8013bc6:	4613      	mov	r3, r2
 8013bc8:	005b      	lsls	r3, r3, #1
 8013bca:	4413      	add	r3, r2
 8013bcc:	00db      	lsls	r3, r3, #3
 8013bce:	3308      	adds	r3, #8
 8013bd0:	4a16      	ldr	r2, [pc, #88]	; (8013c2c <etharp_output_to_arp_index+0x124>)
 8013bd2:	4413      	add	r3, r2
 8013bd4:	3304      	adds	r3, #4
 8013bd6:	461a      	mov	r2, r3
 8013bd8:	68f8      	ldr	r0, [r7, #12]
 8013bda:	f000 fafb 	bl	80141d4 <etharp_request_dst>
 8013bde:	4603      	mov	r3, r0
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d109      	bne.n	8013bf8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013be4:	79fa      	ldrb	r2, [r7, #7]
 8013be6:	4911      	ldr	r1, [pc, #68]	; (8013c2c <etharp_output_to_arp_index+0x124>)
 8013be8:	4613      	mov	r3, r2
 8013bea:	005b      	lsls	r3, r3, #1
 8013bec:	4413      	add	r3, r2
 8013bee:	00db      	lsls	r3, r3, #3
 8013bf0:	440b      	add	r3, r1
 8013bf2:	3314      	adds	r3, #20
 8013bf4:	2203      	movs	r2, #3
 8013bf6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8013bfe:	79fa      	ldrb	r2, [r7, #7]
 8013c00:	4613      	mov	r3, r2
 8013c02:	005b      	lsls	r3, r3, #1
 8013c04:	4413      	add	r3, r2
 8013c06:	00db      	lsls	r3, r3, #3
 8013c08:	3308      	adds	r3, #8
 8013c0a:	4a08      	ldr	r2, [pc, #32]	; (8013c2c <etharp_output_to_arp_index+0x124>)
 8013c0c:	4413      	add	r3, r2
 8013c0e:	3304      	adds	r3, #4
 8013c10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013c14:	9200      	str	r2, [sp, #0]
 8013c16:	460a      	mov	r2, r1
 8013c18:	68b9      	ldr	r1, [r7, #8]
 8013c1a:	68f8      	ldr	r0, [r7, #12]
 8013c1c:	f000 fb9c 	bl	8014358 <ethernet_output>
 8013c20:	4603      	mov	r3, r0
}
 8013c22:	4618      	mov	r0, r3
 8013c24:	3710      	adds	r7, #16
 8013c26:	46bd      	mov	sp, r7
 8013c28:	bd80      	pop	{r7, pc}
 8013c2a:	bf00      	nop
 8013c2c:	24004770 	.word	0x24004770
 8013c30:	08025e9c 	.word	0x08025e9c
 8013c34:	08026038 	.word	0x08026038
 8013c38:	08025f40 	.word	0x08025f40

08013c3c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8013c3c:	b580      	push	{r7, lr}
 8013c3e:	b08a      	sub	sp, #40	; 0x28
 8013c40:	af02      	add	r7, sp, #8
 8013c42:	60f8      	str	r0, [r7, #12]
 8013c44:	60b9      	str	r1, [r7, #8]
 8013c46:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013c4c:	68fb      	ldr	r3, [r7, #12]
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d106      	bne.n	8013c60 <etharp_output+0x24>
 8013c52:	4b73      	ldr	r3, [pc, #460]	; (8013e20 <etharp_output+0x1e4>)
 8013c54:	f240 321e 	movw	r2, #798	; 0x31e
 8013c58:	4972      	ldr	r1, [pc, #456]	; (8013e24 <etharp_output+0x1e8>)
 8013c5a:	4873      	ldr	r0, [pc, #460]	; (8013e28 <etharp_output+0x1ec>)
 8013c5c:	f00d f906 	bl	8020e6c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8013c60:	68bb      	ldr	r3, [r7, #8]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d106      	bne.n	8013c74 <etharp_output+0x38>
 8013c66:	4b6e      	ldr	r3, [pc, #440]	; (8013e20 <etharp_output+0x1e4>)
 8013c68:	f240 321f 	movw	r2, #799	; 0x31f
 8013c6c:	496f      	ldr	r1, [pc, #444]	; (8013e2c <etharp_output+0x1f0>)
 8013c6e:	486e      	ldr	r0, [pc, #440]	; (8013e28 <etharp_output+0x1ec>)
 8013c70:	f00d f8fc 	bl	8020e6c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d106      	bne.n	8013c88 <etharp_output+0x4c>
 8013c7a:	4b69      	ldr	r3, [pc, #420]	; (8013e20 <etharp_output+0x1e4>)
 8013c7c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8013c80:	496b      	ldr	r1, [pc, #428]	; (8013e30 <etharp_output+0x1f4>)
 8013c82:	4869      	ldr	r0, [pc, #420]	; (8013e28 <etharp_output+0x1ec>)
 8013c84:	f00d f8f2 	bl	8020e6c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	68f9      	ldr	r1, [r7, #12]
 8013c8e:	4618      	mov	r0, r3
 8013c90:	f001 f8c6 	bl	8014e20 <ip4_addr_isbroadcast_u32>
 8013c94:	4603      	mov	r3, r0
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d002      	beq.n	8013ca0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8013c9a:	4b66      	ldr	r3, [pc, #408]	; (8013e34 <etharp_output+0x1f8>)
 8013c9c:	61fb      	str	r3, [r7, #28]
 8013c9e:	e0af      	b.n	8013e00 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013ca8:	2be0      	cmp	r3, #224	; 0xe0
 8013caa:	d118      	bne.n	8013cde <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8013cac:	2301      	movs	r3, #1
 8013cae:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8013cb0:	2300      	movs	r3, #0
 8013cb2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8013cb4:	235e      	movs	r3, #94	; 0x5e
 8013cb6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	3301      	adds	r3, #1
 8013cbc:	781b      	ldrb	r3, [r3, #0]
 8013cbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013cc2:	b2db      	uxtb	r3, r3
 8013cc4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	3302      	adds	r3, #2
 8013cca:	781b      	ldrb	r3, [r3, #0]
 8013ccc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	3303      	adds	r3, #3
 8013cd2:	781b      	ldrb	r3, [r3, #0]
 8013cd4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8013cd6:	f107 0310 	add.w	r3, r7, #16
 8013cda:	61fb      	str	r3, [r7, #28]
 8013cdc:	e090      	b.n	8013e00 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	681a      	ldr	r2, [r3, #0]
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	3304      	adds	r3, #4
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	405a      	eors	r2, r3
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	3308      	adds	r3, #8
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	4013      	ands	r3, r2
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d012      	beq.n	8013d1c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013cfc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8013d00:	4293      	cmp	r3, r2
 8013d02:	d00b      	beq.n	8013d1c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	330c      	adds	r3, #12
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d003      	beq.n	8013d16 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	330c      	adds	r3, #12
 8013d12:	61bb      	str	r3, [r7, #24]
 8013d14:	e002      	b.n	8013d1c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8013d16:	f06f 0303 	mvn.w	r3, #3
 8013d1a:	e07d      	b.n	8013e18 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013d1c:	4b46      	ldr	r3, [pc, #280]	; (8013e38 <etharp_output+0x1fc>)
 8013d1e:	781b      	ldrb	r3, [r3, #0]
 8013d20:	4619      	mov	r1, r3
 8013d22:	4a46      	ldr	r2, [pc, #280]	; (8013e3c <etharp_output+0x200>)
 8013d24:	460b      	mov	r3, r1
 8013d26:	005b      	lsls	r3, r3, #1
 8013d28:	440b      	add	r3, r1
 8013d2a:	00db      	lsls	r3, r3, #3
 8013d2c:	4413      	add	r3, r2
 8013d2e:	3314      	adds	r3, #20
 8013d30:	781b      	ldrb	r3, [r3, #0]
 8013d32:	2b01      	cmp	r3, #1
 8013d34:	d925      	bls.n	8013d82 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013d36:	4b40      	ldr	r3, [pc, #256]	; (8013e38 <etharp_output+0x1fc>)
 8013d38:	781b      	ldrb	r3, [r3, #0]
 8013d3a:	4619      	mov	r1, r3
 8013d3c:	4a3f      	ldr	r2, [pc, #252]	; (8013e3c <etharp_output+0x200>)
 8013d3e:	460b      	mov	r3, r1
 8013d40:	005b      	lsls	r3, r3, #1
 8013d42:	440b      	add	r3, r1
 8013d44:	00db      	lsls	r3, r3, #3
 8013d46:	4413      	add	r3, r2
 8013d48:	3308      	adds	r3, #8
 8013d4a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013d4c:	68fa      	ldr	r2, [r7, #12]
 8013d4e:	429a      	cmp	r2, r3
 8013d50:	d117      	bne.n	8013d82 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8013d52:	69bb      	ldr	r3, [r7, #24]
 8013d54:	681a      	ldr	r2, [r3, #0]
 8013d56:	4b38      	ldr	r3, [pc, #224]	; (8013e38 <etharp_output+0x1fc>)
 8013d58:	781b      	ldrb	r3, [r3, #0]
 8013d5a:	4618      	mov	r0, r3
 8013d5c:	4937      	ldr	r1, [pc, #220]	; (8013e3c <etharp_output+0x200>)
 8013d5e:	4603      	mov	r3, r0
 8013d60:	005b      	lsls	r3, r3, #1
 8013d62:	4403      	add	r3, r0
 8013d64:	00db      	lsls	r3, r3, #3
 8013d66:	440b      	add	r3, r1
 8013d68:	3304      	adds	r3, #4
 8013d6a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013d6c:	429a      	cmp	r2, r3
 8013d6e:	d108      	bne.n	8013d82 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8013d70:	4b31      	ldr	r3, [pc, #196]	; (8013e38 <etharp_output+0x1fc>)
 8013d72:	781b      	ldrb	r3, [r3, #0]
 8013d74:	461a      	mov	r2, r3
 8013d76:	68b9      	ldr	r1, [r7, #8]
 8013d78:	68f8      	ldr	r0, [r7, #12]
 8013d7a:	f7ff fec5 	bl	8013b08 <etharp_output_to_arp_index>
 8013d7e:	4603      	mov	r3, r0
 8013d80:	e04a      	b.n	8013e18 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013d82:	2300      	movs	r3, #0
 8013d84:	75fb      	strb	r3, [r7, #23]
 8013d86:	e031      	b.n	8013dec <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013d88:	7dfa      	ldrb	r2, [r7, #23]
 8013d8a:	492c      	ldr	r1, [pc, #176]	; (8013e3c <etharp_output+0x200>)
 8013d8c:	4613      	mov	r3, r2
 8013d8e:	005b      	lsls	r3, r3, #1
 8013d90:	4413      	add	r3, r2
 8013d92:	00db      	lsls	r3, r3, #3
 8013d94:	440b      	add	r3, r1
 8013d96:	3314      	adds	r3, #20
 8013d98:	781b      	ldrb	r3, [r3, #0]
 8013d9a:	2b01      	cmp	r3, #1
 8013d9c:	d923      	bls.n	8013de6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8013d9e:	7dfa      	ldrb	r2, [r7, #23]
 8013da0:	4926      	ldr	r1, [pc, #152]	; (8013e3c <etharp_output+0x200>)
 8013da2:	4613      	mov	r3, r2
 8013da4:	005b      	lsls	r3, r3, #1
 8013da6:	4413      	add	r3, r2
 8013da8:	00db      	lsls	r3, r3, #3
 8013daa:	440b      	add	r3, r1
 8013dac:	3308      	adds	r3, #8
 8013dae:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013db0:	68fa      	ldr	r2, [r7, #12]
 8013db2:	429a      	cmp	r2, r3
 8013db4:	d117      	bne.n	8013de6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8013db6:	69bb      	ldr	r3, [r7, #24]
 8013db8:	6819      	ldr	r1, [r3, #0]
 8013dba:	7dfa      	ldrb	r2, [r7, #23]
 8013dbc:	481f      	ldr	r0, [pc, #124]	; (8013e3c <etharp_output+0x200>)
 8013dbe:	4613      	mov	r3, r2
 8013dc0:	005b      	lsls	r3, r3, #1
 8013dc2:	4413      	add	r3, r2
 8013dc4:	00db      	lsls	r3, r3, #3
 8013dc6:	4403      	add	r3, r0
 8013dc8:	3304      	adds	r3, #4
 8013dca:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8013dcc:	4299      	cmp	r1, r3
 8013dce:	d10a      	bne.n	8013de6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8013dd0:	4a19      	ldr	r2, [pc, #100]	; (8013e38 <etharp_output+0x1fc>)
 8013dd2:	7dfb      	ldrb	r3, [r7, #23]
 8013dd4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8013dd6:	7dfb      	ldrb	r3, [r7, #23]
 8013dd8:	461a      	mov	r2, r3
 8013dda:	68b9      	ldr	r1, [r7, #8]
 8013ddc:	68f8      	ldr	r0, [r7, #12]
 8013dde:	f7ff fe93 	bl	8013b08 <etharp_output_to_arp_index>
 8013de2:	4603      	mov	r3, r0
 8013de4:	e018      	b.n	8013e18 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013de6:	7dfb      	ldrb	r3, [r7, #23]
 8013de8:	3301      	adds	r3, #1
 8013dea:	75fb      	strb	r3, [r7, #23]
 8013dec:	7dfb      	ldrb	r3, [r7, #23]
 8013dee:	2b09      	cmp	r3, #9
 8013df0:	d9ca      	bls.n	8013d88 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8013df2:	68ba      	ldr	r2, [r7, #8]
 8013df4:	69b9      	ldr	r1, [r7, #24]
 8013df6:	68f8      	ldr	r0, [r7, #12]
 8013df8:	f000 f822 	bl	8013e40 <etharp_query>
 8013dfc:	4603      	mov	r3, r0
 8013dfe:	e00b      	b.n	8013e18 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8013e06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013e0a:	9300      	str	r3, [sp, #0]
 8013e0c:	69fb      	ldr	r3, [r7, #28]
 8013e0e:	68b9      	ldr	r1, [r7, #8]
 8013e10:	68f8      	ldr	r0, [r7, #12]
 8013e12:	f000 faa1 	bl	8014358 <ethernet_output>
 8013e16:	4603      	mov	r3, r0
}
 8013e18:	4618      	mov	r0, r3
 8013e1a:	3720      	adds	r7, #32
 8013e1c:	46bd      	mov	sp, r7
 8013e1e:	bd80      	pop	{r7, pc}
 8013e20:	08025e9c 	.word	0x08025e9c
 8013e24:	08026018 	.word	0x08026018
 8013e28:	08025f40 	.word	0x08025f40
 8013e2c:	08026068 	.word	0x08026068
 8013e30:	08026008 	.word	0x08026008
 8013e34:	0802910c 	.word	0x0802910c
 8013e38:	24004860 	.word	0x24004860
 8013e3c:	24004770 	.word	0x24004770

08013e40 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8013e40:	b580      	push	{r7, lr}
 8013e42:	b08c      	sub	sp, #48	; 0x30
 8013e44:	af02      	add	r7, sp, #8
 8013e46:	60f8      	str	r0, [r7, #12]
 8013e48:	60b9      	str	r1, [r7, #8]
 8013e4a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	3326      	adds	r3, #38	; 0x26
 8013e50:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8013e52:	23ff      	movs	r3, #255	; 0xff
 8013e54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8013e58:	2300      	movs	r3, #0
 8013e5a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013e5c:	68bb      	ldr	r3, [r7, #8]
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	68f9      	ldr	r1, [r7, #12]
 8013e62:	4618      	mov	r0, r3
 8013e64:	f000 ffdc 	bl	8014e20 <ip4_addr_isbroadcast_u32>
 8013e68:	4603      	mov	r3, r0
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d10c      	bne.n	8013e88 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013e6e:	68bb      	ldr	r3, [r7, #8]
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013e76:	2be0      	cmp	r3, #224	; 0xe0
 8013e78:	d006      	beq.n	8013e88 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013e7a:	68bb      	ldr	r3, [r7, #8]
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d003      	beq.n	8013e88 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8013e80:	68bb      	ldr	r3, [r7, #8]
 8013e82:	681b      	ldr	r3, [r3, #0]
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d102      	bne.n	8013e8e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013e88:	f06f 030f 	mvn.w	r3, #15
 8013e8c:	e101      	b.n	8014092 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8013e8e:	68fa      	ldr	r2, [r7, #12]
 8013e90:	2101      	movs	r1, #1
 8013e92:	68b8      	ldr	r0, [r7, #8]
 8013e94:	f7ff fb60 	bl	8013558 <etharp_find_entry>
 8013e98:	4603      	mov	r3, r0
 8013e9a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8013e9c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	da02      	bge.n	8013eaa <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8013ea4:	8a7b      	ldrh	r3, [r7, #18]
 8013ea6:	b25b      	sxtb	r3, r3
 8013ea8:	e0f3      	b.n	8014092 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8013eaa:	8a7b      	ldrh	r3, [r7, #18]
 8013eac:	2b7e      	cmp	r3, #126	; 0x7e
 8013eae:	d906      	bls.n	8013ebe <etharp_query+0x7e>
 8013eb0:	4b7a      	ldr	r3, [pc, #488]	; (801409c <etharp_query+0x25c>)
 8013eb2:	f240 32c1 	movw	r2, #961	; 0x3c1
 8013eb6:	497a      	ldr	r1, [pc, #488]	; (80140a0 <etharp_query+0x260>)
 8013eb8:	487a      	ldr	r0, [pc, #488]	; (80140a4 <etharp_query+0x264>)
 8013eba:	f00c ffd7 	bl	8020e6c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8013ebe:	8a7b      	ldrh	r3, [r7, #18]
 8013ec0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8013ec2:	7c7a      	ldrb	r2, [r7, #17]
 8013ec4:	4978      	ldr	r1, [pc, #480]	; (80140a8 <etharp_query+0x268>)
 8013ec6:	4613      	mov	r3, r2
 8013ec8:	005b      	lsls	r3, r3, #1
 8013eca:	4413      	add	r3, r2
 8013ecc:	00db      	lsls	r3, r3, #3
 8013ece:	440b      	add	r3, r1
 8013ed0:	3314      	adds	r3, #20
 8013ed2:	781b      	ldrb	r3, [r3, #0]
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d115      	bne.n	8013f04 <etharp_query+0xc4>
    is_new_entry = 1;
 8013ed8:	2301      	movs	r3, #1
 8013eda:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8013edc:	7c7a      	ldrb	r2, [r7, #17]
 8013ede:	4972      	ldr	r1, [pc, #456]	; (80140a8 <etharp_query+0x268>)
 8013ee0:	4613      	mov	r3, r2
 8013ee2:	005b      	lsls	r3, r3, #1
 8013ee4:	4413      	add	r3, r2
 8013ee6:	00db      	lsls	r3, r3, #3
 8013ee8:	440b      	add	r3, r1
 8013eea:	3314      	adds	r3, #20
 8013eec:	2201      	movs	r2, #1
 8013eee:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8013ef0:	7c7a      	ldrb	r2, [r7, #17]
 8013ef2:	496d      	ldr	r1, [pc, #436]	; (80140a8 <etharp_query+0x268>)
 8013ef4:	4613      	mov	r3, r2
 8013ef6:	005b      	lsls	r3, r3, #1
 8013ef8:	4413      	add	r3, r2
 8013efa:	00db      	lsls	r3, r3, #3
 8013efc:	440b      	add	r3, r1
 8013efe:	3308      	adds	r3, #8
 8013f00:	68fa      	ldr	r2, [r7, #12]
 8013f02:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8013f04:	7c7a      	ldrb	r2, [r7, #17]
 8013f06:	4968      	ldr	r1, [pc, #416]	; (80140a8 <etharp_query+0x268>)
 8013f08:	4613      	mov	r3, r2
 8013f0a:	005b      	lsls	r3, r3, #1
 8013f0c:	4413      	add	r3, r2
 8013f0e:	00db      	lsls	r3, r3, #3
 8013f10:	440b      	add	r3, r1
 8013f12:	3314      	adds	r3, #20
 8013f14:	781b      	ldrb	r3, [r3, #0]
 8013f16:	2b01      	cmp	r3, #1
 8013f18:	d011      	beq.n	8013f3e <etharp_query+0xfe>
 8013f1a:	7c7a      	ldrb	r2, [r7, #17]
 8013f1c:	4962      	ldr	r1, [pc, #392]	; (80140a8 <etharp_query+0x268>)
 8013f1e:	4613      	mov	r3, r2
 8013f20:	005b      	lsls	r3, r3, #1
 8013f22:	4413      	add	r3, r2
 8013f24:	00db      	lsls	r3, r3, #3
 8013f26:	440b      	add	r3, r1
 8013f28:	3314      	adds	r3, #20
 8013f2a:	781b      	ldrb	r3, [r3, #0]
 8013f2c:	2b01      	cmp	r3, #1
 8013f2e:	d806      	bhi.n	8013f3e <etharp_query+0xfe>
 8013f30:	4b5a      	ldr	r3, [pc, #360]	; (801409c <etharp_query+0x25c>)
 8013f32:	f240 32cd 	movw	r2, #973	; 0x3cd
 8013f36:	495d      	ldr	r1, [pc, #372]	; (80140ac <etharp_query+0x26c>)
 8013f38:	485a      	ldr	r0, [pc, #360]	; (80140a4 <etharp_query+0x264>)
 8013f3a:	f00c ff97 	bl	8020e6c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8013f3e:	6a3b      	ldr	r3, [r7, #32]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d102      	bne.n	8013f4a <etharp_query+0x10a>
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d10c      	bne.n	8013f64 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8013f4a:	68b9      	ldr	r1, [r7, #8]
 8013f4c:	68f8      	ldr	r0, [r7, #12]
 8013f4e:	f000 f963 	bl	8014218 <etharp_request>
 8013f52:	4603      	mov	r3, r0
 8013f54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d102      	bne.n	8013f64 <etharp_query+0x124>
      return result;
 8013f5e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013f62:	e096      	b.n	8014092 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d106      	bne.n	8013f78 <etharp_query+0x138>
 8013f6a:	4b4c      	ldr	r3, [pc, #304]	; (801409c <etharp_query+0x25c>)
 8013f6c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8013f70:	494f      	ldr	r1, [pc, #316]	; (80140b0 <etharp_query+0x270>)
 8013f72:	484c      	ldr	r0, [pc, #304]	; (80140a4 <etharp_query+0x264>)
 8013f74:	f00c ff7a 	bl	8020e6c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8013f78:	7c7a      	ldrb	r2, [r7, #17]
 8013f7a:	494b      	ldr	r1, [pc, #300]	; (80140a8 <etharp_query+0x268>)
 8013f7c:	4613      	mov	r3, r2
 8013f7e:	005b      	lsls	r3, r3, #1
 8013f80:	4413      	add	r3, r2
 8013f82:	00db      	lsls	r3, r3, #3
 8013f84:	440b      	add	r3, r1
 8013f86:	3314      	adds	r3, #20
 8013f88:	781b      	ldrb	r3, [r3, #0]
 8013f8a:	2b01      	cmp	r3, #1
 8013f8c:	d917      	bls.n	8013fbe <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8013f8e:	4a49      	ldr	r2, [pc, #292]	; (80140b4 <etharp_query+0x274>)
 8013f90:	7c7b      	ldrb	r3, [r7, #17]
 8013f92:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8013f94:	7c7a      	ldrb	r2, [r7, #17]
 8013f96:	4613      	mov	r3, r2
 8013f98:	005b      	lsls	r3, r3, #1
 8013f9a:	4413      	add	r3, r2
 8013f9c:	00db      	lsls	r3, r3, #3
 8013f9e:	3308      	adds	r3, #8
 8013fa0:	4a41      	ldr	r2, [pc, #260]	; (80140a8 <etharp_query+0x268>)
 8013fa2:	4413      	add	r3, r2
 8013fa4:	3304      	adds	r3, #4
 8013fa6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013faa:	9200      	str	r2, [sp, #0]
 8013fac:	697a      	ldr	r2, [r7, #20]
 8013fae:	6879      	ldr	r1, [r7, #4]
 8013fb0:	68f8      	ldr	r0, [r7, #12]
 8013fb2:	f000 f9d1 	bl	8014358 <ethernet_output>
 8013fb6:	4603      	mov	r3, r0
 8013fb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013fbc:	e067      	b.n	801408e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013fbe:	7c7a      	ldrb	r2, [r7, #17]
 8013fc0:	4939      	ldr	r1, [pc, #228]	; (80140a8 <etharp_query+0x268>)
 8013fc2:	4613      	mov	r3, r2
 8013fc4:	005b      	lsls	r3, r3, #1
 8013fc6:	4413      	add	r3, r2
 8013fc8:	00db      	lsls	r3, r3, #3
 8013fca:	440b      	add	r3, r1
 8013fcc:	3314      	adds	r3, #20
 8013fce:	781b      	ldrb	r3, [r3, #0]
 8013fd0:	2b01      	cmp	r3, #1
 8013fd2:	d15c      	bne.n	801408e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8013fd4:	2300      	movs	r3, #0
 8013fd6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013fdc:	e01c      	b.n	8014018 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8013fde:	69fb      	ldr	r3, [r7, #28]
 8013fe0:	895a      	ldrh	r2, [r3, #10]
 8013fe2:	69fb      	ldr	r3, [r7, #28]
 8013fe4:	891b      	ldrh	r3, [r3, #8]
 8013fe6:	429a      	cmp	r2, r3
 8013fe8:	d10a      	bne.n	8014000 <etharp_query+0x1c0>
 8013fea:	69fb      	ldr	r3, [r7, #28]
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d006      	beq.n	8014000 <etharp_query+0x1c0>
 8013ff2:	4b2a      	ldr	r3, [pc, #168]	; (801409c <etharp_query+0x25c>)
 8013ff4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8013ff8:	492f      	ldr	r1, [pc, #188]	; (80140b8 <etharp_query+0x278>)
 8013ffa:	482a      	ldr	r0, [pc, #168]	; (80140a4 <etharp_query+0x264>)
 8013ffc:	f00c ff36 	bl	8020e6c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014000:	69fb      	ldr	r3, [r7, #28]
 8014002:	7b1b      	ldrb	r3, [r3, #12]
 8014004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014008:	2b00      	cmp	r3, #0
 801400a:	d002      	beq.n	8014012 <etharp_query+0x1d2>
        copy_needed = 1;
 801400c:	2301      	movs	r3, #1
 801400e:	61bb      	str	r3, [r7, #24]
        break;
 8014010:	e005      	b.n	801401e <etharp_query+0x1de>
      }
      p = p->next;
 8014012:	69fb      	ldr	r3, [r7, #28]
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014018:	69fb      	ldr	r3, [r7, #28]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d1df      	bne.n	8013fde <etharp_query+0x19e>
    }
    if (copy_needed) {
 801401e:	69bb      	ldr	r3, [r7, #24]
 8014020:	2b00      	cmp	r3, #0
 8014022:	d007      	beq.n	8014034 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014024:	687a      	ldr	r2, [r7, #4]
 8014026:	f44f 7120 	mov.w	r1, #640	; 0x280
 801402a:	200e      	movs	r0, #14
 801402c:	f003 fb0e 	bl	801764c <pbuf_clone>
 8014030:	61f8      	str	r0, [r7, #28]
 8014032:	e004      	b.n	801403e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014038:	69f8      	ldr	r0, [r7, #28]
 801403a:	f003 f921 	bl	8017280 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801403e:	69fb      	ldr	r3, [r7, #28]
 8014040:	2b00      	cmp	r3, #0
 8014042:	d021      	beq.n	8014088 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014044:	7c7a      	ldrb	r2, [r7, #17]
 8014046:	4918      	ldr	r1, [pc, #96]	; (80140a8 <etharp_query+0x268>)
 8014048:	4613      	mov	r3, r2
 801404a:	005b      	lsls	r3, r3, #1
 801404c:	4413      	add	r3, r2
 801404e:	00db      	lsls	r3, r3, #3
 8014050:	440b      	add	r3, r1
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	2b00      	cmp	r3, #0
 8014056:	d00a      	beq.n	801406e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014058:	7c7a      	ldrb	r2, [r7, #17]
 801405a:	4913      	ldr	r1, [pc, #76]	; (80140a8 <etharp_query+0x268>)
 801405c:	4613      	mov	r3, r2
 801405e:	005b      	lsls	r3, r3, #1
 8014060:	4413      	add	r3, r2
 8014062:	00db      	lsls	r3, r3, #3
 8014064:	440b      	add	r3, r1
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	4618      	mov	r0, r3
 801406a:	f003 f869 	bl	8017140 <pbuf_free>
      }
      arp_table[i].q = p;
 801406e:	7c7a      	ldrb	r2, [r7, #17]
 8014070:	490d      	ldr	r1, [pc, #52]	; (80140a8 <etharp_query+0x268>)
 8014072:	4613      	mov	r3, r2
 8014074:	005b      	lsls	r3, r3, #1
 8014076:	4413      	add	r3, r2
 8014078:	00db      	lsls	r3, r3, #3
 801407a:	440b      	add	r3, r1
 801407c:	69fa      	ldr	r2, [r7, #28]
 801407e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014080:	2300      	movs	r3, #0
 8014082:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014086:	e002      	b.n	801408e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014088:	23ff      	movs	r3, #255	; 0xff
 801408a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801408e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014092:	4618      	mov	r0, r3
 8014094:	3728      	adds	r7, #40	; 0x28
 8014096:	46bd      	mov	sp, r7
 8014098:	bd80      	pop	{r7, pc}
 801409a:	bf00      	nop
 801409c:	08025e9c 	.word	0x08025e9c
 80140a0:	08026074 	.word	0x08026074
 80140a4:	08025f40 	.word	0x08025f40
 80140a8:	24004770 	.word	0x24004770
 80140ac:	08026084 	.word	0x08026084
 80140b0:	08026068 	.word	0x08026068
 80140b4:	24004860 	.word	0x24004860
 80140b8:	080260ac 	.word	0x080260ac

080140bc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80140bc:	b580      	push	{r7, lr}
 80140be:	b08a      	sub	sp, #40	; 0x28
 80140c0:	af02      	add	r7, sp, #8
 80140c2:	60f8      	str	r0, [r7, #12]
 80140c4:	60b9      	str	r1, [r7, #8]
 80140c6:	607a      	str	r2, [r7, #4]
 80140c8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80140ca:	2300      	movs	r3, #0
 80140cc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d106      	bne.n	80140e2 <etharp_raw+0x26>
 80140d4:	4b3a      	ldr	r3, [pc, #232]	; (80141c0 <etharp_raw+0x104>)
 80140d6:	f240 4257 	movw	r2, #1111	; 0x457
 80140da:	493a      	ldr	r1, [pc, #232]	; (80141c4 <etharp_raw+0x108>)
 80140dc:	483a      	ldr	r0, [pc, #232]	; (80141c8 <etharp_raw+0x10c>)
 80140de:	f00c fec5 	bl	8020e6c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80140e2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80140e6:	211c      	movs	r1, #28
 80140e8:	200e      	movs	r0, #14
 80140ea:	f002 fd45 	bl	8016b78 <pbuf_alloc>
 80140ee:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80140f0:	69bb      	ldr	r3, [r7, #24]
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d102      	bne.n	80140fc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80140f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80140fa:	e05d      	b.n	80141b8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80140fc:	69bb      	ldr	r3, [r7, #24]
 80140fe:	895b      	ldrh	r3, [r3, #10]
 8014100:	2b1b      	cmp	r3, #27
 8014102:	d806      	bhi.n	8014112 <etharp_raw+0x56>
 8014104:	4b2e      	ldr	r3, [pc, #184]	; (80141c0 <etharp_raw+0x104>)
 8014106:	f240 4262 	movw	r2, #1122	; 0x462
 801410a:	4930      	ldr	r1, [pc, #192]	; (80141cc <etharp_raw+0x110>)
 801410c:	482e      	ldr	r0, [pc, #184]	; (80141c8 <etharp_raw+0x10c>)
 801410e:	f00c fead 	bl	8020e6c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014112:	69bb      	ldr	r3, [r7, #24]
 8014114:	685b      	ldr	r3, [r3, #4]
 8014116:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014118:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801411a:	4618      	mov	r0, r3
 801411c:	f7ff f914 	bl	8013348 <lwip_htons>
 8014120:	4603      	mov	r3, r0
 8014122:	461a      	mov	r2, r3
 8014124:	697b      	ldr	r3, [r7, #20]
 8014126:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014128:	68fb      	ldr	r3, [r7, #12]
 801412a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801412e:	2b06      	cmp	r3, #6
 8014130:	d006      	beq.n	8014140 <etharp_raw+0x84>
 8014132:	4b23      	ldr	r3, [pc, #140]	; (80141c0 <etharp_raw+0x104>)
 8014134:	f240 4269 	movw	r2, #1129	; 0x469
 8014138:	4925      	ldr	r1, [pc, #148]	; (80141d0 <etharp_raw+0x114>)
 801413a:	4823      	ldr	r0, [pc, #140]	; (80141c8 <etharp_raw+0x10c>)
 801413c:	f00c fe96 	bl	8020e6c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014140:	697b      	ldr	r3, [r7, #20]
 8014142:	3308      	adds	r3, #8
 8014144:	2206      	movs	r2, #6
 8014146:	6839      	ldr	r1, [r7, #0]
 8014148:	4618      	mov	r0, r3
 801414a:	f00b ff6d 	bl	8020028 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801414e:	697b      	ldr	r3, [r7, #20]
 8014150:	3312      	adds	r3, #18
 8014152:	2206      	movs	r2, #6
 8014154:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014156:	4618      	mov	r0, r3
 8014158:	f00b ff66 	bl	8020028 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801415c:	697b      	ldr	r3, [r7, #20]
 801415e:	330e      	adds	r3, #14
 8014160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014162:	6812      	ldr	r2, [r2, #0]
 8014164:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014166:	697b      	ldr	r3, [r7, #20]
 8014168:	3318      	adds	r3, #24
 801416a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801416c:	6812      	ldr	r2, [r2, #0]
 801416e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014170:	697b      	ldr	r3, [r7, #20]
 8014172:	2200      	movs	r2, #0
 8014174:	701a      	strb	r2, [r3, #0]
 8014176:	2200      	movs	r2, #0
 8014178:	f042 0201 	orr.w	r2, r2, #1
 801417c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801417e:	697b      	ldr	r3, [r7, #20]
 8014180:	2200      	movs	r2, #0
 8014182:	f042 0208 	orr.w	r2, r2, #8
 8014186:	709a      	strb	r2, [r3, #2]
 8014188:	2200      	movs	r2, #0
 801418a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801418c:	697b      	ldr	r3, [r7, #20]
 801418e:	2206      	movs	r2, #6
 8014190:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014192:	697b      	ldr	r3, [r7, #20]
 8014194:	2204      	movs	r2, #4
 8014196:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014198:	f640 0306 	movw	r3, #2054	; 0x806
 801419c:	9300      	str	r3, [sp, #0]
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	68ba      	ldr	r2, [r7, #8]
 80141a2:	69b9      	ldr	r1, [r7, #24]
 80141a4:	68f8      	ldr	r0, [r7, #12]
 80141a6:	f000 f8d7 	bl	8014358 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80141aa:	69b8      	ldr	r0, [r7, #24]
 80141ac:	f002 ffc8 	bl	8017140 <pbuf_free>
  p = NULL;
 80141b0:	2300      	movs	r3, #0
 80141b2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80141b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80141b8:	4618      	mov	r0, r3
 80141ba:	3720      	adds	r7, #32
 80141bc:	46bd      	mov	sp, r7
 80141be:	bd80      	pop	{r7, pc}
 80141c0:	08025e9c 	.word	0x08025e9c
 80141c4:	08026018 	.word	0x08026018
 80141c8:	08025f40 	.word	0x08025f40
 80141cc:	080260c8 	.word	0x080260c8
 80141d0:	080260fc 	.word	0x080260fc

080141d4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80141d4:	b580      	push	{r7, lr}
 80141d6:	b088      	sub	sp, #32
 80141d8:	af04      	add	r7, sp, #16
 80141da:	60f8      	str	r0, [r7, #12]
 80141dc:	60b9      	str	r1, [r7, #8]
 80141de:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80141e0:	68fb      	ldr	r3, [r7, #12]
 80141e2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80141e6:	68fb      	ldr	r3, [r7, #12]
 80141e8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80141f0:	2201      	movs	r2, #1
 80141f2:	9203      	str	r2, [sp, #12]
 80141f4:	68ba      	ldr	r2, [r7, #8]
 80141f6:	9202      	str	r2, [sp, #8]
 80141f8:	4a06      	ldr	r2, [pc, #24]	; (8014214 <etharp_request_dst+0x40>)
 80141fa:	9201      	str	r2, [sp, #4]
 80141fc:	9300      	str	r3, [sp, #0]
 80141fe:	4603      	mov	r3, r0
 8014200:	687a      	ldr	r2, [r7, #4]
 8014202:	68f8      	ldr	r0, [r7, #12]
 8014204:	f7ff ff5a 	bl	80140bc <etharp_raw>
 8014208:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801420a:	4618      	mov	r0, r3
 801420c:	3710      	adds	r7, #16
 801420e:	46bd      	mov	sp, r7
 8014210:	bd80      	pop	{r7, pc}
 8014212:	bf00      	nop
 8014214:	08029114 	.word	0x08029114

08014218 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014218:	b580      	push	{r7, lr}
 801421a:	b082      	sub	sp, #8
 801421c:	af00      	add	r7, sp, #0
 801421e:	6078      	str	r0, [r7, #4]
 8014220:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014222:	4a05      	ldr	r2, [pc, #20]	; (8014238 <etharp_request+0x20>)
 8014224:	6839      	ldr	r1, [r7, #0]
 8014226:	6878      	ldr	r0, [r7, #4]
 8014228:	f7ff ffd4 	bl	80141d4 <etharp_request_dst>
 801422c:	4603      	mov	r3, r0
}
 801422e:	4618      	mov	r0, r3
 8014230:	3708      	adds	r7, #8
 8014232:	46bd      	mov	sp, r7
 8014234:	bd80      	pop	{r7, pc}
 8014236:	bf00      	nop
 8014238:	0802910c 	.word	0x0802910c

0801423c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801423c:	b580      	push	{r7, lr}
 801423e:	b086      	sub	sp, #24
 8014240:	af00      	add	r7, sp, #0
 8014242:	6078      	str	r0, [r7, #4]
 8014244:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8014246:	230e      	movs	r3, #14
 8014248:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	895b      	ldrh	r3, [r3, #10]
 801424e:	2b0e      	cmp	r3, #14
 8014250:	d96e      	bls.n	8014330 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	7bdb      	ldrb	r3, [r3, #15]
 8014256:	2b00      	cmp	r3, #0
 8014258:	d106      	bne.n	8014268 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801425a:	683b      	ldr	r3, [r7, #0]
 801425c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014260:	3301      	adds	r3, #1
 8014262:	b2da      	uxtb	r2, r3
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	685b      	ldr	r3, [r3, #4]
 801426c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801426e:	693b      	ldr	r3, [r7, #16]
 8014270:	7b1a      	ldrb	r2, [r3, #12]
 8014272:	7b5b      	ldrb	r3, [r3, #13]
 8014274:	021b      	lsls	r3, r3, #8
 8014276:	4313      	orrs	r3, r2
 8014278:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801427a:	693b      	ldr	r3, [r7, #16]
 801427c:	781b      	ldrb	r3, [r3, #0]
 801427e:	f003 0301 	and.w	r3, r3, #1
 8014282:	2b00      	cmp	r3, #0
 8014284:	d023      	beq.n	80142ce <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8014286:	693b      	ldr	r3, [r7, #16]
 8014288:	781b      	ldrb	r3, [r3, #0]
 801428a:	2b01      	cmp	r3, #1
 801428c:	d10f      	bne.n	80142ae <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801428e:	693b      	ldr	r3, [r7, #16]
 8014290:	785b      	ldrb	r3, [r3, #1]
 8014292:	2b00      	cmp	r3, #0
 8014294:	d11b      	bne.n	80142ce <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8014296:	693b      	ldr	r3, [r7, #16]
 8014298:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801429a:	2b5e      	cmp	r3, #94	; 0x5e
 801429c:	d117      	bne.n	80142ce <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	7b5b      	ldrb	r3, [r3, #13]
 80142a2:	f043 0310 	orr.w	r3, r3, #16
 80142a6:	b2da      	uxtb	r2, r3
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	735a      	strb	r2, [r3, #13]
 80142ac:	e00f      	b.n	80142ce <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80142ae:	693b      	ldr	r3, [r7, #16]
 80142b0:	2206      	movs	r2, #6
 80142b2:	4928      	ldr	r1, [pc, #160]	; (8014354 <ethernet_input+0x118>)
 80142b4:	4618      	mov	r0, r3
 80142b6:	f00b fea9 	bl	802000c <memcmp>
 80142ba:	4603      	mov	r3, r0
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d106      	bne.n	80142ce <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	7b5b      	ldrb	r3, [r3, #13]
 80142c4:	f043 0308 	orr.w	r3, r3, #8
 80142c8:	b2da      	uxtb	r2, r3
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80142ce:	89fb      	ldrh	r3, [r7, #14]
 80142d0:	2b08      	cmp	r3, #8
 80142d2:	d003      	beq.n	80142dc <ethernet_input+0xa0>
 80142d4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80142d8:	d014      	beq.n	8014304 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80142da:	e032      	b.n	8014342 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80142dc:	683b      	ldr	r3, [r7, #0]
 80142de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80142e2:	f003 0308 	and.w	r3, r3, #8
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d024      	beq.n	8014334 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80142ea:	8afb      	ldrh	r3, [r7, #22]
 80142ec:	4619      	mov	r1, r3
 80142ee:	6878      	ldr	r0, [r7, #4]
 80142f0:	f002 fea0 	bl	8017034 <pbuf_remove_header>
 80142f4:	4603      	mov	r3, r0
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d11e      	bne.n	8014338 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80142fa:	6839      	ldr	r1, [r7, #0]
 80142fc:	6878      	ldr	r0, [r7, #4]
 80142fe:	f000 fb93 	bl	8014a28 <ip4_input>
      break;
 8014302:	e013      	b.n	801432c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014304:	683b      	ldr	r3, [r7, #0]
 8014306:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801430a:	f003 0308 	and.w	r3, r3, #8
 801430e:	2b00      	cmp	r3, #0
 8014310:	d014      	beq.n	801433c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014312:	8afb      	ldrh	r3, [r7, #22]
 8014314:	4619      	mov	r1, r3
 8014316:	6878      	ldr	r0, [r7, #4]
 8014318:	f002 fe8c 	bl	8017034 <pbuf_remove_header>
 801431c:	4603      	mov	r3, r0
 801431e:	2b00      	cmp	r3, #0
 8014320:	d10e      	bne.n	8014340 <ethernet_input+0x104>
        etharp_input(p, netif);
 8014322:	6839      	ldr	r1, [r7, #0]
 8014324:	6878      	ldr	r0, [r7, #4]
 8014326:	f7ff fb65 	bl	80139f4 <etharp_input>
      break;
 801432a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801432c:	2300      	movs	r3, #0
 801432e:	e00c      	b.n	801434a <ethernet_input+0x10e>
    goto free_and_return;
 8014330:	bf00      	nop
 8014332:	e006      	b.n	8014342 <ethernet_input+0x106>
        goto free_and_return;
 8014334:	bf00      	nop
 8014336:	e004      	b.n	8014342 <ethernet_input+0x106>
        goto free_and_return;
 8014338:	bf00      	nop
 801433a:	e002      	b.n	8014342 <ethernet_input+0x106>
        goto free_and_return;
 801433c:	bf00      	nop
 801433e:	e000      	b.n	8014342 <ethernet_input+0x106>
        goto free_and_return;
 8014340:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8014342:	6878      	ldr	r0, [r7, #4]
 8014344:	f002 fefc 	bl	8017140 <pbuf_free>
  return ERR_OK;
 8014348:	2300      	movs	r3, #0
}
 801434a:	4618      	mov	r0, r3
 801434c:	3718      	adds	r7, #24
 801434e:	46bd      	mov	sp, r7
 8014350:	bd80      	pop	{r7, pc}
 8014352:	bf00      	nop
 8014354:	0802910c 	.word	0x0802910c

08014358 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014358:	b580      	push	{r7, lr}
 801435a:	b086      	sub	sp, #24
 801435c:	af00      	add	r7, sp, #0
 801435e:	60f8      	str	r0, [r7, #12]
 8014360:	60b9      	str	r1, [r7, #8]
 8014362:	607a      	str	r2, [r7, #4]
 8014364:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014366:	8c3b      	ldrh	r3, [r7, #32]
 8014368:	4618      	mov	r0, r3
 801436a:	f7fe ffed 	bl	8013348 <lwip_htons>
 801436e:	4603      	mov	r3, r0
 8014370:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014372:	210e      	movs	r1, #14
 8014374:	68b8      	ldr	r0, [r7, #8]
 8014376:	f002 fe4d 	bl	8017014 <pbuf_add_header>
 801437a:	4603      	mov	r3, r0
 801437c:	2b00      	cmp	r3, #0
 801437e:	d125      	bne.n	80143cc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014380:	68bb      	ldr	r3, [r7, #8]
 8014382:	685b      	ldr	r3, [r3, #4]
 8014384:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014386:	693b      	ldr	r3, [r7, #16]
 8014388:	8afa      	ldrh	r2, [r7, #22]
 801438a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801438c:	693b      	ldr	r3, [r7, #16]
 801438e:	2206      	movs	r2, #6
 8014390:	6839      	ldr	r1, [r7, #0]
 8014392:	4618      	mov	r0, r3
 8014394:	f00b fe48 	bl	8020028 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014398:	693b      	ldr	r3, [r7, #16]
 801439a:	3306      	adds	r3, #6
 801439c:	2206      	movs	r2, #6
 801439e:	6879      	ldr	r1, [r7, #4]
 80143a0:	4618      	mov	r0, r3
 80143a2:	f00b fe41 	bl	8020028 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80143ac:	2b06      	cmp	r3, #6
 80143ae:	d006      	beq.n	80143be <ethernet_output+0x66>
 80143b0:	4b0a      	ldr	r3, [pc, #40]	; (80143dc <ethernet_output+0x84>)
 80143b2:	f44f 7299 	mov.w	r2, #306	; 0x132
 80143b6:	490a      	ldr	r1, [pc, #40]	; (80143e0 <ethernet_output+0x88>)
 80143b8:	480a      	ldr	r0, [pc, #40]	; (80143e4 <ethernet_output+0x8c>)
 80143ba:	f00c fd57 	bl	8020e6c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	699b      	ldr	r3, [r3, #24]
 80143c2:	68b9      	ldr	r1, [r7, #8]
 80143c4:	68f8      	ldr	r0, [r7, #12]
 80143c6:	4798      	blx	r3
 80143c8:	4603      	mov	r3, r0
 80143ca:	e002      	b.n	80143d2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80143cc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80143ce:	f06f 0301 	mvn.w	r3, #1
}
 80143d2:	4618      	mov	r0, r3
 80143d4:	3718      	adds	r7, #24
 80143d6:	46bd      	mov	sp, r7
 80143d8:	bd80      	pop	{r7, pc}
 80143da:	bf00      	nop
 80143dc:	08026140 	.word	0x08026140
 80143e0:	080261a0 	.word	0x080261a0
 80143e4:	080261d4 	.word	0x080261d4

080143e8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80143e8:	b580      	push	{r7, lr}
 80143ea:	b08e      	sub	sp, #56	; 0x38
 80143ec:	af04      	add	r7, sp, #16
 80143ee:	6078      	str	r0, [r7, #4]
 80143f0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80143f2:	4b87      	ldr	r3, [pc, #540]	; (8014610 <icmp_input+0x228>)
 80143f4:	689b      	ldr	r3, [r3, #8]
 80143f6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80143f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143fa:	781b      	ldrb	r3, [r3, #0]
 80143fc:	f003 030f 	and.w	r3, r3, #15
 8014400:	b2db      	uxtb	r3, r3
 8014402:	009b      	lsls	r3, r3, #2
 8014404:	b2db      	uxtb	r3, r3
 8014406:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8014408:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801440a:	2b13      	cmp	r3, #19
 801440c:	f240 80e8 	bls.w	80145e0 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	895b      	ldrh	r3, [r3, #10]
 8014414:	2b03      	cmp	r3, #3
 8014416:	f240 80e5 	bls.w	80145e4 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	685b      	ldr	r3, [r3, #4]
 801441e:	781b      	ldrb	r3, [r3, #0]
 8014420:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014424:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014428:	2b00      	cmp	r3, #0
 801442a:	f000 80d2 	beq.w	80145d2 <icmp_input+0x1ea>
 801442e:	2b08      	cmp	r3, #8
 8014430:	f040 80d2 	bne.w	80145d8 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014434:	4b77      	ldr	r3, [pc, #476]	; (8014614 <icmp_input+0x22c>)
 8014436:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014438:	4b75      	ldr	r3, [pc, #468]	; (8014610 <icmp_input+0x228>)
 801443a:	695b      	ldr	r3, [r3, #20]
 801443c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014440:	2be0      	cmp	r3, #224	; 0xe0
 8014442:	f000 80d6 	beq.w	80145f2 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014446:	4b72      	ldr	r3, [pc, #456]	; (8014610 <icmp_input+0x228>)
 8014448:	695b      	ldr	r3, [r3, #20]
 801444a:	4a71      	ldr	r2, [pc, #452]	; (8014610 <icmp_input+0x228>)
 801444c:	6812      	ldr	r2, [r2, #0]
 801444e:	4611      	mov	r1, r2
 8014450:	4618      	mov	r0, r3
 8014452:	f000 fce5 	bl	8014e20 <ip4_addr_isbroadcast_u32>
 8014456:	4603      	mov	r3, r0
 8014458:	2b00      	cmp	r3, #0
 801445a:	f040 80cc 	bne.w	80145f6 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	891b      	ldrh	r3, [r3, #8]
 8014462:	2b07      	cmp	r3, #7
 8014464:	f240 80c0 	bls.w	80145e8 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8014468:	6878      	ldr	r0, [r7, #4]
 801446a:	f000 f9e0 	bl	801482e <inet_chksum_pbuf>
 801446e:	4603      	mov	r3, r0
 8014470:	2b00      	cmp	r3, #0
 8014472:	d003      	beq.n	801447c <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8014474:	6878      	ldr	r0, [r7, #4]
 8014476:	f002 fe63 	bl	8017140 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 801447a:	e0c5      	b.n	8014608 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801447c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801447e:	330e      	adds	r3, #14
 8014480:	4619      	mov	r1, r3
 8014482:	6878      	ldr	r0, [r7, #4]
 8014484:	f002 fdc6 	bl	8017014 <pbuf_add_header>
 8014488:	4603      	mov	r3, r0
 801448a:	2b00      	cmp	r3, #0
 801448c:	d04b      	beq.n	8014526 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	891a      	ldrh	r2, [r3, #8]
 8014492:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014494:	4413      	add	r3, r2
 8014496:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	891b      	ldrh	r3, [r3, #8]
 801449c:	8b7a      	ldrh	r2, [r7, #26]
 801449e:	429a      	cmp	r2, r3
 80144a0:	f0c0 80ab 	bcc.w	80145fa <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80144a4:	8b7b      	ldrh	r3, [r7, #26]
 80144a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80144aa:	4619      	mov	r1, r3
 80144ac:	200e      	movs	r0, #14
 80144ae:	f002 fb63 	bl	8016b78 <pbuf_alloc>
 80144b2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80144b4:	697b      	ldr	r3, [r7, #20]
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	f000 80a1 	beq.w	80145fe <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80144bc:	697b      	ldr	r3, [r7, #20]
 80144be:	895b      	ldrh	r3, [r3, #10]
 80144c0:	461a      	mov	r2, r3
 80144c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80144c4:	3308      	adds	r3, #8
 80144c6:	429a      	cmp	r2, r3
 80144c8:	d203      	bcs.n	80144d2 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80144ca:	6978      	ldr	r0, [r7, #20]
 80144cc:	f002 fe38 	bl	8017140 <pbuf_free>
          goto icmperr;
 80144d0:	e096      	b.n	8014600 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80144d2:	697b      	ldr	r3, [r7, #20]
 80144d4:	685b      	ldr	r3, [r3, #4]
 80144d6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80144d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80144da:	4618      	mov	r0, r3
 80144dc:	f00b fda4 	bl	8020028 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80144e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80144e2:	4619      	mov	r1, r3
 80144e4:	6978      	ldr	r0, [r7, #20]
 80144e6:	f002 fda5 	bl	8017034 <pbuf_remove_header>
 80144ea:	4603      	mov	r3, r0
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d009      	beq.n	8014504 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80144f0:	4b49      	ldr	r3, [pc, #292]	; (8014618 <icmp_input+0x230>)
 80144f2:	22b6      	movs	r2, #182	; 0xb6
 80144f4:	4949      	ldr	r1, [pc, #292]	; (801461c <icmp_input+0x234>)
 80144f6:	484a      	ldr	r0, [pc, #296]	; (8014620 <icmp_input+0x238>)
 80144f8:	f00c fcb8 	bl	8020e6c <iprintf>
          pbuf_free(r);
 80144fc:	6978      	ldr	r0, [r7, #20]
 80144fe:	f002 fe1f 	bl	8017140 <pbuf_free>
          goto icmperr;
 8014502:	e07d      	b.n	8014600 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014504:	6879      	ldr	r1, [r7, #4]
 8014506:	6978      	ldr	r0, [r7, #20]
 8014508:	f002 ff32 	bl	8017370 <pbuf_copy>
 801450c:	4603      	mov	r3, r0
 801450e:	2b00      	cmp	r3, #0
 8014510:	d003      	beq.n	801451a <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014512:	6978      	ldr	r0, [r7, #20]
 8014514:	f002 fe14 	bl	8017140 <pbuf_free>
          goto icmperr;
 8014518:	e072      	b.n	8014600 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 801451a:	6878      	ldr	r0, [r7, #4]
 801451c:	f002 fe10 	bl	8017140 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014520:	697b      	ldr	r3, [r7, #20]
 8014522:	607b      	str	r3, [r7, #4]
 8014524:	e00f      	b.n	8014546 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014526:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014528:	330e      	adds	r3, #14
 801452a:	4619      	mov	r1, r3
 801452c:	6878      	ldr	r0, [r7, #4]
 801452e:	f002 fd81 	bl	8017034 <pbuf_remove_header>
 8014532:	4603      	mov	r3, r0
 8014534:	2b00      	cmp	r3, #0
 8014536:	d006      	beq.n	8014546 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014538:	4b37      	ldr	r3, [pc, #220]	; (8014618 <icmp_input+0x230>)
 801453a:	22c7      	movs	r2, #199	; 0xc7
 801453c:	4939      	ldr	r1, [pc, #228]	; (8014624 <icmp_input+0x23c>)
 801453e:	4838      	ldr	r0, [pc, #224]	; (8014620 <icmp_input+0x238>)
 8014540:	f00c fc94 	bl	8020e6c <iprintf>
          goto icmperr;
 8014544:	e05c      	b.n	8014600 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	685b      	ldr	r3, [r3, #4]
 801454a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801454c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801454e:	4619      	mov	r1, r3
 8014550:	6878      	ldr	r0, [r7, #4]
 8014552:	f002 fd5f 	bl	8017014 <pbuf_add_header>
 8014556:	4603      	mov	r3, r0
 8014558:	2b00      	cmp	r3, #0
 801455a:	d13c      	bne.n	80145d6 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	685b      	ldr	r3, [r3, #4]
 8014560:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014562:	69fb      	ldr	r3, [r7, #28]
 8014564:	681a      	ldr	r2, [r3, #0]
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801456a:	4b29      	ldr	r3, [pc, #164]	; (8014610 <icmp_input+0x228>)
 801456c:	691a      	ldr	r2, [r3, #16]
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014572:	693b      	ldr	r3, [r7, #16]
 8014574:	2200      	movs	r2, #0
 8014576:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8014578:	693b      	ldr	r3, [r7, #16]
 801457a:	885b      	ldrh	r3, [r3, #2]
 801457c:	b29b      	uxth	r3, r3
 801457e:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8014582:	4293      	cmp	r3, r2
 8014584:	d907      	bls.n	8014596 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8014586:	693b      	ldr	r3, [r7, #16]
 8014588:	885b      	ldrh	r3, [r3, #2]
 801458a:	b29b      	uxth	r3, r3
 801458c:	3309      	adds	r3, #9
 801458e:	b29a      	uxth	r2, r3
 8014590:	693b      	ldr	r3, [r7, #16]
 8014592:	805a      	strh	r2, [r3, #2]
 8014594:	e006      	b.n	80145a4 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8014596:	693b      	ldr	r3, [r7, #16]
 8014598:	885b      	ldrh	r3, [r3, #2]
 801459a:	b29b      	uxth	r3, r3
 801459c:	3308      	adds	r3, #8
 801459e:	b29a      	uxth	r2, r3
 80145a0:	693b      	ldr	r3, [r7, #16]
 80145a2:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80145a4:	68fb      	ldr	r3, [r7, #12]
 80145a6:	22ff      	movs	r2, #255	; 0xff
 80145a8:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	2200      	movs	r2, #0
 80145ae:	729a      	strb	r2, [r3, #10]
 80145b0:	2200      	movs	r2, #0
 80145b2:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80145b4:	683b      	ldr	r3, [r7, #0]
 80145b6:	9302      	str	r3, [sp, #8]
 80145b8:	2301      	movs	r3, #1
 80145ba:	9301      	str	r3, [sp, #4]
 80145bc:	2300      	movs	r3, #0
 80145be:	9300      	str	r3, [sp, #0]
 80145c0:	23ff      	movs	r3, #255	; 0xff
 80145c2:	2200      	movs	r2, #0
 80145c4:	69f9      	ldr	r1, [r7, #28]
 80145c6:	6878      	ldr	r0, [r7, #4]
 80145c8:	f000 fb52 	bl	8014c70 <ip4_output_if>
 80145cc:	4603      	mov	r3, r0
 80145ce:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80145d0:	e001      	b.n	80145d6 <icmp_input+0x1ee>
      break;
 80145d2:	bf00      	nop
 80145d4:	e000      	b.n	80145d8 <icmp_input+0x1f0>
      break;
 80145d6:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80145d8:	6878      	ldr	r0, [r7, #4]
 80145da:	f002 fdb1 	bl	8017140 <pbuf_free>
  return;
 80145de:	e013      	b.n	8014608 <icmp_input+0x220>
    goto lenerr;
 80145e0:	bf00      	nop
 80145e2:	e002      	b.n	80145ea <icmp_input+0x202>
    goto lenerr;
 80145e4:	bf00      	nop
 80145e6:	e000      	b.n	80145ea <icmp_input+0x202>
        goto lenerr;
 80145e8:	bf00      	nop
lenerr:
  pbuf_free(p);
 80145ea:	6878      	ldr	r0, [r7, #4]
 80145ec:	f002 fda8 	bl	8017140 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80145f0:	e00a      	b.n	8014608 <icmp_input+0x220>
        goto icmperr;
 80145f2:	bf00      	nop
 80145f4:	e004      	b.n	8014600 <icmp_input+0x218>
        goto icmperr;
 80145f6:	bf00      	nop
 80145f8:	e002      	b.n	8014600 <icmp_input+0x218>
          goto icmperr;
 80145fa:	bf00      	nop
 80145fc:	e000      	b.n	8014600 <icmp_input+0x218>
          goto icmperr;
 80145fe:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014600:	6878      	ldr	r0, [r7, #4]
 8014602:	f002 fd9d 	bl	8017140 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014606:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014608:	3728      	adds	r7, #40	; 0x28
 801460a:	46bd      	mov	sp, r7
 801460c:	bd80      	pop	{r7, pc}
 801460e:	bf00      	nop
 8014610:	240053c8 	.word	0x240053c8
 8014614:	240053dc 	.word	0x240053dc
 8014618:	080261fc 	.word	0x080261fc
 801461c:	0802625c 	.word	0x0802625c
 8014620:	08026294 	.word	0x08026294
 8014624:	080262bc 	.word	0x080262bc

08014628 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014628:	b580      	push	{r7, lr}
 801462a:	b082      	sub	sp, #8
 801462c:	af00      	add	r7, sp, #0
 801462e:	6078      	str	r0, [r7, #4]
 8014630:	460b      	mov	r3, r1
 8014632:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014634:	78fb      	ldrb	r3, [r7, #3]
 8014636:	461a      	mov	r2, r3
 8014638:	2103      	movs	r1, #3
 801463a:	6878      	ldr	r0, [r7, #4]
 801463c:	f000 f814 	bl	8014668 <icmp_send_response>
}
 8014640:	bf00      	nop
 8014642:	3708      	adds	r7, #8
 8014644:	46bd      	mov	sp, r7
 8014646:	bd80      	pop	{r7, pc}

08014648 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014648:	b580      	push	{r7, lr}
 801464a:	b082      	sub	sp, #8
 801464c:	af00      	add	r7, sp, #0
 801464e:	6078      	str	r0, [r7, #4]
 8014650:	460b      	mov	r3, r1
 8014652:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014654:	78fb      	ldrb	r3, [r7, #3]
 8014656:	461a      	mov	r2, r3
 8014658:	210b      	movs	r1, #11
 801465a:	6878      	ldr	r0, [r7, #4]
 801465c:	f000 f804 	bl	8014668 <icmp_send_response>
}
 8014660:	bf00      	nop
 8014662:	3708      	adds	r7, #8
 8014664:	46bd      	mov	sp, r7
 8014666:	bd80      	pop	{r7, pc}

08014668 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014668:	b580      	push	{r7, lr}
 801466a:	b08c      	sub	sp, #48	; 0x30
 801466c:	af04      	add	r7, sp, #16
 801466e:	6078      	str	r0, [r7, #4]
 8014670:	460b      	mov	r3, r1
 8014672:	70fb      	strb	r3, [r7, #3]
 8014674:	4613      	mov	r3, r2
 8014676:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014678:	f44f 7220 	mov.w	r2, #640	; 0x280
 801467c:	2124      	movs	r1, #36	; 0x24
 801467e:	2022      	movs	r0, #34	; 0x22
 8014680:	f002 fa7a 	bl	8016b78 <pbuf_alloc>
 8014684:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014686:	69fb      	ldr	r3, [r7, #28]
 8014688:	2b00      	cmp	r3, #0
 801468a:	d056      	beq.n	801473a <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801468c:	69fb      	ldr	r3, [r7, #28]
 801468e:	895b      	ldrh	r3, [r3, #10]
 8014690:	2b23      	cmp	r3, #35	; 0x23
 8014692:	d806      	bhi.n	80146a2 <icmp_send_response+0x3a>
 8014694:	4b2b      	ldr	r3, [pc, #172]	; (8014744 <icmp_send_response+0xdc>)
 8014696:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801469a:	492b      	ldr	r1, [pc, #172]	; (8014748 <icmp_send_response+0xe0>)
 801469c:	482b      	ldr	r0, [pc, #172]	; (801474c <icmp_send_response+0xe4>)
 801469e:	f00c fbe5 	bl	8020e6c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	685b      	ldr	r3, [r3, #4]
 80146a6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80146a8:	69fb      	ldr	r3, [r7, #28]
 80146aa:	685b      	ldr	r3, [r3, #4]
 80146ac:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80146ae:	697b      	ldr	r3, [r7, #20]
 80146b0:	78fa      	ldrb	r2, [r7, #3]
 80146b2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80146b4:	697b      	ldr	r3, [r7, #20]
 80146b6:	78ba      	ldrb	r2, [r7, #2]
 80146b8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80146ba:	697b      	ldr	r3, [r7, #20]
 80146bc:	2200      	movs	r2, #0
 80146be:	711a      	strb	r2, [r3, #4]
 80146c0:	2200      	movs	r2, #0
 80146c2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80146c4:	697b      	ldr	r3, [r7, #20]
 80146c6:	2200      	movs	r2, #0
 80146c8:	719a      	strb	r2, [r3, #6]
 80146ca:	2200      	movs	r2, #0
 80146cc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80146ce:	69fb      	ldr	r3, [r7, #28]
 80146d0:	685b      	ldr	r3, [r3, #4]
 80146d2:	f103 0008 	add.w	r0, r3, #8
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	685b      	ldr	r3, [r3, #4]
 80146da:	221c      	movs	r2, #28
 80146dc:	4619      	mov	r1, r3
 80146de:	f00b fca3 	bl	8020028 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80146e2:	69bb      	ldr	r3, [r7, #24]
 80146e4:	68db      	ldr	r3, [r3, #12]
 80146e6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80146e8:	f107 030c 	add.w	r3, r7, #12
 80146ec:	4618      	mov	r0, r3
 80146ee:	f000 f901 	bl	80148f4 <ip4_route>
 80146f2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80146f4:	693b      	ldr	r3, [r7, #16]
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d01b      	beq.n	8014732 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80146fa:	697b      	ldr	r3, [r7, #20]
 80146fc:	2200      	movs	r2, #0
 80146fe:	709a      	strb	r2, [r3, #2]
 8014700:	2200      	movs	r2, #0
 8014702:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8014704:	69fb      	ldr	r3, [r7, #28]
 8014706:	895b      	ldrh	r3, [r3, #10]
 8014708:	4619      	mov	r1, r3
 801470a:	6978      	ldr	r0, [r7, #20]
 801470c:	f000 f87d 	bl	801480a <inet_chksum>
 8014710:	4603      	mov	r3, r0
 8014712:	461a      	mov	r2, r3
 8014714:	697b      	ldr	r3, [r7, #20]
 8014716:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014718:	f107 020c 	add.w	r2, r7, #12
 801471c:	693b      	ldr	r3, [r7, #16]
 801471e:	9302      	str	r3, [sp, #8]
 8014720:	2301      	movs	r3, #1
 8014722:	9301      	str	r3, [sp, #4]
 8014724:	2300      	movs	r3, #0
 8014726:	9300      	str	r3, [sp, #0]
 8014728:	23ff      	movs	r3, #255	; 0xff
 801472a:	2100      	movs	r1, #0
 801472c:	69f8      	ldr	r0, [r7, #28]
 801472e:	f000 fa9f 	bl	8014c70 <ip4_output_if>
  }
  pbuf_free(q);
 8014732:	69f8      	ldr	r0, [r7, #28]
 8014734:	f002 fd04 	bl	8017140 <pbuf_free>
 8014738:	e000      	b.n	801473c <icmp_send_response+0xd4>
    return;
 801473a:	bf00      	nop
}
 801473c:	3720      	adds	r7, #32
 801473e:	46bd      	mov	sp, r7
 8014740:	bd80      	pop	{r7, pc}
 8014742:	bf00      	nop
 8014744:	080261fc 	.word	0x080261fc
 8014748:	080262f0 	.word	0x080262f0
 801474c:	08026294 	.word	0x08026294

08014750 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8014750:	b480      	push	{r7}
 8014752:	b089      	sub	sp, #36	; 0x24
 8014754:	af00      	add	r7, sp, #0
 8014756:	6078      	str	r0, [r7, #4]
 8014758:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 801475e:	2300      	movs	r3, #0
 8014760:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8014762:	2300      	movs	r3, #0
 8014764:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8014766:	69fb      	ldr	r3, [r7, #28]
 8014768:	f003 0301 	and.w	r3, r3, #1
 801476c:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 801476e:	693b      	ldr	r3, [r7, #16]
 8014770:	2b00      	cmp	r3, #0
 8014772:	d00d      	beq.n	8014790 <lwip_standard_chksum+0x40>
 8014774:	683b      	ldr	r3, [r7, #0]
 8014776:	2b00      	cmp	r3, #0
 8014778:	dd0a      	ble.n	8014790 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 801477a:	69fa      	ldr	r2, [r7, #28]
 801477c:	1c53      	adds	r3, r2, #1
 801477e:	61fb      	str	r3, [r7, #28]
 8014780:	f107 030e 	add.w	r3, r7, #14
 8014784:	3301      	adds	r3, #1
 8014786:	7812      	ldrb	r2, [r2, #0]
 8014788:	701a      	strb	r2, [r3, #0]
    len--;
 801478a:	683b      	ldr	r3, [r7, #0]
 801478c:	3b01      	subs	r3, #1
 801478e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8014790:	69fb      	ldr	r3, [r7, #28]
 8014792:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8014794:	e00a      	b.n	80147ac <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8014796:	69bb      	ldr	r3, [r7, #24]
 8014798:	1c9a      	adds	r2, r3, #2
 801479a:	61ba      	str	r2, [r7, #24]
 801479c:	881b      	ldrh	r3, [r3, #0]
 801479e:	461a      	mov	r2, r3
 80147a0:	697b      	ldr	r3, [r7, #20]
 80147a2:	4413      	add	r3, r2
 80147a4:	617b      	str	r3, [r7, #20]
    len -= 2;
 80147a6:	683b      	ldr	r3, [r7, #0]
 80147a8:	3b02      	subs	r3, #2
 80147aa:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 80147ac:	683b      	ldr	r3, [r7, #0]
 80147ae:	2b01      	cmp	r3, #1
 80147b0:	dcf1      	bgt.n	8014796 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80147b2:	683b      	ldr	r3, [r7, #0]
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	dd04      	ble.n	80147c2 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80147b8:	f107 030e 	add.w	r3, r7, #14
 80147bc:	69ba      	ldr	r2, [r7, #24]
 80147be:	7812      	ldrb	r2, [r2, #0]
 80147c0:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 80147c2:	89fb      	ldrh	r3, [r7, #14]
 80147c4:	461a      	mov	r2, r3
 80147c6:	697b      	ldr	r3, [r7, #20]
 80147c8:	4413      	add	r3, r2
 80147ca:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80147cc:	697b      	ldr	r3, [r7, #20]
 80147ce:	0c1a      	lsrs	r2, r3, #16
 80147d0:	697b      	ldr	r3, [r7, #20]
 80147d2:	b29b      	uxth	r3, r3
 80147d4:	4413      	add	r3, r2
 80147d6:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 80147d8:	697b      	ldr	r3, [r7, #20]
 80147da:	0c1a      	lsrs	r2, r3, #16
 80147dc:	697b      	ldr	r3, [r7, #20]
 80147de:	b29b      	uxth	r3, r3
 80147e0:	4413      	add	r3, r2
 80147e2:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 80147e4:	693b      	ldr	r3, [r7, #16]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d007      	beq.n	80147fa <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 80147ea:	697b      	ldr	r3, [r7, #20]
 80147ec:	021b      	lsls	r3, r3, #8
 80147ee:	b29a      	uxth	r2, r3
 80147f0:	697b      	ldr	r3, [r7, #20]
 80147f2:	0a1b      	lsrs	r3, r3, #8
 80147f4:	b2db      	uxtb	r3, r3
 80147f6:	4313      	orrs	r3, r2
 80147f8:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 80147fa:	697b      	ldr	r3, [r7, #20]
 80147fc:	b29b      	uxth	r3, r3
}
 80147fe:	4618      	mov	r0, r3
 8014800:	3724      	adds	r7, #36	; 0x24
 8014802:	46bd      	mov	sp, r7
 8014804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014808:	4770      	bx	lr

0801480a <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 801480a:	b580      	push	{r7, lr}
 801480c:	b082      	sub	sp, #8
 801480e:	af00      	add	r7, sp, #0
 8014810:	6078      	str	r0, [r7, #4]
 8014812:	460b      	mov	r3, r1
 8014814:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8014816:	887b      	ldrh	r3, [r7, #2]
 8014818:	4619      	mov	r1, r3
 801481a:	6878      	ldr	r0, [r7, #4]
 801481c:	f7ff ff98 	bl	8014750 <lwip_standard_chksum>
 8014820:	4603      	mov	r3, r0
 8014822:	43db      	mvns	r3, r3
 8014824:	b29b      	uxth	r3, r3
}
 8014826:	4618      	mov	r0, r3
 8014828:	3708      	adds	r7, #8
 801482a:	46bd      	mov	sp, r7
 801482c:	bd80      	pop	{r7, pc}

0801482e <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 801482e:	b580      	push	{r7, lr}
 8014830:	b086      	sub	sp, #24
 8014832:	af00      	add	r7, sp, #0
 8014834:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8014836:	2300      	movs	r3, #0
 8014838:	60fb      	str	r3, [r7, #12]

  acc = 0;
 801483a:	2300      	movs	r3, #0
 801483c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	613b      	str	r3, [r7, #16]
 8014842:	e02b      	b.n	801489c <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8014844:	693b      	ldr	r3, [r7, #16]
 8014846:	685a      	ldr	r2, [r3, #4]
 8014848:	693b      	ldr	r3, [r7, #16]
 801484a:	895b      	ldrh	r3, [r3, #10]
 801484c:	4619      	mov	r1, r3
 801484e:	4610      	mov	r0, r2
 8014850:	f7ff ff7e 	bl	8014750 <lwip_standard_chksum>
 8014854:	4603      	mov	r3, r0
 8014856:	461a      	mov	r2, r3
 8014858:	697b      	ldr	r3, [r7, #20]
 801485a:	4413      	add	r3, r2
 801485c:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 801485e:	697b      	ldr	r3, [r7, #20]
 8014860:	0c1a      	lsrs	r2, r3, #16
 8014862:	697b      	ldr	r3, [r7, #20]
 8014864:	b29b      	uxth	r3, r3
 8014866:	4413      	add	r3, r2
 8014868:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 801486a:	693b      	ldr	r3, [r7, #16]
 801486c:	895b      	ldrh	r3, [r3, #10]
 801486e:	f003 0301 	and.w	r3, r3, #1
 8014872:	b29b      	uxth	r3, r3
 8014874:	2b00      	cmp	r3, #0
 8014876:	d00e      	beq.n	8014896 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	2b00      	cmp	r3, #0
 801487c:	bf0c      	ite	eq
 801487e:	2301      	moveq	r3, #1
 8014880:	2300      	movne	r3, #0
 8014882:	b2db      	uxtb	r3, r3
 8014884:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8014886:	697b      	ldr	r3, [r7, #20]
 8014888:	021b      	lsls	r3, r3, #8
 801488a:	b29a      	uxth	r2, r3
 801488c:	697b      	ldr	r3, [r7, #20]
 801488e:	0a1b      	lsrs	r3, r3, #8
 8014890:	b2db      	uxtb	r3, r3
 8014892:	4313      	orrs	r3, r2
 8014894:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8014896:	693b      	ldr	r3, [r7, #16]
 8014898:	681b      	ldr	r3, [r3, #0]
 801489a:	613b      	str	r3, [r7, #16]
 801489c:	693b      	ldr	r3, [r7, #16]
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d1d0      	bne.n	8014844 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d007      	beq.n	80148b8 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 80148a8:	697b      	ldr	r3, [r7, #20]
 80148aa:	021b      	lsls	r3, r3, #8
 80148ac:	b29a      	uxth	r2, r3
 80148ae:	697b      	ldr	r3, [r7, #20]
 80148b0:	0a1b      	lsrs	r3, r3, #8
 80148b2:	b2db      	uxtb	r3, r3
 80148b4:	4313      	orrs	r3, r2
 80148b6:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 80148b8:	697b      	ldr	r3, [r7, #20]
 80148ba:	b29b      	uxth	r3, r3
 80148bc:	43db      	mvns	r3, r3
 80148be:	b29b      	uxth	r3, r3
}
 80148c0:	4618      	mov	r0, r3
 80148c2:	3718      	adds	r7, #24
 80148c4:	46bd      	mov	sp, r7
 80148c6:	bd80      	pop	{r7, pc}

080148c8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80148c8:	b580      	push	{r7, lr}
 80148ca:	b082      	sub	sp, #8
 80148cc:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80148ce:	2300      	movs	r3, #0
 80148d0:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80148d2:	f001 f9e5 	bl	8015ca0 <mem_init>
  memp_init();
 80148d6:	f001 fce7 	bl	80162a8 <memp_init>
  pbuf_init();
  netif_init();
 80148da:	f001 fde5 	bl	80164a8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80148de:	f009 fa0f 	bl	801dd00 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80148e2:	f002 ff73 	bl	80177cc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80148e6:	f009 f981 	bl	801dbec <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80148ea:	bf00      	nop
 80148ec:	3708      	adds	r7, #8
 80148ee:	46bd      	mov	sp, r7
 80148f0:	bd80      	pop	{r7, pc}
	...

080148f4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80148f4:	b480      	push	{r7}
 80148f6:	b085      	sub	sp, #20
 80148f8:	af00      	add	r7, sp, #0
 80148fa:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80148fc:	4b33      	ldr	r3, [pc, #204]	; (80149cc <ip4_route+0xd8>)
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	60fb      	str	r3, [r7, #12]
 8014902:	e036      	b.n	8014972 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801490a:	f003 0301 	and.w	r3, r3, #1
 801490e:	b2db      	uxtb	r3, r3
 8014910:	2b00      	cmp	r3, #0
 8014912:	d02b      	beq.n	801496c <ip4_route+0x78>
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801491a:	089b      	lsrs	r3, r3, #2
 801491c:	f003 0301 	and.w	r3, r3, #1
 8014920:	b2db      	uxtb	r3, r3
 8014922:	2b00      	cmp	r3, #0
 8014924:	d022      	beq.n	801496c <ip4_route+0x78>
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	3304      	adds	r3, #4
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	2b00      	cmp	r3, #0
 801492e:	d01d      	beq.n	801496c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	681a      	ldr	r2, [r3, #0]
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	3304      	adds	r3, #4
 8014938:	681b      	ldr	r3, [r3, #0]
 801493a:	405a      	eors	r2, r3
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	3308      	adds	r3, #8
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	4013      	ands	r3, r2
 8014944:	2b00      	cmp	r3, #0
 8014946:	d101      	bne.n	801494c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	e038      	b.n	80149be <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014952:	f003 0302 	and.w	r3, r3, #2
 8014956:	2b00      	cmp	r3, #0
 8014958:	d108      	bne.n	801496c <ip4_route+0x78>
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	681a      	ldr	r2, [r3, #0]
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	330c      	adds	r3, #12
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	429a      	cmp	r2, r3
 8014966:	d101      	bne.n	801496c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	e028      	b.n	80149be <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	60fb      	str	r3, [r7, #12]
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	2b00      	cmp	r3, #0
 8014976:	d1c5      	bne.n	8014904 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014978:	4b15      	ldr	r3, [pc, #84]	; (80149d0 <ip4_route+0xdc>)
 801497a:	681b      	ldr	r3, [r3, #0]
 801497c:	2b00      	cmp	r3, #0
 801497e:	d01a      	beq.n	80149b6 <ip4_route+0xc2>
 8014980:	4b13      	ldr	r3, [pc, #76]	; (80149d0 <ip4_route+0xdc>)
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014988:	f003 0301 	and.w	r3, r3, #1
 801498c:	2b00      	cmp	r3, #0
 801498e:	d012      	beq.n	80149b6 <ip4_route+0xc2>
 8014990:	4b0f      	ldr	r3, [pc, #60]	; (80149d0 <ip4_route+0xdc>)
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014998:	f003 0304 	and.w	r3, r3, #4
 801499c:	2b00      	cmp	r3, #0
 801499e:	d00a      	beq.n	80149b6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80149a0:	4b0b      	ldr	r3, [pc, #44]	; (80149d0 <ip4_route+0xdc>)
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	3304      	adds	r3, #4
 80149a6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d004      	beq.n	80149b6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	b2db      	uxtb	r3, r3
 80149b2:	2b7f      	cmp	r3, #127	; 0x7f
 80149b4:	d101      	bne.n	80149ba <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80149b6:	2300      	movs	r3, #0
 80149b8:	e001      	b.n	80149be <ip4_route+0xca>
  }

  return netif_default;
 80149ba:	4b05      	ldr	r3, [pc, #20]	; (80149d0 <ip4_route+0xdc>)
 80149bc:	681b      	ldr	r3, [r3, #0]
}
 80149be:	4618      	mov	r0, r3
 80149c0:	3714      	adds	r7, #20
 80149c2:	46bd      	mov	sp, r7
 80149c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149c8:	4770      	bx	lr
 80149ca:	bf00      	nop
 80149cc:	240082a8 	.word	0x240082a8
 80149d0:	240082ac 	.word	0x240082ac

080149d4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80149d4:	b580      	push	{r7, lr}
 80149d6:	b082      	sub	sp, #8
 80149d8:	af00      	add	r7, sp, #0
 80149da:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80149e2:	f003 0301 	and.w	r3, r3, #1
 80149e6:	b2db      	uxtb	r3, r3
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d016      	beq.n	8014a1a <ip4_input_accept+0x46>
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	3304      	adds	r3, #4
 80149f0:	681b      	ldr	r3, [r3, #0]
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d011      	beq.n	8014a1a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80149f6:	4b0b      	ldr	r3, [pc, #44]	; (8014a24 <ip4_input_accept+0x50>)
 80149f8:	695a      	ldr	r2, [r3, #20]
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	3304      	adds	r3, #4
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	429a      	cmp	r2, r3
 8014a02:	d008      	beq.n	8014a16 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8014a04:	4b07      	ldr	r3, [pc, #28]	; (8014a24 <ip4_input_accept+0x50>)
 8014a06:	695b      	ldr	r3, [r3, #20]
 8014a08:	6879      	ldr	r1, [r7, #4]
 8014a0a:	4618      	mov	r0, r3
 8014a0c:	f000 fa08 	bl	8014e20 <ip4_addr_isbroadcast_u32>
 8014a10:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d001      	beq.n	8014a1a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8014a16:	2301      	movs	r3, #1
 8014a18:	e000      	b.n	8014a1c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8014a1a:	2300      	movs	r3, #0
}
 8014a1c:	4618      	mov	r0, r3
 8014a1e:	3708      	adds	r7, #8
 8014a20:	46bd      	mov	sp, r7
 8014a22:	bd80      	pop	{r7, pc}
 8014a24:	240053c8 	.word	0x240053c8

08014a28 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014a28:	b580      	push	{r7, lr}
 8014a2a:	b086      	sub	sp, #24
 8014a2c:	af00      	add	r7, sp, #0
 8014a2e:	6078      	str	r0, [r7, #4]
 8014a30:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	685b      	ldr	r3, [r3, #4]
 8014a36:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8014a38:	697b      	ldr	r3, [r7, #20]
 8014a3a:	781b      	ldrb	r3, [r3, #0]
 8014a3c:	091b      	lsrs	r3, r3, #4
 8014a3e:	b2db      	uxtb	r3, r3
 8014a40:	2b04      	cmp	r3, #4
 8014a42:	d004      	beq.n	8014a4e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8014a44:	6878      	ldr	r0, [r7, #4]
 8014a46:	f002 fb7b 	bl	8017140 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8014a4a:	2300      	movs	r3, #0
 8014a4c:	e107      	b.n	8014c5e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8014a4e:	697b      	ldr	r3, [r7, #20]
 8014a50:	781b      	ldrb	r3, [r3, #0]
 8014a52:	f003 030f 	and.w	r3, r3, #15
 8014a56:	b2db      	uxtb	r3, r3
 8014a58:	009b      	lsls	r3, r3, #2
 8014a5a:	b2db      	uxtb	r3, r3
 8014a5c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8014a5e:	697b      	ldr	r3, [r7, #20]
 8014a60:	885b      	ldrh	r3, [r3, #2]
 8014a62:	b29b      	uxth	r3, r3
 8014a64:	4618      	mov	r0, r3
 8014a66:	f7fe fc6f 	bl	8013348 <lwip_htons>
 8014a6a:	4603      	mov	r3, r0
 8014a6c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	891b      	ldrh	r3, [r3, #8]
 8014a72:	89ba      	ldrh	r2, [r7, #12]
 8014a74:	429a      	cmp	r2, r3
 8014a76:	d204      	bcs.n	8014a82 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8014a78:	89bb      	ldrh	r3, [r7, #12]
 8014a7a:	4619      	mov	r1, r3
 8014a7c:	6878      	ldr	r0, [r7, #4]
 8014a7e:	f002 f9d9 	bl	8016e34 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	895b      	ldrh	r3, [r3, #10]
 8014a86:	89fa      	ldrh	r2, [r7, #14]
 8014a88:	429a      	cmp	r2, r3
 8014a8a:	d807      	bhi.n	8014a9c <ip4_input+0x74>
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	891b      	ldrh	r3, [r3, #8]
 8014a90:	89ba      	ldrh	r2, [r7, #12]
 8014a92:	429a      	cmp	r2, r3
 8014a94:	d802      	bhi.n	8014a9c <ip4_input+0x74>
 8014a96:	89fb      	ldrh	r3, [r7, #14]
 8014a98:	2b13      	cmp	r3, #19
 8014a9a:	d804      	bhi.n	8014aa6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8014a9c:	6878      	ldr	r0, [r7, #4]
 8014a9e:	f002 fb4f 	bl	8017140 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8014aa2:	2300      	movs	r3, #0
 8014aa4:	e0db      	b.n	8014c5e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8014aa6:	697b      	ldr	r3, [r7, #20]
 8014aa8:	691b      	ldr	r3, [r3, #16]
 8014aaa:	4a6f      	ldr	r2, [pc, #444]	; (8014c68 <ip4_input+0x240>)
 8014aac:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8014aae:	697b      	ldr	r3, [r7, #20]
 8014ab0:	68db      	ldr	r3, [r3, #12]
 8014ab2:	4a6d      	ldr	r2, [pc, #436]	; (8014c68 <ip4_input+0x240>)
 8014ab4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014ab6:	4b6c      	ldr	r3, [pc, #432]	; (8014c68 <ip4_input+0x240>)
 8014ab8:	695b      	ldr	r3, [r3, #20]
 8014aba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014abe:	2be0      	cmp	r3, #224	; 0xe0
 8014ac0:	d112      	bne.n	8014ae8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8014ac2:	683b      	ldr	r3, [r7, #0]
 8014ac4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014ac8:	f003 0301 	and.w	r3, r3, #1
 8014acc:	b2db      	uxtb	r3, r3
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d007      	beq.n	8014ae2 <ip4_input+0xba>
 8014ad2:	683b      	ldr	r3, [r7, #0]
 8014ad4:	3304      	adds	r3, #4
 8014ad6:	681b      	ldr	r3, [r3, #0]
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d002      	beq.n	8014ae2 <ip4_input+0xba>
      netif = inp;
 8014adc:	683b      	ldr	r3, [r7, #0]
 8014ade:	613b      	str	r3, [r7, #16]
 8014ae0:	e02a      	b.n	8014b38 <ip4_input+0x110>
    } else {
      netif = NULL;
 8014ae2:	2300      	movs	r3, #0
 8014ae4:	613b      	str	r3, [r7, #16]
 8014ae6:	e027      	b.n	8014b38 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8014ae8:	6838      	ldr	r0, [r7, #0]
 8014aea:	f7ff ff73 	bl	80149d4 <ip4_input_accept>
 8014aee:	4603      	mov	r3, r0
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	d002      	beq.n	8014afa <ip4_input+0xd2>
      netif = inp;
 8014af4:	683b      	ldr	r3, [r7, #0]
 8014af6:	613b      	str	r3, [r7, #16]
 8014af8:	e01e      	b.n	8014b38 <ip4_input+0x110>
    } else {
      netif = NULL;
 8014afa:	2300      	movs	r3, #0
 8014afc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8014afe:	4b5a      	ldr	r3, [pc, #360]	; (8014c68 <ip4_input+0x240>)
 8014b00:	695b      	ldr	r3, [r3, #20]
 8014b02:	b2db      	uxtb	r3, r3
 8014b04:	2b7f      	cmp	r3, #127	; 0x7f
 8014b06:	d017      	beq.n	8014b38 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8014b08:	4b58      	ldr	r3, [pc, #352]	; (8014c6c <ip4_input+0x244>)
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	613b      	str	r3, [r7, #16]
 8014b0e:	e00e      	b.n	8014b2e <ip4_input+0x106>
          if (netif == inp) {
 8014b10:	693a      	ldr	r2, [r7, #16]
 8014b12:	683b      	ldr	r3, [r7, #0]
 8014b14:	429a      	cmp	r2, r3
 8014b16:	d006      	beq.n	8014b26 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8014b18:	6938      	ldr	r0, [r7, #16]
 8014b1a:	f7ff ff5b 	bl	80149d4 <ip4_input_accept>
 8014b1e:	4603      	mov	r3, r0
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d108      	bne.n	8014b36 <ip4_input+0x10e>
 8014b24:	e000      	b.n	8014b28 <ip4_input+0x100>
            continue;
 8014b26:	bf00      	nop
        NETIF_FOREACH(netif) {
 8014b28:	693b      	ldr	r3, [r7, #16]
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	613b      	str	r3, [r7, #16]
 8014b2e:	693b      	ldr	r3, [r7, #16]
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d1ed      	bne.n	8014b10 <ip4_input+0xe8>
 8014b34:	e000      	b.n	8014b38 <ip4_input+0x110>
            break;
 8014b36:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014b38:	4b4b      	ldr	r3, [pc, #300]	; (8014c68 <ip4_input+0x240>)
 8014b3a:	691b      	ldr	r3, [r3, #16]
 8014b3c:	6839      	ldr	r1, [r7, #0]
 8014b3e:	4618      	mov	r0, r3
 8014b40:	f000 f96e 	bl	8014e20 <ip4_addr_isbroadcast_u32>
 8014b44:	4603      	mov	r3, r0
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d105      	bne.n	8014b56 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8014b4a:	4b47      	ldr	r3, [pc, #284]	; (8014c68 <ip4_input+0x240>)
 8014b4c:	691b      	ldr	r3, [r3, #16]
 8014b4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014b52:	2be0      	cmp	r3, #224	; 0xe0
 8014b54:	d104      	bne.n	8014b60 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8014b56:	6878      	ldr	r0, [r7, #4]
 8014b58:	f002 faf2 	bl	8017140 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8014b5c:	2300      	movs	r3, #0
 8014b5e:	e07e      	b.n	8014c5e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8014b60:	693b      	ldr	r3, [r7, #16]
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d104      	bne.n	8014b70 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8014b66:	6878      	ldr	r0, [r7, #4]
 8014b68:	f002 faea 	bl	8017140 <pbuf_free>
    return ERR_OK;
 8014b6c:	2300      	movs	r3, #0
 8014b6e:	e076      	b.n	8014c5e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8014b70:	697b      	ldr	r3, [r7, #20]
 8014b72:	88db      	ldrh	r3, [r3, #6]
 8014b74:	b29b      	uxth	r3, r3
 8014b76:	461a      	mov	r2, r3
 8014b78:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8014b7c:	4013      	ands	r3, r2
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d00b      	beq.n	8014b9a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8014b82:	6878      	ldr	r0, [r7, #4]
 8014b84:	f000 fc92 	bl	80154ac <ip4_reass>
 8014b88:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d101      	bne.n	8014b94 <ip4_input+0x16c>
      return ERR_OK;
 8014b90:	2300      	movs	r3, #0
 8014b92:	e064      	b.n	8014c5e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	685b      	ldr	r3, [r3, #4]
 8014b98:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8014b9a:	4a33      	ldr	r2, [pc, #204]	; (8014c68 <ip4_input+0x240>)
 8014b9c:	693b      	ldr	r3, [r7, #16]
 8014b9e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8014ba0:	4a31      	ldr	r2, [pc, #196]	; (8014c68 <ip4_input+0x240>)
 8014ba2:	683b      	ldr	r3, [r7, #0]
 8014ba4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8014ba6:	4a30      	ldr	r2, [pc, #192]	; (8014c68 <ip4_input+0x240>)
 8014ba8:	697b      	ldr	r3, [r7, #20]
 8014baa:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8014bac:	697b      	ldr	r3, [r7, #20]
 8014bae:	781b      	ldrb	r3, [r3, #0]
 8014bb0:	f003 030f 	and.w	r3, r3, #15
 8014bb4:	b2db      	uxtb	r3, r3
 8014bb6:	009b      	lsls	r3, r3, #2
 8014bb8:	b2db      	uxtb	r3, r3
 8014bba:	b29a      	uxth	r2, r3
 8014bbc:	4b2a      	ldr	r3, [pc, #168]	; (8014c68 <ip4_input+0x240>)
 8014bbe:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8014bc0:	89fb      	ldrh	r3, [r7, #14]
 8014bc2:	4619      	mov	r1, r3
 8014bc4:	6878      	ldr	r0, [r7, #4]
 8014bc6:	f002 fa35 	bl	8017034 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8014bca:	697b      	ldr	r3, [r7, #20]
 8014bcc:	7a5b      	ldrb	r3, [r3, #9]
 8014bce:	2b11      	cmp	r3, #17
 8014bd0:	d006      	beq.n	8014be0 <ip4_input+0x1b8>
 8014bd2:	2b11      	cmp	r3, #17
 8014bd4:	dc13      	bgt.n	8014bfe <ip4_input+0x1d6>
 8014bd6:	2b01      	cmp	r3, #1
 8014bd8:	d00c      	beq.n	8014bf4 <ip4_input+0x1cc>
 8014bda:	2b06      	cmp	r3, #6
 8014bdc:	d005      	beq.n	8014bea <ip4_input+0x1c2>
 8014bde:	e00e      	b.n	8014bfe <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8014be0:	6839      	ldr	r1, [r7, #0]
 8014be2:	6878      	ldr	r0, [r7, #4]
 8014be4:	f009 f93a 	bl	801de5c <udp_input>
        break;
 8014be8:	e026      	b.n	8014c38 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8014bea:	6839      	ldr	r1, [r7, #0]
 8014bec:	6878      	ldr	r0, [r7, #4]
 8014bee:	f004 fd27 	bl	8019640 <tcp_input>
        break;
 8014bf2:	e021      	b.n	8014c38 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8014bf4:	6839      	ldr	r1, [r7, #0]
 8014bf6:	6878      	ldr	r0, [r7, #4]
 8014bf8:	f7ff fbf6 	bl	80143e8 <icmp_input>
        break;
 8014bfc:	e01c      	b.n	8014c38 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014bfe:	4b1a      	ldr	r3, [pc, #104]	; (8014c68 <ip4_input+0x240>)
 8014c00:	695b      	ldr	r3, [r3, #20]
 8014c02:	6939      	ldr	r1, [r7, #16]
 8014c04:	4618      	mov	r0, r3
 8014c06:	f000 f90b 	bl	8014e20 <ip4_addr_isbroadcast_u32>
 8014c0a:	4603      	mov	r3, r0
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d10f      	bne.n	8014c30 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014c10:	4b15      	ldr	r3, [pc, #84]	; (8014c68 <ip4_input+0x240>)
 8014c12:	695b      	ldr	r3, [r3, #20]
 8014c14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014c18:	2be0      	cmp	r3, #224	; 0xe0
 8014c1a:	d009      	beq.n	8014c30 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8014c1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014c20:	4619      	mov	r1, r3
 8014c22:	6878      	ldr	r0, [r7, #4]
 8014c24:	f002 fa79 	bl	801711a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8014c28:	2102      	movs	r1, #2
 8014c2a:	6878      	ldr	r0, [r7, #4]
 8014c2c:	f7ff fcfc 	bl	8014628 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8014c30:	6878      	ldr	r0, [r7, #4]
 8014c32:	f002 fa85 	bl	8017140 <pbuf_free>
        break;
 8014c36:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8014c38:	4b0b      	ldr	r3, [pc, #44]	; (8014c68 <ip4_input+0x240>)
 8014c3a:	2200      	movs	r2, #0
 8014c3c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8014c3e:	4b0a      	ldr	r3, [pc, #40]	; (8014c68 <ip4_input+0x240>)
 8014c40:	2200      	movs	r2, #0
 8014c42:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8014c44:	4b08      	ldr	r3, [pc, #32]	; (8014c68 <ip4_input+0x240>)
 8014c46:	2200      	movs	r2, #0
 8014c48:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8014c4a:	4b07      	ldr	r3, [pc, #28]	; (8014c68 <ip4_input+0x240>)
 8014c4c:	2200      	movs	r2, #0
 8014c4e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8014c50:	4b05      	ldr	r3, [pc, #20]	; (8014c68 <ip4_input+0x240>)
 8014c52:	2200      	movs	r2, #0
 8014c54:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8014c56:	4b04      	ldr	r3, [pc, #16]	; (8014c68 <ip4_input+0x240>)
 8014c58:	2200      	movs	r2, #0
 8014c5a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8014c5c:	2300      	movs	r3, #0
}
 8014c5e:	4618      	mov	r0, r3
 8014c60:	3718      	adds	r7, #24
 8014c62:	46bd      	mov	sp, r7
 8014c64:	bd80      	pop	{r7, pc}
 8014c66:	bf00      	nop
 8014c68:	240053c8 	.word	0x240053c8
 8014c6c:	240082a8 	.word	0x240082a8

08014c70 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8014c70:	b580      	push	{r7, lr}
 8014c72:	b08a      	sub	sp, #40	; 0x28
 8014c74:	af04      	add	r7, sp, #16
 8014c76:	60f8      	str	r0, [r7, #12]
 8014c78:	60b9      	str	r1, [r7, #8]
 8014c7a:	607a      	str	r2, [r7, #4]
 8014c7c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8014c7e:	68bb      	ldr	r3, [r7, #8]
 8014c80:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d009      	beq.n	8014c9c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8014c88:	68bb      	ldr	r3, [r7, #8]
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d003      	beq.n	8014c96 <ip4_output_if+0x26>
 8014c8e:	68bb      	ldr	r3, [r7, #8]
 8014c90:	681b      	ldr	r3, [r3, #0]
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d102      	bne.n	8014c9c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8014c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c98:	3304      	adds	r3, #4
 8014c9a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8014c9c:	78fa      	ldrb	r2, [r7, #3]
 8014c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ca0:	9302      	str	r3, [sp, #8]
 8014ca2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014ca6:	9301      	str	r3, [sp, #4]
 8014ca8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014cac:	9300      	str	r3, [sp, #0]
 8014cae:	4613      	mov	r3, r2
 8014cb0:	687a      	ldr	r2, [r7, #4]
 8014cb2:	6979      	ldr	r1, [r7, #20]
 8014cb4:	68f8      	ldr	r0, [r7, #12]
 8014cb6:	f000 f805 	bl	8014cc4 <ip4_output_if_src>
 8014cba:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8014cbc:	4618      	mov	r0, r3
 8014cbe:	3718      	adds	r7, #24
 8014cc0:	46bd      	mov	sp, r7
 8014cc2:	bd80      	pop	{r7, pc}

08014cc4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8014cc4:	b580      	push	{r7, lr}
 8014cc6:	b088      	sub	sp, #32
 8014cc8:	af00      	add	r7, sp, #0
 8014cca:	60f8      	str	r0, [r7, #12]
 8014ccc:	60b9      	str	r1, [r7, #8]
 8014cce:	607a      	str	r2, [r7, #4]
 8014cd0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	7b9b      	ldrb	r3, [r3, #14]
 8014cd6:	2b01      	cmp	r3, #1
 8014cd8:	d006      	beq.n	8014ce8 <ip4_output_if_src+0x24>
 8014cda:	4b4b      	ldr	r3, [pc, #300]	; (8014e08 <ip4_output_if_src+0x144>)
 8014cdc:	f44f 7255 	mov.w	r2, #852	; 0x354
 8014ce0:	494a      	ldr	r1, [pc, #296]	; (8014e0c <ip4_output_if_src+0x148>)
 8014ce2:	484b      	ldr	r0, [pc, #300]	; (8014e10 <ip4_output_if_src+0x14c>)
 8014ce4:	f00c f8c2 	bl	8020e6c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d060      	beq.n	8014db0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8014cee:	2314      	movs	r3, #20
 8014cf0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8014cf2:	2114      	movs	r1, #20
 8014cf4:	68f8      	ldr	r0, [r7, #12]
 8014cf6:	f002 f98d 	bl	8017014 <pbuf_add_header>
 8014cfa:	4603      	mov	r3, r0
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d002      	beq.n	8014d06 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014d00:	f06f 0301 	mvn.w	r3, #1
 8014d04:	e07c      	b.n	8014e00 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8014d06:	68fb      	ldr	r3, [r7, #12]
 8014d08:	685b      	ldr	r3, [r3, #4]
 8014d0a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	895b      	ldrh	r3, [r3, #10]
 8014d10:	2b13      	cmp	r3, #19
 8014d12:	d806      	bhi.n	8014d22 <ip4_output_if_src+0x5e>
 8014d14:	4b3c      	ldr	r3, [pc, #240]	; (8014e08 <ip4_output_if_src+0x144>)
 8014d16:	f44f 7262 	mov.w	r2, #904	; 0x388
 8014d1a:	493e      	ldr	r1, [pc, #248]	; (8014e14 <ip4_output_if_src+0x150>)
 8014d1c:	483c      	ldr	r0, [pc, #240]	; (8014e10 <ip4_output_if_src+0x14c>)
 8014d1e:	f00c f8a5 	bl	8020e6c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8014d22:	69fb      	ldr	r3, [r7, #28]
 8014d24:	78fa      	ldrb	r2, [r7, #3]
 8014d26:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8014d28:	69fb      	ldr	r3, [r7, #28]
 8014d2a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8014d2e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	681a      	ldr	r2, [r3, #0]
 8014d34:	69fb      	ldr	r3, [r7, #28]
 8014d36:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8014d38:	8b7b      	ldrh	r3, [r7, #26]
 8014d3a:	089b      	lsrs	r3, r3, #2
 8014d3c:	b29b      	uxth	r3, r3
 8014d3e:	b2db      	uxtb	r3, r3
 8014d40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d44:	b2da      	uxtb	r2, r3
 8014d46:	69fb      	ldr	r3, [r7, #28]
 8014d48:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8014d4a:	69fb      	ldr	r3, [r7, #28]
 8014d4c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014d50:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	891b      	ldrh	r3, [r3, #8]
 8014d56:	4618      	mov	r0, r3
 8014d58:	f7fe faf6 	bl	8013348 <lwip_htons>
 8014d5c:	4603      	mov	r3, r0
 8014d5e:	461a      	mov	r2, r3
 8014d60:	69fb      	ldr	r3, [r7, #28]
 8014d62:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8014d64:	69fb      	ldr	r3, [r7, #28]
 8014d66:	2200      	movs	r2, #0
 8014d68:	719a      	strb	r2, [r3, #6]
 8014d6a:	2200      	movs	r2, #0
 8014d6c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8014d6e:	4b2a      	ldr	r3, [pc, #168]	; (8014e18 <ip4_output_if_src+0x154>)
 8014d70:	881b      	ldrh	r3, [r3, #0]
 8014d72:	4618      	mov	r0, r3
 8014d74:	f7fe fae8 	bl	8013348 <lwip_htons>
 8014d78:	4603      	mov	r3, r0
 8014d7a:	461a      	mov	r2, r3
 8014d7c:	69fb      	ldr	r3, [r7, #28]
 8014d7e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8014d80:	4b25      	ldr	r3, [pc, #148]	; (8014e18 <ip4_output_if_src+0x154>)
 8014d82:	881b      	ldrh	r3, [r3, #0]
 8014d84:	3301      	adds	r3, #1
 8014d86:	b29a      	uxth	r2, r3
 8014d88:	4b23      	ldr	r3, [pc, #140]	; (8014e18 <ip4_output_if_src+0x154>)
 8014d8a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8014d8c:	68bb      	ldr	r3, [r7, #8]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d104      	bne.n	8014d9c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8014d92:	4b22      	ldr	r3, [pc, #136]	; (8014e1c <ip4_output_if_src+0x158>)
 8014d94:	681a      	ldr	r2, [r3, #0]
 8014d96:	69fb      	ldr	r3, [r7, #28]
 8014d98:	60da      	str	r2, [r3, #12]
 8014d9a:	e003      	b.n	8014da4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8014d9c:	68bb      	ldr	r3, [r7, #8]
 8014d9e:	681a      	ldr	r2, [r3, #0]
 8014da0:	69fb      	ldr	r3, [r7, #28]
 8014da2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8014da4:	69fb      	ldr	r3, [r7, #28]
 8014da6:	2200      	movs	r2, #0
 8014da8:	729a      	strb	r2, [r3, #10]
 8014daa:	2200      	movs	r2, #0
 8014dac:	72da      	strb	r2, [r3, #11]
 8014dae:	e00f      	b.n	8014dd0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	895b      	ldrh	r3, [r3, #10]
 8014db4:	2b13      	cmp	r3, #19
 8014db6:	d802      	bhi.n	8014dbe <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014db8:	f06f 0301 	mvn.w	r3, #1
 8014dbc:	e020      	b.n	8014e00 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	685b      	ldr	r3, [r3, #4]
 8014dc2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8014dc4:	69fb      	ldr	r3, [r7, #28]
 8014dc6:	691b      	ldr	r3, [r3, #16]
 8014dc8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8014dca:	f107 0314 	add.w	r3, r7, #20
 8014dce:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8014dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dd2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d00c      	beq.n	8014df2 <ip4_output_if_src+0x12e>
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	891a      	ldrh	r2, [r3, #8]
 8014ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dde:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014de0:	429a      	cmp	r2, r3
 8014de2:	d906      	bls.n	8014df2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8014de4:	687a      	ldr	r2, [r7, #4]
 8014de6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014de8:	68f8      	ldr	r0, [r7, #12]
 8014dea:	f000 fd4d 	bl	8015888 <ip4_frag>
 8014dee:	4603      	mov	r3, r0
 8014df0:	e006      	b.n	8014e00 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8014df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014df4:	695b      	ldr	r3, [r3, #20]
 8014df6:	687a      	ldr	r2, [r7, #4]
 8014df8:	68f9      	ldr	r1, [r7, #12]
 8014dfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014dfc:	4798      	blx	r3
 8014dfe:	4603      	mov	r3, r0
}
 8014e00:	4618      	mov	r0, r3
 8014e02:	3720      	adds	r7, #32
 8014e04:	46bd      	mov	sp, r7
 8014e06:	bd80      	pop	{r7, pc}
 8014e08:	0802631c 	.word	0x0802631c
 8014e0c:	0802637c 	.word	0x0802637c
 8014e10:	08026388 	.word	0x08026388
 8014e14:	080263b0 	.word	0x080263b0
 8014e18:	24004862 	.word	0x24004862
 8014e1c:	0802911c 	.word	0x0802911c

08014e20 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8014e20:	b480      	push	{r7}
 8014e22:	b085      	sub	sp, #20
 8014e24:	af00      	add	r7, sp, #0
 8014e26:	6078      	str	r0, [r7, #4]
 8014e28:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014e34:	d002      	beq.n	8014e3c <ip4_addr_isbroadcast_u32+0x1c>
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d101      	bne.n	8014e40 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8014e3c:	2301      	movs	r3, #1
 8014e3e:	e02a      	b.n	8014e96 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8014e40:	683b      	ldr	r3, [r7, #0]
 8014e42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014e46:	f003 0302 	and.w	r3, r3, #2
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d101      	bne.n	8014e52 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8014e4e:	2300      	movs	r3, #0
 8014e50:	e021      	b.n	8014e96 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8014e52:	683b      	ldr	r3, [r7, #0]
 8014e54:	3304      	adds	r3, #4
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	687a      	ldr	r2, [r7, #4]
 8014e5a:	429a      	cmp	r2, r3
 8014e5c:	d101      	bne.n	8014e62 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8014e5e:	2300      	movs	r3, #0
 8014e60:	e019      	b.n	8014e96 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8014e62:	68fa      	ldr	r2, [r7, #12]
 8014e64:	683b      	ldr	r3, [r7, #0]
 8014e66:	3304      	adds	r3, #4
 8014e68:	681b      	ldr	r3, [r3, #0]
 8014e6a:	405a      	eors	r2, r3
 8014e6c:	683b      	ldr	r3, [r7, #0]
 8014e6e:	3308      	adds	r3, #8
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	4013      	ands	r3, r2
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d10d      	bne.n	8014e94 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014e78:	683b      	ldr	r3, [r7, #0]
 8014e7a:	3308      	adds	r3, #8
 8014e7c:	681b      	ldr	r3, [r3, #0]
 8014e7e:	43da      	mvns	r2, r3
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8014e84:	683b      	ldr	r3, [r7, #0]
 8014e86:	3308      	adds	r3, #8
 8014e88:	681b      	ldr	r3, [r3, #0]
 8014e8a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014e8c:	429a      	cmp	r2, r3
 8014e8e:	d101      	bne.n	8014e94 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8014e90:	2301      	movs	r3, #1
 8014e92:	e000      	b.n	8014e96 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8014e94:	2300      	movs	r3, #0
  }
}
 8014e96:	4618      	mov	r0, r3
 8014e98:	3714      	adds	r7, #20
 8014e9a:	46bd      	mov	sp, r7
 8014e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ea0:	4770      	bx	lr
	...

08014ea4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8014ea4:	b580      	push	{r7, lr}
 8014ea6:	b084      	sub	sp, #16
 8014ea8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8014eaa:	2300      	movs	r3, #0
 8014eac:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8014eae:	4b12      	ldr	r3, [pc, #72]	; (8014ef8 <ip_reass_tmr+0x54>)
 8014eb0:	681b      	ldr	r3, [r3, #0]
 8014eb2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8014eb4:	e018      	b.n	8014ee8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	7fdb      	ldrb	r3, [r3, #31]
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d00b      	beq.n	8014ed6 <ip_reass_tmr+0x32>
      r->timer--;
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	7fdb      	ldrb	r3, [r3, #31]
 8014ec2:	3b01      	subs	r3, #1
 8014ec4:	b2da      	uxtb	r2, r3
 8014ec6:	68fb      	ldr	r3, [r7, #12]
 8014ec8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8014ece:	68fb      	ldr	r3, [r7, #12]
 8014ed0:	681b      	ldr	r3, [r3, #0]
 8014ed2:	60fb      	str	r3, [r7, #12]
 8014ed4:	e008      	b.n	8014ee8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8014eda:	68fb      	ldr	r3, [r7, #12]
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8014ee0:	68b9      	ldr	r1, [r7, #8]
 8014ee2:	6878      	ldr	r0, [r7, #4]
 8014ee4:	f000 f80a 	bl	8014efc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d1e3      	bne.n	8014eb6 <ip_reass_tmr+0x12>
    }
  }
}
 8014eee:	bf00      	nop
 8014ef0:	bf00      	nop
 8014ef2:	3710      	adds	r7, #16
 8014ef4:	46bd      	mov	sp, r7
 8014ef6:	bd80      	pop	{r7, pc}
 8014ef8:	24004864 	.word	0x24004864

08014efc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014efc:	b580      	push	{r7, lr}
 8014efe:	b088      	sub	sp, #32
 8014f00:	af00      	add	r7, sp, #0
 8014f02:	6078      	str	r0, [r7, #4]
 8014f04:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8014f06:	2300      	movs	r3, #0
 8014f08:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8014f0a:	683a      	ldr	r2, [r7, #0]
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	429a      	cmp	r2, r3
 8014f10:	d105      	bne.n	8014f1e <ip_reass_free_complete_datagram+0x22>
 8014f12:	4b45      	ldr	r3, [pc, #276]	; (8015028 <ip_reass_free_complete_datagram+0x12c>)
 8014f14:	22ab      	movs	r2, #171	; 0xab
 8014f16:	4945      	ldr	r1, [pc, #276]	; (801502c <ip_reass_free_complete_datagram+0x130>)
 8014f18:	4845      	ldr	r0, [pc, #276]	; (8015030 <ip_reass_free_complete_datagram+0x134>)
 8014f1a:	f00b ffa7 	bl	8020e6c <iprintf>
  if (prev != NULL) {
 8014f1e:	683b      	ldr	r3, [r7, #0]
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d00a      	beq.n	8014f3a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8014f24:	683b      	ldr	r3, [r7, #0]
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	687a      	ldr	r2, [r7, #4]
 8014f2a:	429a      	cmp	r2, r3
 8014f2c:	d005      	beq.n	8014f3a <ip_reass_free_complete_datagram+0x3e>
 8014f2e:	4b3e      	ldr	r3, [pc, #248]	; (8015028 <ip_reass_free_complete_datagram+0x12c>)
 8014f30:	22ad      	movs	r2, #173	; 0xad
 8014f32:	4940      	ldr	r1, [pc, #256]	; (8015034 <ip_reass_free_complete_datagram+0x138>)
 8014f34:	483e      	ldr	r0, [pc, #248]	; (8015030 <ip_reass_free_complete_datagram+0x134>)
 8014f36:	f00b ff99 	bl	8020e6c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	685b      	ldr	r3, [r3, #4]
 8014f3e:	685b      	ldr	r3, [r3, #4]
 8014f40:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8014f42:	697b      	ldr	r3, [r7, #20]
 8014f44:	889b      	ldrh	r3, [r3, #4]
 8014f46:	b29b      	uxth	r3, r3
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d12a      	bne.n	8014fa2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	685b      	ldr	r3, [r3, #4]
 8014f50:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8014f52:	697b      	ldr	r3, [r7, #20]
 8014f54:	681a      	ldr	r2, [r3, #0]
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8014f5a:	69bb      	ldr	r3, [r7, #24]
 8014f5c:	6858      	ldr	r0, [r3, #4]
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	3308      	adds	r3, #8
 8014f62:	2214      	movs	r2, #20
 8014f64:	4619      	mov	r1, r3
 8014f66:	f00b f85f 	bl	8020028 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8014f6a:	2101      	movs	r1, #1
 8014f6c:	69b8      	ldr	r0, [r7, #24]
 8014f6e:	f7ff fb6b 	bl	8014648 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8014f72:	69b8      	ldr	r0, [r7, #24]
 8014f74:	f002 f96c 	bl	8017250 <pbuf_clen>
 8014f78:	4603      	mov	r3, r0
 8014f7a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014f7c:	8bfa      	ldrh	r2, [r7, #30]
 8014f7e:	8a7b      	ldrh	r3, [r7, #18]
 8014f80:	4413      	add	r3, r2
 8014f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014f86:	db05      	blt.n	8014f94 <ip_reass_free_complete_datagram+0x98>
 8014f88:	4b27      	ldr	r3, [pc, #156]	; (8015028 <ip_reass_free_complete_datagram+0x12c>)
 8014f8a:	22bc      	movs	r2, #188	; 0xbc
 8014f8c:	492a      	ldr	r1, [pc, #168]	; (8015038 <ip_reass_free_complete_datagram+0x13c>)
 8014f8e:	4828      	ldr	r0, [pc, #160]	; (8015030 <ip_reass_free_complete_datagram+0x134>)
 8014f90:	f00b ff6c 	bl	8020e6c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014f94:	8bfa      	ldrh	r2, [r7, #30]
 8014f96:	8a7b      	ldrh	r3, [r7, #18]
 8014f98:	4413      	add	r3, r2
 8014f9a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8014f9c:	69b8      	ldr	r0, [r7, #24]
 8014f9e:	f002 f8cf 	bl	8017140 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	685b      	ldr	r3, [r3, #4]
 8014fa6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8014fa8:	e01f      	b.n	8014fea <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8014faa:	69bb      	ldr	r3, [r7, #24]
 8014fac:	685b      	ldr	r3, [r3, #4]
 8014fae:	617b      	str	r3, [r7, #20]
    pcur = p;
 8014fb0:	69bb      	ldr	r3, [r7, #24]
 8014fb2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8014fb4:	697b      	ldr	r3, [r7, #20]
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8014fba:	68f8      	ldr	r0, [r7, #12]
 8014fbc:	f002 f948 	bl	8017250 <pbuf_clen>
 8014fc0:	4603      	mov	r3, r0
 8014fc2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014fc4:	8bfa      	ldrh	r2, [r7, #30]
 8014fc6:	8a7b      	ldrh	r3, [r7, #18]
 8014fc8:	4413      	add	r3, r2
 8014fca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014fce:	db05      	blt.n	8014fdc <ip_reass_free_complete_datagram+0xe0>
 8014fd0:	4b15      	ldr	r3, [pc, #84]	; (8015028 <ip_reass_free_complete_datagram+0x12c>)
 8014fd2:	22cc      	movs	r2, #204	; 0xcc
 8014fd4:	4918      	ldr	r1, [pc, #96]	; (8015038 <ip_reass_free_complete_datagram+0x13c>)
 8014fd6:	4816      	ldr	r0, [pc, #88]	; (8015030 <ip_reass_free_complete_datagram+0x134>)
 8014fd8:	f00b ff48 	bl	8020e6c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014fdc:	8bfa      	ldrh	r2, [r7, #30]
 8014fde:	8a7b      	ldrh	r3, [r7, #18]
 8014fe0:	4413      	add	r3, r2
 8014fe2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8014fe4:	68f8      	ldr	r0, [r7, #12]
 8014fe6:	f002 f8ab 	bl	8017140 <pbuf_free>
  while (p != NULL) {
 8014fea:	69bb      	ldr	r3, [r7, #24]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d1dc      	bne.n	8014faa <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8014ff0:	6839      	ldr	r1, [r7, #0]
 8014ff2:	6878      	ldr	r0, [r7, #4]
 8014ff4:	f000 f8c2 	bl	801517c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8014ff8:	4b10      	ldr	r3, [pc, #64]	; (801503c <ip_reass_free_complete_datagram+0x140>)
 8014ffa:	881b      	ldrh	r3, [r3, #0]
 8014ffc:	8bfa      	ldrh	r2, [r7, #30]
 8014ffe:	429a      	cmp	r2, r3
 8015000:	d905      	bls.n	801500e <ip_reass_free_complete_datagram+0x112>
 8015002:	4b09      	ldr	r3, [pc, #36]	; (8015028 <ip_reass_free_complete_datagram+0x12c>)
 8015004:	22d2      	movs	r2, #210	; 0xd2
 8015006:	490e      	ldr	r1, [pc, #56]	; (8015040 <ip_reass_free_complete_datagram+0x144>)
 8015008:	4809      	ldr	r0, [pc, #36]	; (8015030 <ip_reass_free_complete_datagram+0x134>)
 801500a:	f00b ff2f 	bl	8020e6c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801500e:	4b0b      	ldr	r3, [pc, #44]	; (801503c <ip_reass_free_complete_datagram+0x140>)
 8015010:	881a      	ldrh	r2, [r3, #0]
 8015012:	8bfb      	ldrh	r3, [r7, #30]
 8015014:	1ad3      	subs	r3, r2, r3
 8015016:	b29a      	uxth	r2, r3
 8015018:	4b08      	ldr	r3, [pc, #32]	; (801503c <ip_reass_free_complete_datagram+0x140>)
 801501a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801501c:	8bfb      	ldrh	r3, [r7, #30]
}
 801501e:	4618      	mov	r0, r3
 8015020:	3720      	adds	r7, #32
 8015022:	46bd      	mov	sp, r7
 8015024:	bd80      	pop	{r7, pc}
 8015026:	bf00      	nop
 8015028:	080263e0 	.word	0x080263e0
 801502c:	08026444 	.word	0x08026444
 8015030:	08026450 	.word	0x08026450
 8015034:	08026478 	.word	0x08026478
 8015038:	0802648c 	.word	0x0802648c
 801503c:	24004868 	.word	0x24004868
 8015040:	080264ac 	.word	0x080264ac

08015044 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015044:	b580      	push	{r7, lr}
 8015046:	b08a      	sub	sp, #40	; 0x28
 8015048:	af00      	add	r7, sp, #0
 801504a:	6078      	str	r0, [r7, #4]
 801504c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801504e:	2300      	movs	r3, #0
 8015050:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015052:	2300      	movs	r3, #0
 8015054:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015056:	2300      	movs	r3, #0
 8015058:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801505a:	2300      	movs	r3, #0
 801505c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801505e:	2300      	movs	r3, #0
 8015060:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015062:	4b28      	ldr	r3, [pc, #160]	; (8015104 <ip_reass_remove_oldest_datagram+0xc0>)
 8015064:	681b      	ldr	r3, [r3, #0]
 8015066:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015068:	e030      	b.n	80150cc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801506c:	695a      	ldr	r2, [r3, #20]
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	68db      	ldr	r3, [r3, #12]
 8015072:	429a      	cmp	r2, r3
 8015074:	d10c      	bne.n	8015090 <ip_reass_remove_oldest_datagram+0x4c>
 8015076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015078:	699a      	ldr	r2, [r3, #24]
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	691b      	ldr	r3, [r3, #16]
 801507e:	429a      	cmp	r2, r3
 8015080:	d106      	bne.n	8015090 <ip_reass_remove_oldest_datagram+0x4c>
 8015082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015084:	899a      	ldrh	r2, [r3, #12]
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	889b      	ldrh	r3, [r3, #4]
 801508a:	b29b      	uxth	r3, r3
 801508c:	429a      	cmp	r2, r3
 801508e:	d014      	beq.n	80150ba <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015090:	693b      	ldr	r3, [r7, #16]
 8015092:	3301      	adds	r3, #1
 8015094:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015096:	6a3b      	ldr	r3, [r7, #32]
 8015098:	2b00      	cmp	r3, #0
 801509a:	d104      	bne.n	80150a6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801509e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80150a0:	69fb      	ldr	r3, [r7, #28]
 80150a2:	61bb      	str	r3, [r7, #24]
 80150a4:	e009      	b.n	80150ba <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80150a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150a8:	7fda      	ldrb	r2, [r3, #31]
 80150aa:	6a3b      	ldr	r3, [r7, #32]
 80150ac:	7fdb      	ldrb	r3, [r3, #31]
 80150ae:	429a      	cmp	r2, r3
 80150b0:	d803      	bhi.n	80150ba <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80150b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150b4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80150b6:	69fb      	ldr	r3, [r7, #28]
 80150b8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80150ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150bc:	681b      	ldr	r3, [r3, #0]
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d001      	beq.n	80150c6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80150c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150c4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80150c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80150cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d1cb      	bne.n	801506a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80150d2:	6a3b      	ldr	r3, [r7, #32]
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d008      	beq.n	80150ea <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80150d8:	69b9      	ldr	r1, [r7, #24]
 80150da:	6a38      	ldr	r0, [r7, #32]
 80150dc:	f7ff ff0e 	bl	8014efc <ip_reass_free_complete_datagram>
 80150e0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80150e2:	697a      	ldr	r2, [r7, #20]
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	4413      	add	r3, r2
 80150e8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80150ea:	697a      	ldr	r2, [r7, #20]
 80150ec:	683b      	ldr	r3, [r7, #0]
 80150ee:	429a      	cmp	r2, r3
 80150f0:	da02      	bge.n	80150f8 <ip_reass_remove_oldest_datagram+0xb4>
 80150f2:	693b      	ldr	r3, [r7, #16]
 80150f4:	2b01      	cmp	r3, #1
 80150f6:	dcac      	bgt.n	8015052 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80150f8:	697b      	ldr	r3, [r7, #20]
}
 80150fa:	4618      	mov	r0, r3
 80150fc:	3728      	adds	r7, #40	; 0x28
 80150fe:	46bd      	mov	sp, r7
 8015100:	bd80      	pop	{r7, pc}
 8015102:	bf00      	nop
 8015104:	24004864 	.word	0x24004864

08015108 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015108:	b580      	push	{r7, lr}
 801510a:	b084      	sub	sp, #16
 801510c:	af00      	add	r7, sp, #0
 801510e:	6078      	str	r0, [r7, #4]
 8015110:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015112:	2004      	movs	r0, #4
 8015114:	f001 f92e 	bl	8016374 <memp_malloc>
 8015118:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	2b00      	cmp	r3, #0
 801511e:	d110      	bne.n	8015142 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015120:	6839      	ldr	r1, [r7, #0]
 8015122:	6878      	ldr	r0, [r7, #4]
 8015124:	f7ff ff8e 	bl	8015044 <ip_reass_remove_oldest_datagram>
 8015128:	4602      	mov	r2, r0
 801512a:	683b      	ldr	r3, [r7, #0]
 801512c:	4293      	cmp	r3, r2
 801512e:	dc03      	bgt.n	8015138 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015130:	2004      	movs	r0, #4
 8015132:	f001 f91f 	bl	8016374 <memp_malloc>
 8015136:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	2b00      	cmp	r3, #0
 801513c:	d101      	bne.n	8015142 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801513e:	2300      	movs	r3, #0
 8015140:	e016      	b.n	8015170 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015142:	2220      	movs	r2, #32
 8015144:	2100      	movs	r1, #0
 8015146:	68f8      	ldr	r0, [r7, #12]
 8015148:	f00a ff96 	bl	8020078 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801514c:	68fb      	ldr	r3, [r7, #12]
 801514e:	220f      	movs	r2, #15
 8015150:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015152:	4b09      	ldr	r3, [pc, #36]	; (8015178 <ip_reass_enqueue_new_datagram+0x70>)
 8015154:	681a      	ldr	r2, [r3, #0]
 8015156:	68fb      	ldr	r3, [r7, #12]
 8015158:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801515a:	4a07      	ldr	r2, [pc, #28]	; (8015178 <ip_reass_enqueue_new_datagram+0x70>)
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015160:	68fb      	ldr	r3, [r7, #12]
 8015162:	3308      	adds	r3, #8
 8015164:	2214      	movs	r2, #20
 8015166:	6879      	ldr	r1, [r7, #4]
 8015168:	4618      	mov	r0, r3
 801516a:	f00a ff5d 	bl	8020028 <memcpy>
  return ipr;
 801516e:	68fb      	ldr	r3, [r7, #12]
}
 8015170:	4618      	mov	r0, r3
 8015172:	3710      	adds	r7, #16
 8015174:	46bd      	mov	sp, r7
 8015176:	bd80      	pop	{r7, pc}
 8015178:	24004864 	.word	0x24004864

0801517c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801517c:	b580      	push	{r7, lr}
 801517e:	b082      	sub	sp, #8
 8015180:	af00      	add	r7, sp, #0
 8015182:	6078      	str	r0, [r7, #4]
 8015184:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015186:	4b10      	ldr	r3, [pc, #64]	; (80151c8 <ip_reass_dequeue_datagram+0x4c>)
 8015188:	681b      	ldr	r3, [r3, #0]
 801518a:	687a      	ldr	r2, [r7, #4]
 801518c:	429a      	cmp	r2, r3
 801518e:	d104      	bne.n	801519a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	681b      	ldr	r3, [r3, #0]
 8015194:	4a0c      	ldr	r2, [pc, #48]	; (80151c8 <ip_reass_dequeue_datagram+0x4c>)
 8015196:	6013      	str	r3, [r2, #0]
 8015198:	e00d      	b.n	80151b6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801519a:	683b      	ldr	r3, [r7, #0]
 801519c:	2b00      	cmp	r3, #0
 801519e:	d106      	bne.n	80151ae <ip_reass_dequeue_datagram+0x32>
 80151a0:	4b0a      	ldr	r3, [pc, #40]	; (80151cc <ip_reass_dequeue_datagram+0x50>)
 80151a2:	f240 1245 	movw	r2, #325	; 0x145
 80151a6:	490a      	ldr	r1, [pc, #40]	; (80151d0 <ip_reass_dequeue_datagram+0x54>)
 80151a8:	480a      	ldr	r0, [pc, #40]	; (80151d4 <ip_reass_dequeue_datagram+0x58>)
 80151aa:	f00b fe5f 	bl	8020e6c <iprintf>
    prev->next = ipr->next;
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	681a      	ldr	r2, [r3, #0]
 80151b2:	683b      	ldr	r3, [r7, #0]
 80151b4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80151b6:	6879      	ldr	r1, [r7, #4]
 80151b8:	2004      	movs	r0, #4
 80151ba:	f001 f94b 	bl	8016454 <memp_free>
}
 80151be:	bf00      	nop
 80151c0:	3708      	adds	r7, #8
 80151c2:	46bd      	mov	sp, r7
 80151c4:	bd80      	pop	{r7, pc}
 80151c6:	bf00      	nop
 80151c8:	24004864 	.word	0x24004864
 80151cc:	080263e0 	.word	0x080263e0
 80151d0:	080264d0 	.word	0x080264d0
 80151d4:	08026450 	.word	0x08026450

080151d8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80151d8:	b580      	push	{r7, lr}
 80151da:	b08c      	sub	sp, #48	; 0x30
 80151dc:	af00      	add	r7, sp, #0
 80151de:	60f8      	str	r0, [r7, #12]
 80151e0:	60b9      	str	r1, [r7, #8]
 80151e2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80151e4:	2300      	movs	r3, #0
 80151e6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80151e8:	2301      	movs	r3, #1
 80151ea:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80151ec:	68bb      	ldr	r3, [r7, #8]
 80151ee:	685b      	ldr	r3, [r3, #4]
 80151f0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80151f2:	69fb      	ldr	r3, [r7, #28]
 80151f4:	885b      	ldrh	r3, [r3, #2]
 80151f6:	b29b      	uxth	r3, r3
 80151f8:	4618      	mov	r0, r3
 80151fa:	f7fe f8a5 	bl	8013348 <lwip_htons>
 80151fe:	4603      	mov	r3, r0
 8015200:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015202:	69fb      	ldr	r3, [r7, #28]
 8015204:	781b      	ldrb	r3, [r3, #0]
 8015206:	f003 030f 	and.w	r3, r3, #15
 801520a:	b2db      	uxtb	r3, r3
 801520c:	009b      	lsls	r3, r3, #2
 801520e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015210:	7e7b      	ldrb	r3, [r7, #25]
 8015212:	b29b      	uxth	r3, r3
 8015214:	8b7a      	ldrh	r2, [r7, #26]
 8015216:	429a      	cmp	r2, r3
 8015218:	d202      	bcs.n	8015220 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801521a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801521e:	e135      	b.n	801548c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015220:	7e7b      	ldrb	r3, [r7, #25]
 8015222:	b29b      	uxth	r3, r3
 8015224:	8b7a      	ldrh	r2, [r7, #26]
 8015226:	1ad3      	subs	r3, r2, r3
 8015228:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801522a:	69fb      	ldr	r3, [r7, #28]
 801522c:	88db      	ldrh	r3, [r3, #6]
 801522e:	b29b      	uxth	r3, r3
 8015230:	4618      	mov	r0, r3
 8015232:	f7fe f889 	bl	8013348 <lwip_htons>
 8015236:	4603      	mov	r3, r0
 8015238:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801523c:	b29b      	uxth	r3, r3
 801523e:	00db      	lsls	r3, r3, #3
 8015240:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015242:	68bb      	ldr	r3, [r7, #8]
 8015244:	685b      	ldr	r3, [r3, #4]
 8015246:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801524a:	2200      	movs	r2, #0
 801524c:	701a      	strb	r2, [r3, #0]
 801524e:	2200      	movs	r2, #0
 8015250:	705a      	strb	r2, [r3, #1]
 8015252:	2200      	movs	r2, #0
 8015254:	709a      	strb	r2, [r3, #2]
 8015256:	2200      	movs	r2, #0
 8015258:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801525a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801525c:	8afa      	ldrh	r2, [r7, #22]
 801525e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015260:	8afa      	ldrh	r2, [r7, #22]
 8015262:	8b7b      	ldrh	r3, [r7, #26]
 8015264:	4413      	add	r3, r2
 8015266:	b29a      	uxth	r2, r3
 8015268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801526a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801526c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801526e:	88db      	ldrh	r3, [r3, #6]
 8015270:	b29b      	uxth	r3, r3
 8015272:	8afa      	ldrh	r2, [r7, #22]
 8015274:	429a      	cmp	r2, r3
 8015276:	d902      	bls.n	801527e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015278:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801527c:	e106      	b.n	801548c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	685b      	ldr	r3, [r3, #4]
 8015282:	627b      	str	r3, [r7, #36]	; 0x24
 8015284:	e068      	b.n	8015358 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015288:	685b      	ldr	r3, [r3, #4]
 801528a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801528c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801528e:	889b      	ldrh	r3, [r3, #4]
 8015290:	b29a      	uxth	r2, r3
 8015292:	693b      	ldr	r3, [r7, #16]
 8015294:	889b      	ldrh	r3, [r3, #4]
 8015296:	b29b      	uxth	r3, r3
 8015298:	429a      	cmp	r2, r3
 801529a:	d235      	bcs.n	8015308 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801529c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801529e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80152a0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80152a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d020      	beq.n	80152ea <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80152a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152aa:	889b      	ldrh	r3, [r3, #4]
 80152ac:	b29a      	uxth	r2, r3
 80152ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152b0:	88db      	ldrh	r3, [r3, #6]
 80152b2:	b29b      	uxth	r3, r3
 80152b4:	429a      	cmp	r2, r3
 80152b6:	d307      	bcc.n	80152c8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80152b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152ba:	88db      	ldrh	r3, [r3, #6]
 80152bc:	b29a      	uxth	r2, r3
 80152be:	693b      	ldr	r3, [r7, #16]
 80152c0:	889b      	ldrh	r3, [r3, #4]
 80152c2:	b29b      	uxth	r3, r3
 80152c4:	429a      	cmp	r2, r3
 80152c6:	d902      	bls.n	80152ce <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80152c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80152cc:	e0de      	b.n	801548c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80152ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152d0:	68ba      	ldr	r2, [r7, #8]
 80152d2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80152d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152d6:	88db      	ldrh	r3, [r3, #6]
 80152d8:	b29a      	uxth	r2, r3
 80152da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152dc:	889b      	ldrh	r3, [r3, #4]
 80152de:	b29b      	uxth	r3, r3
 80152e0:	429a      	cmp	r2, r3
 80152e2:	d03d      	beq.n	8015360 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80152e4:	2300      	movs	r3, #0
 80152e6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80152e8:	e03a      	b.n	8015360 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80152ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152ec:	88db      	ldrh	r3, [r3, #6]
 80152ee:	b29a      	uxth	r2, r3
 80152f0:	693b      	ldr	r3, [r7, #16]
 80152f2:	889b      	ldrh	r3, [r3, #4]
 80152f4:	b29b      	uxth	r3, r3
 80152f6:	429a      	cmp	r2, r3
 80152f8:	d902      	bls.n	8015300 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80152fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80152fe:	e0c5      	b.n	801548c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	68ba      	ldr	r2, [r7, #8]
 8015304:	605a      	str	r2, [r3, #4]
      break;
 8015306:	e02b      	b.n	8015360 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801530a:	889b      	ldrh	r3, [r3, #4]
 801530c:	b29a      	uxth	r2, r3
 801530e:	693b      	ldr	r3, [r7, #16]
 8015310:	889b      	ldrh	r3, [r3, #4]
 8015312:	b29b      	uxth	r3, r3
 8015314:	429a      	cmp	r2, r3
 8015316:	d102      	bne.n	801531e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015318:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801531c:	e0b6      	b.n	801548c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801531e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015320:	889b      	ldrh	r3, [r3, #4]
 8015322:	b29a      	uxth	r2, r3
 8015324:	693b      	ldr	r3, [r7, #16]
 8015326:	88db      	ldrh	r3, [r3, #6]
 8015328:	b29b      	uxth	r3, r3
 801532a:	429a      	cmp	r2, r3
 801532c:	d202      	bcs.n	8015334 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801532e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015332:	e0ab      	b.n	801548c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015336:	2b00      	cmp	r3, #0
 8015338:	d009      	beq.n	801534e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801533a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801533c:	88db      	ldrh	r3, [r3, #6]
 801533e:	b29a      	uxth	r2, r3
 8015340:	693b      	ldr	r3, [r7, #16]
 8015342:	889b      	ldrh	r3, [r3, #4]
 8015344:	b29b      	uxth	r3, r3
 8015346:	429a      	cmp	r2, r3
 8015348:	d001      	beq.n	801534e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801534a:	2300      	movs	r3, #0
 801534c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801534e:	693b      	ldr	r3, [r7, #16]
 8015350:	681b      	ldr	r3, [r3, #0]
 8015352:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8015354:	693b      	ldr	r3, [r7, #16]
 8015356:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8015358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801535a:	2b00      	cmp	r3, #0
 801535c:	d193      	bne.n	8015286 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801535e:	e000      	b.n	8015362 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015360:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015364:	2b00      	cmp	r3, #0
 8015366:	d12d      	bne.n	80153c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801536a:	2b00      	cmp	r3, #0
 801536c:	d01c      	beq.n	80153a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801536e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015370:	88db      	ldrh	r3, [r3, #6]
 8015372:	b29a      	uxth	r2, r3
 8015374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015376:	889b      	ldrh	r3, [r3, #4]
 8015378:	b29b      	uxth	r3, r3
 801537a:	429a      	cmp	r2, r3
 801537c:	d906      	bls.n	801538c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801537e:	4b45      	ldr	r3, [pc, #276]	; (8015494 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015380:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8015384:	4944      	ldr	r1, [pc, #272]	; (8015498 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015386:	4845      	ldr	r0, [pc, #276]	; (801549c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015388:	f00b fd70 	bl	8020e6c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801538c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801538e:	68ba      	ldr	r2, [r7, #8]
 8015390:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015394:	88db      	ldrh	r3, [r3, #6]
 8015396:	b29a      	uxth	r2, r3
 8015398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801539a:	889b      	ldrh	r3, [r3, #4]
 801539c:	b29b      	uxth	r3, r3
 801539e:	429a      	cmp	r2, r3
 80153a0:	d010      	beq.n	80153c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80153a2:	2300      	movs	r3, #0
 80153a4:	623b      	str	r3, [r7, #32]
 80153a6:	e00d      	b.n	80153c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80153a8:	68fb      	ldr	r3, [r7, #12]
 80153aa:	685b      	ldr	r3, [r3, #4]
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d006      	beq.n	80153be <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80153b0:	4b38      	ldr	r3, [pc, #224]	; (8015494 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80153b2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80153b6:	493a      	ldr	r1, [pc, #232]	; (80154a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80153b8:	4838      	ldr	r0, [pc, #224]	; (801549c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80153ba:	f00b fd57 	bl	8020e6c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80153be:	68fb      	ldr	r3, [r7, #12]
 80153c0:	68ba      	ldr	r2, [r7, #8]
 80153c2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d105      	bne.n	80153d6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	7f9b      	ldrb	r3, [r3, #30]
 80153ce:	f003 0301 	and.w	r3, r3, #1
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d059      	beq.n	801548a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80153d6:	6a3b      	ldr	r3, [r7, #32]
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d04f      	beq.n	801547c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80153dc:	68fb      	ldr	r3, [r7, #12]
 80153de:	685b      	ldr	r3, [r3, #4]
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d006      	beq.n	80153f2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	685b      	ldr	r3, [r3, #4]
 80153e8:	685b      	ldr	r3, [r3, #4]
 80153ea:	889b      	ldrh	r3, [r3, #4]
 80153ec:	b29b      	uxth	r3, r3
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d002      	beq.n	80153f8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80153f2:	2300      	movs	r3, #0
 80153f4:	623b      	str	r3, [r7, #32]
 80153f6:	e041      	b.n	801547c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80153f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153fa:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80153fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015402:	e012      	b.n	801542a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015406:	685b      	ldr	r3, [r3, #4]
 8015408:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801540a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801540c:	88db      	ldrh	r3, [r3, #6]
 801540e:	b29a      	uxth	r2, r3
 8015410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015412:	889b      	ldrh	r3, [r3, #4]
 8015414:	b29b      	uxth	r3, r3
 8015416:	429a      	cmp	r2, r3
 8015418:	d002      	beq.n	8015420 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801541a:	2300      	movs	r3, #0
 801541c:	623b      	str	r3, [r7, #32]
            break;
 801541e:	e007      	b.n	8015430 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015422:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8015424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015426:	681b      	ldr	r3, [r3, #0]
 8015428:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801542c:	2b00      	cmp	r3, #0
 801542e:	d1e9      	bne.n	8015404 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015430:	6a3b      	ldr	r3, [r7, #32]
 8015432:	2b00      	cmp	r3, #0
 8015434:	d022      	beq.n	801547c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	685b      	ldr	r3, [r3, #4]
 801543a:	2b00      	cmp	r3, #0
 801543c:	d106      	bne.n	801544c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801543e:	4b15      	ldr	r3, [pc, #84]	; (8015494 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015440:	f240 12df 	movw	r2, #479	; 0x1df
 8015444:	4917      	ldr	r1, [pc, #92]	; (80154a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015446:	4815      	ldr	r0, [pc, #84]	; (801549c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015448:	f00b fd10 	bl	8020e6c <iprintf>
          LWIP_ASSERT("sanity check",
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	685b      	ldr	r3, [r3, #4]
 8015450:	685b      	ldr	r3, [r3, #4]
 8015452:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015454:	429a      	cmp	r2, r3
 8015456:	d106      	bne.n	8015466 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015458:	4b0e      	ldr	r3, [pc, #56]	; (8015494 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801545a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801545e:	4911      	ldr	r1, [pc, #68]	; (80154a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015460:	480e      	ldr	r0, [pc, #56]	; (801549c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015462:	f00b fd03 	bl	8020e6c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	2b00      	cmp	r3, #0
 801546c:	d006      	beq.n	801547c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801546e:	4b09      	ldr	r3, [pc, #36]	; (8015494 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015470:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8015474:	490c      	ldr	r1, [pc, #48]	; (80154a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015476:	4809      	ldr	r0, [pc, #36]	; (801549c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015478:	f00b fcf8 	bl	8020e6c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801547c:	6a3b      	ldr	r3, [r7, #32]
 801547e:	2b00      	cmp	r3, #0
 8015480:	bf14      	ite	ne
 8015482:	2301      	movne	r3, #1
 8015484:	2300      	moveq	r3, #0
 8015486:	b2db      	uxtb	r3, r3
 8015488:	e000      	b.n	801548c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801548a:	2300      	movs	r3, #0
}
 801548c:	4618      	mov	r0, r3
 801548e:	3730      	adds	r7, #48	; 0x30
 8015490:	46bd      	mov	sp, r7
 8015492:	bd80      	pop	{r7, pc}
 8015494:	080263e0 	.word	0x080263e0
 8015498:	080264ec 	.word	0x080264ec
 801549c:	08026450 	.word	0x08026450
 80154a0:	0802650c 	.word	0x0802650c
 80154a4:	08026544 	.word	0x08026544
 80154a8:	08026554 	.word	0x08026554

080154ac <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80154ac:	b580      	push	{r7, lr}
 80154ae:	b08e      	sub	sp, #56	; 0x38
 80154b0:	af00      	add	r7, sp, #0
 80154b2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	685b      	ldr	r3, [r3, #4]
 80154b8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80154ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154bc:	781b      	ldrb	r3, [r3, #0]
 80154be:	f003 030f 	and.w	r3, r3, #15
 80154c2:	b2db      	uxtb	r3, r3
 80154c4:	009b      	lsls	r3, r3, #2
 80154c6:	b2db      	uxtb	r3, r3
 80154c8:	2b14      	cmp	r3, #20
 80154ca:	f040 8167 	bne.w	801579c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80154ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154d0:	88db      	ldrh	r3, [r3, #6]
 80154d2:	b29b      	uxth	r3, r3
 80154d4:	4618      	mov	r0, r3
 80154d6:	f7fd ff37 	bl	8013348 <lwip_htons>
 80154da:	4603      	mov	r3, r0
 80154dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80154e0:	b29b      	uxth	r3, r3
 80154e2:	00db      	lsls	r3, r3, #3
 80154e4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80154e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154e8:	885b      	ldrh	r3, [r3, #2]
 80154ea:	b29b      	uxth	r3, r3
 80154ec:	4618      	mov	r0, r3
 80154ee:	f7fd ff2b 	bl	8013348 <lwip_htons>
 80154f2:	4603      	mov	r3, r0
 80154f4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80154f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154f8:	781b      	ldrb	r3, [r3, #0]
 80154fa:	f003 030f 	and.w	r3, r3, #15
 80154fe:	b2db      	uxtb	r3, r3
 8015500:	009b      	lsls	r3, r3, #2
 8015502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8015506:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801550a:	b29b      	uxth	r3, r3
 801550c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801550e:	429a      	cmp	r2, r3
 8015510:	f0c0 8146 	bcc.w	80157a0 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015514:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015518:	b29b      	uxth	r3, r3
 801551a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801551c:	1ad3      	subs	r3, r2, r3
 801551e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015520:	6878      	ldr	r0, [r7, #4]
 8015522:	f001 fe95 	bl	8017250 <pbuf_clen>
 8015526:	4603      	mov	r3, r0
 8015528:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801552a:	4b9f      	ldr	r3, [pc, #636]	; (80157a8 <ip4_reass+0x2fc>)
 801552c:	881b      	ldrh	r3, [r3, #0]
 801552e:	461a      	mov	r2, r3
 8015530:	8c3b      	ldrh	r3, [r7, #32]
 8015532:	4413      	add	r3, r2
 8015534:	2b0a      	cmp	r3, #10
 8015536:	dd10      	ble.n	801555a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015538:	8c3b      	ldrh	r3, [r7, #32]
 801553a:	4619      	mov	r1, r3
 801553c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801553e:	f7ff fd81 	bl	8015044 <ip_reass_remove_oldest_datagram>
 8015542:	4603      	mov	r3, r0
 8015544:	2b00      	cmp	r3, #0
 8015546:	f000 812d 	beq.w	80157a4 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801554a:	4b97      	ldr	r3, [pc, #604]	; (80157a8 <ip4_reass+0x2fc>)
 801554c:	881b      	ldrh	r3, [r3, #0]
 801554e:	461a      	mov	r2, r3
 8015550:	8c3b      	ldrh	r3, [r7, #32]
 8015552:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015554:	2b0a      	cmp	r3, #10
 8015556:	f300 8125 	bgt.w	80157a4 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801555a:	4b94      	ldr	r3, [pc, #592]	; (80157ac <ip4_reass+0x300>)
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	633b      	str	r3, [r7, #48]	; 0x30
 8015560:	e015      	b.n	801558e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015564:	695a      	ldr	r2, [r3, #20]
 8015566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015568:	68db      	ldr	r3, [r3, #12]
 801556a:	429a      	cmp	r2, r3
 801556c:	d10c      	bne.n	8015588 <ip4_reass+0xdc>
 801556e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015570:	699a      	ldr	r2, [r3, #24]
 8015572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015574:	691b      	ldr	r3, [r3, #16]
 8015576:	429a      	cmp	r2, r3
 8015578:	d106      	bne.n	8015588 <ip4_reass+0xdc>
 801557a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801557c:	899a      	ldrh	r2, [r3, #12]
 801557e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015580:	889b      	ldrh	r3, [r3, #4]
 8015582:	b29b      	uxth	r3, r3
 8015584:	429a      	cmp	r2, r3
 8015586:	d006      	beq.n	8015596 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801558a:	681b      	ldr	r3, [r3, #0]
 801558c:	633b      	str	r3, [r7, #48]	; 0x30
 801558e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015590:	2b00      	cmp	r3, #0
 8015592:	d1e6      	bne.n	8015562 <ip4_reass+0xb6>
 8015594:	e000      	b.n	8015598 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015596:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801559a:	2b00      	cmp	r3, #0
 801559c:	d109      	bne.n	80155b2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801559e:	8c3b      	ldrh	r3, [r7, #32]
 80155a0:	4619      	mov	r1, r3
 80155a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80155a4:	f7ff fdb0 	bl	8015108 <ip_reass_enqueue_new_datagram>
 80155a8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80155aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d11c      	bne.n	80155ea <ip4_reass+0x13e>
      goto nullreturn;
 80155b0:	e109      	b.n	80157c6 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80155b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155b4:	88db      	ldrh	r3, [r3, #6]
 80155b6:	b29b      	uxth	r3, r3
 80155b8:	4618      	mov	r0, r3
 80155ba:	f7fd fec5 	bl	8013348 <lwip_htons>
 80155be:	4603      	mov	r3, r0
 80155c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d110      	bne.n	80155ea <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80155c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155ca:	89db      	ldrh	r3, [r3, #14]
 80155cc:	4618      	mov	r0, r3
 80155ce:	f7fd febb 	bl	8013348 <lwip_htons>
 80155d2:	4603      	mov	r3, r0
 80155d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d006      	beq.n	80155ea <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80155dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155de:	3308      	adds	r3, #8
 80155e0:	2214      	movs	r2, #20
 80155e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80155e4:	4618      	mov	r0, r3
 80155e6:	f00a fd1f 	bl	8020028 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80155ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155ec:	88db      	ldrh	r3, [r3, #6]
 80155ee:	b29b      	uxth	r3, r3
 80155f0:	f003 0320 	and.w	r3, r3, #32
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	bf0c      	ite	eq
 80155f8:	2301      	moveq	r3, #1
 80155fa:	2300      	movne	r3, #0
 80155fc:	b2db      	uxtb	r3, r3
 80155fe:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015600:	69fb      	ldr	r3, [r7, #28]
 8015602:	2b00      	cmp	r3, #0
 8015604:	d00e      	beq.n	8015624 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015606:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015608:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801560a:	4413      	add	r3, r2
 801560c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801560e:	8b7a      	ldrh	r2, [r7, #26]
 8015610:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015612:	429a      	cmp	r2, r3
 8015614:	f0c0 80a0 	bcc.w	8015758 <ip4_reass+0x2ac>
 8015618:	8b7b      	ldrh	r3, [r7, #26]
 801561a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801561e:	4293      	cmp	r3, r2
 8015620:	f200 809a 	bhi.w	8015758 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015624:	69fa      	ldr	r2, [r7, #28]
 8015626:	6879      	ldr	r1, [r7, #4]
 8015628:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801562a:	f7ff fdd5 	bl	80151d8 <ip_reass_chain_frag_into_datagram_and_validate>
 801562e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015630:	697b      	ldr	r3, [r7, #20]
 8015632:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015636:	f000 8091 	beq.w	801575c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801563a:	4b5b      	ldr	r3, [pc, #364]	; (80157a8 <ip4_reass+0x2fc>)
 801563c:	881a      	ldrh	r2, [r3, #0]
 801563e:	8c3b      	ldrh	r3, [r7, #32]
 8015640:	4413      	add	r3, r2
 8015642:	b29a      	uxth	r2, r3
 8015644:	4b58      	ldr	r3, [pc, #352]	; (80157a8 <ip4_reass+0x2fc>)
 8015646:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015648:	69fb      	ldr	r3, [r7, #28]
 801564a:	2b00      	cmp	r3, #0
 801564c:	d00d      	beq.n	801566a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801564e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015650:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015652:	4413      	add	r3, r2
 8015654:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8015656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015658:	8a7a      	ldrh	r2, [r7, #18]
 801565a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801565c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801565e:	7f9b      	ldrb	r3, [r3, #30]
 8015660:	f043 0301 	orr.w	r3, r3, #1
 8015664:	b2da      	uxtb	r2, r3
 8015666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015668:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801566a:	697b      	ldr	r3, [r7, #20]
 801566c:	2b01      	cmp	r3, #1
 801566e:	d171      	bne.n	8015754 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015672:	8b9b      	ldrh	r3, [r3, #28]
 8015674:	3314      	adds	r3, #20
 8015676:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801567a:	685b      	ldr	r3, [r3, #4]
 801567c:	685b      	ldr	r3, [r3, #4]
 801567e:	681b      	ldr	r3, [r3, #0]
 8015680:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015684:	685b      	ldr	r3, [r3, #4]
 8015686:	685b      	ldr	r3, [r3, #4]
 8015688:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801568a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801568c:	3308      	adds	r3, #8
 801568e:	2214      	movs	r2, #20
 8015690:	4619      	mov	r1, r3
 8015692:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015694:	f00a fcc8 	bl	8020028 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015698:	8a3b      	ldrh	r3, [r7, #16]
 801569a:	4618      	mov	r0, r3
 801569c:	f7fd fe54 	bl	8013348 <lwip_htons>
 80156a0:	4603      	mov	r3, r0
 80156a2:	461a      	mov	r2, r3
 80156a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156a6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80156a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156aa:	2200      	movs	r2, #0
 80156ac:	719a      	strb	r2, [r3, #6]
 80156ae:	2200      	movs	r2, #0
 80156b0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80156b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156b4:	2200      	movs	r2, #0
 80156b6:	729a      	strb	r2, [r3, #10]
 80156b8:	2200      	movs	r2, #0
 80156ba:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80156bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156be:	685b      	ldr	r3, [r3, #4]
 80156c0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80156c2:	e00d      	b.n	80156e0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80156c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80156c6:	685b      	ldr	r3, [r3, #4]
 80156c8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80156ca:	2114      	movs	r1, #20
 80156cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80156ce:	f001 fcb1 	bl	8017034 <pbuf_remove_header>
      pbuf_cat(p, r);
 80156d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80156d4:	6878      	ldr	r0, [r7, #4]
 80156d6:	f001 fdf5 	bl	80172c4 <pbuf_cat>
      r = iprh->next_pbuf;
 80156da:	68fb      	ldr	r3, [r7, #12]
 80156dc:	681b      	ldr	r3, [r3, #0]
 80156de:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80156e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d1ee      	bne.n	80156c4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80156e6:	4b31      	ldr	r3, [pc, #196]	; (80157ac <ip4_reass+0x300>)
 80156e8:	681b      	ldr	r3, [r3, #0]
 80156ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80156ec:	429a      	cmp	r2, r3
 80156ee:	d102      	bne.n	80156f6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80156f0:	2300      	movs	r3, #0
 80156f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80156f4:	e010      	b.n	8015718 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80156f6:	4b2d      	ldr	r3, [pc, #180]	; (80157ac <ip4_reass+0x300>)
 80156f8:	681b      	ldr	r3, [r3, #0]
 80156fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80156fc:	e007      	b.n	801570e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80156fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015700:	681b      	ldr	r3, [r3, #0]
 8015702:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015704:	429a      	cmp	r2, r3
 8015706:	d006      	beq.n	8015716 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801570e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015710:	2b00      	cmp	r3, #0
 8015712:	d1f4      	bne.n	80156fe <ip4_reass+0x252>
 8015714:	e000      	b.n	8015718 <ip4_reass+0x26c>
          break;
 8015716:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015718:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801571a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801571c:	f7ff fd2e 	bl	801517c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015720:	6878      	ldr	r0, [r7, #4]
 8015722:	f001 fd95 	bl	8017250 <pbuf_clen>
 8015726:	4603      	mov	r3, r0
 8015728:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801572a:	4b1f      	ldr	r3, [pc, #124]	; (80157a8 <ip4_reass+0x2fc>)
 801572c:	881b      	ldrh	r3, [r3, #0]
 801572e:	8c3a      	ldrh	r2, [r7, #32]
 8015730:	429a      	cmp	r2, r3
 8015732:	d906      	bls.n	8015742 <ip4_reass+0x296>
 8015734:	4b1e      	ldr	r3, [pc, #120]	; (80157b0 <ip4_reass+0x304>)
 8015736:	f240 229b 	movw	r2, #667	; 0x29b
 801573a:	491e      	ldr	r1, [pc, #120]	; (80157b4 <ip4_reass+0x308>)
 801573c:	481e      	ldr	r0, [pc, #120]	; (80157b8 <ip4_reass+0x30c>)
 801573e:	f00b fb95 	bl	8020e6c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8015742:	4b19      	ldr	r3, [pc, #100]	; (80157a8 <ip4_reass+0x2fc>)
 8015744:	881a      	ldrh	r2, [r3, #0]
 8015746:	8c3b      	ldrh	r3, [r7, #32]
 8015748:	1ad3      	subs	r3, r2, r3
 801574a:	b29a      	uxth	r2, r3
 801574c:	4b16      	ldr	r3, [pc, #88]	; (80157a8 <ip4_reass+0x2fc>)
 801574e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	e03c      	b.n	80157ce <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8015754:	2300      	movs	r3, #0
 8015756:	e03a      	b.n	80157ce <ip4_reass+0x322>
      goto nullreturn_ipr;
 8015758:	bf00      	nop
 801575a:	e000      	b.n	801575e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801575c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801575e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015760:	2b00      	cmp	r3, #0
 8015762:	d106      	bne.n	8015772 <ip4_reass+0x2c6>
 8015764:	4b12      	ldr	r3, [pc, #72]	; (80157b0 <ip4_reass+0x304>)
 8015766:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801576a:	4914      	ldr	r1, [pc, #80]	; (80157bc <ip4_reass+0x310>)
 801576c:	4812      	ldr	r0, [pc, #72]	; (80157b8 <ip4_reass+0x30c>)
 801576e:	f00b fb7d 	bl	8020e6c <iprintf>
  if (ipr->p == NULL) {
 8015772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015774:	685b      	ldr	r3, [r3, #4]
 8015776:	2b00      	cmp	r3, #0
 8015778:	d124      	bne.n	80157c4 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801577a:	4b0c      	ldr	r3, [pc, #48]	; (80157ac <ip4_reass+0x300>)
 801577c:	681b      	ldr	r3, [r3, #0]
 801577e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015780:	429a      	cmp	r2, r3
 8015782:	d006      	beq.n	8015792 <ip4_reass+0x2e6>
 8015784:	4b0a      	ldr	r3, [pc, #40]	; (80157b0 <ip4_reass+0x304>)
 8015786:	f240 22ab 	movw	r2, #683	; 0x2ab
 801578a:	490d      	ldr	r1, [pc, #52]	; (80157c0 <ip4_reass+0x314>)
 801578c:	480a      	ldr	r0, [pc, #40]	; (80157b8 <ip4_reass+0x30c>)
 801578e:	f00b fb6d 	bl	8020e6c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015792:	2100      	movs	r1, #0
 8015794:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015796:	f7ff fcf1 	bl	801517c <ip_reass_dequeue_datagram>
 801579a:	e014      	b.n	80157c6 <ip4_reass+0x31a>
    goto nullreturn;
 801579c:	bf00      	nop
 801579e:	e012      	b.n	80157c6 <ip4_reass+0x31a>
    goto nullreturn;
 80157a0:	bf00      	nop
 80157a2:	e010      	b.n	80157c6 <ip4_reass+0x31a>
      goto nullreturn;
 80157a4:	bf00      	nop
 80157a6:	e00e      	b.n	80157c6 <ip4_reass+0x31a>
 80157a8:	24004868 	.word	0x24004868
 80157ac:	24004864 	.word	0x24004864
 80157b0:	080263e0 	.word	0x080263e0
 80157b4:	08026578 	.word	0x08026578
 80157b8:	08026450 	.word	0x08026450
 80157bc:	08026594 	.word	0x08026594
 80157c0:	080265a0 	.word	0x080265a0
  }

nullreturn:
 80157c4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80157c6:	6878      	ldr	r0, [r7, #4]
 80157c8:	f001 fcba 	bl	8017140 <pbuf_free>
  return NULL;
 80157cc:	2300      	movs	r3, #0
}
 80157ce:	4618      	mov	r0, r3
 80157d0:	3738      	adds	r7, #56	; 0x38
 80157d2:	46bd      	mov	sp, r7
 80157d4:	bd80      	pop	{r7, pc}
 80157d6:	bf00      	nop

080157d8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80157d8:	b580      	push	{r7, lr}
 80157da:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80157dc:	2005      	movs	r0, #5
 80157de:	f000 fdc9 	bl	8016374 <memp_malloc>
 80157e2:	4603      	mov	r3, r0
}
 80157e4:	4618      	mov	r0, r3
 80157e6:	bd80      	pop	{r7, pc}

080157e8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80157e8:	b580      	push	{r7, lr}
 80157ea:	b082      	sub	sp, #8
 80157ec:	af00      	add	r7, sp, #0
 80157ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d106      	bne.n	8015804 <ip_frag_free_pbuf_custom_ref+0x1c>
 80157f6:	4b07      	ldr	r3, [pc, #28]	; (8015814 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80157f8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80157fc:	4906      	ldr	r1, [pc, #24]	; (8015818 <ip_frag_free_pbuf_custom_ref+0x30>)
 80157fe:	4807      	ldr	r0, [pc, #28]	; (801581c <ip_frag_free_pbuf_custom_ref+0x34>)
 8015800:	f00b fb34 	bl	8020e6c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015804:	6879      	ldr	r1, [r7, #4]
 8015806:	2005      	movs	r0, #5
 8015808:	f000 fe24 	bl	8016454 <memp_free>
}
 801580c:	bf00      	nop
 801580e:	3708      	adds	r7, #8
 8015810:	46bd      	mov	sp, r7
 8015812:	bd80      	pop	{r7, pc}
 8015814:	080263e0 	.word	0x080263e0
 8015818:	080265c0 	.word	0x080265c0
 801581c:	08026450 	.word	0x08026450

08015820 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015820:	b580      	push	{r7, lr}
 8015822:	b084      	sub	sp, #16
 8015824:	af00      	add	r7, sp, #0
 8015826:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	2b00      	cmp	r3, #0
 8015830:	d106      	bne.n	8015840 <ipfrag_free_pbuf_custom+0x20>
 8015832:	4b11      	ldr	r3, [pc, #68]	; (8015878 <ipfrag_free_pbuf_custom+0x58>)
 8015834:	f240 22ce 	movw	r2, #718	; 0x2ce
 8015838:	4910      	ldr	r1, [pc, #64]	; (801587c <ipfrag_free_pbuf_custom+0x5c>)
 801583a:	4811      	ldr	r0, [pc, #68]	; (8015880 <ipfrag_free_pbuf_custom+0x60>)
 801583c:	f00b fb16 	bl	8020e6c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8015840:	68fa      	ldr	r2, [r7, #12]
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	429a      	cmp	r2, r3
 8015846:	d006      	beq.n	8015856 <ipfrag_free_pbuf_custom+0x36>
 8015848:	4b0b      	ldr	r3, [pc, #44]	; (8015878 <ipfrag_free_pbuf_custom+0x58>)
 801584a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801584e:	490d      	ldr	r1, [pc, #52]	; (8015884 <ipfrag_free_pbuf_custom+0x64>)
 8015850:	480b      	ldr	r0, [pc, #44]	; (8015880 <ipfrag_free_pbuf_custom+0x60>)
 8015852:	f00b fb0b 	bl	8020e6c <iprintf>
  if (pcr->original != NULL) {
 8015856:	68fb      	ldr	r3, [r7, #12]
 8015858:	695b      	ldr	r3, [r3, #20]
 801585a:	2b00      	cmp	r3, #0
 801585c:	d004      	beq.n	8015868 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801585e:	68fb      	ldr	r3, [r7, #12]
 8015860:	695b      	ldr	r3, [r3, #20]
 8015862:	4618      	mov	r0, r3
 8015864:	f001 fc6c 	bl	8017140 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8015868:	68f8      	ldr	r0, [r7, #12]
 801586a:	f7ff ffbd 	bl	80157e8 <ip_frag_free_pbuf_custom_ref>
}
 801586e:	bf00      	nop
 8015870:	3710      	adds	r7, #16
 8015872:	46bd      	mov	sp, r7
 8015874:	bd80      	pop	{r7, pc}
 8015876:	bf00      	nop
 8015878:	080263e0 	.word	0x080263e0
 801587c:	080265cc 	.word	0x080265cc
 8015880:	08026450 	.word	0x08026450
 8015884:	080265d8 	.word	0x080265d8

08015888 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8015888:	b580      	push	{r7, lr}
 801588a:	b094      	sub	sp, #80	; 0x50
 801588c:	af02      	add	r7, sp, #8
 801588e:	60f8      	str	r0, [r7, #12]
 8015890:	60b9      	str	r1, [r7, #8]
 8015892:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015894:	2300      	movs	r3, #0
 8015896:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801589a:	68bb      	ldr	r3, [r7, #8]
 801589c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801589e:	3b14      	subs	r3, #20
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	da00      	bge.n	80158a6 <ip4_frag+0x1e>
 80158a4:	3307      	adds	r3, #7
 80158a6:	10db      	asrs	r3, r3, #3
 80158a8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80158aa:	2314      	movs	r3, #20
 80158ac:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	685b      	ldr	r3, [r3, #4]
 80158b2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80158b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80158b6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80158b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158ba:	781b      	ldrb	r3, [r3, #0]
 80158bc:	f003 030f 	and.w	r3, r3, #15
 80158c0:	b2db      	uxtb	r3, r3
 80158c2:	009b      	lsls	r3, r3, #2
 80158c4:	b2db      	uxtb	r3, r3
 80158c6:	2b14      	cmp	r3, #20
 80158c8:	d002      	beq.n	80158d0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80158ca:	f06f 0305 	mvn.w	r3, #5
 80158ce:	e110      	b.n	8015af2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	895b      	ldrh	r3, [r3, #10]
 80158d4:	2b13      	cmp	r3, #19
 80158d6:	d809      	bhi.n	80158ec <ip4_frag+0x64>
 80158d8:	4b88      	ldr	r3, [pc, #544]	; (8015afc <ip4_frag+0x274>)
 80158da:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80158de:	4988      	ldr	r1, [pc, #544]	; (8015b00 <ip4_frag+0x278>)
 80158e0:	4888      	ldr	r0, [pc, #544]	; (8015b04 <ip4_frag+0x27c>)
 80158e2:	f00b fac3 	bl	8020e6c <iprintf>
 80158e6:	f06f 0305 	mvn.w	r3, #5
 80158ea:	e102      	b.n	8015af2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80158ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158ee:	88db      	ldrh	r3, [r3, #6]
 80158f0:	b29b      	uxth	r3, r3
 80158f2:	4618      	mov	r0, r3
 80158f4:	f7fd fd28 	bl	8013348 <lwip_htons>
 80158f8:	4603      	mov	r3, r0
 80158fa:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80158fc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80158fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015902:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8015906:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015908:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801590c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	891b      	ldrh	r3, [r3, #8]
 8015912:	3b14      	subs	r3, #20
 8015914:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8015918:	e0e1      	b.n	8015ade <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801591a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801591c:	00db      	lsls	r3, r3, #3
 801591e:	b29b      	uxth	r3, r3
 8015920:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015924:	4293      	cmp	r3, r2
 8015926:	bf28      	it	cs
 8015928:	4613      	movcs	r3, r2
 801592a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801592c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015930:	2114      	movs	r1, #20
 8015932:	200e      	movs	r0, #14
 8015934:	f001 f920 	bl	8016b78 <pbuf_alloc>
 8015938:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801593c:	2b00      	cmp	r3, #0
 801593e:	f000 80d5 	beq.w	8015aec <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8015942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015944:	895b      	ldrh	r3, [r3, #10]
 8015946:	2b13      	cmp	r3, #19
 8015948:	d806      	bhi.n	8015958 <ip4_frag+0xd0>
 801594a:	4b6c      	ldr	r3, [pc, #432]	; (8015afc <ip4_frag+0x274>)
 801594c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8015950:	496d      	ldr	r1, [pc, #436]	; (8015b08 <ip4_frag+0x280>)
 8015952:	486c      	ldr	r0, [pc, #432]	; (8015b04 <ip4_frag+0x27c>)
 8015954:	f00b fa8a 	bl	8020e6c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8015958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801595a:	685b      	ldr	r3, [r3, #4]
 801595c:	2214      	movs	r2, #20
 801595e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015960:	4618      	mov	r0, r3
 8015962:	f00a fb61 	bl	8020028 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8015966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015968:	685b      	ldr	r3, [r3, #4]
 801596a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801596c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801596e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8015972:	e064      	b.n	8015a3e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8015974:	68fb      	ldr	r3, [r7, #12]
 8015976:	895a      	ldrh	r2, [r3, #10]
 8015978:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801597a:	1ad3      	subs	r3, r2, r3
 801597c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801597e:	68fb      	ldr	r3, [r7, #12]
 8015980:	895b      	ldrh	r3, [r3, #10]
 8015982:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015984:	429a      	cmp	r2, r3
 8015986:	d906      	bls.n	8015996 <ip4_frag+0x10e>
 8015988:	4b5c      	ldr	r3, [pc, #368]	; (8015afc <ip4_frag+0x274>)
 801598a:	f240 322d 	movw	r2, #813	; 0x32d
 801598e:	495f      	ldr	r1, [pc, #380]	; (8015b0c <ip4_frag+0x284>)
 8015990:	485c      	ldr	r0, [pc, #368]	; (8015b04 <ip4_frag+0x27c>)
 8015992:	f00b fa6b 	bl	8020e6c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8015996:	8bfa      	ldrh	r2, [r7, #30]
 8015998:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801599c:	4293      	cmp	r3, r2
 801599e:	bf28      	it	cs
 80159a0:	4613      	movcs	r3, r2
 80159a2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80159a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d105      	bne.n	80159ba <ip4_frag+0x132>
        poff = 0;
 80159ae:	2300      	movs	r3, #0
 80159b0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80159b2:	68fb      	ldr	r3, [r7, #12]
 80159b4:	681b      	ldr	r3, [r3, #0]
 80159b6:	60fb      	str	r3, [r7, #12]
        continue;
 80159b8:	e041      	b.n	8015a3e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80159ba:	f7ff ff0d 	bl	80157d8 <ip_frag_alloc_pbuf_custom_ref>
 80159be:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80159c0:	69bb      	ldr	r3, [r7, #24]
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d103      	bne.n	80159ce <ip4_frag+0x146>
        pbuf_free(rambuf);
 80159c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80159c8:	f001 fbba 	bl	8017140 <pbuf_free>
        goto memerr;
 80159cc:	e08f      	b.n	8015aee <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80159ce:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80159d0:	68fb      	ldr	r3, [r7, #12]
 80159d2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80159d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80159d6:	4413      	add	r3, r2
 80159d8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80159dc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80159e0:	9201      	str	r2, [sp, #4]
 80159e2:	9300      	str	r3, [sp, #0]
 80159e4:	4603      	mov	r3, r0
 80159e6:	2241      	movs	r2, #65	; 0x41
 80159e8:	2000      	movs	r0, #0
 80159ea:	f001 f9ef 	bl	8016dcc <pbuf_alloced_custom>
 80159ee:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80159f0:	697b      	ldr	r3, [r7, #20]
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d106      	bne.n	8015a04 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80159f6:	69b8      	ldr	r0, [r7, #24]
 80159f8:	f7ff fef6 	bl	80157e8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80159fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80159fe:	f001 fb9f 	bl	8017140 <pbuf_free>
        goto memerr;
 8015a02:	e074      	b.n	8015aee <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8015a04:	68f8      	ldr	r0, [r7, #12]
 8015a06:	f001 fc3b 	bl	8017280 <pbuf_ref>
      pcr->original = p;
 8015a0a:	69bb      	ldr	r3, [r7, #24]
 8015a0c:	68fa      	ldr	r2, [r7, #12]
 8015a0e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015a10:	69bb      	ldr	r3, [r7, #24]
 8015a12:	4a3f      	ldr	r2, [pc, #252]	; (8015b10 <ip4_frag+0x288>)
 8015a14:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8015a16:	6979      	ldr	r1, [r7, #20]
 8015a18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015a1a:	f001 fc53 	bl	80172c4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8015a1e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8015a22:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015a26:	1ad3      	subs	r3, r2, r3
 8015a28:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8015a2c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d004      	beq.n	8015a3e <ip4_frag+0x1b6>
        poff = 0;
 8015a34:	2300      	movs	r3, #0
 8015a36:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015a38:	68fb      	ldr	r3, [r7, #12]
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8015a3e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d196      	bne.n	8015974 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8015a46:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015a48:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015a4c:	4413      	add	r3, r2
 8015a4e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8015a50:	68bb      	ldr	r3, [r7, #8]
 8015a52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015a54:	f1a3 0213 	sub.w	r2, r3, #19
 8015a58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015a5c:	429a      	cmp	r2, r3
 8015a5e:	bfcc      	ite	gt
 8015a60:	2301      	movgt	r3, #1
 8015a62:	2300      	movle	r3, #0
 8015a64:	b2db      	uxtb	r3, r3
 8015a66:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8015a68:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015a6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015a70:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8015a72:	6a3b      	ldr	r3, [r7, #32]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d002      	beq.n	8015a7e <ip4_frag+0x1f6>
 8015a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d003      	beq.n	8015a86 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8015a7e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015a80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015a84:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8015a86:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015a88:	4618      	mov	r0, r3
 8015a8a:	f7fd fc5d 	bl	8013348 <lwip_htons>
 8015a8e:	4603      	mov	r3, r0
 8015a90:	461a      	mov	r2, r3
 8015a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a94:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8015a96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015a98:	3314      	adds	r3, #20
 8015a9a:	b29b      	uxth	r3, r3
 8015a9c:	4618      	mov	r0, r3
 8015a9e:	f7fd fc53 	bl	8013348 <lwip_htons>
 8015aa2:	4603      	mov	r3, r0
 8015aa4:	461a      	mov	r2, r3
 8015aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015aa8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8015aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015aac:	2200      	movs	r2, #0
 8015aae:	729a      	strb	r2, [r3, #10]
 8015ab0:	2200      	movs	r2, #0
 8015ab2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8015ab4:	68bb      	ldr	r3, [r7, #8]
 8015ab6:	695b      	ldr	r3, [r3, #20]
 8015ab8:	687a      	ldr	r2, [r7, #4]
 8015aba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015abc:	68b8      	ldr	r0, [r7, #8]
 8015abe:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8015ac0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015ac2:	f001 fb3d 	bl	8017140 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8015ac6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015aca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015acc:	1ad3      	subs	r3, r2, r3
 8015ace:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8015ad2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8015ad6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015ad8:	4413      	add	r3, r2
 8015ada:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8015ade:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	f47f af19 	bne.w	801591a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8015ae8:	2300      	movs	r3, #0
 8015aea:	e002      	b.n	8015af2 <ip4_frag+0x26a>
      goto memerr;
 8015aec:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8015aee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8015af2:	4618      	mov	r0, r3
 8015af4:	3748      	adds	r7, #72	; 0x48
 8015af6:	46bd      	mov	sp, r7
 8015af8:	bd80      	pop	{r7, pc}
 8015afa:	bf00      	nop
 8015afc:	080263e0 	.word	0x080263e0
 8015b00:	080265e4 	.word	0x080265e4
 8015b04:	08026450 	.word	0x08026450
 8015b08:	08026600 	.word	0x08026600
 8015b0c:	08026620 	.word	0x08026620
 8015b10:	08015821 	.word	0x08015821

08015b14 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8015b14:	b480      	push	{r7}
 8015b16:	b083      	sub	sp, #12
 8015b18:	af00      	add	r7, sp, #0
 8015b1a:	4603      	mov	r3, r0
 8015b1c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8015b1e:	4b05      	ldr	r3, [pc, #20]	; (8015b34 <ptr_to_mem+0x20>)
 8015b20:	681a      	ldr	r2, [r3, #0]
 8015b22:	88fb      	ldrh	r3, [r7, #6]
 8015b24:	4413      	add	r3, r2
}
 8015b26:	4618      	mov	r0, r3
 8015b28:	370c      	adds	r7, #12
 8015b2a:	46bd      	mov	sp, r7
 8015b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b30:	4770      	bx	lr
 8015b32:	bf00      	nop
 8015b34:	2400486c 	.word	0x2400486c

08015b38 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8015b38:	b480      	push	{r7}
 8015b3a:	b083      	sub	sp, #12
 8015b3c:	af00      	add	r7, sp, #0
 8015b3e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8015b40:	4b05      	ldr	r3, [pc, #20]	; (8015b58 <mem_to_ptr+0x20>)
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	687a      	ldr	r2, [r7, #4]
 8015b46:	1ad3      	subs	r3, r2, r3
 8015b48:	b29b      	uxth	r3, r3
}
 8015b4a:	4618      	mov	r0, r3
 8015b4c:	370c      	adds	r7, #12
 8015b4e:	46bd      	mov	sp, r7
 8015b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b54:	4770      	bx	lr
 8015b56:	bf00      	nop
 8015b58:	2400486c 	.word	0x2400486c

08015b5c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8015b5c:	b590      	push	{r4, r7, lr}
 8015b5e:	b085      	sub	sp, #20
 8015b60:	af00      	add	r7, sp, #0
 8015b62:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8015b64:	4b45      	ldr	r3, [pc, #276]	; (8015c7c <plug_holes+0x120>)
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	687a      	ldr	r2, [r7, #4]
 8015b6a:	429a      	cmp	r2, r3
 8015b6c:	d206      	bcs.n	8015b7c <plug_holes+0x20>
 8015b6e:	4b44      	ldr	r3, [pc, #272]	; (8015c80 <plug_holes+0x124>)
 8015b70:	f240 12df 	movw	r2, #479	; 0x1df
 8015b74:	4943      	ldr	r1, [pc, #268]	; (8015c84 <plug_holes+0x128>)
 8015b76:	4844      	ldr	r0, [pc, #272]	; (8015c88 <plug_holes+0x12c>)
 8015b78:	f00b f978 	bl	8020e6c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8015b7c:	4b43      	ldr	r3, [pc, #268]	; (8015c8c <plug_holes+0x130>)
 8015b7e:	681b      	ldr	r3, [r3, #0]
 8015b80:	687a      	ldr	r2, [r7, #4]
 8015b82:	429a      	cmp	r2, r3
 8015b84:	d306      	bcc.n	8015b94 <plug_holes+0x38>
 8015b86:	4b3e      	ldr	r3, [pc, #248]	; (8015c80 <plug_holes+0x124>)
 8015b88:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8015b8c:	4940      	ldr	r1, [pc, #256]	; (8015c90 <plug_holes+0x134>)
 8015b8e:	483e      	ldr	r0, [pc, #248]	; (8015c88 <plug_holes+0x12c>)
 8015b90:	f00b f96c 	bl	8020e6c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	791b      	ldrb	r3, [r3, #4]
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d006      	beq.n	8015baa <plug_holes+0x4e>
 8015b9c:	4b38      	ldr	r3, [pc, #224]	; (8015c80 <plug_holes+0x124>)
 8015b9e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8015ba2:	493c      	ldr	r1, [pc, #240]	; (8015c94 <plug_holes+0x138>)
 8015ba4:	4838      	ldr	r0, [pc, #224]	; (8015c88 <plug_holes+0x12c>)
 8015ba6:	f00b f961 	bl	8020e6c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	881b      	ldrh	r3, [r3, #0]
 8015bae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015bb2:	d906      	bls.n	8015bc2 <plug_holes+0x66>
 8015bb4:	4b32      	ldr	r3, [pc, #200]	; (8015c80 <plug_holes+0x124>)
 8015bb6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8015bba:	4937      	ldr	r1, [pc, #220]	; (8015c98 <plug_holes+0x13c>)
 8015bbc:	4832      	ldr	r0, [pc, #200]	; (8015c88 <plug_holes+0x12c>)
 8015bbe:	f00b f955 	bl	8020e6c <iprintf>

  nmem = ptr_to_mem(mem->next);
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	881b      	ldrh	r3, [r3, #0]
 8015bc6:	4618      	mov	r0, r3
 8015bc8:	f7ff ffa4 	bl	8015b14 <ptr_to_mem>
 8015bcc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8015bce:	687a      	ldr	r2, [r7, #4]
 8015bd0:	68fb      	ldr	r3, [r7, #12]
 8015bd2:	429a      	cmp	r2, r3
 8015bd4:	d024      	beq.n	8015c20 <plug_holes+0xc4>
 8015bd6:	68fb      	ldr	r3, [r7, #12]
 8015bd8:	791b      	ldrb	r3, [r3, #4]
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d120      	bne.n	8015c20 <plug_holes+0xc4>
 8015bde:	4b2b      	ldr	r3, [pc, #172]	; (8015c8c <plug_holes+0x130>)
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	68fa      	ldr	r2, [r7, #12]
 8015be4:	429a      	cmp	r2, r3
 8015be6:	d01b      	beq.n	8015c20 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8015be8:	4b2c      	ldr	r3, [pc, #176]	; (8015c9c <plug_holes+0x140>)
 8015bea:	681b      	ldr	r3, [r3, #0]
 8015bec:	68fa      	ldr	r2, [r7, #12]
 8015bee:	429a      	cmp	r2, r3
 8015bf0:	d102      	bne.n	8015bf8 <plug_holes+0x9c>
      lfree = mem;
 8015bf2:	4a2a      	ldr	r2, [pc, #168]	; (8015c9c <plug_holes+0x140>)
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8015bf8:	68fb      	ldr	r3, [r7, #12]
 8015bfa:	881a      	ldrh	r2, [r3, #0]
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8015c00:	68fb      	ldr	r3, [r7, #12]
 8015c02:	881b      	ldrh	r3, [r3, #0]
 8015c04:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015c08:	d00a      	beq.n	8015c20 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8015c0a:	68fb      	ldr	r3, [r7, #12]
 8015c0c:	881b      	ldrh	r3, [r3, #0]
 8015c0e:	4618      	mov	r0, r3
 8015c10:	f7ff ff80 	bl	8015b14 <ptr_to_mem>
 8015c14:	4604      	mov	r4, r0
 8015c16:	6878      	ldr	r0, [r7, #4]
 8015c18:	f7ff ff8e 	bl	8015b38 <mem_to_ptr>
 8015c1c:	4603      	mov	r3, r0
 8015c1e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	885b      	ldrh	r3, [r3, #2]
 8015c24:	4618      	mov	r0, r3
 8015c26:	f7ff ff75 	bl	8015b14 <ptr_to_mem>
 8015c2a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8015c2c:	68ba      	ldr	r2, [r7, #8]
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	429a      	cmp	r2, r3
 8015c32:	d01f      	beq.n	8015c74 <plug_holes+0x118>
 8015c34:	68bb      	ldr	r3, [r7, #8]
 8015c36:	791b      	ldrb	r3, [r3, #4]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d11b      	bne.n	8015c74 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8015c3c:	4b17      	ldr	r3, [pc, #92]	; (8015c9c <plug_holes+0x140>)
 8015c3e:	681b      	ldr	r3, [r3, #0]
 8015c40:	687a      	ldr	r2, [r7, #4]
 8015c42:	429a      	cmp	r2, r3
 8015c44:	d102      	bne.n	8015c4c <plug_holes+0xf0>
      lfree = pmem;
 8015c46:	4a15      	ldr	r2, [pc, #84]	; (8015c9c <plug_holes+0x140>)
 8015c48:	68bb      	ldr	r3, [r7, #8]
 8015c4a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	881a      	ldrh	r2, [r3, #0]
 8015c50:	68bb      	ldr	r3, [r7, #8]
 8015c52:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	881b      	ldrh	r3, [r3, #0]
 8015c58:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015c5c:	d00a      	beq.n	8015c74 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	881b      	ldrh	r3, [r3, #0]
 8015c62:	4618      	mov	r0, r3
 8015c64:	f7ff ff56 	bl	8015b14 <ptr_to_mem>
 8015c68:	4604      	mov	r4, r0
 8015c6a:	68b8      	ldr	r0, [r7, #8]
 8015c6c:	f7ff ff64 	bl	8015b38 <mem_to_ptr>
 8015c70:	4603      	mov	r3, r0
 8015c72:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8015c74:	bf00      	nop
 8015c76:	3714      	adds	r7, #20
 8015c78:	46bd      	mov	sp, r7
 8015c7a:	bd90      	pop	{r4, r7, pc}
 8015c7c:	2400486c 	.word	0x2400486c
 8015c80:	08026630 	.word	0x08026630
 8015c84:	0802668c 	.word	0x0802668c
 8015c88:	080266a4 	.word	0x080266a4
 8015c8c:	24004870 	.word	0x24004870
 8015c90:	080266cc 	.word	0x080266cc
 8015c94:	080266e8 	.word	0x080266e8
 8015c98:	08026704 	.word	0x08026704
 8015c9c:	24004874 	.word	0x24004874

08015ca0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8015ca0:	b580      	push	{r7, lr}
 8015ca2:	b082      	sub	sp, #8
 8015ca4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8015ca6:	4b16      	ldr	r3, [pc, #88]	; (8015d00 <mem_init+0x60>)
 8015ca8:	4a16      	ldr	r2, [pc, #88]	; (8015d04 <mem_init+0x64>)
 8015caa:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8015cac:	4b14      	ldr	r3, [pc, #80]	; (8015d00 <mem_init+0x60>)
 8015cae:	681b      	ldr	r3, [r3, #0]
 8015cb0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8015cb8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	2200      	movs	r2, #0
 8015cbe:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	2200      	movs	r2, #0
 8015cc4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8015cc6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8015cca:	f7ff ff23 	bl	8015b14 <ptr_to_mem>
 8015cce:	4603      	mov	r3, r0
 8015cd0:	4a0d      	ldr	r2, [pc, #52]	; (8015d08 <mem_init+0x68>)
 8015cd2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8015cd4:	4b0c      	ldr	r3, [pc, #48]	; (8015d08 <mem_init+0x68>)
 8015cd6:	681b      	ldr	r3, [r3, #0]
 8015cd8:	2201      	movs	r2, #1
 8015cda:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8015cdc:	4b0a      	ldr	r3, [pc, #40]	; (8015d08 <mem_init+0x68>)
 8015cde:	681b      	ldr	r3, [r3, #0]
 8015ce0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8015ce4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8015ce6:	4b08      	ldr	r3, [pc, #32]	; (8015d08 <mem_init+0x68>)
 8015ce8:	681b      	ldr	r3, [r3, #0]
 8015cea:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8015cee:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8015cf0:	4b03      	ldr	r3, [pc, #12]	; (8015d00 <mem_init+0x60>)
 8015cf2:	681b      	ldr	r3, [r3, #0]
 8015cf4:	4a05      	ldr	r2, [pc, #20]	; (8015d0c <mem_init+0x6c>)
 8015cf6:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8015cf8:	bf00      	nop
 8015cfa:	3708      	adds	r7, #8
 8015cfc:	46bd      	mov	sp, r7
 8015cfe:	bd80      	pop	{r7, pc}
 8015d00:	2400486c 	.word	0x2400486c
 8015d04:	30044000 	.word	0x30044000
 8015d08:	24004870 	.word	0x24004870
 8015d0c:	24004874 	.word	0x24004874

08015d10 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8015d10:	b580      	push	{r7, lr}
 8015d12:	b086      	sub	sp, #24
 8015d14:	af00      	add	r7, sp, #0
 8015d16:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8015d18:	6878      	ldr	r0, [r7, #4]
 8015d1a:	f7ff ff0d 	bl	8015b38 <mem_to_ptr>
 8015d1e:	4603      	mov	r3, r0
 8015d20:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	881b      	ldrh	r3, [r3, #0]
 8015d26:	4618      	mov	r0, r3
 8015d28:	f7ff fef4 	bl	8015b14 <ptr_to_mem>
 8015d2c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	885b      	ldrh	r3, [r3, #2]
 8015d32:	4618      	mov	r0, r3
 8015d34:	f7ff feee 	bl	8015b14 <ptr_to_mem>
 8015d38:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	881b      	ldrh	r3, [r3, #0]
 8015d3e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015d42:	d818      	bhi.n	8015d76 <mem_link_valid+0x66>
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	885b      	ldrh	r3, [r3, #2]
 8015d48:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015d4c:	d813      	bhi.n	8015d76 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8015d52:	8afa      	ldrh	r2, [r7, #22]
 8015d54:	429a      	cmp	r2, r3
 8015d56:	d004      	beq.n	8015d62 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8015d58:	68fb      	ldr	r3, [r7, #12]
 8015d5a:	881b      	ldrh	r3, [r3, #0]
 8015d5c:	8afa      	ldrh	r2, [r7, #22]
 8015d5e:	429a      	cmp	r2, r3
 8015d60:	d109      	bne.n	8015d76 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8015d62:	4b08      	ldr	r3, [pc, #32]	; (8015d84 <mem_link_valid+0x74>)
 8015d64:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8015d66:	693a      	ldr	r2, [r7, #16]
 8015d68:	429a      	cmp	r2, r3
 8015d6a:	d006      	beq.n	8015d7a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8015d6c:	693b      	ldr	r3, [r7, #16]
 8015d6e:	885b      	ldrh	r3, [r3, #2]
 8015d70:	8afa      	ldrh	r2, [r7, #22]
 8015d72:	429a      	cmp	r2, r3
 8015d74:	d001      	beq.n	8015d7a <mem_link_valid+0x6a>
    return 0;
 8015d76:	2300      	movs	r3, #0
 8015d78:	e000      	b.n	8015d7c <mem_link_valid+0x6c>
  }
  return 1;
 8015d7a:	2301      	movs	r3, #1
}
 8015d7c:	4618      	mov	r0, r3
 8015d7e:	3718      	adds	r7, #24
 8015d80:	46bd      	mov	sp, r7
 8015d82:	bd80      	pop	{r7, pc}
 8015d84:	24004870 	.word	0x24004870

08015d88 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8015d88:	b580      	push	{r7, lr}
 8015d8a:	b084      	sub	sp, #16
 8015d8c:	af00      	add	r7, sp, #0
 8015d8e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	d04c      	beq.n	8015e30 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	f003 0303 	and.w	r3, r3, #3
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d007      	beq.n	8015db0 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8015da0:	4b25      	ldr	r3, [pc, #148]	; (8015e38 <mem_free+0xb0>)
 8015da2:	f240 2273 	movw	r2, #627	; 0x273
 8015da6:	4925      	ldr	r1, [pc, #148]	; (8015e3c <mem_free+0xb4>)
 8015da8:	4825      	ldr	r0, [pc, #148]	; (8015e40 <mem_free+0xb8>)
 8015daa:	f00b f85f 	bl	8020e6c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8015dae:	e040      	b.n	8015e32 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	3b08      	subs	r3, #8
 8015db4:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8015db6:	4b23      	ldr	r3, [pc, #140]	; (8015e44 <mem_free+0xbc>)
 8015db8:	681b      	ldr	r3, [r3, #0]
 8015dba:	68fa      	ldr	r2, [r7, #12]
 8015dbc:	429a      	cmp	r2, r3
 8015dbe:	d306      	bcc.n	8015dce <mem_free+0x46>
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	f103 020c 	add.w	r2, r3, #12
 8015dc6:	4b20      	ldr	r3, [pc, #128]	; (8015e48 <mem_free+0xc0>)
 8015dc8:	681b      	ldr	r3, [r3, #0]
 8015dca:	429a      	cmp	r2, r3
 8015dcc:	d907      	bls.n	8015dde <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8015dce:	4b1a      	ldr	r3, [pc, #104]	; (8015e38 <mem_free+0xb0>)
 8015dd0:	f240 227f 	movw	r2, #639	; 0x27f
 8015dd4:	491d      	ldr	r1, [pc, #116]	; (8015e4c <mem_free+0xc4>)
 8015dd6:	481a      	ldr	r0, [pc, #104]	; (8015e40 <mem_free+0xb8>)
 8015dd8:	f00b f848 	bl	8020e6c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8015ddc:	e029      	b.n	8015e32 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8015dde:	68fb      	ldr	r3, [r7, #12]
 8015de0:	791b      	ldrb	r3, [r3, #4]
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d107      	bne.n	8015df6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8015de6:	4b14      	ldr	r3, [pc, #80]	; (8015e38 <mem_free+0xb0>)
 8015de8:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8015dec:	4918      	ldr	r1, [pc, #96]	; (8015e50 <mem_free+0xc8>)
 8015dee:	4814      	ldr	r0, [pc, #80]	; (8015e40 <mem_free+0xb8>)
 8015df0:	f00b f83c 	bl	8020e6c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8015df4:	e01d      	b.n	8015e32 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8015df6:	68f8      	ldr	r0, [r7, #12]
 8015df8:	f7ff ff8a 	bl	8015d10 <mem_link_valid>
 8015dfc:	4603      	mov	r3, r0
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d107      	bne.n	8015e12 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8015e02:	4b0d      	ldr	r3, [pc, #52]	; (8015e38 <mem_free+0xb0>)
 8015e04:	f240 2295 	movw	r2, #661	; 0x295
 8015e08:	4912      	ldr	r1, [pc, #72]	; (8015e54 <mem_free+0xcc>)
 8015e0a:	480d      	ldr	r0, [pc, #52]	; (8015e40 <mem_free+0xb8>)
 8015e0c:	f00b f82e 	bl	8020e6c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8015e10:	e00f      	b.n	8015e32 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8015e12:	68fb      	ldr	r3, [r7, #12]
 8015e14:	2200      	movs	r2, #0
 8015e16:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8015e18:	4b0f      	ldr	r3, [pc, #60]	; (8015e58 <mem_free+0xd0>)
 8015e1a:	681b      	ldr	r3, [r3, #0]
 8015e1c:	68fa      	ldr	r2, [r7, #12]
 8015e1e:	429a      	cmp	r2, r3
 8015e20:	d202      	bcs.n	8015e28 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8015e22:	4a0d      	ldr	r2, [pc, #52]	; (8015e58 <mem_free+0xd0>)
 8015e24:	68fb      	ldr	r3, [r7, #12]
 8015e26:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8015e28:	68f8      	ldr	r0, [r7, #12]
 8015e2a:	f7ff fe97 	bl	8015b5c <plug_holes>
 8015e2e:	e000      	b.n	8015e32 <mem_free+0xaa>
    return;
 8015e30:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8015e32:	3710      	adds	r7, #16
 8015e34:	46bd      	mov	sp, r7
 8015e36:	bd80      	pop	{r7, pc}
 8015e38:	08026630 	.word	0x08026630
 8015e3c:	08026730 	.word	0x08026730
 8015e40:	080266a4 	.word	0x080266a4
 8015e44:	2400486c 	.word	0x2400486c
 8015e48:	24004870 	.word	0x24004870
 8015e4c:	08026754 	.word	0x08026754
 8015e50:	08026770 	.word	0x08026770
 8015e54:	08026798 	.word	0x08026798
 8015e58:	24004874 	.word	0x24004874

08015e5c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8015e5c:	b580      	push	{r7, lr}
 8015e5e:	b088      	sub	sp, #32
 8015e60:	af00      	add	r7, sp, #0
 8015e62:	6078      	str	r0, [r7, #4]
 8015e64:	460b      	mov	r3, r1
 8015e66:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8015e68:	887b      	ldrh	r3, [r7, #2]
 8015e6a:	3303      	adds	r3, #3
 8015e6c:	b29b      	uxth	r3, r3
 8015e6e:	f023 0303 	bic.w	r3, r3, #3
 8015e72:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8015e74:	8bfb      	ldrh	r3, [r7, #30]
 8015e76:	2b0b      	cmp	r3, #11
 8015e78:	d801      	bhi.n	8015e7e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8015e7a:	230c      	movs	r3, #12
 8015e7c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8015e7e:	8bfb      	ldrh	r3, [r7, #30]
 8015e80:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015e84:	d803      	bhi.n	8015e8e <mem_trim+0x32>
 8015e86:	8bfa      	ldrh	r2, [r7, #30]
 8015e88:	887b      	ldrh	r3, [r7, #2]
 8015e8a:	429a      	cmp	r2, r3
 8015e8c:	d201      	bcs.n	8015e92 <mem_trim+0x36>
    return NULL;
 8015e8e:	2300      	movs	r3, #0
 8015e90:	e0cc      	b.n	801602c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8015e92:	4b68      	ldr	r3, [pc, #416]	; (8016034 <mem_trim+0x1d8>)
 8015e94:	681b      	ldr	r3, [r3, #0]
 8015e96:	687a      	ldr	r2, [r7, #4]
 8015e98:	429a      	cmp	r2, r3
 8015e9a:	d304      	bcc.n	8015ea6 <mem_trim+0x4a>
 8015e9c:	4b66      	ldr	r3, [pc, #408]	; (8016038 <mem_trim+0x1dc>)
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	687a      	ldr	r2, [r7, #4]
 8015ea2:	429a      	cmp	r2, r3
 8015ea4:	d306      	bcc.n	8015eb4 <mem_trim+0x58>
 8015ea6:	4b65      	ldr	r3, [pc, #404]	; (801603c <mem_trim+0x1e0>)
 8015ea8:	f240 22d1 	movw	r2, #721	; 0x2d1
 8015eac:	4964      	ldr	r1, [pc, #400]	; (8016040 <mem_trim+0x1e4>)
 8015eae:	4865      	ldr	r0, [pc, #404]	; (8016044 <mem_trim+0x1e8>)
 8015eb0:	f00a ffdc 	bl	8020e6c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8015eb4:	4b5f      	ldr	r3, [pc, #380]	; (8016034 <mem_trim+0x1d8>)
 8015eb6:	681b      	ldr	r3, [r3, #0]
 8015eb8:	687a      	ldr	r2, [r7, #4]
 8015eba:	429a      	cmp	r2, r3
 8015ebc:	d304      	bcc.n	8015ec8 <mem_trim+0x6c>
 8015ebe:	4b5e      	ldr	r3, [pc, #376]	; (8016038 <mem_trim+0x1dc>)
 8015ec0:	681b      	ldr	r3, [r3, #0]
 8015ec2:	687a      	ldr	r2, [r7, #4]
 8015ec4:	429a      	cmp	r2, r3
 8015ec6:	d301      	bcc.n	8015ecc <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	e0af      	b.n	801602c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	3b08      	subs	r3, #8
 8015ed0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8015ed2:	69b8      	ldr	r0, [r7, #24]
 8015ed4:	f7ff fe30 	bl	8015b38 <mem_to_ptr>
 8015ed8:	4603      	mov	r3, r0
 8015eda:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8015edc:	69bb      	ldr	r3, [r7, #24]
 8015ede:	881a      	ldrh	r2, [r3, #0]
 8015ee0:	8afb      	ldrh	r3, [r7, #22]
 8015ee2:	1ad3      	subs	r3, r2, r3
 8015ee4:	b29b      	uxth	r3, r3
 8015ee6:	3b08      	subs	r3, #8
 8015ee8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8015eea:	8bfa      	ldrh	r2, [r7, #30]
 8015eec:	8abb      	ldrh	r3, [r7, #20]
 8015eee:	429a      	cmp	r2, r3
 8015ef0:	d906      	bls.n	8015f00 <mem_trim+0xa4>
 8015ef2:	4b52      	ldr	r3, [pc, #328]	; (801603c <mem_trim+0x1e0>)
 8015ef4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8015ef8:	4953      	ldr	r1, [pc, #332]	; (8016048 <mem_trim+0x1ec>)
 8015efa:	4852      	ldr	r0, [pc, #328]	; (8016044 <mem_trim+0x1e8>)
 8015efc:	f00a ffb6 	bl	8020e6c <iprintf>
  if (newsize > size) {
 8015f00:	8bfa      	ldrh	r2, [r7, #30]
 8015f02:	8abb      	ldrh	r3, [r7, #20]
 8015f04:	429a      	cmp	r2, r3
 8015f06:	d901      	bls.n	8015f0c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8015f08:	2300      	movs	r3, #0
 8015f0a:	e08f      	b.n	801602c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8015f0c:	8bfa      	ldrh	r2, [r7, #30]
 8015f0e:	8abb      	ldrh	r3, [r7, #20]
 8015f10:	429a      	cmp	r2, r3
 8015f12:	d101      	bne.n	8015f18 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	e089      	b.n	801602c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8015f18:	69bb      	ldr	r3, [r7, #24]
 8015f1a:	881b      	ldrh	r3, [r3, #0]
 8015f1c:	4618      	mov	r0, r3
 8015f1e:	f7ff fdf9 	bl	8015b14 <ptr_to_mem>
 8015f22:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8015f24:	693b      	ldr	r3, [r7, #16]
 8015f26:	791b      	ldrb	r3, [r3, #4]
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d13f      	bne.n	8015fac <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8015f2c:	69bb      	ldr	r3, [r7, #24]
 8015f2e:	881b      	ldrh	r3, [r3, #0]
 8015f30:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015f34:	d106      	bne.n	8015f44 <mem_trim+0xe8>
 8015f36:	4b41      	ldr	r3, [pc, #260]	; (801603c <mem_trim+0x1e0>)
 8015f38:	f240 22f5 	movw	r2, #757	; 0x2f5
 8015f3c:	4943      	ldr	r1, [pc, #268]	; (801604c <mem_trim+0x1f0>)
 8015f3e:	4841      	ldr	r0, [pc, #260]	; (8016044 <mem_trim+0x1e8>)
 8015f40:	f00a ff94 	bl	8020e6c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8015f44:	693b      	ldr	r3, [r7, #16]
 8015f46:	881b      	ldrh	r3, [r3, #0]
 8015f48:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8015f4a:	8afa      	ldrh	r2, [r7, #22]
 8015f4c:	8bfb      	ldrh	r3, [r7, #30]
 8015f4e:	4413      	add	r3, r2
 8015f50:	b29b      	uxth	r3, r3
 8015f52:	3308      	adds	r3, #8
 8015f54:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8015f56:	4b3e      	ldr	r3, [pc, #248]	; (8016050 <mem_trim+0x1f4>)
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	693a      	ldr	r2, [r7, #16]
 8015f5c:	429a      	cmp	r2, r3
 8015f5e:	d106      	bne.n	8015f6e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8015f60:	89fb      	ldrh	r3, [r7, #14]
 8015f62:	4618      	mov	r0, r3
 8015f64:	f7ff fdd6 	bl	8015b14 <ptr_to_mem>
 8015f68:	4603      	mov	r3, r0
 8015f6a:	4a39      	ldr	r2, [pc, #228]	; (8016050 <mem_trim+0x1f4>)
 8015f6c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8015f6e:	89fb      	ldrh	r3, [r7, #14]
 8015f70:	4618      	mov	r0, r3
 8015f72:	f7ff fdcf 	bl	8015b14 <ptr_to_mem>
 8015f76:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8015f78:	693b      	ldr	r3, [r7, #16]
 8015f7a:	2200      	movs	r2, #0
 8015f7c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8015f7e:	693b      	ldr	r3, [r7, #16]
 8015f80:	89ba      	ldrh	r2, [r7, #12]
 8015f82:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8015f84:	693b      	ldr	r3, [r7, #16]
 8015f86:	8afa      	ldrh	r2, [r7, #22]
 8015f88:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8015f8a:	69bb      	ldr	r3, [r7, #24]
 8015f8c:	89fa      	ldrh	r2, [r7, #14]
 8015f8e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8015f90:	693b      	ldr	r3, [r7, #16]
 8015f92:	881b      	ldrh	r3, [r3, #0]
 8015f94:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015f98:	d047      	beq.n	801602a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8015f9a:	693b      	ldr	r3, [r7, #16]
 8015f9c:	881b      	ldrh	r3, [r3, #0]
 8015f9e:	4618      	mov	r0, r3
 8015fa0:	f7ff fdb8 	bl	8015b14 <ptr_to_mem>
 8015fa4:	4602      	mov	r2, r0
 8015fa6:	89fb      	ldrh	r3, [r7, #14]
 8015fa8:	8053      	strh	r3, [r2, #2]
 8015faa:	e03e      	b.n	801602a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8015fac:	8bfb      	ldrh	r3, [r7, #30]
 8015fae:	f103 0214 	add.w	r2, r3, #20
 8015fb2:	8abb      	ldrh	r3, [r7, #20]
 8015fb4:	429a      	cmp	r2, r3
 8015fb6:	d838      	bhi.n	801602a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8015fb8:	8afa      	ldrh	r2, [r7, #22]
 8015fba:	8bfb      	ldrh	r3, [r7, #30]
 8015fbc:	4413      	add	r3, r2
 8015fbe:	b29b      	uxth	r3, r3
 8015fc0:	3308      	adds	r3, #8
 8015fc2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8015fc4:	69bb      	ldr	r3, [r7, #24]
 8015fc6:	881b      	ldrh	r3, [r3, #0]
 8015fc8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015fcc:	d106      	bne.n	8015fdc <mem_trim+0x180>
 8015fce:	4b1b      	ldr	r3, [pc, #108]	; (801603c <mem_trim+0x1e0>)
 8015fd0:	f240 3216 	movw	r2, #790	; 0x316
 8015fd4:	491d      	ldr	r1, [pc, #116]	; (801604c <mem_trim+0x1f0>)
 8015fd6:	481b      	ldr	r0, [pc, #108]	; (8016044 <mem_trim+0x1e8>)
 8015fd8:	f00a ff48 	bl	8020e6c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8015fdc:	89fb      	ldrh	r3, [r7, #14]
 8015fde:	4618      	mov	r0, r3
 8015fe0:	f7ff fd98 	bl	8015b14 <ptr_to_mem>
 8015fe4:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8015fe6:	4b1a      	ldr	r3, [pc, #104]	; (8016050 <mem_trim+0x1f4>)
 8015fe8:	681b      	ldr	r3, [r3, #0]
 8015fea:	693a      	ldr	r2, [r7, #16]
 8015fec:	429a      	cmp	r2, r3
 8015fee:	d202      	bcs.n	8015ff6 <mem_trim+0x19a>
      lfree = mem2;
 8015ff0:	4a17      	ldr	r2, [pc, #92]	; (8016050 <mem_trim+0x1f4>)
 8015ff2:	693b      	ldr	r3, [r7, #16]
 8015ff4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8015ff6:	693b      	ldr	r3, [r7, #16]
 8015ff8:	2200      	movs	r2, #0
 8015ffa:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8015ffc:	69bb      	ldr	r3, [r7, #24]
 8015ffe:	881a      	ldrh	r2, [r3, #0]
 8016000:	693b      	ldr	r3, [r7, #16]
 8016002:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8016004:	693b      	ldr	r3, [r7, #16]
 8016006:	8afa      	ldrh	r2, [r7, #22]
 8016008:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 801600a:	69bb      	ldr	r3, [r7, #24]
 801600c:	89fa      	ldrh	r2, [r7, #14]
 801600e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8016010:	693b      	ldr	r3, [r7, #16]
 8016012:	881b      	ldrh	r3, [r3, #0]
 8016014:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8016018:	d007      	beq.n	801602a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801601a:	693b      	ldr	r3, [r7, #16]
 801601c:	881b      	ldrh	r3, [r3, #0]
 801601e:	4618      	mov	r0, r3
 8016020:	f7ff fd78 	bl	8015b14 <ptr_to_mem>
 8016024:	4602      	mov	r2, r0
 8016026:	89fb      	ldrh	r3, [r7, #14]
 8016028:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 801602a:	687b      	ldr	r3, [r7, #4]
}
 801602c:	4618      	mov	r0, r3
 801602e:	3720      	adds	r7, #32
 8016030:	46bd      	mov	sp, r7
 8016032:	bd80      	pop	{r7, pc}
 8016034:	2400486c 	.word	0x2400486c
 8016038:	24004870 	.word	0x24004870
 801603c:	08026630 	.word	0x08026630
 8016040:	080267cc 	.word	0x080267cc
 8016044:	080266a4 	.word	0x080266a4
 8016048:	080267e4 	.word	0x080267e4
 801604c:	08026804 	.word	0x08026804
 8016050:	24004874 	.word	0x24004874

08016054 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8016054:	b580      	push	{r7, lr}
 8016056:	b088      	sub	sp, #32
 8016058:	af00      	add	r7, sp, #0
 801605a:	4603      	mov	r3, r0
 801605c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801605e:	88fb      	ldrh	r3, [r7, #6]
 8016060:	2b00      	cmp	r3, #0
 8016062:	d101      	bne.n	8016068 <mem_malloc+0x14>
    return NULL;
 8016064:	2300      	movs	r3, #0
 8016066:	e0d9      	b.n	801621c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8016068:	88fb      	ldrh	r3, [r7, #6]
 801606a:	3303      	adds	r3, #3
 801606c:	b29b      	uxth	r3, r3
 801606e:	f023 0303 	bic.w	r3, r3, #3
 8016072:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8016074:	8bbb      	ldrh	r3, [r7, #28]
 8016076:	2b0b      	cmp	r3, #11
 8016078:	d801      	bhi.n	801607e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801607a:	230c      	movs	r3, #12
 801607c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801607e:	8bbb      	ldrh	r3, [r7, #28]
 8016080:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8016084:	d803      	bhi.n	801608e <mem_malloc+0x3a>
 8016086:	8bba      	ldrh	r2, [r7, #28]
 8016088:	88fb      	ldrh	r3, [r7, #6]
 801608a:	429a      	cmp	r2, r3
 801608c:	d201      	bcs.n	8016092 <mem_malloc+0x3e>
    return NULL;
 801608e:	2300      	movs	r3, #0
 8016090:	e0c4      	b.n	801621c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8016092:	4b64      	ldr	r3, [pc, #400]	; (8016224 <mem_malloc+0x1d0>)
 8016094:	681b      	ldr	r3, [r3, #0]
 8016096:	4618      	mov	r0, r3
 8016098:	f7ff fd4e 	bl	8015b38 <mem_to_ptr>
 801609c:	4603      	mov	r3, r0
 801609e:	83fb      	strh	r3, [r7, #30]
 80160a0:	e0b4      	b.n	801620c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80160a2:	8bfb      	ldrh	r3, [r7, #30]
 80160a4:	4618      	mov	r0, r3
 80160a6:	f7ff fd35 	bl	8015b14 <ptr_to_mem>
 80160aa:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80160ac:	697b      	ldr	r3, [r7, #20]
 80160ae:	791b      	ldrb	r3, [r3, #4]
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	f040 80a4 	bne.w	80161fe <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80160b6:	697b      	ldr	r3, [r7, #20]
 80160b8:	881b      	ldrh	r3, [r3, #0]
 80160ba:	461a      	mov	r2, r3
 80160bc:	8bfb      	ldrh	r3, [r7, #30]
 80160be:	1ad3      	subs	r3, r2, r3
 80160c0:	f1a3 0208 	sub.w	r2, r3, #8
 80160c4:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80160c6:	429a      	cmp	r2, r3
 80160c8:	f0c0 8099 	bcc.w	80161fe <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80160cc:	697b      	ldr	r3, [r7, #20]
 80160ce:	881b      	ldrh	r3, [r3, #0]
 80160d0:	461a      	mov	r2, r3
 80160d2:	8bfb      	ldrh	r3, [r7, #30]
 80160d4:	1ad3      	subs	r3, r2, r3
 80160d6:	f1a3 0208 	sub.w	r2, r3, #8
 80160da:	8bbb      	ldrh	r3, [r7, #28]
 80160dc:	3314      	adds	r3, #20
 80160de:	429a      	cmp	r2, r3
 80160e0:	d333      	bcc.n	801614a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80160e2:	8bfa      	ldrh	r2, [r7, #30]
 80160e4:	8bbb      	ldrh	r3, [r7, #28]
 80160e6:	4413      	add	r3, r2
 80160e8:	b29b      	uxth	r3, r3
 80160ea:	3308      	adds	r3, #8
 80160ec:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80160ee:	8a7b      	ldrh	r3, [r7, #18]
 80160f0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80160f4:	d106      	bne.n	8016104 <mem_malloc+0xb0>
 80160f6:	4b4c      	ldr	r3, [pc, #304]	; (8016228 <mem_malloc+0x1d4>)
 80160f8:	f240 3287 	movw	r2, #903	; 0x387
 80160fc:	494b      	ldr	r1, [pc, #300]	; (801622c <mem_malloc+0x1d8>)
 80160fe:	484c      	ldr	r0, [pc, #304]	; (8016230 <mem_malloc+0x1dc>)
 8016100:	f00a feb4 	bl	8020e6c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8016104:	8a7b      	ldrh	r3, [r7, #18]
 8016106:	4618      	mov	r0, r3
 8016108:	f7ff fd04 	bl	8015b14 <ptr_to_mem>
 801610c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 801610e:	68fb      	ldr	r3, [r7, #12]
 8016110:	2200      	movs	r2, #0
 8016112:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8016114:	697b      	ldr	r3, [r7, #20]
 8016116:	881a      	ldrh	r2, [r3, #0]
 8016118:	68fb      	ldr	r3, [r7, #12]
 801611a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	8bfa      	ldrh	r2, [r7, #30]
 8016120:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8016122:	697b      	ldr	r3, [r7, #20]
 8016124:	8a7a      	ldrh	r2, [r7, #18]
 8016126:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8016128:	697b      	ldr	r3, [r7, #20]
 801612a:	2201      	movs	r2, #1
 801612c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	881b      	ldrh	r3, [r3, #0]
 8016132:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8016136:	d00b      	beq.n	8016150 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8016138:	68fb      	ldr	r3, [r7, #12]
 801613a:	881b      	ldrh	r3, [r3, #0]
 801613c:	4618      	mov	r0, r3
 801613e:	f7ff fce9 	bl	8015b14 <ptr_to_mem>
 8016142:	4602      	mov	r2, r0
 8016144:	8a7b      	ldrh	r3, [r7, #18]
 8016146:	8053      	strh	r3, [r2, #2]
 8016148:	e002      	b.n	8016150 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801614a:	697b      	ldr	r3, [r7, #20]
 801614c:	2201      	movs	r2, #1
 801614e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8016150:	4b34      	ldr	r3, [pc, #208]	; (8016224 <mem_malloc+0x1d0>)
 8016152:	681b      	ldr	r3, [r3, #0]
 8016154:	697a      	ldr	r2, [r7, #20]
 8016156:	429a      	cmp	r2, r3
 8016158:	d127      	bne.n	80161aa <mem_malloc+0x156>
          struct mem *cur = lfree;
 801615a:	4b32      	ldr	r3, [pc, #200]	; (8016224 <mem_malloc+0x1d0>)
 801615c:	681b      	ldr	r3, [r3, #0]
 801615e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8016160:	e005      	b.n	801616e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8016162:	69bb      	ldr	r3, [r7, #24]
 8016164:	881b      	ldrh	r3, [r3, #0]
 8016166:	4618      	mov	r0, r3
 8016168:	f7ff fcd4 	bl	8015b14 <ptr_to_mem>
 801616c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 801616e:	69bb      	ldr	r3, [r7, #24]
 8016170:	791b      	ldrb	r3, [r3, #4]
 8016172:	2b00      	cmp	r3, #0
 8016174:	d004      	beq.n	8016180 <mem_malloc+0x12c>
 8016176:	4b2f      	ldr	r3, [pc, #188]	; (8016234 <mem_malloc+0x1e0>)
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	69ba      	ldr	r2, [r7, #24]
 801617c:	429a      	cmp	r2, r3
 801617e:	d1f0      	bne.n	8016162 <mem_malloc+0x10e>
          }
          lfree = cur;
 8016180:	4a28      	ldr	r2, [pc, #160]	; (8016224 <mem_malloc+0x1d0>)
 8016182:	69bb      	ldr	r3, [r7, #24]
 8016184:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8016186:	4b27      	ldr	r3, [pc, #156]	; (8016224 <mem_malloc+0x1d0>)
 8016188:	681a      	ldr	r2, [r3, #0]
 801618a:	4b2a      	ldr	r3, [pc, #168]	; (8016234 <mem_malloc+0x1e0>)
 801618c:	681b      	ldr	r3, [r3, #0]
 801618e:	429a      	cmp	r2, r3
 8016190:	d00b      	beq.n	80161aa <mem_malloc+0x156>
 8016192:	4b24      	ldr	r3, [pc, #144]	; (8016224 <mem_malloc+0x1d0>)
 8016194:	681b      	ldr	r3, [r3, #0]
 8016196:	791b      	ldrb	r3, [r3, #4]
 8016198:	2b00      	cmp	r3, #0
 801619a:	d006      	beq.n	80161aa <mem_malloc+0x156>
 801619c:	4b22      	ldr	r3, [pc, #136]	; (8016228 <mem_malloc+0x1d4>)
 801619e:	f240 32b5 	movw	r2, #949	; 0x3b5
 80161a2:	4925      	ldr	r1, [pc, #148]	; (8016238 <mem_malloc+0x1e4>)
 80161a4:	4822      	ldr	r0, [pc, #136]	; (8016230 <mem_malloc+0x1dc>)
 80161a6:	f00a fe61 	bl	8020e6c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80161aa:	8bba      	ldrh	r2, [r7, #28]
 80161ac:	697b      	ldr	r3, [r7, #20]
 80161ae:	4413      	add	r3, r2
 80161b0:	3308      	adds	r3, #8
 80161b2:	4a20      	ldr	r2, [pc, #128]	; (8016234 <mem_malloc+0x1e0>)
 80161b4:	6812      	ldr	r2, [r2, #0]
 80161b6:	4293      	cmp	r3, r2
 80161b8:	d906      	bls.n	80161c8 <mem_malloc+0x174>
 80161ba:	4b1b      	ldr	r3, [pc, #108]	; (8016228 <mem_malloc+0x1d4>)
 80161bc:	f240 32b9 	movw	r2, #953	; 0x3b9
 80161c0:	491e      	ldr	r1, [pc, #120]	; (801623c <mem_malloc+0x1e8>)
 80161c2:	481b      	ldr	r0, [pc, #108]	; (8016230 <mem_malloc+0x1dc>)
 80161c4:	f00a fe52 	bl	8020e6c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80161c8:	697b      	ldr	r3, [r7, #20]
 80161ca:	f003 0303 	and.w	r3, r3, #3
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	d006      	beq.n	80161e0 <mem_malloc+0x18c>
 80161d2:	4b15      	ldr	r3, [pc, #84]	; (8016228 <mem_malloc+0x1d4>)
 80161d4:	f240 32bb 	movw	r2, #955	; 0x3bb
 80161d8:	4919      	ldr	r1, [pc, #100]	; (8016240 <mem_malloc+0x1ec>)
 80161da:	4815      	ldr	r0, [pc, #84]	; (8016230 <mem_malloc+0x1dc>)
 80161dc:	f00a fe46 	bl	8020e6c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80161e0:	697b      	ldr	r3, [r7, #20]
 80161e2:	f003 0303 	and.w	r3, r3, #3
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d006      	beq.n	80161f8 <mem_malloc+0x1a4>
 80161ea:	4b0f      	ldr	r3, [pc, #60]	; (8016228 <mem_malloc+0x1d4>)
 80161ec:	f240 32bd 	movw	r2, #957	; 0x3bd
 80161f0:	4914      	ldr	r1, [pc, #80]	; (8016244 <mem_malloc+0x1f0>)
 80161f2:	480f      	ldr	r0, [pc, #60]	; (8016230 <mem_malloc+0x1dc>)
 80161f4:	f00a fe3a 	bl	8020e6c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80161f8:	697b      	ldr	r3, [r7, #20]
 80161fa:	3308      	adds	r3, #8
 80161fc:	e00e      	b.n	801621c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80161fe:	8bfb      	ldrh	r3, [r7, #30]
 8016200:	4618      	mov	r0, r3
 8016202:	f7ff fc87 	bl	8015b14 <ptr_to_mem>
 8016206:	4603      	mov	r3, r0
 8016208:	881b      	ldrh	r3, [r3, #0]
 801620a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801620c:	8bfa      	ldrh	r2, [r7, #30]
 801620e:	8bbb      	ldrh	r3, [r7, #28]
 8016210:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8016214:	429a      	cmp	r2, r3
 8016216:	f4ff af44 	bcc.w	80160a2 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 801621a:	2300      	movs	r3, #0
}
 801621c:	4618      	mov	r0, r3
 801621e:	3720      	adds	r7, #32
 8016220:	46bd      	mov	sp, r7
 8016222:	bd80      	pop	{r7, pc}
 8016224:	24004874 	.word	0x24004874
 8016228:	08026630 	.word	0x08026630
 801622c:	08026804 	.word	0x08026804
 8016230:	080266a4 	.word	0x080266a4
 8016234:	24004870 	.word	0x24004870
 8016238:	08026818 	.word	0x08026818
 801623c:	08026834 	.word	0x08026834
 8016240:	08026864 	.word	0x08026864
 8016244:	08026894 	.word	0x08026894

08016248 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8016248:	b480      	push	{r7}
 801624a:	b085      	sub	sp, #20
 801624c:	af00      	add	r7, sp, #0
 801624e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	689b      	ldr	r3, [r3, #8]
 8016254:	2200      	movs	r2, #0
 8016256:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	685b      	ldr	r3, [r3, #4]
 801625c:	3303      	adds	r3, #3
 801625e:	f023 0303 	bic.w	r3, r3, #3
 8016262:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8016264:	2300      	movs	r3, #0
 8016266:	60fb      	str	r3, [r7, #12]
 8016268:	e011      	b.n	801628e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	689b      	ldr	r3, [r3, #8]
 801626e:	681a      	ldr	r2, [r3, #0]
 8016270:	68bb      	ldr	r3, [r7, #8]
 8016272:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	689b      	ldr	r3, [r3, #8]
 8016278:	68ba      	ldr	r2, [r7, #8]
 801627a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	881b      	ldrh	r3, [r3, #0]
 8016280:	461a      	mov	r2, r3
 8016282:	68bb      	ldr	r3, [r7, #8]
 8016284:	4413      	add	r3, r2
 8016286:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8016288:	68fb      	ldr	r3, [r7, #12]
 801628a:	3301      	adds	r3, #1
 801628c:	60fb      	str	r3, [r7, #12]
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	885b      	ldrh	r3, [r3, #2]
 8016292:	461a      	mov	r2, r3
 8016294:	68fb      	ldr	r3, [r7, #12]
 8016296:	4293      	cmp	r3, r2
 8016298:	dbe7      	blt.n	801626a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801629a:	bf00      	nop
 801629c:	bf00      	nop
 801629e:	3714      	adds	r7, #20
 80162a0:	46bd      	mov	sp, r7
 80162a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162a6:	4770      	bx	lr

080162a8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80162a8:	b580      	push	{r7, lr}
 80162aa:	b082      	sub	sp, #8
 80162ac:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80162ae:	2300      	movs	r3, #0
 80162b0:	80fb      	strh	r3, [r7, #6]
 80162b2:	e009      	b.n	80162c8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80162b4:	88fb      	ldrh	r3, [r7, #6]
 80162b6:	4a08      	ldr	r2, [pc, #32]	; (80162d8 <memp_init+0x30>)
 80162b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80162bc:	4618      	mov	r0, r3
 80162be:	f7ff ffc3 	bl	8016248 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80162c2:	88fb      	ldrh	r3, [r7, #6]
 80162c4:	3301      	adds	r3, #1
 80162c6:	80fb      	strh	r3, [r7, #6]
 80162c8:	88fb      	ldrh	r3, [r7, #6]
 80162ca:	2b08      	cmp	r3, #8
 80162cc:	d9f2      	bls.n	80162b4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80162ce:	bf00      	nop
 80162d0:	bf00      	nop
 80162d2:	3708      	adds	r7, #8
 80162d4:	46bd      	mov	sp, r7
 80162d6:	bd80      	pop	{r7, pc}
 80162d8:	0802918c 	.word	0x0802918c

080162dc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80162dc:	b580      	push	{r7, lr}
 80162de:	b084      	sub	sp, #16
 80162e0:	af00      	add	r7, sp, #0
 80162e2:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	689b      	ldr	r3, [r3, #8]
 80162e8:	681b      	ldr	r3, [r3, #0]
 80162ea:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80162ec:	68fb      	ldr	r3, [r7, #12]
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d012      	beq.n	8016318 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	689b      	ldr	r3, [r3, #8]
 80162f6:	68fa      	ldr	r2, [r7, #12]
 80162f8:	6812      	ldr	r2, [r2, #0]
 80162fa:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80162fc:	68fb      	ldr	r3, [r7, #12]
 80162fe:	f003 0303 	and.w	r3, r3, #3
 8016302:	2b00      	cmp	r3, #0
 8016304:	d006      	beq.n	8016314 <do_memp_malloc_pool+0x38>
 8016306:	4b07      	ldr	r3, [pc, #28]	; (8016324 <do_memp_malloc_pool+0x48>)
 8016308:	f44f 728c 	mov.w	r2, #280	; 0x118
 801630c:	4906      	ldr	r1, [pc, #24]	; (8016328 <do_memp_malloc_pool+0x4c>)
 801630e:	4807      	ldr	r0, [pc, #28]	; (801632c <do_memp_malloc_pool+0x50>)
 8016310:	f00a fdac 	bl	8020e6c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	e000      	b.n	801631a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8016318:	2300      	movs	r3, #0
}
 801631a:	4618      	mov	r0, r3
 801631c:	3710      	adds	r7, #16
 801631e:	46bd      	mov	sp, r7
 8016320:	bd80      	pop	{r7, pc}
 8016322:	bf00      	nop
 8016324:	080268b8 	.word	0x080268b8
 8016328:	08026914 	.word	0x08026914
 801632c:	08026938 	.word	0x08026938

08016330 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8016330:	b580      	push	{r7, lr}
 8016332:	b082      	sub	sp, #8
 8016334:	af00      	add	r7, sp, #0
 8016336:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	2b00      	cmp	r3, #0
 801633c:	d106      	bne.n	801634c <memp_malloc_pool+0x1c>
 801633e:	4b0a      	ldr	r3, [pc, #40]	; (8016368 <memp_malloc_pool+0x38>)
 8016340:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8016344:	4909      	ldr	r1, [pc, #36]	; (801636c <memp_malloc_pool+0x3c>)
 8016346:	480a      	ldr	r0, [pc, #40]	; (8016370 <memp_malloc_pool+0x40>)
 8016348:	f00a fd90 	bl	8020e6c <iprintf>
  if (desc == NULL) {
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	2b00      	cmp	r3, #0
 8016350:	d101      	bne.n	8016356 <memp_malloc_pool+0x26>
    return NULL;
 8016352:	2300      	movs	r3, #0
 8016354:	e003      	b.n	801635e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8016356:	6878      	ldr	r0, [r7, #4]
 8016358:	f7ff ffc0 	bl	80162dc <do_memp_malloc_pool>
 801635c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801635e:	4618      	mov	r0, r3
 8016360:	3708      	adds	r7, #8
 8016362:	46bd      	mov	sp, r7
 8016364:	bd80      	pop	{r7, pc}
 8016366:	bf00      	nop
 8016368:	080268b8 	.word	0x080268b8
 801636c:	08026960 	.word	0x08026960
 8016370:	08026938 	.word	0x08026938

08016374 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8016374:	b580      	push	{r7, lr}
 8016376:	b084      	sub	sp, #16
 8016378:	af00      	add	r7, sp, #0
 801637a:	4603      	mov	r3, r0
 801637c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801637e:	79fb      	ldrb	r3, [r7, #7]
 8016380:	2b08      	cmp	r3, #8
 8016382:	d908      	bls.n	8016396 <memp_malloc+0x22>
 8016384:	4b0a      	ldr	r3, [pc, #40]	; (80163b0 <memp_malloc+0x3c>)
 8016386:	f240 1257 	movw	r2, #343	; 0x157
 801638a:	490a      	ldr	r1, [pc, #40]	; (80163b4 <memp_malloc+0x40>)
 801638c:	480a      	ldr	r0, [pc, #40]	; (80163b8 <memp_malloc+0x44>)
 801638e:	f00a fd6d 	bl	8020e6c <iprintf>
 8016392:	2300      	movs	r3, #0
 8016394:	e008      	b.n	80163a8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8016396:	79fb      	ldrb	r3, [r7, #7]
 8016398:	4a08      	ldr	r2, [pc, #32]	; (80163bc <memp_malloc+0x48>)
 801639a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801639e:	4618      	mov	r0, r3
 80163a0:	f7ff ff9c 	bl	80162dc <do_memp_malloc_pool>
 80163a4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80163a6:	68fb      	ldr	r3, [r7, #12]
}
 80163a8:	4618      	mov	r0, r3
 80163aa:	3710      	adds	r7, #16
 80163ac:	46bd      	mov	sp, r7
 80163ae:	bd80      	pop	{r7, pc}
 80163b0:	080268b8 	.word	0x080268b8
 80163b4:	08026974 	.word	0x08026974
 80163b8:	08026938 	.word	0x08026938
 80163bc:	0802918c 	.word	0x0802918c

080163c0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80163c0:	b580      	push	{r7, lr}
 80163c2:	b084      	sub	sp, #16
 80163c4:	af00      	add	r7, sp, #0
 80163c6:	6078      	str	r0, [r7, #4]
 80163c8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80163ca:	683b      	ldr	r3, [r7, #0]
 80163cc:	f003 0303 	and.w	r3, r3, #3
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d006      	beq.n	80163e2 <do_memp_free_pool+0x22>
 80163d4:	4b0a      	ldr	r3, [pc, #40]	; (8016400 <do_memp_free_pool+0x40>)
 80163d6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80163da:	490a      	ldr	r1, [pc, #40]	; (8016404 <do_memp_free_pool+0x44>)
 80163dc:	480a      	ldr	r0, [pc, #40]	; (8016408 <do_memp_free_pool+0x48>)
 80163de:	f00a fd45 	bl	8020e6c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80163e2:	683b      	ldr	r3, [r7, #0]
 80163e4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	689b      	ldr	r3, [r3, #8]
 80163ea:	681a      	ldr	r2, [r3, #0]
 80163ec:	68fb      	ldr	r3, [r7, #12]
 80163ee:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	689b      	ldr	r3, [r3, #8]
 80163f4:	68fa      	ldr	r2, [r7, #12]
 80163f6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80163f8:	bf00      	nop
 80163fa:	3710      	adds	r7, #16
 80163fc:	46bd      	mov	sp, r7
 80163fe:	bd80      	pop	{r7, pc}
 8016400:	080268b8 	.word	0x080268b8
 8016404:	08026994 	.word	0x08026994
 8016408:	08026938 	.word	0x08026938

0801640c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801640c:	b580      	push	{r7, lr}
 801640e:	b082      	sub	sp, #8
 8016410:	af00      	add	r7, sp, #0
 8016412:	6078      	str	r0, [r7, #4]
 8016414:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	2b00      	cmp	r3, #0
 801641a:	d106      	bne.n	801642a <memp_free_pool+0x1e>
 801641c:	4b0a      	ldr	r3, [pc, #40]	; (8016448 <memp_free_pool+0x3c>)
 801641e:	f240 1295 	movw	r2, #405	; 0x195
 8016422:	490a      	ldr	r1, [pc, #40]	; (801644c <memp_free_pool+0x40>)
 8016424:	480a      	ldr	r0, [pc, #40]	; (8016450 <memp_free_pool+0x44>)
 8016426:	f00a fd21 	bl	8020e6c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	2b00      	cmp	r3, #0
 801642e:	d007      	beq.n	8016440 <memp_free_pool+0x34>
 8016430:	683b      	ldr	r3, [r7, #0]
 8016432:	2b00      	cmp	r3, #0
 8016434:	d004      	beq.n	8016440 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8016436:	6839      	ldr	r1, [r7, #0]
 8016438:	6878      	ldr	r0, [r7, #4]
 801643a:	f7ff ffc1 	bl	80163c0 <do_memp_free_pool>
 801643e:	e000      	b.n	8016442 <memp_free_pool+0x36>
    return;
 8016440:	bf00      	nop
}
 8016442:	3708      	adds	r7, #8
 8016444:	46bd      	mov	sp, r7
 8016446:	bd80      	pop	{r7, pc}
 8016448:	080268b8 	.word	0x080268b8
 801644c:	08026960 	.word	0x08026960
 8016450:	08026938 	.word	0x08026938

08016454 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8016454:	b580      	push	{r7, lr}
 8016456:	b082      	sub	sp, #8
 8016458:	af00      	add	r7, sp, #0
 801645a:	4603      	mov	r3, r0
 801645c:	6039      	str	r1, [r7, #0]
 801645e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8016460:	79fb      	ldrb	r3, [r7, #7]
 8016462:	2b08      	cmp	r3, #8
 8016464:	d907      	bls.n	8016476 <memp_free+0x22>
 8016466:	4b0c      	ldr	r3, [pc, #48]	; (8016498 <memp_free+0x44>)
 8016468:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 801646c:	490b      	ldr	r1, [pc, #44]	; (801649c <memp_free+0x48>)
 801646e:	480c      	ldr	r0, [pc, #48]	; (80164a0 <memp_free+0x4c>)
 8016470:	f00a fcfc 	bl	8020e6c <iprintf>
 8016474:	e00c      	b.n	8016490 <memp_free+0x3c>

  if (mem == NULL) {
 8016476:	683b      	ldr	r3, [r7, #0]
 8016478:	2b00      	cmp	r3, #0
 801647a:	d008      	beq.n	801648e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801647c:	79fb      	ldrb	r3, [r7, #7]
 801647e:	4a09      	ldr	r2, [pc, #36]	; (80164a4 <memp_free+0x50>)
 8016480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016484:	6839      	ldr	r1, [r7, #0]
 8016486:	4618      	mov	r0, r3
 8016488:	f7ff ff9a 	bl	80163c0 <do_memp_free_pool>
 801648c:	e000      	b.n	8016490 <memp_free+0x3c>
    return;
 801648e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8016490:	3708      	adds	r7, #8
 8016492:	46bd      	mov	sp, r7
 8016494:	bd80      	pop	{r7, pc}
 8016496:	bf00      	nop
 8016498:	080268b8 	.word	0x080268b8
 801649c:	080269b4 	.word	0x080269b4
 80164a0:	08026938 	.word	0x08026938
 80164a4:	0802918c 	.word	0x0802918c

080164a8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80164a8:	b480      	push	{r7}
 80164aa:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80164ac:	bf00      	nop
 80164ae:	46bd      	mov	sp, r7
 80164b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164b4:	4770      	bx	lr
	...

080164b8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80164b8:	b580      	push	{r7, lr}
 80164ba:	b086      	sub	sp, #24
 80164bc:	af00      	add	r7, sp, #0
 80164be:	60f8      	str	r0, [r7, #12]
 80164c0:	60b9      	str	r1, [r7, #8]
 80164c2:	607a      	str	r2, [r7, #4]
 80164c4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80164c6:	68fb      	ldr	r3, [r7, #12]
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d108      	bne.n	80164de <netif_add+0x26>
 80164cc:	4b57      	ldr	r3, [pc, #348]	; (801662c <netif_add+0x174>)
 80164ce:	f240 1227 	movw	r2, #295	; 0x127
 80164d2:	4957      	ldr	r1, [pc, #348]	; (8016630 <netif_add+0x178>)
 80164d4:	4857      	ldr	r0, [pc, #348]	; (8016634 <netif_add+0x17c>)
 80164d6:	f00a fcc9 	bl	8020e6c <iprintf>
 80164da:	2300      	movs	r3, #0
 80164dc:	e0a2      	b.n	8016624 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80164de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d108      	bne.n	80164f6 <netif_add+0x3e>
 80164e4:	4b51      	ldr	r3, [pc, #324]	; (801662c <netif_add+0x174>)
 80164e6:	f44f 7294 	mov.w	r2, #296	; 0x128
 80164ea:	4953      	ldr	r1, [pc, #332]	; (8016638 <netif_add+0x180>)
 80164ec:	4851      	ldr	r0, [pc, #324]	; (8016634 <netif_add+0x17c>)
 80164ee:	f00a fcbd 	bl	8020e6c <iprintf>
 80164f2:	2300      	movs	r3, #0
 80164f4:	e096      	b.n	8016624 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80164f6:	68bb      	ldr	r3, [r7, #8]
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d101      	bne.n	8016500 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80164fc:	4b4f      	ldr	r3, [pc, #316]	; (801663c <netif_add+0x184>)
 80164fe:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	2b00      	cmp	r3, #0
 8016504:	d101      	bne.n	801650a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8016506:	4b4d      	ldr	r3, [pc, #308]	; (801663c <netif_add+0x184>)
 8016508:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801650a:	683b      	ldr	r3, [r7, #0]
 801650c:	2b00      	cmp	r3, #0
 801650e:	d101      	bne.n	8016514 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8016510:	4b4a      	ldr	r3, [pc, #296]	; (801663c <netif_add+0x184>)
 8016512:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8016514:	68fb      	ldr	r3, [r7, #12]
 8016516:	2200      	movs	r2, #0
 8016518:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801651a:	68fb      	ldr	r3, [r7, #12]
 801651c:	2200      	movs	r2, #0
 801651e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8016520:	68fb      	ldr	r3, [r7, #12]
 8016522:	2200      	movs	r2, #0
 8016524:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8016526:	68fb      	ldr	r3, [r7, #12]
 8016528:	4a45      	ldr	r2, [pc, #276]	; (8016640 <netif_add+0x188>)
 801652a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	2200      	movs	r2, #0
 8016530:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8016532:	68fb      	ldr	r3, [r7, #12]
 8016534:	2200      	movs	r2, #0
 8016536:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801653a:	68fb      	ldr	r3, [r7, #12]
 801653c:	2200      	movs	r2, #0
 801653e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8016540:	68fb      	ldr	r3, [r7, #12]
 8016542:	6a3a      	ldr	r2, [r7, #32]
 8016544:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8016546:	4b3f      	ldr	r3, [pc, #252]	; (8016644 <netif_add+0x18c>)
 8016548:	781a      	ldrb	r2, [r3, #0]
 801654a:	68fb      	ldr	r3, [r7, #12]
 801654c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8016550:	68fb      	ldr	r3, [r7, #12]
 8016552:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016554:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8016556:	683b      	ldr	r3, [r7, #0]
 8016558:	687a      	ldr	r2, [r7, #4]
 801655a:	68b9      	ldr	r1, [r7, #8]
 801655c:	68f8      	ldr	r0, [r7, #12]
 801655e:	f000 f913 	bl	8016788 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8016562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016564:	68f8      	ldr	r0, [r7, #12]
 8016566:	4798      	blx	r3
 8016568:	4603      	mov	r3, r0
 801656a:	2b00      	cmp	r3, #0
 801656c:	d001      	beq.n	8016572 <netif_add+0xba>
    return NULL;
 801656e:	2300      	movs	r3, #0
 8016570:	e058      	b.n	8016624 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8016572:	68fb      	ldr	r3, [r7, #12]
 8016574:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016578:	2bff      	cmp	r3, #255	; 0xff
 801657a:	d103      	bne.n	8016584 <netif_add+0xcc>
        netif->num = 0;
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	2200      	movs	r2, #0
 8016580:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8016584:	2300      	movs	r3, #0
 8016586:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8016588:	4b2f      	ldr	r3, [pc, #188]	; (8016648 <netif_add+0x190>)
 801658a:	681b      	ldr	r3, [r3, #0]
 801658c:	617b      	str	r3, [r7, #20]
 801658e:	e02b      	b.n	80165e8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8016590:	697a      	ldr	r2, [r7, #20]
 8016592:	68fb      	ldr	r3, [r7, #12]
 8016594:	429a      	cmp	r2, r3
 8016596:	d106      	bne.n	80165a6 <netif_add+0xee>
 8016598:	4b24      	ldr	r3, [pc, #144]	; (801662c <netif_add+0x174>)
 801659a:	f240 128b 	movw	r2, #395	; 0x18b
 801659e:	492b      	ldr	r1, [pc, #172]	; (801664c <netif_add+0x194>)
 80165a0:	4824      	ldr	r0, [pc, #144]	; (8016634 <netif_add+0x17c>)
 80165a2:	f00a fc63 	bl	8020e6c <iprintf>
        num_netifs++;
 80165a6:	693b      	ldr	r3, [r7, #16]
 80165a8:	3301      	adds	r3, #1
 80165aa:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80165ac:	693b      	ldr	r3, [r7, #16]
 80165ae:	2bff      	cmp	r3, #255	; 0xff
 80165b0:	dd06      	ble.n	80165c0 <netif_add+0x108>
 80165b2:	4b1e      	ldr	r3, [pc, #120]	; (801662c <netif_add+0x174>)
 80165b4:	f240 128d 	movw	r2, #397	; 0x18d
 80165b8:	4925      	ldr	r1, [pc, #148]	; (8016650 <netif_add+0x198>)
 80165ba:	481e      	ldr	r0, [pc, #120]	; (8016634 <netif_add+0x17c>)
 80165bc:	f00a fc56 	bl	8020e6c <iprintf>
        if (netif2->num == netif->num) {
 80165c0:	697b      	ldr	r3, [r7, #20]
 80165c2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80165c6:	68fb      	ldr	r3, [r7, #12]
 80165c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80165cc:	429a      	cmp	r2, r3
 80165ce:	d108      	bne.n	80165e2 <netif_add+0x12a>
          netif->num++;
 80165d0:	68fb      	ldr	r3, [r7, #12]
 80165d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80165d6:	3301      	adds	r3, #1
 80165d8:	b2da      	uxtb	r2, r3
 80165da:	68fb      	ldr	r3, [r7, #12]
 80165dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80165e0:	e005      	b.n	80165ee <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80165e2:	697b      	ldr	r3, [r7, #20]
 80165e4:	681b      	ldr	r3, [r3, #0]
 80165e6:	617b      	str	r3, [r7, #20]
 80165e8:	697b      	ldr	r3, [r7, #20]
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d1d0      	bne.n	8016590 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80165ee:	697b      	ldr	r3, [r7, #20]
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d1be      	bne.n	8016572 <netif_add+0xba>
  }
  if (netif->num == 254) {
 80165f4:	68fb      	ldr	r3, [r7, #12]
 80165f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80165fa:	2bfe      	cmp	r3, #254	; 0xfe
 80165fc:	d103      	bne.n	8016606 <netif_add+0x14e>
    netif_num = 0;
 80165fe:	4b11      	ldr	r3, [pc, #68]	; (8016644 <netif_add+0x18c>)
 8016600:	2200      	movs	r2, #0
 8016602:	701a      	strb	r2, [r3, #0]
 8016604:	e006      	b.n	8016614 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8016606:	68fb      	ldr	r3, [r7, #12]
 8016608:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801660c:	3301      	adds	r3, #1
 801660e:	b2da      	uxtb	r2, r3
 8016610:	4b0c      	ldr	r3, [pc, #48]	; (8016644 <netif_add+0x18c>)
 8016612:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8016614:	4b0c      	ldr	r3, [pc, #48]	; (8016648 <netif_add+0x190>)
 8016616:	681a      	ldr	r2, [r3, #0]
 8016618:	68fb      	ldr	r3, [r7, #12]
 801661a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801661c:	4a0a      	ldr	r2, [pc, #40]	; (8016648 <netif_add+0x190>)
 801661e:	68fb      	ldr	r3, [r7, #12]
 8016620:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8016622:	68fb      	ldr	r3, [r7, #12]
}
 8016624:	4618      	mov	r0, r3
 8016626:	3718      	adds	r7, #24
 8016628:	46bd      	mov	sp, r7
 801662a:	bd80      	pop	{r7, pc}
 801662c:	080269d0 	.word	0x080269d0
 8016630:	08026a8c 	.word	0x08026a8c
 8016634:	08026a48 	.word	0x08026a48
 8016638:	08026aa8 	.word	0x08026aa8
 801663c:	0802911c 	.word	0x0802911c
 8016640:	08016a63 	.word	0x08016a63
 8016644:	2400489c 	.word	0x2400489c
 8016648:	240082a8 	.word	0x240082a8
 801664c:	08026acc 	.word	0x08026acc
 8016650:	08026ae0 	.word	0x08026ae0

08016654 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016654:	b580      	push	{r7, lr}
 8016656:	b082      	sub	sp, #8
 8016658:	af00      	add	r7, sp, #0
 801665a:	6078      	str	r0, [r7, #4]
 801665c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801665e:	6839      	ldr	r1, [r7, #0]
 8016660:	6878      	ldr	r0, [r7, #4]
 8016662:	f002 ff9b 	bl	801959c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8016666:	6839      	ldr	r1, [r7, #0]
 8016668:	6878      	ldr	r0, [r7, #4]
 801666a:	f007 fe19 	bl	801e2a0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801666e:	bf00      	nop
 8016670:	3708      	adds	r7, #8
 8016672:	46bd      	mov	sp, r7
 8016674:	bd80      	pop	{r7, pc}
	...

08016678 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8016678:	b580      	push	{r7, lr}
 801667a:	b086      	sub	sp, #24
 801667c:	af00      	add	r7, sp, #0
 801667e:	60f8      	str	r0, [r7, #12]
 8016680:	60b9      	str	r1, [r7, #8]
 8016682:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8016684:	68bb      	ldr	r3, [r7, #8]
 8016686:	2b00      	cmp	r3, #0
 8016688:	d106      	bne.n	8016698 <netif_do_set_ipaddr+0x20>
 801668a:	4b1d      	ldr	r3, [pc, #116]	; (8016700 <netif_do_set_ipaddr+0x88>)
 801668c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8016690:	491c      	ldr	r1, [pc, #112]	; (8016704 <netif_do_set_ipaddr+0x8c>)
 8016692:	481d      	ldr	r0, [pc, #116]	; (8016708 <netif_do_set_ipaddr+0x90>)
 8016694:	f00a fbea 	bl	8020e6c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	2b00      	cmp	r3, #0
 801669c:	d106      	bne.n	80166ac <netif_do_set_ipaddr+0x34>
 801669e:	4b18      	ldr	r3, [pc, #96]	; (8016700 <netif_do_set_ipaddr+0x88>)
 80166a0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80166a4:	4917      	ldr	r1, [pc, #92]	; (8016704 <netif_do_set_ipaddr+0x8c>)
 80166a6:	4818      	ldr	r0, [pc, #96]	; (8016708 <netif_do_set_ipaddr+0x90>)
 80166a8:	f00a fbe0 	bl	8020e6c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80166ac:	68bb      	ldr	r3, [r7, #8]
 80166ae:	681a      	ldr	r2, [r3, #0]
 80166b0:	68fb      	ldr	r3, [r7, #12]
 80166b2:	3304      	adds	r3, #4
 80166b4:	681b      	ldr	r3, [r3, #0]
 80166b6:	429a      	cmp	r2, r3
 80166b8:	d01c      	beq.n	80166f4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80166ba:	68bb      	ldr	r3, [r7, #8]
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80166c0:	68fb      	ldr	r3, [r7, #12]
 80166c2:	3304      	adds	r3, #4
 80166c4:	681a      	ldr	r2, [r3, #0]
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80166ca:	f107 0314 	add.w	r3, r7, #20
 80166ce:	4619      	mov	r1, r3
 80166d0:	6878      	ldr	r0, [r7, #4]
 80166d2:	f7ff ffbf 	bl	8016654 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80166d6:	68bb      	ldr	r3, [r7, #8]
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d002      	beq.n	80166e2 <netif_do_set_ipaddr+0x6a>
 80166dc:	68bb      	ldr	r3, [r7, #8]
 80166de:	681b      	ldr	r3, [r3, #0]
 80166e0:	e000      	b.n	80166e4 <netif_do_set_ipaddr+0x6c>
 80166e2:	2300      	movs	r3, #0
 80166e4:	68fa      	ldr	r2, [r7, #12]
 80166e6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80166e8:	2101      	movs	r1, #1
 80166ea:	68f8      	ldr	r0, [r7, #12]
 80166ec:	f000 f8d2 	bl	8016894 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80166f0:	2301      	movs	r3, #1
 80166f2:	e000      	b.n	80166f6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80166f4:	2300      	movs	r3, #0
}
 80166f6:	4618      	mov	r0, r3
 80166f8:	3718      	adds	r7, #24
 80166fa:	46bd      	mov	sp, r7
 80166fc:	bd80      	pop	{r7, pc}
 80166fe:	bf00      	nop
 8016700:	080269d0 	.word	0x080269d0
 8016704:	08026b10 	.word	0x08026b10
 8016708:	08026a48 	.word	0x08026a48

0801670c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 801670c:	b480      	push	{r7}
 801670e:	b085      	sub	sp, #20
 8016710:	af00      	add	r7, sp, #0
 8016712:	60f8      	str	r0, [r7, #12]
 8016714:	60b9      	str	r1, [r7, #8]
 8016716:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8016718:	68bb      	ldr	r3, [r7, #8]
 801671a:	681a      	ldr	r2, [r3, #0]
 801671c:	68fb      	ldr	r3, [r7, #12]
 801671e:	3308      	adds	r3, #8
 8016720:	681b      	ldr	r3, [r3, #0]
 8016722:	429a      	cmp	r2, r3
 8016724:	d00a      	beq.n	801673c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8016726:	68bb      	ldr	r3, [r7, #8]
 8016728:	2b00      	cmp	r3, #0
 801672a:	d002      	beq.n	8016732 <netif_do_set_netmask+0x26>
 801672c:	68bb      	ldr	r3, [r7, #8]
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	e000      	b.n	8016734 <netif_do_set_netmask+0x28>
 8016732:	2300      	movs	r3, #0
 8016734:	68fa      	ldr	r2, [r7, #12]
 8016736:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8016738:	2301      	movs	r3, #1
 801673a:	e000      	b.n	801673e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 801673c:	2300      	movs	r3, #0
}
 801673e:	4618      	mov	r0, r3
 8016740:	3714      	adds	r7, #20
 8016742:	46bd      	mov	sp, r7
 8016744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016748:	4770      	bx	lr

0801674a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801674a:	b480      	push	{r7}
 801674c:	b085      	sub	sp, #20
 801674e:	af00      	add	r7, sp, #0
 8016750:	60f8      	str	r0, [r7, #12]
 8016752:	60b9      	str	r1, [r7, #8]
 8016754:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8016756:	68bb      	ldr	r3, [r7, #8]
 8016758:	681a      	ldr	r2, [r3, #0]
 801675a:	68fb      	ldr	r3, [r7, #12]
 801675c:	330c      	adds	r3, #12
 801675e:	681b      	ldr	r3, [r3, #0]
 8016760:	429a      	cmp	r2, r3
 8016762:	d00a      	beq.n	801677a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8016764:	68bb      	ldr	r3, [r7, #8]
 8016766:	2b00      	cmp	r3, #0
 8016768:	d002      	beq.n	8016770 <netif_do_set_gw+0x26>
 801676a:	68bb      	ldr	r3, [r7, #8]
 801676c:	681b      	ldr	r3, [r3, #0]
 801676e:	e000      	b.n	8016772 <netif_do_set_gw+0x28>
 8016770:	2300      	movs	r3, #0
 8016772:	68fa      	ldr	r2, [r7, #12]
 8016774:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8016776:	2301      	movs	r3, #1
 8016778:	e000      	b.n	801677c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801677a:	2300      	movs	r3, #0
}
 801677c:	4618      	mov	r0, r3
 801677e:	3714      	adds	r7, #20
 8016780:	46bd      	mov	sp, r7
 8016782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016786:	4770      	bx	lr

08016788 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8016788:	b580      	push	{r7, lr}
 801678a:	b088      	sub	sp, #32
 801678c:	af00      	add	r7, sp, #0
 801678e:	60f8      	str	r0, [r7, #12]
 8016790:	60b9      	str	r1, [r7, #8]
 8016792:	607a      	str	r2, [r7, #4]
 8016794:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8016796:	2300      	movs	r3, #0
 8016798:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801679a:	2300      	movs	r3, #0
 801679c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801679e:	68bb      	ldr	r3, [r7, #8]
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d101      	bne.n	80167a8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80167a4:	4b1c      	ldr	r3, [pc, #112]	; (8016818 <netif_set_addr+0x90>)
 80167a6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	d101      	bne.n	80167b2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80167ae:	4b1a      	ldr	r3, [pc, #104]	; (8016818 <netif_set_addr+0x90>)
 80167b0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80167b2:	683b      	ldr	r3, [r7, #0]
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	d101      	bne.n	80167bc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80167b8:	4b17      	ldr	r3, [pc, #92]	; (8016818 <netif_set_addr+0x90>)
 80167ba:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80167bc:	68bb      	ldr	r3, [r7, #8]
 80167be:	2b00      	cmp	r3, #0
 80167c0:	d003      	beq.n	80167ca <netif_set_addr+0x42>
 80167c2:	68bb      	ldr	r3, [r7, #8]
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d101      	bne.n	80167ce <netif_set_addr+0x46>
 80167ca:	2301      	movs	r3, #1
 80167cc:	e000      	b.n	80167d0 <netif_set_addr+0x48>
 80167ce:	2300      	movs	r3, #0
 80167d0:	617b      	str	r3, [r7, #20]
  if (remove) {
 80167d2:	697b      	ldr	r3, [r7, #20]
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d006      	beq.n	80167e6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80167d8:	f107 0310 	add.w	r3, r7, #16
 80167dc:	461a      	mov	r2, r3
 80167de:	68b9      	ldr	r1, [r7, #8]
 80167e0:	68f8      	ldr	r0, [r7, #12]
 80167e2:	f7ff ff49 	bl	8016678 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80167e6:	69fa      	ldr	r2, [r7, #28]
 80167e8:	6879      	ldr	r1, [r7, #4]
 80167ea:	68f8      	ldr	r0, [r7, #12]
 80167ec:	f7ff ff8e 	bl	801670c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80167f0:	69ba      	ldr	r2, [r7, #24]
 80167f2:	6839      	ldr	r1, [r7, #0]
 80167f4:	68f8      	ldr	r0, [r7, #12]
 80167f6:	f7ff ffa8 	bl	801674a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80167fa:	697b      	ldr	r3, [r7, #20]
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d106      	bne.n	801680e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8016800:	f107 0310 	add.w	r3, r7, #16
 8016804:	461a      	mov	r2, r3
 8016806:	68b9      	ldr	r1, [r7, #8]
 8016808:	68f8      	ldr	r0, [r7, #12]
 801680a:	f7ff ff35 	bl	8016678 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801680e:	bf00      	nop
 8016810:	3720      	adds	r7, #32
 8016812:	46bd      	mov	sp, r7
 8016814:	bd80      	pop	{r7, pc}
 8016816:	bf00      	nop
 8016818:	0802911c 	.word	0x0802911c

0801681c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 801681c:	b480      	push	{r7}
 801681e:	b083      	sub	sp, #12
 8016820:	af00      	add	r7, sp, #0
 8016822:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8016824:	4a04      	ldr	r2, [pc, #16]	; (8016838 <netif_set_default+0x1c>)
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801682a:	bf00      	nop
 801682c:	370c      	adds	r7, #12
 801682e:	46bd      	mov	sp, r7
 8016830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016834:	4770      	bx	lr
 8016836:	bf00      	nop
 8016838:	240082ac 	.word	0x240082ac

0801683c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801683c:	b580      	push	{r7, lr}
 801683e:	b082      	sub	sp, #8
 8016840:	af00      	add	r7, sp, #0
 8016842:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	2b00      	cmp	r3, #0
 8016848:	d107      	bne.n	801685a <netif_set_up+0x1e>
 801684a:	4b0f      	ldr	r3, [pc, #60]	; (8016888 <netif_set_up+0x4c>)
 801684c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8016850:	490e      	ldr	r1, [pc, #56]	; (801688c <netif_set_up+0x50>)
 8016852:	480f      	ldr	r0, [pc, #60]	; (8016890 <netif_set_up+0x54>)
 8016854:	f00a fb0a 	bl	8020e6c <iprintf>
 8016858:	e013      	b.n	8016882 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016860:	f003 0301 	and.w	r3, r3, #1
 8016864:	2b00      	cmp	r3, #0
 8016866:	d10c      	bne.n	8016882 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801686e:	f043 0301 	orr.w	r3, r3, #1
 8016872:	b2da      	uxtb	r2, r3
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801687a:	2103      	movs	r1, #3
 801687c:	6878      	ldr	r0, [r7, #4]
 801687e:	f000 f809 	bl	8016894 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8016882:	3708      	adds	r7, #8
 8016884:	46bd      	mov	sp, r7
 8016886:	bd80      	pop	{r7, pc}
 8016888:	080269d0 	.word	0x080269d0
 801688c:	08026b80 	.word	0x08026b80
 8016890:	08026a48 	.word	0x08026a48

08016894 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8016894:	b580      	push	{r7, lr}
 8016896:	b082      	sub	sp, #8
 8016898:	af00      	add	r7, sp, #0
 801689a:	6078      	str	r0, [r7, #4]
 801689c:	460b      	mov	r3, r1
 801689e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d106      	bne.n	80168b4 <netif_issue_reports+0x20>
 80168a6:	4b18      	ldr	r3, [pc, #96]	; (8016908 <netif_issue_reports+0x74>)
 80168a8:	f240 326d 	movw	r2, #877	; 0x36d
 80168ac:	4917      	ldr	r1, [pc, #92]	; (801690c <netif_issue_reports+0x78>)
 80168ae:	4818      	ldr	r0, [pc, #96]	; (8016910 <netif_issue_reports+0x7c>)
 80168b0:	f00a fadc 	bl	8020e6c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80168ba:	f003 0304 	and.w	r3, r3, #4
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d01e      	beq.n	8016900 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80168c8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d017      	beq.n	8016900 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80168d0:	78fb      	ldrb	r3, [r7, #3]
 80168d2:	f003 0301 	and.w	r3, r3, #1
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	d013      	beq.n	8016902 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	3304      	adds	r3, #4
 80168de:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d00e      	beq.n	8016902 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80168ea:	f003 0308 	and.w	r3, r3, #8
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	d007      	beq.n	8016902 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	3304      	adds	r3, #4
 80168f6:	4619      	mov	r1, r3
 80168f8:	6878      	ldr	r0, [r7, #4]
 80168fa:	f7fd fc8d 	bl	8014218 <etharp_request>
 80168fe:	e000      	b.n	8016902 <netif_issue_reports+0x6e>
    return;
 8016900:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8016902:	3708      	adds	r7, #8
 8016904:	46bd      	mov	sp, r7
 8016906:	bd80      	pop	{r7, pc}
 8016908:	080269d0 	.word	0x080269d0
 801690c:	08026b9c 	.word	0x08026b9c
 8016910:	08026a48 	.word	0x08026a48

08016914 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8016914:	b580      	push	{r7, lr}
 8016916:	b082      	sub	sp, #8
 8016918:	af00      	add	r7, sp, #0
 801691a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	2b00      	cmp	r3, #0
 8016920:	d107      	bne.n	8016932 <netif_set_down+0x1e>
 8016922:	4b12      	ldr	r3, [pc, #72]	; (801696c <netif_set_down+0x58>)
 8016924:	f240 329b 	movw	r2, #923	; 0x39b
 8016928:	4911      	ldr	r1, [pc, #68]	; (8016970 <netif_set_down+0x5c>)
 801692a:	4812      	ldr	r0, [pc, #72]	; (8016974 <netif_set_down+0x60>)
 801692c:	f00a fa9e 	bl	8020e6c <iprintf>
 8016930:	e019      	b.n	8016966 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016938:	f003 0301 	and.w	r3, r3, #1
 801693c:	2b00      	cmp	r3, #0
 801693e:	d012      	beq.n	8016966 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016946:	f023 0301 	bic.w	r3, r3, #1
 801694a:	b2da      	uxtb	r2, r3
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016958:	f003 0308 	and.w	r3, r3, #8
 801695c:	2b00      	cmp	r3, #0
 801695e:	d002      	beq.n	8016966 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8016960:	6878      	ldr	r0, [r7, #4]
 8016962:	f7fd f817 	bl	8013994 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8016966:	3708      	adds	r7, #8
 8016968:	46bd      	mov	sp, r7
 801696a:	bd80      	pop	{r7, pc}
 801696c:	080269d0 	.word	0x080269d0
 8016970:	08026bc0 	.word	0x08026bc0
 8016974:	08026a48 	.word	0x08026a48

08016978 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8016978:	b580      	push	{r7, lr}
 801697a:	b082      	sub	sp, #8
 801697c:	af00      	add	r7, sp, #0
 801697e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	2b00      	cmp	r3, #0
 8016984:	d107      	bne.n	8016996 <netif_set_link_up+0x1e>
 8016986:	4b13      	ldr	r3, [pc, #76]	; (80169d4 <netif_set_link_up+0x5c>)
 8016988:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 801698c:	4912      	ldr	r1, [pc, #72]	; (80169d8 <netif_set_link_up+0x60>)
 801698e:	4813      	ldr	r0, [pc, #76]	; (80169dc <netif_set_link_up+0x64>)
 8016990:	f00a fa6c 	bl	8020e6c <iprintf>
 8016994:	e01b      	b.n	80169ce <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801699c:	f003 0304 	and.w	r3, r3, #4
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d114      	bne.n	80169ce <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80169aa:	f043 0304 	orr.w	r3, r3, #4
 80169ae:	b2da      	uxtb	r2, r3
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80169b6:	2103      	movs	r1, #3
 80169b8:	6878      	ldr	r0, [r7, #4]
 80169ba:	f7ff ff6b 	bl	8016894 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	69db      	ldr	r3, [r3, #28]
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d003      	beq.n	80169ce <netif_set_link_up+0x56>
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	69db      	ldr	r3, [r3, #28]
 80169ca:	6878      	ldr	r0, [r7, #4]
 80169cc:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80169ce:	3708      	adds	r7, #8
 80169d0:	46bd      	mov	sp, r7
 80169d2:	bd80      	pop	{r7, pc}
 80169d4:	080269d0 	.word	0x080269d0
 80169d8:	08026be0 	.word	0x08026be0
 80169dc:	08026a48 	.word	0x08026a48

080169e0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80169e0:	b580      	push	{r7, lr}
 80169e2:	b082      	sub	sp, #8
 80169e4:	af00      	add	r7, sp, #0
 80169e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d107      	bne.n	80169fe <netif_set_link_down+0x1e>
 80169ee:	4b11      	ldr	r3, [pc, #68]	; (8016a34 <netif_set_link_down+0x54>)
 80169f0:	f240 4206 	movw	r2, #1030	; 0x406
 80169f4:	4910      	ldr	r1, [pc, #64]	; (8016a38 <netif_set_link_down+0x58>)
 80169f6:	4811      	ldr	r0, [pc, #68]	; (8016a3c <netif_set_link_down+0x5c>)
 80169f8:	f00a fa38 	bl	8020e6c <iprintf>
 80169fc:	e017      	b.n	8016a2e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016a04:	f003 0304 	and.w	r3, r3, #4
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d010      	beq.n	8016a2e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016a12:	f023 0304 	bic.w	r3, r3, #4
 8016a16:	b2da      	uxtb	r2, r3
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	69db      	ldr	r3, [r3, #28]
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	d003      	beq.n	8016a2e <netif_set_link_down+0x4e>
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	69db      	ldr	r3, [r3, #28]
 8016a2a:	6878      	ldr	r0, [r7, #4]
 8016a2c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8016a2e:	3708      	adds	r7, #8
 8016a30:	46bd      	mov	sp, r7
 8016a32:	bd80      	pop	{r7, pc}
 8016a34:	080269d0 	.word	0x080269d0
 8016a38:	08026c04 	.word	0x08026c04
 8016a3c:	08026a48 	.word	0x08026a48

08016a40 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8016a40:	b480      	push	{r7}
 8016a42:	b083      	sub	sp, #12
 8016a44:	af00      	add	r7, sp, #0
 8016a46:	6078      	str	r0, [r7, #4]
 8016a48:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	d002      	beq.n	8016a56 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	683a      	ldr	r2, [r7, #0]
 8016a54:	61da      	str	r2, [r3, #28]
  }
}
 8016a56:	bf00      	nop
 8016a58:	370c      	adds	r7, #12
 8016a5a:	46bd      	mov	sp, r7
 8016a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a60:	4770      	bx	lr

08016a62 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8016a62:	b480      	push	{r7}
 8016a64:	b085      	sub	sp, #20
 8016a66:	af00      	add	r7, sp, #0
 8016a68:	60f8      	str	r0, [r7, #12]
 8016a6a:	60b9      	str	r1, [r7, #8]
 8016a6c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8016a6e:	f06f 030b 	mvn.w	r3, #11
}
 8016a72:	4618      	mov	r0, r3
 8016a74:	3714      	adds	r7, #20
 8016a76:	46bd      	mov	sp, r7
 8016a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a7c:	4770      	bx	lr
	...

08016a80 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8016a80:	b480      	push	{r7}
 8016a82:	b085      	sub	sp, #20
 8016a84:	af00      	add	r7, sp, #0
 8016a86:	4603      	mov	r3, r0
 8016a88:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8016a8a:	79fb      	ldrb	r3, [r7, #7]
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	d013      	beq.n	8016ab8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8016a90:	4b0d      	ldr	r3, [pc, #52]	; (8016ac8 <netif_get_by_index+0x48>)
 8016a92:	681b      	ldr	r3, [r3, #0]
 8016a94:	60fb      	str	r3, [r7, #12]
 8016a96:	e00c      	b.n	8016ab2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8016a98:	68fb      	ldr	r3, [r7, #12]
 8016a9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016a9e:	3301      	adds	r3, #1
 8016aa0:	b2db      	uxtb	r3, r3
 8016aa2:	79fa      	ldrb	r2, [r7, #7]
 8016aa4:	429a      	cmp	r2, r3
 8016aa6:	d101      	bne.n	8016aac <netif_get_by_index+0x2c>
        return netif; /* found! */
 8016aa8:	68fb      	ldr	r3, [r7, #12]
 8016aaa:	e006      	b.n	8016aba <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8016aac:	68fb      	ldr	r3, [r7, #12]
 8016aae:	681b      	ldr	r3, [r3, #0]
 8016ab0:	60fb      	str	r3, [r7, #12]
 8016ab2:	68fb      	ldr	r3, [r7, #12]
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	d1ef      	bne.n	8016a98 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8016ab8:	2300      	movs	r3, #0
}
 8016aba:	4618      	mov	r0, r3
 8016abc:	3714      	adds	r7, #20
 8016abe:	46bd      	mov	sp, r7
 8016ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ac4:	4770      	bx	lr
 8016ac6:	bf00      	nop
 8016ac8:	240082a8 	.word	0x240082a8

08016acc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8016acc:	b580      	push	{r7, lr}
 8016ace:	b082      	sub	sp, #8
 8016ad0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8016ad2:	4b0c      	ldr	r3, [pc, #48]	; (8016b04 <pbuf_free_ooseq+0x38>)
 8016ad4:	2200      	movs	r2, #0
 8016ad6:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8016ad8:	4b0b      	ldr	r3, [pc, #44]	; (8016b08 <pbuf_free_ooseq+0x3c>)
 8016ada:	681b      	ldr	r3, [r3, #0]
 8016adc:	607b      	str	r3, [r7, #4]
 8016ade:	e00a      	b.n	8016af6 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d003      	beq.n	8016af0 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8016ae8:	6878      	ldr	r0, [r7, #4]
 8016aea:	f002 fd95 	bl	8019618 <tcp_free_ooseq>
      return;
 8016aee:	e005      	b.n	8016afc <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	68db      	ldr	r3, [r3, #12]
 8016af4:	607b      	str	r3, [r7, #4]
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	d1f1      	bne.n	8016ae0 <pbuf_free_ooseq+0x14>
    }
  }
}
 8016afc:	3708      	adds	r7, #8
 8016afe:	46bd      	mov	sp, r7
 8016b00:	bd80      	pop	{r7, pc}
 8016b02:	bf00      	nop
 8016b04:	240082b0 	.word	0x240082b0
 8016b08:	240082b8 	.word	0x240082b8

08016b0c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8016b0c:	b480      	push	{r7}
 8016b0e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8016b10:	4b03      	ldr	r3, [pc, #12]	; (8016b20 <pbuf_pool_is_empty+0x14>)
 8016b12:	2201      	movs	r2, #1
 8016b14:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8016b16:	bf00      	nop
 8016b18:	46bd      	mov	sp, r7
 8016b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b1e:	4770      	bx	lr
 8016b20:	240082b0 	.word	0x240082b0

08016b24 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8016b24:	b480      	push	{r7}
 8016b26:	b085      	sub	sp, #20
 8016b28:	af00      	add	r7, sp, #0
 8016b2a:	60f8      	str	r0, [r7, #12]
 8016b2c:	60b9      	str	r1, [r7, #8]
 8016b2e:	4611      	mov	r1, r2
 8016b30:	461a      	mov	r2, r3
 8016b32:	460b      	mov	r3, r1
 8016b34:	80fb      	strh	r3, [r7, #6]
 8016b36:	4613      	mov	r3, r2
 8016b38:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8016b3a:	68fb      	ldr	r3, [r7, #12]
 8016b3c:	2200      	movs	r2, #0
 8016b3e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8016b40:	68fb      	ldr	r3, [r7, #12]
 8016b42:	68ba      	ldr	r2, [r7, #8]
 8016b44:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8016b46:	68fb      	ldr	r3, [r7, #12]
 8016b48:	88fa      	ldrh	r2, [r7, #6]
 8016b4a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8016b4c:	68fb      	ldr	r3, [r7, #12]
 8016b4e:	88ba      	ldrh	r2, [r7, #4]
 8016b50:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8016b52:	8b3b      	ldrh	r3, [r7, #24]
 8016b54:	b2da      	uxtb	r2, r3
 8016b56:	68fb      	ldr	r3, [r7, #12]
 8016b58:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8016b5a:	68fb      	ldr	r3, [r7, #12]
 8016b5c:	7f3a      	ldrb	r2, [r7, #28]
 8016b5e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8016b60:	68fb      	ldr	r3, [r7, #12]
 8016b62:	2201      	movs	r2, #1
 8016b64:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8016b66:	68fb      	ldr	r3, [r7, #12]
 8016b68:	2200      	movs	r2, #0
 8016b6a:	73da      	strb	r2, [r3, #15]
}
 8016b6c:	bf00      	nop
 8016b6e:	3714      	adds	r7, #20
 8016b70:	46bd      	mov	sp, r7
 8016b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b76:	4770      	bx	lr

08016b78 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8016b78:	b580      	push	{r7, lr}
 8016b7a:	b08c      	sub	sp, #48	; 0x30
 8016b7c:	af02      	add	r7, sp, #8
 8016b7e:	4603      	mov	r3, r0
 8016b80:	71fb      	strb	r3, [r7, #7]
 8016b82:	460b      	mov	r3, r1
 8016b84:	80bb      	strh	r3, [r7, #4]
 8016b86:	4613      	mov	r3, r2
 8016b88:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8016b8a:	79fb      	ldrb	r3, [r7, #7]
 8016b8c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8016b8e:	887b      	ldrh	r3, [r7, #2]
 8016b90:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8016b94:	d07f      	beq.n	8016c96 <pbuf_alloc+0x11e>
 8016b96:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8016b9a:	f300 80c8 	bgt.w	8016d2e <pbuf_alloc+0x1b6>
 8016b9e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8016ba2:	d010      	beq.n	8016bc6 <pbuf_alloc+0x4e>
 8016ba4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8016ba8:	f300 80c1 	bgt.w	8016d2e <pbuf_alloc+0x1b6>
 8016bac:	2b01      	cmp	r3, #1
 8016bae:	d002      	beq.n	8016bb6 <pbuf_alloc+0x3e>
 8016bb0:	2b41      	cmp	r3, #65	; 0x41
 8016bb2:	f040 80bc 	bne.w	8016d2e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8016bb6:	887a      	ldrh	r2, [r7, #2]
 8016bb8:	88bb      	ldrh	r3, [r7, #4]
 8016bba:	4619      	mov	r1, r3
 8016bbc:	2000      	movs	r0, #0
 8016bbe:	f000 f8d1 	bl	8016d64 <pbuf_alloc_reference>
 8016bc2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8016bc4:	e0bd      	b.n	8016d42 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8016bc6:	2300      	movs	r3, #0
 8016bc8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8016bca:	2300      	movs	r3, #0
 8016bcc:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8016bce:	88bb      	ldrh	r3, [r7, #4]
 8016bd0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8016bd2:	2008      	movs	r0, #8
 8016bd4:	f7ff fbce 	bl	8016374 <memp_malloc>
 8016bd8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8016bda:	693b      	ldr	r3, [r7, #16]
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	d109      	bne.n	8016bf4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8016be0:	f7ff ff94 	bl	8016b0c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8016be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d002      	beq.n	8016bf0 <pbuf_alloc+0x78>
            pbuf_free(p);
 8016bea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016bec:	f000 faa8 	bl	8017140 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8016bf0:	2300      	movs	r3, #0
 8016bf2:	e0a7      	b.n	8016d44 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8016bf4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016bf6:	3303      	adds	r3, #3
 8016bf8:	b29b      	uxth	r3, r3
 8016bfa:	f023 0303 	bic.w	r3, r3, #3
 8016bfe:	b29b      	uxth	r3, r3
 8016c00:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8016c04:	b29b      	uxth	r3, r3
 8016c06:	8b7a      	ldrh	r2, [r7, #26]
 8016c08:	4293      	cmp	r3, r2
 8016c0a:	bf28      	it	cs
 8016c0c:	4613      	movcs	r3, r2
 8016c0e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8016c10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016c12:	3310      	adds	r3, #16
 8016c14:	693a      	ldr	r2, [r7, #16]
 8016c16:	4413      	add	r3, r2
 8016c18:	3303      	adds	r3, #3
 8016c1a:	f023 0303 	bic.w	r3, r3, #3
 8016c1e:	4618      	mov	r0, r3
 8016c20:	89f9      	ldrh	r1, [r7, #14]
 8016c22:	8b7a      	ldrh	r2, [r7, #26]
 8016c24:	2300      	movs	r3, #0
 8016c26:	9301      	str	r3, [sp, #4]
 8016c28:	887b      	ldrh	r3, [r7, #2]
 8016c2a:	9300      	str	r3, [sp, #0]
 8016c2c:	460b      	mov	r3, r1
 8016c2e:	4601      	mov	r1, r0
 8016c30:	6938      	ldr	r0, [r7, #16]
 8016c32:	f7ff ff77 	bl	8016b24 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8016c36:	693b      	ldr	r3, [r7, #16]
 8016c38:	685b      	ldr	r3, [r3, #4]
 8016c3a:	f003 0303 	and.w	r3, r3, #3
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	d006      	beq.n	8016c50 <pbuf_alloc+0xd8>
 8016c42:	4b42      	ldr	r3, [pc, #264]	; (8016d4c <pbuf_alloc+0x1d4>)
 8016c44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016c48:	4941      	ldr	r1, [pc, #260]	; (8016d50 <pbuf_alloc+0x1d8>)
 8016c4a:	4842      	ldr	r0, [pc, #264]	; (8016d54 <pbuf_alloc+0x1dc>)
 8016c4c:	f00a f90e 	bl	8020e6c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8016c50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016c52:	3303      	adds	r3, #3
 8016c54:	f023 0303 	bic.w	r3, r3, #3
 8016c58:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8016c5c:	d106      	bne.n	8016c6c <pbuf_alloc+0xf4>
 8016c5e:	4b3b      	ldr	r3, [pc, #236]	; (8016d4c <pbuf_alloc+0x1d4>)
 8016c60:	f44f 7281 	mov.w	r2, #258	; 0x102
 8016c64:	493c      	ldr	r1, [pc, #240]	; (8016d58 <pbuf_alloc+0x1e0>)
 8016c66:	483b      	ldr	r0, [pc, #236]	; (8016d54 <pbuf_alloc+0x1dc>)
 8016c68:	f00a f900 	bl	8020e6c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8016c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d102      	bne.n	8016c78 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8016c72:	693b      	ldr	r3, [r7, #16]
 8016c74:	627b      	str	r3, [r7, #36]	; 0x24
 8016c76:	e002      	b.n	8016c7e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8016c78:	69fb      	ldr	r3, [r7, #28]
 8016c7a:	693a      	ldr	r2, [r7, #16]
 8016c7c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8016c7e:	693b      	ldr	r3, [r7, #16]
 8016c80:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8016c82:	8b7a      	ldrh	r2, [r7, #26]
 8016c84:	89fb      	ldrh	r3, [r7, #14]
 8016c86:	1ad3      	subs	r3, r2, r3
 8016c88:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8016c8a:	2300      	movs	r3, #0
 8016c8c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8016c8e:	8b7b      	ldrh	r3, [r7, #26]
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d19e      	bne.n	8016bd2 <pbuf_alloc+0x5a>
      break;
 8016c94:	e055      	b.n	8016d42 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8016c96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016c98:	3303      	adds	r3, #3
 8016c9a:	b29b      	uxth	r3, r3
 8016c9c:	f023 0303 	bic.w	r3, r3, #3
 8016ca0:	b29a      	uxth	r2, r3
 8016ca2:	88bb      	ldrh	r3, [r7, #4]
 8016ca4:	3303      	adds	r3, #3
 8016ca6:	b29b      	uxth	r3, r3
 8016ca8:	f023 0303 	bic.w	r3, r3, #3
 8016cac:	b29b      	uxth	r3, r3
 8016cae:	4413      	add	r3, r2
 8016cb0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8016cb2:	8b3b      	ldrh	r3, [r7, #24]
 8016cb4:	3310      	adds	r3, #16
 8016cb6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8016cb8:	8b3a      	ldrh	r2, [r7, #24]
 8016cba:	88bb      	ldrh	r3, [r7, #4]
 8016cbc:	3303      	adds	r3, #3
 8016cbe:	f023 0303 	bic.w	r3, r3, #3
 8016cc2:	429a      	cmp	r2, r3
 8016cc4:	d306      	bcc.n	8016cd4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8016cc6:	8afa      	ldrh	r2, [r7, #22]
 8016cc8:	88bb      	ldrh	r3, [r7, #4]
 8016cca:	3303      	adds	r3, #3
 8016ccc:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8016cd0:	429a      	cmp	r2, r3
 8016cd2:	d201      	bcs.n	8016cd8 <pbuf_alloc+0x160>
        return NULL;
 8016cd4:	2300      	movs	r3, #0
 8016cd6:	e035      	b.n	8016d44 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8016cd8:	8afb      	ldrh	r3, [r7, #22]
 8016cda:	4618      	mov	r0, r3
 8016cdc:	f7ff f9ba 	bl	8016054 <mem_malloc>
 8016ce0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8016ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	d101      	bne.n	8016cec <pbuf_alloc+0x174>
        return NULL;
 8016ce8:	2300      	movs	r3, #0
 8016cea:	e02b      	b.n	8016d44 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8016cec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016cee:	3310      	adds	r3, #16
 8016cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016cf2:	4413      	add	r3, r2
 8016cf4:	3303      	adds	r3, #3
 8016cf6:	f023 0303 	bic.w	r3, r3, #3
 8016cfa:	4618      	mov	r0, r3
 8016cfc:	88b9      	ldrh	r1, [r7, #4]
 8016cfe:	88ba      	ldrh	r2, [r7, #4]
 8016d00:	2300      	movs	r3, #0
 8016d02:	9301      	str	r3, [sp, #4]
 8016d04:	887b      	ldrh	r3, [r7, #2]
 8016d06:	9300      	str	r3, [sp, #0]
 8016d08:	460b      	mov	r3, r1
 8016d0a:	4601      	mov	r1, r0
 8016d0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016d0e:	f7ff ff09 	bl	8016b24 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8016d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d14:	685b      	ldr	r3, [r3, #4]
 8016d16:	f003 0303 	and.w	r3, r3, #3
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d010      	beq.n	8016d40 <pbuf_alloc+0x1c8>
 8016d1e:	4b0b      	ldr	r3, [pc, #44]	; (8016d4c <pbuf_alloc+0x1d4>)
 8016d20:	f44f 7291 	mov.w	r2, #290	; 0x122
 8016d24:	490d      	ldr	r1, [pc, #52]	; (8016d5c <pbuf_alloc+0x1e4>)
 8016d26:	480b      	ldr	r0, [pc, #44]	; (8016d54 <pbuf_alloc+0x1dc>)
 8016d28:	f00a f8a0 	bl	8020e6c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8016d2c:	e008      	b.n	8016d40 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8016d2e:	4b07      	ldr	r3, [pc, #28]	; (8016d4c <pbuf_alloc+0x1d4>)
 8016d30:	f240 1227 	movw	r2, #295	; 0x127
 8016d34:	490a      	ldr	r1, [pc, #40]	; (8016d60 <pbuf_alloc+0x1e8>)
 8016d36:	4807      	ldr	r0, [pc, #28]	; (8016d54 <pbuf_alloc+0x1dc>)
 8016d38:	f00a f898 	bl	8020e6c <iprintf>
      return NULL;
 8016d3c:	2300      	movs	r3, #0
 8016d3e:	e001      	b.n	8016d44 <pbuf_alloc+0x1cc>
      break;
 8016d40:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8016d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8016d44:	4618      	mov	r0, r3
 8016d46:	3728      	adds	r7, #40	; 0x28
 8016d48:	46bd      	mov	sp, r7
 8016d4a:	bd80      	pop	{r7, pc}
 8016d4c:	08026c28 	.word	0x08026c28
 8016d50:	08026c84 	.word	0x08026c84
 8016d54:	08026cb4 	.word	0x08026cb4
 8016d58:	08026cdc 	.word	0x08026cdc
 8016d5c:	08026d10 	.word	0x08026d10
 8016d60:	08026d3c 	.word	0x08026d3c

08016d64 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8016d64:	b580      	push	{r7, lr}
 8016d66:	b086      	sub	sp, #24
 8016d68:	af02      	add	r7, sp, #8
 8016d6a:	6078      	str	r0, [r7, #4]
 8016d6c:	460b      	mov	r3, r1
 8016d6e:	807b      	strh	r3, [r7, #2]
 8016d70:	4613      	mov	r3, r2
 8016d72:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8016d74:	883b      	ldrh	r3, [r7, #0]
 8016d76:	2b41      	cmp	r3, #65	; 0x41
 8016d78:	d009      	beq.n	8016d8e <pbuf_alloc_reference+0x2a>
 8016d7a:	883b      	ldrh	r3, [r7, #0]
 8016d7c:	2b01      	cmp	r3, #1
 8016d7e:	d006      	beq.n	8016d8e <pbuf_alloc_reference+0x2a>
 8016d80:	4b0f      	ldr	r3, [pc, #60]	; (8016dc0 <pbuf_alloc_reference+0x5c>)
 8016d82:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8016d86:	490f      	ldr	r1, [pc, #60]	; (8016dc4 <pbuf_alloc_reference+0x60>)
 8016d88:	480f      	ldr	r0, [pc, #60]	; (8016dc8 <pbuf_alloc_reference+0x64>)
 8016d8a:	f00a f86f 	bl	8020e6c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8016d8e:	2007      	movs	r0, #7
 8016d90:	f7ff faf0 	bl	8016374 <memp_malloc>
 8016d94:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8016d96:	68fb      	ldr	r3, [r7, #12]
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	d101      	bne.n	8016da0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8016d9c:	2300      	movs	r3, #0
 8016d9e:	e00b      	b.n	8016db8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8016da0:	8879      	ldrh	r1, [r7, #2]
 8016da2:	887a      	ldrh	r2, [r7, #2]
 8016da4:	2300      	movs	r3, #0
 8016da6:	9301      	str	r3, [sp, #4]
 8016da8:	883b      	ldrh	r3, [r7, #0]
 8016daa:	9300      	str	r3, [sp, #0]
 8016dac:	460b      	mov	r3, r1
 8016dae:	6879      	ldr	r1, [r7, #4]
 8016db0:	68f8      	ldr	r0, [r7, #12]
 8016db2:	f7ff feb7 	bl	8016b24 <pbuf_init_alloced_pbuf>
  return p;
 8016db6:	68fb      	ldr	r3, [r7, #12]
}
 8016db8:	4618      	mov	r0, r3
 8016dba:	3710      	adds	r7, #16
 8016dbc:	46bd      	mov	sp, r7
 8016dbe:	bd80      	pop	{r7, pc}
 8016dc0:	08026c28 	.word	0x08026c28
 8016dc4:	08026d58 	.word	0x08026d58
 8016dc8:	08026cb4 	.word	0x08026cb4

08016dcc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8016dcc:	b580      	push	{r7, lr}
 8016dce:	b088      	sub	sp, #32
 8016dd0:	af02      	add	r7, sp, #8
 8016dd2:	607b      	str	r3, [r7, #4]
 8016dd4:	4603      	mov	r3, r0
 8016dd6:	73fb      	strb	r3, [r7, #15]
 8016dd8:	460b      	mov	r3, r1
 8016dda:	81bb      	strh	r3, [r7, #12]
 8016ddc:	4613      	mov	r3, r2
 8016dde:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8016de0:	7bfb      	ldrb	r3, [r7, #15]
 8016de2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8016de4:	8a7b      	ldrh	r3, [r7, #18]
 8016de6:	3303      	adds	r3, #3
 8016de8:	f023 0203 	bic.w	r2, r3, #3
 8016dec:	89bb      	ldrh	r3, [r7, #12]
 8016dee:	441a      	add	r2, r3
 8016df0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016df2:	429a      	cmp	r2, r3
 8016df4:	d901      	bls.n	8016dfa <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8016df6:	2300      	movs	r3, #0
 8016df8:	e018      	b.n	8016e2c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8016dfa:	6a3b      	ldr	r3, [r7, #32]
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d007      	beq.n	8016e10 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8016e00:	8a7b      	ldrh	r3, [r7, #18]
 8016e02:	3303      	adds	r3, #3
 8016e04:	f023 0303 	bic.w	r3, r3, #3
 8016e08:	6a3a      	ldr	r2, [r7, #32]
 8016e0a:	4413      	add	r3, r2
 8016e0c:	617b      	str	r3, [r7, #20]
 8016e0e:	e001      	b.n	8016e14 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8016e10:	2300      	movs	r3, #0
 8016e12:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8016e14:	6878      	ldr	r0, [r7, #4]
 8016e16:	89b9      	ldrh	r1, [r7, #12]
 8016e18:	89ba      	ldrh	r2, [r7, #12]
 8016e1a:	2302      	movs	r3, #2
 8016e1c:	9301      	str	r3, [sp, #4]
 8016e1e:	897b      	ldrh	r3, [r7, #10]
 8016e20:	9300      	str	r3, [sp, #0]
 8016e22:	460b      	mov	r3, r1
 8016e24:	6979      	ldr	r1, [r7, #20]
 8016e26:	f7ff fe7d 	bl	8016b24 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8016e2a:	687b      	ldr	r3, [r7, #4]
}
 8016e2c:	4618      	mov	r0, r3
 8016e2e:	3718      	adds	r7, #24
 8016e30:	46bd      	mov	sp, r7
 8016e32:	bd80      	pop	{r7, pc}

08016e34 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8016e34:	b580      	push	{r7, lr}
 8016e36:	b084      	sub	sp, #16
 8016e38:	af00      	add	r7, sp, #0
 8016e3a:	6078      	str	r0, [r7, #4]
 8016e3c:	460b      	mov	r3, r1
 8016e3e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d106      	bne.n	8016e54 <pbuf_realloc+0x20>
 8016e46:	4b3a      	ldr	r3, [pc, #232]	; (8016f30 <pbuf_realloc+0xfc>)
 8016e48:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8016e4c:	4939      	ldr	r1, [pc, #228]	; (8016f34 <pbuf_realloc+0x100>)
 8016e4e:	483a      	ldr	r0, [pc, #232]	; (8016f38 <pbuf_realloc+0x104>)
 8016e50:	f00a f80c 	bl	8020e6c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	891b      	ldrh	r3, [r3, #8]
 8016e58:	887a      	ldrh	r2, [r7, #2]
 8016e5a:	429a      	cmp	r2, r3
 8016e5c:	d263      	bcs.n	8016f26 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8016e5e:	687b      	ldr	r3, [r7, #4]
 8016e60:	891a      	ldrh	r2, [r3, #8]
 8016e62:	887b      	ldrh	r3, [r7, #2]
 8016e64:	1ad3      	subs	r3, r2, r3
 8016e66:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8016e68:	887b      	ldrh	r3, [r7, #2]
 8016e6a:	817b      	strh	r3, [r7, #10]
  q = p;
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8016e70:	e018      	b.n	8016ea4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8016e72:	68fb      	ldr	r3, [r7, #12]
 8016e74:	895b      	ldrh	r3, [r3, #10]
 8016e76:	897a      	ldrh	r2, [r7, #10]
 8016e78:	1ad3      	subs	r3, r2, r3
 8016e7a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8016e7c:	68fb      	ldr	r3, [r7, #12]
 8016e7e:	891a      	ldrh	r2, [r3, #8]
 8016e80:	893b      	ldrh	r3, [r7, #8]
 8016e82:	1ad3      	subs	r3, r2, r3
 8016e84:	b29a      	uxth	r2, r3
 8016e86:	68fb      	ldr	r3, [r7, #12]
 8016e88:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8016e8a:	68fb      	ldr	r3, [r7, #12]
 8016e8c:	681b      	ldr	r3, [r3, #0]
 8016e8e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8016e90:	68fb      	ldr	r3, [r7, #12]
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	d106      	bne.n	8016ea4 <pbuf_realloc+0x70>
 8016e96:	4b26      	ldr	r3, [pc, #152]	; (8016f30 <pbuf_realloc+0xfc>)
 8016e98:	f240 12af 	movw	r2, #431	; 0x1af
 8016e9c:	4927      	ldr	r1, [pc, #156]	; (8016f3c <pbuf_realloc+0x108>)
 8016e9e:	4826      	ldr	r0, [pc, #152]	; (8016f38 <pbuf_realloc+0x104>)
 8016ea0:	f009 ffe4 	bl	8020e6c <iprintf>
  while (rem_len > q->len) {
 8016ea4:	68fb      	ldr	r3, [r7, #12]
 8016ea6:	895b      	ldrh	r3, [r3, #10]
 8016ea8:	897a      	ldrh	r2, [r7, #10]
 8016eaa:	429a      	cmp	r2, r3
 8016eac:	d8e1      	bhi.n	8016e72 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8016eae:	68fb      	ldr	r3, [r7, #12]
 8016eb0:	7b1b      	ldrb	r3, [r3, #12]
 8016eb2:	f003 030f 	and.w	r3, r3, #15
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d121      	bne.n	8016efe <pbuf_realloc+0xca>
 8016eba:	68fb      	ldr	r3, [r7, #12]
 8016ebc:	895b      	ldrh	r3, [r3, #10]
 8016ebe:	897a      	ldrh	r2, [r7, #10]
 8016ec0:	429a      	cmp	r2, r3
 8016ec2:	d01c      	beq.n	8016efe <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8016ec4:	68fb      	ldr	r3, [r7, #12]
 8016ec6:	7b5b      	ldrb	r3, [r3, #13]
 8016ec8:	f003 0302 	and.w	r3, r3, #2
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	d116      	bne.n	8016efe <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8016ed0:	68fb      	ldr	r3, [r7, #12]
 8016ed2:	685a      	ldr	r2, [r3, #4]
 8016ed4:	68fb      	ldr	r3, [r7, #12]
 8016ed6:	1ad3      	subs	r3, r2, r3
 8016ed8:	b29a      	uxth	r2, r3
 8016eda:	897b      	ldrh	r3, [r7, #10]
 8016edc:	4413      	add	r3, r2
 8016ede:	b29b      	uxth	r3, r3
 8016ee0:	4619      	mov	r1, r3
 8016ee2:	68f8      	ldr	r0, [r7, #12]
 8016ee4:	f7fe ffba 	bl	8015e5c <mem_trim>
 8016ee8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8016eea:	68fb      	ldr	r3, [r7, #12]
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	d106      	bne.n	8016efe <pbuf_realloc+0xca>
 8016ef0:	4b0f      	ldr	r3, [pc, #60]	; (8016f30 <pbuf_realloc+0xfc>)
 8016ef2:	f240 12bd 	movw	r2, #445	; 0x1bd
 8016ef6:	4912      	ldr	r1, [pc, #72]	; (8016f40 <pbuf_realloc+0x10c>)
 8016ef8:	480f      	ldr	r0, [pc, #60]	; (8016f38 <pbuf_realloc+0x104>)
 8016efa:	f009 ffb7 	bl	8020e6c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8016efe:	68fb      	ldr	r3, [r7, #12]
 8016f00:	897a      	ldrh	r2, [r7, #10]
 8016f02:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8016f04:	68fb      	ldr	r3, [r7, #12]
 8016f06:	895a      	ldrh	r2, [r3, #10]
 8016f08:	68fb      	ldr	r3, [r7, #12]
 8016f0a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8016f0c:	68fb      	ldr	r3, [r7, #12]
 8016f0e:	681b      	ldr	r3, [r3, #0]
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	d004      	beq.n	8016f1e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8016f14:	68fb      	ldr	r3, [r7, #12]
 8016f16:	681b      	ldr	r3, [r3, #0]
 8016f18:	4618      	mov	r0, r3
 8016f1a:	f000 f911 	bl	8017140 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8016f1e:	68fb      	ldr	r3, [r7, #12]
 8016f20:	2200      	movs	r2, #0
 8016f22:	601a      	str	r2, [r3, #0]
 8016f24:	e000      	b.n	8016f28 <pbuf_realloc+0xf4>
    return;
 8016f26:	bf00      	nop

}
 8016f28:	3710      	adds	r7, #16
 8016f2a:	46bd      	mov	sp, r7
 8016f2c:	bd80      	pop	{r7, pc}
 8016f2e:	bf00      	nop
 8016f30:	08026c28 	.word	0x08026c28
 8016f34:	08026d6c 	.word	0x08026d6c
 8016f38:	08026cb4 	.word	0x08026cb4
 8016f3c:	08026d84 	.word	0x08026d84
 8016f40:	08026d9c 	.word	0x08026d9c

08016f44 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8016f44:	b580      	push	{r7, lr}
 8016f46:	b086      	sub	sp, #24
 8016f48:	af00      	add	r7, sp, #0
 8016f4a:	60f8      	str	r0, [r7, #12]
 8016f4c:	60b9      	str	r1, [r7, #8]
 8016f4e:	4613      	mov	r3, r2
 8016f50:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8016f52:	68fb      	ldr	r3, [r7, #12]
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	d106      	bne.n	8016f66 <pbuf_add_header_impl+0x22>
 8016f58:	4b2b      	ldr	r3, [pc, #172]	; (8017008 <pbuf_add_header_impl+0xc4>)
 8016f5a:	f240 12df 	movw	r2, #479	; 0x1df
 8016f5e:	492b      	ldr	r1, [pc, #172]	; (801700c <pbuf_add_header_impl+0xc8>)
 8016f60:	482b      	ldr	r0, [pc, #172]	; (8017010 <pbuf_add_header_impl+0xcc>)
 8016f62:	f009 ff83 	bl	8020e6c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8016f66:	68fb      	ldr	r3, [r7, #12]
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	d003      	beq.n	8016f74 <pbuf_add_header_impl+0x30>
 8016f6c:	68bb      	ldr	r3, [r7, #8]
 8016f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016f72:	d301      	bcc.n	8016f78 <pbuf_add_header_impl+0x34>
    return 1;
 8016f74:	2301      	movs	r3, #1
 8016f76:	e043      	b.n	8017000 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8016f78:	68bb      	ldr	r3, [r7, #8]
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d101      	bne.n	8016f82 <pbuf_add_header_impl+0x3e>
    return 0;
 8016f7e:	2300      	movs	r3, #0
 8016f80:	e03e      	b.n	8017000 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8016f82:	68bb      	ldr	r3, [r7, #8]
 8016f84:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8016f86:	68fb      	ldr	r3, [r7, #12]
 8016f88:	891a      	ldrh	r2, [r3, #8]
 8016f8a:	8a7b      	ldrh	r3, [r7, #18]
 8016f8c:	4413      	add	r3, r2
 8016f8e:	b29b      	uxth	r3, r3
 8016f90:	8a7a      	ldrh	r2, [r7, #18]
 8016f92:	429a      	cmp	r2, r3
 8016f94:	d901      	bls.n	8016f9a <pbuf_add_header_impl+0x56>
    return 1;
 8016f96:	2301      	movs	r3, #1
 8016f98:	e032      	b.n	8017000 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8016f9a:	68fb      	ldr	r3, [r7, #12]
 8016f9c:	7b1b      	ldrb	r3, [r3, #12]
 8016f9e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8016fa0:	8a3b      	ldrh	r3, [r7, #16]
 8016fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d00c      	beq.n	8016fc4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8016faa:	68fb      	ldr	r3, [r7, #12]
 8016fac:	685a      	ldr	r2, [r3, #4]
 8016fae:	68bb      	ldr	r3, [r7, #8]
 8016fb0:	425b      	negs	r3, r3
 8016fb2:	4413      	add	r3, r2
 8016fb4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8016fb6:	68fb      	ldr	r3, [r7, #12]
 8016fb8:	3310      	adds	r3, #16
 8016fba:	697a      	ldr	r2, [r7, #20]
 8016fbc:	429a      	cmp	r2, r3
 8016fbe:	d20d      	bcs.n	8016fdc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8016fc0:	2301      	movs	r3, #1
 8016fc2:	e01d      	b.n	8017000 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8016fc4:	79fb      	ldrb	r3, [r7, #7]
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d006      	beq.n	8016fd8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8016fca:	68fb      	ldr	r3, [r7, #12]
 8016fcc:	685a      	ldr	r2, [r3, #4]
 8016fce:	68bb      	ldr	r3, [r7, #8]
 8016fd0:	425b      	negs	r3, r3
 8016fd2:	4413      	add	r3, r2
 8016fd4:	617b      	str	r3, [r7, #20]
 8016fd6:	e001      	b.n	8016fdc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8016fd8:	2301      	movs	r3, #1
 8016fda:	e011      	b.n	8017000 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8016fdc:	68fb      	ldr	r3, [r7, #12]
 8016fde:	697a      	ldr	r2, [r7, #20]
 8016fe0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8016fe2:	68fb      	ldr	r3, [r7, #12]
 8016fe4:	895a      	ldrh	r2, [r3, #10]
 8016fe6:	8a7b      	ldrh	r3, [r7, #18]
 8016fe8:	4413      	add	r3, r2
 8016fea:	b29a      	uxth	r2, r3
 8016fec:	68fb      	ldr	r3, [r7, #12]
 8016fee:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8016ff0:	68fb      	ldr	r3, [r7, #12]
 8016ff2:	891a      	ldrh	r2, [r3, #8]
 8016ff4:	8a7b      	ldrh	r3, [r7, #18]
 8016ff6:	4413      	add	r3, r2
 8016ff8:	b29a      	uxth	r2, r3
 8016ffa:	68fb      	ldr	r3, [r7, #12]
 8016ffc:	811a      	strh	r2, [r3, #8]


  return 0;
 8016ffe:	2300      	movs	r3, #0
}
 8017000:	4618      	mov	r0, r3
 8017002:	3718      	adds	r7, #24
 8017004:	46bd      	mov	sp, r7
 8017006:	bd80      	pop	{r7, pc}
 8017008:	08026c28 	.word	0x08026c28
 801700c:	08026db8 	.word	0x08026db8
 8017010:	08026cb4 	.word	0x08026cb4

08017014 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8017014:	b580      	push	{r7, lr}
 8017016:	b082      	sub	sp, #8
 8017018:	af00      	add	r7, sp, #0
 801701a:	6078      	str	r0, [r7, #4]
 801701c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801701e:	2200      	movs	r2, #0
 8017020:	6839      	ldr	r1, [r7, #0]
 8017022:	6878      	ldr	r0, [r7, #4]
 8017024:	f7ff ff8e 	bl	8016f44 <pbuf_add_header_impl>
 8017028:	4603      	mov	r3, r0
}
 801702a:	4618      	mov	r0, r3
 801702c:	3708      	adds	r7, #8
 801702e:	46bd      	mov	sp, r7
 8017030:	bd80      	pop	{r7, pc}
	...

08017034 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8017034:	b580      	push	{r7, lr}
 8017036:	b084      	sub	sp, #16
 8017038:	af00      	add	r7, sp, #0
 801703a:	6078      	str	r0, [r7, #4]
 801703c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	2b00      	cmp	r3, #0
 8017042:	d106      	bne.n	8017052 <pbuf_remove_header+0x1e>
 8017044:	4b20      	ldr	r3, [pc, #128]	; (80170c8 <pbuf_remove_header+0x94>)
 8017046:	f240 224b 	movw	r2, #587	; 0x24b
 801704a:	4920      	ldr	r1, [pc, #128]	; (80170cc <pbuf_remove_header+0x98>)
 801704c:	4820      	ldr	r0, [pc, #128]	; (80170d0 <pbuf_remove_header+0x9c>)
 801704e:	f009 ff0d 	bl	8020e6c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	2b00      	cmp	r3, #0
 8017056:	d003      	beq.n	8017060 <pbuf_remove_header+0x2c>
 8017058:	683b      	ldr	r3, [r7, #0]
 801705a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801705e:	d301      	bcc.n	8017064 <pbuf_remove_header+0x30>
    return 1;
 8017060:	2301      	movs	r3, #1
 8017062:	e02c      	b.n	80170be <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8017064:	683b      	ldr	r3, [r7, #0]
 8017066:	2b00      	cmp	r3, #0
 8017068:	d101      	bne.n	801706e <pbuf_remove_header+0x3a>
    return 0;
 801706a:	2300      	movs	r3, #0
 801706c:	e027      	b.n	80170be <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801706e:	683b      	ldr	r3, [r7, #0]
 8017070:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	895b      	ldrh	r3, [r3, #10]
 8017076:	89fa      	ldrh	r2, [r7, #14]
 8017078:	429a      	cmp	r2, r3
 801707a:	d908      	bls.n	801708e <pbuf_remove_header+0x5a>
 801707c:	4b12      	ldr	r3, [pc, #72]	; (80170c8 <pbuf_remove_header+0x94>)
 801707e:	f240 2255 	movw	r2, #597	; 0x255
 8017082:	4914      	ldr	r1, [pc, #80]	; (80170d4 <pbuf_remove_header+0xa0>)
 8017084:	4812      	ldr	r0, [pc, #72]	; (80170d0 <pbuf_remove_header+0x9c>)
 8017086:	f009 fef1 	bl	8020e6c <iprintf>
 801708a:	2301      	movs	r3, #1
 801708c:	e017      	b.n	80170be <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	685b      	ldr	r3, [r3, #4]
 8017092:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	685a      	ldr	r2, [r3, #4]
 8017098:	683b      	ldr	r3, [r7, #0]
 801709a:	441a      	add	r2, r3
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	895a      	ldrh	r2, [r3, #10]
 80170a4:	89fb      	ldrh	r3, [r7, #14]
 80170a6:	1ad3      	subs	r3, r2, r3
 80170a8:	b29a      	uxth	r2, r3
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	891a      	ldrh	r2, [r3, #8]
 80170b2:	89fb      	ldrh	r3, [r7, #14]
 80170b4:	1ad3      	subs	r3, r2, r3
 80170b6:	b29a      	uxth	r2, r3
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80170bc:	2300      	movs	r3, #0
}
 80170be:	4618      	mov	r0, r3
 80170c0:	3710      	adds	r7, #16
 80170c2:	46bd      	mov	sp, r7
 80170c4:	bd80      	pop	{r7, pc}
 80170c6:	bf00      	nop
 80170c8:	08026c28 	.word	0x08026c28
 80170cc:	08026db8 	.word	0x08026db8
 80170d0:	08026cb4 	.word	0x08026cb4
 80170d4:	08026dc4 	.word	0x08026dc4

080170d8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80170d8:	b580      	push	{r7, lr}
 80170da:	b082      	sub	sp, #8
 80170dc:	af00      	add	r7, sp, #0
 80170de:	6078      	str	r0, [r7, #4]
 80170e0:	460b      	mov	r3, r1
 80170e2:	807b      	strh	r3, [r7, #2]
 80170e4:	4613      	mov	r3, r2
 80170e6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80170e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	da08      	bge.n	8017102 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80170f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80170f4:	425b      	negs	r3, r3
 80170f6:	4619      	mov	r1, r3
 80170f8:	6878      	ldr	r0, [r7, #4]
 80170fa:	f7ff ff9b 	bl	8017034 <pbuf_remove_header>
 80170fe:	4603      	mov	r3, r0
 8017100:	e007      	b.n	8017112 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8017102:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017106:	787a      	ldrb	r2, [r7, #1]
 8017108:	4619      	mov	r1, r3
 801710a:	6878      	ldr	r0, [r7, #4]
 801710c:	f7ff ff1a 	bl	8016f44 <pbuf_add_header_impl>
 8017110:	4603      	mov	r3, r0
  }
}
 8017112:	4618      	mov	r0, r3
 8017114:	3708      	adds	r7, #8
 8017116:	46bd      	mov	sp, r7
 8017118:	bd80      	pop	{r7, pc}

0801711a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801711a:	b580      	push	{r7, lr}
 801711c:	b082      	sub	sp, #8
 801711e:	af00      	add	r7, sp, #0
 8017120:	6078      	str	r0, [r7, #4]
 8017122:	460b      	mov	r3, r1
 8017124:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8017126:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801712a:	2201      	movs	r2, #1
 801712c:	4619      	mov	r1, r3
 801712e:	6878      	ldr	r0, [r7, #4]
 8017130:	f7ff ffd2 	bl	80170d8 <pbuf_header_impl>
 8017134:	4603      	mov	r3, r0
}
 8017136:	4618      	mov	r0, r3
 8017138:	3708      	adds	r7, #8
 801713a:	46bd      	mov	sp, r7
 801713c:	bd80      	pop	{r7, pc}
	...

08017140 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8017140:	b580      	push	{r7, lr}
 8017142:	b086      	sub	sp, #24
 8017144:	af00      	add	r7, sp, #0
 8017146:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	2b00      	cmp	r3, #0
 801714c:	d10b      	bne.n	8017166 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	2b00      	cmp	r3, #0
 8017152:	d106      	bne.n	8017162 <pbuf_free+0x22>
 8017154:	4b38      	ldr	r3, [pc, #224]	; (8017238 <pbuf_free+0xf8>)
 8017156:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801715a:	4938      	ldr	r1, [pc, #224]	; (801723c <pbuf_free+0xfc>)
 801715c:	4838      	ldr	r0, [pc, #224]	; (8017240 <pbuf_free+0x100>)
 801715e:	f009 fe85 	bl	8020e6c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8017162:	2300      	movs	r3, #0
 8017164:	e063      	b.n	801722e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8017166:	2300      	movs	r3, #0
 8017168:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801716a:	e05c      	b.n	8017226 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	7b9b      	ldrb	r3, [r3, #14]
 8017170:	2b00      	cmp	r3, #0
 8017172:	d106      	bne.n	8017182 <pbuf_free+0x42>
 8017174:	4b30      	ldr	r3, [pc, #192]	; (8017238 <pbuf_free+0xf8>)
 8017176:	f240 22f1 	movw	r2, #753	; 0x2f1
 801717a:	4932      	ldr	r1, [pc, #200]	; (8017244 <pbuf_free+0x104>)
 801717c:	4830      	ldr	r0, [pc, #192]	; (8017240 <pbuf_free+0x100>)
 801717e:	f009 fe75 	bl	8020e6c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	7b9b      	ldrb	r3, [r3, #14]
 8017186:	3b01      	subs	r3, #1
 8017188:	b2da      	uxtb	r2, r3
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	739a      	strb	r2, [r3, #14]
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	7b9b      	ldrb	r3, [r3, #14]
 8017192:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8017194:	7dbb      	ldrb	r3, [r7, #22]
 8017196:	2b00      	cmp	r3, #0
 8017198:	d143      	bne.n	8017222 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	681b      	ldr	r3, [r3, #0]
 801719e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	7b1b      	ldrb	r3, [r3, #12]
 80171a4:	f003 030f 	and.w	r3, r3, #15
 80171a8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	7b5b      	ldrb	r3, [r3, #13]
 80171ae:	f003 0302 	and.w	r3, r3, #2
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d011      	beq.n	80171da <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80171ba:	68bb      	ldr	r3, [r7, #8]
 80171bc:	691b      	ldr	r3, [r3, #16]
 80171be:	2b00      	cmp	r3, #0
 80171c0:	d106      	bne.n	80171d0 <pbuf_free+0x90>
 80171c2:	4b1d      	ldr	r3, [pc, #116]	; (8017238 <pbuf_free+0xf8>)
 80171c4:	f240 22ff 	movw	r2, #767	; 0x2ff
 80171c8:	491f      	ldr	r1, [pc, #124]	; (8017248 <pbuf_free+0x108>)
 80171ca:	481d      	ldr	r0, [pc, #116]	; (8017240 <pbuf_free+0x100>)
 80171cc:	f009 fe4e 	bl	8020e6c <iprintf>
        pc->custom_free_function(p);
 80171d0:	68bb      	ldr	r3, [r7, #8]
 80171d2:	691b      	ldr	r3, [r3, #16]
 80171d4:	6878      	ldr	r0, [r7, #4]
 80171d6:	4798      	blx	r3
 80171d8:	e01d      	b.n	8017216 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80171da:	7bfb      	ldrb	r3, [r7, #15]
 80171dc:	2b02      	cmp	r3, #2
 80171de:	d104      	bne.n	80171ea <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80171e0:	6879      	ldr	r1, [r7, #4]
 80171e2:	2008      	movs	r0, #8
 80171e4:	f7ff f936 	bl	8016454 <memp_free>
 80171e8:	e015      	b.n	8017216 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80171ea:	7bfb      	ldrb	r3, [r7, #15]
 80171ec:	2b01      	cmp	r3, #1
 80171ee:	d104      	bne.n	80171fa <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80171f0:	6879      	ldr	r1, [r7, #4]
 80171f2:	2007      	movs	r0, #7
 80171f4:	f7ff f92e 	bl	8016454 <memp_free>
 80171f8:	e00d      	b.n	8017216 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80171fa:	7bfb      	ldrb	r3, [r7, #15]
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d103      	bne.n	8017208 <pbuf_free+0xc8>
          mem_free(p);
 8017200:	6878      	ldr	r0, [r7, #4]
 8017202:	f7fe fdc1 	bl	8015d88 <mem_free>
 8017206:	e006      	b.n	8017216 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8017208:	4b0b      	ldr	r3, [pc, #44]	; (8017238 <pbuf_free+0xf8>)
 801720a:	f240 320f 	movw	r2, #783	; 0x30f
 801720e:	490f      	ldr	r1, [pc, #60]	; (801724c <pbuf_free+0x10c>)
 8017210:	480b      	ldr	r0, [pc, #44]	; (8017240 <pbuf_free+0x100>)
 8017212:	f009 fe2b 	bl	8020e6c <iprintf>
        }
      }
      count++;
 8017216:	7dfb      	ldrb	r3, [r7, #23]
 8017218:	3301      	adds	r3, #1
 801721a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 801721c:	693b      	ldr	r3, [r7, #16]
 801721e:	607b      	str	r3, [r7, #4]
 8017220:	e001      	b.n	8017226 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8017222:	2300      	movs	r3, #0
 8017224:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	2b00      	cmp	r3, #0
 801722a:	d19f      	bne.n	801716c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801722c:	7dfb      	ldrb	r3, [r7, #23]
}
 801722e:	4618      	mov	r0, r3
 8017230:	3718      	adds	r7, #24
 8017232:	46bd      	mov	sp, r7
 8017234:	bd80      	pop	{r7, pc}
 8017236:	bf00      	nop
 8017238:	08026c28 	.word	0x08026c28
 801723c:	08026db8 	.word	0x08026db8
 8017240:	08026cb4 	.word	0x08026cb4
 8017244:	08026de4 	.word	0x08026de4
 8017248:	08026dfc 	.word	0x08026dfc
 801724c:	08026e20 	.word	0x08026e20

08017250 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8017250:	b480      	push	{r7}
 8017252:	b085      	sub	sp, #20
 8017254:	af00      	add	r7, sp, #0
 8017256:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8017258:	2300      	movs	r3, #0
 801725a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801725c:	e005      	b.n	801726a <pbuf_clen+0x1a>
    ++len;
 801725e:	89fb      	ldrh	r3, [r7, #14]
 8017260:	3301      	adds	r3, #1
 8017262:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	681b      	ldr	r3, [r3, #0]
 8017268:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	2b00      	cmp	r3, #0
 801726e:	d1f6      	bne.n	801725e <pbuf_clen+0xe>
  }
  return len;
 8017270:	89fb      	ldrh	r3, [r7, #14]
}
 8017272:	4618      	mov	r0, r3
 8017274:	3714      	adds	r7, #20
 8017276:	46bd      	mov	sp, r7
 8017278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801727c:	4770      	bx	lr
	...

08017280 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8017280:	b580      	push	{r7, lr}
 8017282:	b082      	sub	sp, #8
 8017284:	af00      	add	r7, sp, #0
 8017286:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	2b00      	cmp	r3, #0
 801728c:	d010      	beq.n	80172b0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	7b9b      	ldrb	r3, [r3, #14]
 8017292:	3301      	adds	r3, #1
 8017294:	b2da      	uxtb	r2, r3
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	7b9b      	ldrb	r3, [r3, #14]
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d106      	bne.n	80172b0 <pbuf_ref+0x30>
 80172a2:	4b05      	ldr	r3, [pc, #20]	; (80172b8 <pbuf_ref+0x38>)
 80172a4:	f240 3242 	movw	r2, #834	; 0x342
 80172a8:	4904      	ldr	r1, [pc, #16]	; (80172bc <pbuf_ref+0x3c>)
 80172aa:	4805      	ldr	r0, [pc, #20]	; (80172c0 <pbuf_ref+0x40>)
 80172ac:	f009 fdde 	bl	8020e6c <iprintf>
  }
}
 80172b0:	bf00      	nop
 80172b2:	3708      	adds	r7, #8
 80172b4:	46bd      	mov	sp, r7
 80172b6:	bd80      	pop	{r7, pc}
 80172b8:	08026c28 	.word	0x08026c28
 80172bc:	08026e34 	.word	0x08026e34
 80172c0:	08026cb4 	.word	0x08026cb4

080172c4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80172c4:	b580      	push	{r7, lr}
 80172c6:	b084      	sub	sp, #16
 80172c8:	af00      	add	r7, sp, #0
 80172ca:	6078      	str	r0, [r7, #4]
 80172cc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	d002      	beq.n	80172da <pbuf_cat+0x16>
 80172d4:	683b      	ldr	r3, [r7, #0]
 80172d6:	2b00      	cmp	r3, #0
 80172d8:	d107      	bne.n	80172ea <pbuf_cat+0x26>
 80172da:	4b20      	ldr	r3, [pc, #128]	; (801735c <pbuf_cat+0x98>)
 80172dc:	f240 3259 	movw	r2, #857	; 0x359
 80172e0:	491f      	ldr	r1, [pc, #124]	; (8017360 <pbuf_cat+0x9c>)
 80172e2:	4820      	ldr	r0, [pc, #128]	; (8017364 <pbuf_cat+0xa0>)
 80172e4:	f009 fdc2 	bl	8020e6c <iprintf>
 80172e8:	e034      	b.n	8017354 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	60fb      	str	r3, [r7, #12]
 80172ee:	e00a      	b.n	8017306 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80172f0:	68fb      	ldr	r3, [r7, #12]
 80172f2:	891a      	ldrh	r2, [r3, #8]
 80172f4:	683b      	ldr	r3, [r7, #0]
 80172f6:	891b      	ldrh	r3, [r3, #8]
 80172f8:	4413      	add	r3, r2
 80172fa:	b29a      	uxth	r2, r3
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8017300:	68fb      	ldr	r3, [r7, #12]
 8017302:	681b      	ldr	r3, [r3, #0]
 8017304:	60fb      	str	r3, [r7, #12]
 8017306:	68fb      	ldr	r3, [r7, #12]
 8017308:	681b      	ldr	r3, [r3, #0]
 801730a:	2b00      	cmp	r3, #0
 801730c:	d1f0      	bne.n	80172f0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801730e:	68fb      	ldr	r3, [r7, #12]
 8017310:	891a      	ldrh	r2, [r3, #8]
 8017312:	68fb      	ldr	r3, [r7, #12]
 8017314:	895b      	ldrh	r3, [r3, #10]
 8017316:	429a      	cmp	r2, r3
 8017318:	d006      	beq.n	8017328 <pbuf_cat+0x64>
 801731a:	4b10      	ldr	r3, [pc, #64]	; (801735c <pbuf_cat+0x98>)
 801731c:	f240 3262 	movw	r2, #866	; 0x362
 8017320:	4911      	ldr	r1, [pc, #68]	; (8017368 <pbuf_cat+0xa4>)
 8017322:	4810      	ldr	r0, [pc, #64]	; (8017364 <pbuf_cat+0xa0>)
 8017324:	f009 fda2 	bl	8020e6c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8017328:	68fb      	ldr	r3, [r7, #12]
 801732a:	681b      	ldr	r3, [r3, #0]
 801732c:	2b00      	cmp	r3, #0
 801732e:	d006      	beq.n	801733e <pbuf_cat+0x7a>
 8017330:	4b0a      	ldr	r3, [pc, #40]	; (801735c <pbuf_cat+0x98>)
 8017332:	f240 3263 	movw	r2, #867	; 0x363
 8017336:	490d      	ldr	r1, [pc, #52]	; (801736c <pbuf_cat+0xa8>)
 8017338:	480a      	ldr	r0, [pc, #40]	; (8017364 <pbuf_cat+0xa0>)
 801733a:	f009 fd97 	bl	8020e6c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801733e:	68fb      	ldr	r3, [r7, #12]
 8017340:	891a      	ldrh	r2, [r3, #8]
 8017342:	683b      	ldr	r3, [r7, #0]
 8017344:	891b      	ldrh	r3, [r3, #8]
 8017346:	4413      	add	r3, r2
 8017348:	b29a      	uxth	r2, r3
 801734a:	68fb      	ldr	r3, [r7, #12]
 801734c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801734e:	68fb      	ldr	r3, [r7, #12]
 8017350:	683a      	ldr	r2, [r7, #0]
 8017352:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8017354:	3710      	adds	r7, #16
 8017356:	46bd      	mov	sp, r7
 8017358:	bd80      	pop	{r7, pc}
 801735a:	bf00      	nop
 801735c:	08026c28 	.word	0x08026c28
 8017360:	08026e48 	.word	0x08026e48
 8017364:	08026cb4 	.word	0x08026cb4
 8017368:	08026e80 	.word	0x08026e80
 801736c:	08026eb0 	.word	0x08026eb0

08017370 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8017370:	b580      	push	{r7, lr}
 8017372:	b086      	sub	sp, #24
 8017374:	af00      	add	r7, sp, #0
 8017376:	6078      	str	r0, [r7, #4]
 8017378:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801737a:	2300      	movs	r3, #0
 801737c:	617b      	str	r3, [r7, #20]
 801737e:	2300      	movs	r3, #0
 8017380:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	2b00      	cmp	r3, #0
 8017386:	d008      	beq.n	801739a <pbuf_copy+0x2a>
 8017388:	683b      	ldr	r3, [r7, #0]
 801738a:	2b00      	cmp	r3, #0
 801738c:	d005      	beq.n	801739a <pbuf_copy+0x2a>
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	891a      	ldrh	r2, [r3, #8]
 8017392:	683b      	ldr	r3, [r7, #0]
 8017394:	891b      	ldrh	r3, [r3, #8]
 8017396:	429a      	cmp	r2, r3
 8017398:	d209      	bcs.n	80173ae <pbuf_copy+0x3e>
 801739a:	4b57      	ldr	r3, [pc, #348]	; (80174f8 <pbuf_copy+0x188>)
 801739c:	f240 32c9 	movw	r2, #969	; 0x3c9
 80173a0:	4956      	ldr	r1, [pc, #344]	; (80174fc <pbuf_copy+0x18c>)
 80173a2:	4857      	ldr	r0, [pc, #348]	; (8017500 <pbuf_copy+0x190>)
 80173a4:	f009 fd62 	bl	8020e6c <iprintf>
 80173a8:	f06f 030f 	mvn.w	r3, #15
 80173ac:	e09f      	b.n	80174ee <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	895b      	ldrh	r3, [r3, #10]
 80173b2:	461a      	mov	r2, r3
 80173b4:	697b      	ldr	r3, [r7, #20]
 80173b6:	1ad2      	subs	r2, r2, r3
 80173b8:	683b      	ldr	r3, [r7, #0]
 80173ba:	895b      	ldrh	r3, [r3, #10]
 80173bc:	4619      	mov	r1, r3
 80173be:	693b      	ldr	r3, [r7, #16]
 80173c0:	1acb      	subs	r3, r1, r3
 80173c2:	429a      	cmp	r2, r3
 80173c4:	d306      	bcc.n	80173d4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80173c6:	683b      	ldr	r3, [r7, #0]
 80173c8:	895b      	ldrh	r3, [r3, #10]
 80173ca:	461a      	mov	r2, r3
 80173cc:	693b      	ldr	r3, [r7, #16]
 80173ce:	1ad3      	subs	r3, r2, r3
 80173d0:	60fb      	str	r3, [r7, #12]
 80173d2:	e005      	b.n	80173e0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	895b      	ldrh	r3, [r3, #10]
 80173d8:	461a      	mov	r2, r3
 80173da:	697b      	ldr	r3, [r7, #20]
 80173dc:	1ad3      	subs	r3, r2, r3
 80173de:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	685a      	ldr	r2, [r3, #4]
 80173e4:	697b      	ldr	r3, [r7, #20]
 80173e6:	18d0      	adds	r0, r2, r3
 80173e8:	683b      	ldr	r3, [r7, #0]
 80173ea:	685a      	ldr	r2, [r3, #4]
 80173ec:	693b      	ldr	r3, [r7, #16]
 80173ee:	4413      	add	r3, r2
 80173f0:	68fa      	ldr	r2, [r7, #12]
 80173f2:	4619      	mov	r1, r3
 80173f4:	f008 fe18 	bl	8020028 <memcpy>
    offset_to += len;
 80173f8:	697a      	ldr	r2, [r7, #20]
 80173fa:	68fb      	ldr	r3, [r7, #12]
 80173fc:	4413      	add	r3, r2
 80173fe:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8017400:	693a      	ldr	r2, [r7, #16]
 8017402:	68fb      	ldr	r3, [r7, #12]
 8017404:	4413      	add	r3, r2
 8017406:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	895b      	ldrh	r3, [r3, #10]
 801740c:	461a      	mov	r2, r3
 801740e:	697b      	ldr	r3, [r7, #20]
 8017410:	4293      	cmp	r3, r2
 8017412:	d906      	bls.n	8017422 <pbuf_copy+0xb2>
 8017414:	4b38      	ldr	r3, [pc, #224]	; (80174f8 <pbuf_copy+0x188>)
 8017416:	f240 32d9 	movw	r2, #985	; 0x3d9
 801741a:	493a      	ldr	r1, [pc, #232]	; (8017504 <pbuf_copy+0x194>)
 801741c:	4838      	ldr	r0, [pc, #224]	; (8017500 <pbuf_copy+0x190>)
 801741e:	f009 fd25 	bl	8020e6c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8017422:	683b      	ldr	r3, [r7, #0]
 8017424:	895b      	ldrh	r3, [r3, #10]
 8017426:	461a      	mov	r2, r3
 8017428:	693b      	ldr	r3, [r7, #16]
 801742a:	4293      	cmp	r3, r2
 801742c:	d906      	bls.n	801743c <pbuf_copy+0xcc>
 801742e:	4b32      	ldr	r3, [pc, #200]	; (80174f8 <pbuf_copy+0x188>)
 8017430:	f240 32da 	movw	r2, #986	; 0x3da
 8017434:	4934      	ldr	r1, [pc, #208]	; (8017508 <pbuf_copy+0x198>)
 8017436:	4832      	ldr	r0, [pc, #200]	; (8017500 <pbuf_copy+0x190>)
 8017438:	f009 fd18 	bl	8020e6c <iprintf>
    if (offset_from >= p_from->len) {
 801743c:	683b      	ldr	r3, [r7, #0]
 801743e:	895b      	ldrh	r3, [r3, #10]
 8017440:	461a      	mov	r2, r3
 8017442:	693b      	ldr	r3, [r7, #16]
 8017444:	4293      	cmp	r3, r2
 8017446:	d304      	bcc.n	8017452 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8017448:	2300      	movs	r3, #0
 801744a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801744c:	683b      	ldr	r3, [r7, #0]
 801744e:	681b      	ldr	r3, [r3, #0]
 8017450:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	895b      	ldrh	r3, [r3, #10]
 8017456:	461a      	mov	r2, r3
 8017458:	697b      	ldr	r3, [r7, #20]
 801745a:	4293      	cmp	r3, r2
 801745c:	d114      	bne.n	8017488 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801745e:	2300      	movs	r3, #0
 8017460:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	681b      	ldr	r3, [r3, #0]
 8017466:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	2b00      	cmp	r3, #0
 801746c:	d10c      	bne.n	8017488 <pbuf_copy+0x118>
 801746e:	683b      	ldr	r3, [r7, #0]
 8017470:	2b00      	cmp	r3, #0
 8017472:	d009      	beq.n	8017488 <pbuf_copy+0x118>
 8017474:	4b20      	ldr	r3, [pc, #128]	; (80174f8 <pbuf_copy+0x188>)
 8017476:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801747a:	4924      	ldr	r1, [pc, #144]	; (801750c <pbuf_copy+0x19c>)
 801747c:	4820      	ldr	r0, [pc, #128]	; (8017500 <pbuf_copy+0x190>)
 801747e:	f009 fcf5 	bl	8020e6c <iprintf>
 8017482:	f06f 030f 	mvn.w	r3, #15
 8017486:	e032      	b.n	80174ee <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8017488:	683b      	ldr	r3, [r7, #0]
 801748a:	2b00      	cmp	r3, #0
 801748c:	d013      	beq.n	80174b6 <pbuf_copy+0x146>
 801748e:	683b      	ldr	r3, [r7, #0]
 8017490:	895a      	ldrh	r2, [r3, #10]
 8017492:	683b      	ldr	r3, [r7, #0]
 8017494:	891b      	ldrh	r3, [r3, #8]
 8017496:	429a      	cmp	r2, r3
 8017498:	d10d      	bne.n	80174b6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801749a:	683b      	ldr	r3, [r7, #0]
 801749c:	681b      	ldr	r3, [r3, #0]
 801749e:	2b00      	cmp	r3, #0
 80174a0:	d009      	beq.n	80174b6 <pbuf_copy+0x146>
 80174a2:	4b15      	ldr	r3, [pc, #84]	; (80174f8 <pbuf_copy+0x188>)
 80174a4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80174a8:	4919      	ldr	r1, [pc, #100]	; (8017510 <pbuf_copy+0x1a0>)
 80174aa:	4815      	ldr	r0, [pc, #84]	; (8017500 <pbuf_copy+0x190>)
 80174ac:	f009 fcde 	bl	8020e6c <iprintf>
 80174b0:	f06f 0305 	mvn.w	r3, #5
 80174b4:	e01b      	b.n	80174ee <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d013      	beq.n	80174e4 <pbuf_copy+0x174>
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	895a      	ldrh	r2, [r3, #10]
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	891b      	ldrh	r3, [r3, #8]
 80174c4:	429a      	cmp	r2, r3
 80174c6:	d10d      	bne.n	80174e4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	681b      	ldr	r3, [r3, #0]
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	d009      	beq.n	80174e4 <pbuf_copy+0x174>
 80174d0:	4b09      	ldr	r3, [pc, #36]	; (80174f8 <pbuf_copy+0x188>)
 80174d2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80174d6:	490e      	ldr	r1, [pc, #56]	; (8017510 <pbuf_copy+0x1a0>)
 80174d8:	4809      	ldr	r0, [pc, #36]	; (8017500 <pbuf_copy+0x190>)
 80174da:	f009 fcc7 	bl	8020e6c <iprintf>
 80174de:	f06f 0305 	mvn.w	r3, #5
 80174e2:	e004      	b.n	80174ee <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80174e4:	683b      	ldr	r3, [r7, #0]
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	f47f af61 	bne.w	80173ae <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80174ec:	2300      	movs	r3, #0
}
 80174ee:	4618      	mov	r0, r3
 80174f0:	3718      	adds	r7, #24
 80174f2:	46bd      	mov	sp, r7
 80174f4:	bd80      	pop	{r7, pc}
 80174f6:	bf00      	nop
 80174f8:	08026c28 	.word	0x08026c28
 80174fc:	08026efc 	.word	0x08026efc
 8017500:	08026cb4 	.word	0x08026cb4
 8017504:	08026f2c 	.word	0x08026f2c
 8017508:	08026f44 	.word	0x08026f44
 801750c:	08026f60 	.word	0x08026f60
 8017510:	08026f70 	.word	0x08026f70

08017514 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8017514:	b580      	push	{r7, lr}
 8017516:	b088      	sub	sp, #32
 8017518:	af00      	add	r7, sp, #0
 801751a:	60f8      	str	r0, [r7, #12]
 801751c:	60b9      	str	r1, [r7, #8]
 801751e:	4611      	mov	r1, r2
 8017520:	461a      	mov	r2, r3
 8017522:	460b      	mov	r3, r1
 8017524:	80fb      	strh	r3, [r7, #6]
 8017526:	4613      	mov	r3, r2
 8017528:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801752a:	2300      	movs	r3, #0
 801752c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801752e:	2300      	movs	r3, #0
 8017530:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8017532:	68fb      	ldr	r3, [r7, #12]
 8017534:	2b00      	cmp	r3, #0
 8017536:	d108      	bne.n	801754a <pbuf_copy_partial+0x36>
 8017538:	4b2b      	ldr	r3, [pc, #172]	; (80175e8 <pbuf_copy_partial+0xd4>)
 801753a:	f240 420a 	movw	r2, #1034	; 0x40a
 801753e:	492b      	ldr	r1, [pc, #172]	; (80175ec <pbuf_copy_partial+0xd8>)
 8017540:	482b      	ldr	r0, [pc, #172]	; (80175f0 <pbuf_copy_partial+0xdc>)
 8017542:	f009 fc93 	bl	8020e6c <iprintf>
 8017546:	2300      	movs	r3, #0
 8017548:	e04a      	b.n	80175e0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801754a:	68bb      	ldr	r3, [r7, #8]
 801754c:	2b00      	cmp	r3, #0
 801754e:	d108      	bne.n	8017562 <pbuf_copy_partial+0x4e>
 8017550:	4b25      	ldr	r3, [pc, #148]	; (80175e8 <pbuf_copy_partial+0xd4>)
 8017552:	f240 420b 	movw	r2, #1035	; 0x40b
 8017556:	4927      	ldr	r1, [pc, #156]	; (80175f4 <pbuf_copy_partial+0xe0>)
 8017558:	4825      	ldr	r0, [pc, #148]	; (80175f0 <pbuf_copy_partial+0xdc>)
 801755a:	f009 fc87 	bl	8020e6c <iprintf>
 801755e:	2300      	movs	r3, #0
 8017560:	e03e      	b.n	80175e0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8017562:	68fb      	ldr	r3, [r7, #12]
 8017564:	61fb      	str	r3, [r7, #28]
 8017566:	e034      	b.n	80175d2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8017568:	88bb      	ldrh	r3, [r7, #4]
 801756a:	2b00      	cmp	r3, #0
 801756c:	d00a      	beq.n	8017584 <pbuf_copy_partial+0x70>
 801756e:	69fb      	ldr	r3, [r7, #28]
 8017570:	895b      	ldrh	r3, [r3, #10]
 8017572:	88ba      	ldrh	r2, [r7, #4]
 8017574:	429a      	cmp	r2, r3
 8017576:	d305      	bcc.n	8017584 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8017578:	69fb      	ldr	r3, [r7, #28]
 801757a:	895b      	ldrh	r3, [r3, #10]
 801757c:	88ba      	ldrh	r2, [r7, #4]
 801757e:	1ad3      	subs	r3, r2, r3
 8017580:	80bb      	strh	r3, [r7, #4]
 8017582:	e023      	b.n	80175cc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8017584:	69fb      	ldr	r3, [r7, #28]
 8017586:	895a      	ldrh	r2, [r3, #10]
 8017588:	88bb      	ldrh	r3, [r7, #4]
 801758a:	1ad3      	subs	r3, r2, r3
 801758c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801758e:	8b3a      	ldrh	r2, [r7, #24]
 8017590:	88fb      	ldrh	r3, [r7, #6]
 8017592:	429a      	cmp	r2, r3
 8017594:	d901      	bls.n	801759a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8017596:	88fb      	ldrh	r3, [r7, #6]
 8017598:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801759a:	8b7b      	ldrh	r3, [r7, #26]
 801759c:	68ba      	ldr	r2, [r7, #8]
 801759e:	18d0      	adds	r0, r2, r3
 80175a0:	69fb      	ldr	r3, [r7, #28]
 80175a2:	685a      	ldr	r2, [r3, #4]
 80175a4:	88bb      	ldrh	r3, [r7, #4]
 80175a6:	4413      	add	r3, r2
 80175a8:	8b3a      	ldrh	r2, [r7, #24]
 80175aa:	4619      	mov	r1, r3
 80175ac:	f008 fd3c 	bl	8020028 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80175b0:	8afa      	ldrh	r2, [r7, #22]
 80175b2:	8b3b      	ldrh	r3, [r7, #24]
 80175b4:	4413      	add	r3, r2
 80175b6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80175b8:	8b7a      	ldrh	r2, [r7, #26]
 80175ba:	8b3b      	ldrh	r3, [r7, #24]
 80175bc:	4413      	add	r3, r2
 80175be:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80175c0:	88fa      	ldrh	r2, [r7, #6]
 80175c2:	8b3b      	ldrh	r3, [r7, #24]
 80175c4:	1ad3      	subs	r3, r2, r3
 80175c6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80175c8:	2300      	movs	r3, #0
 80175ca:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80175cc:	69fb      	ldr	r3, [r7, #28]
 80175ce:	681b      	ldr	r3, [r3, #0]
 80175d0:	61fb      	str	r3, [r7, #28]
 80175d2:	88fb      	ldrh	r3, [r7, #6]
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	d002      	beq.n	80175de <pbuf_copy_partial+0xca>
 80175d8:	69fb      	ldr	r3, [r7, #28]
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d1c4      	bne.n	8017568 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80175de:	8afb      	ldrh	r3, [r7, #22]
}
 80175e0:	4618      	mov	r0, r3
 80175e2:	3720      	adds	r7, #32
 80175e4:	46bd      	mov	sp, r7
 80175e6:	bd80      	pop	{r7, pc}
 80175e8:	08026c28 	.word	0x08026c28
 80175ec:	08026f9c 	.word	0x08026f9c
 80175f0:	08026cb4 	.word	0x08026cb4
 80175f4:	08026fbc 	.word	0x08026fbc

080175f8 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 80175f8:	b480      	push	{r7}
 80175fa:	b087      	sub	sp, #28
 80175fc:	af00      	add	r7, sp, #0
 80175fe:	60f8      	str	r0, [r7, #12]
 8017600:	460b      	mov	r3, r1
 8017602:	607a      	str	r2, [r7, #4]
 8017604:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8017606:	897b      	ldrh	r3, [r7, #10]
 8017608:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 801760a:	68fb      	ldr	r3, [r7, #12]
 801760c:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 801760e:	e007      	b.n	8017620 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8017610:	693b      	ldr	r3, [r7, #16]
 8017612:	895b      	ldrh	r3, [r3, #10]
 8017614:	8afa      	ldrh	r2, [r7, #22]
 8017616:	1ad3      	subs	r3, r2, r3
 8017618:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 801761a:	693b      	ldr	r3, [r7, #16]
 801761c:	681b      	ldr	r3, [r3, #0]
 801761e:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8017620:	693b      	ldr	r3, [r7, #16]
 8017622:	2b00      	cmp	r3, #0
 8017624:	d004      	beq.n	8017630 <pbuf_skip_const+0x38>
 8017626:	693b      	ldr	r3, [r7, #16]
 8017628:	895b      	ldrh	r3, [r3, #10]
 801762a:	8afa      	ldrh	r2, [r7, #22]
 801762c:	429a      	cmp	r2, r3
 801762e:	d2ef      	bcs.n	8017610 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	2b00      	cmp	r3, #0
 8017634:	d002      	beq.n	801763c <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	8afa      	ldrh	r2, [r7, #22]
 801763a:	801a      	strh	r2, [r3, #0]
  }
  return q;
 801763c:	693b      	ldr	r3, [r7, #16]
}
 801763e:	4618      	mov	r0, r3
 8017640:	371c      	adds	r7, #28
 8017642:	46bd      	mov	sp, r7
 8017644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017648:	4770      	bx	lr
	...

0801764c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801764c:	b580      	push	{r7, lr}
 801764e:	b084      	sub	sp, #16
 8017650:	af00      	add	r7, sp, #0
 8017652:	4603      	mov	r3, r0
 8017654:	603a      	str	r2, [r7, #0]
 8017656:	71fb      	strb	r3, [r7, #7]
 8017658:	460b      	mov	r3, r1
 801765a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801765c:	683b      	ldr	r3, [r7, #0]
 801765e:	8919      	ldrh	r1, [r3, #8]
 8017660:	88ba      	ldrh	r2, [r7, #4]
 8017662:	79fb      	ldrb	r3, [r7, #7]
 8017664:	4618      	mov	r0, r3
 8017666:	f7ff fa87 	bl	8016b78 <pbuf_alloc>
 801766a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801766c:	68fb      	ldr	r3, [r7, #12]
 801766e:	2b00      	cmp	r3, #0
 8017670:	d101      	bne.n	8017676 <pbuf_clone+0x2a>
    return NULL;
 8017672:	2300      	movs	r3, #0
 8017674:	e011      	b.n	801769a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8017676:	6839      	ldr	r1, [r7, #0]
 8017678:	68f8      	ldr	r0, [r7, #12]
 801767a:	f7ff fe79 	bl	8017370 <pbuf_copy>
 801767e:	4603      	mov	r3, r0
 8017680:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8017682:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8017686:	2b00      	cmp	r3, #0
 8017688:	d006      	beq.n	8017698 <pbuf_clone+0x4c>
 801768a:	4b06      	ldr	r3, [pc, #24]	; (80176a4 <pbuf_clone+0x58>)
 801768c:	f240 5224 	movw	r2, #1316	; 0x524
 8017690:	4905      	ldr	r1, [pc, #20]	; (80176a8 <pbuf_clone+0x5c>)
 8017692:	4806      	ldr	r0, [pc, #24]	; (80176ac <pbuf_clone+0x60>)
 8017694:	f009 fbea 	bl	8020e6c <iprintf>
  return q;
 8017698:	68fb      	ldr	r3, [r7, #12]
}
 801769a:	4618      	mov	r0, r3
 801769c:	3710      	adds	r7, #16
 801769e:	46bd      	mov	sp, r7
 80176a0:	bd80      	pop	{r7, pc}
 80176a2:	bf00      	nop
 80176a4:	08026c28 	.word	0x08026c28
 80176a8:	080270c8 	.word	0x080270c8
 80176ac:	08026cb4 	.word	0x08026cb4

080176b0 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 80176b0:	b580      	push	{r7, lr}
 80176b2:	b084      	sub	sp, #16
 80176b4:	af00      	add	r7, sp, #0
 80176b6:	6078      	str	r0, [r7, #4]
 80176b8:	460b      	mov	r3, r1
 80176ba:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 80176bc:	887b      	ldrh	r3, [r7, #2]
 80176be:	4619      	mov	r1, r3
 80176c0:	6878      	ldr	r0, [r7, #4]
 80176c2:	f000 f80c 	bl	80176de <pbuf_try_get_at>
 80176c6:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 80176c8:	68fb      	ldr	r3, [r7, #12]
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	db02      	blt.n	80176d4 <pbuf_get_at+0x24>
    return (u8_t)ret;
 80176ce:	68fb      	ldr	r3, [r7, #12]
 80176d0:	b2db      	uxtb	r3, r3
 80176d2:	e000      	b.n	80176d6 <pbuf_get_at+0x26>
  }
  return 0;
 80176d4:	2300      	movs	r3, #0
}
 80176d6:	4618      	mov	r0, r3
 80176d8:	3710      	adds	r7, #16
 80176da:	46bd      	mov	sp, r7
 80176dc:	bd80      	pop	{r7, pc}

080176de <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 80176de:	b580      	push	{r7, lr}
 80176e0:	b084      	sub	sp, #16
 80176e2:	af00      	add	r7, sp, #0
 80176e4:	6078      	str	r0, [r7, #4]
 80176e6:	460b      	mov	r3, r1
 80176e8:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 80176ea:	f107 020a 	add.w	r2, r7, #10
 80176ee:	887b      	ldrh	r3, [r7, #2]
 80176f0:	4619      	mov	r1, r3
 80176f2:	6878      	ldr	r0, [r7, #4]
 80176f4:	f7ff ff80 	bl	80175f8 <pbuf_skip_const>
 80176f8:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 80176fa:	68fb      	ldr	r3, [r7, #12]
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	d00a      	beq.n	8017716 <pbuf_try_get_at+0x38>
 8017700:	68fb      	ldr	r3, [r7, #12]
 8017702:	895a      	ldrh	r2, [r3, #10]
 8017704:	897b      	ldrh	r3, [r7, #10]
 8017706:	429a      	cmp	r2, r3
 8017708:	d905      	bls.n	8017716 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 801770a:	68fb      	ldr	r3, [r7, #12]
 801770c:	685b      	ldr	r3, [r3, #4]
 801770e:	897a      	ldrh	r2, [r7, #10]
 8017710:	4413      	add	r3, r2
 8017712:	781b      	ldrb	r3, [r3, #0]
 8017714:	e001      	b.n	801771a <pbuf_try_get_at+0x3c>
  }
  return -1;
 8017716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801771a:	4618      	mov	r0, r3
 801771c:	3710      	adds	r7, #16
 801771e:	46bd      	mov	sp, r7
 8017720:	bd80      	pop	{r7, pc}

08017722 <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 8017722:	b580      	push	{r7, lr}
 8017724:	b088      	sub	sp, #32
 8017726:	af00      	add	r7, sp, #0
 8017728:	60f8      	str	r0, [r7, #12]
 801772a:	607a      	str	r2, [r7, #4]
 801772c:	461a      	mov	r2, r3
 801772e:	460b      	mov	r3, r1
 8017730:	817b      	strh	r3, [r7, #10]
 8017732:	4613      	mov	r3, r2
 8017734:	813b      	strh	r3, [r7, #8]
  u16_t start = offset;
 8017736:	897b      	ldrh	r3, [r7, #10]
 8017738:	83fb      	strh	r3, [r7, #30]
  const struct pbuf *q = p;
 801773a:	68fb      	ldr	r3, [r7, #12]
 801773c:	61bb      	str	r3, [r7, #24]
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 801773e:	68fb      	ldr	r3, [r7, #12]
 8017740:	891b      	ldrh	r3, [r3, #8]
 8017742:	4619      	mov	r1, r3
 8017744:	897a      	ldrh	r2, [r7, #10]
 8017746:	893b      	ldrh	r3, [r7, #8]
 8017748:	4413      	add	r3, r2
 801774a:	4299      	cmp	r1, r3
 801774c:	da0a      	bge.n	8017764 <pbuf_memcmp+0x42>
    return 0xffff;
 801774e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017752:	e037      	b.n	80177c4 <pbuf_memcmp+0xa2>
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
    start = (u16_t)(start - q->len);
 8017754:	69bb      	ldr	r3, [r7, #24]
 8017756:	895b      	ldrh	r3, [r3, #10]
 8017758:	8bfa      	ldrh	r2, [r7, #30]
 801775a:	1ad3      	subs	r3, r2, r3
 801775c:	83fb      	strh	r3, [r7, #30]
    q = q->next;
 801775e:	69bb      	ldr	r3, [r7, #24]
 8017760:	681b      	ldr	r3, [r3, #0]
 8017762:	61bb      	str	r3, [r7, #24]
  while ((q != NULL) && (q->len <= start)) {
 8017764:	69bb      	ldr	r3, [r7, #24]
 8017766:	2b00      	cmp	r3, #0
 8017768:	d004      	beq.n	8017774 <pbuf_memcmp+0x52>
 801776a:	69bb      	ldr	r3, [r7, #24]
 801776c:	895b      	ldrh	r3, [r3, #10]
 801776e:	8bfa      	ldrh	r2, [r7, #30]
 8017770:	429a      	cmp	r2, r3
 8017772:	d2ef      	bcs.n	8017754 <pbuf_memcmp+0x32>
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 8017774:	2300      	movs	r3, #0
 8017776:	82fb      	strh	r3, [r7, #22]
 8017778:	e01f      	b.n	80177ba <pbuf_memcmp+0x98>
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 801777a:	8bfa      	ldrh	r2, [r7, #30]
 801777c:	8afb      	ldrh	r3, [r7, #22]
 801777e:	4413      	add	r3, r2
 8017780:	b29b      	uxth	r3, r3
 8017782:	4619      	mov	r1, r3
 8017784:	69b8      	ldr	r0, [r7, #24]
 8017786:	f7ff ff93 	bl	80176b0 <pbuf_get_at>
 801778a:	4603      	mov	r3, r0
 801778c:	757b      	strb	r3, [r7, #21]
    u8_t b = ((const u8_t *)s2)[i];
 801778e:	8afb      	ldrh	r3, [r7, #22]
 8017790:	687a      	ldr	r2, [r7, #4]
 8017792:	4413      	add	r3, r2
 8017794:	781b      	ldrb	r3, [r3, #0]
 8017796:	753b      	strb	r3, [r7, #20]
    if (a != b) {
 8017798:	7d7a      	ldrb	r2, [r7, #21]
 801779a:	7d3b      	ldrb	r3, [r7, #20]
 801779c:	429a      	cmp	r2, r3
 801779e:	d009      	beq.n	80177b4 <pbuf_memcmp+0x92>
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 80177a0:	8afb      	ldrh	r3, [r7, #22]
 80177a2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80177a6:	4293      	cmp	r3, r2
 80177a8:	bf28      	it	cs
 80177aa:	4613      	movcs	r3, r2
 80177ac:	b29b      	uxth	r3, r3
 80177ae:	3301      	adds	r3, #1
 80177b0:	b29b      	uxth	r3, r3
 80177b2:	e007      	b.n	80177c4 <pbuf_memcmp+0xa2>
  for (i = 0; i < n; i++) {
 80177b4:	8afb      	ldrh	r3, [r7, #22]
 80177b6:	3301      	adds	r3, #1
 80177b8:	82fb      	strh	r3, [r7, #22]
 80177ba:	8afa      	ldrh	r2, [r7, #22]
 80177bc:	893b      	ldrh	r3, [r7, #8]
 80177be:	429a      	cmp	r2, r3
 80177c0:	d3db      	bcc.n	801777a <pbuf_memcmp+0x58>
    }
  }
  return 0;
 80177c2:	2300      	movs	r3, #0
}
 80177c4:	4618      	mov	r0, r3
 80177c6:	3720      	adds	r7, #32
 80177c8:	46bd      	mov	sp, r7
 80177ca:	bd80      	pop	{r7, pc}

080177cc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80177cc:	b580      	push	{r7, lr}
 80177ce:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80177d0:	f009 fbda 	bl	8020f88 <rand>
 80177d4:	4603      	mov	r3, r0
 80177d6:	b29b      	uxth	r3, r3
 80177d8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80177dc:	b29b      	uxth	r3, r3
 80177de:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80177e2:	b29a      	uxth	r2, r3
 80177e4:	4b01      	ldr	r3, [pc, #4]	; (80177ec <tcp_init+0x20>)
 80177e6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80177e8:	bf00      	nop
 80177ea:	bd80      	pop	{r7, pc}
 80177ec:	2400002c 	.word	0x2400002c

080177f0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80177f0:	b580      	push	{r7, lr}
 80177f2:	b082      	sub	sp, #8
 80177f4:	af00      	add	r7, sp, #0
 80177f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	7d1b      	ldrb	r3, [r3, #20]
 80177fc:	2b01      	cmp	r3, #1
 80177fe:	d105      	bne.n	801780c <tcp_free+0x1c>
 8017800:	4b06      	ldr	r3, [pc, #24]	; (801781c <tcp_free+0x2c>)
 8017802:	22d4      	movs	r2, #212	; 0xd4
 8017804:	4906      	ldr	r1, [pc, #24]	; (8017820 <tcp_free+0x30>)
 8017806:	4807      	ldr	r0, [pc, #28]	; (8017824 <tcp_free+0x34>)
 8017808:	f009 fb30 	bl	8020e6c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 801780c:	6879      	ldr	r1, [r7, #4]
 801780e:	2001      	movs	r0, #1
 8017810:	f7fe fe20 	bl	8016454 <memp_free>
}
 8017814:	bf00      	nop
 8017816:	3708      	adds	r7, #8
 8017818:	46bd      	mov	sp, r7
 801781a:	bd80      	pop	{r7, pc}
 801781c:	08027154 	.word	0x08027154
 8017820:	080271b0 	.word	0x080271b0
 8017824:	080271c4 	.word	0x080271c4

08017828 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8017828:	b580      	push	{r7, lr}
 801782a:	b082      	sub	sp, #8
 801782c:	af00      	add	r7, sp, #0
 801782e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	7d1b      	ldrb	r3, [r3, #20]
 8017834:	2b01      	cmp	r3, #1
 8017836:	d105      	bne.n	8017844 <tcp_free_listen+0x1c>
 8017838:	4b06      	ldr	r3, [pc, #24]	; (8017854 <tcp_free_listen+0x2c>)
 801783a:	22df      	movs	r2, #223	; 0xdf
 801783c:	4906      	ldr	r1, [pc, #24]	; (8017858 <tcp_free_listen+0x30>)
 801783e:	4807      	ldr	r0, [pc, #28]	; (801785c <tcp_free_listen+0x34>)
 8017840:	f009 fb14 	bl	8020e6c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8017844:	6879      	ldr	r1, [r7, #4]
 8017846:	2002      	movs	r0, #2
 8017848:	f7fe fe04 	bl	8016454 <memp_free>
}
 801784c:	bf00      	nop
 801784e:	3708      	adds	r7, #8
 8017850:	46bd      	mov	sp, r7
 8017852:	bd80      	pop	{r7, pc}
 8017854:	08027154 	.word	0x08027154
 8017858:	080271ec 	.word	0x080271ec
 801785c:	080271c4 	.word	0x080271c4

08017860 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8017860:	b580      	push	{r7, lr}
 8017862:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8017864:	f001 f974 	bl	8018b50 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8017868:	4b07      	ldr	r3, [pc, #28]	; (8017888 <tcp_tmr+0x28>)
 801786a:	781b      	ldrb	r3, [r3, #0]
 801786c:	3301      	adds	r3, #1
 801786e:	b2da      	uxtb	r2, r3
 8017870:	4b05      	ldr	r3, [pc, #20]	; (8017888 <tcp_tmr+0x28>)
 8017872:	701a      	strb	r2, [r3, #0]
 8017874:	4b04      	ldr	r3, [pc, #16]	; (8017888 <tcp_tmr+0x28>)
 8017876:	781b      	ldrb	r3, [r3, #0]
 8017878:	f003 0301 	and.w	r3, r3, #1
 801787c:	2b00      	cmp	r3, #0
 801787e:	d001      	beq.n	8017884 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8017880:	f000 fe26 	bl	80184d0 <tcp_slowtmr>
  }
}
 8017884:	bf00      	nop
 8017886:	bd80      	pop	{r7, pc}
 8017888:	2400489d 	.word	0x2400489d

0801788c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801788c:	b580      	push	{r7, lr}
 801788e:	b084      	sub	sp, #16
 8017890:	af00      	add	r7, sp, #0
 8017892:	6078      	str	r0, [r7, #4]
 8017894:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8017896:	683b      	ldr	r3, [r7, #0]
 8017898:	2b00      	cmp	r3, #0
 801789a:	d105      	bne.n	80178a8 <tcp_remove_listener+0x1c>
 801789c:	4b0d      	ldr	r3, [pc, #52]	; (80178d4 <tcp_remove_listener+0x48>)
 801789e:	22ff      	movs	r2, #255	; 0xff
 80178a0:	490d      	ldr	r1, [pc, #52]	; (80178d8 <tcp_remove_listener+0x4c>)
 80178a2:	480e      	ldr	r0, [pc, #56]	; (80178dc <tcp_remove_listener+0x50>)
 80178a4:	f009 fae2 	bl	8020e6c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	60fb      	str	r3, [r7, #12]
 80178ac:	e00a      	b.n	80178c4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80178ae:	68fb      	ldr	r3, [r7, #12]
 80178b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80178b2:	683a      	ldr	r2, [r7, #0]
 80178b4:	429a      	cmp	r2, r3
 80178b6:	d102      	bne.n	80178be <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80178b8:	68fb      	ldr	r3, [r7, #12]
 80178ba:	2200      	movs	r2, #0
 80178bc:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80178be:	68fb      	ldr	r3, [r7, #12]
 80178c0:	68db      	ldr	r3, [r3, #12]
 80178c2:	60fb      	str	r3, [r7, #12]
 80178c4:	68fb      	ldr	r3, [r7, #12]
 80178c6:	2b00      	cmp	r3, #0
 80178c8:	d1f1      	bne.n	80178ae <tcp_remove_listener+0x22>
    }
  }
}
 80178ca:	bf00      	nop
 80178cc:	bf00      	nop
 80178ce:	3710      	adds	r7, #16
 80178d0:	46bd      	mov	sp, r7
 80178d2:	bd80      	pop	{r7, pc}
 80178d4:	08027154 	.word	0x08027154
 80178d8:	08027208 	.word	0x08027208
 80178dc:	080271c4 	.word	0x080271c4

080178e0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80178e0:	b580      	push	{r7, lr}
 80178e2:	b084      	sub	sp, #16
 80178e4:	af00      	add	r7, sp, #0
 80178e6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d106      	bne.n	80178fc <tcp_listen_closed+0x1c>
 80178ee:	4b14      	ldr	r3, [pc, #80]	; (8017940 <tcp_listen_closed+0x60>)
 80178f0:	f240 1211 	movw	r2, #273	; 0x111
 80178f4:	4913      	ldr	r1, [pc, #76]	; (8017944 <tcp_listen_closed+0x64>)
 80178f6:	4814      	ldr	r0, [pc, #80]	; (8017948 <tcp_listen_closed+0x68>)
 80178f8:	f009 fab8 	bl	8020e6c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80178fc:	687b      	ldr	r3, [r7, #4]
 80178fe:	7d1b      	ldrb	r3, [r3, #20]
 8017900:	2b01      	cmp	r3, #1
 8017902:	d006      	beq.n	8017912 <tcp_listen_closed+0x32>
 8017904:	4b0e      	ldr	r3, [pc, #56]	; (8017940 <tcp_listen_closed+0x60>)
 8017906:	f44f 7289 	mov.w	r2, #274	; 0x112
 801790a:	4910      	ldr	r1, [pc, #64]	; (801794c <tcp_listen_closed+0x6c>)
 801790c:	480e      	ldr	r0, [pc, #56]	; (8017948 <tcp_listen_closed+0x68>)
 801790e:	f009 faad 	bl	8020e6c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8017912:	2301      	movs	r3, #1
 8017914:	60fb      	str	r3, [r7, #12]
 8017916:	e00b      	b.n	8017930 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8017918:	4a0d      	ldr	r2, [pc, #52]	; (8017950 <tcp_listen_closed+0x70>)
 801791a:	68fb      	ldr	r3, [r7, #12]
 801791c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017920:	681b      	ldr	r3, [r3, #0]
 8017922:	6879      	ldr	r1, [r7, #4]
 8017924:	4618      	mov	r0, r3
 8017926:	f7ff ffb1 	bl	801788c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801792a:	68fb      	ldr	r3, [r7, #12]
 801792c:	3301      	adds	r3, #1
 801792e:	60fb      	str	r3, [r7, #12]
 8017930:	68fb      	ldr	r3, [r7, #12]
 8017932:	2b03      	cmp	r3, #3
 8017934:	d9f0      	bls.n	8017918 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8017936:	bf00      	nop
 8017938:	bf00      	nop
 801793a:	3710      	adds	r7, #16
 801793c:	46bd      	mov	sp, r7
 801793e:	bd80      	pop	{r7, pc}
 8017940:	08027154 	.word	0x08027154
 8017944:	08027230 	.word	0x08027230
 8017948:	080271c4 	.word	0x080271c4
 801794c:	0802723c 	.word	0x0802723c
 8017950:	080291c8 	.word	0x080291c8

08017954 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8017954:	b5b0      	push	{r4, r5, r7, lr}
 8017956:	b088      	sub	sp, #32
 8017958:	af04      	add	r7, sp, #16
 801795a:	6078      	str	r0, [r7, #4]
 801795c:	460b      	mov	r3, r1
 801795e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	2b00      	cmp	r3, #0
 8017964:	d106      	bne.n	8017974 <tcp_close_shutdown+0x20>
 8017966:	4b63      	ldr	r3, [pc, #396]	; (8017af4 <tcp_close_shutdown+0x1a0>)
 8017968:	f44f 72af 	mov.w	r2, #350	; 0x15e
 801796c:	4962      	ldr	r1, [pc, #392]	; (8017af8 <tcp_close_shutdown+0x1a4>)
 801796e:	4863      	ldr	r0, [pc, #396]	; (8017afc <tcp_close_shutdown+0x1a8>)
 8017970:	f009 fa7c 	bl	8020e6c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8017974:	78fb      	ldrb	r3, [r7, #3]
 8017976:	2b00      	cmp	r3, #0
 8017978:	d066      	beq.n	8017a48 <tcp_close_shutdown+0xf4>
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	7d1b      	ldrb	r3, [r3, #20]
 801797e:	2b04      	cmp	r3, #4
 8017980:	d003      	beq.n	801798a <tcp_close_shutdown+0x36>
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	7d1b      	ldrb	r3, [r3, #20]
 8017986:	2b07      	cmp	r3, #7
 8017988:	d15e      	bne.n	8017a48 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801798e:	2b00      	cmp	r3, #0
 8017990:	d104      	bne.n	801799c <tcp_close_shutdown+0x48>
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017996:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801799a:	d055      	beq.n	8017a48 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	8b5b      	ldrh	r3, [r3, #26]
 80179a0:	f003 0310 	and.w	r3, r3, #16
 80179a4:	2b00      	cmp	r3, #0
 80179a6:	d106      	bne.n	80179b6 <tcp_close_shutdown+0x62>
 80179a8:	4b52      	ldr	r3, [pc, #328]	; (8017af4 <tcp_close_shutdown+0x1a0>)
 80179aa:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80179ae:	4954      	ldr	r1, [pc, #336]	; (8017b00 <tcp_close_shutdown+0x1ac>)
 80179b0:	4852      	ldr	r0, [pc, #328]	; (8017afc <tcp_close_shutdown+0x1a8>)
 80179b2:	f009 fa5b 	bl	8020e6c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80179be:	687d      	ldr	r5, [r7, #4]
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	3304      	adds	r3, #4
 80179c4:	687a      	ldr	r2, [r7, #4]
 80179c6:	8ad2      	ldrh	r2, [r2, #22]
 80179c8:	6879      	ldr	r1, [r7, #4]
 80179ca:	8b09      	ldrh	r1, [r1, #24]
 80179cc:	9102      	str	r1, [sp, #8]
 80179ce:	9201      	str	r2, [sp, #4]
 80179d0:	9300      	str	r3, [sp, #0]
 80179d2:	462b      	mov	r3, r5
 80179d4:	4622      	mov	r2, r4
 80179d6:	4601      	mov	r1, r0
 80179d8:	6878      	ldr	r0, [r7, #4]
 80179da:	f005 fe85 	bl	801d6e8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80179de:	6878      	ldr	r0, [r7, #4]
 80179e0:	f001 fc66 	bl	80192b0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80179e4:	4b47      	ldr	r3, [pc, #284]	; (8017b04 <tcp_close_shutdown+0x1b0>)
 80179e6:	681b      	ldr	r3, [r3, #0]
 80179e8:	687a      	ldr	r2, [r7, #4]
 80179ea:	429a      	cmp	r2, r3
 80179ec:	d105      	bne.n	80179fa <tcp_close_shutdown+0xa6>
 80179ee:	4b45      	ldr	r3, [pc, #276]	; (8017b04 <tcp_close_shutdown+0x1b0>)
 80179f0:	681b      	ldr	r3, [r3, #0]
 80179f2:	68db      	ldr	r3, [r3, #12]
 80179f4:	4a43      	ldr	r2, [pc, #268]	; (8017b04 <tcp_close_shutdown+0x1b0>)
 80179f6:	6013      	str	r3, [r2, #0]
 80179f8:	e013      	b.n	8017a22 <tcp_close_shutdown+0xce>
 80179fa:	4b42      	ldr	r3, [pc, #264]	; (8017b04 <tcp_close_shutdown+0x1b0>)
 80179fc:	681b      	ldr	r3, [r3, #0]
 80179fe:	60fb      	str	r3, [r7, #12]
 8017a00:	e00c      	b.n	8017a1c <tcp_close_shutdown+0xc8>
 8017a02:	68fb      	ldr	r3, [r7, #12]
 8017a04:	68db      	ldr	r3, [r3, #12]
 8017a06:	687a      	ldr	r2, [r7, #4]
 8017a08:	429a      	cmp	r2, r3
 8017a0a:	d104      	bne.n	8017a16 <tcp_close_shutdown+0xc2>
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	68da      	ldr	r2, [r3, #12]
 8017a10:	68fb      	ldr	r3, [r7, #12]
 8017a12:	60da      	str	r2, [r3, #12]
 8017a14:	e005      	b.n	8017a22 <tcp_close_shutdown+0xce>
 8017a16:	68fb      	ldr	r3, [r7, #12]
 8017a18:	68db      	ldr	r3, [r3, #12]
 8017a1a:	60fb      	str	r3, [r7, #12]
 8017a1c:	68fb      	ldr	r3, [r7, #12]
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	d1ef      	bne.n	8017a02 <tcp_close_shutdown+0xae>
 8017a22:	687b      	ldr	r3, [r7, #4]
 8017a24:	2200      	movs	r2, #0
 8017a26:	60da      	str	r2, [r3, #12]
 8017a28:	4b37      	ldr	r3, [pc, #220]	; (8017b08 <tcp_close_shutdown+0x1b4>)
 8017a2a:	2201      	movs	r2, #1
 8017a2c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8017a2e:	4b37      	ldr	r3, [pc, #220]	; (8017b0c <tcp_close_shutdown+0x1b8>)
 8017a30:	681b      	ldr	r3, [r3, #0]
 8017a32:	687a      	ldr	r2, [r7, #4]
 8017a34:	429a      	cmp	r2, r3
 8017a36:	d102      	bne.n	8017a3e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8017a38:	f004 f8fa 	bl	801bc30 <tcp_trigger_input_pcb_close>
 8017a3c:	e002      	b.n	8017a44 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8017a3e:	6878      	ldr	r0, [r7, #4]
 8017a40:	f7ff fed6 	bl	80177f0 <tcp_free>
      }
      return ERR_OK;
 8017a44:	2300      	movs	r3, #0
 8017a46:	e050      	b.n	8017aea <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	7d1b      	ldrb	r3, [r3, #20]
 8017a4c:	2b02      	cmp	r3, #2
 8017a4e:	d03b      	beq.n	8017ac8 <tcp_close_shutdown+0x174>
 8017a50:	2b02      	cmp	r3, #2
 8017a52:	dc44      	bgt.n	8017ade <tcp_close_shutdown+0x18a>
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	d002      	beq.n	8017a5e <tcp_close_shutdown+0x10a>
 8017a58:	2b01      	cmp	r3, #1
 8017a5a:	d02a      	beq.n	8017ab2 <tcp_close_shutdown+0x15e>
 8017a5c:	e03f      	b.n	8017ade <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	8adb      	ldrh	r3, [r3, #22]
 8017a62:	2b00      	cmp	r3, #0
 8017a64:	d021      	beq.n	8017aaa <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8017a66:	4b2a      	ldr	r3, [pc, #168]	; (8017b10 <tcp_close_shutdown+0x1bc>)
 8017a68:	681b      	ldr	r3, [r3, #0]
 8017a6a:	687a      	ldr	r2, [r7, #4]
 8017a6c:	429a      	cmp	r2, r3
 8017a6e:	d105      	bne.n	8017a7c <tcp_close_shutdown+0x128>
 8017a70:	4b27      	ldr	r3, [pc, #156]	; (8017b10 <tcp_close_shutdown+0x1bc>)
 8017a72:	681b      	ldr	r3, [r3, #0]
 8017a74:	68db      	ldr	r3, [r3, #12]
 8017a76:	4a26      	ldr	r2, [pc, #152]	; (8017b10 <tcp_close_shutdown+0x1bc>)
 8017a78:	6013      	str	r3, [r2, #0]
 8017a7a:	e013      	b.n	8017aa4 <tcp_close_shutdown+0x150>
 8017a7c:	4b24      	ldr	r3, [pc, #144]	; (8017b10 <tcp_close_shutdown+0x1bc>)
 8017a7e:	681b      	ldr	r3, [r3, #0]
 8017a80:	60bb      	str	r3, [r7, #8]
 8017a82:	e00c      	b.n	8017a9e <tcp_close_shutdown+0x14a>
 8017a84:	68bb      	ldr	r3, [r7, #8]
 8017a86:	68db      	ldr	r3, [r3, #12]
 8017a88:	687a      	ldr	r2, [r7, #4]
 8017a8a:	429a      	cmp	r2, r3
 8017a8c:	d104      	bne.n	8017a98 <tcp_close_shutdown+0x144>
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	68da      	ldr	r2, [r3, #12]
 8017a92:	68bb      	ldr	r3, [r7, #8]
 8017a94:	60da      	str	r2, [r3, #12]
 8017a96:	e005      	b.n	8017aa4 <tcp_close_shutdown+0x150>
 8017a98:	68bb      	ldr	r3, [r7, #8]
 8017a9a:	68db      	ldr	r3, [r3, #12]
 8017a9c:	60bb      	str	r3, [r7, #8]
 8017a9e:	68bb      	ldr	r3, [r7, #8]
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	d1ef      	bne.n	8017a84 <tcp_close_shutdown+0x130>
 8017aa4:	687b      	ldr	r3, [r7, #4]
 8017aa6:	2200      	movs	r2, #0
 8017aa8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8017aaa:	6878      	ldr	r0, [r7, #4]
 8017aac:	f7ff fea0 	bl	80177f0 <tcp_free>
      break;
 8017ab0:	e01a      	b.n	8017ae8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8017ab2:	6878      	ldr	r0, [r7, #4]
 8017ab4:	f7ff ff14 	bl	80178e0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8017ab8:	6879      	ldr	r1, [r7, #4]
 8017aba:	4816      	ldr	r0, [pc, #88]	; (8017b14 <tcp_close_shutdown+0x1c0>)
 8017abc:	f001 fc48 	bl	8019350 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8017ac0:	6878      	ldr	r0, [r7, #4]
 8017ac2:	f7ff feb1 	bl	8017828 <tcp_free_listen>
      break;
 8017ac6:	e00f      	b.n	8017ae8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8017ac8:	6879      	ldr	r1, [r7, #4]
 8017aca:	480e      	ldr	r0, [pc, #56]	; (8017b04 <tcp_close_shutdown+0x1b0>)
 8017acc:	f001 fc40 	bl	8019350 <tcp_pcb_remove>
 8017ad0:	4b0d      	ldr	r3, [pc, #52]	; (8017b08 <tcp_close_shutdown+0x1b4>)
 8017ad2:	2201      	movs	r2, #1
 8017ad4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8017ad6:	6878      	ldr	r0, [r7, #4]
 8017ad8:	f7ff fe8a 	bl	80177f0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8017adc:	e004      	b.n	8017ae8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8017ade:	6878      	ldr	r0, [r7, #4]
 8017ae0:	f000 f81a 	bl	8017b18 <tcp_close_shutdown_fin>
 8017ae4:	4603      	mov	r3, r0
 8017ae6:	e000      	b.n	8017aea <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8017ae8:	2300      	movs	r3, #0
}
 8017aea:	4618      	mov	r0, r3
 8017aec:	3710      	adds	r7, #16
 8017aee:	46bd      	mov	sp, r7
 8017af0:	bdb0      	pop	{r4, r5, r7, pc}
 8017af2:	bf00      	nop
 8017af4:	08027154 	.word	0x08027154
 8017af8:	08027254 	.word	0x08027254
 8017afc:	080271c4 	.word	0x080271c4
 8017b00:	08027274 	.word	0x08027274
 8017b04:	240082b8 	.word	0x240082b8
 8017b08:	240082b4 	.word	0x240082b4
 8017b0c:	240082cc 	.word	0x240082cc
 8017b10:	240082c4 	.word	0x240082c4
 8017b14:	240082c0 	.word	0x240082c0

08017b18 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8017b18:	b580      	push	{r7, lr}
 8017b1a:	b084      	sub	sp, #16
 8017b1c:	af00      	add	r7, sp, #0
 8017b1e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	d106      	bne.n	8017b34 <tcp_close_shutdown_fin+0x1c>
 8017b26:	4b2e      	ldr	r3, [pc, #184]	; (8017be0 <tcp_close_shutdown_fin+0xc8>)
 8017b28:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8017b2c:	492d      	ldr	r1, [pc, #180]	; (8017be4 <tcp_close_shutdown_fin+0xcc>)
 8017b2e:	482e      	ldr	r0, [pc, #184]	; (8017be8 <tcp_close_shutdown_fin+0xd0>)
 8017b30:	f009 f99c 	bl	8020e6c <iprintf>

  switch (pcb->state) {
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	7d1b      	ldrb	r3, [r3, #20]
 8017b38:	2b07      	cmp	r3, #7
 8017b3a:	d020      	beq.n	8017b7e <tcp_close_shutdown_fin+0x66>
 8017b3c:	2b07      	cmp	r3, #7
 8017b3e:	dc2b      	bgt.n	8017b98 <tcp_close_shutdown_fin+0x80>
 8017b40:	2b03      	cmp	r3, #3
 8017b42:	d002      	beq.n	8017b4a <tcp_close_shutdown_fin+0x32>
 8017b44:	2b04      	cmp	r3, #4
 8017b46:	d00d      	beq.n	8017b64 <tcp_close_shutdown_fin+0x4c>
 8017b48:	e026      	b.n	8017b98 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8017b4a:	6878      	ldr	r0, [r7, #4]
 8017b4c:	f004 feda 	bl	801c904 <tcp_send_fin>
 8017b50:	4603      	mov	r3, r0
 8017b52:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8017b54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017b58:	2b00      	cmp	r3, #0
 8017b5a:	d11f      	bne.n	8017b9c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	2205      	movs	r2, #5
 8017b60:	751a      	strb	r2, [r3, #20]
      }
      break;
 8017b62:	e01b      	b.n	8017b9c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8017b64:	6878      	ldr	r0, [r7, #4]
 8017b66:	f004 fecd 	bl	801c904 <tcp_send_fin>
 8017b6a:	4603      	mov	r3, r0
 8017b6c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8017b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017b72:	2b00      	cmp	r3, #0
 8017b74:	d114      	bne.n	8017ba0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8017b76:	687b      	ldr	r3, [r7, #4]
 8017b78:	2205      	movs	r2, #5
 8017b7a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8017b7c:	e010      	b.n	8017ba0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8017b7e:	6878      	ldr	r0, [r7, #4]
 8017b80:	f004 fec0 	bl	801c904 <tcp_send_fin>
 8017b84:	4603      	mov	r3, r0
 8017b86:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8017b88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017b8c:	2b00      	cmp	r3, #0
 8017b8e:	d109      	bne.n	8017ba4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	2209      	movs	r2, #9
 8017b94:	751a      	strb	r2, [r3, #20]
      }
      break;
 8017b96:	e005      	b.n	8017ba4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8017b98:	2300      	movs	r3, #0
 8017b9a:	e01c      	b.n	8017bd6 <tcp_close_shutdown_fin+0xbe>
      break;
 8017b9c:	bf00      	nop
 8017b9e:	e002      	b.n	8017ba6 <tcp_close_shutdown_fin+0x8e>
      break;
 8017ba0:	bf00      	nop
 8017ba2:	e000      	b.n	8017ba6 <tcp_close_shutdown_fin+0x8e>
      break;
 8017ba4:	bf00      	nop
  }

  if (err == ERR_OK) {
 8017ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017baa:	2b00      	cmp	r3, #0
 8017bac:	d103      	bne.n	8017bb6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8017bae:	6878      	ldr	r0, [r7, #4]
 8017bb0:	f004 ffe6 	bl	801cb80 <tcp_output>
 8017bb4:	e00d      	b.n	8017bd2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8017bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017bba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017bbe:	d108      	bne.n	8017bd2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	8b5b      	ldrh	r3, [r3, #26]
 8017bc4:	f043 0308 	orr.w	r3, r3, #8
 8017bc8:	b29a      	uxth	r2, r3
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8017bce:	2300      	movs	r3, #0
 8017bd0:	e001      	b.n	8017bd6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8017bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017bd6:	4618      	mov	r0, r3
 8017bd8:	3710      	adds	r7, #16
 8017bda:	46bd      	mov	sp, r7
 8017bdc:	bd80      	pop	{r7, pc}
 8017bde:	bf00      	nop
 8017be0:	08027154 	.word	0x08027154
 8017be4:	08027230 	.word	0x08027230
 8017be8:	080271c4 	.word	0x080271c4

08017bec <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8017bec:	b580      	push	{r7, lr}
 8017bee:	b082      	sub	sp, #8
 8017bf0:	af00      	add	r7, sp, #0
 8017bf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	2b00      	cmp	r3, #0
 8017bf8:	d109      	bne.n	8017c0e <tcp_close+0x22>
 8017bfa:	4b0f      	ldr	r3, [pc, #60]	; (8017c38 <tcp_close+0x4c>)
 8017bfc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8017c00:	490e      	ldr	r1, [pc, #56]	; (8017c3c <tcp_close+0x50>)
 8017c02:	480f      	ldr	r0, [pc, #60]	; (8017c40 <tcp_close+0x54>)
 8017c04:	f009 f932 	bl	8020e6c <iprintf>
 8017c08:	f06f 030f 	mvn.w	r3, #15
 8017c0c:	e00f      	b.n	8017c2e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8017c0e:	687b      	ldr	r3, [r7, #4]
 8017c10:	7d1b      	ldrb	r3, [r3, #20]
 8017c12:	2b01      	cmp	r3, #1
 8017c14:	d006      	beq.n	8017c24 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8017c16:	687b      	ldr	r3, [r7, #4]
 8017c18:	8b5b      	ldrh	r3, [r3, #26]
 8017c1a:	f043 0310 	orr.w	r3, r3, #16
 8017c1e:	b29a      	uxth	r2, r3
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8017c24:	2101      	movs	r1, #1
 8017c26:	6878      	ldr	r0, [r7, #4]
 8017c28:	f7ff fe94 	bl	8017954 <tcp_close_shutdown>
 8017c2c:	4603      	mov	r3, r0
}
 8017c2e:	4618      	mov	r0, r3
 8017c30:	3708      	adds	r7, #8
 8017c32:	46bd      	mov	sp, r7
 8017c34:	bd80      	pop	{r7, pc}
 8017c36:	bf00      	nop
 8017c38:	08027154 	.word	0x08027154
 8017c3c:	08027290 	.word	0x08027290
 8017c40:	080271c4 	.word	0x080271c4

08017c44 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8017c44:	b580      	push	{r7, lr}
 8017c46:	b08e      	sub	sp, #56	; 0x38
 8017c48:	af04      	add	r7, sp, #16
 8017c4a:	6078      	str	r0, [r7, #4]
 8017c4c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	2b00      	cmp	r3, #0
 8017c52:	d107      	bne.n	8017c64 <tcp_abandon+0x20>
 8017c54:	4b52      	ldr	r3, [pc, #328]	; (8017da0 <tcp_abandon+0x15c>)
 8017c56:	f240 223d 	movw	r2, #573	; 0x23d
 8017c5a:	4952      	ldr	r1, [pc, #328]	; (8017da4 <tcp_abandon+0x160>)
 8017c5c:	4852      	ldr	r0, [pc, #328]	; (8017da8 <tcp_abandon+0x164>)
 8017c5e:	f009 f905 	bl	8020e6c <iprintf>
 8017c62:	e099      	b.n	8017d98 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	7d1b      	ldrb	r3, [r3, #20]
 8017c68:	2b01      	cmp	r3, #1
 8017c6a:	d106      	bne.n	8017c7a <tcp_abandon+0x36>
 8017c6c:	4b4c      	ldr	r3, [pc, #304]	; (8017da0 <tcp_abandon+0x15c>)
 8017c6e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8017c72:	494e      	ldr	r1, [pc, #312]	; (8017dac <tcp_abandon+0x168>)
 8017c74:	484c      	ldr	r0, [pc, #304]	; (8017da8 <tcp_abandon+0x164>)
 8017c76:	f009 f8f9 	bl	8020e6c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8017c7a:	687b      	ldr	r3, [r7, #4]
 8017c7c:	7d1b      	ldrb	r3, [r3, #20]
 8017c7e:	2b0a      	cmp	r3, #10
 8017c80:	d107      	bne.n	8017c92 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8017c82:	6879      	ldr	r1, [r7, #4]
 8017c84:	484a      	ldr	r0, [pc, #296]	; (8017db0 <tcp_abandon+0x16c>)
 8017c86:	f001 fb63 	bl	8019350 <tcp_pcb_remove>
    tcp_free(pcb);
 8017c8a:	6878      	ldr	r0, [r7, #4]
 8017c8c:	f7ff fdb0 	bl	80177f0 <tcp_free>
 8017c90:	e082      	b.n	8017d98 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8017c92:	2300      	movs	r3, #0
 8017c94:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8017c96:	2300      	movs	r3, #0
 8017c98:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017c9e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ca4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017cac:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8017cae:	687b      	ldr	r3, [r7, #4]
 8017cb0:	691b      	ldr	r3, [r3, #16]
 8017cb2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	7d1b      	ldrb	r3, [r3, #20]
 8017cb8:	2b00      	cmp	r3, #0
 8017cba:	d126      	bne.n	8017d0a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	8adb      	ldrh	r3, [r3, #22]
 8017cc0:	2b00      	cmp	r3, #0
 8017cc2:	d02e      	beq.n	8017d22 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8017cc4:	4b3b      	ldr	r3, [pc, #236]	; (8017db4 <tcp_abandon+0x170>)
 8017cc6:	681b      	ldr	r3, [r3, #0]
 8017cc8:	687a      	ldr	r2, [r7, #4]
 8017cca:	429a      	cmp	r2, r3
 8017ccc:	d105      	bne.n	8017cda <tcp_abandon+0x96>
 8017cce:	4b39      	ldr	r3, [pc, #228]	; (8017db4 <tcp_abandon+0x170>)
 8017cd0:	681b      	ldr	r3, [r3, #0]
 8017cd2:	68db      	ldr	r3, [r3, #12]
 8017cd4:	4a37      	ldr	r2, [pc, #220]	; (8017db4 <tcp_abandon+0x170>)
 8017cd6:	6013      	str	r3, [r2, #0]
 8017cd8:	e013      	b.n	8017d02 <tcp_abandon+0xbe>
 8017cda:	4b36      	ldr	r3, [pc, #216]	; (8017db4 <tcp_abandon+0x170>)
 8017cdc:	681b      	ldr	r3, [r3, #0]
 8017cde:	61fb      	str	r3, [r7, #28]
 8017ce0:	e00c      	b.n	8017cfc <tcp_abandon+0xb8>
 8017ce2:	69fb      	ldr	r3, [r7, #28]
 8017ce4:	68db      	ldr	r3, [r3, #12]
 8017ce6:	687a      	ldr	r2, [r7, #4]
 8017ce8:	429a      	cmp	r2, r3
 8017cea:	d104      	bne.n	8017cf6 <tcp_abandon+0xb2>
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	68da      	ldr	r2, [r3, #12]
 8017cf0:	69fb      	ldr	r3, [r7, #28]
 8017cf2:	60da      	str	r2, [r3, #12]
 8017cf4:	e005      	b.n	8017d02 <tcp_abandon+0xbe>
 8017cf6:	69fb      	ldr	r3, [r7, #28]
 8017cf8:	68db      	ldr	r3, [r3, #12]
 8017cfa:	61fb      	str	r3, [r7, #28]
 8017cfc:	69fb      	ldr	r3, [r7, #28]
 8017cfe:	2b00      	cmp	r3, #0
 8017d00:	d1ef      	bne.n	8017ce2 <tcp_abandon+0x9e>
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	2200      	movs	r2, #0
 8017d06:	60da      	str	r2, [r3, #12]
 8017d08:	e00b      	b.n	8017d22 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8017d0a:	683b      	ldr	r3, [r7, #0]
 8017d0c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	8adb      	ldrh	r3, [r3, #22]
 8017d12:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8017d14:	6879      	ldr	r1, [r7, #4]
 8017d16:	4828      	ldr	r0, [pc, #160]	; (8017db8 <tcp_abandon+0x174>)
 8017d18:	f001 fb1a 	bl	8019350 <tcp_pcb_remove>
 8017d1c:	4b27      	ldr	r3, [pc, #156]	; (8017dbc <tcp_abandon+0x178>)
 8017d1e:	2201      	movs	r2, #1
 8017d20:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	d004      	beq.n	8017d34 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017d2e:	4618      	mov	r0, r3
 8017d30:	f000 ffee 	bl	8018d10 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8017d34:	687b      	ldr	r3, [r7, #4]
 8017d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	d004      	beq.n	8017d46 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017d40:	4618      	mov	r0, r3
 8017d42:	f000 ffe5 	bl	8018d10 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8017d46:	687b      	ldr	r3, [r7, #4]
 8017d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d004      	beq.n	8017d58 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017d52:	4618      	mov	r0, r3
 8017d54:	f000 ffdc 	bl	8018d10 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8017d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	d00e      	beq.n	8017d7c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8017d5e:	6879      	ldr	r1, [r7, #4]
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	3304      	adds	r3, #4
 8017d64:	687a      	ldr	r2, [r7, #4]
 8017d66:	8b12      	ldrh	r2, [r2, #24]
 8017d68:	9202      	str	r2, [sp, #8]
 8017d6a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017d6c:	9201      	str	r2, [sp, #4]
 8017d6e:	9300      	str	r3, [sp, #0]
 8017d70:	460b      	mov	r3, r1
 8017d72:	697a      	ldr	r2, [r7, #20]
 8017d74:	69b9      	ldr	r1, [r7, #24]
 8017d76:	6878      	ldr	r0, [r7, #4]
 8017d78:	f005 fcb6 	bl	801d6e8 <tcp_rst>
    }
    last_state = pcb->state;
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	7d1b      	ldrb	r3, [r3, #20]
 8017d80:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8017d82:	6878      	ldr	r0, [r7, #4]
 8017d84:	f7ff fd34 	bl	80177f0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8017d88:	693b      	ldr	r3, [r7, #16]
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	d004      	beq.n	8017d98 <tcp_abandon+0x154>
 8017d8e:	693b      	ldr	r3, [r7, #16]
 8017d90:	f06f 010c 	mvn.w	r1, #12
 8017d94:	68f8      	ldr	r0, [r7, #12]
 8017d96:	4798      	blx	r3
  }
}
 8017d98:	3728      	adds	r7, #40	; 0x28
 8017d9a:	46bd      	mov	sp, r7
 8017d9c:	bd80      	pop	{r7, pc}
 8017d9e:	bf00      	nop
 8017da0:	08027154 	.word	0x08027154
 8017da4:	080272c4 	.word	0x080272c4
 8017da8:	080271c4 	.word	0x080271c4
 8017dac:	080272e0 	.word	0x080272e0
 8017db0:	240082c8 	.word	0x240082c8
 8017db4:	240082c4 	.word	0x240082c4
 8017db8:	240082b8 	.word	0x240082b8
 8017dbc:	240082b4 	.word	0x240082b4

08017dc0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8017dc0:	b580      	push	{r7, lr}
 8017dc2:	b082      	sub	sp, #8
 8017dc4:	af00      	add	r7, sp, #0
 8017dc6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8017dc8:	2101      	movs	r1, #1
 8017dca:	6878      	ldr	r0, [r7, #4]
 8017dcc:	f7ff ff3a 	bl	8017c44 <tcp_abandon>
}
 8017dd0:	bf00      	nop
 8017dd2:	3708      	adds	r7, #8
 8017dd4:	46bd      	mov	sp, r7
 8017dd6:	bd80      	pop	{r7, pc}

08017dd8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8017dd8:	b580      	push	{r7, lr}
 8017dda:	b088      	sub	sp, #32
 8017ddc:	af00      	add	r7, sp, #0
 8017dde:	60f8      	str	r0, [r7, #12]
 8017de0:	60b9      	str	r1, [r7, #8]
 8017de2:	4613      	mov	r3, r2
 8017de4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8017de6:	2304      	movs	r3, #4
 8017de8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8017dea:	68bb      	ldr	r3, [r7, #8]
 8017dec:	2b00      	cmp	r3, #0
 8017dee:	d101      	bne.n	8017df4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8017df0:	4b3e      	ldr	r3, [pc, #248]	; (8017eec <tcp_bind+0x114>)
 8017df2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8017df4:	68fb      	ldr	r3, [r7, #12]
 8017df6:	2b00      	cmp	r3, #0
 8017df8:	d109      	bne.n	8017e0e <tcp_bind+0x36>
 8017dfa:	4b3d      	ldr	r3, [pc, #244]	; (8017ef0 <tcp_bind+0x118>)
 8017dfc:	f240 22a9 	movw	r2, #681	; 0x2a9
 8017e00:	493c      	ldr	r1, [pc, #240]	; (8017ef4 <tcp_bind+0x11c>)
 8017e02:	483d      	ldr	r0, [pc, #244]	; (8017ef8 <tcp_bind+0x120>)
 8017e04:	f009 f832 	bl	8020e6c <iprintf>
 8017e08:	f06f 030f 	mvn.w	r3, #15
 8017e0c:	e06a      	b.n	8017ee4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8017e0e:	68fb      	ldr	r3, [r7, #12]
 8017e10:	7d1b      	ldrb	r3, [r3, #20]
 8017e12:	2b00      	cmp	r3, #0
 8017e14:	d009      	beq.n	8017e2a <tcp_bind+0x52>
 8017e16:	4b36      	ldr	r3, [pc, #216]	; (8017ef0 <tcp_bind+0x118>)
 8017e18:	f240 22ab 	movw	r2, #683	; 0x2ab
 8017e1c:	4937      	ldr	r1, [pc, #220]	; (8017efc <tcp_bind+0x124>)
 8017e1e:	4836      	ldr	r0, [pc, #216]	; (8017ef8 <tcp_bind+0x120>)
 8017e20:	f009 f824 	bl	8020e6c <iprintf>
 8017e24:	f06f 0305 	mvn.w	r3, #5
 8017e28:	e05c      	b.n	8017ee4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8017e2a:	88fb      	ldrh	r3, [r7, #6]
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	d109      	bne.n	8017e44 <tcp_bind+0x6c>
    port = tcp_new_port();
 8017e30:	f000 f9f0 	bl	8018214 <tcp_new_port>
 8017e34:	4603      	mov	r3, r0
 8017e36:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8017e38:	88fb      	ldrh	r3, [r7, #6]
 8017e3a:	2b00      	cmp	r3, #0
 8017e3c:	d135      	bne.n	8017eaa <tcp_bind+0xd2>
      return ERR_BUF;
 8017e3e:	f06f 0301 	mvn.w	r3, #1
 8017e42:	e04f      	b.n	8017ee4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8017e44:	2300      	movs	r3, #0
 8017e46:	61fb      	str	r3, [r7, #28]
 8017e48:	e02b      	b.n	8017ea2 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8017e4a:	4a2d      	ldr	r2, [pc, #180]	; (8017f00 <tcp_bind+0x128>)
 8017e4c:	69fb      	ldr	r3, [r7, #28]
 8017e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017e52:	681b      	ldr	r3, [r3, #0]
 8017e54:	61bb      	str	r3, [r7, #24]
 8017e56:	e01e      	b.n	8017e96 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8017e58:	69bb      	ldr	r3, [r7, #24]
 8017e5a:	8adb      	ldrh	r3, [r3, #22]
 8017e5c:	88fa      	ldrh	r2, [r7, #6]
 8017e5e:	429a      	cmp	r2, r3
 8017e60:	d116      	bne.n	8017e90 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8017e62:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8017e64:	2b00      	cmp	r3, #0
 8017e66:	d010      	beq.n	8017e8a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8017e68:	69bb      	ldr	r3, [r7, #24]
 8017e6a:	681b      	ldr	r3, [r3, #0]
 8017e6c:	2b00      	cmp	r3, #0
 8017e6e:	d00c      	beq.n	8017e8a <tcp_bind+0xb2>
 8017e70:	68bb      	ldr	r3, [r7, #8]
 8017e72:	2b00      	cmp	r3, #0
 8017e74:	d009      	beq.n	8017e8a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8017e76:	68bb      	ldr	r3, [r7, #8]
 8017e78:	681b      	ldr	r3, [r3, #0]
 8017e7a:	2b00      	cmp	r3, #0
 8017e7c:	d005      	beq.n	8017e8a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8017e7e:	69bb      	ldr	r3, [r7, #24]
 8017e80:	681a      	ldr	r2, [r3, #0]
 8017e82:	68bb      	ldr	r3, [r7, #8]
 8017e84:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8017e86:	429a      	cmp	r2, r3
 8017e88:	d102      	bne.n	8017e90 <tcp_bind+0xb8>
              return ERR_USE;
 8017e8a:	f06f 0307 	mvn.w	r3, #7
 8017e8e:	e029      	b.n	8017ee4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8017e90:	69bb      	ldr	r3, [r7, #24]
 8017e92:	68db      	ldr	r3, [r3, #12]
 8017e94:	61bb      	str	r3, [r7, #24]
 8017e96:	69bb      	ldr	r3, [r7, #24]
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	d1dd      	bne.n	8017e58 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8017e9c:	69fb      	ldr	r3, [r7, #28]
 8017e9e:	3301      	adds	r3, #1
 8017ea0:	61fb      	str	r3, [r7, #28]
 8017ea2:	69fa      	ldr	r2, [r7, #28]
 8017ea4:	697b      	ldr	r3, [r7, #20]
 8017ea6:	429a      	cmp	r2, r3
 8017ea8:	dbcf      	blt.n	8017e4a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8017eaa:	68bb      	ldr	r3, [r7, #8]
 8017eac:	2b00      	cmp	r3, #0
 8017eae:	d00c      	beq.n	8017eca <tcp_bind+0xf2>
 8017eb0:	68bb      	ldr	r3, [r7, #8]
 8017eb2:	681b      	ldr	r3, [r3, #0]
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	d008      	beq.n	8017eca <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8017eb8:	68bb      	ldr	r3, [r7, #8]
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	d002      	beq.n	8017ec4 <tcp_bind+0xec>
 8017ebe:	68bb      	ldr	r3, [r7, #8]
 8017ec0:	681b      	ldr	r3, [r3, #0]
 8017ec2:	e000      	b.n	8017ec6 <tcp_bind+0xee>
 8017ec4:	2300      	movs	r3, #0
 8017ec6:	68fa      	ldr	r2, [r7, #12]
 8017ec8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8017eca:	68fb      	ldr	r3, [r7, #12]
 8017ecc:	88fa      	ldrh	r2, [r7, #6]
 8017ece:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8017ed0:	4b0c      	ldr	r3, [pc, #48]	; (8017f04 <tcp_bind+0x12c>)
 8017ed2:	681a      	ldr	r2, [r3, #0]
 8017ed4:	68fb      	ldr	r3, [r7, #12]
 8017ed6:	60da      	str	r2, [r3, #12]
 8017ed8:	4a0a      	ldr	r2, [pc, #40]	; (8017f04 <tcp_bind+0x12c>)
 8017eda:	68fb      	ldr	r3, [r7, #12]
 8017edc:	6013      	str	r3, [r2, #0]
 8017ede:	f005 fdc5 	bl	801da6c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8017ee2:	2300      	movs	r3, #0
}
 8017ee4:	4618      	mov	r0, r3
 8017ee6:	3720      	adds	r7, #32
 8017ee8:	46bd      	mov	sp, r7
 8017eea:	bd80      	pop	{r7, pc}
 8017eec:	0802911c 	.word	0x0802911c
 8017ef0:	08027154 	.word	0x08027154
 8017ef4:	08027314 	.word	0x08027314
 8017ef8:	080271c4 	.word	0x080271c4
 8017efc:	0802732c 	.word	0x0802732c
 8017f00:	080291c8 	.word	0x080291c8
 8017f04:	240082c4 	.word	0x240082c4

08017f08 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8017f08:	b580      	push	{r7, lr}
 8017f0a:	b084      	sub	sp, #16
 8017f0c:	af00      	add	r7, sp, #0
 8017f0e:	60f8      	str	r0, [r7, #12]
 8017f10:	60b9      	str	r1, [r7, #8]
 8017f12:	4613      	mov	r3, r2
 8017f14:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8017f16:	68bb      	ldr	r3, [r7, #8]
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d106      	bne.n	8017f2a <tcp_accept_null+0x22>
 8017f1c:	4b07      	ldr	r3, [pc, #28]	; (8017f3c <tcp_accept_null+0x34>)
 8017f1e:	f240 320f 	movw	r2, #783	; 0x30f
 8017f22:	4907      	ldr	r1, [pc, #28]	; (8017f40 <tcp_accept_null+0x38>)
 8017f24:	4807      	ldr	r0, [pc, #28]	; (8017f44 <tcp_accept_null+0x3c>)
 8017f26:	f008 ffa1 	bl	8020e6c <iprintf>

  tcp_abort(pcb);
 8017f2a:	68b8      	ldr	r0, [r7, #8]
 8017f2c:	f7ff ff48 	bl	8017dc0 <tcp_abort>

  return ERR_ABRT;
 8017f30:	f06f 030c 	mvn.w	r3, #12
}
 8017f34:	4618      	mov	r0, r3
 8017f36:	3710      	adds	r7, #16
 8017f38:	46bd      	mov	sp, r7
 8017f3a:	bd80      	pop	{r7, pc}
 8017f3c:	08027154 	.word	0x08027154
 8017f40:	08027354 	.word	0x08027354
 8017f44:	080271c4 	.word	0x080271c4

08017f48 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8017f48:	b580      	push	{r7, lr}
 8017f4a:	b082      	sub	sp, #8
 8017f4c:	af00      	add	r7, sp, #0
 8017f4e:	6078      	str	r0, [r7, #4]
 8017f50:	460b      	mov	r3, r1
 8017f52:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8017f54:	78fb      	ldrb	r3, [r7, #3]
 8017f56:	2200      	movs	r2, #0
 8017f58:	4619      	mov	r1, r3
 8017f5a:	6878      	ldr	r0, [r7, #4]
 8017f5c:	f000 f806 	bl	8017f6c <tcp_listen_with_backlog_and_err>
 8017f60:	4603      	mov	r3, r0
}
 8017f62:	4618      	mov	r0, r3
 8017f64:	3708      	adds	r7, #8
 8017f66:	46bd      	mov	sp, r7
 8017f68:	bd80      	pop	{r7, pc}
	...

08017f6c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8017f6c:	b580      	push	{r7, lr}
 8017f6e:	b088      	sub	sp, #32
 8017f70:	af00      	add	r7, sp, #0
 8017f72:	60f8      	str	r0, [r7, #12]
 8017f74:	460b      	mov	r3, r1
 8017f76:	607a      	str	r2, [r7, #4]
 8017f78:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8017f7a:	2300      	movs	r3, #0
 8017f7c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8017f7e:	68fb      	ldr	r3, [r7, #12]
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	d109      	bne.n	8017f98 <tcp_listen_with_backlog_and_err+0x2c>
 8017f84:	4b47      	ldr	r3, [pc, #284]	; (80180a4 <tcp_listen_with_backlog_and_err+0x138>)
 8017f86:	f240 3259 	movw	r2, #857	; 0x359
 8017f8a:	4947      	ldr	r1, [pc, #284]	; (80180a8 <tcp_listen_with_backlog_and_err+0x13c>)
 8017f8c:	4847      	ldr	r0, [pc, #284]	; (80180ac <tcp_listen_with_backlog_and_err+0x140>)
 8017f8e:	f008 ff6d 	bl	8020e6c <iprintf>
 8017f92:	23f0      	movs	r3, #240	; 0xf0
 8017f94:	76fb      	strb	r3, [r7, #27]
 8017f96:	e079      	b.n	801808c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8017f98:	68fb      	ldr	r3, [r7, #12]
 8017f9a:	7d1b      	ldrb	r3, [r3, #20]
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	d009      	beq.n	8017fb4 <tcp_listen_with_backlog_and_err+0x48>
 8017fa0:	4b40      	ldr	r3, [pc, #256]	; (80180a4 <tcp_listen_with_backlog_and_err+0x138>)
 8017fa2:	f240 325a 	movw	r2, #858	; 0x35a
 8017fa6:	4942      	ldr	r1, [pc, #264]	; (80180b0 <tcp_listen_with_backlog_and_err+0x144>)
 8017fa8:	4840      	ldr	r0, [pc, #256]	; (80180ac <tcp_listen_with_backlog_and_err+0x140>)
 8017faa:	f008 ff5f 	bl	8020e6c <iprintf>
 8017fae:	23f1      	movs	r3, #241	; 0xf1
 8017fb0:	76fb      	strb	r3, [r7, #27]
 8017fb2:	e06b      	b.n	801808c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8017fb4:	68fb      	ldr	r3, [r7, #12]
 8017fb6:	7d1b      	ldrb	r3, [r3, #20]
 8017fb8:	2b01      	cmp	r3, #1
 8017fba:	d104      	bne.n	8017fc6 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8017fbc:	68fb      	ldr	r3, [r7, #12]
 8017fbe:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8017fc0:	23f7      	movs	r3, #247	; 0xf7
 8017fc2:	76fb      	strb	r3, [r7, #27]
    goto done;
 8017fc4:	e062      	b.n	801808c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8017fc6:	2002      	movs	r0, #2
 8017fc8:	f7fe f9d4 	bl	8016374 <memp_malloc>
 8017fcc:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8017fce:	69fb      	ldr	r3, [r7, #28]
 8017fd0:	2b00      	cmp	r3, #0
 8017fd2:	d102      	bne.n	8017fda <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8017fd4:	23ff      	movs	r3, #255	; 0xff
 8017fd6:	76fb      	strb	r3, [r7, #27]
    goto done;
 8017fd8:	e058      	b.n	801808c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8017fda:	68fb      	ldr	r3, [r7, #12]
 8017fdc:	691a      	ldr	r2, [r3, #16]
 8017fde:	69fb      	ldr	r3, [r7, #28]
 8017fe0:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8017fe2:	68fb      	ldr	r3, [r7, #12]
 8017fe4:	8ada      	ldrh	r2, [r3, #22]
 8017fe6:	69fb      	ldr	r3, [r7, #28]
 8017fe8:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8017fea:	69fb      	ldr	r3, [r7, #28]
 8017fec:	2201      	movs	r2, #1
 8017fee:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8017ff0:	68fb      	ldr	r3, [r7, #12]
 8017ff2:	7d5a      	ldrb	r2, [r3, #21]
 8017ff4:	69fb      	ldr	r3, [r7, #28]
 8017ff6:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8017ff8:	68fb      	ldr	r3, [r7, #12]
 8017ffa:	7a5a      	ldrb	r2, [r3, #9]
 8017ffc:	69fb      	ldr	r3, [r7, #28]
 8017ffe:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8018000:	69fb      	ldr	r3, [r7, #28]
 8018002:	2200      	movs	r2, #0
 8018004:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8018006:	68fb      	ldr	r3, [r7, #12]
 8018008:	7ada      	ldrb	r2, [r3, #11]
 801800a:	69fb      	ldr	r3, [r7, #28]
 801800c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 801800e:	68fb      	ldr	r3, [r7, #12]
 8018010:	7a9a      	ldrb	r2, [r3, #10]
 8018012:	69fb      	ldr	r3, [r7, #28]
 8018014:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8018016:	68fb      	ldr	r3, [r7, #12]
 8018018:	681a      	ldr	r2, [r3, #0]
 801801a:	69fb      	ldr	r3, [r7, #28]
 801801c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 801801e:	68fb      	ldr	r3, [r7, #12]
 8018020:	8adb      	ldrh	r3, [r3, #22]
 8018022:	2b00      	cmp	r3, #0
 8018024:	d021      	beq.n	801806a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8018026:	4b23      	ldr	r3, [pc, #140]	; (80180b4 <tcp_listen_with_backlog_and_err+0x148>)
 8018028:	681b      	ldr	r3, [r3, #0]
 801802a:	68fa      	ldr	r2, [r7, #12]
 801802c:	429a      	cmp	r2, r3
 801802e:	d105      	bne.n	801803c <tcp_listen_with_backlog_and_err+0xd0>
 8018030:	4b20      	ldr	r3, [pc, #128]	; (80180b4 <tcp_listen_with_backlog_and_err+0x148>)
 8018032:	681b      	ldr	r3, [r3, #0]
 8018034:	68db      	ldr	r3, [r3, #12]
 8018036:	4a1f      	ldr	r2, [pc, #124]	; (80180b4 <tcp_listen_with_backlog_and_err+0x148>)
 8018038:	6013      	str	r3, [r2, #0]
 801803a:	e013      	b.n	8018064 <tcp_listen_with_backlog_and_err+0xf8>
 801803c:	4b1d      	ldr	r3, [pc, #116]	; (80180b4 <tcp_listen_with_backlog_and_err+0x148>)
 801803e:	681b      	ldr	r3, [r3, #0]
 8018040:	617b      	str	r3, [r7, #20]
 8018042:	e00c      	b.n	801805e <tcp_listen_with_backlog_and_err+0xf2>
 8018044:	697b      	ldr	r3, [r7, #20]
 8018046:	68db      	ldr	r3, [r3, #12]
 8018048:	68fa      	ldr	r2, [r7, #12]
 801804a:	429a      	cmp	r2, r3
 801804c:	d104      	bne.n	8018058 <tcp_listen_with_backlog_and_err+0xec>
 801804e:	68fb      	ldr	r3, [r7, #12]
 8018050:	68da      	ldr	r2, [r3, #12]
 8018052:	697b      	ldr	r3, [r7, #20]
 8018054:	60da      	str	r2, [r3, #12]
 8018056:	e005      	b.n	8018064 <tcp_listen_with_backlog_and_err+0xf8>
 8018058:	697b      	ldr	r3, [r7, #20]
 801805a:	68db      	ldr	r3, [r3, #12]
 801805c:	617b      	str	r3, [r7, #20]
 801805e:	697b      	ldr	r3, [r7, #20]
 8018060:	2b00      	cmp	r3, #0
 8018062:	d1ef      	bne.n	8018044 <tcp_listen_with_backlog_and_err+0xd8>
 8018064:	68fb      	ldr	r3, [r7, #12]
 8018066:	2200      	movs	r2, #0
 8018068:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 801806a:	68f8      	ldr	r0, [r7, #12]
 801806c:	f7ff fbc0 	bl	80177f0 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8018070:	69fb      	ldr	r3, [r7, #28]
 8018072:	4a11      	ldr	r2, [pc, #68]	; (80180b8 <tcp_listen_with_backlog_and_err+0x14c>)
 8018074:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8018076:	4b11      	ldr	r3, [pc, #68]	; (80180bc <tcp_listen_with_backlog_and_err+0x150>)
 8018078:	681a      	ldr	r2, [r3, #0]
 801807a:	69fb      	ldr	r3, [r7, #28]
 801807c:	60da      	str	r2, [r3, #12]
 801807e:	4a0f      	ldr	r2, [pc, #60]	; (80180bc <tcp_listen_with_backlog_and_err+0x150>)
 8018080:	69fb      	ldr	r3, [r7, #28]
 8018082:	6013      	str	r3, [r2, #0]
 8018084:	f005 fcf2 	bl	801da6c <tcp_timer_needed>
  res = ERR_OK;
 8018088:	2300      	movs	r3, #0
 801808a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	2b00      	cmp	r3, #0
 8018090:	d002      	beq.n	8018098 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8018092:	687b      	ldr	r3, [r7, #4]
 8018094:	7efa      	ldrb	r2, [r7, #27]
 8018096:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8018098:	69fb      	ldr	r3, [r7, #28]
}
 801809a:	4618      	mov	r0, r3
 801809c:	3720      	adds	r7, #32
 801809e:	46bd      	mov	sp, r7
 80180a0:	bd80      	pop	{r7, pc}
 80180a2:	bf00      	nop
 80180a4:	08027154 	.word	0x08027154
 80180a8:	08027374 	.word	0x08027374
 80180ac:	080271c4 	.word	0x080271c4
 80180b0:	080273a4 	.word	0x080273a4
 80180b4:	240082c4 	.word	0x240082c4
 80180b8:	08017f09 	.word	0x08017f09
 80180bc:	240082c0 	.word	0x240082c0

080180c0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80180c0:	b580      	push	{r7, lr}
 80180c2:	b084      	sub	sp, #16
 80180c4:	af00      	add	r7, sp, #0
 80180c6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	2b00      	cmp	r3, #0
 80180cc:	d106      	bne.n	80180dc <tcp_update_rcv_ann_wnd+0x1c>
 80180ce:	4b25      	ldr	r3, [pc, #148]	; (8018164 <tcp_update_rcv_ann_wnd+0xa4>)
 80180d0:	f240 32a6 	movw	r2, #934	; 0x3a6
 80180d4:	4924      	ldr	r1, [pc, #144]	; (8018168 <tcp_update_rcv_ann_wnd+0xa8>)
 80180d6:	4825      	ldr	r0, [pc, #148]	; (801816c <tcp_update_rcv_ann_wnd+0xac>)
 80180d8:	f008 fec8 	bl	8020e6c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80180e0:	687a      	ldr	r2, [r7, #4]
 80180e2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80180e4:	4413      	add	r3, r2
 80180e6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180ec:	687a      	ldr	r2, [r7, #4]
 80180ee:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80180f0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80180f4:	bf28      	it	cs
 80180f6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80180fa:	b292      	uxth	r2, r2
 80180fc:	4413      	add	r3, r2
 80180fe:	68fa      	ldr	r2, [r7, #12]
 8018100:	1ad3      	subs	r3, r2, r3
 8018102:	2b00      	cmp	r3, #0
 8018104:	db08      	blt.n	8018118 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018112:	68fa      	ldr	r2, [r7, #12]
 8018114:	1ad3      	subs	r3, r2, r3
 8018116:	e020      	b.n	801815a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018120:	1ad3      	subs	r3, r2, r3
 8018122:	2b00      	cmp	r3, #0
 8018124:	dd03      	ble.n	801812e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8018126:	687b      	ldr	r3, [r7, #4]
 8018128:	2200      	movs	r2, #0
 801812a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801812c:	e014      	b.n	8018158 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018136:	1ad3      	subs	r3, r2, r3
 8018138:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801813a:	68bb      	ldr	r3, [r7, #8]
 801813c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018140:	d306      	bcc.n	8018150 <tcp_update_rcv_ann_wnd+0x90>
 8018142:	4b08      	ldr	r3, [pc, #32]	; (8018164 <tcp_update_rcv_ann_wnd+0xa4>)
 8018144:	f240 32b6 	movw	r2, #950	; 0x3b6
 8018148:	4909      	ldr	r1, [pc, #36]	; (8018170 <tcp_update_rcv_ann_wnd+0xb0>)
 801814a:	4808      	ldr	r0, [pc, #32]	; (801816c <tcp_update_rcv_ann_wnd+0xac>)
 801814c:	f008 fe8e 	bl	8020e6c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8018150:	68bb      	ldr	r3, [r7, #8]
 8018152:	b29a      	uxth	r2, r3
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8018158:	2300      	movs	r3, #0
  }
}
 801815a:	4618      	mov	r0, r3
 801815c:	3710      	adds	r7, #16
 801815e:	46bd      	mov	sp, r7
 8018160:	bd80      	pop	{r7, pc}
 8018162:	bf00      	nop
 8018164:	08027154 	.word	0x08027154
 8018168:	080273dc 	.word	0x080273dc
 801816c:	080271c4 	.word	0x080271c4
 8018170:	08027400 	.word	0x08027400

08018174 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8018174:	b580      	push	{r7, lr}
 8018176:	b084      	sub	sp, #16
 8018178:	af00      	add	r7, sp, #0
 801817a:	6078      	str	r0, [r7, #4]
 801817c:	460b      	mov	r3, r1
 801817e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8018180:	687b      	ldr	r3, [r7, #4]
 8018182:	2b00      	cmp	r3, #0
 8018184:	d107      	bne.n	8018196 <tcp_recved+0x22>
 8018186:	4b1f      	ldr	r3, [pc, #124]	; (8018204 <tcp_recved+0x90>)
 8018188:	f240 32cf 	movw	r2, #975	; 0x3cf
 801818c:	491e      	ldr	r1, [pc, #120]	; (8018208 <tcp_recved+0x94>)
 801818e:	481f      	ldr	r0, [pc, #124]	; (801820c <tcp_recved+0x98>)
 8018190:	f008 fe6c 	bl	8020e6c <iprintf>
 8018194:	e032      	b.n	80181fc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	7d1b      	ldrb	r3, [r3, #20]
 801819a:	2b01      	cmp	r3, #1
 801819c:	d106      	bne.n	80181ac <tcp_recved+0x38>
 801819e:	4b19      	ldr	r3, [pc, #100]	; (8018204 <tcp_recved+0x90>)
 80181a0:	f240 32d2 	movw	r2, #978	; 0x3d2
 80181a4:	491a      	ldr	r1, [pc, #104]	; (8018210 <tcp_recved+0x9c>)
 80181a6:	4819      	ldr	r0, [pc, #100]	; (801820c <tcp_recved+0x98>)
 80181a8:	f008 fe60 	bl	8020e6c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80181b0:	887b      	ldrh	r3, [r7, #2]
 80181b2:	4413      	add	r3, r2
 80181b4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80181b6:	89fb      	ldrh	r3, [r7, #14]
 80181b8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80181bc:	d804      	bhi.n	80181c8 <tcp_recved+0x54>
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80181c2:	89fa      	ldrh	r2, [r7, #14]
 80181c4:	429a      	cmp	r2, r3
 80181c6:	d204      	bcs.n	80181d2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80181ce:	851a      	strh	r2, [r3, #40]	; 0x28
 80181d0:	e002      	b.n	80181d8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80181d2:	687b      	ldr	r3, [r7, #4]
 80181d4:	89fa      	ldrh	r2, [r7, #14]
 80181d6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80181d8:	6878      	ldr	r0, [r7, #4]
 80181da:	f7ff ff71 	bl	80180c0 <tcp_update_rcv_ann_wnd>
 80181de:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80181e0:	68bb      	ldr	r3, [r7, #8]
 80181e2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80181e6:	d309      	bcc.n	80181fc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	8b5b      	ldrh	r3, [r3, #26]
 80181ec:	f043 0302 	orr.w	r3, r3, #2
 80181f0:	b29a      	uxth	r2, r3
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80181f6:	6878      	ldr	r0, [r7, #4]
 80181f8:	f004 fcc2 	bl	801cb80 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80181fc:	3710      	adds	r7, #16
 80181fe:	46bd      	mov	sp, r7
 8018200:	bd80      	pop	{r7, pc}
 8018202:	bf00      	nop
 8018204:	08027154 	.word	0x08027154
 8018208:	0802741c 	.word	0x0802741c
 801820c:	080271c4 	.word	0x080271c4
 8018210:	08027434 	.word	0x08027434

08018214 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8018214:	b480      	push	{r7}
 8018216:	b083      	sub	sp, #12
 8018218:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801821a:	2300      	movs	r3, #0
 801821c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801821e:	4b1e      	ldr	r3, [pc, #120]	; (8018298 <tcp_new_port+0x84>)
 8018220:	881b      	ldrh	r3, [r3, #0]
 8018222:	3301      	adds	r3, #1
 8018224:	b29a      	uxth	r2, r3
 8018226:	4b1c      	ldr	r3, [pc, #112]	; (8018298 <tcp_new_port+0x84>)
 8018228:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801822a:	4b1b      	ldr	r3, [pc, #108]	; (8018298 <tcp_new_port+0x84>)
 801822c:	881b      	ldrh	r3, [r3, #0]
 801822e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018232:	4293      	cmp	r3, r2
 8018234:	d103      	bne.n	801823e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8018236:	4b18      	ldr	r3, [pc, #96]	; (8018298 <tcp_new_port+0x84>)
 8018238:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801823c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801823e:	2300      	movs	r3, #0
 8018240:	71fb      	strb	r3, [r7, #7]
 8018242:	e01e      	b.n	8018282 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8018244:	79fb      	ldrb	r3, [r7, #7]
 8018246:	4a15      	ldr	r2, [pc, #84]	; (801829c <tcp_new_port+0x88>)
 8018248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801824c:	681b      	ldr	r3, [r3, #0]
 801824e:	603b      	str	r3, [r7, #0]
 8018250:	e011      	b.n	8018276 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8018252:	683b      	ldr	r3, [r7, #0]
 8018254:	8ada      	ldrh	r2, [r3, #22]
 8018256:	4b10      	ldr	r3, [pc, #64]	; (8018298 <tcp_new_port+0x84>)
 8018258:	881b      	ldrh	r3, [r3, #0]
 801825a:	429a      	cmp	r2, r3
 801825c:	d108      	bne.n	8018270 <tcp_new_port+0x5c>
        n++;
 801825e:	88bb      	ldrh	r3, [r7, #4]
 8018260:	3301      	adds	r3, #1
 8018262:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8018264:	88bb      	ldrh	r3, [r7, #4]
 8018266:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801826a:	d3d8      	bcc.n	801821e <tcp_new_port+0xa>
          return 0;
 801826c:	2300      	movs	r3, #0
 801826e:	e00d      	b.n	801828c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8018270:	683b      	ldr	r3, [r7, #0]
 8018272:	68db      	ldr	r3, [r3, #12]
 8018274:	603b      	str	r3, [r7, #0]
 8018276:	683b      	ldr	r3, [r7, #0]
 8018278:	2b00      	cmp	r3, #0
 801827a:	d1ea      	bne.n	8018252 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801827c:	79fb      	ldrb	r3, [r7, #7]
 801827e:	3301      	adds	r3, #1
 8018280:	71fb      	strb	r3, [r7, #7]
 8018282:	79fb      	ldrb	r3, [r7, #7]
 8018284:	2b03      	cmp	r3, #3
 8018286:	d9dd      	bls.n	8018244 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8018288:	4b03      	ldr	r3, [pc, #12]	; (8018298 <tcp_new_port+0x84>)
 801828a:	881b      	ldrh	r3, [r3, #0]
}
 801828c:	4618      	mov	r0, r3
 801828e:	370c      	adds	r7, #12
 8018290:	46bd      	mov	sp, r7
 8018292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018296:	4770      	bx	lr
 8018298:	2400002c 	.word	0x2400002c
 801829c:	080291c8 	.word	0x080291c8

080182a0 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 80182a0:	b580      	push	{r7, lr}
 80182a2:	b08a      	sub	sp, #40	; 0x28
 80182a4:	af00      	add	r7, sp, #0
 80182a6:	60f8      	str	r0, [r7, #12]
 80182a8:	60b9      	str	r1, [r7, #8]
 80182aa:	603b      	str	r3, [r7, #0]
 80182ac:	4613      	mov	r3, r2
 80182ae:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 80182b0:	2300      	movs	r3, #0
 80182b2:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80182b4:	68fb      	ldr	r3, [r7, #12]
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d109      	bne.n	80182ce <tcp_connect+0x2e>
 80182ba:	4b7d      	ldr	r3, [pc, #500]	; (80184b0 <tcp_connect+0x210>)
 80182bc:	f240 4235 	movw	r2, #1077	; 0x435
 80182c0:	497c      	ldr	r1, [pc, #496]	; (80184b4 <tcp_connect+0x214>)
 80182c2:	487d      	ldr	r0, [pc, #500]	; (80184b8 <tcp_connect+0x218>)
 80182c4:	f008 fdd2 	bl	8020e6c <iprintf>
 80182c8:	f06f 030f 	mvn.w	r3, #15
 80182cc:	e0ec      	b.n	80184a8 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80182ce:	68bb      	ldr	r3, [r7, #8]
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	d109      	bne.n	80182e8 <tcp_connect+0x48>
 80182d4:	4b76      	ldr	r3, [pc, #472]	; (80184b0 <tcp_connect+0x210>)
 80182d6:	f240 4236 	movw	r2, #1078	; 0x436
 80182da:	4978      	ldr	r1, [pc, #480]	; (80184bc <tcp_connect+0x21c>)
 80182dc:	4876      	ldr	r0, [pc, #472]	; (80184b8 <tcp_connect+0x218>)
 80182de:	f008 fdc5 	bl	8020e6c <iprintf>
 80182e2:	f06f 030f 	mvn.w	r3, #15
 80182e6:	e0df      	b.n	80184a8 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 80182e8:	68fb      	ldr	r3, [r7, #12]
 80182ea:	7d1b      	ldrb	r3, [r3, #20]
 80182ec:	2b00      	cmp	r3, #0
 80182ee:	d009      	beq.n	8018304 <tcp_connect+0x64>
 80182f0:	4b6f      	ldr	r3, [pc, #444]	; (80184b0 <tcp_connect+0x210>)
 80182f2:	f44f 6287 	mov.w	r2, #1080	; 0x438
 80182f6:	4972      	ldr	r1, [pc, #456]	; (80184c0 <tcp_connect+0x220>)
 80182f8:	486f      	ldr	r0, [pc, #444]	; (80184b8 <tcp_connect+0x218>)
 80182fa:	f008 fdb7 	bl	8020e6c <iprintf>
 80182fe:	f06f 0309 	mvn.w	r3, #9
 8018302:	e0d1      	b.n	80184a8 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8018304:	68bb      	ldr	r3, [r7, #8]
 8018306:	2b00      	cmp	r3, #0
 8018308:	d002      	beq.n	8018310 <tcp_connect+0x70>
 801830a:	68bb      	ldr	r3, [r7, #8]
 801830c:	681b      	ldr	r3, [r3, #0]
 801830e:	e000      	b.n	8018312 <tcp_connect+0x72>
 8018310:	2300      	movs	r3, #0
 8018312:	68fa      	ldr	r2, [r7, #12]
 8018314:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8018316:	68fb      	ldr	r3, [r7, #12]
 8018318:	88fa      	ldrh	r2, [r7, #6]
 801831a:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801831c:	68fb      	ldr	r3, [r7, #12]
 801831e:	7a1b      	ldrb	r3, [r3, #8]
 8018320:	2b00      	cmp	r3, #0
 8018322:	d006      	beq.n	8018332 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8018324:	68fb      	ldr	r3, [r7, #12]
 8018326:	7a1b      	ldrb	r3, [r3, #8]
 8018328:	4618      	mov	r0, r3
 801832a:	f7fe fba9 	bl	8016a80 <netif_get_by_index>
 801832e:	6278      	str	r0, [r7, #36]	; 0x24
 8018330:	e005      	b.n	801833e <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8018332:	68fb      	ldr	r3, [r7, #12]
 8018334:	3304      	adds	r3, #4
 8018336:	4618      	mov	r0, r3
 8018338:	f7fc fadc 	bl	80148f4 <ip4_route>
 801833c:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 801833e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018340:	2b00      	cmp	r3, #0
 8018342:	d102      	bne.n	801834a <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8018344:	f06f 0303 	mvn.w	r3, #3
 8018348:	e0ae      	b.n	80184a8 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 801834a:	68fb      	ldr	r3, [r7, #12]
 801834c:	2b00      	cmp	r3, #0
 801834e:	d003      	beq.n	8018358 <tcp_connect+0xb8>
 8018350:	68fb      	ldr	r3, [r7, #12]
 8018352:	681b      	ldr	r3, [r3, #0]
 8018354:	2b00      	cmp	r3, #0
 8018356:	d111      	bne.n	801837c <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8018358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801835a:	2b00      	cmp	r3, #0
 801835c:	d002      	beq.n	8018364 <tcp_connect+0xc4>
 801835e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018360:	3304      	adds	r3, #4
 8018362:	e000      	b.n	8018366 <tcp_connect+0xc6>
 8018364:	2300      	movs	r3, #0
 8018366:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8018368:	69fb      	ldr	r3, [r7, #28]
 801836a:	2b00      	cmp	r3, #0
 801836c:	d102      	bne.n	8018374 <tcp_connect+0xd4>
      return ERR_RTE;
 801836e:	f06f 0303 	mvn.w	r3, #3
 8018372:	e099      	b.n	80184a8 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8018374:	69fb      	ldr	r3, [r7, #28]
 8018376:	681a      	ldr	r2, [r3, #0]
 8018378:	68fb      	ldr	r3, [r7, #12]
 801837a:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 801837c:	68fb      	ldr	r3, [r7, #12]
 801837e:	8adb      	ldrh	r3, [r3, #22]
 8018380:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8018382:	68fb      	ldr	r3, [r7, #12]
 8018384:	8adb      	ldrh	r3, [r3, #22]
 8018386:	2b00      	cmp	r3, #0
 8018388:	d10c      	bne.n	80183a4 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 801838a:	f7ff ff43 	bl	8018214 <tcp_new_port>
 801838e:	4603      	mov	r3, r0
 8018390:	461a      	mov	r2, r3
 8018392:	68fb      	ldr	r3, [r7, #12]
 8018394:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8018396:	68fb      	ldr	r3, [r7, #12]
 8018398:	8adb      	ldrh	r3, [r3, #22]
 801839a:	2b00      	cmp	r3, #0
 801839c:	d102      	bne.n	80183a4 <tcp_connect+0x104>
      return ERR_BUF;
 801839e:	f06f 0301 	mvn.w	r3, #1
 80183a2:	e081      	b.n	80184a8 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 80183a4:	68f8      	ldr	r0, [r7, #12]
 80183a6:	f001 f867 	bl	8019478 <tcp_next_iss>
 80183aa:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 80183ac:	68fb      	ldr	r3, [r7, #12]
 80183ae:	2200      	movs	r2, #0
 80183b0:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 80183b2:	68fb      	ldr	r3, [r7, #12]
 80183b4:	697a      	ldr	r2, [r7, #20]
 80183b6:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 80183b8:	697b      	ldr	r3, [r7, #20]
 80183ba:	1e5a      	subs	r2, r3, #1
 80183bc:	68fb      	ldr	r3, [r7, #12]
 80183be:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 80183c0:	697b      	ldr	r3, [r7, #20]
 80183c2:	1e5a      	subs	r2, r3, #1
 80183c4:	68fb      	ldr	r3, [r7, #12]
 80183c6:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 80183c8:	697b      	ldr	r3, [r7, #20]
 80183ca:	1e5a      	subs	r2, r3, #1
 80183cc:	68fb      	ldr	r3, [r7, #12]
 80183ce:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80183d0:	68fb      	ldr	r3, [r7, #12]
 80183d2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80183d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80183d8:	68fb      	ldr	r3, [r7, #12]
 80183da:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80183dc:	68fb      	ldr	r3, [r7, #12]
 80183de:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80183e0:	68fb      	ldr	r3, [r7, #12]
 80183e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80183e4:	68fb      	ldr	r3, [r7, #12]
 80183e6:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 80183e8:	68fb      	ldr	r3, [r7, #12]
 80183ea:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80183ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 80183f2:	68fb      	ldr	r3, [r7, #12]
 80183f4:	f44f 7206 	mov.w	r2, #536	; 0x218
 80183f8:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 80183fa:	68fb      	ldr	r3, [r7, #12]
 80183fc:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 80183fe:	68fb      	ldr	r3, [r7, #12]
 8018400:	3304      	adds	r3, #4
 8018402:	461a      	mov	r2, r3
 8018404:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018406:	f001 f85d 	bl	80194c4 <tcp_eff_send_mss_netif>
 801840a:	4603      	mov	r3, r0
 801840c:	461a      	mov	r2, r3
 801840e:	68fb      	ldr	r3, [r7, #12]
 8018410:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8018412:	68fb      	ldr	r3, [r7, #12]
 8018414:	2201      	movs	r2, #1
 8018416:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 801841a:	68fb      	ldr	r3, [r7, #12]
 801841c:	683a      	ldr	r2, [r7, #0]
 801841e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8018422:	2102      	movs	r1, #2
 8018424:	68f8      	ldr	r0, [r7, #12]
 8018426:	f004 fabd 	bl	801c9a4 <tcp_enqueue_flags>
 801842a:	4603      	mov	r3, r0
 801842c:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 801842e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018432:	2b00      	cmp	r3, #0
 8018434:	d136      	bne.n	80184a4 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8018436:	68fb      	ldr	r3, [r7, #12]
 8018438:	2202      	movs	r2, #2
 801843a:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 801843c:	8b7b      	ldrh	r3, [r7, #26]
 801843e:	2b00      	cmp	r3, #0
 8018440:	d021      	beq.n	8018486 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8018442:	4b20      	ldr	r3, [pc, #128]	; (80184c4 <tcp_connect+0x224>)
 8018444:	681b      	ldr	r3, [r3, #0]
 8018446:	68fa      	ldr	r2, [r7, #12]
 8018448:	429a      	cmp	r2, r3
 801844a:	d105      	bne.n	8018458 <tcp_connect+0x1b8>
 801844c:	4b1d      	ldr	r3, [pc, #116]	; (80184c4 <tcp_connect+0x224>)
 801844e:	681b      	ldr	r3, [r3, #0]
 8018450:	68db      	ldr	r3, [r3, #12]
 8018452:	4a1c      	ldr	r2, [pc, #112]	; (80184c4 <tcp_connect+0x224>)
 8018454:	6013      	str	r3, [r2, #0]
 8018456:	e013      	b.n	8018480 <tcp_connect+0x1e0>
 8018458:	4b1a      	ldr	r3, [pc, #104]	; (80184c4 <tcp_connect+0x224>)
 801845a:	681b      	ldr	r3, [r3, #0]
 801845c:	623b      	str	r3, [r7, #32]
 801845e:	e00c      	b.n	801847a <tcp_connect+0x1da>
 8018460:	6a3b      	ldr	r3, [r7, #32]
 8018462:	68db      	ldr	r3, [r3, #12]
 8018464:	68fa      	ldr	r2, [r7, #12]
 8018466:	429a      	cmp	r2, r3
 8018468:	d104      	bne.n	8018474 <tcp_connect+0x1d4>
 801846a:	68fb      	ldr	r3, [r7, #12]
 801846c:	68da      	ldr	r2, [r3, #12]
 801846e:	6a3b      	ldr	r3, [r7, #32]
 8018470:	60da      	str	r2, [r3, #12]
 8018472:	e005      	b.n	8018480 <tcp_connect+0x1e0>
 8018474:	6a3b      	ldr	r3, [r7, #32]
 8018476:	68db      	ldr	r3, [r3, #12]
 8018478:	623b      	str	r3, [r7, #32]
 801847a:	6a3b      	ldr	r3, [r7, #32]
 801847c:	2b00      	cmp	r3, #0
 801847e:	d1ef      	bne.n	8018460 <tcp_connect+0x1c0>
 8018480:	68fb      	ldr	r3, [r7, #12]
 8018482:	2200      	movs	r2, #0
 8018484:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8018486:	4b10      	ldr	r3, [pc, #64]	; (80184c8 <tcp_connect+0x228>)
 8018488:	681a      	ldr	r2, [r3, #0]
 801848a:	68fb      	ldr	r3, [r7, #12]
 801848c:	60da      	str	r2, [r3, #12]
 801848e:	4a0e      	ldr	r2, [pc, #56]	; (80184c8 <tcp_connect+0x228>)
 8018490:	68fb      	ldr	r3, [r7, #12]
 8018492:	6013      	str	r3, [r2, #0]
 8018494:	f005 faea 	bl	801da6c <tcp_timer_needed>
 8018498:	4b0c      	ldr	r3, [pc, #48]	; (80184cc <tcp_connect+0x22c>)
 801849a:	2201      	movs	r2, #1
 801849c:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 801849e:	68f8      	ldr	r0, [r7, #12]
 80184a0:	f004 fb6e 	bl	801cb80 <tcp_output>
  }
  return ret;
 80184a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80184a8:	4618      	mov	r0, r3
 80184aa:	3728      	adds	r7, #40	; 0x28
 80184ac:	46bd      	mov	sp, r7
 80184ae:	bd80      	pop	{r7, pc}
 80184b0:	08027154 	.word	0x08027154
 80184b4:	0802745c 	.word	0x0802745c
 80184b8:	080271c4 	.word	0x080271c4
 80184bc:	08027478 	.word	0x08027478
 80184c0:	08027494 	.word	0x08027494
 80184c4:	240082c4 	.word	0x240082c4
 80184c8:	240082b8 	.word	0x240082b8
 80184cc:	240082b4 	.word	0x240082b4

080184d0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80184d0:	b5b0      	push	{r4, r5, r7, lr}
 80184d2:	b090      	sub	sp, #64	; 0x40
 80184d4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80184d6:	2300      	movs	r3, #0
 80184d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80184dc:	4b94      	ldr	r3, [pc, #592]	; (8018730 <tcp_slowtmr+0x260>)
 80184de:	681b      	ldr	r3, [r3, #0]
 80184e0:	3301      	adds	r3, #1
 80184e2:	4a93      	ldr	r2, [pc, #588]	; (8018730 <tcp_slowtmr+0x260>)
 80184e4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80184e6:	4b93      	ldr	r3, [pc, #588]	; (8018734 <tcp_slowtmr+0x264>)
 80184e8:	781b      	ldrb	r3, [r3, #0]
 80184ea:	3301      	adds	r3, #1
 80184ec:	b2da      	uxtb	r2, r3
 80184ee:	4b91      	ldr	r3, [pc, #580]	; (8018734 <tcp_slowtmr+0x264>)
 80184f0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80184f2:	2300      	movs	r3, #0
 80184f4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80184f6:	4b90      	ldr	r3, [pc, #576]	; (8018738 <tcp_slowtmr+0x268>)
 80184f8:	681b      	ldr	r3, [r3, #0]
 80184fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80184fc:	e29d      	b.n	8018a3a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80184fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018500:	7d1b      	ldrb	r3, [r3, #20]
 8018502:	2b00      	cmp	r3, #0
 8018504:	d106      	bne.n	8018514 <tcp_slowtmr+0x44>
 8018506:	4b8d      	ldr	r3, [pc, #564]	; (801873c <tcp_slowtmr+0x26c>)
 8018508:	f240 42be 	movw	r2, #1214	; 0x4be
 801850c:	498c      	ldr	r1, [pc, #560]	; (8018740 <tcp_slowtmr+0x270>)
 801850e:	488d      	ldr	r0, [pc, #564]	; (8018744 <tcp_slowtmr+0x274>)
 8018510:	f008 fcac 	bl	8020e6c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8018514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018516:	7d1b      	ldrb	r3, [r3, #20]
 8018518:	2b01      	cmp	r3, #1
 801851a:	d106      	bne.n	801852a <tcp_slowtmr+0x5a>
 801851c:	4b87      	ldr	r3, [pc, #540]	; (801873c <tcp_slowtmr+0x26c>)
 801851e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8018522:	4989      	ldr	r1, [pc, #548]	; (8018748 <tcp_slowtmr+0x278>)
 8018524:	4887      	ldr	r0, [pc, #540]	; (8018744 <tcp_slowtmr+0x274>)
 8018526:	f008 fca1 	bl	8020e6c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801852a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801852c:	7d1b      	ldrb	r3, [r3, #20]
 801852e:	2b0a      	cmp	r3, #10
 8018530:	d106      	bne.n	8018540 <tcp_slowtmr+0x70>
 8018532:	4b82      	ldr	r3, [pc, #520]	; (801873c <tcp_slowtmr+0x26c>)
 8018534:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8018538:	4984      	ldr	r1, [pc, #528]	; (801874c <tcp_slowtmr+0x27c>)
 801853a:	4882      	ldr	r0, [pc, #520]	; (8018744 <tcp_slowtmr+0x274>)
 801853c:	f008 fc96 	bl	8020e6c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8018540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018542:	7f9a      	ldrb	r2, [r3, #30]
 8018544:	4b7b      	ldr	r3, [pc, #492]	; (8018734 <tcp_slowtmr+0x264>)
 8018546:	781b      	ldrb	r3, [r3, #0]
 8018548:	429a      	cmp	r2, r3
 801854a:	d105      	bne.n	8018558 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 801854c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801854e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8018550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018552:	68db      	ldr	r3, [r3, #12]
 8018554:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8018556:	e270      	b.n	8018a3a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8018558:	4b76      	ldr	r3, [pc, #472]	; (8018734 <tcp_slowtmr+0x264>)
 801855a:	781a      	ldrb	r2, [r3, #0]
 801855c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801855e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8018560:	2300      	movs	r3, #0
 8018562:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8018566:	2300      	movs	r3, #0
 8018568:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801856c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801856e:	7d1b      	ldrb	r3, [r3, #20]
 8018570:	2b02      	cmp	r3, #2
 8018572:	d10a      	bne.n	801858a <tcp_slowtmr+0xba>
 8018574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018576:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801857a:	2b05      	cmp	r3, #5
 801857c:	d905      	bls.n	801858a <tcp_slowtmr+0xba>
      ++pcb_remove;
 801857e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018582:	3301      	adds	r3, #1
 8018584:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018588:	e11e      	b.n	80187c8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801858a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801858c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018590:	2b0b      	cmp	r3, #11
 8018592:	d905      	bls.n	80185a0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8018594:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018598:	3301      	adds	r3, #1
 801859a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801859e:	e113      	b.n	80187c8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80185a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185a2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80185a6:	2b00      	cmp	r3, #0
 80185a8:	d075      	beq.n	8018696 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80185aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	d006      	beq.n	80185c0 <tcp_slowtmr+0xf0>
 80185b2:	4b62      	ldr	r3, [pc, #392]	; (801873c <tcp_slowtmr+0x26c>)
 80185b4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80185b8:	4965      	ldr	r1, [pc, #404]	; (8018750 <tcp_slowtmr+0x280>)
 80185ba:	4862      	ldr	r0, [pc, #392]	; (8018744 <tcp_slowtmr+0x274>)
 80185bc:	f008 fc56 	bl	8020e6c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80185c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	d106      	bne.n	80185d6 <tcp_slowtmr+0x106>
 80185c8:	4b5c      	ldr	r3, [pc, #368]	; (801873c <tcp_slowtmr+0x26c>)
 80185ca:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80185ce:	4961      	ldr	r1, [pc, #388]	; (8018754 <tcp_slowtmr+0x284>)
 80185d0:	485c      	ldr	r0, [pc, #368]	; (8018744 <tcp_slowtmr+0x274>)
 80185d2:	f008 fc4b 	bl	8020e6c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80185d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185d8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80185dc:	2b0b      	cmp	r3, #11
 80185de:	d905      	bls.n	80185ec <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80185e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80185e4:	3301      	adds	r3, #1
 80185e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80185ea:	e0ed      	b.n	80187c8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80185ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185ee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80185f2:	3b01      	subs	r3, #1
 80185f4:	4a58      	ldr	r2, [pc, #352]	; (8018758 <tcp_slowtmr+0x288>)
 80185f6:	5cd3      	ldrb	r3, [r2, r3]
 80185f8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80185fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185fc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8018600:	7c7a      	ldrb	r2, [r7, #17]
 8018602:	429a      	cmp	r2, r3
 8018604:	d907      	bls.n	8018616 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8018606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018608:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801860c:	3301      	adds	r3, #1
 801860e:	b2da      	uxtb	r2, r3
 8018610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018612:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8018616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018618:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801861c:	7c7a      	ldrb	r2, [r7, #17]
 801861e:	429a      	cmp	r2, r3
 8018620:	f200 80d2 	bhi.w	80187c8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8018624:	2301      	movs	r3, #1
 8018626:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8018628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801862a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801862e:	2b00      	cmp	r3, #0
 8018630:	d108      	bne.n	8018644 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8018632:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018634:	f005 f94c 	bl	801d8d0 <tcp_zero_window_probe>
 8018638:	4603      	mov	r3, r0
 801863a:	2b00      	cmp	r3, #0
 801863c:	d014      	beq.n	8018668 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801863e:	2300      	movs	r3, #0
 8018640:	623b      	str	r3, [r7, #32]
 8018642:	e011      	b.n	8018668 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8018644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018646:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801864a:	4619      	mov	r1, r3
 801864c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801864e:	f004 f811 	bl	801c674 <tcp_split_unsent_seg>
 8018652:	4603      	mov	r3, r0
 8018654:	2b00      	cmp	r3, #0
 8018656:	d107      	bne.n	8018668 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8018658:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801865a:	f004 fa91 	bl	801cb80 <tcp_output>
 801865e:	4603      	mov	r3, r0
 8018660:	2b00      	cmp	r3, #0
 8018662:	d101      	bne.n	8018668 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8018664:	2300      	movs	r3, #0
 8018666:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8018668:	6a3b      	ldr	r3, [r7, #32]
 801866a:	2b00      	cmp	r3, #0
 801866c:	f000 80ac 	beq.w	80187c8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8018670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018672:	2200      	movs	r2, #0
 8018674:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8018678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801867a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801867e:	2b06      	cmp	r3, #6
 8018680:	f200 80a2 	bhi.w	80187c8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8018684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018686:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801868a:	3301      	adds	r3, #1
 801868c:	b2da      	uxtb	r2, r3
 801868e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018690:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8018694:	e098      	b.n	80187c8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8018696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018698:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801869c:	2b00      	cmp	r3, #0
 801869e:	db0f      	blt.n	80186c0 <tcp_slowtmr+0x1f0>
 80186a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186a2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80186a6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80186aa:	4293      	cmp	r3, r2
 80186ac:	d008      	beq.n	80186c0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80186ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186b0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80186b4:	b29b      	uxth	r3, r3
 80186b6:	3301      	adds	r3, #1
 80186b8:	b29b      	uxth	r3, r3
 80186ba:	b21a      	sxth	r2, r3
 80186bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186be:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80186c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186c2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80186c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186c8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80186cc:	429a      	cmp	r2, r3
 80186ce:	db7b      	blt.n	80187c8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80186d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80186d2:	f004 fd47 	bl	801d164 <tcp_rexmit_rto_prepare>
 80186d6:	4603      	mov	r3, r0
 80186d8:	2b00      	cmp	r3, #0
 80186da:	d007      	beq.n	80186ec <tcp_slowtmr+0x21c>
 80186dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80186e0:	2b00      	cmp	r3, #0
 80186e2:	d171      	bne.n	80187c8 <tcp_slowtmr+0x2f8>
 80186e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	d06d      	beq.n	80187c8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80186ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186ee:	7d1b      	ldrb	r3, [r3, #20]
 80186f0:	2b02      	cmp	r3, #2
 80186f2:	d03a      	beq.n	801876a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80186f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80186fa:	2b0c      	cmp	r3, #12
 80186fc:	bf28      	it	cs
 80186fe:	230c      	movcs	r3, #12
 8018700:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8018702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018704:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8018708:	10db      	asrs	r3, r3, #3
 801870a:	b21b      	sxth	r3, r3
 801870c:	461a      	mov	r2, r3
 801870e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018710:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8018714:	4413      	add	r3, r2
 8018716:	7efa      	ldrb	r2, [r7, #27]
 8018718:	4910      	ldr	r1, [pc, #64]	; (801875c <tcp_slowtmr+0x28c>)
 801871a:	5c8a      	ldrb	r2, [r1, r2]
 801871c:	4093      	lsls	r3, r2
 801871e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8018720:	697b      	ldr	r3, [r7, #20]
 8018722:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8018726:	4293      	cmp	r3, r2
 8018728:	dc1a      	bgt.n	8018760 <tcp_slowtmr+0x290>
 801872a:	697b      	ldr	r3, [r7, #20]
 801872c:	b21a      	sxth	r2, r3
 801872e:	e019      	b.n	8018764 <tcp_slowtmr+0x294>
 8018730:	240082bc 	.word	0x240082bc
 8018734:	2400489e 	.word	0x2400489e
 8018738:	240082b8 	.word	0x240082b8
 801873c:	08027154 	.word	0x08027154
 8018740:	080274c4 	.word	0x080274c4
 8018744:	080271c4 	.word	0x080271c4
 8018748:	080274f0 	.word	0x080274f0
 801874c:	0802751c 	.word	0x0802751c
 8018750:	0802754c 	.word	0x0802754c
 8018754:	08027580 	.word	0x08027580
 8018758:	080291c0 	.word	0x080291c0
 801875c:	080291b0 	.word	0x080291b0
 8018760:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018766:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801876a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801876c:	2200      	movs	r2, #0
 801876e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8018770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018772:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018778:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801877c:	4293      	cmp	r3, r2
 801877e:	bf28      	it	cs
 8018780:	4613      	movcs	r3, r2
 8018782:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8018784:	8a7b      	ldrh	r3, [r7, #18]
 8018786:	085b      	lsrs	r3, r3, #1
 8018788:	b29a      	uxth	r2, r3
 801878a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801878c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8018790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018792:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8018796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018798:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801879a:	005b      	lsls	r3, r3, #1
 801879c:	b29b      	uxth	r3, r3
 801879e:	429a      	cmp	r2, r3
 80187a0:	d206      	bcs.n	80187b0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80187a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80187a6:	005b      	lsls	r3, r3, #1
 80187a8:	b29a      	uxth	r2, r3
 80187aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187ac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80187b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187b2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80187b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80187ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187bc:	2200      	movs	r2, #0
 80187be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80187c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80187c4:	f004 fd3e 	bl	801d244 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80187c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187ca:	7d1b      	ldrb	r3, [r3, #20]
 80187cc:	2b06      	cmp	r3, #6
 80187ce:	d111      	bne.n	80187f4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80187d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187d2:	8b5b      	ldrh	r3, [r3, #26]
 80187d4:	f003 0310 	and.w	r3, r3, #16
 80187d8:	2b00      	cmp	r3, #0
 80187da:	d00b      	beq.n	80187f4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80187dc:	4b9c      	ldr	r3, [pc, #624]	; (8018a50 <tcp_slowtmr+0x580>)
 80187de:	681a      	ldr	r2, [r3, #0]
 80187e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187e2:	6a1b      	ldr	r3, [r3, #32]
 80187e4:	1ad3      	subs	r3, r2, r3
 80187e6:	2b28      	cmp	r3, #40	; 0x28
 80187e8:	d904      	bls.n	80187f4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80187ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80187ee:	3301      	adds	r3, #1
 80187f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80187f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187f6:	7a5b      	ldrb	r3, [r3, #9]
 80187f8:	f003 0308 	and.w	r3, r3, #8
 80187fc:	2b00      	cmp	r3, #0
 80187fe:	d04a      	beq.n	8018896 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8018800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018802:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8018804:	2b04      	cmp	r3, #4
 8018806:	d003      	beq.n	8018810 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8018808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801880a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801880c:	2b07      	cmp	r3, #7
 801880e:	d142      	bne.n	8018896 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8018810:	4b8f      	ldr	r3, [pc, #572]	; (8018a50 <tcp_slowtmr+0x580>)
 8018812:	681a      	ldr	r2, [r3, #0]
 8018814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018816:	6a1b      	ldr	r3, [r3, #32]
 8018818:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801881a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801881c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8018820:	4b8c      	ldr	r3, [pc, #560]	; (8018a54 <tcp_slowtmr+0x584>)
 8018822:	440b      	add	r3, r1
 8018824:	498c      	ldr	r1, [pc, #560]	; (8018a58 <tcp_slowtmr+0x588>)
 8018826:	fba1 1303 	umull	r1, r3, r1, r3
 801882a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801882c:	429a      	cmp	r2, r3
 801882e:	d90a      	bls.n	8018846 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8018830:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018834:	3301      	adds	r3, #1
 8018836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801883a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801883e:	3301      	adds	r3, #1
 8018840:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018844:	e027      	b.n	8018896 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8018846:	4b82      	ldr	r3, [pc, #520]	; (8018a50 <tcp_slowtmr+0x580>)
 8018848:	681a      	ldr	r2, [r3, #0]
 801884a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801884c:	6a1b      	ldr	r3, [r3, #32]
 801884e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8018850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018852:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8018856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018858:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801885c:	4618      	mov	r0, r3
 801885e:	4b7f      	ldr	r3, [pc, #508]	; (8018a5c <tcp_slowtmr+0x58c>)
 8018860:	fb03 f300 	mul.w	r3, r3, r0
 8018864:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8018866:	497c      	ldr	r1, [pc, #496]	; (8018a58 <tcp_slowtmr+0x588>)
 8018868:	fba1 1303 	umull	r1, r3, r1, r3
 801886c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801886e:	429a      	cmp	r2, r3
 8018870:	d911      	bls.n	8018896 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8018872:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018874:	f004 ffec 	bl	801d850 <tcp_keepalive>
 8018878:	4603      	mov	r3, r0
 801887a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801887e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8018882:	2b00      	cmp	r3, #0
 8018884:	d107      	bne.n	8018896 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8018886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018888:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801888c:	3301      	adds	r3, #1
 801888e:	b2da      	uxtb	r2, r3
 8018890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018892:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8018896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801889a:	2b00      	cmp	r3, #0
 801889c:	d011      	beq.n	80188c2 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801889e:	4b6c      	ldr	r3, [pc, #432]	; (8018a50 <tcp_slowtmr+0x580>)
 80188a0:	681a      	ldr	r2, [r3, #0]
 80188a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188a4:	6a1b      	ldr	r3, [r3, #32]
 80188a6:	1ad2      	subs	r2, r2, r3
 80188a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188aa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80188ae:	4619      	mov	r1, r3
 80188b0:	460b      	mov	r3, r1
 80188b2:	005b      	lsls	r3, r3, #1
 80188b4:	440b      	add	r3, r1
 80188b6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80188b8:	429a      	cmp	r2, r3
 80188ba:	d302      	bcc.n	80188c2 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80188bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80188be:	f000 feab 	bl	8019618 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80188c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188c4:	7d1b      	ldrb	r3, [r3, #20]
 80188c6:	2b03      	cmp	r3, #3
 80188c8:	d10b      	bne.n	80188e2 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80188ca:	4b61      	ldr	r3, [pc, #388]	; (8018a50 <tcp_slowtmr+0x580>)
 80188cc:	681a      	ldr	r2, [r3, #0]
 80188ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188d0:	6a1b      	ldr	r3, [r3, #32]
 80188d2:	1ad3      	subs	r3, r2, r3
 80188d4:	2b28      	cmp	r3, #40	; 0x28
 80188d6:	d904      	bls.n	80188e2 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80188d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80188dc:	3301      	adds	r3, #1
 80188de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80188e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188e4:	7d1b      	ldrb	r3, [r3, #20]
 80188e6:	2b09      	cmp	r3, #9
 80188e8:	d10b      	bne.n	8018902 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80188ea:	4b59      	ldr	r3, [pc, #356]	; (8018a50 <tcp_slowtmr+0x580>)
 80188ec:	681a      	ldr	r2, [r3, #0]
 80188ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188f0:	6a1b      	ldr	r3, [r3, #32]
 80188f2:	1ad3      	subs	r3, r2, r3
 80188f4:	2bf0      	cmp	r3, #240	; 0xf0
 80188f6:	d904      	bls.n	8018902 <tcp_slowtmr+0x432>
        ++pcb_remove;
 80188f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80188fc:	3301      	adds	r3, #1
 80188fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8018902:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018906:	2b00      	cmp	r3, #0
 8018908:	d060      	beq.n	80189cc <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801890a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801890c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018910:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8018912:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018914:	f000 fccc 	bl	80192b0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8018918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801891a:	2b00      	cmp	r3, #0
 801891c:	d010      	beq.n	8018940 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801891e:	4b50      	ldr	r3, [pc, #320]	; (8018a60 <tcp_slowtmr+0x590>)
 8018920:	681b      	ldr	r3, [r3, #0]
 8018922:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018924:	429a      	cmp	r2, r3
 8018926:	d106      	bne.n	8018936 <tcp_slowtmr+0x466>
 8018928:	4b4e      	ldr	r3, [pc, #312]	; (8018a64 <tcp_slowtmr+0x594>)
 801892a:	f240 526d 	movw	r2, #1389	; 0x56d
 801892e:	494e      	ldr	r1, [pc, #312]	; (8018a68 <tcp_slowtmr+0x598>)
 8018930:	484e      	ldr	r0, [pc, #312]	; (8018a6c <tcp_slowtmr+0x59c>)
 8018932:	f008 fa9b 	bl	8020e6c <iprintf>
        prev->next = pcb->next;
 8018936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018938:	68da      	ldr	r2, [r3, #12]
 801893a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801893c:	60da      	str	r2, [r3, #12]
 801893e:	e00f      	b.n	8018960 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8018940:	4b47      	ldr	r3, [pc, #284]	; (8018a60 <tcp_slowtmr+0x590>)
 8018942:	681b      	ldr	r3, [r3, #0]
 8018944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018946:	429a      	cmp	r2, r3
 8018948:	d006      	beq.n	8018958 <tcp_slowtmr+0x488>
 801894a:	4b46      	ldr	r3, [pc, #280]	; (8018a64 <tcp_slowtmr+0x594>)
 801894c:	f240 5271 	movw	r2, #1393	; 0x571
 8018950:	4947      	ldr	r1, [pc, #284]	; (8018a70 <tcp_slowtmr+0x5a0>)
 8018952:	4846      	ldr	r0, [pc, #280]	; (8018a6c <tcp_slowtmr+0x59c>)
 8018954:	f008 fa8a 	bl	8020e6c <iprintf>
        tcp_active_pcbs = pcb->next;
 8018958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801895a:	68db      	ldr	r3, [r3, #12]
 801895c:	4a40      	ldr	r2, [pc, #256]	; (8018a60 <tcp_slowtmr+0x590>)
 801895e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8018960:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018964:	2b00      	cmp	r3, #0
 8018966:	d013      	beq.n	8018990 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8018968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801896a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801896c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801896e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018970:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8018972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018974:	3304      	adds	r3, #4
 8018976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018978:	8ad2      	ldrh	r2, [r2, #22]
 801897a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801897c:	8b09      	ldrh	r1, [r1, #24]
 801897e:	9102      	str	r1, [sp, #8]
 8018980:	9201      	str	r2, [sp, #4]
 8018982:	9300      	str	r3, [sp, #0]
 8018984:	462b      	mov	r3, r5
 8018986:	4622      	mov	r2, r4
 8018988:	4601      	mov	r1, r0
 801898a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801898c:	f004 feac 	bl	801d6e8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8018990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018992:	691b      	ldr	r3, [r3, #16]
 8018994:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8018996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018998:	7d1b      	ldrb	r3, [r3, #20]
 801899a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801899c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801899e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80189a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189a2:	68db      	ldr	r3, [r3, #12]
 80189a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80189a6:	6838      	ldr	r0, [r7, #0]
 80189a8:	f7fe ff22 	bl	80177f0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80189ac:	4b31      	ldr	r3, [pc, #196]	; (8018a74 <tcp_slowtmr+0x5a4>)
 80189ae:	2200      	movs	r2, #0
 80189b0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80189b2:	68fb      	ldr	r3, [r7, #12]
 80189b4:	2b00      	cmp	r3, #0
 80189b6:	d004      	beq.n	80189c2 <tcp_slowtmr+0x4f2>
 80189b8:	68fb      	ldr	r3, [r7, #12]
 80189ba:	f06f 010c 	mvn.w	r1, #12
 80189be:	68b8      	ldr	r0, [r7, #8]
 80189c0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80189c2:	4b2c      	ldr	r3, [pc, #176]	; (8018a74 <tcp_slowtmr+0x5a4>)
 80189c4:	781b      	ldrb	r3, [r3, #0]
 80189c6:	2b00      	cmp	r3, #0
 80189c8:	d037      	beq.n	8018a3a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 80189ca:	e592      	b.n	80184f2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80189cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189ce:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80189d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189d2:	68db      	ldr	r3, [r3, #12]
 80189d4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80189d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189d8:	7f1b      	ldrb	r3, [r3, #28]
 80189da:	3301      	adds	r3, #1
 80189dc:	b2da      	uxtb	r2, r3
 80189de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189e0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80189e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189e4:	7f1a      	ldrb	r2, [r3, #28]
 80189e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189e8:	7f5b      	ldrb	r3, [r3, #29]
 80189ea:	429a      	cmp	r2, r3
 80189ec:	d325      	bcc.n	8018a3a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80189ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189f0:	2200      	movs	r2, #0
 80189f2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80189f4:	4b1f      	ldr	r3, [pc, #124]	; (8018a74 <tcp_slowtmr+0x5a4>)
 80189f6:	2200      	movs	r2, #0
 80189f8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80189fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	d00b      	beq.n	8018a1c <tcp_slowtmr+0x54c>
 8018a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018a0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018a0c:	6912      	ldr	r2, [r2, #16]
 8018a0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018a10:	4610      	mov	r0, r2
 8018a12:	4798      	blx	r3
 8018a14:	4603      	mov	r3, r0
 8018a16:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8018a1a:	e002      	b.n	8018a22 <tcp_slowtmr+0x552>
 8018a1c:	2300      	movs	r3, #0
 8018a1e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8018a22:	4b14      	ldr	r3, [pc, #80]	; (8018a74 <tcp_slowtmr+0x5a4>)
 8018a24:	781b      	ldrb	r3, [r3, #0]
 8018a26:	2b00      	cmp	r3, #0
 8018a28:	d000      	beq.n	8018a2c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8018a2a:	e562      	b.n	80184f2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8018a2c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	d102      	bne.n	8018a3a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8018a34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018a36:	f004 f8a3 	bl	801cb80 <tcp_output>
  while (pcb != NULL) {
 8018a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a3c:	2b00      	cmp	r3, #0
 8018a3e:	f47f ad5e 	bne.w	80184fe <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8018a42:	2300      	movs	r3, #0
 8018a44:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8018a46:	4b0c      	ldr	r3, [pc, #48]	; (8018a78 <tcp_slowtmr+0x5a8>)
 8018a48:	681b      	ldr	r3, [r3, #0]
 8018a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8018a4c:	e069      	b.n	8018b22 <tcp_slowtmr+0x652>
 8018a4e:	bf00      	nop
 8018a50:	240082bc 	.word	0x240082bc
 8018a54:	000a4cb8 	.word	0x000a4cb8
 8018a58:	10624dd3 	.word	0x10624dd3
 8018a5c:	000124f8 	.word	0x000124f8
 8018a60:	240082b8 	.word	0x240082b8
 8018a64:	08027154 	.word	0x08027154
 8018a68:	080275b8 	.word	0x080275b8
 8018a6c:	080271c4 	.word	0x080271c4
 8018a70:	080275e4 	.word	0x080275e4
 8018a74:	240082b4 	.word	0x240082b4
 8018a78:	240082c8 	.word	0x240082c8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8018a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a7e:	7d1b      	ldrb	r3, [r3, #20]
 8018a80:	2b0a      	cmp	r3, #10
 8018a82:	d006      	beq.n	8018a92 <tcp_slowtmr+0x5c2>
 8018a84:	4b2b      	ldr	r3, [pc, #172]	; (8018b34 <tcp_slowtmr+0x664>)
 8018a86:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8018a8a:	492b      	ldr	r1, [pc, #172]	; (8018b38 <tcp_slowtmr+0x668>)
 8018a8c:	482b      	ldr	r0, [pc, #172]	; (8018b3c <tcp_slowtmr+0x66c>)
 8018a8e:	f008 f9ed 	bl	8020e6c <iprintf>
    pcb_remove = 0;
 8018a92:	2300      	movs	r3, #0
 8018a94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8018a98:	4b29      	ldr	r3, [pc, #164]	; (8018b40 <tcp_slowtmr+0x670>)
 8018a9a:	681a      	ldr	r2, [r3, #0]
 8018a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a9e:	6a1b      	ldr	r3, [r3, #32]
 8018aa0:	1ad3      	subs	r3, r2, r3
 8018aa2:	2bf0      	cmp	r3, #240	; 0xf0
 8018aa4:	d904      	bls.n	8018ab0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8018aa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018aaa:	3301      	adds	r3, #1
 8018aac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8018ab0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018ab4:	2b00      	cmp	r3, #0
 8018ab6:	d02f      	beq.n	8018b18 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8018ab8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018aba:	f000 fbf9 	bl	80192b0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8018abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ac0:	2b00      	cmp	r3, #0
 8018ac2:	d010      	beq.n	8018ae6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8018ac4:	4b1f      	ldr	r3, [pc, #124]	; (8018b44 <tcp_slowtmr+0x674>)
 8018ac6:	681b      	ldr	r3, [r3, #0]
 8018ac8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018aca:	429a      	cmp	r2, r3
 8018acc:	d106      	bne.n	8018adc <tcp_slowtmr+0x60c>
 8018ace:	4b19      	ldr	r3, [pc, #100]	; (8018b34 <tcp_slowtmr+0x664>)
 8018ad0:	f240 52af 	movw	r2, #1455	; 0x5af
 8018ad4:	491c      	ldr	r1, [pc, #112]	; (8018b48 <tcp_slowtmr+0x678>)
 8018ad6:	4819      	ldr	r0, [pc, #100]	; (8018b3c <tcp_slowtmr+0x66c>)
 8018ad8:	f008 f9c8 	bl	8020e6c <iprintf>
        prev->next = pcb->next;
 8018adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ade:	68da      	ldr	r2, [r3, #12]
 8018ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ae2:	60da      	str	r2, [r3, #12]
 8018ae4:	e00f      	b.n	8018b06 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8018ae6:	4b17      	ldr	r3, [pc, #92]	; (8018b44 <tcp_slowtmr+0x674>)
 8018ae8:	681b      	ldr	r3, [r3, #0]
 8018aea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018aec:	429a      	cmp	r2, r3
 8018aee:	d006      	beq.n	8018afe <tcp_slowtmr+0x62e>
 8018af0:	4b10      	ldr	r3, [pc, #64]	; (8018b34 <tcp_slowtmr+0x664>)
 8018af2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8018af6:	4915      	ldr	r1, [pc, #84]	; (8018b4c <tcp_slowtmr+0x67c>)
 8018af8:	4810      	ldr	r0, [pc, #64]	; (8018b3c <tcp_slowtmr+0x66c>)
 8018afa:	f008 f9b7 	bl	8020e6c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8018afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b00:	68db      	ldr	r3, [r3, #12]
 8018b02:	4a10      	ldr	r2, [pc, #64]	; (8018b44 <tcp_slowtmr+0x674>)
 8018b04:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8018b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b08:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8018b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b0c:	68db      	ldr	r3, [r3, #12]
 8018b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8018b10:	69f8      	ldr	r0, [r7, #28]
 8018b12:	f7fe fe6d 	bl	80177f0 <tcp_free>
 8018b16:	e004      	b.n	8018b22 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8018b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b1a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8018b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b1e:	68db      	ldr	r3, [r3, #12]
 8018b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8018b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b24:	2b00      	cmp	r3, #0
 8018b26:	d1a9      	bne.n	8018a7c <tcp_slowtmr+0x5ac>
    }
  }
}
 8018b28:	bf00      	nop
 8018b2a:	bf00      	nop
 8018b2c:	3730      	adds	r7, #48	; 0x30
 8018b2e:	46bd      	mov	sp, r7
 8018b30:	bdb0      	pop	{r4, r5, r7, pc}
 8018b32:	bf00      	nop
 8018b34:	08027154 	.word	0x08027154
 8018b38:	08027610 	.word	0x08027610
 8018b3c:	080271c4 	.word	0x080271c4
 8018b40:	240082bc 	.word	0x240082bc
 8018b44:	240082c8 	.word	0x240082c8
 8018b48:	08027640 	.word	0x08027640
 8018b4c:	08027668 	.word	0x08027668

08018b50 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8018b50:	b580      	push	{r7, lr}
 8018b52:	b082      	sub	sp, #8
 8018b54:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8018b56:	4b2d      	ldr	r3, [pc, #180]	; (8018c0c <tcp_fasttmr+0xbc>)
 8018b58:	781b      	ldrb	r3, [r3, #0]
 8018b5a:	3301      	adds	r3, #1
 8018b5c:	b2da      	uxtb	r2, r3
 8018b5e:	4b2b      	ldr	r3, [pc, #172]	; (8018c0c <tcp_fasttmr+0xbc>)
 8018b60:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8018b62:	4b2b      	ldr	r3, [pc, #172]	; (8018c10 <tcp_fasttmr+0xc0>)
 8018b64:	681b      	ldr	r3, [r3, #0]
 8018b66:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8018b68:	e048      	b.n	8018bfc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	7f9a      	ldrb	r2, [r3, #30]
 8018b6e:	4b27      	ldr	r3, [pc, #156]	; (8018c0c <tcp_fasttmr+0xbc>)
 8018b70:	781b      	ldrb	r3, [r3, #0]
 8018b72:	429a      	cmp	r2, r3
 8018b74:	d03f      	beq.n	8018bf6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8018b76:	4b25      	ldr	r3, [pc, #148]	; (8018c0c <tcp_fasttmr+0xbc>)
 8018b78:	781a      	ldrb	r2, [r3, #0]
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	8b5b      	ldrh	r3, [r3, #26]
 8018b82:	f003 0301 	and.w	r3, r3, #1
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	d010      	beq.n	8018bac <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	8b5b      	ldrh	r3, [r3, #26]
 8018b8e:	f043 0302 	orr.w	r3, r3, #2
 8018b92:	b29a      	uxth	r2, r3
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8018b98:	6878      	ldr	r0, [r7, #4]
 8018b9a:	f003 fff1 	bl	801cb80 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018b9e:	687b      	ldr	r3, [r7, #4]
 8018ba0:	8b5b      	ldrh	r3, [r3, #26]
 8018ba2:	f023 0303 	bic.w	r3, r3, #3
 8018ba6:	b29a      	uxth	r2, r3
 8018ba8:	687b      	ldr	r3, [r7, #4]
 8018baa:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	8b5b      	ldrh	r3, [r3, #26]
 8018bb0:	f003 0308 	and.w	r3, r3, #8
 8018bb4:	2b00      	cmp	r3, #0
 8018bb6:	d009      	beq.n	8018bcc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	8b5b      	ldrh	r3, [r3, #26]
 8018bbc:	f023 0308 	bic.w	r3, r3, #8
 8018bc0:	b29a      	uxth	r2, r3
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8018bc6:	6878      	ldr	r0, [r7, #4]
 8018bc8:	f7fe ffa6 	bl	8017b18 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8018bcc:	687b      	ldr	r3, [r7, #4]
 8018bce:	68db      	ldr	r3, [r3, #12]
 8018bd0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018bd6:	2b00      	cmp	r3, #0
 8018bd8:	d00a      	beq.n	8018bf0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8018bda:	4b0e      	ldr	r3, [pc, #56]	; (8018c14 <tcp_fasttmr+0xc4>)
 8018bdc:	2200      	movs	r2, #0
 8018bde:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8018be0:	6878      	ldr	r0, [r7, #4]
 8018be2:	f000 f819 	bl	8018c18 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8018be6:	4b0b      	ldr	r3, [pc, #44]	; (8018c14 <tcp_fasttmr+0xc4>)
 8018be8:	781b      	ldrb	r3, [r3, #0]
 8018bea:	2b00      	cmp	r3, #0
 8018bec:	d000      	beq.n	8018bf0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8018bee:	e7b8      	b.n	8018b62 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8018bf0:	683b      	ldr	r3, [r7, #0]
 8018bf2:	607b      	str	r3, [r7, #4]
 8018bf4:	e002      	b.n	8018bfc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8018bf6:	687b      	ldr	r3, [r7, #4]
 8018bf8:	68db      	ldr	r3, [r3, #12]
 8018bfa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	2b00      	cmp	r3, #0
 8018c00:	d1b3      	bne.n	8018b6a <tcp_fasttmr+0x1a>
    }
  }
}
 8018c02:	bf00      	nop
 8018c04:	bf00      	nop
 8018c06:	3708      	adds	r7, #8
 8018c08:	46bd      	mov	sp, r7
 8018c0a:	bd80      	pop	{r7, pc}
 8018c0c:	2400489e 	.word	0x2400489e
 8018c10:	240082b8 	.word	0x240082b8
 8018c14:	240082b4 	.word	0x240082b4

08018c18 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8018c18:	b590      	push	{r4, r7, lr}
 8018c1a:	b085      	sub	sp, #20
 8018c1c:	af00      	add	r7, sp, #0
 8018c1e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	2b00      	cmp	r3, #0
 8018c24:	d109      	bne.n	8018c3a <tcp_process_refused_data+0x22>
 8018c26:	4b37      	ldr	r3, [pc, #220]	; (8018d04 <tcp_process_refused_data+0xec>)
 8018c28:	f240 6209 	movw	r2, #1545	; 0x609
 8018c2c:	4936      	ldr	r1, [pc, #216]	; (8018d08 <tcp_process_refused_data+0xf0>)
 8018c2e:	4837      	ldr	r0, [pc, #220]	; (8018d0c <tcp_process_refused_data+0xf4>)
 8018c30:	f008 f91c 	bl	8020e6c <iprintf>
 8018c34:	f06f 030f 	mvn.w	r3, #15
 8018c38:	e060      	b.n	8018cfc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018c3e:	7b5b      	ldrb	r3, [r3, #13]
 8018c40:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018c46:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	2200      	movs	r2, #0
 8018c4c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018c54:	2b00      	cmp	r3, #0
 8018c56:	d00b      	beq.n	8018c70 <tcp_process_refused_data+0x58>
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	6918      	ldr	r0, [r3, #16]
 8018c62:	2300      	movs	r3, #0
 8018c64:	68ba      	ldr	r2, [r7, #8]
 8018c66:	6879      	ldr	r1, [r7, #4]
 8018c68:	47a0      	blx	r4
 8018c6a:	4603      	mov	r3, r0
 8018c6c:	73fb      	strb	r3, [r7, #15]
 8018c6e:	e007      	b.n	8018c80 <tcp_process_refused_data+0x68>
 8018c70:	2300      	movs	r3, #0
 8018c72:	68ba      	ldr	r2, [r7, #8]
 8018c74:	6879      	ldr	r1, [r7, #4]
 8018c76:	2000      	movs	r0, #0
 8018c78:	f000 f8a4 	bl	8018dc4 <tcp_recv_null>
 8018c7c:	4603      	mov	r3, r0
 8018c7e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8018c80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018c84:	2b00      	cmp	r3, #0
 8018c86:	d12a      	bne.n	8018cde <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8018c88:	7bbb      	ldrb	r3, [r7, #14]
 8018c8a:	f003 0320 	and.w	r3, r3, #32
 8018c8e:	2b00      	cmp	r3, #0
 8018c90:	d033      	beq.n	8018cfa <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018c96:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8018c9a:	d005      	beq.n	8018ca8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018ca0:	3301      	adds	r3, #1
 8018ca2:	b29a      	uxth	r2, r3
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8018ca8:	687b      	ldr	r3, [r7, #4]
 8018caa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018cae:	2b00      	cmp	r3, #0
 8018cb0:	d00b      	beq.n	8018cca <tcp_process_refused_data+0xb2>
 8018cb2:	687b      	ldr	r3, [r7, #4]
 8018cb4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	6918      	ldr	r0, [r3, #16]
 8018cbc:	2300      	movs	r3, #0
 8018cbe:	2200      	movs	r2, #0
 8018cc0:	6879      	ldr	r1, [r7, #4]
 8018cc2:	47a0      	blx	r4
 8018cc4:	4603      	mov	r3, r0
 8018cc6:	73fb      	strb	r3, [r7, #15]
 8018cc8:	e001      	b.n	8018cce <tcp_process_refused_data+0xb6>
 8018cca:	2300      	movs	r3, #0
 8018ccc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8018cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018cd2:	f113 0f0d 	cmn.w	r3, #13
 8018cd6:	d110      	bne.n	8018cfa <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8018cd8:	f06f 030c 	mvn.w	r3, #12
 8018cdc:	e00e      	b.n	8018cfc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8018cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018ce2:	f113 0f0d 	cmn.w	r3, #13
 8018ce6:	d102      	bne.n	8018cee <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8018ce8:	f06f 030c 	mvn.w	r3, #12
 8018cec:	e006      	b.n	8018cfc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	68ba      	ldr	r2, [r7, #8]
 8018cf2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8018cf4:	f06f 0304 	mvn.w	r3, #4
 8018cf8:	e000      	b.n	8018cfc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8018cfa:	2300      	movs	r3, #0
}
 8018cfc:	4618      	mov	r0, r3
 8018cfe:	3714      	adds	r7, #20
 8018d00:	46bd      	mov	sp, r7
 8018d02:	bd90      	pop	{r4, r7, pc}
 8018d04:	08027154 	.word	0x08027154
 8018d08:	08027690 	.word	0x08027690
 8018d0c:	080271c4 	.word	0x080271c4

08018d10 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8018d10:	b580      	push	{r7, lr}
 8018d12:	b084      	sub	sp, #16
 8018d14:	af00      	add	r7, sp, #0
 8018d16:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8018d18:	e007      	b.n	8018d2a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	681b      	ldr	r3, [r3, #0]
 8018d1e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8018d20:	6878      	ldr	r0, [r7, #4]
 8018d22:	f000 f80a 	bl	8018d3a <tcp_seg_free>
    seg = next;
 8018d26:	68fb      	ldr	r3, [r7, #12]
 8018d28:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	2b00      	cmp	r3, #0
 8018d2e:	d1f4      	bne.n	8018d1a <tcp_segs_free+0xa>
  }
}
 8018d30:	bf00      	nop
 8018d32:	bf00      	nop
 8018d34:	3710      	adds	r7, #16
 8018d36:	46bd      	mov	sp, r7
 8018d38:	bd80      	pop	{r7, pc}

08018d3a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8018d3a:	b580      	push	{r7, lr}
 8018d3c:	b082      	sub	sp, #8
 8018d3e:	af00      	add	r7, sp, #0
 8018d40:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8018d42:	687b      	ldr	r3, [r7, #4]
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	d00c      	beq.n	8018d62 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	685b      	ldr	r3, [r3, #4]
 8018d4c:	2b00      	cmp	r3, #0
 8018d4e:	d004      	beq.n	8018d5a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	685b      	ldr	r3, [r3, #4]
 8018d54:	4618      	mov	r0, r3
 8018d56:	f7fe f9f3 	bl	8017140 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8018d5a:	6879      	ldr	r1, [r7, #4]
 8018d5c:	2003      	movs	r0, #3
 8018d5e:	f7fd fb79 	bl	8016454 <memp_free>
  }
}
 8018d62:	bf00      	nop
 8018d64:	3708      	adds	r7, #8
 8018d66:	46bd      	mov	sp, r7
 8018d68:	bd80      	pop	{r7, pc}
	...

08018d6c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8018d6c:	b580      	push	{r7, lr}
 8018d6e:	b084      	sub	sp, #16
 8018d70:	af00      	add	r7, sp, #0
 8018d72:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	2b00      	cmp	r3, #0
 8018d78:	d106      	bne.n	8018d88 <tcp_seg_copy+0x1c>
 8018d7a:	4b0f      	ldr	r3, [pc, #60]	; (8018db8 <tcp_seg_copy+0x4c>)
 8018d7c:	f240 6282 	movw	r2, #1666	; 0x682
 8018d80:	490e      	ldr	r1, [pc, #56]	; (8018dbc <tcp_seg_copy+0x50>)
 8018d82:	480f      	ldr	r0, [pc, #60]	; (8018dc0 <tcp_seg_copy+0x54>)
 8018d84:	f008 f872 	bl	8020e6c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8018d88:	2003      	movs	r0, #3
 8018d8a:	f7fd faf3 	bl	8016374 <memp_malloc>
 8018d8e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8018d90:	68fb      	ldr	r3, [r7, #12]
 8018d92:	2b00      	cmp	r3, #0
 8018d94:	d101      	bne.n	8018d9a <tcp_seg_copy+0x2e>
    return NULL;
 8018d96:	2300      	movs	r3, #0
 8018d98:	e00a      	b.n	8018db0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8018d9a:	2210      	movs	r2, #16
 8018d9c:	6879      	ldr	r1, [r7, #4]
 8018d9e:	68f8      	ldr	r0, [r7, #12]
 8018da0:	f007 f942 	bl	8020028 <memcpy>
  pbuf_ref(cseg->p);
 8018da4:	68fb      	ldr	r3, [r7, #12]
 8018da6:	685b      	ldr	r3, [r3, #4]
 8018da8:	4618      	mov	r0, r3
 8018daa:	f7fe fa69 	bl	8017280 <pbuf_ref>
  return cseg;
 8018dae:	68fb      	ldr	r3, [r7, #12]
}
 8018db0:	4618      	mov	r0, r3
 8018db2:	3710      	adds	r7, #16
 8018db4:	46bd      	mov	sp, r7
 8018db6:	bd80      	pop	{r7, pc}
 8018db8:	08027154 	.word	0x08027154
 8018dbc:	080276d4 	.word	0x080276d4
 8018dc0:	080271c4 	.word	0x080271c4

08018dc4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8018dc4:	b580      	push	{r7, lr}
 8018dc6:	b084      	sub	sp, #16
 8018dc8:	af00      	add	r7, sp, #0
 8018dca:	60f8      	str	r0, [r7, #12]
 8018dcc:	60b9      	str	r1, [r7, #8]
 8018dce:	607a      	str	r2, [r7, #4]
 8018dd0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8018dd2:	68bb      	ldr	r3, [r7, #8]
 8018dd4:	2b00      	cmp	r3, #0
 8018dd6:	d109      	bne.n	8018dec <tcp_recv_null+0x28>
 8018dd8:	4b12      	ldr	r3, [pc, #72]	; (8018e24 <tcp_recv_null+0x60>)
 8018dda:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8018dde:	4912      	ldr	r1, [pc, #72]	; (8018e28 <tcp_recv_null+0x64>)
 8018de0:	4812      	ldr	r0, [pc, #72]	; (8018e2c <tcp_recv_null+0x68>)
 8018de2:	f008 f843 	bl	8020e6c <iprintf>
 8018de6:	f06f 030f 	mvn.w	r3, #15
 8018dea:	e016      	b.n	8018e1a <tcp_recv_null+0x56>

  if (p != NULL) {
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	2b00      	cmp	r3, #0
 8018df0:	d009      	beq.n	8018e06 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8018df2:	687b      	ldr	r3, [r7, #4]
 8018df4:	891b      	ldrh	r3, [r3, #8]
 8018df6:	4619      	mov	r1, r3
 8018df8:	68b8      	ldr	r0, [r7, #8]
 8018dfa:	f7ff f9bb 	bl	8018174 <tcp_recved>
    pbuf_free(p);
 8018dfe:	6878      	ldr	r0, [r7, #4]
 8018e00:	f7fe f99e 	bl	8017140 <pbuf_free>
 8018e04:	e008      	b.n	8018e18 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8018e06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018e0a:	2b00      	cmp	r3, #0
 8018e0c:	d104      	bne.n	8018e18 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8018e0e:	68b8      	ldr	r0, [r7, #8]
 8018e10:	f7fe feec 	bl	8017bec <tcp_close>
 8018e14:	4603      	mov	r3, r0
 8018e16:	e000      	b.n	8018e1a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8018e18:	2300      	movs	r3, #0
}
 8018e1a:	4618      	mov	r0, r3
 8018e1c:	3710      	adds	r7, #16
 8018e1e:	46bd      	mov	sp, r7
 8018e20:	bd80      	pop	{r7, pc}
 8018e22:	bf00      	nop
 8018e24:	08027154 	.word	0x08027154
 8018e28:	080276f0 	.word	0x080276f0
 8018e2c:	080271c4 	.word	0x080271c4

08018e30 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8018e30:	b580      	push	{r7, lr}
 8018e32:	b086      	sub	sp, #24
 8018e34:	af00      	add	r7, sp, #0
 8018e36:	4603      	mov	r3, r0
 8018e38:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8018e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018e3e:	2b00      	cmp	r3, #0
 8018e40:	db01      	blt.n	8018e46 <tcp_kill_prio+0x16>
 8018e42:	79fb      	ldrb	r3, [r7, #7]
 8018e44:	e000      	b.n	8018e48 <tcp_kill_prio+0x18>
 8018e46:	237f      	movs	r3, #127	; 0x7f
 8018e48:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8018e4a:	7afb      	ldrb	r3, [r7, #11]
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	d034      	beq.n	8018eba <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8018e50:	7afb      	ldrb	r3, [r7, #11]
 8018e52:	3b01      	subs	r3, #1
 8018e54:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8018e56:	2300      	movs	r3, #0
 8018e58:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8018e5a:	2300      	movs	r3, #0
 8018e5c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018e5e:	4b19      	ldr	r3, [pc, #100]	; (8018ec4 <tcp_kill_prio+0x94>)
 8018e60:	681b      	ldr	r3, [r3, #0]
 8018e62:	617b      	str	r3, [r7, #20]
 8018e64:	e01f      	b.n	8018ea6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8018e66:	697b      	ldr	r3, [r7, #20]
 8018e68:	7d5b      	ldrb	r3, [r3, #21]
 8018e6a:	7afa      	ldrb	r2, [r7, #11]
 8018e6c:	429a      	cmp	r2, r3
 8018e6e:	d80c      	bhi.n	8018e8a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8018e70:	697b      	ldr	r3, [r7, #20]
 8018e72:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8018e74:	7afa      	ldrb	r2, [r7, #11]
 8018e76:	429a      	cmp	r2, r3
 8018e78:	d112      	bne.n	8018ea0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8018e7a:	4b13      	ldr	r3, [pc, #76]	; (8018ec8 <tcp_kill_prio+0x98>)
 8018e7c:	681a      	ldr	r2, [r3, #0]
 8018e7e:	697b      	ldr	r3, [r7, #20]
 8018e80:	6a1b      	ldr	r3, [r3, #32]
 8018e82:	1ad3      	subs	r3, r2, r3
 8018e84:	68fa      	ldr	r2, [r7, #12]
 8018e86:	429a      	cmp	r2, r3
 8018e88:	d80a      	bhi.n	8018ea0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8018e8a:	4b0f      	ldr	r3, [pc, #60]	; (8018ec8 <tcp_kill_prio+0x98>)
 8018e8c:	681a      	ldr	r2, [r3, #0]
 8018e8e:	697b      	ldr	r3, [r7, #20]
 8018e90:	6a1b      	ldr	r3, [r3, #32]
 8018e92:	1ad3      	subs	r3, r2, r3
 8018e94:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8018e96:	697b      	ldr	r3, [r7, #20]
 8018e98:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8018e9a:	697b      	ldr	r3, [r7, #20]
 8018e9c:	7d5b      	ldrb	r3, [r3, #21]
 8018e9e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018ea0:	697b      	ldr	r3, [r7, #20]
 8018ea2:	68db      	ldr	r3, [r3, #12]
 8018ea4:	617b      	str	r3, [r7, #20]
 8018ea6:	697b      	ldr	r3, [r7, #20]
 8018ea8:	2b00      	cmp	r3, #0
 8018eaa:	d1dc      	bne.n	8018e66 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8018eac:	693b      	ldr	r3, [r7, #16]
 8018eae:	2b00      	cmp	r3, #0
 8018eb0:	d004      	beq.n	8018ebc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8018eb2:	6938      	ldr	r0, [r7, #16]
 8018eb4:	f7fe ff84 	bl	8017dc0 <tcp_abort>
 8018eb8:	e000      	b.n	8018ebc <tcp_kill_prio+0x8c>
    return;
 8018eba:	bf00      	nop
  }
}
 8018ebc:	3718      	adds	r7, #24
 8018ebe:	46bd      	mov	sp, r7
 8018ec0:	bd80      	pop	{r7, pc}
 8018ec2:	bf00      	nop
 8018ec4:	240082b8 	.word	0x240082b8
 8018ec8:	240082bc 	.word	0x240082bc

08018ecc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8018ecc:	b580      	push	{r7, lr}
 8018ece:	b086      	sub	sp, #24
 8018ed0:	af00      	add	r7, sp, #0
 8018ed2:	4603      	mov	r3, r0
 8018ed4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8018ed6:	79fb      	ldrb	r3, [r7, #7]
 8018ed8:	2b08      	cmp	r3, #8
 8018eda:	d009      	beq.n	8018ef0 <tcp_kill_state+0x24>
 8018edc:	79fb      	ldrb	r3, [r7, #7]
 8018ede:	2b09      	cmp	r3, #9
 8018ee0:	d006      	beq.n	8018ef0 <tcp_kill_state+0x24>
 8018ee2:	4b1a      	ldr	r3, [pc, #104]	; (8018f4c <tcp_kill_state+0x80>)
 8018ee4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8018ee8:	4919      	ldr	r1, [pc, #100]	; (8018f50 <tcp_kill_state+0x84>)
 8018eea:	481a      	ldr	r0, [pc, #104]	; (8018f54 <tcp_kill_state+0x88>)
 8018eec:	f007 ffbe 	bl	8020e6c <iprintf>

  inactivity = 0;
 8018ef0:	2300      	movs	r3, #0
 8018ef2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8018ef4:	2300      	movs	r3, #0
 8018ef6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018ef8:	4b17      	ldr	r3, [pc, #92]	; (8018f58 <tcp_kill_state+0x8c>)
 8018efa:	681b      	ldr	r3, [r3, #0]
 8018efc:	617b      	str	r3, [r7, #20]
 8018efe:	e017      	b.n	8018f30 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8018f00:	697b      	ldr	r3, [r7, #20]
 8018f02:	7d1b      	ldrb	r3, [r3, #20]
 8018f04:	79fa      	ldrb	r2, [r7, #7]
 8018f06:	429a      	cmp	r2, r3
 8018f08:	d10f      	bne.n	8018f2a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8018f0a:	4b14      	ldr	r3, [pc, #80]	; (8018f5c <tcp_kill_state+0x90>)
 8018f0c:	681a      	ldr	r2, [r3, #0]
 8018f0e:	697b      	ldr	r3, [r7, #20]
 8018f10:	6a1b      	ldr	r3, [r3, #32]
 8018f12:	1ad3      	subs	r3, r2, r3
 8018f14:	68fa      	ldr	r2, [r7, #12]
 8018f16:	429a      	cmp	r2, r3
 8018f18:	d807      	bhi.n	8018f2a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8018f1a:	4b10      	ldr	r3, [pc, #64]	; (8018f5c <tcp_kill_state+0x90>)
 8018f1c:	681a      	ldr	r2, [r3, #0]
 8018f1e:	697b      	ldr	r3, [r7, #20]
 8018f20:	6a1b      	ldr	r3, [r3, #32]
 8018f22:	1ad3      	subs	r3, r2, r3
 8018f24:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8018f26:	697b      	ldr	r3, [r7, #20]
 8018f28:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018f2a:	697b      	ldr	r3, [r7, #20]
 8018f2c:	68db      	ldr	r3, [r3, #12]
 8018f2e:	617b      	str	r3, [r7, #20]
 8018f30:	697b      	ldr	r3, [r7, #20]
 8018f32:	2b00      	cmp	r3, #0
 8018f34:	d1e4      	bne.n	8018f00 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8018f36:	693b      	ldr	r3, [r7, #16]
 8018f38:	2b00      	cmp	r3, #0
 8018f3a:	d003      	beq.n	8018f44 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8018f3c:	2100      	movs	r1, #0
 8018f3e:	6938      	ldr	r0, [r7, #16]
 8018f40:	f7fe fe80 	bl	8017c44 <tcp_abandon>
  }
}
 8018f44:	bf00      	nop
 8018f46:	3718      	adds	r7, #24
 8018f48:	46bd      	mov	sp, r7
 8018f4a:	bd80      	pop	{r7, pc}
 8018f4c:	08027154 	.word	0x08027154
 8018f50:	0802770c 	.word	0x0802770c
 8018f54:	080271c4 	.word	0x080271c4
 8018f58:	240082b8 	.word	0x240082b8
 8018f5c:	240082bc 	.word	0x240082bc

08018f60 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8018f60:	b580      	push	{r7, lr}
 8018f62:	b084      	sub	sp, #16
 8018f64:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8018f66:	2300      	movs	r3, #0
 8018f68:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8018f6a:	2300      	movs	r3, #0
 8018f6c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8018f6e:	4b12      	ldr	r3, [pc, #72]	; (8018fb8 <tcp_kill_timewait+0x58>)
 8018f70:	681b      	ldr	r3, [r3, #0]
 8018f72:	60fb      	str	r3, [r7, #12]
 8018f74:	e012      	b.n	8018f9c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8018f76:	4b11      	ldr	r3, [pc, #68]	; (8018fbc <tcp_kill_timewait+0x5c>)
 8018f78:	681a      	ldr	r2, [r3, #0]
 8018f7a:	68fb      	ldr	r3, [r7, #12]
 8018f7c:	6a1b      	ldr	r3, [r3, #32]
 8018f7e:	1ad3      	subs	r3, r2, r3
 8018f80:	687a      	ldr	r2, [r7, #4]
 8018f82:	429a      	cmp	r2, r3
 8018f84:	d807      	bhi.n	8018f96 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8018f86:	4b0d      	ldr	r3, [pc, #52]	; (8018fbc <tcp_kill_timewait+0x5c>)
 8018f88:	681a      	ldr	r2, [r3, #0]
 8018f8a:	68fb      	ldr	r3, [r7, #12]
 8018f8c:	6a1b      	ldr	r3, [r3, #32]
 8018f8e:	1ad3      	subs	r3, r2, r3
 8018f90:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8018f92:	68fb      	ldr	r3, [r7, #12]
 8018f94:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8018f96:	68fb      	ldr	r3, [r7, #12]
 8018f98:	68db      	ldr	r3, [r3, #12]
 8018f9a:	60fb      	str	r3, [r7, #12]
 8018f9c:	68fb      	ldr	r3, [r7, #12]
 8018f9e:	2b00      	cmp	r3, #0
 8018fa0:	d1e9      	bne.n	8018f76 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8018fa2:	68bb      	ldr	r3, [r7, #8]
 8018fa4:	2b00      	cmp	r3, #0
 8018fa6:	d002      	beq.n	8018fae <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8018fa8:	68b8      	ldr	r0, [r7, #8]
 8018faa:	f7fe ff09 	bl	8017dc0 <tcp_abort>
  }
}
 8018fae:	bf00      	nop
 8018fb0:	3710      	adds	r7, #16
 8018fb2:	46bd      	mov	sp, r7
 8018fb4:	bd80      	pop	{r7, pc}
 8018fb6:	bf00      	nop
 8018fb8:	240082c8 	.word	0x240082c8
 8018fbc:	240082bc 	.word	0x240082bc

08018fc0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8018fc0:	b580      	push	{r7, lr}
 8018fc2:	b082      	sub	sp, #8
 8018fc4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8018fc6:	4b10      	ldr	r3, [pc, #64]	; (8019008 <tcp_handle_closepend+0x48>)
 8018fc8:	681b      	ldr	r3, [r3, #0]
 8018fca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8018fcc:	e014      	b.n	8018ff8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8018fce:	687b      	ldr	r3, [r7, #4]
 8018fd0:	68db      	ldr	r3, [r3, #12]
 8018fd2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	8b5b      	ldrh	r3, [r3, #26]
 8018fd8:	f003 0308 	and.w	r3, r3, #8
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	d009      	beq.n	8018ff4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8018fe0:	687b      	ldr	r3, [r7, #4]
 8018fe2:	8b5b      	ldrh	r3, [r3, #26]
 8018fe4:	f023 0308 	bic.w	r3, r3, #8
 8018fe8:	b29a      	uxth	r2, r3
 8018fea:	687b      	ldr	r3, [r7, #4]
 8018fec:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8018fee:	6878      	ldr	r0, [r7, #4]
 8018ff0:	f7fe fd92 	bl	8017b18 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8018ff4:	683b      	ldr	r3, [r7, #0]
 8018ff6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	2b00      	cmp	r3, #0
 8018ffc:	d1e7      	bne.n	8018fce <tcp_handle_closepend+0xe>
  }
}
 8018ffe:	bf00      	nop
 8019000:	bf00      	nop
 8019002:	3708      	adds	r7, #8
 8019004:	46bd      	mov	sp, r7
 8019006:	bd80      	pop	{r7, pc}
 8019008:	240082b8 	.word	0x240082b8

0801900c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801900c:	b580      	push	{r7, lr}
 801900e:	b084      	sub	sp, #16
 8019010:	af00      	add	r7, sp, #0
 8019012:	4603      	mov	r3, r0
 8019014:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8019016:	2001      	movs	r0, #1
 8019018:	f7fd f9ac 	bl	8016374 <memp_malloc>
 801901c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801901e:	68fb      	ldr	r3, [r7, #12]
 8019020:	2b00      	cmp	r3, #0
 8019022:	d126      	bne.n	8019072 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8019024:	f7ff ffcc 	bl	8018fc0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8019028:	f7ff ff9a 	bl	8018f60 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801902c:	2001      	movs	r0, #1
 801902e:	f7fd f9a1 	bl	8016374 <memp_malloc>
 8019032:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8019034:	68fb      	ldr	r3, [r7, #12]
 8019036:	2b00      	cmp	r3, #0
 8019038:	d11b      	bne.n	8019072 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801903a:	2009      	movs	r0, #9
 801903c:	f7ff ff46 	bl	8018ecc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8019040:	2001      	movs	r0, #1
 8019042:	f7fd f997 	bl	8016374 <memp_malloc>
 8019046:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8019048:	68fb      	ldr	r3, [r7, #12]
 801904a:	2b00      	cmp	r3, #0
 801904c:	d111      	bne.n	8019072 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801904e:	2008      	movs	r0, #8
 8019050:	f7ff ff3c 	bl	8018ecc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8019054:	2001      	movs	r0, #1
 8019056:	f7fd f98d 	bl	8016374 <memp_malloc>
 801905a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801905c:	68fb      	ldr	r3, [r7, #12]
 801905e:	2b00      	cmp	r3, #0
 8019060:	d107      	bne.n	8019072 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8019062:	79fb      	ldrb	r3, [r7, #7]
 8019064:	4618      	mov	r0, r3
 8019066:	f7ff fee3 	bl	8018e30 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801906a:	2001      	movs	r0, #1
 801906c:	f7fd f982 	bl	8016374 <memp_malloc>
 8019070:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8019072:	68fb      	ldr	r3, [r7, #12]
 8019074:	2b00      	cmp	r3, #0
 8019076:	d03f      	beq.n	80190f8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8019078:	229c      	movs	r2, #156	; 0x9c
 801907a:	2100      	movs	r1, #0
 801907c:	68f8      	ldr	r0, [r7, #12]
 801907e:	f006 fffb 	bl	8020078 <memset>
    pcb->prio = prio;
 8019082:	68fb      	ldr	r3, [r7, #12]
 8019084:	79fa      	ldrb	r2, [r7, #7]
 8019086:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8019088:	68fb      	ldr	r3, [r7, #12]
 801908a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801908e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8019092:	68fb      	ldr	r3, [r7, #12]
 8019094:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8019098:	855a      	strh	r2, [r3, #42]	; 0x2a
 801909a:	68fb      	ldr	r3, [r7, #12]
 801909c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801909e:	68fb      	ldr	r3, [r7, #12]
 80190a0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80190a2:	68fb      	ldr	r3, [r7, #12]
 80190a4:	22ff      	movs	r2, #255	; 0xff
 80190a6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80190a8:	68fb      	ldr	r3, [r7, #12]
 80190aa:	f44f 7206 	mov.w	r2, #536	; 0x218
 80190ae:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80190b0:	68fb      	ldr	r3, [r7, #12]
 80190b2:	2206      	movs	r2, #6
 80190b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80190b8:	68fb      	ldr	r3, [r7, #12]
 80190ba:	2206      	movs	r2, #6
 80190bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80190be:	68fb      	ldr	r3, [r7, #12]
 80190c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80190c4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80190c6:	68fb      	ldr	r3, [r7, #12]
 80190c8:	2201      	movs	r2, #1
 80190ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80190ce:	4b0d      	ldr	r3, [pc, #52]	; (8019104 <tcp_alloc+0xf8>)
 80190d0:	681a      	ldr	r2, [r3, #0]
 80190d2:	68fb      	ldr	r3, [r7, #12]
 80190d4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80190d6:	4b0c      	ldr	r3, [pc, #48]	; (8019108 <tcp_alloc+0xfc>)
 80190d8:	781a      	ldrb	r2, [r3, #0]
 80190da:	68fb      	ldr	r3, [r7, #12]
 80190dc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80190de:	68fb      	ldr	r3, [r7, #12]
 80190e0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80190e4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80190e8:	68fb      	ldr	r3, [r7, #12]
 80190ea:	4a08      	ldr	r2, [pc, #32]	; (801910c <tcp_alloc+0x100>)
 80190ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80190f0:	68fb      	ldr	r3, [r7, #12]
 80190f2:	4a07      	ldr	r2, [pc, #28]	; (8019110 <tcp_alloc+0x104>)
 80190f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80190f8:	68fb      	ldr	r3, [r7, #12]
}
 80190fa:	4618      	mov	r0, r3
 80190fc:	3710      	adds	r7, #16
 80190fe:	46bd      	mov	sp, r7
 8019100:	bd80      	pop	{r7, pc}
 8019102:	bf00      	nop
 8019104:	240082bc 	.word	0x240082bc
 8019108:	2400489e 	.word	0x2400489e
 801910c:	08018dc5 	.word	0x08018dc5
 8019110:	006ddd00 	.word	0x006ddd00

08019114 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8019114:	b580      	push	{r7, lr}
 8019116:	b084      	sub	sp, #16
 8019118:	af00      	add	r7, sp, #0
 801911a:	4603      	mov	r3, r0
 801911c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801911e:	2040      	movs	r0, #64	; 0x40
 8019120:	f7ff ff74 	bl	801900c <tcp_alloc>
 8019124:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8019126:	68fb      	ldr	r3, [r7, #12]
}
 8019128:	4618      	mov	r0, r3
 801912a:	3710      	adds	r7, #16
 801912c:	46bd      	mov	sp, r7
 801912e:	bd80      	pop	{r7, pc}

08019130 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8019130:	b480      	push	{r7}
 8019132:	b083      	sub	sp, #12
 8019134:	af00      	add	r7, sp, #0
 8019136:	6078      	str	r0, [r7, #4]
 8019138:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	2b00      	cmp	r3, #0
 801913e:	d002      	beq.n	8019146 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8019140:	687b      	ldr	r3, [r7, #4]
 8019142:	683a      	ldr	r2, [r7, #0]
 8019144:	611a      	str	r2, [r3, #16]
  }
}
 8019146:	bf00      	nop
 8019148:	370c      	adds	r7, #12
 801914a:	46bd      	mov	sp, r7
 801914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019150:	4770      	bx	lr
	...

08019154 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8019154:	b580      	push	{r7, lr}
 8019156:	b082      	sub	sp, #8
 8019158:	af00      	add	r7, sp, #0
 801915a:	6078      	str	r0, [r7, #4]
 801915c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801915e:	687b      	ldr	r3, [r7, #4]
 8019160:	2b00      	cmp	r3, #0
 8019162:	d00e      	beq.n	8019182 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	7d1b      	ldrb	r3, [r3, #20]
 8019168:	2b01      	cmp	r3, #1
 801916a:	d106      	bne.n	801917a <tcp_recv+0x26>
 801916c:	4b07      	ldr	r3, [pc, #28]	; (801918c <tcp_recv+0x38>)
 801916e:	f240 72df 	movw	r2, #2015	; 0x7df
 8019172:	4907      	ldr	r1, [pc, #28]	; (8019190 <tcp_recv+0x3c>)
 8019174:	4807      	ldr	r0, [pc, #28]	; (8019194 <tcp_recv+0x40>)
 8019176:	f007 fe79 	bl	8020e6c <iprintf>
    pcb->recv = recv;
 801917a:	687b      	ldr	r3, [r7, #4]
 801917c:	683a      	ldr	r2, [r7, #0]
 801917e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8019182:	bf00      	nop
 8019184:	3708      	adds	r7, #8
 8019186:	46bd      	mov	sp, r7
 8019188:	bd80      	pop	{r7, pc}
 801918a:	bf00      	nop
 801918c:	08027154 	.word	0x08027154
 8019190:	0802771c 	.word	0x0802771c
 8019194:	080271c4 	.word	0x080271c4

08019198 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8019198:	b580      	push	{r7, lr}
 801919a:	b082      	sub	sp, #8
 801919c:	af00      	add	r7, sp, #0
 801919e:	6078      	str	r0, [r7, #4]
 80191a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80191a2:	687b      	ldr	r3, [r7, #4]
 80191a4:	2b00      	cmp	r3, #0
 80191a6:	d00e      	beq.n	80191c6 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	7d1b      	ldrb	r3, [r3, #20]
 80191ac:	2b01      	cmp	r3, #1
 80191ae:	d106      	bne.n	80191be <tcp_sent+0x26>
 80191b0:	4b07      	ldr	r3, [pc, #28]	; (80191d0 <tcp_sent+0x38>)
 80191b2:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80191b6:	4907      	ldr	r1, [pc, #28]	; (80191d4 <tcp_sent+0x3c>)
 80191b8:	4807      	ldr	r0, [pc, #28]	; (80191d8 <tcp_sent+0x40>)
 80191ba:	f007 fe57 	bl	8020e6c <iprintf>
    pcb->sent = sent;
 80191be:	687b      	ldr	r3, [r7, #4]
 80191c0:	683a      	ldr	r2, [r7, #0]
 80191c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80191c6:	bf00      	nop
 80191c8:	3708      	adds	r7, #8
 80191ca:	46bd      	mov	sp, r7
 80191cc:	bd80      	pop	{r7, pc}
 80191ce:	bf00      	nop
 80191d0:	08027154 	.word	0x08027154
 80191d4:	08027744 	.word	0x08027744
 80191d8:	080271c4 	.word	0x080271c4

080191dc <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80191dc:	b580      	push	{r7, lr}
 80191de:	b082      	sub	sp, #8
 80191e0:	af00      	add	r7, sp, #0
 80191e2:	6078      	str	r0, [r7, #4]
 80191e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80191e6:	687b      	ldr	r3, [r7, #4]
 80191e8:	2b00      	cmp	r3, #0
 80191ea:	d00e      	beq.n	801920a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80191ec:	687b      	ldr	r3, [r7, #4]
 80191ee:	7d1b      	ldrb	r3, [r3, #20]
 80191f0:	2b01      	cmp	r3, #1
 80191f2:	d106      	bne.n	8019202 <tcp_err+0x26>
 80191f4:	4b07      	ldr	r3, [pc, #28]	; (8019214 <tcp_err+0x38>)
 80191f6:	f640 020d 	movw	r2, #2061	; 0x80d
 80191fa:	4907      	ldr	r1, [pc, #28]	; (8019218 <tcp_err+0x3c>)
 80191fc:	4807      	ldr	r0, [pc, #28]	; (801921c <tcp_err+0x40>)
 80191fe:	f007 fe35 	bl	8020e6c <iprintf>
    pcb->errf = err;
 8019202:	687b      	ldr	r3, [r7, #4]
 8019204:	683a      	ldr	r2, [r7, #0]
 8019206:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 801920a:	bf00      	nop
 801920c:	3708      	adds	r7, #8
 801920e:	46bd      	mov	sp, r7
 8019210:	bd80      	pop	{r7, pc}
 8019212:	bf00      	nop
 8019214:	08027154 	.word	0x08027154
 8019218:	0802776c 	.word	0x0802776c
 801921c:	080271c4 	.word	0x080271c4

08019220 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8019220:	b480      	push	{r7}
 8019222:	b085      	sub	sp, #20
 8019224:	af00      	add	r7, sp, #0
 8019226:	6078      	str	r0, [r7, #4]
 8019228:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	2b00      	cmp	r3, #0
 801922e:	d008      	beq.n	8019242 <tcp_accept+0x22>
 8019230:	687b      	ldr	r3, [r7, #4]
 8019232:	7d1b      	ldrb	r3, [r3, #20]
 8019234:	2b01      	cmp	r3, #1
 8019236:	d104      	bne.n	8019242 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8019238:	687b      	ldr	r3, [r7, #4]
 801923a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801923c:	68fb      	ldr	r3, [r7, #12]
 801923e:	683a      	ldr	r2, [r7, #0]
 8019240:	619a      	str	r2, [r3, #24]
  }
}
 8019242:	bf00      	nop
 8019244:	3714      	adds	r7, #20
 8019246:	46bd      	mov	sp, r7
 8019248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801924c:	4770      	bx	lr
	...

08019250 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8019250:	b580      	push	{r7, lr}
 8019252:	b084      	sub	sp, #16
 8019254:	af00      	add	r7, sp, #0
 8019256:	60f8      	str	r0, [r7, #12]
 8019258:	60b9      	str	r1, [r7, #8]
 801925a:	4613      	mov	r3, r2
 801925c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801925e:	68fb      	ldr	r3, [r7, #12]
 8019260:	2b00      	cmp	r3, #0
 8019262:	d107      	bne.n	8019274 <tcp_poll+0x24>
 8019264:	4b0e      	ldr	r3, [pc, #56]	; (80192a0 <tcp_poll+0x50>)
 8019266:	f640 023d 	movw	r2, #2109	; 0x83d
 801926a:	490e      	ldr	r1, [pc, #56]	; (80192a4 <tcp_poll+0x54>)
 801926c:	480e      	ldr	r0, [pc, #56]	; (80192a8 <tcp_poll+0x58>)
 801926e:	f007 fdfd 	bl	8020e6c <iprintf>
 8019272:	e011      	b.n	8019298 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8019274:	68fb      	ldr	r3, [r7, #12]
 8019276:	7d1b      	ldrb	r3, [r3, #20]
 8019278:	2b01      	cmp	r3, #1
 801927a:	d106      	bne.n	801928a <tcp_poll+0x3a>
 801927c:	4b08      	ldr	r3, [pc, #32]	; (80192a0 <tcp_poll+0x50>)
 801927e:	f640 023e 	movw	r2, #2110	; 0x83e
 8019282:	490a      	ldr	r1, [pc, #40]	; (80192ac <tcp_poll+0x5c>)
 8019284:	4808      	ldr	r0, [pc, #32]	; (80192a8 <tcp_poll+0x58>)
 8019286:	f007 fdf1 	bl	8020e6c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801928a:	68fb      	ldr	r3, [r7, #12]
 801928c:	68ba      	ldr	r2, [r7, #8]
 801928e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8019292:	68fb      	ldr	r3, [r7, #12]
 8019294:	79fa      	ldrb	r2, [r7, #7]
 8019296:	775a      	strb	r2, [r3, #29]
}
 8019298:	3710      	adds	r7, #16
 801929a:	46bd      	mov	sp, r7
 801929c:	bd80      	pop	{r7, pc}
 801929e:	bf00      	nop
 80192a0:	08027154 	.word	0x08027154
 80192a4:	08027794 	.word	0x08027794
 80192a8:	080271c4 	.word	0x080271c4
 80192ac:	080277ac 	.word	0x080277ac

080192b0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80192b0:	b580      	push	{r7, lr}
 80192b2:	b082      	sub	sp, #8
 80192b4:	af00      	add	r7, sp, #0
 80192b6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	2b00      	cmp	r3, #0
 80192bc:	d107      	bne.n	80192ce <tcp_pcb_purge+0x1e>
 80192be:	4b21      	ldr	r3, [pc, #132]	; (8019344 <tcp_pcb_purge+0x94>)
 80192c0:	f640 0251 	movw	r2, #2129	; 0x851
 80192c4:	4920      	ldr	r1, [pc, #128]	; (8019348 <tcp_pcb_purge+0x98>)
 80192c6:	4821      	ldr	r0, [pc, #132]	; (801934c <tcp_pcb_purge+0x9c>)
 80192c8:	f007 fdd0 	bl	8020e6c <iprintf>
 80192cc:	e037      	b.n	801933e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80192ce:	687b      	ldr	r3, [r7, #4]
 80192d0:	7d1b      	ldrb	r3, [r3, #20]
 80192d2:	2b00      	cmp	r3, #0
 80192d4:	d033      	beq.n	801933e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80192d6:	687b      	ldr	r3, [r7, #4]
 80192d8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80192da:	2b0a      	cmp	r3, #10
 80192dc:	d02f      	beq.n	801933e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80192de:	687b      	ldr	r3, [r7, #4]
 80192e0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80192e2:	2b01      	cmp	r3, #1
 80192e4:	d02b      	beq.n	801933e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80192e6:	687b      	ldr	r3, [r7, #4]
 80192e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	d007      	beq.n	80192fe <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80192f2:	4618      	mov	r0, r3
 80192f4:	f7fd ff24 	bl	8017140 <pbuf_free>
      pcb->refused_data = NULL;
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	2200      	movs	r2, #0
 80192fc:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80192fe:	687b      	ldr	r3, [r7, #4]
 8019300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019302:	2b00      	cmp	r3, #0
 8019304:	d002      	beq.n	801930c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8019306:	6878      	ldr	r0, [r7, #4]
 8019308:	f000 f986 	bl	8019618 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801930c:	687b      	ldr	r3, [r7, #4]
 801930e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019312:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019318:	4618      	mov	r0, r3
 801931a:	f7ff fcf9 	bl	8018d10 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019322:	4618      	mov	r0, r3
 8019324:	f7ff fcf4 	bl	8018d10 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8019328:	687b      	ldr	r3, [r7, #4]
 801932a:	2200      	movs	r2, #0
 801932c:	66da      	str	r2, [r3, #108]	; 0x6c
 801932e:	687b      	ldr	r3, [r7, #4]
 8019330:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8019332:	687b      	ldr	r3, [r7, #4]
 8019334:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	2200      	movs	r2, #0
 801933a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801933e:	3708      	adds	r7, #8
 8019340:	46bd      	mov	sp, r7
 8019342:	bd80      	pop	{r7, pc}
 8019344:	08027154 	.word	0x08027154
 8019348:	080277cc 	.word	0x080277cc
 801934c:	080271c4 	.word	0x080271c4

08019350 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8019350:	b580      	push	{r7, lr}
 8019352:	b084      	sub	sp, #16
 8019354:	af00      	add	r7, sp, #0
 8019356:	6078      	str	r0, [r7, #4]
 8019358:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801935a:	683b      	ldr	r3, [r7, #0]
 801935c:	2b00      	cmp	r3, #0
 801935e:	d106      	bne.n	801936e <tcp_pcb_remove+0x1e>
 8019360:	4b3e      	ldr	r3, [pc, #248]	; (801945c <tcp_pcb_remove+0x10c>)
 8019362:	f640 0283 	movw	r2, #2179	; 0x883
 8019366:	493e      	ldr	r1, [pc, #248]	; (8019460 <tcp_pcb_remove+0x110>)
 8019368:	483e      	ldr	r0, [pc, #248]	; (8019464 <tcp_pcb_remove+0x114>)
 801936a:	f007 fd7f 	bl	8020e6c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801936e:	687b      	ldr	r3, [r7, #4]
 8019370:	2b00      	cmp	r3, #0
 8019372:	d106      	bne.n	8019382 <tcp_pcb_remove+0x32>
 8019374:	4b39      	ldr	r3, [pc, #228]	; (801945c <tcp_pcb_remove+0x10c>)
 8019376:	f640 0284 	movw	r2, #2180	; 0x884
 801937a:	493b      	ldr	r1, [pc, #236]	; (8019468 <tcp_pcb_remove+0x118>)
 801937c:	4839      	ldr	r0, [pc, #228]	; (8019464 <tcp_pcb_remove+0x114>)
 801937e:	f007 fd75 	bl	8020e6c <iprintf>

  TCP_RMV(pcblist, pcb);
 8019382:	687b      	ldr	r3, [r7, #4]
 8019384:	681b      	ldr	r3, [r3, #0]
 8019386:	683a      	ldr	r2, [r7, #0]
 8019388:	429a      	cmp	r2, r3
 801938a:	d105      	bne.n	8019398 <tcp_pcb_remove+0x48>
 801938c:	687b      	ldr	r3, [r7, #4]
 801938e:	681b      	ldr	r3, [r3, #0]
 8019390:	68da      	ldr	r2, [r3, #12]
 8019392:	687b      	ldr	r3, [r7, #4]
 8019394:	601a      	str	r2, [r3, #0]
 8019396:	e013      	b.n	80193c0 <tcp_pcb_remove+0x70>
 8019398:	687b      	ldr	r3, [r7, #4]
 801939a:	681b      	ldr	r3, [r3, #0]
 801939c:	60fb      	str	r3, [r7, #12]
 801939e:	e00c      	b.n	80193ba <tcp_pcb_remove+0x6a>
 80193a0:	68fb      	ldr	r3, [r7, #12]
 80193a2:	68db      	ldr	r3, [r3, #12]
 80193a4:	683a      	ldr	r2, [r7, #0]
 80193a6:	429a      	cmp	r2, r3
 80193a8:	d104      	bne.n	80193b4 <tcp_pcb_remove+0x64>
 80193aa:	683b      	ldr	r3, [r7, #0]
 80193ac:	68da      	ldr	r2, [r3, #12]
 80193ae:	68fb      	ldr	r3, [r7, #12]
 80193b0:	60da      	str	r2, [r3, #12]
 80193b2:	e005      	b.n	80193c0 <tcp_pcb_remove+0x70>
 80193b4:	68fb      	ldr	r3, [r7, #12]
 80193b6:	68db      	ldr	r3, [r3, #12]
 80193b8:	60fb      	str	r3, [r7, #12]
 80193ba:	68fb      	ldr	r3, [r7, #12]
 80193bc:	2b00      	cmp	r3, #0
 80193be:	d1ef      	bne.n	80193a0 <tcp_pcb_remove+0x50>
 80193c0:	683b      	ldr	r3, [r7, #0]
 80193c2:	2200      	movs	r2, #0
 80193c4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80193c6:	6838      	ldr	r0, [r7, #0]
 80193c8:	f7ff ff72 	bl	80192b0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80193cc:	683b      	ldr	r3, [r7, #0]
 80193ce:	7d1b      	ldrb	r3, [r3, #20]
 80193d0:	2b0a      	cmp	r3, #10
 80193d2:	d013      	beq.n	80193fc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80193d4:	683b      	ldr	r3, [r7, #0]
 80193d6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80193d8:	2b01      	cmp	r3, #1
 80193da:	d00f      	beq.n	80193fc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80193dc:	683b      	ldr	r3, [r7, #0]
 80193de:	8b5b      	ldrh	r3, [r3, #26]
 80193e0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80193e4:	2b00      	cmp	r3, #0
 80193e6:	d009      	beq.n	80193fc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80193e8:	683b      	ldr	r3, [r7, #0]
 80193ea:	8b5b      	ldrh	r3, [r3, #26]
 80193ec:	f043 0302 	orr.w	r3, r3, #2
 80193f0:	b29a      	uxth	r2, r3
 80193f2:	683b      	ldr	r3, [r7, #0]
 80193f4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80193f6:	6838      	ldr	r0, [r7, #0]
 80193f8:	f003 fbc2 	bl	801cb80 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80193fc:	683b      	ldr	r3, [r7, #0]
 80193fe:	7d1b      	ldrb	r3, [r3, #20]
 8019400:	2b01      	cmp	r3, #1
 8019402:	d020      	beq.n	8019446 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8019404:	683b      	ldr	r3, [r7, #0]
 8019406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019408:	2b00      	cmp	r3, #0
 801940a:	d006      	beq.n	801941a <tcp_pcb_remove+0xca>
 801940c:	4b13      	ldr	r3, [pc, #76]	; (801945c <tcp_pcb_remove+0x10c>)
 801940e:	f640 0293 	movw	r2, #2195	; 0x893
 8019412:	4916      	ldr	r1, [pc, #88]	; (801946c <tcp_pcb_remove+0x11c>)
 8019414:	4813      	ldr	r0, [pc, #76]	; (8019464 <tcp_pcb_remove+0x114>)
 8019416:	f007 fd29 	bl	8020e6c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801941a:	683b      	ldr	r3, [r7, #0]
 801941c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801941e:	2b00      	cmp	r3, #0
 8019420:	d006      	beq.n	8019430 <tcp_pcb_remove+0xe0>
 8019422:	4b0e      	ldr	r3, [pc, #56]	; (801945c <tcp_pcb_remove+0x10c>)
 8019424:	f640 0294 	movw	r2, #2196	; 0x894
 8019428:	4911      	ldr	r1, [pc, #68]	; (8019470 <tcp_pcb_remove+0x120>)
 801942a:	480e      	ldr	r0, [pc, #56]	; (8019464 <tcp_pcb_remove+0x114>)
 801942c:	f007 fd1e 	bl	8020e6c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8019430:	683b      	ldr	r3, [r7, #0]
 8019432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019434:	2b00      	cmp	r3, #0
 8019436:	d006      	beq.n	8019446 <tcp_pcb_remove+0xf6>
 8019438:	4b08      	ldr	r3, [pc, #32]	; (801945c <tcp_pcb_remove+0x10c>)
 801943a:	f640 0296 	movw	r2, #2198	; 0x896
 801943e:	490d      	ldr	r1, [pc, #52]	; (8019474 <tcp_pcb_remove+0x124>)
 8019440:	4808      	ldr	r0, [pc, #32]	; (8019464 <tcp_pcb_remove+0x114>)
 8019442:	f007 fd13 	bl	8020e6c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8019446:	683b      	ldr	r3, [r7, #0]
 8019448:	2200      	movs	r2, #0
 801944a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801944c:	683b      	ldr	r3, [r7, #0]
 801944e:	2200      	movs	r2, #0
 8019450:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8019452:	bf00      	nop
 8019454:	3710      	adds	r7, #16
 8019456:	46bd      	mov	sp, r7
 8019458:	bd80      	pop	{r7, pc}
 801945a:	bf00      	nop
 801945c:	08027154 	.word	0x08027154
 8019460:	080277e8 	.word	0x080277e8
 8019464:	080271c4 	.word	0x080271c4
 8019468:	08027804 	.word	0x08027804
 801946c:	08027824 	.word	0x08027824
 8019470:	0802783c 	.word	0x0802783c
 8019474:	08027858 	.word	0x08027858

08019478 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8019478:	b580      	push	{r7, lr}
 801947a:	b082      	sub	sp, #8
 801947c:	af00      	add	r7, sp, #0
 801947e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8019480:	687b      	ldr	r3, [r7, #4]
 8019482:	2b00      	cmp	r3, #0
 8019484:	d106      	bne.n	8019494 <tcp_next_iss+0x1c>
 8019486:	4b0a      	ldr	r3, [pc, #40]	; (80194b0 <tcp_next_iss+0x38>)
 8019488:	f640 02af 	movw	r2, #2223	; 0x8af
 801948c:	4909      	ldr	r1, [pc, #36]	; (80194b4 <tcp_next_iss+0x3c>)
 801948e:	480a      	ldr	r0, [pc, #40]	; (80194b8 <tcp_next_iss+0x40>)
 8019490:	f007 fcec 	bl	8020e6c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8019494:	4b09      	ldr	r3, [pc, #36]	; (80194bc <tcp_next_iss+0x44>)
 8019496:	681a      	ldr	r2, [r3, #0]
 8019498:	4b09      	ldr	r3, [pc, #36]	; (80194c0 <tcp_next_iss+0x48>)
 801949a:	681b      	ldr	r3, [r3, #0]
 801949c:	4413      	add	r3, r2
 801949e:	4a07      	ldr	r2, [pc, #28]	; (80194bc <tcp_next_iss+0x44>)
 80194a0:	6013      	str	r3, [r2, #0]
  return iss;
 80194a2:	4b06      	ldr	r3, [pc, #24]	; (80194bc <tcp_next_iss+0x44>)
 80194a4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80194a6:	4618      	mov	r0, r3
 80194a8:	3708      	adds	r7, #8
 80194aa:	46bd      	mov	sp, r7
 80194ac:	bd80      	pop	{r7, pc}
 80194ae:	bf00      	nop
 80194b0:	08027154 	.word	0x08027154
 80194b4:	08027870 	.word	0x08027870
 80194b8:	080271c4 	.word	0x080271c4
 80194bc:	24000030 	.word	0x24000030
 80194c0:	240082bc 	.word	0x240082bc

080194c4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80194c4:	b580      	push	{r7, lr}
 80194c6:	b086      	sub	sp, #24
 80194c8:	af00      	add	r7, sp, #0
 80194ca:	4603      	mov	r3, r0
 80194cc:	60b9      	str	r1, [r7, #8]
 80194ce:	607a      	str	r2, [r7, #4]
 80194d0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80194d2:	687b      	ldr	r3, [r7, #4]
 80194d4:	2b00      	cmp	r3, #0
 80194d6:	d106      	bne.n	80194e6 <tcp_eff_send_mss_netif+0x22>
 80194d8:	4b14      	ldr	r3, [pc, #80]	; (801952c <tcp_eff_send_mss_netif+0x68>)
 80194da:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80194de:	4914      	ldr	r1, [pc, #80]	; (8019530 <tcp_eff_send_mss_netif+0x6c>)
 80194e0:	4814      	ldr	r0, [pc, #80]	; (8019534 <tcp_eff_send_mss_netif+0x70>)
 80194e2:	f007 fcc3 	bl	8020e6c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80194e6:	68bb      	ldr	r3, [r7, #8]
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d101      	bne.n	80194f0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80194ec:	89fb      	ldrh	r3, [r7, #14]
 80194ee:	e019      	b.n	8019524 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80194f0:	68bb      	ldr	r3, [r7, #8]
 80194f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80194f4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80194f6:	8afb      	ldrh	r3, [r7, #22]
 80194f8:	2b00      	cmp	r3, #0
 80194fa:	d012      	beq.n	8019522 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80194fc:	2328      	movs	r3, #40	; 0x28
 80194fe:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8019500:	8afa      	ldrh	r2, [r7, #22]
 8019502:	8abb      	ldrh	r3, [r7, #20]
 8019504:	429a      	cmp	r2, r3
 8019506:	d904      	bls.n	8019512 <tcp_eff_send_mss_netif+0x4e>
 8019508:	8afa      	ldrh	r2, [r7, #22]
 801950a:	8abb      	ldrh	r3, [r7, #20]
 801950c:	1ad3      	subs	r3, r2, r3
 801950e:	b29b      	uxth	r3, r3
 8019510:	e000      	b.n	8019514 <tcp_eff_send_mss_netif+0x50>
 8019512:	2300      	movs	r3, #0
 8019514:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8019516:	8a7a      	ldrh	r2, [r7, #18]
 8019518:	89fb      	ldrh	r3, [r7, #14]
 801951a:	4293      	cmp	r3, r2
 801951c:	bf28      	it	cs
 801951e:	4613      	movcs	r3, r2
 8019520:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8019522:	89fb      	ldrh	r3, [r7, #14]
}
 8019524:	4618      	mov	r0, r3
 8019526:	3718      	adds	r7, #24
 8019528:	46bd      	mov	sp, r7
 801952a:	bd80      	pop	{r7, pc}
 801952c:	08027154 	.word	0x08027154
 8019530:	0802788c 	.word	0x0802788c
 8019534:	080271c4 	.word	0x080271c4

08019538 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8019538:	b580      	push	{r7, lr}
 801953a:	b084      	sub	sp, #16
 801953c:	af00      	add	r7, sp, #0
 801953e:	6078      	str	r0, [r7, #4]
 8019540:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8019542:	683b      	ldr	r3, [r7, #0]
 8019544:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8019546:	687b      	ldr	r3, [r7, #4]
 8019548:	2b00      	cmp	r3, #0
 801954a:	d119      	bne.n	8019580 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801954c:	4b10      	ldr	r3, [pc, #64]	; (8019590 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801954e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8019552:	4910      	ldr	r1, [pc, #64]	; (8019594 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8019554:	4810      	ldr	r0, [pc, #64]	; (8019598 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8019556:	f007 fc89 	bl	8020e6c <iprintf>

  while (pcb != NULL) {
 801955a:	e011      	b.n	8019580 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801955c:	68fb      	ldr	r3, [r7, #12]
 801955e:	681a      	ldr	r2, [r3, #0]
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	681b      	ldr	r3, [r3, #0]
 8019564:	429a      	cmp	r2, r3
 8019566:	d108      	bne.n	801957a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8019568:	68fb      	ldr	r3, [r7, #12]
 801956a:	68db      	ldr	r3, [r3, #12]
 801956c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801956e:	68f8      	ldr	r0, [r7, #12]
 8019570:	f7fe fc26 	bl	8017dc0 <tcp_abort>
      pcb = next;
 8019574:	68bb      	ldr	r3, [r7, #8]
 8019576:	60fb      	str	r3, [r7, #12]
 8019578:	e002      	b.n	8019580 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801957a:	68fb      	ldr	r3, [r7, #12]
 801957c:	68db      	ldr	r3, [r3, #12]
 801957e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8019580:	68fb      	ldr	r3, [r7, #12]
 8019582:	2b00      	cmp	r3, #0
 8019584:	d1ea      	bne.n	801955c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8019586:	bf00      	nop
 8019588:	bf00      	nop
 801958a:	3710      	adds	r7, #16
 801958c:	46bd      	mov	sp, r7
 801958e:	bd80      	pop	{r7, pc}
 8019590:	08027154 	.word	0x08027154
 8019594:	080278b4 	.word	0x080278b4
 8019598:	080271c4 	.word	0x080271c4

0801959c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801959c:	b580      	push	{r7, lr}
 801959e:	b084      	sub	sp, #16
 80195a0:	af00      	add	r7, sp, #0
 80195a2:	6078      	str	r0, [r7, #4]
 80195a4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80195a6:	687b      	ldr	r3, [r7, #4]
 80195a8:	2b00      	cmp	r3, #0
 80195aa:	d02a      	beq.n	8019602 <tcp_netif_ip_addr_changed+0x66>
 80195ac:	687b      	ldr	r3, [r7, #4]
 80195ae:	681b      	ldr	r3, [r3, #0]
 80195b0:	2b00      	cmp	r3, #0
 80195b2:	d026      	beq.n	8019602 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80195b4:	4b15      	ldr	r3, [pc, #84]	; (801960c <tcp_netif_ip_addr_changed+0x70>)
 80195b6:	681b      	ldr	r3, [r3, #0]
 80195b8:	4619      	mov	r1, r3
 80195ba:	6878      	ldr	r0, [r7, #4]
 80195bc:	f7ff ffbc 	bl	8019538 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80195c0:	4b13      	ldr	r3, [pc, #76]	; (8019610 <tcp_netif_ip_addr_changed+0x74>)
 80195c2:	681b      	ldr	r3, [r3, #0]
 80195c4:	4619      	mov	r1, r3
 80195c6:	6878      	ldr	r0, [r7, #4]
 80195c8:	f7ff ffb6 	bl	8019538 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80195cc:	683b      	ldr	r3, [r7, #0]
 80195ce:	2b00      	cmp	r3, #0
 80195d0:	d017      	beq.n	8019602 <tcp_netif_ip_addr_changed+0x66>
 80195d2:	683b      	ldr	r3, [r7, #0]
 80195d4:	681b      	ldr	r3, [r3, #0]
 80195d6:	2b00      	cmp	r3, #0
 80195d8:	d013      	beq.n	8019602 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80195da:	4b0e      	ldr	r3, [pc, #56]	; (8019614 <tcp_netif_ip_addr_changed+0x78>)
 80195dc:	681b      	ldr	r3, [r3, #0]
 80195de:	60fb      	str	r3, [r7, #12]
 80195e0:	e00c      	b.n	80195fc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80195e2:	68fb      	ldr	r3, [r7, #12]
 80195e4:	681a      	ldr	r2, [r3, #0]
 80195e6:	687b      	ldr	r3, [r7, #4]
 80195e8:	681b      	ldr	r3, [r3, #0]
 80195ea:	429a      	cmp	r2, r3
 80195ec:	d103      	bne.n	80195f6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80195ee:	683b      	ldr	r3, [r7, #0]
 80195f0:	681a      	ldr	r2, [r3, #0]
 80195f2:	68fb      	ldr	r3, [r7, #12]
 80195f4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80195f6:	68fb      	ldr	r3, [r7, #12]
 80195f8:	68db      	ldr	r3, [r3, #12]
 80195fa:	60fb      	str	r3, [r7, #12]
 80195fc:	68fb      	ldr	r3, [r7, #12]
 80195fe:	2b00      	cmp	r3, #0
 8019600:	d1ef      	bne.n	80195e2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8019602:	bf00      	nop
 8019604:	3710      	adds	r7, #16
 8019606:	46bd      	mov	sp, r7
 8019608:	bd80      	pop	{r7, pc}
 801960a:	bf00      	nop
 801960c:	240082b8 	.word	0x240082b8
 8019610:	240082c4 	.word	0x240082c4
 8019614:	240082c0 	.word	0x240082c0

08019618 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8019618:	b580      	push	{r7, lr}
 801961a:	b082      	sub	sp, #8
 801961c:	af00      	add	r7, sp, #0
 801961e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019624:	2b00      	cmp	r3, #0
 8019626:	d007      	beq.n	8019638 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801962c:	4618      	mov	r0, r3
 801962e:	f7ff fb6f 	bl	8018d10 <tcp_segs_free>
    pcb->ooseq = NULL;
 8019632:	687b      	ldr	r3, [r7, #4]
 8019634:	2200      	movs	r2, #0
 8019636:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8019638:	bf00      	nop
 801963a:	3708      	adds	r7, #8
 801963c:	46bd      	mov	sp, r7
 801963e:	bd80      	pop	{r7, pc}

08019640 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8019640:	b590      	push	{r4, r7, lr}
 8019642:	b08d      	sub	sp, #52	; 0x34
 8019644:	af04      	add	r7, sp, #16
 8019646:	6078      	str	r0, [r7, #4]
 8019648:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	2b00      	cmp	r3, #0
 801964e:	d105      	bne.n	801965c <tcp_input+0x1c>
 8019650:	4b9b      	ldr	r3, [pc, #620]	; (80198c0 <tcp_input+0x280>)
 8019652:	2283      	movs	r2, #131	; 0x83
 8019654:	499b      	ldr	r1, [pc, #620]	; (80198c4 <tcp_input+0x284>)
 8019656:	489c      	ldr	r0, [pc, #624]	; (80198c8 <tcp_input+0x288>)
 8019658:	f007 fc08 	bl	8020e6c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801965c:	687b      	ldr	r3, [r7, #4]
 801965e:	685b      	ldr	r3, [r3, #4]
 8019660:	4a9a      	ldr	r2, [pc, #616]	; (80198cc <tcp_input+0x28c>)
 8019662:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8019664:	687b      	ldr	r3, [r7, #4]
 8019666:	895b      	ldrh	r3, [r3, #10]
 8019668:	2b13      	cmp	r3, #19
 801966a:	f240 83c4 	bls.w	8019df6 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801966e:	4b98      	ldr	r3, [pc, #608]	; (80198d0 <tcp_input+0x290>)
 8019670:	695b      	ldr	r3, [r3, #20]
 8019672:	4a97      	ldr	r2, [pc, #604]	; (80198d0 <tcp_input+0x290>)
 8019674:	6812      	ldr	r2, [r2, #0]
 8019676:	4611      	mov	r1, r2
 8019678:	4618      	mov	r0, r3
 801967a:	f7fb fbd1 	bl	8014e20 <ip4_addr_isbroadcast_u32>
 801967e:	4603      	mov	r3, r0
 8019680:	2b00      	cmp	r3, #0
 8019682:	f040 83ba 	bne.w	8019dfa <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8019686:	4b92      	ldr	r3, [pc, #584]	; (80198d0 <tcp_input+0x290>)
 8019688:	695b      	ldr	r3, [r3, #20]
 801968a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801968e:	2be0      	cmp	r3, #224	; 0xe0
 8019690:	f000 83b3 	beq.w	8019dfa <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8019694:	4b8d      	ldr	r3, [pc, #564]	; (80198cc <tcp_input+0x28c>)
 8019696:	681b      	ldr	r3, [r3, #0]
 8019698:	899b      	ldrh	r3, [r3, #12]
 801969a:	b29b      	uxth	r3, r3
 801969c:	4618      	mov	r0, r3
 801969e:	f7f9 fe53 	bl	8013348 <lwip_htons>
 80196a2:	4603      	mov	r3, r0
 80196a4:	0b1b      	lsrs	r3, r3, #12
 80196a6:	b29b      	uxth	r3, r3
 80196a8:	b2db      	uxtb	r3, r3
 80196aa:	009b      	lsls	r3, r3, #2
 80196ac:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80196ae:	7cbb      	ldrb	r3, [r7, #18]
 80196b0:	2b13      	cmp	r3, #19
 80196b2:	f240 83a4 	bls.w	8019dfe <tcp_input+0x7be>
 80196b6:	7cbb      	ldrb	r3, [r7, #18]
 80196b8:	b29a      	uxth	r2, r3
 80196ba:	687b      	ldr	r3, [r7, #4]
 80196bc:	891b      	ldrh	r3, [r3, #8]
 80196be:	429a      	cmp	r2, r3
 80196c0:	f200 839d 	bhi.w	8019dfe <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80196c4:	7cbb      	ldrb	r3, [r7, #18]
 80196c6:	b29b      	uxth	r3, r3
 80196c8:	3b14      	subs	r3, #20
 80196ca:	b29a      	uxth	r2, r3
 80196cc:	4b81      	ldr	r3, [pc, #516]	; (80198d4 <tcp_input+0x294>)
 80196ce:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80196d0:	4b81      	ldr	r3, [pc, #516]	; (80198d8 <tcp_input+0x298>)
 80196d2:	2200      	movs	r2, #0
 80196d4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	895a      	ldrh	r2, [r3, #10]
 80196da:	7cbb      	ldrb	r3, [r7, #18]
 80196dc:	b29b      	uxth	r3, r3
 80196de:	429a      	cmp	r2, r3
 80196e0:	d309      	bcc.n	80196f6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80196e2:	4b7c      	ldr	r3, [pc, #496]	; (80198d4 <tcp_input+0x294>)
 80196e4:	881a      	ldrh	r2, [r3, #0]
 80196e6:	4b7d      	ldr	r3, [pc, #500]	; (80198dc <tcp_input+0x29c>)
 80196e8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80196ea:	7cbb      	ldrb	r3, [r7, #18]
 80196ec:	4619      	mov	r1, r3
 80196ee:	6878      	ldr	r0, [r7, #4]
 80196f0:	f7fd fca0 	bl	8017034 <pbuf_remove_header>
 80196f4:	e04e      	b.n	8019794 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	681b      	ldr	r3, [r3, #0]
 80196fa:	2b00      	cmp	r3, #0
 80196fc:	d105      	bne.n	801970a <tcp_input+0xca>
 80196fe:	4b70      	ldr	r3, [pc, #448]	; (80198c0 <tcp_input+0x280>)
 8019700:	22c2      	movs	r2, #194	; 0xc2
 8019702:	4977      	ldr	r1, [pc, #476]	; (80198e0 <tcp_input+0x2a0>)
 8019704:	4870      	ldr	r0, [pc, #448]	; (80198c8 <tcp_input+0x288>)
 8019706:	f007 fbb1 	bl	8020e6c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801970a:	2114      	movs	r1, #20
 801970c:	6878      	ldr	r0, [r7, #4]
 801970e:	f7fd fc91 	bl	8017034 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	895a      	ldrh	r2, [r3, #10]
 8019716:	4b71      	ldr	r3, [pc, #452]	; (80198dc <tcp_input+0x29c>)
 8019718:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801971a:	4b6e      	ldr	r3, [pc, #440]	; (80198d4 <tcp_input+0x294>)
 801971c:	881a      	ldrh	r2, [r3, #0]
 801971e:	4b6f      	ldr	r3, [pc, #444]	; (80198dc <tcp_input+0x29c>)
 8019720:	881b      	ldrh	r3, [r3, #0]
 8019722:	1ad3      	subs	r3, r2, r3
 8019724:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8019726:	4b6d      	ldr	r3, [pc, #436]	; (80198dc <tcp_input+0x29c>)
 8019728:	881b      	ldrh	r3, [r3, #0]
 801972a:	4619      	mov	r1, r3
 801972c:	6878      	ldr	r0, [r7, #4]
 801972e:	f7fd fc81 	bl	8017034 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8019732:	687b      	ldr	r3, [r7, #4]
 8019734:	681b      	ldr	r3, [r3, #0]
 8019736:	895b      	ldrh	r3, [r3, #10]
 8019738:	8a3a      	ldrh	r2, [r7, #16]
 801973a:	429a      	cmp	r2, r3
 801973c:	f200 8361 	bhi.w	8019e02 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	681b      	ldr	r3, [r3, #0]
 8019744:	685b      	ldr	r3, [r3, #4]
 8019746:	4a64      	ldr	r2, [pc, #400]	; (80198d8 <tcp_input+0x298>)
 8019748:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801974a:	687b      	ldr	r3, [r7, #4]
 801974c:	681b      	ldr	r3, [r3, #0]
 801974e:	8a3a      	ldrh	r2, [r7, #16]
 8019750:	4611      	mov	r1, r2
 8019752:	4618      	mov	r0, r3
 8019754:	f7fd fc6e 	bl	8017034 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8019758:	687b      	ldr	r3, [r7, #4]
 801975a:	891a      	ldrh	r2, [r3, #8]
 801975c:	8a3b      	ldrh	r3, [r7, #16]
 801975e:	1ad3      	subs	r3, r2, r3
 8019760:	b29a      	uxth	r2, r3
 8019762:	687b      	ldr	r3, [r7, #4]
 8019764:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8019766:	687b      	ldr	r3, [r7, #4]
 8019768:	895b      	ldrh	r3, [r3, #10]
 801976a:	2b00      	cmp	r3, #0
 801976c:	d005      	beq.n	801977a <tcp_input+0x13a>
 801976e:	4b54      	ldr	r3, [pc, #336]	; (80198c0 <tcp_input+0x280>)
 8019770:	22df      	movs	r2, #223	; 0xdf
 8019772:	495c      	ldr	r1, [pc, #368]	; (80198e4 <tcp_input+0x2a4>)
 8019774:	4854      	ldr	r0, [pc, #336]	; (80198c8 <tcp_input+0x288>)
 8019776:	f007 fb79 	bl	8020e6c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801977a:	687b      	ldr	r3, [r7, #4]
 801977c:	891a      	ldrh	r2, [r3, #8]
 801977e:	687b      	ldr	r3, [r7, #4]
 8019780:	681b      	ldr	r3, [r3, #0]
 8019782:	891b      	ldrh	r3, [r3, #8]
 8019784:	429a      	cmp	r2, r3
 8019786:	d005      	beq.n	8019794 <tcp_input+0x154>
 8019788:	4b4d      	ldr	r3, [pc, #308]	; (80198c0 <tcp_input+0x280>)
 801978a:	22e0      	movs	r2, #224	; 0xe0
 801978c:	4956      	ldr	r1, [pc, #344]	; (80198e8 <tcp_input+0x2a8>)
 801978e:	484e      	ldr	r0, [pc, #312]	; (80198c8 <tcp_input+0x288>)
 8019790:	f007 fb6c 	bl	8020e6c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8019794:	4b4d      	ldr	r3, [pc, #308]	; (80198cc <tcp_input+0x28c>)
 8019796:	681b      	ldr	r3, [r3, #0]
 8019798:	881b      	ldrh	r3, [r3, #0]
 801979a:	b29b      	uxth	r3, r3
 801979c:	4a4b      	ldr	r2, [pc, #300]	; (80198cc <tcp_input+0x28c>)
 801979e:	6814      	ldr	r4, [r2, #0]
 80197a0:	4618      	mov	r0, r3
 80197a2:	f7f9 fdd1 	bl	8013348 <lwip_htons>
 80197a6:	4603      	mov	r3, r0
 80197a8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80197aa:	4b48      	ldr	r3, [pc, #288]	; (80198cc <tcp_input+0x28c>)
 80197ac:	681b      	ldr	r3, [r3, #0]
 80197ae:	885b      	ldrh	r3, [r3, #2]
 80197b0:	b29b      	uxth	r3, r3
 80197b2:	4a46      	ldr	r2, [pc, #280]	; (80198cc <tcp_input+0x28c>)
 80197b4:	6814      	ldr	r4, [r2, #0]
 80197b6:	4618      	mov	r0, r3
 80197b8:	f7f9 fdc6 	bl	8013348 <lwip_htons>
 80197bc:	4603      	mov	r3, r0
 80197be:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80197c0:	4b42      	ldr	r3, [pc, #264]	; (80198cc <tcp_input+0x28c>)
 80197c2:	681b      	ldr	r3, [r3, #0]
 80197c4:	685b      	ldr	r3, [r3, #4]
 80197c6:	4a41      	ldr	r2, [pc, #260]	; (80198cc <tcp_input+0x28c>)
 80197c8:	6814      	ldr	r4, [r2, #0]
 80197ca:	4618      	mov	r0, r3
 80197cc:	f7f9 fdd1 	bl	8013372 <lwip_htonl>
 80197d0:	4603      	mov	r3, r0
 80197d2:	6063      	str	r3, [r4, #4]
 80197d4:	6863      	ldr	r3, [r4, #4]
 80197d6:	4a45      	ldr	r2, [pc, #276]	; (80198ec <tcp_input+0x2ac>)
 80197d8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80197da:	4b3c      	ldr	r3, [pc, #240]	; (80198cc <tcp_input+0x28c>)
 80197dc:	681b      	ldr	r3, [r3, #0]
 80197de:	689b      	ldr	r3, [r3, #8]
 80197e0:	4a3a      	ldr	r2, [pc, #232]	; (80198cc <tcp_input+0x28c>)
 80197e2:	6814      	ldr	r4, [r2, #0]
 80197e4:	4618      	mov	r0, r3
 80197e6:	f7f9 fdc4 	bl	8013372 <lwip_htonl>
 80197ea:	4603      	mov	r3, r0
 80197ec:	60a3      	str	r3, [r4, #8]
 80197ee:	68a3      	ldr	r3, [r4, #8]
 80197f0:	4a3f      	ldr	r2, [pc, #252]	; (80198f0 <tcp_input+0x2b0>)
 80197f2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80197f4:	4b35      	ldr	r3, [pc, #212]	; (80198cc <tcp_input+0x28c>)
 80197f6:	681b      	ldr	r3, [r3, #0]
 80197f8:	89db      	ldrh	r3, [r3, #14]
 80197fa:	b29b      	uxth	r3, r3
 80197fc:	4a33      	ldr	r2, [pc, #204]	; (80198cc <tcp_input+0x28c>)
 80197fe:	6814      	ldr	r4, [r2, #0]
 8019800:	4618      	mov	r0, r3
 8019802:	f7f9 fda1 	bl	8013348 <lwip_htons>
 8019806:	4603      	mov	r3, r0
 8019808:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801980a:	4b30      	ldr	r3, [pc, #192]	; (80198cc <tcp_input+0x28c>)
 801980c:	681b      	ldr	r3, [r3, #0]
 801980e:	899b      	ldrh	r3, [r3, #12]
 8019810:	b29b      	uxth	r3, r3
 8019812:	4618      	mov	r0, r3
 8019814:	f7f9 fd98 	bl	8013348 <lwip_htons>
 8019818:	4603      	mov	r3, r0
 801981a:	b2db      	uxtb	r3, r3
 801981c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019820:	b2da      	uxtb	r2, r3
 8019822:	4b34      	ldr	r3, [pc, #208]	; (80198f4 <tcp_input+0x2b4>)
 8019824:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	891a      	ldrh	r2, [r3, #8]
 801982a:	4b33      	ldr	r3, [pc, #204]	; (80198f8 <tcp_input+0x2b8>)
 801982c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801982e:	4b31      	ldr	r3, [pc, #196]	; (80198f4 <tcp_input+0x2b4>)
 8019830:	781b      	ldrb	r3, [r3, #0]
 8019832:	f003 0303 	and.w	r3, r3, #3
 8019836:	2b00      	cmp	r3, #0
 8019838:	d00c      	beq.n	8019854 <tcp_input+0x214>
    tcplen++;
 801983a:	4b2f      	ldr	r3, [pc, #188]	; (80198f8 <tcp_input+0x2b8>)
 801983c:	881b      	ldrh	r3, [r3, #0]
 801983e:	3301      	adds	r3, #1
 8019840:	b29a      	uxth	r2, r3
 8019842:	4b2d      	ldr	r3, [pc, #180]	; (80198f8 <tcp_input+0x2b8>)
 8019844:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8019846:	687b      	ldr	r3, [r7, #4]
 8019848:	891a      	ldrh	r2, [r3, #8]
 801984a:	4b2b      	ldr	r3, [pc, #172]	; (80198f8 <tcp_input+0x2b8>)
 801984c:	881b      	ldrh	r3, [r3, #0]
 801984e:	429a      	cmp	r2, r3
 8019850:	f200 82d9 	bhi.w	8019e06 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8019854:	2300      	movs	r3, #0
 8019856:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8019858:	4b28      	ldr	r3, [pc, #160]	; (80198fc <tcp_input+0x2bc>)
 801985a:	681b      	ldr	r3, [r3, #0]
 801985c:	61fb      	str	r3, [r7, #28]
 801985e:	e09d      	b.n	801999c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8019860:	69fb      	ldr	r3, [r7, #28]
 8019862:	7d1b      	ldrb	r3, [r3, #20]
 8019864:	2b00      	cmp	r3, #0
 8019866:	d105      	bne.n	8019874 <tcp_input+0x234>
 8019868:	4b15      	ldr	r3, [pc, #84]	; (80198c0 <tcp_input+0x280>)
 801986a:	22fb      	movs	r2, #251	; 0xfb
 801986c:	4924      	ldr	r1, [pc, #144]	; (8019900 <tcp_input+0x2c0>)
 801986e:	4816      	ldr	r0, [pc, #88]	; (80198c8 <tcp_input+0x288>)
 8019870:	f007 fafc 	bl	8020e6c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8019874:	69fb      	ldr	r3, [r7, #28]
 8019876:	7d1b      	ldrb	r3, [r3, #20]
 8019878:	2b0a      	cmp	r3, #10
 801987a:	d105      	bne.n	8019888 <tcp_input+0x248>
 801987c:	4b10      	ldr	r3, [pc, #64]	; (80198c0 <tcp_input+0x280>)
 801987e:	22fc      	movs	r2, #252	; 0xfc
 8019880:	4920      	ldr	r1, [pc, #128]	; (8019904 <tcp_input+0x2c4>)
 8019882:	4811      	ldr	r0, [pc, #68]	; (80198c8 <tcp_input+0x288>)
 8019884:	f007 faf2 	bl	8020e6c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8019888:	69fb      	ldr	r3, [r7, #28]
 801988a:	7d1b      	ldrb	r3, [r3, #20]
 801988c:	2b01      	cmp	r3, #1
 801988e:	d105      	bne.n	801989c <tcp_input+0x25c>
 8019890:	4b0b      	ldr	r3, [pc, #44]	; (80198c0 <tcp_input+0x280>)
 8019892:	22fd      	movs	r2, #253	; 0xfd
 8019894:	491c      	ldr	r1, [pc, #112]	; (8019908 <tcp_input+0x2c8>)
 8019896:	480c      	ldr	r0, [pc, #48]	; (80198c8 <tcp_input+0x288>)
 8019898:	f007 fae8 	bl	8020e6c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801989c:	69fb      	ldr	r3, [r7, #28]
 801989e:	7a1b      	ldrb	r3, [r3, #8]
 80198a0:	2b00      	cmp	r3, #0
 80198a2:	d033      	beq.n	801990c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80198a4:	69fb      	ldr	r3, [r7, #28]
 80198a6:	7a1a      	ldrb	r2, [r3, #8]
 80198a8:	4b09      	ldr	r3, [pc, #36]	; (80198d0 <tcp_input+0x290>)
 80198aa:	685b      	ldr	r3, [r3, #4]
 80198ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80198b0:	3301      	adds	r3, #1
 80198b2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80198b4:	429a      	cmp	r2, r3
 80198b6:	d029      	beq.n	801990c <tcp_input+0x2cc>
      prev = pcb;
 80198b8:	69fb      	ldr	r3, [r7, #28]
 80198ba:	61bb      	str	r3, [r7, #24]
      continue;
 80198bc:	e06b      	b.n	8019996 <tcp_input+0x356>
 80198be:	bf00      	nop
 80198c0:	080278e8 	.word	0x080278e8
 80198c4:	08027948 	.word	0x08027948
 80198c8:	08027960 	.word	0x08027960
 80198cc:	240048b0 	.word	0x240048b0
 80198d0:	240053c8 	.word	0x240053c8
 80198d4:	240048b4 	.word	0x240048b4
 80198d8:	240048b8 	.word	0x240048b8
 80198dc:	240048b6 	.word	0x240048b6
 80198e0:	08027988 	.word	0x08027988
 80198e4:	08027998 	.word	0x08027998
 80198e8:	080279a4 	.word	0x080279a4
 80198ec:	240048c0 	.word	0x240048c0
 80198f0:	240048c4 	.word	0x240048c4
 80198f4:	240048cc 	.word	0x240048cc
 80198f8:	240048ca 	.word	0x240048ca
 80198fc:	240082b8 	.word	0x240082b8
 8019900:	080279c4 	.word	0x080279c4
 8019904:	080279ec 	.word	0x080279ec
 8019908:	08027a18 	.word	0x08027a18
    }

    if (pcb->remote_port == tcphdr->src &&
 801990c:	69fb      	ldr	r3, [r7, #28]
 801990e:	8b1a      	ldrh	r2, [r3, #24]
 8019910:	4b94      	ldr	r3, [pc, #592]	; (8019b64 <tcp_input+0x524>)
 8019912:	681b      	ldr	r3, [r3, #0]
 8019914:	881b      	ldrh	r3, [r3, #0]
 8019916:	b29b      	uxth	r3, r3
 8019918:	429a      	cmp	r2, r3
 801991a:	d13a      	bne.n	8019992 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801991c:	69fb      	ldr	r3, [r7, #28]
 801991e:	8ada      	ldrh	r2, [r3, #22]
 8019920:	4b90      	ldr	r3, [pc, #576]	; (8019b64 <tcp_input+0x524>)
 8019922:	681b      	ldr	r3, [r3, #0]
 8019924:	885b      	ldrh	r3, [r3, #2]
 8019926:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8019928:	429a      	cmp	r2, r3
 801992a:	d132      	bne.n	8019992 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801992c:	69fb      	ldr	r3, [r7, #28]
 801992e:	685a      	ldr	r2, [r3, #4]
 8019930:	4b8d      	ldr	r3, [pc, #564]	; (8019b68 <tcp_input+0x528>)
 8019932:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8019934:	429a      	cmp	r2, r3
 8019936:	d12c      	bne.n	8019992 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8019938:	69fb      	ldr	r3, [r7, #28]
 801993a:	681a      	ldr	r2, [r3, #0]
 801993c:	4b8a      	ldr	r3, [pc, #552]	; (8019b68 <tcp_input+0x528>)
 801993e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8019940:	429a      	cmp	r2, r3
 8019942:	d126      	bne.n	8019992 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8019944:	69fb      	ldr	r3, [r7, #28]
 8019946:	68db      	ldr	r3, [r3, #12]
 8019948:	69fa      	ldr	r2, [r7, #28]
 801994a:	429a      	cmp	r2, r3
 801994c:	d106      	bne.n	801995c <tcp_input+0x31c>
 801994e:	4b87      	ldr	r3, [pc, #540]	; (8019b6c <tcp_input+0x52c>)
 8019950:	f240 120d 	movw	r2, #269	; 0x10d
 8019954:	4986      	ldr	r1, [pc, #536]	; (8019b70 <tcp_input+0x530>)
 8019956:	4887      	ldr	r0, [pc, #540]	; (8019b74 <tcp_input+0x534>)
 8019958:	f007 fa88 	bl	8020e6c <iprintf>
      if (prev != NULL) {
 801995c:	69bb      	ldr	r3, [r7, #24]
 801995e:	2b00      	cmp	r3, #0
 8019960:	d00a      	beq.n	8019978 <tcp_input+0x338>
        prev->next = pcb->next;
 8019962:	69fb      	ldr	r3, [r7, #28]
 8019964:	68da      	ldr	r2, [r3, #12]
 8019966:	69bb      	ldr	r3, [r7, #24]
 8019968:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801996a:	4b83      	ldr	r3, [pc, #524]	; (8019b78 <tcp_input+0x538>)
 801996c:	681a      	ldr	r2, [r3, #0]
 801996e:	69fb      	ldr	r3, [r7, #28]
 8019970:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8019972:	4a81      	ldr	r2, [pc, #516]	; (8019b78 <tcp_input+0x538>)
 8019974:	69fb      	ldr	r3, [r7, #28]
 8019976:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8019978:	69fb      	ldr	r3, [r7, #28]
 801997a:	68db      	ldr	r3, [r3, #12]
 801997c:	69fa      	ldr	r2, [r7, #28]
 801997e:	429a      	cmp	r2, r3
 8019980:	d111      	bne.n	80199a6 <tcp_input+0x366>
 8019982:	4b7a      	ldr	r3, [pc, #488]	; (8019b6c <tcp_input+0x52c>)
 8019984:	f240 1215 	movw	r2, #277	; 0x115
 8019988:	497c      	ldr	r1, [pc, #496]	; (8019b7c <tcp_input+0x53c>)
 801998a:	487a      	ldr	r0, [pc, #488]	; (8019b74 <tcp_input+0x534>)
 801998c:	f007 fa6e 	bl	8020e6c <iprintf>
      break;
 8019990:	e009      	b.n	80199a6 <tcp_input+0x366>
    }
    prev = pcb;
 8019992:	69fb      	ldr	r3, [r7, #28]
 8019994:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8019996:	69fb      	ldr	r3, [r7, #28]
 8019998:	68db      	ldr	r3, [r3, #12]
 801999a:	61fb      	str	r3, [r7, #28]
 801999c:	69fb      	ldr	r3, [r7, #28]
 801999e:	2b00      	cmp	r3, #0
 80199a0:	f47f af5e 	bne.w	8019860 <tcp_input+0x220>
 80199a4:	e000      	b.n	80199a8 <tcp_input+0x368>
      break;
 80199a6:	bf00      	nop
  }

  if (pcb == NULL) {
 80199a8:	69fb      	ldr	r3, [r7, #28]
 80199aa:	2b00      	cmp	r3, #0
 80199ac:	f040 8095 	bne.w	8019ada <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80199b0:	4b73      	ldr	r3, [pc, #460]	; (8019b80 <tcp_input+0x540>)
 80199b2:	681b      	ldr	r3, [r3, #0]
 80199b4:	61fb      	str	r3, [r7, #28]
 80199b6:	e03f      	b.n	8019a38 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80199b8:	69fb      	ldr	r3, [r7, #28]
 80199ba:	7d1b      	ldrb	r3, [r3, #20]
 80199bc:	2b0a      	cmp	r3, #10
 80199be:	d006      	beq.n	80199ce <tcp_input+0x38e>
 80199c0:	4b6a      	ldr	r3, [pc, #424]	; (8019b6c <tcp_input+0x52c>)
 80199c2:	f240 121f 	movw	r2, #287	; 0x11f
 80199c6:	496f      	ldr	r1, [pc, #444]	; (8019b84 <tcp_input+0x544>)
 80199c8:	486a      	ldr	r0, [pc, #424]	; (8019b74 <tcp_input+0x534>)
 80199ca:	f007 fa4f 	bl	8020e6c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80199ce:	69fb      	ldr	r3, [r7, #28]
 80199d0:	7a1b      	ldrb	r3, [r3, #8]
 80199d2:	2b00      	cmp	r3, #0
 80199d4:	d009      	beq.n	80199ea <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80199d6:	69fb      	ldr	r3, [r7, #28]
 80199d8:	7a1a      	ldrb	r2, [r3, #8]
 80199da:	4b63      	ldr	r3, [pc, #396]	; (8019b68 <tcp_input+0x528>)
 80199dc:	685b      	ldr	r3, [r3, #4]
 80199de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80199e2:	3301      	adds	r3, #1
 80199e4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80199e6:	429a      	cmp	r2, r3
 80199e8:	d122      	bne.n	8019a30 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80199ea:	69fb      	ldr	r3, [r7, #28]
 80199ec:	8b1a      	ldrh	r2, [r3, #24]
 80199ee:	4b5d      	ldr	r3, [pc, #372]	; (8019b64 <tcp_input+0x524>)
 80199f0:	681b      	ldr	r3, [r3, #0]
 80199f2:	881b      	ldrh	r3, [r3, #0]
 80199f4:	b29b      	uxth	r3, r3
 80199f6:	429a      	cmp	r2, r3
 80199f8:	d11b      	bne.n	8019a32 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80199fa:	69fb      	ldr	r3, [r7, #28]
 80199fc:	8ada      	ldrh	r2, [r3, #22]
 80199fe:	4b59      	ldr	r3, [pc, #356]	; (8019b64 <tcp_input+0x524>)
 8019a00:	681b      	ldr	r3, [r3, #0]
 8019a02:	885b      	ldrh	r3, [r3, #2]
 8019a04:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8019a06:	429a      	cmp	r2, r3
 8019a08:	d113      	bne.n	8019a32 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8019a0a:	69fb      	ldr	r3, [r7, #28]
 8019a0c:	685a      	ldr	r2, [r3, #4]
 8019a0e:	4b56      	ldr	r3, [pc, #344]	; (8019b68 <tcp_input+0x528>)
 8019a10:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8019a12:	429a      	cmp	r2, r3
 8019a14:	d10d      	bne.n	8019a32 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8019a16:	69fb      	ldr	r3, [r7, #28]
 8019a18:	681a      	ldr	r2, [r3, #0]
 8019a1a:	4b53      	ldr	r3, [pc, #332]	; (8019b68 <tcp_input+0x528>)
 8019a1c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8019a1e:	429a      	cmp	r2, r3
 8019a20:	d107      	bne.n	8019a32 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8019a22:	69f8      	ldr	r0, [r7, #28]
 8019a24:	f000 fb54 	bl	801a0d0 <tcp_timewait_input>
        }
        pbuf_free(p);
 8019a28:	6878      	ldr	r0, [r7, #4]
 8019a2a:	f7fd fb89 	bl	8017140 <pbuf_free>
        return;
 8019a2e:	e1f0      	b.n	8019e12 <tcp_input+0x7d2>
        continue;
 8019a30:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8019a32:	69fb      	ldr	r3, [r7, #28]
 8019a34:	68db      	ldr	r3, [r3, #12]
 8019a36:	61fb      	str	r3, [r7, #28]
 8019a38:	69fb      	ldr	r3, [r7, #28]
 8019a3a:	2b00      	cmp	r3, #0
 8019a3c:	d1bc      	bne.n	80199b8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8019a3e:	2300      	movs	r3, #0
 8019a40:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8019a42:	4b51      	ldr	r3, [pc, #324]	; (8019b88 <tcp_input+0x548>)
 8019a44:	681b      	ldr	r3, [r3, #0]
 8019a46:	617b      	str	r3, [r7, #20]
 8019a48:	e02a      	b.n	8019aa0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8019a4a:	697b      	ldr	r3, [r7, #20]
 8019a4c:	7a1b      	ldrb	r3, [r3, #8]
 8019a4e:	2b00      	cmp	r3, #0
 8019a50:	d00c      	beq.n	8019a6c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8019a52:	697b      	ldr	r3, [r7, #20]
 8019a54:	7a1a      	ldrb	r2, [r3, #8]
 8019a56:	4b44      	ldr	r3, [pc, #272]	; (8019b68 <tcp_input+0x528>)
 8019a58:	685b      	ldr	r3, [r3, #4]
 8019a5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019a5e:	3301      	adds	r3, #1
 8019a60:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8019a62:	429a      	cmp	r2, r3
 8019a64:	d002      	beq.n	8019a6c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8019a66:	697b      	ldr	r3, [r7, #20]
 8019a68:	61bb      	str	r3, [r7, #24]
        continue;
 8019a6a:	e016      	b.n	8019a9a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8019a6c:	697b      	ldr	r3, [r7, #20]
 8019a6e:	8ada      	ldrh	r2, [r3, #22]
 8019a70:	4b3c      	ldr	r3, [pc, #240]	; (8019b64 <tcp_input+0x524>)
 8019a72:	681b      	ldr	r3, [r3, #0]
 8019a74:	885b      	ldrh	r3, [r3, #2]
 8019a76:	b29b      	uxth	r3, r3
 8019a78:	429a      	cmp	r2, r3
 8019a7a:	d10c      	bne.n	8019a96 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8019a7c:	697b      	ldr	r3, [r7, #20]
 8019a7e:	681a      	ldr	r2, [r3, #0]
 8019a80:	4b39      	ldr	r3, [pc, #228]	; (8019b68 <tcp_input+0x528>)
 8019a82:	695b      	ldr	r3, [r3, #20]
 8019a84:	429a      	cmp	r2, r3
 8019a86:	d00f      	beq.n	8019aa8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8019a88:	697b      	ldr	r3, [r7, #20]
 8019a8a:	2b00      	cmp	r3, #0
 8019a8c:	d00d      	beq.n	8019aaa <tcp_input+0x46a>
 8019a8e:	697b      	ldr	r3, [r7, #20]
 8019a90:	681b      	ldr	r3, [r3, #0]
 8019a92:	2b00      	cmp	r3, #0
 8019a94:	d009      	beq.n	8019aaa <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8019a96:	697b      	ldr	r3, [r7, #20]
 8019a98:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8019a9a:	697b      	ldr	r3, [r7, #20]
 8019a9c:	68db      	ldr	r3, [r3, #12]
 8019a9e:	617b      	str	r3, [r7, #20]
 8019aa0:	697b      	ldr	r3, [r7, #20]
 8019aa2:	2b00      	cmp	r3, #0
 8019aa4:	d1d1      	bne.n	8019a4a <tcp_input+0x40a>
 8019aa6:	e000      	b.n	8019aaa <tcp_input+0x46a>
            break;
 8019aa8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8019aaa:	697b      	ldr	r3, [r7, #20]
 8019aac:	2b00      	cmp	r3, #0
 8019aae:	d014      	beq.n	8019ada <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8019ab0:	69bb      	ldr	r3, [r7, #24]
 8019ab2:	2b00      	cmp	r3, #0
 8019ab4:	d00a      	beq.n	8019acc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8019ab6:	697b      	ldr	r3, [r7, #20]
 8019ab8:	68da      	ldr	r2, [r3, #12]
 8019aba:	69bb      	ldr	r3, [r7, #24]
 8019abc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8019abe:	4b32      	ldr	r3, [pc, #200]	; (8019b88 <tcp_input+0x548>)
 8019ac0:	681a      	ldr	r2, [r3, #0]
 8019ac2:	697b      	ldr	r3, [r7, #20]
 8019ac4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8019ac6:	4a30      	ldr	r2, [pc, #192]	; (8019b88 <tcp_input+0x548>)
 8019ac8:	697b      	ldr	r3, [r7, #20]
 8019aca:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8019acc:	6978      	ldr	r0, [r7, #20]
 8019ace:	f000 fa01 	bl	8019ed4 <tcp_listen_input>
      }
      pbuf_free(p);
 8019ad2:	6878      	ldr	r0, [r7, #4]
 8019ad4:	f7fd fb34 	bl	8017140 <pbuf_free>
      return;
 8019ad8:	e19b      	b.n	8019e12 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8019ada:	69fb      	ldr	r3, [r7, #28]
 8019adc:	2b00      	cmp	r3, #0
 8019ade:	f000 8160 	beq.w	8019da2 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8019ae2:	4b2a      	ldr	r3, [pc, #168]	; (8019b8c <tcp_input+0x54c>)
 8019ae4:	2200      	movs	r2, #0
 8019ae6:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8019ae8:	687b      	ldr	r3, [r7, #4]
 8019aea:	891a      	ldrh	r2, [r3, #8]
 8019aec:	4b27      	ldr	r3, [pc, #156]	; (8019b8c <tcp_input+0x54c>)
 8019aee:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8019af0:	4a26      	ldr	r2, [pc, #152]	; (8019b8c <tcp_input+0x54c>)
 8019af2:	687b      	ldr	r3, [r7, #4]
 8019af4:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8019af6:	4b1b      	ldr	r3, [pc, #108]	; (8019b64 <tcp_input+0x524>)
 8019af8:	681b      	ldr	r3, [r3, #0]
 8019afa:	4a24      	ldr	r2, [pc, #144]	; (8019b8c <tcp_input+0x54c>)
 8019afc:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8019afe:	4b24      	ldr	r3, [pc, #144]	; (8019b90 <tcp_input+0x550>)
 8019b00:	2200      	movs	r2, #0
 8019b02:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8019b04:	4b23      	ldr	r3, [pc, #140]	; (8019b94 <tcp_input+0x554>)
 8019b06:	2200      	movs	r2, #0
 8019b08:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8019b0a:	4b23      	ldr	r3, [pc, #140]	; (8019b98 <tcp_input+0x558>)
 8019b0c:	2200      	movs	r2, #0
 8019b0e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8019b10:	4b22      	ldr	r3, [pc, #136]	; (8019b9c <tcp_input+0x55c>)
 8019b12:	781b      	ldrb	r3, [r3, #0]
 8019b14:	f003 0308 	and.w	r3, r3, #8
 8019b18:	2b00      	cmp	r3, #0
 8019b1a:	d006      	beq.n	8019b2a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8019b1c:	687b      	ldr	r3, [r7, #4]
 8019b1e:	7b5b      	ldrb	r3, [r3, #13]
 8019b20:	f043 0301 	orr.w	r3, r3, #1
 8019b24:	b2da      	uxtb	r2, r3
 8019b26:	687b      	ldr	r3, [r7, #4]
 8019b28:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8019b2a:	69fb      	ldr	r3, [r7, #28]
 8019b2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019b2e:	2b00      	cmp	r3, #0
 8019b30:	d038      	beq.n	8019ba4 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8019b32:	69f8      	ldr	r0, [r7, #28]
 8019b34:	f7ff f870 	bl	8018c18 <tcp_process_refused_data>
 8019b38:	4603      	mov	r3, r0
 8019b3a:	f113 0f0d 	cmn.w	r3, #13
 8019b3e:	d007      	beq.n	8019b50 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8019b40:	69fb      	ldr	r3, [r7, #28]
 8019b42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8019b44:	2b00      	cmp	r3, #0
 8019b46:	d02d      	beq.n	8019ba4 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8019b48:	4b15      	ldr	r3, [pc, #84]	; (8019ba0 <tcp_input+0x560>)
 8019b4a:	881b      	ldrh	r3, [r3, #0]
 8019b4c:	2b00      	cmp	r3, #0
 8019b4e:	d029      	beq.n	8019ba4 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8019b50:	69fb      	ldr	r3, [r7, #28]
 8019b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019b54:	2b00      	cmp	r3, #0
 8019b56:	f040 8104 	bne.w	8019d62 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8019b5a:	69f8      	ldr	r0, [r7, #28]
 8019b5c:	f003 fe16 	bl	801d78c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8019b60:	e0ff      	b.n	8019d62 <tcp_input+0x722>
 8019b62:	bf00      	nop
 8019b64:	240048b0 	.word	0x240048b0
 8019b68:	240053c8 	.word	0x240053c8
 8019b6c:	080278e8 	.word	0x080278e8
 8019b70:	08027a40 	.word	0x08027a40
 8019b74:	08027960 	.word	0x08027960
 8019b78:	240082b8 	.word	0x240082b8
 8019b7c:	08027a6c 	.word	0x08027a6c
 8019b80:	240082c8 	.word	0x240082c8
 8019b84:	08027a98 	.word	0x08027a98
 8019b88:	240082c0 	.word	0x240082c0
 8019b8c:	240048a0 	.word	0x240048a0
 8019b90:	240048d0 	.word	0x240048d0
 8019b94:	240048cd 	.word	0x240048cd
 8019b98:	240048c8 	.word	0x240048c8
 8019b9c:	240048cc 	.word	0x240048cc
 8019ba0:	240048ca 	.word	0x240048ca
      }
    }
    tcp_input_pcb = pcb;
 8019ba4:	4a9c      	ldr	r2, [pc, #624]	; (8019e18 <tcp_input+0x7d8>)
 8019ba6:	69fb      	ldr	r3, [r7, #28]
 8019ba8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8019baa:	69f8      	ldr	r0, [r7, #28]
 8019bac:	f000 fb0a 	bl	801a1c4 <tcp_process>
 8019bb0:	4603      	mov	r3, r0
 8019bb2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8019bb4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019bb8:	f113 0f0d 	cmn.w	r3, #13
 8019bbc:	f000 80d3 	beq.w	8019d66 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8019bc0:	4b96      	ldr	r3, [pc, #600]	; (8019e1c <tcp_input+0x7dc>)
 8019bc2:	781b      	ldrb	r3, [r3, #0]
 8019bc4:	f003 0308 	and.w	r3, r3, #8
 8019bc8:	2b00      	cmp	r3, #0
 8019bca:	d015      	beq.n	8019bf8 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8019bcc:	69fb      	ldr	r3, [r7, #28]
 8019bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019bd2:	2b00      	cmp	r3, #0
 8019bd4:	d008      	beq.n	8019be8 <tcp_input+0x5a8>
 8019bd6:	69fb      	ldr	r3, [r7, #28]
 8019bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019bdc:	69fa      	ldr	r2, [r7, #28]
 8019bde:	6912      	ldr	r2, [r2, #16]
 8019be0:	f06f 010d 	mvn.w	r1, #13
 8019be4:	4610      	mov	r0, r2
 8019be6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8019be8:	69f9      	ldr	r1, [r7, #28]
 8019bea:	488d      	ldr	r0, [pc, #564]	; (8019e20 <tcp_input+0x7e0>)
 8019bec:	f7ff fbb0 	bl	8019350 <tcp_pcb_remove>
        tcp_free(pcb);
 8019bf0:	69f8      	ldr	r0, [r7, #28]
 8019bf2:	f7fd fdfd 	bl	80177f0 <tcp_free>
 8019bf6:	e0c1      	b.n	8019d7c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8019bf8:	2300      	movs	r3, #0
 8019bfa:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8019bfc:	4b89      	ldr	r3, [pc, #548]	; (8019e24 <tcp_input+0x7e4>)
 8019bfe:	881b      	ldrh	r3, [r3, #0]
 8019c00:	2b00      	cmp	r3, #0
 8019c02:	d01d      	beq.n	8019c40 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8019c04:	4b87      	ldr	r3, [pc, #540]	; (8019e24 <tcp_input+0x7e4>)
 8019c06:	881b      	ldrh	r3, [r3, #0]
 8019c08:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8019c0a:	69fb      	ldr	r3, [r7, #28]
 8019c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019c10:	2b00      	cmp	r3, #0
 8019c12:	d00a      	beq.n	8019c2a <tcp_input+0x5ea>
 8019c14:	69fb      	ldr	r3, [r7, #28]
 8019c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019c1a:	69fa      	ldr	r2, [r7, #28]
 8019c1c:	6910      	ldr	r0, [r2, #16]
 8019c1e:	89fa      	ldrh	r2, [r7, #14]
 8019c20:	69f9      	ldr	r1, [r7, #28]
 8019c22:	4798      	blx	r3
 8019c24:	4603      	mov	r3, r0
 8019c26:	74fb      	strb	r3, [r7, #19]
 8019c28:	e001      	b.n	8019c2e <tcp_input+0x5ee>
 8019c2a:	2300      	movs	r3, #0
 8019c2c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8019c2e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019c32:	f113 0f0d 	cmn.w	r3, #13
 8019c36:	f000 8098 	beq.w	8019d6a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8019c3a:	4b7a      	ldr	r3, [pc, #488]	; (8019e24 <tcp_input+0x7e4>)
 8019c3c:	2200      	movs	r2, #0
 8019c3e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8019c40:	69f8      	ldr	r0, [r7, #28]
 8019c42:	f000 f907 	bl	8019e54 <tcp_input_delayed_close>
 8019c46:	4603      	mov	r3, r0
 8019c48:	2b00      	cmp	r3, #0
 8019c4a:	f040 8090 	bne.w	8019d6e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8019c4e:	4b76      	ldr	r3, [pc, #472]	; (8019e28 <tcp_input+0x7e8>)
 8019c50:	681b      	ldr	r3, [r3, #0]
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	d041      	beq.n	8019cda <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8019c56:	69fb      	ldr	r3, [r7, #28]
 8019c58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019c5a:	2b00      	cmp	r3, #0
 8019c5c:	d006      	beq.n	8019c6c <tcp_input+0x62c>
 8019c5e:	4b73      	ldr	r3, [pc, #460]	; (8019e2c <tcp_input+0x7ec>)
 8019c60:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8019c64:	4972      	ldr	r1, [pc, #456]	; (8019e30 <tcp_input+0x7f0>)
 8019c66:	4873      	ldr	r0, [pc, #460]	; (8019e34 <tcp_input+0x7f4>)
 8019c68:	f007 f900 	bl	8020e6c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8019c6c:	69fb      	ldr	r3, [r7, #28]
 8019c6e:	8b5b      	ldrh	r3, [r3, #26]
 8019c70:	f003 0310 	and.w	r3, r3, #16
 8019c74:	2b00      	cmp	r3, #0
 8019c76:	d008      	beq.n	8019c8a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8019c78:	4b6b      	ldr	r3, [pc, #428]	; (8019e28 <tcp_input+0x7e8>)
 8019c7a:	681b      	ldr	r3, [r3, #0]
 8019c7c:	4618      	mov	r0, r3
 8019c7e:	f7fd fa5f 	bl	8017140 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8019c82:	69f8      	ldr	r0, [r7, #28]
 8019c84:	f7fe f89c 	bl	8017dc0 <tcp_abort>
            goto aborted;
 8019c88:	e078      	b.n	8019d7c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8019c8a:	69fb      	ldr	r3, [r7, #28]
 8019c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019c90:	2b00      	cmp	r3, #0
 8019c92:	d00c      	beq.n	8019cae <tcp_input+0x66e>
 8019c94:	69fb      	ldr	r3, [r7, #28]
 8019c96:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8019c9a:	69fb      	ldr	r3, [r7, #28]
 8019c9c:	6918      	ldr	r0, [r3, #16]
 8019c9e:	4b62      	ldr	r3, [pc, #392]	; (8019e28 <tcp_input+0x7e8>)
 8019ca0:	681a      	ldr	r2, [r3, #0]
 8019ca2:	2300      	movs	r3, #0
 8019ca4:	69f9      	ldr	r1, [r7, #28]
 8019ca6:	47a0      	blx	r4
 8019ca8:	4603      	mov	r3, r0
 8019caa:	74fb      	strb	r3, [r7, #19]
 8019cac:	e008      	b.n	8019cc0 <tcp_input+0x680>
 8019cae:	4b5e      	ldr	r3, [pc, #376]	; (8019e28 <tcp_input+0x7e8>)
 8019cb0:	681a      	ldr	r2, [r3, #0]
 8019cb2:	2300      	movs	r3, #0
 8019cb4:	69f9      	ldr	r1, [r7, #28]
 8019cb6:	2000      	movs	r0, #0
 8019cb8:	f7ff f884 	bl	8018dc4 <tcp_recv_null>
 8019cbc:	4603      	mov	r3, r0
 8019cbe:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8019cc0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019cc4:	f113 0f0d 	cmn.w	r3, #13
 8019cc8:	d053      	beq.n	8019d72 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8019cca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019cce:	2b00      	cmp	r3, #0
 8019cd0:	d003      	beq.n	8019cda <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8019cd2:	4b55      	ldr	r3, [pc, #340]	; (8019e28 <tcp_input+0x7e8>)
 8019cd4:	681a      	ldr	r2, [r3, #0]
 8019cd6:	69fb      	ldr	r3, [r7, #28]
 8019cd8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8019cda:	4b50      	ldr	r3, [pc, #320]	; (8019e1c <tcp_input+0x7dc>)
 8019cdc:	781b      	ldrb	r3, [r3, #0]
 8019cde:	f003 0320 	and.w	r3, r3, #32
 8019ce2:	2b00      	cmp	r3, #0
 8019ce4:	d030      	beq.n	8019d48 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8019ce6:	69fb      	ldr	r3, [r7, #28]
 8019ce8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019cea:	2b00      	cmp	r3, #0
 8019cec:	d009      	beq.n	8019d02 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8019cee:	69fb      	ldr	r3, [r7, #28]
 8019cf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019cf2:	7b5a      	ldrb	r2, [r3, #13]
 8019cf4:	69fb      	ldr	r3, [r7, #28]
 8019cf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019cf8:	f042 0220 	orr.w	r2, r2, #32
 8019cfc:	b2d2      	uxtb	r2, r2
 8019cfe:	735a      	strb	r2, [r3, #13]
 8019d00:	e022      	b.n	8019d48 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8019d02:	69fb      	ldr	r3, [r7, #28]
 8019d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019d06:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8019d0a:	d005      	beq.n	8019d18 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8019d0c:	69fb      	ldr	r3, [r7, #28]
 8019d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019d10:	3301      	adds	r3, #1
 8019d12:	b29a      	uxth	r2, r3
 8019d14:	69fb      	ldr	r3, [r7, #28]
 8019d16:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8019d18:	69fb      	ldr	r3, [r7, #28]
 8019d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019d1e:	2b00      	cmp	r3, #0
 8019d20:	d00b      	beq.n	8019d3a <tcp_input+0x6fa>
 8019d22:	69fb      	ldr	r3, [r7, #28]
 8019d24:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8019d28:	69fb      	ldr	r3, [r7, #28]
 8019d2a:	6918      	ldr	r0, [r3, #16]
 8019d2c:	2300      	movs	r3, #0
 8019d2e:	2200      	movs	r2, #0
 8019d30:	69f9      	ldr	r1, [r7, #28]
 8019d32:	47a0      	blx	r4
 8019d34:	4603      	mov	r3, r0
 8019d36:	74fb      	strb	r3, [r7, #19]
 8019d38:	e001      	b.n	8019d3e <tcp_input+0x6fe>
 8019d3a:	2300      	movs	r3, #0
 8019d3c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8019d3e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019d42:	f113 0f0d 	cmn.w	r3, #13
 8019d46:	d016      	beq.n	8019d76 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8019d48:	4b33      	ldr	r3, [pc, #204]	; (8019e18 <tcp_input+0x7d8>)
 8019d4a:	2200      	movs	r2, #0
 8019d4c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8019d4e:	69f8      	ldr	r0, [r7, #28]
 8019d50:	f000 f880 	bl	8019e54 <tcp_input_delayed_close>
 8019d54:	4603      	mov	r3, r0
 8019d56:	2b00      	cmp	r3, #0
 8019d58:	d10f      	bne.n	8019d7a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8019d5a:	69f8      	ldr	r0, [r7, #28]
 8019d5c:	f002 ff10 	bl	801cb80 <tcp_output>
 8019d60:	e00c      	b.n	8019d7c <tcp_input+0x73c>
        goto aborted;
 8019d62:	bf00      	nop
 8019d64:	e00a      	b.n	8019d7c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8019d66:	bf00      	nop
 8019d68:	e008      	b.n	8019d7c <tcp_input+0x73c>
              goto aborted;
 8019d6a:	bf00      	nop
 8019d6c:	e006      	b.n	8019d7c <tcp_input+0x73c>
          goto aborted;
 8019d6e:	bf00      	nop
 8019d70:	e004      	b.n	8019d7c <tcp_input+0x73c>
            goto aborted;
 8019d72:	bf00      	nop
 8019d74:	e002      	b.n	8019d7c <tcp_input+0x73c>
              goto aborted;
 8019d76:	bf00      	nop
 8019d78:	e000      	b.n	8019d7c <tcp_input+0x73c>
          goto aborted;
 8019d7a:	bf00      	nop
    tcp_input_pcb = NULL;
 8019d7c:	4b26      	ldr	r3, [pc, #152]	; (8019e18 <tcp_input+0x7d8>)
 8019d7e:	2200      	movs	r2, #0
 8019d80:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8019d82:	4b29      	ldr	r3, [pc, #164]	; (8019e28 <tcp_input+0x7e8>)
 8019d84:	2200      	movs	r2, #0
 8019d86:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8019d88:	4b2b      	ldr	r3, [pc, #172]	; (8019e38 <tcp_input+0x7f8>)
 8019d8a:	685b      	ldr	r3, [r3, #4]
 8019d8c:	2b00      	cmp	r3, #0
 8019d8e:	d03f      	beq.n	8019e10 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8019d90:	4b29      	ldr	r3, [pc, #164]	; (8019e38 <tcp_input+0x7f8>)
 8019d92:	685b      	ldr	r3, [r3, #4]
 8019d94:	4618      	mov	r0, r3
 8019d96:	f7fd f9d3 	bl	8017140 <pbuf_free>
      inseg.p = NULL;
 8019d9a:	4b27      	ldr	r3, [pc, #156]	; (8019e38 <tcp_input+0x7f8>)
 8019d9c:	2200      	movs	r2, #0
 8019d9e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8019da0:	e036      	b.n	8019e10 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8019da2:	4b26      	ldr	r3, [pc, #152]	; (8019e3c <tcp_input+0x7fc>)
 8019da4:	681b      	ldr	r3, [r3, #0]
 8019da6:	899b      	ldrh	r3, [r3, #12]
 8019da8:	b29b      	uxth	r3, r3
 8019daa:	4618      	mov	r0, r3
 8019dac:	f7f9 facc 	bl	8013348 <lwip_htons>
 8019db0:	4603      	mov	r3, r0
 8019db2:	b2db      	uxtb	r3, r3
 8019db4:	f003 0304 	and.w	r3, r3, #4
 8019db8:	2b00      	cmp	r3, #0
 8019dba:	d118      	bne.n	8019dee <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019dbc:	4b20      	ldr	r3, [pc, #128]	; (8019e40 <tcp_input+0x800>)
 8019dbe:	6819      	ldr	r1, [r3, #0]
 8019dc0:	4b20      	ldr	r3, [pc, #128]	; (8019e44 <tcp_input+0x804>)
 8019dc2:	881b      	ldrh	r3, [r3, #0]
 8019dc4:	461a      	mov	r2, r3
 8019dc6:	4b20      	ldr	r3, [pc, #128]	; (8019e48 <tcp_input+0x808>)
 8019dc8:	681b      	ldr	r3, [r3, #0]
 8019dca:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019dcc:	4b1b      	ldr	r3, [pc, #108]	; (8019e3c <tcp_input+0x7fc>)
 8019dce:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019dd0:	885b      	ldrh	r3, [r3, #2]
 8019dd2:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019dd4:	4a19      	ldr	r2, [pc, #100]	; (8019e3c <tcp_input+0x7fc>)
 8019dd6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019dd8:	8812      	ldrh	r2, [r2, #0]
 8019dda:	b292      	uxth	r2, r2
 8019ddc:	9202      	str	r2, [sp, #8]
 8019dde:	9301      	str	r3, [sp, #4]
 8019de0:	4b1a      	ldr	r3, [pc, #104]	; (8019e4c <tcp_input+0x80c>)
 8019de2:	9300      	str	r3, [sp, #0]
 8019de4:	4b1a      	ldr	r3, [pc, #104]	; (8019e50 <tcp_input+0x810>)
 8019de6:	4602      	mov	r2, r0
 8019de8:	2000      	movs	r0, #0
 8019dea:	f003 fc7d 	bl	801d6e8 <tcp_rst>
    pbuf_free(p);
 8019dee:	6878      	ldr	r0, [r7, #4]
 8019df0:	f7fd f9a6 	bl	8017140 <pbuf_free>
  return;
 8019df4:	e00c      	b.n	8019e10 <tcp_input+0x7d0>
    goto dropped;
 8019df6:	bf00      	nop
 8019df8:	e006      	b.n	8019e08 <tcp_input+0x7c8>
    goto dropped;
 8019dfa:	bf00      	nop
 8019dfc:	e004      	b.n	8019e08 <tcp_input+0x7c8>
    goto dropped;
 8019dfe:	bf00      	nop
 8019e00:	e002      	b.n	8019e08 <tcp_input+0x7c8>
      goto dropped;
 8019e02:	bf00      	nop
 8019e04:	e000      	b.n	8019e08 <tcp_input+0x7c8>
      goto dropped;
 8019e06:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8019e08:	6878      	ldr	r0, [r7, #4]
 8019e0a:	f7fd f999 	bl	8017140 <pbuf_free>
 8019e0e:	e000      	b.n	8019e12 <tcp_input+0x7d2>
  return;
 8019e10:	bf00      	nop
}
 8019e12:	3724      	adds	r7, #36	; 0x24
 8019e14:	46bd      	mov	sp, r7
 8019e16:	bd90      	pop	{r4, r7, pc}
 8019e18:	240082cc 	.word	0x240082cc
 8019e1c:	240048cd 	.word	0x240048cd
 8019e20:	240082b8 	.word	0x240082b8
 8019e24:	240048c8 	.word	0x240048c8
 8019e28:	240048d0 	.word	0x240048d0
 8019e2c:	080278e8 	.word	0x080278e8
 8019e30:	08027ac8 	.word	0x08027ac8
 8019e34:	08027960 	.word	0x08027960
 8019e38:	240048a0 	.word	0x240048a0
 8019e3c:	240048b0 	.word	0x240048b0
 8019e40:	240048c4 	.word	0x240048c4
 8019e44:	240048ca 	.word	0x240048ca
 8019e48:	240048c0 	.word	0x240048c0
 8019e4c:	240053d8 	.word	0x240053d8
 8019e50:	240053dc 	.word	0x240053dc

08019e54 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8019e54:	b580      	push	{r7, lr}
 8019e56:	b082      	sub	sp, #8
 8019e58:	af00      	add	r7, sp, #0
 8019e5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	2b00      	cmp	r3, #0
 8019e60:	d106      	bne.n	8019e70 <tcp_input_delayed_close+0x1c>
 8019e62:	4b17      	ldr	r3, [pc, #92]	; (8019ec0 <tcp_input_delayed_close+0x6c>)
 8019e64:	f240 225a 	movw	r2, #602	; 0x25a
 8019e68:	4916      	ldr	r1, [pc, #88]	; (8019ec4 <tcp_input_delayed_close+0x70>)
 8019e6a:	4817      	ldr	r0, [pc, #92]	; (8019ec8 <tcp_input_delayed_close+0x74>)
 8019e6c:	f006 fffe 	bl	8020e6c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8019e70:	4b16      	ldr	r3, [pc, #88]	; (8019ecc <tcp_input_delayed_close+0x78>)
 8019e72:	781b      	ldrb	r3, [r3, #0]
 8019e74:	f003 0310 	and.w	r3, r3, #16
 8019e78:	2b00      	cmp	r3, #0
 8019e7a:	d01c      	beq.n	8019eb6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8019e7c:	687b      	ldr	r3, [r7, #4]
 8019e7e:	8b5b      	ldrh	r3, [r3, #26]
 8019e80:	f003 0310 	and.w	r3, r3, #16
 8019e84:	2b00      	cmp	r3, #0
 8019e86:	d10d      	bne.n	8019ea4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8019e88:	687b      	ldr	r3, [r7, #4]
 8019e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019e8e:	2b00      	cmp	r3, #0
 8019e90:	d008      	beq.n	8019ea4 <tcp_input_delayed_close+0x50>
 8019e92:	687b      	ldr	r3, [r7, #4]
 8019e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019e98:	687a      	ldr	r2, [r7, #4]
 8019e9a:	6912      	ldr	r2, [r2, #16]
 8019e9c:	f06f 010e 	mvn.w	r1, #14
 8019ea0:	4610      	mov	r0, r2
 8019ea2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8019ea4:	6879      	ldr	r1, [r7, #4]
 8019ea6:	480a      	ldr	r0, [pc, #40]	; (8019ed0 <tcp_input_delayed_close+0x7c>)
 8019ea8:	f7ff fa52 	bl	8019350 <tcp_pcb_remove>
    tcp_free(pcb);
 8019eac:	6878      	ldr	r0, [r7, #4]
 8019eae:	f7fd fc9f 	bl	80177f0 <tcp_free>
    return 1;
 8019eb2:	2301      	movs	r3, #1
 8019eb4:	e000      	b.n	8019eb8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8019eb6:	2300      	movs	r3, #0
}
 8019eb8:	4618      	mov	r0, r3
 8019eba:	3708      	adds	r7, #8
 8019ebc:	46bd      	mov	sp, r7
 8019ebe:	bd80      	pop	{r7, pc}
 8019ec0:	080278e8 	.word	0x080278e8
 8019ec4:	08027ae4 	.word	0x08027ae4
 8019ec8:	08027960 	.word	0x08027960
 8019ecc:	240048cd 	.word	0x240048cd
 8019ed0:	240082b8 	.word	0x240082b8

08019ed4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8019ed4:	b590      	push	{r4, r7, lr}
 8019ed6:	b08b      	sub	sp, #44	; 0x2c
 8019ed8:	af04      	add	r7, sp, #16
 8019eda:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8019edc:	4b6f      	ldr	r3, [pc, #444]	; (801a09c <tcp_listen_input+0x1c8>)
 8019ede:	781b      	ldrb	r3, [r3, #0]
 8019ee0:	f003 0304 	and.w	r3, r3, #4
 8019ee4:	2b00      	cmp	r3, #0
 8019ee6:	f040 80d2 	bne.w	801a08e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8019eea:	687b      	ldr	r3, [r7, #4]
 8019eec:	2b00      	cmp	r3, #0
 8019eee:	d106      	bne.n	8019efe <tcp_listen_input+0x2a>
 8019ef0:	4b6b      	ldr	r3, [pc, #428]	; (801a0a0 <tcp_listen_input+0x1cc>)
 8019ef2:	f240 2281 	movw	r2, #641	; 0x281
 8019ef6:	496b      	ldr	r1, [pc, #428]	; (801a0a4 <tcp_listen_input+0x1d0>)
 8019ef8:	486b      	ldr	r0, [pc, #428]	; (801a0a8 <tcp_listen_input+0x1d4>)
 8019efa:	f006 ffb7 	bl	8020e6c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8019efe:	4b67      	ldr	r3, [pc, #412]	; (801a09c <tcp_listen_input+0x1c8>)
 8019f00:	781b      	ldrb	r3, [r3, #0]
 8019f02:	f003 0310 	and.w	r3, r3, #16
 8019f06:	2b00      	cmp	r3, #0
 8019f08:	d019      	beq.n	8019f3e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019f0a:	4b68      	ldr	r3, [pc, #416]	; (801a0ac <tcp_listen_input+0x1d8>)
 8019f0c:	6819      	ldr	r1, [r3, #0]
 8019f0e:	4b68      	ldr	r3, [pc, #416]	; (801a0b0 <tcp_listen_input+0x1dc>)
 8019f10:	881b      	ldrh	r3, [r3, #0]
 8019f12:	461a      	mov	r2, r3
 8019f14:	4b67      	ldr	r3, [pc, #412]	; (801a0b4 <tcp_listen_input+0x1e0>)
 8019f16:	681b      	ldr	r3, [r3, #0]
 8019f18:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019f1a:	4b67      	ldr	r3, [pc, #412]	; (801a0b8 <tcp_listen_input+0x1e4>)
 8019f1c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019f1e:	885b      	ldrh	r3, [r3, #2]
 8019f20:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019f22:	4a65      	ldr	r2, [pc, #404]	; (801a0b8 <tcp_listen_input+0x1e4>)
 8019f24:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019f26:	8812      	ldrh	r2, [r2, #0]
 8019f28:	b292      	uxth	r2, r2
 8019f2a:	9202      	str	r2, [sp, #8]
 8019f2c:	9301      	str	r3, [sp, #4]
 8019f2e:	4b63      	ldr	r3, [pc, #396]	; (801a0bc <tcp_listen_input+0x1e8>)
 8019f30:	9300      	str	r3, [sp, #0]
 8019f32:	4b63      	ldr	r3, [pc, #396]	; (801a0c0 <tcp_listen_input+0x1ec>)
 8019f34:	4602      	mov	r2, r0
 8019f36:	6878      	ldr	r0, [r7, #4]
 8019f38:	f003 fbd6 	bl	801d6e8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8019f3c:	e0a9      	b.n	801a092 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8019f3e:	4b57      	ldr	r3, [pc, #348]	; (801a09c <tcp_listen_input+0x1c8>)
 8019f40:	781b      	ldrb	r3, [r3, #0]
 8019f42:	f003 0302 	and.w	r3, r3, #2
 8019f46:	2b00      	cmp	r3, #0
 8019f48:	f000 80a3 	beq.w	801a092 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8019f4c:	687b      	ldr	r3, [r7, #4]
 8019f4e:	7d5b      	ldrb	r3, [r3, #21]
 8019f50:	4618      	mov	r0, r3
 8019f52:	f7ff f85b 	bl	801900c <tcp_alloc>
 8019f56:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8019f58:	697b      	ldr	r3, [r7, #20]
 8019f5a:	2b00      	cmp	r3, #0
 8019f5c:	d111      	bne.n	8019f82 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	699b      	ldr	r3, [r3, #24]
 8019f62:	2b00      	cmp	r3, #0
 8019f64:	d00a      	beq.n	8019f7c <tcp_listen_input+0xa8>
 8019f66:	687b      	ldr	r3, [r7, #4]
 8019f68:	699b      	ldr	r3, [r3, #24]
 8019f6a:	687a      	ldr	r2, [r7, #4]
 8019f6c:	6910      	ldr	r0, [r2, #16]
 8019f6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019f72:	2100      	movs	r1, #0
 8019f74:	4798      	blx	r3
 8019f76:	4603      	mov	r3, r0
 8019f78:	73bb      	strb	r3, [r7, #14]
      return;
 8019f7a:	e08b      	b.n	801a094 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8019f7c:	23f0      	movs	r3, #240	; 0xf0
 8019f7e:	73bb      	strb	r3, [r7, #14]
      return;
 8019f80:	e088      	b.n	801a094 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8019f82:	4b50      	ldr	r3, [pc, #320]	; (801a0c4 <tcp_listen_input+0x1f0>)
 8019f84:	695a      	ldr	r2, [r3, #20]
 8019f86:	697b      	ldr	r3, [r7, #20]
 8019f88:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8019f8a:	4b4e      	ldr	r3, [pc, #312]	; (801a0c4 <tcp_listen_input+0x1f0>)
 8019f8c:	691a      	ldr	r2, [r3, #16]
 8019f8e:	697b      	ldr	r3, [r7, #20]
 8019f90:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	8ada      	ldrh	r2, [r3, #22]
 8019f96:	697b      	ldr	r3, [r7, #20]
 8019f98:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8019f9a:	4b47      	ldr	r3, [pc, #284]	; (801a0b8 <tcp_listen_input+0x1e4>)
 8019f9c:	681b      	ldr	r3, [r3, #0]
 8019f9e:	881b      	ldrh	r3, [r3, #0]
 8019fa0:	b29a      	uxth	r2, r3
 8019fa2:	697b      	ldr	r3, [r7, #20]
 8019fa4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8019fa6:	697b      	ldr	r3, [r7, #20]
 8019fa8:	2203      	movs	r2, #3
 8019faa:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8019fac:	4b41      	ldr	r3, [pc, #260]	; (801a0b4 <tcp_listen_input+0x1e0>)
 8019fae:	681b      	ldr	r3, [r3, #0]
 8019fb0:	1c5a      	adds	r2, r3, #1
 8019fb2:	697b      	ldr	r3, [r7, #20]
 8019fb4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8019fb6:	697b      	ldr	r3, [r7, #20]
 8019fb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019fba:	697b      	ldr	r3, [r7, #20]
 8019fbc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8019fbe:	6978      	ldr	r0, [r7, #20]
 8019fc0:	f7ff fa5a 	bl	8019478 <tcp_next_iss>
 8019fc4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8019fc6:	697b      	ldr	r3, [r7, #20]
 8019fc8:	693a      	ldr	r2, [r7, #16]
 8019fca:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8019fcc:	697b      	ldr	r3, [r7, #20]
 8019fce:	693a      	ldr	r2, [r7, #16]
 8019fd0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8019fd2:	697b      	ldr	r3, [r7, #20]
 8019fd4:	693a      	ldr	r2, [r7, #16]
 8019fd6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8019fd8:	697b      	ldr	r3, [r7, #20]
 8019fda:	693a      	ldr	r2, [r7, #16]
 8019fdc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8019fde:	4b35      	ldr	r3, [pc, #212]	; (801a0b4 <tcp_listen_input+0x1e0>)
 8019fe0:	681b      	ldr	r3, [r3, #0]
 8019fe2:	1e5a      	subs	r2, r3, #1
 8019fe4:	697b      	ldr	r3, [r7, #20]
 8019fe6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	691a      	ldr	r2, [r3, #16]
 8019fec:	697b      	ldr	r3, [r7, #20]
 8019fee:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8019ff0:	697b      	ldr	r3, [r7, #20]
 8019ff2:	687a      	ldr	r2, [r7, #4]
 8019ff4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8019ff6:	687b      	ldr	r3, [r7, #4]
 8019ff8:	7a5b      	ldrb	r3, [r3, #9]
 8019ffa:	f003 030c 	and.w	r3, r3, #12
 8019ffe:	b2da      	uxtb	r2, r3
 801a000:	697b      	ldr	r3, [r7, #20]
 801a002:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801a004:	687b      	ldr	r3, [r7, #4]
 801a006:	7a1a      	ldrb	r2, [r3, #8]
 801a008:	697b      	ldr	r3, [r7, #20]
 801a00a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801a00c:	4b2e      	ldr	r3, [pc, #184]	; (801a0c8 <tcp_listen_input+0x1f4>)
 801a00e:	681a      	ldr	r2, [r3, #0]
 801a010:	697b      	ldr	r3, [r7, #20]
 801a012:	60da      	str	r2, [r3, #12]
 801a014:	4a2c      	ldr	r2, [pc, #176]	; (801a0c8 <tcp_listen_input+0x1f4>)
 801a016:	697b      	ldr	r3, [r7, #20]
 801a018:	6013      	str	r3, [r2, #0]
 801a01a:	f003 fd27 	bl	801da6c <tcp_timer_needed>
 801a01e:	4b2b      	ldr	r3, [pc, #172]	; (801a0cc <tcp_listen_input+0x1f8>)
 801a020:	2201      	movs	r2, #1
 801a022:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801a024:	6978      	ldr	r0, [r7, #20]
 801a026:	f001 fd8d 	bl	801bb44 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801a02a:	4b23      	ldr	r3, [pc, #140]	; (801a0b8 <tcp_listen_input+0x1e4>)
 801a02c:	681b      	ldr	r3, [r3, #0]
 801a02e:	89db      	ldrh	r3, [r3, #14]
 801a030:	b29a      	uxth	r2, r3
 801a032:	697b      	ldr	r3, [r7, #20]
 801a034:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801a038:	697b      	ldr	r3, [r7, #20]
 801a03a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801a03e:	697b      	ldr	r3, [r7, #20]
 801a040:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801a044:	697b      	ldr	r3, [r7, #20]
 801a046:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801a048:	697b      	ldr	r3, [r7, #20]
 801a04a:	3304      	adds	r3, #4
 801a04c:	4618      	mov	r0, r3
 801a04e:	f7fa fc51 	bl	80148f4 <ip4_route>
 801a052:	4601      	mov	r1, r0
 801a054:	697b      	ldr	r3, [r7, #20]
 801a056:	3304      	adds	r3, #4
 801a058:	461a      	mov	r2, r3
 801a05a:	4620      	mov	r0, r4
 801a05c:	f7ff fa32 	bl	80194c4 <tcp_eff_send_mss_netif>
 801a060:	4603      	mov	r3, r0
 801a062:	461a      	mov	r2, r3
 801a064:	697b      	ldr	r3, [r7, #20]
 801a066:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801a068:	2112      	movs	r1, #18
 801a06a:	6978      	ldr	r0, [r7, #20]
 801a06c:	f002 fc9a 	bl	801c9a4 <tcp_enqueue_flags>
 801a070:	4603      	mov	r3, r0
 801a072:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801a074:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a078:	2b00      	cmp	r3, #0
 801a07a:	d004      	beq.n	801a086 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801a07c:	2100      	movs	r1, #0
 801a07e:	6978      	ldr	r0, [r7, #20]
 801a080:	f7fd fde0 	bl	8017c44 <tcp_abandon>
      return;
 801a084:	e006      	b.n	801a094 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801a086:	6978      	ldr	r0, [r7, #20]
 801a088:	f002 fd7a 	bl	801cb80 <tcp_output>
  return;
 801a08c:	e001      	b.n	801a092 <tcp_listen_input+0x1be>
    return;
 801a08e:	bf00      	nop
 801a090:	e000      	b.n	801a094 <tcp_listen_input+0x1c0>
  return;
 801a092:	bf00      	nop
}
 801a094:	371c      	adds	r7, #28
 801a096:	46bd      	mov	sp, r7
 801a098:	bd90      	pop	{r4, r7, pc}
 801a09a:	bf00      	nop
 801a09c:	240048cc 	.word	0x240048cc
 801a0a0:	080278e8 	.word	0x080278e8
 801a0a4:	08027b0c 	.word	0x08027b0c
 801a0a8:	08027960 	.word	0x08027960
 801a0ac:	240048c4 	.word	0x240048c4
 801a0b0:	240048ca 	.word	0x240048ca
 801a0b4:	240048c0 	.word	0x240048c0
 801a0b8:	240048b0 	.word	0x240048b0
 801a0bc:	240053d8 	.word	0x240053d8
 801a0c0:	240053dc 	.word	0x240053dc
 801a0c4:	240053c8 	.word	0x240053c8
 801a0c8:	240082b8 	.word	0x240082b8
 801a0cc:	240082b4 	.word	0x240082b4

0801a0d0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801a0d0:	b580      	push	{r7, lr}
 801a0d2:	b086      	sub	sp, #24
 801a0d4:	af04      	add	r7, sp, #16
 801a0d6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801a0d8:	4b2f      	ldr	r3, [pc, #188]	; (801a198 <tcp_timewait_input+0xc8>)
 801a0da:	781b      	ldrb	r3, [r3, #0]
 801a0dc:	f003 0304 	and.w	r3, r3, #4
 801a0e0:	2b00      	cmp	r3, #0
 801a0e2:	d153      	bne.n	801a18c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801a0e4:	687b      	ldr	r3, [r7, #4]
 801a0e6:	2b00      	cmp	r3, #0
 801a0e8:	d106      	bne.n	801a0f8 <tcp_timewait_input+0x28>
 801a0ea:	4b2c      	ldr	r3, [pc, #176]	; (801a19c <tcp_timewait_input+0xcc>)
 801a0ec:	f240 22ee 	movw	r2, #750	; 0x2ee
 801a0f0:	492b      	ldr	r1, [pc, #172]	; (801a1a0 <tcp_timewait_input+0xd0>)
 801a0f2:	482c      	ldr	r0, [pc, #176]	; (801a1a4 <tcp_timewait_input+0xd4>)
 801a0f4:	f006 feba 	bl	8020e6c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801a0f8:	4b27      	ldr	r3, [pc, #156]	; (801a198 <tcp_timewait_input+0xc8>)
 801a0fa:	781b      	ldrb	r3, [r3, #0]
 801a0fc:	f003 0302 	and.w	r3, r3, #2
 801a100:	2b00      	cmp	r3, #0
 801a102:	d02a      	beq.n	801a15a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801a104:	4b28      	ldr	r3, [pc, #160]	; (801a1a8 <tcp_timewait_input+0xd8>)
 801a106:	681a      	ldr	r2, [r3, #0]
 801a108:	687b      	ldr	r3, [r7, #4]
 801a10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a10c:	1ad3      	subs	r3, r2, r3
 801a10e:	2b00      	cmp	r3, #0
 801a110:	db2d      	blt.n	801a16e <tcp_timewait_input+0x9e>
 801a112:	4b25      	ldr	r3, [pc, #148]	; (801a1a8 <tcp_timewait_input+0xd8>)
 801a114:	681a      	ldr	r2, [r3, #0]
 801a116:	687b      	ldr	r3, [r7, #4]
 801a118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a11a:	6879      	ldr	r1, [r7, #4]
 801a11c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a11e:	440b      	add	r3, r1
 801a120:	1ad3      	subs	r3, r2, r3
 801a122:	2b00      	cmp	r3, #0
 801a124:	dc23      	bgt.n	801a16e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a126:	4b21      	ldr	r3, [pc, #132]	; (801a1ac <tcp_timewait_input+0xdc>)
 801a128:	6819      	ldr	r1, [r3, #0]
 801a12a:	4b21      	ldr	r3, [pc, #132]	; (801a1b0 <tcp_timewait_input+0xe0>)
 801a12c:	881b      	ldrh	r3, [r3, #0]
 801a12e:	461a      	mov	r2, r3
 801a130:	4b1d      	ldr	r3, [pc, #116]	; (801a1a8 <tcp_timewait_input+0xd8>)
 801a132:	681b      	ldr	r3, [r3, #0]
 801a134:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a136:	4b1f      	ldr	r3, [pc, #124]	; (801a1b4 <tcp_timewait_input+0xe4>)
 801a138:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a13a:	885b      	ldrh	r3, [r3, #2]
 801a13c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a13e:	4a1d      	ldr	r2, [pc, #116]	; (801a1b4 <tcp_timewait_input+0xe4>)
 801a140:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a142:	8812      	ldrh	r2, [r2, #0]
 801a144:	b292      	uxth	r2, r2
 801a146:	9202      	str	r2, [sp, #8]
 801a148:	9301      	str	r3, [sp, #4]
 801a14a:	4b1b      	ldr	r3, [pc, #108]	; (801a1b8 <tcp_timewait_input+0xe8>)
 801a14c:	9300      	str	r3, [sp, #0]
 801a14e:	4b1b      	ldr	r3, [pc, #108]	; (801a1bc <tcp_timewait_input+0xec>)
 801a150:	4602      	mov	r2, r0
 801a152:	6878      	ldr	r0, [r7, #4]
 801a154:	f003 fac8 	bl	801d6e8 <tcp_rst>
      return;
 801a158:	e01b      	b.n	801a192 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801a15a:	4b0f      	ldr	r3, [pc, #60]	; (801a198 <tcp_timewait_input+0xc8>)
 801a15c:	781b      	ldrb	r3, [r3, #0]
 801a15e:	f003 0301 	and.w	r3, r3, #1
 801a162:	2b00      	cmp	r3, #0
 801a164:	d003      	beq.n	801a16e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801a166:	4b16      	ldr	r3, [pc, #88]	; (801a1c0 <tcp_timewait_input+0xf0>)
 801a168:	681a      	ldr	r2, [r3, #0]
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801a16e:	4b10      	ldr	r3, [pc, #64]	; (801a1b0 <tcp_timewait_input+0xe0>)
 801a170:	881b      	ldrh	r3, [r3, #0]
 801a172:	2b00      	cmp	r3, #0
 801a174:	d00c      	beq.n	801a190 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801a176:	687b      	ldr	r3, [r7, #4]
 801a178:	8b5b      	ldrh	r3, [r3, #26]
 801a17a:	f043 0302 	orr.w	r3, r3, #2
 801a17e:	b29a      	uxth	r2, r3
 801a180:	687b      	ldr	r3, [r7, #4]
 801a182:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801a184:	6878      	ldr	r0, [r7, #4]
 801a186:	f002 fcfb 	bl	801cb80 <tcp_output>
  }
  return;
 801a18a:	e001      	b.n	801a190 <tcp_timewait_input+0xc0>
    return;
 801a18c:	bf00      	nop
 801a18e:	e000      	b.n	801a192 <tcp_timewait_input+0xc2>
  return;
 801a190:	bf00      	nop
}
 801a192:	3708      	adds	r7, #8
 801a194:	46bd      	mov	sp, r7
 801a196:	bd80      	pop	{r7, pc}
 801a198:	240048cc 	.word	0x240048cc
 801a19c:	080278e8 	.word	0x080278e8
 801a1a0:	08027b2c 	.word	0x08027b2c
 801a1a4:	08027960 	.word	0x08027960
 801a1a8:	240048c0 	.word	0x240048c0
 801a1ac:	240048c4 	.word	0x240048c4
 801a1b0:	240048ca 	.word	0x240048ca
 801a1b4:	240048b0 	.word	0x240048b0
 801a1b8:	240053d8 	.word	0x240053d8
 801a1bc:	240053dc 	.word	0x240053dc
 801a1c0:	240082bc 	.word	0x240082bc

0801a1c4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801a1c4:	b590      	push	{r4, r7, lr}
 801a1c6:	b08d      	sub	sp, #52	; 0x34
 801a1c8:	af04      	add	r7, sp, #16
 801a1ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801a1cc:	2300      	movs	r3, #0
 801a1ce:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801a1d0:	2300      	movs	r3, #0
 801a1d2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801a1d4:	687b      	ldr	r3, [r7, #4]
 801a1d6:	2b00      	cmp	r3, #0
 801a1d8:	d106      	bne.n	801a1e8 <tcp_process+0x24>
 801a1da:	4ba5      	ldr	r3, [pc, #660]	; (801a470 <tcp_process+0x2ac>)
 801a1dc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801a1e0:	49a4      	ldr	r1, [pc, #656]	; (801a474 <tcp_process+0x2b0>)
 801a1e2:	48a5      	ldr	r0, [pc, #660]	; (801a478 <tcp_process+0x2b4>)
 801a1e4:	f006 fe42 	bl	8020e6c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801a1e8:	4ba4      	ldr	r3, [pc, #656]	; (801a47c <tcp_process+0x2b8>)
 801a1ea:	781b      	ldrb	r3, [r3, #0]
 801a1ec:	f003 0304 	and.w	r3, r3, #4
 801a1f0:	2b00      	cmp	r3, #0
 801a1f2:	d04e      	beq.n	801a292 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801a1f4:	687b      	ldr	r3, [r7, #4]
 801a1f6:	7d1b      	ldrb	r3, [r3, #20]
 801a1f8:	2b02      	cmp	r3, #2
 801a1fa:	d108      	bne.n	801a20e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801a1fc:	687b      	ldr	r3, [r7, #4]
 801a1fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801a200:	4b9f      	ldr	r3, [pc, #636]	; (801a480 <tcp_process+0x2bc>)
 801a202:	681b      	ldr	r3, [r3, #0]
 801a204:	429a      	cmp	r2, r3
 801a206:	d123      	bne.n	801a250 <tcp_process+0x8c>
        acceptable = 1;
 801a208:	2301      	movs	r3, #1
 801a20a:	76fb      	strb	r3, [r7, #27]
 801a20c:	e020      	b.n	801a250 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801a20e:	687b      	ldr	r3, [r7, #4]
 801a210:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a212:	4b9c      	ldr	r3, [pc, #624]	; (801a484 <tcp_process+0x2c0>)
 801a214:	681b      	ldr	r3, [r3, #0]
 801a216:	429a      	cmp	r2, r3
 801a218:	d102      	bne.n	801a220 <tcp_process+0x5c>
        acceptable = 1;
 801a21a:	2301      	movs	r3, #1
 801a21c:	76fb      	strb	r3, [r7, #27]
 801a21e:	e017      	b.n	801a250 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801a220:	4b98      	ldr	r3, [pc, #608]	; (801a484 <tcp_process+0x2c0>)
 801a222:	681a      	ldr	r2, [r3, #0]
 801a224:	687b      	ldr	r3, [r7, #4]
 801a226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a228:	1ad3      	subs	r3, r2, r3
 801a22a:	2b00      	cmp	r3, #0
 801a22c:	db10      	blt.n	801a250 <tcp_process+0x8c>
 801a22e:	4b95      	ldr	r3, [pc, #596]	; (801a484 <tcp_process+0x2c0>)
 801a230:	681a      	ldr	r2, [r3, #0]
 801a232:	687b      	ldr	r3, [r7, #4]
 801a234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a236:	6879      	ldr	r1, [r7, #4]
 801a238:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a23a:	440b      	add	r3, r1
 801a23c:	1ad3      	subs	r3, r2, r3
 801a23e:	2b00      	cmp	r3, #0
 801a240:	dc06      	bgt.n	801a250 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801a242:	687b      	ldr	r3, [r7, #4]
 801a244:	8b5b      	ldrh	r3, [r3, #26]
 801a246:	f043 0302 	orr.w	r3, r3, #2
 801a24a:	b29a      	uxth	r2, r3
 801a24c:	687b      	ldr	r3, [r7, #4]
 801a24e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801a250:	7efb      	ldrb	r3, [r7, #27]
 801a252:	2b00      	cmp	r3, #0
 801a254:	d01b      	beq.n	801a28e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801a256:	687b      	ldr	r3, [r7, #4]
 801a258:	7d1b      	ldrb	r3, [r3, #20]
 801a25a:	2b00      	cmp	r3, #0
 801a25c:	d106      	bne.n	801a26c <tcp_process+0xa8>
 801a25e:	4b84      	ldr	r3, [pc, #528]	; (801a470 <tcp_process+0x2ac>)
 801a260:	f44f 724e 	mov.w	r2, #824	; 0x338
 801a264:	4988      	ldr	r1, [pc, #544]	; (801a488 <tcp_process+0x2c4>)
 801a266:	4884      	ldr	r0, [pc, #528]	; (801a478 <tcp_process+0x2b4>)
 801a268:	f006 fe00 	bl	8020e6c <iprintf>
      recv_flags |= TF_RESET;
 801a26c:	4b87      	ldr	r3, [pc, #540]	; (801a48c <tcp_process+0x2c8>)
 801a26e:	781b      	ldrb	r3, [r3, #0]
 801a270:	f043 0308 	orr.w	r3, r3, #8
 801a274:	b2da      	uxtb	r2, r3
 801a276:	4b85      	ldr	r3, [pc, #532]	; (801a48c <tcp_process+0x2c8>)
 801a278:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801a27a:	687b      	ldr	r3, [r7, #4]
 801a27c:	8b5b      	ldrh	r3, [r3, #26]
 801a27e:	f023 0301 	bic.w	r3, r3, #1
 801a282:	b29a      	uxth	r2, r3
 801a284:	687b      	ldr	r3, [r7, #4]
 801a286:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801a288:	f06f 030d 	mvn.w	r3, #13
 801a28c:	e37a      	b.n	801a984 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801a28e:	2300      	movs	r3, #0
 801a290:	e378      	b.n	801a984 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801a292:	4b7a      	ldr	r3, [pc, #488]	; (801a47c <tcp_process+0x2b8>)
 801a294:	781b      	ldrb	r3, [r3, #0]
 801a296:	f003 0302 	and.w	r3, r3, #2
 801a29a:	2b00      	cmp	r3, #0
 801a29c:	d010      	beq.n	801a2c0 <tcp_process+0xfc>
 801a29e:	687b      	ldr	r3, [r7, #4]
 801a2a0:	7d1b      	ldrb	r3, [r3, #20]
 801a2a2:	2b02      	cmp	r3, #2
 801a2a4:	d00c      	beq.n	801a2c0 <tcp_process+0xfc>
 801a2a6:	687b      	ldr	r3, [r7, #4]
 801a2a8:	7d1b      	ldrb	r3, [r3, #20]
 801a2aa:	2b03      	cmp	r3, #3
 801a2ac:	d008      	beq.n	801a2c0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801a2ae:	687b      	ldr	r3, [r7, #4]
 801a2b0:	8b5b      	ldrh	r3, [r3, #26]
 801a2b2:	f043 0302 	orr.w	r3, r3, #2
 801a2b6:	b29a      	uxth	r2, r3
 801a2b8:	687b      	ldr	r3, [r7, #4]
 801a2ba:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801a2bc:	2300      	movs	r3, #0
 801a2be:	e361      	b.n	801a984 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801a2c0:	687b      	ldr	r3, [r7, #4]
 801a2c2:	8b5b      	ldrh	r3, [r3, #26]
 801a2c4:	f003 0310 	and.w	r3, r3, #16
 801a2c8:	2b00      	cmp	r3, #0
 801a2ca:	d103      	bne.n	801a2d4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801a2cc:	4b70      	ldr	r3, [pc, #448]	; (801a490 <tcp_process+0x2cc>)
 801a2ce:	681a      	ldr	r2, [r3, #0]
 801a2d0:	687b      	ldr	r3, [r7, #4]
 801a2d2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801a2d4:	687b      	ldr	r3, [r7, #4]
 801a2d6:	2200      	movs	r2, #0
 801a2d8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 801a2dc:	687b      	ldr	r3, [r7, #4]
 801a2de:	2200      	movs	r2, #0
 801a2e0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801a2e4:	6878      	ldr	r0, [r7, #4]
 801a2e6:	f001 fc2d 	bl	801bb44 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801a2ea:	687b      	ldr	r3, [r7, #4]
 801a2ec:	7d1b      	ldrb	r3, [r3, #20]
 801a2ee:	3b02      	subs	r3, #2
 801a2f0:	2b07      	cmp	r3, #7
 801a2f2:	f200 8337 	bhi.w	801a964 <tcp_process+0x7a0>
 801a2f6:	a201      	add	r2, pc, #4	; (adr r2, 801a2fc <tcp_process+0x138>)
 801a2f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a2fc:	0801a31d 	.word	0x0801a31d
 801a300:	0801a54d 	.word	0x0801a54d
 801a304:	0801a6c5 	.word	0x0801a6c5
 801a308:	0801a6ef 	.word	0x0801a6ef
 801a30c:	0801a813 	.word	0x0801a813
 801a310:	0801a6c5 	.word	0x0801a6c5
 801a314:	0801a89f 	.word	0x0801a89f
 801a318:	0801a92f 	.word	0x0801a92f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801a31c:	4b57      	ldr	r3, [pc, #348]	; (801a47c <tcp_process+0x2b8>)
 801a31e:	781b      	ldrb	r3, [r3, #0]
 801a320:	f003 0310 	and.w	r3, r3, #16
 801a324:	2b00      	cmp	r3, #0
 801a326:	f000 80e4 	beq.w	801a4f2 <tcp_process+0x32e>
 801a32a:	4b54      	ldr	r3, [pc, #336]	; (801a47c <tcp_process+0x2b8>)
 801a32c:	781b      	ldrb	r3, [r3, #0]
 801a32e:	f003 0302 	and.w	r3, r3, #2
 801a332:	2b00      	cmp	r3, #0
 801a334:	f000 80dd 	beq.w	801a4f2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801a338:	687b      	ldr	r3, [r7, #4]
 801a33a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a33c:	1c5a      	adds	r2, r3, #1
 801a33e:	4b50      	ldr	r3, [pc, #320]	; (801a480 <tcp_process+0x2bc>)
 801a340:	681b      	ldr	r3, [r3, #0]
 801a342:	429a      	cmp	r2, r3
 801a344:	f040 80d5 	bne.w	801a4f2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801a348:	4b4e      	ldr	r3, [pc, #312]	; (801a484 <tcp_process+0x2c0>)
 801a34a:	681b      	ldr	r3, [r3, #0]
 801a34c:	1c5a      	adds	r2, r3, #1
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801a352:	687b      	ldr	r3, [r7, #4]
 801a354:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a356:	687b      	ldr	r3, [r7, #4]
 801a358:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801a35a:	4b49      	ldr	r3, [pc, #292]	; (801a480 <tcp_process+0x2bc>)
 801a35c:	681a      	ldr	r2, [r3, #0]
 801a35e:	687b      	ldr	r3, [r7, #4]
 801a360:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801a362:	4b4c      	ldr	r3, [pc, #304]	; (801a494 <tcp_process+0x2d0>)
 801a364:	681b      	ldr	r3, [r3, #0]
 801a366:	89db      	ldrh	r3, [r3, #14]
 801a368:	b29a      	uxth	r2, r3
 801a36a:	687b      	ldr	r3, [r7, #4]
 801a36c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801a370:	687b      	ldr	r3, [r7, #4]
 801a372:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801a376:	687b      	ldr	r3, [r7, #4]
 801a378:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801a37c:	4b41      	ldr	r3, [pc, #260]	; (801a484 <tcp_process+0x2c0>)
 801a37e:	681b      	ldr	r3, [r3, #0]
 801a380:	1e5a      	subs	r2, r3, #1
 801a382:	687b      	ldr	r3, [r7, #4]
 801a384:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801a386:	687b      	ldr	r3, [r7, #4]
 801a388:	2204      	movs	r2, #4
 801a38a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801a38c:	687b      	ldr	r3, [r7, #4]
 801a38e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801a390:	687b      	ldr	r3, [r7, #4]
 801a392:	3304      	adds	r3, #4
 801a394:	4618      	mov	r0, r3
 801a396:	f7fa faad 	bl	80148f4 <ip4_route>
 801a39a:	4601      	mov	r1, r0
 801a39c:	687b      	ldr	r3, [r7, #4]
 801a39e:	3304      	adds	r3, #4
 801a3a0:	461a      	mov	r2, r3
 801a3a2:	4620      	mov	r0, r4
 801a3a4:	f7ff f88e 	bl	80194c4 <tcp_eff_send_mss_netif>
 801a3a8:	4603      	mov	r3, r0
 801a3aa:	461a      	mov	r2, r3
 801a3ac:	687b      	ldr	r3, [r7, #4]
 801a3ae:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801a3b0:	687b      	ldr	r3, [r7, #4]
 801a3b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a3b4:	009a      	lsls	r2, r3, #2
 801a3b6:	687b      	ldr	r3, [r7, #4]
 801a3b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a3ba:	005b      	lsls	r3, r3, #1
 801a3bc:	f241 111c 	movw	r1, #4380	; 0x111c
 801a3c0:	428b      	cmp	r3, r1
 801a3c2:	bf38      	it	cc
 801a3c4:	460b      	movcc	r3, r1
 801a3c6:	429a      	cmp	r2, r3
 801a3c8:	d204      	bcs.n	801a3d4 <tcp_process+0x210>
 801a3ca:	687b      	ldr	r3, [r7, #4]
 801a3cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a3ce:	009b      	lsls	r3, r3, #2
 801a3d0:	b29b      	uxth	r3, r3
 801a3d2:	e00d      	b.n	801a3f0 <tcp_process+0x22c>
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a3d8:	005b      	lsls	r3, r3, #1
 801a3da:	f241 121c 	movw	r2, #4380	; 0x111c
 801a3de:	4293      	cmp	r3, r2
 801a3e0:	d904      	bls.n	801a3ec <tcp_process+0x228>
 801a3e2:	687b      	ldr	r3, [r7, #4]
 801a3e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a3e6:	005b      	lsls	r3, r3, #1
 801a3e8:	b29b      	uxth	r3, r3
 801a3ea:	e001      	b.n	801a3f0 <tcp_process+0x22c>
 801a3ec:	f241 131c 	movw	r3, #4380	; 0x111c
 801a3f0:	687a      	ldr	r2, [r7, #4]
 801a3f2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801a3f6:	687b      	ldr	r3, [r7, #4]
 801a3f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a3fc:	2b00      	cmp	r3, #0
 801a3fe:	d106      	bne.n	801a40e <tcp_process+0x24a>
 801a400:	4b1b      	ldr	r3, [pc, #108]	; (801a470 <tcp_process+0x2ac>)
 801a402:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801a406:	4924      	ldr	r1, [pc, #144]	; (801a498 <tcp_process+0x2d4>)
 801a408:	481b      	ldr	r0, [pc, #108]	; (801a478 <tcp_process+0x2b4>)
 801a40a:	f006 fd2f 	bl	8020e6c <iprintf>
        --pcb->snd_queuelen;
 801a40e:	687b      	ldr	r3, [r7, #4]
 801a410:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a414:	3b01      	subs	r3, #1
 801a416:	b29a      	uxth	r2, r3
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801a41e:	687b      	ldr	r3, [r7, #4]
 801a420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a422:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801a424:	69fb      	ldr	r3, [r7, #28]
 801a426:	2b00      	cmp	r3, #0
 801a428:	d111      	bne.n	801a44e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801a42a:	687b      	ldr	r3, [r7, #4]
 801a42c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a42e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801a430:	69fb      	ldr	r3, [r7, #28]
 801a432:	2b00      	cmp	r3, #0
 801a434:	d106      	bne.n	801a444 <tcp_process+0x280>
 801a436:	4b0e      	ldr	r3, [pc, #56]	; (801a470 <tcp_process+0x2ac>)
 801a438:	f44f 725d 	mov.w	r2, #884	; 0x374
 801a43c:	4917      	ldr	r1, [pc, #92]	; (801a49c <tcp_process+0x2d8>)
 801a43e:	480e      	ldr	r0, [pc, #56]	; (801a478 <tcp_process+0x2b4>)
 801a440:	f006 fd14 	bl	8020e6c <iprintf>
          pcb->unsent = rseg->next;
 801a444:	69fb      	ldr	r3, [r7, #28]
 801a446:	681a      	ldr	r2, [r3, #0]
 801a448:	687b      	ldr	r3, [r7, #4]
 801a44a:	66da      	str	r2, [r3, #108]	; 0x6c
 801a44c:	e003      	b.n	801a456 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801a44e:	69fb      	ldr	r3, [r7, #28]
 801a450:	681a      	ldr	r2, [r3, #0]
 801a452:	687b      	ldr	r3, [r7, #4]
 801a454:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801a456:	69f8      	ldr	r0, [r7, #28]
 801a458:	f7fe fc6f 	bl	8018d3a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801a45c:	687b      	ldr	r3, [r7, #4]
 801a45e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a460:	2b00      	cmp	r3, #0
 801a462:	d11d      	bne.n	801a4a0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801a464:	687b      	ldr	r3, [r7, #4]
 801a466:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a46a:	861a      	strh	r2, [r3, #48]	; 0x30
 801a46c:	e01f      	b.n	801a4ae <tcp_process+0x2ea>
 801a46e:	bf00      	nop
 801a470:	080278e8 	.word	0x080278e8
 801a474:	08027b4c 	.word	0x08027b4c
 801a478:	08027960 	.word	0x08027960
 801a47c:	240048cc 	.word	0x240048cc
 801a480:	240048c4 	.word	0x240048c4
 801a484:	240048c0 	.word	0x240048c0
 801a488:	08027b68 	.word	0x08027b68
 801a48c:	240048cd 	.word	0x240048cd
 801a490:	240082bc 	.word	0x240082bc
 801a494:	240048b0 	.word	0x240048b0
 801a498:	08027b88 	.word	0x08027b88
 801a49c:	08027ba0 	.word	0x08027ba0
        } else {
          pcb->rtime = 0;
 801a4a0:	687b      	ldr	r3, [r7, #4]
 801a4a2:	2200      	movs	r2, #0
 801a4a4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801a4a6:	687b      	ldr	r3, [r7, #4]
 801a4a8:	2200      	movs	r2, #0
 801a4aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801a4ae:	687b      	ldr	r3, [r7, #4]
 801a4b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a4b4:	2b00      	cmp	r3, #0
 801a4b6:	d00a      	beq.n	801a4ce <tcp_process+0x30a>
 801a4b8:	687b      	ldr	r3, [r7, #4]
 801a4ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a4be:	687a      	ldr	r2, [r7, #4]
 801a4c0:	6910      	ldr	r0, [r2, #16]
 801a4c2:	2200      	movs	r2, #0
 801a4c4:	6879      	ldr	r1, [r7, #4]
 801a4c6:	4798      	blx	r3
 801a4c8:	4603      	mov	r3, r0
 801a4ca:	76bb      	strb	r3, [r7, #26]
 801a4cc:	e001      	b.n	801a4d2 <tcp_process+0x30e>
 801a4ce:	2300      	movs	r3, #0
 801a4d0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801a4d2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801a4d6:	f113 0f0d 	cmn.w	r3, #13
 801a4da:	d102      	bne.n	801a4e2 <tcp_process+0x31e>
          return ERR_ABRT;
 801a4dc:	f06f 030c 	mvn.w	r3, #12
 801a4e0:	e250      	b.n	801a984 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801a4e2:	687b      	ldr	r3, [r7, #4]
 801a4e4:	8b5b      	ldrh	r3, [r3, #26]
 801a4e6:	f043 0302 	orr.w	r3, r3, #2
 801a4ea:	b29a      	uxth	r2, r3
 801a4ec:	687b      	ldr	r3, [r7, #4]
 801a4ee:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801a4f0:	e23a      	b.n	801a968 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801a4f2:	4b9d      	ldr	r3, [pc, #628]	; (801a768 <tcp_process+0x5a4>)
 801a4f4:	781b      	ldrb	r3, [r3, #0]
 801a4f6:	f003 0310 	and.w	r3, r3, #16
 801a4fa:	2b00      	cmp	r3, #0
 801a4fc:	f000 8234 	beq.w	801a968 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a500:	4b9a      	ldr	r3, [pc, #616]	; (801a76c <tcp_process+0x5a8>)
 801a502:	6819      	ldr	r1, [r3, #0]
 801a504:	4b9a      	ldr	r3, [pc, #616]	; (801a770 <tcp_process+0x5ac>)
 801a506:	881b      	ldrh	r3, [r3, #0]
 801a508:	461a      	mov	r2, r3
 801a50a:	4b9a      	ldr	r3, [pc, #616]	; (801a774 <tcp_process+0x5b0>)
 801a50c:	681b      	ldr	r3, [r3, #0]
 801a50e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a510:	4b99      	ldr	r3, [pc, #612]	; (801a778 <tcp_process+0x5b4>)
 801a512:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a514:	885b      	ldrh	r3, [r3, #2]
 801a516:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a518:	4a97      	ldr	r2, [pc, #604]	; (801a778 <tcp_process+0x5b4>)
 801a51a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a51c:	8812      	ldrh	r2, [r2, #0]
 801a51e:	b292      	uxth	r2, r2
 801a520:	9202      	str	r2, [sp, #8]
 801a522:	9301      	str	r3, [sp, #4]
 801a524:	4b95      	ldr	r3, [pc, #596]	; (801a77c <tcp_process+0x5b8>)
 801a526:	9300      	str	r3, [sp, #0]
 801a528:	4b95      	ldr	r3, [pc, #596]	; (801a780 <tcp_process+0x5bc>)
 801a52a:	4602      	mov	r2, r0
 801a52c:	6878      	ldr	r0, [r7, #4]
 801a52e:	f003 f8db 	bl	801d6e8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801a532:	687b      	ldr	r3, [r7, #4]
 801a534:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a538:	2b05      	cmp	r3, #5
 801a53a:	f200 8215 	bhi.w	801a968 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801a53e:	687b      	ldr	r3, [r7, #4]
 801a540:	2200      	movs	r2, #0
 801a542:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801a544:	6878      	ldr	r0, [r7, #4]
 801a546:	f002 fea5 	bl	801d294 <tcp_rexmit_rto>
      break;
 801a54a:	e20d      	b.n	801a968 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801a54c:	4b86      	ldr	r3, [pc, #536]	; (801a768 <tcp_process+0x5a4>)
 801a54e:	781b      	ldrb	r3, [r3, #0]
 801a550:	f003 0310 	and.w	r3, r3, #16
 801a554:	2b00      	cmp	r3, #0
 801a556:	f000 80a1 	beq.w	801a69c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801a55a:	4b84      	ldr	r3, [pc, #528]	; (801a76c <tcp_process+0x5a8>)
 801a55c:	681a      	ldr	r2, [r3, #0]
 801a55e:	687b      	ldr	r3, [r7, #4]
 801a560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a562:	1ad3      	subs	r3, r2, r3
 801a564:	3b01      	subs	r3, #1
 801a566:	2b00      	cmp	r3, #0
 801a568:	db7e      	blt.n	801a668 <tcp_process+0x4a4>
 801a56a:	4b80      	ldr	r3, [pc, #512]	; (801a76c <tcp_process+0x5a8>)
 801a56c:	681a      	ldr	r2, [r3, #0]
 801a56e:	687b      	ldr	r3, [r7, #4]
 801a570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a572:	1ad3      	subs	r3, r2, r3
 801a574:	2b00      	cmp	r3, #0
 801a576:	dc77      	bgt.n	801a668 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801a578:	687b      	ldr	r3, [r7, #4]
 801a57a:	2204      	movs	r2, #4
 801a57c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801a57e:	687b      	ldr	r3, [r7, #4]
 801a580:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a582:	2b00      	cmp	r3, #0
 801a584:	d102      	bne.n	801a58c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801a586:	23fa      	movs	r3, #250	; 0xfa
 801a588:	76bb      	strb	r3, [r7, #26]
 801a58a:	e01d      	b.n	801a5c8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801a58c:	687b      	ldr	r3, [r7, #4]
 801a58e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a590:	699b      	ldr	r3, [r3, #24]
 801a592:	2b00      	cmp	r3, #0
 801a594:	d106      	bne.n	801a5a4 <tcp_process+0x3e0>
 801a596:	4b7b      	ldr	r3, [pc, #492]	; (801a784 <tcp_process+0x5c0>)
 801a598:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801a59c:	497a      	ldr	r1, [pc, #488]	; (801a788 <tcp_process+0x5c4>)
 801a59e:	487b      	ldr	r0, [pc, #492]	; (801a78c <tcp_process+0x5c8>)
 801a5a0:	f006 fc64 	bl	8020e6c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801a5a4:	687b      	ldr	r3, [r7, #4]
 801a5a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a5a8:	699b      	ldr	r3, [r3, #24]
 801a5aa:	2b00      	cmp	r3, #0
 801a5ac:	d00a      	beq.n	801a5c4 <tcp_process+0x400>
 801a5ae:	687b      	ldr	r3, [r7, #4]
 801a5b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a5b2:	699b      	ldr	r3, [r3, #24]
 801a5b4:	687a      	ldr	r2, [r7, #4]
 801a5b6:	6910      	ldr	r0, [r2, #16]
 801a5b8:	2200      	movs	r2, #0
 801a5ba:	6879      	ldr	r1, [r7, #4]
 801a5bc:	4798      	blx	r3
 801a5be:	4603      	mov	r3, r0
 801a5c0:	76bb      	strb	r3, [r7, #26]
 801a5c2:	e001      	b.n	801a5c8 <tcp_process+0x404>
 801a5c4:	23f0      	movs	r3, #240	; 0xf0
 801a5c6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801a5c8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801a5cc:	2b00      	cmp	r3, #0
 801a5ce:	d00a      	beq.n	801a5e6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801a5d0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801a5d4:	f113 0f0d 	cmn.w	r3, #13
 801a5d8:	d002      	beq.n	801a5e0 <tcp_process+0x41c>
              tcp_abort(pcb);
 801a5da:	6878      	ldr	r0, [r7, #4]
 801a5dc:	f7fd fbf0 	bl	8017dc0 <tcp_abort>
            }
            return ERR_ABRT;
 801a5e0:	f06f 030c 	mvn.w	r3, #12
 801a5e4:	e1ce      	b.n	801a984 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801a5e6:	6878      	ldr	r0, [r7, #4]
 801a5e8:	f000 fae0 	bl	801abac <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801a5ec:	4b68      	ldr	r3, [pc, #416]	; (801a790 <tcp_process+0x5cc>)
 801a5ee:	881b      	ldrh	r3, [r3, #0]
 801a5f0:	2b00      	cmp	r3, #0
 801a5f2:	d005      	beq.n	801a600 <tcp_process+0x43c>
            recv_acked--;
 801a5f4:	4b66      	ldr	r3, [pc, #408]	; (801a790 <tcp_process+0x5cc>)
 801a5f6:	881b      	ldrh	r3, [r3, #0]
 801a5f8:	3b01      	subs	r3, #1
 801a5fa:	b29a      	uxth	r2, r3
 801a5fc:	4b64      	ldr	r3, [pc, #400]	; (801a790 <tcp_process+0x5cc>)
 801a5fe:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801a600:	687b      	ldr	r3, [r7, #4]
 801a602:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a604:	009a      	lsls	r2, r3, #2
 801a606:	687b      	ldr	r3, [r7, #4]
 801a608:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a60a:	005b      	lsls	r3, r3, #1
 801a60c:	f241 111c 	movw	r1, #4380	; 0x111c
 801a610:	428b      	cmp	r3, r1
 801a612:	bf38      	it	cc
 801a614:	460b      	movcc	r3, r1
 801a616:	429a      	cmp	r2, r3
 801a618:	d204      	bcs.n	801a624 <tcp_process+0x460>
 801a61a:	687b      	ldr	r3, [r7, #4]
 801a61c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a61e:	009b      	lsls	r3, r3, #2
 801a620:	b29b      	uxth	r3, r3
 801a622:	e00d      	b.n	801a640 <tcp_process+0x47c>
 801a624:	687b      	ldr	r3, [r7, #4]
 801a626:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a628:	005b      	lsls	r3, r3, #1
 801a62a:	f241 121c 	movw	r2, #4380	; 0x111c
 801a62e:	4293      	cmp	r3, r2
 801a630:	d904      	bls.n	801a63c <tcp_process+0x478>
 801a632:	687b      	ldr	r3, [r7, #4]
 801a634:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a636:	005b      	lsls	r3, r3, #1
 801a638:	b29b      	uxth	r3, r3
 801a63a:	e001      	b.n	801a640 <tcp_process+0x47c>
 801a63c:	f241 131c 	movw	r3, #4380	; 0x111c
 801a640:	687a      	ldr	r2, [r7, #4]
 801a642:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801a646:	4b53      	ldr	r3, [pc, #332]	; (801a794 <tcp_process+0x5d0>)
 801a648:	781b      	ldrb	r3, [r3, #0]
 801a64a:	f003 0320 	and.w	r3, r3, #32
 801a64e:	2b00      	cmp	r3, #0
 801a650:	d037      	beq.n	801a6c2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801a652:	687b      	ldr	r3, [r7, #4]
 801a654:	8b5b      	ldrh	r3, [r3, #26]
 801a656:	f043 0302 	orr.w	r3, r3, #2
 801a65a:	b29a      	uxth	r2, r3
 801a65c:	687b      	ldr	r3, [r7, #4]
 801a65e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801a660:	687b      	ldr	r3, [r7, #4]
 801a662:	2207      	movs	r2, #7
 801a664:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801a666:	e02c      	b.n	801a6c2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a668:	4b40      	ldr	r3, [pc, #256]	; (801a76c <tcp_process+0x5a8>)
 801a66a:	6819      	ldr	r1, [r3, #0]
 801a66c:	4b40      	ldr	r3, [pc, #256]	; (801a770 <tcp_process+0x5ac>)
 801a66e:	881b      	ldrh	r3, [r3, #0]
 801a670:	461a      	mov	r2, r3
 801a672:	4b40      	ldr	r3, [pc, #256]	; (801a774 <tcp_process+0x5b0>)
 801a674:	681b      	ldr	r3, [r3, #0]
 801a676:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a678:	4b3f      	ldr	r3, [pc, #252]	; (801a778 <tcp_process+0x5b4>)
 801a67a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a67c:	885b      	ldrh	r3, [r3, #2]
 801a67e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a680:	4a3d      	ldr	r2, [pc, #244]	; (801a778 <tcp_process+0x5b4>)
 801a682:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a684:	8812      	ldrh	r2, [r2, #0]
 801a686:	b292      	uxth	r2, r2
 801a688:	9202      	str	r2, [sp, #8]
 801a68a:	9301      	str	r3, [sp, #4]
 801a68c:	4b3b      	ldr	r3, [pc, #236]	; (801a77c <tcp_process+0x5b8>)
 801a68e:	9300      	str	r3, [sp, #0]
 801a690:	4b3b      	ldr	r3, [pc, #236]	; (801a780 <tcp_process+0x5bc>)
 801a692:	4602      	mov	r2, r0
 801a694:	6878      	ldr	r0, [r7, #4]
 801a696:	f003 f827 	bl	801d6e8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801a69a:	e167      	b.n	801a96c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801a69c:	4b32      	ldr	r3, [pc, #200]	; (801a768 <tcp_process+0x5a4>)
 801a69e:	781b      	ldrb	r3, [r3, #0]
 801a6a0:	f003 0302 	and.w	r3, r3, #2
 801a6a4:	2b00      	cmp	r3, #0
 801a6a6:	f000 8161 	beq.w	801a96c <tcp_process+0x7a8>
 801a6aa:	687b      	ldr	r3, [r7, #4]
 801a6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a6ae:	1e5a      	subs	r2, r3, #1
 801a6b0:	4b30      	ldr	r3, [pc, #192]	; (801a774 <tcp_process+0x5b0>)
 801a6b2:	681b      	ldr	r3, [r3, #0]
 801a6b4:	429a      	cmp	r2, r3
 801a6b6:	f040 8159 	bne.w	801a96c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801a6ba:	6878      	ldr	r0, [r7, #4]
 801a6bc:	f002 fe0c 	bl	801d2d8 <tcp_rexmit>
      break;
 801a6c0:	e154      	b.n	801a96c <tcp_process+0x7a8>
 801a6c2:	e153      	b.n	801a96c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801a6c4:	6878      	ldr	r0, [r7, #4]
 801a6c6:	f000 fa71 	bl	801abac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801a6ca:	4b32      	ldr	r3, [pc, #200]	; (801a794 <tcp_process+0x5d0>)
 801a6cc:	781b      	ldrb	r3, [r3, #0]
 801a6ce:	f003 0320 	and.w	r3, r3, #32
 801a6d2:	2b00      	cmp	r3, #0
 801a6d4:	f000 814c 	beq.w	801a970 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801a6d8:	687b      	ldr	r3, [r7, #4]
 801a6da:	8b5b      	ldrh	r3, [r3, #26]
 801a6dc:	f043 0302 	orr.w	r3, r3, #2
 801a6e0:	b29a      	uxth	r2, r3
 801a6e2:	687b      	ldr	r3, [r7, #4]
 801a6e4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801a6e6:	687b      	ldr	r3, [r7, #4]
 801a6e8:	2207      	movs	r2, #7
 801a6ea:	751a      	strb	r2, [r3, #20]
      }
      break;
 801a6ec:	e140      	b.n	801a970 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801a6ee:	6878      	ldr	r0, [r7, #4]
 801a6f0:	f000 fa5c 	bl	801abac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801a6f4:	4b27      	ldr	r3, [pc, #156]	; (801a794 <tcp_process+0x5d0>)
 801a6f6:	781b      	ldrb	r3, [r3, #0]
 801a6f8:	f003 0320 	and.w	r3, r3, #32
 801a6fc:	2b00      	cmp	r3, #0
 801a6fe:	d071      	beq.n	801a7e4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801a700:	4b19      	ldr	r3, [pc, #100]	; (801a768 <tcp_process+0x5a4>)
 801a702:	781b      	ldrb	r3, [r3, #0]
 801a704:	f003 0310 	and.w	r3, r3, #16
 801a708:	2b00      	cmp	r3, #0
 801a70a:	d060      	beq.n	801a7ce <tcp_process+0x60a>
 801a70c:	687b      	ldr	r3, [r7, #4]
 801a70e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801a710:	4b16      	ldr	r3, [pc, #88]	; (801a76c <tcp_process+0x5a8>)
 801a712:	681b      	ldr	r3, [r3, #0]
 801a714:	429a      	cmp	r2, r3
 801a716:	d15a      	bne.n	801a7ce <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801a718:	687b      	ldr	r3, [r7, #4]
 801a71a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801a71c:	2b00      	cmp	r3, #0
 801a71e:	d156      	bne.n	801a7ce <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801a720:	687b      	ldr	r3, [r7, #4]
 801a722:	8b5b      	ldrh	r3, [r3, #26]
 801a724:	f043 0302 	orr.w	r3, r3, #2
 801a728:	b29a      	uxth	r2, r3
 801a72a:	687b      	ldr	r3, [r7, #4]
 801a72c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801a72e:	6878      	ldr	r0, [r7, #4]
 801a730:	f7fe fdbe 	bl	80192b0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801a734:	4b18      	ldr	r3, [pc, #96]	; (801a798 <tcp_process+0x5d4>)
 801a736:	681b      	ldr	r3, [r3, #0]
 801a738:	687a      	ldr	r2, [r7, #4]
 801a73a:	429a      	cmp	r2, r3
 801a73c:	d105      	bne.n	801a74a <tcp_process+0x586>
 801a73e:	4b16      	ldr	r3, [pc, #88]	; (801a798 <tcp_process+0x5d4>)
 801a740:	681b      	ldr	r3, [r3, #0]
 801a742:	68db      	ldr	r3, [r3, #12]
 801a744:	4a14      	ldr	r2, [pc, #80]	; (801a798 <tcp_process+0x5d4>)
 801a746:	6013      	str	r3, [r2, #0]
 801a748:	e02e      	b.n	801a7a8 <tcp_process+0x5e4>
 801a74a:	4b13      	ldr	r3, [pc, #76]	; (801a798 <tcp_process+0x5d4>)
 801a74c:	681b      	ldr	r3, [r3, #0]
 801a74e:	617b      	str	r3, [r7, #20]
 801a750:	e027      	b.n	801a7a2 <tcp_process+0x5de>
 801a752:	697b      	ldr	r3, [r7, #20]
 801a754:	68db      	ldr	r3, [r3, #12]
 801a756:	687a      	ldr	r2, [r7, #4]
 801a758:	429a      	cmp	r2, r3
 801a75a:	d11f      	bne.n	801a79c <tcp_process+0x5d8>
 801a75c:	687b      	ldr	r3, [r7, #4]
 801a75e:	68da      	ldr	r2, [r3, #12]
 801a760:	697b      	ldr	r3, [r7, #20]
 801a762:	60da      	str	r2, [r3, #12]
 801a764:	e020      	b.n	801a7a8 <tcp_process+0x5e4>
 801a766:	bf00      	nop
 801a768:	240048cc 	.word	0x240048cc
 801a76c:	240048c4 	.word	0x240048c4
 801a770:	240048ca 	.word	0x240048ca
 801a774:	240048c0 	.word	0x240048c0
 801a778:	240048b0 	.word	0x240048b0
 801a77c:	240053d8 	.word	0x240053d8
 801a780:	240053dc 	.word	0x240053dc
 801a784:	080278e8 	.word	0x080278e8
 801a788:	08027bb4 	.word	0x08027bb4
 801a78c:	08027960 	.word	0x08027960
 801a790:	240048c8 	.word	0x240048c8
 801a794:	240048cd 	.word	0x240048cd
 801a798:	240082b8 	.word	0x240082b8
 801a79c:	697b      	ldr	r3, [r7, #20]
 801a79e:	68db      	ldr	r3, [r3, #12]
 801a7a0:	617b      	str	r3, [r7, #20]
 801a7a2:	697b      	ldr	r3, [r7, #20]
 801a7a4:	2b00      	cmp	r3, #0
 801a7a6:	d1d4      	bne.n	801a752 <tcp_process+0x58e>
 801a7a8:	687b      	ldr	r3, [r7, #4]
 801a7aa:	2200      	movs	r2, #0
 801a7ac:	60da      	str	r2, [r3, #12]
 801a7ae:	4b77      	ldr	r3, [pc, #476]	; (801a98c <tcp_process+0x7c8>)
 801a7b0:	2201      	movs	r2, #1
 801a7b2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801a7b4:	687b      	ldr	r3, [r7, #4]
 801a7b6:	220a      	movs	r2, #10
 801a7b8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801a7ba:	4b75      	ldr	r3, [pc, #468]	; (801a990 <tcp_process+0x7cc>)
 801a7bc:	681a      	ldr	r2, [r3, #0]
 801a7be:	687b      	ldr	r3, [r7, #4]
 801a7c0:	60da      	str	r2, [r3, #12]
 801a7c2:	4a73      	ldr	r2, [pc, #460]	; (801a990 <tcp_process+0x7cc>)
 801a7c4:	687b      	ldr	r3, [r7, #4]
 801a7c6:	6013      	str	r3, [r2, #0]
 801a7c8:	f003 f950 	bl	801da6c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801a7cc:	e0d2      	b.n	801a974 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801a7ce:	687b      	ldr	r3, [r7, #4]
 801a7d0:	8b5b      	ldrh	r3, [r3, #26]
 801a7d2:	f043 0302 	orr.w	r3, r3, #2
 801a7d6:	b29a      	uxth	r2, r3
 801a7d8:	687b      	ldr	r3, [r7, #4]
 801a7da:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801a7dc:	687b      	ldr	r3, [r7, #4]
 801a7de:	2208      	movs	r2, #8
 801a7e0:	751a      	strb	r2, [r3, #20]
      break;
 801a7e2:	e0c7      	b.n	801a974 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801a7e4:	4b6b      	ldr	r3, [pc, #428]	; (801a994 <tcp_process+0x7d0>)
 801a7e6:	781b      	ldrb	r3, [r3, #0]
 801a7e8:	f003 0310 	and.w	r3, r3, #16
 801a7ec:	2b00      	cmp	r3, #0
 801a7ee:	f000 80c1 	beq.w	801a974 <tcp_process+0x7b0>
 801a7f2:	687b      	ldr	r3, [r7, #4]
 801a7f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801a7f6:	4b68      	ldr	r3, [pc, #416]	; (801a998 <tcp_process+0x7d4>)
 801a7f8:	681b      	ldr	r3, [r3, #0]
 801a7fa:	429a      	cmp	r2, r3
 801a7fc:	f040 80ba 	bne.w	801a974 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801a800:	687b      	ldr	r3, [r7, #4]
 801a802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801a804:	2b00      	cmp	r3, #0
 801a806:	f040 80b5 	bne.w	801a974 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801a80a:	687b      	ldr	r3, [r7, #4]
 801a80c:	2206      	movs	r2, #6
 801a80e:	751a      	strb	r2, [r3, #20]
      break;
 801a810:	e0b0      	b.n	801a974 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801a812:	6878      	ldr	r0, [r7, #4]
 801a814:	f000 f9ca 	bl	801abac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801a818:	4b60      	ldr	r3, [pc, #384]	; (801a99c <tcp_process+0x7d8>)
 801a81a:	781b      	ldrb	r3, [r3, #0]
 801a81c:	f003 0320 	and.w	r3, r3, #32
 801a820:	2b00      	cmp	r3, #0
 801a822:	f000 80a9 	beq.w	801a978 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801a826:	687b      	ldr	r3, [r7, #4]
 801a828:	8b5b      	ldrh	r3, [r3, #26]
 801a82a:	f043 0302 	orr.w	r3, r3, #2
 801a82e:	b29a      	uxth	r2, r3
 801a830:	687b      	ldr	r3, [r7, #4]
 801a832:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801a834:	6878      	ldr	r0, [r7, #4]
 801a836:	f7fe fd3b 	bl	80192b0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801a83a:	4b59      	ldr	r3, [pc, #356]	; (801a9a0 <tcp_process+0x7dc>)
 801a83c:	681b      	ldr	r3, [r3, #0]
 801a83e:	687a      	ldr	r2, [r7, #4]
 801a840:	429a      	cmp	r2, r3
 801a842:	d105      	bne.n	801a850 <tcp_process+0x68c>
 801a844:	4b56      	ldr	r3, [pc, #344]	; (801a9a0 <tcp_process+0x7dc>)
 801a846:	681b      	ldr	r3, [r3, #0]
 801a848:	68db      	ldr	r3, [r3, #12]
 801a84a:	4a55      	ldr	r2, [pc, #340]	; (801a9a0 <tcp_process+0x7dc>)
 801a84c:	6013      	str	r3, [r2, #0]
 801a84e:	e013      	b.n	801a878 <tcp_process+0x6b4>
 801a850:	4b53      	ldr	r3, [pc, #332]	; (801a9a0 <tcp_process+0x7dc>)
 801a852:	681b      	ldr	r3, [r3, #0]
 801a854:	613b      	str	r3, [r7, #16]
 801a856:	e00c      	b.n	801a872 <tcp_process+0x6ae>
 801a858:	693b      	ldr	r3, [r7, #16]
 801a85a:	68db      	ldr	r3, [r3, #12]
 801a85c:	687a      	ldr	r2, [r7, #4]
 801a85e:	429a      	cmp	r2, r3
 801a860:	d104      	bne.n	801a86c <tcp_process+0x6a8>
 801a862:	687b      	ldr	r3, [r7, #4]
 801a864:	68da      	ldr	r2, [r3, #12]
 801a866:	693b      	ldr	r3, [r7, #16]
 801a868:	60da      	str	r2, [r3, #12]
 801a86a:	e005      	b.n	801a878 <tcp_process+0x6b4>
 801a86c:	693b      	ldr	r3, [r7, #16]
 801a86e:	68db      	ldr	r3, [r3, #12]
 801a870:	613b      	str	r3, [r7, #16]
 801a872:	693b      	ldr	r3, [r7, #16]
 801a874:	2b00      	cmp	r3, #0
 801a876:	d1ef      	bne.n	801a858 <tcp_process+0x694>
 801a878:	687b      	ldr	r3, [r7, #4]
 801a87a:	2200      	movs	r2, #0
 801a87c:	60da      	str	r2, [r3, #12]
 801a87e:	4b43      	ldr	r3, [pc, #268]	; (801a98c <tcp_process+0x7c8>)
 801a880:	2201      	movs	r2, #1
 801a882:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801a884:	687b      	ldr	r3, [r7, #4]
 801a886:	220a      	movs	r2, #10
 801a888:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801a88a:	4b41      	ldr	r3, [pc, #260]	; (801a990 <tcp_process+0x7cc>)
 801a88c:	681a      	ldr	r2, [r3, #0]
 801a88e:	687b      	ldr	r3, [r7, #4]
 801a890:	60da      	str	r2, [r3, #12]
 801a892:	4a3f      	ldr	r2, [pc, #252]	; (801a990 <tcp_process+0x7cc>)
 801a894:	687b      	ldr	r3, [r7, #4]
 801a896:	6013      	str	r3, [r2, #0]
 801a898:	f003 f8e8 	bl	801da6c <tcp_timer_needed>
      }
      break;
 801a89c:	e06c      	b.n	801a978 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801a89e:	6878      	ldr	r0, [r7, #4]
 801a8a0:	f000 f984 	bl	801abac <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801a8a4:	4b3b      	ldr	r3, [pc, #236]	; (801a994 <tcp_process+0x7d0>)
 801a8a6:	781b      	ldrb	r3, [r3, #0]
 801a8a8:	f003 0310 	and.w	r3, r3, #16
 801a8ac:	2b00      	cmp	r3, #0
 801a8ae:	d065      	beq.n	801a97c <tcp_process+0x7b8>
 801a8b0:	687b      	ldr	r3, [r7, #4]
 801a8b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801a8b4:	4b38      	ldr	r3, [pc, #224]	; (801a998 <tcp_process+0x7d4>)
 801a8b6:	681b      	ldr	r3, [r3, #0]
 801a8b8:	429a      	cmp	r2, r3
 801a8ba:	d15f      	bne.n	801a97c <tcp_process+0x7b8>
 801a8bc:	687b      	ldr	r3, [r7, #4]
 801a8be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a8c0:	2b00      	cmp	r3, #0
 801a8c2:	d15b      	bne.n	801a97c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801a8c4:	6878      	ldr	r0, [r7, #4]
 801a8c6:	f7fe fcf3 	bl	80192b0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801a8ca:	4b35      	ldr	r3, [pc, #212]	; (801a9a0 <tcp_process+0x7dc>)
 801a8cc:	681b      	ldr	r3, [r3, #0]
 801a8ce:	687a      	ldr	r2, [r7, #4]
 801a8d0:	429a      	cmp	r2, r3
 801a8d2:	d105      	bne.n	801a8e0 <tcp_process+0x71c>
 801a8d4:	4b32      	ldr	r3, [pc, #200]	; (801a9a0 <tcp_process+0x7dc>)
 801a8d6:	681b      	ldr	r3, [r3, #0]
 801a8d8:	68db      	ldr	r3, [r3, #12]
 801a8da:	4a31      	ldr	r2, [pc, #196]	; (801a9a0 <tcp_process+0x7dc>)
 801a8dc:	6013      	str	r3, [r2, #0]
 801a8de:	e013      	b.n	801a908 <tcp_process+0x744>
 801a8e0:	4b2f      	ldr	r3, [pc, #188]	; (801a9a0 <tcp_process+0x7dc>)
 801a8e2:	681b      	ldr	r3, [r3, #0]
 801a8e4:	60fb      	str	r3, [r7, #12]
 801a8e6:	e00c      	b.n	801a902 <tcp_process+0x73e>
 801a8e8:	68fb      	ldr	r3, [r7, #12]
 801a8ea:	68db      	ldr	r3, [r3, #12]
 801a8ec:	687a      	ldr	r2, [r7, #4]
 801a8ee:	429a      	cmp	r2, r3
 801a8f0:	d104      	bne.n	801a8fc <tcp_process+0x738>
 801a8f2:	687b      	ldr	r3, [r7, #4]
 801a8f4:	68da      	ldr	r2, [r3, #12]
 801a8f6:	68fb      	ldr	r3, [r7, #12]
 801a8f8:	60da      	str	r2, [r3, #12]
 801a8fa:	e005      	b.n	801a908 <tcp_process+0x744>
 801a8fc:	68fb      	ldr	r3, [r7, #12]
 801a8fe:	68db      	ldr	r3, [r3, #12]
 801a900:	60fb      	str	r3, [r7, #12]
 801a902:	68fb      	ldr	r3, [r7, #12]
 801a904:	2b00      	cmp	r3, #0
 801a906:	d1ef      	bne.n	801a8e8 <tcp_process+0x724>
 801a908:	687b      	ldr	r3, [r7, #4]
 801a90a:	2200      	movs	r2, #0
 801a90c:	60da      	str	r2, [r3, #12]
 801a90e:	4b1f      	ldr	r3, [pc, #124]	; (801a98c <tcp_process+0x7c8>)
 801a910:	2201      	movs	r2, #1
 801a912:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801a914:	687b      	ldr	r3, [r7, #4]
 801a916:	220a      	movs	r2, #10
 801a918:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801a91a:	4b1d      	ldr	r3, [pc, #116]	; (801a990 <tcp_process+0x7cc>)
 801a91c:	681a      	ldr	r2, [r3, #0]
 801a91e:	687b      	ldr	r3, [r7, #4]
 801a920:	60da      	str	r2, [r3, #12]
 801a922:	4a1b      	ldr	r2, [pc, #108]	; (801a990 <tcp_process+0x7cc>)
 801a924:	687b      	ldr	r3, [r7, #4]
 801a926:	6013      	str	r3, [r2, #0]
 801a928:	f003 f8a0 	bl	801da6c <tcp_timer_needed>
      }
      break;
 801a92c:	e026      	b.n	801a97c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801a92e:	6878      	ldr	r0, [r7, #4]
 801a930:	f000 f93c 	bl	801abac <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801a934:	4b17      	ldr	r3, [pc, #92]	; (801a994 <tcp_process+0x7d0>)
 801a936:	781b      	ldrb	r3, [r3, #0]
 801a938:	f003 0310 	and.w	r3, r3, #16
 801a93c:	2b00      	cmp	r3, #0
 801a93e:	d01f      	beq.n	801a980 <tcp_process+0x7bc>
 801a940:	687b      	ldr	r3, [r7, #4]
 801a942:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801a944:	4b14      	ldr	r3, [pc, #80]	; (801a998 <tcp_process+0x7d4>)
 801a946:	681b      	ldr	r3, [r3, #0]
 801a948:	429a      	cmp	r2, r3
 801a94a:	d119      	bne.n	801a980 <tcp_process+0x7bc>
 801a94c:	687b      	ldr	r3, [r7, #4]
 801a94e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a950:	2b00      	cmp	r3, #0
 801a952:	d115      	bne.n	801a980 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801a954:	4b11      	ldr	r3, [pc, #68]	; (801a99c <tcp_process+0x7d8>)
 801a956:	781b      	ldrb	r3, [r3, #0]
 801a958:	f043 0310 	orr.w	r3, r3, #16
 801a95c:	b2da      	uxtb	r2, r3
 801a95e:	4b0f      	ldr	r3, [pc, #60]	; (801a99c <tcp_process+0x7d8>)
 801a960:	701a      	strb	r2, [r3, #0]
      }
      break;
 801a962:	e00d      	b.n	801a980 <tcp_process+0x7bc>
    default:
      break;
 801a964:	bf00      	nop
 801a966:	e00c      	b.n	801a982 <tcp_process+0x7be>
      break;
 801a968:	bf00      	nop
 801a96a:	e00a      	b.n	801a982 <tcp_process+0x7be>
      break;
 801a96c:	bf00      	nop
 801a96e:	e008      	b.n	801a982 <tcp_process+0x7be>
      break;
 801a970:	bf00      	nop
 801a972:	e006      	b.n	801a982 <tcp_process+0x7be>
      break;
 801a974:	bf00      	nop
 801a976:	e004      	b.n	801a982 <tcp_process+0x7be>
      break;
 801a978:	bf00      	nop
 801a97a:	e002      	b.n	801a982 <tcp_process+0x7be>
      break;
 801a97c:	bf00      	nop
 801a97e:	e000      	b.n	801a982 <tcp_process+0x7be>
      break;
 801a980:	bf00      	nop
  }
  return ERR_OK;
 801a982:	2300      	movs	r3, #0
}
 801a984:	4618      	mov	r0, r3
 801a986:	3724      	adds	r7, #36	; 0x24
 801a988:	46bd      	mov	sp, r7
 801a98a:	bd90      	pop	{r4, r7, pc}
 801a98c:	240082b4 	.word	0x240082b4
 801a990:	240082c8 	.word	0x240082c8
 801a994:	240048cc 	.word	0x240048cc
 801a998:	240048c4 	.word	0x240048c4
 801a99c:	240048cd 	.word	0x240048cd
 801a9a0:	240082b8 	.word	0x240082b8

0801a9a4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801a9a4:	b590      	push	{r4, r7, lr}
 801a9a6:	b085      	sub	sp, #20
 801a9a8:	af00      	add	r7, sp, #0
 801a9aa:	6078      	str	r0, [r7, #4]
 801a9ac:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	2b00      	cmp	r3, #0
 801a9b2:	d106      	bne.n	801a9c2 <tcp_oos_insert_segment+0x1e>
 801a9b4:	4b3b      	ldr	r3, [pc, #236]	; (801aaa4 <tcp_oos_insert_segment+0x100>)
 801a9b6:	f240 421f 	movw	r2, #1055	; 0x41f
 801a9ba:	493b      	ldr	r1, [pc, #236]	; (801aaa8 <tcp_oos_insert_segment+0x104>)
 801a9bc:	483b      	ldr	r0, [pc, #236]	; (801aaac <tcp_oos_insert_segment+0x108>)
 801a9be:	f006 fa55 	bl	8020e6c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801a9c2:	687b      	ldr	r3, [r7, #4]
 801a9c4:	68db      	ldr	r3, [r3, #12]
 801a9c6:	899b      	ldrh	r3, [r3, #12]
 801a9c8:	b29b      	uxth	r3, r3
 801a9ca:	4618      	mov	r0, r3
 801a9cc:	f7f8 fcbc 	bl	8013348 <lwip_htons>
 801a9d0:	4603      	mov	r3, r0
 801a9d2:	b2db      	uxtb	r3, r3
 801a9d4:	f003 0301 	and.w	r3, r3, #1
 801a9d8:	2b00      	cmp	r3, #0
 801a9da:	d028      	beq.n	801aa2e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801a9dc:	6838      	ldr	r0, [r7, #0]
 801a9de:	f7fe f997 	bl	8018d10 <tcp_segs_free>
    next = NULL;
 801a9e2:	2300      	movs	r3, #0
 801a9e4:	603b      	str	r3, [r7, #0]
 801a9e6:	e056      	b.n	801aa96 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801a9e8:	683b      	ldr	r3, [r7, #0]
 801a9ea:	68db      	ldr	r3, [r3, #12]
 801a9ec:	899b      	ldrh	r3, [r3, #12]
 801a9ee:	b29b      	uxth	r3, r3
 801a9f0:	4618      	mov	r0, r3
 801a9f2:	f7f8 fca9 	bl	8013348 <lwip_htons>
 801a9f6:	4603      	mov	r3, r0
 801a9f8:	b2db      	uxtb	r3, r3
 801a9fa:	f003 0301 	and.w	r3, r3, #1
 801a9fe:	2b00      	cmp	r3, #0
 801aa00:	d00d      	beq.n	801aa1e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801aa02:	687b      	ldr	r3, [r7, #4]
 801aa04:	68db      	ldr	r3, [r3, #12]
 801aa06:	899b      	ldrh	r3, [r3, #12]
 801aa08:	b29c      	uxth	r4, r3
 801aa0a:	2001      	movs	r0, #1
 801aa0c:	f7f8 fc9c 	bl	8013348 <lwip_htons>
 801aa10:	4603      	mov	r3, r0
 801aa12:	461a      	mov	r2, r3
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	68db      	ldr	r3, [r3, #12]
 801aa18:	4322      	orrs	r2, r4
 801aa1a:	b292      	uxth	r2, r2
 801aa1c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801aa1e:	683b      	ldr	r3, [r7, #0]
 801aa20:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801aa22:	683b      	ldr	r3, [r7, #0]
 801aa24:	681b      	ldr	r3, [r3, #0]
 801aa26:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801aa28:	68f8      	ldr	r0, [r7, #12]
 801aa2a:	f7fe f986 	bl	8018d3a <tcp_seg_free>
    while (next &&
 801aa2e:	683b      	ldr	r3, [r7, #0]
 801aa30:	2b00      	cmp	r3, #0
 801aa32:	d00e      	beq.n	801aa52 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801aa34:	687b      	ldr	r3, [r7, #4]
 801aa36:	891b      	ldrh	r3, [r3, #8]
 801aa38:	461a      	mov	r2, r3
 801aa3a:	4b1d      	ldr	r3, [pc, #116]	; (801aab0 <tcp_oos_insert_segment+0x10c>)
 801aa3c:	681b      	ldr	r3, [r3, #0]
 801aa3e:	441a      	add	r2, r3
 801aa40:	683b      	ldr	r3, [r7, #0]
 801aa42:	68db      	ldr	r3, [r3, #12]
 801aa44:	685b      	ldr	r3, [r3, #4]
 801aa46:	6839      	ldr	r1, [r7, #0]
 801aa48:	8909      	ldrh	r1, [r1, #8]
 801aa4a:	440b      	add	r3, r1
 801aa4c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801aa4e:	2b00      	cmp	r3, #0
 801aa50:	daca      	bge.n	801a9e8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801aa52:	683b      	ldr	r3, [r7, #0]
 801aa54:	2b00      	cmp	r3, #0
 801aa56:	d01e      	beq.n	801aa96 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801aa58:	687b      	ldr	r3, [r7, #4]
 801aa5a:	891b      	ldrh	r3, [r3, #8]
 801aa5c:	461a      	mov	r2, r3
 801aa5e:	4b14      	ldr	r3, [pc, #80]	; (801aab0 <tcp_oos_insert_segment+0x10c>)
 801aa60:	681b      	ldr	r3, [r3, #0]
 801aa62:	441a      	add	r2, r3
 801aa64:	683b      	ldr	r3, [r7, #0]
 801aa66:	68db      	ldr	r3, [r3, #12]
 801aa68:	685b      	ldr	r3, [r3, #4]
 801aa6a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801aa6c:	2b00      	cmp	r3, #0
 801aa6e:	dd12      	ble.n	801aa96 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801aa70:	683b      	ldr	r3, [r7, #0]
 801aa72:	68db      	ldr	r3, [r3, #12]
 801aa74:	685b      	ldr	r3, [r3, #4]
 801aa76:	b29a      	uxth	r2, r3
 801aa78:	4b0d      	ldr	r3, [pc, #52]	; (801aab0 <tcp_oos_insert_segment+0x10c>)
 801aa7a:	681b      	ldr	r3, [r3, #0]
 801aa7c:	b29b      	uxth	r3, r3
 801aa7e:	1ad3      	subs	r3, r2, r3
 801aa80:	b29a      	uxth	r2, r3
 801aa82:	687b      	ldr	r3, [r7, #4]
 801aa84:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801aa86:	687b      	ldr	r3, [r7, #4]
 801aa88:	685a      	ldr	r2, [r3, #4]
 801aa8a:	687b      	ldr	r3, [r7, #4]
 801aa8c:	891b      	ldrh	r3, [r3, #8]
 801aa8e:	4619      	mov	r1, r3
 801aa90:	4610      	mov	r0, r2
 801aa92:	f7fc f9cf 	bl	8016e34 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801aa96:	687b      	ldr	r3, [r7, #4]
 801aa98:	683a      	ldr	r2, [r7, #0]
 801aa9a:	601a      	str	r2, [r3, #0]
}
 801aa9c:	bf00      	nop
 801aa9e:	3714      	adds	r7, #20
 801aaa0:	46bd      	mov	sp, r7
 801aaa2:	bd90      	pop	{r4, r7, pc}
 801aaa4:	080278e8 	.word	0x080278e8
 801aaa8:	08027bd4 	.word	0x08027bd4
 801aaac:	08027960 	.word	0x08027960
 801aab0:	240048c0 	.word	0x240048c0

0801aab4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801aab4:	b5b0      	push	{r4, r5, r7, lr}
 801aab6:	b086      	sub	sp, #24
 801aab8:	af00      	add	r7, sp, #0
 801aaba:	60f8      	str	r0, [r7, #12]
 801aabc:	60b9      	str	r1, [r7, #8]
 801aabe:	607a      	str	r2, [r7, #4]
 801aac0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801aac2:	e03e      	b.n	801ab42 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801aac4:	68bb      	ldr	r3, [r7, #8]
 801aac6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801aac8:	68bb      	ldr	r3, [r7, #8]
 801aaca:	681b      	ldr	r3, [r3, #0]
 801aacc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801aace:	697b      	ldr	r3, [r7, #20]
 801aad0:	685b      	ldr	r3, [r3, #4]
 801aad2:	4618      	mov	r0, r3
 801aad4:	f7fc fbbc 	bl	8017250 <pbuf_clen>
 801aad8:	4603      	mov	r3, r0
 801aada:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801aadc:	68fb      	ldr	r3, [r7, #12]
 801aade:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801aae2:	8a7a      	ldrh	r2, [r7, #18]
 801aae4:	429a      	cmp	r2, r3
 801aae6:	d906      	bls.n	801aaf6 <tcp_free_acked_segments+0x42>
 801aae8:	4b2a      	ldr	r3, [pc, #168]	; (801ab94 <tcp_free_acked_segments+0xe0>)
 801aaea:	f240 4257 	movw	r2, #1111	; 0x457
 801aaee:	492a      	ldr	r1, [pc, #168]	; (801ab98 <tcp_free_acked_segments+0xe4>)
 801aaf0:	482a      	ldr	r0, [pc, #168]	; (801ab9c <tcp_free_acked_segments+0xe8>)
 801aaf2:	f006 f9bb 	bl	8020e6c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801aaf6:	68fb      	ldr	r3, [r7, #12]
 801aaf8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801aafc:	8a7b      	ldrh	r3, [r7, #18]
 801aafe:	1ad3      	subs	r3, r2, r3
 801ab00:	b29a      	uxth	r2, r3
 801ab02:	68fb      	ldr	r3, [r7, #12]
 801ab04:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801ab08:	697b      	ldr	r3, [r7, #20]
 801ab0a:	891a      	ldrh	r2, [r3, #8]
 801ab0c:	4b24      	ldr	r3, [pc, #144]	; (801aba0 <tcp_free_acked_segments+0xec>)
 801ab0e:	881b      	ldrh	r3, [r3, #0]
 801ab10:	4413      	add	r3, r2
 801ab12:	b29a      	uxth	r2, r3
 801ab14:	4b22      	ldr	r3, [pc, #136]	; (801aba0 <tcp_free_acked_segments+0xec>)
 801ab16:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801ab18:	6978      	ldr	r0, [r7, #20]
 801ab1a:	f7fe f90e 	bl	8018d3a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801ab1e:	68fb      	ldr	r3, [r7, #12]
 801ab20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ab24:	2b00      	cmp	r3, #0
 801ab26:	d00c      	beq.n	801ab42 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801ab28:	68bb      	ldr	r3, [r7, #8]
 801ab2a:	2b00      	cmp	r3, #0
 801ab2c:	d109      	bne.n	801ab42 <tcp_free_acked_segments+0x8e>
 801ab2e:	683b      	ldr	r3, [r7, #0]
 801ab30:	2b00      	cmp	r3, #0
 801ab32:	d106      	bne.n	801ab42 <tcp_free_acked_segments+0x8e>
 801ab34:	4b17      	ldr	r3, [pc, #92]	; (801ab94 <tcp_free_acked_segments+0xe0>)
 801ab36:	f240 4261 	movw	r2, #1121	; 0x461
 801ab3a:	491a      	ldr	r1, [pc, #104]	; (801aba4 <tcp_free_acked_segments+0xf0>)
 801ab3c:	4817      	ldr	r0, [pc, #92]	; (801ab9c <tcp_free_acked_segments+0xe8>)
 801ab3e:	f006 f995 	bl	8020e6c <iprintf>
  while (seg_list != NULL &&
 801ab42:	68bb      	ldr	r3, [r7, #8]
 801ab44:	2b00      	cmp	r3, #0
 801ab46:	d020      	beq.n	801ab8a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801ab48:	68bb      	ldr	r3, [r7, #8]
 801ab4a:	68db      	ldr	r3, [r3, #12]
 801ab4c:	685b      	ldr	r3, [r3, #4]
 801ab4e:	4618      	mov	r0, r3
 801ab50:	f7f8 fc0f 	bl	8013372 <lwip_htonl>
 801ab54:	4604      	mov	r4, r0
 801ab56:	68bb      	ldr	r3, [r7, #8]
 801ab58:	891b      	ldrh	r3, [r3, #8]
 801ab5a:	461d      	mov	r5, r3
 801ab5c:	68bb      	ldr	r3, [r7, #8]
 801ab5e:	68db      	ldr	r3, [r3, #12]
 801ab60:	899b      	ldrh	r3, [r3, #12]
 801ab62:	b29b      	uxth	r3, r3
 801ab64:	4618      	mov	r0, r3
 801ab66:	f7f8 fbef 	bl	8013348 <lwip_htons>
 801ab6a:	4603      	mov	r3, r0
 801ab6c:	b2db      	uxtb	r3, r3
 801ab6e:	f003 0303 	and.w	r3, r3, #3
 801ab72:	2b00      	cmp	r3, #0
 801ab74:	d001      	beq.n	801ab7a <tcp_free_acked_segments+0xc6>
 801ab76:	2301      	movs	r3, #1
 801ab78:	e000      	b.n	801ab7c <tcp_free_acked_segments+0xc8>
 801ab7a:	2300      	movs	r3, #0
 801ab7c:	442b      	add	r3, r5
 801ab7e:	18e2      	adds	r2, r4, r3
 801ab80:	4b09      	ldr	r3, [pc, #36]	; (801aba8 <tcp_free_acked_segments+0xf4>)
 801ab82:	681b      	ldr	r3, [r3, #0]
 801ab84:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801ab86:	2b00      	cmp	r3, #0
 801ab88:	dd9c      	ble.n	801aac4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801ab8a:	68bb      	ldr	r3, [r7, #8]
}
 801ab8c:	4618      	mov	r0, r3
 801ab8e:	3718      	adds	r7, #24
 801ab90:	46bd      	mov	sp, r7
 801ab92:	bdb0      	pop	{r4, r5, r7, pc}
 801ab94:	080278e8 	.word	0x080278e8
 801ab98:	08027bfc 	.word	0x08027bfc
 801ab9c:	08027960 	.word	0x08027960
 801aba0:	240048c8 	.word	0x240048c8
 801aba4:	08027c24 	.word	0x08027c24
 801aba8:	240048c4 	.word	0x240048c4

0801abac <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801abac:	b5b0      	push	{r4, r5, r7, lr}
 801abae:	b094      	sub	sp, #80	; 0x50
 801abb0:	af00      	add	r7, sp, #0
 801abb2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801abb4:	2300      	movs	r3, #0
 801abb6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801abb8:	687b      	ldr	r3, [r7, #4]
 801abba:	2b00      	cmp	r3, #0
 801abbc:	d106      	bne.n	801abcc <tcp_receive+0x20>
 801abbe:	4ba6      	ldr	r3, [pc, #664]	; (801ae58 <tcp_receive+0x2ac>)
 801abc0:	f240 427b 	movw	r2, #1147	; 0x47b
 801abc4:	49a5      	ldr	r1, [pc, #660]	; (801ae5c <tcp_receive+0x2b0>)
 801abc6:	48a6      	ldr	r0, [pc, #664]	; (801ae60 <tcp_receive+0x2b4>)
 801abc8:	f006 f950 	bl	8020e6c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	7d1b      	ldrb	r3, [r3, #20]
 801abd0:	2b03      	cmp	r3, #3
 801abd2:	d806      	bhi.n	801abe2 <tcp_receive+0x36>
 801abd4:	4ba0      	ldr	r3, [pc, #640]	; (801ae58 <tcp_receive+0x2ac>)
 801abd6:	f240 427c 	movw	r2, #1148	; 0x47c
 801abda:	49a2      	ldr	r1, [pc, #648]	; (801ae64 <tcp_receive+0x2b8>)
 801abdc:	48a0      	ldr	r0, [pc, #640]	; (801ae60 <tcp_receive+0x2b4>)
 801abde:	f006 f945 	bl	8020e6c <iprintf>

  if (flags & TCP_ACK) {
 801abe2:	4ba1      	ldr	r3, [pc, #644]	; (801ae68 <tcp_receive+0x2bc>)
 801abe4:	781b      	ldrb	r3, [r3, #0]
 801abe6:	f003 0310 	and.w	r3, r3, #16
 801abea:	2b00      	cmp	r3, #0
 801abec:	f000 8263 	beq.w	801b0b6 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801abf0:	687b      	ldr	r3, [r7, #4]
 801abf2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801abf6:	461a      	mov	r2, r3
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801abfc:	4413      	add	r3, r2
 801abfe:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801ac04:	4b99      	ldr	r3, [pc, #612]	; (801ae6c <tcp_receive+0x2c0>)
 801ac06:	681b      	ldr	r3, [r3, #0]
 801ac08:	1ad3      	subs	r3, r2, r3
 801ac0a:	2b00      	cmp	r3, #0
 801ac0c:	db1b      	blt.n	801ac46 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801ac0e:	687b      	ldr	r3, [r7, #4]
 801ac10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801ac12:	4b96      	ldr	r3, [pc, #600]	; (801ae6c <tcp_receive+0x2c0>)
 801ac14:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801ac16:	429a      	cmp	r2, r3
 801ac18:	d106      	bne.n	801ac28 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801ac1a:	687b      	ldr	r3, [r7, #4]
 801ac1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801ac1e:	4b94      	ldr	r3, [pc, #592]	; (801ae70 <tcp_receive+0x2c4>)
 801ac20:	681b      	ldr	r3, [r3, #0]
 801ac22:	1ad3      	subs	r3, r2, r3
 801ac24:	2b00      	cmp	r3, #0
 801ac26:	db0e      	blt.n	801ac46 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801ac2c:	4b90      	ldr	r3, [pc, #576]	; (801ae70 <tcp_receive+0x2c4>)
 801ac2e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801ac30:	429a      	cmp	r2, r3
 801ac32:	d125      	bne.n	801ac80 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801ac34:	4b8f      	ldr	r3, [pc, #572]	; (801ae74 <tcp_receive+0x2c8>)
 801ac36:	681b      	ldr	r3, [r3, #0]
 801ac38:	89db      	ldrh	r3, [r3, #14]
 801ac3a:	b29a      	uxth	r2, r3
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801ac42:	429a      	cmp	r2, r3
 801ac44:	d91c      	bls.n	801ac80 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801ac46:	4b8b      	ldr	r3, [pc, #556]	; (801ae74 <tcp_receive+0x2c8>)
 801ac48:	681b      	ldr	r3, [r3, #0]
 801ac4a:	89db      	ldrh	r3, [r3, #14]
 801ac4c:	b29a      	uxth	r2, r3
 801ac4e:	687b      	ldr	r3, [r7, #4]
 801ac50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801ac54:	687b      	ldr	r3, [r7, #4]
 801ac56:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801ac5a:	687b      	ldr	r3, [r7, #4]
 801ac5c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801ac60:	429a      	cmp	r2, r3
 801ac62:	d205      	bcs.n	801ac70 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801ac64:	687b      	ldr	r3, [r7, #4]
 801ac66:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801ac6a:	687b      	ldr	r3, [r7, #4]
 801ac6c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801ac70:	4b7e      	ldr	r3, [pc, #504]	; (801ae6c <tcp_receive+0x2c0>)
 801ac72:	681a      	ldr	r2, [r3, #0]
 801ac74:	687b      	ldr	r3, [r7, #4]
 801ac76:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801ac78:	4b7d      	ldr	r3, [pc, #500]	; (801ae70 <tcp_receive+0x2c4>)
 801ac7a:	681a      	ldr	r2, [r3, #0]
 801ac7c:	687b      	ldr	r3, [r7, #4]
 801ac7e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801ac80:	4b7b      	ldr	r3, [pc, #492]	; (801ae70 <tcp_receive+0x2c4>)
 801ac82:	681a      	ldr	r2, [r3, #0]
 801ac84:	687b      	ldr	r3, [r7, #4]
 801ac86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ac88:	1ad3      	subs	r3, r2, r3
 801ac8a:	2b00      	cmp	r3, #0
 801ac8c:	dc58      	bgt.n	801ad40 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801ac8e:	4b7a      	ldr	r3, [pc, #488]	; (801ae78 <tcp_receive+0x2cc>)
 801ac90:	881b      	ldrh	r3, [r3, #0]
 801ac92:	2b00      	cmp	r3, #0
 801ac94:	d14b      	bne.n	801ad2e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801ac96:	687b      	ldr	r3, [r7, #4]
 801ac98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ac9a:	687a      	ldr	r2, [r7, #4]
 801ac9c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801aca0:	4413      	add	r3, r2
 801aca2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801aca4:	429a      	cmp	r2, r3
 801aca6:	d142      	bne.n	801ad2e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801aca8:	687b      	ldr	r3, [r7, #4]
 801acaa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801acae:	2b00      	cmp	r3, #0
 801acb0:	db3d      	blt.n	801ad2e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801acb2:	687b      	ldr	r3, [r7, #4]
 801acb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801acb6:	4b6e      	ldr	r3, [pc, #440]	; (801ae70 <tcp_receive+0x2c4>)
 801acb8:	681b      	ldr	r3, [r3, #0]
 801acba:	429a      	cmp	r2, r3
 801acbc:	d137      	bne.n	801ad2e <tcp_receive+0x182>
              found_dupack = 1;
 801acbe:	2301      	movs	r3, #1
 801acc0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801acc2:	687b      	ldr	r3, [r7, #4]
 801acc4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801acc8:	2bff      	cmp	r3, #255	; 0xff
 801acca:	d007      	beq.n	801acdc <tcp_receive+0x130>
                ++pcb->dupacks;
 801accc:	687b      	ldr	r3, [r7, #4]
 801acce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801acd2:	3301      	adds	r3, #1
 801acd4:	b2da      	uxtb	r2, r3
 801acd6:	687b      	ldr	r3, [r7, #4]
 801acd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801acdc:	687b      	ldr	r3, [r7, #4]
 801acde:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801ace2:	2b03      	cmp	r3, #3
 801ace4:	d91b      	bls.n	801ad1e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801ace6:	687b      	ldr	r3, [r7, #4]
 801ace8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801acec:	687b      	ldr	r3, [r7, #4]
 801acee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801acf0:	4413      	add	r3, r2
 801acf2:	b29a      	uxth	r2, r3
 801acf4:	687b      	ldr	r3, [r7, #4]
 801acf6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801acfa:	429a      	cmp	r2, r3
 801acfc:	d30a      	bcc.n	801ad14 <tcp_receive+0x168>
 801acfe:	687b      	ldr	r3, [r7, #4]
 801ad00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801ad04:	687b      	ldr	r3, [r7, #4]
 801ad06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ad08:	4413      	add	r3, r2
 801ad0a:	b29a      	uxth	r2, r3
 801ad0c:	687b      	ldr	r3, [r7, #4]
 801ad0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801ad12:	e004      	b.n	801ad1e <tcp_receive+0x172>
 801ad14:	687b      	ldr	r3, [r7, #4]
 801ad16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ad1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801ad1e:	687b      	ldr	r3, [r7, #4]
 801ad20:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801ad24:	2b02      	cmp	r3, #2
 801ad26:	d902      	bls.n	801ad2e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801ad28:	6878      	ldr	r0, [r7, #4]
 801ad2a:	f002 fb41 	bl	801d3b0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801ad2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ad30:	2b00      	cmp	r3, #0
 801ad32:	f040 8160 	bne.w	801aff6 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 801ad36:	687b      	ldr	r3, [r7, #4]
 801ad38:	2200      	movs	r2, #0
 801ad3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801ad3e:	e15a      	b.n	801aff6 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801ad40:	4b4b      	ldr	r3, [pc, #300]	; (801ae70 <tcp_receive+0x2c4>)
 801ad42:	681a      	ldr	r2, [r3, #0]
 801ad44:	687b      	ldr	r3, [r7, #4]
 801ad46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ad48:	1ad3      	subs	r3, r2, r3
 801ad4a:	3b01      	subs	r3, #1
 801ad4c:	2b00      	cmp	r3, #0
 801ad4e:	f2c0 814d 	blt.w	801afec <tcp_receive+0x440>
 801ad52:	4b47      	ldr	r3, [pc, #284]	; (801ae70 <tcp_receive+0x2c4>)
 801ad54:	681a      	ldr	r2, [r3, #0]
 801ad56:	687b      	ldr	r3, [r7, #4]
 801ad58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ad5a:	1ad3      	subs	r3, r2, r3
 801ad5c:	2b00      	cmp	r3, #0
 801ad5e:	f300 8145 	bgt.w	801afec <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801ad62:	687b      	ldr	r3, [r7, #4]
 801ad64:	8b5b      	ldrh	r3, [r3, #26]
 801ad66:	f003 0304 	and.w	r3, r3, #4
 801ad6a:	2b00      	cmp	r3, #0
 801ad6c:	d010      	beq.n	801ad90 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801ad6e:	687b      	ldr	r3, [r7, #4]
 801ad70:	8b5b      	ldrh	r3, [r3, #26]
 801ad72:	f023 0304 	bic.w	r3, r3, #4
 801ad76:	b29a      	uxth	r2, r3
 801ad78:	687b      	ldr	r3, [r7, #4]
 801ad7a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801ad7c:	687b      	ldr	r3, [r7, #4]
 801ad7e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801ad82:	687b      	ldr	r3, [r7, #4]
 801ad84:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801ad88:	687b      	ldr	r3, [r7, #4]
 801ad8a:	2200      	movs	r2, #0
 801ad8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801ad90:	687b      	ldr	r3, [r7, #4]
 801ad92:	2200      	movs	r2, #0
 801ad94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801ad98:	687b      	ldr	r3, [r7, #4]
 801ad9a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801ad9e:	10db      	asrs	r3, r3, #3
 801ada0:	b21b      	sxth	r3, r3
 801ada2:	b29a      	uxth	r2, r3
 801ada4:	687b      	ldr	r3, [r7, #4]
 801ada6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801adaa:	b29b      	uxth	r3, r3
 801adac:	4413      	add	r3, r2
 801adae:	b29b      	uxth	r3, r3
 801adb0:	b21a      	sxth	r2, r3
 801adb2:	687b      	ldr	r3, [r7, #4]
 801adb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801adb8:	4b2d      	ldr	r3, [pc, #180]	; (801ae70 <tcp_receive+0x2c4>)
 801adba:	681b      	ldr	r3, [r3, #0]
 801adbc:	b29a      	uxth	r2, r3
 801adbe:	687b      	ldr	r3, [r7, #4]
 801adc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801adc2:	b29b      	uxth	r3, r3
 801adc4:	1ad3      	subs	r3, r2, r3
 801adc6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801adc8:	687b      	ldr	r3, [r7, #4]
 801adca:	2200      	movs	r2, #0
 801adcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801add0:	4b27      	ldr	r3, [pc, #156]	; (801ae70 <tcp_receive+0x2c4>)
 801add2:	681a      	ldr	r2, [r3, #0]
 801add4:	687b      	ldr	r3, [r7, #4]
 801add6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801add8:	687b      	ldr	r3, [r7, #4]
 801adda:	7d1b      	ldrb	r3, [r3, #20]
 801addc:	2b03      	cmp	r3, #3
 801adde:	f240 8096 	bls.w	801af0e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801ade2:	687b      	ldr	r3, [r7, #4]
 801ade4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801ade8:	687b      	ldr	r3, [r7, #4]
 801adea:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801adee:	429a      	cmp	r2, r3
 801adf0:	d244      	bcs.n	801ae7c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801adf2:	687b      	ldr	r3, [r7, #4]
 801adf4:	8b5b      	ldrh	r3, [r3, #26]
 801adf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801adfa:	2b00      	cmp	r3, #0
 801adfc:	d001      	beq.n	801ae02 <tcp_receive+0x256>
 801adfe:	2301      	movs	r3, #1
 801ae00:	e000      	b.n	801ae04 <tcp_receive+0x258>
 801ae02:	2302      	movs	r3, #2
 801ae04:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801ae08:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801ae0c:	b29a      	uxth	r2, r3
 801ae0e:	687b      	ldr	r3, [r7, #4]
 801ae10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ae12:	fb12 f303 	smulbb	r3, r2, r3
 801ae16:	b29b      	uxth	r3, r3
 801ae18:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801ae1a:	4293      	cmp	r3, r2
 801ae1c:	bf28      	it	cs
 801ae1e:	4613      	movcs	r3, r2
 801ae20:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801ae22:	687b      	ldr	r3, [r7, #4]
 801ae24:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801ae28:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801ae2a:	4413      	add	r3, r2
 801ae2c:	b29a      	uxth	r2, r3
 801ae2e:	687b      	ldr	r3, [r7, #4]
 801ae30:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801ae34:	429a      	cmp	r2, r3
 801ae36:	d309      	bcc.n	801ae4c <tcp_receive+0x2a0>
 801ae38:	687b      	ldr	r3, [r7, #4]
 801ae3a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801ae3e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801ae40:	4413      	add	r3, r2
 801ae42:	b29a      	uxth	r2, r3
 801ae44:	687b      	ldr	r3, [r7, #4]
 801ae46:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801ae4a:	e060      	b.n	801af0e <tcp_receive+0x362>
 801ae4c:	687b      	ldr	r3, [r7, #4]
 801ae4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ae52:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801ae56:	e05a      	b.n	801af0e <tcp_receive+0x362>
 801ae58:	080278e8 	.word	0x080278e8
 801ae5c:	08027c44 	.word	0x08027c44
 801ae60:	08027960 	.word	0x08027960
 801ae64:	08027c60 	.word	0x08027c60
 801ae68:	240048cc 	.word	0x240048cc
 801ae6c:	240048c0 	.word	0x240048c0
 801ae70:	240048c4 	.word	0x240048c4
 801ae74:	240048b0 	.word	0x240048b0
 801ae78:	240048ca 	.word	0x240048ca
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801ae7c:	687b      	ldr	r3, [r7, #4]
 801ae7e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801ae82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801ae84:	4413      	add	r3, r2
 801ae86:	b29a      	uxth	r2, r3
 801ae88:	687b      	ldr	r3, [r7, #4]
 801ae8a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801ae8e:	429a      	cmp	r2, r3
 801ae90:	d309      	bcc.n	801aea6 <tcp_receive+0x2fa>
 801ae92:	687b      	ldr	r3, [r7, #4]
 801ae94:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801ae98:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801ae9a:	4413      	add	r3, r2
 801ae9c:	b29a      	uxth	r2, r3
 801ae9e:	687b      	ldr	r3, [r7, #4]
 801aea0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801aea4:	e004      	b.n	801aeb0 <tcp_receive+0x304>
 801aea6:	687b      	ldr	r3, [r7, #4]
 801aea8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801aeac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801aeb0:	687b      	ldr	r3, [r7, #4]
 801aeb2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801aeb6:	687b      	ldr	r3, [r7, #4]
 801aeb8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801aebc:	429a      	cmp	r2, r3
 801aebe:	d326      	bcc.n	801af0e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801aec0:	687b      	ldr	r3, [r7, #4]
 801aec2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801aec6:	687b      	ldr	r3, [r7, #4]
 801aec8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801aecc:	1ad3      	subs	r3, r2, r3
 801aece:	b29a      	uxth	r2, r3
 801aed0:	687b      	ldr	r3, [r7, #4]
 801aed2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801aed6:	687b      	ldr	r3, [r7, #4]
 801aed8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801aedc:	687b      	ldr	r3, [r7, #4]
 801aede:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801aee0:	4413      	add	r3, r2
 801aee2:	b29a      	uxth	r2, r3
 801aee4:	687b      	ldr	r3, [r7, #4]
 801aee6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801aeea:	429a      	cmp	r2, r3
 801aeec:	d30a      	bcc.n	801af04 <tcp_receive+0x358>
 801aeee:	687b      	ldr	r3, [r7, #4]
 801aef0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801aef4:	687b      	ldr	r3, [r7, #4]
 801aef6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801aef8:	4413      	add	r3, r2
 801aefa:	b29a      	uxth	r2, r3
 801aefc:	687b      	ldr	r3, [r7, #4]
 801aefe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801af02:	e004      	b.n	801af0e <tcp_receive+0x362>
 801af04:	687b      	ldr	r3, [r7, #4]
 801af06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801af0a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801af0e:	687b      	ldr	r3, [r7, #4]
 801af10:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801af12:	687b      	ldr	r3, [r7, #4]
 801af14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801af16:	4a98      	ldr	r2, [pc, #608]	; (801b178 <tcp_receive+0x5cc>)
 801af18:	6878      	ldr	r0, [r7, #4]
 801af1a:	f7ff fdcb 	bl	801aab4 <tcp_free_acked_segments>
 801af1e:	4602      	mov	r2, r0
 801af20:	687b      	ldr	r3, [r7, #4]
 801af22:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801af24:	687b      	ldr	r3, [r7, #4]
 801af26:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801af28:	687b      	ldr	r3, [r7, #4]
 801af2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801af2c:	4a93      	ldr	r2, [pc, #588]	; (801b17c <tcp_receive+0x5d0>)
 801af2e:	6878      	ldr	r0, [r7, #4]
 801af30:	f7ff fdc0 	bl	801aab4 <tcp_free_acked_segments>
 801af34:	4602      	mov	r2, r0
 801af36:	687b      	ldr	r3, [r7, #4]
 801af38:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801af3a:	687b      	ldr	r3, [r7, #4]
 801af3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801af3e:	2b00      	cmp	r3, #0
 801af40:	d104      	bne.n	801af4c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801af42:	687b      	ldr	r3, [r7, #4]
 801af44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801af48:	861a      	strh	r2, [r3, #48]	; 0x30
 801af4a:	e002      	b.n	801af52 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 801af4c:	687b      	ldr	r3, [r7, #4]
 801af4e:	2200      	movs	r2, #0
 801af50:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801af52:	687b      	ldr	r3, [r7, #4]
 801af54:	2200      	movs	r2, #0
 801af56:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801af58:	687b      	ldr	r3, [r7, #4]
 801af5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801af5c:	2b00      	cmp	r3, #0
 801af5e:	d103      	bne.n	801af68 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 801af60:	687b      	ldr	r3, [r7, #4]
 801af62:	2200      	movs	r2, #0
 801af64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801af68:	687b      	ldr	r3, [r7, #4]
 801af6a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801af6e:	4b84      	ldr	r3, [pc, #528]	; (801b180 <tcp_receive+0x5d4>)
 801af70:	881b      	ldrh	r3, [r3, #0]
 801af72:	4413      	add	r3, r2
 801af74:	b29a      	uxth	r2, r3
 801af76:	687b      	ldr	r3, [r7, #4]
 801af78:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801af7c:	687b      	ldr	r3, [r7, #4]
 801af7e:	8b5b      	ldrh	r3, [r3, #26]
 801af80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801af84:	2b00      	cmp	r3, #0
 801af86:	d035      	beq.n	801aff4 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801af88:	687b      	ldr	r3, [r7, #4]
 801af8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801af8c:	2b00      	cmp	r3, #0
 801af8e:	d118      	bne.n	801afc2 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 801af90:	687b      	ldr	r3, [r7, #4]
 801af92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801af94:	2b00      	cmp	r3, #0
 801af96:	d00c      	beq.n	801afb2 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801af98:	687b      	ldr	r3, [r7, #4]
 801af9a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801af9c:	687b      	ldr	r3, [r7, #4]
 801af9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801afa0:	68db      	ldr	r3, [r3, #12]
 801afa2:	685b      	ldr	r3, [r3, #4]
 801afa4:	4618      	mov	r0, r3
 801afa6:	f7f8 f9e4 	bl	8013372 <lwip_htonl>
 801afaa:	4603      	mov	r3, r0
 801afac:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801afae:	2b00      	cmp	r3, #0
 801afb0:	dc20      	bgt.n	801aff4 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801afb2:	687b      	ldr	r3, [r7, #4]
 801afb4:	8b5b      	ldrh	r3, [r3, #26]
 801afb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801afba:	b29a      	uxth	r2, r3
 801afbc:	687b      	ldr	r3, [r7, #4]
 801afbe:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801afc0:	e018      	b.n	801aff4 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801afc2:	687b      	ldr	r3, [r7, #4]
 801afc4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801afc6:	687b      	ldr	r3, [r7, #4]
 801afc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801afca:	68db      	ldr	r3, [r3, #12]
 801afcc:	685b      	ldr	r3, [r3, #4]
 801afce:	4618      	mov	r0, r3
 801afd0:	f7f8 f9cf 	bl	8013372 <lwip_htonl>
 801afd4:	4603      	mov	r3, r0
 801afd6:	1ae3      	subs	r3, r4, r3
 801afd8:	2b00      	cmp	r3, #0
 801afda:	dc0b      	bgt.n	801aff4 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 801afdc:	687b      	ldr	r3, [r7, #4]
 801afde:	8b5b      	ldrh	r3, [r3, #26]
 801afe0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801afe4:	b29a      	uxth	r2, r3
 801afe6:	687b      	ldr	r3, [r7, #4]
 801afe8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801afea:	e003      	b.n	801aff4 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801afec:	6878      	ldr	r0, [r7, #4]
 801afee:	f002 fbcd 	bl	801d78c <tcp_send_empty_ack>
 801aff2:	e000      	b.n	801aff6 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801aff4:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801aff6:	687b      	ldr	r3, [r7, #4]
 801aff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801affa:	2b00      	cmp	r3, #0
 801affc:	d05b      	beq.n	801b0b6 <tcp_receive+0x50a>
 801affe:	687b      	ldr	r3, [r7, #4]
 801b000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801b002:	4b60      	ldr	r3, [pc, #384]	; (801b184 <tcp_receive+0x5d8>)
 801b004:	681b      	ldr	r3, [r3, #0]
 801b006:	1ad3      	subs	r3, r2, r3
 801b008:	2b00      	cmp	r3, #0
 801b00a:	da54      	bge.n	801b0b6 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801b00c:	4b5e      	ldr	r3, [pc, #376]	; (801b188 <tcp_receive+0x5dc>)
 801b00e:	681b      	ldr	r3, [r3, #0]
 801b010:	b29a      	uxth	r2, r3
 801b012:	687b      	ldr	r3, [r7, #4]
 801b014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b016:	b29b      	uxth	r3, r3
 801b018:	1ad3      	subs	r3, r2, r3
 801b01a:	b29b      	uxth	r3, r3
 801b01c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801b020:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801b024:	687b      	ldr	r3, [r7, #4]
 801b026:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801b02a:	10db      	asrs	r3, r3, #3
 801b02c:	b21b      	sxth	r3, r3
 801b02e:	b29b      	uxth	r3, r3
 801b030:	1ad3      	subs	r3, r2, r3
 801b032:	b29b      	uxth	r3, r3
 801b034:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801b038:	687b      	ldr	r3, [r7, #4]
 801b03a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801b03e:	b29a      	uxth	r2, r3
 801b040:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801b044:	4413      	add	r3, r2
 801b046:	b29b      	uxth	r3, r3
 801b048:	b21a      	sxth	r2, r3
 801b04a:	687b      	ldr	r3, [r7, #4]
 801b04c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801b04e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801b052:	2b00      	cmp	r3, #0
 801b054:	da05      	bge.n	801b062 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 801b056:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801b05a:	425b      	negs	r3, r3
 801b05c:	b29b      	uxth	r3, r3
 801b05e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801b062:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801b066:	687b      	ldr	r3, [r7, #4]
 801b068:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801b06c:	109b      	asrs	r3, r3, #2
 801b06e:	b21b      	sxth	r3, r3
 801b070:	b29b      	uxth	r3, r3
 801b072:	1ad3      	subs	r3, r2, r3
 801b074:	b29b      	uxth	r3, r3
 801b076:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801b07a:	687b      	ldr	r3, [r7, #4]
 801b07c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801b080:	b29a      	uxth	r2, r3
 801b082:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801b086:	4413      	add	r3, r2
 801b088:	b29b      	uxth	r3, r3
 801b08a:	b21a      	sxth	r2, r3
 801b08c:	687b      	ldr	r3, [r7, #4]
 801b08e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801b090:	687b      	ldr	r3, [r7, #4]
 801b092:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801b096:	10db      	asrs	r3, r3, #3
 801b098:	b21b      	sxth	r3, r3
 801b09a:	b29a      	uxth	r2, r3
 801b09c:	687b      	ldr	r3, [r7, #4]
 801b09e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801b0a2:	b29b      	uxth	r3, r3
 801b0a4:	4413      	add	r3, r2
 801b0a6:	b29b      	uxth	r3, r3
 801b0a8:	b21a      	sxth	r2, r3
 801b0aa:	687b      	ldr	r3, [r7, #4]
 801b0ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801b0b0:	687b      	ldr	r3, [r7, #4]
 801b0b2:	2200      	movs	r2, #0
 801b0b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801b0b6:	4b35      	ldr	r3, [pc, #212]	; (801b18c <tcp_receive+0x5e0>)
 801b0b8:	881b      	ldrh	r3, [r3, #0]
 801b0ba:	2b00      	cmp	r3, #0
 801b0bc:	f000 84e1 	beq.w	801ba82 <tcp_receive+0xed6>
 801b0c0:	687b      	ldr	r3, [r7, #4]
 801b0c2:	7d1b      	ldrb	r3, [r3, #20]
 801b0c4:	2b06      	cmp	r3, #6
 801b0c6:	f200 84dc 	bhi.w	801ba82 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801b0ca:	687b      	ldr	r3, [r7, #4]
 801b0cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b0ce:	4b30      	ldr	r3, [pc, #192]	; (801b190 <tcp_receive+0x5e4>)
 801b0d0:	681b      	ldr	r3, [r3, #0]
 801b0d2:	1ad3      	subs	r3, r2, r3
 801b0d4:	3b01      	subs	r3, #1
 801b0d6:	2b00      	cmp	r3, #0
 801b0d8:	f2c0 808e 	blt.w	801b1f8 <tcp_receive+0x64c>
 801b0dc:	687b      	ldr	r3, [r7, #4]
 801b0de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b0e0:	4b2a      	ldr	r3, [pc, #168]	; (801b18c <tcp_receive+0x5e0>)
 801b0e2:	881b      	ldrh	r3, [r3, #0]
 801b0e4:	4619      	mov	r1, r3
 801b0e6:	4b2a      	ldr	r3, [pc, #168]	; (801b190 <tcp_receive+0x5e4>)
 801b0e8:	681b      	ldr	r3, [r3, #0]
 801b0ea:	440b      	add	r3, r1
 801b0ec:	1ad3      	subs	r3, r2, r3
 801b0ee:	3301      	adds	r3, #1
 801b0f0:	2b00      	cmp	r3, #0
 801b0f2:	f300 8081 	bgt.w	801b1f8 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801b0f6:	4b27      	ldr	r3, [pc, #156]	; (801b194 <tcp_receive+0x5e8>)
 801b0f8:	685b      	ldr	r3, [r3, #4]
 801b0fa:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801b0fc:	687b      	ldr	r3, [r7, #4]
 801b0fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b100:	4b23      	ldr	r3, [pc, #140]	; (801b190 <tcp_receive+0x5e4>)
 801b102:	681b      	ldr	r3, [r3, #0]
 801b104:	1ad3      	subs	r3, r2, r3
 801b106:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801b108:	4b22      	ldr	r3, [pc, #136]	; (801b194 <tcp_receive+0x5e8>)
 801b10a:	685b      	ldr	r3, [r3, #4]
 801b10c:	2b00      	cmp	r3, #0
 801b10e:	d106      	bne.n	801b11e <tcp_receive+0x572>
 801b110:	4b21      	ldr	r3, [pc, #132]	; (801b198 <tcp_receive+0x5ec>)
 801b112:	f240 5294 	movw	r2, #1428	; 0x594
 801b116:	4921      	ldr	r1, [pc, #132]	; (801b19c <tcp_receive+0x5f0>)
 801b118:	4821      	ldr	r0, [pc, #132]	; (801b1a0 <tcp_receive+0x5f4>)
 801b11a:	f005 fea7 	bl	8020e6c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801b11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b120:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b124:	4293      	cmp	r3, r2
 801b126:	d906      	bls.n	801b136 <tcp_receive+0x58a>
 801b128:	4b1b      	ldr	r3, [pc, #108]	; (801b198 <tcp_receive+0x5ec>)
 801b12a:	f240 5295 	movw	r2, #1429	; 0x595
 801b12e:	491d      	ldr	r1, [pc, #116]	; (801b1a4 <tcp_receive+0x5f8>)
 801b130:	481b      	ldr	r0, [pc, #108]	; (801b1a0 <tcp_receive+0x5f4>)
 801b132:	f005 fe9b 	bl	8020e6c <iprintf>
      off = (u16_t)off32;
 801b136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b138:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801b13c:	4b15      	ldr	r3, [pc, #84]	; (801b194 <tcp_receive+0x5e8>)
 801b13e:	685b      	ldr	r3, [r3, #4]
 801b140:	891b      	ldrh	r3, [r3, #8]
 801b142:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b146:	429a      	cmp	r2, r3
 801b148:	d906      	bls.n	801b158 <tcp_receive+0x5ac>
 801b14a:	4b13      	ldr	r3, [pc, #76]	; (801b198 <tcp_receive+0x5ec>)
 801b14c:	f240 5297 	movw	r2, #1431	; 0x597
 801b150:	4915      	ldr	r1, [pc, #84]	; (801b1a8 <tcp_receive+0x5fc>)
 801b152:	4813      	ldr	r0, [pc, #76]	; (801b1a0 <tcp_receive+0x5f4>)
 801b154:	f005 fe8a 	bl	8020e6c <iprintf>
      inseg.len -= off;
 801b158:	4b0e      	ldr	r3, [pc, #56]	; (801b194 <tcp_receive+0x5e8>)
 801b15a:	891a      	ldrh	r2, [r3, #8]
 801b15c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b160:	1ad3      	subs	r3, r2, r3
 801b162:	b29a      	uxth	r2, r3
 801b164:	4b0b      	ldr	r3, [pc, #44]	; (801b194 <tcp_receive+0x5e8>)
 801b166:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801b168:	4b0a      	ldr	r3, [pc, #40]	; (801b194 <tcp_receive+0x5e8>)
 801b16a:	685b      	ldr	r3, [r3, #4]
 801b16c:	891a      	ldrh	r2, [r3, #8]
 801b16e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b172:	1ad3      	subs	r3, r2, r3
 801b174:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801b176:	e029      	b.n	801b1cc <tcp_receive+0x620>
 801b178:	08027c7c 	.word	0x08027c7c
 801b17c:	08027c84 	.word	0x08027c84
 801b180:	240048c8 	.word	0x240048c8
 801b184:	240048c4 	.word	0x240048c4
 801b188:	240082bc 	.word	0x240082bc
 801b18c:	240048ca 	.word	0x240048ca
 801b190:	240048c0 	.word	0x240048c0
 801b194:	240048a0 	.word	0x240048a0
 801b198:	080278e8 	.word	0x080278e8
 801b19c:	08027c8c 	.word	0x08027c8c
 801b1a0:	08027960 	.word	0x08027960
 801b1a4:	08027c9c 	.word	0x08027c9c
 801b1a8:	08027cac 	.word	0x08027cac
        off -= p->len;
 801b1ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b1ae:	895b      	ldrh	r3, [r3, #10]
 801b1b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b1b4:	1ad3      	subs	r3, r2, r3
 801b1b6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801b1ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b1bc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801b1be:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801b1c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b1c2:	2200      	movs	r2, #0
 801b1c4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801b1c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b1c8:	681b      	ldr	r3, [r3, #0]
 801b1ca:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801b1cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b1ce:	895b      	ldrh	r3, [r3, #10]
 801b1d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b1d4:	429a      	cmp	r2, r3
 801b1d6:	d8e9      	bhi.n	801b1ac <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801b1d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b1dc:	4619      	mov	r1, r3
 801b1de:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801b1e0:	f7fb ff28 	bl	8017034 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801b1e4:	687b      	ldr	r3, [r7, #4]
 801b1e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b1e8:	4a91      	ldr	r2, [pc, #580]	; (801b430 <tcp_receive+0x884>)
 801b1ea:	6013      	str	r3, [r2, #0]
 801b1ec:	4b91      	ldr	r3, [pc, #580]	; (801b434 <tcp_receive+0x888>)
 801b1ee:	68db      	ldr	r3, [r3, #12]
 801b1f0:	4a8f      	ldr	r2, [pc, #572]	; (801b430 <tcp_receive+0x884>)
 801b1f2:	6812      	ldr	r2, [r2, #0]
 801b1f4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801b1f6:	e00d      	b.n	801b214 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801b1f8:	4b8d      	ldr	r3, [pc, #564]	; (801b430 <tcp_receive+0x884>)
 801b1fa:	681a      	ldr	r2, [r3, #0]
 801b1fc:	687b      	ldr	r3, [r7, #4]
 801b1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b200:	1ad3      	subs	r3, r2, r3
 801b202:	2b00      	cmp	r3, #0
 801b204:	da06      	bge.n	801b214 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801b206:	687b      	ldr	r3, [r7, #4]
 801b208:	8b5b      	ldrh	r3, [r3, #26]
 801b20a:	f043 0302 	orr.w	r3, r3, #2
 801b20e:	b29a      	uxth	r2, r3
 801b210:	687b      	ldr	r3, [r7, #4]
 801b212:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801b214:	4b86      	ldr	r3, [pc, #536]	; (801b430 <tcp_receive+0x884>)
 801b216:	681a      	ldr	r2, [r3, #0]
 801b218:	687b      	ldr	r3, [r7, #4]
 801b21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b21c:	1ad3      	subs	r3, r2, r3
 801b21e:	2b00      	cmp	r3, #0
 801b220:	f2c0 842a 	blt.w	801ba78 <tcp_receive+0xecc>
 801b224:	4b82      	ldr	r3, [pc, #520]	; (801b430 <tcp_receive+0x884>)
 801b226:	681a      	ldr	r2, [r3, #0]
 801b228:	687b      	ldr	r3, [r7, #4]
 801b22a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b22c:	6879      	ldr	r1, [r7, #4]
 801b22e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801b230:	440b      	add	r3, r1
 801b232:	1ad3      	subs	r3, r2, r3
 801b234:	3301      	adds	r3, #1
 801b236:	2b00      	cmp	r3, #0
 801b238:	f300 841e 	bgt.w	801ba78 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801b23c:	687b      	ldr	r3, [r7, #4]
 801b23e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b240:	4b7b      	ldr	r3, [pc, #492]	; (801b430 <tcp_receive+0x884>)
 801b242:	681b      	ldr	r3, [r3, #0]
 801b244:	429a      	cmp	r2, r3
 801b246:	f040 829a 	bne.w	801b77e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801b24a:	4b7a      	ldr	r3, [pc, #488]	; (801b434 <tcp_receive+0x888>)
 801b24c:	891c      	ldrh	r4, [r3, #8]
 801b24e:	4b79      	ldr	r3, [pc, #484]	; (801b434 <tcp_receive+0x888>)
 801b250:	68db      	ldr	r3, [r3, #12]
 801b252:	899b      	ldrh	r3, [r3, #12]
 801b254:	b29b      	uxth	r3, r3
 801b256:	4618      	mov	r0, r3
 801b258:	f7f8 f876 	bl	8013348 <lwip_htons>
 801b25c:	4603      	mov	r3, r0
 801b25e:	b2db      	uxtb	r3, r3
 801b260:	f003 0303 	and.w	r3, r3, #3
 801b264:	2b00      	cmp	r3, #0
 801b266:	d001      	beq.n	801b26c <tcp_receive+0x6c0>
 801b268:	2301      	movs	r3, #1
 801b26a:	e000      	b.n	801b26e <tcp_receive+0x6c2>
 801b26c:	2300      	movs	r3, #0
 801b26e:	4423      	add	r3, r4
 801b270:	b29a      	uxth	r2, r3
 801b272:	4b71      	ldr	r3, [pc, #452]	; (801b438 <tcp_receive+0x88c>)
 801b274:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801b276:	687b      	ldr	r3, [r7, #4]
 801b278:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801b27a:	4b6f      	ldr	r3, [pc, #444]	; (801b438 <tcp_receive+0x88c>)
 801b27c:	881b      	ldrh	r3, [r3, #0]
 801b27e:	429a      	cmp	r2, r3
 801b280:	d275      	bcs.n	801b36e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801b282:	4b6c      	ldr	r3, [pc, #432]	; (801b434 <tcp_receive+0x888>)
 801b284:	68db      	ldr	r3, [r3, #12]
 801b286:	899b      	ldrh	r3, [r3, #12]
 801b288:	b29b      	uxth	r3, r3
 801b28a:	4618      	mov	r0, r3
 801b28c:	f7f8 f85c 	bl	8013348 <lwip_htons>
 801b290:	4603      	mov	r3, r0
 801b292:	b2db      	uxtb	r3, r3
 801b294:	f003 0301 	and.w	r3, r3, #1
 801b298:	2b00      	cmp	r3, #0
 801b29a:	d01f      	beq.n	801b2dc <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801b29c:	4b65      	ldr	r3, [pc, #404]	; (801b434 <tcp_receive+0x888>)
 801b29e:	68db      	ldr	r3, [r3, #12]
 801b2a0:	899b      	ldrh	r3, [r3, #12]
 801b2a2:	b29b      	uxth	r3, r3
 801b2a4:	b21b      	sxth	r3, r3
 801b2a6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801b2aa:	b21c      	sxth	r4, r3
 801b2ac:	4b61      	ldr	r3, [pc, #388]	; (801b434 <tcp_receive+0x888>)
 801b2ae:	68db      	ldr	r3, [r3, #12]
 801b2b0:	899b      	ldrh	r3, [r3, #12]
 801b2b2:	b29b      	uxth	r3, r3
 801b2b4:	4618      	mov	r0, r3
 801b2b6:	f7f8 f847 	bl	8013348 <lwip_htons>
 801b2ba:	4603      	mov	r3, r0
 801b2bc:	b2db      	uxtb	r3, r3
 801b2be:	b29b      	uxth	r3, r3
 801b2c0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801b2c4:	b29b      	uxth	r3, r3
 801b2c6:	4618      	mov	r0, r3
 801b2c8:	f7f8 f83e 	bl	8013348 <lwip_htons>
 801b2cc:	4603      	mov	r3, r0
 801b2ce:	b21b      	sxth	r3, r3
 801b2d0:	4323      	orrs	r3, r4
 801b2d2:	b21a      	sxth	r2, r3
 801b2d4:	4b57      	ldr	r3, [pc, #348]	; (801b434 <tcp_receive+0x888>)
 801b2d6:	68db      	ldr	r3, [r3, #12]
 801b2d8:	b292      	uxth	r2, r2
 801b2da:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801b2dc:	687b      	ldr	r3, [r7, #4]
 801b2de:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801b2e0:	4b54      	ldr	r3, [pc, #336]	; (801b434 <tcp_receive+0x888>)
 801b2e2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801b2e4:	4b53      	ldr	r3, [pc, #332]	; (801b434 <tcp_receive+0x888>)
 801b2e6:	68db      	ldr	r3, [r3, #12]
 801b2e8:	899b      	ldrh	r3, [r3, #12]
 801b2ea:	b29b      	uxth	r3, r3
 801b2ec:	4618      	mov	r0, r3
 801b2ee:	f7f8 f82b 	bl	8013348 <lwip_htons>
 801b2f2:	4603      	mov	r3, r0
 801b2f4:	b2db      	uxtb	r3, r3
 801b2f6:	f003 0302 	and.w	r3, r3, #2
 801b2fa:	2b00      	cmp	r3, #0
 801b2fc:	d005      	beq.n	801b30a <tcp_receive+0x75e>
            inseg.len -= 1;
 801b2fe:	4b4d      	ldr	r3, [pc, #308]	; (801b434 <tcp_receive+0x888>)
 801b300:	891b      	ldrh	r3, [r3, #8]
 801b302:	3b01      	subs	r3, #1
 801b304:	b29a      	uxth	r2, r3
 801b306:	4b4b      	ldr	r3, [pc, #300]	; (801b434 <tcp_receive+0x888>)
 801b308:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801b30a:	4b4a      	ldr	r3, [pc, #296]	; (801b434 <tcp_receive+0x888>)
 801b30c:	685b      	ldr	r3, [r3, #4]
 801b30e:	4a49      	ldr	r2, [pc, #292]	; (801b434 <tcp_receive+0x888>)
 801b310:	8912      	ldrh	r2, [r2, #8]
 801b312:	4611      	mov	r1, r2
 801b314:	4618      	mov	r0, r3
 801b316:	f7fb fd8d 	bl	8016e34 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801b31a:	4b46      	ldr	r3, [pc, #280]	; (801b434 <tcp_receive+0x888>)
 801b31c:	891c      	ldrh	r4, [r3, #8]
 801b31e:	4b45      	ldr	r3, [pc, #276]	; (801b434 <tcp_receive+0x888>)
 801b320:	68db      	ldr	r3, [r3, #12]
 801b322:	899b      	ldrh	r3, [r3, #12]
 801b324:	b29b      	uxth	r3, r3
 801b326:	4618      	mov	r0, r3
 801b328:	f7f8 f80e 	bl	8013348 <lwip_htons>
 801b32c:	4603      	mov	r3, r0
 801b32e:	b2db      	uxtb	r3, r3
 801b330:	f003 0303 	and.w	r3, r3, #3
 801b334:	2b00      	cmp	r3, #0
 801b336:	d001      	beq.n	801b33c <tcp_receive+0x790>
 801b338:	2301      	movs	r3, #1
 801b33a:	e000      	b.n	801b33e <tcp_receive+0x792>
 801b33c:	2300      	movs	r3, #0
 801b33e:	4423      	add	r3, r4
 801b340:	b29a      	uxth	r2, r3
 801b342:	4b3d      	ldr	r3, [pc, #244]	; (801b438 <tcp_receive+0x88c>)
 801b344:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801b346:	4b3c      	ldr	r3, [pc, #240]	; (801b438 <tcp_receive+0x88c>)
 801b348:	881b      	ldrh	r3, [r3, #0]
 801b34a:	461a      	mov	r2, r3
 801b34c:	4b38      	ldr	r3, [pc, #224]	; (801b430 <tcp_receive+0x884>)
 801b34e:	681b      	ldr	r3, [r3, #0]
 801b350:	441a      	add	r2, r3
 801b352:	687b      	ldr	r3, [r7, #4]
 801b354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b356:	6879      	ldr	r1, [r7, #4]
 801b358:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801b35a:	440b      	add	r3, r1
 801b35c:	429a      	cmp	r2, r3
 801b35e:	d006      	beq.n	801b36e <tcp_receive+0x7c2>
 801b360:	4b36      	ldr	r3, [pc, #216]	; (801b43c <tcp_receive+0x890>)
 801b362:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801b366:	4936      	ldr	r1, [pc, #216]	; (801b440 <tcp_receive+0x894>)
 801b368:	4836      	ldr	r0, [pc, #216]	; (801b444 <tcp_receive+0x898>)
 801b36a:	f005 fd7f 	bl	8020e6c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801b36e:	687b      	ldr	r3, [r7, #4]
 801b370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b372:	2b00      	cmp	r3, #0
 801b374:	f000 80e7 	beq.w	801b546 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801b378:	4b2e      	ldr	r3, [pc, #184]	; (801b434 <tcp_receive+0x888>)
 801b37a:	68db      	ldr	r3, [r3, #12]
 801b37c:	899b      	ldrh	r3, [r3, #12]
 801b37e:	b29b      	uxth	r3, r3
 801b380:	4618      	mov	r0, r3
 801b382:	f7f7 ffe1 	bl	8013348 <lwip_htons>
 801b386:	4603      	mov	r3, r0
 801b388:	b2db      	uxtb	r3, r3
 801b38a:	f003 0301 	and.w	r3, r3, #1
 801b38e:	2b00      	cmp	r3, #0
 801b390:	d010      	beq.n	801b3b4 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801b392:	e00a      	b.n	801b3aa <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801b394:	687b      	ldr	r3, [r7, #4]
 801b396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b398:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801b39a:	687b      	ldr	r3, [r7, #4]
 801b39c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b39e:	681a      	ldr	r2, [r3, #0]
 801b3a0:	687b      	ldr	r3, [r7, #4]
 801b3a2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801b3a4:	68f8      	ldr	r0, [r7, #12]
 801b3a6:	f7fd fcc8 	bl	8018d3a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801b3aa:	687b      	ldr	r3, [r7, #4]
 801b3ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b3ae:	2b00      	cmp	r3, #0
 801b3b0:	d1f0      	bne.n	801b394 <tcp_receive+0x7e8>
 801b3b2:	e0c8      	b.n	801b546 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801b3b4:	687b      	ldr	r3, [r7, #4]
 801b3b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b3b8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801b3ba:	e052      	b.n	801b462 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801b3bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b3be:	68db      	ldr	r3, [r3, #12]
 801b3c0:	899b      	ldrh	r3, [r3, #12]
 801b3c2:	b29b      	uxth	r3, r3
 801b3c4:	4618      	mov	r0, r3
 801b3c6:	f7f7 ffbf 	bl	8013348 <lwip_htons>
 801b3ca:	4603      	mov	r3, r0
 801b3cc:	b2db      	uxtb	r3, r3
 801b3ce:	f003 0301 	and.w	r3, r3, #1
 801b3d2:	2b00      	cmp	r3, #0
 801b3d4:	d03d      	beq.n	801b452 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801b3d6:	4b17      	ldr	r3, [pc, #92]	; (801b434 <tcp_receive+0x888>)
 801b3d8:	68db      	ldr	r3, [r3, #12]
 801b3da:	899b      	ldrh	r3, [r3, #12]
 801b3dc:	b29b      	uxth	r3, r3
 801b3de:	4618      	mov	r0, r3
 801b3e0:	f7f7 ffb2 	bl	8013348 <lwip_htons>
 801b3e4:	4603      	mov	r3, r0
 801b3e6:	b2db      	uxtb	r3, r3
 801b3e8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801b3ec:	2b00      	cmp	r3, #0
 801b3ee:	d130      	bne.n	801b452 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801b3f0:	4b10      	ldr	r3, [pc, #64]	; (801b434 <tcp_receive+0x888>)
 801b3f2:	68db      	ldr	r3, [r3, #12]
 801b3f4:	899b      	ldrh	r3, [r3, #12]
 801b3f6:	b29c      	uxth	r4, r3
 801b3f8:	2001      	movs	r0, #1
 801b3fa:	f7f7 ffa5 	bl	8013348 <lwip_htons>
 801b3fe:	4603      	mov	r3, r0
 801b400:	461a      	mov	r2, r3
 801b402:	4b0c      	ldr	r3, [pc, #48]	; (801b434 <tcp_receive+0x888>)
 801b404:	68db      	ldr	r3, [r3, #12]
 801b406:	4322      	orrs	r2, r4
 801b408:	b292      	uxth	r2, r2
 801b40a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801b40c:	4b09      	ldr	r3, [pc, #36]	; (801b434 <tcp_receive+0x888>)
 801b40e:	891c      	ldrh	r4, [r3, #8]
 801b410:	4b08      	ldr	r3, [pc, #32]	; (801b434 <tcp_receive+0x888>)
 801b412:	68db      	ldr	r3, [r3, #12]
 801b414:	899b      	ldrh	r3, [r3, #12]
 801b416:	b29b      	uxth	r3, r3
 801b418:	4618      	mov	r0, r3
 801b41a:	f7f7 ff95 	bl	8013348 <lwip_htons>
 801b41e:	4603      	mov	r3, r0
 801b420:	b2db      	uxtb	r3, r3
 801b422:	f003 0303 	and.w	r3, r3, #3
 801b426:	2b00      	cmp	r3, #0
 801b428:	d00e      	beq.n	801b448 <tcp_receive+0x89c>
 801b42a:	2301      	movs	r3, #1
 801b42c:	e00d      	b.n	801b44a <tcp_receive+0x89e>
 801b42e:	bf00      	nop
 801b430:	240048c0 	.word	0x240048c0
 801b434:	240048a0 	.word	0x240048a0
 801b438:	240048ca 	.word	0x240048ca
 801b43c:	080278e8 	.word	0x080278e8
 801b440:	08027cbc 	.word	0x08027cbc
 801b444:	08027960 	.word	0x08027960
 801b448:	2300      	movs	r3, #0
 801b44a:	4423      	add	r3, r4
 801b44c:	b29a      	uxth	r2, r3
 801b44e:	4b98      	ldr	r3, [pc, #608]	; (801b6b0 <tcp_receive+0xb04>)
 801b450:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801b452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b454:	613b      	str	r3, [r7, #16]
              next = next->next;
 801b456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b458:	681b      	ldr	r3, [r3, #0]
 801b45a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801b45c:	6938      	ldr	r0, [r7, #16]
 801b45e:	f7fd fc6c 	bl	8018d3a <tcp_seg_free>
            while (next &&
 801b462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b464:	2b00      	cmp	r3, #0
 801b466:	d00e      	beq.n	801b486 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801b468:	4b91      	ldr	r3, [pc, #580]	; (801b6b0 <tcp_receive+0xb04>)
 801b46a:	881b      	ldrh	r3, [r3, #0]
 801b46c:	461a      	mov	r2, r3
 801b46e:	4b91      	ldr	r3, [pc, #580]	; (801b6b4 <tcp_receive+0xb08>)
 801b470:	681b      	ldr	r3, [r3, #0]
 801b472:	441a      	add	r2, r3
 801b474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b476:	68db      	ldr	r3, [r3, #12]
 801b478:	685b      	ldr	r3, [r3, #4]
 801b47a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801b47c:	8909      	ldrh	r1, [r1, #8]
 801b47e:	440b      	add	r3, r1
 801b480:	1ad3      	subs	r3, r2, r3
            while (next &&
 801b482:	2b00      	cmp	r3, #0
 801b484:	da9a      	bge.n	801b3bc <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801b486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b488:	2b00      	cmp	r3, #0
 801b48a:	d059      	beq.n	801b540 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801b48c:	4b88      	ldr	r3, [pc, #544]	; (801b6b0 <tcp_receive+0xb04>)
 801b48e:	881b      	ldrh	r3, [r3, #0]
 801b490:	461a      	mov	r2, r3
 801b492:	4b88      	ldr	r3, [pc, #544]	; (801b6b4 <tcp_receive+0xb08>)
 801b494:	681b      	ldr	r3, [r3, #0]
 801b496:	441a      	add	r2, r3
 801b498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b49a:	68db      	ldr	r3, [r3, #12]
 801b49c:	685b      	ldr	r3, [r3, #4]
 801b49e:	1ad3      	subs	r3, r2, r3
            if (next &&
 801b4a0:	2b00      	cmp	r3, #0
 801b4a2:	dd4d      	ble.n	801b540 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801b4a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b4a6:	68db      	ldr	r3, [r3, #12]
 801b4a8:	685b      	ldr	r3, [r3, #4]
 801b4aa:	b29a      	uxth	r2, r3
 801b4ac:	4b81      	ldr	r3, [pc, #516]	; (801b6b4 <tcp_receive+0xb08>)
 801b4ae:	681b      	ldr	r3, [r3, #0]
 801b4b0:	b29b      	uxth	r3, r3
 801b4b2:	1ad3      	subs	r3, r2, r3
 801b4b4:	b29a      	uxth	r2, r3
 801b4b6:	4b80      	ldr	r3, [pc, #512]	; (801b6b8 <tcp_receive+0xb0c>)
 801b4b8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801b4ba:	4b7f      	ldr	r3, [pc, #508]	; (801b6b8 <tcp_receive+0xb0c>)
 801b4bc:	68db      	ldr	r3, [r3, #12]
 801b4be:	899b      	ldrh	r3, [r3, #12]
 801b4c0:	b29b      	uxth	r3, r3
 801b4c2:	4618      	mov	r0, r3
 801b4c4:	f7f7 ff40 	bl	8013348 <lwip_htons>
 801b4c8:	4603      	mov	r3, r0
 801b4ca:	b2db      	uxtb	r3, r3
 801b4cc:	f003 0302 	and.w	r3, r3, #2
 801b4d0:	2b00      	cmp	r3, #0
 801b4d2:	d005      	beq.n	801b4e0 <tcp_receive+0x934>
                inseg.len -= 1;
 801b4d4:	4b78      	ldr	r3, [pc, #480]	; (801b6b8 <tcp_receive+0xb0c>)
 801b4d6:	891b      	ldrh	r3, [r3, #8]
 801b4d8:	3b01      	subs	r3, #1
 801b4da:	b29a      	uxth	r2, r3
 801b4dc:	4b76      	ldr	r3, [pc, #472]	; (801b6b8 <tcp_receive+0xb0c>)
 801b4de:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801b4e0:	4b75      	ldr	r3, [pc, #468]	; (801b6b8 <tcp_receive+0xb0c>)
 801b4e2:	685b      	ldr	r3, [r3, #4]
 801b4e4:	4a74      	ldr	r2, [pc, #464]	; (801b6b8 <tcp_receive+0xb0c>)
 801b4e6:	8912      	ldrh	r2, [r2, #8]
 801b4e8:	4611      	mov	r1, r2
 801b4ea:	4618      	mov	r0, r3
 801b4ec:	f7fb fca2 	bl	8016e34 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801b4f0:	4b71      	ldr	r3, [pc, #452]	; (801b6b8 <tcp_receive+0xb0c>)
 801b4f2:	891c      	ldrh	r4, [r3, #8]
 801b4f4:	4b70      	ldr	r3, [pc, #448]	; (801b6b8 <tcp_receive+0xb0c>)
 801b4f6:	68db      	ldr	r3, [r3, #12]
 801b4f8:	899b      	ldrh	r3, [r3, #12]
 801b4fa:	b29b      	uxth	r3, r3
 801b4fc:	4618      	mov	r0, r3
 801b4fe:	f7f7 ff23 	bl	8013348 <lwip_htons>
 801b502:	4603      	mov	r3, r0
 801b504:	b2db      	uxtb	r3, r3
 801b506:	f003 0303 	and.w	r3, r3, #3
 801b50a:	2b00      	cmp	r3, #0
 801b50c:	d001      	beq.n	801b512 <tcp_receive+0x966>
 801b50e:	2301      	movs	r3, #1
 801b510:	e000      	b.n	801b514 <tcp_receive+0x968>
 801b512:	2300      	movs	r3, #0
 801b514:	4423      	add	r3, r4
 801b516:	b29a      	uxth	r2, r3
 801b518:	4b65      	ldr	r3, [pc, #404]	; (801b6b0 <tcp_receive+0xb04>)
 801b51a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801b51c:	4b64      	ldr	r3, [pc, #400]	; (801b6b0 <tcp_receive+0xb04>)
 801b51e:	881b      	ldrh	r3, [r3, #0]
 801b520:	461a      	mov	r2, r3
 801b522:	4b64      	ldr	r3, [pc, #400]	; (801b6b4 <tcp_receive+0xb08>)
 801b524:	681b      	ldr	r3, [r3, #0]
 801b526:	441a      	add	r2, r3
 801b528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b52a:	68db      	ldr	r3, [r3, #12]
 801b52c:	685b      	ldr	r3, [r3, #4]
 801b52e:	429a      	cmp	r2, r3
 801b530:	d006      	beq.n	801b540 <tcp_receive+0x994>
 801b532:	4b62      	ldr	r3, [pc, #392]	; (801b6bc <tcp_receive+0xb10>)
 801b534:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801b538:	4961      	ldr	r1, [pc, #388]	; (801b6c0 <tcp_receive+0xb14>)
 801b53a:	4862      	ldr	r0, [pc, #392]	; (801b6c4 <tcp_receive+0xb18>)
 801b53c:	f005 fc96 	bl	8020e6c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801b540:	687b      	ldr	r3, [r7, #4]
 801b542:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b544:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801b546:	4b5a      	ldr	r3, [pc, #360]	; (801b6b0 <tcp_receive+0xb04>)
 801b548:	881b      	ldrh	r3, [r3, #0]
 801b54a:	461a      	mov	r2, r3
 801b54c:	4b59      	ldr	r3, [pc, #356]	; (801b6b4 <tcp_receive+0xb08>)
 801b54e:	681b      	ldr	r3, [r3, #0]
 801b550:	441a      	add	r2, r3
 801b552:	687b      	ldr	r3, [r7, #4]
 801b554:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801b556:	687b      	ldr	r3, [r7, #4]
 801b558:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801b55a:	4b55      	ldr	r3, [pc, #340]	; (801b6b0 <tcp_receive+0xb04>)
 801b55c:	881b      	ldrh	r3, [r3, #0]
 801b55e:	429a      	cmp	r2, r3
 801b560:	d206      	bcs.n	801b570 <tcp_receive+0x9c4>
 801b562:	4b56      	ldr	r3, [pc, #344]	; (801b6bc <tcp_receive+0xb10>)
 801b564:	f240 6207 	movw	r2, #1543	; 0x607
 801b568:	4957      	ldr	r1, [pc, #348]	; (801b6c8 <tcp_receive+0xb1c>)
 801b56a:	4856      	ldr	r0, [pc, #344]	; (801b6c4 <tcp_receive+0xb18>)
 801b56c:	f005 fc7e 	bl	8020e6c <iprintf>
        pcb->rcv_wnd -= tcplen;
 801b570:	687b      	ldr	r3, [r7, #4]
 801b572:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801b574:	4b4e      	ldr	r3, [pc, #312]	; (801b6b0 <tcp_receive+0xb04>)
 801b576:	881b      	ldrh	r3, [r3, #0]
 801b578:	1ad3      	subs	r3, r2, r3
 801b57a:	b29a      	uxth	r2, r3
 801b57c:	687b      	ldr	r3, [r7, #4]
 801b57e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801b580:	6878      	ldr	r0, [r7, #4]
 801b582:	f7fc fd9d 	bl	80180c0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801b586:	4b4c      	ldr	r3, [pc, #304]	; (801b6b8 <tcp_receive+0xb0c>)
 801b588:	685b      	ldr	r3, [r3, #4]
 801b58a:	891b      	ldrh	r3, [r3, #8]
 801b58c:	2b00      	cmp	r3, #0
 801b58e:	d006      	beq.n	801b59e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801b590:	4b49      	ldr	r3, [pc, #292]	; (801b6b8 <tcp_receive+0xb0c>)
 801b592:	685b      	ldr	r3, [r3, #4]
 801b594:	4a4d      	ldr	r2, [pc, #308]	; (801b6cc <tcp_receive+0xb20>)
 801b596:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801b598:	4b47      	ldr	r3, [pc, #284]	; (801b6b8 <tcp_receive+0xb0c>)
 801b59a:	2200      	movs	r2, #0
 801b59c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801b59e:	4b46      	ldr	r3, [pc, #280]	; (801b6b8 <tcp_receive+0xb0c>)
 801b5a0:	68db      	ldr	r3, [r3, #12]
 801b5a2:	899b      	ldrh	r3, [r3, #12]
 801b5a4:	b29b      	uxth	r3, r3
 801b5a6:	4618      	mov	r0, r3
 801b5a8:	f7f7 fece 	bl	8013348 <lwip_htons>
 801b5ac:	4603      	mov	r3, r0
 801b5ae:	b2db      	uxtb	r3, r3
 801b5b0:	f003 0301 	and.w	r3, r3, #1
 801b5b4:	2b00      	cmp	r3, #0
 801b5b6:	f000 80b8 	beq.w	801b72a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801b5ba:	4b45      	ldr	r3, [pc, #276]	; (801b6d0 <tcp_receive+0xb24>)
 801b5bc:	781b      	ldrb	r3, [r3, #0]
 801b5be:	f043 0320 	orr.w	r3, r3, #32
 801b5c2:	b2da      	uxtb	r2, r3
 801b5c4:	4b42      	ldr	r3, [pc, #264]	; (801b6d0 <tcp_receive+0xb24>)
 801b5c6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801b5c8:	e0af      	b.n	801b72a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801b5ca:	687b      	ldr	r3, [r7, #4]
 801b5cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b5ce:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801b5d0:	687b      	ldr	r3, [r7, #4]
 801b5d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b5d4:	68db      	ldr	r3, [r3, #12]
 801b5d6:	685b      	ldr	r3, [r3, #4]
 801b5d8:	4a36      	ldr	r2, [pc, #216]	; (801b6b4 <tcp_receive+0xb08>)
 801b5da:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801b5dc:	68bb      	ldr	r3, [r7, #8]
 801b5de:	891b      	ldrh	r3, [r3, #8]
 801b5e0:	461c      	mov	r4, r3
 801b5e2:	68bb      	ldr	r3, [r7, #8]
 801b5e4:	68db      	ldr	r3, [r3, #12]
 801b5e6:	899b      	ldrh	r3, [r3, #12]
 801b5e8:	b29b      	uxth	r3, r3
 801b5ea:	4618      	mov	r0, r3
 801b5ec:	f7f7 feac 	bl	8013348 <lwip_htons>
 801b5f0:	4603      	mov	r3, r0
 801b5f2:	b2db      	uxtb	r3, r3
 801b5f4:	f003 0303 	and.w	r3, r3, #3
 801b5f8:	2b00      	cmp	r3, #0
 801b5fa:	d001      	beq.n	801b600 <tcp_receive+0xa54>
 801b5fc:	2301      	movs	r3, #1
 801b5fe:	e000      	b.n	801b602 <tcp_receive+0xa56>
 801b600:	2300      	movs	r3, #0
 801b602:	191a      	adds	r2, r3, r4
 801b604:	687b      	ldr	r3, [r7, #4]
 801b606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b608:	441a      	add	r2, r3
 801b60a:	687b      	ldr	r3, [r7, #4]
 801b60c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801b60e:	687b      	ldr	r3, [r7, #4]
 801b610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b612:	461c      	mov	r4, r3
 801b614:	68bb      	ldr	r3, [r7, #8]
 801b616:	891b      	ldrh	r3, [r3, #8]
 801b618:	461d      	mov	r5, r3
 801b61a:	68bb      	ldr	r3, [r7, #8]
 801b61c:	68db      	ldr	r3, [r3, #12]
 801b61e:	899b      	ldrh	r3, [r3, #12]
 801b620:	b29b      	uxth	r3, r3
 801b622:	4618      	mov	r0, r3
 801b624:	f7f7 fe90 	bl	8013348 <lwip_htons>
 801b628:	4603      	mov	r3, r0
 801b62a:	b2db      	uxtb	r3, r3
 801b62c:	f003 0303 	and.w	r3, r3, #3
 801b630:	2b00      	cmp	r3, #0
 801b632:	d001      	beq.n	801b638 <tcp_receive+0xa8c>
 801b634:	2301      	movs	r3, #1
 801b636:	e000      	b.n	801b63a <tcp_receive+0xa8e>
 801b638:	2300      	movs	r3, #0
 801b63a:	442b      	add	r3, r5
 801b63c:	429c      	cmp	r4, r3
 801b63e:	d206      	bcs.n	801b64e <tcp_receive+0xaa2>
 801b640:	4b1e      	ldr	r3, [pc, #120]	; (801b6bc <tcp_receive+0xb10>)
 801b642:	f240 622b 	movw	r2, #1579	; 0x62b
 801b646:	4923      	ldr	r1, [pc, #140]	; (801b6d4 <tcp_receive+0xb28>)
 801b648:	481e      	ldr	r0, [pc, #120]	; (801b6c4 <tcp_receive+0xb18>)
 801b64a:	f005 fc0f 	bl	8020e6c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801b64e:	68bb      	ldr	r3, [r7, #8]
 801b650:	891b      	ldrh	r3, [r3, #8]
 801b652:	461c      	mov	r4, r3
 801b654:	68bb      	ldr	r3, [r7, #8]
 801b656:	68db      	ldr	r3, [r3, #12]
 801b658:	899b      	ldrh	r3, [r3, #12]
 801b65a:	b29b      	uxth	r3, r3
 801b65c:	4618      	mov	r0, r3
 801b65e:	f7f7 fe73 	bl	8013348 <lwip_htons>
 801b662:	4603      	mov	r3, r0
 801b664:	b2db      	uxtb	r3, r3
 801b666:	f003 0303 	and.w	r3, r3, #3
 801b66a:	2b00      	cmp	r3, #0
 801b66c:	d001      	beq.n	801b672 <tcp_receive+0xac6>
 801b66e:	2301      	movs	r3, #1
 801b670:	e000      	b.n	801b674 <tcp_receive+0xac8>
 801b672:	2300      	movs	r3, #0
 801b674:	1919      	adds	r1, r3, r4
 801b676:	687b      	ldr	r3, [r7, #4]
 801b678:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801b67a:	b28b      	uxth	r3, r1
 801b67c:	1ad3      	subs	r3, r2, r3
 801b67e:	b29a      	uxth	r2, r3
 801b680:	687b      	ldr	r3, [r7, #4]
 801b682:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801b684:	6878      	ldr	r0, [r7, #4]
 801b686:	f7fc fd1b 	bl	80180c0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801b68a:	68bb      	ldr	r3, [r7, #8]
 801b68c:	685b      	ldr	r3, [r3, #4]
 801b68e:	891b      	ldrh	r3, [r3, #8]
 801b690:	2b00      	cmp	r3, #0
 801b692:	d028      	beq.n	801b6e6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801b694:	4b0d      	ldr	r3, [pc, #52]	; (801b6cc <tcp_receive+0xb20>)
 801b696:	681b      	ldr	r3, [r3, #0]
 801b698:	2b00      	cmp	r3, #0
 801b69a:	d01d      	beq.n	801b6d8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801b69c:	4b0b      	ldr	r3, [pc, #44]	; (801b6cc <tcp_receive+0xb20>)
 801b69e:	681a      	ldr	r2, [r3, #0]
 801b6a0:	68bb      	ldr	r3, [r7, #8]
 801b6a2:	685b      	ldr	r3, [r3, #4]
 801b6a4:	4619      	mov	r1, r3
 801b6a6:	4610      	mov	r0, r2
 801b6a8:	f7fb fe0c 	bl	80172c4 <pbuf_cat>
 801b6ac:	e018      	b.n	801b6e0 <tcp_receive+0xb34>
 801b6ae:	bf00      	nop
 801b6b0:	240048ca 	.word	0x240048ca
 801b6b4:	240048c0 	.word	0x240048c0
 801b6b8:	240048a0 	.word	0x240048a0
 801b6bc:	080278e8 	.word	0x080278e8
 801b6c0:	08027cf4 	.word	0x08027cf4
 801b6c4:	08027960 	.word	0x08027960
 801b6c8:	08027d30 	.word	0x08027d30
 801b6cc:	240048d0 	.word	0x240048d0
 801b6d0:	240048cd 	.word	0x240048cd
 801b6d4:	08027d50 	.word	0x08027d50
            } else {
              recv_data = cseg->p;
 801b6d8:	68bb      	ldr	r3, [r7, #8]
 801b6da:	685b      	ldr	r3, [r3, #4]
 801b6dc:	4a70      	ldr	r2, [pc, #448]	; (801b8a0 <tcp_receive+0xcf4>)
 801b6de:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801b6e0:	68bb      	ldr	r3, [r7, #8]
 801b6e2:	2200      	movs	r2, #0
 801b6e4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801b6e6:	68bb      	ldr	r3, [r7, #8]
 801b6e8:	68db      	ldr	r3, [r3, #12]
 801b6ea:	899b      	ldrh	r3, [r3, #12]
 801b6ec:	b29b      	uxth	r3, r3
 801b6ee:	4618      	mov	r0, r3
 801b6f0:	f7f7 fe2a 	bl	8013348 <lwip_htons>
 801b6f4:	4603      	mov	r3, r0
 801b6f6:	b2db      	uxtb	r3, r3
 801b6f8:	f003 0301 	and.w	r3, r3, #1
 801b6fc:	2b00      	cmp	r3, #0
 801b6fe:	d00d      	beq.n	801b71c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801b700:	4b68      	ldr	r3, [pc, #416]	; (801b8a4 <tcp_receive+0xcf8>)
 801b702:	781b      	ldrb	r3, [r3, #0]
 801b704:	f043 0320 	orr.w	r3, r3, #32
 801b708:	b2da      	uxtb	r2, r3
 801b70a:	4b66      	ldr	r3, [pc, #408]	; (801b8a4 <tcp_receive+0xcf8>)
 801b70c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801b70e:	687b      	ldr	r3, [r7, #4]
 801b710:	7d1b      	ldrb	r3, [r3, #20]
 801b712:	2b04      	cmp	r3, #4
 801b714:	d102      	bne.n	801b71c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801b716:	687b      	ldr	r3, [r7, #4]
 801b718:	2207      	movs	r2, #7
 801b71a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801b71c:	68bb      	ldr	r3, [r7, #8]
 801b71e:	681a      	ldr	r2, [r3, #0]
 801b720:	687b      	ldr	r3, [r7, #4]
 801b722:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801b724:	68b8      	ldr	r0, [r7, #8]
 801b726:	f7fd fb08 	bl	8018d3a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801b72a:	687b      	ldr	r3, [r7, #4]
 801b72c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b72e:	2b00      	cmp	r3, #0
 801b730:	d008      	beq.n	801b744 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801b732:	687b      	ldr	r3, [r7, #4]
 801b734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b736:	68db      	ldr	r3, [r3, #12]
 801b738:	685a      	ldr	r2, [r3, #4]
 801b73a:	687b      	ldr	r3, [r7, #4]
 801b73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801b73e:	429a      	cmp	r2, r3
 801b740:	f43f af43 	beq.w	801b5ca <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801b744:	687b      	ldr	r3, [r7, #4]
 801b746:	8b5b      	ldrh	r3, [r3, #26]
 801b748:	f003 0301 	and.w	r3, r3, #1
 801b74c:	2b00      	cmp	r3, #0
 801b74e:	d00e      	beq.n	801b76e <tcp_receive+0xbc2>
 801b750:	687b      	ldr	r3, [r7, #4]
 801b752:	8b5b      	ldrh	r3, [r3, #26]
 801b754:	f023 0301 	bic.w	r3, r3, #1
 801b758:	b29a      	uxth	r2, r3
 801b75a:	687b      	ldr	r3, [r7, #4]
 801b75c:	835a      	strh	r2, [r3, #26]
 801b75e:	687b      	ldr	r3, [r7, #4]
 801b760:	8b5b      	ldrh	r3, [r3, #26]
 801b762:	f043 0302 	orr.w	r3, r3, #2
 801b766:	b29a      	uxth	r2, r3
 801b768:	687b      	ldr	r3, [r7, #4]
 801b76a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801b76c:	e188      	b.n	801ba80 <tcp_receive+0xed4>
        tcp_ack(pcb);
 801b76e:	687b      	ldr	r3, [r7, #4]
 801b770:	8b5b      	ldrh	r3, [r3, #26]
 801b772:	f043 0301 	orr.w	r3, r3, #1
 801b776:	b29a      	uxth	r2, r3
 801b778:	687b      	ldr	r3, [r7, #4]
 801b77a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801b77c:	e180      	b.n	801ba80 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801b77e:	687b      	ldr	r3, [r7, #4]
 801b780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b782:	2b00      	cmp	r3, #0
 801b784:	d106      	bne.n	801b794 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801b786:	4848      	ldr	r0, [pc, #288]	; (801b8a8 <tcp_receive+0xcfc>)
 801b788:	f7fd faf0 	bl	8018d6c <tcp_seg_copy>
 801b78c:	4602      	mov	r2, r0
 801b78e:	687b      	ldr	r3, [r7, #4]
 801b790:	675a      	str	r2, [r3, #116]	; 0x74
 801b792:	e16d      	b.n	801ba70 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801b794:	2300      	movs	r3, #0
 801b796:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801b798:	687b      	ldr	r3, [r7, #4]
 801b79a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b79c:	63bb      	str	r3, [r7, #56]	; 0x38
 801b79e:	e157      	b.n	801ba50 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 801b7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b7a2:	68db      	ldr	r3, [r3, #12]
 801b7a4:	685a      	ldr	r2, [r3, #4]
 801b7a6:	4b41      	ldr	r3, [pc, #260]	; (801b8ac <tcp_receive+0xd00>)
 801b7a8:	681b      	ldr	r3, [r3, #0]
 801b7aa:	429a      	cmp	r2, r3
 801b7ac:	d11d      	bne.n	801b7ea <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801b7ae:	4b3e      	ldr	r3, [pc, #248]	; (801b8a8 <tcp_receive+0xcfc>)
 801b7b0:	891a      	ldrh	r2, [r3, #8]
 801b7b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b7b4:	891b      	ldrh	r3, [r3, #8]
 801b7b6:	429a      	cmp	r2, r3
 801b7b8:	f240 814f 	bls.w	801ba5a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801b7bc:	483a      	ldr	r0, [pc, #232]	; (801b8a8 <tcp_receive+0xcfc>)
 801b7be:	f7fd fad5 	bl	8018d6c <tcp_seg_copy>
 801b7c2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801b7c4:	697b      	ldr	r3, [r7, #20]
 801b7c6:	2b00      	cmp	r3, #0
 801b7c8:	f000 8149 	beq.w	801ba5e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 801b7cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b7ce:	2b00      	cmp	r3, #0
 801b7d0:	d003      	beq.n	801b7da <tcp_receive+0xc2e>
                    prev->next = cseg;
 801b7d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b7d4:	697a      	ldr	r2, [r7, #20]
 801b7d6:	601a      	str	r2, [r3, #0]
 801b7d8:	e002      	b.n	801b7e0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801b7da:	687b      	ldr	r3, [r7, #4]
 801b7dc:	697a      	ldr	r2, [r7, #20]
 801b7de:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801b7e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b7e2:	6978      	ldr	r0, [r7, #20]
 801b7e4:	f7ff f8de 	bl	801a9a4 <tcp_oos_insert_segment>
                }
                break;
 801b7e8:	e139      	b.n	801ba5e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801b7ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b7ec:	2b00      	cmp	r3, #0
 801b7ee:	d117      	bne.n	801b820 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801b7f0:	4b2e      	ldr	r3, [pc, #184]	; (801b8ac <tcp_receive+0xd00>)
 801b7f2:	681a      	ldr	r2, [r3, #0]
 801b7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b7f6:	68db      	ldr	r3, [r3, #12]
 801b7f8:	685b      	ldr	r3, [r3, #4]
 801b7fa:	1ad3      	subs	r3, r2, r3
 801b7fc:	2b00      	cmp	r3, #0
 801b7fe:	da57      	bge.n	801b8b0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801b800:	4829      	ldr	r0, [pc, #164]	; (801b8a8 <tcp_receive+0xcfc>)
 801b802:	f7fd fab3 	bl	8018d6c <tcp_seg_copy>
 801b806:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801b808:	69bb      	ldr	r3, [r7, #24]
 801b80a:	2b00      	cmp	r3, #0
 801b80c:	f000 8129 	beq.w	801ba62 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 801b810:	687b      	ldr	r3, [r7, #4]
 801b812:	69ba      	ldr	r2, [r7, #24]
 801b814:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801b816:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b818:	69b8      	ldr	r0, [r7, #24]
 801b81a:	f7ff f8c3 	bl	801a9a4 <tcp_oos_insert_segment>
                  }
                  break;
 801b81e:	e120      	b.n	801ba62 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801b820:	4b22      	ldr	r3, [pc, #136]	; (801b8ac <tcp_receive+0xd00>)
 801b822:	681a      	ldr	r2, [r3, #0]
 801b824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b826:	68db      	ldr	r3, [r3, #12]
 801b828:	685b      	ldr	r3, [r3, #4]
 801b82a:	1ad3      	subs	r3, r2, r3
 801b82c:	3b01      	subs	r3, #1
 801b82e:	2b00      	cmp	r3, #0
 801b830:	db3e      	blt.n	801b8b0 <tcp_receive+0xd04>
 801b832:	4b1e      	ldr	r3, [pc, #120]	; (801b8ac <tcp_receive+0xd00>)
 801b834:	681a      	ldr	r2, [r3, #0]
 801b836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b838:	68db      	ldr	r3, [r3, #12]
 801b83a:	685b      	ldr	r3, [r3, #4]
 801b83c:	1ad3      	subs	r3, r2, r3
 801b83e:	3301      	adds	r3, #1
 801b840:	2b00      	cmp	r3, #0
 801b842:	dc35      	bgt.n	801b8b0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801b844:	4818      	ldr	r0, [pc, #96]	; (801b8a8 <tcp_receive+0xcfc>)
 801b846:	f7fd fa91 	bl	8018d6c <tcp_seg_copy>
 801b84a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801b84c:	69fb      	ldr	r3, [r7, #28]
 801b84e:	2b00      	cmp	r3, #0
 801b850:	f000 8109 	beq.w	801ba66 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801b854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b856:	68db      	ldr	r3, [r3, #12]
 801b858:	685b      	ldr	r3, [r3, #4]
 801b85a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b85c:	8912      	ldrh	r2, [r2, #8]
 801b85e:	441a      	add	r2, r3
 801b860:	4b12      	ldr	r3, [pc, #72]	; (801b8ac <tcp_receive+0xd00>)
 801b862:	681b      	ldr	r3, [r3, #0]
 801b864:	1ad3      	subs	r3, r2, r3
 801b866:	2b00      	cmp	r3, #0
 801b868:	dd12      	ble.n	801b890 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801b86a:	4b10      	ldr	r3, [pc, #64]	; (801b8ac <tcp_receive+0xd00>)
 801b86c:	681b      	ldr	r3, [r3, #0]
 801b86e:	b29a      	uxth	r2, r3
 801b870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b872:	68db      	ldr	r3, [r3, #12]
 801b874:	685b      	ldr	r3, [r3, #4]
 801b876:	b29b      	uxth	r3, r3
 801b878:	1ad3      	subs	r3, r2, r3
 801b87a:	b29a      	uxth	r2, r3
 801b87c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b87e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801b880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b882:	685a      	ldr	r2, [r3, #4]
 801b884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b886:	891b      	ldrh	r3, [r3, #8]
 801b888:	4619      	mov	r1, r3
 801b88a:	4610      	mov	r0, r2
 801b88c:	f7fb fad2 	bl	8016e34 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801b890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b892:	69fa      	ldr	r2, [r7, #28]
 801b894:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801b896:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b898:	69f8      	ldr	r0, [r7, #28]
 801b89a:	f7ff f883 	bl	801a9a4 <tcp_oos_insert_segment>
                  }
                  break;
 801b89e:	e0e2      	b.n	801ba66 <tcp_receive+0xeba>
 801b8a0:	240048d0 	.word	0x240048d0
 801b8a4:	240048cd 	.word	0x240048cd
 801b8a8:	240048a0 	.word	0x240048a0
 801b8ac:	240048c0 	.word	0x240048c0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801b8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b8b2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801b8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b8b6:	681b      	ldr	r3, [r3, #0]
 801b8b8:	2b00      	cmp	r3, #0
 801b8ba:	f040 80c6 	bne.w	801ba4a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801b8be:	4b80      	ldr	r3, [pc, #512]	; (801bac0 <tcp_receive+0xf14>)
 801b8c0:	681a      	ldr	r2, [r3, #0]
 801b8c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b8c4:	68db      	ldr	r3, [r3, #12]
 801b8c6:	685b      	ldr	r3, [r3, #4]
 801b8c8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801b8ca:	2b00      	cmp	r3, #0
 801b8cc:	f340 80bd 	ble.w	801ba4a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801b8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b8d2:	68db      	ldr	r3, [r3, #12]
 801b8d4:	899b      	ldrh	r3, [r3, #12]
 801b8d6:	b29b      	uxth	r3, r3
 801b8d8:	4618      	mov	r0, r3
 801b8da:	f7f7 fd35 	bl	8013348 <lwip_htons>
 801b8de:	4603      	mov	r3, r0
 801b8e0:	b2db      	uxtb	r3, r3
 801b8e2:	f003 0301 	and.w	r3, r3, #1
 801b8e6:	2b00      	cmp	r3, #0
 801b8e8:	f040 80bf 	bne.w	801ba6a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801b8ec:	4875      	ldr	r0, [pc, #468]	; (801bac4 <tcp_receive+0xf18>)
 801b8ee:	f7fd fa3d 	bl	8018d6c <tcp_seg_copy>
 801b8f2:	4602      	mov	r2, r0
 801b8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b8f6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801b8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b8fa:	681b      	ldr	r3, [r3, #0]
 801b8fc:	2b00      	cmp	r3, #0
 801b8fe:	f000 80b6 	beq.w	801ba6e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801b902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b904:	68db      	ldr	r3, [r3, #12]
 801b906:	685b      	ldr	r3, [r3, #4]
 801b908:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b90a:	8912      	ldrh	r2, [r2, #8]
 801b90c:	441a      	add	r2, r3
 801b90e:	4b6c      	ldr	r3, [pc, #432]	; (801bac0 <tcp_receive+0xf14>)
 801b910:	681b      	ldr	r3, [r3, #0]
 801b912:	1ad3      	subs	r3, r2, r3
 801b914:	2b00      	cmp	r3, #0
 801b916:	dd12      	ble.n	801b93e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801b918:	4b69      	ldr	r3, [pc, #420]	; (801bac0 <tcp_receive+0xf14>)
 801b91a:	681b      	ldr	r3, [r3, #0]
 801b91c:	b29a      	uxth	r2, r3
 801b91e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b920:	68db      	ldr	r3, [r3, #12]
 801b922:	685b      	ldr	r3, [r3, #4]
 801b924:	b29b      	uxth	r3, r3
 801b926:	1ad3      	subs	r3, r2, r3
 801b928:	b29a      	uxth	r2, r3
 801b92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b92c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801b92e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b930:	685a      	ldr	r2, [r3, #4]
 801b932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b934:	891b      	ldrh	r3, [r3, #8]
 801b936:	4619      	mov	r1, r3
 801b938:	4610      	mov	r0, r2
 801b93a:	f7fb fa7b 	bl	8016e34 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801b93e:	4b62      	ldr	r3, [pc, #392]	; (801bac8 <tcp_receive+0xf1c>)
 801b940:	881b      	ldrh	r3, [r3, #0]
 801b942:	461a      	mov	r2, r3
 801b944:	4b5e      	ldr	r3, [pc, #376]	; (801bac0 <tcp_receive+0xf14>)
 801b946:	681b      	ldr	r3, [r3, #0]
 801b948:	441a      	add	r2, r3
 801b94a:	687b      	ldr	r3, [r7, #4]
 801b94c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b94e:	6879      	ldr	r1, [r7, #4]
 801b950:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801b952:	440b      	add	r3, r1
 801b954:	1ad3      	subs	r3, r2, r3
 801b956:	2b00      	cmp	r3, #0
 801b958:	f340 8089 	ble.w	801ba6e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801b95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b95e:	681b      	ldr	r3, [r3, #0]
 801b960:	68db      	ldr	r3, [r3, #12]
 801b962:	899b      	ldrh	r3, [r3, #12]
 801b964:	b29b      	uxth	r3, r3
 801b966:	4618      	mov	r0, r3
 801b968:	f7f7 fcee 	bl	8013348 <lwip_htons>
 801b96c:	4603      	mov	r3, r0
 801b96e:	b2db      	uxtb	r3, r3
 801b970:	f003 0301 	and.w	r3, r3, #1
 801b974:	2b00      	cmp	r3, #0
 801b976:	d022      	beq.n	801b9be <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801b978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b97a:	681b      	ldr	r3, [r3, #0]
 801b97c:	68db      	ldr	r3, [r3, #12]
 801b97e:	899b      	ldrh	r3, [r3, #12]
 801b980:	b29b      	uxth	r3, r3
 801b982:	b21b      	sxth	r3, r3
 801b984:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801b988:	b21c      	sxth	r4, r3
 801b98a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b98c:	681b      	ldr	r3, [r3, #0]
 801b98e:	68db      	ldr	r3, [r3, #12]
 801b990:	899b      	ldrh	r3, [r3, #12]
 801b992:	b29b      	uxth	r3, r3
 801b994:	4618      	mov	r0, r3
 801b996:	f7f7 fcd7 	bl	8013348 <lwip_htons>
 801b99a:	4603      	mov	r3, r0
 801b99c:	b2db      	uxtb	r3, r3
 801b99e:	b29b      	uxth	r3, r3
 801b9a0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801b9a4:	b29b      	uxth	r3, r3
 801b9a6:	4618      	mov	r0, r3
 801b9a8:	f7f7 fcce 	bl	8013348 <lwip_htons>
 801b9ac:	4603      	mov	r3, r0
 801b9ae:	b21b      	sxth	r3, r3
 801b9b0:	4323      	orrs	r3, r4
 801b9b2:	b21a      	sxth	r2, r3
 801b9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b9b6:	681b      	ldr	r3, [r3, #0]
 801b9b8:	68db      	ldr	r3, [r3, #12]
 801b9ba:	b292      	uxth	r2, r2
 801b9bc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801b9be:	687b      	ldr	r3, [r7, #4]
 801b9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b9c2:	b29a      	uxth	r2, r3
 801b9c4:	687b      	ldr	r3, [r7, #4]
 801b9c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b9c8:	4413      	add	r3, r2
 801b9ca:	b299      	uxth	r1, r3
 801b9cc:	4b3c      	ldr	r3, [pc, #240]	; (801bac0 <tcp_receive+0xf14>)
 801b9ce:	681b      	ldr	r3, [r3, #0]
 801b9d0:	b29a      	uxth	r2, r3
 801b9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b9d4:	681b      	ldr	r3, [r3, #0]
 801b9d6:	1a8a      	subs	r2, r1, r2
 801b9d8:	b292      	uxth	r2, r2
 801b9da:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801b9dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b9de:	681b      	ldr	r3, [r3, #0]
 801b9e0:	685a      	ldr	r2, [r3, #4]
 801b9e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b9e4:	681b      	ldr	r3, [r3, #0]
 801b9e6:	891b      	ldrh	r3, [r3, #8]
 801b9e8:	4619      	mov	r1, r3
 801b9ea:	4610      	mov	r0, r2
 801b9ec:	f7fb fa22 	bl	8016e34 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801b9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b9f2:	681b      	ldr	r3, [r3, #0]
 801b9f4:	891c      	ldrh	r4, [r3, #8]
 801b9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b9f8:	681b      	ldr	r3, [r3, #0]
 801b9fa:	68db      	ldr	r3, [r3, #12]
 801b9fc:	899b      	ldrh	r3, [r3, #12]
 801b9fe:	b29b      	uxth	r3, r3
 801ba00:	4618      	mov	r0, r3
 801ba02:	f7f7 fca1 	bl	8013348 <lwip_htons>
 801ba06:	4603      	mov	r3, r0
 801ba08:	b2db      	uxtb	r3, r3
 801ba0a:	f003 0303 	and.w	r3, r3, #3
 801ba0e:	2b00      	cmp	r3, #0
 801ba10:	d001      	beq.n	801ba16 <tcp_receive+0xe6a>
 801ba12:	2301      	movs	r3, #1
 801ba14:	e000      	b.n	801ba18 <tcp_receive+0xe6c>
 801ba16:	2300      	movs	r3, #0
 801ba18:	4423      	add	r3, r4
 801ba1a:	b29a      	uxth	r2, r3
 801ba1c:	4b2a      	ldr	r3, [pc, #168]	; (801bac8 <tcp_receive+0xf1c>)
 801ba1e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801ba20:	4b29      	ldr	r3, [pc, #164]	; (801bac8 <tcp_receive+0xf1c>)
 801ba22:	881b      	ldrh	r3, [r3, #0]
 801ba24:	461a      	mov	r2, r3
 801ba26:	4b26      	ldr	r3, [pc, #152]	; (801bac0 <tcp_receive+0xf14>)
 801ba28:	681b      	ldr	r3, [r3, #0]
 801ba2a:	441a      	add	r2, r3
 801ba2c:	687b      	ldr	r3, [r7, #4]
 801ba2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ba30:	6879      	ldr	r1, [r7, #4]
 801ba32:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801ba34:	440b      	add	r3, r1
 801ba36:	429a      	cmp	r2, r3
 801ba38:	d019      	beq.n	801ba6e <tcp_receive+0xec2>
 801ba3a:	4b24      	ldr	r3, [pc, #144]	; (801bacc <tcp_receive+0xf20>)
 801ba3c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801ba40:	4923      	ldr	r1, [pc, #140]	; (801bad0 <tcp_receive+0xf24>)
 801ba42:	4824      	ldr	r0, [pc, #144]	; (801bad4 <tcp_receive+0xf28>)
 801ba44:	f005 fa12 	bl	8020e6c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801ba48:	e011      	b.n	801ba6e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801ba4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ba4c:	681b      	ldr	r3, [r3, #0]
 801ba4e:	63bb      	str	r3, [r7, #56]	; 0x38
 801ba50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ba52:	2b00      	cmp	r3, #0
 801ba54:	f47f aea4 	bne.w	801b7a0 <tcp_receive+0xbf4>
 801ba58:	e00a      	b.n	801ba70 <tcp_receive+0xec4>
                break;
 801ba5a:	bf00      	nop
 801ba5c:	e008      	b.n	801ba70 <tcp_receive+0xec4>
                break;
 801ba5e:	bf00      	nop
 801ba60:	e006      	b.n	801ba70 <tcp_receive+0xec4>
                  break;
 801ba62:	bf00      	nop
 801ba64:	e004      	b.n	801ba70 <tcp_receive+0xec4>
                  break;
 801ba66:	bf00      	nop
 801ba68:	e002      	b.n	801ba70 <tcp_receive+0xec4>
                  break;
 801ba6a:	bf00      	nop
 801ba6c:	e000      	b.n	801ba70 <tcp_receive+0xec4>
                break;
 801ba6e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801ba70:	6878      	ldr	r0, [r7, #4]
 801ba72:	f001 fe8b 	bl	801d78c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801ba76:	e003      	b.n	801ba80 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801ba78:	6878      	ldr	r0, [r7, #4]
 801ba7a:	f001 fe87 	bl	801d78c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801ba7e:	e01a      	b.n	801bab6 <tcp_receive+0xf0a>
 801ba80:	e019      	b.n	801bab6 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801ba82:	4b0f      	ldr	r3, [pc, #60]	; (801bac0 <tcp_receive+0xf14>)
 801ba84:	681a      	ldr	r2, [r3, #0]
 801ba86:	687b      	ldr	r3, [r7, #4]
 801ba88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ba8a:	1ad3      	subs	r3, r2, r3
 801ba8c:	2b00      	cmp	r3, #0
 801ba8e:	db0a      	blt.n	801baa6 <tcp_receive+0xefa>
 801ba90:	4b0b      	ldr	r3, [pc, #44]	; (801bac0 <tcp_receive+0xf14>)
 801ba92:	681a      	ldr	r2, [r3, #0]
 801ba94:	687b      	ldr	r3, [r7, #4]
 801ba96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ba98:	6879      	ldr	r1, [r7, #4]
 801ba9a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801ba9c:	440b      	add	r3, r1
 801ba9e:	1ad3      	subs	r3, r2, r3
 801baa0:	3301      	adds	r3, #1
 801baa2:	2b00      	cmp	r3, #0
 801baa4:	dd07      	ble.n	801bab6 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801baa6:	687b      	ldr	r3, [r7, #4]
 801baa8:	8b5b      	ldrh	r3, [r3, #26]
 801baaa:	f043 0302 	orr.w	r3, r3, #2
 801baae:	b29a      	uxth	r2, r3
 801bab0:	687b      	ldr	r3, [r7, #4]
 801bab2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801bab4:	e7ff      	b.n	801bab6 <tcp_receive+0xf0a>
 801bab6:	bf00      	nop
 801bab8:	3750      	adds	r7, #80	; 0x50
 801baba:	46bd      	mov	sp, r7
 801babc:	bdb0      	pop	{r4, r5, r7, pc}
 801babe:	bf00      	nop
 801bac0:	240048c0 	.word	0x240048c0
 801bac4:	240048a0 	.word	0x240048a0
 801bac8:	240048ca 	.word	0x240048ca
 801bacc:	080278e8 	.word	0x080278e8
 801bad0:	08027cbc 	.word	0x08027cbc
 801bad4:	08027960 	.word	0x08027960

0801bad8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801bad8:	b480      	push	{r7}
 801bada:	b083      	sub	sp, #12
 801badc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801bade:	4b15      	ldr	r3, [pc, #84]	; (801bb34 <tcp_get_next_optbyte+0x5c>)
 801bae0:	881b      	ldrh	r3, [r3, #0]
 801bae2:	1c5a      	adds	r2, r3, #1
 801bae4:	b291      	uxth	r1, r2
 801bae6:	4a13      	ldr	r2, [pc, #76]	; (801bb34 <tcp_get_next_optbyte+0x5c>)
 801bae8:	8011      	strh	r1, [r2, #0]
 801baea:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801baec:	4b12      	ldr	r3, [pc, #72]	; (801bb38 <tcp_get_next_optbyte+0x60>)
 801baee:	681b      	ldr	r3, [r3, #0]
 801baf0:	2b00      	cmp	r3, #0
 801baf2:	d004      	beq.n	801bafe <tcp_get_next_optbyte+0x26>
 801baf4:	4b11      	ldr	r3, [pc, #68]	; (801bb3c <tcp_get_next_optbyte+0x64>)
 801baf6:	881b      	ldrh	r3, [r3, #0]
 801baf8:	88fa      	ldrh	r2, [r7, #6]
 801bafa:	429a      	cmp	r2, r3
 801bafc:	d208      	bcs.n	801bb10 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801bafe:	4b10      	ldr	r3, [pc, #64]	; (801bb40 <tcp_get_next_optbyte+0x68>)
 801bb00:	681b      	ldr	r3, [r3, #0]
 801bb02:	3314      	adds	r3, #20
 801bb04:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801bb06:	88fb      	ldrh	r3, [r7, #6]
 801bb08:	683a      	ldr	r2, [r7, #0]
 801bb0a:	4413      	add	r3, r2
 801bb0c:	781b      	ldrb	r3, [r3, #0]
 801bb0e:	e00b      	b.n	801bb28 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801bb10:	88fb      	ldrh	r3, [r7, #6]
 801bb12:	b2da      	uxtb	r2, r3
 801bb14:	4b09      	ldr	r3, [pc, #36]	; (801bb3c <tcp_get_next_optbyte+0x64>)
 801bb16:	881b      	ldrh	r3, [r3, #0]
 801bb18:	b2db      	uxtb	r3, r3
 801bb1a:	1ad3      	subs	r3, r2, r3
 801bb1c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801bb1e:	4b06      	ldr	r3, [pc, #24]	; (801bb38 <tcp_get_next_optbyte+0x60>)
 801bb20:	681a      	ldr	r2, [r3, #0]
 801bb22:	797b      	ldrb	r3, [r7, #5]
 801bb24:	4413      	add	r3, r2
 801bb26:	781b      	ldrb	r3, [r3, #0]
  }
}
 801bb28:	4618      	mov	r0, r3
 801bb2a:	370c      	adds	r7, #12
 801bb2c:	46bd      	mov	sp, r7
 801bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb32:	4770      	bx	lr
 801bb34:	240048bc 	.word	0x240048bc
 801bb38:	240048b8 	.word	0x240048b8
 801bb3c:	240048b6 	.word	0x240048b6
 801bb40:	240048b0 	.word	0x240048b0

0801bb44 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801bb44:	b580      	push	{r7, lr}
 801bb46:	b084      	sub	sp, #16
 801bb48:	af00      	add	r7, sp, #0
 801bb4a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801bb4c:	687b      	ldr	r3, [r7, #4]
 801bb4e:	2b00      	cmp	r3, #0
 801bb50:	d106      	bne.n	801bb60 <tcp_parseopt+0x1c>
 801bb52:	4b32      	ldr	r3, [pc, #200]	; (801bc1c <tcp_parseopt+0xd8>)
 801bb54:	f240 727d 	movw	r2, #1917	; 0x77d
 801bb58:	4931      	ldr	r1, [pc, #196]	; (801bc20 <tcp_parseopt+0xdc>)
 801bb5a:	4832      	ldr	r0, [pc, #200]	; (801bc24 <tcp_parseopt+0xe0>)
 801bb5c:	f005 f986 	bl	8020e6c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801bb60:	4b31      	ldr	r3, [pc, #196]	; (801bc28 <tcp_parseopt+0xe4>)
 801bb62:	881b      	ldrh	r3, [r3, #0]
 801bb64:	2b00      	cmp	r3, #0
 801bb66:	d055      	beq.n	801bc14 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801bb68:	4b30      	ldr	r3, [pc, #192]	; (801bc2c <tcp_parseopt+0xe8>)
 801bb6a:	2200      	movs	r2, #0
 801bb6c:	801a      	strh	r2, [r3, #0]
 801bb6e:	e045      	b.n	801bbfc <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801bb70:	f7ff ffb2 	bl	801bad8 <tcp_get_next_optbyte>
 801bb74:	4603      	mov	r3, r0
 801bb76:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801bb78:	7bfb      	ldrb	r3, [r7, #15]
 801bb7a:	2b02      	cmp	r3, #2
 801bb7c:	d006      	beq.n	801bb8c <tcp_parseopt+0x48>
 801bb7e:	2b02      	cmp	r3, #2
 801bb80:	dc2b      	bgt.n	801bbda <tcp_parseopt+0x96>
 801bb82:	2b00      	cmp	r3, #0
 801bb84:	d041      	beq.n	801bc0a <tcp_parseopt+0xc6>
 801bb86:	2b01      	cmp	r3, #1
 801bb88:	d127      	bne.n	801bbda <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801bb8a:	e037      	b.n	801bbfc <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801bb8c:	f7ff ffa4 	bl	801bad8 <tcp_get_next_optbyte>
 801bb90:	4603      	mov	r3, r0
 801bb92:	2b04      	cmp	r3, #4
 801bb94:	d13b      	bne.n	801bc0e <tcp_parseopt+0xca>
 801bb96:	4b25      	ldr	r3, [pc, #148]	; (801bc2c <tcp_parseopt+0xe8>)
 801bb98:	881b      	ldrh	r3, [r3, #0]
 801bb9a:	3301      	adds	r3, #1
 801bb9c:	4a22      	ldr	r2, [pc, #136]	; (801bc28 <tcp_parseopt+0xe4>)
 801bb9e:	8812      	ldrh	r2, [r2, #0]
 801bba0:	4293      	cmp	r3, r2
 801bba2:	da34      	bge.n	801bc0e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801bba4:	f7ff ff98 	bl	801bad8 <tcp_get_next_optbyte>
 801bba8:	4603      	mov	r3, r0
 801bbaa:	b29b      	uxth	r3, r3
 801bbac:	021b      	lsls	r3, r3, #8
 801bbae:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801bbb0:	f7ff ff92 	bl	801bad8 <tcp_get_next_optbyte>
 801bbb4:	4603      	mov	r3, r0
 801bbb6:	b29a      	uxth	r2, r3
 801bbb8:	89bb      	ldrh	r3, [r7, #12]
 801bbba:	4313      	orrs	r3, r2
 801bbbc:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801bbbe:	89bb      	ldrh	r3, [r7, #12]
 801bbc0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801bbc4:	d804      	bhi.n	801bbd0 <tcp_parseopt+0x8c>
 801bbc6:	89bb      	ldrh	r3, [r7, #12]
 801bbc8:	2b00      	cmp	r3, #0
 801bbca:	d001      	beq.n	801bbd0 <tcp_parseopt+0x8c>
 801bbcc:	89ba      	ldrh	r2, [r7, #12]
 801bbce:	e001      	b.n	801bbd4 <tcp_parseopt+0x90>
 801bbd0:	f44f 7206 	mov.w	r2, #536	; 0x218
 801bbd4:	687b      	ldr	r3, [r7, #4]
 801bbd6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801bbd8:	e010      	b.n	801bbfc <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801bbda:	f7ff ff7d 	bl	801bad8 <tcp_get_next_optbyte>
 801bbde:	4603      	mov	r3, r0
 801bbe0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801bbe2:	7afb      	ldrb	r3, [r7, #11]
 801bbe4:	2b01      	cmp	r3, #1
 801bbe6:	d914      	bls.n	801bc12 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801bbe8:	7afb      	ldrb	r3, [r7, #11]
 801bbea:	b29a      	uxth	r2, r3
 801bbec:	4b0f      	ldr	r3, [pc, #60]	; (801bc2c <tcp_parseopt+0xe8>)
 801bbee:	881b      	ldrh	r3, [r3, #0]
 801bbf0:	4413      	add	r3, r2
 801bbf2:	b29b      	uxth	r3, r3
 801bbf4:	3b02      	subs	r3, #2
 801bbf6:	b29a      	uxth	r2, r3
 801bbf8:	4b0c      	ldr	r3, [pc, #48]	; (801bc2c <tcp_parseopt+0xe8>)
 801bbfa:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801bbfc:	4b0b      	ldr	r3, [pc, #44]	; (801bc2c <tcp_parseopt+0xe8>)
 801bbfe:	881a      	ldrh	r2, [r3, #0]
 801bc00:	4b09      	ldr	r3, [pc, #36]	; (801bc28 <tcp_parseopt+0xe4>)
 801bc02:	881b      	ldrh	r3, [r3, #0]
 801bc04:	429a      	cmp	r2, r3
 801bc06:	d3b3      	bcc.n	801bb70 <tcp_parseopt+0x2c>
 801bc08:	e004      	b.n	801bc14 <tcp_parseopt+0xd0>
          return;
 801bc0a:	bf00      	nop
 801bc0c:	e002      	b.n	801bc14 <tcp_parseopt+0xd0>
            return;
 801bc0e:	bf00      	nop
 801bc10:	e000      	b.n	801bc14 <tcp_parseopt+0xd0>
            return;
 801bc12:	bf00      	nop
      }
    }
  }
}
 801bc14:	3710      	adds	r7, #16
 801bc16:	46bd      	mov	sp, r7
 801bc18:	bd80      	pop	{r7, pc}
 801bc1a:	bf00      	nop
 801bc1c:	080278e8 	.word	0x080278e8
 801bc20:	08027d78 	.word	0x08027d78
 801bc24:	08027960 	.word	0x08027960
 801bc28:	240048b4 	.word	0x240048b4
 801bc2c:	240048bc 	.word	0x240048bc

0801bc30 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801bc30:	b480      	push	{r7}
 801bc32:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801bc34:	4b05      	ldr	r3, [pc, #20]	; (801bc4c <tcp_trigger_input_pcb_close+0x1c>)
 801bc36:	781b      	ldrb	r3, [r3, #0]
 801bc38:	f043 0310 	orr.w	r3, r3, #16
 801bc3c:	b2da      	uxtb	r2, r3
 801bc3e:	4b03      	ldr	r3, [pc, #12]	; (801bc4c <tcp_trigger_input_pcb_close+0x1c>)
 801bc40:	701a      	strb	r2, [r3, #0]
}
 801bc42:	bf00      	nop
 801bc44:	46bd      	mov	sp, r7
 801bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc4a:	4770      	bx	lr
 801bc4c:	240048cd 	.word	0x240048cd

0801bc50 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801bc50:	b580      	push	{r7, lr}
 801bc52:	b084      	sub	sp, #16
 801bc54:	af00      	add	r7, sp, #0
 801bc56:	60f8      	str	r0, [r7, #12]
 801bc58:	60b9      	str	r1, [r7, #8]
 801bc5a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801bc5c:	68fb      	ldr	r3, [r7, #12]
 801bc5e:	2b00      	cmp	r3, #0
 801bc60:	d00a      	beq.n	801bc78 <tcp_route+0x28>
 801bc62:	68fb      	ldr	r3, [r7, #12]
 801bc64:	7a1b      	ldrb	r3, [r3, #8]
 801bc66:	2b00      	cmp	r3, #0
 801bc68:	d006      	beq.n	801bc78 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801bc6a:	68fb      	ldr	r3, [r7, #12]
 801bc6c:	7a1b      	ldrb	r3, [r3, #8]
 801bc6e:	4618      	mov	r0, r3
 801bc70:	f7fa ff06 	bl	8016a80 <netif_get_by_index>
 801bc74:	4603      	mov	r3, r0
 801bc76:	e003      	b.n	801bc80 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801bc78:	6878      	ldr	r0, [r7, #4]
 801bc7a:	f7f8 fe3b 	bl	80148f4 <ip4_route>
 801bc7e:	4603      	mov	r3, r0
  }
}
 801bc80:	4618      	mov	r0, r3
 801bc82:	3710      	adds	r7, #16
 801bc84:	46bd      	mov	sp, r7
 801bc86:	bd80      	pop	{r7, pc}

0801bc88 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801bc88:	b590      	push	{r4, r7, lr}
 801bc8a:	b087      	sub	sp, #28
 801bc8c:	af00      	add	r7, sp, #0
 801bc8e:	60f8      	str	r0, [r7, #12]
 801bc90:	60b9      	str	r1, [r7, #8]
 801bc92:	603b      	str	r3, [r7, #0]
 801bc94:	4613      	mov	r3, r2
 801bc96:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801bc98:	68fb      	ldr	r3, [r7, #12]
 801bc9a:	2b00      	cmp	r3, #0
 801bc9c:	d105      	bne.n	801bcaa <tcp_create_segment+0x22>
 801bc9e:	4b44      	ldr	r3, [pc, #272]	; (801bdb0 <tcp_create_segment+0x128>)
 801bca0:	22a3      	movs	r2, #163	; 0xa3
 801bca2:	4944      	ldr	r1, [pc, #272]	; (801bdb4 <tcp_create_segment+0x12c>)
 801bca4:	4844      	ldr	r0, [pc, #272]	; (801bdb8 <tcp_create_segment+0x130>)
 801bca6:	f005 f8e1 	bl	8020e6c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801bcaa:	68bb      	ldr	r3, [r7, #8]
 801bcac:	2b00      	cmp	r3, #0
 801bcae:	d105      	bne.n	801bcbc <tcp_create_segment+0x34>
 801bcb0:	4b3f      	ldr	r3, [pc, #252]	; (801bdb0 <tcp_create_segment+0x128>)
 801bcb2:	22a4      	movs	r2, #164	; 0xa4
 801bcb4:	4941      	ldr	r1, [pc, #260]	; (801bdbc <tcp_create_segment+0x134>)
 801bcb6:	4840      	ldr	r0, [pc, #256]	; (801bdb8 <tcp_create_segment+0x130>)
 801bcb8:	f005 f8d8 	bl	8020e6c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801bcbc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801bcc0:	009b      	lsls	r3, r3, #2
 801bcc2:	b2db      	uxtb	r3, r3
 801bcc4:	f003 0304 	and.w	r3, r3, #4
 801bcc8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801bcca:	2003      	movs	r0, #3
 801bccc:	f7fa fb52 	bl	8016374 <memp_malloc>
 801bcd0:	6138      	str	r0, [r7, #16]
 801bcd2:	693b      	ldr	r3, [r7, #16]
 801bcd4:	2b00      	cmp	r3, #0
 801bcd6:	d104      	bne.n	801bce2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801bcd8:	68b8      	ldr	r0, [r7, #8]
 801bcda:	f7fb fa31 	bl	8017140 <pbuf_free>
    return NULL;
 801bcde:	2300      	movs	r3, #0
 801bce0:	e061      	b.n	801bda6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801bce2:	693b      	ldr	r3, [r7, #16]
 801bce4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801bce8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801bcea:	693b      	ldr	r3, [r7, #16]
 801bcec:	2200      	movs	r2, #0
 801bcee:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801bcf0:	693b      	ldr	r3, [r7, #16]
 801bcf2:	68ba      	ldr	r2, [r7, #8]
 801bcf4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801bcf6:	68bb      	ldr	r3, [r7, #8]
 801bcf8:	891a      	ldrh	r2, [r3, #8]
 801bcfa:	7dfb      	ldrb	r3, [r7, #23]
 801bcfc:	b29b      	uxth	r3, r3
 801bcfe:	429a      	cmp	r2, r3
 801bd00:	d205      	bcs.n	801bd0e <tcp_create_segment+0x86>
 801bd02:	4b2b      	ldr	r3, [pc, #172]	; (801bdb0 <tcp_create_segment+0x128>)
 801bd04:	22b0      	movs	r2, #176	; 0xb0
 801bd06:	492e      	ldr	r1, [pc, #184]	; (801bdc0 <tcp_create_segment+0x138>)
 801bd08:	482b      	ldr	r0, [pc, #172]	; (801bdb8 <tcp_create_segment+0x130>)
 801bd0a:	f005 f8af 	bl	8020e6c <iprintf>
  seg->len = p->tot_len - optlen;
 801bd0e:	68bb      	ldr	r3, [r7, #8]
 801bd10:	891a      	ldrh	r2, [r3, #8]
 801bd12:	7dfb      	ldrb	r3, [r7, #23]
 801bd14:	b29b      	uxth	r3, r3
 801bd16:	1ad3      	subs	r3, r2, r3
 801bd18:	b29a      	uxth	r2, r3
 801bd1a:	693b      	ldr	r3, [r7, #16]
 801bd1c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801bd1e:	2114      	movs	r1, #20
 801bd20:	68b8      	ldr	r0, [r7, #8]
 801bd22:	f7fb f977 	bl	8017014 <pbuf_add_header>
 801bd26:	4603      	mov	r3, r0
 801bd28:	2b00      	cmp	r3, #0
 801bd2a:	d004      	beq.n	801bd36 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801bd2c:	6938      	ldr	r0, [r7, #16]
 801bd2e:	f7fd f804 	bl	8018d3a <tcp_seg_free>
    return NULL;
 801bd32:	2300      	movs	r3, #0
 801bd34:	e037      	b.n	801bda6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801bd36:	693b      	ldr	r3, [r7, #16]
 801bd38:	685b      	ldr	r3, [r3, #4]
 801bd3a:	685a      	ldr	r2, [r3, #4]
 801bd3c:	693b      	ldr	r3, [r7, #16]
 801bd3e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801bd40:	68fb      	ldr	r3, [r7, #12]
 801bd42:	8ada      	ldrh	r2, [r3, #22]
 801bd44:	693b      	ldr	r3, [r7, #16]
 801bd46:	68dc      	ldr	r4, [r3, #12]
 801bd48:	4610      	mov	r0, r2
 801bd4a:	f7f7 fafd 	bl	8013348 <lwip_htons>
 801bd4e:	4603      	mov	r3, r0
 801bd50:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801bd52:	68fb      	ldr	r3, [r7, #12]
 801bd54:	8b1a      	ldrh	r2, [r3, #24]
 801bd56:	693b      	ldr	r3, [r7, #16]
 801bd58:	68dc      	ldr	r4, [r3, #12]
 801bd5a:	4610      	mov	r0, r2
 801bd5c:	f7f7 faf4 	bl	8013348 <lwip_htons>
 801bd60:	4603      	mov	r3, r0
 801bd62:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801bd64:	693b      	ldr	r3, [r7, #16]
 801bd66:	68dc      	ldr	r4, [r3, #12]
 801bd68:	6838      	ldr	r0, [r7, #0]
 801bd6a:	f7f7 fb02 	bl	8013372 <lwip_htonl>
 801bd6e:	4603      	mov	r3, r0
 801bd70:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801bd72:	7dfb      	ldrb	r3, [r7, #23]
 801bd74:	089b      	lsrs	r3, r3, #2
 801bd76:	b2db      	uxtb	r3, r3
 801bd78:	b29b      	uxth	r3, r3
 801bd7a:	3305      	adds	r3, #5
 801bd7c:	b29b      	uxth	r3, r3
 801bd7e:	031b      	lsls	r3, r3, #12
 801bd80:	b29a      	uxth	r2, r3
 801bd82:	79fb      	ldrb	r3, [r7, #7]
 801bd84:	b29b      	uxth	r3, r3
 801bd86:	4313      	orrs	r3, r2
 801bd88:	b29a      	uxth	r2, r3
 801bd8a:	693b      	ldr	r3, [r7, #16]
 801bd8c:	68dc      	ldr	r4, [r3, #12]
 801bd8e:	4610      	mov	r0, r2
 801bd90:	f7f7 fada 	bl	8013348 <lwip_htons>
 801bd94:	4603      	mov	r3, r0
 801bd96:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801bd98:	693b      	ldr	r3, [r7, #16]
 801bd9a:	68db      	ldr	r3, [r3, #12]
 801bd9c:	2200      	movs	r2, #0
 801bd9e:	749a      	strb	r2, [r3, #18]
 801bda0:	2200      	movs	r2, #0
 801bda2:	74da      	strb	r2, [r3, #19]
  return seg;
 801bda4:	693b      	ldr	r3, [r7, #16]
}
 801bda6:	4618      	mov	r0, r3
 801bda8:	371c      	adds	r7, #28
 801bdaa:	46bd      	mov	sp, r7
 801bdac:	bd90      	pop	{r4, r7, pc}
 801bdae:	bf00      	nop
 801bdb0:	08027d94 	.word	0x08027d94
 801bdb4:	08027df4 	.word	0x08027df4
 801bdb8:	08027e14 	.word	0x08027e14
 801bdbc:	08027e3c 	.word	0x08027e3c
 801bdc0:	08027e60 	.word	0x08027e60

0801bdc4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801bdc4:	b580      	push	{r7, lr}
 801bdc6:	b086      	sub	sp, #24
 801bdc8:	af00      	add	r7, sp, #0
 801bdca:	607b      	str	r3, [r7, #4]
 801bdcc:	4603      	mov	r3, r0
 801bdce:	73fb      	strb	r3, [r7, #15]
 801bdd0:	460b      	mov	r3, r1
 801bdd2:	81bb      	strh	r3, [r7, #12]
 801bdd4:	4613      	mov	r3, r2
 801bdd6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801bdd8:	89bb      	ldrh	r3, [r7, #12]
 801bdda:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801bddc:	687b      	ldr	r3, [r7, #4]
 801bdde:	2b00      	cmp	r3, #0
 801bde0:	d105      	bne.n	801bdee <tcp_pbuf_prealloc+0x2a>
 801bde2:	4b30      	ldr	r3, [pc, #192]	; (801bea4 <tcp_pbuf_prealloc+0xe0>)
 801bde4:	22e8      	movs	r2, #232	; 0xe8
 801bde6:	4930      	ldr	r1, [pc, #192]	; (801bea8 <tcp_pbuf_prealloc+0xe4>)
 801bde8:	4830      	ldr	r0, [pc, #192]	; (801beac <tcp_pbuf_prealloc+0xe8>)
 801bdea:	f005 f83f 	bl	8020e6c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801bdee:	6a3b      	ldr	r3, [r7, #32]
 801bdf0:	2b00      	cmp	r3, #0
 801bdf2:	d105      	bne.n	801be00 <tcp_pbuf_prealloc+0x3c>
 801bdf4:	4b2b      	ldr	r3, [pc, #172]	; (801bea4 <tcp_pbuf_prealloc+0xe0>)
 801bdf6:	22e9      	movs	r2, #233	; 0xe9
 801bdf8:	492d      	ldr	r1, [pc, #180]	; (801beb0 <tcp_pbuf_prealloc+0xec>)
 801bdfa:	482c      	ldr	r0, [pc, #176]	; (801beac <tcp_pbuf_prealloc+0xe8>)
 801bdfc:	f005 f836 	bl	8020e6c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801be00:	89ba      	ldrh	r2, [r7, #12]
 801be02:	897b      	ldrh	r3, [r7, #10]
 801be04:	429a      	cmp	r2, r3
 801be06:	d221      	bcs.n	801be4c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801be08:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801be0c:	f003 0302 	and.w	r3, r3, #2
 801be10:	2b00      	cmp	r3, #0
 801be12:	d111      	bne.n	801be38 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801be14:	6a3b      	ldr	r3, [r7, #32]
 801be16:	8b5b      	ldrh	r3, [r3, #26]
 801be18:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801be1c:	2b00      	cmp	r3, #0
 801be1e:	d115      	bne.n	801be4c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801be20:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801be24:	2b00      	cmp	r3, #0
 801be26:	d007      	beq.n	801be38 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801be28:	6a3b      	ldr	r3, [r7, #32]
 801be2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801be2c:	2b00      	cmp	r3, #0
 801be2e:	d103      	bne.n	801be38 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801be30:	6a3b      	ldr	r3, [r7, #32]
 801be32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801be34:	2b00      	cmp	r3, #0
 801be36:	d009      	beq.n	801be4c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801be38:	89bb      	ldrh	r3, [r7, #12]
 801be3a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801be3e:	f023 0203 	bic.w	r2, r3, #3
 801be42:	897b      	ldrh	r3, [r7, #10]
 801be44:	4293      	cmp	r3, r2
 801be46:	bf28      	it	cs
 801be48:	4613      	movcs	r3, r2
 801be4a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801be4c:	8af9      	ldrh	r1, [r7, #22]
 801be4e:	7bfb      	ldrb	r3, [r7, #15]
 801be50:	f44f 7220 	mov.w	r2, #640	; 0x280
 801be54:	4618      	mov	r0, r3
 801be56:	f7fa fe8f 	bl	8016b78 <pbuf_alloc>
 801be5a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801be5c:	693b      	ldr	r3, [r7, #16]
 801be5e:	2b00      	cmp	r3, #0
 801be60:	d101      	bne.n	801be66 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801be62:	2300      	movs	r3, #0
 801be64:	e019      	b.n	801be9a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801be66:	693b      	ldr	r3, [r7, #16]
 801be68:	681b      	ldr	r3, [r3, #0]
 801be6a:	2b00      	cmp	r3, #0
 801be6c:	d006      	beq.n	801be7c <tcp_pbuf_prealloc+0xb8>
 801be6e:	4b0d      	ldr	r3, [pc, #52]	; (801bea4 <tcp_pbuf_prealloc+0xe0>)
 801be70:	f240 120b 	movw	r2, #267	; 0x10b
 801be74:	490f      	ldr	r1, [pc, #60]	; (801beb4 <tcp_pbuf_prealloc+0xf0>)
 801be76:	480d      	ldr	r0, [pc, #52]	; (801beac <tcp_pbuf_prealloc+0xe8>)
 801be78:	f004 fff8 	bl	8020e6c <iprintf>
  *oversize = p->len - length;
 801be7c:	693b      	ldr	r3, [r7, #16]
 801be7e:	895a      	ldrh	r2, [r3, #10]
 801be80:	89bb      	ldrh	r3, [r7, #12]
 801be82:	1ad3      	subs	r3, r2, r3
 801be84:	b29a      	uxth	r2, r3
 801be86:	687b      	ldr	r3, [r7, #4]
 801be88:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801be8a:	693b      	ldr	r3, [r7, #16]
 801be8c:	89ba      	ldrh	r2, [r7, #12]
 801be8e:	811a      	strh	r2, [r3, #8]
 801be90:	693b      	ldr	r3, [r7, #16]
 801be92:	891a      	ldrh	r2, [r3, #8]
 801be94:	693b      	ldr	r3, [r7, #16]
 801be96:	815a      	strh	r2, [r3, #10]
  return p;
 801be98:	693b      	ldr	r3, [r7, #16]
}
 801be9a:	4618      	mov	r0, r3
 801be9c:	3718      	adds	r7, #24
 801be9e:	46bd      	mov	sp, r7
 801bea0:	bd80      	pop	{r7, pc}
 801bea2:	bf00      	nop
 801bea4:	08027d94 	.word	0x08027d94
 801bea8:	08027e78 	.word	0x08027e78
 801beac:	08027e14 	.word	0x08027e14
 801beb0:	08027e9c 	.word	0x08027e9c
 801beb4:	08027ebc 	.word	0x08027ebc

0801beb8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801beb8:	b580      	push	{r7, lr}
 801beba:	b082      	sub	sp, #8
 801bebc:	af00      	add	r7, sp, #0
 801bebe:	6078      	str	r0, [r7, #4]
 801bec0:	460b      	mov	r3, r1
 801bec2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801bec4:	687b      	ldr	r3, [r7, #4]
 801bec6:	2b00      	cmp	r3, #0
 801bec8:	d106      	bne.n	801bed8 <tcp_write_checks+0x20>
 801beca:	4b33      	ldr	r3, [pc, #204]	; (801bf98 <tcp_write_checks+0xe0>)
 801becc:	f240 1233 	movw	r2, #307	; 0x133
 801bed0:	4932      	ldr	r1, [pc, #200]	; (801bf9c <tcp_write_checks+0xe4>)
 801bed2:	4833      	ldr	r0, [pc, #204]	; (801bfa0 <tcp_write_checks+0xe8>)
 801bed4:	f004 ffca 	bl	8020e6c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801bed8:	687b      	ldr	r3, [r7, #4]
 801beda:	7d1b      	ldrb	r3, [r3, #20]
 801bedc:	2b04      	cmp	r3, #4
 801bede:	d00e      	beq.n	801befe <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801bee0:	687b      	ldr	r3, [r7, #4]
 801bee2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801bee4:	2b07      	cmp	r3, #7
 801bee6:	d00a      	beq.n	801befe <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801bee8:	687b      	ldr	r3, [r7, #4]
 801beea:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801beec:	2b02      	cmp	r3, #2
 801beee:	d006      	beq.n	801befe <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801bef0:	687b      	ldr	r3, [r7, #4]
 801bef2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801bef4:	2b03      	cmp	r3, #3
 801bef6:	d002      	beq.n	801befe <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801bef8:	f06f 030a 	mvn.w	r3, #10
 801befc:	e048      	b.n	801bf90 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801befe:	887b      	ldrh	r3, [r7, #2]
 801bf00:	2b00      	cmp	r3, #0
 801bf02:	d101      	bne.n	801bf08 <tcp_write_checks+0x50>
    return ERR_OK;
 801bf04:	2300      	movs	r3, #0
 801bf06:	e043      	b.n	801bf90 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801bf08:	687b      	ldr	r3, [r7, #4]
 801bf0a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801bf0e:	887a      	ldrh	r2, [r7, #2]
 801bf10:	429a      	cmp	r2, r3
 801bf12:	d909      	bls.n	801bf28 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801bf14:	687b      	ldr	r3, [r7, #4]
 801bf16:	8b5b      	ldrh	r3, [r3, #26]
 801bf18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bf1c:	b29a      	uxth	r2, r3
 801bf1e:	687b      	ldr	r3, [r7, #4]
 801bf20:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801bf22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bf26:	e033      	b.n	801bf90 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801bf28:	687b      	ldr	r3, [r7, #4]
 801bf2a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801bf2e:	2b08      	cmp	r3, #8
 801bf30:	d909      	bls.n	801bf46 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801bf32:	687b      	ldr	r3, [r7, #4]
 801bf34:	8b5b      	ldrh	r3, [r3, #26]
 801bf36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bf3a:	b29a      	uxth	r2, r3
 801bf3c:	687b      	ldr	r3, [r7, #4]
 801bf3e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801bf40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bf44:	e024      	b.n	801bf90 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801bf46:	687b      	ldr	r3, [r7, #4]
 801bf48:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801bf4c:	2b00      	cmp	r3, #0
 801bf4e:	d00f      	beq.n	801bf70 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801bf50:	687b      	ldr	r3, [r7, #4]
 801bf52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bf54:	2b00      	cmp	r3, #0
 801bf56:	d11a      	bne.n	801bf8e <tcp_write_checks+0xd6>
 801bf58:	687b      	ldr	r3, [r7, #4]
 801bf5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bf5c:	2b00      	cmp	r3, #0
 801bf5e:	d116      	bne.n	801bf8e <tcp_write_checks+0xd6>
 801bf60:	4b0d      	ldr	r3, [pc, #52]	; (801bf98 <tcp_write_checks+0xe0>)
 801bf62:	f240 1255 	movw	r2, #341	; 0x155
 801bf66:	490f      	ldr	r1, [pc, #60]	; (801bfa4 <tcp_write_checks+0xec>)
 801bf68:	480d      	ldr	r0, [pc, #52]	; (801bfa0 <tcp_write_checks+0xe8>)
 801bf6a:	f004 ff7f 	bl	8020e6c <iprintf>
 801bf6e:	e00e      	b.n	801bf8e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801bf70:	687b      	ldr	r3, [r7, #4]
 801bf72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bf74:	2b00      	cmp	r3, #0
 801bf76:	d103      	bne.n	801bf80 <tcp_write_checks+0xc8>
 801bf78:	687b      	ldr	r3, [r7, #4]
 801bf7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bf7c:	2b00      	cmp	r3, #0
 801bf7e:	d006      	beq.n	801bf8e <tcp_write_checks+0xd6>
 801bf80:	4b05      	ldr	r3, [pc, #20]	; (801bf98 <tcp_write_checks+0xe0>)
 801bf82:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801bf86:	4908      	ldr	r1, [pc, #32]	; (801bfa8 <tcp_write_checks+0xf0>)
 801bf88:	4805      	ldr	r0, [pc, #20]	; (801bfa0 <tcp_write_checks+0xe8>)
 801bf8a:	f004 ff6f 	bl	8020e6c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801bf8e:	2300      	movs	r3, #0
}
 801bf90:	4618      	mov	r0, r3
 801bf92:	3708      	adds	r7, #8
 801bf94:	46bd      	mov	sp, r7
 801bf96:	bd80      	pop	{r7, pc}
 801bf98:	08027d94 	.word	0x08027d94
 801bf9c:	08027ed0 	.word	0x08027ed0
 801bfa0:	08027e14 	.word	0x08027e14
 801bfa4:	08027ef0 	.word	0x08027ef0
 801bfa8:	08027f2c 	.word	0x08027f2c

0801bfac <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801bfac:	b590      	push	{r4, r7, lr}
 801bfae:	b09b      	sub	sp, #108	; 0x6c
 801bfb0:	af04      	add	r7, sp, #16
 801bfb2:	60f8      	str	r0, [r7, #12]
 801bfb4:	60b9      	str	r1, [r7, #8]
 801bfb6:	4611      	mov	r1, r2
 801bfb8:	461a      	mov	r2, r3
 801bfba:	460b      	mov	r3, r1
 801bfbc:	80fb      	strh	r3, [r7, #6]
 801bfbe:	4613      	mov	r3, r2
 801bfc0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801bfc2:	2300      	movs	r3, #0
 801bfc4:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801bfc6:	2300      	movs	r3, #0
 801bfc8:	653b      	str	r3, [r7, #80]	; 0x50
 801bfca:	2300      	movs	r3, #0
 801bfcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 801bfce:	2300      	movs	r3, #0
 801bfd0:	64bb      	str	r3, [r7, #72]	; 0x48
 801bfd2:	2300      	movs	r3, #0
 801bfd4:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801bfd6:	2300      	movs	r3, #0
 801bfd8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801bfdc:	2300      	movs	r3, #0
 801bfde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801bfe2:	2300      	movs	r3, #0
 801bfe4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801bfe6:	2300      	movs	r3, #0
 801bfe8:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801bfea:	2300      	movs	r3, #0
 801bfec:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801bfee:	68fb      	ldr	r3, [r7, #12]
 801bff0:	2b00      	cmp	r3, #0
 801bff2:	d109      	bne.n	801c008 <tcp_write+0x5c>
 801bff4:	4ba4      	ldr	r3, [pc, #656]	; (801c288 <tcp_write+0x2dc>)
 801bff6:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801bffa:	49a4      	ldr	r1, [pc, #656]	; (801c28c <tcp_write+0x2e0>)
 801bffc:	48a4      	ldr	r0, [pc, #656]	; (801c290 <tcp_write+0x2e4>)
 801bffe:	f004 ff35 	bl	8020e6c <iprintf>
 801c002:	f06f 030f 	mvn.w	r3, #15
 801c006:	e32a      	b.n	801c65e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801c008:	68fb      	ldr	r3, [r7, #12]
 801c00a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801c00e:	085b      	lsrs	r3, r3, #1
 801c010:	b29a      	uxth	r2, r3
 801c012:	68fb      	ldr	r3, [r7, #12]
 801c014:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c016:	4293      	cmp	r3, r2
 801c018:	bf28      	it	cs
 801c01a:	4613      	movcs	r3, r2
 801c01c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801c01e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c020:	2b00      	cmp	r3, #0
 801c022:	d102      	bne.n	801c02a <tcp_write+0x7e>
 801c024:	68fb      	ldr	r3, [r7, #12]
 801c026:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c028:	e000      	b.n	801c02c <tcp_write+0x80>
 801c02a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c02c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801c02e:	68bb      	ldr	r3, [r7, #8]
 801c030:	2b00      	cmp	r3, #0
 801c032:	d109      	bne.n	801c048 <tcp_write+0x9c>
 801c034:	4b94      	ldr	r3, [pc, #592]	; (801c288 <tcp_write+0x2dc>)
 801c036:	f240 12ad 	movw	r2, #429	; 0x1ad
 801c03a:	4996      	ldr	r1, [pc, #600]	; (801c294 <tcp_write+0x2e8>)
 801c03c:	4894      	ldr	r0, [pc, #592]	; (801c290 <tcp_write+0x2e4>)
 801c03e:	f004 ff15 	bl	8020e6c <iprintf>
 801c042:	f06f 030f 	mvn.w	r3, #15
 801c046:	e30a      	b.n	801c65e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801c048:	88fb      	ldrh	r3, [r7, #6]
 801c04a:	4619      	mov	r1, r3
 801c04c:	68f8      	ldr	r0, [r7, #12]
 801c04e:	f7ff ff33 	bl	801beb8 <tcp_write_checks>
 801c052:	4603      	mov	r3, r0
 801c054:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801c058:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801c05c:	2b00      	cmp	r3, #0
 801c05e:	d002      	beq.n	801c066 <tcp_write+0xba>
    return err;
 801c060:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801c064:	e2fb      	b.n	801c65e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801c066:	68fb      	ldr	r3, [r7, #12]
 801c068:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c06c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801c070:	2300      	movs	r3, #0
 801c072:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801c076:	68fb      	ldr	r3, [r7, #12]
 801c078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c07a:	2b00      	cmp	r3, #0
 801c07c:	f000 80f6 	beq.w	801c26c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801c080:	68fb      	ldr	r3, [r7, #12]
 801c082:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c084:	653b      	str	r3, [r7, #80]	; 0x50
 801c086:	e002      	b.n	801c08e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801c088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c08a:	681b      	ldr	r3, [r3, #0]
 801c08c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801c08e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c090:	681b      	ldr	r3, [r3, #0]
 801c092:	2b00      	cmp	r3, #0
 801c094:	d1f8      	bne.n	801c088 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801c096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c098:	7a9b      	ldrb	r3, [r3, #10]
 801c09a:	009b      	lsls	r3, r3, #2
 801c09c:	b29b      	uxth	r3, r3
 801c09e:	f003 0304 	and.w	r3, r3, #4
 801c0a2:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801c0a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801c0a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c0a8:	891b      	ldrh	r3, [r3, #8]
 801c0aa:	4619      	mov	r1, r3
 801c0ac:	8c3b      	ldrh	r3, [r7, #32]
 801c0ae:	440b      	add	r3, r1
 801c0b0:	429a      	cmp	r2, r3
 801c0b2:	da06      	bge.n	801c0c2 <tcp_write+0x116>
 801c0b4:	4b74      	ldr	r3, [pc, #464]	; (801c288 <tcp_write+0x2dc>)
 801c0b6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801c0ba:	4977      	ldr	r1, [pc, #476]	; (801c298 <tcp_write+0x2ec>)
 801c0bc:	4874      	ldr	r0, [pc, #464]	; (801c290 <tcp_write+0x2e4>)
 801c0be:	f004 fed5 	bl	8020e6c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801c0c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c0c4:	891a      	ldrh	r2, [r3, #8]
 801c0c6:	8c3b      	ldrh	r3, [r7, #32]
 801c0c8:	4413      	add	r3, r2
 801c0ca:	b29b      	uxth	r3, r3
 801c0cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801c0ce:	1ad3      	subs	r3, r2, r3
 801c0d0:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801c0d2:	68fb      	ldr	r3, [r7, #12]
 801c0d4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801c0d8:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801c0da:	8a7b      	ldrh	r3, [r7, #18]
 801c0dc:	2b00      	cmp	r3, #0
 801c0de:	d026      	beq.n	801c12e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801c0e0:	8a7b      	ldrh	r3, [r7, #18]
 801c0e2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801c0e4:	429a      	cmp	r2, r3
 801c0e6:	d206      	bcs.n	801c0f6 <tcp_write+0x14a>
 801c0e8:	4b67      	ldr	r3, [pc, #412]	; (801c288 <tcp_write+0x2dc>)
 801c0ea:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801c0ee:	496b      	ldr	r1, [pc, #428]	; (801c29c <tcp_write+0x2f0>)
 801c0f0:	4867      	ldr	r0, [pc, #412]	; (801c290 <tcp_write+0x2e4>)
 801c0f2:	f004 febb 	bl	8020e6c <iprintf>
      seg = last_unsent;
 801c0f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c0f8:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801c0fa:	8a7b      	ldrh	r3, [r7, #18]
 801c0fc:	88fa      	ldrh	r2, [r7, #6]
 801c0fe:	4293      	cmp	r3, r2
 801c100:	bf28      	it	cs
 801c102:	4613      	movcs	r3, r2
 801c104:	b29b      	uxth	r3, r3
 801c106:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801c108:	4293      	cmp	r3, r2
 801c10a:	bf28      	it	cs
 801c10c:	4613      	movcs	r3, r2
 801c10e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801c110:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c114:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c116:	4413      	add	r3, r2
 801c118:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801c11c:	8a7a      	ldrh	r2, [r7, #18]
 801c11e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c120:	1ad3      	subs	r3, r2, r3
 801c122:	b29b      	uxth	r3, r3
 801c124:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801c126:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801c128:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c12a:	1ad3      	subs	r3, r2, r3
 801c12c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801c12e:	8a7b      	ldrh	r3, [r7, #18]
 801c130:	2b00      	cmp	r3, #0
 801c132:	d00b      	beq.n	801c14c <tcp_write+0x1a0>
 801c134:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c138:	88fb      	ldrh	r3, [r7, #6]
 801c13a:	429a      	cmp	r2, r3
 801c13c:	d006      	beq.n	801c14c <tcp_write+0x1a0>
 801c13e:	4b52      	ldr	r3, [pc, #328]	; (801c288 <tcp_write+0x2dc>)
 801c140:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c144:	4956      	ldr	r1, [pc, #344]	; (801c2a0 <tcp_write+0x2f4>)
 801c146:	4852      	ldr	r0, [pc, #328]	; (801c290 <tcp_write+0x2e4>)
 801c148:	f004 fe90 	bl	8020e6c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801c14c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c150:	88fb      	ldrh	r3, [r7, #6]
 801c152:	429a      	cmp	r2, r3
 801c154:	f080 8167 	bcs.w	801c426 <tcp_write+0x47a>
 801c158:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801c15a:	2b00      	cmp	r3, #0
 801c15c:	f000 8163 	beq.w	801c426 <tcp_write+0x47a>
 801c160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c162:	891b      	ldrh	r3, [r3, #8]
 801c164:	2b00      	cmp	r3, #0
 801c166:	f000 815e 	beq.w	801c426 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801c16a:	88fa      	ldrh	r2, [r7, #6]
 801c16c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c170:	1ad2      	subs	r2, r2, r3
 801c172:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801c174:	4293      	cmp	r3, r2
 801c176:	bfa8      	it	ge
 801c178:	4613      	movge	r3, r2
 801c17a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801c17c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c17e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801c180:	797b      	ldrb	r3, [r7, #5]
 801c182:	f003 0301 	and.w	r3, r3, #1
 801c186:	2b00      	cmp	r3, #0
 801c188:	d027      	beq.n	801c1da <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801c18a:	f107 0012 	add.w	r0, r7, #18
 801c18e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801c190:	8bf9      	ldrh	r1, [r7, #30]
 801c192:	2301      	movs	r3, #1
 801c194:	9302      	str	r3, [sp, #8]
 801c196:	797b      	ldrb	r3, [r7, #5]
 801c198:	9301      	str	r3, [sp, #4]
 801c19a:	68fb      	ldr	r3, [r7, #12]
 801c19c:	9300      	str	r3, [sp, #0]
 801c19e:	4603      	mov	r3, r0
 801c1a0:	2000      	movs	r0, #0
 801c1a2:	f7ff fe0f 	bl	801bdc4 <tcp_pbuf_prealloc>
 801c1a6:	6578      	str	r0, [r7, #84]	; 0x54
 801c1a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c1aa:	2b00      	cmp	r3, #0
 801c1ac:	f000 8225 	beq.w	801c5fa <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801c1b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c1b2:	6858      	ldr	r0, [r3, #4]
 801c1b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c1b8:	68ba      	ldr	r2, [r7, #8]
 801c1ba:	4413      	add	r3, r2
 801c1bc:	8bfa      	ldrh	r2, [r7, #30]
 801c1be:	4619      	mov	r1, r3
 801c1c0:	f003 ff32 	bl	8020028 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801c1c4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801c1c6:	f7fb f843 	bl	8017250 <pbuf_clen>
 801c1ca:	4603      	mov	r3, r0
 801c1cc:	461a      	mov	r2, r3
 801c1ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801c1d2:	4413      	add	r3, r2
 801c1d4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801c1d8:	e041      	b.n	801c25e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801c1da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c1dc:	685b      	ldr	r3, [r3, #4]
 801c1de:	637b      	str	r3, [r7, #52]	; 0x34
 801c1e0:	e002      	b.n	801c1e8 <tcp_write+0x23c>
 801c1e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c1e4:	681b      	ldr	r3, [r3, #0]
 801c1e6:	637b      	str	r3, [r7, #52]	; 0x34
 801c1e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c1ea:	681b      	ldr	r3, [r3, #0]
 801c1ec:	2b00      	cmp	r3, #0
 801c1ee:	d1f8      	bne.n	801c1e2 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801c1f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c1f2:	7b1b      	ldrb	r3, [r3, #12]
 801c1f4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801c1f8:	2b00      	cmp	r3, #0
 801c1fa:	d115      	bne.n	801c228 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801c1fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c1fe:	685b      	ldr	r3, [r3, #4]
 801c200:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c202:	8952      	ldrh	r2, [r2, #10]
 801c204:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801c206:	68ba      	ldr	r2, [r7, #8]
 801c208:	429a      	cmp	r2, r3
 801c20a:	d10d      	bne.n	801c228 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801c20c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c210:	2b00      	cmp	r3, #0
 801c212:	d006      	beq.n	801c222 <tcp_write+0x276>
 801c214:	4b1c      	ldr	r3, [pc, #112]	; (801c288 <tcp_write+0x2dc>)
 801c216:	f240 2231 	movw	r2, #561	; 0x231
 801c21a:	4922      	ldr	r1, [pc, #136]	; (801c2a4 <tcp_write+0x2f8>)
 801c21c:	481c      	ldr	r0, [pc, #112]	; (801c290 <tcp_write+0x2e4>)
 801c21e:	f004 fe25 	bl	8020e6c <iprintf>
          extendlen = seglen;
 801c222:	8bfb      	ldrh	r3, [r7, #30]
 801c224:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801c226:	e01a      	b.n	801c25e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801c228:	8bfb      	ldrh	r3, [r7, #30]
 801c22a:	2201      	movs	r2, #1
 801c22c:	4619      	mov	r1, r3
 801c22e:	2000      	movs	r0, #0
 801c230:	f7fa fca2 	bl	8016b78 <pbuf_alloc>
 801c234:	6578      	str	r0, [r7, #84]	; 0x54
 801c236:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c238:	2b00      	cmp	r3, #0
 801c23a:	f000 81e0 	beq.w	801c5fe <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801c23e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c242:	68ba      	ldr	r2, [r7, #8]
 801c244:	441a      	add	r2, r3
 801c246:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c248:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801c24a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801c24c:	f7fb f800 	bl	8017250 <pbuf_clen>
 801c250:	4603      	mov	r3, r0
 801c252:	461a      	mov	r2, r3
 801c254:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801c258:	4413      	add	r3, r2
 801c25a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801c25e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c262:	8bfb      	ldrh	r3, [r7, #30]
 801c264:	4413      	add	r3, r2
 801c266:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801c26a:	e0dc      	b.n	801c426 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801c26c:	68fb      	ldr	r3, [r7, #12]
 801c26e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801c272:	2b00      	cmp	r3, #0
 801c274:	f000 80d7 	beq.w	801c426 <tcp_write+0x47a>
 801c278:	4b03      	ldr	r3, [pc, #12]	; (801c288 <tcp_write+0x2dc>)
 801c27a:	f240 224a 	movw	r2, #586	; 0x24a
 801c27e:	490a      	ldr	r1, [pc, #40]	; (801c2a8 <tcp_write+0x2fc>)
 801c280:	4803      	ldr	r0, [pc, #12]	; (801c290 <tcp_write+0x2e4>)
 801c282:	f004 fdf3 	bl	8020e6c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801c286:	e0ce      	b.n	801c426 <tcp_write+0x47a>
 801c288:	08027d94 	.word	0x08027d94
 801c28c:	08027f60 	.word	0x08027f60
 801c290:	08027e14 	.word	0x08027e14
 801c294:	08027f78 	.word	0x08027f78
 801c298:	08027fac 	.word	0x08027fac
 801c29c:	08027fc4 	.word	0x08027fc4
 801c2a0:	08027fe4 	.word	0x08027fe4
 801c2a4:	08028004 	.word	0x08028004
 801c2a8:	08028030 	.word	0x08028030
    struct pbuf *p;
    u16_t left = len - pos;
 801c2ac:	88fa      	ldrh	r2, [r7, #6]
 801c2ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c2b2:	1ad3      	subs	r3, r2, r3
 801c2b4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801c2b6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801c2ba:	b29b      	uxth	r3, r3
 801c2bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801c2be:	1ad3      	subs	r3, r2, r3
 801c2c0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801c2c2:	8b7a      	ldrh	r2, [r7, #26]
 801c2c4:	8bbb      	ldrh	r3, [r7, #28]
 801c2c6:	4293      	cmp	r3, r2
 801c2c8:	bf28      	it	cs
 801c2ca:	4613      	movcs	r3, r2
 801c2cc:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801c2ce:	797b      	ldrb	r3, [r7, #5]
 801c2d0:	f003 0301 	and.w	r3, r3, #1
 801c2d4:	2b00      	cmp	r3, #0
 801c2d6:	d036      	beq.n	801c346 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801c2d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801c2dc:	b29a      	uxth	r2, r3
 801c2de:	8b3b      	ldrh	r3, [r7, #24]
 801c2e0:	4413      	add	r3, r2
 801c2e2:	b299      	uxth	r1, r3
 801c2e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c2e6:	2b00      	cmp	r3, #0
 801c2e8:	bf0c      	ite	eq
 801c2ea:	2301      	moveq	r3, #1
 801c2ec:	2300      	movne	r3, #0
 801c2ee:	b2db      	uxtb	r3, r3
 801c2f0:	f107 0012 	add.w	r0, r7, #18
 801c2f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801c2f6:	9302      	str	r3, [sp, #8]
 801c2f8:	797b      	ldrb	r3, [r7, #5]
 801c2fa:	9301      	str	r3, [sp, #4]
 801c2fc:	68fb      	ldr	r3, [r7, #12]
 801c2fe:	9300      	str	r3, [sp, #0]
 801c300:	4603      	mov	r3, r0
 801c302:	2036      	movs	r0, #54	; 0x36
 801c304:	f7ff fd5e 	bl	801bdc4 <tcp_pbuf_prealloc>
 801c308:	6338      	str	r0, [r7, #48]	; 0x30
 801c30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c30c:	2b00      	cmp	r3, #0
 801c30e:	f000 8178 	beq.w	801c602 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801c312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c314:	895b      	ldrh	r3, [r3, #10]
 801c316:	8b3a      	ldrh	r2, [r7, #24]
 801c318:	429a      	cmp	r2, r3
 801c31a:	d906      	bls.n	801c32a <tcp_write+0x37e>
 801c31c:	4b8c      	ldr	r3, [pc, #560]	; (801c550 <tcp_write+0x5a4>)
 801c31e:	f240 2266 	movw	r2, #614	; 0x266
 801c322:	498c      	ldr	r1, [pc, #560]	; (801c554 <tcp_write+0x5a8>)
 801c324:	488c      	ldr	r0, [pc, #560]	; (801c558 <tcp_write+0x5ac>)
 801c326:	f004 fda1 	bl	8020e6c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801c32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c32c:	685a      	ldr	r2, [r3, #4]
 801c32e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801c332:	18d0      	adds	r0, r2, r3
 801c334:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c338:	68ba      	ldr	r2, [r7, #8]
 801c33a:	4413      	add	r3, r2
 801c33c:	8b3a      	ldrh	r2, [r7, #24]
 801c33e:	4619      	mov	r1, r3
 801c340:	f003 fe72 	bl	8020028 <memcpy>
 801c344:	e02f      	b.n	801c3a6 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801c346:	8a7b      	ldrh	r3, [r7, #18]
 801c348:	2b00      	cmp	r3, #0
 801c34a:	d006      	beq.n	801c35a <tcp_write+0x3ae>
 801c34c:	4b80      	ldr	r3, [pc, #512]	; (801c550 <tcp_write+0x5a4>)
 801c34e:	f240 2271 	movw	r2, #625	; 0x271
 801c352:	4982      	ldr	r1, [pc, #520]	; (801c55c <tcp_write+0x5b0>)
 801c354:	4880      	ldr	r0, [pc, #512]	; (801c558 <tcp_write+0x5ac>)
 801c356:	f004 fd89 	bl	8020e6c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801c35a:	8b3b      	ldrh	r3, [r7, #24]
 801c35c:	2201      	movs	r2, #1
 801c35e:	4619      	mov	r1, r3
 801c360:	2036      	movs	r0, #54	; 0x36
 801c362:	f7fa fc09 	bl	8016b78 <pbuf_alloc>
 801c366:	6178      	str	r0, [r7, #20]
 801c368:	697b      	ldr	r3, [r7, #20]
 801c36a:	2b00      	cmp	r3, #0
 801c36c:	f000 814b 	beq.w	801c606 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801c370:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c374:	68ba      	ldr	r2, [r7, #8]
 801c376:	441a      	add	r2, r3
 801c378:	697b      	ldr	r3, [r7, #20]
 801c37a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801c37c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801c380:	b29b      	uxth	r3, r3
 801c382:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c386:	4619      	mov	r1, r3
 801c388:	2036      	movs	r0, #54	; 0x36
 801c38a:	f7fa fbf5 	bl	8016b78 <pbuf_alloc>
 801c38e:	6338      	str	r0, [r7, #48]	; 0x30
 801c390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c392:	2b00      	cmp	r3, #0
 801c394:	d103      	bne.n	801c39e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801c396:	6978      	ldr	r0, [r7, #20]
 801c398:	f7fa fed2 	bl	8017140 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801c39c:	e136      	b.n	801c60c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801c39e:	6979      	ldr	r1, [r7, #20]
 801c3a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c3a2:	f7fa ff8f 	bl	80172c4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801c3a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c3a8:	f7fa ff52 	bl	8017250 <pbuf_clen>
 801c3ac:	4603      	mov	r3, r0
 801c3ae:	461a      	mov	r2, r3
 801c3b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801c3b4:	4413      	add	r3, r2
 801c3b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801c3ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801c3be:	2b09      	cmp	r3, #9
 801c3c0:	d903      	bls.n	801c3ca <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801c3c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c3c4:	f7fa febc 	bl	8017140 <pbuf_free>
      goto memerr;
 801c3c8:	e120      	b.n	801c60c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801c3ca:	68fb      	ldr	r3, [r7, #12]
 801c3cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801c3ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c3d2:	441a      	add	r2, r3
 801c3d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c3d8:	9300      	str	r3, [sp, #0]
 801c3da:	4613      	mov	r3, r2
 801c3dc:	2200      	movs	r2, #0
 801c3de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c3e0:	68f8      	ldr	r0, [r7, #12]
 801c3e2:	f7ff fc51 	bl	801bc88 <tcp_create_segment>
 801c3e6:	64f8      	str	r0, [r7, #76]	; 0x4c
 801c3e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c3ea:	2b00      	cmp	r3, #0
 801c3ec:	f000 810d 	beq.w	801c60a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801c3f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c3f2:	2b00      	cmp	r3, #0
 801c3f4:	d102      	bne.n	801c3fc <tcp_write+0x450>
      queue = seg;
 801c3f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c3f8:	647b      	str	r3, [r7, #68]	; 0x44
 801c3fa:	e00c      	b.n	801c416 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801c3fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c3fe:	2b00      	cmp	r3, #0
 801c400:	d106      	bne.n	801c410 <tcp_write+0x464>
 801c402:	4b53      	ldr	r3, [pc, #332]	; (801c550 <tcp_write+0x5a4>)
 801c404:	f240 22ab 	movw	r2, #683	; 0x2ab
 801c408:	4955      	ldr	r1, [pc, #340]	; (801c560 <tcp_write+0x5b4>)
 801c40a:	4853      	ldr	r0, [pc, #332]	; (801c558 <tcp_write+0x5ac>)
 801c40c:	f004 fd2e 	bl	8020e6c <iprintf>
      prev_seg->next = seg;
 801c410:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c412:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c414:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801c416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c418:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801c41a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c41e:	8b3b      	ldrh	r3, [r7, #24]
 801c420:	4413      	add	r3, r2
 801c422:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801c426:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c42a:	88fb      	ldrh	r3, [r7, #6]
 801c42c:	429a      	cmp	r2, r3
 801c42e:	f4ff af3d 	bcc.w	801c2ac <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801c432:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c434:	2b00      	cmp	r3, #0
 801c436:	d02c      	beq.n	801c492 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801c438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c43a:	685b      	ldr	r3, [r3, #4]
 801c43c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c43e:	e01e      	b.n	801c47e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801c440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c442:	891a      	ldrh	r2, [r3, #8]
 801c444:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c446:	4413      	add	r3, r2
 801c448:	b29a      	uxth	r2, r3
 801c44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c44c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801c44e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c450:	681b      	ldr	r3, [r3, #0]
 801c452:	2b00      	cmp	r3, #0
 801c454:	d110      	bne.n	801c478 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801c456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c458:	685b      	ldr	r3, [r3, #4]
 801c45a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c45c:	8952      	ldrh	r2, [r2, #10]
 801c45e:	4413      	add	r3, r2
 801c460:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801c462:	68b9      	ldr	r1, [r7, #8]
 801c464:	4618      	mov	r0, r3
 801c466:	f003 fddf 	bl	8020028 <memcpy>
        p->len += oversize_used;
 801c46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c46c:	895a      	ldrh	r2, [r3, #10]
 801c46e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c470:	4413      	add	r3, r2
 801c472:	b29a      	uxth	r2, r3
 801c474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c476:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801c478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c47a:	681b      	ldr	r3, [r3, #0]
 801c47c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c480:	2b00      	cmp	r3, #0
 801c482:	d1dd      	bne.n	801c440 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801c484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c486:	891a      	ldrh	r2, [r3, #8]
 801c488:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c48a:	4413      	add	r3, r2
 801c48c:	b29a      	uxth	r2, r3
 801c48e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c490:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801c492:	8a7a      	ldrh	r2, [r7, #18]
 801c494:	68fb      	ldr	r3, [r7, #12]
 801c496:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801c49a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c49c:	2b00      	cmp	r3, #0
 801c49e:	d018      	beq.n	801c4d2 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801c4a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c4a2:	2b00      	cmp	r3, #0
 801c4a4:	d106      	bne.n	801c4b4 <tcp_write+0x508>
 801c4a6:	4b2a      	ldr	r3, [pc, #168]	; (801c550 <tcp_write+0x5a4>)
 801c4a8:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801c4ac:	492d      	ldr	r1, [pc, #180]	; (801c564 <tcp_write+0x5b8>)
 801c4ae:	482a      	ldr	r0, [pc, #168]	; (801c558 <tcp_write+0x5ac>)
 801c4b0:	f004 fcdc 	bl	8020e6c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801c4b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c4b6:	685b      	ldr	r3, [r3, #4]
 801c4b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801c4ba:	4618      	mov	r0, r3
 801c4bc:	f7fa ff02 	bl	80172c4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801c4c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c4c2:	891a      	ldrh	r2, [r3, #8]
 801c4c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c4c6:	891b      	ldrh	r3, [r3, #8]
 801c4c8:	4413      	add	r3, r2
 801c4ca:	b29a      	uxth	r2, r3
 801c4cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c4ce:	811a      	strh	r2, [r3, #8]
 801c4d0:	e037      	b.n	801c542 <tcp_write+0x596>
  } else if (extendlen > 0) {
 801c4d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c4d4:	2b00      	cmp	r3, #0
 801c4d6:	d034      	beq.n	801c542 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801c4d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c4da:	2b00      	cmp	r3, #0
 801c4dc:	d003      	beq.n	801c4e6 <tcp_write+0x53a>
 801c4de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c4e0:	685b      	ldr	r3, [r3, #4]
 801c4e2:	2b00      	cmp	r3, #0
 801c4e4:	d106      	bne.n	801c4f4 <tcp_write+0x548>
 801c4e6:	4b1a      	ldr	r3, [pc, #104]	; (801c550 <tcp_write+0x5a4>)
 801c4e8:	f240 22e6 	movw	r2, #742	; 0x2e6
 801c4ec:	491e      	ldr	r1, [pc, #120]	; (801c568 <tcp_write+0x5bc>)
 801c4ee:	481a      	ldr	r0, [pc, #104]	; (801c558 <tcp_write+0x5ac>)
 801c4f0:	f004 fcbc 	bl	8020e6c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801c4f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c4f6:	685b      	ldr	r3, [r3, #4]
 801c4f8:	62bb      	str	r3, [r7, #40]	; 0x28
 801c4fa:	e009      	b.n	801c510 <tcp_write+0x564>
      p->tot_len += extendlen;
 801c4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c4fe:	891a      	ldrh	r2, [r3, #8]
 801c500:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c502:	4413      	add	r3, r2
 801c504:	b29a      	uxth	r2, r3
 801c506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c508:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801c50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c50c:	681b      	ldr	r3, [r3, #0]
 801c50e:	62bb      	str	r3, [r7, #40]	; 0x28
 801c510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c512:	681b      	ldr	r3, [r3, #0]
 801c514:	2b00      	cmp	r3, #0
 801c516:	d1f1      	bne.n	801c4fc <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801c518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c51a:	891a      	ldrh	r2, [r3, #8]
 801c51c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c51e:	4413      	add	r3, r2
 801c520:	b29a      	uxth	r2, r3
 801c522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c524:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801c526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c528:	895a      	ldrh	r2, [r3, #10]
 801c52a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c52c:	4413      	add	r3, r2
 801c52e:	b29a      	uxth	r2, r3
 801c530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c532:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801c534:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c536:	891a      	ldrh	r2, [r3, #8]
 801c538:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c53a:	4413      	add	r3, r2
 801c53c:	b29a      	uxth	r2, r3
 801c53e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c540:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801c542:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c544:	2b00      	cmp	r3, #0
 801c546:	d111      	bne.n	801c56c <tcp_write+0x5c0>
    pcb->unsent = queue;
 801c548:	68fb      	ldr	r3, [r7, #12]
 801c54a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c54c:	66da      	str	r2, [r3, #108]	; 0x6c
 801c54e:	e010      	b.n	801c572 <tcp_write+0x5c6>
 801c550:	08027d94 	.word	0x08027d94
 801c554:	08028060 	.word	0x08028060
 801c558:	08027e14 	.word	0x08027e14
 801c55c:	080280a0 	.word	0x080280a0
 801c560:	080280b0 	.word	0x080280b0
 801c564:	080280c4 	.word	0x080280c4
 801c568:	080280fc 	.word	0x080280fc
  } else {
    last_unsent->next = queue;
 801c56c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c56e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c570:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801c572:	68fb      	ldr	r3, [r7, #12]
 801c574:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801c576:	88fb      	ldrh	r3, [r7, #6]
 801c578:	441a      	add	r2, r3
 801c57a:	68fb      	ldr	r3, [r7, #12]
 801c57c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801c57e:	68fb      	ldr	r3, [r7, #12]
 801c580:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801c584:	88fb      	ldrh	r3, [r7, #6]
 801c586:	1ad3      	subs	r3, r2, r3
 801c588:	b29a      	uxth	r2, r3
 801c58a:	68fb      	ldr	r3, [r7, #12]
 801c58c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801c590:	68fb      	ldr	r3, [r7, #12]
 801c592:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801c596:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801c59a:	68fb      	ldr	r3, [r7, #12]
 801c59c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c5a0:	2b00      	cmp	r3, #0
 801c5a2:	d00e      	beq.n	801c5c2 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801c5a4:	68fb      	ldr	r3, [r7, #12]
 801c5a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c5a8:	2b00      	cmp	r3, #0
 801c5aa:	d10a      	bne.n	801c5c2 <tcp_write+0x616>
 801c5ac:	68fb      	ldr	r3, [r7, #12]
 801c5ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c5b0:	2b00      	cmp	r3, #0
 801c5b2:	d106      	bne.n	801c5c2 <tcp_write+0x616>
 801c5b4:	4b2c      	ldr	r3, [pc, #176]	; (801c668 <tcp_write+0x6bc>)
 801c5b6:	f240 3212 	movw	r2, #786	; 0x312
 801c5ba:	492c      	ldr	r1, [pc, #176]	; (801c66c <tcp_write+0x6c0>)
 801c5bc:	482c      	ldr	r0, [pc, #176]	; (801c670 <tcp_write+0x6c4>)
 801c5be:	f004 fc55 	bl	8020e6c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801c5c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c5c4:	2b00      	cmp	r3, #0
 801c5c6:	d016      	beq.n	801c5f6 <tcp_write+0x64a>
 801c5c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c5ca:	68db      	ldr	r3, [r3, #12]
 801c5cc:	2b00      	cmp	r3, #0
 801c5ce:	d012      	beq.n	801c5f6 <tcp_write+0x64a>
 801c5d0:	797b      	ldrb	r3, [r7, #5]
 801c5d2:	f003 0302 	and.w	r3, r3, #2
 801c5d6:	2b00      	cmp	r3, #0
 801c5d8:	d10d      	bne.n	801c5f6 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801c5da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c5dc:	68db      	ldr	r3, [r3, #12]
 801c5de:	899b      	ldrh	r3, [r3, #12]
 801c5e0:	b29c      	uxth	r4, r3
 801c5e2:	2008      	movs	r0, #8
 801c5e4:	f7f6 feb0 	bl	8013348 <lwip_htons>
 801c5e8:	4603      	mov	r3, r0
 801c5ea:	461a      	mov	r2, r3
 801c5ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c5ee:	68db      	ldr	r3, [r3, #12]
 801c5f0:	4322      	orrs	r2, r4
 801c5f2:	b292      	uxth	r2, r2
 801c5f4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801c5f6:	2300      	movs	r3, #0
 801c5f8:	e031      	b.n	801c65e <tcp_write+0x6b2>
          goto memerr;
 801c5fa:	bf00      	nop
 801c5fc:	e006      	b.n	801c60c <tcp_write+0x660>
            goto memerr;
 801c5fe:	bf00      	nop
 801c600:	e004      	b.n	801c60c <tcp_write+0x660>
        goto memerr;
 801c602:	bf00      	nop
 801c604:	e002      	b.n	801c60c <tcp_write+0x660>
        goto memerr;
 801c606:	bf00      	nop
 801c608:	e000      	b.n	801c60c <tcp_write+0x660>
      goto memerr;
 801c60a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c60c:	68fb      	ldr	r3, [r7, #12]
 801c60e:	8b5b      	ldrh	r3, [r3, #26]
 801c610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c614:	b29a      	uxth	r2, r3
 801c616:	68fb      	ldr	r3, [r7, #12]
 801c618:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801c61a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c61c:	2b00      	cmp	r3, #0
 801c61e:	d002      	beq.n	801c626 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801c620:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801c622:	f7fa fd8d 	bl	8017140 <pbuf_free>
  }
  if (queue != NULL) {
 801c626:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c628:	2b00      	cmp	r3, #0
 801c62a:	d002      	beq.n	801c632 <tcp_write+0x686>
    tcp_segs_free(queue);
 801c62c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801c62e:	f7fc fb6f 	bl	8018d10 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801c632:	68fb      	ldr	r3, [r7, #12]
 801c634:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c638:	2b00      	cmp	r3, #0
 801c63a:	d00e      	beq.n	801c65a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801c63c:	68fb      	ldr	r3, [r7, #12]
 801c63e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c640:	2b00      	cmp	r3, #0
 801c642:	d10a      	bne.n	801c65a <tcp_write+0x6ae>
 801c644:	68fb      	ldr	r3, [r7, #12]
 801c646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c648:	2b00      	cmp	r3, #0
 801c64a:	d106      	bne.n	801c65a <tcp_write+0x6ae>
 801c64c:	4b06      	ldr	r3, [pc, #24]	; (801c668 <tcp_write+0x6bc>)
 801c64e:	f240 3227 	movw	r2, #807	; 0x327
 801c652:	4906      	ldr	r1, [pc, #24]	; (801c66c <tcp_write+0x6c0>)
 801c654:	4806      	ldr	r0, [pc, #24]	; (801c670 <tcp_write+0x6c4>)
 801c656:	f004 fc09 	bl	8020e6c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801c65a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801c65e:	4618      	mov	r0, r3
 801c660:	375c      	adds	r7, #92	; 0x5c
 801c662:	46bd      	mov	sp, r7
 801c664:	bd90      	pop	{r4, r7, pc}
 801c666:	bf00      	nop
 801c668:	08027d94 	.word	0x08027d94
 801c66c:	08028134 	.word	0x08028134
 801c670:	08027e14 	.word	0x08027e14

0801c674 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801c674:	b590      	push	{r4, r7, lr}
 801c676:	b08b      	sub	sp, #44	; 0x2c
 801c678:	af02      	add	r7, sp, #8
 801c67a:	6078      	str	r0, [r7, #4]
 801c67c:	460b      	mov	r3, r1
 801c67e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801c680:	2300      	movs	r3, #0
 801c682:	61fb      	str	r3, [r7, #28]
 801c684:	2300      	movs	r3, #0
 801c686:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801c688:	2300      	movs	r3, #0
 801c68a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801c68c:	687b      	ldr	r3, [r7, #4]
 801c68e:	2b00      	cmp	r3, #0
 801c690:	d106      	bne.n	801c6a0 <tcp_split_unsent_seg+0x2c>
 801c692:	4b95      	ldr	r3, [pc, #596]	; (801c8e8 <tcp_split_unsent_seg+0x274>)
 801c694:	f240 324b 	movw	r2, #843	; 0x34b
 801c698:	4994      	ldr	r1, [pc, #592]	; (801c8ec <tcp_split_unsent_seg+0x278>)
 801c69a:	4895      	ldr	r0, [pc, #596]	; (801c8f0 <tcp_split_unsent_seg+0x27c>)
 801c69c:	f004 fbe6 	bl	8020e6c <iprintf>

  useg = pcb->unsent;
 801c6a0:	687b      	ldr	r3, [r7, #4]
 801c6a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c6a4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801c6a6:	697b      	ldr	r3, [r7, #20]
 801c6a8:	2b00      	cmp	r3, #0
 801c6aa:	d102      	bne.n	801c6b2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801c6ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c6b0:	e116      	b.n	801c8e0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801c6b2:	887b      	ldrh	r3, [r7, #2]
 801c6b4:	2b00      	cmp	r3, #0
 801c6b6:	d109      	bne.n	801c6cc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801c6b8:	4b8b      	ldr	r3, [pc, #556]	; (801c8e8 <tcp_split_unsent_seg+0x274>)
 801c6ba:	f240 3253 	movw	r2, #851	; 0x353
 801c6be:	498d      	ldr	r1, [pc, #564]	; (801c8f4 <tcp_split_unsent_seg+0x280>)
 801c6c0:	488b      	ldr	r0, [pc, #556]	; (801c8f0 <tcp_split_unsent_seg+0x27c>)
 801c6c2:	f004 fbd3 	bl	8020e6c <iprintf>
    return ERR_VAL;
 801c6c6:	f06f 0305 	mvn.w	r3, #5
 801c6ca:	e109      	b.n	801c8e0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801c6cc:	697b      	ldr	r3, [r7, #20]
 801c6ce:	891b      	ldrh	r3, [r3, #8]
 801c6d0:	887a      	ldrh	r2, [r7, #2]
 801c6d2:	429a      	cmp	r2, r3
 801c6d4:	d301      	bcc.n	801c6da <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801c6d6:	2300      	movs	r3, #0
 801c6d8:	e102      	b.n	801c8e0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801c6da:	687b      	ldr	r3, [r7, #4]
 801c6dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c6de:	887a      	ldrh	r2, [r7, #2]
 801c6e0:	429a      	cmp	r2, r3
 801c6e2:	d906      	bls.n	801c6f2 <tcp_split_unsent_seg+0x7e>
 801c6e4:	4b80      	ldr	r3, [pc, #512]	; (801c8e8 <tcp_split_unsent_seg+0x274>)
 801c6e6:	f240 325b 	movw	r2, #859	; 0x35b
 801c6ea:	4983      	ldr	r1, [pc, #524]	; (801c8f8 <tcp_split_unsent_seg+0x284>)
 801c6ec:	4880      	ldr	r0, [pc, #512]	; (801c8f0 <tcp_split_unsent_seg+0x27c>)
 801c6ee:	f004 fbbd 	bl	8020e6c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801c6f2:	697b      	ldr	r3, [r7, #20]
 801c6f4:	891b      	ldrh	r3, [r3, #8]
 801c6f6:	2b00      	cmp	r3, #0
 801c6f8:	d106      	bne.n	801c708 <tcp_split_unsent_seg+0x94>
 801c6fa:	4b7b      	ldr	r3, [pc, #492]	; (801c8e8 <tcp_split_unsent_seg+0x274>)
 801c6fc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801c700:	497e      	ldr	r1, [pc, #504]	; (801c8fc <tcp_split_unsent_seg+0x288>)
 801c702:	487b      	ldr	r0, [pc, #492]	; (801c8f0 <tcp_split_unsent_seg+0x27c>)
 801c704:	f004 fbb2 	bl	8020e6c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801c708:	697b      	ldr	r3, [r7, #20]
 801c70a:	7a9b      	ldrb	r3, [r3, #10]
 801c70c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801c70e:	7bfb      	ldrb	r3, [r7, #15]
 801c710:	009b      	lsls	r3, r3, #2
 801c712:	b2db      	uxtb	r3, r3
 801c714:	f003 0304 	and.w	r3, r3, #4
 801c718:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801c71a:	697b      	ldr	r3, [r7, #20]
 801c71c:	891a      	ldrh	r2, [r3, #8]
 801c71e:	887b      	ldrh	r3, [r7, #2]
 801c720:	1ad3      	subs	r3, r2, r3
 801c722:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801c724:	7bbb      	ldrb	r3, [r7, #14]
 801c726:	b29a      	uxth	r2, r3
 801c728:	89bb      	ldrh	r3, [r7, #12]
 801c72a:	4413      	add	r3, r2
 801c72c:	b29b      	uxth	r3, r3
 801c72e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c732:	4619      	mov	r1, r3
 801c734:	2036      	movs	r0, #54	; 0x36
 801c736:	f7fa fa1f 	bl	8016b78 <pbuf_alloc>
 801c73a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801c73c:	693b      	ldr	r3, [r7, #16]
 801c73e:	2b00      	cmp	r3, #0
 801c740:	f000 80b7 	beq.w	801c8b2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801c744:	697b      	ldr	r3, [r7, #20]
 801c746:	685b      	ldr	r3, [r3, #4]
 801c748:	891a      	ldrh	r2, [r3, #8]
 801c74a:	697b      	ldr	r3, [r7, #20]
 801c74c:	891b      	ldrh	r3, [r3, #8]
 801c74e:	1ad3      	subs	r3, r2, r3
 801c750:	b29a      	uxth	r2, r3
 801c752:	887b      	ldrh	r3, [r7, #2]
 801c754:	4413      	add	r3, r2
 801c756:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801c758:	697b      	ldr	r3, [r7, #20]
 801c75a:	6858      	ldr	r0, [r3, #4]
 801c75c:	693b      	ldr	r3, [r7, #16]
 801c75e:	685a      	ldr	r2, [r3, #4]
 801c760:	7bbb      	ldrb	r3, [r7, #14]
 801c762:	18d1      	adds	r1, r2, r3
 801c764:	897b      	ldrh	r3, [r7, #10]
 801c766:	89ba      	ldrh	r2, [r7, #12]
 801c768:	f7fa fed4 	bl	8017514 <pbuf_copy_partial>
 801c76c:	4603      	mov	r3, r0
 801c76e:	461a      	mov	r2, r3
 801c770:	89bb      	ldrh	r3, [r7, #12]
 801c772:	4293      	cmp	r3, r2
 801c774:	f040 809f 	bne.w	801c8b6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801c778:	697b      	ldr	r3, [r7, #20]
 801c77a:	68db      	ldr	r3, [r3, #12]
 801c77c:	899b      	ldrh	r3, [r3, #12]
 801c77e:	b29b      	uxth	r3, r3
 801c780:	4618      	mov	r0, r3
 801c782:	f7f6 fde1 	bl	8013348 <lwip_htons>
 801c786:	4603      	mov	r3, r0
 801c788:	b2db      	uxtb	r3, r3
 801c78a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c78e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801c790:	2300      	movs	r3, #0
 801c792:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801c794:	7efb      	ldrb	r3, [r7, #27]
 801c796:	f003 0308 	and.w	r3, r3, #8
 801c79a:	2b00      	cmp	r3, #0
 801c79c:	d007      	beq.n	801c7ae <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801c79e:	7efb      	ldrb	r3, [r7, #27]
 801c7a0:	f023 0308 	bic.w	r3, r3, #8
 801c7a4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801c7a6:	7ebb      	ldrb	r3, [r7, #26]
 801c7a8:	f043 0308 	orr.w	r3, r3, #8
 801c7ac:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801c7ae:	7efb      	ldrb	r3, [r7, #27]
 801c7b0:	f003 0301 	and.w	r3, r3, #1
 801c7b4:	2b00      	cmp	r3, #0
 801c7b6:	d007      	beq.n	801c7c8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801c7b8:	7efb      	ldrb	r3, [r7, #27]
 801c7ba:	f023 0301 	bic.w	r3, r3, #1
 801c7be:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801c7c0:	7ebb      	ldrb	r3, [r7, #26]
 801c7c2:	f043 0301 	orr.w	r3, r3, #1
 801c7c6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801c7c8:	697b      	ldr	r3, [r7, #20]
 801c7ca:	68db      	ldr	r3, [r3, #12]
 801c7cc:	685b      	ldr	r3, [r3, #4]
 801c7ce:	4618      	mov	r0, r3
 801c7d0:	f7f6 fdcf 	bl	8013372 <lwip_htonl>
 801c7d4:	4602      	mov	r2, r0
 801c7d6:	887b      	ldrh	r3, [r7, #2]
 801c7d8:	18d1      	adds	r1, r2, r3
 801c7da:	7eba      	ldrb	r2, [r7, #26]
 801c7dc:	7bfb      	ldrb	r3, [r7, #15]
 801c7de:	9300      	str	r3, [sp, #0]
 801c7e0:	460b      	mov	r3, r1
 801c7e2:	6939      	ldr	r1, [r7, #16]
 801c7e4:	6878      	ldr	r0, [r7, #4]
 801c7e6:	f7ff fa4f 	bl	801bc88 <tcp_create_segment>
 801c7ea:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801c7ec:	69fb      	ldr	r3, [r7, #28]
 801c7ee:	2b00      	cmp	r3, #0
 801c7f0:	d063      	beq.n	801c8ba <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801c7f2:	697b      	ldr	r3, [r7, #20]
 801c7f4:	685b      	ldr	r3, [r3, #4]
 801c7f6:	4618      	mov	r0, r3
 801c7f8:	f7fa fd2a 	bl	8017250 <pbuf_clen>
 801c7fc:	4603      	mov	r3, r0
 801c7fe:	461a      	mov	r2, r3
 801c800:	687b      	ldr	r3, [r7, #4]
 801c802:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c806:	1a9b      	subs	r3, r3, r2
 801c808:	b29a      	uxth	r2, r3
 801c80a:	687b      	ldr	r3, [r7, #4]
 801c80c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801c810:	697b      	ldr	r3, [r7, #20]
 801c812:	6858      	ldr	r0, [r3, #4]
 801c814:	697b      	ldr	r3, [r7, #20]
 801c816:	685b      	ldr	r3, [r3, #4]
 801c818:	891a      	ldrh	r2, [r3, #8]
 801c81a:	89bb      	ldrh	r3, [r7, #12]
 801c81c:	1ad3      	subs	r3, r2, r3
 801c81e:	b29b      	uxth	r3, r3
 801c820:	4619      	mov	r1, r3
 801c822:	f7fa fb07 	bl	8016e34 <pbuf_realloc>
  useg->len -= remainder;
 801c826:	697b      	ldr	r3, [r7, #20]
 801c828:	891a      	ldrh	r2, [r3, #8]
 801c82a:	89bb      	ldrh	r3, [r7, #12]
 801c82c:	1ad3      	subs	r3, r2, r3
 801c82e:	b29a      	uxth	r2, r3
 801c830:	697b      	ldr	r3, [r7, #20]
 801c832:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801c834:	697b      	ldr	r3, [r7, #20]
 801c836:	68db      	ldr	r3, [r3, #12]
 801c838:	899b      	ldrh	r3, [r3, #12]
 801c83a:	b29c      	uxth	r4, r3
 801c83c:	7efb      	ldrb	r3, [r7, #27]
 801c83e:	b29b      	uxth	r3, r3
 801c840:	4618      	mov	r0, r3
 801c842:	f7f6 fd81 	bl	8013348 <lwip_htons>
 801c846:	4603      	mov	r3, r0
 801c848:	461a      	mov	r2, r3
 801c84a:	697b      	ldr	r3, [r7, #20]
 801c84c:	68db      	ldr	r3, [r3, #12]
 801c84e:	4322      	orrs	r2, r4
 801c850:	b292      	uxth	r2, r2
 801c852:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801c854:	697b      	ldr	r3, [r7, #20]
 801c856:	685b      	ldr	r3, [r3, #4]
 801c858:	4618      	mov	r0, r3
 801c85a:	f7fa fcf9 	bl	8017250 <pbuf_clen>
 801c85e:	4603      	mov	r3, r0
 801c860:	461a      	mov	r2, r3
 801c862:	687b      	ldr	r3, [r7, #4]
 801c864:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c868:	4413      	add	r3, r2
 801c86a:	b29a      	uxth	r2, r3
 801c86c:	687b      	ldr	r3, [r7, #4]
 801c86e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801c872:	69fb      	ldr	r3, [r7, #28]
 801c874:	685b      	ldr	r3, [r3, #4]
 801c876:	4618      	mov	r0, r3
 801c878:	f7fa fcea 	bl	8017250 <pbuf_clen>
 801c87c:	4603      	mov	r3, r0
 801c87e:	461a      	mov	r2, r3
 801c880:	687b      	ldr	r3, [r7, #4]
 801c882:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c886:	4413      	add	r3, r2
 801c888:	b29a      	uxth	r2, r3
 801c88a:	687b      	ldr	r3, [r7, #4]
 801c88c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801c890:	697b      	ldr	r3, [r7, #20]
 801c892:	681a      	ldr	r2, [r3, #0]
 801c894:	69fb      	ldr	r3, [r7, #28]
 801c896:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801c898:	697b      	ldr	r3, [r7, #20]
 801c89a:	69fa      	ldr	r2, [r7, #28]
 801c89c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801c89e:	69fb      	ldr	r3, [r7, #28]
 801c8a0:	681b      	ldr	r3, [r3, #0]
 801c8a2:	2b00      	cmp	r3, #0
 801c8a4:	d103      	bne.n	801c8ae <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801c8a6:	687b      	ldr	r3, [r7, #4]
 801c8a8:	2200      	movs	r2, #0
 801c8aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801c8ae:	2300      	movs	r3, #0
 801c8b0:	e016      	b.n	801c8e0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801c8b2:	bf00      	nop
 801c8b4:	e002      	b.n	801c8bc <tcp_split_unsent_seg+0x248>
    goto memerr;
 801c8b6:	bf00      	nop
 801c8b8:	e000      	b.n	801c8bc <tcp_split_unsent_seg+0x248>
    goto memerr;
 801c8ba:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801c8bc:	69fb      	ldr	r3, [r7, #28]
 801c8be:	2b00      	cmp	r3, #0
 801c8c0:	d006      	beq.n	801c8d0 <tcp_split_unsent_seg+0x25c>
 801c8c2:	4b09      	ldr	r3, [pc, #36]	; (801c8e8 <tcp_split_unsent_seg+0x274>)
 801c8c4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801c8c8:	490d      	ldr	r1, [pc, #52]	; (801c900 <tcp_split_unsent_seg+0x28c>)
 801c8ca:	4809      	ldr	r0, [pc, #36]	; (801c8f0 <tcp_split_unsent_seg+0x27c>)
 801c8cc:	f004 face 	bl	8020e6c <iprintf>
  if (p != NULL) {
 801c8d0:	693b      	ldr	r3, [r7, #16]
 801c8d2:	2b00      	cmp	r3, #0
 801c8d4:	d002      	beq.n	801c8dc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801c8d6:	6938      	ldr	r0, [r7, #16]
 801c8d8:	f7fa fc32 	bl	8017140 <pbuf_free>
  }

  return ERR_MEM;
 801c8dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801c8e0:	4618      	mov	r0, r3
 801c8e2:	3724      	adds	r7, #36	; 0x24
 801c8e4:	46bd      	mov	sp, r7
 801c8e6:	bd90      	pop	{r4, r7, pc}
 801c8e8:	08027d94 	.word	0x08027d94
 801c8ec:	08028154 	.word	0x08028154
 801c8f0:	08027e14 	.word	0x08027e14
 801c8f4:	08028178 	.word	0x08028178
 801c8f8:	0802819c 	.word	0x0802819c
 801c8fc:	080281ac 	.word	0x080281ac
 801c900:	080281bc 	.word	0x080281bc

0801c904 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801c904:	b590      	push	{r4, r7, lr}
 801c906:	b085      	sub	sp, #20
 801c908:	af00      	add	r7, sp, #0
 801c90a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801c90c:	687b      	ldr	r3, [r7, #4]
 801c90e:	2b00      	cmp	r3, #0
 801c910:	d106      	bne.n	801c920 <tcp_send_fin+0x1c>
 801c912:	4b21      	ldr	r3, [pc, #132]	; (801c998 <tcp_send_fin+0x94>)
 801c914:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801c918:	4920      	ldr	r1, [pc, #128]	; (801c99c <tcp_send_fin+0x98>)
 801c91a:	4821      	ldr	r0, [pc, #132]	; (801c9a0 <tcp_send_fin+0x9c>)
 801c91c:	f004 faa6 	bl	8020e6c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801c920:	687b      	ldr	r3, [r7, #4]
 801c922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c924:	2b00      	cmp	r3, #0
 801c926:	d02e      	beq.n	801c986 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801c928:	687b      	ldr	r3, [r7, #4]
 801c92a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c92c:	60fb      	str	r3, [r7, #12]
 801c92e:	e002      	b.n	801c936 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801c930:	68fb      	ldr	r3, [r7, #12]
 801c932:	681b      	ldr	r3, [r3, #0]
 801c934:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801c936:	68fb      	ldr	r3, [r7, #12]
 801c938:	681b      	ldr	r3, [r3, #0]
 801c93a:	2b00      	cmp	r3, #0
 801c93c:	d1f8      	bne.n	801c930 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801c93e:	68fb      	ldr	r3, [r7, #12]
 801c940:	68db      	ldr	r3, [r3, #12]
 801c942:	899b      	ldrh	r3, [r3, #12]
 801c944:	b29b      	uxth	r3, r3
 801c946:	4618      	mov	r0, r3
 801c948:	f7f6 fcfe 	bl	8013348 <lwip_htons>
 801c94c:	4603      	mov	r3, r0
 801c94e:	b2db      	uxtb	r3, r3
 801c950:	f003 0307 	and.w	r3, r3, #7
 801c954:	2b00      	cmp	r3, #0
 801c956:	d116      	bne.n	801c986 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801c958:	68fb      	ldr	r3, [r7, #12]
 801c95a:	68db      	ldr	r3, [r3, #12]
 801c95c:	899b      	ldrh	r3, [r3, #12]
 801c95e:	b29c      	uxth	r4, r3
 801c960:	2001      	movs	r0, #1
 801c962:	f7f6 fcf1 	bl	8013348 <lwip_htons>
 801c966:	4603      	mov	r3, r0
 801c968:	461a      	mov	r2, r3
 801c96a:	68fb      	ldr	r3, [r7, #12]
 801c96c:	68db      	ldr	r3, [r3, #12]
 801c96e:	4322      	orrs	r2, r4
 801c970:	b292      	uxth	r2, r2
 801c972:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801c974:	687b      	ldr	r3, [r7, #4]
 801c976:	8b5b      	ldrh	r3, [r3, #26]
 801c978:	f043 0320 	orr.w	r3, r3, #32
 801c97c:	b29a      	uxth	r2, r3
 801c97e:	687b      	ldr	r3, [r7, #4]
 801c980:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801c982:	2300      	movs	r3, #0
 801c984:	e004      	b.n	801c990 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801c986:	2101      	movs	r1, #1
 801c988:	6878      	ldr	r0, [r7, #4]
 801c98a:	f000 f80b 	bl	801c9a4 <tcp_enqueue_flags>
 801c98e:	4603      	mov	r3, r0
}
 801c990:	4618      	mov	r0, r3
 801c992:	3714      	adds	r7, #20
 801c994:	46bd      	mov	sp, r7
 801c996:	bd90      	pop	{r4, r7, pc}
 801c998:	08027d94 	.word	0x08027d94
 801c99c:	080281c8 	.word	0x080281c8
 801c9a0:	08027e14 	.word	0x08027e14

0801c9a4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801c9a4:	b580      	push	{r7, lr}
 801c9a6:	b08a      	sub	sp, #40	; 0x28
 801c9a8:	af02      	add	r7, sp, #8
 801c9aa:	6078      	str	r0, [r7, #4]
 801c9ac:	460b      	mov	r3, r1
 801c9ae:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801c9b0:	2300      	movs	r3, #0
 801c9b2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801c9b4:	2300      	movs	r3, #0
 801c9b6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801c9b8:	78fb      	ldrb	r3, [r7, #3]
 801c9ba:	f003 0303 	and.w	r3, r3, #3
 801c9be:	2b00      	cmp	r3, #0
 801c9c0:	d106      	bne.n	801c9d0 <tcp_enqueue_flags+0x2c>
 801c9c2:	4b67      	ldr	r3, [pc, #412]	; (801cb60 <tcp_enqueue_flags+0x1bc>)
 801c9c4:	f240 4211 	movw	r2, #1041	; 0x411
 801c9c8:	4966      	ldr	r1, [pc, #408]	; (801cb64 <tcp_enqueue_flags+0x1c0>)
 801c9ca:	4867      	ldr	r0, [pc, #412]	; (801cb68 <tcp_enqueue_flags+0x1c4>)
 801c9cc:	f004 fa4e 	bl	8020e6c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801c9d0:	687b      	ldr	r3, [r7, #4]
 801c9d2:	2b00      	cmp	r3, #0
 801c9d4:	d106      	bne.n	801c9e4 <tcp_enqueue_flags+0x40>
 801c9d6:	4b62      	ldr	r3, [pc, #392]	; (801cb60 <tcp_enqueue_flags+0x1bc>)
 801c9d8:	f240 4213 	movw	r2, #1043	; 0x413
 801c9dc:	4963      	ldr	r1, [pc, #396]	; (801cb6c <tcp_enqueue_flags+0x1c8>)
 801c9de:	4862      	ldr	r0, [pc, #392]	; (801cb68 <tcp_enqueue_flags+0x1c4>)
 801c9e0:	f004 fa44 	bl	8020e6c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801c9e4:	78fb      	ldrb	r3, [r7, #3]
 801c9e6:	f003 0302 	and.w	r3, r3, #2
 801c9ea:	2b00      	cmp	r3, #0
 801c9ec:	d001      	beq.n	801c9f2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801c9ee:	2301      	movs	r3, #1
 801c9f0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801c9f2:	7ffb      	ldrb	r3, [r7, #31]
 801c9f4:	009b      	lsls	r3, r3, #2
 801c9f6:	b2db      	uxtb	r3, r3
 801c9f8:	f003 0304 	and.w	r3, r3, #4
 801c9fc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801c9fe:	7dfb      	ldrb	r3, [r7, #23]
 801ca00:	b29b      	uxth	r3, r3
 801ca02:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ca06:	4619      	mov	r1, r3
 801ca08:	2036      	movs	r0, #54	; 0x36
 801ca0a:	f7fa f8b5 	bl	8016b78 <pbuf_alloc>
 801ca0e:	6138      	str	r0, [r7, #16]
 801ca10:	693b      	ldr	r3, [r7, #16]
 801ca12:	2b00      	cmp	r3, #0
 801ca14:	d109      	bne.n	801ca2a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ca16:	687b      	ldr	r3, [r7, #4]
 801ca18:	8b5b      	ldrh	r3, [r3, #26]
 801ca1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ca1e:	b29a      	uxth	r2, r3
 801ca20:	687b      	ldr	r3, [r7, #4]
 801ca22:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801ca24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ca28:	e095      	b.n	801cb56 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801ca2a:	693b      	ldr	r3, [r7, #16]
 801ca2c:	895a      	ldrh	r2, [r3, #10]
 801ca2e:	7dfb      	ldrb	r3, [r7, #23]
 801ca30:	b29b      	uxth	r3, r3
 801ca32:	429a      	cmp	r2, r3
 801ca34:	d206      	bcs.n	801ca44 <tcp_enqueue_flags+0xa0>
 801ca36:	4b4a      	ldr	r3, [pc, #296]	; (801cb60 <tcp_enqueue_flags+0x1bc>)
 801ca38:	f240 4239 	movw	r2, #1081	; 0x439
 801ca3c:	494c      	ldr	r1, [pc, #304]	; (801cb70 <tcp_enqueue_flags+0x1cc>)
 801ca3e:	484a      	ldr	r0, [pc, #296]	; (801cb68 <tcp_enqueue_flags+0x1c4>)
 801ca40:	f004 fa14 	bl	8020e6c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801ca44:	687b      	ldr	r3, [r7, #4]
 801ca46:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801ca48:	78fa      	ldrb	r2, [r7, #3]
 801ca4a:	7ffb      	ldrb	r3, [r7, #31]
 801ca4c:	9300      	str	r3, [sp, #0]
 801ca4e:	460b      	mov	r3, r1
 801ca50:	6939      	ldr	r1, [r7, #16]
 801ca52:	6878      	ldr	r0, [r7, #4]
 801ca54:	f7ff f918 	bl	801bc88 <tcp_create_segment>
 801ca58:	60f8      	str	r0, [r7, #12]
 801ca5a:	68fb      	ldr	r3, [r7, #12]
 801ca5c:	2b00      	cmp	r3, #0
 801ca5e:	d109      	bne.n	801ca74 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ca60:	687b      	ldr	r3, [r7, #4]
 801ca62:	8b5b      	ldrh	r3, [r3, #26]
 801ca64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ca68:	b29a      	uxth	r2, r3
 801ca6a:	687b      	ldr	r3, [r7, #4]
 801ca6c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801ca6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ca72:	e070      	b.n	801cb56 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801ca74:	68fb      	ldr	r3, [r7, #12]
 801ca76:	68db      	ldr	r3, [r3, #12]
 801ca78:	f003 0303 	and.w	r3, r3, #3
 801ca7c:	2b00      	cmp	r3, #0
 801ca7e:	d006      	beq.n	801ca8e <tcp_enqueue_flags+0xea>
 801ca80:	4b37      	ldr	r3, [pc, #220]	; (801cb60 <tcp_enqueue_flags+0x1bc>)
 801ca82:	f240 4242 	movw	r2, #1090	; 0x442
 801ca86:	493b      	ldr	r1, [pc, #236]	; (801cb74 <tcp_enqueue_flags+0x1d0>)
 801ca88:	4837      	ldr	r0, [pc, #220]	; (801cb68 <tcp_enqueue_flags+0x1c4>)
 801ca8a:	f004 f9ef 	bl	8020e6c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801ca8e:	68fb      	ldr	r3, [r7, #12]
 801ca90:	891b      	ldrh	r3, [r3, #8]
 801ca92:	2b00      	cmp	r3, #0
 801ca94:	d006      	beq.n	801caa4 <tcp_enqueue_flags+0x100>
 801ca96:	4b32      	ldr	r3, [pc, #200]	; (801cb60 <tcp_enqueue_flags+0x1bc>)
 801ca98:	f240 4243 	movw	r2, #1091	; 0x443
 801ca9c:	4936      	ldr	r1, [pc, #216]	; (801cb78 <tcp_enqueue_flags+0x1d4>)
 801ca9e:	4832      	ldr	r0, [pc, #200]	; (801cb68 <tcp_enqueue_flags+0x1c4>)
 801caa0:	f004 f9e4 	bl	8020e6c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801caa4:	687b      	ldr	r3, [r7, #4]
 801caa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801caa8:	2b00      	cmp	r3, #0
 801caaa:	d103      	bne.n	801cab4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801caac:	687b      	ldr	r3, [r7, #4]
 801caae:	68fa      	ldr	r2, [r7, #12]
 801cab0:	66da      	str	r2, [r3, #108]	; 0x6c
 801cab2:	e00d      	b.n	801cad0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801cab4:	687b      	ldr	r3, [r7, #4]
 801cab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cab8:	61bb      	str	r3, [r7, #24]
 801caba:	e002      	b.n	801cac2 <tcp_enqueue_flags+0x11e>
 801cabc:	69bb      	ldr	r3, [r7, #24]
 801cabe:	681b      	ldr	r3, [r3, #0]
 801cac0:	61bb      	str	r3, [r7, #24]
 801cac2:	69bb      	ldr	r3, [r7, #24]
 801cac4:	681b      	ldr	r3, [r3, #0]
 801cac6:	2b00      	cmp	r3, #0
 801cac8:	d1f8      	bne.n	801cabc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801caca:	69bb      	ldr	r3, [r7, #24]
 801cacc:	68fa      	ldr	r2, [r7, #12]
 801cace:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801cad0:	687b      	ldr	r3, [r7, #4]
 801cad2:	2200      	movs	r2, #0
 801cad4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801cad8:	78fb      	ldrb	r3, [r7, #3]
 801cada:	f003 0302 	and.w	r3, r3, #2
 801cade:	2b00      	cmp	r3, #0
 801cae0:	d104      	bne.n	801caec <tcp_enqueue_flags+0x148>
 801cae2:	78fb      	ldrb	r3, [r7, #3]
 801cae4:	f003 0301 	and.w	r3, r3, #1
 801cae8:	2b00      	cmp	r3, #0
 801caea:	d004      	beq.n	801caf6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801caec:	687b      	ldr	r3, [r7, #4]
 801caee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801caf0:	1c5a      	adds	r2, r3, #1
 801caf2:	687b      	ldr	r3, [r7, #4]
 801caf4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801caf6:	78fb      	ldrb	r3, [r7, #3]
 801caf8:	f003 0301 	and.w	r3, r3, #1
 801cafc:	2b00      	cmp	r3, #0
 801cafe:	d006      	beq.n	801cb0e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801cb00:	687b      	ldr	r3, [r7, #4]
 801cb02:	8b5b      	ldrh	r3, [r3, #26]
 801cb04:	f043 0320 	orr.w	r3, r3, #32
 801cb08:	b29a      	uxth	r2, r3
 801cb0a:	687b      	ldr	r3, [r7, #4]
 801cb0c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801cb0e:	68fb      	ldr	r3, [r7, #12]
 801cb10:	685b      	ldr	r3, [r3, #4]
 801cb12:	4618      	mov	r0, r3
 801cb14:	f7fa fb9c 	bl	8017250 <pbuf_clen>
 801cb18:	4603      	mov	r3, r0
 801cb1a:	461a      	mov	r2, r3
 801cb1c:	687b      	ldr	r3, [r7, #4]
 801cb1e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801cb22:	4413      	add	r3, r2
 801cb24:	b29a      	uxth	r2, r3
 801cb26:	687b      	ldr	r3, [r7, #4]
 801cb28:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801cb2c:	687b      	ldr	r3, [r7, #4]
 801cb2e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801cb32:	2b00      	cmp	r3, #0
 801cb34:	d00e      	beq.n	801cb54 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801cb36:	687b      	ldr	r3, [r7, #4]
 801cb38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cb3a:	2b00      	cmp	r3, #0
 801cb3c:	d10a      	bne.n	801cb54 <tcp_enqueue_flags+0x1b0>
 801cb3e:	687b      	ldr	r3, [r7, #4]
 801cb40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cb42:	2b00      	cmp	r3, #0
 801cb44:	d106      	bne.n	801cb54 <tcp_enqueue_flags+0x1b0>
 801cb46:	4b06      	ldr	r3, [pc, #24]	; (801cb60 <tcp_enqueue_flags+0x1bc>)
 801cb48:	f240 4265 	movw	r2, #1125	; 0x465
 801cb4c:	490b      	ldr	r1, [pc, #44]	; (801cb7c <tcp_enqueue_flags+0x1d8>)
 801cb4e:	4806      	ldr	r0, [pc, #24]	; (801cb68 <tcp_enqueue_flags+0x1c4>)
 801cb50:	f004 f98c 	bl	8020e6c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801cb54:	2300      	movs	r3, #0
}
 801cb56:	4618      	mov	r0, r3
 801cb58:	3720      	adds	r7, #32
 801cb5a:	46bd      	mov	sp, r7
 801cb5c:	bd80      	pop	{r7, pc}
 801cb5e:	bf00      	nop
 801cb60:	08027d94 	.word	0x08027d94
 801cb64:	080281e4 	.word	0x080281e4
 801cb68:	08027e14 	.word	0x08027e14
 801cb6c:	0802823c 	.word	0x0802823c
 801cb70:	0802825c 	.word	0x0802825c
 801cb74:	08028298 	.word	0x08028298
 801cb78:	080282b0 	.word	0x080282b0
 801cb7c:	080282dc 	.word	0x080282dc

0801cb80 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801cb80:	b5b0      	push	{r4, r5, r7, lr}
 801cb82:	b08a      	sub	sp, #40	; 0x28
 801cb84:	af00      	add	r7, sp, #0
 801cb86:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801cb88:	687b      	ldr	r3, [r7, #4]
 801cb8a:	2b00      	cmp	r3, #0
 801cb8c:	d106      	bne.n	801cb9c <tcp_output+0x1c>
 801cb8e:	4b9e      	ldr	r3, [pc, #632]	; (801ce08 <tcp_output+0x288>)
 801cb90:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801cb94:	499d      	ldr	r1, [pc, #628]	; (801ce0c <tcp_output+0x28c>)
 801cb96:	489e      	ldr	r0, [pc, #632]	; (801ce10 <tcp_output+0x290>)
 801cb98:	f004 f968 	bl	8020e6c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801cb9c:	687b      	ldr	r3, [r7, #4]
 801cb9e:	7d1b      	ldrb	r3, [r3, #20]
 801cba0:	2b01      	cmp	r3, #1
 801cba2:	d106      	bne.n	801cbb2 <tcp_output+0x32>
 801cba4:	4b98      	ldr	r3, [pc, #608]	; (801ce08 <tcp_output+0x288>)
 801cba6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801cbaa:	499a      	ldr	r1, [pc, #616]	; (801ce14 <tcp_output+0x294>)
 801cbac:	4898      	ldr	r0, [pc, #608]	; (801ce10 <tcp_output+0x290>)
 801cbae:	f004 f95d 	bl	8020e6c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801cbb2:	4b99      	ldr	r3, [pc, #612]	; (801ce18 <tcp_output+0x298>)
 801cbb4:	681b      	ldr	r3, [r3, #0]
 801cbb6:	687a      	ldr	r2, [r7, #4]
 801cbb8:	429a      	cmp	r2, r3
 801cbba:	d101      	bne.n	801cbc0 <tcp_output+0x40>
    return ERR_OK;
 801cbbc:	2300      	movs	r3, #0
 801cbbe:	e1ce      	b.n	801cf5e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801cbc0:	687b      	ldr	r3, [r7, #4]
 801cbc2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801cbc6:	687b      	ldr	r3, [r7, #4]
 801cbc8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801cbcc:	4293      	cmp	r3, r2
 801cbce:	bf28      	it	cs
 801cbd0:	4613      	movcs	r3, r2
 801cbd2:	b29b      	uxth	r3, r3
 801cbd4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801cbd6:	687b      	ldr	r3, [r7, #4]
 801cbd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cbda:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801cbdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbde:	2b00      	cmp	r3, #0
 801cbe0:	d10b      	bne.n	801cbfa <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801cbe2:	687b      	ldr	r3, [r7, #4]
 801cbe4:	8b5b      	ldrh	r3, [r3, #26]
 801cbe6:	f003 0302 	and.w	r3, r3, #2
 801cbea:	2b00      	cmp	r3, #0
 801cbec:	f000 81aa 	beq.w	801cf44 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801cbf0:	6878      	ldr	r0, [r7, #4]
 801cbf2:	f000 fdcb 	bl	801d78c <tcp_send_empty_ack>
 801cbf6:	4603      	mov	r3, r0
 801cbf8:	e1b1      	b.n	801cf5e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801cbfa:	6879      	ldr	r1, [r7, #4]
 801cbfc:	687b      	ldr	r3, [r7, #4]
 801cbfe:	3304      	adds	r3, #4
 801cc00:	461a      	mov	r2, r3
 801cc02:	6878      	ldr	r0, [r7, #4]
 801cc04:	f7ff f824 	bl	801bc50 <tcp_route>
 801cc08:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801cc0a:	697b      	ldr	r3, [r7, #20]
 801cc0c:	2b00      	cmp	r3, #0
 801cc0e:	d102      	bne.n	801cc16 <tcp_output+0x96>
    return ERR_RTE;
 801cc10:	f06f 0303 	mvn.w	r3, #3
 801cc14:	e1a3      	b.n	801cf5e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801cc16:	687b      	ldr	r3, [r7, #4]
 801cc18:	2b00      	cmp	r3, #0
 801cc1a:	d003      	beq.n	801cc24 <tcp_output+0xa4>
 801cc1c:	687b      	ldr	r3, [r7, #4]
 801cc1e:	681b      	ldr	r3, [r3, #0]
 801cc20:	2b00      	cmp	r3, #0
 801cc22:	d111      	bne.n	801cc48 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801cc24:	697b      	ldr	r3, [r7, #20]
 801cc26:	2b00      	cmp	r3, #0
 801cc28:	d002      	beq.n	801cc30 <tcp_output+0xb0>
 801cc2a:	697b      	ldr	r3, [r7, #20]
 801cc2c:	3304      	adds	r3, #4
 801cc2e:	e000      	b.n	801cc32 <tcp_output+0xb2>
 801cc30:	2300      	movs	r3, #0
 801cc32:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801cc34:	693b      	ldr	r3, [r7, #16]
 801cc36:	2b00      	cmp	r3, #0
 801cc38:	d102      	bne.n	801cc40 <tcp_output+0xc0>
      return ERR_RTE;
 801cc3a:	f06f 0303 	mvn.w	r3, #3
 801cc3e:	e18e      	b.n	801cf5e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801cc40:	693b      	ldr	r3, [r7, #16]
 801cc42:	681a      	ldr	r2, [r3, #0]
 801cc44:	687b      	ldr	r3, [r7, #4]
 801cc46:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801cc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc4a:	68db      	ldr	r3, [r3, #12]
 801cc4c:	685b      	ldr	r3, [r3, #4]
 801cc4e:	4618      	mov	r0, r3
 801cc50:	f7f6 fb8f 	bl	8013372 <lwip_htonl>
 801cc54:	4602      	mov	r2, r0
 801cc56:	687b      	ldr	r3, [r7, #4]
 801cc58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cc5a:	1ad3      	subs	r3, r2, r3
 801cc5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cc5e:	8912      	ldrh	r2, [r2, #8]
 801cc60:	4413      	add	r3, r2
 801cc62:	69ba      	ldr	r2, [r7, #24]
 801cc64:	429a      	cmp	r2, r3
 801cc66:	d227      	bcs.n	801ccb8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801cc68:	687b      	ldr	r3, [r7, #4]
 801cc6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801cc6e:	461a      	mov	r2, r3
 801cc70:	69bb      	ldr	r3, [r7, #24]
 801cc72:	4293      	cmp	r3, r2
 801cc74:	d114      	bne.n	801cca0 <tcp_output+0x120>
 801cc76:	687b      	ldr	r3, [r7, #4]
 801cc78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cc7a:	2b00      	cmp	r3, #0
 801cc7c:	d110      	bne.n	801cca0 <tcp_output+0x120>
 801cc7e:	687b      	ldr	r3, [r7, #4]
 801cc80:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801cc84:	2b00      	cmp	r3, #0
 801cc86:	d10b      	bne.n	801cca0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801cc88:	687b      	ldr	r3, [r7, #4]
 801cc8a:	2200      	movs	r2, #0
 801cc8c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801cc90:	687b      	ldr	r3, [r7, #4]
 801cc92:	2201      	movs	r2, #1
 801cc94:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801cc98:	687b      	ldr	r3, [r7, #4]
 801cc9a:	2200      	movs	r2, #0
 801cc9c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801cca0:	687b      	ldr	r3, [r7, #4]
 801cca2:	8b5b      	ldrh	r3, [r3, #26]
 801cca4:	f003 0302 	and.w	r3, r3, #2
 801cca8:	2b00      	cmp	r3, #0
 801ccaa:	f000 814d 	beq.w	801cf48 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801ccae:	6878      	ldr	r0, [r7, #4]
 801ccb0:	f000 fd6c 	bl	801d78c <tcp_send_empty_ack>
 801ccb4:	4603      	mov	r3, r0
 801ccb6:	e152      	b.n	801cf5e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801ccb8:	687b      	ldr	r3, [r7, #4]
 801ccba:	2200      	movs	r2, #0
 801ccbc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801ccc0:	687b      	ldr	r3, [r7, #4]
 801ccc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ccc4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801ccc6:	6a3b      	ldr	r3, [r7, #32]
 801ccc8:	2b00      	cmp	r3, #0
 801ccca:	f000 811c 	beq.w	801cf06 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801ccce:	e002      	b.n	801ccd6 <tcp_output+0x156>
 801ccd0:	6a3b      	ldr	r3, [r7, #32]
 801ccd2:	681b      	ldr	r3, [r3, #0]
 801ccd4:	623b      	str	r3, [r7, #32]
 801ccd6:	6a3b      	ldr	r3, [r7, #32]
 801ccd8:	681b      	ldr	r3, [r3, #0]
 801ccda:	2b00      	cmp	r3, #0
 801ccdc:	d1f8      	bne.n	801ccd0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801ccde:	e112      	b.n	801cf06 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801cce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cce2:	68db      	ldr	r3, [r3, #12]
 801cce4:	899b      	ldrh	r3, [r3, #12]
 801cce6:	b29b      	uxth	r3, r3
 801cce8:	4618      	mov	r0, r3
 801ccea:	f7f6 fb2d 	bl	8013348 <lwip_htons>
 801ccee:	4603      	mov	r3, r0
 801ccf0:	b2db      	uxtb	r3, r3
 801ccf2:	f003 0304 	and.w	r3, r3, #4
 801ccf6:	2b00      	cmp	r3, #0
 801ccf8:	d006      	beq.n	801cd08 <tcp_output+0x188>
 801ccfa:	4b43      	ldr	r3, [pc, #268]	; (801ce08 <tcp_output+0x288>)
 801ccfc:	f240 5236 	movw	r2, #1334	; 0x536
 801cd00:	4946      	ldr	r1, [pc, #280]	; (801ce1c <tcp_output+0x29c>)
 801cd02:	4843      	ldr	r0, [pc, #268]	; (801ce10 <tcp_output+0x290>)
 801cd04:	f004 f8b2 	bl	8020e6c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801cd08:	687b      	ldr	r3, [r7, #4]
 801cd0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cd0c:	2b00      	cmp	r3, #0
 801cd0e:	d01f      	beq.n	801cd50 <tcp_output+0x1d0>
 801cd10:	687b      	ldr	r3, [r7, #4]
 801cd12:	8b5b      	ldrh	r3, [r3, #26]
 801cd14:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801cd18:	2b00      	cmp	r3, #0
 801cd1a:	d119      	bne.n	801cd50 <tcp_output+0x1d0>
 801cd1c:	687b      	ldr	r3, [r7, #4]
 801cd1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cd20:	2b00      	cmp	r3, #0
 801cd22:	d00b      	beq.n	801cd3c <tcp_output+0x1bc>
 801cd24:	687b      	ldr	r3, [r7, #4]
 801cd26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cd28:	681b      	ldr	r3, [r3, #0]
 801cd2a:	2b00      	cmp	r3, #0
 801cd2c:	d110      	bne.n	801cd50 <tcp_output+0x1d0>
 801cd2e:	687b      	ldr	r3, [r7, #4]
 801cd30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cd32:	891a      	ldrh	r2, [r3, #8]
 801cd34:	687b      	ldr	r3, [r7, #4]
 801cd36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801cd38:	429a      	cmp	r2, r3
 801cd3a:	d209      	bcs.n	801cd50 <tcp_output+0x1d0>
 801cd3c:	687b      	ldr	r3, [r7, #4]
 801cd3e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801cd42:	2b00      	cmp	r3, #0
 801cd44:	d004      	beq.n	801cd50 <tcp_output+0x1d0>
 801cd46:	687b      	ldr	r3, [r7, #4]
 801cd48:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801cd4c:	2b08      	cmp	r3, #8
 801cd4e:	d901      	bls.n	801cd54 <tcp_output+0x1d4>
 801cd50:	2301      	movs	r3, #1
 801cd52:	e000      	b.n	801cd56 <tcp_output+0x1d6>
 801cd54:	2300      	movs	r3, #0
 801cd56:	2b00      	cmp	r3, #0
 801cd58:	d106      	bne.n	801cd68 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801cd5a:	687b      	ldr	r3, [r7, #4]
 801cd5c:	8b5b      	ldrh	r3, [r3, #26]
 801cd5e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801cd62:	2b00      	cmp	r3, #0
 801cd64:	f000 80e4 	beq.w	801cf30 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801cd68:	687b      	ldr	r3, [r7, #4]
 801cd6a:	7d1b      	ldrb	r3, [r3, #20]
 801cd6c:	2b02      	cmp	r3, #2
 801cd6e:	d00d      	beq.n	801cd8c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801cd70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd72:	68db      	ldr	r3, [r3, #12]
 801cd74:	899b      	ldrh	r3, [r3, #12]
 801cd76:	b29c      	uxth	r4, r3
 801cd78:	2010      	movs	r0, #16
 801cd7a:	f7f6 fae5 	bl	8013348 <lwip_htons>
 801cd7e:	4603      	mov	r3, r0
 801cd80:	461a      	mov	r2, r3
 801cd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd84:	68db      	ldr	r3, [r3, #12]
 801cd86:	4322      	orrs	r2, r4
 801cd88:	b292      	uxth	r2, r2
 801cd8a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801cd8c:	697a      	ldr	r2, [r7, #20]
 801cd8e:	6879      	ldr	r1, [r7, #4]
 801cd90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801cd92:	f000 f909 	bl	801cfa8 <tcp_output_segment>
 801cd96:	4603      	mov	r3, r0
 801cd98:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801cd9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801cd9e:	2b00      	cmp	r3, #0
 801cda0:	d009      	beq.n	801cdb6 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801cda2:	687b      	ldr	r3, [r7, #4]
 801cda4:	8b5b      	ldrh	r3, [r3, #26]
 801cda6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cdaa:	b29a      	uxth	r2, r3
 801cdac:	687b      	ldr	r3, [r7, #4]
 801cdae:	835a      	strh	r2, [r3, #26]
      return err;
 801cdb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801cdb4:	e0d3      	b.n	801cf5e <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801cdb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdb8:	681a      	ldr	r2, [r3, #0]
 801cdba:	687b      	ldr	r3, [r7, #4]
 801cdbc:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801cdbe:	687b      	ldr	r3, [r7, #4]
 801cdc0:	7d1b      	ldrb	r3, [r3, #20]
 801cdc2:	2b02      	cmp	r3, #2
 801cdc4:	d006      	beq.n	801cdd4 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801cdc6:	687b      	ldr	r3, [r7, #4]
 801cdc8:	8b5b      	ldrh	r3, [r3, #26]
 801cdca:	f023 0303 	bic.w	r3, r3, #3
 801cdce:	b29a      	uxth	r2, r3
 801cdd0:	687b      	ldr	r3, [r7, #4]
 801cdd2:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801cdd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdd6:	68db      	ldr	r3, [r3, #12]
 801cdd8:	685b      	ldr	r3, [r3, #4]
 801cdda:	4618      	mov	r0, r3
 801cddc:	f7f6 fac9 	bl	8013372 <lwip_htonl>
 801cde0:	4604      	mov	r4, r0
 801cde2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cde4:	891b      	ldrh	r3, [r3, #8]
 801cde6:	461d      	mov	r5, r3
 801cde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdea:	68db      	ldr	r3, [r3, #12]
 801cdec:	899b      	ldrh	r3, [r3, #12]
 801cdee:	b29b      	uxth	r3, r3
 801cdf0:	4618      	mov	r0, r3
 801cdf2:	f7f6 faa9 	bl	8013348 <lwip_htons>
 801cdf6:	4603      	mov	r3, r0
 801cdf8:	b2db      	uxtb	r3, r3
 801cdfa:	f003 0303 	and.w	r3, r3, #3
 801cdfe:	2b00      	cmp	r3, #0
 801ce00:	d00e      	beq.n	801ce20 <tcp_output+0x2a0>
 801ce02:	2301      	movs	r3, #1
 801ce04:	e00d      	b.n	801ce22 <tcp_output+0x2a2>
 801ce06:	bf00      	nop
 801ce08:	08027d94 	.word	0x08027d94
 801ce0c:	08028304 	.word	0x08028304
 801ce10:	08027e14 	.word	0x08027e14
 801ce14:	0802831c 	.word	0x0802831c
 801ce18:	240082cc 	.word	0x240082cc
 801ce1c:	08028344 	.word	0x08028344
 801ce20:	2300      	movs	r3, #0
 801ce22:	442b      	add	r3, r5
 801ce24:	4423      	add	r3, r4
 801ce26:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801ce28:	687b      	ldr	r3, [r7, #4]
 801ce2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801ce2c:	68bb      	ldr	r3, [r7, #8]
 801ce2e:	1ad3      	subs	r3, r2, r3
 801ce30:	2b00      	cmp	r3, #0
 801ce32:	da02      	bge.n	801ce3a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801ce34:	687b      	ldr	r3, [r7, #4]
 801ce36:	68ba      	ldr	r2, [r7, #8]
 801ce38:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801ce3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce3c:	891b      	ldrh	r3, [r3, #8]
 801ce3e:	461c      	mov	r4, r3
 801ce40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce42:	68db      	ldr	r3, [r3, #12]
 801ce44:	899b      	ldrh	r3, [r3, #12]
 801ce46:	b29b      	uxth	r3, r3
 801ce48:	4618      	mov	r0, r3
 801ce4a:	f7f6 fa7d 	bl	8013348 <lwip_htons>
 801ce4e:	4603      	mov	r3, r0
 801ce50:	b2db      	uxtb	r3, r3
 801ce52:	f003 0303 	and.w	r3, r3, #3
 801ce56:	2b00      	cmp	r3, #0
 801ce58:	d001      	beq.n	801ce5e <tcp_output+0x2de>
 801ce5a:	2301      	movs	r3, #1
 801ce5c:	e000      	b.n	801ce60 <tcp_output+0x2e0>
 801ce5e:	2300      	movs	r3, #0
 801ce60:	4423      	add	r3, r4
 801ce62:	2b00      	cmp	r3, #0
 801ce64:	d049      	beq.n	801cefa <tcp_output+0x37a>
      seg->next = NULL;
 801ce66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce68:	2200      	movs	r2, #0
 801ce6a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801ce6c:	687b      	ldr	r3, [r7, #4]
 801ce6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ce70:	2b00      	cmp	r3, #0
 801ce72:	d105      	bne.n	801ce80 <tcp_output+0x300>
        pcb->unacked = seg;
 801ce74:	687b      	ldr	r3, [r7, #4]
 801ce76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ce78:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801ce7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce7c:	623b      	str	r3, [r7, #32]
 801ce7e:	e03f      	b.n	801cf00 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801ce80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce82:	68db      	ldr	r3, [r3, #12]
 801ce84:	685b      	ldr	r3, [r3, #4]
 801ce86:	4618      	mov	r0, r3
 801ce88:	f7f6 fa73 	bl	8013372 <lwip_htonl>
 801ce8c:	4604      	mov	r4, r0
 801ce8e:	6a3b      	ldr	r3, [r7, #32]
 801ce90:	68db      	ldr	r3, [r3, #12]
 801ce92:	685b      	ldr	r3, [r3, #4]
 801ce94:	4618      	mov	r0, r3
 801ce96:	f7f6 fa6c 	bl	8013372 <lwip_htonl>
 801ce9a:	4603      	mov	r3, r0
 801ce9c:	1ae3      	subs	r3, r4, r3
 801ce9e:	2b00      	cmp	r3, #0
 801cea0:	da24      	bge.n	801ceec <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801cea2:	687b      	ldr	r3, [r7, #4]
 801cea4:	3370      	adds	r3, #112	; 0x70
 801cea6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801cea8:	e002      	b.n	801ceb0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801ceaa:	69fb      	ldr	r3, [r7, #28]
 801ceac:	681b      	ldr	r3, [r3, #0]
 801ceae:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801ceb0:	69fb      	ldr	r3, [r7, #28]
 801ceb2:	681b      	ldr	r3, [r3, #0]
 801ceb4:	2b00      	cmp	r3, #0
 801ceb6:	d011      	beq.n	801cedc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801ceb8:	69fb      	ldr	r3, [r7, #28]
 801ceba:	681b      	ldr	r3, [r3, #0]
 801cebc:	68db      	ldr	r3, [r3, #12]
 801cebe:	685b      	ldr	r3, [r3, #4]
 801cec0:	4618      	mov	r0, r3
 801cec2:	f7f6 fa56 	bl	8013372 <lwip_htonl>
 801cec6:	4604      	mov	r4, r0
 801cec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ceca:	68db      	ldr	r3, [r3, #12]
 801cecc:	685b      	ldr	r3, [r3, #4]
 801cece:	4618      	mov	r0, r3
 801ced0:	f7f6 fa4f 	bl	8013372 <lwip_htonl>
 801ced4:	4603      	mov	r3, r0
 801ced6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801ced8:	2b00      	cmp	r3, #0
 801ceda:	dbe6      	blt.n	801ceaa <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801cedc:	69fb      	ldr	r3, [r7, #28]
 801cede:	681a      	ldr	r2, [r3, #0]
 801cee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cee2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801cee4:	69fb      	ldr	r3, [r7, #28]
 801cee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cee8:	601a      	str	r2, [r3, #0]
 801ceea:	e009      	b.n	801cf00 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801ceec:	6a3b      	ldr	r3, [r7, #32]
 801ceee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cef0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801cef2:	6a3b      	ldr	r3, [r7, #32]
 801cef4:	681b      	ldr	r3, [r3, #0]
 801cef6:	623b      	str	r3, [r7, #32]
 801cef8:	e002      	b.n	801cf00 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801cefa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801cefc:	f7fb ff1d 	bl	8018d3a <tcp_seg_free>
    }
    seg = pcb->unsent;
 801cf00:	687b      	ldr	r3, [r7, #4]
 801cf02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cf04:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801cf06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cf08:	2b00      	cmp	r3, #0
 801cf0a:	d012      	beq.n	801cf32 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801cf0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cf0e:	68db      	ldr	r3, [r3, #12]
 801cf10:	685b      	ldr	r3, [r3, #4]
 801cf12:	4618      	mov	r0, r3
 801cf14:	f7f6 fa2d 	bl	8013372 <lwip_htonl>
 801cf18:	4602      	mov	r2, r0
 801cf1a:	687b      	ldr	r3, [r7, #4]
 801cf1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cf1e:	1ad3      	subs	r3, r2, r3
 801cf20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cf22:	8912      	ldrh	r2, [r2, #8]
 801cf24:	4413      	add	r3, r2
  while (seg != NULL &&
 801cf26:	69ba      	ldr	r2, [r7, #24]
 801cf28:	429a      	cmp	r2, r3
 801cf2a:	f4bf aed9 	bcs.w	801cce0 <tcp_output+0x160>
 801cf2e:	e000      	b.n	801cf32 <tcp_output+0x3b2>
      break;
 801cf30:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801cf32:	687b      	ldr	r3, [r7, #4]
 801cf34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cf36:	2b00      	cmp	r3, #0
 801cf38:	d108      	bne.n	801cf4c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801cf3a:	687b      	ldr	r3, [r7, #4]
 801cf3c:	2200      	movs	r2, #0
 801cf3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801cf42:	e004      	b.n	801cf4e <tcp_output+0x3ce>
    goto output_done;
 801cf44:	bf00      	nop
 801cf46:	e002      	b.n	801cf4e <tcp_output+0x3ce>
    goto output_done;
 801cf48:	bf00      	nop
 801cf4a:	e000      	b.n	801cf4e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801cf4c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801cf4e:	687b      	ldr	r3, [r7, #4]
 801cf50:	8b5b      	ldrh	r3, [r3, #26]
 801cf52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801cf56:	b29a      	uxth	r2, r3
 801cf58:	687b      	ldr	r3, [r7, #4]
 801cf5a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801cf5c:	2300      	movs	r3, #0
}
 801cf5e:	4618      	mov	r0, r3
 801cf60:	3728      	adds	r7, #40	; 0x28
 801cf62:	46bd      	mov	sp, r7
 801cf64:	bdb0      	pop	{r4, r5, r7, pc}
 801cf66:	bf00      	nop

0801cf68 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801cf68:	b580      	push	{r7, lr}
 801cf6a:	b082      	sub	sp, #8
 801cf6c:	af00      	add	r7, sp, #0
 801cf6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801cf70:	687b      	ldr	r3, [r7, #4]
 801cf72:	2b00      	cmp	r3, #0
 801cf74:	d106      	bne.n	801cf84 <tcp_output_segment_busy+0x1c>
 801cf76:	4b09      	ldr	r3, [pc, #36]	; (801cf9c <tcp_output_segment_busy+0x34>)
 801cf78:	f240 529a 	movw	r2, #1434	; 0x59a
 801cf7c:	4908      	ldr	r1, [pc, #32]	; (801cfa0 <tcp_output_segment_busy+0x38>)
 801cf7e:	4809      	ldr	r0, [pc, #36]	; (801cfa4 <tcp_output_segment_busy+0x3c>)
 801cf80:	f003 ff74 	bl	8020e6c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801cf84:	687b      	ldr	r3, [r7, #4]
 801cf86:	685b      	ldr	r3, [r3, #4]
 801cf88:	7b9b      	ldrb	r3, [r3, #14]
 801cf8a:	2b01      	cmp	r3, #1
 801cf8c:	d001      	beq.n	801cf92 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801cf8e:	2301      	movs	r3, #1
 801cf90:	e000      	b.n	801cf94 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801cf92:	2300      	movs	r3, #0
}
 801cf94:	4618      	mov	r0, r3
 801cf96:	3708      	adds	r7, #8
 801cf98:	46bd      	mov	sp, r7
 801cf9a:	bd80      	pop	{r7, pc}
 801cf9c:	08027d94 	.word	0x08027d94
 801cfa0:	0802835c 	.word	0x0802835c
 801cfa4:	08027e14 	.word	0x08027e14

0801cfa8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801cfa8:	b5b0      	push	{r4, r5, r7, lr}
 801cfaa:	b08c      	sub	sp, #48	; 0x30
 801cfac:	af04      	add	r7, sp, #16
 801cfae:	60f8      	str	r0, [r7, #12]
 801cfb0:	60b9      	str	r1, [r7, #8]
 801cfb2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801cfb4:	68fb      	ldr	r3, [r7, #12]
 801cfb6:	2b00      	cmp	r3, #0
 801cfb8:	d106      	bne.n	801cfc8 <tcp_output_segment+0x20>
 801cfba:	4b63      	ldr	r3, [pc, #396]	; (801d148 <tcp_output_segment+0x1a0>)
 801cfbc:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801cfc0:	4962      	ldr	r1, [pc, #392]	; (801d14c <tcp_output_segment+0x1a4>)
 801cfc2:	4863      	ldr	r0, [pc, #396]	; (801d150 <tcp_output_segment+0x1a8>)
 801cfc4:	f003 ff52 	bl	8020e6c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801cfc8:	68bb      	ldr	r3, [r7, #8]
 801cfca:	2b00      	cmp	r3, #0
 801cfcc:	d106      	bne.n	801cfdc <tcp_output_segment+0x34>
 801cfce:	4b5e      	ldr	r3, [pc, #376]	; (801d148 <tcp_output_segment+0x1a0>)
 801cfd0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801cfd4:	495f      	ldr	r1, [pc, #380]	; (801d154 <tcp_output_segment+0x1ac>)
 801cfd6:	485e      	ldr	r0, [pc, #376]	; (801d150 <tcp_output_segment+0x1a8>)
 801cfd8:	f003 ff48 	bl	8020e6c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801cfdc:	687b      	ldr	r3, [r7, #4]
 801cfde:	2b00      	cmp	r3, #0
 801cfe0:	d106      	bne.n	801cff0 <tcp_output_segment+0x48>
 801cfe2:	4b59      	ldr	r3, [pc, #356]	; (801d148 <tcp_output_segment+0x1a0>)
 801cfe4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801cfe8:	495b      	ldr	r1, [pc, #364]	; (801d158 <tcp_output_segment+0x1b0>)
 801cfea:	4859      	ldr	r0, [pc, #356]	; (801d150 <tcp_output_segment+0x1a8>)
 801cfec:	f003 ff3e 	bl	8020e6c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801cff0:	68f8      	ldr	r0, [r7, #12]
 801cff2:	f7ff ffb9 	bl	801cf68 <tcp_output_segment_busy>
 801cff6:	4603      	mov	r3, r0
 801cff8:	2b00      	cmp	r3, #0
 801cffa:	d001      	beq.n	801d000 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801cffc:	2300      	movs	r3, #0
 801cffe:	e09f      	b.n	801d140 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801d000:	68bb      	ldr	r3, [r7, #8]
 801d002:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801d004:	68fb      	ldr	r3, [r7, #12]
 801d006:	68dc      	ldr	r4, [r3, #12]
 801d008:	4610      	mov	r0, r2
 801d00a:	f7f6 f9b2 	bl	8013372 <lwip_htonl>
 801d00e:	4603      	mov	r3, r0
 801d010:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801d012:	68bb      	ldr	r3, [r7, #8]
 801d014:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801d016:	68fb      	ldr	r3, [r7, #12]
 801d018:	68dc      	ldr	r4, [r3, #12]
 801d01a:	4610      	mov	r0, r2
 801d01c:	f7f6 f994 	bl	8013348 <lwip_htons>
 801d020:	4603      	mov	r3, r0
 801d022:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801d024:	68bb      	ldr	r3, [r7, #8]
 801d026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d028:	68ba      	ldr	r2, [r7, #8]
 801d02a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801d02c:	441a      	add	r2, r3
 801d02e:	68bb      	ldr	r3, [r7, #8]
 801d030:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801d032:	68fb      	ldr	r3, [r7, #12]
 801d034:	68db      	ldr	r3, [r3, #12]
 801d036:	3314      	adds	r3, #20
 801d038:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801d03a:	68fb      	ldr	r3, [r7, #12]
 801d03c:	7a9b      	ldrb	r3, [r3, #10]
 801d03e:	f003 0301 	and.w	r3, r3, #1
 801d042:	2b00      	cmp	r3, #0
 801d044:	d015      	beq.n	801d072 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801d046:	68bb      	ldr	r3, [r7, #8]
 801d048:	3304      	adds	r3, #4
 801d04a:	461a      	mov	r2, r3
 801d04c:	6879      	ldr	r1, [r7, #4]
 801d04e:	f44f 7006 	mov.w	r0, #536	; 0x218
 801d052:	f7fc fa37 	bl	80194c4 <tcp_eff_send_mss_netif>
 801d056:	4603      	mov	r3, r0
 801d058:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801d05a:	8b7b      	ldrh	r3, [r7, #26]
 801d05c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801d060:	4618      	mov	r0, r3
 801d062:	f7f6 f986 	bl	8013372 <lwip_htonl>
 801d066:	4602      	mov	r2, r0
 801d068:	69fb      	ldr	r3, [r7, #28]
 801d06a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801d06c:	69fb      	ldr	r3, [r7, #28]
 801d06e:	3304      	adds	r3, #4
 801d070:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801d072:	68bb      	ldr	r3, [r7, #8]
 801d074:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801d078:	2b00      	cmp	r3, #0
 801d07a:	da02      	bge.n	801d082 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801d07c:	68bb      	ldr	r3, [r7, #8]
 801d07e:	2200      	movs	r2, #0
 801d080:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801d082:	68bb      	ldr	r3, [r7, #8]
 801d084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d086:	2b00      	cmp	r3, #0
 801d088:	d10c      	bne.n	801d0a4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801d08a:	4b34      	ldr	r3, [pc, #208]	; (801d15c <tcp_output_segment+0x1b4>)
 801d08c:	681a      	ldr	r2, [r3, #0]
 801d08e:	68bb      	ldr	r3, [r7, #8]
 801d090:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801d092:	68fb      	ldr	r3, [r7, #12]
 801d094:	68db      	ldr	r3, [r3, #12]
 801d096:	685b      	ldr	r3, [r3, #4]
 801d098:	4618      	mov	r0, r3
 801d09a:	f7f6 f96a 	bl	8013372 <lwip_htonl>
 801d09e:	4602      	mov	r2, r0
 801d0a0:	68bb      	ldr	r3, [r7, #8]
 801d0a2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801d0a4:	68fb      	ldr	r3, [r7, #12]
 801d0a6:	68da      	ldr	r2, [r3, #12]
 801d0a8:	68fb      	ldr	r3, [r7, #12]
 801d0aa:	685b      	ldr	r3, [r3, #4]
 801d0ac:	685b      	ldr	r3, [r3, #4]
 801d0ae:	1ad3      	subs	r3, r2, r3
 801d0b0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801d0b2:	68fb      	ldr	r3, [r7, #12]
 801d0b4:	685b      	ldr	r3, [r3, #4]
 801d0b6:	8959      	ldrh	r1, [r3, #10]
 801d0b8:	68fb      	ldr	r3, [r7, #12]
 801d0ba:	685b      	ldr	r3, [r3, #4]
 801d0bc:	8b3a      	ldrh	r2, [r7, #24]
 801d0be:	1a8a      	subs	r2, r1, r2
 801d0c0:	b292      	uxth	r2, r2
 801d0c2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801d0c4:	68fb      	ldr	r3, [r7, #12]
 801d0c6:	685b      	ldr	r3, [r3, #4]
 801d0c8:	8919      	ldrh	r1, [r3, #8]
 801d0ca:	68fb      	ldr	r3, [r7, #12]
 801d0cc:	685b      	ldr	r3, [r3, #4]
 801d0ce:	8b3a      	ldrh	r2, [r7, #24]
 801d0d0:	1a8a      	subs	r2, r1, r2
 801d0d2:	b292      	uxth	r2, r2
 801d0d4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801d0d6:	68fb      	ldr	r3, [r7, #12]
 801d0d8:	685b      	ldr	r3, [r3, #4]
 801d0da:	68fa      	ldr	r2, [r7, #12]
 801d0dc:	68d2      	ldr	r2, [r2, #12]
 801d0de:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801d0e0:	68fb      	ldr	r3, [r7, #12]
 801d0e2:	68db      	ldr	r3, [r3, #12]
 801d0e4:	2200      	movs	r2, #0
 801d0e6:	741a      	strb	r2, [r3, #16]
 801d0e8:	2200      	movs	r2, #0
 801d0ea:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801d0ec:	68fb      	ldr	r3, [r7, #12]
 801d0ee:	68db      	ldr	r3, [r3, #12]
 801d0f0:	f103 0214 	add.w	r2, r3, #20
 801d0f4:	68fb      	ldr	r3, [r7, #12]
 801d0f6:	7a9b      	ldrb	r3, [r3, #10]
 801d0f8:	009b      	lsls	r3, r3, #2
 801d0fa:	f003 0304 	and.w	r3, r3, #4
 801d0fe:	4413      	add	r3, r2
 801d100:	69fa      	ldr	r2, [r7, #28]
 801d102:	429a      	cmp	r2, r3
 801d104:	d006      	beq.n	801d114 <tcp_output_segment+0x16c>
 801d106:	4b10      	ldr	r3, [pc, #64]	; (801d148 <tcp_output_segment+0x1a0>)
 801d108:	f240 621c 	movw	r2, #1564	; 0x61c
 801d10c:	4914      	ldr	r1, [pc, #80]	; (801d160 <tcp_output_segment+0x1b8>)
 801d10e:	4810      	ldr	r0, [pc, #64]	; (801d150 <tcp_output_segment+0x1a8>)
 801d110:	f003 feac 	bl	8020e6c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801d114:	68fb      	ldr	r3, [r7, #12]
 801d116:	6858      	ldr	r0, [r3, #4]
 801d118:	68b9      	ldr	r1, [r7, #8]
 801d11a:	68bb      	ldr	r3, [r7, #8]
 801d11c:	1d1c      	adds	r4, r3, #4
 801d11e:	68bb      	ldr	r3, [r7, #8]
 801d120:	7add      	ldrb	r5, [r3, #11]
 801d122:	68bb      	ldr	r3, [r7, #8]
 801d124:	7a9b      	ldrb	r3, [r3, #10]
 801d126:	687a      	ldr	r2, [r7, #4]
 801d128:	9202      	str	r2, [sp, #8]
 801d12a:	2206      	movs	r2, #6
 801d12c:	9201      	str	r2, [sp, #4]
 801d12e:	9300      	str	r3, [sp, #0]
 801d130:	462b      	mov	r3, r5
 801d132:	4622      	mov	r2, r4
 801d134:	f7f7 fd9c 	bl	8014c70 <ip4_output_if>
 801d138:	4603      	mov	r3, r0
 801d13a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801d13c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801d140:	4618      	mov	r0, r3
 801d142:	3720      	adds	r7, #32
 801d144:	46bd      	mov	sp, r7
 801d146:	bdb0      	pop	{r4, r5, r7, pc}
 801d148:	08027d94 	.word	0x08027d94
 801d14c:	08028384 	.word	0x08028384
 801d150:	08027e14 	.word	0x08027e14
 801d154:	080283a4 	.word	0x080283a4
 801d158:	080283c4 	.word	0x080283c4
 801d15c:	240082bc 	.word	0x240082bc
 801d160:	080283e8 	.word	0x080283e8

0801d164 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801d164:	b5b0      	push	{r4, r5, r7, lr}
 801d166:	b084      	sub	sp, #16
 801d168:	af00      	add	r7, sp, #0
 801d16a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801d16c:	687b      	ldr	r3, [r7, #4]
 801d16e:	2b00      	cmp	r3, #0
 801d170:	d106      	bne.n	801d180 <tcp_rexmit_rto_prepare+0x1c>
 801d172:	4b31      	ldr	r3, [pc, #196]	; (801d238 <tcp_rexmit_rto_prepare+0xd4>)
 801d174:	f240 6263 	movw	r2, #1635	; 0x663
 801d178:	4930      	ldr	r1, [pc, #192]	; (801d23c <tcp_rexmit_rto_prepare+0xd8>)
 801d17a:	4831      	ldr	r0, [pc, #196]	; (801d240 <tcp_rexmit_rto_prepare+0xdc>)
 801d17c:	f003 fe76 	bl	8020e6c <iprintf>

  if (pcb->unacked == NULL) {
 801d180:	687b      	ldr	r3, [r7, #4]
 801d182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d184:	2b00      	cmp	r3, #0
 801d186:	d102      	bne.n	801d18e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801d188:	f06f 0305 	mvn.w	r3, #5
 801d18c:	e050      	b.n	801d230 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801d18e:	687b      	ldr	r3, [r7, #4]
 801d190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d192:	60fb      	str	r3, [r7, #12]
 801d194:	e00b      	b.n	801d1ae <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801d196:	68f8      	ldr	r0, [r7, #12]
 801d198:	f7ff fee6 	bl	801cf68 <tcp_output_segment_busy>
 801d19c:	4603      	mov	r3, r0
 801d19e:	2b00      	cmp	r3, #0
 801d1a0:	d002      	beq.n	801d1a8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801d1a2:	f06f 0305 	mvn.w	r3, #5
 801d1a6:	e043      	b.n	801d230 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801d1a8:	68fb      	ldr	r3, [r7, #12]
 801d1aa:	681b      	ldr	r3, [r3, #0]
 801d1ac:	60fb      	str	r3, [r7, #12]
 801d1ae:	68fb      	ldr	r3, [r7, #12]
 801d1b0:	681b      	ldr	r3, [r3, #0]
 801d1b2:	2b00      	cmp	r3, #0
 801d1b4:	d1ef      	bne.n	801d196 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801d1b6:	68f8      	ldr	r0, [r7, #12]
 801d1b8:	f7ff fed6 	bl	801cf68 <tcp_output_segment_busy>
 801d1bc:	4603      	mov	r3, r0
 801d1be:	2b00      	cmp	r3, #0
 801d1c0:	d002      	beq.n	801d1c8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801d1c2:	f06f 0305 	mvn.w	r3, #5
 801d1c6:	e033      	b.n	801d230 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801d1c8:	687b      	ldr	r3, [r7, #4]
 801d1ca:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801d1cc:	68fb      	ldr	r3, [r7, #12]
 801d1ce:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801d1d0:	687b      	ldr	r3, [r7, #4]
 801d1d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801d1d4:	687b      	ldr	r3, [r7, #4]
 801d1d6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801d1d8:	687b      	ldr	r3, [r7, #4]
 801d1da:	2200      	movs	r2, #0
 801d1dc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801d1de:	687b      	ldr	r3, [r7, #4]
 801d1e0:	8b5b      	ldrh	r3, [r3, #26]
 801d1e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801d1e6:	b29a      	uxth	r2, r3
 801d1e8:	687b      	ldr	r3, [r7, #4]
 801d1ea:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801d1ec:	68fb      	ldr	r3, [r7, #12]
 801d1ee:	68db      	ldr	r3, [r3, #12]
 801d1f0:	685b      	ldr	r3, [r3, #4]
 801d1f2:	4618      	mov	r0, r3
 801d1f4:	f7f6 f8bd 	bl	8013372 <lwip_htonl>
 801d1f8:	4604      	mov	r4, r0
 801d1fa:	68fb      	ldr	r3, [r7, #12]
 801d1fc:	891b      	ldrh	r3, [r3, #8]
 801d1fe:	461d      	mov	r5, r3
 801d200:	68fb      	ldr	r3, [r7, #12]
 801d202:	68db      	ldr	r3, [r3, #12]
 801d204:	899b      	ldrh	r3, [r3, #12]
 801d206:	b29b      	uxth	r3, r3
 801d208:	4618      	mov	r0, r3
 801d20a:	f7f6 f89d 	bl	8013348 <lwip_htons>
 801d20e:	4603      	mov	r3, r0
 801d210:	b2db      	uxtb	r3, r3
 801d212:	f003 0303 	and.w	r3, r3, #3
 801d216:	2b00      	cmp	r3, #0
 801d218:	d001      	beq.n	801d21e <tcp_rexmit_rto_prepare+0xba>
 801d21a:	2301      	movs	r3, #1
 801d21c:	e000      	b.n	801d220 <tcp_rexmit_rto_prepare+0xbc>
 801d21e:	2300      	movs	r3, #0
 801d220:	442b      	add	r3, r5
 801d222:	18e2      	adds	r2, r4, r3
 801d224:	687b      	ldr	r3, [r7, #4]
 801d226:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801d228:	687b      	ldr	r3, [r7, #4]
 801d22a:	2200      	movs	r2, #0
 801d22c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801d22e:	2300      	movs	r3, #0
}
 801d230:	4618      	mov	r0, r3
 801d232:	3710      	adds	r7, #16
 801d234:	46bd      	mov	sp, r7
 801d236:	bdb0      	pop	{r4, r5, r7, pc}
 801d238:	08027d94 	.word	0x08027d94
 801d23c:	080283fc 	.word	0x080283fc
 801d240:	08027e14 	.word	0x08027e14

0801d244 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801d244:	b580      	push	{r7, lr}
 801d246:	b082      	sub	sp, #8
 801d248:	af00      	add	r7, sp, #0
 801d24a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801d24c:	687b      	ldr	r3, [r7, #4]
 801d24e:	2b00      	cmp	r3, #0
 801d250:	d106      	bne.n	801d260 <tcp_rexmit_rto_commit+0x1c>
 801d252:	4b0d      	ldr	r3, [pc, #52]	; (801d288 <tcp_rexmit_rto_commit+0x44>)
 801d254:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801d258:	490c      	ldr	r1, [pc, #48]	; (801d28c <tcp_rexmit_rto_commit+0x48>)
 801d25a:	480d      	ldr	r0, [pc, #52]	; (801d290 <tcp_rexmit_rto_commit+0x4c>)
 801d25c:	f003 fe06 	bl	8020e6c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801d260:	687b      	ldr	r3, [r7, #4]
 801d262:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801d266:	2bff      	cmp	r3, #255	; 0xff
 801d268:	d007      	beq.n	801d27a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801d26a:	687b      	ldr	r3, [r7, #4]
 801d26c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801d270:	3301      	adds	r3, #1
 801d272:	b2da      	uxtb	r2, r3
 801d274:	687b      	ldr	r3, [r7, #4]
 801d276:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801d27a:	6878      	ldr	r0, [r7, #4]
 801d27c:	f7ff fc80 	bl	801cb80 <tcp_output>
}
 801d280:	bf00      	nop
 801d282:	3708      	adds	r7, #8
 801d284:	46bd      	mov	sp, r7
 801d286:	bd80      	pop	{r7, pc}
 801d288:	08027d94 	.word	0x08027d94
 801d28c:	08028420 	.word	0x08028420
 801d290:	08027e14 	.word	0x08027e14

0801d294 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801d294:	b580      	push	{r7, lr}
 801d296:	b082      	sub	sp, #8
 801d298:	af00      	add	r7, sp, #0
 801d29a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801d29c:	687b      	ldr	r3, [r7, #4]
 801d29e:	2b00      	cmp	r3, #0
 801d2a0:	d106      	bne.n	801d2b0 <tcp_rexmit_rto+0x1c>
 801d2a2:	4b0a      	ldr	r3, [pc, #40]	; (801d2cc <tcp_rexmit_rto+0x38>)
 801d2a4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801d2a8:	4909      	ldr	r1, [pc, #36]	; (801d2d0 <tcp_rexmit_rto+0x3c>)
 801d2aa:	480a      	ldr	r0, [pc, #40]	; (801d2d4 <tcp_rexmit_rto+0x40>)
 801d2ac:	f003 fdde 	bl	8020e6c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801d2b0:	6878      	ldr	r0, [r7, #4]
 801d2b2:	f7ff ff57 	bl	801d164 <tcp_rexmit_rto_prepare>
 801d2b6:	4603      	mov	r3, r0
 801d2b8:	2b00      	cmp	r3, #0
 801d2ba:	d102      	bne.n	801d2c2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801d2bc:	6878      	ldr	r0, [r7, #4]
 801d2be:	f7ff ffc1 	bl	801d244 <tcp_rexmit_rto_commit>
  }
}
 801d2c2:	bf00      	nop
 801d2c4:	3708      	adds	r7, #8
 801d2c6:	46bd      	mov	sp, r7
 801d2c8:	bd80      	pop	{r7, pc}
 801d2ca:	bf00      	nop
 801d2cc:	08027d94 	.word	0x08027d94
 801d2d0:	08028444 	.word	0x08028444
 801d2d4:	08027e14 	.word	0x08027e14

0801d2d8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801d2d8:	b590      	push	{r4, r7, lr}
 801d2da:	b085      	sub	sp, #20
 801d2dc:	af00      	add	r7, sp, #0
 801d2de:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801d2e0:	687b      	ldr	r3, [r7, #4]
 801d2e2:	2b00      	cmp	r3, #0
 801d2e4:	d106      	bne.n	801d2f4 <tcp_rexmit+0x1c>
 801d2e6:	4b2f      	ldr	r3, [pc, #188]	; (801d3a4 <tcp_rexmit+0xcc>)
 801d2e8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801d2ec:	492e      	ldr	r1, [pc, #184]	; (801d3a8 <tcp_rexmit+0xd0>)
 801d2ee:	482f      	ldr	r0, [pc, #188]	; (801d3ac <tcp_rexmit+0xd4>)
 801d2f0:	f003 fdbc 	bl	8020e6c <iprintf>

  if (pcb->unacked == NULL) {
 801d2f4:	687b      	ldr	r3, [r7, #4]
 801d2f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d2f8:	2b00      	cmp	r3, #0
 801d2fa:	d102      	bne.n	801d302 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801d2fc:	f06f 0305 	mvn.w	r3, #5
 801d300:	e04c      	b.n	801d39c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801d302:	687b      	ldr	r3, [r7, #4]
 801d304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d306:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801d308:	68b8      	ldr	r0, [r7, #8]
 801d30a:	f7ff fe2d 	bl	801cf68 <tcp_output_segment_busy>
 801d30e:	4603      	mov	r3, r0
 801d310:	2b00      	cmp	r3, #0
 801d312:	d002      	beq.n	801d31a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801d314:	f06f 0305 	mvn.w	r3, #5
 801d318:	e040      	b.n	801d39c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801d31a:	68bb      	ldr	r3, [r7, #8]
 801d31c:	681a      	ldr	r2, [r3, #0]
 801d31e:	687b      	ldr	r3, [r7, #4]
 801d320:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801d322:	687b      	ldr	r3, [r7, #4]
 801d324:	336c      	adds	r3, #108	; 0x6c
 801d326:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801d328:	e002      	b.n	801d330 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801d32a:	68fb      	ldr	r3, [r7, #12]
 801d32c:	681b      	ldr	r3, [r3, #0]
 801d32e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801d330:	68fb      	ldr	r3, [r7, #12]
 801d332:	681b      	ldr	r3, [r3, #0]
 801d334:	2b00      	cmp	r3, #0
 801d336:	d011      	beq.n	801d35c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801d338:	68fb      	ldr	r3, [r7, #12]
 801d33a:	681b      	ldr	r3, [r3, #0]
 801d33c:	68db      	ldr	r3, [r3, #12]
 801d33e:	685b      	ldr	r3, [r3, #4]
 801d340:	4618      	mov	r0, r3
 801d342:	f7f6 f816 	bl	8013372 <lwip_htonl>
 801d346:	4604      	mov	r4, r0
 801d348:	68bb      	ldr	r3, [r7, #8]
 801d34a:	68db      	ldr	r3, [r3, #12]
 801d34c:	685b      	ldr	r3, [r3, #4]
 801d34e:	4618      	mov	r0, r3
 801d350:	f7f6 f80f 	bl	8013372 <lwip_htonl>
 801d354:	4603      	mov	r3, r0
 801d356:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801d358:	2b00      	cmp	r3, #0
 801d35a:	dbe6      	blt.n	801d32a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801d35c:	68fb      	ldr	r3, [r7, #12]
 801d35e:	681a      	ldr	r2, [r3, #0]
 801d360:	68bb      	ldr	r3, [r7, #8]
 801d362:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801d364:	68fb      	ldr	r3, [r7, #12]
 801d366:	68ba      	ldr	r2, [r7, #8]
 801d368:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801d36a:	68bb      	ldr	r3, [r7, #8]
 801d36c:	681b      	ldr	r3, [r3, #0]
 801d36e:	2b00      	cmp	r3, #0
 801d370:	d103      	bne.n	801d37a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801d372:	687b      	ldr	r3, [r7, #4]
 801d374:	2200      	movs	r2, #0
 801d376:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801d37a:	687b      	ldr	r3, [r7, #4]
 801d37c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801d380:	2bff      	cmp	r3, #255	; 0xff
 801d382:	d007      	beq.n	801d394 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801d384:	687b      	ldr	r3, [r7, #4]
 801d386:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801d38a:	3301      	adds	r3, #1
 801d38c:	b2da      	uxtb	r2, r3
 801d38e:	687b      	ldr	r3, [r7, #4]
 801d390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801d394:	687b      	ldr	r3, [r7, #4]
 801d396:	2200      	movs	r2, #0
 801d398:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801d39a:	2300      	movs	r3, #0
}
 801d39c:	4618      	mov	r0, r3
 801d39e:	3714      	adds	r7, #20
 801d3a0:	46bd      	mov	sp, r7
 801d3a2:	bd90      	pop	{r4, r7, pc}
 801d3a4:	08027d94 	.word	0x08027d94
 801d3a8:	08028460 	.word	0x08028460
 801d3ac:	08027e14 	.word	0x08027e14

0801d3b0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801d3b0:	b580      	push	{r7, lr}
 801d3b2:	b082      	sub	sp, #8
 801d3b4:	af00      	add	r7, sp, #0
 801d3b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801d3b8:	687b      	ldr	r3, [r7, #4]
 801d3ba:	2b00      	cmp	r3, #0
 801d3bc:	d106      	bne.n	801d3cc <tcp_rexmit_fast+0x1c>
 801d3be:	4b2a      	ldr	r3, [pc, #168]	; (801d468 <tcp_rexmit_fast+0xb8>)
 801d3c0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801d3c4:	4929      	ldr	r1, [pc, #164]	; (801d46c <tcp_rexmit_fast+0xbc>)
 801d3c6:	482a      	ldr	r0, [pc, #168]	; (801d470 <tcp_rexmit_fast+0xc0>)
 801d3c8:	f003 fd50 	bl	8020e6c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801d3cc:	687b      	ldr	r3, [r7, #4]
 801d3ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d3d0:	2b00      	cmp	r3, #0
 801d3d2:	d045      	beq.n	801d460 <tcp_rexmit_fast+0xb0>
 801d3d4:	687b      	ldr	r3, [r7, #4]
 801d3d6:	8b5b      	ldrh	r3, [r3, #26]
 801d3d8:	f003 0304 	and.w	r3, r3, #4
 801d3dc:	2b00      	cmp	r3, #0
 801d3de:	d13f      	bne.n	801d460 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801d3e0:	6878      	ldr	r0, [r7, #4]
 801d3e2:	f7ff ff79 	bl	801d2d8 <tcp_rexmit>
 801d3e6:	4603      	mov	r3, r0
 801d3e8:	2b00      	cmp	r3, #0
 801d3ea:	d139      	bne.n	801d460 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801d3ec:	687b      	ldr	r3, [r7, #4]
 801d3ee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801d3f2:	687b      	ldr	r3, [r7, #4]
 801d3f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801d3f8:	4293      	cmp	r3, r2
 801d3fa:	bf28      	it	cs
 801d3fc:	4613      	movcs	r3, r2
 801d3fe:	b29b      	uxth	r3, r3
 801d400:	2b00      	cmp	r3, #0
 801d402:	da00      	bge.n	801d406 <tcp_rexmit_fast+0x56>
 801d404:	3301      	adds	r3, #1
 801d406:	105b      	asrs	r3, r3, #1
 801d408:	b29a      	uxth	r2, r3
 801d40a:	687b      	ldr	r3, [r7, #4]
 801d40c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801d410:	687b      	ldr	r3, [r7, #4]
 801d412:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801d416:	461a      	mov	r2, r3
 801d418:	687b      	ldr	r3, [r7, #4]
 801d41a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d41c:	005b      	lsls	r3, r3, #1
 801d41e:	429a      	cmp	r2, r3
 801d420:	d206      	bcs.n	801d430 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801d422:	687b      	ldr	r3, [r7, #4]
 801d424:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d426:	005b      	lsls	r3, r3, #1
 801d428:	b29a      	uxth	r2, r3
 801d42a:	687b      	ldr	r3, [r7, #4]
 801d42c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801d430:	687b      	ldr	r3, [r7, #4]
 801d432:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801d436:	687b      	ldr	r3, [r7, #4]
 801d438:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d43a:	4619      	mov	r1, r3
 801d43c:	0049      	lsls	r1, r1, #1
 801d43e:	440b      	add	r3, r1
 801d440:	b29b      	uxth	r3, r3
 801d442:	4413      	add	r3, r2
 801d444:	b29a      	uxth	r2, r3
 801d446:	687b      	ldr	r3, [r7, #4]
 801d448:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801d44c:	687b      	ldr	r3, [r7, #4]
 801d44e:	8b5b      	ldrh	r3, [r3, #26]
 801d450:	f043 0304 	orr.w	r3, r3, #4
 801d454:	b29a      	uxth	r2, r3
 801d456:	687b      	ldr	r3, [r7, #4]
 801d458:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801d45a:	687b      	ldr	r3, [r7, #4]
 801d45c:	2200      	movs	r2, #0
 801d45e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801d460:	bf00      	nop
 801d462:	3708      	adds	r7, #8
 801d464:	46bd      	mov	sp, r7
 801d466:	bd80      	pop	{r7, pc}
 801d468:	08027d94 	.word	0x08027d94
 801d46c:	08028478 	.word	0x08028478
 801d470:	08027e14 	.word	0x08027e14

0801d474 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801d474:	b580      	push	{r7, lr}
 801d476:	b086      	sub	sp, #24
 801d478:	af00      	add	r7, sp, #0
 801d47a:	60f8      	str	r0, [r7, #12]
 801d47c:	607b      	str	r3, [r7, #4]
 801d47e:	460b      	mov	r3, r1
 801d480:	817b      	strh	r3, [r7, #10]
 801d482:	4613      	mov	r3, r2
 801d484:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801d486:	897a      	ldrh	r2, [r7, #10]
 801d488:	893b      	ldrh	r3, [r7, #8]
 801d48a:	4413      	add	r3, r2
 801d48c:	b29b      	uxth	r3, r3
 801d48e:	3314      	adds	r3, #20
 801d490:	b29b      	uxth	r3, r3
 801d492:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d496:	4619      	mov	r1, r3
 801d498:	2022      	movs	r0, #34	; 0x22
 801d49a:	f7f9 fb6d 	bl	8016b78 <pbuf_alloc>
 801d49e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801d4a0:	697b      	ldr	r3, [r7, #20]
 801d4a2:	2b00      	cmp	r3, #0
 801d4a4:	d04d      	beq.n	801d542 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801d4a6:	897b      	ldrh	r3, [r7, #10]
 801d4a8:	3313      	adds	r3, #19
 801d4aa:	697a      	ldr	r2, [r7, #20]
 801d4ac:	8952      	ldrh	r2, [r2, #10]
 801d4ae:	4293      	cmp	r3, r2
 801d4b0:	db06      	blt.n	801d4c0 <tcp_output_alloc_header_common+0x4c>
 801d4b2:	4b26      	ldr	r3, [pc, #152]	; (801d54c <tcp_output_alloc_header_common+0xd8>)
 801d4b4:	f240 7223 	movw	r2, #1827	; 0x723
 801d4b8:	4925      	ldr	r1, [pc, #148]	; (801d550 <tcp_output_alloc_header_common+0xdc>)
 801d4ba:	4826      	ldr	r0, [pc, #152]	; (801d554 <tcp_output_alloc_header_common+0xe0>)
 801d4bc:	f003 fcd6 	bl	8020e6c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801d4c0:	697b      	ldr	r3, [r7, #20]
 801d4c2:	685b      	ldr	r3, [r3, #4]
 801d4c4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801d4c6:	8c3b      	ldrh	r3, [r7, #32]
 801d4c8:	4618      	mov	r0, r3
 801d4ca:	f7f5 ff3d 	bl	8013348 <lwip_htons>
 801d4ce:	4603      	mov	r3, r0
 801d4d0:	461a      	mov	r2, r3
 801d4d2:	693b      	ldr	r3, [r7, #16]
 801d4d4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801d4d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d4d8:	4618      	mov	r0, r3
 801d4da:	f7f5 ff35 	bl	8013348 <lwip_htons>
 801d4de:	4603      	mov	r3, r0
 801d4e0:	461a      	mov	r2, r3
 801d4e2:	693b      	ldr	r3, [r7, #16]
 801d4e4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801d4e6:	693b      	ldr	r3, [r7, #16]
 801d4e8:	687a      	ldr	r2, [r7, #4]
 801d4ea:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801d4ec:	68f8      	ldr	r0, [r7, #12]
 801d4ee:	f7f5 ff40 	bl	8013372 <lwip_htonl>
 801d4f2:	4602      	mov	r2, r0
 801d4f4:	693b      	ldr	r3, [r7, #16]
 801d4f6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801d4f8:	897b      	ldrh	r3, [r7, #10]
 801d4fa:	089b      	lsrs	r3, r3, #2
 801d4fc:	b29b      	uxth	r3, r3
 801d4fe:	3305      	adds	r3, #5
 801d500:	b29b      	uxth	r3, r3
 801d502:	031b      	lsls	r3, r3, #12
 801d504:	b29a      	uxth	r2, r3
 801d506:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801d50a:	b29b      	uxth	r3, r3
 801d50c:	4313      	orrs	r3, r2
 801d50e:	b29b      	uxth	r3, r3
 801d510:	4618      	mov	r0, r3
 801d512:	f7f5 ff19 	bl	8013348 <lwip_htons>
 801d516:	4603      	mov	r3, r0
 801d518:	461a      	mov	r2, r3
 801d51a:	693b      	ldr	r3, [r7, #16]
 801d51c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801d51e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801d520:	4618      	mov	r0, r3
 801d522:	f7f5 ff11 	bl	8013348 <lwip_htons>
 801d526:	4603      	mov	r3, r0
 801d528:	461a      	mov	r2, r3
 801d52a:	693b      	ldr	r3, [r7, #16]
 801d52c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801d52e:	693b      	ldr	r3, [r7, #16]
 801d530:	2200      	movs	r2, #0
 801d532:	741a      	strb	r2, [r3, #16]
 801d534:	2200      	movs	r2, #0
 801d536:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801d538:	693b      	ldr	r3, [r7, #16]
 801d53a:	2200      	movs	r2, #0
 801d53c:	749a      	strb	r2, [r3, #18]
 801d53e:	2200      	movs	r2, #0
 801d540:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801d542:	697b      	ldr	r3, [r7, #20]
}
 801d544:	4618      	mov	r0, r3
 801d546:	3718      	adds	r7, #24
 801d548:	46bd      	mov	sp, r7
 801d54a:	bd80      	pop	{r7, pc}
 801d54c:	08027d94 	.word	0x08027d94
 801d550:	08028498 	.word	0x08028498
 801d554:	08027e14 	.word	0x08027e14

0801d558 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801d558:	b5b0      	push	{r4, r5, r7, lr}
 801d55a:	b08a      	sub	sp, #40	; 0x28
 801d55c:	af04      	add	r7, sp, #16
 801d55e:	60f8      	str	r0, [r7, #12]
 801d560:	607b      	str	r3, [r7, #4]
 801d562:	460b      	mov	r3, r1
 801d564:	817b      	strh	r3, [r7, #10]
 801d566:	4613      	mov	r3, r2
 801d568:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801d56a:	68fb      	ldr	r3, [r7, #12]
 801d56c:	2b00      	cmp	r3, #0
 801d56e:	d106      	bne.n	801d57e <tcp_output_alloc_header+0x26>
 801d570:	4b15      	ldr	r3, [pc, #84]	; (801d5c8 <tcp_output_alloc_header+0x70>)
 801d572:	f240 7242 	movw	r2, #1858	; 0x742
 801d576:	4915      	ldr	r1, [pc, #84]	; (801d5cc <tcp_output_alloc_header+0x74>)
 801d578:	4815      	ldr	r0, [pc, #84]	; (801d5d0 <tcp_output_alloc_header+0x78>)
 801d57a:	f003 fc77 	bl	8020e6c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801d57e:	68fb      	ldr	r3, [r7, #12]
 801d580:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801d582:	68fb      	ldr	r3, [r7, #12]
 801d584:	8adb      	ldrh	r3, [r3, #22]
 801d586:	68fa      	ldr	r2, [r7, #12]
 801d588:	8b12      	ldrh	r2, [r2, #24]
 801d58a:	68f9      	ldr	r1, [r7, #12]
 801d58c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801d58e:	893d      	ldrh	r5, [r7, #8]
 801d590:	897c      	ldrh	r4, [r7, #10]
 801d592:	9103      	str	r1, [sp, #12]
 801d594:	2110      	movs	r1, #16
 801d596:	9102      	str	r1, [sp, #8]
 801d598:	9201      	str	r2, [sp, #4]
 801d59a:	9300      	str	r3, [sp, #0]
 801d59c:	687b      	ldr	r3, [r7, #4]
 801d59e:	462a      	mov	r2, r5
 801d5a0:	4621      	mov	r1, r4
 801d5a2:	f7ff ff67 	bl	801d474 <tcp_output_alloc_header_common>
 801d5a6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801d5a8:	697b      	ldr	r3, [r7, #20]
 801d5aa:	2b00      	cmp	r3, #0
 801d5ac:	d006      	beq.n	801d5bc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801d5ae:	68fb      	ldr	r3, [r7, #12]
 801d5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d5b2:	68fa      	ldr	r2, [r7, #12]
 801d5b4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801d5b6:	441a      	add	r2, r3
 801d5b8:	68fb      	ldr	r3, [r7, #12]
 801d5ba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801d5bc:	697b      	ldr	r3, [r7, #20]
}
 801d5be:	4618      	mov	r0, r3
 801d5c0:	3718      	adds	r7, #24
 801d5c2:	46bd      	mov	sp, r7
 801d5c4:	bdb0      	pop	{r4, r5, r7, pc}
 801d5c6:	bf00      	nop
 801d5c8:	08027d94 	.word	0x08027d94
 801d5cc:	080284c8 	.word	0x080284c8
 801d5d0:	08027e14 	.word	0x08027e14

0801d5d4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801d5d4:	b580      	push	{r7, lr}
 801d5d6:	b088      	sub	sp, #32
 801d5d8:	af00      	add	r7, sp, #0
 801d5da:	60f8      	str	r0, [r7, #12]
 801d5dc:	60b9      	str	r1, [r7, #8]
 801d5de:	4611      	mov	r1, r2
 801d5e0:	461a      	mov	r2, r3
 801d5e2:	460b      	mov	r3, r1
 801d5e4:	71fb      	strb	r3, [r7, #7]
 801d5e6:	4613      	mov	r3, r2
 801d5e8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801d5ea:	2300      	movs	r3, #0
 801d5ec:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801d5ee:	68bb      	ldr	r3, [r7, #8]
 801d5f0:	2b00      	cmp	r3, #0
 801d5f2:	d106      	bne.n	801d602 <tcp_output_fill_options+0x2e>
 801d5f4:	4b13      	ldr	r3, [pc, #76]	; (801d644 <tcp_output_fill_options+0x70>)
 801d5f6:	f240 7256 	movw	r2, #1878	; 0x756
 801d5fa:	4913      	ldr	r1, [pc, #76]	; (801d648 <tcp_output_fill_options+0x74>)
 801d5fc:	4813      	ldr	r0, [pc, #76]	; (801d64c <tcp_output_fill_options+0x78>)
 801d5fe:	f003 fc35 	bl	8020e6c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801d602:	68bb      	ldr	r3, [r7, #8]
 801d604:	685b      	ldr	r3, [r3, #4]
 801d606:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801d608:	69bb      	ldr	r3, [r7, #24]
 801d60a:	3314      	adds	r3, #20
 801d60c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801d60e:	69bb      	ldr	r3, [r7, #24]
 801d610:	f103 0214 	add.w	r2, r3, #20
 801d614:	8bfb      	ldrh	r3, [r7, #30]
 801d616:	009b      	lsls	r3, r3, #2
 801d618:	4619      	mov	r1, r3
 801d61a:	79fb      	ldrb	r3, [r7, #7]
 801d61c:	009b      	lsls	r3, r3, #2
 801d61e:	f003 0304 	and.w	r3, r3, #4
 801d622:	440b      	add	r3, r1
 801d624:	4413      	add	r3, r2
 801d626:	697a      	ldr	r2, [r7, #20]
 801d628:	429a      	cmp	r2, r3
 801d62a:	d006      	beq.n	801d63a <tcp_output_fill_options+0x66>
 801d62c:	4b05      	ldr	r3, [pc, #20]	; (801d644 <tcp_output_fill_options+0x70>)
 801d62e:	f240 7275 	movw	r2, #1909	; 0x775
 801d632:	4907      	ldr	r1, [pc, #28]	; (801d650 <tcp_output_fill_options+0x7c>)
 801d634:	4805      	ldr	r0, [pc, #20]	; (801d64c <tcp_output_fill_options+0x78>)
 801d636:	f003 fc19 	bl	8020e6c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801d63a:	bf00      	nop
 801d63c:	3720      	adds	r7, #32
 801d63e:	46bd      	mov	sp, r7
 801d640:	bd80      	pop	{r7, pc}
 801d642:	bf00      	nop
 801d644:	08027d94 	.word	0x08027d94
 801d648:	080284f0 	.word	0x080284f0
 801d64c:	08027e14 	.word	0x08027e14
 801d650:	080283e8 	.word	0x080283e8

0801d654 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801d654:	b580      	push	{r7, lr}
 801d656:	b08a      	sub	sp, #40	; 0x28
 801d658:	af04      	add	r7, sp, #16
 801d65a:	60f8      	str	r0, [r7, #12]
 801d65c:	60b9      	str	r1, [r7, #8]
 801d65e:	607a      	str	r2, [r7, #4]
 801d660:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801d662:	68bb      	ldr	r3, [r7, #8]
 801d664:	2b00      	cmp	r3, #0
 801d666:	d106      	bne.n	801d676 <tcp_output_control_segment+0x22>
 801d668:	4b1c      	ldr	r3, [pc, #112]	; (801d6dc <tcp_output_control_segment+0x88>)
 801d66a:	f240 7287 	movw	r2, #1927	; 0x787
 801d66e:	491c      	ldr	r1, [pc, #112]	; (801d6e0 <tcp_output_control_segment+0x8c>)
 801d670:	481c      	ldr	r0, [pc, #112]	; (801d6e4 <tcp_output_control_segment+0x90>)
 801d672:	f003 fbfb 	bl	8020e6c <iprintf>

  netif = tcp_route(pcb, src, dst);
 801d676:	683a      	ldr	r2, [r7, #0]
 801d678:	6879      	ldr	r1, [r7, #4]
 801d67a:	68f8      	ldr	r0, [r7, #12]
 801d67c:	f7fe fae8 	bl	801bc50 <tcp_route>
 801d680:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801d682:	693b      	ldr	r3, [r7, #16]
 801d684:	2b00      	cmp	r3, #0
 801d686:	d102      	bne.n	801d68e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801d688:	23fc      	movs	r3, #252	; 0xfc
 801d68a:	75fb      	strb	r3, [r7, #23]
 801d68c:	e01c      	b.n	801d6c8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801d68e:	68fb      	ldr	r3, [r7, #12]
 801d690:	2b00      	cmp	r3, #0
 801d692:	d006      	beq.n	801d6a2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801d694:	68fb      	ldr	r3, [r7, #12]
 801d696:	7adb      	ldrb	r3, [r3, #11]
 801d698:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801d69a:	68fb      	ldr	r3, [r7, #12]
 801d69c:	7a9b      	ldrb	r3, [r3, #10]
 801d69e:	757b      	strb	r3, [r7, #21]
 801d6a0:	e003      	b.n	801d6aa <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801d6a2:	23ff      	movs	r3, #255	; 0xff
 801d6a4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801d6a6:	2300      	movs	r3, #0
 801d6a8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801d6aa:	7dba      	ldrb	r2, [r7, #22]
 801d6ac:	693b      	ldr	r3, [r7, #16]
 801d6ae:	9302      	str	r3, [sp, #8]
 801d6b0:	2306      	movs	r3, #6
 801d6b2:	9301      	str	r3, [sp, #4]
 801d6b4:	7d7b      	ldrb	r3, [r7, #21]
 801d6b6:	9300      	str	r3, [sp, #0]
 801d6b8:	4613      	mov	r3, r2
 801d6ba:	683a      	ldr	r2, [r7, #0]
 801d6bc:	6879      	ldr	r1, [r7, #4]
 801d6be:	68b8      	ldr	r0, [r7, #8]
 801d6c0:	f7f7 fad6 	bl	8014c70 <ip4_output_if>
 801d6c4:	4603      	mov	r3, r0
 801d6c6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801d6c8:	68b8      	ldr	r0, [r7, #8]
 801d6ca:	f7f9 fd39 	bl	8017140 <pbuf_free>
  return err;
 801d6ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801d6d2:	4618      	mov	r0, r3
 801d6d4:	3718      	adds	r7, #24
 801d6d6:	46bd      	mov	sp, r7
 801d6d8:	bd80      	pop	{r7, pc}
 801d6da:	bf00      	nop
 801d6dc:	08027d94 	.word	0x08027d94
 801d6e0:	08028518 	.word	0x08028518
 801d6e4:	08027e14 	.word	0x08027e14

0801d6e8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801d6e8:	b590      	push	{r4, r7, lr}
 801d6ea:	b08b      	sub	sp, #44	; 0x2c
 801d6ec:	af04      	add	r7, sp, #16
 801d6ee:	60f8      	str	r0, [r7, #12]
 801d6f0:	60b9      	str	r1, [r7, #8]
 801d6f2:	607a      	str	r2, [r7, #4]
 801d6f4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801d6f6:	683b      	ldr	r3, [r7, #0]
 801d6f8:	2b00      	cmp	r3, #0
 801d6fa:	d106      	bne.n	801d70a <tcp_rst+0x22>
 801d6fc:	4b1f      	ldr	r3, [pc, #124]	; (801d77c <tcp_rst+0x94>)
 801d6fe:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801d702:	491f      	ldr	r1, [pc, #124]	; (801d780 <tcp_rst+0x98>)
 801d704:	481f      	ldr	r0, [pc, #124]	; (801d784 <tcp_rst+0x9c>)
 801d706:	f003 fbb1 	bl	8020e6c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801d70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d70c:	2b00      	cmp	r3, #0
 801d70e:	d106      	bne.n	801d71e <tcp_rst+0x36>
 801d710:	4b1a      	ldr	r3, [pc, #104]	; (801d77c <tcp_rst+0x94>)
 801d712:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801d716:	491c      	ldr	r1, [pc, #112]	; (801d788 <tcp_rst+0xa0>)
 801d718:	481a      	ldr	r0, [pc, #104]	; (801d784 <tcp_rst+0x9c>)
 801d71a:	f003 fba7 	bl	8020e6c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801d71e:	2300      	movs	r3, #0
 801d720:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801d722:	f246 0308 	movw	r3, #24584	; 0x6008
 801d726:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801d728:	7dfb      	ldrb	r3, [r7, #23]
 801d72a:	b29c      	uxth	r4, r3
 801d72c:	68b8      	ldr	r0, [r7, #8]
 801d72e:	f7f5 fe20 	bl	8013372 <lwip_htonl>
 801d732:	4602      	mov	r2, r0
 801d734:	8abb      	ldrh	r3, [r7, #20]
 801d736:	9303      	str	r3, [sp, #12]
 801d738:	2314      	movs	r3, #20
 801d73a:	9302      	str	r3, [sp, #8]
 801d73c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801d73e:	9301      	str	r3, [sp, #4]
 801d740:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801d742:	9300      	str	r3, [sp, #0]
 801d744:	4613      	mov	r3, r2
 801d746:	2200      	movs	r2, #0
 801d748:	4621      	mov	r1, r4
 801d74a:	6878      	ldr	r0, [r7, #4]
 801d74c:	f7ff fe92 	bl	801d474 <tcp_output_alloc_header_common>
 801d750:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801d752:	693b      	ldr	r3, [r7, #16]
 801d754:	2b00      	cmp	r3, #0
 801d756:	d00c      	beq.n	801d772 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801d758:	7dfb      	ldrb	r3, [r7, #23]
 801d75a:	2200      	movs	r2, #0
 801d75c:	6939      	ldr	r1, [r7, #16]
 801d75e:	68f8      	ldr	r0, [r7, #12]
 801d760:	f7ff ff38 	bl	801d5d4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801d764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d766:	683a      	ldr	r2, [r7, #0]
 801d768:	6939      	ldr	r1, [r7, #16]
 801d76a:	68f8      	ldr	r0, [r7, #12]
 801d76c:	f7ff ff72 	bl	801d654 <tcp_output_control_segment>
 801d770:	e000      	b.n	801d774 <tcp_rst+0x8c>
    return;
 801d772:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801d774:	371c      	adds	r7, #28
 801d776:	46bd      	mov	sp, r7
 801d778:	bd90      	pop	{r4, r7, pc}
 801d77a:	bf00      	nop
 801d77c:	08027d94 	.word	0x08027d94
 801d780:	08028544 	.word	0x08028544
 801d784:	08027e14 	.word	0x08027e14
 801d788:	08028560 	.word	0x08028560

0801d78c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801d78c:	b590      	push	{r4, r7, lr}
 801d78e:	b087      	sub	sp, #28
 801d790:	af00      	add	r7, sp, #0
 801d792:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801d794:	2300      	movs	r3, #0
 801d796:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801d798:	2300      	movs	r3, #0
 801d79a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801d79c:	687b      	ldr	r3, [r7, #4]
 801d79e:	2b00      	cmp	r3, #0
 801d7a0:	d106      	bne.n	801d7b0 <tcp_send_empty_ack+0x24>
 801d7a2:	4b28      	ldr	r3, [pc, #160]	; (801d844 <tcp_send_empty_ack+0xb8>)
 801d7a4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801d7a8:	4927      	ldr	r1, [pc, #156]	; (801d848 <tcp_send_empty_ack+0xbc>)
 801d7aa:	4828      	ldr	r0, [pc, #160]	; (801d84c <tcp_send_empty_ack+0xc0>)
 801d7ac:	f003 fb5e 	bl	8020e6c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801d7b0:	7dfb      	ldrb	r3, [r7, #23]
 801d7b2:	009b      	lsls	r3, r3, #2
 801d7b4:	b2db      	uxtb	r3, r3
 801d7b6:	f003 0304 	and.w	r3, r3, #4
 801d7ba:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801d7bc:	7d7b      	ldrb	r3, [r7, #21]
 801d7be:	b29c      	uxth	r4, r3
 801d7c0:	687b      	ldr	r3, [r7, #4]
 801d7c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d7c4:	4618      	mov	r0, r3
 801d7c6:	f7f5 fdd4 	bl	8013372 <lwip_htonl>
 801d7ca:	4603      	mov	r3, r0
 801d7cc:	2200      	movs	r2, #0
 801d7ce:	4621      	mov	r1, r4
 801d7d0:	6878      	ldr	r0, [r7, #4]
 801d7d2:	f7ff fec1 	bl	801d558 <tcp_output_alloc_header>
 801d7d6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801d7d8:	693b      	ldr	r3, [r7, #16]
 801d7da:	2b00      	cmp	r3, #0
 801d7dc:	d109      	bne.n	801d7f2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801d7de:	687b      	ldr	r3, [r7, #4]
 801d7e0:	8b5b      	ldrh	r3, [r3, #26]
 801d7e2:	f043 0303 	orr.w	r3, r3, #3
 801d7e6:	b29a      	uxth	r2, r3
 801d7e8:	687b      	ldr	r3, [r7, #4]
 801d7ea:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801d7ec:	f06f 0301 	mvn.w	r3, #1
 801d7f0:	e023      	b.n	801d83a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801d7f2:	7dbb      	ldrb	r3, [r7, #22]
 801d7f4:	7dfa      	ldrb	r2, [r7, #23]
 801d7f6:	6939      	ldr	r1, [r7, #16]
 801d7f8:	6878      	ldr	r0, [r7, #4]
 801d7fa:	f7ff feeb 	bl	801d5d4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801d7fe:	687a      	ldr	r2, [r7, #4]
 801d800:	687b      	ldr	r3, [r7, #4]
 801d802:	3304      	adds	r3, #4
 801d804:	6939      	ldr	r1, [r7, #16]
 801d806:	6878      	ldr	r0, [r7, #4]
 801d808:	f7ff ff24 	bl	801d654 <tcp_output_control_segment>
 801d80c:	4603      	mov	r3, r0
 801d80e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801d810:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d814:	2b00      	cmp	r3, #0
 801d816:	d007      	beq.n	801d828 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801d818:	687b      	ldr	r3, [r7, #4]
 801d81a:	8b5b      	ldrh	r3, [r3, #26]
 801d81c:	f043 0303 	orr.w	r3, r3, #3
 801d820:	b29a      	uxth	r2, r3
 801d822:	687b      	ldr	r3, [r7, #4]
 801d824:	835a      	strh	r2, [r3, #26]
 801d826:	e006      	b.n	801d836 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801d828:	687b      	ldr	r3, [r7, #4]
 801d82a:	8b5b      	ldrh	r3, [r3, #26]
 801d82c:	f023 0303 	bic.w	r3, r3, #3
 801d830:	b29a      	uxth	r2, r3
 801d832:	687b      	ldr	r3, [r7, #4]
 801d834:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801d836:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801d83a:	4618      	mov	r0, r3
 801d83c:	371c      	adds	r7, #28
 801d83e:	46bd      	mov	sp, r7
 801d840:	bd90      	pop	{r4, r7, pc}
 801d842:	bf00      	nop
 801d844:	08027d94 	.word	0x08027d94
 801d848:	0802857c 	.word	0x0802857c
 801d84c:	08027e14 	.word	0x08027e14

0801d850 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801d850:	b590      	push	{r4, r7, lr}
 801d852:	b087      	sub	sp, #28
 801d854:	af00      	add	r7, sp, #0
 801d856:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801d858:	2300      	movs	r3, #0
 801d85a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801d85c:	687b      	ldr	r3, [r7, #4]
 801d85e:	2b00      	cmp	r3, #0
 801d860:	d106      	bne.n	801d870 <tcp_keepalive+0x20>
 801d862:	4b18      	ldr	r3, [pc, #96]	; (801d8c4 <tcp_keepalive+0x74>)
 801d864:	f640 0224 	movw	r2, #2084	; 0x824
 801d868:	4917      	ldr	r1, [pc, #92]	; (801d8c8 <tcp_keepalive+0x78>)
 801d86a:	4818      	ldr	r0, [pc, #96]	; (801d8cc <tcp_keepalive+0x7c>)
 801d86c:	f003 fafe 	bl	8020e6c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801d870:	7dfb      	ldrb	r3, [r7, #23]
 801d872:	b29c      	uxth	r4, r3
 801d874:	687b      	ldr	r3, [r7, #4]
 801d876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d878:	3b01      	subs	r3, #1
 801d87a:	4618      	mov	r0, r3
 801d87c:	f7f5 fd79 	bl	8013372 <lwip_htonl>
 801d880:	4603      	mov	r3, r0
 801d882:	2200      	movs	r2, #0
 801d884:	4621      	mov	r1, r4
 801d886:	6878      	ldr	r0, [r7, #4]
 801d888:	f7ff fe66 	bl	801d558 <tcp_output_alloc_header>
 801d88c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801d88e:	693b      	ldr	r3, [r7, #16]
 801d890:	2b00      	cmp	r3, #0
 801d892:	d102      	bne.n	801d89a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801d894:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d898:	e010      	b.n	801d8bc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801d89a:	7dfb      	ldrb	r3, [r7, #23]
 801d89c:	2200      	movs	r2, #0
 801d89e:	6939      	ldr	r1, [r7, #16]
 801d8a0:	6878      	ldr	r0, [r7, #4]
 801d8a2:	f7ff fe97 	bl	801d5d4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801d8a6:	687a      	ldr	r2, [r7, #4]
 801d8a8:	687b      	ldr	r3, [r7, #4]
 801d8aa:	3304      	adds	r3, #4
 801d8ac:	6939      	ldr	r1, [r7, #16]
 801d8ae:	6878      	ldr	r0, [r7, #4]
 801d8b0:	f7ff fed0 	bl	801d654 <tcp_output_control_segment>
 801d8b4:	4603      	mov	r3, r0
 801d8b6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801d8b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801d8bc:	4618      	mov	r0, r3
 801d8be:	371c      	adds	r7, #28
 801d8c0:	46bd      	mov	sp, r7
 801d8c2:	bd90      	pop	{r4, r7, pc}
 801d8c4:	08027d94 	.word	0x08027d94
 801d8c8:	0802859c 	.word	0x0802859c
 801d8cc:	08027e14 	.word	0x08027e14

0801d8d0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801d8d0:	b590      	push	{r4, r7, lr}
 801d8d2:	b08b      	sub	sp, #44	; 0x2c
 801d8d4:	af00      	add	r7, sp, #0
 801d8d6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801d8d8:	2300      	movs	r3, #0
 801d8da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801d8de:	687b      	ldr	r3, [r7, #4]
 801d8e0:	2b00      	cmp	r3, #0
 801d8e2:	d106      	bne.n	801d8f2 <tcp_zero_window_probe+0x22>
 801d8e4:	4b4c      	ldr	r3, [pc, #304]	; (801da18 <tcp_zero_window_probe+0x148>)
 801d8e6:	f640 024f 	movw	r2, #2127	; 0x84f
 801d8ea:	494c      	ldr	r1, [pc, #304]	; (801da1c <tcp_zero_window_probe+0x14c>)
 801d8ec:	484c      	ldr	r0, [pc, #304]	; (801da20 <tcp_zero_window_probe+0x150>)
 801d8ee:	f003 fabd 	bl	8020e6c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801d8f2:	687b      	ldr	r3, [r7, #4]
 801d8f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d8f6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801d8f8:	6a3b      	ldr	r3, [r7, #32]
 801d8fa:	2b00      	cmp	r3, #0
 801d8fc:	d101      	bne.n	801d902 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801d8fe:	2300      	movs	r3, #0
 801d900:	e086      	b.n	801da10 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801d902:	687b      	ldr	r3, [r7, #4]
 801d904:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801d908:	2bff      	cmp	r3, #255	; 0xff
 801d90a:	d007      	beq.n	801d91c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801d90c:	687b      	ldr	r3, [r7, #4]
 801d90e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801d912:	3301      	adds	r3, #1
 801d914:	b2da      	uxtb	r2, r3
 801d916:	687b      	ldr	r3, [r7, #4]
 801d918:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801d91c:	6a3b      	ldr	r3, [r7, #32]
 801d91e:	68db      	ldr	r3, [r3, #12]
 801d920:	899b      	ldrh	r3, [r3, #12]
 801d922:	b29b      	uxth	r3, r3
 801d924:	4618      	mov	r0, r3
 801d926:	f7f5 fd0f 	bl	8013348 <lwip_htons>
 801d92a:	4603      	mov	r3, r0
 801d92c:	b2db      	uxtb	r3, r3
 801d92e:	f003 0301 	and.w	r3, r3, #1
 801d932:	2b00      	cmp	r3, #0
 801d934:	d005      	beq.n	801d942 <tcp_zero_window_probe+0x72>
 801d936:	6a3b      	ldr	r3, [r7, #32]
 801d938:	891b      	ldrh	r3, [r3, #8]
 801d93a:	2b00      	cmp	r3, #0
 801d93c:	d101      	bne.n	801d942 <tcp_zero_window_probe+0x72>
 801d93e:	2301      	movs	r3, #1
 801d940:	e000      	b.n	801d944 <tcp_zero_window_probe+0x74>
 801d942:	2300      	movs	r3, #0
 801d944:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801d946:	7ffb      	ldrb	r3, [r7, #31]
 801d948:	2b00      	cmp	r3, #0
 801d94a:	bf0c      	ite	eq
 801d94c:	2301      	moveq	r3, #1
 801d94e:	2300      	movne	r3, #0
 801d950:	b2db      	uxtb	r3, r3
 801d952:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801d954:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d958:	b299      	uxth	r1, r3
 801d95a:	6a3b      	ldr	r3, [r7, #32]
 801d95c:	68db      	ldr	r3, [r3, #12]
 801d95e:	685b      	ldr	r3, [r3, #4]
 801d960:	8bba      	ldrh	r2, [r7, #28]
 801d962:	6878      	ldr	r0, [r7, #4]
 801d964:	f7ff fdf8 	bl	801d558 <tcp_output_alloc_header>
 801d968:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801d96a:	69bb      	ldr	r3, [r7, #24]
 801d96c:	2b00      	cmp	r3, #0
 801d96e:	d102      	bne.n	801d976 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801d970:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d974:	e04c      	b.n	801da10 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801d976:	69bb      	ldr	r3, [r7, #24]
 801d978:	685b      	ldr	r3, [r3, #4]
 801d97a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801d97c:	7ffb      	ldrb	r3, [r7, #31]
 801d97e:	2b00      	cmp	r3, #0
 801d980:	d011      	beq.n	801d9a6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801d982:	697b      	ldr	r3, [r7, #20]
 801d984:	899b      	ldrh	r3, [r3, #12]
 801d986:	b29b      	uxth	r3, r3
 801d988:	b21b      	sxth	r3, r3
 801d98a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801d98e:	b21c      	sxth	r4, r3
 801d990:	2011      	movs	r0, #17
 801d992:	f7f5 fcd9 	bl	8013348 <lwip_htons>
 801d996:	4603      	mov	r3, r0
 801d998:	b21b      	sxth	r3, r3
 801d99a:	4323      	orrs	r3, r4
 801d99c:	b21b      	sxth	r3, r3
 801d99e:	b29a      	uxth	r2, r3
 801d9a0:	697b      	ldr	r3, [r7, #20]
 801d9a2:	819a      	strh	r2, [r3, #12]
 801d9a4:	e010      	b.n	801d9c8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801d9a6:	69bb      	ldr	r3, [r7, #24]
 801d9a8:	685b      	ldr	r3, [r3, #4]
 801d9aa:	3314      	adds	r3, #20
 801d9ac:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801d9ae:	6a3b      	ldr	r3, [r7, #32]
 801d9b0:	6858      	ldr	r0, [r3, #4]
 801d9b2:	6a3b      	ldr	r3, [r7, #32]
 801d9b4:	685b      	ldr	r3, [r3, #4]
 801d9b6:	891a      	ldrh	r2, [r3, #8]
 801d9b8:	6a3b      	ldr	r3, [r7, #32]
 801d9ba:	891b      	ldrh	r3, [r3, #8]
 801d9bc:	1ad3      	subs	r3, r2, r3
 801d9be:	b29b      	uxth	r3, r3
 801d9c0:	2201      	movs	r2, #1
 801d9c2:	6939      	ldr	r1, [r7, #16]
 801d9c4:	f7f9 fda6 	bl	8017514 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801d9c8:	6a3b      	ldr	r3, [r7, #32]
 801d9ca:	68db      	ldr	r3, [r3, #12]
 801d9cc:	685b      	ldr	r3, [r3, #4]
 801d9ce:	4618      	mov	r0, r3
 801d9d0:	f7f5 fccf 	bl	8013372 <lwip_htonl>
 801d9d4:	4603      	mov	r3, r0
 801d9d6:	3301      	adds	r3, #1
 801d9d8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801d9da:	687b      	ldr	r3, [r7, #4]
 801d9dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d9de:	68fb      	ldr	r3, [r7, #12]
 801d9e0:	1ad3      	subs	r3, r2, r3
 801d9e2:	2b00      	cmp	r3, #0
 801d9e4:	da02      	bge.n	801d9ec <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801d9e6:	687b      	ldr	r3, [r7, #4]
 801d9e8:	68fa      	ldr	r2, [r7, #12]
 801d9ea:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801d9ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d9f0:	2200      	movs	r2, #0
 801d9f2:	69b9      	ldr	r1, [r7, #24]
 801d9f4:	6878      	ldr	r0, [r7, #4]
 801d9f6:	f7ff fded 	bl	801d5d4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801d9fa:	687a      	ldr	r2, [r7, #4]
 801d9fc:	687b      	ldr	r3, [r7, #4]
 801d9fe:	3304      	adds	r3, #4
 801da00:	69b9      	ldr	r1, [r7, #24]
 801da02:	6878      	ldr	r0, [r7, #4]
 801da04:	f7ff fe26 	bl	801d654 <tcp_output_control_segment>
 801da08:	4603      	mov	r3, r0
 801da0a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801da0c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801da10:	4618      	mov	r0, r3
 801da12:	372c      	adds	r7, #44	; 0x2c
 801da14:	46bd      	mov	sp, r7
 801da16:	bd90      	pop	{r4, r7, pc}
 801da18:	08027d94 	.word	0x08027d94
 801da1c:	080285b8 	.word	0x080285b8
 801da20:	08027e14 	.word	0x08027e14

0801da24 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801da24:	b580      	push	{r7, lr}
 801da26:	b082      	sub	sp, #8
 801da28:	af00      	add	r7, sp, #0
 801da2a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801da2c:	f7f9 ff18 	bl	8017860 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801da30:	4b0a      	ldr	r3, [pc, #40]	; (801da5c <tcpip_tcp_timer+0x38>)
 801da32:	681b      	ldr	r3, [r3, #0]
 801da34:	2b00      	cmp	r3, #0
 801da36:	d103      	bne.n	801da40 <tcpip_tcp_timer+0x1c>
 801da38:	4b09      	ldr	r3, [pc, #36]	; (801da60 <tcpip_tcp_timer+0x3c>)
 801da3a:	681b      	ldr	r3, [r3, #0]
 801da3c:	2b00      	cmp	r3, #0
 801da3e:	d005      	beq.n	801da4c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801da40:	2200      	movs	r2, #0
 801da42:	4908      	ldr	r1, [pc, #32]	; (801da64 <tcpip_tcp_timer+0x40>)
 801da44:	20fa      	movs	r0, #250	; 0xfa
 801da46:	f000 f8f3 	bl	801dc30 <sys_timeout>
 801da4a:	e003      	b.n	801da54 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801da4c:	4b06      	ldr	r3, [pc, #24]	; (801da68 <tcpip_tcp_timer+0x44>)
 801da4e:	2200      	movs	r2, #0
 801da50:	601a      	str	r2, [r3, #0]
  }
}
 801da52:	bf00      	nop
 801da54:	bf00      	nop
 801da56:	3708      	adds	r7, #8
 801da58:	46bd      	mov	sp, r7
 801da5a:	bd80      	pop	{r7, pc}
 801da5c:	240082b8 	.word	0x240082b8
 801da60:	240082c8 	.word	0x240082c8
 801da64:	0801da25 	.word	0x0801da25
 801da68:	240048dc 	.word	0x240048dc

0801da6c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801da6c:	b580      	push	{r7, lr}
 801da6e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801da70:	4b0a      	ldr	r3, [pc, #40]	; (801da9c <tcp_timer_needed+0x30>)
 801da72:	681b      	ldr	r3, [r3, #0]
 801da74:	2b00      	cmp	r3, #0
 801da76:	d10f      	bne.n	801da98 <tcp_timer_needed+0x2c>
 801da78:	4b09      	ldr	r3, [pc, #36]	; (801daa0 <tcp_timer_needed+0x34>)
 801da7a:	681b      	ldr	r3, [r3, #0]
 801da7c:	2b00      	cmp	r3, #0
 801da7e:	d103      	bne.n	801da88 <tcp_timer_needed+0x1c>
 801da80:	4b08      	ldr	r3, [pc, #32]	; (801daa4 <tcp_timer_needed+0x38>)
 801da82:	681b      	ldr	r3, [r3, #0]
 801da84:	2b00      	cmp	r3, #0
 801da86:	d007      	beq.n	801da98 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801da88:	4b04      	ldr	r3, [pc, #16]	; (801da9c <tcp_timer_needed+0x30>)
 801da8a:	2201      	movs	r2, #1
 801da8c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801da8e:	2200      	movs	r2, #0
 801da90:	4905      	ldr	r1, [pc, #20]	; (801daa8 <tcp_timer_needed+0x3c>)
 801da92:	20fa      	movs	r0, #250	; 0xfa
 801da94:	f000 f8cc 	bl	801dc30 <sys_timeout>
  }
}
 801da98:	bf00      	nop
 801da9a:	bd80      	pop	{r7, pc}
 801da9c:	240048dc 	.word	0x240048dc
 801daa0:	240082b8 	.word	0x240082b8
 801daa4:	240082c8 	.word	0x240082c8
 801daa8:	0801da25 	.word	0x0801da25

0801daac <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801daac:	b580      	push	{r7, lr}
 801daae:	b086      	sub	sp, #24
 801dab0:	af00      	add	r7, sp, #0
 801dab2:	60f8      	str	r0, [r7, #12]
 801dab4:	60b9      	str	r1, [r7, #8]
 801dab6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801dab8:	2006      	movs	r0, #6
 801daba:	f7f8 fc5b 	bl	8016374 <memp_malloc>
 801dabe:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801dac0:	693b      	ldr	r3, [r7, #16]
 801dac2:	2b00      	cmp	r3, #0
 801dac4:	d109      	bne.n	801dada <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801dac6:	693b      	ldr	r3, [r7, #16]
 801dac8:	2b00      	cmp	r3, #0
 801daca:	d151      	bne.n	801db70 <sys_timeout_abs+0xc4>
 801dacc:	4b2a      	ldr	r3, [pc, #168]	; (801db78 <sys_timeout_abs+0xcc>)
 801dace:	22be      	movs	r2, #190	; 0xbe
 801dad0:	492a      	ldr	r1, [pc, #168]	; (801db7c <sys_timeout_abs+0xd0>)
 801dad2:	482b      	ldr	r0, [pc, #172]	; (801db80 <sys_timeout_abs+0xd4>)
 801dad4:	f003 f9ca 	bl	8020e6c <iprintf>
    return;
 801dad8:	e04a      	b.n	801db70 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801dada:	693b      	ldr	r3, [r7, #16]
 801dadc:	2200      	movs	r2, #0
 801dade:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801dae0:	693b      	ldr	r3, [r7, #16]
 801dae2:	68ba      	ldr	r2, [r7, #8]
 801dae4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801dae6:	693b      	ldr	r3, [r7, #16]
 801dae8:	687a      	ldr	r2, [r7, #4]
 801daea:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801daec:	693b      	ldr	r3, [r7, #16]
 801daee:	68fa      	ldr	r2, [r7, #12]
 801daf0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801daf2:	4b24      	ldr	r3, [pc, #144]	; (801db84 <sys_timeout_abs+0xd8>)
 801daf4:	681b      	ldr	r3, [r3, #0]
 801daf6:	2b00      	cmp	r3, #0
 801daf8:	d103      	bne.n	801db02 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801dafa:	4a22      	ldr	r2, [pc, #136]	; (801db84 <sys_timeout_abs+0xd8>)
 801dafc:	693b      	ldr	r3, [r7, #16]
 801dafe:	6013      	str	r3, [r2, #0]
    return;
 801db00:	e037      	b.n	801db72 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801db02:	693b      	ldr	r3, [r7, #16]
 801db04:	685a      	ldr	r2, [r3, #4]
 801db06:	4b1f      	ldr	r3, [pc, #124]	; (801db84 <sys_timeout_abs+0xd8>)
 801db08:	681b      	ldr	r3, [r3, #0]
 801db0a:	685b      	ldr	r3, [r3, #4]
 801db0c:	1ad3      	subs	r3, r2, r3
 801db0e:	0fdb      	lsrs	r3, r3, #31
 801db10:	f003 0301 	and.w	r3, r3, #1
 801db14:	b2db      	uxtb	r3, r3
 801db16:	2b00      	cmp	r3, #0
 801db18:	d007      	beq.n	801db2a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801db1a:	4b1a      	ldr	r3, [pc, #104]	; (801db84 <sys_timeout_abs+0xd8>)
 801db1c:	681a      	ldr	r2, [r3, #0]
 801db1e:	693b      	ldr	r3, [r7, #16]
 801db20:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801db22:	4a18      	ldr	r2, [pc, #96]	; (801db84 <sys_timeout_abs+0xd8>)
 801db24:	693b      	ldr	r3, [r7, #16]
 801db26:	6013      	str	r3, [r2, #0]
 801db28:	e023      	b.n	801db72 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801db2a:	4b16      	ldr	r3, [pc, #88]	; (801db84 <sys_timeout_abs+0xd8>)
 801db2c:	681b      	ldr	r3, [r3, #0]
 801db2e:	617b      	str	r3, [r7, #20]
 801db30:	e01a      	b.n	801db68 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801db32:	697b      	ldr	r3, [r7, #20]
 801db34:	681b      	ldr	r3, [r3, #0]
 801db36:	2b00      	cmp	r3, #0
 801db38:	d00b      	beq.n	801db52 <sys_timeout_abs+0xa6>
 801db3a:	693b      	ldr	r3, [r7, #16]
 801db3c:	685a      	ldr	r2, [r3, #4]
 801db3e:	697b      	ldr	r3, [r7, #20]
 801db40:	681b      	ldr	r3, [r3, #0]
 801db42:	685b      	ldr	r3, [r3, #4]
 801db44:	1ad3      	subs	r3, r2, r3
 801db46:	0fdb      	lsrs	r3, r3, #31
 801db48:	f003 0301 	and.w	r3, r3, #1
 801db4c:	b2db      	uxtb	r3, r3
 801db4e:	2b00      	cmp	r3, #0
 801db50:	d007      	beq.n	801db62 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801db52:	697b      	ldr	r3, [r7, #20]
 801db54:	681a      	ldr	r2, [r3, #0]
 801db56:	693b      	ldr	r3, [r7, #16]
 801db58:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801db5a:	697b      	ldr	r3, [r7, #20]
 801db5c:	693a      	ldr	r2, [r7, #16]
 801db5e:	601a      	str	r2, [r3, #0]
        break;
 801db60:	e007      	b.n	801db72 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801db62:	697b      	ldr	r3, [r7, #20]
 801db64:	681b      	ldr	r3, [r3, #0]
 801db66:	617b      	str	r3, [r7, #20]
 801db68:	697b      	ldr	r3, [r7, #20]
 801db6a:	2b00      	cmp	r3, #0
 801db6c:	d1e1      	bne.n	801db32 <sys_timeout_abs+0x86>
 801db6e:	e000      	b.n	801db72 <sys_timeout_abs+0xc6>
    return;
 801db70:	bf00      	nop
      }
    }
  }
}
 801db72:	3718      	adds	r7, #24
 801db74:	46bd      	mov	sp, r7
 801db76:	bd80      	pop	{r7, pc}
 801db78:	080285dc 	.word	0x080285dc
 801db7c:	0802863c 	.word	0x0802863c
 801db80:	0802867c 	.word	0x0802867c
 801db84:	240048d4 	.word	0x240048d4

0801db88 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801db88:	b580      	push	{r7, lr}
 801db8a:	b086      	sub	sp, #24
 801db8c:	af00      	add	r7, sp, #0
 801db8e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801db90:	687b      	ldr	r3, [r7, #4]
 801db92:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801db94:	697b      	ldr	r3, [r7, #20]
 801db96:	685b      	ldr	r3, [r3, #4]
 801db98:	4798      	blx	r3

  now = sys_now();
 801db9a:	f7f4 fe25 	bl	80127e8 <sys_now>
 801db9e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801dba0:	697b      	ldr	r3, [r7, #20]
 801dba2:	681a      	ldr	r2, [r3, #0]
 801dba4:	4b0f      	ldr	r3, [pc, #60]	; (801dbe4 <lwip_cyclic_timer+0x5c>)
 801dba6:	681b      	ldr	r3, [r3, #0]
 801dba8:	4413      	add	r3, r2
 801dbaa:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801dbac:	68fa      	ldr	r2, [r7, #12]
 801dbae:	693b      	ldr	r3, [r7, #16]
 801dbb0:	1ad3      	subs	r3, r2, r3
 801dbb2:	0fdb      	lsrs	r3, r3, #31
 801dbb4:	f003 0301 	and.w	r3, r3, #1
 801dbb8:	b2db      	uxtb	r3, r3
 801dbba:	2b00      	cmp	r3, #0
 801dbbc:	d009      	beq.n	801dbd2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801dbbe:	697b      	ldr	r3, [r7, #20]
 801dbc0:	681a      	ldr	r2, [r3, #0]
 801dbc2:	693b      	ldr	r3, [r7, #16]
 801dbc4:	4413      	add	r3, r2
 801dbc6:	687a      	ldr	r2, [r7, #4]
 801dbc8:	4907      	ldr	r1, [pc, #28]	; (801dbe8 <lwip_cyclic_timer+0x60>)
 801dbca:	4618      	mov	r0, r3
 801dbcc:	f7ff ff6e 	bl	801daac <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801dbd0:	e004      	b.n	801dbdc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801dbd2:	687a      	ldr	r2, [r7, #4]
 801dbd4:	4904      	ldr	r1, [pc, #16]	; (801dbe8 <lwip_cyclic_timer+0x60>)
 801dbd6:	68f8      	ldr	r0, [r7, #12]
 801dbd8:	f7ff ff68 	bl	801daac <sys_timeout_abs>
}
 801dbdc:	bf00      	nop
 801dbde:	3718      	adds	r7, #24
 801dbe0:	46bd      	mov	sp, r7
 801dbe2:	bd80      	pop	{r7, pc}
 801dbe4:	240048d8 	.word	0x240048d8
 801dbe8:	0801db89 	.word	0x0801db89

0801dbec <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801dbec:	b580      	push	{r7, lr}
 801dbee:	b082      	sub	sp, #8
 801dbf0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801dbf2:	2301      	movs	r3, #1
 801dbf4:	607b      	str	r3, [r7, #4]
 801dbf6:	e00e      	b.n	801dc16 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801dbf8:	4a0b      	ldr	r2, [pc, #44]	; (801dc28 <sys_timeouts_init+0x3c>)
 801dbfa:	687b      	ldr	r3, [r7, #4]
 801dbfc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801dc00:	687b      	ldr	r3, [r7, #4]
 801dc02:	00db      	lsls	r3, r3, #3
 801dc04:	4a08      	ldr	r2, [pc, #32]	; (801dc28 <sys_timeouts_init+0x3c>)
 801dc06:	4413      	add	r3, r2
 801dc08:	461a      	mov	r2, r3
 801dc0a:	4908      	ldr	r1, [pc, #32]	; (801dc2c <sys_timeouts_init+0x40>)
 801dc0c:	f000 f810 	bl	801dc30 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801dc10:	687b      	ldr	r3, [r7, #4]
 801dc12:	3301      	adds	r3, #1
 801dc14:	607b      	str	r3, [r7, #4]
 801dc16:	687b      	ldr	r3, [r7, #4]
 801dc18:	2b02      	cmp	r3, #2
 801dc1a:	d9ed      	bls.n	801dbf8 <sys_timeouts_init+0xc>
  }
}
 801dc1c:	bf00      	nop
 801dc1e:	bf00      	nop
 801dc20:	3708      	adds	r7, #8
 801dc22:	46bd      	mov	sp, r7
 801dc24:	bd80      	pop	{r7, pc}
 801dc26:	bf00      	nop
 801dc28:	080291d8 	.word	0x080291d8
 801dc2c:	0801db89 	.word	0x0801db89

0801dc30 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801dc30:	b580      	push	{r7, lr}
 801dc32:	b086      	sub	sp, #24
 801dc34:	af00      	add	r7, sp, #0
 801dc36:	60f8      	str	r0, [r7, #12]
 801dc38:	60b9      	str	r1, [r7, #8]
 801dc3a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801dc3c:	68fb      	ldr	r3, [r7, #12]
 801dc3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801dc42:	d306      	bcc.n	801dc52 <sys_timeout+0x22>
 801dc44:	4b0a      	ldr	r3, [pc, #40]	; (801dc70 <sys_timeout+0x40>)
 801dc46:	f240 1229 	movw	r2, #297	; 0x129
 801dc4a:	490a      	ldr	r1, [pc, #40]	; (801dc74 <sys_timeout+0x44>)
 801dc4c:	480a      	ldr	r0, [pc, #40]	; (801dc78 <sys_timeout+0x48>)
 801dc4e:	f003 f90d 	bl	8020e6c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801dc52:	f7f4 fdc9 	bl	80127e8 <sys_now>
 801dc56:	4602      	mov	r2, r0
 801dc58:	68fb      	ldr	r3, [r7, #12]
 801dc5a:	4413      	add	r3, r2
 801dc5c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801dc5e:	687a      	ldr	r2, [r7, #4]
 801dc60:	68b9      	ldr	r1, [r7, #8]
 801dc62:	6978      	ldr	r0, [r7, #20]
 801dc64:	f7ff ff22 	bl	801daac <sys_timeout_abs>
#endif
}
 801dc68:	bf00      	nop
 801dc6a:	3718      	adds	r7, #24
 801dc6c:	46bd      	mov	sp, r7
 801dc6e:	bd80      	pop	{r7, pc}
 801dc70:	080285dc 	.word	0x080285dc
 801dc74:	080286a4 	.word	0x080286a4
 801dc78:	0802867c 	.word	0x0802867c

0801dc7c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801dc7c:	b580      	push	{r7, lr}
 801dc7e:	b084      	sub	sp, #16
 801dc80:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801dc82:	f7f4 fdb1 	bl	80127e8 <sys_now>
 801dc86:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 801dc88:	4b1a      	ldr	r3, [pc, #104]	; (801dcf4 <sys_check_timeouts+0x78>)
 801dc8a:	781b      	ldrb	r3, [r3, #0]
 801dc8c:	b2db      	uxtb	r3, r3
 801dc8e:	2b00      	cmp	r3, #0
 801dc90:	d001      	beq.n	801dc96 <sys_check_timeouts+0x1a>
 801dc92:	f7f8 ff1b 	bl	8016acc <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 801dc96:	4b18      	ldr	r3, [pc, #96]	; (801dcf8 <sys_check_timeouts+0x7c>)
 801dc98:	681b      	ldr	r3, [r3, #0]
 801dc9a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801dc9c:	68bb      	ldr	r3, [r7, #8]
 801dc9e:	2b00      	cmp	r3, #0
 801dca0:	d022      	beq.n	801dce8 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801dca2:	68bb      	ldr	r3, [r7, #8]
 801dca4:	685b      	ldr	r3, [r3, #4]
 801dca6:	68fa      	ldr	r2, [r7, #12]
 801dca8:	1ad3      	subs	r3, r2, r3
 801dcaa:	0fdb      	lsrs	r3, r3, #31
 801dcac:	f003 0301 	and.w	r3, r3, #1
 801dcb0:	b2db      	uxtb	r3, r3
 801dcb2:	2b00      	cmp	r3, #0
 801dcb4:	d11a      	bne.n	801dcec <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801dcb6:	68bb      	ldr	r3, [r7, #8]
 801dcb8:	681b      	ldr	r3, [r3, #0]
 801dcba:	4a0f      	ldr	r2, [pc, #60]	; (801dcf8 <sys_check_timeouts+0x7c>)
 801dcbc:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801dcbe:	68bb      	ldr	r3, [r7, #8]
 801dcc0:	689b      	ldr	r3, [r3, #8]
 801dcc2:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801dcc4:	68bb      	ldr	r3, [r7, #8]
 801dcc6:	68db      	ldr	r3, [r3, #12]
 801dcc8:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801dcca:	68bb      	ldr	r3, [r7, #8]
 801dccc:	685b      	ldr	r3, [r3, #4]
 801dcce:	4a0b      	ldr	r2, [pc, #44]	; (801dcfc <sys_check_timeouts+0x80>)
 801dcd0:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801dcd2:	68b9      	ldr	r1, [r7, #8]
 801dcd4:	2006      	movs	r0, #6
 801dcd6:	f7f8 fbbd 	bl	8016454 <memp_free>
    if (handler != NULL) {
 801dcda:	687b      	ldr	r3, [r7, #4]
 801dcdc:	2b00      	cmp	r3, #0
 801dcde:	d0d3      	beq.n	801dc88 <sys_check_timeouts+0xc>
      handler(arg);
 801dce0:	687b      	ldr	r3, [r7, #4]
 801dce2:	6838      	ldr	r0, [r7, #0]
 801dce4:	4798      	blx	r3
  do {
 801dce6:	e7cf      	b.n	801dc88 <sys_check_timeouts+0xc>
      return;
 801dce8:	bf00      	nop
 801dcea:	e000      	b.n	801dcee <sys_check_timeouts+0x72>
      return;
 801dcec:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801dcee:	3710      	adds	r7, #16
 801dcf0:	46bd      	mov	sp, r7
 801dcf2:	bd80      	pop	{r7, pc}
 801dcf4:	240082b0 	.word	0x240082b0
 801dcf8:	240048d4 	.word	0x240048d4
 801dcfc:	240048d8 	.word	0x240048d8

0801dd00 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801dd00:	b580      	push	{r7, lr}
 801dd02:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801dd04:	f003 f940 	bl	8020f88 <rand>
 801dd08:	4603      	mov	r3, r0
 801dd0a:	b29b      	uxth	r3, r3
 801dd0c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801dd10:	b29b      	uxth	r3, r3
 801dd12:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801dd16:	b29a      	uxth	r2, r3
 801dd18:	4b01      	ldr	r3, [pc, #4]	; (801dd20 <udp_init+0x20>)
 801dd1a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801dd1c:	bf00      	nop
 801dd1e:	bd80      	pop	{r7, pc}
 801dd20:	24000034 	.word	0x24000034

0801dd24 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801dd24:	b480      	push	{r7}
 801dd26:	b083      	sub	sp, #12
 801dd28:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801dd2a:	2300      	movs	r3, #0
 801dd2c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801dd2e:	4b17      	ldr	r3, [pc, #92]	; (801dd8c <udp_new_port+0x68>)
 801dd30:	881b      	ldrh	r3, [r3, #0]
 801dd32:	1c5a      	adds	r2, r3, #1
 801dd34:	b291      	uxth	r1, r2
 801dd36:	4a15      	ldr	r2, [pc, #84]	; (801dd8c <udp_new_port+0x68>)
 801dd38:	8011      	strh	r1, [r2, #0]
 801dd3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801dd3e:	4293      	cmp	r3, r2
 801dd40:	d103      	bne.n	801dd4a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801dd42:	4b12      	ldr	r3, [pc, #72]	; (801dd8c <udp_new_port+0x68>)
 801dd44:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801dd48:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801dd4a:	4b11      	ldr	r3, [pc, #68]	; (801dd90 <udp_new_port+0x6c>)
 801dd4c:	681b      	ldr	r3, [r3, #0]
 801dd4e:	603b      	str	r3, [r7, #0]
 801dd50:	e011      	b.n	801dd76 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801dd52:	683b      	ldr	r3, [r7, #0]
 801dd54:	8a5a      	ldrh	r2, [r3, #18]
 801dd56:	4b0d      	ldr	r3, [pc, #52]	; (801dd8c <udp_new_port+0x68>)
 801dd58:	881b      	ldrh	r3, [r3, #0]
 801dd5a:	429a      	cmp	r2, r3
 801dd5c:	d108      	bne.n	801dd70 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801dd5e:	88fb      	ldrh	r3, [r7, #6]
 801dd60:	3301      	adds	r3, #1
 801dd62:	80fb      	strh	r3, [r7, #6]
 801dd64:	88fb      	ldrh	r3, [r7, #6]
 801dd66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801dd6a:	d3e0      	bcc.n	801dd2e <udp_new_port+0xa>
        return 0;
 801dd6c:	2300      	movs	r3, #0
 801dd6e:	e007      	b.n	801dd80 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801dd70:	683b      	ldr	r3, [r7, #0]
 801dd72:	68db      	ldr	r3, [r3, #12]
 801dd74:	603b      	str	r3, [r7, #0]
 801dd76:	683b      	ldr	r3, [r7, #0]
 801dd78:	2b00      	cmp	r3, #0
 801dd7a:	d1ea      	bne.n	801dd52 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801dd7c:	4b03      	ldr	r3, [pc, #12]	; (801dd8c <udp_new_port+0x68>)
 801dd7e:	881b      	ldrh	r3, [r3, #0]
}
 801dd80:	4618      	mov	r0, r3
 801dd82:	370c      	adds	r7, #12
 801dd84:	46bd      	mov	sp, r7
 801dd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd8a:	4770      	bx	lr
 801dd8c:	24000034 	.word	0x24000034
 801dd90:	240082d0 	.word	0x240082d0

0801dd94 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801dd94:	b580      	push	{r7, lr}
 801dd96:	b084      	sub	sp, #16
 801dd98:	af00      	add	r7, sp, #0
 801dd9a:	60f8      	str	r0, [r7, #12]
 801dd9c:	60b9      	str	r1, [r7, #8]
 801dd9e:	4613      	mov	r3, r2
 801dda0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801dda2:	68fb      	ldr	r3, [r7, #12]
 801dda4:	2b00      	cmp	r3, #0
 801dda6:	d105      	bne.n	801ddb4 <udp_input_local_match+0x20>
 801dda8:	4b27      	ldr	r3, [pc, #156]	; (801de48 <udp_input_local_match+0xb4>)
 801ddaa:	2287      	movs	r2, #135	; 0x87
 801ddac:	4927      	ldr	r1, [pc, #156]	; (801de4c <udp_input_local_match+0xb8>)
 801ddae:	4828      	ldr	r0, [pc, #160]	; (801de50 <udp_input_local_match+0xbc>)
 801ddb0:	f003 f85c 	bl	8020e6c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801ddb4:	68bb      	ldr	r3, [r7, #8]
 801ddb6:	2b00      	cmp	r3, #0
 801ddb8:	d105      	bne.n	801ddc6 <udp_input_local_match+0x32>
 801ddba:	4b23      	ldr	r3, [pc, #140]	; (801de48 <udp_input_local_match+0xb4>)
 801ddbc:	2288      	movs	r2, #136	; 0x88
 801ddbe:	4925      	ldr	r1, [pc, #148]	; (801de54 <udp_input_local_match+0xc0>)
 801ddc0:	4823      	ldr	r0, [pc, #140]	; (801de50 <udp_input_local_match+0xbc>)
 801ddc2:	f003 f853 	bl	8020e6c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ddc6:	68fb      	ldr	r3, [r7, #12]
 801ddc8:	7a1b      	ldrb	r3, [r3, #8]
 801ddca:	2b00      	cmp	r3, #0
 801ddcc:	d00b      	beq.n	801dde6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801ddce:	68fb      	ldr	r3, [r7, #12]
 801ddd0:	7a1a      	ldrb	r2, [r3, #8]
 801ddd2:	4b21      	ldr	r3, [pc, #132]	; (801de58 <udp_input_local_match+0xc4>)
 801ddd4:	685b      	ldr	r3, [r3, #4]
 801ddd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801ddda:	3301      	adds	r3, #1
 801dddc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ddde:	429a      	cmp	r2, r3
 801dde0:	d001      	beq.n	801dde6 <udp_input_local_match+0x52>
    return 0;
 801dde2:	2300      	movs	r3, #0
 801dde4:	e02b      	b.n	801de3e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801dde6:	79fb      	ldrb	r3, [r7, #7]
 801dde8:	2b00      	cmp	r3, #0
 801ddea:	d018      	beq.n	801de1e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801ddec:	68fb      	ldr	r3, [r7, #12]
 801ddee:	2b00      	cmp	r3, #0
 801ddf0:	d013      	beq.n	801de1a <udp_input_local_match+0x86>
 801ddf2:	68fb      	ldr	r3, [r7, #12]
 801ddf4:	681b      	ldr	r3, [r3, #0]
 801ddf6:	2b00      	cmp	r3, #0
 801ddf8:	d00f      	beq.n	801de1a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801ddfa:	4b17      	ldr	r3, [pc, #92]	; (801de58 <udp_input_local_match+0xc4>)
 801ddfc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801ddfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801de02:	d00a      	beq.n	801de1a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801de04:	68fb      	ldr	r3, [r7, #12]
 801de06:	681a      	ldr	r2, [r3, #0]
 801de08:	4b13      	ldr	r3, [pc, #76]	; (801de58 <udp_input_local_match+0xc4>)
 801de0a:	695b      	ldr	r3, [r3, #20]
 801de0c:	405a      	eors	r2, r3
 801de0e:	68bb      	ldr	r3, [r7, #8]
 801de10:	3308      	adds	r3, #8
 801de12:	681b      	ldr	r3, [r3, #0]
 801de14:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801de16:	2b00      	cmp	r3, #0
 801de18:	d110      	bne.n	801de3c <udp_input_local_match+0xa8>
          return 1;
 801de1a:	2301      	movs	r3, #1
 801de1c:	e00f      	b.n	801de3e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801de1e:	68fb      	ldr	r3, [r7, #12]
 801de20:	2b00      	cmp	r3, #0
 801de22:	d009      	beq.n	801de38 <udp_input_local_match+0xa4>
 801de24:	68fb      	ldr	r3, [r7, #12]
 801de26:	681b      	ldr	r3, [r3, #0]
 801de28:	2b00      	cmp	r3, #0
 801de2a:	d005      	beq.n	801de38 <udp_input_local_match+0xa4>
 801de2c:	68fb      	ldr	r3, [r7, #12]
 801de2e:	681a      	ldr	r2, [r3, #0]
 801de30:	4b09      	ldr	r3, [pc, #36]	; (801de58 <udp_input_local_match+0xc4>)
 801de32:	695b      	ldr	r3, [r3, #20]
 801de34:	429a      	cmp	r2, r3
 801de36:	d101      	bne.n	801de3c <udp_input_local_match+0xa8>
        return 1;
 801de38:	2301      	movs	r3, #1
 801de3a:	e000      	b.n	801de3e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801de3c:	2300      	movs	r3, #0
}
 801de3e:	4618      	mov	r0, r3
 801de40:	3710      	adds	r7, #16
 801de42:	46bd      	mov	sp, r7
 801de44:	bd80      	pop	{r7, pc}
 801de46:	bf00      	nop
 801de48:	080286f0 	.word	0x080286f0
 801de4c:	0802874c 	.word	0x0802874c
 801de50:	08028770 	.word	0x08028770
 801de54:	08028798 	.word	0x08028798
 801de58:	240053c8 	.word	0x240053c8

0801de5c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801de5c:	b590      	push	{r4, r7, lr}
 801de5e:	b08d      	sub	sp, #52	; 0x34
 801de60:	af02      	add	r7, sp, #8
 801de62:	6078      	str	r0, [r7, #4]
 801de64:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801de66:	2300      	movs	r3, #0
 801de68:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801de6a:	687b      	ldr	r3, [r7, #4]
 801de6c:	2b00      	cmp	r3, #0
 801de6e:	d105      	bne.n	801de7c <udp_input+0x20>
 801de70:	4b7c      	ldr	r3, [pc, #496]	; (801e064 <udp_input+0x208>)
 801de72:	22cf      	movs	r2, #207	; 0xcf
 801de74:	497c      	ldr	r1, [pc, #496]	; (801e068 <udp_input+0x20c>)
 801de76:	487d      	ldr	r0, [pc, #500]	; (801e06c <udp_input+0x210>)
 801de78:	f002 fff8 	bl	8020e6c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801de7c:	683b      	ldr	r3, [r7, #0]
 801de7e:	2b00      	cmp	r3, #0
 801de80:	d105      	bne.n	801de8e <udp_input+0x32>
 801de82:	4b78      	ldr	r3, [pc, #480]	; (801e064 <udp_input+0x208>)
 801de84:	22d0      	movs	r2, #208	; 0xd0
 801de86:	497a      	ldr	r1, [pc, #488]	; (801e070 <udp_input+0x214>)
 801de88:	4878      	ldr	r0, [pc, #480]	; (801e06c <udp_input+0x210>)
 801de8a:	f002 ffef 	bl	8020e6c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801de8e:	687b      	ldr	r3, [r7, #4]
 801de90:	895b      	ldrh	r3, [r3, #10]
 801de92:	2b07      	cmp	r3, #7
 801de94:	d803      	bhi.n	801de9e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801de96:	6878      	ldr	r0, [r7, #4]
 801de98:	f7f9 f952 	bl	8017140 <pbuf_free>
    goto end;
 801de9c:	e0de      	b.n	801e05c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801de9e:	687b      	ldr	r3, [r7, #4]
 801dea0:	685b      	ldr	r3, [r3, #4]
 801dea2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801dea4:	4b73      	ldr	r3, [pc, #460]	; (801e074 <udp_input+0x218>)
 801dea6:	695b      	ldr	r3, [r3, #20]
 801dea8:	4a72      	ldr	r2, [pc, #456]	; (801e074 <udp_input+0x218>)
 801deaa:	6812      	ldr	r2, [r2, #0]
 801deac:	4611      	mov	r1, r2
 801deae:	4618      	mov	r0, r3
 801deb0:	f7f6 ffb6 	bl	8014e20 <ip4_addr_isbroadcast_u32>
 801deb4:	4603      	mov	r3, r0
 801deb6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801deb8:	697b      	ldr	r3, [r7, #20]
 801deba:	881b      	ldrh	r3, [r3, #0]
 801debc:	b29b      	uxth	r3, r3
 801debe:	4618      	mov	r0, r3
 801dec0:	f7f5 fa42 	bl	8013348 <lwip_htons>
 801dec4:	4603      	mov	r3, r0
 801dec6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801dec8:	697b      	ldr	r3, [r7, #20]
 801deca:	885b      	ldrh	r3, [r3, #2]
 801decc:	b29b      	uxth	r3, r3
 801dece:	4618      	mov	r0, r3
 801ded0:	f7f5 fa3a 	bl	8013348 <lwip_htons>
 801ded4:	4603      	mov	r3, r0
 801ded6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801ded8:	2300      	movs	r3, #0
 801deda:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801dedc:	2300      	movs	r3, #0
 801dede:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801dee0:	2300      	movs	r3, #0
 801dee2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801dee4:	4b64      	ldr	r3, [pc, #400]	; (801e078 <udp_input+0x21c>)
 801dee6:	681b      	ldr	r3, [r3, #0]
 801dee8:	627b      	str	r3, [r7, #36]	; 0x24
 801deea:	e054      	b.n	801df96 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801deec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801deee:	8a5b      	ldrh	r3, [r3, #18]
 801def0:	89fa      	ldrh	r2, [r7, #14]
 801def2:	429a      	cmp	r2, r3
 801def4:	d14a      	bne.n	801df8c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801def6:	7cfb      	ldrb	r3, [r7, #19]
 801def8:	461a      	mov	r2, r3
 801defa:	6839      	ldr	r1, [r7, #0]
 801defc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801defe:	f7ff ff49 	bl	801dd94 <udp_input_local_match>
 801df02:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801df04:	2b00      	cmp	r3, #0
 801df06:	d041      	beq.n	801df8c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801df08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df0a:	7c1b      	ldrb	r3, [r3, #16]
 801df0c:	f003 0304 	and.w	r3, r3, #4
 801df10:	2b00      	cmp	r3, #0
 801df12:	d11d      	bne.n	801df50 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801df14:	69fb      	ldr	r3, [r7, #28]
 801df16:	2b00      	cmp	r3, #0
 801df18:	d102      	bne.n	801df20 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801df1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df1c:	61fb      	str	r3, [r7, #28]
 801df1e:	e017      	b.n	801df50 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801df20:	7cfb      	ldrb	r3, [r7, #19]
 801df22:	2b00      	cmp	r3, #0
 801df24:	d014      	beq.n	801df50 <udp_input+0xf4>
 801df26:	4b53      	ldr	r3, [pc, #332]	; (801e074 <udp_input+0x218>)
 801df28:	695b      	ldr	r3, [r3, #20]
 801df2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801df2e:	d10f      	bne.n	801df50 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801df30:	69fb      	ldr	r3, [r7, #28]
 801df32:	681a      	ldr	r2, [r3, #0]
 801df34:	683b      	ldr	r3, [r7, #0]
 801df36:	3304      	adds	r3, #4
 801df38:	681b      	ldr	r3, [r3, #0]
 801df3a:	429a      	cmp	r2, r3
 801df3c:	d008      	beq.n	801df50 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801df3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df40:	681a      	ldr	r2, [r3, #0]
 801df42:	683b      	ldr	r3, [r7, #0]
 801df44:	3304      	adds	r3, #4
 801df46:	681b      	ldr	r3, [r3, #0]
 801df48:	429a      	cmp	r2, r3
 801df4a:	d101      	bne.n	801df50 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801df4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df4e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801df50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df52:	8a9b      	ldrh	r3, [r3, #20]
 801df54:	8a3a      	ldrh	r2, [r7, #16]
 801df56:	429a      	cmp	r2, r3
 801df58:	d118      	bne.n	801df8c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801df5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df5c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801df5e:	2b00      	cmp	r3, #0
 801df60:	d005      	beq.n	801df6e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801df62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df64:	685a      	ldr	r2, [r3, #4]
 801df66:	4b43      	ldr	r3, [pc, #268]	; (801e074 <udp_input+0x218>)
 801df68:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801df6a:	429a      	cmp	r2, r3
 801df6c:	d10e      	bne.n	801df8c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801df6e:	6a3b      	ldr	r3, [r7, #32]
 801df70:	2b00      	cmp	r3, #0
 801df72:	d014      	beq.n	801df9e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801df74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df76:	68da      	ldr	r2, [r3, #12]
 801df78:	6a3b      	ldr	r3, [r7, #32]
 801df7a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801df7c:	4b3e      	ldr	r3, [pc, #248]	; (801e078 <udp_input+0x21c>)
 801df7e:	681a      	ldr	r2, [r3, #0]
 801df80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df82:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801df84:	4a3c      	ldr	r2, [pc, #240]	; (801e078 <udp_input+0x21c>)
 801df86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df88:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801df8a:	e008      	b.n	801df9e <udp_input+0x142>
      }
    }

    prev = pcb;
 801df8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df8e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801df90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df92:	68db      	ldr	r3, [r3, #12]
 801df94:	627b      	str	r3, [r7, #36]	; 0x24
 801df96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df98:	2b00      	cmp	r3, #0
 801df9a:	d1a7      	bne.n	801deec <udp_input+0x90>
 801df9c:	e000      	b.n	801dfa0 <udp_input+0x144>
        break;
 801df9e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801dfa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dfa2:	2b00      	cmp	r3, #0
 801dfa4:	d101      	bne.n	801dfaa <udp_input+0x14e>
    pcb = uncon_pcb;
 801dfa6:	69fb      	ldr	r3, [r7, #28]
 801dfa8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801dfaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dfac:	2b00      	cmp	r3, #0
 801dfae:	d002      	beq.n	801dfb6 <udp_input+0x15a>
    for_us = 1;
 801dfb0:	2301      	movs	r3, #1
 801dfb2:	76fb      	strb	r3, [r7, #27]
 801dfb4:	e00a      	b.n	801dfcc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801dfb6:	683b      	ldr	r3, [r7, #0]
 801dfb8:	3304      	adds	r3, #4
 801dfba:	681a      	ldr	r2, [r3, #0]
 801dfbc:	4b2d      	ldr	r3, [pc, #180]	; (801e074 <udp_input+0x218>)
 801dfbe:	695b      	ldr	r3, [r3, #20]
 801dfc0:	429a      	cmp	r2, r3
 801dfc2:	bf0c      	ite	eq
 801dfc4:	2301      	moveq	r3, #1
 801dfc6:	2300      	movne	r3, #0
 801dfc8:	b2db      	uxtb	r3, r3
 801dfca:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801dfcc:	7efb      	ldrb	r3, [r7, #27]
 801dfce:	2b00      	cmp	r3, #0
 801dfd0:	d041      	beq.n	801e056 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801dfd2:	2108      	movs	r1, #8
 801dfd4:	6878      	ldr	r0, [r7, #4]
 801dfd6:	f7f9 f82d 	bl	8017034 <pbuf_remove_header>
 801dfda:	4603      	mov	r3, r0
 801dfdc:	2b00      	cmp	r3, #0
 801dfde:	d00a      	beq.n	801dff6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801dfe0:	4b20      	ldr	r3, [pc, #128]	; (801e064 <udp_input+0x208>)
 801dfe2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801dfe6:	4925      	ldr	r1, [pc, #148]	; (801e07c <udp_input+0x220>)
 801dfe8:	4820      	ldr	r0, [pc, #128]	; (801e06c <udp_input+0x210>)
 801dfea:	f002 ff3f 	bl	8020e6c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801dfee:	6878      	ldr	r0, [r7, #4]
 801dff0:	f7f9 f8a6 	bl	8017140 <pbuf_free>
      goto end;
 801dff4:	e032      	b.n	801e05c <udp_input+0x200>
    }

    if (pcb != NULL) {
 801dff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dff8:	2b00      	cmp	r3, #0
 801dffa:	d012      	beq.n	801e022 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801dffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dffe:	699b      	ldr	r3, [r3, #24]
 801e000:	2b00      	cmp	r3, #0
 801e002:	d00a      	beq.n	801e01a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801e004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e006:	699c      	ldr	r4, [r3, #24]
 801e008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e00a:	69d8      	ldr	r0, [r3, #28]
 801e00c:	8a3b      	ldrh	r3, [r7, #16]
 801e00e:	9300      	str	r3, [sp, #0]
 801e010:	4b1b      	ldr	r3, [pc, #108]	; (801e080 <udp_input+0x224>)
 801e012:	687a      	ldr	r2, [r7, #4]
 801e014:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801e016:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801e018:	e021      	b.n	801e05e <udp_input+0x202>
        pbuf_free(p);
 801e01a:	6878      	ldr	r0, [r7, #4]
 801e01c:	f7f9 f890 	bl	8017140 <pbuf_free>
        goto end;
 801e020:	e01c      	b.n	801e05c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801e022:	7cfb      	ldrb	r3, [r7, #19]
 801e024:	2b00      	cmp	r3, #0
 801e026:	d112      	bne.n	801e04e <udp_input+0x1f2>
 801e028:	4b12      	ldr	r3, [pc, #72]	; (801e074 <udp_input+0x218>)
 801e02a:	695b      	ldr	r3, [r3, #20]
 801e02c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801e030:	2be0      	cmp	r3, #224	; 0xe0
 801e032:	d00c      	beq.n	801e04e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801e034:	4b0f      	ldr	r3, [pc, #60]	; (801e074 <udp_input+0x218>)
 801e036:	899b      	ldrh	r3, [r3, #12]
 801e038:	3308      	adds	r3, #8
 801e03a:	b29b      	uxth	r3, r3
 801e03c:	b21b      	sxth	r3, r3
 801e03e:	4619      	mov	r1, r3
 801e040:	6878      	ldr	r0, [r7, #4]
 801e042:	f7f9 f86a 	bl	801711a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801e046:	2103      	movs	r1, #3
 801e048:	6878      	ldr	r0, [r7, #4]
 801e04a:	f7f6 faed 	bl	8014628 <icmp_dest_unreach>
      pbuf_free(p);
 801e04e:	6878      	ldr	r0, [r7, #4]
 801e050:	f7f9 f876 	bl	8017140 <pbuf_free>
  return;
 801e054:	e003      	b.n	801e05e <udp_input+0x202>
    pbuf_free(p);
 801e056:	6878      	ldr	r0, [r7, #4]
 801e058:	f7f9 f872 	bl	8017140 <pbuf_free>
  return;
 801e05c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801e05e:	372c      	adds	r7, #44	; 0x2c
 801e060:	46bd      	mov	sp, r7
 801e062:	bd90      	pop	{r4, r7, pc}
 801e064:	080286f0 	.word	0x080286f0
 801e068:	080287c0 	.word	0x080287c0
 801e06c:	08028770 	.word	0x08028770
 801e070:	080287d8 	.word	0x080287d8
 801e074:	240053c8 	.word	0x240053c8
 801e078:	240082d0 	.word	0x240082d0
 801e07c:	080287f4 	.word	0x080287f4
 801e080:	240053d8 	.word	0x240053d8

0801e084 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801e084:	b580      	push	{r7, lr}
 801e086:	b086      	sub	sp, #24
 801e088:	af00      	add	r7, sp, #0
 801e08a:	60f8      	str	r0, [r7, #12]
 801e08c:	60b9      	str	r1, [r7, #8]
 801e08e:	4613      	mov	r3, r2
 801e090:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801e092:	68bb      	ldr	r3, [r7, #8]
 801e094:	2b00      	cmp	r3, #0
 801e096:	d101      	bne.n	801e09c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801e098:	4b39      	ldr	r3, [pc, #228]	; (801e180 <udp_bind+0xfc>)
 801e09a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801e09c:	68fb      	ldr	r3, [r7, #12]
 801e09e:	2b00      	cmp	r3, #0
 801e0a0:	d109      	bne.n	801e0b6 <udp_bind+0x32>
 801e0a2:	4b38      	ldr	r3, [pc, #224]	; (801e184 <udp_bind+0x100>)
 801e0a4:	f240 32b7 	movw	r2, #951	; 0x3b7
 801e0a8:	4937      	ldr	r1, [pc, #220]	; (801e188 <udp_bind+0x104>)
 801e0aa:	4838      	ldr	r0, [pc, #224]	; (801e18c <udp_bind+0x108>)
 801e0ac:	f002 fede 	bl	8020e6c <iprintf>
 801e0b0:	f06f 030f 	mvn.w	r3, #15
 801e0b4:	e060      	b.n	801e178 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801e0b6:	2300      	movs	r3, #0
 801e0b8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801e0ba:	4b35      	ldr	r3, [pc, #212]	; (801e190 <udp_bind+0x10c>)
 801e0bc:	681b      	ldr	r3, [r3, #0]
 801e0be:	617b      	str	r3, [r7, #20]
 801e0c0:	e009      	b.n	801e0d6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801e0c2:	68fa      	ldr	r2, [r7, #12]
 801e0c4:	697b      	ldr	r3, [r7, #20]
 801e0c6:	429a      	cmp	r2, r3
 801e0c8:	d102      	bne.n	801e0d0 <udp_bind+0x4c>
      rebind = 1;
 801e0ca:	2301      	movs	r3, #1
 801e0cc:	74fb      	strb	r3, [r7, #19]
      break;
 801e0ce:	e005      	b.n	801e0dc <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801e0d0:	697b      	ldr	r3, [r7, #20]
 801e0d2:	68db      	ldr	r3, [r3, #12]
 801e0d4:	617b      	str	r3, [r7, #20]
 801e0d6:	697b      	ldr	r3, [r7, #20]
 801e0d8:	2b00      	cmp	r3, #0
 801e0da:	d1f2      	bne.n	801e0c2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801e0dc:	88fb      	ldrh	r3, [r7, #6]
 801e0de:	2b00      	cmp	r3, #0
 801e0e0:	d109      	bne.n	801e0f6 <udp_bind+0x72>
    port = udp_new_port();
 801e0e2:	f7ff fe1f 	bl	801dd24 <udp_new_port>
 801e0e6:	4603      	mov	r3, r0
 801e0e8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801e0ea:	88fb      	ldrh	r3, [r7, #6]
 801e0ec:	2b00      	cmp	r3, #0
 801e0ee:	d12c      	bne.n	801e14a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801e0f0:	f06f 0307 	mvn.w	r3, #7
 801e0f4:	e040      	b.n	801e178 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801e0f6:	4b26      	ldr	r3, [pc, #152]	; (801e190 <udp_bind+0x10c>)
 801e0f8:	681b      	ldr	r3, [r3, #0]
 801e0fa:	617b      	str	r3, [r7, #20]
 801e0fc:	e022      	b.n	801e144 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801e0fe:	68fa      	ldr	r2, [r7, #12]
 801e100:	697b      	ldr	r3, [r7, #20]
 801e102:	429a      	cmp	r2, r3
 801e104:	d01b      	beq.n	801e13e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801e106:	697b      	ldr	r3, [r7, #20]
 801e108:	8a5b      	ldrh	r3, [r3, #18]
 801e10a:	88fa      	ldrh	r2, [r7, #6]
 801e10c:	429a      	cmp	r2, r3
 801e10e:	d116      	bne.n	801e13e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801e110:	697b      	ldr	r3, [r7, #20]
 801e112:	681a      	ldr	r2, [r3, #0]
 801e114:	68bb      	ldr	r3, [r7, #8]
 801e116:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801e118:	429a      	cmp	r2, r3
 801e11a:	d00d      	beq.n	801e138 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801e11c:	68bb      	ldr	r3, [r7, #8]
 801e11e:	2b00      	cmp	r3, #0
 801e120:	d00a      	beq.n	801e138 <udp_bind+0xb4>
 801e122:	68bb      	ldr	r3, [r7, #8]
 801e124:	681b      	ldr	r3, [r3, #0]
 801e126:	2b00      	cmp	r3, #0
 801e128:	d006      	beq.n	801e138 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801e12a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801e12c:	2b00      	cmp	r3, #0
 801e12e:	d003      	beq.n	801e138 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801e130:	697b      	ldr	r3, [r7, #20]
 801e132:	681b      	ldr	r3, [r3, #0]
 801e134:	2b00      	cmp	r3, #0
 801e136:	d102      	bne.n	801e13e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801e138:	f06f 0307 	mvn.w	r3, #7
 801e13c:	e01c      	b.n	801e178 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801e13e:	697b      	ldr	r3, [r7, #20]
 801e140:	68db      	ldr	r3, [r3, #12]
 801e142:	617b      	str	r3, [r7, #20]
 801e144:	697b      	ldr	r3, [r7, #20]
 801e146:	2b00      	cmp	r3, #0
 801e148:	d1d9      	bne.n	801e0fe <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801e14a:	68bb      	ldr	r3, [r7, #8]
 801e14c:	2b00      	cmp	r3, #0
 801e14e:	d002      	beq.n	801e156 <udp_bind+0xd2>
 801e150:	68bb      	ldr	r3, [r7, #8]
 801e152:	681b      	ldr	r3, [r3, #0]
 801e154:	e000      	b.n	801e158 <udp_bind+0xd4>
 801e156:	2300      	movs	r3, #0
 801e158:	68fa      	ldr	r2, [r7, #12]
 801e15a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801e15c:	68fb      	ldr	r3, [r7, #12]
 801e15e:	88fa      	ldrh	r2, [r7, #6]
 801e160:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801e162:	7cfb      	ldrb	r3, [r7, #19]
 801e164:	2b00      	cmp	r3, #0
 801e166:	d106      	bne.n	801e176 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801e168:	4b09      	ldr	r3, [pc, #36]	; (801e190 <udp_bind+0x10c>)
 801e16a:	681a      	ldr	r2, [r3, #0]
 801e16c:	68fb      	ldr	r3, [r7, #12]
 801e16e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801e170:	4a07      	ldr	r2, [pc, #28]	; (801e190 <udp_bind+0x10c>)
 801e172:	68fb      	ldr	r3, [r7, #12]
 801e174:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801e176:	2300      	movs	r3, #0
}
 801e178:	4618      	mov	r0, r3
 801e17a:	3718      	adds	r7, #24
 801e17c:	46bd      	mov	sp, r7
 801e17e:	bd80      	pop	{r7, pc}
 801e180:	0802911c 	.word	0x0802911c
 801e184:	080286f0 	.word	0x080286f0
 801e188:	080289e4 	.word	0x080289e4
 801e18c:	08028770 	.word	0x08028770
 801e190:	240082d0 	.word	0x240082d0

0801e194 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801e194:	b580      	push	{r7, lr}
 801e196:	b086      	sub	sp, #24
 801e198:	af00      	add	r7, sp, #0
 801e19a:	60f8      	str	r0, [r7, #12]
 801e19c:	60b9      	str	r1, [r7, #8]
 801e19e:	4613      	mov	r3, r2
 801e1a0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801e1a2:	68fb      	ldr	r3, [r7, #12]
 801e1a4:	2b00      	cmp	r3, #0
 801e1a6:	d109      	bne.n	801e1bc <udp_connect+0x28>
 801e1a8:	4b2c      	ldr	r3, [pc, #176]	; (801e25c <udp_connect+0xc8>)
 801e1aa:	f240 4235 	movw	r2, #1077	; 0x435
 801e1ae:	492c      	ldr	r1, [pc, #176]	; (801e260 <udp_connect+0xcc>)
 801e1b0:	482c      	ldr	r0, [pc, #176]	; (801e264 <udp_connect+0xd0>)
 801e1b2:	f002 fe5b 	bl	8020e6c <iprintf>
 801e1b6:	f06f 030f 	mvn.w	r3, #15
 801e1ba:	e04b      	b.n	801e254 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801e1bc:	68bb      	ldr	r3, [r7, #8]
 801e1be:	2b00      	cmp	r3, #0
 801e1c0:	d109      	bne.n	801e1d6 <udp_connect+0x42>
 801e1c2:	4b26      	ldr	r3, [pc, #152]	; (801e25c <udp_connect+0xc8>)
 801e1c4:	f240 4236 	movw	r2, #1078	; 0x436
 801e1c8:	4927      	ldr	r1, [pc, #156]	; (801e268 <udp_connect+0xd4>)
 801e1ca:	4826      	ldr	r0, [pc, #152]	; (801e264 <udp_connect+0xd0>)
 801e1cc:	f002 fe4e 	bl	8020e6c <iprintf>
 801e1d0:	f06f 030f 	mvn.w	r3, #15
 801e1d4:	e03e      	b.n	801e254 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801e1d6:	68fb      	ldr	r3, [r7, #12]
 801e1d8:	8a5b      	ldrh	r3, [r3, #18]
 801e1da:	2b00      	cmp	r3, #0
 801e1dc:	d10f      	bne.n	801e1fe <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801e1de:	68f9      	ldr	r1, [r7, #12]
 801e1e0:	68fb      	ldr	r3, [r7, #12]
 801e1e2:	8a5b      	ldrh	r3, [r3, #18]
 801e1e4:	461a      	mov	r2, r3
 801e1e6:	68f8      	ldr	r0, [r7, #12]
 801e1e8:	f7ff ff4c 	bl	801e084 <udp_bind>
 801e1ec:	4603      	mov	r3, r0
 801e1ee:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801e1f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801e1f4:	2b00      	cmp	r3, #0
 801e1f6:	d002      	beq.n	801e1fe <udp_connect+0x6a>
      return err;
 801e1f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801e1fc:	e02a      	b.n	801e254 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801e1fe:	68bb      	ldr	r3, [r7, #8]
 801e200:	2b00      	cmp	r3, #0
 801e202:	d002      	beq.n	801e20a <udp_connect+0x76>
 801e204:	68bb      	ldr	r3, [r7, #8]
 801e206:	681b      	ldr	r3, [r3, #0]
 801e208:	e000      	b.n	801e20c <udp_connect+0x78>
 801e20a:	2300      	movs	r3, #0
 801e20c:	68fa      	ldr	r2, [r7, #12]
 801e20e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801e210:	68fb      	ldr	r3, [r7, #12]
 801e212:	88fa      	ldrh	r2, [r7, #6]
 801e214:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801e216:	68fb      	ldr	r3, [r7, #12]
 801e218:	7c1b      	ldrb	r3, [r3, #16]
 801e21a:	f043 0304 	orr.w	r3, r3, #4
 801e21e:	b2da      	uxtb	r2, r3
 801e220:	68fb      	ldr	r3, [r7, #12]
 801e222:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801e224:	4b11      	ldr	r3, [pc, #68]	; (801e26c <udp_connect+0xd8>)
 801e226:	681b      	ldr	r3, [r3, #0]
 801e228:	617b      	str	r3, [r7, #20]
 801e22a:	e008      	b.n	801e23e <udp_connect+0xaa>
    if (pcb == ipcb) {
 801e22c:	68fa      	ldr	r2, [r7, #12]
 801e22e:	697b      	ldr	r3, [r7, #20]
 801e230:	429a      	cmp	r2, r3
 801e232:	d101      	bne.n	801e238 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801e234:	2300      	movs	r3, #0
 801e236:	e00d      	b.n	801e254 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801e238:	697b      	ldr	r3, [r7, #20]
 801e23a:	68db      	ldr	r3, [r3, #12]
 801e23c:	617b      	str	r3, [r7, #20]
 801e23e:	697b      	ldr	r3, [r7, #20]
 801e240:	2b00      	cmp	r3, #0
 801e242:	d1f3      	bne.n	801e22c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801e244:	4b09      	ldr	r3, [pc, #36]	; (801e26c <udp_connect+0xd8>)
 801e246:	681a      	ldr	r2, [r3, #0]
 801e248:	68fb      	ldr	r3, [r7, #12]
 801e24a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801e24c:	4a07      	ldr	r2, [pc, #28]	; (801e26c <udp_connect+0xd8>)
 801e24e:	68fb      	ldr	r3, [r7, #12]
 801e250:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801e252:	2300      	movs	r3, #0
}
 801e254:	4618      	mov	r0, r3
 801e256:	3718      	adds	r7, #24
 801e258:	46bd      	mov	sp, r7
 801e25a:	bd80      	pop	{r7, pc}
 801e25c:	080286f0 	.word	0x080286f0
 801e260:	080289fc 	.word	0x080289fc
 801e264:	08028770 	.word	0x08028770
 801e268:	08028a18 	.word	0x08028a18
 801e26c:	240082d0 	.word	0x240082d0

0801e270 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801e270:	b580      	push	{r7, lr}
 801e272:	b082      	sub	sp, #8
 801e274:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801e276:	2000      	movs	r0, #0
 801e278:	f7f8 f87c 	bl	8016374 <memp_malloc>
 801e27c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801e27e:	687b      	ldr	r3, [r7, #4]
 801e280:	2b00      	cmp	r3, #0
 801e282:	d007      	beq.n	801e294 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801e284:	2220      	movs	r2, #32
 801e286:	2100      	movs	r1, #0
 801e288:	6878      	ldr	r0, [r7, #4]
 801e28a:	f001 fef5 	bl	8020078 <memset>
    pcb->ttl = UDP_TTL;
 801e28e:	687b      	ldr	r3, [r7, #4]
 801e290:	22ff      	movs	r2, #255	; 0xff
 801e292:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801e294:	687b      	ldr	r3, [r7, #4]
}
 801e296:	4618      	mov	r0, r3
 801e298:	3708      	adds	r7, #8
 801e29a:	46bd      	mov	sp, r7
 801e29c:	bd80      	pop	{r7, pc}
	...

0801e2a0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801e2a0:	b480      	push	{r7}
 801e2a2:	b085      	sub	sp, #20
 801e2a4:	af00      	add	r7, sp, #0
 801e2a6:	6078      	str	r0, [r7, #4]
 801e2a8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801e2aa:	687b      	ldr	r3, [r7, #4]
 801e2ac:	2b00      	cmp	r3, #0
 801e2ae:	d01e      	beq.n	801e2ee <udp_netif_ip_addr_changed+0x4e>
 801e2b0:	687b      	ldr	r3, [r7, #4]
 801e2b2:	681b      	ldr	r3, [r3, #0]
 801e2b4:	2b00      	cmp	r3, #0
 801e2b6:	d01a      	beq.n	801e2ee <udp_netif_ip_addr_changed+0x4e>
 801e2b8:	683b      	ldr	r3, [r7, #0]
 801e2ba:	2b00      	cmp	r3, #0
 801e2bc:	d017      	beq.n	801e2ee <udp_netif_ip_addr_changed+0x4e>
 801e2be:	683b      	ldr	r3, [r7, #0]
 801e2c0:	681b      	ldr	r3, [r3, #0]
 801e2c2:	2b00      	cmp	r3, #0
 801e2c4:	d013      	beq.n	801e2ee <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801e2c6:	4b0d      	ldr	r3, [pc, #52]	; (801e2fc <udp_netif_ip_addr_changed+0x5c>)
 801e2c8:	681b      	ldr	r3, [r3, #0]
 801e2ca:	60fb      	str	r3, [r7, #12]
 801e2cc:	e00c      	b.n	801e2e8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801e2ce:	68fb      	ldr	r3, [r7, #12]
 801e2d0:	681a      	ldr	r2, [r3, #0]
 801e2d2:	687b      	ldr	r3, [r7, #4]
 801e2d4:	681b      	ldr	r3, [r3, #0]
 801e2d6:	429a      	cmp	r2, r3
 801e2d8:	d103      	bne.n	801e2e2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801e2da:	683b      	ldr	r3, [r7, #0]
 801e2dc:	681a      	ldr	r2, [r3, #0]
 801e2de:	68fb      	ldr	r3, [r7, #12]
 801e2e0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801e2e2:	68fb      	ldr	r3, [r7, #12]
 801e2e4:	68db      	ldr	r3, [r3, #12]
 801e2e6:	60fb      	str	r3, [r7, #12]
 801e2e8:	68fb      	ldr	r3, [r7, #12]
 801e2ea:	2b00      	cmp	r3, #0
 801e2ec:	d1ef      	bne.n	801e2ce <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801e2ee:	bf00      	nop
 801e2f0:	3714      	adds	r7, #20
 801e2f2:	46bd      	mov	sp, r7
 801e2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2f8:	4770      	bx	lr
 801e2fa:	bf00      	nop
 801e2fc:	240082d0 	.word	0x240082d0

0801e300 <cis_Init>:
 * @brief  CIS init
 * @param  Void
 * @retval None
 */
void cis_Init(synthModeTypeDef mode)
{
 801e300:	b580      	push	{r7, lr}
 801e302:	b082      	sub	sp, #8
 801e304:	af00      	add	r7, sp, #0
 801e306:	4603      	mov	r3, r0
 801e308:	71fb      	strb	r3, [r7, #7]
	// Enable 5V power DC/DC for display
	HAL_GPIO_WritePin(EN_5V_GPIO_Port, EN_5V_Pin, GPIO_PIN_SET);
 801e30a:	2201      	movs	r2, #1
 801e30c:	2104      	movs	r1, #4
 801e30e:	484b      	ldr	r0, [pc, #300]	; (801e43c <cis_Init+0x13c>)
 801e310:	f7ec f9c0 	bl	800a694 <HAL_GPIO_WritePin>

	if (mode == IFFT_MODE)
 801e314:	79fb      	ldrb	r3, [r7, #7]
 801e316:	2b00      	cmp	r3, #0
 801e318:	d10c      	bne.n	801e334 <cis_Init+0x34>
	{
		CIS_EFFECTIVE_PIXELS_PER_LINE	=	CIS_ACTIVE_PIXELS_PER_LINE / CIS_IFFT_OVERSAMPLING_RATIO;
 801e31a:	4b49      	ldr	r3, [pc, #292]	; (801e440 <cis_Init+0x140>)
 801e31c:	2248      	movs	r2, #72	; 0x48
 801e31e:	801a      	strh	r2, [r3, #0]
		CIS_ADC_BUFF_START_OFFSET		=	(CIS_INACTIVE_AERA_STOP / CIS_IFFT_OVERSAMPLING_RATIO);
 801e320:	4b48      	ldr	r3, [pc, #288]	; (801e444 <cis_Init+0x144>)
 801e322:	2206      	movs	r2, #6
 801e324:	801a      	strh	r2, [r3, #0]
		CIS_ADC_BUFF_STOP_OFFSET		=	(CIS_PIXEL_AERA_STOP / CIS_IFFT_OVERSAMPLING_RATIO);
 801e326:	4b48      	ldr	r3, [pc, #288]	; (801e448 <cis_Init+0x148>)
 801e328:	224e      	movs	r2, #78	; 0x4e
 801e32a:	801a      	strh	r2, [r3, #0]
		CIS_ADC_BUFF_END_CAPTURE 		=	(CIS_END_CAPTURE / CIS_IFFT_OVERSAMPLING_RATIO);
 801e32c:	4b47      	ldr	r3, [pc, #284]	; (801e44c <cis_Init+0x14c>)
 801e32e:	2256      	movs	r2, #86	; 0x56
 801e330:	801a      	strh	r2, [r3, #0]
 801e332:	e00b      	b.n	801e34c <cis_Init+0x4c>
	}
	else
	{
		CIS_EFFECTIVE_PIXELS_PER_LINE	=	CIS_ACTIVE_PIXELS_PER_LINE / CIS_IMGPLY_OVERSAMPLING_RATIO;
 801e334:	4b42      	ldr	r3, [pc, #264]	; (801e440 <cis_Init+0x140>)
 801e336:	2224      	movs	r2, #36	; 0x24
 801e338:	801a      	strh	r2, [r3, #0]
		CIS_ADC_BUFF_START_OFFSET		=	(CIS_INACTIVE_AERA_STOP / CIS_IMGPLY_OVERSAMPLING_RATIO);
 801e33a:	4b42      	ldr	r3, [pc, #264]	; (801e444 <cis_Init+0x144>)
 801e33c:	2203      	movs	r2, #3
 801e33e:	801a      	strh	r2, [r3, #0]
		CIS_ADC_BUFF_STOP_OFFSET		=	(CIS_PIXEL_AERA_STOP / CIS_IMGPLY_OVERSAMPLING_RATIO);
 801e340:	4b41      	ldr	r3, [pc, #260]	; (801e448 <cis_Init+0x148>)
 801e342:	2227      	movs	r2, #39	; 0x27
 801e344:	801a      	strh	r2, [r3, #0]
		CIS_ADC_BUFF_END_CAPTURE 		=	CIS_END_CAPTURE / CIS_IMGPLY_OVERSAMPLING_RATIO;
 801e346:	4b41      	ldr	r3, [pc, #260]	; (801e44c <cis_Init+0x14c>)
 801e348:	222b      	movs	r2, #43	; 0x2b
 801e34a:	801a      	strh	r2, [r3, #0]
	}

	//allocate the contiguous memory area for storage cis data
	cisData = malloc(CIS_ADC_BUFF_SIZE * sizeof(uint16_t));
 801e34c:	4b40      	ldr	r3, [pc, #256]	; (801e450 <cis_Init+0x150>)
 801e34e:	881b      	ldrh	r3, [r3, #0]
 801e350:	005b      	lsls	r3, r3, #1
 801e352:	4618      	mov	r0, r3
 801e354:	f001 fe52 	bl	801fffc <malloc>
 801e358:	4603      	mov	r3, r0
 801e35a:	461a      	mov	r2, r3
 801e35c:	4b3d      	ldr	r3, [pc, #244]	; (801e454 <cis_Init+0x154>)
 801e35e:	601a      	str	r2, [r3, #0]
	if (cisData == NULL)
 801e360:	4b3c      	ldr	r3, [pc, #240]	; (801e454 <cis_Init+0x154>)
 801e362:	681b      	ldr	r3, [r3, #0]
 801e364:	2b00      	cmp	r3, #0
 801e366:	d101      	bne.n	801e36c <cis_Init+0x6c>
	{
		Error_Handler();
 801e368:	f7e4 fbe4 	bl	8002b34 <Error_Handler>
	}

	memset(cisData, 0, CIS_ADC_BUFF_SIZE * sizeof(uint16_t)); //clear image
 801e36c:	4b39      	ldr	r3, [pc, #228]	; (801e454 <cis_Init+0x154>)
 801e36e:	681b      	ldr	r3, [r3, #0]
 801e370:	4a37      	ldr	r2, [pc, #220]	; (801e450 <cis_Init+0x150>)
 801e372:	8812      	ldrh	r2, [r2, #0]
 801e374:	0052      	lsls	r2, r2, #1
 801e376:	2100      	movs	r1, #0
 801e378:	4618      	mov	r0, r3
 801e37a:	f001 fe7d 	bl	8020078 <memset>

#ifdef CIS_400DPI
	HAL_GPIO_WritePin(CIS_RS_GPIO_Port, CIS_RS_Pin, GPIO_PIN_RESET); //SET : 200DPI   RESET : 400DPI
#else
	HAL_GPIO_WritePin(CIS_RS_GPIO_Port, CIS_RS_Pin, GPIO_PIN_SET); //SET : 200DPI   RESET : 400DPI
 801e37e:	2201      	movs	r2, #1
 801e380:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801e384:	4834      	ldr	r0, [pc, #208]	; (801e458 <cis_Init+0x158>)
 801e386:	f7ec f985 	bl	800a694 <HAL_GPIO_WritePin>
#endif

	cis_ADC_Init(mode);
 801e38a:	79fb      	ldrb	r3, [r7, #7]
 801e38c:	4618      	mov	r0, r3
 801e38e:	f000 f9e5 	bl	801e75c <cis_ADC_Init>
	cis_TIM_SP_Init();
 801e392:	f000 f99b 	bl	801e6cc <cis_TIM_SP_Init>
	cis_TIM_LED_R_Init();
 801e396:	f000 f9bd 	bl	801e714 <cis_TIM_LED_R_Init>
	cis_TIM_LED_G_Init();
 801e39a:	f000 f9cd 	bl	801e738 <cis_TIM_LED_G_Init>
	cis_TIM_LED_B_Init();
 801e39e:	f000 f9a7 	bl	801e6f0 <cis_TIM_LED_B_Init>
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)cisData, CIS_ADC_BUFF_END_CAPTURE) != HAL_OK)
 801e3a2:	4b2c      	ldr	r3, [pc, #176]	; (801e454 <cis_Init+0x154>)
 801e3a4:	681b      	ldr	r3, [r3, #0]
 801e3a6:	4a29      	ldr	r2, [pc, #164]	; (801e44c <cis_Init+0x14c>)
 801e3a8:	8812      	ldrh	r2, [r2, #0]
 801e3aa:	4619      	mov	r1, r3
 801e3ac:	482b      	ldr	r0, [pc, #172]	; (801e45c <cis_Init+0x15c>)
 801e3ae:	f7e6 fac5 	bl	800493c <HAL_ADC_Start_DMA>
 801e3b2:	4603      	mov	r3, r0
 801e3b4:	2b00      	cmp	r3, #0
 801e3b6:	d001      	beq.n	801e3bc <cis_Init+0xbc>
	{
		Error_Handler();
 801e3b8:	f7e4 fbbc 	bl	8002b34 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc2, (uint32_t *)&cisData[CIS_ADC_BUFF_END_CAPTURE], CIS_ADC_BUFF_END_CAPTURE) != HAL_OK)
 801e3bc:	4b25      	ldr	r3, [pc, #148]	; (801e454 <cis_Init+0x154>)
 801e3be:	681a      	ldr	r2, [r3, #0]
 801e3c0:	4b22      	ldr	r3, [pc, #136]	; (801e44c <cis_Init+0x14c>)
 801e3c2:	881b      	ldrh	r3, [r3, #0]
 801e3c4:	005b      	lsls	r3, r3, #1
 801e3c6:	4413      	add	r3, r2
 801e3c8:	4a20      	ldr	r2, [pc, #128]	; (801e44c <cis_Init+0x14c>)
 801e3ca:	8812      	ldrh	r2, [r2, #0]
 801e3cc:	4619      	mov	r1, r3
 801e3ce:	4824      	ldr	r0, [pc, #144]	; (801e460 <cis_Init+0x160>)
 801e3d0:	f7e6 fab4 	bl	800493c <HAL_ADC_Start_DMA>
 801e3d4:	4603      	mov	r3, r0
 801e3d6:	2b00      	cmp	r3, #0
 801e3d8:	d001      	beq.n	801e3de <cis_Init+0xde>
	{
		Error_Handler();
 801e3da:	f7e4 fbab 	bl	8002b34 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t *)&cisData[CIS_ADC_BUFF_END_CAPTURE * 2], CIS_ADC_BUFF_END_CAPTURE) != HAL_OK)
 801e3de:	4b1d      	ldr	r3, [pc, #116]	; (801e454 <cis_Init+0x154>)
 801e3e0:	681a      	ldr	r2, [r3, #0]
 801e3e2:	4b1a      	ldr	r3, [pc, #104]	; (801e44c <cis_Init+0x14c>)
 801e3e4:	881b      	ldrh	r3, [r3, #0]
 801e3e6:	009b      	lsls	r3, r3, #2
 801e3e8:	4413      	add	r3, r2
 801e3ea:	4a18      	ldr	r2, [pc, #96]	; (801e44c <cis_Init+0x14c>)
 801e3ec:	8812      	ldrh	r2, [r2, #0]
 801e3ee:	4619      	mov	r1, r3
 801e3f0:	481c      	ldr	r0, [pc, #112]	; (801e464 <cis_Init+0x164>)
 801e3f2:	f7e6 faa3 	bl	800493c <HAL_ADC_Start_DMA>
 801e3f6:	4603      	mov	r3, r0
 801e3f8:	2b00      	cmp	r3, #0
 801e3fa:	d001      	beq.n	801e400 <cis_Init+0x100>
	{
		Error_Handler();
 801e3fc:	f7e4 fb9a 	bl	8002b34 <Error_Handler>
	}
	cis_TIM_CLK_Init();
 801e400:	f000 f94a 	bl	801e698 <cis_TIM_CLK_Init>

	//Reset CLK counter
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 801e404:	4b18      	ldr	r3, [pc, #96]	; (801e468 <cis_Init+0x168>)
 801e406:	681b      	ldr	r3, [r3, #0]
 801e408:	2200      	movs	r2, #0
 801e40a:	625a      	str	r2, [r3, #36]	; 0x24

	//Reset SP counter
	__HAL_TIM_SET_COUNTER(&htim8, 0);
 801e40c:	4b17      	ldr	r3, [pc, #92]	; (801e46c <cis_Init+0x16c>)
 801e40e:	681b      	ldr	r3, [r3, #0]
 801e410:	2200      	movs	r2, #0
 801e412:	625a      	str	r2, [r3, #36]	; 0x24

#ifdef CIS_BW
	//Set BW phase shift
	__HAL_TIM_SET_COUNTER(&htim5, (CIS_END_CAPTURE) - CIS_LED_ON);			//B
 801e414:	4b16      	ldr	r3, [pc, #88]	; (801e470 <cis_Init+0x170>)
 801e416:	681b      	ldr	r3, [r3, #0]
 801e418:	f44f 7228 	mov.w	r2, #672	; 0x2a0
 801e41c:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim4, (CIS_END_CAPTURE) - CIS_LED_ON);			//G
 801e41e:	4b15      	ldr	r3, [pc, #84]	; (801e474 <cis_Init+0x174>)
 801e420:	681b      	ldr	r3, [r3, #0]
 801e422:	f44f 7228 	mov.w	r2, #672	; 0x2a0
 801e426:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, (CIS_END_CAPTURE) - CIS_LED_ON);			//R
 801e428:	4b13      	ldr	r3, [pc, #76]	; (801e478 <cis_Init+0x178>)
 801e42a:	681b      	ldr	r3, [r3, #0]
 801e42c:	f44f 7228 	mov.w	r2, #672	; 0x2a0
 801e430:	625a      	str	r2, [r3, #36]	; 0x24
	//Set RGB phase shift
	__HAL_TIM_SET_COUNTER(&htim5, (CIS_END_CAPTURE * 2) - CIS_LED_ON);		//B
	__HAL_TIM_SET_COUNTER(&htim4, (CIS_END_CAPTURE * 3) - CIS_LED_ON);		//G
	__HAL_TIM_SET_COUNTER(&htim3, (CIS_END_CAPTURE) - CIS_LED_ON);			//R
#endif
}
 801e432:	bf00      	nop
 801e434:	3708      	adds	r7, #8
 801e436:	46bd      	mov	sp, r7
 801e438:	bd80      	pop	{r7, pc}
 801e43a:	bf00      	nop
 801e43c:	58021800 	.word	0x58021800
 801e440:	24000038 	.word	0x24000038
 801e444:	2400003a 	.word	0x2400003a
 801e448:	2400003c 	.word	0x2400003c
 801e44c:	2400003e 	.word	0x2400003e
 801e450:	24000040 	.word	0x24000040
 801e454:	240048e0 	.word	0x240048e0
 801e458:	58020000 	.word	0x58020000
 801e45c:	24004bd0 	.word	0x24004bd0
 801e460:	24004af4 	.word	0x24004af4
 801e464:	24004c34 	.word	0x24004c34
 801e468:	240050d4 	.word	0x240050d4
 801e46c:	24004fa4 	.word	0x24004fa4
 801e470:	2400503c 	.word	0x2400503c
 801e474:	24004ff0 	.word	0x24004ff0
 801e478:	24005088 	.word	0x24005088

0801e47c <cis_GetEffectivePixelNb>:
 * @brief  GetEffectivePixelNb
 * @param  Void
 * @retval Nuber of effective pixels
 */
__inline uint16_t cis_GetEffectivePixelNb(void)
{
 801e47c:	b480      	push	{r7}
 801e47e:	af00      	add	r7, sp, #0
	return CIS_EFFECTIVE_PIXELS;
 801e480:	4b03      	ldr	r3, [pc, #12]	; (801e490 <cis_GetEffectivePixelNb+0x14>)
 801e482:	881b      	ldrh	r3, [r3, #0]
}
 801e484:	4618      	mov	r0, r3
 801e486:	46bd      	mov	sp, r7
 801e488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e48c:	4770      	bx	lr
 801e48e:	bf00      	nop
 801e490:	24000036 	.word	0x24000036

0801e494 <cis_ImageProcessBW>:
 * @brief  Manages Image process.
 * @param  None
 * @retval Image error
 */
void cis_ImageProcessBW(uint16_t *cis_buff)
{
 801e494:	b580      	push	{r7, lr}
 801e496:	b090      	sub	sp, #64	; 0x40
 801e498:	af00      	add	r7, sp, #0
 801e49a:	6078      	str	r0, [r7, #4]
	for (int32_t line = (CIS_ADC_OUT_LINES); --line >= 0;)
 801e49c:	2303      	movs	r3, #3
 801e49e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801e4a0:	e0c5      	b.n	801e62e <cis_ImageProcessBW+0x19a>
	{
		/* 1st half buffer played; so fill it and continue playing from bottom*/
		if(cisBufferState[line] == CIS_BUFFER_OFFSET_HALF)
 801e4a2:	4a69      	ldr	r2, [pc, #420]	; (801e648 <cis_ImageProcessBW+0x1b4>)
 801e4a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e4a6:	4413      	add	r3, r2
 801e4a8:	781b      	ldrb	r3, [r3, #0]
 801e4aa:	2b01      	cmp	r3, #1
 801e4ac:	d157      	bne.n	801e55e <cis_ImageProcessBW+0xca>
		{
			uint32_t dataOffset = (CIS_ADC_BUFF_END_CAPTURE * line) + CIS_ADC_BUFF_START_OFFSET;
 801e4ae:	4b67      	ldr	r3, [pc, #412]	; (801e64c <cis_ImageProcessBW+0x1b8>)
 801e4b0:	881b      	ldrh	r3, [r3, #0]
 801e4b2:	461a      	mov	r2, r3
 801e4b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e4b6:	fb03 f302 	mul.w	r3, r3, r2
 801e4ba:	4a65      	ldr	r2, [pc, #404]	; (801e650 <cis_ImageProcessBW+0x1bc>)
 801e4bc:	8812      	ldrh	r2, [r2, #0]
 801e4be:	4413      	add	r3, r2
 801e4c0:	63bb      	str	r3, [r7, #56]	; 0x38
			uint32_t imageOffset = (CIS_EFFECTIVE_PIXELS_PER_LINE * line);
 801e4c2:	4b64      	ldr	r3, [pc, #400]	; (801e654 <cis_ImageProcessBW+0x1c0>)
 801e4c4:	881b      	ldrh	r3, [r3, #0]
 801e4c6:	461a      	mov	r2, r3
 801e4c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e4ca:	fb03 f302 	mul.w	r3, r3, r2
 801e4ce:	637b      	str	r3, [r7, #52]	; 0x34

			cisBufferState[line] = CIS_BUFFER_OFFSET_NONE;
 801e4d0:	4a5d      	ldr	r2, [pc, #372]	; (801e648 <cis_ImageProcessBW+0x1b4>)
 801e4d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e4d4:	4413      	add	r3, r2
 801e4d6:	2200      	movs	r2, #0
 801e4d8:	701a      	strb	r2, [r3, #0]
			/* Invalidate Data Cache to get the updated content of the SRAM on the first half of the ADC converted data buffer */
			SCB_InvalidateDCache_by_Addr((uint32_t *) &cisData[dataOffset] , CIS_EFFECTIVE_PIXELS_PER_LINE);
 801e4da:	4b5f      	ldr	r3, [pc, #380]	; (801e658 <cis_ImageProcessBW+0x1c4>)
 801e4dc:	681a      	ldr	r2, [r3, #0]
 801e4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e4e0:	005b      	lsls	r3, r3, #1
 801e4e2:	4413      	add	r3, r2
 801e4e4:	4a5b      	ldr	r2, [pc, #364]	; (801e654 <cis_ImageProcessBW+0x1c0>)
 801e4e6:	8812      	ldrh	r2, [r2, #0]
 801e4e8:	62bb      	str	r3, [r7, #40]	; 0x28
 801e4ea:	627a      	str	r2, [r7, #36]	; 0x24
    if ( dsize > 0 ) { 
 801e4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e4ee:	2b00      	cmp	r3, #0
 801e4f0:	dd1d      	ble.n	801e52e <cis_ImageProcessBW+0x9a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 801e4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e4f4:	f003 021f 	and.w	r2, r3, #31
 801e4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e4fa:	4413      	add	r3, r2
 801e4fc:	623b      	str	r3, [r7, #32]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 801e4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e500:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("dsb 0xF":::"memory");
 801e502:	f3bf 8f4f 	dsb	sy
}
 801e506:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 801e508:	4a54      	ldr	r2, [pc, #336]	; (801e65c <cis_ImageProcessBW+0x1c8>)
 801e50a:	69fb      	ldr	r3, [r7, #28]
 801e50c:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 801e510:	69fb      	ldr	r3, [r7, #28]
 801e512:	3320      	adds	r3, #32
 801e514:	61fb      	str	r3, [r7, #28]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 801e516:	6a3b      	ldr	r3, [r7, #32]
 801e518:	3b20      	subs	r3, #32
 801e51a:	623b      	str	r3, [r7, #32]
      } while ( op_size > 0 );
 801e51c:	6a3b      	ldr	r3, [r7, #32]
 801e51e:	2b00      	cmp	r3, #0
 801e520:	dcf2      	bgt.n	801e508 <cis_ImageProcessBW+0x74>
  __ASM volatile ("dsb 0xF":::"memory");
 801e522:	f3bf 8f4f 	dsb	sy
}
 801e526:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801e528:	f3bf 8f6f 	isb	sy
}
 801e52c:	bf00      	nop
}
 801e52e:	bf00      	nop
			arm_copy_q15((int16_t*)&cisData[dataOffset], (int16_t*)&cis_buff[imageOffset], CIS_EFFECTIVE_PIXELS_PER_LINE / 2);
 801e530:	4b49      	ldr	r3, [pc, #292]	; (801e658 <cis_ImageProcessBW+0x1c4>)
 801e532:	681a      	ldr	r2, [r3, #0]
 801e534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e536:	005b      	lsls	r3, r3, #1
 801e538:	18d0      	adds	r0, r2, r3
 801e53a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e53c:	005b      	lsls	r3, r3, #1
 801e53e:	687a      	ldr	r2, [r7, #4]
 801e540:	18d1      	adds	r1, r2, r3
 801e542:	4b44      	ldr	r3, [pc, #272]	; (801e654 <cis_ImageProcessBW+0x1c0>)
 801e544:	881b      	ldrh	r3, [r3, #0]
 801e546:	085b      	lsrs	r3, r3, #1
 801e548:	b29b      	uxth	r3, r3
 801e54a:	461a      	mov	r2, r3
 801e54c:	f7e5 fba3 	bl	8003c96 <arm_copy_q15>

			cis_ImageFilterBW(&cis_buff[imageOffset]);
 801e550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e552:	005b      	lsls	r3, r3, #1
 801e554:	687a      	ldr	r2, [r7, #4]
 801e556:	4413      	add	r3, r2
 801e558:	4618      	mov	r0, r3
 801e55a:	f000 f881 	bl	801e660 <cis_ImageFilterBW>
		}

		/* 2nd half buffer played; so fill it and continue playing from top */
		if(cisBufferState[line] == CIS_BUFFER_OFFSET_FULL)
 801e55e:	4a3a      	ldr	r2, [pc, #232]	; (801e648 <cis_ImageProcessBW+0x1b4>)
 801e560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e562:	4413      	add	r3, r2
 801e564:	781b      	ldrb	r3, [r3, #0]
 801e566:	2b02      	cmp	r3, #2
 801e568:	d161      	bne.n	801e62e <cis_ImageProcessBW+0x19a>
		{
			uint32_t dataOffset = (CIS_ADC_BUFF_END_CAPTURE * line) + CIS_ADC_BUFF_START_OFFSET + (CIS_EFFECTIVE_PIXELS_PER_LINE / 2);
 801e56a:	4b38      	ldr	r3, [pc, #224]	; (801e64c <cis_ImageProcessBW+0x1b8>)
 801e56c:	881b      	ldrh	r3, [r3, #0]
 801e56e:	461a      	mov	r2, r3
 801e570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e572:	fb03 f302 	mul.w	r3, r3, r2
 801e576:	4a36      	ldr	r2, [pc, #216]	; (801e650 <cis_ImageProcessBW+0x1bc>)
 801e578:	8812      	ldrh	r2, [r2, #0]
 801e57a:	4413      	add	r3, r2
 801e57c:	4a35      	ldr	r2, [pc, #212]	; (801e654 <cis_ImageProcessBW+0x1c0>)
 801e57e:	8812      	ldrh	r2, [r2, #0]
 801e580:	0852      	lsrs	r2, r2, #1
 801e582:	b292      	uxth	r2, r2
 801e584:	4413      	add	r3, r2
 801e586:	633b      	str	r3, [r7, #48]	; 0x30
			uint32_t imageOffset = (CIS_EFFECTIVE_PIXELS_PER_LINE * line) + (CIS_EFFECTIVE_PIXELS_PER_LINE / 2);
 801e588:	4b32      	ldr	r3, [pc, #200]	; (801e654 <cis_ImageProcessBW+0x1c0>)
 801e58a:	881b      	ldrh	r3, [r3, #0]
 801e58c:	461a      	mov	r2, r3
 801e58e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e590:	fb03 f302 	mul.w	r3, r3, r2
 801e594:	4a2f      	ldr	r2, [pc, #188]	; (801e654 <cis_ImageProcessBW+0x1c0>)
 801e596:	8812      	ldrh	r2, [r2, #0]
 801e598:	0852      	lsrs	r2, r2, #1
 801e59a:	b292      	uxth	r2, r2
 801e59c:	4413      	add	r3, r2
 801e59e:	62fb      	str	r3, [r7, #44]	; 0x2c

			cisBufferState[line] = CIS_BUFFER_OFFSET_NONE;
 801e5a0:	4a29      	ldr	r2, [pc, #164]	; (801e648 <cis_ImageProcessBW+0x1b4>)
 801e5a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e5a4:	4413      	add	r3, r2
 801e5a6:	2200      	movs	r2, #0
 801e5a8:	701a      	strb	r2, [r3, #0]
			/* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer */
			SCB_InvalidateDCache_by_Addr((uint32_t *) &cisData[dataOffset], CIS_EFFECTIVE_PIXELS_PER_LINE);
 801e5aa:	4b2b      	ldr	r3, [pc, #172]	; (801e658 <cis_ImageProcessBW+0x1c4>)
 801e5ac:	681a      	ldr	r2, [r3, #0]
 801e5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e5b0:	005b      	lsls	r3, r3, #1
 801e5b2:	4413      	add	r3, r2
 801e5b4:	4a27      	ldr	r2, [pc, #156]	; (801e654 <cis_ImageProcessBW+0x1c0>)
 801e5b6:	8812      	ldrh	r2, [r2, #0]
 801e5b8:	61bb      	str	r3, [r7, #24]
 801e5ba:	617a      	str	r2, [r7, #20]
    if ( dsize > 0 ) { 
 801e5bc:	697b      	ldr	r3, [r7, #20]
 801e5be:	2b00      	cmp	r3, #0
 801e5c0:	dd1d      	ble.n	801e5fe <cis_ImageProcessBW+0x16a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 801e5c2:	69bb      	ldr	r3, [r7, #24]
 801e5c4:	f003 021f 	and.w	r2, r3, #31
 801e5c8:	697b      	ldr	r3, [r7, #20]
 801e5ca:	4413      	add	r3, r2
 801e5cc:	613b      	str	r3, [r7, #16]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 801e5ce:	69bb      	ldr	r3, [r7, #24]
 801e5d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801e5d2:	f3bf 8f4f 	dsb	sy
}
 801e5d6:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 801e5d8:	4a20      	ldr	r2, [pc, #128]	; (801e65c <cis_ImageProcessBW+0x1c8>)
 801e5da:	68fb      	ldr	r3, [r7, #12]
 801e5dc:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 801e5e0:	68fb      	ldr	r3, [r7, #12]
 801e5e2:	3320      	adds	r3, #32
 801e5e4:	60fb      	str	r3, [r7, #12]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 801e5e6:	693b      	ldr	r3, [r7, #16]
 801e5e8:	3b20      	subs	r3, #32
 801e5ea:	613b      	str	r3, [r7, #16]
      } while ( op_size > 0 );
 801e5ec:	693b      	ldr	r3, [r7, #16]
 801e5ee:	2b00      	cmp	r3, #0
 801e5f0:	dcf2      	bgt.n	801e5d8 <cis_ImageProcessBW+0x144>
  __ASM volatile ("dsb 0xF":::"memory");
 801e5f2:	f3bf 8f4f 	dsb	sy
}
 801e5f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801e5f8:	f3bf 8f6f 	isb	sy
}
 801e5fc:	bf00      	nop
}
 801e5fe:	bf00      	nop
			arm_copy_q15((int16_t*)&cisData[dataOffset], (int16_t*)&cis_buff[imageOffset], CIS_EFFECTIVE_PIXELS_PER_LINE / 2);
 801e600:	4b15      	ldr	r3, [pc, #84]	; (801e658 <cis_ImageProcessBW+0x1c4>)
 801e602:	681a      	ldr	r2, [r3, #0]
 801e604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e606:	005b      	lsls	r3, r3, #1
 801e608:	18d0      	adds	r0, r2, r3
 801e60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e60c:	005b      	lsls	r3, r3, #1
 801e60e:	687a      	ldr	r2, [r7, #4]
 801e610:	18d1      	adds	r1, r2, r3
 801e612:	4b10      	ldr	r3, [pc, #64]	; (801e654 <cis_ImageProcessBW+0x1c0>)
 801e614:	881b      	ldrh	r3, [r3, #0]
 801e616:	085b      	lsrs	r3, r3, #1
 801e618:	b29b      	uxth	r3, r3
 801e61a:	461a      	mov	r2, r3
 801e61c:	f7e5 fb3b 	bl	8003c96 <arm_copy_q15>

			cis_ImageFilterBW(&cis_buff[imageOffset]);
 801e620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e622:	005b      	lsls	r3, r3, #1
 801e624:	687a      	ldr	r2, [r7, #4]
 801e626:	4413      	add	r3, r2
 801e628:	4618      	mov	r0, r3
 801e62a:	f000 f819 	bl	801e660 <cis_ImageFilterBW>
	for (int32_t line = (CIS_ADC_OUT_LINES); --line >= 0;)
 801e62e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e630:	3b01      	subs	r3, #1
 801e632:	63fb      	str	r3, [r7, #60]	; 0x3c
 801e634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e636:	2b00      	cmp	r3, #0
 801e638:	f6bf af33 	bge.w	801e4a2 <cis_ImageProcessBW+0xe>
		}
	}
}
 801e63c:	bf00      	nop
 801e63e:	bf00      	nop
 801e640:	3740      	adds	r7, #64	; 0x40
 801e642:	46bd      	mov	sp, r7
 801e644:	bd80      	pop	{r7, pc}
 801e646:	bf00      	nop
 801e648:	240048e4 	.word	0x240048e4
 801e64c:	2400003e 	.word	0x2400003e
 801e650:	2400003a 	.word	0x2400003a
 801e654:	24000038 	.word	0x24000038
 801e658:	240048e0 	.word	0x240048e0
 801e65c:	e000ed00 	.word	0xe000ed00

0801e660 <cis_ImageFilterBW>:
 * @brief  Image filtering
 * @param  Audio buffer
 * @retval None
 */
void cis_ImageFilterBW(uint16_t *cis_buff)
{
 801e660:	b480      	push	{r7}
 801e662:	b085      	sub	sp, #20
 801e664:	af00      	add	r7, sp, #0
 801e666:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < CIS_EFFECTIVE_PIXELS_PER_LINE / 2; i++)
 801e668:	2300      	movs	r3, #0
 801e66a:	60fb      	str	r3, [r7, #12]
 801e66c:	e002      	b.n	801e674 <cis_ImageFilterBW+0x14>
 801e66e:	68fb      	ldr	r3, [r7, #12]
 801e670:	3301      	adds	r3, #1
 801e672:	60fb      	str	r3, [r7, #12]
 801e674:	4b07      	ldr	r3, [pc, #28]	; (801e694 <cis_ImageFilterBW+0x34>)
 801e676:	881b      	ldrh	r3, [r3, #0]
 801e678:	085b      	lsrs	r3, r3, #1
 801e67a:	b29b      	uxth	r3, r3
 801e67c:	461a      	mov	r2, r3
 801e67e:	68fb      	ldr	r3, [r7, #12]
 801e680:	4293      	cmp	r3, r2
 801e682:	d3f4      	bcc.n	801e66e <cis_ImageFilterBW+0xe>
#endif
#ifdef CIS_NORMAL_COLOR_SMOOTH
		cis_buff[i] = (double)(cis_buff[i]) * (pow(10.00, ((double)(cis_buff[i]) / 65535.00)) / 10.00);
#endif
	}
}
 801e684:	bf00      	nop
 801e686:	bf00      	nop
 801e688:	3714      	adds	r7, #20
 801e68a:	46bd      	mov	sp, r7
 801e68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e690:	4770      	bx	lr
 801e692:	bf00      	nop
 801e694:	24000038 	.word	0x24000038

0801e698 <cis_TIM_CLK_Init>:
 * @brief  Init CIS clock Frequency
 * @param  sampling_frequency
 * @retval None
 */
void cis_TIM_CLK_Init()
{
 801e698:	b580      	push	{r7, lr}
 801e69a:	af00      	add	r7, sp, #0
	MX_TIM1_Init();
 801e69c:	f7e4 fdc0 	bl	8003220 <MX_TIM1_Init>

	/* Start ADC Timer #######################################*/
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 801e6a0:	2100      	movs	r1, #0
 801e6a2:	4809      	ldr	r0, [pc, #36]	; (801e6c8 <cis_TIM_CLK_Init+0x30>)
 801e6a4:	f7f1 fa54 	bl	800fb50 <HAL_TIM_PWM_Start>
 801e6a8:	4603      	mov	r3, r0
 801e6aa:	2b00      	cmp	r3, #0
 801e6ac:	d001      	beq.n	801e6b2 <cis_TIM_CLK_Init+0x1a>
	{
		Error_Handler();
 801e6ae:	f7e4 fa41 	bl	8002b34 <Error_Handler>
	}

	/* Start CLK generation ##################################*/
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
 801e6b2:	2104      	movs	r1, #4
 801e6b4:	4804      	ldr	r0, [pc, #16]	; (801e6c8 <cis_TIM_CLK_Init+0x30>)
 801e6b6:	f7f1 fa4b 	bl	800fb50 <HAL_TIM_PWM_Start>
 801e6ba:	4603      	mov	r3, r0
 801e6bc:	2b00      	cmp	r3, #0
 801e6be:	d001      	beq.n	801e6c4 <cis_TIM_CLK_Init+0x2c>
	{
		Error_Handler();
 801e6c0:	f7e4 fa38 	bl	8002b34 <Error_Handler>
	}
}
 801e6c4:	bf00      	nop
 801e6c6:	bd80      	pop	{r7, pc}
 801e6c8:	240050d4 	.word	0x240050d4

0801e6cc <cis_TIM_SP_Init>:
 * @brief  CIS start pulse timer init
 * @param  Void
 * @retval None
 */
void cis_TIM_SP_Init()
{
 801e6cc:	b580      	push	{r7, lr}
 801e6ce:	af00      	add	r7, sp, #0
	MX_TIM8_Init();
 801e6d0:	f7e4 ffd8 	bl	8003684 <MX_TIM8_Init>

	/* Start SP generation ##################################*/
	if(HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3) != HAL_OK)
 801e6d4:	2108      	movs	r1, #8
 801e6d6:	4805      	ldr	r0, [pc, #20]	; (801e6ec <cis_TIM_SP_Init+0x20>)
 801e6d8:	f7f1 fa3a 	bl	800fb50 <HAL_TIM_PWM_Start>
 801e6dc:	4603      	mov	r3, r0
 801e6de:	2b00      	cmp	r3, #0
 801e6e0:	d001      	beq.n	801e6e6 <cis_TIM_SP_Init+0x1a>
	{
		Error_Handler();
 801e6e2:	f7e4 fa27 	bl	8002b34 <Error_Handler>
	}
}
 801e6e6:	bf00      	nop
 801e6e8:	bd80      	pop	{r7, pc}
 801e6ea:	bf00      	nop
 801e6ec:	24004fa4 	.word	0x24004fa4

0801e6f0 <cis_TIM_LED_B_Init>:
 * @brief  CIS red led timer init
 * @param  Void
 * @retval None
 */
void cis_TIM_LED_B_Init()
{
 801e6f0:	b580      	push	{r7, lr}
 801e6f2:	af00      	add	r7, sp, #0
	MX_TIM3_Init();
 801e6f4:	f7e4 fe46 	bl	8003384 <MX_TIM3_Init>

	/* Start LED R generation ###############################*/
	if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
 801e6f8:	2100      	movs	r1, #0
 801e6fa:	4805      	ldr	r0, [pc, #20]	; (801e710 <cis_TIM_LED_B_Init+0x20>)
 801e6fc:	f7f1 fa28 	bl	800fb50 <HAL_TIM_PWM_Start>
 801e700:	4603      	mov	r3, r0
 801e702:	2b00      	cmp	r3, #0
 801e704:	d001      	beq.n	801e70a <cis_TIM_LED_B_Init+0x1a>
	{
		Error_Handler();
 801e706:	f7e4 fa15 	bl	8002b34 <Error_Handler>
	}
}
 801e70a:	bf00      	nop
 801e70c:	bd80      	pop	{r7, pc}
 801e70e:	bf00      	nop
 801e710:	24005088 	.word	0x24005088

0801e714 <cis_TIM_LED_R_Init>:
 * @brief  CIS green led timer init
 * @param  Void
 * @retval None
 */
void cis_TIM_LED_R_Init()
{
 801e714:	b580      	push	{r7, lr}
 801e716:	af00      	add	r7, sp, #0
	MX_TIM4_Init();
 801e718:	f7e4 feb4 	bl	8003484 <MX_TIM4_Init>

	/* Start LED G generation ###############################*/
	if(HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2) != HAL_OK)
 801e71c:	2104      	movs	r1, #4
 801e71e:	4805      	ldr	r0, [pc, #20]	; (801e734 <cis_TIM_LED_R_Init+0x20>)
 801e720:	f7f1 fa16 	bl	800fb50 <HAL_TIM_PWM_Start>
 801e724:	4603      	mov	r3, r0
 801e726:	2b00      	cmp	r3, #0
 801e728:	d001      	beq.n	801e72e <cis_TIM_LED_R_Init+0x1a>
	{
		Error_Handler();
 801e72a:	f7e4 fa03 	bl	8002b34 <Error_Handler>
	}
}
 801e72e:	bf00      	nop
 801e730:	bd80      	pop	{r7, pc}
 801e732:	bf00      	nop
 801e734:	24004ff0 	.word	0x24004ff0

0801e738 <cis_TIM_LED_G_Init>:
 * @brief  CIS blue led timer init
 * @param  Void
 * @retval None
 */
void cis_TIM_LED_G_Init()
{
 801e738:	b580      	push	{r7, lr}
 801e73a:	af00      	add	r7, sp, #0
	MX_TIM5_Init();
 801e73c:	f7e4 ff22 	bl	8003584 <MX_TIM5_Init>

	/* Start LED B generation ###############################*/
	if(HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3) != HAL_OK)
 801e740:	2108      	movs	r1, #8
 801e742:	4805      	ldr	r0, [pc, #20]	; (801e758 <cis_TIM_LED_G_Init+0x20>)
 801e744:	f7f1 fa04 	bl	800fb50 <HAL_TIM_PWM_Start>
 801e748:	4603      	mov	r3, r0
 801e74a:	2b00      	cmp	r3, #0
 801e74c:	d001      	beq.n	801e752 <cis_TIM_LED_G_Init+0x1a>
	{
		Error_Handler();
 801e74e:	f7e4 f9f1 	bl	8002b34 <Error_Handler>
	}
}
 801e752:	bf00      	nop
 801e754:	bd80      	pop	{r7, pc}
 801e756:	bf00      	nop
 801e758:	2400503c 	.word	0x2400503c

0801e75c <cis_ADC_Init>:
 * @brief  CIS adc init
 * @param  Void
 * @retval None
 */
void cis_ADC_Init(synthModeTypeDef mode)
{
 801e75c:	b580      	push	{r7, lr}
 801e75e:	b082      	sub	sp, #8
 801e760:	af00      	add	r7, sp, #0
 801e762:	4603      	mov	r3, r0
 801e764:	71fb      	strb	r3, [r7, #7]
	MX_ADC1_Init();
 801e766:	f7e2 fb65 	bl	8000e34 <MX_ADC1_Init>
	MX_ADC2_Init();
 801e76a:	f7e2 fbed 	bl	8000f48 <MX_ADC2_Init>
	MX_ADC3_Init();
 801e76e:	f7e2 fc63 	bl	8001038 <MX_ADC3_Init>

	/* ### Start calibration ############################################ */
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 801e772:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801e776:	2100      	movs	r1, #0
 801e778:	4810      	ldr	r0, [pc, #64]	; (801e7bc <cis_ADC_Init+0x60>)
 801e77a:	f7e6 ffdf 	bl	800573c <HAL_ADCEx_Calibration_Start>
 801e77e:	4603      	mov	r3, r0
 801e780:	2b00      	cmp	r3, #0
 801e782:	d001      	beq.n	801e788 <cis_ADC_Init+0x2c>
	{
		Error_Handler();
 801e784:	f7e4 f9d6 	bl	8002b34 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 801e788:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801e78c:	2100      	movs	r1, #0
 801e78e:	480c      	ldr	r0, [pc, #48]	; (801e7c0 <cis_ADC_Init+0x64>)
 801e790:	f7e6 ffd4 	bl	800573c <HAL_ADCEx_Calibration_Start>
 801e794:	4603      	mov	r3, r0
 801e796:	2b00      	cmp	r3, #0
 801e798:	d001      	beq.n	801e79e <cis_ADC_Init+0x42>
	{
		Error_Handler();
 801e79a:	f7e4 f9cb 	bl	8002b34 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 801e79e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801e7a2:	2100      	movs	r1, #0
 801e7a4:	4807      	ldr	r0, [pc, #28]	; (801e7c4 <cis_ADC_Init+0x68>)
 801e7a6:	f7e6 ffc9 	bl	800573c <HAL_ADCEx_Calibration_Start>
 801e7aa:	4603      	mov	r3, r0
 801e7ac:	2b00      	cmp	r3, #0
 801e7ae:	d001      	beq.n	801e7b4 <cis_ADC_Init+0x58>
	{
		Error_Handler();
 801e7b0:	f7e4 f9c0 	bl	8002b34 <Error_Handler>
	}
}
 801e7b4:	bf00      	nop
 801e7b6:	3708      	adds	r7, #8
 801e7b8:	46bd      	mov	sp, r7
 801e7ba:	bd80      	pop	{r7, pc}
 801e7bc:	24004bd0 	.word	0x24004bd0
 801e7c0:	24004af4 	.word	0x24004af4
 801e7c4:	24004c34 	.word	0x24004c34

0801e7c8 <HAL_ADC_ConvHalfCpltCallback>:
 * @brief  Conversion DMA half-transfer callback in non-blocking mode
 * @param  hadc: ADC handle
 * @retval None
 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 801e7c8:	b480      	push	{r7}
 801e7ca:	b083      	sub	sp, #12
 801e7cc:	af00      	add	r7, sp, #0
 801e7ce:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1)
 801e7d0:	687b      	ldr	r3, [r7, #4]
 801e7d2:	681b      	ldr	r3, [r3, #0]
 801e7d4:	4a0e      	ldr	r2, [pc, #56]	; (801e810 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 801e7d6:	4293      	cmp	r3, r2
 801e7d8:	d103      	bne.n	801e7e2 <HAL_ADC_ConvHalfCpltCallback+0x1a>
	{
		cisBufferState[0] = CIS_BUFFER_OFFSET_HALF;
 801e7da:	4b0e      	ldr	r3, [pc, #56]	; (801e814 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 801e7dc:	2201      	movs	r2, #1
 801e7de:	701a      	strb	r2, [r3, #0]
		return;
 801e7e0:	e010      	b.n	801e804 <HAL_ADC_ConvHalfCpltCallback+0x3c>
	}
	if (hadc->Instance == ADC2)
 801e7e2:	687b      	ldr	r3, [r7, #4]
 801e7e4:	681b      	ldr	r3, [r3, #0]
 801e7e6:	4a0c      	ldr	r2, [pc, #48]	; (801e818 <HAL_ADC_ConvHalfCpltCallback+0x50>)
 801e7e8:	4293      	cmp	r3, r2
 801e7ea:	d103      	bne.n	801e7f4 <HAL_ADC_ConvHalfCpltCallback+0x2c>
	{
		cisBufferState[1] = CIS_BUFFER_OFFSET_HALF;
 801e7ec:	4b09      	ldr	r3, [pc, #36]	; (801e814 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 801e7ee:	2201      	movs	r2, #1
 801e7f0:	705a      	strb	r2, [r3, #1]
		return;
 801e7f2:	e007      	b.n	801e804 <HAL_ADC_ConvHalfCpltCallback+0x3c>
	}
	if (hadc->Instance == ADC3)
 801e7f4:	687b      	ldr	r3, [r7, #4]
 801e7f6:	681b      	ldr	r3, [r3, #0]
 801e7f8:	4a08      	ldr	r2, [pc, #32]	; (801e81c <HAL_ADC_ConvHalfCpltCallback+0x54>)
 801e7fa:	4293      	cmp	r3, r2
 801e7fc:	d102      	bne.n	801e804 <HAL_ADC_ConvHalfCpltCallback+0x3c>
	{
		cisBufferState[2] = CIS_BUFFER_OFFSET_HALF;
 801e7fe:	4b05      	ldr	r3, [pc, #20]	; (801e814 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 801e800:	2201      	movs	r2, #1
 801e802:	709a      	strb	r2, [r3, #2]
	}
}
 801e804:	370c      	adds	r7, #12
 801e806:	46bd      	mov	sp, r7
 801e808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e80c:	4770      	bx	lr
 801e80e:	bf00      	nop
 801e810:	40022000 	.word	0x40022000
 801e814:	240048e4 	.word	0x240048e4
 801e818:	40022100 	.word	0x40022100
 801e81c:	58026000 	.word	0x58026000

0801e820 <HAL_ADC_ConvCpltCallback>:
 * @brief  Conversion complete callback in non-blocking mode
 * @param  hadc: ADC handle
 * @retval None
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 801e820:	b480      	push	{r7}
 801e822:	b083      	sub	sp, #12
 801e824:	af00      	add	r7, sp, #0
 801e826:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1)
 801e828:	687b      	ldr	r3, [r7, #4]
 801e82a:	681b      	ldr	r3, [r3, #0]
 801e82c:	4a0e      	ldr	r2, [pc, #56]	; (801e868 <HAL_ADC_ConvCpltCallback+0x48>)
 801e82e:	4293      	cmp	r3, r2
 801e830:	d103      	bne.n	801e83a <HAL_ADC_ConvCpltCallback+0x1a>
	{
		cisBufferState[0] = CIS_BUFFER_OFFSET_FULL;
 801e832:	4b0e      	ldr	r3, [pc, #56]	; (801e86c <HAL_ADC_ConvCpltCallback+0x4c>)
 801e834:	2202      	movs	r2, #2
 801e836:	701a      	strb	r2, [r3, #0]
		return;
 801e838:	e010      	b.n	801e85c <HAL_ADC_ConvCpltCallback+0x3c>
	}
	if (hadc->Instance == ADC2)
 801e83a:	687b      	ldr	r3, [r7, #4]
 801e83c:	681b      	ldr	r3, [r3, #0]
 801e83e:	4a0c      	ldr	r2, [pc, #48]	; (801e870 <HAL_ADC_ConvCpltCallback+0x50>)
 801e840:	4293      	cmp	r3, r2
 801e842:	d103      	bne.n	801e84c <HAL_ADC_ConvCpltCallback+0x2c>
	{
		cisBufferState[1] = CIS_BUFFER_OFFSET_FULL;
 801e844:	4b09      	ldr	r3, [pc, #36]	; (801e86c <HAL_ADC_ConvCpltCallback+0x4c>)
 801e846:	2202      	movs	r2, #2
 801e848:	705a      	strb	r2, [r3, #1]
		return;
 801e84a:	e007      	b.n	801e85c <HAL_ADC_ConvCpltCallback+0x3c>
	}
	if (hadc->Instance == ADC3)
 801e84c:	687b      	ldr	r3, [r7, #4]
 801e84e:	681b      	ldr	r3, [r3, #0]
 801e850:	4a08      	ldr	r2, [pc, #32]	; (801e874 <HAL_ADC_ConvCpltCallback+0x54>)
 801e852:	4293      	cmp	r3, r2
 801e854:	d102      	bne.n	801e85c <HAL_ADC_ConvCpltCallback+0x3c>
	{
		cisBufferState[2] = CIS_BUFFER_OFFSET_FULL;
 801e856:	4b05      	ldr	r3, [pc, #20]	; (801e86c <HAL_ADC_ConvCpltCallback+0x4c>)
 801e858:	2202      	movs	r2, #2
 801e85a:	709a      	strb	r2, [r3, #2]
	}
}
 801e85c:	370c      	adds	r7, #12
 801e85e:	46bd      	mov	sp, r7
 801e860:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e864:	4770      	bx	lr
 801e866:	bf00      	nop
 801e868:	40022000 	.word	0x40022000
 801e86c:	240048e4 	.word	0x240048e4
 801e870:	40022100 	.word	0x40022100
 801e874:	58026000 	.word	0x58026000

0801e878 <EE_Init>:
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */

uint16_t EE_Init(void)
{
 801e878:	b580      	push	{r7, lr}
 801e87a:	b092      	sub	sp, #72	; 0x48
 801e87c:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 801e87e:	2306      	movs	r3, #6
 801e880:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801e884:	2306      	movs	r3, #6
 801e886:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  uint16_t VarIdx = 0;
 801e88a:	2300      	movs	r3, #0
 801e88c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  uint16_t EepromStatus = 0, ReadStatus = 0;
 801e890:	2300      	movs	r3, #0
 801e892:	87fb      	strh	r3, [r7, #62]	; 0x3e
 801e894:	2300      	movs	r3, #0
 801e896:	87bb      	strh	r3, [r7, #60]	; 0x3c
  int16_t x = -1;
 801e898:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e89c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 801e8a0:	2300      	movs	r3, #0
 801e8a2:	637b      	str	r3, [r7, #52]	; 0x34
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 801e8a4:	463b      	mov	r3, r7
 801e8a6:	2220      	movs	r2, #32
 801e8a8:	2100      	movs	r1, #0
 801e8aa:	4618      	mov	r0, r3
 801e8ac:	f001 fbe4 	bl	8020078 <memset>
 
  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 801e8b0:	4bc0      	ldr	r3, [pc, #768]	; (801ebb4 <EE_Init+0x33c>)
 801e8b2:	881b      	ldrh	r3, [r3, #0]
 801e8b4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 801e8b8:	4bbf      	ldr	r3, [pc, #764]	; (801ebb8 <EE_Init+0x340>)
 801e8ba:	881b      	ldrh	r3, [r3, #0]
 801e8bc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 801e8c0:	2300      	movs	r3, #0
 801e8c2:	623b      	str	r3, [r7, #32]
  pEraseInit.Banks = FLASH_BANK_2 ;
 801e8c4:	2302      	movs	r3, #2
 801e8c6:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Sector = PAGE0_ID;
 801e8c8:	2306      	movs	r3, #6
 801e8ca:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.NbSectors = 1;
 801e8cc:	2301      	movs	r3, #1
 801e8ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 801e8d0:	2320      	movs	r3, #32
 801e8d2:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 801e8d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801e8d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e8dc:	4293      	cmp	r3, r2
 801e8de:	d00b      	beq.n	801e8f8 <EE_Init+0x80>
 801e8e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e8e4:	f280 81df 	bge.w	801eca6 <EE_Init+0x42e>
 801e8e8:	2b00      	cmp	r3, #0
 801e8ea:	f000 8123 	beq.w	801eb34 <EE_Init+0x2bc>
 801e8ee:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 801e8f2:	4293      	cmp	r3, r2
 801e8f4:	d05e      	beq.n	801e9b4 <EE_Init+0x13c>
 801e8f6:	e1d6      	b.n	801eca6 <EE_Init+0x42e>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 801e8f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801e8fc:	2b00      	cmp	r3, #0
 801e8fe:	d11a      	bne.n	801e936 <EE_Init+0xbe>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 801e900:	48ac      	ldr	r0, [pc, #688]	; (801ebb4 <EE_Init+0x33c>)
 801e902:	f000 f9f3 	bl	801ecec <EE_VerifyPageFullyErased>
 801e906:	4603      	mov	r3, r0
 801e908:	2b00      	cmp	r3, #0
 801e90a:	f040 81d9 	bne.w	801ecc0 <EE_Init+0x448>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 801e90e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801e912:	f107 0320 	add.w	r3, r7, #32
 801e916:	4611      	mov	r1, r2
 801e918:	4618      	mov	r0, r3
 801e91a:	f7eb fb99 	bl	800a050 <HAL_FLASHEx_Erase>
 801e91e:	4603      	mov	r3, r0
 801e920:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 801e924:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801e928:	2b00      	cmp	r3, #0
 801e92a:	f000 81c9 	beq.w	801ecc0 <EE_Init+0x448>
          {
            return FlashStatus;
 801e92e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801e932:	b29b      	uxth	r3, r3
 801e934:	e1cc      	b.n	801ecd0 <EE_Init+0x458>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 801e936:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801e93a:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 801e93e:	4293      	cmp	r3, r2
 801e940:	d12a      	bne.n	801e998 <EE_Init+0x120>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 801e942:	489c      	ldr	r0, [pc, #624]	; (801ebb4 <EE_Init+0x33c>)
 801e944:	f000 f9d2 	bl	801ecec <EE_VerifyPageFullyErased>
 801e948:	4603      	mov	r3, r0
 801e94a:	2b00      	cmp	r3, #0
 801e94c:	d112      	bne.n	801e974 <EE_Init+0xfc>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 801e94e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801e952:	f107 0320 	add.w	r3, r7, #32
 801e956:	4611      	mov	r1, r2
 801e958:	4618      	mov	r0, r3
 801e95a:	f7eb fb79 	bl	800a050 <HAL_FLASHEx_Erase>
 801e95e:	4603      	mov	r3, r0
 801e960:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 801e964:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801e968:	2b00      	cmp	r3, #0
 801e96a:	d003      	beq.n	801e974 <EE_Init+0xfc>
          {
            return FlashStatus;
 801e96c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801e970:	b29b      	uxth	r3, r3
 801e972:	e1ad      	b.n	801ecd0 <EE_Init+0x458>
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 801e974:	463b      	mov	r3, r7
 801e976:	461a      	mov	r2, r3
 801e978:	498f      	ldr	r1, [pc, #572]	; (801ebb8 <EE_Init+0x340>)
 801e97a:	2001      	movs	r0, #1
 801e97c:	f7eb fa06 	bl	8009d8c <HAL_FLASH_Program>
 801e980:	4603      	mov	r3, r0
 801e982:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 801e986:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801e98a:	2b00      	cmp	r3, #0
 801e98c:	f000 8198 	beq.w	801ecc0 <EE_Init+0x448>
        {
          return FlashStatus;
 801e990:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801e994:	b29b      	uxth	r3, r3
 801e996:	e19b      	b.n	801ecd0 <EE_Init+0x458>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 801e998:	f000 fa16 	bl	801edc8 <EE_Format>
 801e99c:	4603      	mov	r3, r0
 801e99e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 801e9a2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801e9a6:	2b00      	cmp	r3, #0
 801e9a8:	f000 818a 	beq.w	801ecc0 <EE_Init+0x448>
        {
          return FlashStatus;
 801e9ac:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801e9b0:	b29b      	uxth	r3, r3
 801e9b2:	e18d      	b.n	801ecd0 <EE_Init+0x458>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 801e9b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801e9b8:	2b00      	cmp	r3, #0
 801e9ba:	d174      	bne.n	801eaa6 <EE_Init+0x22e>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 801e9bc:	2300      	movs	r3, #0
 801e9be:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 801e9c2:	e038      	b.n	801ea36 <EE_Init+0x1be>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 801e9c4:	4b7d      	ldr	r3, [pc, #500]	; (801ebbc <EE_Init+0x344>)
 801e9c6:	881b      	ldrh	r3, [r3, #0]
 801e9c8:	b29a      	uxth	r2, r3
 801e9ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801e9ce:	497c      	ldr	r1, [pc, #496]	; (801ebc0 <EE_Init+0x348>)
 801e9d0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801e9d4:	429a      	cmp	r2, r3
 801e9d6:	d103      	bne.n	801e9e0 <EE_Init+0x168>
          {
            x = VarIdx;
 801e9d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801e9dc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 801e9e0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801e9e4:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 801e9e8:	429a      	cmp	r2, r3
 801e9ea:	d01f      	beq.n	801ea2c <EE_Init+0x1b4>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 801e9ec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801e9f0:	4a73      	ldr	r2, [pc, #460]	; (801ebc0 <EE_Init+0x348>)
 801e9f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801e9f6:	4973      	ldr	r1, [pc, #460]	; (801ebc4 <EE_Init+0x34c>)
 801e9f8:	4618      	mov	r0, r3
 801e9fa:	f000 f99d 	bl	801ed38 <EE_ReadVariable>
 801e9fe:	4603      	mov	r3, r0
 801ea00:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 801ea02:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ea04:	2b01      	cmp	r3, #1
 801ea06:	d011      	beq.n	801ea2c <EE_Init+0x1b4>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 801ea08:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ea0c:	4a6c      	ldr	r2, [pc, #432]	; (801ebc0 <EE_Init+0x348>)
 801ea0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801ea12:	4a6c      	ldr	r2, [pc, #432]	; (801ebc4 <EE_Init+0x34c>)
 801ea14:	8812      	ldrh	r2, [r2, #0]
 801ea16:	4611      	mov	r1, r2
 801ea18:	4618      	mov	r0, r3
 801ea1a:	f000 fa7f 	bl	801ef1c <EE_VerifyPageFullWriteVariable>
 801ea1e:	4603      	mov	r3, r0
 801ea20:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 801ea22:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ea24:	2b00      	cmp	r3, #0
 801ea26:	d001      	beq.n	801ea2c <EE_Init+0x1b4>
              {
                return EepromStatus;
 801ea28:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ea2a:	e151      	b.n	801ecd0 <EE_Init+0x458>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 801ea2c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ea30:	3301      	adds	r3, #1
 801ea32:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 801ea36:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ea3a:	2b02      	cmp	r3, #2
 801ea3c:	d9c2      	bls.n	801e9c4 <EE_Init+0x14c>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 801ea3e:	463b      	mov	r3, r7
 801ea40:	461a      	mov	r2, r3
 801ea42:	495c      	ldr	r1, [pc, #368]	; (801ebb4 <EE_Init+0x33c>)
 801ea44:	2001      	movs	r0, #1
 801ea46:	f7eb f9a1 	bl	8009d8c <HAL_FLASH_Program>
 801ea4a:	4603      	mov	r3, r0
 801ea4c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
     
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 801ea50:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801ea54:	2b00      	cmp	r3, #0
 801ea56:	d003      	beq.n	801ea60 <EE_Init+0x1e8>
        {
          return FlashStatus;
 801ea58:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801ea5c:	b29b      	uxth	r3, r3
 801ea5e:	e137      	b.n	801ecd0 <EE_Init+0x458>
        }
        pEraseInit.Sector = PAGE1_ID;
 801ea60:	2307      	movs	r3, #7
 801ea62:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 801ea64:	2302      	movs	r3, #2
 801ea66:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 801ea68:	2301      	movs	r3, #1
 801ea6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 801ea6c:	2320      	movs	r3, #32
 801ea6e:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 801ea70:	4851      	ldr	r0, [pc, #324]	; (801ebb8 <EE_Init+0x340>)
 801ea72:	f000 f93b 	bl	801ecec <EE_VerifyPageFullyErased>
 801ea76:	4603      	mov	r3, r0
 801ea78:	2b00      	cmp	r3, #0
 801ea7a:	f040 8123 	bne.w	801ecc4 <EE_Init+0x44c>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 801ea7e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801ea82:	f107 0320 	add.w	r3, r7, #32
 801ea86:	4611      	mov	r1, r2
 801ea88:	4618      	mov	r0, r3
 801ea8a:	f7eb fae1 	bl	800a050 <HAL_FLASHEx_Erase>
 801ea8e:	4603      	mov	r3, r0
 801ea90:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 801ea94:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801ea98:	2b00      	cmp	r3, #0
 801ea9a:	f000 8113 	beq.w	801ecc4 <EE_Init+0x44c>
          {
            return FlashStatus;
 801ea9e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801eaa2:	b29b      	uxth	r3, r3
 801eaa4:	e114      	b.n	801ecd0 <EE_Init+0x458>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 801eaa6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801eaaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801eaae:	4293      	cmp	r3, r2
 801eab0:	d132      	bne.n	801eb18 <EE_Init+0x2a0>
      {
        pEraseInit.Sector = PAGE1_ID;
 801eab2:	2307      	movs	r3, #7
 801eab4:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_1 ;
 801eab6:	2301      	movs	r3, #1
 801eab8:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 801eaba:	2301      	movs	r3, #1
 801eabc:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 801eabe:	2320      	movs	r3, #32
 801eac0:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 801eac2:	483d      	ldr	r0, [pc, #244]	; (801ebb8 <EE_Init+0x340>)
 801eac4:	f000 f912 	bl	801ecec <EE_VerifyPageFullyErased>
 801eac8:	4603      	mov	r3, r0
 801eaca:	2b00      	cmp	r3, #0
 801eacc:	d112      	bne.n	801eaf4 <EE_Init+0x27c>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 801eace:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801ead2:	f107 0320 	add.w	r3, r7, #32
 801ead6:	4611      	mov	r1, r2
 801ead8:	4618      	mov	r0, r3
 801eada:	f7eb fab9 	bl	800a050 <HAL_FLASHEx_Erase>
 801eade:	4603      	mov	r3, r0
 801eae0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 801eae4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801eae8:	2b00      	cmp	r3, #0
 801eaea:	d003      	beq.n	801eaf4 <EE_Init+0x27c>
          {
            return FlashStatus;
 801eaec:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801eaf0:	b29b      	uxth	r3, r3
 801eaf2:	e0ed      	b.n	801ecd0 <EE_Init+0x458>
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 801eaf4:	463b      	mov	r3, r7
 801eaf6:	461a      	mov	r2, r3
 801eaf8:	492e      	ldr	r1, [pc, #184]	; (801ebb4 <EE_Init+0x33c>)
 801eafa:	2001      	movs	r0, #1
 801eafc:	f7eb f946 	bl	8009d8c <HAL_FLASH_Program>
 801eb00:	4603      	mov	r3, r0
 801eb02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 801eb06:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801eb0a:	2b00      	cmp	r3, #0
 801eb0c:	f000 80da 	beq.w	801ecc4 <EE_Init+0x44c>
        {
          return FlashStatus;
 801eb10:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801eb14:	b29b      	uxth	r3, r3
 801eb16:	e0db      	b.n	801ecd0 <EE_Init+0x458>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 801eb18:	f000 f956 	bl	801edc8 <EE_Format>
 801eb1c:	4603      	mov	r3, r0
 801eb1e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 801eb22:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801eb26:	2b00      	cmp	r3, #0
 801eb28:	f000 80cc 	beq.w	801ecc4 <EE_Init+0x44c>
        {
          return FlashStatus;
 801eb2c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801eb30:	b29b      	uxth	r3, r3
 801eb32:	e0cd      	b.n	801ecd0 <EE_Init+0x458>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 801eb34:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801eb38:	2b00      	cmp	r3, #0
 801eb3a:	d10d      	bne.n	801eb58 <EE_Init+0x2e0>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 801eb3c:	f000 f944 	bl	801edc8 <EE_Format>
 801eb40:	4603      	mov	r3, r0
 801eb42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 801eb46:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801eb4a:	2b00      	cmp	r3, #0
 801eb4c:	f000 80bc 	beq.w	801ecc8 <EE_Init+0x450>
        {
          return FlashStatus;
 801eb50:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801eb54:	b29b      	uxth	r3, r3
 801eb56:	e0bb      	b.n	801ecd0 <EE_Init+0x458>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 801eb58:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801eb5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801eb60:	4293      	cmp	r3, r2
 801eb62:	d122      	bne.n	801ebaa <EE_Init+0x332>
      {
        pEraseInit.Sector = PAGE1_ID;
 801eb64:	2307      	movs	r3, #7
 801eb66:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 801eb68:	2302      	movs	r3, #2
 801eb6a:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 801eb6c:	2301      	movs	r3, #1
 801eb6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 801eb70:	2320      	movs	r3, #32
 801eb72:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 801eb74:	4810      	ldr	r0, [pc, #64]	; (801ebb8 <EE_Init+0x340>)
 801eb76:	f000 f8b9 	bl	801ecec <EE_VerifyPageFullyErased>
 801eb7a:	4603      	mov	r3, r0
 801eb7c:	2b00      	cmp	r3, #0
 801eb7e:	f040 80a3 	bne.w	801ecc8 <EE_Init+0x450>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 801eb82:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801eb86:	f107 0320 	add.w	r3, r7, #32
 801eb8a:	4611      	mov	r1, r2
 801eb8c:	4618      	mov	r0, r3
 801eb8e:	f7eb fa5f 	bl	800a050 <HAL_FLASHEx_Erase>
 801eb92:	4603      	mov	r3, r0
 801eb94:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 801eb98:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801eb9c:	2b00      	cmp	r3, #0
 801eb9e:	f000 8093 	beq.w	801ecc8 <EE_Init+0x450>
          {
            return FlashStatus;
 801eba2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801eba6:	b29b      	uxth	r3, r3
 801eba8:	e092      	b.n	801ecd0 <EE_Init+0x458>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 801ebaa:	2300      	movs	r3, #0
 801ebac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 801ebb0:	e043      	b.n	801ec3a <EE_Init+0x3c2>
 801ebb2:	bf00      	nop
 801ebb4:	081c0000 	.word	0x081c0000
 801ebb8:	081e0000 	.word	0x081e0000
 801ebbc:	081c0006 	.word	0x081c0006
 801ebc0:	24000008 	.word	0x24000008
 801ebc4:	240048e8 	.word	0x240048e8
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 801ebc8:	4b43      	ldr	r3, [pc, #268]	; (801ecd8 <EE_Init+0x460>)
 801ebca:	881b      	ldrh	r3, [r3, #0]
 801ebcc:	b29a      	uxth	r2, r3
 801ebce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ebd2:	4942      	ldr	r1, [pc, #264]	; (801ecdc <EE_Init+0x464>)
 801ebd4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801ebd8:	429a      	cmp	r2, r3
 801ebda:	d103      	bne.n	801ebe4 <EE_Init+0x36c>
          {
            x = VarIdx;
 801ebdc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ebe0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 801ebe4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801ebe8:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 801ebec:	429a      	cmp	r2, r3
 801ebee:	d01f      	beq.n	801ec30 <EE_Init+0x3b8>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 801ebf0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ebf4:	4a39      	ldr	r2, [pc, #228]	; (801ecdc <EE_Init+0x464>)
 801ebf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801ebfa:	4939      	ldr	r1, [pc, #228]	; (801ece0 <EE_Init+0x468>)
 801ebfc:	4618      	mov	r0, r3
 801ebfe:	f000 f89b 	bl	801ed38 <EE_ReadVariable>
 801ec02:	4603      	mov	r3, r0
 801ec04:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 801ec06:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ec08:	2b01      	cmp	r3, #1
 801ec0a:	d011      	beq.n	801ec30 <EE_Init+0x3b8>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 801ec0c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ec10:	4a32      	ldr	r2, [pc, #200]	; (801ecdc <EE_Init+0x464>)
 801ec12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801ec16:	4a32      	ldr	r2, [pc, #200]	; (801ece0 <EE_Init+0x468>)
 801ec18:	8812      	ldrh	r2, [r2, #0]
 801ec1a:	4611      	mov	r1, r2
 801ec1c:	4618      	mov	r0, r3
 801ec1e:	f000 f97d 	bl	801ef1c <EE_VerifyPageFullWriteVariable>
 801ec22:	4603      	mov	r3, r0
 801ec24:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 801ec26:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ec28:	2b00      	cmp	r3, #0
 801ec2a:	d001      	beq.n	801ec30 <EE_Init+0x3b8>
              {
                return EepromStatus;
 801ec2c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ec2e:	e04f      	b.n	801ecd0 <EE_Init+0x458>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 801ec30:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ec34:	3301      	adds	r3, #1
 801ec36:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 801ec3a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ec3e:	2b02      	cmp	r3, #2
 801ec40:	d9c2      	bls.n	801ebc8 <EE_Init+0x350>
              }
            }
          }
        }
        /* Mark Page1 as valid */         
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 801ec42:	463b      	mov	r3, r7
 801ec44:	461a      	mov	r2, r3
 801ec46:	4927      	ldr	r1, [pc, #156]	; (801ece4 <EE_Init+0x46c>)
 801ec48:	2001      	movs	r0, #1
 801ec4a:	f7eb f89f 	bl	8009d8c <HAL_FLASH_Program>
 801ec4e:	4603      	mov	r3, r0
 801ec50:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 801ec54:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801ec58:	2b00      	cmp	r3, #0
 801ec5a:	d003      	beq.n	801ec64 <EE_Init+0x3ec>
        {
          return FlashStatus;
 801ec5c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801ec60:	b29b      	uxth	r3, r3
 801ec62:	e035      	b.n	801ecd0 <EE_Init+0x458>
        }
        pEraseInit.Sector = PAGE0_ID;
 801ec64:	2306      	movs	r3, #6
 801ec66:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 801ec68:	2302      	movs	r3, #2
 801ec6a:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 801ec6c:	2301      	movs	r3, #1
 801ec6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 801ec70:	2320      	movs	r3, #32
 801ec72:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 801ec74:	481c      	ldr	r0, [pc, #112]	; (801ece8 <EE_Init+0x470>)
 801ec76:	f000 f839 	bl	801ecec <EE_VerifyPageFullyErased>
 801ec7a:	4603      	mov	r3, r0
 801ec7c:	2b00      	cmp	r3, #0
 801ec7e:	d123      	bne.n	801ecc8 <EE_Init+0x450>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 801ec80:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801ec84:	f107 0320 	add.w	r3, r7, #32
 801ec88:	4611      	mov	r1, r2
 801ec8a:	4618      	mov	r0, r3
 801ec8c:	f7eb f9e0 	bl	800a050 <HAL_FLASHEx_Erase>
 801ec90:	4603      	mov	r3, r0
 801ec92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 801ec96:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801ec9a:	2b00      	cmp	r3, #0
 801ec9c:	d014      	beq.n	801ecc8 <EE_Init+0x450>
          {
            return FlashStatus;
 801ec9e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801eca2:	b29b      	uxth	r3, r3
 801eca4:	e014      	b.n	801ecd0 <EE_Init+0x458>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 801eca6:	f000 f88f 	bl	801edc8 <EE_Format>
 801ecaa:	4603      	mov	r3, r0
 801ecac:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 801ecb0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801ecb4:	2b00      	cmp	r3, #0
 801ecb6:	d009      	beq.n	801eccc <EE_Init+0x454>
      {
        return FlashStatus;
 801ecb8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801ecbc:	b29b      	uxth	r3, r3
 801ecbe:	e007      	b.n	801ecd0 <EE_Init+0x458>
      break;
 801ecc0:	bf00      	nop
 801ecc2:	e004      	b.n	801ecce <EE_Init+0x456>
      break;
 801ecc4:	bf00      	nop
 801ecc6:	e002      	b.n	801ecce <EE_Init+0x456>
      break;
 801ecc8:	bf00      	nop
 801ecca:	e000      	b.n	801ecce <EE_Init+0x456>
      }
      break;
 801eccc:	bf00      	nop
  }

  return HAL_OK;
 801ecce:	2300      	movs	r3, #0
}
 801ecd0:	4618      	mov	r0, r3
 801ecd2:	3748      	adds	r7, #72	; 0x48
 801ecd4:	46bd      	mov	sp, r7
 801ecd6:	bd80      	pop	{r7, pc}
 801ecd8:	081e0006 	.word	0x081e0006
 801ecdc:	24000008 	.word	0x24000008
 801ece0:	240048e8 	.word	0x240048e8
 801ece4:	081e0000 	.word	0x081e0000
 801ece8:	081c0000 	.word	0x081c0000

0801ecec <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 801ecec:	b480      	push	{r7}
 801ecee:	b085      	sub	sp, #20
 801ecf0:	af00      	add	r7, sp, #0
 801ecf2:	6078      	str	r0, [r7, #4]
  uint32_t ReadStatus = 1;
 801ecf4:	2301      	movs	r3, #1
 801ecf6:	60fb      	str	r3, [r7, #12]
  uint16_t AddressValue = 0x5555;
 801ecf8:	f245 5355 	movw	r3, #21845	; 0x5555
 801ecfc:	817b      	strh	r3, [r7, #10]
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 801ecfe:	e00d      	b.n	801ed1c <EE_VerifyPageFullyErased+0x30>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 801ed00:	687b      	ldr	r3, [r7, #4]
 801ed02:	881b      	ldrh	r3, [r3, #0]
 801ed04:	817b      	strh	r3, [r7, #10]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 801ed06:	897b      	ldrh	r3, [r7, #10]
 801ed08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ed0c:	4293      	cmp	r3, r2
 801ed0e:	d002      	beq.n	801ed16 <EE_VerifyPageFullyErased+0x2a>
    {
      
      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 801ed10:	2300      	movs	r3, #0
 801ed12:	60fb      	str	r3, [r7, #12]

      break;
 801ed14:	e006      	b.n	801ed24 <EE_VerifyPageFullyErased+0x38>
    }
    /* Next address location */
    Address = Address + 4;
 801ed16:	687b      	ldr	r3, [r7, #4]
 801ed18:	3304      	adds	r3, #4
 801ed1a:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 801ed1c:	687b      	ldr	r3, [r7, #4]
 801ed1e:	4a05      	ldr	r2, [pc, #20]	; (801ed34 <EE_VerifyPageFullyErased+0x48>)
 801ed20:	4293      	cmp	r3, r2
 801ed22:	d9ed      	bls.n	801ed00 <EE_VerifyPageFullyErased+0x14>
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 801ed24:	68fb      	ldr	r3, [r7, #12]
 801ed26:	b29b      	uxth	r3, r3
}
 801ed28:	4618      	mov	r0, r3
 801ed2a:	3714      	adds	r7, #20
 801ed2c:	46bd      	mov	sp, r7
 801ed2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed32:	4770      	bx	lr
 801ed34:	081dffff 	.word	0x081dffff

0801ed38 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 801ed38:	b580      	push	{r7, lr}
 801ed3a:	b086      	sub	sp, #24
 801ed3c:	af00      	add	r7, sp, #0
 801ed3e:	4603      	mov	r3, r0
 801ed40:	6039      	str	r1, [r7, #0]
 801ed42:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 801ed44:	2300      	movs	r3, #0
 801ed46:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 801ed48:	f245 5355 	movw	r3, #21845	; 0x5555
 801ed4c:	81bb      	strh	r3, [r7, #12]
 801ed4e:	2301      	movs	r3, #1
 801ed50:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 801ed52:	4b1b      	ldr	r3, [pc, #108]	; (801edc0 <EE_ReadVariable+0x88>)
 801ed54:	613b      	str	r3, [r7, #16]
 801ed56:	4b1a      	ldr	r3, [pc, #104]	; (801edc0 <EE_ReadVariable+0x88>)
 801ed58:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 801ed5a:	2000      	movs	r0, #0
 801ed5c:	f000 f898 	bl	801ee90 <EE_FindValidPage>
 801ed60:	4603      	mov	r3, r0
 801ed62:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 801ed64:	89fb      	ldrh	r3, [r7, #14]
 801ed66:	2bab      	cmp	r3, #171	; 0xab
 801ed68:	d101      	bne.n	801ed6e <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 801ed6a:	23ab      	movs	r3, #171	; 0xab
 801ed6c:	e024      	b.n	801edb8 <EE_ReadVariable+0x80>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 801ed6e:	89fb      	ldrh	r3, [r7, #14]
 801ed70:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 801ed74:	045b      	lsls	r3, r3, #17
 801ed76:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 32) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 801ed78:	89fb      	ldrh	r3, [r7, #14]
 801ed7a:	3301      	adds	r3, #1
 801ed7c:	045a      	lsls	r2, r3, #17
 801ed7e:	4b11      	ldr	r3, [pc, #68]	; (801edc4 <EE_ReadVariable+0x8c>)
 801ed80:	4413      	add	r3, r2
 801ed82:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 32))
 801ed84:	e012      	b.n	801edac <EE_ReadVariable+0x74>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 801ed86:	693b      	ldr	r3, [r7, #16]
 801ed88:	881b      	ldrh	r3, [r3, #0]
 801ed8a:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 801ed8c:	89ba      	ldrh	r2, [r7, #12]
 801ed8e:	88fb      	ldrh	r3, [r7, #6]
 801ed90:	429a      	cmp	r2, r3
 801ed92:	d108      	bne.n	801eda6 <EE_ReadVariable+0x6e>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 32));
 801ed94:	693b      	ldr	r3, [r7, #16]
 801ed96:	3b20      	subs	r3, #32
 801ed98:	881b      	ldrh	r3, [r3, #0]
 801ed9a:	b29a      	uxth	r2, r3
 801ed9c:	683b      	ldr	r3, [r7, #0]
 801ed9e:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 801eda0:	2300      	movs	r3, #0
 801eda2:	82fb      	strh	r3, [r7, #22]

      break;
 801eda4:	e007      	b.n	801edb6 <EE_ReadVariable+0x7e>
    }
    else
    {
      /* Next address location */
      Address = Address - 32;
 801eda6:	693b      	ldr	r3, [r7, #16]
 801eda8:	3b20      	subs	r3, #32
 801edaa:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 32))
 801edac:	68bb      	ldr	r3, [r7, #8]
 801edae:	3320      	adds	r3, #32
 801edb0:	693a      	ldr	r2, [r7, #16]
 801edb2:	429a      	cmp	r2, r3
 801edb4:	d8e7      	bhi.n	801ed86 <EE_ReadVariable+0x4e>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 801edb6:	8afb      	ldrh	r3, [r7, #22]
}
 801edb8:	4618      	mov	r0, r3
 801edba:	3718      	adds	r7, #24
 801edbc:	46bd      	mov	sp, r7
 801edbe:	bd80      	pop	{r7, pc}
 801edc0:	081c0000 	.word	0x081c0000
 801edc4:	081bffe0 	.word	0x081bffe0

0801edc8 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 801edc8:	b580      	push	{r7, lr}
 801edca:	b090      	sub	sp, #64	; 0x40
 801edcc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 801edce:	2300      	movs	r3, #0
 801edd0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t SectorError = 0;
 801edd4:	2300      	movs	r3, #0
 801edd6:	63bb      	str	r3, [r7, #56]	; 0x38
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 801edd8:	1d3b      	adds	r3, r7, #4
 801edda:	2220      	movs	r2, #32
 801eddc:	2100      	movs	r1, #0
 801edde:	4618      	mov	r0, r3
 801ede0:	f001 f94a 	bl	8020078 <memset>
  
  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS; 
 801ede4:	2300      	movs	r3, #0
 801ede6:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Banks = FLASH_BANK_2 ;
 801ede8:	2302      	movs	r3, #2
 801edea:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.Sector = PAGE0_ID;
 801edec:	2306      	movs	r3, #6
 801edee:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.NbSectors = 1;
 801edf0:	2301      	movs	r3, #1
 801edf2:	633b      	str	r3, [r7, #48]	; 0x30
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 801edf4:	2320      	movs	r3, #32
 801edf6:	637b      	str	r3, [r7, #52]	; 0x34
  
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 801edf8:	4823      	ldr	r0, [pc, #140]	; (801ee88 <EE_Format+0xc0>)
 801edfa:	f7ff ff77 	bl	801ecec <EE_VerifyPageFullyErased>
 801edfe:	4603      	mov	r3, r0
 801ee00:	2b00      	cmp	r3, #0
 801ee02:	d111      	bne.n	801ee28 <EE_Format+0x60>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 801ee04:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801ee08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ee0c:	4611      	mov	r1, r2
 801ee0e:	4618      	mov	r0, r3
 801ee10:	f7eb f91e 	bl	800a050 <HAL_FLASHEx_Erase>
 801ee14:	4603      	mov	r3, r0
 801ee16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 801ee1a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801ee1e:	2b00      	cmp	r3, #0
 801ee20:	d002      	beq.n	801ee28 <EE_Format+0x60>
    {
      return FlashStatus;
 801ee22:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801ee26:	e02a      	b.n	801ee7e <EE_Format+0xb6>
    }
  }
  
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */  
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS,((uint32_t)valid));
 801ee28:	1d3b      	adds	r3, r7, #4
 801ee2a:	461a      	mov	r2, r3
 801ee2c:	4916      	ldr	r1, [pc, #88]	; (801ee88 <EE_Format+0xc0>)
 801ee2e:	2001      	movs	r0, #1
 801ee30:	f7ea ffac 	bl	8009d8c <HAL_FLASH_Program>
 801ee34:	4603      	mov	r3, r0
 801ee36:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 801ee3a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801ee3e:	2b00      	cmp	r3, #0
 801ee40:	d002      	beq.n	801ee48 <EE_Format+0x80>
  {
    return FlashStatus;
 801ee42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801ee46:	e01a      	b.n	801ee7e <EE_Format+0xb6>
  }

  pEraseInit.Sector = PAGE1_ID;
 801ee48:	2307      	movs	r3, #7
 801ee4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 801ee4c:	480f      	ldr	r0, [pc, #60]	; (801ee8c <EE_Format+0xc4>)
 801ee4e:	f7ff ff4d 	bl	801ecec <EE_VerifyPageFullyErased>
 801ee52:	4603      	mov	r3, r0
 801ee54:	2b00      	cmp	r3, #0
 801ee56:	d111      	bne.n	801ee7c <EE_Format+0xb4>
  {  
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 801ee58:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801ee5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ee60:	4611      	mov	r1, r2
 801ee62:	4618      	mov	r0, r3
 801ee64:	f7eb f8f4 	bl	800a050 <HAL_FLASHEx_Erase>
 801ee68:	4603      	mov	r3, r0
 801ee6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 801ee6e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801ee72:	2b00      	cmp	r3, #0
 801ee74:	d002      	beq.n	801ee7c <EE_Format+0xb4>
    {
      return FlashStatus;
 801ee76:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801ee7a:	e000      	b.n	801ee7e <EE_Format+0xb6>
    }
  }
  
  return HAL_OK;
 801ee7c:	2300      	movs	r3, #0
}
 801ee7e:	4618      	mov	r0, r3
 801ee80:	3740      	adds	r7, #64	; 0x40
 801ee82:	46bd      	mov	sp, r7
 801ee84:	bd80      	pop	{r7, pc}
 801ee86:	bf00      	nop
 801ee88:	081c0000 	.word	0x081c0000
 801ee8c:	081e0000 	.word	0x081e0000

0801ee90 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 801ee90:	b480      	push	{r7}
 801ee92:	b085      	sub	sp, #20
 801ee94:	af00      	add	r7, sp, #0
 801ee96:	4603      	mov	r3, r0
 801ee98:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 801ee9a:	2306      	movs	r3, #6
 801ee9c:	81fb      	strh	r3, [r7, #14]
 801ee9e:	2306      	movs	r3, #6
 801eea0:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 801eea2:	4b1c      	ldr	r3, [pc, #112]	; (801ef14 <EE_FindValidPage+0x84>)
 801eea4:	881b      	ldrh	r3, [r3, #0]
 801eea6:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 801eea8:	4b1b      	ldr	r3, [pc, #108]	; (801ef18 <EE_FindValidPage+0x88>)
 801eeaa:	881b      	ldrh	r3, [r3, #0]
 801eeac:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 801eeae:	79fb      	ldrb	r3, [r7, #7]
 801eeb0:	2b00      	cmp	r3, #0
 801eeb2:	d01b      	beq.n	801eeec <EE_FindValidPage+0x5c>
 801eeb4:	2b01      	cmp	r3, #1
 801eeb6:	d125      	bne.n	801ef04 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 801eeb8:	89bb      	ldrh	r3, [r7, #12]
 801eeba:	2b00      	cmp	r3, #0
 801eebc:	d108      	bne.n	801eed0 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 801eebe:	89fb      	ldrh	r3, [r7, #14]
 801eec0:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 801eec4:	4293      	cmp	r3, r2
 801eec6:	d101      	bne.n	801eecc <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 801eec8:	2300      	movs	r3, #0
 801eeca:	e01c      	b.n	801ef06 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 801eecc:	2301      	movs	r3, #1
 801eece:	e01a      	b.n	801ef06 <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 801eed0:	89fb      	ldrh	r3, [r7, #14]
 801eed2:	2b00      	cmp	r3, #0
 801eed4:	d108      	bne.n	801eee8 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 801eed6:	89bb      	ldrh	r3, [r7, #12]
 801eed8:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 801eedc:	4293      	cmp	r3, r2
 801eede:	d101      	bne.n	801eee4 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 801eee0:	2301      	movs	r3, #1
 801eee2:	e010      	b.n	801ef06 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 801eee4:	2300      	movs	r3, #0
 801eee6:	e00e      	b.n	801ef06 <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 801eee8:	23ab      	movs	r3, #171	; 0xab
 801eeea:	e00c      	b.n	801ef06 <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 801eeec:	89fb      	ldrh	r3, [r7, #14]
 801eeee:	2b00      	cmp	r3, #0
 801eef0:	d101      	bne.n	801eef6 <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 801eef2:	2300      	movs	r3, #0
 801eef4:	e007      	b.n	801ef06 <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 801eef6:	89bb      	ldrh	r3, [r7, #12]
 801eef8:	2b00      	cmp	r3, #0
 801eefa:	d101      	bne.n	801ef00 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 801eefc:	2301      	movs	r3, #1
 801eefe:	e002      	b.n	801ef06 <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 801ef00:	23ab      	movs	r3, #171	; 0xab
 801ef02:	e000      	b.n	801ef06 <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 801ef04:	2300      	movs	r3, #0
  }
}
 801ef06:	4618      	mov	r0, r3
 801ef08:	3714      	adds	r7, #20
 801ef0a:	46bd      	mov	sp, r7
 801ef0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef10:	4770      	bx	lr
 801ef12:	bf00      	nop
 801ef14:	081c0000 	.word	0x081c0000
 801ef18:	081e0000 	.word	0x081e0000

0801ef1c <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 801ef1c:	b580      	push	{r7, lr}
 801ef1e:	b096      	sub	sp, #88	; 0x58
 801ef20:	af00      	add	r7, sp, #0
 801ef22:	4603      	mov	r3, r0
 801ef24:	460a      	mov	r2, r1
 801ef26:	80fb      	strh	r3, [r7, #6]
 801ef28:	4613      	mov	r3, r2
 801ef2a:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 801ef2c:	2300      	movs	r3, #0
 801ef2e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  uint16_t ValidPage = PAGE0;
 801ef32:	2300      	movs	r3, #0
 801ef34:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 801ef38:	4b30      	ldr	r3, [pc, #192]	; (801effc <EE_VerifyPageFullWriteVariable+0xe0>)
 801ef3a:	657b      	str	r3, [r7, #84]	; 0x54
 801ef3c:	4b30      	ldr	r3, [pc, #192]	; (801f000 <EE_VerifyPageFullWriteVariable+0xe4>)
 801ef3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 
  uint32_t data32[8] = {Data};
 801ef40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801ef44:	2220      	movs	r2, #32
 801ef46:	2100      	movs	r1, #0
 801ef48:	4618      	mov	r0, r3
 801ef4a:	f001 f895 	bl	8020078 <memset>
 801ef4e:	88bb      	ldrh	r3, [r7, #4]
 801ef50:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t VirtAddress1[8] = {VirtAddress};
 801ef52:	f107 030c 	add.w	r3, r7, #12
 801ef56:	2220      	movs	r2, #32
 801ef58:	2100      	movs	r1, #0
 801ef5a:	4618      	mov	r0, r3
 801ef5c:	f001 f88c 	bl	8020078 <memset>
 801ef60:	88fb      	ldrh	r3, [r7, #6]
 801ef62:	60fb      	str	r3, [r7, #12]
  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 801ef64:	2001      	movs	r0, #1
 801ef66:	f7ff ff93 	bl	801ee90 <EE_FindValidPage>
 801ef6a:	4603      	mov	r3, r0
 801ef6c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
  
  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 801ef70:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801ef74:	2bab      	cmp	r3, #171	; 0xab
 801ef76:	d101      	bne.n	801ef7c <EE_VerifyPageFullWriteVariable+0x60>
  {
    return  NO_VALID_PAGE;
 801ef78:	23ab      	movs	r3, #171	; 0xab
 801ef7a:	e03b      	b.n	801eff4 <EE_VerifyPageFullWriteVariable+0xd8>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 801ef7c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801ef80:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 801ef84:	045b      	lsls	r3, r3, #17
 801ef86:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 801ef88:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801ef8c:	3301      	adds	r3, #1
 801ef8e:	045a      	lsls	r2, r3, #17
 801ef90:	4b1c      	ldr	r3, [pc, #112]	; (801f004 <EE_VerifyPageFullWriteVariable+0xe8>)
 801ef92:	4413      	add	r3, r2
 801ef94:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 801ef96:	e028      	b.n	801efea <EE_VerifyPageFullWriteVariable+0xce>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF) 
 801ef98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ef9a:	681b      	ldr	r3, [r3, #0]
 801ef9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801efa0:	d120      	bne.n	801efe4 <EE_VerifyPageFullWriteVariable+0xc8>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t)data32));
 801efa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801efa6:	461a      	mov	r2, r3
 801efa8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801efaa:	2001      	movs	r0, #1
 801efac:	f7ea feee 	bl	8009d8c <HAL_FLASH_Program>
 801efb0:	4603      	mov	r3, r0
 801efb2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
   
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 801efb6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801efba:	2b00      	cmp	r3, #0
 801efbc:	d003      	beq.n	801efc6 <EE_VerifyPageFullWriteVariable+0xaa>
      {
        return FlashStatus;
 801efbe:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801efc2:	b29b      	uxth	r3, r3
 801efc4:	e016      	b.n	801eff4 <EE_VerifyPageFullWriteVariable+0xd8>
      }
      /* Set variable virtual address */
     FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address + 32, ((uint32_t)VirtAddress1));
 801efc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801efc8:	3320      	adds	r3, #32
 801efca:	f107 020c 	add.w	r2, r7, #12
 801efce:	4619      	mov	r1, r3
 801efd0:	2001      	movs	r0, #1
 801efd2:	f7ea fedb 	bl	8009d8c <HAL_FLASH_Program>
 801efd6:	4603      	mov	r3, r0
 801efd8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* Return program operation status */
     return FlashStatus;
 801efdc:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801efe0:	b29b      	uxth	r3, r3
 801efe2:	e007      	b.n	801eff4 <EE_VerifyPageFullWriteVariable+0xd8>
    }
    else
    {
      /* Next address location */
      Address = Address + 64; 
 801efe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801efe6:	3340      	adds	r3, #64	; 0x40
 801efe8:	657b      	str	r3, [r7, #84]	; 0x54
  while (Address < PageEndAddress)
 801efea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801efec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801efee:	429a      	cmp	r2, r3
 801eff0:	d3d2      	bcc.n	801ef98 <EE_VerifyPageFullWriteVariable+0x7c>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 801eff2:	2380      	movs	r3, #128	; 0x80
}
 801eff4:	4618      	mov	r0, r3
 801eff6:	3758      	adds	r7, #88	; 0x58
 801eff8:	46bd      	mov	sp, r7
 801effa:	bd80      	pop	{r7, pc}
 801effc:	081c0000 	.word	0x081c0000
 801f000:	081e0000 	.word	0x081e0000
 801f004:	081bffff 	.word	0x081bffff

0801f008 <icm20602_write>:

/* Private user code ---------------------------------------------------------*/

//Writes a register byte to the driver
uint8_t icm20602_write(uint8_t reg, uint8_t *data, uint16_t len)
{
 801f008:	b580      	push	{r7, lr}
 801f00a:	b084      	sub	sp, #16
 801f00c:	af00      	add	r7, sp, #0
 801f00e:	4603      	mov	r3, r0
 801f010:	6039      	str	r1, [r7, #0]
 801f012:	71fb      	strb	r3, [r7, #7]
 801f014:	4613      	mov	r3, r2
 801f016:	80bb      	strh	r3, [r7, #4]
	int rv = 0;
 801f018:	2300      	movs	r3, #0
 801f01a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(MEMS_CS_GPIO_Port, MEMS_CS_Pin, GPIO_PIN_RESET);
 801f01c:	2200      	movs	r2, #0
 801f01e:	f44f 7100 	mov.w	r1, #512	; 0x200
 801f022:	4819      	ldr	r0, [pc, #100]	; (801f088 <icm20602_write+0x80>)
 801f024:	f7eb fb36 	bl	800a694 <HAL_GPIO_WritePin>
	while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 801f028:	bf00      	nop
 801f02a:	4818      	ldr	r0, [pc, #96]	; (801f08c <icm20602_write+0x84>)
 801f02c:	f7f0 fb56 	bl	800f6dc <HAL_SPI_GetState>
 801f030:	4603      	mov	r3, r0
 801f032:	2b01      	cmp	r3, #1
 801f034:	d1f9      	bne.n	801f02a <icm20602_write+0x22>
	rv = HAL_SPI_Transmit(&hspi2, &reg, 1, 1000);
 801f036:	1df9      	adds	r1, r7, #7
 801f038:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801f03c:	2201      	movs	r2, #1
 801f03e:	4813      	ldr	r0, [pc, #76]	; (801f08c <icm20602_write+0x84>)
 801f040:	f7ef fc7c 	bl	800e93c <HAL_SPI_Transmit>
 801f044:	4603      	mov	r3, r0
 801f046:	60fb      	str	r3, [r7, #12]
	while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 801f048:	bf00      	nop
 801f04a:	4810      	ldr	r0, [pc, #64]	; (801f08c <icm20602_write+0x84>)
 801f04c:	f7f0 fb46 	bl	800f6dc <HAL_SPI_GetState>
 801f050:	4603      	mov	r3, r0
 801f052:	2b01      	cmp	r3, #1
 801f054:	d1f9      	bne.n	801f04a <icm20602_write+0x42>
	rv += HAL_SPI_Transmit(&hspi2, data, len, 1000);
 801f056:	88ba      	ldrh	r2, [r7, #4]
 801f058:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801f05c:	6839      	ldr	r1, [r7, #0]
 801f05e:	480b      	ldr	r0, [pc, #44]	; (801f08c <icm20602_write+0x84>)
 801f060:	f7ef fc6c 	bl	800e93c <HAL_SPI_Transmit>
 801f064:	4603      	mov	r3, r0
 801f066:	461a      	mov	r2, r3
 801f068:	68fb      	ldr	r3, [r7, #12]
 801f06a:	4413      	add	r3, r2
 801f06c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(MEMS_CS_GPIO_Port, MEMS_CS_Pin, GPIO_PIN_SET);
 801f06e:	2201      	movs	r2, #1
 801f070:	f44f 7100 	mov.w	r1, #512	; 0x200
 801f074:	4804      	ldr	r0, [pc, #16]	; (801f088 <icm20602_write+0x80>)
 801f076:	f7eb fb0d 	bl	800a694 <HAL_GPIO_WritePin>
	return rv;
 801f07a:	68fb      	ldr	r3, [r7, #12]
 801f07c:	b2db      	uxtb	r3, r3
}
 801f07e:	4618      	mov	r0, r3
 801f080:	3710      	adds	r7, #16
 801f082:	46bd      	mov	sp, r7
 801f084:	bd80      	pop	{r7, pc}
 801f086:	bf00      	nop
 801f088:	58020400 	.word	0x58020400
 801f08c:	24004f1c 	.word	0x24004f1c

0801f090 <icm20602_read>:

//Read a register byte to the driver
uint8_t icm20602_read(uint8_t reg, uint8_t *data, uint16_t len)
{
 801f090:	b580      	push	{r7, lr}
 801f092:	b084      	sub	sp, #16
 801f094:	af00      	add	r7, sp, #0
 801f096:	4603      	mov	r3, r0
 801f098:	6039      	str	r1, [r7, #0]
 801f09a:	71fb      	strb	r3, [r7, #7]
 801f09c:	4613      	mov	r3, r2
 801f09e:	80bb      	strh	r3, [r7, #4]
	int rv = 0;
 801f0a0:	2300      	movs	r3, #0
 801f0a2:	60fb      	str	r3, [r7, #12]
	reg |= 0b10000000;
 801f0a4:	79fb      	ldrb	r3, [r7, #7]
 801f0a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801f0aa:	b2db      	uxtb	r3, r3
 801f0ac:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(MEMS_CS_GPIO_Port, MEMS_CS_Pin, GPIO_PIN_RESET);
 801f0ae:	2200      	movs	r2, #0
 801f0b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 801f0b4:	4818      	ldr	r0, [pc, #96]	; (801f118 <icm20602_read+0x88>)
 801f0b6:	f7eb faed 	bl	800a694 <HAL_GPIO_WritePin>
	while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 801f0ba:	bf00      	nop
 801f0bc:	4817      	ldr	r0, [pc, #92]	; (801f11c <icm20602_read+0x8c>)
 801f0be:	f7f0 fb0d 	bl	800f6dc <HAL_SPI_GetState>
 801f0c2:	4603      	mov	r3, r0
 801f0c4:	2b01      	cmp	r3, #1
 801f0c6:	d1f9      	bne.n	801f0bc <icm20602_read+0x2c>
	rv = HAL_SPI_Transmit(&hspi2, &reg, 1, 1000);
 801f0c8:	1df9      	adds	r1, r7, #7
 801f0ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801f0ce:	2201      	movs	r2, #1
 801f0d0:	4812      	ldr	r0, [pc, #72]	; (801f11c <icm20602_read+0x8c>)
 801f0d2:	f7ef fc33 	bl	800e93c <HAL_SPI_Transmit>
 801f0d6:	4603      	mov	r3, r0
 801f0d8:	60fb      	str	r3, [r7, #12]
	while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 801f0da:	bf00      	nop
 801f0dc:	480f      	ldr	r0, [pc, #60]	; (801f11c <icm20602_read+0x8c>)
 801f0de:	f7f0 fafd 	bl	800f6dc <HAL_SPI_GetState>
 801f0e2:	4603      	mov	r3, r0
 801f0e4:	2b01      	cmp	r3, #1
 801f0e6:	d1f9      	bne.n	801f0dc <icm20602_read+0x4c>
	rv += HAL_SPI_Receive(&hspi2, data, len, 1000);
 801f0e8:	88ba      	ldrh	r2, [r7, #4]
 801f0ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801f0ee:	6839      	ldr	r1, [r7, #0]
 801f0f0:	480a      	ldr	r0, [pc, #40]	; (801f11c <icm20602_read+0x8c>)
 801f0f2:	f7ef fe15 	bl	800ed20 <HAL_SPI_Receive>
 801f0f6:	4603      	mov	r3, r0
 801f0f8:	461a      	mov	r2, r3
 801f0fa:	68fb      	ldr	r3, [r7, #12]
 801f0fc:	4413      	add	r3, r2
 801f0fe:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(MEMS_CS_GPIO_Port, MEMS_CS_Pin, GPIO_PIN_SET);
 801f100:	2201      	movs	r2, #1
 801f102:	f44f 7100 	mov.w	r1, #512	; 0x200
 801f106:	4804      	ldr	r0, [pc, #16]	; (801f118 <icm20602_read+0x88>)
 801f108:	f7eb fac4 	bl	800a694 <HAL_GPIO_WritePin>
	return rv;
 801f10c:	68fb      	ldr	r3, [r7, #12]
 801f10e:	b2db      	uxtb	r3, r3
}
 801f110:	4618      	mov	r0, r3
 801f112:	3710      	adds	r7, #16
 801f114:	46bd      	mov	sp, r7
 801f116:	bd80      	pop	{r7, pc}
 801f118:	58020400 	.word	0x58020400
 801f11c:	24004f1c 	.word	0x24004f1c

0801f120 <icm20602_init>:
}

/***** Global Functions *****/

int8_t icm20602_init(void)
{
 801f120:	b580      	push	{r7, lr}
 801f122:	b082      	sub	sp, #8
 801f124:	af00      	add	r7, sp, #0
	uint8_t tmp = 0;
 801f126:	2300      	movs	r3, #0
 801f128:	71bb      	strb	r3, [r7, #6]
	int8_t r = 0;
 801f12a:	2300      	movs	r3, #0
 801f12c:	71fb      	strb	r3, [r7, #7]
	//  4. disable fifo
	//  5. configure chip
	//  6. enable accelerometer and gyroscope

	// full reset of chip
	tmp = 0x80;
 801f12e:	2380      	movs	r3, #128	; 0x80
 801f130:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_PWR_MGMT_1, &tmp, 1);
 801f132:	1dbb      	adds	r3, r7, #6
 801f134:	2201      	movs	r2, #1
 801f136:	4619      	mov	r1, r3
 801f138:	206b      	movs	r0, #107	; 0x6b
 801f13a:	f7ff ff65 	bl	801f008 <icm20602_write>
 801f13e:	4603      	mov	r3, r0
 801f140:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801f142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f146:	2b00      	cmp	r3, #0
 801f148:	f040 818e 	bne.w	801f468 <icm20602_init+0x348>

	HAL_Delay(1000);
 801f14c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801f150:	f7e4 ffd8 	bl	8004104 <HAL_Delay>

	// verify we are able to read from the chip
	r = icm20602_read(REG_WHO_AM_I, &tmp, 1);
 801f154:	1dbb      	adds	r3, r7, #6
 801f156:	2201      	movs	r2, #1
 801f158:	4619      	mov	r1, r3
 801f15a:	2075      	movs	r0, #117	; 0x75
 801f15c:	f7ff ff98 	bl	801f090 <icm20602_read>
 801f160:	4603      	mov	r3, r0
 801f162:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801f164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f168:	2b00      	cmp	r3, #0
 801f16a:	f040 817f 	bne.w	801f46c <icm20602_init+0x34c>
	if (REG_WHO_AM_I_CONST != tmp) {
 801f16e:	79bb      	ldrb	r3, [r7, #6]
 801f170:	2b12      	cmp	r3, #18
 801f172:	d006      	beq.n	801f182 <icm20602_init+0x62>
		r = -1;
 801f174:	23ff      	movs	r3, #255	; 0xff
 801f176:	71fb      	strb	r3, [r7, #7]
		ON_ERROR_GOTO((0 == r), return_err);
 801f178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f17c:	2b00      	cmp	r3, #0
 801f17e:	f040 8177 	bne.w	801f470 <icm20602_init+0x350>
	}

	/*Reset path*/
	tmp = 0x03;
 801f182:	2303      	movs	r3, #3
 801f184:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_SIGNAL_PATH_RESET, &tmp, 1);
 801f186:	1dbb      	adds	r3, r7, #6
 801f188:	2201      	movs	r2, #1
 801f18a:	4619      	mov	r1, r3
 801f18c:	2068      	movs	r0, #104	; 0x68
 801f18e:	f7ff ff3b 	bl	801f008 <icm20602_write>
 801f192:	4603      	mov	r3, r0
 801f194:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801f196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f19a:	2b00      	cmp	r3, #0
 801f19c:	f040 816a 	bne.w	801f474 <icm20602_init+0x354>

	// set clock to internal PLL
	tmp = 0x01;
 801f1a0:	2301      	movs	r3, #1
 801f1a2:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_PWR_MGMT_1, &tmp, 1);
 801f1a4:	1dbb      	adds	r3, r7, #6
 801f1a6:	2201      	movs	r2, #1
 801f1a8:	4619      	mov	r1, r3
 801f1aa:	206b      	movs	r0, #107	; 0x6b
 801f1ac:	f7ff ff2c 	bl	801f008 <icm20602_write>
 801f1b0:	4603      	mov	r3, r0
 801f1b2:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801f1b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f1b8:	2b00      	cmp	r3, #0
 801f1ba:	f040 815d 	bne.w	801f478 <icm20602_init+0x358>

	// place accel and gyro on standby
	tmp = 0x3F;
 801f1be:	233f      	movs	r3, #63	; 0x3f
 801f1c0:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_PWR_MGMT_2, &tmp, 1);
 801f1c2:	1dbb      	adds	r3, r7, #6
 801f1c4:	2201      	movs	r2, #1
 801f1c6:	4619      	mov	r1, r3
 801f1c8:	206c      	movs	r0, #108	; 0x6c
 801f1ca:	f7ff ff1d 	bl	801f008 <icm20602_write>
 801f1ce:	4603      	mov	r3, r0
 801f1d0:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801f1d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f1d6:	2b00      	cmp	r3, #0
 801f1d8:	f040 8150 	bne.w	801f47c <icm20602_init+0x35c>

	// disable fifo
	tmp = 0x01;
 801f1dc:	2301      	movs	r3, #1
 801f1de:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_USER_CTRL, &tmp, 1);
 801f1e0:	1dbb      	adds	r3, r7, #6
 801f1e2:	2201      	movs	r2, #1
 801f1e4:	4619      	mov	r1, r3
 801f1e6:	206a      	movs	r0, #106	; 0x6a
 801f1e8:	f7ff ff0e 	bl	801f008 <icm20602_write>
 801f1ec:	4603      	mov	r3, r0
 801f1ee:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801f1f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f1f4:	2b00      	cmp	r3, #0
 801f1f6:	f040 8143 	bne.w	801f480 <icm20602_init+0x360>

	// disable chip I2C communications
	tmp = 0x40;
 801f1fa:	2340      	movs	r3, #64	; 0x40
 801f1fc:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_I2C_IF, &tmp, 1);
 801f1fe:	1dbb      	adds	r3, r7, #6
 801f200:	2201      	movs	r2, #1
 801f202:	4619      	mov	r1, r3
 801f204:	2070      	movs	r0, #112	; 0x70
 801f206:	f7ff feff 	bl	801f008 <icm20602_write>
 801f20a:	4603      	mov	r3, r0
 801f20c:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801f20e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f212:	2b00      	cmp	r3, #0
 801f214:	f040 8136 	bne.w	801f484 <icm20602_init+0x364>

	if (dev.use_accel) {
 801f218:	4ba7      	ldr	r3, [pc, #668]	; (801f4b8 <icm20602_init+0x398>)
 801f21a:	781b      	ldrb	r3, [r3, #0]
 801f21c:	2b00      	cmp	r3, #0
 801f21e:	d034      	beq.n	801f28a <icm20602_init+0x16a>
		if (ICM20602_ACCEL_DLPF_BYPASS_1046_HZ == dev.accel_dlpf) {
 801f220:	4ba5      	ldr	r3, [pc, #660]	; (801f4b8 <icm20602_init+0x398>)
 801f222:	789b      	ldrb	r3, [r3, #2]
 801f224:	2b08      	cmp	r3, #8
 801f226:	d10e      	bne.n	801f246 <icm20602_init+0x126>
			tmp = (1 << 3);
 801f228:	2308      	movs	r3, #8
 801f22a:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_ACCEL_CONFIG_2, &tmp, 1);
 801f22c:	1dbb      	adds	r3, r7, #6
 801f22e:	2201      	movs	r2, #1
 801f230:	4619      	mov	r1, r3
 801f232:	201d      	movs	r0, #29
 801f234:	f7ff fee8 	bl	801f008 <icm20602_write>
 801f238:	4603      	mov	r3, r0
 801f23a:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801f23c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f240:	2b00      	cmp	r3, #0
 801f242:	d010      	beq.n	801f266 <icm20602_init+0x146>
 801f244:	e131      	b.n	801f4aa <icm20602_init+0x38a>
		}
		else {
			tmp = dev.accel_dlpf;
 801f246:	4b9c      	ldr	r3, [pc, #624]	; (801f4b8 <icm20602_init+0x398>)
 801f248:	789b      	ldrb	r3, [r3, #2]
 801f24a:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_ACCEL_CONFIG_2, &tmp, 1);
 801f24c:	1dbb      	adds	r3, r7, #6
 801f24e:	2201      	movs	r2, #1
 801f250:	4619      	mov	r1, r3
 801f252:	201d      	movs	r0, #29
 801f254:	f7ff fed8 	bl	801f008 <icm20602_write>
 801f258:	4603      	mov	r3, r0
 801f25a:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801f25c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f260:	2b00      	cmp	r3, #0
 801f262:	f040 8111 	bne.w	801f488 <icm20602_init+0x368>
		}

		tmp = (dev.accel_g) << 2;
 801f266:	4b94      	ldr	r3, [pc, #592]	; (801f4b8 <icm20602_init+0x398>)
 801f268:	78db      	ldrb	r3, [r3, #3]
 801f26a:	009b      	lsls	r3, r3, #2
 801f26c:	b2db      	uxtb	r3, r3
 801f26e:	71bb      	strb	r3, [r7, #6]
		r =  icm20602_write(REG_ACCEL_CONFIG, &tmp, 1);
 801f270:	1dbb      	adds	r3, r7, #6
 801f272:	2201      	movs	r2, #1
 801f274:	4619      	mov	r1, r3
 801f276:	201c      	movs	r0, #28
 801f278:	f7ff fec6 	bl	801f008 <icm20602_write>
 801f27c:	4603      	mov	r3, r0
 801f27e:	71fb      	strb	r3, [r7, #7]
		ON_ERROR_GOTO((0 == r), return_err);
 801f280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f284:	2b00      	cmp	r3, #0
 801f286:	f040 8101 	bne.w	801f48c <icm20602_init+0x36c>
	}

	if (dev.use_gyro) {
 801f28a:	4b8b      	ldr	r3, [pc, #556]	; (801f4b8 <icm20602_init+0x398>)
 801f28c:	791b      	ldrb	r3, [r3, #4]
 801f28e:	2b00      	cmp	r3, #0
 801f290:	d073      	beq.n	801f37a <icm20602_init+0x25a>
		if (ICM20602_GYRO_DLPF_BYPASS_3281_HZ == dev.gyro_dlpf) {
 801f292:	4b89      	ldr	r3, [pc, #548]	; (801f4b8 <icm20602_init+0x398>)
 801f294:	799b      	ldrb	r3, [r3, #6]
 801f296:	2b08      	cmp	r3, #8
 801f298:	d124      	bne.n	801f2e4 <icm20602_init+0x1c4>
			// bypass dpf and set dps
			tmp = 0x00;
 801f29a:	2300      	movs	r3, #0
 801f29c:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_CONFIG, &tmp, 1);
 801f29e:	1dbb      	adds	r3, r7, #6
 801f2a0:	2201      	movs	r2, #1
 801f2a2:	4619      	mov	r1, r3
 801f2a4:	201a      	movs	r0, #26
 801f2a6:	f7ff feaf 	bl	801f008 <icm20602_write>
 801f2aa:	4603      	mov	r3, r0
 801f2ac:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801f2ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f2b2:	2b00      	cmp	r3, #0
 801f2b4:	f040 80ec 	bne.w	801f490 <icm20602_init+0x370>

			tmp = (dev.gyro_dps << 3) | 0x02; // see table page 37 of datasheet
 801f2b8:	4b7f      	ldr	r3, [pc, #508]	; (801f4b8 <icm20602_init+0x398>)
 801f2ba:	79db      	ldrb	r3, [r3, #7]
 801f2bc:	00db      	lsls	r3, r3, #3
 801f2be:	b25b      	sxtb	r3, r3
 801f2c0:	f043 0302 	orr.w	r3, r3, #2
 801f2c4:	b25b      	sxtb	r3, r3
 801f2c6:	b2db      	uxtb	r3, r3
 801f2c8:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_GYRO_CONFIG, &tmp, 1);
 801f2ca:	1dbb      	adds	r3, r7, #6
 801f2cc:	2201      	movs	r2, #1
 801f2ce:	4619      	mov	r1, r3
 801f2d0:	201b      	movs	r0, #27
 801f2d2:	f7ff fe99 	bl	801f008 <icm20602_write>
 801f2d6:	4603      	mov	r3, r0
 801f2d8:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801f2da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f2de:	2b00      	cmp	r3, #0
 801f2e0:	d04b      	beq.n	801f37a <icm20602_init+0x25a>
 801f2e2:	e0e2      	b.n	801f4aa <icm20602_init+0x38a>
		}
		else if (ICM20602_GYRO_DLPF_BYPASS_8173_HZ == dev.gyro_dlpf) {
 801f2e4:	4b74      	ldr	r3, [pc, #464]	; (801f4b8 <icm20602_init+0x398>)
 801f2e6:	799b      	ldrb	r3, [r3, #6]
 801f2e8:	2b09      	cmp	r3, #9
 801f2ea:	d124      	bne.n	801f336 <icm20602_init+0x216>
			// bypass dpf and set dps
			tmp = 0x00;
 801f2ec:	2300      	movs	r3, #0
 801f2ee:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_CONFIG, &tmp, 1);
 801f2f0:	1dbb      	adds	r3, r7, #6
 801f2f2:	2201      	movs	r2, #1
 801f2f4:	4619      	mov	r1, r3
 801f2f6:	201a      	movs	r0, #26
 801f2f8:	f7ff fe86 	bl	801f008 <icm20602_write>
 801f2fc:	4603      	mov	r3, r0
 801f2fe:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801f300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f304:	2b00      	cmp	r3, #0
 801f306:	f040 80c5 	bne.w	801f494 <icm20602_init+0x374>

			tmp = (dev.gyro_dps << 3) | 0x01; // see table page 37 of datasheet
 801f30a:	4b6b      	ldr	r3, [pc, #428]	; (801f4b8 <icm20602_init+0x398>)
 801f30c:	79db      	ldrb	r3, [r3, #7]
 801f30e:	00db      	lsls	r3, r3, #3
 801f310:	b25b      	sxtb	r3, r3
 801f312:	f043 0301 	orr.w	r3, r3, #1
 801f316:	b25b      	sxtb	r3, r3
 801f318:	b2db      	uxtb	r3, r3
 801f31a:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_GYRO_CONFIG, &tmp, 1);
 801f31c:	1dbb      	adds	r3, r7, #6
 801f31e:	2201      	movs	r2, #1
 801f320:	4619      	mov	r1, r3
 801f322:	201b      	movs	r0, #27
 801f324:	f7ff fe70 	bl	801f008 <icm20602_write>
 801f328:	4603      	mov	r3, r0
 801f32a:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801f32c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f330:	2b00      	cmp	r3, #0
 801f332:	d022      	beq.n	801f37a <icm20602_init+0x25a>
 801f334:	e0b9      	b.n	801f4aa <icm20602_init+0x38a>
		}
		else {
			// configure dpf and set dps
			tmp = dev.gyro_dlpf;
 801f336:	4b60      	ldr	r3, [pc, #384]	; (801f4b8 <icm20602_init+0x398>)
 801f338:	799b      	ldrb	r3, [r3, #6]
 801f33a:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_CONFIG, &tmp, 1);
 801f33c:	1dbb      	adds	r3, r7, #6
 801f33e:	2201      	movs	r2, #1
 801f340:	4619      	mov	r1, r3
 801f342:	201a      	movs	r0, #26
 801f344:	f7ff fe60 	bl	801f008 <icm20602_write>
 801f348:	4603      	mov	r3, r0
 801f34a:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801f34c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f350:	2b00      	cmp	r3, #0
 801f352:	f040 80a1 	bne.w	801f498 <icm20602_init+0x378>

			tmp = dev.gyro_dps << 3;
 801f356:	4b58      	ldr	r3, [pc, #352]	; (801f4b8 <icm20602_init+0x398>)
 801f358:	79db      	ldrb	r3, [r3, #7]
 801f35a:	00db      	lsls	r3, r3, #3
 801f35c:	b2db      	uxtb	r3, r3
 801f35e:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_GYRO_CONFIG, &tmp, 1);
 801f360:	1dbb      	adds	r3, r7, #6
 801f362:	2201      	movs	r2, #1
 801f364:	4619      	mov	r1, r3
 801f366:	201b      	movs	r0, #27
 801f368:	f7ff fe4e 	bl	801f008 <icm20602_write>
 801f36c:	4603      	mov	r3, r0
 801f36e:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801f370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f374:	2b00      	cmp	r3, #0
 801f376:	f040 8091 	bne.w	801f49c <icm20602_init+0x37c>
		}
	}

	/*Disale low power mode*/
	tmp = 0x00;
 801f37a:	2300      	movs	r3, #0
 801f37c:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_LP_MODE_CFG, &tmp, 1);
 801f37e:	1dbb      	adds	r3, r7, #6
 801f380:	2201      	movs	r2, #1
 801f382:	4619      	mov	r1, r3
 801f384:	201e      	movs	r0, #30
 801f386:	f7ff fe3f 	bl	801f008 <icm20602_write>
 801f38a:	4603      	mov	r3, r0
 801f38c:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801f38e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f392:	2b00      	cmp	r3, #0
 801f394:	f040 8084 	bne.w	801f4a0 <icm20602_init+0x380>

	// enable FIFO if requested
	tmp = ((dev.use_accel) && (dev.accel_fifo)) ? 0x08 : 0x00;
 801f398:	4b47      	ldr	r3, [pc, #284]	; (801f4b8 <icm20602_init+0x398>)
 801f39a:	781b      	ldrb	r3, [r3, #0]
 801f39c:	2b00      	cmp	r3, #0
 801f39e:	d005      	beq.n	801f3ac <icm20602_init+0x28c>
 801f3a0:	4b45      	ldr	r3, [pc, #276]	; (801f4b8 <icm20602_init+0x398>)
 801f3a2:	785b      	ldrb	r3, [r3, #1]
 801f3a4:	2b00      	cmp	r3, #0
 801f3a6:	d001      	beq.n	801f3ac <icm20602_init+0x28c>
 801f3a8:	2308      	movs	r3, #8
 801f3aa:	e000      	b.n	801f3ae <icm20602_init+0x28e>
 801f3ac:	2300      	movs	r3, #0
 801f3ae:	71bb      	strb	r3, [r7, #6]
	tmp |= ((dev.use_gyro) && (dev.gyro_fifo)) ? 0x10 : 0x00;
 801f3b0:	4b41      	ldr	r3, [pc, #260]	; (801f4b8 <icm20602_init+0x398>)
 801f3b2:	791b      	ldrb	r3, [r3, #4]
 801f3b4:	2b00      	cmp	r3, #0
 801f3b6:	d005      	beq.n	801f3c4 <icm20602_init+0x2a4>
 801f3b8:	4b3f      	ldr	r3, [pc, #252]	; (801f4b8 <icm20602_init+0x398>)
 801f3ba:	795b      	ldrb	r3, [r3, #5]
 801f3bc:	2b00      	cmp	r3, #0
 801f3be:	d001      	beq.n	801f3c4 <icm20602_init+0x2a4>
 801f3c0:	2210      	movs	r2, #16
 801f3c2:	e000      	b.n	801f3c6 <icm20602_init+0x2a6>
 801f3c4:	2200      	movs	r2, #0
 801f3c6:	79bb      	ldrb	r3, [r7, #6]
 801f3c8:	b25b      	sxtb	r3, r3
 801f3ca:	4313      	orrs	r3, r2
 801f3cc:	b25b      	sxtb	r3, r3
 801f3ce:	b2db      	uxtb	r3, r3
 801f3d0:	71bb      	strb	r3, [r7, #6]
	r =  icm20602_write(REG_FIFO_EN, &tmp, 1);
 801f3d2:	1dbb      	adds	r3, r7, #6
 801f3d4:	2201      	movs	r2, #1
 801f3d6:	4619      	mov	r1, r3
 801f3d8:	2023      	movs	r0, #35	; 0x23
 801f3da:	f7ff fe15 	bl	801f008 <icm20602_write>
 801f3de:	4603      	mov	r3, r0
 801f3e0:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801f3e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f3e6:	2b00      	cmp	r3, #0
 801f3e8:	d15c      	bne.n	801f4a4 <icm20602_init+0x384>

	// configure sample rate divider (TODO: is this gyro only?)
	// note: SAMPLE_RATE = INTERNAL_SAMPLE_RATE / (1 + SMPLRT_DIV)
	tmp = (0 != dev.sample_rate_div) ? dev.sample_rate_div - 1 : 1;
 801f3ea:	4b33      	ldr	r3, [pc, #204]	; (801f4b8 <icm20602_init+0x398>)
 801f3ec:	7a1b      	ldrb	r3, [r3, #8]
 801f3ee:	2b00      	cmp	r3, #0
 801f3f0:	d004      	beq.n	801f3fc <icm20602_init+0x2dc>
 801f3f2:	4b31      	ldr	r3, [pc, #196]	; (801f4b8 <icm20602_init+0x398>)
 801f3f4:	7a1b      	ldrb	r3, [r3, #8]
 801f3f6:	3b01      	subs	r3, #1
 801f3f8:	b2db      	uxtb	r3, r3
 801f3fa:	e000      	b.n	801f3fe <icm20602_init+0x2de>
 801f3fc:	2301      	movs	r3, #1
 801f3fe:	71bb      	strb	r3, [r7, #6]
	r =  icm20602_write(REG_SMPLRT_DIV, &tmp, 1);
 801f400:	1dbb      	adds	r3, r7, #6
 801f402:	2201      	movs	r2, #1
 801f404:	4619      	mov	r1, r3
 801f406:	2019      	movs	r0, #25
 801f408:	f7ff fdfe 	bl	801f008 <icm20602_write>
 801f40c:	4603      	mov	r3, r0
 801f40e:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801f410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f414:	2b00      	cmp	r3, #0
 801f416:	d147      	bne.n	801f4a8 <icm20602_init+0x388>

	tmp = 0;
 801f418:	2300      	movs	r3, #0
 801f41a:	71bb      	strb	r3, [r7, #6]
	tmp |= (dev.use_gyro) ? 0 : 0x07; // 0 - on, 1 - disabled
 801f41c:	4b26      	ldr	r3, [pc, #152]	; (801f4b8 <icm20602_init+0x398>)
 801f41e:	791b      	ldrb	r3, [r3, #4]
 801f420:	2b00      	cmp	r3, #0
 801f422:	d001      	beq.n	801f428 <icm20602_init+0x308>
 801f424:	2200      	movs	r2, #0
 801f426:	e000      	b.n	801f42a <icm20602_init+0x30a>
 801f428:	2207      	movs	r2, #7
 801f42a:	79bb      	ldrb	r3, [r7, #6]
 801f42c:	b25b      	sxtb	r3, r3
 801f42e:	4313      	orrs	r3, r2
 801f430:	b25b      	sxtb	r3, r3
 801f432:	b2db      	uxtb	r3, r3
 801f434:	71bb      	strb	r3, [r7, #6]
	tmp |= (dev.use_accel) ? 0 : 0x38; // 0 - on, 1 - disabled
 801f436:	4b20      	ldr	r3, [pc, #128]	; (801f4b8 <icm20602_init+0x398>)
 801f438:	781b      	ldrb	r3, [r3, #0]
 801f43a:	2b00      	cmp	r3, #0
 801f43c:	d001      	beq.n	801f442 <icm20602_init+0x322>
 801f43e:	2200      	movs	r2, #0
 801f440:	e000      	b.n	801f444 <icm20602_init+0x324>
 801f442:	2238      	movs	r2, #56	; 0x38
 801f444:	79bb      	ldrb	r3, [r7, #6]
 801f446:	b25b      	sxtb	r3, r3
 801f448:	4313      	orrs	r3, r2
 801f44a:	b25b      	sxtb	r3, r3
 801f44c:	b2db      	uxtb	r3, r3
 801f44e:	71bb      	strb	r3, [r7, #6]
	r =  icm20602_write(REG_PWR_MGMT_2, &tmp, 1);
 801f450:	1dbb      	adds	r3, r7, #6
 801f452:	2201      	movs	r2, #1
 801f454:	4619      	mov	r1, r3
 801f456:	206c      	movs	r0, #108	; 0x6c
 801f458:	f7ff fdd6 	bl	801f008 <icm20602_write>
 801f45c:	4603      	mov	r3, r0
 801f45e:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801f460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f464:	2b00      	cmp	r3, #0

	return_err:
 801f466:	e020      	b.n	801f4aa <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801f468:	bf00      	nop
 801f46a:	e01e      	b.n	801f4aa <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801f46c:	bf00      	nop
 801f46e:	e01c      	b.n	801f4aa <icm20602_init+0x38a>
		ON_ERROR_GOTO((0 == r), return_err);
 801f470:	bf00      	nop
 801f472:	e01a      	b.n	801f4aa <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801f474:	bf00      	nop
 801f476:	e018      	b.n	801f4aa <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801f478:	bf00      	nop
 801f47a:	e016      	b.n	801f4aa <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801f47c:	bf00      	nop
 801f47e:	e014      	b.n	801f4aa <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801f480:	bf00      	nop
 801f482:	e012      	b.n	801f4aa <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801f484:	bf00      	nop
 801f486:	e010      	b.n	801f4aa <icm20602_init+0x38a>
			ON_ERROR_GOTO((0 == r), return_err);
 801f488:	bf00      	nop
 801f48a:	e00e      	b.n	801f4aa <icm20602_init+0x38a>
		ON_ERROR_GOTO((0 == r), return_err);
 801f48c:	bf00      	nop
 801f48e:	e00c      	b.n	801f4aa <icm20602_init+0x38a>
			ON_ERROR_GOTO((0 == r), return_err);
 801f490:	bf00      	nop
 801f492:	e00a      	b.n	801f4aa <icm20602_init+0x38a>
			ON_ERROR_GOTO((0 == r), return_err);
 801f494:	bf00      	nop
 801f496:	e008      	b.n	801f4aa <icm20602_init+0x38a>
			ON_ERROR_GOTO((0 == r), return_err);
 801f498:	bf00      	nop
 801f49a:	e006      	b.n	801f4aa <icm20602_init+0x38a>
			ON_ERROR_GOTO((0 == r), return_err);
 801f49c:	bf00      	nop
 801f49e:	e004      	b.n	801f4aa <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801f4a0:	bf00      	nop
 801f4a2:	e002      	b.n	801f4aa <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801f4a4:	bf00      	nop
 801f4a6:	e000      	b.n	801f4aa <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801f4a8:	bf00      	nop

	return r;
 801f4aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801f4ae:	4618      	mov	r0, r3
 801f4b0:	3708      	adds	r7, #8
 801f4b2:	46bd      	mov	sp, r7
 801f4b4:	bd80      	pop	{r7, pc}
 801f4b6:	bf00      	nop
 801f4b8:	24000044 	.word	0x24000044

0801f4bc <icm20602_read_data_raw>:
}

int8_t icm20602_read_data_raw(int16_t * p_ax,
		int16_t * p_ay, int16_t * p_az, int16_t * p_gx, int16_t * p_gy,
		int16_t * p_gz, int16_t * p_t)
{
 801f4bc:	b580      	push	{r7, lr}
 801f4be:	b088      	sub	sp, #32
 801f4c0:	af00      	add	r7, sp, #0
 801f4c2:	60f8      	str	r0, [r7, #12]
 801f4c4:	60b9      	str	r1, [r7, #8]
 801f4c6:	607a      	str	r2, [r7, #4]
 801f4c8:	603b      	str	r3, [r7, #0]
	uint8_t buf[14] = {0};
 801f4ca:	2300      	movs	r3, #0
 801f4cc:	613b      	str	r3, [r7, #16]
 801f4ce:	f107 0314 	add.w	r3, r7, #20
 801f4d2:	2200      	movs	r2, #0
 801f4d4:	601a      	str	r2, [r3, #0]
 801f4d6:	605a      	str	r2, [r3, #4]
 801f4d8:	811a      	strh	r2, [r3, #8]
	int8_t r = 0;
 801f4da:	2300      	movs	r3, #0
 801f4dc:	77fb      	strb	r3, [r7, #31]

	r = icm20602_read(REG_ACCEL_XOUT_H, buf, 14);
 801f4de:	f107 0310 	add.w	r3, r7, #16
 801f4e2:	220e      	movs	r2, #14
 801f4e4:	4619      	mov	r1, r3
 801f4e6:	203b      	movs	r0, #59	; 0x3b
 801f4e8:	f7ff fdd2 	bl	801f090 <icm20602_read>
 801f4ec:	4603      	mov	r3, r0
 801f4ee:	77fb      	strb	r3, [r7, #31]
	if (0 == r) {
 801f4f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801f4f4:	2b00      	cmp	r3, #0
 801f4f6:	f040 808c 	bne.w	801f612 <icm20602_read_data_raw+0x156>
		UINT8_TO_INT16(*p_ax, buf[0], buf[1]);
 801f4fa:	7c3b      	ldrb	r3, [r7, #16]
 801f4fc:	b21a      	sxth	r2, r3
 801f4fe:	68fb      	ldr	r3, [r7, #12]
 801f500:	801a      	strh	r2, [r3, #0]
 801f502:	68fb      	ldr	r3, [r7, #12]
 801f504:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f508:	021b      	lsls	r3, r3, #8
 801f50a:	b21a      	sxth	r2, r3
 801f50c:	68fb      	ldr	r3, [r7, #12]
 801f50e:	801a      	strh	r2, [r3, #0]
 801f510:	68fb      	ldr	r3, [r7, #12]
 801f512:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f516:	7c7b      	ldrb	r3, [r7, #17]
 801f518:	b21b      	sxth	r3, r3
 801f51a:	4313      	orrs	r3, r2
 801f51c:	b21a      	sxth	r2, r3
 801f51e:	68fb      	ldr	r3, [r7, #12]
 801f520:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(*p_ay, buf[2], buf[3]);
 801f522:	7cbb      	ldrb	r3, [r7, #18]
 801f524:	b21a      	sxth	r2, r3
 801f526:	68bb      	ldr	r3, [r7, #8]
 801f528:	801a      	strh	r2, [r3, #0]
 801f52a:	68bb      	ldr	r3, [r7, #8]
 801f52c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f530:	021b      	lsls	r3, r3, #8
 801f532:	b21a      	sxth	r2, r3
 801f534:	68bb      	ldr	r3, [r7, #8]
 801f536:	801a      	strh	r2, [r3, #0]
 801f538:	68bb      	ldr	r3, [r7, #8]
 801f53a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f53e:	7cfb      	ldrb	r3, [r7, #19]
 801f540:	b21b      	sxth	r3, r3
 801f542:	4313      	orrs	r3, r2
 801f544:	b21a      	sxth	r2, r3
 801f546:	68bb      	ldr	r3, [r7, #8]
 801f548:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(*p_az, buf[4], buf[5]);
 801f54a:	7d3b      	ldrb	r3, [r7, #20]
 801f54c:	b21a      	sxth	r2, r3
 801f54e:	687b      	ldr	r3, [r7, #4]
 801f550:	801a      	strh	r2, [r3, #0]
 801f552:	687b      	ldr	r3, [r7, #4]
 801f554:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f558:	021b      	lsls	r3, r3, #8
 801f55a:	b21a      	sxth	r2, r3
 801f55c:	687b      	ldr	r3, [r7, #4]
 801f55e:	801a      	strh	r2, [r3, #0]
 801f560:	687b      	ldr	r3, [r7, #4]
 801f562:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f566:	7d7b      	ldrb	r3, [r7, #21]
 801f568:	b21b      	sxth	r3, r3
 801f56a:	4313      	orrs	r3, r2
 801f56c:	b21a      	sxth	r2, r3
 801f56e:	687b      	ldr	r3, [r7, #4]
 801f570:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(*p_t, buf[6], buf[7]);
 801f572:	7dbb      	ldrb	r3, [r7, #22]
 801f574:	b21a      	sxth	r2, r3
 801f576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f578:	801a      	strh	r2, [r3, #0]
 801f57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f57c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f580:	021b      	lsls	r3, r3, #8
 801f582:	b21a      	sxth	r2, r3
 801f584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f586:	801a      	strh	r2, [r3, #0]
 801f588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f58a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f58e:	7dfb      	ldrb	r3, [r7, #23]
 801f590:	b21b      	sxth	r3, r3
 801f592:	4313      	orrs	r3, r2
 801f594:	b21a      	sxth	r2, r3
 801f596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f598:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(*p_gx, buf[8], buf[9]);
 801f59a:	7e3b      	ldrb	r3, [r7, #24]
 801f59c:	b21a      	sxth	r2, r3
 801f59e:	683b      	ldr	r3, [r7, #0]
 801f5a0:	801a      	strh	r2, [r3, #0]
 801f5a2:	683b      	ldr	r3, [r7, #0]
 801f5a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f5a8:	021b      	lsls	r3, r3, #8
 801f5aa:	b21a      	sxth	r2, r3
 801f5ac:	683b      	ldr	r3, [r7, #0]
 801f5ae:	801a      	strh	r2, [r3, #0]
 801f5b0:	683b      	ldr	r3, [r7, #0]
 801f5b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f5b6:	7e7b      	ldrb	r3, [r7, #25]
 801f5b8:	b21b      	sxth	r3, r3
 801f5ba:	4313      	orrs	r3, r2
 801f5bc:	b21a      	sxth	r2, r3
 801f5be:	683b      	ldr	r3, [r7, #0]
 801f5c0:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(*p_gy, buf[10], buf[11]);
 801f5c2:	7ebb      	ldrb	r3, [r7, #26]
 801f5c4:	b21a      	sxth	r2, r3
 801f5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f5c8:	801a      	strh	r2, [r3, #0]
 801f5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f5cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f5d0:	021b      	lsls	r3, r3, #8
 801f5d2:	b21a      	sxth	r2, r3
 801f5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f5d6:	801a      	strh	r2, [r3, #0]
 801f5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f5da:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f5de:	7efb      	ldrb	r3, [r7, #27]
 801f5e0:	b21b      	sxth	r3, r3
 801f5e2:	4313      	orrs	r3, r2
 801f5e4:	b21a      	sxth	r2, r3
 801f5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f5e8:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(*p_gz, buf[12], buf[13]);
 801f5ea:	7f3b      	ldrb	r3, [r7, #28]
 801f5ec:	b21a      	sxth	r2, r3
 801f5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f5f0:	801a      	strh	r2, [r3, #0]
 801f5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f5f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f5f8:	021b      	lsls	r3, r3, #8
 801f5fa:	b21a      	sxth	r2, r3
 801f5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f5fe:	801a      	strh	r2, [r3, #0]
 801f600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f602:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f606:	7f7b      	ldrb	r3, [r7, #29]
 801f608:	b21b      	sxth	r3, r3
 801f60a:	4313      	orrs	r3, r2
 801f60c:	b21a      	sxth	r2, r3
 801f60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f610:	801a      	strh	r2, [r3, #0]
	}

	return r;
 801f612:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801f616:	4618      	mov	r0, r3
 801f618:	3720      	adds	r7, #32
 801f61a:	46bd      	mov	sp, r7
 801f61c:	bd80      	pop	{r7, pc}
	...

0801f620 <pcm5102_Init>:
 * @brief  Initialise audio peripheral
 * @param  void
 * @retval void
 */
void pcm5102_Init(void)
{
 801f620:	b580      	push	{r7, lr}
 801f622:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DAC_FLT_GPIO_Port, DAC_FLT_Pin, GPIO_PIN_SET); //Filterselect: Normallatency(Low) / Lowlatency(High)
 801f624:	2201      	movs	r2, #1
 801f626:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801f62a:	480e      	ldr	r0, [pc, #56]	; (801f664 <pcm5102_Init+0x44>)
 801f62c:	f7eb f832 	bl	800a694 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DAC_DEMP_GPIO_Port, DAC_DEMP_Pin, GPIO_PIN_RESET); //De-emphasiscontrol for 44.1kHz sampling rate: Off(Low) / On(High)
 801f630:	2200      	movs	r2, #0
 801f632:	2108      	movs	r1, #8
 801f634:	480c      	ldr	r0, [pc, #48]	; (801f668 <pcm5102_Init+0x48>)
 801f636:	f7eb f82d 	bl	800a694 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DAC_XSMT_GPIO_Port, DAC_XSMT_Pin, GPIO_PIN_SET); //Soft mute control: Softmute(Low) / soft un-mute(High)
 801f63a:	2201      	movs	r2, #1
 801f63c:	2104      	movs	r1, #4
 801f63e:	4809      	ldr	r0, [pc, #36]	; (801f664 <pcm5102_Init+0x44>)
 801f640:	f7eb f828 	bl	800a694 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DAC_FMT_GPIO_Port, DAC_FMT_Pin, GPIO_PIN_RESET); //Audio format selection: I2S(Low)/ Left justified(High)
 801f644:	2200      	movs	r2, #0
 801f646:	2140      	movs	r1, #64	; 0x40
 801f648:	4808      	ldr	r0, [pc, #32]	; (801f66c <pcm5102_Init+0x4c>)
 801f64a:	f7eb f823 	bl	800a694 <HAL_GPIO_WritePin>

	bufferAudioState = AUDIO_BUFFER_OFFSET_NONE;
 801f64e:	4b08      	ldr	r3, [pc, #32]	; (801f670 <pcm5102_Init+0x50>)
 801f650:	2200      	movs	r2, #0
 801f652:	701a      	strb	r2, [r3, #0]
	HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t *)&audioBuff[0], AUDIO_BUFFER_SIZE);
 801f654:	f44f 7280 	mov.w	r2, #256	; 0x100
 801f658:	4906      	ldr	r1, [pc, #24]	; (801f674 <pcm5102_Init+0x54>)
 801f65a:	4807      	ldr	r0, [pc, #28]	; (801f678 <pcm5102_Init+0x58>)
 801f65c:	f7ee fd98 	bl	800e190 <HAL_SAI_Transmit_DMA>
}
 801f660:	bf00      	nop
 801f662:	bd80      	pop	{r7, pc}
 801f664:	58020800 	.word	0x58020800
 801f668:	58021c00 	.word	0x58021c00
 801f66c:	58021400 	.word	0x58021400
 801f670:	240048ea 	.word	0x240048ea
 801f674:	240048ec 	.word	0x240048ec
 801f678:	24004e84 	.word	0x24004e84

0801f67c <pcm5102_GetAudioData>:
 * @brief  Get audio buffer data
 * @param  Index
 * @retval Value
 */
int16_t pcm5102_GetAudioData(uint32_t index)
{
 801f67c:	b480      	push	{r7}
 801f67e:	b083      	sub	sp, #12
 801f680:	af00      	add	r7, sp, #0
 801f682:	6078      	str	r0, [r7, #4]
	//	if (index >= RFFT_BUFFER_SIZE)
	//		Error_Handler();
	return audioBuff[index];
 801f684:	4a04      	ldr	r2, [pc, #16]	; (801f698 <pcm5102_GetAudioData+0x1c>)
 801f686:	687b      	ldr	r3, [r7, #4]
 801f688:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
}
 801f68c:	4618      	mov	r0, r3
 801f68e:	370c      	adds	r7, #12
 801f690:	46bd      	mov	sp, r7
 801f692:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f696:	4770      	bx	lr
 801f698:	240048ec 	.word	0x240048ec

0801f69c <pcm5102_GetDataPtr>:
 * @brief  Get audio buffer index pointer
 * @param  index
 * @retval index address
 */
int16_t * pcm5102_GetDataPtr(uint32_t idx)
{
 801f69c:	b480      	push	{r7}
 801f69e:	b083      	sub	sp, #12
 801f6a0:	af00      	add	r7, sp, #0
 801f6a2:	6078      	str	r0, [r7, #4]
	return &audioBuff[idx];
 801f6a4:	687b      	ldr	r3, [r7, #4]
 801f6a6:	005b      	lsls	r3, r3, #1
 801f6a8:	4a03      	ldr	r2, [pc, #12]	; (801f6b8 <pcm5102_GetDataPtr+0x1c>)
 801f6aa:	4413      	add	r3, r2
}
 801f6ac:	4618      	mov	r0, r3
 801f6ae:	370c      	adds	r7, #12
 801f6b0:	46bd      	mov	sp, r7
 801f6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f6b6:	4770      	bx	lr
 801f6b8:	240048ec 	.word	0x240048ec

0801f6bc <pcm5102_GetBufferState>:
 * @brief  Get state of audio process
 * @param  void
 * @retval state
 */
__inline BUFFER_AUDIO_StateTypeDef * pcm5102_GetBufferState(void)
{
 801f6bc:	b480      	push	{r7}
 801f6be:	af00      	add	r7, sp, #0
	return &bufferAudioState;
 801f6c0:	4b02      	ldr	r3, [pc, #8]	; (801f6cc <pcm5102_GetBufferState+0x10>)
}
 801f6c2:	4618      	mov	r0, r3
 801f6c4:	46bd      	mov	sp, r7
 801f6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f6ca:	4770      	bx	lr
 801f6cc:	240048ea 	.word	0x240048ea

0801f6d0 <pcm5102_ResetBufferState>:
 * @brief  Reset state of audio process
 * @param  void
 * @retval void
 */
__inline void pcm5102_ResetBufferState(void)
{
 801f6d0:	b480      	push	{r7}
 801f6d2:	af00      	add	r7, sp, #0
	bufferAudioState = AUDIO_BUFFER_OFFSET_NONE;
 801f6d4:	4b03      	ldr	r3, [pc, #12]	; (801f6e4 <pcm5102_ResetBufferState+0x14>)
 801f6d6:	2200      	movs	r2, #0
 801f6d8:	701a      	strb	r2, [r3, #0]
}
 801f6da:	bf00      	nop
 801f6dc:	46bd      	mov	sp, r7
 801f6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f6e2:	4770      	bx	lr
 801f6e4:	240048ea 	.word	0x240048ea

0801f6e8 <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai_BlockA1)
{
 801f6e8:	b480      	push	{r7}
 801f6ea:	b083      	sub	sp, #12
 801f6ec:	af00      	add	r7, sp, #0
 801f6ee:	6078      	str	r0, [r7, #4]
	//	if(hsai_BlockA1->Instance==SAI1_Block_A)
	bufferAudioState = AUDIO_BUFFER_OFFSET_HALF;
 801f6f0:	4b04      	ldr	r3, [pc, #16]	; (801f704 <HAL_SAI_TxHalfCpltCallback+0x1c>)
 801f6f2:	2201      	movs	r2, #1
 801f6f4:	701a      	strb	r2, [r3, #0]
//	SCB_CleanDCache_by_Addr((uint32_t *)&audioBuff[AUDIO_BUFFER_SIZE / 2], AUDIO_BUFFER_SIZE);
}
 801f6f6:	bf00      	nop
 801f6f8:	370c      	adds	r7, #12
 801f6fa:	46bd      	mov	sp, r7
 801f6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f700:	4770      	bx	lr
 801f702:	bf00      	nop
 801f704:	240048ea 	.word	0x240048ea

0801f708 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai_BlockA1)
{
 801f708:	b480      	push	{r7}
 801f70a:	b083      	sub	sp, #12
 801f70c:	af00      	add	r7, sp, #0
 801f70e:	6078      	str	r0, [r7, #4]
	//	if(hsai_BlockA1->Instance==SAI1_Block_A)
	bufferAudioState = AUDIO_BUFFER_OFFSET_FULL;
 801f710:	4b04      	ldr	r3, [pc, #16]	; (801f724 <HAL_SAI_TxCpltCallback+0x1c>)
 801f712:	2202      	movs	r2, #2
 801f714:	701a      	strb	r2, [r3, #0]
//	SCB_CleanDCache_by_Addr((uint32_t *)&audioBuff[0], AUDIO_BUFFER_SIZE);
}
 801f716:	bf00      	nop
 801f718:	370c      	adds	r7, #12
 801f71a:	46bd      	mov	sp, r7
 801f71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f720:	4770      	bx	lr
 801f722:	bf00      	nop
 801f724:	240048ea 	.word	0x240048ea

0801f728 <ssd1362_Reset>:
void ssd1362_writeCmd(uint8_t reg);
void ssd1362_writeData(uint8_t data);

/* Private user code ---------------------------------------------------------*/

void ssd1362_Reset(void) {
 801f728:	b580      	push	{r7, lr}
 801f72a:	af00      	add	r7, sp, #0
    // Reset the OLED
    HAL_GPIO_WritePin(SSD1362_Reset_Port, SSD1362_Reset_Pin, GPIO_PIN_RESET);
 801f72c:	2200      	movs	r2, #0
 801f72e:	f44f 7180 	mov.w	r1, #256	; 0x100
 801f732:	4808      	ldr	r0, [pc, #32]	; (801f754 <ssd1362_Reset+0x2c>)
 801f734:	f7ea ffae 	bl	800a694 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 801f738:	200a      	movs	r0, #10
 801f73a:	f7e4 fce3 	bl	8004104 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1362_Reset_Port, SSD1362_Reset_Pin, GPIO_PIN_SET);
 801f73e:	2201      	movs	r2, #1
 801f740:	f44f 7180 	mov.w	r1, #256	; 0x100
 801f744:	4803      	ldr	r0, [pc, #12]	; (801f754 <ssd1362_Reset+0x2c>)
 801f746:	f7ea ffa5 	bl	800a694 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 801f74a:	200a      	movs	r0, #10
 801f74c:	f7e4 fcda 	bl	8004104 <HAL_Delay>
}
 801f750:	bf00      	nop
 801f752:	bd80      	pop	{r7, pc}
 801f754:	58020400 	.word	0x58020400

0801f758 <ssd1362_writeCmd>:

//Writes a command byte to the driver
void ssd1362_writeCmd(uint8_t reg)
{
 801f758:	b580      	push	{r7, lr}
 801f75a:	b082      	sub	sp, #8
 801f75c:	af00      	add	r7, sp, #0
 801f75e:	4603      	mov	r3, r0
 801f760:	71fb      	strb	r3, [r7, #7]
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)LCD_REG, (uint8_t *)&reg, 1);
 801f762:	1dfa      	adds	r2, r7, #7
 801f764:	2301      	movs	r3, #1
 801f766:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 801f76a:	4803      	ldr	r0, [pc, #12]	; (801f778 <ssd1362_writeCmd+0x20>)
 801f76c:	f7f0 f8fe 	bl	800f96c <HAL_SRAM_Write_8b>
}
 801f770:	bf00      	nop
 801f772:	3708      	adds	r7, #8
 801f774:	46bd      	mov	sp, r7
 801f776:	bd80      	pop	{r7, pc}
 801f778:	24004dac 	.word	0x24004dac

0801f77c <ssd1362_writeData>:

//Writes 1 byte to the display's memory
void ssd1362_writeData(uint8_t data)
{
 801f77c:	b580      	push	{r7, lr}
 801f77e:	b082      	sub	sp, #8
 801f780:	af00      	add	r7, sp, #0
 801f782:	4603      	mov	r3, r0
 801f784:	71fb      	strb	r3, [r7, #7]
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)LCD_RAM, (uint8_t *)&data, 1);
 801f786:	1dfa      	adds	r2, r7, #7
 801f788:	2301      	movs	r3, #1
 801f78a:	4904      	ldr	r1, [pc, #16]	; (801f79c <ssd1362_writeData+0x20>)
 801f78c:	4804      	ldr	r0, [pc, #16]	; (801f7a0 <ssd1362_writeData+0x24>)
 801f78e:	f7f0 f8ed 	bl	800f96c <HAL_SRAM_Write_8b>
}
 801f792:	bf00      	nop
 801f794:	3708      	adds	r7, #8
 801f796:	46bd      	mov	sp, r7
 801f798:	bd80      	pop	{r7, pc}
 801f79a:	bf00      	nop
 801f79c:	c0000001 	.word	0xc0000001
 801f7a0:	24004dac 	.word	0x24004dac

0801f7a4 <bitWrite>:

void bitWrite(uint8_t *x, uint8_t n, uint8_t value) {
 801f7a4:	b480      	push	{r7}
 801f7a6:	b083      	sub	sp, #12
 801f7a8:	af00      	add	r7, sp, #0
 801f7aa:	6078      	str	r0, [r7, #4]
 801f7ac:	460b      	mov	r3, r1
 801f7ae:	70fb      	strb	r3, [r7, #3]
 801f7b0:	4613      	mov	r3, r2
 801f7b2:	70bb      	strb	r3, [r7, #2]
   if (value)
 801f7b4:	78bb      	ldrb	r3, [r7, #2]
 801f7b6:	2b00      	cmp	r3, #0
 801f7b8:	d00d      	beq.n	801f7d6 <bitWrite+0x32>
      *x |= (1 << n);
 801f7ba:	687b      	ldr	r3, [r7, #4]
 801f7bc:	781b      	ldrb	r3, [r3, #0]
 801f7be:	b25a      	sxtb	r2, r3
 801f7c0:	78fb      	ldrb	r3, [r7, #3]
 801f7c2:	2101      	movs	r1, #1
 801f7c4:	fa01 f303 	lsl.w	r3, r1, r3
 801f7c8:	b25b      	sxtb	r3, r3
 801f7ca:	4313      	orrs	r3, r2
 801f7cc:	b25b      	sxtb	r3, r3
 801f7ce:	b2da      	uxtb	r2, r3
 801f7d0:	687b      	ldr	r3, [r7, #4]
 801f7d2:	701a      	strb	r2, [r3, #0]
   else
      *x &= ~(1 << n);
}
 801f7d4:	e00e      	b.n	801f7f4 <bitWrite+0x50>
      *x &= ~(1 << n);
 801f7d6:	687b      	ldr	r3, [r7, #4]
 801f7d8:	781b      	ldrb	r3, [r3, #0]
 801f7da:	b25a      	sxtb	r2, r3
 801f7dc:	78fb      	ldrb	r3, [r7, #3]
 801f7de:	2101      	movs	r1, #1
 801f7e0:	fa01 f303 	lsl.w	r3, r1, r3
 801f7e4:	b25b      	sxtb	r3, r3
 801f7e6:	43db      	mvns	r3, r3
 801f7e8:	b25b      	sxtb	r3, r3
 801f7ea:	4013      	ands	r3, r2
 801f7ec:	b25b      	sxtb	r3, r3
 801f7ee:	b2da      	uxtb	r2, r3
 801f7f0:	687b      	ldr	r3, [r7, #4]
 801f7f2:	701a      	strb	r2, [r3, #0]
}
 801f7f4:	bf00      	nop
 801f7f6:	370c      	adds	r7, #12
 801f7f8:	46bd      	mov	sp, r7
 801f7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f7fe:	4770      	bx	lr

0801f800 <bitRead>:

char bitRead(uint8_t *x, uint8_t n) {
 801f800:	b480      	push	{r7}
 801f802:	b083      	sub	sp, #12
 801f804:	af00      	add	r7, sp, #0
 801f806:	6078      	str	r0, [r7, #4]
 801f808:	460b      	mov	r3, r1
 801f80a:	70fb      	strb	r3, [r7, #3]
   return (*x & (1 << n)) ? 1 : 0;
 801f80c:	687b      	ldr	r3, [r7, #4]
 801f80e:	781b      	ldrb	r3, [r3, #0]
 801f810:	461a      	mov	r2, r3
 801f812:	78fb      	ldrb	r3, [r7, #3]
 801f814:	fa42 f303 	asr.w	r3, r2, r3
 801f818:	b2db      	uxtb	r3, r3
 801f81a:	f003 0301 	and.w	r3, r3, #1
 801f81e:	b2db      	uxtb	r3, r3
}
 801f820:	4618      	mov	r0, r3
 801f822:	370c      	adds	r7, #12
 801f824:	46bd      	mov	sp, r7
 801f826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f82a:	4770      	bx	lr

0801f82c <ssd1362_setWriteZone>:

//defines a rectangular area of memory which the driver will itterate through. This function takes memory locations, meaning a 64x256 space
void ssd1362_setWriteZone(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 801f82c:	b590      	push	{r4, r7, lr}
 801f82e:	b083      	sub	sp, #12
 801f830:	af00      	add	r7, sp, #0
 801f832:	4604      	mov	r4, r0
 801f834:	4608      	mov	r0, r1
 801f836:	4611      	mov	r1, r2
 801f838:	461a      	mov	r2, r3
 801f83a:	4623      	mov	r3, r4
 801f83c:	80fb      	strh	r3, [r7, #6]
 801f83e:	4603      	mov	r3, r0
 801f840:	80bb      	strh	r3, [r7, #4]
 801f842:	460b      	mov	r3, r1
 801f844:	807b      	strh	r3, [r7, #2]
 801f846:	4613      	mov	r3, r2
 801f848:	803b      	strh	r3, [r7, #0]
	ssd1362_writeCmd(0x15); //Set Column Address
 801f84a:	2015      	movs	r0, #21
 801f84c:	f7ff ff84 	bl	801f758 <ssd1362_writeCmd>
	ssd1362_writeCmd(x1); //Beginning. Note that you must divide the column by 2, since 1 byte in memory is 2 pixels
 801f850:	88fb      	ldrh	r3, [r7, #6]
 801f852:	b2db      	uxtb	r3, r3
 801f854:	4618      	mov	r0, r3
 801f856:	f7ff ff7f 	bl	801f758 <ssd1362_writeCmd>
	ssd1362_writeCmd(x2); //End
 801f85a:	887b      	ldrh	r3, [r7, #2]
 801f85c:	b2db      	uxtb	r3, r3
 801f85e:	4618      	mov	r0, r3
 801f860:	f7ff ff7a 	bl	801f758 <ssd1362_writeCmd>

	ssd1362_writeCmd(0x75); //Set Row Address
 801f864:	2075      	movs	r0, #117	; 0x75
 801f866:	f7ff ff77 	bl	801f758 <ssd1362_writeCmd>
	ssd1362_writeCmd(y1); //Beginning
 801f86a:	88bb      	ldrh	r3, [r7, #4]
 801f86c:	b2db      	uxtb	r3, r3
 801f86e:	4618      	mov	r0, r3
 801f870:	f7ff ff72 	bl	801f758 <ssd1362_writeCmd>
	ssd1362_writeCmd(y2); //End
 801f874:	883b      	ldrh	r3, [r7, #0]
 801f876:	b2db      	uxtb	r3, r3
 801f878:	4618      	mov	r0, r3
 801f87a:	f7ff ff6d 	bl	801f758 <ssd1362_writeCmd>
}
 801f87e:	bf00      	nop
 801f880:	370c      	adds	r7, #12
 801f882:	46bd      	mov	sp, r7
 801f884:	bd90      	pop	{r4, r7, pc}

0801f886 <ssd1362_coordsToAddress>:

//Converts a pixel location to a linear memory address
uint16_t ssd1362_coordsToAddress(uint16_t x, uint16_t y)
{
 801f886:	b480      	push	{r7}
 801f888:	b083      	sub	sp, #12
 801f88a:	af00      	add	r7, sp, #0
 801f88c:	4603      	mov	r3, r0
 801f88e:	460a      	mov	r2, r1
 801f890:	80fb      	strh	r3, [r7, #6]
 801f892:	4613      	mov	r3, r2
 801f894:	80bb      	strh	r3, [r7, #4]
	return (x/2)+(y*128);
 801f896:	88fb      	ldrh	r3, [r7, #6]
 801f898:	085b      	lsrs	r3, r3, #1
 801f89a:	b29a      	uxth	r2, r3
 801f89c:	88bb      	ldrh	r3, [r7, #4]
 801f89e:	01db      	lsls	r3, r3, #7
 801f8a0:	b29b      	uxth	r3, r3
 801f8a2:	4413      	add	r3, r2
 801f8a4:	b29b      	uxth	r3, r3
}
 801f8a6:	4618      	mov	r0, r3
 801f8a8:	370c      	adds	r7, #12
 801f8aa:	46bd      	mov	sp, r7
 801f8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f8b0:	4770      	bx	lr
	...

0801f8b4 <ssd1362_setPixelChanged>:

void ssd1362_setPixelChanged(uint16_t x, uint16_t y, bool changed)
{
 801f8b4:	b590      	push	{r4, r7, lr}
 801f8b6:	b085      	sub	sp, #20
 801f8b8:	af00      	add	r7, sp, #0
 801f8ba:	4603      	mov	r3, r0
 801f8bc:	80fb      	strh	r3, [r7, #6]
 801f8be:	460b      	mov	r3, r1
 801f8c0:	80bb      	strh	r3, [r7, #4]
 801f8c2:	4613      	mov	r3, r2
 801f8c4:	70fb      	strb	r3, [r7, #3]
	uint16_t targetByte = ssd1362_coordsToAddress(x, y)/8;
 801f8c6:	88ba      	ldrh	r2, [r7, #4]
 801f8c8:	88fb      	ldrh	r3, [r7, #6]
 801f8ca:	4611      	mov	r1, r2
 801f8cc:	4618      	mov	r0, r3
 801f8ce:	f7ff ffda 	bl	801f886 <ssd1362_coordsToAddress>
 801f8d2:	4603      	mov	r3, r0
 801f8d4:	08db      	lsrs	r3, r3, #3
 801f8d6:	81fb      	strh	r3, [r7, #14]
	bitWrite(&changedPixels[targetByte], ssd1362_coordsToAddress(x, y) % 8, changed);
 801f8d8:	89fb      	ldrh	r3, [r7, #14]
 801f8da:	4a0b      	ldr	r2, [pc, #44]	; (801f908 <ssd1362_setPixelChanged+0x54>)
 801f8dc:	189c      	adds	r4, r3, r2
 801f8de:	88ba      	ldrh	r2, [r7, #4]
 801f8e0:	88fb      	ldrh	r3, [r7, #6]
 801f8e2:	4611      	mov	r1, r2
 801f8e4:	4618      	mov	r0, r3
 801f8e6:	f7ff ffce 	bl	801f886 <ssd1362_coordsToAddress>
 801f8ea:	4603      	mov	r3, r0
 801f8ec:	b2db      	uxtb	r3, r3
 801f8ee:	f003 0307 	and.w	r3, r3, #7
 801f8f2:	b2db      	uxtb	r3, r3
 801f8f4:	78fa      	ldrb	r2, [r7, #3]
 801f8f6:	4619      	mov	r1, r3
 801f8f8:	4620      	mov	r0, r4
 801f8fa:	f7ff ff53 	bl	801f7a4 <bitWrite>
}
 801f8fe:	bf00      	nop
 801f900:	3714      	adds	r7, #20
 801f902:	46bd      	mov	sp, r7
 801f904:	bd90      	pop	{r4, r7, pc}
 801f906:	bf00      	nop
 801f908:	240082d4 	.word	0x240082d4

0801f90c <ssd1362_drawPixel>:

//pixel xy coordinates 0-255, color 0-15, and whether to immediately output it to the display or buffer it
void ssd1362_drawPixel(uint16_t x, uint16_t y, uint8_t color, bool display)
{
 801f90c:	b590      	push	{r4, r7, lr}
 801f90e:	b085      	sub	sp, #20
 801f910:	af00      	add	r7, sp, #0
 801f912:	4604      	mov	r4, r0
 801f914:	4608      	mov	r0, r1
 801f916:	4611      	mov	r1, r2
 801f918:	461a      	mov	r2, r3
 801f91a:	4623      	mov	r3, r4
 801f91c:	80fb      	strh	r3, [r7, #6]
 801f91e:	4603      	mov	r3, r0
 801f920:	80bb      	strh	r3, [r7, #4]
 801f922:	460b      	mov	r3, r1
 801f924:	70fb      	strb	r3, [r7, #3]
 801f926:	4613      	mov	r3, r2
 801f928:	70bb      	strb	r3, [r7, #2]
	uint32_t address = ssd1362_coordsToAddress(x,y);
 801f92a:	88ba      	ldrh	r2, [r7, #4]
 801f92c:	88fb      	ldrh	r3, [r7, #6]
 801f92e:	4611      	mov	r1, r2
 801f930:	4618      	mov	r0, r3
 801f932:	f7ff ffa8 	bl	801f886 <ssd1362_coordsToAddress>
 801f936:	4603      	mov	r3, r0
 801f938:	60fb      	str	r3, [r7, #12]
	if((x%2) == 0)
 801f93a:	88fb      	ldrh	r3, [r7, #6]
 801f93c:	f003 0301 	and.w	r3, r3, #1
 801f940:	b29b      	uxth	r3, r3
 801f942:	2b00      	cmp	r3, #0
 801f944:	d113      	bne.n	801f96e <ssd1362_drawPixel+0x62>
	{//If this is an even pixel, and therefore needs shifting to the more significant nibble
		frameBuffer[address] = (frameBuffer[address] & 0x0f) | (color<<4);
 801f946:	4a25      	ldr	r2, [pc, #148]	; (801f9dc <ssd1362_drawPixel+0xd0>)
 801f948:	68fb      	ldr	r3, [r7, #12]
 801f94a:	4413      	add	r3, r2
 801f94c:	781b      	ldrb	r3, [r3, #0]
 801f94e:	b25b      	sxtb	r3, r3
 801f950:	f003 030f 	and.w	r3, r3, #15
 801f954:	b25a      	sxtb	r2, r3
 801f956:	78fb      	ldrb	r3, [r7, #3]
 801f958:	011b      	lsls	r3, r3, #4
 801f95a:	b25b      	sxtb	r3, r3
 801f95c:	4313      	orrs	r3, r2
 801f95e:	b25b      	sxtb	r3, r3
 801f960:	b2d9      	uxtb	r1, r3
 801f962:	4a1e      	ldr	r2, [pc, #120]	; (801f9dc <ssd1362_drawPixel+0xd0>)
 801f964:	68fb      	ldr	r3, [r7, #12]
 801f966:	4413      	add	r3, r2
 801f968:	460a      	mov	r2, r1
 801f96a:	701a      	strb	r2, [r3, #0]
 801f96c:	e011      	b.n	801f992 <ssd1362_drawPixel+0x86>
	} else {
		frameBuffer[address] = (frameBuffer[address] & 0xf0) | (color);
 801f96e:	4a1b      	ldr	r2, [pc, #108]	; (801f9dc <ssd1362_drawPixel+0xd0>)
 801f970:	68fb      	ldr	r3, [r7, #12]
 801f972:	4413      	add	r3, r2
 801f974:	781b      	ldrb	r3, [r3, #0]
 801f976:	b25b      	sxtb	r3, r3
 801f978:	f023 030f 	bic.w	r3, r3, #15
 801f97c:	b25a      	sxtb	r2, r3
 801f97e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801f982:	4313      	orrs	r3, r2
 801f984:	b25b      	sxtb	r3, r3
 801f986:	b2d9      	uxtb	r1, r3
 801f988:	4a14      	ldr	r2, [pc, #80]	; (801f9dc <ssd1362_drawPixel+0xd0>)
 801f98a:	68fb      	ldr	r3, [r7, #12]
 801f98c:	4413      	add	r3, r2
 801f98e:	460a      	mov	r2, r1
 801f990:	701a      	strb	r2, [r3, #0]
	}

	if(display)
 801f992:	78bb      	ldrb	r3, [r7, #2]
 801f994:	2b00      	cmp	r3, #0
 801f996:	d017      	beq.n	801f9c8 <ssd1362_drawPixel+0xbc>
	{
		ssd1362_setWriteZone(x/2,y,x/2,y);
 801f998:	88fb      	ldrh	r3, [r7, #6]
 801f99a:	085b      	lsrs	r3, r3, #1
 801f99c:	b298      	uxth	r0, r3
 801f99e:	88fb      	ldrh	r3, [r7, #6]
 801f9a0:	085b      	lsrs	r3, r3, #1
 801f9a2:	b29a      	uxth	r2, r3
 801f9a4:	88bb      	ldrh	r3, [r7, #4]
 801f9a6:	88b9      	ldrh	r1, [r7, #4]
 801f9a8:	f7ff ff40 	bl	801f82c <ssd1362_setWriteZone>
		ssd1362_writeData(frameBuffer[address]);
 801f9ac:	4a0b      	ldr	r2, [pc, #44]	; (801f9dc <ssd1362_drawPixel+0xd0>)
 801f9ae:	68fb      	ldr	r3, [r7, #12]
 801f9b0:	4413      	add	r3, r2
 801f9b2:	781b      	ldrb	r3, [r3, #0]
 801f9b4:	4618      	mov	r0, r3
 801f9b6:	f7ff fee1 	bl	801f77c <ssd1362_writeData>
		ssd1362_setPixelChanged(x, y, false); // We've now synced the display with this byte of the buffer, no need to write it again
 801f9ba:	88b9      	ldrh	r1, [r7, #4]
 801f9bc:	88fb      	ldrh	r3, [r7, #6]
 801f9be:	2200      	movs	r2, #0
 801f9c0:	4618      	mov	r0, r3
 801f9c2:	f7ff ff77 	bl	801f8b4 <ssd1362_setPixelChanged>
	} else {
		ssd1362_setPixelChanged(x, y, true); // This pixel is due for an update next refresh
	}
}
 801f9c6:	e005      	b.n	801f9d4 <ssd1362_drawPixel+0xc8>
		ssd1362_setPixelChanged(x, y, true); // This pixel is due for an update next refresh
 801f9c8:	88b9      	ldrh	r1, [r7, #4]
 801f9ca:	88fb      	ldrh	r3, [r7, #6]
 801f9cc:	2201      	movs	r2, #1
 801f9ce:	4618      	mov	r0, r3
 801f9d0:	f7ff ff70 	bl	801f8b4 <ssd1362_setPixelChanged>
}
 801f9d4:	bf00      	nop
 801f9d6:	3714      	adds	r7, #20
 801f9d8:	46bd      	mov	sp, r7
 801f9da:	bd90      	pop	{r4, r7, pc}
 801f9dc:	24008ad4 	.word	0x24008ad4

0801f9e0 <ssd1362_drawRect>:

//Draws a rectangle from x1,y1 to x2,y2.
void ssd1362_drawRect(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t color, bool display)
{
 801f9e0:	b590      	push	{r4, r7, lr}
 801f9e2:	b087      	sub	sp, #28
 801f9e4:	af00      	add	r7, sp, #0
 801f9e6:	4604      	mov	r4, r0
 801f9e8:	4608      	mov	r0, r1
 801f9ea:	4611      	mov	r1, r2
 801f9ec:	461a      	mov	r2, r3
 801f9ee:	4623      	mov	r3, r4
 801f9f0:	80fb      	strh	r3, [r7, #6]
 801f9f2:	4603      	mov	r3, r0
 801f9f4:	80bb      	strh	r3, [r7, #4]
 801f9f6:	460b      	mov	r3, r1
 801f9f8:	807b      	strh	r3, [r7, #2]
 801f9fa:	4613      	mov	r3, r2
 801f9fc:	803b      	strh	r3, [r7, #0]
	uint16_t xMin = MIN(x1, x2); // TODO: double performance by writing whole bytes at a time
 801f9fe:	887a      	ldrh	r2, [r7, #2]
 801fa00:	88fb      	ldrh	r3, [r7, #6]
 801fa02:	4293      	cmp	r3, r2
 801fa04:	bf28      	it	cs
 801fa06:	4613      	movcs	r3, r2
 801fa08:	827b      	strh	r3, [r7, #18]
	uint16_t xMax = MAX(x1, x2);
 801fa0a:	887a      	ldrh	r2, [r7, #2]
 801fa0c:	88fb      	ldrh	r3, [r7, #6]
 801fa0e:	4293      	cmp	r3, r2
 801fa10:	bf38      	it	cc
 801fa12:	4613      	movcc	r3, r2
 801fa14:	823b      	strh	r3, [r7, #16]
	uint16_t yMin = MIN(y1, y2);
 801fa16:	883a      	ldrh	r2, [r7, #0]
 801fa18:	88bb      	ldrh	r3, [r7, #4]
 801fa1a:	4293      	cmp	r3, r2
 801fa1c:	bf28      	it	cs
 801fa1e:	4613      	movcs	r3, r2
 801fa20:	81fb      	strh	r3, [r7, #14]
	uint16_t yMax = MAX(y1, y2);
 801fa22:	883a      	ldrh	r2, [r7, #0]
 801fa24:	88bb      	ldrh	r3, [r7, #4]
 801fa26:	4293      	cmp	r3, r2
 801fa28:	bf38      	it	cc
 801fa2a:	4613      	movcc	r3, r2
 801fa2c:	81bb      	strh	r3, [r7, #12]
	for (uint16_t x = xMin; x < xMax; x++)
 801fa2e:	8a7b      	ldrh	r3, [r7, #18]
 801fa30:	82fb      	strh	r3, [r7, #22]
 801fa32:	e014      	b.n	801fa5e <ssd1362_drawRect+0x7e>
	{
		for (uint16_t y = yMin; y < yMax; y++)
 801fa34:	89fb      	ldrh	r3, [r7, #14]
 801fa36:	82bb      	strh	r3, [r7, #20]
 801fa38:	e00a      	b.n	801fa50 <ssd1362_drawRect+0x70>
		{
			ssd1362_drawPixel(x, y, color, display);
 801fa3a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801fa3e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801fa42:	8ab9      	ldrh	r1, [r7, #20]
 801fa44:	8af8      	ldrh	r0, [r7, #22]
 801fa46:	f7ff ff61 	bl	801f90c <ssd1362_drawPixel>
		for (uint16_t y = yMin; y < yMax; y++)
 801fa4a:	8abb      	ldrh	r3, [r7, #20]
 801fa4c:	3301      	adds	r3, #1
 801fa4e:	82bb      	strh	r3, [r7, #20]
 801fa50:	8aba      	ldrh	r2, [r7, #20]
 801fa52:	89bb      	ldrh	r3, [r7, #12]
 801fa54:	429a      	cmp	r2, r3
 801fa56:	d3f0      	bcc.n	801fa3a <ssd1362_drawRect+0x5a>
	for (uint16_t x = xMin; x < xMax; x++)
 801fa58:	8afb      	ldrh	r3, [r7, #22]
 801fa5a:	3301      	adds	r3, #1
 801fa5c:	82fb      	strh	r3, [r7, #22]
 801fa5e:	8afa      	ldrh	r2, [r7, #22]
 801fa60:	8a3b      	ldrh	r3, [r7, #16]
 801fa62:	429a      	cmp	r2, r3
 801fa64:	d3e6      	bcc.n	801fa34 <ssd1362_drawRect+0x54>
		}
	}
}
 801fa66:	bf00      	nop
 801fa68:	bf00      	nop
 801fa6a:	371c      	adds	r7, #28
 801fa6c:	46bd      	mov	sp, r7
 801fa6e:	bd90      	pop	{r4, r7, pc}

0801fa70 <ssd1362_drawHLine>:

void ssd1362_drawHLine(uint16_t x, uint16_t y, uint16_t length, uint8_t color, bool display)
	{
 801fa70:	b590      	push	{r4, r7, lr}
 801fa72:	b085      	sub	sp, #20
 801fa74:	af00      	add	r7, sp, #0
 801fa76:	4604      	mov	r4, r0
 801fa78:	4608      	mov	r0, r1
 801fa7a:	4611      	mov	r1, r2
 801fa7c:	461a      	mov	r2, r3
 801fa7e:	4623      	mov	r3, r4
 801fa80:	80fb      	strh	r3, [r7, #6]
 801fa82:	4603      	mov	r3, r0
 801fa84:	80bb      	strh	r3, [r7, #4]
 801fa86:	460b      	mov	r3, r1
 801fa88:	807b      	strh	r3, [r7, #2]
 801fa8a:	4613      	mov	r3, r2
 801fa8c:	707b      	strb	r3, [r7, #1]
	for (uint32_t i = x; i < x+length; i++)
 801fa8e:	88fb      	ldrh	r3, [r7, #6]
 801fa90:	60fb      	str	r3, [r7, #12]
 801fa92:	e00a      	b.n	801faaa <ssd1362_drawHLine+0x3a>
	{
		ssd1362_drawPixel(i, y, color, display);
 801fa94:	68fb      	ldr	r3, [r7, #12]
 801fa96:	b298      	uxth	r0, r3
 801fa98:	f897 3020 	ldrb.w	r3, [r7, #32]
 801fa9c:	787a      	ldrb	r2, [r7, #1]
 801fa9e:	88b9      	ldrh	r1, [r7, #4]
 801faa0:	f7ff ff34 	bl	801f90c <ssd1362_drawPixel>
	for (uint32_t i = x; i < x+length; i++)
 801faa4:	68fb      	ldr	r3, [r7, #12]
 801faa6:	3301      	adds	r3, #1
 801faa8:	60fb      	str	r3, [r7, #12]
 801faaa:	88fa      	ldrh	r2, [r7, #6]
 801faac:	887b      	ldrh	r3, [r7, #2]
 801faae:	4413      	add	r3, r2
 801fab0:	461a      	mov	r2, r3
 801fab2:	68fb      	ldr	r3, [r7, #12]
 801fab4:	4293      	cmp	r3, r2
 801fab6:	d3ed      	bcc.n	801fa94 <ssd1362_drawHLine+0x24>
	}
}
 801fab8:	bf00      	nop
 801faba:	bf00      	nop
 801fabc:	3714      	adds	r7, #20
 801fabe:	46bd      	mov	sp, r7
 801fac0:	bd90      	pop	{r4, r7, pc}

0801fac2 <ssd1362_drawVLine>:

void ssd1362_drawVLine(uint16_t x, uint16_t y, uint16_t length, uint8_t color, bool display)
{
 801fac2:	b590      	push	{r4, r7, lr}
 801fac4:	b085      	sub	sp, #20
 801fac6:	af00      	add	r7, sp, #0
 801fac8:	4604      	mov	r4, r0
 801faca:	4608      	mov	r0, r1
 801facc:	4611      	mov	r1, r2
 801face:	461a      	mov	r2, r3
 801fad0:	4623      	mov	r3, r4
 801fad2:	80fb      	strh	r3, [r7, #6]
 801fad4:	4603      	mov	r3, r0
 801fad6:	80bb      	strh	r3, [r7, #4]
 801fad8:	460b      	mov	r3, r1
 801fada:	807b      	strh	r3, [r7, #2]
 801fadc:	4613      	mov	r3, r2
 801fade:	707b      	strb	r3, [r7, #1]
	for (uint32_t i = y; i < y+length; i++)
 801fae0:	88bb      	ldrh	r3, [r7, #4]
 801fae2:	60fb      	str	r3, [r7, #12]
 801fae4:	e00a      	b.n	801fafc <ssd1362_drawVLine+0x3a>
	{
		ssd1362_drawPixel(x, i, color, display);
 801fae6:	68fb      	ldr	r3, [r7, #12]
 801fae8:	b299      	uxth	r1, r3
 801faea:	f897 3020 	ldrb.w	r3, [r7, #32]
 801faee:	787a      	ldrb	r2, [r7, #1]
 801faf0:	88f8      	ldrh	r0, [r7, #6]
 801faf2:	f7ff ff0b 	bl	801f90c <ssd1362_drawPixel>
	for (uint32_t i = y; i < y+length; i++)
 801faf6:	68fb      	ldr	r3, [r7, #12]
 801faf8:	3301      	adds	r3, #1
 801fafa:	60fb      	str	r3, [r7, #12]
 801fafc:	88ba      	ldrh	r2, [r7, #4]
 801fafe:	887b      	ldrh	r3, [r7, #2]
 801fb00:	4413      	add	r3, r2
 801fb02:	461a      	mov	r2, r3
 801fb04:	68fb      	ldr	r3, [r7, #12]
 801fb06:	4293      	cmp	r3, r2
 801fb08:	d3ed      	bcc.n	801fae6 <ssd1362_drawVLine+0x24>
	}
}
 801fb0a:	bf00      	nop
 801fb0c:	bf00      	nop
 801fb0e:	3714      	adds	r7, #20
 801fb10:	46bd      	mov	sp, r7
 801fb12:	bd90      	pop	{r4, r7, pc}

0801fb14 <ssd1362_drawByteAsRow>:
	}
}

//Draws a byte as an 8 pixel row
void ssd1362_drawByteAsRow(uint16_t x, uint16_t y, uint8_t byte, uint8_t color)
{
 801fb14:	b590      	push	{r4, r7, lr}
 801fb16:	b085      	sub	sp, #20
 801fb18:	af00      	add	r7, sp, #0
 801fb1a:	4604      	mov	r4, r0
 801fb1c:	4608      	mov	r0, r1
 801fb1e:	4611      	mov	r1, r2
 801fb20:	461a      	mov	r2, r3
 801fb22:	4623      	mov	r3, r4
 801fb24:	80fb      	strh	r3, [r7, #6]
 801fb26:	4603      	mov	r3, r0
 801fb28:	80bb      	strh	r3, [r7, #4]
 801fb2a:	460b      	mov	r3, r1
 801fb2c:	70fb      	strb	r3, [r7, #3]
 801fb2e:	4613      	mov	r3, r2
 801fb30:	70bb      	strb	r3, [r7, #2]
	for (uint32_t i = 0; i < 8; i++)
 801fb32:	2300      	movs	r3, #0
 801fb34:	60fb      	str	r3, [r7, #12]
 801fb36:	e016      	b.n	801fb66 <ssd1362_drawByteAsRow+0x52>
	{
		if(bitRead(&byte, i))
 801fb38:	68fb      	ldr	r3, [r7, #12]
 801fb3a:	b2da      	uxtb	r2, r3
 801fb3c:	1cfb      	adds	r3, r7, #3
 801fb3e:	4611      	mov	r1, r2
 801fb40:	4618      	mov	r0, r3
 801fb42:	f7ff fe5d 	bl	801f800 <bitRead>
 801fb46:	4603      	mov	r3, r0
 801fb48:	2b00      	cmp	r3, #0
 801fb4a:	d009      	beq.n	801fb60 <ssd1362_drawByteAsRow+0x4c>
	{
			ssd1362_drawPixel(x+i, y, color, false);
 801fb4c:	68fb      	ldr	r3, [r7, #12]
 801fb4e:	b29a      	uxth	r2, r3
 801fb50:	88fb      	ldrh	r3, [r7, #6]
 801fb52:	4413      	add	r3, r2
 801fb54:	b298      	uxth	r0, r3
 801fb56:	78ba      	ldrb	r2, [r7, #2]
 801fb58:	88b9      	ldrh	r1, [r7, #4]
 801fb5a:	2300      	movs	r3, #0
 801fb5c:	f7ff fed6 	bl	801f90c <ssd1362_drawPixel>
	for (uint32_t i = 0; i < 8; i++)
 801fb60:	68fb      	ldr	r3, [r7, #12]
 801fb62:	3301      	adds	r3, #1
 801fb64:	60fb      	str	r3, [r7, #12]
 801fb66:	68fb      	ldr	r3, [r7, #12]
 801fb68:	2b07      	cmp	r3, #7
 801fb6a:	d9e5      	bls.n	801fb38 <ssd1362_drawByteAsRow+0x24>
		}
	}
}
 801fb6c:	bf00      	nop
 801fb6e:	bf00      	nop
 801fb70:	3714      	adds	r7, #20
 801fb72:	46bd      	mov	sp, r7
 801fb74:	bd90      	pop	{r4, r7, pc}
	...

0801fb78 <ssd1362_drawChar>:

void ssd1362_drawChar(uint16_t x, uint16_t y, uint8_t thisChar, uint8_t color)
{
 801fb78:	b590      	push	{r4, r7, lr}
 801fb7a:	b085      	sub	sp, #20
 801fb7c:	af00      	add	r7, sp, #0
 801fb7e:	4604      	mov	r4, r0
 801fb80:	4608      	mov	r0, r1
 801fb82:	4611      	mov	r1, r2
 801fb84:	461a      	mov	r2, r3
 801fb86:	4623      	mov	r3, r4
 801fb88:	80fb      	strh	r3, [r7, #6]
 801fb8a:	4603      	mov	r3, r0
 801fb8c:	80bb      	strh	r3, [r7, #4]
 801fb8e:	460b      	mov	r3, r1
 801fb90:	70fb      	strb	r3, [r7, #3]
 801fb92:	4613      	mov	r3, r2
 801fb94:	70bb      	strb	r3, [r7, #2]
	for (size_t i = 0; i < 8; i++)
 801fb96:	2300      	movs	r3, #0
 801fb98:	60fb      	str	r3, [r7, #12]
 801fb9a:	e012      	b.n	801fbc2 <ssd1362_drawChar+0x4a>
	{
		ssd1362_drawByteAsRow(x, y+i, font8x8_basic[(unsigned char)thisChar][i], color);
 801fb9c:	68fb      	ldr	r3, [r7, #12]
 801fb9e:	b29a      	uxth	r2, r3
 801fba0:	88bb      	ldrh	r3, [r7, #4]
 801fba2:	4413      	add	r3, r2
 801fba4:	b299      	uxth	r1, r3
 801fba6:	78fb      	ldrb	r3, [r7, #3]
 801fba8:	4a0a      	ldr	r2, [pc, #40]	; (801fbd4 <ssd1362_drawChar+0x5c>)
 801fbaa:	00db      	lsls	r3, r3, #3
 801fbac:	441a      	add	r2, r3
 801fbae:	68fb      	ldr	r3, [r7, #12]
 801fbb0:	4413      	add	r3, r2
 801fbb2:	781a      	ldrb	r2, [r3, #0]
 801fbb4:	78bb      	ldrb	r3, [r7, #2]
 801fbb6:	88f8      	ldrh	r0, [r7, #6]
 801fbb8:	f7ff ffac 	bl	801fb14 <ssd1362_drawByteAsRow>
	for (size_t i = 0; i < 8; i++)
 801fbbc:	68fb      	ldr	r3, [r7, #12]
 801fbbe:	3301      	adds	r3, #1
 801fbc0:	60fb      	str	r3, [r7, #12]
 801fbc2:	68fb      	ldr	r3, [r7, #12]
 801fbc4:	2b07      	cmp	r3, #7
 801fbc6:	d9e9      	bls.n	801fb9c <ssd1362_drawChar+0x24>
	}
}
 801fbc8:	bf00      	nop
 801fbca:	bf00      	nop
 801fbcc:	3714      	adds	r7, #20
 801fbce:	46bd      	mov	sp, r7
 801fbd0:	bd90      	pop	{r4, r7, pc}
 801fbd2:	bf00      	nop
 801fbd4:	24003050 	.word	0x24003050

0801fbd8 <ssd1362_drawCharArray>:

void ssd1362_drawCharArray(uint16_t x, uint16_t y, int8_t text[], uint8_t color, uint32_t size)
{
 801fbd8:	b580      	push	{r7, lr}
 801fbda:	b086      	sub	sp, #24
 801fbdc:	af00      	add	r7, sp, #0
 801fbde:	60ba      	str	r2, [r7, #8]
 801fbe0:	461a      	mov	r2, r3
 801fbe2:	4603      	mov	r3, r0
 801fbe4:	81fb      	strh	r3, [r7, #14]
 801fbe6:	460b      	mov	r3, r1
 801fbe8:	81bb      	strh	r3, [r7, #12]
 801fbea:	4613      	mov	r3, r2
 801fbec:	71fb      	strb	r3, [r7, #7]
	const int8_t* thisChar;
	uint16_t xOffset = 0;
 801fbee:	2300      	movs	r3, #0
 801fbf0:	827b      	strh	r3, [r7, #18]
	if(size==16)
 801fbf2:	6a3b      	ldr	r3, [r7, #32]
 801fbf4:	2b10      	cmp	r3, #16
 801fbf6:	d11a      	bne.n	801fc2e <ssd1362_drawCharArray+0x56>
	{
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 801fbf8:	68bb      	ldr	r3, [r7, #8]
 801fbfa:	617b      	str	r3, [r7, #20]
 801fbfc:	e011      	b.n	801fc22 <ssd1362_drawCharArray+0x4a>
		{
			ssd1362_drawChar16(x+xOffset, y, *thisChar, color);
 801fbfe:	89fa      	ldrh	r2, [r7, #14]
 801fc00:	8a7b      	ldrh	r3, [r7, #18]
 801fc02:	4413      	add	r3, r2
 801fc04:	b298      	uxth	r0, r3
 801fc06:	697b      	ldr	r3, [r7, #20]
 801fc08:	f993 3000 	ldrsb.w	r3, [r3]
 801fc0c:	b2da      	uxtb	r2, r3
 801fc0e:	79fb      	ldrb	r3, [r7, #7]
 801fc10:	89b9      	ldrh	r1, [r7, #12]
 801fc12:	f000 f861 	bl	801fcd8 <ssd1362_drawChar16>
			xOffset += 8;
 801fc16:	8a7b      	ldrh	r3, [r7, #18]
 801fc18:	3308      	adds	r3, #8
 801fc1a:	827b      	strh	r3, [r7, #18]
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 801fc1c:	697b      	ldr	r3, [r7, #20]
 801fc1e:	3301      	adds	r3, #1
 801fc20:	617b      	str	r3, [r7, #20]
 801fc22:	697b      	ldr	r3, [r7, #20]
 801fc24:	f993 3000 	ldrsb.w	r3, [r3]
 801fc28:	2b00      	cmp	r3, #0
 801fc2a:	d1e8      	bne.n	801fbfe <ssd1362_drawCharArray+0x26>
		{
			ssd1362_drawChar(x+xOffset, y, *thisChar, color);
			xOffset += 8;
		}
	}
}
 801fc2c:	e037      	b.n	801fc9e <ssd1362_drawCharArray+0xc6>
	} else if(size==32)
 801fc2e:	6a3b      	ldr	r3, [r7, #32]
 801fc30:	2b20      	cmp	r3, #32
 801fc32:	d11a      	bne.n	801fc6a <ssd1362_drawCharArray+0x92>
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 801fc34:	68bb      	ldr	r3, [r7, #8]
 801fc36:	617b      	str	r3, [r7, #20]
 801fc38:	e011      	b.n	801fc5e <ssd1362_drawCharArray+0x86>
			ssd1362_drawChar32(x+xOffset, y, *thisChar, color);
 801fc3a:	89fa      	ldrh	r2, [r7, #14]
 801fc3c:	8a7b      	ldrh	r3, [r7, #18]
 801fc3e:	4413      	add	r3, r2
 801fc40:	b298      	uxth	r0, r3
 801fc42:	697b      	ldr	r3, [r7, #20]
 801fc44:	f993 3000 	ldrsb.w	r3, [r3]
 801fc48:	b2da      	uxtb	r2, r3
 801fc4a:	79fb      	ldrb	r3, [r7, #7]
 801fc4c:	89b9      	ldrh	r1, [r7, #12]
 801fc4e:	f000 f887 	bl	801fd60 <ssd1362_drawChar32>
			xOffset += 16;
 801fc52:	8a7b      	ldrh	r3, [r7, #18]
 801fc54:	3310      	adds	r3, #16
 801fc56:	827b      	strh	r3, [r7, #18]
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 801fc58:	697b      	ldr	r3, [r7, #20]
 801fc5a:	3301      	adds	r3, #1
 801fc5c:	617b      	str	r3, [r7, #20]
 801fc5e:	697b      	ldr	r3, [r7, #20]
 801fc60:	f993 3000 	ldrsb.w	r3, [r3]
 801fc64:	2b00      	cmp	r3, #0
 801fc66:	d1e8      	bne.n	801fc3a <ssd1362_drawCharArray+0x62>
}
 801fc68:	e019      	b.n	801fc9e <ssd1362_drawCharArray+0xc6>
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 801fc6a:	68bb      	ldr	r3, [r7, #8]
 801fc6c:	617b      	str	r3, [r7, #20]
 801fc6e:	e011      	b.n	801fc94 <ssd1362_drawCharArray+0xbc>
			ssd1362_drawChar(x+xOffset, y, *thisChar, color);
 801fc70:	89fa      	ldrh	r2, [r7, #14]
 801fc72:	8a7b      	ldrh	r3, [r7, #18]
 801fc74:	4413      	add	r3, r2
 801fc76:	b298      	uxth	r0, r3
 801fc78:	697b      	ldr	r3, [r7, #20]
 801fc7a:	f993 3000 	ldrsb.w	r3, [r3]
 801fc7e:	b2da      	uxtb	r2, r3
 801fc80:	79fb      	ldrb	r3, [r7, #7]
 801fc82:	89b9      	ldrh	r1, [r7, #12]
 801fc84:	f7ff ff78 	bl	801fb78 <ssd1362_drawChar>
			xOffset += 8;
 801fc88:	8a7b      	ldrh	r3, [r7, #18]
 801fc8a:	3308      	adds	r3, #8
 801fc8c:	827b      	strh	r3, [r7, #18]
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 801fc8e:	697b      	ldr	r3, [r7, #20]
 801fc90:	3301      	adds	r3, #1
 801fc92:	617b      	str	r3, [r7, #20]
 801fc94:	697b      	ldr	r3, [r7, #20]
 801fc96:	f993 3000 	ldrsb.w	r3, [r3]
 801fc9a:	2b00      	cmp	r3, #0
 801fc9c:	d1e8      	bne.n	801fc70 <ssd1362_drawCharArray+0x98>
}
 801fc9e:	bf00      	nop
 801fca0:	3718      	adds	r7, #24
 801fca2:	46bd      	mov	sp, r7
 801fca4:	bd80      	pop	{r7, pc}

0801fca6 <ssd1362_drawString>:

void ssd1362_drawString(uint16_t x, uint16_t y, int8_t textString[], uint8_t color, uint32_t size)
{
 801fca6:	b580      	push	{r7, lr}
 801fca8:	b086      	sub	sp, #24
 801fcaa:	af02      	add	r7, sp, #8
 801fcac:	60ba      	str	r2, [r7, #8]
 801fcae:	461a      	mov	r2, r3
 801fcb0:	4603      	mov	r3, r0
 801fcb2:	81fb      	strh	r3, [r7, #14]
 801fcb4:	460b      	mov	r3, r1
 801fcb6:	81bb      	strh	r3, [r7, #12]
 801fcb8:	4613      	mov	r3, r2
 801fcba:	71fb      	strb	r3, [r7, #7]
//	uint8_t text[64];
//	textString.toCharArray(text, 64);
	ssd1362_drawCharArray(x,y, textString, color, size);
 801fcbc:	79fa      	ldrb	r2, [r7, #7]
 801fcbe:	89b9      	ldrh	r1, [r7, #12]
 801fcc0:	89f8      	ldrh	r0, [r7, #14]
 801fcc2:	69bb      	ldr	r3, [r7, #24]
 801fcc4:	9300      	str	r3, [sp, #0]
 801fcc6:	4613      	mov	r3, r2
 801fcc8:	68ba      	ldr	r2, [r7, #8]
 801fcca:	f7ff ff85 	bl	801fbd8 <ssd1362_drawCharArray>
}
 801fcce:	bf00      	nop
 801fcd0:	3710      	adds	r7, #16
 801fcd2:	46bd      	mov	sp, r7
 801fcd4:	bd80      	pop	{r7, pc}
	...

0801fcd8 <ssd1362_drawChar16>:

void ssd1362_drawChar16(uint16_t x, uint16_t y, uint8_t thisChar, uint8_t color)
{
 801fcd8:	b590      	push	{r4, r7, lr}
 801fcda:	b085      	sub	sp, #20
 801fcdc:	af00      	add	r7, sp, #0
 801fcde:	4604      	mov	r4, r0
 801fce0:	4608      	mov	r0, r1
 801fce2:	4611      	mov	r1, r2
 801fce4:	461a      	mov	r2, r3
 801fce6:	4623      	mov	r3, r4
 801fce8:	80fb      	strh	r3, [r7, #6]
 801fcea:	4603      	mov	r3, r0
 801fcec:	80bb      	strh	r3, [r7, #4]
 801fcee:	460b      	mov	r3, r1
 801fcf0:	70fb      	strb	r3, [r7, #3]
 801fcf2:	4613      	mov	r3, r2
 801fcf4:	70bb      	strb	r3, [r7, #2]
	for (size_t row = 0; row < 16; row++) {
 801fcf6:	2300      	movs	r3, #0
 801fcf8:	60fb      	str	r3, [r7, #12]
 801fcfa:	e027      	b.n	801fd4c <ssd1362_drawChar16+0x74>
		ssd1362_drawByteAsRow(x, y+row, font16x16[(unsigned char)thisChar][row*2], color);
 801fcfc:	68fb      	ldr	r3, [r7, #12]
 801fcfe:	b29a      	uxth	r2, r3
 801fd00:	88bb      	ldrh	r3, [r7, #4]
 801fd02:	4413      	add	r3, r2
 801fd04:	b299      	uxth	r1, r3
 801fd06:	78fa      	ldrb	r2, [r7, #3]
 801fd08:	68fb      	ldr	r3, [r7, #12]
 801fd0a:	005b      	lsls	r3, r3, #1
 801fd0c:	4813      	ldr	r0, [pc, #76]	; (801fd5c <ssd1362_drawChar16+0x84>)
 801fd0e:	0152      	lsls	r2, r2, #5
 801fd10:	4402      	add	r2, r0
 801fd12:	4413      	add	r3, r2
 801fd14:	781a      	ldrb	r2, [r3, #0]
 801fd16:	78bb      	ldrb	r3, [r7, #2]
 801fd18:	88f8      	ldrh	r0, [r7, #6]
 801fd1a:	f7ff fefb 	bl	801fb14 <ssd1362_drawByteAsRow>
		ssd1362_drawByteAsRow(x+8, y+row, font16x16[(unsigned char)thisChar][(row*2)+1], color);
 801fd1e:	88fb      	ldrh	r3, [r7, #6]
 801fd20:	3308      	adds	r3, #8
 801fd22:	b298      	uxth	r0, r3
 801fd24:	68fb      	ldr	r3, [r7, #12]
 801fd26:	b29a      	uxth	r2, r3
 801fd28:	88bb      	ldrh	r3, [r7, #4]
 801fd2a:	4413      	add	r3, r2
 801fd2c:	b299      	uxth	r1, r3
 801fd2e:	78fa      	ldrb	r2, [r7, #3]
 801fd30:	68fb      	ldr	r3, [r7, #12]
 801fd32:	005b      	lsls	r3, r3, #1
 801fd34:	3301      	adds	r3, #1
 801fd36:	4c09      	ldr	r4, [pc, #36]	; (801fd5c <ssd1362_drawChar16+0x84>)
 801fd38:	0152      	lsls	r2, r2, #5
 801fd3a:	4422      	add	r2, r4
 801fd3c:	4413      	add	r3, r2
 801fd3e:	781a      	ldrb	r2, [r3, #0]
 801fd40:	78bb      	ldrb	r3, [r7, #2]
 801fd42:	f7ff fee7 	bl	801fb14 <ssd1362_drawByteAsRow>
	for (size_t row = 0; row < 16; row++) {
 801fd46:	68fb      	ldr	r3, [r7, #12]
 801fd48:	3301      	adds	r3, #1
 801fd4a:	60fb      	str	r3, [r7, #12]
 801fd4c:	68fb      	ldr	r3, [r7, #12]
 801fd4e:	2b0f      	cmp	r3, #15
 801fd50:	d9d4      	bls.n	801fcfc <ssd1362_drawChar16+0x24>
	}
}
 801fd52:	bf00      	nop
 801fd54:	bf00      	nop
 801fd56:	3714      	adds	r7, #20
 801fd58:	46bd      	mov	sp, r7
 801fd5a:	bd90      	pop	{r4, r7, pc}
 801fd5c:	24000050 	.word	0x24000050

0801fd60 <ssd1362_drawChar32>:

void ssd1362_drawChar32(uint16_t x, uint16_t y, uint8_t thisChar, uint8_t color)
{
 801fd60:	b590      	push	{r4, r7, lr}
 801fd62:	b085      	sub	sp, #20
 801fd64:	af00      	add	r7, sp, #0
 801fd66:	4604      	mov	r4, r0
 801fd68:	4608      	mov	r0, r1
 801fd6a:	4611      	mov	r1, r2
 801fd6c:	461a      	mov	r2, r3
 801fd6e:	4623      	mov	r3, r4
 801fd70:	80fb      	strh	r3, [r7, #6]
 801fd72:	4603      	mov	r3, r0
 801fd74:	80bb      	strh	r3, [r7, #4]
 801fd76:	460b      	mov	r3, r1
 801fd78:	70fb      	strb	r3, [r7, #3]
 801fd7a:	4613      	mov	r3, r2
 801fd7c:	70bb      	strb	r3, [r7, #2]
	for (size_t row = 0; row < 32; row++) {
 801fd7e:	2300      	movs	r3, #0
 801fd80:	60fb      	str	r3, [r7, #12]
 801fd82:	e027      	b.n	801fdd4 <ssd1362_drawChar32+0x74>
		ssd1362_drawByteAsRow(x, y+row, font16x32[(unsigned char)thisChar][row*2], color);
 801fd84:	68fb      	ldr	r3, [r7, #12]
 801fd86:	b29a      	uxth	r2, r3
 801fd88:	88bb      	ldrh	r3, [r7, #4]
 801fd8a:	4413      	add	r3, r2
 801fd8c:	b299      	uxth	r1, r3
 801fd8e:	78fa      	ldrb	r2, [r7, #3]
 801fd90:	68fb      	ldr	r3, [r7, #12]
 801fd92:	005b      	lsls	r3, r3, #1
 801fd94:	4813      	ldr	r0, [pc, #76]	; (801fde4 <ssd1362_drawChar32+0x84>)
 801fd96:	0192      	lsls	r2, r2, #6
 801fd98:	4402      	add	r2, r0
 801fd9a:	4413      	add	r3, r2
 801fd9c:	781a      	ldrb	r2, [r3, #0]
 801fd9e:	78bb      	ldrb	r3, [r7, #2]
 801fda0:	88f8      	ldrh	r0, [r7, #6]
 801fda2:	f7ff feb7 	bl	801fb14 <ssd1362_drawByteAsRow>
		ssd1362_drawByteAsRow(x+8, y+row, font16x32[(unsigned char)thisChar][(row*2)+1], color);
 801fda6:	88fb      	ldrh	r3, [r7, #6]
 801fda8:	3308      	adds	r3, #8
 801fdaa:	b298      	uxth	r0, r3
 801fdac:	68fb      	ldr	r3, [r7, #12]
 801fdae:	b29a      	uxth	r2, r3
 801fdb0:	88bb      	ldrh	r3, [r7, #4]
 801fdb2:	4413      	add	r3, r2
 801fdb4:	b299      	uxth	r1, r3
 801fdb6:	78fa      	ldrb	r2, [r7, #3]
 801fdb8:	68fb      	ldr	r3, [r7, #12]
 801fdba:	005b      	lsls	r3, r3, #1
 801fdbc:	3301      	adds	r3, #1
 801fdbe:	4c09      	ldr	r4, [pc, #36]	; (801fde4 <ssd1362_drawChar32+0x84>)
 801fdc0:	0192      	lsls	r2, r2, #6
 801fdc2:	4422      	add	r2, r4
 801fdc4:	4413      	add	r3, r2
 801fdc6:	781a      	ldrb	r2, [r3, #0]
 801fdc8:	78bb      	ldrb	r3, [r7, #2]
 801fdca:	f7ff fea3 	bl	801fb14 <ssd1362_drawByteAsRow>
	for (size_t row = 0; row < 32; row++) {
 801fdce:	68fb      	ldr	r3, [r7, #12]
 801fdd0:	3301      	adds	r3, #1
 801fdd2:	60fb      	str	r3, [r7, #12]
 801fdd4:	68fb      	ldr	r3, [r7, #12]
 801fdd6:	2b1f      	cmp	r3, #31
 801fdd8:	d9d4      	bls.n	801fd84 <ssd1362_drawChar32+0x24>
	}
}
 801fdda:	bf00      	nop
 801fddc:	bf00      	nop
 801fdde:	3714      	adds	r7, #20
 801fde0:	46bd      	mov	sp, r7
 801fde2:	bd90      	pop	{r4, r7, pc}
 801fde4:	24001050 	.word	0x24001050

0801fde8 <ssd1362_clearBuffer>:
	HAL_Delay(15);
	ssd1362_stopScrolling();
}

void ssd1362_clearBuffer()
{
 801fde8:	b580      	push	{r7, lr}
 801fdea:	b082      	sub	sp, #8
 801fdec:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < ((SSD1362_HEIGHT * SSD1362_WIDTH) / 2); i++)
 801fdee:	2300      	movs	r3, #0
 801fdf0:	607b      	str	r3, [r7, #4]
 801fdf2:	e01a      	b.n	801fe2a <ssd1362_clearBuffer+0x42>
	{
		// If there is a non-zero (non-black) byte here, make sure it gets updated
		if (frameBuffer[i])
 801fdf4:	4a11      	ldr	r2, [pc, #68]	; (801fe3c <ssd1362_clearBuffer+0x54>)
 801fdf6:	687b      	ldr	r3, [r7, #4]
 801fdf8:	4413      	add	r3, r2
 801fdfa:	781b      	ldrb	r3, [r3, #0]
 801fdfc:	2b00      	cmp	r3, #0
 801fdfe:	d011      	beq.n	801fe24 <ssd1362_clearBuffer+0x3c>
		{
			frameBuffer[i] = 0;
 801fe00:	4a0e      	ldr	r2, [pc, #56]	; (801fe3c <ssd1362_clearBuffer+0x54>)
 801fe02:	687b      	ldr	r3, [r7, #4]
 801fe04:	4413      	add	r3, r2
 801fe06:	2200      	movs	r2, #0
 801fe08:	701a      	strb	r2, [r3, #0]
			bitWrite(&changedPixels[i/8], i%8, 1); // Mark this pixel as needing an update
 801fe0a:	687b      	ldr	r3, [r7, #4]
 801fe0c:	08db      	lsrs	r3, r3, #3
 801fe0e:	4a0c      	ldr	r2, [pc, #48]	; (801fe40 <ssd1362_clearBuffer+0x58>)
 801fe10:	1898      	adds	r0, r3, r2
 801fe12:	687b      	ldr	r3, [r7, #4]
 801fe14:	b2db      	uxtb	r3, r3
 801fe16:	f003 0307 	and.w	r3, r3, #7
 801fe1a:	b2db      	uxtb	r3, r3
 801fe1c:	2201      	movs	r2, #1
 801fe1e:	4619      	mov	r1, r3
 801fe20:	f7ff fcc0 	bl	801f7a4 <bitWrite>
	for (uint32_t i = 0; i < ((SSD1362_HEIGHT * SSD1362_WIDTH) / 2); i++)
 801fe24:	687b      	ldr	r3, [r7, #4]
 801fe26:	3301      	adds	r3, #1
 801fe28:	607b      	str	r3, [r7, #4]
 801fe2a:	687b      	ldr	r3, [r7, #4]
 801fe2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801fe30:	d3e0      	bcc.n	801fdf4 <ssd1362_clearBuffer+0xc>
		}
	}
}
 801fe32:	bf00      	nop
 801fe34:	bf00      	nop
 801fe36:	3708      	adds	r7, #8
 801fe38:	46bd      	mov	sp, r7
 801fe3a:	bd80      	pop	{r7, pc}
 801fe3c:	24008ad4 	.word	0x24008ad4
 801fe40:	240082d4 	.word	0x240082d4

0801fe44 <ssd1362_writeFullBuffer>:

//Outputs the full framebuffer to the display
void ssd1362_writeFullBuffer()
{
 801fe44:	b580      	push	{r7, lr}
 801fe46:	b082      	sub	sp, #8
 801fe48:	af00      	add	r7, sp, #0
	ssd1362_setWriteZone(0, 0, (SSD1362_WIDTH / 2) - 1, SSD1362_HEIGHT - 1); //Full display
 801fe4a:	233f      	movs	r3, #63	; 0x3f
 801fe4c:	227f      	movs	r2, #127	; 0x7f
 801fe4e:	2100      	movs	r1, #0
 801fe50:	2000      	movs	r0, #0
 801fe52:	f7ff fceb 	bl	801f82c <ssd1362_setWriteZone>
	for(uint32_t i = 0; i < ((SSD1362_HEIGHT * SSD1362_WIDTH) / 2); i++)
 801fe56:	2300      	movs	r3, #0
 801fe58:	607b      	str	r3, [r7, #4]
 801fe5a:	e009      	b.n	801fe70 <ssd1362_writeFullBuffer+0x2c>
	{
		ssd1362_writeData(frameBuffer[i]);
 801fe5c:	4a10      	ldr	r2, [pc, #64]	; (801fea0 <ssd1362_writeFullBuffer+0x5c>)
 801fe5e:	687b      	ldr	r3, [r7, #4]
 801fe60:	4413      	add	r3, r2
 801fe62:	781b      	ldrb	r3, [r3, #0]
 801fe64:	4618      	mov	r0, r3
 801fe66:	f7ff fc89 	bl	801f77c <ssd1362_writeData>
	for(uint32_t i = 0; i < ((SSD1362_HEIGHT * SSD1362_WIDTH) / 2); i++)
 801fe6a:	687b      	ldr	r3, [r7, #4]
 801fe6c:	3301      	adds	r3, #1
 801fe6e:	607b      	str	r3, [r7, #4]
 801fe70:	687b      	ldr	r3, [r7, #4]
 801fe72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801fe76:	d3f1      	bcc.n	801fe5c <ssd1362_writeFullBuffer+0x18>
	}
	for (uint32_t i = 0; i < 1024; i++)
 801fe78:	2300      	movs	r3, #0
 801fe7a:	603b      	str	r3, [r7, #0]
 801fe7c:	e007      	b.n	801fe8e <ssd1362_writeFullBuffer+0x4a>
	{
		changedPixels[i] = 0; // Set all pixels as up to date.
 801fe7e:	4a09      	ldr	r2, [pc, #36]	; (801fea4 <ssd1362_writeFullBuffer+0x60>)
 801fe80:	683b      	ldr	r3, [r7, #0]
 801fe82:	4413      	add	r3, r2
 801fe84:	2200      	movs	r2, #0
 801fe86:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < 1024; i++)
 801fe88:	683b      	ldr	r3, [r7, #0]
 801fe8a:	3301      	adds	r3, #1
 801fe8c:	603b      	str	r3, [r7, #0]
 801fe8e:	683b      	ldr	r3, [r7, #0]
 801fe90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801fe94:	d3f3      	bcc.n	801fe7e <ssd1362_writeFullBuffer+0x3a>
	}
}
 801fe96:	bf00      	nop
 801fe98:	bf00      	nop
 801fe9a:	3708      	adds	r7, #8
 801fe9c:	46bd      	mov	sp, r7
 801fe9e:	bd80      	pop	{r7, pc}
 801fea0:	24008ad4 	.word	0x24008ad4
 801fea4:	240082d4 	.word	0x240082d4

0801fea8 <ssd1362_init>:
	ssd1362_writeCmd(contrast);  //Contrast byte
}

//Sends all the boilerplate startup and config commands to the driver
void ssd1362_init()
{
 801fea8:	b580      	push	{r7, lr}
 801feaa:	af00      	add	r7, sp, #0
	// Enable 12V power DC/DC for CIS
	HAL_GPIO_WritePin(EN_12V_GPIO_Port, EN_12V_Pin, GPIO_PIN_SET);
 801feac:	2201      	movs	r2, #1
 801feae:	2120      	movs	r1, #32
 801feb0:	483f      	ldr	r0, [pc, #252]	; (801ffb0 <ssd1362_init+0x108>)
 801feb2:	f7ea fbef 	bl	800a694 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 801feb6:	2064      	movs	r0, #100	; 0x64
 801feb8:	f7e4 f924 	bl	8004104 <HAL_Delay>

    // Reset OLED
    ssd1362_Reset();
 801febc:	f7ff fc34 	bl	801f728 <ssd1362_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 801fec0:	2064      	movs	r0, #100	; 0x64
 801fec2:	f7e4 f91f 	bl	8004104 <HAL_Delay>

    // Init OLED
    ssd1362_writeCmd(0XFD); //Set Command Lock
 801fec6:	20fd      	movs	r0, #253	; 0xfd
 801fec8:	f7ff fc46 	bl	801f758 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X12); //(12H=Unlock,16H=Lock)
 801fecc:	2012      	movs	r0, #18
 801fece:	f7ff fc43 	bl	801f758 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XAE); //Display OFF(Sleep Mode)
 801fed2:	20ae      	movs	r0, #174	; 0xae
 801fed4:	f7ff fc40 	bl	801f758 <ssd1362_writeCmd>

    ssd1362_writeCmd(0X15); //Set column Address
 801fed8:	2015      	movs	r0, #21
 801feda:	f7ff fc3d 	bl	801f758 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X00); //Start column Address
 801fede:	2000      	movs	r0, #0
 801fee0:	f7ff fc3a 	bl	801f758 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X7F); //End column Address
 801fee4:	207f      	movs	r0, #127	; 0x7f
 801fee6:	f7ff fc37 	bl	801f758 <ssd1362_writeCmd>

    ssd1362_writeCmd(0X75); //Set Row Address
 801feea:	2075      	movs	r0, #117	; 0x75
 801feec:	f7ff fc34 	bl	801f758 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X00); //Start Row Address
 801fef0:	2000      	movs	r0, #0
 801fef2:	f7ff fc31 	bl	801f758 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X3F); //End Row Address
 801fef6:	203f      	movs	r0, #63	; 0x3f
 801fef8:	f7ff fc2e 	bl	801f758 <ssd1362_writeCmd>

    ssd1362_writeCmd(0X81); //Set contrast
 801fefc:	2081      	movs	r0, #129	; 0x81
 801fefe:	f7ff fc2b 	bl	801f758 <ssd1362_writeCmd>
    ssd1362_writeCmd(0x2f);
 801ff02:	202f      	movs	r0, #47	; 0x2f
 801ff04:	f7ff fc28 	bl	801f758 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA0); //Set Remap
 801ff08:	20a0      	movs	r0, #160	; 0xa0
 801ff0a:	f7ff fc25 	bl	801f758 <ssd1362_writeCmd>
    ssd1362_writeCmd(0XC3);
 801ff0e:	20c3      	movs	r0, #195	; 0xc3
 801ff10:	f7ff fc22 	bl	801f758 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA1); //Set Display Start Line
 801ff14:	20a1      	movs	r0, #161	; 0xa1
 801ff16:	f7ff fc1f 	bl	801f758 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X00);
 801ff1a:	2000      	movs	r0, #0
 801ff1c:	f7ff fc1c 	bl	801f758 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA2); //Set Display Offset
 801ff20:	20a2      	movs	r0, #162	; 0xa2
 801ff22:	f7ff fc19 	bl	801f758 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X00);
 801ff26:	2000      	movs	r0, #0
 801ff28:	f7ff fc16 	bl	801f758 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA4); //Normal Display
 801ff2c:	20a4      	movs	r0, #164	; 0xa4
 801ff2e:	f7ff fc13 	bl	801f758 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA8); //Set Multiplex Ratio
 801ff32:	20a8      	movs	r0, #168	; 0xa8
 801ff34:	f7ff fc10 	bl	801f758 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X3F);
 801ff38:	203f      	movs	r0, #63	; 0x3f
 801ff3a:	f7ff fc0d 	bl	801f758 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XAB); //Set VDD regulator
 801ff3e:	20ab      	movs	r0, #171	; 0xab
 801ff40:	f7ff fc0a 	bl	801f758 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X01); //Regulator Enable
 801ff44:	2001      	movs	r0, #1
 801ff46:	f7ff fc07 	bl	801f758 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XAD); //External /Internal IREF Selection
 801ff4a:	20ad      	movs	r0, #173	; 0xad
 801ff4c:	f7ff fc04 	bl	801f758 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X8E);
 801ff50:	208e      	movs	r0, #142	; 0x8e
 801ff52:	f7ff fc01 	bl	801f758 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XB1); //Set Phase Length
 801ff56:	20b1      	movs	r0, #177	; 0xb1
 801ff58:	f7ff fbfe 	bl	801f758 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X22);
 801ff5c:	2022      	movs	r0, #34	; 0x22
 801ff5e:	f7ff fbfb 	bl	801f758 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XB3); //Display clock Divider
 801ff62:	20b3      	movs	r0, #179	; 0xb3
 801ff64:	f7ff fbf8 	bl	801f758 <ssd1362_writeCmd>
    ssd1362_writeCmd(0XA0);
 801ff68:	20a0      	movs	r0, #160	; 0xa0
 801ff6a:	f7ff fbf5 	bl	801f758 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XB6); //Set Second pre-charge Period
 801ff6e:	20b6      	movs	r0, #182	; 0xb6
 801ff70:	f7ff fbf2 	bl	801f758 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X04);
 801ff74:	2004      	movs	r0, #4
 801ff76:	f7ff fbef 	bl	801f758 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XB9); //Set Linear LUT
 801ff7a:	20b9      	movs	r0, #185	; 0xb9
 801ff7c:	f7ff fbec 	bl	801f758 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XBc); //Set pre-charge voltage level
 801ff80:	20bc      	movs	r0, #188	; 0xbc
 801ff82:	f7ff fbe9 	bl	801f758 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X10); //0.5*Vcc
 801ff86:	2010      	movs	r0, #16
 801ff88:	f7ff fbe6 	bl	801f758 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XBD); //Pre-charge voltage capacitor Selection
 801ff8c:	20bd      	movs	r0, #189	; 0xbd
 801ff8e:	f7ff fbe3 	bl	801f758 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X01);
 801ff92:	2001      	movs	r0, #1
 801ff94:	f7ff fbe0 	bl	801f758 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XBE); //Set COM deselect voltage level
 801ff98:	20be      	movs	r0, #190	; 0xbe
 801ff9a:	f7ff fbdd 	bl	801f758 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X07); //0.82*Vcc
 801ff9e:	2007      	movs	r0, #7
 801ffa0:	f7ff fbda 	bl	801f758 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XAF); //Display ON
 801ffa4:	20af      	movs	r0, #175	; 0xaf
 801ffa6:	f7ff fbd7 	bl	801f758 <ssd1362_writeCmd>
}
 801ffaa:	bf00      	nop
 801ffac:	bd80      	pop	{r7, pc}
 801ffae:	bf00      	nop
 801ffb0:	58021800 	.word	0x58021800

0801ffb4 <__libc_init_array>:
 801ffb4:	b570      	push	{r4, r5, r6, lr}
 801ffb6:	4d0d      	ldr	r5, [pc, #52]	; (801ffec <__libc_init_array+0x38>)
 801ffb8:	4c0d      	ldr	r4, [pc, #52]	; (801fff0 <__libc_init_array+0x3c>)
 801ffba:	1b64      	subs	r4, r4, r5
 801ffbc:	10a4      	asrs	r4, r4, #2
 801ffbe:	2600      	movs	r6, #0
 801ffc0:	42a6      	cmp	r6, r4
 801ffc2:	d109      	bne.n	801ffd8 <__libc_init_array+0x24>
 801ffc4:	4d0b      	ldr	r5, [pc, #44]	; (801fff4 <__libc_init_array+0x40>)
 801ffc6:	4c0c      	ldr	r4, [pc, #48]	; (801fff8 <__libc_init_array+0x44>)
 801ffc8:	f005 fdcc 	bl	8025b64 <_init>
 801ffcc:	1b64      	subs	r4, r4, r5
 801ffce:	10a4      	asrs	r4, r4, #2
 801ffd0:	2600      	movs	r6, #0
 801ffd2:	42a6      	cmp	r6, r4
 801ffd4:	d105      	bne.n	801ffe2 <__libc_init_array+0x2e>
 801ffd6:	bd70      	pop	{r4, r5, r6, pc}
 801ffd8:	f855 3b04 	ldr.w	r3, [r5], #4
 801ffdc:	4798      	blx	r3
 801ffde:	3601      	adds	r6, #1
 801ffe0:	e7ee      	b.n	801ffc0 <__libc_init_array+0xc>
 801ffe2:	f855 3b04 	ldr.w	r3, [r5], #4
 801ffe6:	4798      	blx	r3
 801ffe8:	3601      	adds	r6, #1
 801ffea:	e7f2      	b.n	801ffd2 <__libc_init_array+0x1e>
 801ffec:	0802b1a0 	.word	0x0802b1a0
 801fff0:	0802b1a0 	.word	0x0802b1a0
 801fff4:	0802b1a0 	.word	0x0802b1a0
 801fff8:	0802b1a4 	.word	0x0802b1a4

0801fffc <malloc>:
 801fffc:	4b02      	ldr	r3, [pc, #8]	; (8020008 <malloc+0xc>)
 801fffe:	4601      	mov	r1, r0
 8020000:	6818      	ldr	r0, [r3, #0]
 8020002:	f000 b891 	b.w	8020128 <_malloc_r>
 8020006:	bf00      	nop
 8020008:	24003450 	.word	0x24003450

0802000c <memcmp>:
 802000c:	b530      	push	{r4, r5, lr}
 802000e:	3901      	subs	r1, #1
 8020010:	2400      	movs	r4, #0
 8020012:	42a2      	cmp	r2, r4
 8020014:	d101      	bne.n	802001a <memcmp+0xe>
 8020016:	2000      	movs	r0, #0
 8020018:	e005      	b.n	8020026 <memcmp+0x1a>
 802001a:	5d03      	ldrb	r3, [r0, r4]
 802001c:	3401      	adds	r4, #1
 802001e:	5d0d      	ldrb	r5, [r1, r4]
 8020020:	42ab      	cmp	r3, r5
 8020022:	d0f6      	beq.n	8020012 <memcmp+0x6>
 8020024:	1b58      	subs	r0, r3, r5
 8020026:	bd30      	pop	{r4, r5, pc}

08020028 <memcpy>:
 8020028:	440a      	add	r2, r1
 802002a:	4291      	cmp	r1, r2
 802002c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8020030:	d100      	bne.n	8020034 <memcpy+0xc>
 8020032:	4770      	bx	lr
 8020034:	b510      	push	{r4, lr}
 8020036:	f811 4b01 	ldrb.w	r4, [r1], #1
 802003a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802003e:	4291      	cmp	r1, r2
 8020040:	d1f9      	bne.n	8020036 <memcpy+0xe>
 8020042:	bd10      	pop	{r4, pc}

08020044 <memmove>:
 8020044:	4288      	cmp	r0, r1
 8020046:	b510      	push	{r4, lr}
 8020048:	eb01 0402 	add.w	r4, r1, r2
 802004c:	d902      	bls.n	8020054 <memmove+0x10>
 802004e:	4284      	cmp	r4, r0
 8020050:	4623      	mov	r3, r4
 8020052:	d807      	bhi.n	8020064 <memmove+0x20>
 8020054:	1e43      	subs	r3, r0, #1
 8020056:	42a1      	cmp	r1, r4
 8020058:	d008      	beq.n	802006c <memmove+0x28>
 802005a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802005e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020062:	e7f8      	b.n	8020056 <memmove+0x12>
 8020064:	4402      	add	r2, r0
 8020066:	4601      	mov	r1, r0
 8020068:	428a      	cmp	r2, r1
 802006a:	d100      	bne.n	802006e <memmove+0x2a>
 802006c:	bd10      	pop	{r4, pc}
 802006e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8020072:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8020076:	e7f7      	b.n	8020068 <memmove+0x24>

08020078 <memset>:
 8020078:	4402      	add	r2, r0
 802007a:	4603      	mov	r3, r0
 802007c:	4293      	cmp	r3, r2
 802007e:	d100      	bne.n	8020082 <memset+0xa>
 8020080:	4770      	bx	lr
 8020082:	f803 1b01 	strb.w	r1, [r3], #1
 8020086:	e7f9      	b.n	802007c <memset+0x4>

08020088 <_free_r>:
 8020088:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802008a:	2900      	cmp	r1, #0
 802008c:	d048      	beq.n	8020120 <_free_r+0x98>
 802008e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020092:	9001      	str	r0, [sp, #4]
 8020094:	2b00      	cmp	r3, #0
 8020096:	f1a1 0404 	sub.w	r4, r1, #4
 802009a:	bfb8      	it	lt
 802009c:	18e4      	addlt	r4, r4, r3
 802009e:	f003 fb21 	bl	80236e4 <__malloc_lock>
 80200a2:	4a20      	ldr	r2, [pc, #128]	; (8020124 <_free_r+0x9c>)
 80200a4:	9801      	ldr	r0, [sp, #4]
 80200a6:	6813      	ldr	r3, [r2, #0]
 80200a8:	4615      	mov	r5, r2
 80200aa:	b933      	cbnz	r3, 80200ba <_free_r+0x32>
 80200ac:	6063      	str	r3, [r4, #4]
 80200ae:	6014      	str	r4, [r2, #0]
 80200b0:	b003      	add	sp, #12
 80200b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80200b6:	f003 bb1b 	b.w	80236f0 <__malloc_unlock>
 80200ba:	42a3      	cmp	r3, r4
 80200bc:	d90b      	bls.n	80200d6 <_free_r+0x4e>
 80200be:	6821      	ldr	r1, [r4, #0]
 80200c0:	1862      	adds	r2, r4, r1
 80200c2:	4293      	cmp	r3, r2
 80200c4:	bf04      	itt	eq
 80200c6:	681a      	ldreq	r2, [r3, #0]
 80200c8:	685b      	ldreq	r3, [r3, #4]
 80200ca:	6063      	str	r3, [r4, #4]
 80200cc:	bf04      	itt	eq
 80200ce:	1852      	addeq	r2, r2, r1
 80200d0:	6022      	streq	r2, [r4, #0]
 80200d2:	602c      	str	r4, [r5, #0]
 80200d4:	e7ec      	b.n	80200b0 <_free_r+0x28>
 80200d6:	461a      	mov	r2, r3
 80200d8:	685b      	ldr	r3, [r3, #4]
 80200da:	b10b      	cbz	r3, 80200e0 <_free_r+0x58>
 80200dc:	42a3      	cmp	r3, r4
 80200de:	d9fa      	bls.n	80200d6 <_free_r+0x4e>
 80200e0:	6811      	ldr	r1, [r2, #0]
 80200e2:	1855      	adds	r5, r2, r1
 80200e4:	42a5      	cmp	r5, r4
 80200e6:	d10b      	bne.n	8020100 <_free_r+0x78>
 80200e8:	6824      	ldr	r4, [r4, #0]
 80200ea:	4421      	add	r1, r4
 80200ec:	1854      	adds	r4, r2, r1
 80200ee:	42a3      	cmp	r3, r4
 80200f0:	6011      	str	r1, [r2, #0]
 80200f2:	d1dd      	bne.n	80200b0 <_free_r+0x28>
 80200f4:	681c      	ldr	r4, [r3, #0]
 80200f6:	685b      	ldr	r3, [r3, #4]
 80200f8:	6053      	str	r3, [r2, #4]
 80200fa:	4421      	add	r1, r4
 80200fc:	6011      	str	r1, [r2, #0]
 80200fe:	e7d7      	b.n	80200b0 <_free_r+0x28>
 8020100:	d902      	bls.n	8020108 <_free_r+0x80>
 8020102:	230c      	movs	r3, #12
 8020104:	6003      	str	r3, [r0, #0]
 8020106:	e7d3      	b.n	80200b0 <_free_r+0x28>
 8020108:	6825      	ldr	r5, [r4, #0]
 802010a:	1961      	adds	r1, r4, r5
 802010c:	428b      	cmp	r3, r1
 802010e:	bf04      	itt	eq
 8020110:	6819      	ldreq	r1, [r3, #0]
 8020112:	685b      	ldreq	r3, [r3, #4]
 8020114:	6063      	str	r3, [r4, #4]
 8020116:	bf04      	itt	eq
 8020118:	1949      	addeq	r1, r1, r5
 802011a:	6021      	streq	r1, [r4, #0]
 802011c:	6054      	str	r4, [r2, #4]
 802011e:	e7c7      	b.n	80200b0 <_free_r+0x28>
 8020120:	b003      	add	sp, #12
 8020122:	bd30      	pop	{r4, r5, pc}
 8020124:	24004aec 	.word	0x24004aec

08020128 <_malloc_r>:
 8020128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802012a:	1ccd      	adds	r5, r1, #3
 802012c:	f025 0503 	bic.w	r5, r5, #3
 8020130:	3508      	adds	r5, #8
 8020132:	2d0c      	cmp	r5, #12
 8020134:	bf38      	it	cc
 8020136:	250c      	movcc	r5, #12
 8020138:	2d00      	cmp	r5, #0
 802013a:	4606      	mov	r6, r0
 802013c:	db01      	blt.n	8020142 <_malloc_r+0x1a>
 802013e:	42a9      	cmp	r1, r5
 8020140:	d903      	bls.n	802014a <_malloc_r+0x22>
 8020142:	230c      	movs	r3, #12
 8020144:	6033      	str	r3, [r6, #0]
 8020146:	2000      	movs	r0, #0
 8020148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802014a:	f003 facb 	bl	80236e4 <__malloc_lock>
 802014e:	4921      	ldr	r1, [pc, #132]	; (80201d4 <_malloc_r+0xac>)
 8020150:	680a      	ldr	r2, [r1, #0]
 8020152:	4614      	mov	r4, r2
 8020154:	b99c      	cbnz	r4, 802017e <_malloc_r+0x56>
 8020156:	4f20      	ldr	r7, [pc, #128]	; (80201d8 <_malloc_r+0xb0>)
 8020158:	683b      	ldr	r3, [r7, #0]
 802015a:	b923      	cbnz	r3, 8020166 <_malloc_r+0x3e>
 802015c:	4621      	mov	r1, r4
 802015e:	4630      	mov	r0, r6
 8020160:	f000 ff52 	bl	8021008 <_sbrk_r>
 8020164:	6038      	str	r0, [r7, #0]
 8020166:	4629      	mov	r1, r5
 8020168:	4630      	mov	r0, r6
 802016a:	f000 ff4d 	bl	8021008 <_sbrk_r>
 802016e:	1c43      	adds	r3, r0, #1
 8020170:	d123      	bne.n	80201ba <_malloc_r+0x92>
 8020172:	230c      	movs	r3, #12
 8020174:	6033      	str	r3, [r6, #0]
 8020176:	4630      	mov	r0, r6
 8020178:	f003 faba 	bl	80236f0 <__malloc_unlock>
 802017c:	e7e3      	b.n	8020146 <_malloc_r+0x1e>
 802017e:	6823      	ldr	r3, [r4, #0]
 8020180:	1b5b      	subs	r3, r3, r5
 8020182:	d417      	bmi.n	80201b4 <_malloc_r+0x8c>
 8020184:	2b0b      	cmp	r3, #11
 8020186:	d903      	bls.n	8020190 <_malloc_r+0x68>
 8020188:	6023      	str	r3, [r4, #0]
 802018a:	441c      	add	r4, r3
 802018c:	6025      	str	r5, [r4, #0]
 802018e:	e004      	b.n	802019a <_malloc_r+0x72>
 8020190:	6863      	ldr	r3, [r4, #4]
 8020192:	42a2      	cmp	r2, r4
 8020194:	bf0c      	ite	eq
 8020196:	600b      	streq	r3, [r1, #0]
 8020198:	6053      	strne	r3, [r2, #4]
 802019a:	4630      	mov	r0, r6
 802019c:	f003 faa8 	bl	80236f0 <__malloc_unlock>
 80201a0:	f104 000b 	add.w	r0, r4, #11
 80201a4:	1d23      	adds	r3, r4, #4
 80201a6:	f020 0007 	bic.w	r0, r0, #7
 80201aa:	1ac2      	subs	r2, r0, r3
 80201ac:	d0cc      	beq.n	8020148 <_malloc_r+0x20>
 80201ae:	1a1b      	subs	r3, r3, r0
 80201b0:	50a3      	str	r3, [r4, r2]
 80201b2:	e7c9      	b.n	8020148 <_malloc_r+0x20>
 80201b4:	4622      	mov	r2, r4
 80201b6:	6864      	ldr	r4, [r4, #4]
 80201b8:	e7cc      	b.n	8020154 <_malloc_r+0x2c>
 80201ba:	1cc4      	adds	r4, r0, #3
 80201bc:	f024 0403 	bic.w	r4, r4, #3
 80201c0:	42a0      	cmp	r0, r4
 80201c2:	d0e3      	beq.n	802018c <_malloc_r+0x64>
 80201c4:	1a21      	subs	r1, r4, r0
 80201c6:	4630      	mov	r0, r6
 80201c8:	f000 ff1e 	bl	8021008 <_sbrk_r>
 80201cc:	3001      	adds	r0, #1
 80201ce:	d1dd      	bne.n	802018c <_malloc_r+0x64>
 80201d0:	e7cf      	b.n	8020172 <_malloc_r+0x4a>
 80201d2:	bf00      	nop
 80201d4:	24004aec 	.word	0x24004aec
 80201d8:	24004af0 	.word	0x24004af0

080201dc <__cvt>:
 80201dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80201de:	ed2d 8b02 	vpush	{d8}
 80201e2:	eeb0 8b40 	vmov.f64	d8, d0
 80201e6:	b085      	sub	sp, #20
 80201e8:	4617      	mov	r7, r2
 80201ea:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80201ec:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80201ee:	ee18 2a90 	vmov	r2, s17
 80201f2:	f025 0520 	bic.w	r5, r5, #32
 80201f6:	2a00      	cmp	r2, #0
 80201f8:	bfb6      	itet	lt
 80201fa:	222d      	movlt	r2, #45	; 0x2d
 80201fc:	2200      	movge	r2, #0
 80201fe:	eeb1 8b40 	vneglt.f64	d8, d0
 8020202:	2d46      	cmp	r5, #70	; 0x46
 8020204:	460c      	mov	r4, r1
 8020206:	701a      	strb	r2, [r3, #0]
 8020208:	d004      	beq.n	8020214 <__cvt+0x38>
 802020a:	2d45      	cmp	r5, #69	; 0x45
 802020c:	d100      	bne.n	8020210 <__cvt+0x34>
 802020e:	3401      	adds	r4, #1
 8020210:	2102      	movs	r1, #2
 8020212:	e000      	b.n	8020216 <__cvt+0x3a>
 8020214:	2103      	movs	r1, #3
 8020216:	ab03      	add	r3, sp, #12
 8020218:	9301      	str	r3, [sp, #4]
 802021a:	ab02      	add	r3, sp, #8
 802021c:	9300      	str	r3, [sp, #0]
 802021e:	4622      	mov	r2, r4
 8020220:	4633      	mov	r3, r6
 8020222:	eeb0 0b48 	vmov.f64	d0, d8
 8020226:	f001 ff1f 	bl	8022068 <_dtoa_r>
 802022a:	2d47      	cmp	r5, #71	; 0x47
 802022c:	d109      	bne.n	8020242 <__cvt+0x66>
 802022e:	07fb      	lsls	r3, r7, #31
 8020230:	d407      	bmi.n	8020242 <__cvt+0x66>
 8020232:	9b03      	ldr	r3, [sp, #12]
 8020234:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020236:	1a1b      	subs	r3, r3, r0
 8020238:	6013      	str	r3, [r2, #0]
 802023a:	b005      	add	sp, #20
 802023c:	ecbd 8b02 	vpop	{d8}
 8020240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020242:	2d46      	cmp	r5, #70	; 0x46
 8020244:	eb00 0204 	add.w	r2, r0, r4
 8020248:	d10c      	bne.n	8020264 <__cvt+0x88>
 802024a:	7803      	ldrb	r3, [r0, #0]
 802024c:	2b30      	cmp	r3, #48	; 0x30
 802024e:	d107      	bne.n	8020260 <__cvt+0x84>
 8020250:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8020254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020258:	bf1c      	itt	ne
 802025a:	f1c4 0401 	rsbne	r4, r4, #1
 802025e:	6034      	strne	r4, [r6, #0]
 8020260:	6833      	ldr	r3, [r6, #0]
 8020262:	441a      	add	r2, r3
 8020264:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8020268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802026c:	bf08      	it	eq
 802026e:	9203      	streq	r2, [sp, #12]
 8020270:	2130      	movs	r1, #48	; 0x30
 8020272:	9b03      	ldr	r3, [sp, #12]
 8020274:	4293      	cmp	r3, r2
 8020276:	d2dc      	bcs.n	8020232 <__cvt+0x56>
 8020278:	1c5c      	adds	r4, r3, #1
 802027a:	9403      	str	r4, [sp, #12]
 802027c:	7019      	strb	r1, [r3, #0]
 802027e:	e7f8      	b.n	8020272 <__cvt+0x96>

08020280 <__exponent>:
 8020280:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020282:	4603      	mov	r3, r0
 8020284:	2900      	cmp	r1, #0
 8020286:	bfb8      	it	lt
 8020288:	4249      	neglt	r1, r1
 802028a:	f803 2b02 	strb.w	r2, [r3], #2
 802028e:	bfb4      	ite	lt
 8020290:	222d      	movlt	r2, #45	; 0x2d
 8020292:	222b      	movge	r2, #43	; 0x2b
 8020294:	2909      	cmp	r1, #9
 8020296:	7042      	strb	r2, [r0, #1]
 8020298:	dd2a      	ble.n	80202f0 <__exponent+0x70>
 802029a:	f10d 0407 	add.w	r4, sp, #7
 802029e:	46a4      	mov	ip, r4
 80202a0:	270a      	movs	r7, #10
 80202a2:	46a6      	mov	lr, r4
 80202a4:	460a      	mov	r2, r1
 80202a6:	fb91 f6f7 	sdiv	r6, r1, r7
 80202aa:	fb07 1516 	mls	r5, r7, r6, r1
 80202ae:	3530      	adds	r5, #48	; 0x30
 80202b0:	2a63      	cmp	r2, #99	; 0x63
 80202b2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80202b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80202ba:	4631      	mov	r1, r6
 80202bc:	dcf1      	bgt.n	80202a2 <__exponent+0x22>
 80202be:	3130      	adds	r1, #48	; 0x30
 80202c0:	f1ae 0502 	sub.w	r5, lr, #2
 80202c4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80202c8:	1c44      	adds	r4, r0, #1
 80202ca:	4629      	mov	r1, r5
 80202cc:	4561      	cmp	r1, ip
 80202ce:	d30a      	bcc.n	80202e6 <__exponent+0x66>
 80202d0:	f10d 0209 	add.w	r2, sp, #9
 80202d4:	eba2 020e 	sub.w	r2, r2, lr
 80202d8:	4565      	cmp	r5, ip
 80202da:	bf88      	it	hi
 80202dc:	2200      	movhi	r2, #0
 80202de:	4413      	add	r3, r2
 80202e0:	1a18      	subs	r0, r3, r0
 80202e2:	b003      	add	sp, #12
 80202e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80202e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80202ea:	f804 2f01 	strb.w	r2, [r4, #1]!
 80202ee:	e7ed      	b.n	80202cc <__exponent+0x4c>
 80202f0:	2330      	movs	r3, #48	; 0x30
 80202f2:	3130      	adds	r1, #48	; 0x30
 80202f4:	7083      	strb	r3, [r0, #2]
 80202f6:	70c1      	strb	r1, [r0, #3]
 80202f8:	1d03      	adds	r3, r0, #4
 80202fa:	e7f1      	b.n	80202e0 <__exponent+0x60>
 80202fc:	0000      	movs	r0, r0
	...

08020300 <_printf_float>:
 8020300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020304:	b08b      	sub	sp, #44	; 0x2c
 8020306:	460c      	mov	r4, r1
 8020308:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 802030c:	4616      	mov	r6, r2
 802030e:	461f      	mov	r7, r3
 8020310:	4605      	mov	r5, r0
 8020312:	f003 f969 	bl	80235e8 <_localeconv_r>
 8020316:	f8d0 b000 	ldr.w	fp, [r0]
 802031a:	4658      	mov	r0, fp
 802031c:	f7df ffe0 	bl	80002e0 <strlen>
 8020320:	2300      	movs	r3, #0
 8020322:	9308      	str	r3, [sp, #32]
 8020324:	f8d8 3000 	ldr.w	r3, [r8]
 8020328:	f894 9018 	ldrb.w	r9, [r4, #24]
 802032c:	6822      	ldr	r2, [r4, #0]
 802032e:	3307      	adds	r3, #7
 8020330:	f023 0307 	bic.w	r3, r3, #7
 8020334:	f103 0108 	add.w	r1, r3, #8
 8020338:	f8c8 1000 	str.w	r1, [r8]
 802033c:	4682      	mov	sl, r0
 802033e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020342:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8020346:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80205a8 <_printf_float+0x2a8>
 802034a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 802034e:	eeb0 6bc0 	vabs.f64	d6, d0
 8020352:	eeb4 6b47 	vcmp.f64	d6, d7
 8020356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802035a:	dd24      	ble.n	80203a6 <_printf_float+0xa6>
 802035c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8020360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020364:	d502      	bpl.n	802036c <_printf_float+0x6c>
 8020366:	232d      	movs	r3, #45	; 0x2d
 8020368:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802036c:	4b90      	ldr	r3, [pc, #576]	; (80205b0 <_printf_float+0x2b0>)
 802036e:	4891      	ldr	r0, [pc, #580]	; (80205b4 <_printf_float+0x2b4>)
 8020370:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8020374:	bf94      	ite	ls
 8020376:	4698      	movls	r8, r3
 8020378:	4680      	movhi	r8, r0
 802037a:	2303      	movs	r3, #3
 802037c:	6123      	str	r3, [r4, #16]
 802037e:	f022 0204 	bic.w	r2, r2, #4
 8020382:	2300      	movs	r3, #0
 8020384:	6022      	str	r2, [r4, #0]
 8020386:	9304      	str	r3, [sp, #16]
 8020388:	9700      	str	r7, [sp, #0]
 802038a:	4633      	mov	r3, r6
 802038c:	aa09      	add	r2, sp, #36	; 0x24
 802038e:	4621      	mov	r1, r4
 8020390:	4628      	mov	r0, r5
 8020392:	f000 f9d3 	bl	802073c <_printf_common>
 8020396:	3001      	adds	r0, #1
 8020398:	f040 808a 	bne.w	80204b0 <_printf_float+0x1b0>
 802039c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80203a0:	b00b      	add	sp, #44	; 0x2c
 80203a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80203a6:	eeb4 0b40 	vcmp.f64	d0, d0
 80203aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80203ae:	d709      	bvc.n	80203c4 <_printf_float+0xc4>
 80203b0:	ee10 3a90 	vmov	r3, s1
 80203b4:	2b00      	cmp	r3, #0
 80203b6:	bfbc      	itt	lt
 80203b8:	232d      	movlt	r3, #45	; 0x2d
 80203ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80203be:	487e      	ldr	r0, [pc, #504]	; (80205b8 <_printf_float+0x2b8>)
 80203c0:	4b7e      	ldr	r3, [pc, #504]	; (80205bc <_printf_float+0x2bc>)
 80203c2:	e7d5      	b.n	8020370 <_printf_float+0x70>
 80203c4:	6863      	ldr	r3, [r4, #4]
 80203c6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80203ca:	9104      	str	r1, [sp, #16]
 80203cc:	1c59      	adds	r1, r3, #1
 80203ce:	d13c      	bne.n	802044a <_printf_float+0x14a>
 80203d0:	2306      	movs	r3, #6
 80203d2:	6063      	str	r3, [r4, #4]
 80203d4:	2300      	movs	r3, #0
 80203d6:	9303      	str	r3, [sp, #12]
 80203d8:	ab08      	add	r3, sp, #32
 80203da:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80203de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80203e2:	ab07      	add	r3, sp, #28
 80203e4:	6861      	ldr	r1, [r4, #4]
 80203e6:	9300      	str	r3, [sp, #0]
 80203e8:	6022      	str	r2, [r4, #0]
 80203ea:	f10d 031b 	add.w	r3, sp, #27
 80203ee:	4628      	mov	r0, r5
 80203f0:	f7ff fef4 	bl	80201dc <__cvt>
 80203f4:	9b04      	ldr	r3, [sp, #16]
 80203f6:	9907      	ldr	r1, [sp, #28]
 80203f8:	2b47      	cmp	r3, #71	; 0x47
 80203fa:	4680      	mov	r8, r0
 80203fc:	d108      	bne.n	8020410 <_printf_float+0x110>
 80203fe:	1cc8      	adds	r0, r1, #3
 8020400:	db02      	blt.n	8020408 <_printf_float+0x108>
 8020402:	6863      	ldr	r3, [r4, #4]
 8020404:	4299      	cmp	r1, r3
 8020406:	dd41      	ble.n	802048c <_printf_float+0x18c>
 8020408:	f1a9 0902 	sub.w	r9, r9, #2
 802040c:	fa5f f989 	uxtb.w	r9, r9
 8020410:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8020414:	d820      	bhi.n	8020458 <_printf_float+0x158>
 8020416:	3901      	subs	r1, #1
 8020418:	464a      	mov	r2, r9
 802041a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 802041e:	9107      	str	r1, [sp, #28]
 8020420:	f7ff ff2e 	bl	8020280 <__exponent>
 8020424:	9a08      	ldr	r2, [sp, #32]
 8020426:	9004      	str	r0, [sp, #16]
 8020428:	1813      	adds	r3, r2, r0
 802042a:	2a01      	cmp	r2, #1
 802042c:	6123      	str	r3, [r4, #16]
 802042e:	dc02      	bgt.n	8020436 <_printf_float+0x136>
 8020430:	6822      	ldr	r2, [r4, #0]
 8020432:	07d2      	lsls	r2, r2, #31
 8020434:	d501      	bpl.n	802043a <_printf_float+0x13a>
 8020436:	3301      	adds	r3, #1
 8020438:	6123      	str	r3, [r4, #16]
 802043a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 802043e:	2b00      	cmp	r3, #0
 8020440:	d0a2      	beq.n	8020388 <_printf_float+0x88>
 8020442:	232d      	movs	r3, #45	; 0x2d
 8020444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020448:	e79e      	b.n	8020388 <_printf_float+0x88>
 802044a:	9904      	ldr	r1, [sp, #16]
 802044c:	2947      	cmp	r1, #71	; 0x47
 802044e:	d1c1      	bne.n	80203d4 <_printf_float+0xd4>
 8020450:	2b00      	cmp	r3, #0
 8020452:	d1bf      	bne.n	80203d4 <_printf_float+0xd4>
 8020454:	2301      	movs	r3, #1
 8020456:	e7bc      	b.n	80203d2 <_printf_float+0xd2>
 8020458:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 802045c:	d118      	bne.n	8020490 <_printf_float+0x190>
 802045e:	2900      	cmp	r1, #0
 8020460:	6863      	ldr	r3, [r4, #4]
 8020462:	dd0b      	ble.n	802047c <_printf_float+0x17c>
 8020464:	6121      	str	r1, [r4, #16]
 8020466:	b913      	cbnz	r3, 802046e <_printf_float+0x16e>
 8020468:	6822      	ldr	r2, [r4, #0]
 802046a:	07d0      	lsls	r0, r2, #31
 802046c:	d502      	bpl.n	8020474 <_printf_float+0x174>
 802046e:	3301      	adds	r3, #1
 8020470:	440b      	add	r3, r1
 8020472:	6123      	str	r3, [r4, #16]
 8020474:	2300      	movs	r3, #0
 8020476:	65a1      	str	r1, [r4, #88]	; 0x58
 8020478:	9304      	str	r3, [sp, #16]
 802047a:	e7de      	b.n	802043a <_printf_float+0x13a>
 802047c:	b913      	cbnz	r3, 8020484 <_printf_float+0x184>
 802047e:	6822      	ldr	r2, [r4, #0]
 8020480:	07d2      	lsls	r2, r2, #31
 8020482:	d501      	bpl.n	8020488 <_printf_float+0x188>
 8020484:	3302      	adds	r3, #2
 8020486:	e7f4      	b.n	8020472 <_printf_float+0x172>
 8020488:	2301      	movs	r3, #1
 802048a:	e7f2      	b.n	8020472 <_printf_float+0x172>
 802048c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8020490:	9b08      	ldr	r3, [sp, #32]
 8020492:	4299      	cmp	r1, r3
 8020494:	db05      	blt.n	80204a2 <_printf_float+0x1a2>
 8020496:	6823      	ldr	r3, [r4, #0]
 8020498:	6121      	str	r1, [r4, #16]
 802049a:	07d8      	lsls	r0, r3, #31
 802049c:	d5ea      	bpl.n	8020474 <_printf_float+0x174>
 802049e:	1c4b      	adds	r3, r1, #1
 80204a0:	e7e7      	b.n	8020472 <_printf_float+0x172>
 80204a2:	2900      	cmp	r1, #0
 80204a4:	bfd4      	ite	le
 80204a6:	f1c1 0202 	rsble	r2, r1, #2
 80204aa:	2201      	movgt	r2, #1
 80204ac:	4413      	add	r3, r2
 80204ae:	e7e0      	b.n	8020472 <_printf_float+0x172>
 80204b0:	6823      	ldr	r3, [r4, #0]
 80204b2:	055a      	lsls	r2, r3, #21
 80204b4:	d407      	bmi.n	80204c6 <_printf_float+0x1c6>
 80204b6:	6923      	ldr	r3, [r4, #16]
 80204b8:	4642      	mov	r2, r8
 80204ba:	4631      	mov	r1, r6
 80204bc:	4628      	mov	r0, r5
 80204be:	47b8      	blx	r7
 80204c0:	3001      	adds	r0, #1
 80204c2:	d12a      	bne.n	802051a <_printf_float+0x21a>
 80204c4:	e76a      	b.n	802039c <_printf_float+0x9c>
 80204c6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80204ca:	f240 80e2 	bls.w	8020692 <_printf_float+0x392>
 80204ce:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80204d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80204d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80204da:	d133      	bne.n	8020544 <_printf_float+0x244>
 80204dc:	4a38      	ldr	r2, [pc, #224]	; (80205c0 <_printf_float+0x2c0>)
 80204de:	2301      	movs	r3, #1
 80204e0:	4631      	mov	r1, r6
 80204e2:	4628      	mov	r0, r5
 80204e4:	47b8      	blx	r7
 80204e6:	3001      	adds	r0, #1
 80204e8:	f43f af58 	beq.w	802039c <_printf_float+0x9c>
 80204ec:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80204f0:	429a      	cmp	r2, r3
 80204f2:	db02      	blt.n	80204fa <_printf_float+0x1fa>
 80204f4:	6823      	ldr	r3, [r4, #0]
 80204f6:	07d8      	lsls	r0, r3, #31
 80204f8:	d50f      	bpl.n	802051a <_printf_float+0x21a>
 80204fa:	4653      	mov	r3, sl
 80204fc:	465a      	mov	r2, fp
 80204fe:	4631      	mov	r1, r6
 8020500:	4628      	mov	r0, r5
 8020502:	47b8      	blx	r7
 8020504:	3001      	adds	r0, #1
 8020506:	f43f af49 	beq.w	802039c <_printf_float+0x9c>
 802050a:	f04f 0800 	mov.w	r8, #0
 802050e:	f104 091a 	add.w	r9, r4, #26
 8020512:	9b08      	ldr	r3, [sp, #32]
 8020514:	3b01      	subs	r3, #1
 8020516:	4543      	cmp	r3, r8
 8020518:	dc09      	bgt.n	802052e <_printf_float+0x22e>
 802051a:	6823      	ldr	r3, [r4, #0]
 802051c:	079b      	lsls	r3, r3, #30
 802051e:	f100 8108 	bmi.w	8020732 <_printf_float+0x432>
 8020522:	68e0      	ldr	r0, [r4, #12]
 8020524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020526:	4298      	cmp	r0, r3
 8020528:	bfb8      	it	lt
 802052a:	4618      	movlt	r0, r3
 802052c:	e738      	b.n	80203a0 <_printf_float+0xa0>
 802052e:	2301      	movs	r3, #1
 8020530:	464a      	mov	r2, r9
 8020532:	4631      	mov	r1, r6
 8020534:	4628      	mov	r0, r5
 8020536:	47b8      	blx	r7
 8020538:	3001      	adds	r0, #1
 802053a:	f43f af2f 	beq.w	802039c <_printf_float+0x9c>
 802053e:	f108 0801 	add.w	r8, r8, #1
 8020542:	e7e6      	b.n	8020512 <_printf_float+0x212>
 8020544:	9b07      	ldr	r3, [sp, #28]
 8020546:	2b00      	cmp	r3, #0
 8020548:	dc3c      	bgt.n	80205c4 <_printf_float+0x2c4>
 802054a:	4a1d      	ldr	r2, [pc, #116]	; (80205c0 <_printf_float+0x2c0>)
 802054c:	2301      	movs	r3, #1
 802054e:	4631      	mov	r1, r6
 8020550:	4628      	mov	r0, r5
 8020552:	47b8      	blx	r7
 8020554:	3001      	adds	r0, #1
 8020556:	f43f af21 	beq.w	802039c <_printf_float+0x9c>
 802055a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 802055e:	4313      	orrs	r3, r2
 8020560:	d102      	bne.n	8020568 <_printf_float+0x268>
 8020562:	6823      	ldr	r3, [r4, #0]
 8020564:	07d9      	lsls	r1, r3, #31
 8020566:	d5d8      	bpl.n	802051a <_printf_float+0x21a>
 8020568:	4653      	mov	r3, sl
 802056a:	465a      	mov	r2, fp
 802056c:	4631      	mov	r1, r6
 802056e:	4628      	mov	r0, r5
 8020570:	47b8      	blx	r7
 8020572:	3001      	adds	r0, #1
 8020574:	f43f af12 	beq.w	802039c <_printf_float+0x9c>
 8020578:	f04f 0900 	mov.w	r9, #0
 802057c:	f104 0a1a 	add.w	sl, r4, #26
 8020580:	9b07      	ldr	r3, [sp, #28]
 8020582:	425b      	negs	r3, r3
 8020584:	454b      	cmp	r3, r9
 8020586:	dc01      	bgt.n	802058c <_printf_float+0x28c>
 8020588:	9b08      	ldr	r3, [sp, #32]
 802058a:	e795      	b.n	80204b8 <_printf_float+0x1b8>
 802058c:	2301      	movs	r3, #1
 802058e:	4652      	mov	r2, sl
 8020590:	4631      	mov	r1, r6
 8020592:	4628      	mov	r0, r5
 8020594:	47b8      	blx	r7
 8020596:	3001      	adds	r0, #1
 8020598:	f43f af00 	beq.w	802039c <_printf_float+0x9c>
 802059c:	f109 0901 	add.w	r9, r9, #1
 80205a0:	e7ee      	b.n	8020580 <_printf_float+0x280>
 80205a2:	bf00      	nop
 80205a4:	f3af 8000 	nop.w
 80205a8:	ffffffff 	.word	0xffffffff
 80205ac:	7fefffff 	.word	0x7fefffff
 80205b0:	080292f8 	.word	0x080292f8
 80205b4:	080292fc 	.word	0x080292fc
 80205b8:	08029304 	.word	0x08029304
 80205bc:	08029300 	.word	0x08029300
 80205c0:	08029308 	.word	0x08029308
 80205c4:	9a08      	ldr	r2, [sp, #32]
 80205c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80205c8:	429a      	cmp	r2, r3
 80205ca:	bfa8      	it	ge
 80205cc:	461a      	movge	r2, r3
 80205ce:	2a00      	cmp	r2, #0
 80205d0:	4691      	mov	r9, r2
 80205d2:	dc38      	bgt.n	8020646 <_printf_float+0x346>
 80205d4:	2300      	movs	r3, #0
 80205d6:	9305      	str	r3, [sp, #20]
 80205d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80205dc:	f104 021a 	add.w	r2, r4, #26
 80205e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80205e2:	9905      	ldr	r1, [sp, #20]
 80205e4:	9304      	str	r3, [sp, #16]
 80205e6:	eba3 0309 	sub.w	r3, r3, r9
 80205ea:	428b      	cmp	r3, r1
 80205ec:	dc33      	bgt.n	8020656 <_printf_float+0x356>
 80205ee:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80205f2:	429a      	cmp	r2, r3
 80205f4:	db3c      	blt.n	8020670 <_printf_float+0x370>
 80205f6:	6823      	ldr	r3, [r4, #0]
 80205f8:	07da      	lsls	r2, r3, #31
 80205fa:	d439      	bmi.n	8020670 <_printf_float+0x370>
 80205fc:	9a08      	ldr	r2, [sp, #32]
 80205fe:	9b04      	ldr	r3, [sp, #16]
 8020600:	9907      	ldr	r1, [sp, #28]
 8020602:	1ad3      	subs	r3, r2, r3
 8020604:	eba2 0901 	sub.w	r9, r2, r1
 8020608:	4599      	cmp	r9, r3
 802060a:	bfa8      	it	ge
 802060c:	4699      	movge	r9, r3
 802060e:	f1b9 0f00 	cmp.w	r9, #0
 8020612:	dc35      	bgt.n	8020680 <_printf_float+0x380>
 8020614:	f04f 0800 	mov.w	r8, #0
 8020618:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802061c:	f104 0a1a 	add.w	sl, r4, #26
 8020620:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8020624:	1a9b      	subs	r3, r3, r2
 8020626:	eba3 0309 	sub.w	r3, r3, r9
 802062a:	4543      	cmp	r3, r8
 802062c:	f77f af75 	ble.w	802051a <_printf_float+0x21a>
 8020630:	2301      	movs	r3, #1
 8020632:	4652      	mov	r2, sl
 8020634:	4631      	mov	r1, r6
 8020636:	4628      	mov	r0, r5
 8020638:	47b8      	blx	r7
 802063a:	3001      	adds	r0, #1
 802063c:	f43f aeae 	beq.w	802039c <_printf_float+0x9c>
 8020640:	f108 0801 	add.w	r8, r8, #1
 8020644:	e7ec      	b.n	8020620 <_printf_float+0x320>
 8020646:	4613      	mov	r3, r2
 8020648:	4631      	mov	r1, r6
 802064a:	4642      	mov	r2, r8
 802064c:	4628      	mov	r0, r5
 802064e:	47b8      	blx	r7
 8020650:	3001      	adds	r0, #1
 8020652:	d1bf      	bne.n	80205d4 <_printf_float+0x2d4>
 8020654:	e6a2      	b.n	802039c <_printf_float+0x9c>
 8020656:	2301      	movs	r3, #1
 8020658:	4631      	mov	r1, r6
 802065a:	4628      	mov	r0, r5
 802065c:	9204      	str	r2, [sp, #16]
 802065e:	47b8      	blx	r7
 8020660:	3001      	adds	r0, #1
 8020662:	f43f ae9b 	beq.w	802039c <_printf_float+0x9c>
 8020666:	9b05      	ldr	r3, [sp, #20]
 8020668:	9a04      	ldr	r2, [sp, #16]
 802066a:	3301      	adds	r3, #1
 802066c:	9305      	str	r3, [sp, #20]
 802066e:	e7b7      	b.n	80205e0 <_printf_float+0x2e0>
 8020670:	4653      	mov	r3, sl
 8020672:	465a      	mov	r2, fp
 8020674:	4631      	mov	r1, r6
 8020676:	4628      	mov	r0, r5
 8020678:	47b8      	blx	r7
 802067a:	3001      	adds	r0, #1
 802067c:	d1be      	bne.n	80205fc <_printf_float+0x2fc>
 802067e:	e68d      	b.n	802039c <_printf_float+0x9c>
 8020680:	9a04      	ldr	r2, [sp, #16]
 8020682:	464b      	mov	r3, r9
 8020684:	4442      	add	r2, r8
 8020686:	4631      	mov	r1, r6
 8020688:	4628      	mov	r0, r5
 802068a:	47b8      	blx	r7
 802068c:	3001      	adds	r0, #1
 802068e:	d1c1      	bne.n	8020614 <_printf_float+0x314>
 8020690:	e684      	b.n	802039c <_printf_float+0x9c>
 8020692:	9a08      	ldr	r2, [sp, #32]
 8020694:	2a01      	cmp	r2, #1
 8020696:	dc01      	bgt.n	802069c <_printf_float+0x39c>
 8020698:	07db      	lsls	r3, r3, #31
 802069a:	d537      	bpl.n	802070c <_printf_float+0x40c>
 802069c:	2301      	movs	r3, #1
 802069e:	4642      	mov	r2, r8
 80206a0:	4631      	mov	r1, r6
 80206a2:	4628      	mov	r0, r5
 80206a4:	47b8      	blx	r7
 80206a6:	3001      	adds	r0, #1
 80206a8:	f43f ae78 	beq.w	802039c <_printf_float+0x9c>
 80206ac:	4653      	mov	r3, sl
 80206ae:	465a      	mov	r2, fp
 80206b0:	4631      	mov	r1, r6
 80206b2:	4628      	mov	r0, r5
 80206b4:	47b8      	blx	r7
 80206b6:	3001      	adds	r0, #1
 80206b8:	f43f ae70 	beq.w	802039c <_printf_float+0x9c>
 80206bc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80206c0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80206c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80206c8:	d01b      	beq.n	8020702 <_printf_float+0x402>
 80206ca:	9b08      	ldr	r3, [sp, #32]
 80206cc:	f108 0201 	add.w	r2, r8, #1
 80206d0:	3b01      	subs	r3, #1
 80206d2:	4631      	mov	r1, r6
 80206d4:	4628      	mov	r0, r5
 80206d6:	47b8      	blx	r7
 80206d8:	3001      	adds	r0, #1
 80206da:	d10e      	bne.n	80206fa <_printf_float+0x3fa>
 80206dc:	e65e      	b.n	802039c <_printf_float+0x9c>
 80206de:	2301      	movs	r3, #1
 80206e0:	464a      	mov	r2, r9
 80206e2:	4631      	mov	r1, r6
 80206e4:	4628      	mov	r0, r5
 80206e6:	47b8      	blx	r7
 80206e8:	3001      	adds	r0, #1
 80206ea:	f43f ae57 	beq.w	802039c <_printf_float+0x9c>
 80206ee:	f108 0801 	add.w	r8, r8, #1
 80206f2:	9b08      	ldr	r3, [sp, #32]
 80206f4:	3b01      	subs	r3, #1
 80206f6:	4543      	cmp	r3, r8
 80206f8:	dcf1      	bgt.n	80206de <_printf_float+0x3de>
 80206fa:	9b04      	ldr	r3, [sp, #16]
 80206fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8020700:	e6db      	b.n	80204ba <_printf_float+0x1ba>
 8020702:	f04f 0800 	mov.w	r8, #0
 8020706:	f104 091a 	add.w	r9, r4, #26
 802070a:	e7f2      	b.n	80206f2 <_printf_float+0x3f2>
 802070c:	2301      	movs	r3, #1
 802070e:	4642      	mov	r2, r8
 8020710:	e7df      	b.n	80206d2 <_printf_float+0x3d2>
 8020712:	2301      	movs	r3, #1
 8020714:	464a      	mov	r2, r9
 8020716:	4631      	mov	r1, r6
 8020718:	4628      	mov	r0, r5
 802071a:	47b8      	blx	r7
 802071c:	3001      	adds	r0, #1
 802071e:	f43f ae3d 	beq.w	802039c <_printf_float+0x9c>
 8020722:	f108 0801 	add.w	r8, r8, #1
 8020726:	68e3      	ldr	r3, [r4, #12]
 8020728:	9909      	ldr	r1, [sp, #36]	; 0x24
 802072a:	1a5b      	subs	r3, r3, r1
 802072c:	4543      	cmp	r3, r8
 802072e:	dcf0      	bgt.n	8020712 <_printf_float+0x412>
 8020730:	e6f7      	b.n	8020522 <_printf_float+0x222>
 8020732:	f04f 0800 	mov.w	r8, #0
 8020736:	f104 0919 	add.w	r9, r4, #25
 802073a:	e7f4      	b.n	8020726 <_printf_float+0x426>

0802073c <_printf_common>:
 802073c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020740:	4616      	mov	r6, r2
 8020742:	4699      	mov	r9, r3
 8020744:	688a      	ldr	r2, [r1, #8]
 8020746:	690b      	ldr	r3, [r1, #16]
 8020748:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802074c:	4293      	cmp	r3, r2
 802074e:	bfb8      	it	lt
 8020750:	4613      	movlt	r3, r2
 8020752:	6033      	str	r3, [r6, #0]
 8020754:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8020758:	4607      	mov	r7, r0
 802075a:	460c      	mov	r4, r1
 802075c:	b10a      	cbz	r2, 8020762 <_printf_common+0x26>
 802075e:	3301      	adds	r3, #1
 8020760:	6033      	str	r3, [r6, #0]
 8020762:	6823      	ldr	r3, [r4, #0]
 8020764:	0699      	lsls	r1, r3, #26
 8020766:	bf42      	ittt	mi
 8020768:	6833      	ldrmi	r3, [r6, #0]
 802076a:	3302      	addmi	r3, #2
 802076c:	6033      	strmi	r3, [r6, #0]
 802076e:	6825      	ldr	r5, [r4, #0]
 8020770:	f015 0506 	ands.w	r5, r5, #6
 8020774:	d106      	bne.n	8020784 <_printf_common+0x48>
 8020776:	f104 0a19 	add.w	sl, r4, #25
 802077a:	68e3      	ldr	r3, [r4, #12]
 802077c:	6832      	ldr	r2, [r6, #0]
 802077e:	1a9b      	subs	r3, r3, r2
 8020780:	42ab      	cmp	r3, r5
 8020782:	dc26      	bgt.n	80207d2 <_printf_common+0x96>
 8020784:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8020788:	1e13      	subs	r3, r2, #0
 802078a:	6822      	ldr	r2, [r4, #0]
 802078c:	bf18      	it	ne
 802078e:	2301      	movne	r3, #1
 8020790:	0692      	lsls	r2, r2, #26
 8020792:	d42b      	bmi.n	80207ec <_printf_common+0xb0>
 8020794:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020798:	4649      	mov	r1, r9
 802079a:	4638      	mov	r0, r7
 802079c:	47c0      	blx	r8
 802079e:	3001      	adds	r0, #1
 80207a0:	d01e      	beq.n	80207e0 <_printf_common+0xa4>
 80207a2:	6823      	ldr	r3, [r4, #0]
 80207a4:	68e5      	ldr	r5, [r4, #12]
 80207a6:	6832      	ldr	r2, [r6, #0]
 80207a8:	f003 0306 	and.w	r3, r3, #6
 80207ac:	2b04      	cmp	r3, #4
 80207ae:	bf08      	it	eq
 80207b0:	1aad      	subeq	r5, r5, r2
 80207b2:	68a3      	ldr	r3, [r4, #8]
 80207b4:	6922      	ldr	r2, [r4, #16]
 80207b6:	bf0c      	ite	eq
 80207b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80207bc:	2500      	movne	r5, #0
 80207be:	4293      	cmp	r3, r2
 80207c0:	bfc4      	itt	gt
 80207c2:	1a9b      	subgt	r3, r3, r2
 80207c4:	18ed      	addgt	r5, r5, r3
 80207c6:	2600      	movs	r6, #0
 80207c8:	341a      	adds	r4, #26
 80207ca:	42b5      	cmp	r5, r6
 80207cc:	d11a      	bne.n	8020804 <_printf_common+0xc8>
 80207ce:	2000      	movs	r0, #0
 80207d0:	e008      	b.n	80207e4 <_printf_common+0xa8>
 80207d2:	2301      	movs	r3, #1
 80207d4:	4652      	mov	r2, sl
 80207d6:	4649      	mov	r1, r9
 80207d8:	4638      	mov	r0, r7
 80207da:	47c0      	blx	r8
 80207dc:	3001      	adds	r0, #1
 80207de:	d103      	bne.n	80207e8 <_printf_common+0xac>
 80207e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80207e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80207e8:	3501      	adds	r5, #1
 80207ea:	e7c6      	b.n	802077a <_printf_common+0x3e>
 80207ec:	18e1      	adds	r1, r4, r3
 80207ee:	1c5a      	adds	r2, r3, #1
 80207f0:	2030      	movs	r0, #48	; 0x30
 80207f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80207f6:	4422      	add	r2, r4
 80207f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80207fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8020800:	3302      	adds	r3, #2
 8020802:	e7c7      	b.n	8020794 <_printf_common+0x58>
 8020804:	2301      	movs	r3, #1
 8020806:	4622      	mov	r2, r4
 8020808:	4649      	mov	r1, r9
 802080a:	4638      	mov	r0, r7
 802080c:	47c0      	blx	r8
 802080e:	3001      	adds	r0, #1
 8020810:	d0e6      	beq.n	80207e0 <_printf_common+0xa4>
 8020812:	3601      	adds	r6, #1
 8020814:	e7d9      	b.n	80207ca <_printf_common+0x8e>
	...

08020818 <_printf_i>:
 8020818:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802081c:	460c      	mov	r4, r1
 802081e:	4691      	mov	r9, r2
 8020820:	7e27      	ldrb	r7, [r4, #24]
 8020822:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020824:	2f78      	cmp	r7, #120	; 0x78
 8020826:	4680      	mov	r8, r0
 8020828:	469a      	mov	sl, r3
 802082a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802082e:	d807      	bhi.n	8020840 <_printf_i+0x28>
 8020830:	2f62      	cmp	r7, #98	; 0x62
 8020832:	d80a      	bhi.n	802084a <_printf_i+0x32>
 8020834:	2f00      	cmp	r7, #0
 8020836:	f000 80d8 	beq.w	80209ea <_printf_i+0x1d2>
 802083a:	2f58      	cmp	r7, #88	; 0x58
 802083c:	f000 80a3 	beq.w	8020986 <_printf_i+0x16e>
 8020840:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8020844:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8020848:	e03a      	b.n	80208c0 <_printf_i+0xa8>
 802084a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802084e:	2b15      	cmp	r3, #21
 8020850:	d8f6      	bhi.n	8020840 <_printf_i+0x28>
 8020852:	a001      	add	r0, pc, #4	; (adr r0, 8020858 <_printf_i+0x40>)
 8020854:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8020858:	080208b1 	.word	0x080208b1
 802085c:	080208c5 	.word	0x080208c5
 8020860:	08020841 	.word	0x08020841
 8020864:	08020841 	.word	0x08020841
 8020868:	08020841 	.word	0x08020841
 802086c:	08020841 	.word	0x08020841
 8020870:	080208c5 	.word	0x080208c5
 8020874:	08020841 	.word	0x08020841
 8020878:	08020841 	.word	0x08020841
 802087c:	08020841 	.word	0x08020841
 8020880:	08020841 	.word	0x08020841
 8020884:	080209d1 	.word	0x080209d1
 8020888:	080208f5 	.word	0x080208f5
 802088c:	080209b3 	.word	0x080209b3
 8020890:	08020841 	.word	0x08020841
 8020894:	08020841 	.word	0x08020841
 8020898:	080209f3 	.word	0x080209f3
 802089c:	08020841 	.word	0x08020841
 80208a0:	080208f5 	.word	0x080208f5
 80208a4:	08020841 	.word	0x08020841
 80208a8:	08020841 	.word	0x08020841
 80208ac:	080209bb 	.word	0x080209bb
 80208b0:	680b      	ldr	r3, [r1, #0]
 80208b2:	1d1a      	adds	r2, r3, #4
 80208b4:	681b      	ldr	r3, [r3, #0]
 80208b6:	600a      	str	r2, [r1, #0]
 80208b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80208bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80208c0:	2301      	movs	r3, #1
 80208c2:	e0a3      	b.n	8020a0c <_printf_i+0x1f4>
 80208c4:	6825      	ldr	r5, [r4, #0]
 80208c6:	6808      	ldr	r0, [r1, #0]
 80208c8:	062e      	lsls	r6, r5, #24
 80208ca:	f100 0304 	add.w	r3, r0, #4
 80208ce:	d50a      	bpl.n	80208e6 <_printf_i+0xce>
 80208d0:	6805      	ldr	r5, [r0, #0]
 80208d2:	600b      	str	r3, [r1, #0]
 80208d4:	2d00      	cmp	r5, #0
 80208d6:	da03      	bge.n	80208e0 <_printf_i+0xc8>
 80208d8:	232d      	movs	r3, #45	; 0x2d
 80208da:	426d      	negs	r5, r5
 80208dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80208e0:	485e      	ldr	r0, [pc, #376]	; (8020a5c <_printf_i+0x244>)
 80208e2:	230a      	movs	r3, #10
 80208e4:	e019      	b.n	802091a <_printf_i+0x102>
 80208e6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80208ea:	6805      	ldr	r5, [r0, #0]
 80208ec:	600b      	str	r3, [r1, #0]
 80208ee:	bf18      	it	ne
 80208f0:	b22d      	sxthne	r5, r5
 80208f2:	e7ef      	b.n	80208d4 <_printf_i+0xbc>
 80208f4:	680b      	ldr	r3, [r1, #0]
 80208f6:	6825      	ldr	r5, [r4, #0]
 80208f8:	1d18      	adds	r0, r3, #4
 80208fa:	6008      	str	r0, [r1, #0]
 80208fc:	0628      	lsls	r0, r5, #24
 80208fe:	d501      	bpl.n	8020904 <_printf_i+0xec>
 8020900:	681d      	ldr	r5, [r3, #0]
 8020902:	e002      	b.n	802090a <_printf_i+0xf2>
 8020904:	0669      	lsls	r1, r5, #25
 8020906:	d5fb      	bpl.n	8020900 <_printf_i+0xe8>
 8020908:	881d      	ldrh	r5, [r3, #0]
 802090a:	4854      	ldr	r0, [pc, #336]	; (8020a5c <_printf_i+0x244>)
 802090c:	2f6f      	cmp	r7, #111	; 0x6f
 802090e:	bf0c      	ite	eq
 8020910:	2308      	moveq	r3, #8
 8020912:	230a      	movne	r3, #10
 8020914:	2100      	movs	r1, #0
 8020916:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802091a:	6866      	ldr	r6, [r4, #4]
 802091c:	60a6      	str	r6, [r4, #8]
 802091e:	2e00      	cmp	r6, #0
 8020920:	bfa2      	ittt	ge
 8020922:	6821      	ldrge	r1, [r4, #0]
 8020924:	f021 0104 	bicge.w	r1, r1, #4
 8020928:	6021      	strge	r1, [r4, #0]
 802092a:	b90d      	cbnz	r5, 8020930 <_printf_i+0x118>
 802092c:	2e00      	cmp	r6, #0
 802092e:	d04d      	beq.n	80209cc <_printf_i+0x1b4>
 8020930:	4616      	mov	r6, r2
 8020932:	fbb5 f1f3 	udiv	r1, r5, r3
 8020936:	fb03 5711 	mls	r7, r3, r1, r5
 802093a:	5dc7      	ldrb	r7, [r0, r7]
 802093c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8020940:	462f      	mov	r7, r5
 8020942:	42bb      	cmp	r3, r7
 8020944:	460d      	mov	r5, r1
 8020946:	d9f4      	bls.n	8020932 <_printf_i+0x11a>
 8020948:	2b08      	cmp	r3, #8
 802094a:	d10b      	bne.n	8020964 <_printf_i+0x14c>
 802094c:	6823      	ldr	r3, [r4, #0]
 802094e:	07df      	lsls	r7, r3, #31
 8020950:	d508      	bpl.n	8020964 <_printf_i+0x14c>
 8020952:	6923      	ldr	r3, [r4, #16]
 8020954:	6861      	ldr	r1, [r4, #4]
 8020956:	4299      	cmp	r1, r3
 8020958:	bfde      	ittt	le
 802095a:	2330      	movle	r3, #48	; 0x30
 802095c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8020960:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8020964:	1b92      	subs	r2, r2, r6
 8020966:	6122      	str	r2, [r4, #16]
 8020968:	f8cd a000 	str.w	sl, [sp]
 802096c:	464b      	mov	r3, r9
 802096e:	aa03      	add	r2, sp, #12
 8020970:	4621      	mov	r1, r4
 8020972:	4640      	mov	r0, r8
 8020974:	f7ff fee2 	bl	802073c <_printf_common>
 8020978:	3001      	adds	r0, #1
 802097a:	d14c      	bne.n	8020a16 <_printf_i+0x1fe>
 802097c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020980:	b004      	add	sp, #16
 8020982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020986:	4835      	ldr	r0, [pc, #212]	; (8020a5c <_printf_i+0x244>)
 8020988:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802098c:	6823      	ldr	r3, [r4, #0]
 802098e:	680e      	ldr	r6, [r1, #0]
 8020990:	061f      	lsls	r7, r3, #24
 8020992:	f856 5b04 	ldr.w	r5, [r6], #4
 8020996:	600e      	str	r6, [r1, #0]
 8020998:	d514      	bpl.n	80209c4 <_printf_i+0x1ac>
 802099a:	07d9      	lsls	r1, r3, #31
 802099c:	bf44      	itt	mi
 802099e:	f043 0320 	orrmi.w	r3, r3, #32
 80209a2:	6023      	strmi	r3, [r4, #0]
 80209a4:	b91d      	cbnz	r5, 80209ae <_printf_i+0x196>
 80209a6:	6823      	ldr	r3, [r4, #0]
 80209a8:	f023 0320 	bic.w	r3, r3, #32
 80209ac:	6023      	str	r3, [r4, #0]
 80209ae:	2310      	movs	r3, #16
 80209b0:	e7b0      	b.n	8020914 <_printf_i+0xfc>
 80209b2:	6823      	ldr	r3, [r4, #0]
 80209b4:	f043 0320 	orr.w	r3, r3, #32
 80209b8:	6023      	str	r3, [r4, #0]
 80209ba:	2378      	movs	r3, #120	; 0x78
 80209bc:	4828      	ldr	r0, [pc, #160]	; (8020a60 <_printf_i+0x248>)
 80209be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80209c2:	e7e3      	b.n	802098c <_printf_i+0x174>
 80209c4:	065e      	lsls	r6, r3, #25
 80209c6:	bf48      	it	mi
 80209c8:	b2ad      	uxthmi	r5, r5
 80209ca:	e7e6      	b.n	802099a <_printf_i+0x182>
 80209cc:	4616      	mov	r6, r2
 80209ce:	e7bb      	b.n	8020948 <_printf_i+0x130>
 80209d0:	680b      	ldr	r3, [r1, #0]
 80209d2:	6826      	ldr	r6, [r4, #0]
 80209d4:	6960      	ldr	r0, [r4, #20]
 80209d6:	1d1d      	adds	r5, r3, #4
 80209d8:	600d      	str	r5, [r1, #0]
 80209da:	0635      	lsls	r5, r6, #24
 80209dc:	681b      	ldr	r3, [r3, #0]
 80209de:	d501      	bpl.n	80209e4 <_printf_i+0x1cc>
 80209e0:	6018      	str	r0, [r3, #0]
 80209e2:	e002      	b.n	80209ea <_printf_i+0x1d2>
 80209e4:	0671      	lsls	r1, r6, #25
 80209e6:	d5fb      	bpl.n	80209e0 <_printf_i+0x1c8>
 80209e8:	8018      	strh	r0, [r3, #0]
 80209ea:	2300      	movs	r3, #0
 80209ec:	6123      	str	r3, [r4, #16]
 80209ee:	4616      	mov	r6, r2
 80209f0:	e7ba      	b.n	8020968 <_printf_i+0x150>
 80209f2:	680b      	ldr	r3, [r1, #0]
 80209f4:	1d1a      	adds	r2, r3, #4
 80209f6:	600a      	str	r2, [r1, #0]
 80209f8:	681e      	ldr	r6, [r3, #0]
 80209fa:	6862      	ldr	r2, [r4, #4]
 80209fc:	2100      	movs	r1, #0
 80209fe:	4630      	mov	r0, r6
 8020a00:	f7df fc76 	bl	80002f0 <memchr>
 8020a04:	b108      	cbz	r0, 8020a0a <_printf_i+0x1f2>
 8020a06:	1b80      	subs	r0, r0, r6
 8020a08:	6060      	str	r0, [r4, #4]
 8020a0a:	6863      	ldr	r3, [r4, #4]
 8020a0c:	6123      	str	r3, [r4, #16]
 8020a0e:	2300      	movs	r3, #0
 8020a10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020a14:	e7a8      	b.n	8020968 <_printf_i+0x150>
 8020a16:	6923      	ldr	r3, [r4, #16]
 8020a18:	4632      	mov	r2, r6
 8020a1a:	4649      	mov	r1, r9
 8020a1c:	4640      	mov	r0, r8
 8020a1e:	47d0      	blx	sl
 8020a20:	3001      	adds	r0, #1
 8020a22:	d0ab      	beq.n	802097c <_printf_i+0x164>
 8020a24:	6823      	ldr	r3, [r4, #0]
 8020a26:	079b      	lsls	r3, r3, #30
 8020a28:	d413      	bmi.n	8020a52 <_printf_i+0x23a>
 8020a2a:	68e0      	ldr	r0, [r4, #12]
 8020a2c:	9b03      	ldr	r3, [sp, #12]
 8020a2e:	4298      	cmp	r0, r3
 8020a30:	bfb8      	it	lt
 8020a32:	4618      	movlt	r0, r3
 8020a34:	e7a4      	b.n	8020980 <_printf_i+0x168>
 8020a36:	2301      	movs	r3, #1
 8020a38:	4632      	mov	r2, r6
 8020a3a:	4649      	mov	r1, r9
 8020a3c:	4640      	mov	r0, r8
 8020a3e:	47d0      	blx	sl
 8020a40:	3001      	adds	r0, #1
 8020a42:	d09b      	beq.n	802097c <_printf_i+0x164>
 8020a44:	3501      	adds	r5, #1
 8020a46:	68e3      	ldr	r3, [r4, #12]
 8020a48:	9903      	ldr	r1, [sp, #12]
 8020a4a:	1a5b      	subs	r3, r3, r1
 8020a4c:	42ab      	cmp	r3, r5
 8020a4e:	dcf2      	bgt.n	8020a36 <_printf_i+0x21e>
 8020a50:	e7eb      	b.n	8020a2a <_printf_i+0x212>
 8020a52:	2500      	movs	r5, #0
 8020a54:	f104 0619 	add.w	r6, r4, #25
 8020a58:	e7f5      	b.n	8020a46 <_printf_i+0x22e>
 8020a5a:	bf00      	nop
 8020a5c:	0802930a 	.word	0x0802930a
 8020a60:	0802931b 	.word	0x0802931b

08020a64 <_scanf_float>:
 8020a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a68:	b087      	sub	sp, #28
 8020a6a:	4617      	mov	r7, r2
 8020a6c:	9303      	str	r3, [sp, #12]
 8020a6e:	688b      	ldr	r3, [r1, #8]
 8020a70:	1e5a      	subs	r2, r3, #1
 8020a72:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8020a76:	bf83      	ittte	hi
 8020a78:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8020a7c:	195b      	addhi	r3, r3, r5
 8020a7e:	9302      	strhi	r3, [sp, #8]
 8020a80:	2300      	movls	r3, #0
 8020a82:	bf86      	itte	hi
 8020a84:	f240 135d 	movwhi	r3, #349	; 0x15d
 8020a88:	608b      	strhi	r3, [r1, #8]
 8020a8a:	9302      	strls	r3, [sp, #8]
 8020a8c:	680b      	ldr	r3, [r1, #0]
 8020a8e:	468b      	mov	fp, r1
 8020a90:	2500      	movs	r5, #0
 8020a92:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8020a96:	f84b 3b1c 	str.w	r3, [fp], #28
 8020a9a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8020a9e:	4680      	mov	r8, r0
 8020aa0:	460c      	mov	r4, r1
 8020aa2:	465e      	mov	r6, fp
 8020aa4:	46aa      	mov	sl, r5
 8020aa6:	46a9      	mov	r9, r5
 8020aa8:	9501      	str	r5, [sp, #4]
 8020aaa:	68a2      	ldr	r2, [r4, #8]
 8020aac:	b152      	cbz	r2, 8020ac4 <_scanf_float+0x60>
 8020aae:	683b      	ldr	r3, [r7, #0]
 8020ab0:	781b      	ldrb	r3, [r3, #0]
 8020ab2:	2b4e      	cmp	r3, #78	; 0x4e
 8020ab4:	d864      	bhi.n	8020b80 <_scanf_float+0x11c>
 8020ab6:	2b40      	cmp	r3, #64	; 0x40
 8020ab8:	d83c      	bhi.n	8020b34 <_scanf_float+0xd0>
 8020aba:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8020abe:	b2c8      	uxtb	r0, r1
 8020ac0:	280e      	cmp	r0, #14
 8020ac2:	d93a      	bls.n	8020b3a <_scanf_float+0xd6>
 8020ac4:	f1b9 0f00 	cmp.w	r9, #0
 8020ac8:	d003      	beq.n	8020ad2 <_scanf_float+0x6e>
 8020aca:	6823      	ldr	r3, [r4, #0]
 8020acc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8020ad0:	6023      	str	r3, [r4, #0]
 8020ad2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8020ad6:	f1ba 0f01 	cmp.w	sl, #1
 8020ada:	f200 8113 	bhi.w	8020d04 <_scanf_float+0x2a0>
 8020ade:	455e      	cmp	r6, fp
 8020ae0:	f200 8105 	bhi.w	8020cee <_scanf_float+0x28a>
 8020ae4:	2501      	movs	r5, #1
 8020ae6:	4628      	mov	r0, r5
 8020ae8:	b007      	add	sp, #28
 8020aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020aee:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8020af2:	2a0d      	cmp	r2, #13
 8020af4:	d8e6      	bhi.n	8020ac4 <_scanf_float+0x60>
 8020af6:	a101      	add	r1, pc, #4	; (adr r1, 8020afc <_scanf_float+0x98>)
 8020af8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8020afc:	08020c3b 	.word	0x08020c3b
 8020b00:	08020ac5 	.word	0x08020ac5
 8020b04:	08020ac5 	.word	0x08020ac5
 8020b08:	08020ac5 	.word	0x08020ac5
 8020b0c:	08020c9b 	.word	0x08020c9b
 8020b10:	08020c73 	.word	0x08020c73
 8020b14:	08020ac5 	.word	0x08020ac5
 8020b18:	08020ac5 	.word	0x08020ac5
 8020b1c:	08020c49 	.word	0x08020c49
 8020b20:	08020ac5 	.word	0x08020ac5
 8020b24:	08020ac5 	.word	0x08020ac5
 8020b28:	08020ac5 	.word	0x08020ac5
 8020b2c:	08020ac5 	.word	0x08020ac5
 8020b30:	08020c01 	.word	0x08020c01
 8020b34:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8020b38:	e7db      	b.n	8020af2 <_scanf_float+0x8e>
 8020b3a:	290e      	cmp	r1, #14
 8020b3c:	d8c2      	bhi.n	8020ac4 <_scanf_float+0x60>
 8020b3e:	a001      	add	r0, pc, #4	; (adr r0, 8020b44 <_scanf_float+0xe0>)
 8020b40:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8020b44:	08020bf3 	.word	0x08020bf3
 8020b48:	08020ac5 	.word	0x08020ac5
 8020b4c:	08020bf3 	.word	0x08020bf3
 8020b50:	08020c87 	.word	0x08020c87
 8020b54:	08020ac5 	.word	0x08020ac5
 8020b58:	08020ba1 	.word	0x08020ba1
 8020b5c:	08020bdd 	.word	0x08020bdd
 8020b60:	08020bdd 	.word	0x08020bdd
 8020b64:	08020bdd 	.word	0x08020bdd
 8020b68:	08020bdd 	.word	0x08020bdd
 8020b6c:	08020bdd 	.word	0x08020bdd
 8020b70:	08020bdd 	.word	0x08020bdd
 8020b74:	08020bdd 	.word	0x08020bdd
 8020b78:	08020bdd 	.word	0x08020bdd
 8020b7c:	08020bdd 	.word	0x08020bdd
 8020b80:	2b6e      	cmp	r3, #110	; 0x6e
 8020b82:	d809      	bhi.n	8020b98 <_scanf_float+0x134>
 8020b84:	2b60      	cmp	r3, #96	; 0x60
 8020b86:	d8b2      	bhi.n	8020aee <_scanf_float+0x8a>
 8020b88:	2b54      	cmp	r3, #84	; 0x54
 8020b8a:	d077      	beq.n	8020c7c <_scanf_float+0x218>
 8020b8c:	2b59      	cmp	r3, #89	; 0x59
 8020b8e:	d199      	bne.n	8020ac4 <_scanf_float+0x60>
 8020b90:	2d07      	cmp	r5, #7
 8020b92:	d197      	bne.n	8020ac4 <_scanf_float+0x60>
 8020b94:	2508      	movs	r5, #8
 8020b96:	e029      	b.n	8020bec <_scanf_float+0x188>
 8020b98:	2b74      	cmp	r3, #116	; 0x74
 8020b9a:	d06f      	beq.n	8020c7c <_scanf_float+0x218>
 8020b9c:	2b79      	cmp	r3, #121	; 0x79
 8020b9e:	e7f6      	b.n	8020b8e <_scanf_float+0x12a>
 8020ba0:	6821      	ldr	r1, [r4, #0]
 8020ba2:	05c8      	lsls	r0, r1, #23
 8020ba4:	d51a      	bpl.n	8020bdc <_scanf_float+0x178>
 8020ba6:	9b02      	ldr	r3, [sp, #8]
 8020ba8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8020bac:	6021      	str	r1, [r4, #0]
 8020bae:	f109 0901 	add.w	r9, r9, #1
 8020bb2:	b11b      	cbz	r3, 8020bbc <_scanf_float+0x158>
 8020bb4:	3b01      	subs	r3, #1
 8020bb6:	3201      	adds	r2, #1
 8020bb8:	9302      	str	r3, [sp, #8]
 8020bba:	60a2      	str	r2, [r4, #8]
 8020bbc:	68a3      	ldr	r3, [r4, #8]
 8020bbe:	3b01      	subs	r3, #1
 8020bc0:	60a3      	str	r3, [r4, #8]
 8020bc2:	6923      	ldr	r3, [r4, #16]
 8020bc4:	3301      	adds	r3, #1
 8020bc6:	6123      	str	r3, [r4, #16]
 8020bc8:	687b      	ldr	r3, [r7, #4]
 8020bca:	3b01      	subs	r3, #1
 8020bcc:	2b00      	cmp	r3, #0
 8020bce:	607b      	str	r3, [r7, #4]
 8020bd0:	f340 8084 	ble.w	8020cdc <_scanf_float+0x278>
 8020bd4:	683b      	ldr	r3, [r7, #0]
 8020bd6:	3301      	adds	r3, #1
 8020bd8:	603b      	str	r3, [r7, #0]
 8020bda:	e766      	b.n	8020aaa <_scanf_float+0x46>
 8020bdc:	eb1a 0f05 	cmn.w	sl, r5
 8020be0:	f47f af70 	bne.w	8020ac4 <_scanf_float+0x60>
 8020be4:	6822      	ldr	r2, [r4, #0]
 8020be6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8020bea:	6022      	str	r2, [r4, #0]
 8020bec:	f806 3b01 	strb.w	r3, [r6], #1
 8020bf0:	e7e4      	b.n	8020bbc <_scanf_float+0x158>
 8020bf2:	6822      	ldr	r2, [r4, #0]
 8020bf4:	0610      	lsls	r0, r2, #24
 8020bf6:	f57f af65 	bpl.w	8020ac4 <_scanf_float+0x60>
 8020bfa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8020bfe:	e7f4      	b.n	8020bea <_scanf_float+0x186>
 8020c00:	f1ba 0f00 	cmp.w	sl, #0
 8020c04:	d10e      	bne.n	8020c24 <_scanf_float+0x1c0>
 8020c06:	f1b9 0f00 	cmp.w	r9, #0
 8020c0a:	d10e      	bne.n	8020c2a <_scanf_float+0x1c6>
 8020c0c:	6822      	ldr	r2, [r4, #0]
 8020c0e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8020c12:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8020c16:	d108      	bne.n	8020c2a <_scanf_float+0x1c6>
 8020c18:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8020c1c:	6022      	str	r2, [r4, #0]
 8020c1e:	f04f 0a01 	mov.w	sl, #1
 8020c22:	e7e3      	b.n	8020bec <_scanf_float+0x188>
 8020c24:	f1ba 0f02 	cmp.w	sl, #2
 8020c28:	d055      	beq.n	8020cd6 <_scanf_float+0x272>
 8020c2a:	2d01      	cmp	r5, #1
 8020c2c:	d002      	beq.n	8020c34 <_scanf_float+0x1d0>
 8020c2e:	2d04      	cmp	r5, #4
 8020c30:	f47f af48 	bne.w	8020ac4 <_scanf_float+0x60>
 8020c34:	3501      	adds	r5, #1
 8020c36:	b2ed      	uxtb	r5, r5
 8020c38:	e7d8      	b.n	8020bec <_scanf_float+0x188>
 8020c3a:	f1ba 0f01 	cmp.w	sl, #1
 8020c3e:	f47f af41 	bne.w	8020ac4 <_scanf_float+0x60>
 8020c42:	f04f 0a02 	mov.w	sl, #2
 8020c46:	e7d1      	b.n	8020bec <_scanf_float+0x188>
 8020c48:	b97d      	cbnz	r5, 8020c6a <_scanf_float+0x206>
 8020c4a:	f1b9 0f00 	cmp.w	r9, #0
 8020c4e:	f47f af3c 	bne.w	8020aca <_scanf_float+0x66>
 8020c52:	6822      	ldr	r2, [r4, #0]
 8020c54:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8020c58:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8020c5c:	f47f af39 	bne.w	8020ad2 <_scanf_float+0x6e>
 8020c60:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8020c64:	6022      	str	r2, [r4, #0]
 8020c66:	2501      	movs	r5, #1
 8020c68:	e7c0      	b.n	8020bec <_scanf_float+0x188>
 8020c6a:	2d03      	cmp	r5, #3
 8020c6c:	d0e2      	beq.n	8020c34 <_scanf_float+0x1d0>
 8020c6e:	2d05      	cmp	r5, #5
 8020c70:	e7de      	b.n	8020c30 <_scanf_float+0x1cc>
 8020c72:	2d02      	cmp	r5, #2
 8020c74:	f47f af26 	bne.w	8020ac4 <_scanf_float+0x60>
 8020c78:	2503      	movs	r5, #3
 8020c7a:	e7b7      	b.n	8020bec <_scanf_float+0x188>
 8020c7c:	2d06      	cmp	r5, #6
 8020c7e:	f47f af21 	bne.w	8020ac4 <_scanf_float+0x60>
 8020c82:	2507      	movs	r5, #7
 8020c84:	e7b2      	b.n	8020bec <_scanf_float+0x188>
 8020c86:	6822      	ldr	r2, [r4, #0]
 8020c88:	0591      	lsls	r1, r2, #22
 8020c8a:	f57f af1b 	bpl.w	8020ac4 <_scanf_float+0x60>
 8020c8e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8020c92:	6022      	str	r2, [r4, #0]
 8020c94:	f8cd 9004 	str.w	r9, [sp, #4]
 8020c98:	e7a8      	b.n	8020bec <_scanf_float+0x188>
 8020c9a:	6822      	ldr	r2, [r4, #0]
 8020c9c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8020ca0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8020ca4:	d006      	beq.n	8020cb4 <_scanf_float+0x250>
 8020ca6:	0550      	lsls	r0, r2, #21
 8020ca8:	f57f af0c 	bpl.w	8020ac4 <_scanf_float+0x60>
 8020cac:	f1b9 0f00 	cmp.w	r9, #0
 8020cb0:	f43f af0f 	beq.w	8020ad2 <_scanf_float+0x6e>
 8020cb4:	0591      	lsls	r1, r2, #22
 8020cb6:	bf58      	it	pl
 8020cb8:	9901      	ldrpl	r1, [sp, #4]
 8020cba:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8020cbe:	bf58      	it	pl
 8020cc0:	eba9 0101 	subpl.w	r1, r9, r1
 8020cc4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8020cc8:	bf58      	it	pl
 8020cca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8020cce:	6022      	str	r2, [r4, #0]
 8020cd0:	f04f 0900 	mov.w	r9, #0
 8020cd4:	e78a      	b.n	8020bec <_scanf_float+0x188>
 8020cd6:	f04f 0a03 	mov.w	sl, #3
 8020cda:	e787      	b.n	8020bec <_scanf_float+0x188>
 8020cdc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8020ce0:	4639      	mov	r1, r7
 8020ce2:	4640      	mov	r0, r8
 8020ce4:	4798      	blx	r3
 8020ce6:	2800      	cmp	r0, #0
 8020ce8:	f43f aedf 	beq.w	8020aaa <_scanf_float+0x46>
 8020cec:	e6ea      	b.n	8020ac4 <_scanf_float+0x60>
 8020cee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020cf2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8020cf6:	463a      	mov	r2, r7
 8020cf8:	4640      	mov	r0, r8
 8020cfa:	4798      	blx	r3
 8020cfc:	6923      	ldr	r3, [r4, #16]
 8020cfe:	3b01      	subs	r3, #1
 8020d00:	6123      	str	r3, [r4, #16]
 8020d02:	e6ec      	b.n	8020ade <_scanf_float+0x7a>
 8020d04:	1e6b      	subs	r3, r5, #1
 8020d06:	2b06      	cmp	r3, #6
 8020d08:	d825      	bhi.n	8020d56 <_scanf_float+0x2f2>
 8020d0a:	2d02      	cmp	r5, #2
 8020d0c:	d836      	bhi.n	8020d7c <_scanf_float+0x318>
 8020d0e:	455e      	cmp	r6, fp
 8020d10:	f67f aee8 	bls.w	8020ae4 <_scanf_float+0x80>
 8020d14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020d18:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8020d1c:	463a      	mov	r2, r7
 8020d1e:	4640      	mov	r0, r8
 8020d20:	4798      	blx	r3
 8020d22:	6923      	ldr	r3, [r4, #16]
 8020d24:	3b01      	subs	r3, #1
 8020d26:	6123      	str	r3, [r4, #16]
 8020d28:	e7f1      	b.n	8020d0e <_scanf_float+0x2aa>
 8020d2a:	9802      	ldr	r0, [sp, #8]
 8020d2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020d30:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8020d34:	9002      	str	r0, [sp, #8]
 8020d36:	463a      	mov	r2, r7
 8020d38:	4640      	mov	r0, r8
 8020d3a:	4798      	blx	r3
 8020d3c:	6923      	ldr	r3, [r4, #16]
 8020d3e:	3b01      	subs	r3, #1
 8020d40:	6123      	str	r3, [r4, #16]
 8020d42:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8020d46:	fa5f fa8a 	uxtb.w	sl, sl
 8020d4a:	f1ba 0f02 	cmp.w	sl, #2
 8020d4e:	d1ec      	bne.n	8020d2a <_scanf_float+0x2c6>
 8020d50:	3d03      	subs	r5, #3
 8020d52:	b2ed      	uxtb	r5, r5
 8020d54:	1b76      	subs	r6, r6, r5
 8020d56:	6823      	ldr	r3, [r4, #0]
 8020d58:	05da      	lsls	r2, r3, #23
 8020d5a:	d52f      	bpl.n	8020dbc <_scanf_float+0x358>
 8020d5c:	055b      	lsls	r3, r3, #21
 8020d5e:	d510      	bpl.n	8020d82 <_scanf_float+0x31e>
 8020d60:	455e      	cmp	r6, fp
 8020d62:	f67f aebf 	bls.w	8020ae4 <_scanf_float+0x80>
 8020d66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020d6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8020d6e:	463a      	mov	r2, r7
 8020d70:	4640      	mov	r0, r8
 8020d72:	4798      	blx	r3
 8020d74:	6923      	ldr	r3, [r4, #16]
 8020d76:	3b01      	subs	r3, #1
 8020d78:	6123      	str	r3, [r4, #16]
 8020d7a:	e7f1      	b.n	8020d60 <_scanf_float+0x2fc>
 8020d7c:	46aa      	mov	sl, r5
 8020d7e:	9602      	str	r6, [sp, #8]
 8020d80:	e7df      	b.n	8020d42 <_scanf_float+0x2de>
 8020d82:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8020d86:	6923      	ldr	r3, [r4, #16]
 8020d88:	2965      	cmp	r1, #101	; 0x65
 8020d8a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8020d8e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8020d92:	6123      	str	r3, [r4, #16]
 8020d94:	d00c      	beq.n	8020db0 <_scanf_float+0x34c>
 8020d96:	2945      	cmp	r1, #69	; 0x45
 8020d98:	d00a      	beq.n	8020db0 <_scanf_float+0x34c>
 8020d9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020d9e:	463a      	mov	r2, r7
 8020da0:	4640      	mov	r0, r8
 8020da2:	4798      	blx	r3
 8020da4:	6923      	ldr	r3, [r4, #16]
 8020da6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8020daa:	3b01      	subs	r3, #1
 8020dac:	1eb5      	subs	r5, r6, #2
 8020dae:	6123      	str	r3, [r4, #16]
 8020db0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020db4:	463a      	mov	r2, r7
 8020db6:	4640      	mov	r0, r8
 8020db8:	4798      	blx	r3
 8020dba:	462e      	mov	r6, r5
 8020dbc:	6825      	ldr	r5, [r4, #0]
 8020dbe:	f015 0510 	ands.w	r5, r5, #16
 8020dc2:	d14d      	bne.n	8020e60 <_scanf_float+0x3fc>
 8020dc4:	7035      	strb	r5, [r6, #0]
 8020dc6:	6823      	ldr	r3, [r4, #0]
 8020dc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8020dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8020dd0:	d11a      	bne.n	8020e08 <_scanf_float+0x3a4>
 8020dd2:	9b01      	ldr	r3, [sp, #4]
 8020dd4:	454b      	cmp	r3, r9
 8020dd6:	eba3 0209 	sub.w	r2, r3, r9
 8020dda:	d122      	bne.n	8020e22 <_scanf_float+0x3be>
 8020ddc:	2200      	movs	r2, #0
 8020dde:	4659      	mov	r1, fp
 8020de0:	4640      	mov	r0, r8
 8020de2:	f000 ff4b 	bl	8021c7c <_strtod_r>
 8020de6:	9b03      	ldr	r3, [sp, #12]
 8020de8:	6821      	ldr	r1, [r4, #0]
 8020dea:	681b      	ldr	r3, [r3, #0]
 8020dec:	f011 0f02 	tst.w	r1, #2
 8020df0:	f103 0204 	add.w	r2, r3, #4
 8020df4:	d020      	beq.n	8020e38 <_scanf_float+0x3d4>
 8020df6:	9903      	ldr	r1, [sp, #12]
 8020df8:	600a      	str	r2, [r1, #0]
 8020dfa:	681b      	ldr	r3, [r3, #0]
 8020dfc:	ed83 0b00 	vstr	d0, [r3]
 8020e00:	68e3      	ldr	r3, [r4, #12]
 8020e02:	3301      	adds	r3, #1
 8020e04:	60e3      	str	r3, [r4, #12]
 8020e06:	e66e      	b.n	8020ae6 <_scanf_float+0x82>
 8020e08:	9b04      	ldr	r3, [sp, #16]
 8020e0a:	2b00      	cmp	r3, #0
 8020e0c:	d0e6      	beq.n	8020ddc <_scanf_float+0x378>
 8020e0e:	9905      	ldr	r1, [sp, #20]
 8020e10:	230a      	movs	r3, #10
 8020e12:	462a      	mov	r2, r5
 8020e14:	3101      	adds	r1, #1
 8020e16:	4640      	mov	r0, r8
 8020e18:	f000 ffba 	bl	8021d90 <_strtol_r>
 8020e1c:	9b04      	ldr	r3, [sp, #16]
 8020e1e:	9e05      	ldr	r6, [sp, #20]
 8020e20:	1ac2      	subs	r2, r0, r3
 8020e22:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8020e26:	429e      	cmp	r6, r3
 8020e28:	bf28      	it	cs
 8020e2a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8020e2e:	490d      	ldr	r1, [pc, #52]	; (8020e64 <_scanf_float+0x400>)
 8020e30:	4630      	mov	r0, r6
 8020e32:	f000 f8ff 	bl	8021034 <siprintf>
 8020e36:	e7d1      	b.n	8020ddc <_scanf_float+0x378>
 8020e38:	f011 0f04 	tst.w	r1, #4
 8020e3c:	9903      	ldr	r1, [sp, #12]
 8020e3e:	600a      	str	r2, [r1, #0]
 8020e40:	d1db      	bne.n	8020dfa <_scanf_float+0x396>
 8020e42:	eeb4 0b40 	vcmp.f64	d0, d0
 8020e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020e4a:	681e      	ldr	r6, [r3, #0]
 8020e4c:	d705      	bvc.n	8020e5a <_scanf_float+0x3f6>
 8020e4e:	4806      	ldr	r0, [pc, #24]	; (8020e68 <_scanf_float+0x404>)
 8020e50:	f000 f8ea 	bl	8021028 <nanf>
 8020e54:	ed86 0a00 	vstr	s0, [r6]
 8020e58:	e7d2      	b.n	8020e00 <_scanf_float+0x39c>
 8020e5a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8020e5e:	e7f9      	b.n	8020e54 <_scanf_float+0x3f0>
 8020e60:	2500      	movs	r5, #0
 8020e62:	e640      	b.n	8020ae6 <_scanf_float+0x82>
 8020e64:	0802932c 	.word	0x0802932c
 8020e68:	08029433 	.word	0x08029433

08020e6c <iprintf>:
 8020e6c:	b40f      	push	{r0, r1, r2, r3}
 8020e6e:	4b0a      	ldr	r3, [pc, #40]	; (8020e98 <iprintf+0x2c>)
 8020e70:	b513      	push	{r0, r1, r4, lr}
 8020e72:	681c      	ldr	r4, [r3, #0]
 8020e74:	b124      	cbz	r4, 8020e80 <iprintf+0x14>
 8020e76:	69a3      	ldr	r3, [r4, #24]
 8020e78:	b913      	cbnz	r3, 8020e80 <iprintf+0x14>
 8020e7a:	4620      	mov	r0, r4
 8020e7c:	f001 ff96 	bl	8022dac <__sinit>
 8020e80:	ab05      	add	r3, sp, #20
 8020e82:	9a04      	ldr	r2, [sp, #16]
 8020e84:	68a1      	ldr	r1, [r4, #8]
 8020e86:	9301      	str	r3, [sp, #4]
 8020e88:	4620      	mov	r0, r4
 8020e8a:	f003 fa87 	bl	802439c <_vfiprintf_r>
 8020e8e:	b002      	add	sp, #8
 8020e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020e94:	b004      	add	sp, #16
 8020e96:	4770      	bx	lr
 8020e98:	24003450 	.word	0x24003450

08020e9c <_puts_r>:
 8020e9c:	b570      	push	{r4, r5, r6, lr}
 8020e9e:	460e      	mov	r6, r1
 8020ea0:	4605      	mov	r5, r0
 8020ea2:	b118      	cbz	r0, 8020eac <_puts_r+0x10>
 8020ea4:	6983      	ldr	r3, [r0, #24]
 8020ea6:	b90b      	cbnz	r3, 8020eac <_puts_r+0x10>
 8020ea8:	f001 ff80 	bl	8022dac <__sinit>
 8020eac:	69ab      	ldr	r3, [r5, #24]
 8020eae:	68ac      	ldr	r4, [r5, #8]
 8020eb0:	b913      	cbnz	r3, 8020eb8 <_puts_r+0x1c>
 8020eb2:	4628      	mov	r0, r5
 8020eb4:	f001 ff7a 	bl	8022dac <__sinit>
 8020eb8:	4b2c      	ldr	r3, [pc, #176]	; (8020f6c <_puts_r+0xd0>)
 8020eba:	429c      	cmp	r4, r3
 8020ebc:	d120      	bne.n	8020f00 <_puts_r+0x64>
 8020ebe:	686c      	ldr	r4, [r5, #4]
 8020ec0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020ec2:	07db      	lsls	r3, r3, #31
 8020ec4:	d405      	bmi.n	8020ed2 <_puts_r+0x36>
 8020ec6:	89a3      	ldrh	r3, [r4, #12]
 8020ec8:	0598      	lsls	r0, r3, #22
 8020eca:	d402      	bmi.n	8020ed2 <_puts_r+0x36>
 8020ecc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020ece:	f002 fb90 	bl	80235f2 <__retarget_lock_acquire_recursive>
 8020ed2:	89a3      	ldrh	r3, [r4, #12]
 8020ed4:	0719      	lsls	r1, r3, #28
 8020ed6:	d51d      	bpl.n	8020f14 <_puts_r+0x78>
 8020ed8:	6923      	ldr	r3, [r4, #16]
 8020eda:	b1db      	cbz	r3, 8020f14 <_puts_r+0x78>
 8020edc:	3e01      	subs	r6, #1
 8020ede:	68a3      	ldr	r3, [r4, #8]
 8020ee0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8020ee4:	3b01      	subs	r3, #1
 8020ee6:	60a3      	str	r3, [r4, #8]
 8020ee8:	bb39      	cbnz	r1, 8020f3a <_puts_r+0x9e>
 8020eea:	2b00      	cmp	r3, #0
 8020eec:	da38      	bge.n	8020f60 <_puts_r+0xc4>
 8020eee:	4622      	mov	r2, r4
 8020ef0:	210a      	movs	r1, #10
 8020ef2:	4628      	mov	r0, r5
 8020ef4:	f000 ff4e 	bl	8021d94 <__swbuf_r>
 8020ef8:	3001      	adds	r0, #1
 8020efa:	d011      	beq.n	8020f20 <_puts_r+0x84>
 8020efc:	250a      	movs	r5, #10
 8020efe:	e011      	b.n	8020f24 <_puts_r+0x88>
 8020f00:	4b1b      	ldr	r3, [pc, #108]	; (8020f70 <_puts_r+0xd4>)
 8020f02:	429c      	cmp	r4, r3
 8020f04:	d101      	bne.n	8020f0a <_puts_r+0x6e>
 8020f06:	68ac      	ldr	r4, [r5, #8]
 8020f08:	e7da      	b.n	8020ec0 <_puts_r+0x24>
 8020f0a:	4b1a      	ldr	r3, [pc, #104]	; (8020f74 <_puts_r+0xd8>)
 8020f0c:	429c      	cmp	r4, r3
 8020f0e:	bf08      	it	eq
 8020f10:	68ec      	ldreq	r4, [r5, #12]
 8020f12:	e7d5      	b.n	8020ec0 <_puts_r+0x24>
 8020f14:	4621      	mov	r1, r4
 8020f16:	4628      	mov	r0, r5
 8020f18:	f000 ff8e 	bl	8021e38 <__swsetup_r>
 8020f1c:	2800      	cmp	r0, #0
 8020f1e:	d0dd      	beq.n	8020edc <_puts_r+0x40>
 8020f20:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8020f24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020f26:	07da      	lsls	r2, r3, #31
 8020f28:	d405      	bmi.n	8020f36 <_puts_r+0x9a>
 8020f2a:	89a3      	ldrh	r3, [r4, #12]
 8020f2c:	059b      	lsls	r3, r3, #22
 8020f2e:	d402      	bmi.n	8020f36 <_puts_r+0x9a>
 8020f30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020f32:	f002 fb5f 	bl	80235f4 <__retarget_lock_release_recursive>
 8020f36:	4628      	mov	r0, r5
 8020f38:	bd70      	pop	{r4, r5, r6, pc}
 8020f3a:	2b00      	cmp	r3, #0
 8020f3c:	da04      	bge.n	8020f48 <_puts_r+0xac>
 8020f3e:	69a2      	ldr	r2, [r4, #24]
 8020f40:	429a      	cmp	r2, r3
 8020f42:	dc06      	bgt.n	8020f52 <_puts_r+0xb6>
 8020f44:	290a      	cmp	r1, #10
 8020f46:	d004      	beq.n	8020f52 <_puts_r+0xb6>
 8020f48:	6823      	ldr	r3, [r4, #0]
 8020f4a:	1c5a      	adds	r2, r3, #1
 8020f4c:	6022      	str	r2, [r4, #0]
 8020f4e:	7019      	strb	r1, [r3, #0]
 8020f50:	e7c5      	b.n	8020ede <_puts_r+0x42>
 8020f52:	4622      	mov	r2, r4
 8020f54:	4628      	mov	r0, r5
 8020f56:	f000 ff1d 	bl	8021d94 <__swbuf_r>
 8020f5a:	3001      	adds	r0, #1
 8020f5c:	d1bf      	bne.n	8020ede <_puts_r+0x42>
 8020f5e:	e7df      	b.n	8020f20 <_puts_r+0x84>
 8020f60:	6823      	ldr	r3, [r4, #0]
 8020f62:	250a      	movs	r5, #10
 8020f64:	1c5a      	adds	r2, r3, #1
 8020f66:	6022      	str	r2, [r4, #0]
 8020f68:	701d      	strb	r5, [r3, #0]
 8020f6a:	e7db      	b.n	8020f24 <_puts_r+0x88>
 8020f6c:	080294d4 	.word	0x080294d4
 8020f70:	080294f4 	.word	0x080294f4
 8020f74:	080294b4 	.word	0x080294b4

08020f78 <puts>:
 8020f78:	4b02      	ldr	r3, [pc, #8]	; (8020f84 <puts+0xc>)
 8020f7a:	4601      	mov	r1, r0
 8020f7c:	6818      	ldr	r0, [r3, #0]
 8020f7e:	f7ff bf8d 	b.w	8020e9c <_puts_r>
 8020f82:	bf00      	nop
 8020f84:	24003450 	.word	0x24003450

08020f88 <rand>:
 8020f88:	4b17      	ldr	r3, [pc, #92]	; (8020fe8 <rand+0x60>)
 8020f8a:	b510      	push	{r4, lr}
 8020f8c:	681c      	ldr	r4, [r3, #0]
 8020f8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8020f90:	b9b3      	cbnz	r3, 8020fc0 <rand+0x38>
 8020f92:	2018      	movs	r0, #24
 8020f94:	f7ff f832 	bl	801fffc <malloc>
 8020f98:	63a0      	str	r0, [r4, #56]	; 0x38
 8020f9a:	b928      	cbnz	r0, 8020fa8 <rand+0x20>
 8020f9c:	4602      	mov	r2, r0
 8020f9e:	4b13      	ldr	r3, [pc, #76]	; (8020fec <rand+0x64>)
 8020fa0:	4813      	ldr	r0, [pc, #76]	; (8020ff0 <rand+0x68>)
 8020fa2:	214e      	movs	r1, #78	; 0x4e
 8020fa4:	f000 ffb6 	bl	8021f14 <__assert_func>
 8020fa8:	4a12      	ldr	r2, [pc, #72]	; (8020ff4 <rand+0x6c>)
 8020faa:	4b13      	ldr	r3, [pc, #76]	; (8020ff8 <rand+0x70>)
 8020fac:	e9c0 2300 	strd	r2, r3, [r0]
 8020fb0:	4b12      	ldr	r3, [pc, #72]	; (8020ffc <rand+0x74>)
 8020fb2:	6083      	str	r3, [r0, #8]
 8020fb4:	230b      	movs	r3, #11
 8020fb6:	8183      	strh	r3, [r0, #12]
 8020fb8:	2201      	movs	r2, #1
 8020fba:	2300      	movs	r3, #0
 8020fbc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8020fc0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8020fc2:	480f      	ldr	r0, [pc, #60]	; (8021000 <rand+0x78>)
 8020fc4:	690a      	ldr	r2, [r1, #16]
 8020fc6:	694b      	ldr	r3, [r1, #20]
 8020fc8:	4c0e      	ldr	r4, [pc, #56]	; (8021004 <rand+0x7c>)
 8020fca:	4350      	muls	r0, r2
 8020fcc:	fb04 0003 	mla	r0, r4, r3, r0
 8020fd0:	fba2 3404 	umull	r3, r4, r2, r4
 8020fd4:	1c5a      	adds	r2, r3, #1
 8020fd6:	4404      	add	r4, r0
 8020fd8:	f144 0000 	adc.w	r0, r4, #0
 8020fdc:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8020fe0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8020fe4:	bd10      	pop	{r4, pc}
 8020fe6:	bf00      	nop
 8020fe8:	24003450 	.word	0x24003450
 8020fec:	08029331 	.word	0x08029331
 8020ff0:	08029348 	.word	0x08029348
 8020ff4:	abcd330e 	.word	0xabcd330e
 8020ff8:	e66d1234 	.word	0xe66d1234
 8020ffc:	0005deec 	.word	0x0005deec
 8021000:	5851f42d 	.word	0x5851f42d
 8021004:	4c957f2d 	.word	0x4c957f2d

08021008 <_sbrk_r>:
 8021008:	b538      	push	{r3, r4, r5, lr}
 802100a:	4d06      	ldr	r5, [pc, #24]	; (8021024 <_sbrk_r+0x1c>)
 802100c:	2300      	movs	r3, #0
 802100e:	4604      	mov	r4, r0
 8021010:	4608      	mov	r0, r1
 8021012:	602b      	str	r3, [r5, #0]
 8021014:	f7e2 f8cc 	bl	80031b0 <_sbrk>
 8021018:	1c43      	adds	r3, r0, #1
 802101a:	d102      	bne.n	8021022 <_sbrk_r+0x1a>
 802101c:	682b      	ldr	r3, [r5, #0]
 802101e:	b103      	cbz	r3, 8021022 <_sbrk_r+0x1a>
 8021020:	6023      	str	r3, [r4, #0]
 8021022:	bd38      	pop	{r3, r4, r5, pc}
 8021024:	2400cad4 	.word	0x2400cad4

08021028 <nanf>:
 8021028:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8021030 <nanf+0x8>
 802102c:	4770      	bx	lr
 802102e:	bf00      	nop
 8021030:	7fc00000 	.word	0x7fc00000

08021034 <siprintf>:
 8021034:	b40e      	push	{r1, r2, r3}
 8021036:	b500      	push	{lr}
 8021038:	b09c      	sub	sp, #112	; 0x70
 802103a:	ab1d      	add	r3, sp, #116	; 0x74
 802103c:	9002      	str	r0, [sp, #8]
 802103e:	9006      	str	r0, [sp, #24]
 8021040:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8021044:	4809      	ldr	r0, [pc, #36]	; (802106c <siprintf+0x38>)
 8021046:	9107      	str	r1, [sp, #28]
 8021048:	9104      	str	r1, [sp, #16]
 802104a:	4909      	ldr	r1, [pc, #36]	; (8021070 <siprintf+0x3c>)
 802104c:	f853 2b04 	ldr.w	r2, [r3], #4
 8021050:	9105      	str	r1, [sp, #20]
 8021052:	6800      	ldr	r0, [r0, #0]
 8021054:	9301      	str	r3, [sp, #4]
 8021056:	a902      	add	r1, sp, #8
 8021058:	f003 f876 	bl	8024148 <_svfiprintf_r>
 802105c:	9b02      	ldr	r3, [sp, #8]
 802105e:	2200      	movs	r2, #0
 8021060:	701a      	strb	r2, [r3, #0]
 8021062:	b01c      	add	sp, #112	; 0x70
 8021064:	f85d eb04 	ldr.w	lr, [sp], #4
 8021068:	b003      	add	sp, #12
 802106a:	4770      	bx	lr
 802106c:	24003450 	.word	0x24003450
 8021070:	ffff0208 	.word	0xffff0208

08021074 <strncmp>:
 8021074:	b510      	push	{r4, lr}
 8021076:	b16a      	cbz	r2, 8021094 <strncmp+0x20>
 8021078:	3901      	subs	r1, #1
 802107a:	1884      	adds	r4, r0, r2
 802107c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8021080:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8021084:	4293      	cmp	r3, r2
 8021086:	d103      	bne.n	8021090 <strncmp+0x1c>
 8021088:	42a0      	cmp	r0, r4
 802108a:	d001      	beq.n	8021090 <strncmp+0x1c>
 802108c:	2b00      	cmp	r3, #0
 802108e:	d1f5      	bne.n	802107c <strncmp+0x8>
 8021090:	1a98      	subs	r0, r3, r2
 8021092:	bd10      	pop	{r4, pc}
 8021094:	4610      	mov	r0, r2
 8021096:	e7fc      	b.n	8021092 <strncmp+0x1e>

08021098 <sulp>:
 8021098:	b570      	push	{r4, r5, r6, lr}
 802109a:	4604      	mov	r4, r0
 802109c:	460d      	mov	r5, r1
 802109e:	4616      	mov	r6, r2
 80210a0:	ec45 4b10 	vmov	d0, r4, r5
 80210a4:	f002 fe96 	bl	8023dd4 <__ulp>
 80210a8:	b17e      	cbz	r6, 80210ca <sulp+0x32>
 80210aa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80210ae:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80210b2:	2b00      	cmp	r3, #0
 80210b4:	dd09      	ble.n	80210ca <sulp+0x32>
 80210b6:	051b      	lsls	r3, r3, #20
 80210b8:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80210bc:	2000      	movs	r0, #0
 80210be:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80210c2:	ec41 0b17 	vmov	d7, r0, r1
 80210c6:	ee20 0b07 	vmul.f64	d0, d0, d7
 80210ca:	bd70      	pop	{r4, r5, r6, pc}
 80210cc:	0000      	movs	r0, r0
	...

080210d0 <_strtod_l>:
 80210d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80210d4:	ed2d 8b0c 	vpush	{d8-d13}
 80210d8:	b09d      	sub	sp, #116	; 0x74
 80210da:	461f      	mov	r7, r3
 80210dc:	2300      	movs	r3, #0
 80210de:	9318      	str	r3, [sp, #96]	; 0x60
 80210e0:	4ba6      	ldr	r3, [pc, #664]	; (802137c <_strtod_l+0x2ac>)
 80210e2:	9213      	str	r2, [sp, #76]	; 0x4c
 80210e4:	681b      	ldr	r3, [r3, #0]
 80210e6:	9308      	str	r3, [sp, #32]
 80210e8:	4604      	mov	r4, r0
 80210ea:	4618      	mov	r0, r3
 80210ec:	468a      	mov	sl, r1
 80210ee:	f7df f8f7 	bl	80002e0 <strlen>
 80210f2:	f04f 0800 	mov.w	r8, #0
 80210f6:	4605      	mov	r5, r0
 80210f8:	f04f 0900 	mov.w	r9, #0
 80210fc:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8021100:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021102:	781a      	ldrb	r2, [r3, #0]
 8021104:	2a2b      	cmp	r2, #43	; 0x2b
 8021106:	d04d      	beq.n	80211a4 <_strtod_l+0xd4>
 8021108:	d83a      	bhi.n	8021180 <_strtod_l+0xb0>
 802110a:	2a0d      	cmp	r2, #13
 802110c:	d833      	bhi.n	8021176 <_strtod_l+0xa6>
 802110e:	2a08      	cmp	r2, #8
 8021110:	d833      	bhi.n	802117a <_strtod_l+0xaa>
 8021112:	2a00      	cmp	r2, #0
 8021114:	d03d      	beq.n	8021192 <_strtod_l+0xc2>
 8021116:	2300      	movs	r3, #0
 8021118:	930b      	str	r3, [sp, #44]	; 0x2c
 802111a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 802111c:	7833      	ldrb	r3, [r6, #0]
 802111e:	2b30      	cmp	r3, #48	; 0x30
 8021120:	f040 80b6 	bne.w	8021290 <_strtod_l+0x1c0>
 8021124:	7873      	ldrb	r3, [r6, #1]
 8021126:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802112a:	2b58      	cmp	r3, #88	; 0x58
 802112c:	d16d      	bne.n	802120a <_strtod_l+0x13a>
 802112e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021130:	9301      	str	r3, [sp, #4]
 8021132:	ab18      	add	r3, sp, #96	; 0x60
 8021134:	9702      	str	r7, [sp, #8]
 8021136:	9300      	str	r3, [sp, #0]
 8021138:	4a91      	ldr	r2, [pc, #580]	; (8021380 <_strtod_l+0x2b0>)
 802113a:	ab19      	add	r3, sp, #100	; 0x64
 802113c:	a917      	add	r1, sp, #92	; 0x5c
 802113e:	4620      	mov	r0, r4
 8021140:	f001 ff4a 	bl	8022fd8 <__gethex>
 8021144:	f010 0507 	ands.w	r5, r0, #7
 8021148:	4607      	mov	r7, r0
 802114a:	d005      	beq.n	8021158 <_strtod_l+0x88>
 802114c:	2d06      	cmp	r5, #6
 802114e:	d12b      	bne.n	80211a8 <_strtod_l+0xd8>
 8021150:	3601      	adds	r6, #1
 8021152:	2300      	movs	r3, #0
 8021154:	9617      	str	r6, [sp, #92]	; 0x5c
 8021156:	930b      	str	r3, [sp, #44]	; 0x2c
 8021158:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802115a:	2b00      	cmp	r3, #0
 802115c:	f040 856e 	bne.w	8021c3c <_strtod_l+0xb6c>
 8021160:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021162:	b1e3      	cbz	r3, 802119e <_strtod_l+0xce>
 8021164:	ec49 8b17 	vmov	d7, r8, r9
 8021168:	eeb1 0b47 	vneg.f64	d0, d7
 802116c:	b01d      	add	sp, #116	; 0x74
 802116e:	ecbd 8b0c 	vpop	{d8-d13}
 8021172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021176:	2a20      	cmp	r2, #32
 8021178:	d1cd      	bne.n	8021116 <_strtod_l+0x46>
 802117a:	3301      	adds	r3, #1
 802117c:	9317      	str	r3, [sp, #92]	; 0x5c
 802117e:	e7bf      	b.n	8021100 <_strtod_l+0x30>
 8021180:	2a2d      	cmp	r2, #45	; 0x2d
 8021182:	d1c8      	bne.n	8021116 <_strtod_l+0x46>
 8021184:	2201      	movs	r2, #1
 8021186:	920b      	str	r2, [sp, #44]	; 0x2c
 8021188:	1c5a      	adds	r2, r3, #1
 802118a:	9217      	str	r2, [sp, #92]	; 0x5c
 802118c:	785b      	ldrb	r3, [r3, #1]
 802118e:	2b00      	cmp	r3, #0
 8021190:	d1c3      	bne.n	802111a <_strtod_l+0x4a>
 8021192:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021194:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8021198:	2b00      	cmp	r3, #0
 802119a:	f040 854d 	bne.w	8021c38 <_strtod_l+0xb68>
 802119e:	ec49 8b10 	vmov	d0, r8, r9
 80211a2:	e7e3      	b.n	802116c <_strtod_l+0x9c>
 80211a4:	2200      	movs	r2, #0
 80211a6:	e7ee      	b.n	8021186 <_strtod_l+0xb6>
 80211a8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80211aa:	b13a      	cbz	r2, 80211bc <_strtod_l+0xec>
 80211ac:	2135      	movs	r1, #53	; 0x35
 80211ae:	a81a      	add	r0, sp, #104	; 0x68
 80211b0:	f002 ff1c 	bl	8023fec <__copybits>
 80211b4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80211b6:	4620      	mov	r0, r4
 80211b8:	f002 fae0 	bl	802377c <_Bfree>
 80211bc:	3d01      	subs	r5, #1
 80211be:	2d05      	cmp	r5, #5
 80211c0:	d807      	bhi.n	80211d2 <_strtod_l+0x102>
 80211c2:	e8df f005 	tbb	[pc, r5]
 80211c6:	0b0e      	.short	0x0b0e
 80211c8:	030e1d18 	.word	0x030e1d18
 80211cc:	f04f 0900 	mov.w	r9, #0
 80211d0:	46c8      	mov	r8, r9
 80211d2:	073b      	lsls	r3, r7, #28
 80211d4:	d5c0      	bpl.n	8021158 <_strtod_l+0x88>
 80211d6:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80211da:	e7bd      	b.n	8021158 <_strtod_l+0x88>
 80211dc:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 80211e0:	e7f7      	b.n	80211d2 <_strtod_l+0x102>
 80211e2:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 80211e6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80211e8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80211ec:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80211f0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80211f4:	e7ed      	b.n	80211d2 <_strtod_l+0x102>
 80211f6:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8021384 <_strtod_l+0x2b4>
 80211fa:	f04f 0800 	mov.w	r8, #0
 80211fe:	e7e8      	b.n	80211d2 <_strtod_l+0x102>
 8021200:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8021204:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8021208:	e7e3      	b.n	80211d2 <_strtod_l+0x102>
 802120a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802120c:	1c5a      	adds	r2, r3, #1
 802120e:	9217      	str	r2, [sp, #92]	; 0x5c
 8021210:	785b      	ldrb	r3, [r3, #1]
 8021212:	2b30      	cmp	r3, #48	; 0x30
 8021214:	d0f9      	beq.n	802120a <_strtod_l+0x13a>
 8021216:	2b00      	cmp	r3, #0
 8021218:	d09e      	beq.n	8021158 <_strtod_l+0x88>
 802121a:	2301      	movs	r3, #1
 802121c:	9306      	str	r3, [sp, #24]
 802121e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021220:	930c      	str	r3, [sp, #48]	; 0x30
 8021222:	2300      	movs	r3, #0
 8021224:	9304      	str	r3, [sp, #16]
 8021226:	930a      	str	r3, [sp, #40]	; 0x28
 8021228:	461e      	mov	r6, r3
 802122a:	220a      	movs	r2, #10
 802122c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802122e:	f890 b000 	ldrb.w	fp, [r0]
 8021232:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 8021236:	b2d9      	uxtb	r1, r3
 8021238:	2909      	cmp	r1, #9
 802123a:	d92b      	bls.n	8021294 <_strtod_l+0x1c4>
 802123c:	9908      	ldr	r1, [sp, #32]
 802123e:	462a      	mov	r2, r5
 8021240:	f7ff ff18 	bl	8021074 <strncmp>
 8021244:	2800      	cmp	r0, #0
 8021246:	d035      	beq.n	80212b4 <_strtod_l+0x1e4>
 8021248:	2000      	movs	r0, #0
 802124a:	465a      	mov	r2, fp
 802124c:	4633      	mov	r3, r6
 802124e:	4683      	mov	fp, r0
 8021250:	4601      	mov	r1, r0
 8021252:	2a65      	cmp	r2, #101	; 0x65
 8021254:	d001      	beq.n	802125a <_strtod_l+0x18a>
 8021256:	2a45      	cmp	r2, #69	; 0x45
 8021258:	d118      	bne.n	802128c <_strtod_l+0x1bc>
 802125a:	b91b      	cbnz	r3, 8021264 <_strtod_l+0x194>
 802125c:	9b06      	ldr	r3, [sp, #24]
 802125e:	4303      	orrs	r3, r0
 8021260:	d097      	beq.n	8021192 <_strtod_l+0xc2>
 8021262:	2300      	movs	r3, #0
 8021264:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8021268:	f10a 0201 	add.w	r2, sl, #1
 802126c:	9217      	str	r2, [sp, #92]	; 0x5c
 802126e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8021272:	2a2b      	cmp	r2, #43	; 0x2b
 8021274:	d077      	beq.n	8021366 <_strtod_l+0x296>
 8021276:	2a2d      	cmp	r2, #45	; 0x2d
 8021278:	d07d      	beq.n	8021376 <_strtod_l+0x2a6>
 802127a:	f04f 0e00 	mov.w	lr, #0
 802127e:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8021282:	2d09      	cmp	r5, #9
 8021284:	f240 8084 	bls.w	8021390 <_strtod_l+0x2c0>
 8021288:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 802128c:	2500      	movs	r5, #0
 802128e:	e09f      	b.n	80213d0 <_strtod_l+0x300>
 8021290:	2300      	movs	r3, #0
 8021292:	e7c3      	b.n	802121c <_strtod_l+0x14c>
 8021294:	2e08      	cmp	r6, #8
 8021296:	bfd5      	itete	le
 8021298:	990a      	ldrle	r1, [sp, #40]	; 0x28
 802129a:	9904      	ldrgt	r1, [sp, #16]
 802129c:	fb02 3301 	mlale	r3, r2, r1, r3
 80212a0:	fb02 3301 	mlagt	r3, r2, r1, r3
 80212a4:	f100 0001 	add.w	r0, r0, #1
 80212a8:	bfd4      	ite	le
 80212aa:	930a      	strle	r3, [sp, #40]	; 0x28
 80212ac:	9304      	strgt	r3, [sp, #16]
 80212ae:	3601      	adds	r6, #1
 80212b0:	9017      	str	r0, [sp, #92]	; 0x5c
 80212b2:	e7bb      	b.n	802122c <_strtod_l+0x15c>
 80212b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80212b6:	195a      	adds	r2, r3, r5
 80212b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80212ba:	5d5a      	ldrb	r2, [r3, r5]
 80212bc:	b3ae      	cbz	r6, 802132a <_strtod_l+0x25a>
 80212be:	4683      	mov	fp, r0
 80212c0:	4633      	mov	r3, r6
 80212c2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80212c6:	2909      	cmp	r1, #9
 80212c8:	d912      	bls.n	80212f0 <_strtod_l+0x220>
 80212ca:	2101      	movs	r1, #1
 80212cc:	e7c1      	b.n	8021252 <_strtod_l+0x182>
 80212ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80212d0:	1c5a      	adds	r2, r3, #1
 80212d2:	9217      	str	r2, [sp, #92]	; 0x5c
 80212d4:	785a      	ldrb	r2, [r3, #1]
 80212d6:	3001      	adds	r0, #1
 80212d8:	2a30      	cmp	r2, #48	; 0x30
 80212da:	d0f8      	beq.n	80212ce <_strtod_l+0x1fe>
 80212dc:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80212e0:	2b08      	cmp	r3, #8
 80212e2:	f200 84b0 	bhi.w	8021c46 <_strtod_l+0xb76>
 80212e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80212e8:	930c      	str	r3, [sp, #48]	; 0x30
 80212ea:	4683      	mov	fp, r0
 80212ec:	2000      	movs	r0, #0
 80212ee:	4603      	mov	r3, r0
 80212f0:	3a30      	subs	r2, #48	; 0x30
 80212f2:	f100 0101 	add.w	r1, r0, #1
 80212f6:	d012      	beq.n	802131e <_strtod_l+0x24e>
 80212f8:	448b      	add	fp, r1
 80212fa:	eb00 0c03 	add.w	ip, r0, r3
 80212fe:	4619      	mov	r1, r3
 8021300:	250a      	movs	r5, #10
 8021302:	4561      	cmp	r1, ip
 8021304:	d113      	bne.n	802132e <_strtod_l+0x25e>
 8021306:	1819      	adds	r1, r3, r0
 8021308:	2908      	cmp	r1, #8
 802130a:	f103 0301 	add.w	r3, r3, #1
 802130e:	4403      	add	r3, r0
 8021310:	dc1d      	bgt.n	802134e <_strtod_l+0x27e>
 8021312:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021314:	210a      	movs	r1, #10
 8021316:	fb01 2200 	mla	r2, r1, r0, r2
 802131a:	920a      	str	r2, [sp, #40]	; 0x28
 802131c:	2100      	movs	r1, #0
 802131e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8021320:	1c50      	adds	r0, r2, #1
 8021322:	9017      	str	r0, [sp, #92]	; 0x5c
 8021324:	7852      	ldrb	r2, [r2, #1]
 8021326:	4608      	mov	r0, r1
 8021328:	e7cb      	b.n	80212c2 <_strtod_l+0x1f2>
 802132a:	4630      	mov	r0, r6
 802132c:	e7d4      	b.n	80212d8 <_strtod_l+0x208>
 802132e:	2908      	cmp	r1, #8
 8021330:	dc04      	bgt.n	802133c <_strtod_l+0x26c>
 8021332:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8021334:	436f      	muls	r7, r5
 8021336:	970a      	str	r7, [sp, #40]	; 0x28
 8021338:	3101      	adds	r1, #1
 802133a:	e7e2      	b.n	8021302 <_strtod_l+0x232>
 802133c:	f101 0e01 	add.w	lr, r1, #1
 8021340:	f1be 0f10 	cmp.w	lr, #16
 8021344:	bfde      	ittt	le
 8021346:	9f04      	ldrle	r7, [sp, #16]
 8021348:	436f      	mulle	r7, r5
 802134a:	9704      	strle	r7, [sp, #16]
 802134c:	e7f4      	b.n	8021338 <_strtod_l+0x268>
 802134e:	2b10      	cmp	r3, #16
 8021350:	bfdf      	itttt	le
 8021352:	9804      	ldrle	r0, [sp, #16]
 8021354:	210a      	movle	r1, #10
 8021356:	fb01 2200 	mlale	r2, r1, r0, r2
 802135a:	9204      	strle	r2, [sp, #16]
 802135c:	e7de      	b.n	802131c <_strtod_l+0x24c>
 802135e:	f04f 0b00 	mov.w	fp, #0
 8021362:	2101      	movs	r1, #1
 8021364:	e77a      	b.n	802125c <_strtod_l+0x18c>
 8021366:	f04f 0e00 	mov.w	lr, #0
 802136a:	f10a 0202 	add.w	r2, sl, #2
 802136e:	9217      	str	r2, [sp, #92]	; 0x5c
 8021370:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8021374:	e783      	b.n	802127e <_strtod_l+0x1ae>
 8021376:	f04f 0e01 	mov.w	lr, #1
 802137a:	e7f6      	b.n	802136a <_strtod_l+0x29a>
 802137c:	08029580 	.word	0x08029580
 8021380:	080293a8 	.word	0x080293a8
 8021384:	7ff00000 	.word	0x7ff00000
 8021388:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 802138a:	1c55      	adds	r5, r2, #1
 802138c:	9517      	str	r5, [sp, #92]	; 0x5c
 802138e:	7852      	ldrb	r2, [r2, #1]
 8021390:	2a30      	cmp	r2, #48	; 0x30
 8021392:	d0f9      	beq.n	8021388 <_strtod_l+0x2b8>
 8021394:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8021398:	2d08      	cmp	r5, #8
 802139a:	f63f af77 	bhi.w	802128c <_strtod_l+0x1bc>
 802139e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80213a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80213a4:	9208      	str	r2, [sp, #32]
 80213a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80213a8:	1c55      	adds	r5, r2, #1
 80213aa:	9517      	str	r5, [sp, #92]	; 0x5c
 80213ac:	7852      	ldrb	r2, [r2, #1]
 80213ae:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 80213b2:	2f09      	cmp	r7, #9
 80213b4:	d937      	bls.n	8021426 <_strtod_l+0x356>
 80213b6:	9f08      	ldr	r7, [sp, #32]
 80213b8:	1bed      	subs	r5, r5, r7
 80213ba:	2d08      	cmp	r5, #8
 80213bc:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80213c0:	dc02      	bgt.n	80213c8 <_strtod_l+0x2f8>
 80213c2:	4565      	cmp	r5, ip
 80213c4:	bfa8      	it	ge
 80213c6:	4665      	movge	r5, ip
 80213c8:	f1be 0f00 	cmp.w	lr, #0
 80213cc:	d000      	beq.n	80213d0 <_strtod_l+0x300>
 80213ce:	426d      	negs	r5, r5
 80213d0:	2b00      	cmp	r3, #0
 80213d2:	d14f      	bne.n	8021474 <_strtod_l+0x3a4>
 80213d4:	9b06      	ldr	r3, [sp, #24]
 80213d6:	4303      	orrs	r3, r0
 80213d8:	f47f aebe 	bne.w	8021158 <_strtod_l+0x88>
 80213dc:	2900      	cmp	r1, #0
 80213de:	f47f aed8 	bne.w	8021192 <_strtod_l+0xc2>
 80213e2:	2a69      	cmp	r2, #105	; 0x69
 80213e4:	d027      	beq.n	8021436 <_strtod_l+0x366>
 80213e6:	dc24      	bgt.n	8021432 <_strtod_l+0x362>
 80213e8:	2a49      	cmp	r2, #73	; 0x49
 80213ea:	d024      	beq.n	8021436 <_strtod_l+0x366>
 80213ec:	2a4e      	cmp	r2, #78	; 0x4e
 80213ee:	f47f aed0 	bne.w	8021192 <_strtod_l+0xc2>
 80213f2:	499b      	ldr	r1, [pc, #620]	; (8021660 <_strtod_l+0x590>)
 80213f4:	a817      	add	r0, sp, #92	; 0x5c
 80213f6:	f002 f847 	bl	8023488 <__match>
 80213fa:	2800      	cmp	r0, #0
 80213fc:	f43f aec9 	beq.w	8021192 <_strtod_l+0xc2>
 8021400:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021402:	781b      	ldrb	r3, [r3, #0]
 8021404:	2b28      	cmp	r3, #40	; 0x28
 8021406:	d12d      	bne.n	8021464 <_strtod_l+0x394>
 8021408:	4996      	ldr	r1, [pc, #600]	; (8021664 <_strtod_l+0x594>)
 802140a:	aa1a      	add	r2, sp, #104	; 0x68
 802140c:	a817      	add	r0, sp, #92	; 0x5c
 802140e:	f002 f84f 	bl	80234b0 <__hexnan>
 8021412:	2805      	cmp	r0, #5
 8021414:	d126      	bne.n	8021464 <_strtod_l+0x394>
 8021416:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8021418:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 802141c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8021420:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8021424:	e698      	b.n	8021158 <_strtod_l+0x88>
 8021426:	250a      	movs	r5, #10
 8021428:	fb05 250c 	mla	r5, r5, ip, r2
 802142c:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8021430:	e7b9      	b.n	80213a6 <_strtod_l+0x2d6>
 8021432:	2a6e      	cmp	r2, #110	; 0x6e
 8021434:	e7db      	b.n	80213ee <_strtod_l+0x31e>
 8021436:	498c      	ldr	r1, [pc, #560]	; (8021668 <_strtod_l+0x598>)
 8021438:	a817      	add	r0, sp, #92	; 0x5c
 802143a:	f002 f825 	bl	8023488 <__match>
 802143e:	2800      	cmp	r0, #0
 8021440:	f43f aea7 	beq.w	8021192 <_strtod_l+0xc2>
 8021444:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021446:	4989      	ldr	r1, [pc, #548]	; (802166c <_strtod_l+0x59c>)
 8021448:	3b01      	subs	r3, #1
 802144a:	a817      	add	r0, sp, #92	; 0x5c
 802144c:	9317      	str	r3, [sp, #92]	; 0x5c
 802144e:	f002 f81b 	bl	8023488 <__match>
 8021452:	b910      	cbnz	r0, 802145a <_strtod_l+0x38a>
 8021454:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021456:	3301      	adds	r3, #1
 8021458:	9317      	str	r3, [sp, #92]	; 0x5c
 802145a:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8021680 <_strtod_l+0x5b0>
 802145e:	f04f 0800 	mov.w	r8, #0
 8021462:	e679      	b.n	8021158 <_strtod_l+0x88>
 8021464:	4882      	ldr	r0, [pc, #520]	; (8021670 <_strtod_l+0x5a0>)
 8021466:	f003 f8cb 	bl	8024600 <nan>
 802146a:	ed8d 0b04 	vstr	d0, [sp, #16]
 802146e:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8021472:	e671      	b.n	8021158 <_strtod_l+0x88>
 8021474:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8021478:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 802147c:	eba5 020b 	sub.w	r2, r5, fp
 8021480:	2e00      	cmp	r6, #0
 8021482:	bf08      	it	eq
 8021484:	461e      	moveq	r6, r3
 8021486:	2b10      	cmp	r3, #16
 8021488:	ed8d 7b08 	vstr	d7, [sp, #32]
 802148c:	9206      	str	r2, [sp, #24]
 802148e:	461a      	mov	r2, r3
 8021490:	bfa8      	it	ge
 8021492:	2210      	movge	r2, #16
 8021494:	2b09      	cmp	r3, #9
 8021496:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 802149a:	dd0e      	ble.n	80214ba <_strtod_l+0x3ea>
 802149c:	4975      	ldr	r1, [pc, #468]	; (8021674 <_strtod_l+0x5a4>)
 802149e:	eddd 7a04 	vldr	s15, [sp, #16]
 80214a2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80214a6:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 80214aa:	ed9d 5b08 	vldr	d5, [sp, #32]
 80214ae:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80214b2:	eea5 7b06 	vfma.f64	d7, d5, d6
 80214b6:	ec59 8b17 	vmov	r8, r9, d7
 80214ba:	2b0f      	cmp	r3, #15
 80214bc:	dc37      	bgt.n	802152e <_strtod_l+0x45e>
 80214be:	9906      	ldr	r1, [sp, #24]
 80214c0:	2900      	cmp	r1, #0
 80214c2:	f43f ae49 	beq.w	8021158 <_strtod_l+0x88>
 80214c6:	dd23      	ble.n	8021510 <_strtod_l+0x440>
 80214c8:	2916      	cmp	r1, #22
 80214ca:	dc0b      	bgt.n	80214e4 <_strtod_l+0x414>
 80214cc:	4b69      	ldr	r3, [pc, #420]	; (8021674 <_strtod_l+0x5a4>)
 80214ce:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80214d2:	ed93 7b00 	vldr	d7, [r3]
 80214d6:	ec49 8b16 	vmov	d6, r8, r9
 80214da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80214de:	ec59 8b17 	vmov	r8, r9, d7
 80214e2:	e639      	b.n	8021158 <_strtod_l+0x88>
 80214e4:	9806      	ldr	r0, [sp, #24]
 80214e6:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80214ea:	4281      	cmp	r1, r0
 80214ec:	db1f      	blt.n	802152e <_strtod_l+0x45e>
 80214ee:	4a61      	ldr	r2, [pc, #388]	; (8021674 <_strtod_l+0x5a4>)
 80214f0:	f1c3 030f 	rsb	r3, r3, #15
 80214f4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80214f8:	ed91 7b00 	vldr	d7, [r1]
 80214fc:	ec49 8b16 	vmov	d6, r8, r9
 8021500:	1ac3      	subs	r3, r0, r3
 8021502:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8021506:	ee27 7b06 	vmul.f64	d7, d7, d6
 802150a:	ed92 6b00 	vldr	d6, [r2]
 802150e:	e7e4      	b.n	80214da <_strtod_l+0x40a>
 8021510:	9906      	ldr	r1, [sp, #24]
 8021512:	3116      	adds	r1, #22
 8021514:	db0b      	blt.n	802152e <_strtod_l+0x45e>
 8021516:	4b57      	ldr	r3, [pc, #348]	; (8021674 <_strtod_l+0x5a4>)
 8021518:	ebab 0505 	sub.w	r5, fp, r5
 802151c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8021520:	ed95 7b00 	vldr	d7, [r5]
 8021524:	ec49 8b16 	vmov	d6, r8, r9
 8021528:	ee86 7b07 	vdiv.f64	d7, d6, d7
 802152c:	e7d7      	b.n	80214de <_strtod_l+0x40e>
 802152e:	9906      	ldr	r1, [sp, #24]
 8021530:	1a9a      	subs	r2, r3, r2
 8021532:	440a      	add	r2, r1
 8021534:	2a00      	cmp	r2, #0
 8021536:	dd74      	ble.n	8021622 <_strtod_l+0x552>
 8021538:	f012 000f 	ands.w	r0, r2, #15
 802153c:	d00a      	beq.n	8021554 <_strtod_l+0x484>
 802153e:	494d      	ldr	r1, [pc, #308]	; (8021674 <_strtod_l+0x5a4>)
 8021540:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8021544:	ed91 7b00 	vldr	d7, [r1]
 8021548:	ec49 8b16 	vmov	d6, r8, r9
 802154c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021550:	ec59 8b17 	vmov	r8, r9, d7
 8021554:	f032 020f 	bics.w	r2, r2, #15
 8021558:	d04f      	beq.n	80215fa <_strtod_l+0x52a>
 802155a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 802155e:	dd22      	ble.n	80215a6 <_strtod_l+0x4d6>
 8021560:	2500      	movs	r5, #0
 8021562:	462e      	mov	r6, r5
 8021564:	950a      	str	r5, [sp, #40]	; 0x28
 8021566:	462f      	mov	r7, r5
 8021568:	2322      	movs	r3, #34	; 0x22
 802156a:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8021680 <_strtod_l+0x5b0>
 802156e:	6023      	str	r3, [r4, #0]
 8021570:	f04f 0800 	mov.w	r8, #0
 8021574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021576:	2b00      	cmp	r3, #0
 8021578:	f43f adee 	beq.w	8021158 <_strtod_l+0x88>
 802157c:	9918      	ldr	r1, [sp, #96]	; 0x60
 802157e:	4620      	mov	r0, r4
 8021580:	f002 f8fc 	bl	802377c <_Bfree>
 8021584:	4639      	mov	r1, r7
 8021586:	4620      	mov	r0, r4
 8021588:	f002 f8f8 	bl	802377c <_Bfree>
 802158c:	4631      	mov	r1, r6
 802158e:	4620      	mov	r0, r4
 8021590:	f002 f8f4 	bl	802377c <_Bfree>
 8021594:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021596:	4620      	mov	r0, r4
 8021598:	f002 f8f0 	bl	802377c <_Bfree>
 802159c:	4629      	mov	r1, r5
 802159e:	4620      	mov	r0, r4
 80215a0:	f002 f8ec 	bl	802377c <_Bfree>
 80215a4:	e5d8      	b.n	8021158 <_strtod_l+0x88>
 80215a6:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80215aa:	2000      	movs	r0, #0
 80215ac:	4f32      	ldr	r7, [pc, #200]	; (8021678 <_strtod_l+0x5a8>)
 80215ae:	1112      	asrs	r2, r2, #4
 80215b0:	4601      	mov	r1, r0
 80215b2:	2a01      	cmp	r2, #1
 80215b4:	dc24      	bgt.n	8021600 <_strtod_l+0x530>
 80215b6:	b108      	cbz	r0, 80215bc <_strtod_l+0x4ec>
 80215b8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80215bc:	4a2e      	ldr	r2, [pc, #184]	; (8021678 <_strtod_l+0x5a8>)
 80215be:	482f      	ldr	r0, [pc, #188]	; (802167c <_strtod_l+0x5ac>)
 80215c0:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80215c4:	ed91 7b00 	vldr	d7, [r1]
 80215c8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80215cc:	ec49 8b16 	vmov	d6, r8, r9
 80215d0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80215d4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80215d8:	9905      	ldr	r1, [sp, #20]
 80215da:	4a29      	ldr	r2, [pc, #164]	; (8021680 <_strtod_l+0x5b0>)
 80215dc:	400a      	ands	r2, r1
 80215de:	4282      	cmp	r2, r0
 80215e0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80215e4:	d8bc      	bhi.n	8021560 <_strtod_l+0x490>
 80215e6:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80215ea:	4282      	cmp	r2, r0
 80215ec:	bf86      	itte	hi
 80215ee:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8021684 <_strtod_l+0x5b4>
 80215f2:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80215f6:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 80215fa:	2200      	movs	r2, #0
 80215fc:	9204      	str	r2, [sp, #16]
 80215fe:	e07f      	b.n	8021700 <_strtod_l+0x630>
 8021600:	f012 0f01 	tst.w	r2, #1
 8021604:	d00a      	beq.n	802161c <_strtod_l+0x54c>
 8021606:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 802160a:	ed90 7b00 	vldr	d7, [r0]
 802160e:	ed9d 6b04 	vldr	d6, [sp, #16]
 8021612:	ee26 7b07 	vmul.f64	d7, d6, d7
 8021616:	ed8d 7b04 	vstr	d7, [sp, #16]
 802161a:	2001      	movs	r0, #1
 802161c:	3101      	adds	r1, #1
 802161e:	1052      	asrs	r2, r2, #1
 8021620:	e7c7      	b.n	80215b2 <_strtod_l+0x4e2>
 8021622:	d0ea      	beq.n	80215fa <_strtod_l+0x52a>
 8021624:	4252      	negs	r2, r2
 8021626:	f012 000f 	ands.w	r0, r2, #15
 802162a:	d00a      	beq.n	8021642 <_strtod_l+0x572>
 802162c:	4911      	ldr	r1, [pc, #68]	; (8021674 <_strtod_l+0x5a4>)
 802162e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8021632:	ed91 7b00 	vldr	d7, [r1]
 8021636:	ec49 8b16 	vmov	d6, r8, r9
 802163a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 802163e:	ec59 8b17 	vmov	r8, r9, d7
 8021642:	1112      	asrs	r2, r2, #4
 8021644:	d0d9      	beq.n	80215fa <_strtod_l+0x52a>
 8021646:	2a1f      	cmp	r2, #31
 8021648:	dd1e      	ble.n	8021688 <_strtod_l+0x5b8>
 802164a:	2500      	movs	r5, #0
 802164c:	462e      	mov	r6, r5
 802164e:	950a      	str	r5, [sp, #40]	; 0x28
 8021650:	462f      	mov	r7, r5
 8021652:	2322      	movs	r3, #34	; 0x22
 8021654:	f04f 0800 	mov.w	r8, #0
 8021658:	f04f 0900 	mov.w	r9, #0
 802165c:	6023      	str	r3, [r4, #0]
 802165e:	e789      	b.n	8021574 <_strtod_l+0x4a4>
 8021660:	08029305 	.word	0x08029305
 8021664:	080293bc 	.word	0x080293bc
 8021668:	080292fd 	.word	0x080292fd
 802166c:	08029437 	.word	0x08029437
 8021670:	08029433 	.word	0x08029433
 8021674:	08029620 	.word	0x08029620
 8021678:	080295f8 	.word	0x080295f8
 802167c:	7ca00000 	.word	0x7ca00000
 8021680:	7ff00000 	.word	0x7ff00000
 8021684:	7fefffff 	.word	0x7fefffff
 8021688:	f012 0110 	ands.w	r1, r2, #16
 802168c:	bf18      	it	ne
 802168e:	216a      	movne	r1, #106	; 0x6a
 8021690:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8021694:	9104      	str	r1, [sp, #16]
 8021696:	49c0      	ldr	r1, [pc, #768]	; (8021998 <_strtod_l+0x8c8>)
 8021698:	2000      	movs	r0, #0
 802169a:	07d7      	lsls	r7, r2, #31
 802169c:	d508      	bpl.n	80216b0 <_strtod_l+0x5e0>
 802169e:	ed9d 6b08 	vldr	d6, [sp, #32]
 80216a2:	ed91 7b00 	vldr	d7, [r1]
 80216a6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80216aa:	ed8d 7b08 	vstr	d7, [sp, #32]
 80216ae:	2001      	movs	r0, #1
 80216b0:	1052      	asrs	r2, r2, #1
 80216b2:	f101 0108 	add.w	r1, r1, #8
 80216b6:	d1f0      	bne.n	802169a <_strtod_l+0x5ca>
 80216b8:	b108      	cbz	r0, 80216be <_strtod_l+0x5ee>
 80216ba:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80216be:	9a04      	ldr	r2, [sp, #16]
 80216c0:	b1ba      	cbz	r2, 80216f2 <_strtod_l+0x622>
 80216c2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80216c6:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 80216ca:	2a00      	cmp	r2, #0
 80216cc:	4649      	mov	r1, r9
 80216ce:	dd10      	ble.n	80216f2 <_strtod_l+0x622>
 80216d0:	2a1f      	cmp	r2, #31
 80216d2:	f340 8132 	ble.w	802193a <_strtod_l+0x86a>
 80216d6:	2a34      	cmp	r2, #52	; 0x34
 80216d8:	bfde      	ittt	le
 80216da:	3a20      	suble	r2, #32
 80216dc:	f04f 30ff 	movle.w	r0, #4294967295	; 0xffffffff
 80216e0:	fa00 f202 	lslle.w	r2, r0, r2
 80216e4:	f04f 0800 	mov.w	r8, #0
 80216e8:	bfcc      	ite	gt
 80216ea:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80216ee:	ea02 0901 	andle.w	r9, r2, r1
 80216f2:	ec49 8b17 	vmov	d7, r8, r9
 80216f6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80216fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80216fe:	d0a4      	beq.n	802164a <_strtod_l+0x57a>
 8021700:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021702:	9200      	str	r2, [sp, #0]
 8021704:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021706:	4632      	mov	r2, r6
 8021708:	4620      	mov	r0, r4
 802170a:	f002 f8a3 	bl	8023854 <__s2b>
 802170e:	900a      	str	r0, [sp, #40]	; 0x28
 8021710:	2800      	cmp	r0, #0
 8021712:	f43f af25 	beq.w	8021560 <_strtod_l+0x490>
 8021716:	9b06      	ldr	r3, [sp, #24]
 8021718:	ebab 0505 	sub.w	r5, fp, r5
 802171c:	2b00      	cmp	r3, #0
 802171e:	bfb4      	ite	lt
 8021720:	462b      	movlt	r3, r5
 8021722:	2300      	movge	r3, #0
 8021724:	930c      	str	r3, [sp, #48]	; 0x30
 8021726:	9b06      	ldr	r3, [sp, #24]
 8021728:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8021980 <_strtod_l+0x8b0>
 802172c:	ed9f ab96 	vldr	d10, [pc, #600]	; 8021988 <_strtod_l+0x8b8>
 8021730:	ed9f bb97 	vldr	d11, [pc, #604]	; 8021990 <_strtod_l+0x8c0>
 8021734:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021738:	2500      	movs	r5, #0
 802173a:	9312      	str	r3, [sp, #72]	; 0x48
 802173c:	462e      	mov	r6, r5
 802173e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021740:	4620      	mov	r0, r4
 8021742:	6859      	ldr	r1, [r3, #4]
 8021744:	f001 ffda 	bl	80236fc <_Balloc>
 8021748:	4607      	mov	r7, r0
 802174a:	2800      	cmp	r0, #0
 802174c:	f43f af0c 	beq.w	8021568 <_strtod_l+0x498>
 8021750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021752:	691a      	ldr	r2, [r3, #16]
 8021754:	3202      	adds	r2, #2
 8021756:	f103 010c 	add.w	r1, r3, #12
 802175a:	0092      	lsls	r2, r2, #2
 802175c:	300c      	adds	r0, #12
 802175e:	f7fe fc63 	bl	8020028 <memcpy>
 8021762:	ec49 8b10 	vmov	d0, r8, r9
 8021766:	aa1a      	add	r2, sp, #104	; 0x68
 8021768:	a919      	add	r1, sp, #100	; 0x64
 802176a:	4620      	mov	r0, r4
 802176c:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8021770:	f002 fbac 	bl	8023ecc <__d2b>
 8021774:	9018      	str	r0, [sp, #96]	; 0x60
 8021776:	2800      	cmp	r0, #0
 8021778:	f43f aef6 	beq.w	8021568 <_strtod_l+0x498>
 802177c:	2101      	movs	r1, #1
 802177e:	4620      	mov	r0, r4
 8021780:	f002 f902 	bl	8023988 <__i2b>
 8021784:	4606      	mov	r6, r0
 8021786:	2800      	cmp	r0, #0
 8021788:	f43f aeee 	beq.w	8021568 <_strtod_l+0x498>
 802178c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802178e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8021790:	2b00      	cmp	r3, #0
 8021792:	bfab      	itete	ge
 8021794:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8021796:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8021798:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 802179c:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 80217a0:	bfac      	ite	ge
 80217a2:	eb03 0b02 	addge.w	fp, r3, r2
 80217a6:	eba2 0a03 	sublt.w	sl, r2, r3
 80217aa:	9a04      	ldr	r2, [sp, #16]
 80217ac:	1a9b      	subs	r3, r3, r2
 80217ae:	440b      	add	r3, r1
 80217b0:	4a7a      	ldr	r2, [pc, #488]	; (802199c <_strtod_l+0x8cc>)
 80217b2:	3b01      	subs	r3, #1
 80217b4:	4293      	cmp	r3, r2
 80217b6:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80217ba:	f280 80d1 	bge.w	8021960 <_strtod_l+0x890>
 80217be:	1ad2      	subs	r2, r2, r3
 80217c0:	2a1f      	cmp	r2, #31
 80217c2:	eba1 0102 	sub.w	r1, r1, r2
 80217c6:	f04f 0001 	mov.w	r0, #1
 80217ca:	f300 80bd 	bgt.w	8021948 <_strtod_l+0x878>
 80217ce:	fa00 f302 	lsl.w	r3, r0, r2
 80217d2:	930e      	str	r3, [sp, #56]	; 0x38
 80217d4:	2300      	movs	r3, #0
 80217d6:	930d      	str	r3, [sp, #52]	; 0x34
 80217d8:	eb0b 0301 	add.w	r3, fp, r1
 80217dc:	9a04      	ldr	r2, [sp, #16]
 80217de:	459b      	cmp	fp, r3
 80217e0:	448a      	add	sl, r1
 80217e2:	4492      	add	sl, r2
 80217e4:	465a      	mov	r2, fp
 80217e6:	bfa8      	it	ge
 80217e8:	461a      	movge	r2, r3
 80217ea:	4552      	cmp	r2, sl
 80217ec:	bfa8      	it	ge
 80217ee:	4652      	movge	r2, sl
 80217f0:	2a00      	cmp	r2, #0
 80217f2:	bfc2      	ittt	gt
 80217f4:	1a9b      	subgt	r3, r3, r2
 80217f6:	ebaa 0a02 	subgt.w	sl, sl, r2
 80217fa:	ebab 0b02 	subgt.w	fp, fp, r2
 80217fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021800:	2a00      	cmp	r2, #0
 8021802:	dd18      	ble.n	8021836 <_strtod_l+0x766>
 8021804:	4631      	mov	r1, r6
 8021806:	4620      	mov	r0, r4
 8021808:	9315      	str	r3, [sp, #84]	; 0x54
 802180a:	f002 f979 	bl	8023b00 <__pow5mult>
 802180e:	4606      	mov	r6, r0
 8021810:	2800      	cmp	r0, #0
 8021812:	f43f aea9 	beq.w	8021568 <_strtod_l+0x498>
 8021816:	4601      	mov	r1, r0
 8021818:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802181a:	4620      	mov	r0, r4
 802181c:	f002 f8ca 	bl	80239b4 <__multiply>
 8021820:	9014      	str	r0, [sp, #80]	; 0x50
 8021822:	2800      	cmp	r0, #0
 8021824:	f43f aea0 	beq.w	8021568 <_strtod_l+0x498>
 8021828:	9918      	ldr	r1, [sp, #96]	; 0x60
 802182a:	4620      	mov	r0, r4
 802182c:	f001 ffa6 	bl	802377c <_Bfree>
 8021830:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021832:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021834:	9218      	str	r2, [sp, #96]	; 0x60
 8021836:	2b00      	cmp	r3, #0
 8021838:	f300 8097 	bgt.w	802196a <_strtod_l+0x89a>
 802183c:	9b06      	ldr	r3, [sp, #24]
 802183e:	2b00      	cmp	r3, #0
 8021840:	dd08      	ble.n	8021854 <_strtod_l+0x784>
 8021842:	4639      	mov	r1, r7
 8021844:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021846:	4620      	mov	r0, r4
 8021848:	f002 f95a 	bl	8023b00 <__pow5mult>
 802184c:	4607      	mov	r7, r0
 802184e:	2800      	cmp	r0, #0
 8021850:	f43f ae8a 	beq.w	8021568 <_strtod_l+0x498>
 8021854:	f1ba 0f00 	cmp.w	sl, #0
 8021858:	dd08      	ble.n	802186c <_strtod_l+0x79c>
 802185a:	4639      	mov	r1, r7
 802185c:	4652      	mov	r2, sl
 802185e:	4620      	mov	r0, r4
 8021860:	f002 f9a8 	bl	8023bb4 <__lshift>
 8021864:	4607      	mov	r7, r0
 8021866:	2800      	cmp	r0, #0
 8021868:	f43f ae7e 	beq.w	8021568 <_strtod_l+0x498>
 802186c:	f1bb 0f00 	cmp.w	fp, #0
 8021870:	dd08      	ble.n	8021884 <_strtod_l+0x7b4>
 8021872:	4631      	mov	r1, r6
 8021874:	465a      	mov	r2, fp
 8021876:	4620      	mov	r0, r4
 8021878:	f002 f99c 	bl	8023bb4 <__lshift>
 802187c:	4606      	mov	r6, r0
 802187e:	2800      	cmp	r0, #0
 8021880:	f43f ae72 	beq.w	8021568 <_strtod_l+0x498>
 8021884:	9918      	ldr	r1, [sp, #96]	; 0x60
 8021886:	463a      	mov	r2, r7
 8021888:	4620      	mov	r0, r4
 802188a:	f002 fa1b 	bl	8023cc4 <__mdiff>
 802188e:	4605      	mov	r5, r0
 8021890:	2800      	cmp	r0, #0
 8021892:	f43f ae69 	beq.w	8021568 <_strtod_l+0x498>
 8021896:	2300      	movs	r3, #0
 8021898:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 802189c:	60c3      	str	r3, [r0, #12]
 802189e:	4631      	mov	r1, r6
 80218a0:	f002 f9f4 	bl	8023c8c <__mcmp>
 80218a4:	2800      	cmp	r0, #0
 80218a6:	da7f      	bge.n	80219a8 <_strtod_l+0x8d8>
 80218a8:	ea5a 0308 	orrs.w	r3, sl, r8
 80218ac:	f040 80a5 	bne.w	80219fa <_strtod_l+0x92a>
 80218b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80218b4:	2b00      	cmp	r3, #0
 80218b6:	f040 80a0 	bne.w	80219fa <_strtod_l+0x92a>
 80218ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80218be:	0d1b      	lsrs	r3, r3, #20
 80218c0:	051b      	lsls	r3, r3, #20
 80218c2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80218c6:	f240 8098 	bls.w	80219fa <_strtod_l+0x92a>
 80218ca:	696b      	ldr	r3, [r5, #20]
 80218cc:	b91b      	cbnz	r3, 80218d6 <_strtod_l+0x806>
 80218ce:	692b      	ldr	r3, [r5, #16]
 80218d0:	2b01      	cmp	r3, #1
 80218d2:	f340 8092 	ble.w	80219fa <_strtod_l+0x92a>
 80218d6:	4629      	mov	r1, r5
 80218d8:	2201      	movs	r2, #1
 80218da:	4620      	mov	r0, r4
 80218dc:	f002 f96a 	bl	8023bb4 <__lshift>
 80218e0:	4631      	mov	r1, r6
 80218e2:	4605      	mov	r5, r0
 80218e4:	f002 f9d2 	bl	8023c8c <__mcmp>
 80218e8:	2800      	cmp	r0, #0
 80218ea:	f340 8086 	ble.w	80219fa <_strtod_l+0x92a>
 80218ee:	9904      	ldr	r1, [sp, #16]
 80218f0:	4a2b      	ldr	r2, [pc, #172]	; (80219a0 <_strtod_l+0x8d0>)
 80218f2:	464b      	mov	r3, r9
 80218f4:	2900      	cmp	r1, #0
 80218f6:	f000 80a1 	beq.w	8021a3c <_strtod_l+0x96c>
 80218fa:	ea02 0109 	and.w	r1, r2, r9
 80218fe:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8021902:	f300 809b 	bgt.w	8021a3c <_strtod_l+0x96c>
 8021906:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 802190a:	f77f aea2 	ble.w	8021652 <_strtod_l+0x582>
 802190e:	4a25      	ldr	r2, [pc, #148]	; (80219a4 <_strtod_l+0x8d4>)
 8021910:	2300      	movs	r3, #0
 8021912:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8021916:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 802191a:	ec49 8b17 	vmov	d7, r8, r9
 802191e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021922:	ed8d 7b04 	vstr	d7, [sp, #16]
 8021926:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 802192a:	4313      	orrs	r3, r2
 802192c:	bf08      	it	eq
 802192e:	2322      	moveq	r3, #34	; 0x22
 8021930:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8021934:	bf08      	it	eq
 8021936:	6023      	streq	r3, [r4, #0]
 8021938:	e620      	b.n	802157c <_strtod_l+0x4ac>
 802193a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 802193e:	fa01 f202 	lsl.w	r2, r1, r2
 8021942:	ea02 0808 	and.w	r8, r2, r8
 8021946:	e6d4      	b.n	80216f2 <_strtod_l+0x622>
 8021948:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 802194c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8021950:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8021954:	33e2      	adds	r3, #226	; 0xe2
 8021956:	fa00 f303 	lsl.w	r3, r0, r3
 802195a:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 802195e:	e73b      	b.n	80217d8 <_strtod_l+0x708>
 8021960:	2000      	movs	r0, #0
 8021962:	2301      	movs	r3, #1
 8021964:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8021968:	e736      	b.n	80217d8 <_strtod_l+0x708>
 802196a:	9918      	ldr	r1, [sp, #96]	; 0x60
 802196c:	461a      	mov	r2, r3
 802196e:	4620      	mov	r0, r4
 8021970:	f002 f920 	bl	8023bb4 <__lshift>
 8021974:	9018      	str	r0, [sp, #96]	; 0x60
 8021976:	2800      	cmp	r0, #0
 8021978:	f47f af60 	bne.w	802183c <_strtod_l+0x76c>
 802197c:	e5f4      	b.n	8021568 <_strtod_l+0x498>
 802197e:	bf00      	nop
 8021980:	94a03595 	.word	0x94a03595
 8021984:	3fcfffff 	.word	0x3fcfffff
 8021988:	94a03595 	.word	0x94a03595
 802198c:	3fdfffff 	.word	0x3fdfffff
 8021990:	35afe535 	.word	0x35afe535
 8021994:	3fe00000 	.word	0x3fe00000
 8021998:	080293d0 	.word	0x080293d0
 802199c:	fffffc02 	.word	0xfffffc02
 80219a0:	7ff00000 	.word	0x7ff00000
 80219a4:	39500000 	.word	0x39500000
 80219a8:	46cb      	mov	fp, r9
 80219aa:	d165      	bne.n	8021a78 <_strtod_l+0x9a8>
 80219ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80219b0:	f1ba 0f00 	cmp.w	sl, #0
 80219b4:	d02a      	beq.n	8021a0c <_strtod_l+0x93c>
 80219b6:	4aaa      	ldr	r2, [pc, #680]	; (8021c60 <_strtod_l+0xb90>)
 80219b8:	4293      	cmp	r3, r2
 80219ba:	d12b      	bne.n	8021a14 <_strtod_l+0x944>
 80219bc:	9b04      	ldr	r3, [sp, #16]
 80219be:	4641      	mov	r1, r8
 80219c0:	b1fb      	cbz	r3, 8021a02 <_strtod_l+0x932>
 80219c2:	4aa8      	ldr	r2, [pc, #672]	; (8021c64 <_strtod_l+0xb94>)
 80219c4:	ea09 0202 	and.w	r2, r9, r2
 80219c8:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80219cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80219d0:	d81a      	bhi.n	8021a08 <_strtod_l+0x938>
 80219d2:	0d12      	lsrs	r2, r2, #20
 80219d4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80219d8:	fa00 f303 	lsl.w	r3, r0, r3
 80219dc:	4299      	cmp	r1, r3
 80219de:	d119      	bne.n	8021a14 <_strtod_l+0x944>
 80219e0:	4ba1      	ldr	r3, [pc, #644]	; (8021c68 <_strtod_l+0xb98>)
 80219e2:	459b      	cmp	fp, r3
 80219e4:	d102      	bne.n	80219ec <_strtod_l+0x91c>
 80219e6:	3101      	adds	r1, #1
 80219e8:	f43f adbe 	beq.w	8021568 <_strtod_l+0x498>
 80219ec:	4b9d      	ldr	r3, [pc, #628]	; (8021c64 <_strtod_l+0xb94>)
 80219ee:	ea0b 0303 	and.w	r3, fp, r3
 80219f2:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80219f6:	f04f 0800 	mov.w	r8, #0
 80219fa:	9b04      	ldr	r3, [sp, #16]
 80219fc:	2b00      	cmp	r3, #0
 80219fe:	d186      	bne.n	802190e <_strtod_l+0x83e>
 8021a00:	e5bc      	b.n	802157c <_strtod_l+0x4ac>
 8021a02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021a06:	e7e9      	b.n	80219dc <_strtod_l+0x90c>
 8021a08:	4603      	mov	r3, r0
 8021a0a:	e7e7      	b.n	80219dc <_strtod_l+0x90c>
 8021a0c:	ea53 0308 	orrs.w	r3, r3, r8
 8021a10:	f43f af6d 	beq.w	80218ee <_strtod_l+0x81e>
 8021a14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021a16:	b1db      	cbz	r3, 8021a50 <_strtod_l+0x980>
 8021a18:	ea13 0f0b 	tst.w	r3, fp
 8021a1c:	d0ed      	beq.n	80219fa <_strtod_l+0x92a>
 8021a1e:	9a04      	ldr	r2, [sp, #16]
 8021a20:	4640      	mov	r0, r8
 8021a22:	4649      	mov	r1, r9
 8021a24:	f1ba 0f00 	cmp.w	sl, #0
 8021a28:	d016      	beq.n	8021a58 <_strtod_l+0x988>
 8021a2a:	f7ff fb35 	bl	8021098 <sulp>
 8021a2e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8021a32:	ee37 7b00 	vadd.f64	d7, d7, d0
 8021a36:	ec59 8b17 	vmov	r8, r9, d7
 8021a3a:	e7de      	b.n	80219fa <_strtod_l+0x92a>
 8021a3c:	4013      	ands	r3, r2
 8021a3e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8021a42:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8021a46:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8021a4a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8021a4e:	e7d4      	b.n	80219fa <_strtod_l+0x92a>
 8021a50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021a52:	ea13 0f08 	tst.w	r3, r8
 8021a56:	e7e1      	b.n	8021a1c <_strtod_l+0x94c>
 8021a58:	f7ff fb1e 	bl	8021098 <sulp>
 8021a5c:	ed9d 7b08 	vldr	d7, [sp, #32]
 8021a60:	ee37 7b40 	vsub.f64	d7, d7, d0
 8021a64:	ed8d 7b06 	vstr	d7, [sp, #24]
 8021a68:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8021a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a70:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8021a74:	d1c1      	bne.n	80219fa <_strtod_l+0x92a>
 8021a76:	e5ec      	b.n	8021652 <_strtod_l+0x582>
 8021a78:	4631      	mov	r1, r6
 8021a7a:	4628      	mov	r0, r5
 8021a7c:	f002 fa82 	bl	8023f84 <__ratio>
 8021a80:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8021a84:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8021a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a8c:	d867      	bhi.n	8021b5e <_strtod_l+0xa8e>
 8021a8e:	f1ba 0f00 	cmp.w	sl, #0
 8021a92:	d044      	beq.n	8021b1e <_strtod_l+0xa4e>
 8021a94:	4b75      	ldr	r3, [pc, #468]	; (8021c6c <_strtod_l+0xb9c>)
 8021a96:	2200      	movs	r2, #0
 8021a98:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8021a9c:	4971      	ldr	r1, [pc, #452]	; (8021c64 <_strtod_l+0xb94>)
 8021a9e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8021c78 <_strtod_l+0xba8>
 8021aa2:	ea0b 0001 	and.w	r0, fp, r1
 8021aa6:	4560      	cmp	r0, ip
 8021aa8:	900d      	str	r0, [sp, #52]	; 0x34
 8021aaa:	f040 808b 	bne.w	8021bc4 <_strtod_l+0xaf4>
 8021aae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8021ab2:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8021ab6:	ec49 8b10 	vmov	d0, r8, r9
 8021aba:	ec43 2b1c 	vmov	d12, r2, r3
 8021abe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8021ac2:	f002 f987 	bl	8023dd4 <__ulp>
 8021ac6:	ec49 8b1d 	vmov	d13, r8, r9
 8021aca:	eeac db00 	vfma.f64	d13, d12, d0
 8021ace:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 8021ad2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021ad4:	4963      	ldr	r1, [pc, #396]	; (8021c64 <_strtod_l+0xb94>)
 8021ad6:	4a66      	ldr	r2, [pc, #408]	; (8021c70 <_strtod_l+0xba0>)
 8021ad8:	4019      	ands	r1, r3
 8021ada:	4291      	cmp	r1, r2
 8021adc:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8021ae0:	d947      	bls.n	8021b72 <_strtod_l+0xaa2>
 8021ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021ae4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8021ae8:	4293      	cmp	r3, r2
 8021aea:	d103      	bne.n	8021af4 <_strtod_l+0xa24>
 8021aec:	9b08      	ldr	r3, [sp, #32]
 8021aee:	3301      	adds	r3, #1
 8021af0:	f43f ad3a 	beq.w	8021568 <_strtod_l+0x498>
 8021af4:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8021c68 <_strtod_l+0xb98>
 8021af8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8021afc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8021afe:	4620      	mov	r0, r4
 8021b00:	f001 fe3c 	bl	802377c <_Bfree>
 8021b04:	4639      	mov	r1, r7
 8021b06:	4620      	mov	r0, r4
 8021b08:	f001 fe38 	bl	802377c <_Bfree>
 8021b0c:	4631      	mov	r1, r6
 8021b0e:	4620      	mov	r0, r4
 8021b10:	f001 fe34 	bl	802377c <_Bfree>
 8021b14:	4629      	mov	r1, r5
 8021b16:	4620      	mov	r0, r4
 8021b18:	f001 fe30 	bl	802377c <_Bfree>
 8021b1c:	e60f      	b.n	802173e <_strtod_l+0x66e>
 8021b1e:	f1b8 0f00 	cmp.w	r8, #0
 8021b22:	d112      	bne.n	8021b4a <_strtod_l+0xa7a>
 8021b24:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8021b28:	b9b3      	cbnz	r3, 8021b58 <_strtod_l+0xa88>
 8021b2a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8021b2e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8021b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b36:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8021b3a:	d401      	bmi.n	8021b40 <_strtod_l+0xa70>
 8021b3c:	ee20 8b08 	vmul.f64	d8, d0, d8
 8021b40:	eeb1 7b48 	vneg.f64	d7, d8
 8021b44:	ec53 2b17 	vmov	r2, r3, d7
 8021b48:	e7a8      	b.n	8021a9c <_strtod_l+0x9cc>
 8021b4a:	f1b8 0f01 	cmp.w	r8, #1
 8021b4e:	d103      	bne.n	8021b58 <_strtod_l+0xa88>
 8021b50:	f1b9 0f00 	cmp.w	r9, #0
 8021b54:	f43f ad7d 	beq.w	8021652 <_strtod_l+0x582>
 8021b58:	4b46      	ldr	r3, [pc, #280]	; (8021c74 <_strtod_l+0xba4>)
 8021b5a:	2200      	movs	r2, #0
 8021b5c:	e79c      	b.n	8021a98 <_strtod_l+0x9c8>
 8021b5e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8021b62:	ee20 8b08 	vmul.f64	d8, d0, d8
 8021b66:	f1ba 0f00 	cmp.w	sl, #0
 8021b6a:	d0e9      	beq.n	8021b40 <_strtod_l+0xa70>
 8021b6c:	ec53 2b18 	vmov	r2, r3, d8
 8021b70:	e794      	b.n	8021a9c <_strtod_l+0x9cc>
 8021b72:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8021b76:	9b04      	ldr	r3, [sp, #16]
 8021b78:	2b00      	cmp	r3, #0
 8021b7a:	d1bf      	bne.n	8021afc <_strtod_l+0xa2c>
 8021b7c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8021b80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021b82:	0d1b      	lsrs	r3, r3, #20
 8021b84:	051b      	lsls	r3, r3, #20
 8021b86:	429a      	cmp	r2, r3
 8021b88:	d1b8      	bne.n	8021afc <_strtod_l+0xa2c>
 8021b8a:	ec51 0b18 	vmov	r0, r1, d8
 8021b8e:	f7de fdd3 	bl	8000738 <__aeabi_d2lz>
 8021b92:	f7de fd8b 	bl	80006ac <__aeabi_l2d>
 8021b96:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8021b9a:	ec41 0b17 	vmov	d7, r0, r1
 8021b9e:	ea43 0308 	orr.w	r3, r3, r8
 8021ba2:	ea53 030a 	orrs.w	r3, r3, sl
 8021ba6:	ee38 8b47 	vsub.f64	d8, d8, d7
 8021baa:	d03e      	beq.n	8021c2a <_strtod_l+0xb5a>
 8021bac:	eeb4 8bca 	vcmpe.f64	d8, d10
 8021bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021bb4:	f53f ace2 	bmi.w	802157c <_strtod_l+0x4ac>
 8021bb8:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8021bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021bc0:	dd9c      	ble.n	8021afc <_strtod_l+0xa2c>
 8021bc2:	e4db      	b.n	802157c <_strtod_l+0x4ac>
 8021bc4:	9904      	ldr	r1, [sp, #16]
 8021bc6:	b301      	cbz	r1, 8021c0a <_strtod_l+0xb3a>
 8021bc8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8021bca:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8021bce:	d81c      	bhi.n	8021c0a <_strtod_l+0xb3a>
 8021bd0:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8021c58 <_strtod_l+0xb88>
 8021bd4:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8021bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021bdc:	d811      	bhi.n	8021c02 <_strtod_l+0xb32>
 8021bde:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8021be2:	ee18 3a10 	vmov	r3, s16
 8021be6:	2b01      	cmp	r3, #1
 8021be8:	bf38      	it	cc
 8021bea:	2301      	movcc	r3, #1
 8021bec:	ee08 3a10 	vmov	s16, r3
 8021bf0:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8021bf4:	f1ba 0f00 	cmp.w	sl, #0
 8021bf8:	d114      	bne.n	8021c24 <_strtod_l+0xb54>
 8021bfa:	eeb1 7b48 	vneg.f64	d7, d8
 8021bfe:	ec53 2b17 	vmov	r2, r3, d7
 8021c02:	980d      	ldr	r0, [sp, #52]	; 0x34
 8021c04:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8021c08:	1a0b      	subs	r3, r1, r0
 8021c0a:	ed9d 0b08 	vldr	d0, [sp, #32]
 8021c0e:	ec43 2b1c 	vmov	d12, r2, r3
 8021c12:	f002 f8df 	bl	8023dd4 <__ulp>
 8021c16:	ed9d 7b08 	vldr	d7, [sp, #32]
 8021c1a:	eeac 7b00 	vfma.f64	d7, d12, d0
 8021c1e:	ec59 8b17 	vmov	r8, r9, d7
 8021c22:	e7a8      	b.n	8021b76 <_strtod_l+0xaa6>
 8021c24:	ec53 2b18 	vmov	r2, r3, d8
 8021c28:	e7eb      	b.n	8021c02 <_strtod_l+0xb32>
 8021c2a:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8021c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021c32:	f57f af63 	bpl.w	8021afc <_strtod_l+0xa2c>
 8021c36:	e4a1      	b.n	802157c <_strtod_l+0x4ac>
 8021c38:	2300      	movs	r3, #0
 8021c3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8021c3c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021c3e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021c40:	6013      	str	r3, [r2, #0]
 8021c42:	f7ff ba8d 	b.w	8021160 <_strtod_l+0x90>
 8021c46:	2a65      	cmp	r2, #101	; 0x65
 8021c48:	f43f ab89 	beq.w	802135e <_strtod_l+0x28e>
 8021c4c:	2a45      	cmp	r2, #69	; 0x45
 8021c4e:	f43f ab86 	beq.w	802135e <_strtod_l+0x28e>
 8021c52:	2101      	movs	r1, #1
 8021c54:	f7ff bbbe 	b.w	80213d4 <_strtod_l+0x304>
 8021c58:	ffc00000 	.word	0xffc00000
 8021c5c:	41dfffff 	.word	0x41dfffff
 8021c60:	000fffff 	.word	0x000fffff
 8021c64:	7ff00000 	.word	0x7ff00000
 8021c68:	7fefffff 	.word	0x7fefffff
 8021c6c:	3ff00000 	.word	0x3ff00000
 8021c70:	7c9fffff 	.word	0x7c9fffff
 8021c74:	bff00000 	.word	0xbff00000
 8021c78:	7fe00000 	.word	0x7fe00000

08021c7c <_strtod_r>:
 8021c7c:	4b01      	ldr	r3, [pc, #4]	; (8021c84 <_strtod_r+0x8>)
 8021c7e:	f7ff ba27 	b.w	80210d0 <_strtod_l>
 8021c82:	bf00      	nop
 8021c84:	240034b8 	.word	0x240034b8

08021c88 <_strtol_l.isra.0>:
 8021c88:	2b01      	cmp	r3, #1
 8021c8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021c8e:	d001      	beq.n	8021c94 <_strtol_l.isra.0+0xc>
 8021c90:	2b24      	cmp	r3, #36	; 0x24
 8021c92:	d906      	bls.n	8021ca2 <_strtol_l.isra.0+0x1a>
 8021c94:	f000 ff6a 	bl	8022b6c <__errno>
 8021c98:	2316      	movs	r3, #22
 8021c9a:	6003      	str	r3, [r0, #0]
 8021c9c:	2000      	movs	r0, #0
 8021c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021ca2:	4f3a      	ldr	r7, [pc, #232]	; (8021d8c <_strtol_l.isra.0+0x104>)
 8021ca4:	468e      	mov	lr, r1
 8021ca6:	4676      	mov	r6, lr
 8021ca8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8021cac:	5de5      	ldrb	r5, [r4, r7]
 8021cae:	f015 0508 	ands.w	r5, r5, #8
 8021cb2:	d1f8      	bne.n	8021ca6 <_strtol_l.isra.0+0x1e>
 8021cb4:	2c2d      	cmp	r4, #45	; 0x2d
 8021cb6:	d134      	bne.n	8021d22 <_strtol_l.isra.0+0x9a>
 8021cb8:	f89e 4000 	ldrb.w	r4, [lr]
 8021cbc:	f04f 0801 	mov.w	r8, #1
 8021cc0:	f106 0e02 	add.w	lr, r6, #2
 8021cc4:	2b00      	cmp	r3, #0
 8021cc6:	d05c      	beq.n	8021d82 <_strtol_l.isra.0+0xfa>
 8021cc8:	2b10      	cmp	r3, #16
 8021cca:	d10c      	bne.n	8021ce6 <_strtol_l.isra.0+0x5e>
 8021ccc:	2c30      	cmp	r4, #48	; 0x30
 8021cce:	d10a      	bne.n	8021ce6 <_strtol_l.isra.0+0x5e>
 8021cd0:	f89e 4000 	ldrb.w	r4, [lr]
 8021cd4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8021cd8:	2c58      	cmp	r4, #88	; 0x58
 8021cda:	d14d      	bne.n	8021d78 <_strtol_l.isra.0+0xf0>
 8021cdc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8021ce0:	2310      	movs	r3, #16
 8021ce2:	f10e 0e02 	add.w	lr, lr, #2
 8021ce6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8021cea:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8021cee:	2600      	movs	r6, #0
 8021cf0:	fbbc f9f3 	udiv	r9, ip, r3
 8021cf4:	4635      	mov	r5, r6
 8021cf6:	fb03 ca19 	mls	sl, r3, r9, ip
 8021cfa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8021cfe:	2f09      	cmp	r7, #9
 8021d00:	d818      	bhi.n	8021d34 <_strtol_l.isra.0+0xac>
 8021d02:	463c      	mov	r4, r7
 8021d04:	42a3      	cmp	r3, r4
 8021d06:	dd24      	ble.n	8021d52 <_strtol_l.isra.0+0xca>
 8021d08:	2e00      	cmp	r6, #0
 8021d0a:	db1f      	blt.n	8021d4c <_strtol_l.isra.0+0xc4>
 8021d0c:	45a9      	cmp	r9, r5
 8021d0e:	d31d      	bcc.n	8021d4c <_strtol_l.isra.0+0xc4>
 8021d10:	d101      	bne.n	8021d16 <_strtol_l.isra.0+0x8e>
 8021d12:	45a2      	cmp	sl, r4
 8021d14:	db1a      	blt.n	8021d4c <_strtol_l.isra.0+0xc4>
 8021d16:	fb05 4503 	mla	r5, r5, r3, r4
 8021d1a:	2601      	movs	r6, #1
 8021d1c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8021d20:	e7eb      	b.n	8021cfa <_strtol_l.isra.0+0x72>
 8021d22:	2c2b      	cmp	r4, #43	; 0x2b
 8021d24:	bf08      	it	eq
 8021d26:	f89e 4000 	ldrbeq.w	r4, [lr]
 8021d2a:	46a8      	mov	r8, r5
 8021d2c:	bf08      	it	eq
 8021d2e:	f106 0e02 	addeq.w	lr, r6, #2
 8021d32:	e7c7      	b.n	8021cc4 <_strtol_l.isra.0+0x3c>
 8021d34:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8021d38:	2f19      	cmp	r7, #25
 8021d3a:	d801      	bhi.n	8021d40 <_strtol_l.isra.0+0xb8>
 8021d3c:	3c37      	subs	r4, #55	; 0x37
 8021d3e:	e7e1      	b.n	8021d04 <_strtol_l.isra.0+0x7c>
 8021d40:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8021d44:	2f19      	cmp	r7, #25
 8021d46:	d804      	bhi.n	8021d52 <_strtol_l.isra.0+0xca>
 8021d48:	3c57      	subs	r4, #87	; 0x57
 8021d4a:	e7db      	b.n	8021d04 <_strtol_l.isra.0+0x7c>
 8021d4c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8021d50:	e7e4      	b.n	8021d1c <_strtol_l.isra.0+0x94>
 8021d52:	2e00      	cmp	r6, #0
 8021d54:	da05      	bge.n	8021d62 <_strtol_l.isra.0+0xda>
 8021d56:	2322      	movs	r3, #34	; 0x22
 8021d58:	6003      	str	r3, [r0, #0]
 8021d5a:	4665      	mov	r5, ip
 8021d5c:	b942      	cbnz	r2, 8021d70 <_strtol_l.isra.0+0xe8>
 8021d5e:	4628      	mov	r0, r5
 8021d60:	e79d      	b.n	8021c9e <_strtol_l.isra.0+0x16>
 8021d62:	f1b8 0f00 	cmp.w	r8, #0
 8021d66:	d000      	beq.n	8021d6a <_strtol_l.isra.0+0xe2>
 8021d68:	426d      	negs	r5, r5
 8021d6a:	2a00      	cmp	r2, #0
 8021d6c:	d0f7      	beq.n	8021d5e <_strtol_l.isra.0+0xd6>
 8021d6e:	b10e      	cbz	r6, 8021d74 <_strtol_l.isra.0+0xec>
 8021d70:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8021d74:	6011      	str	r1, [r2, #0]
 8021d76:	e7f2      	b.n	8021d5e <_strtol_l.isra.0+0xd6>
 8021d78:	2430      	movs	r4, #48	; 0x30
 8021d7a:	2b00      	cmp	r3, #0
 8021d7c:	d1b3      	bne.n	8021ce6 <_strtol_l.isra.0+0x5e>
 8021d7e:	2308      	movs	r3, #8
 8021d80:	e7b1      	b.n	8021ce6 <_strtol_l.isra.0+0x5e>
 8021d82:	2c30      	cmp	r4, #48	; 0x30
 8021d84:	d0a4      	beq.n	8021cd0 <_strtol_l.isra.0+0x48>
 8021d86:	230a      	movs	r3, #10
 8021d88:	e7ad      	b.n	8021ce6 <_strtol_l.isra.0+0x5e>
 8021d8a:	bf00      	nop
 8021d8c:	080291f1 	.word	0x080291f1

08021d90 <_strtol_r>:
 8021d90:	f7ff bf7a 	b.w	8021c88 <_strtol_l.isra.0>

08021d94 <__swbuf_r>:
 8021d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021d96:	460e      	mov	r6, r1
 8021d98:	4614      	mov	r4, r2
 8021d9a:	4605      	mov	r5, r0
 8021d9c:	b118      	cbz	r0, 8021da6 <__swbuf_r+0x12>
 8021d9e:	6983      	ldr	r3, [r0, #24]
 8021da0:	b90b      	cbnz	r3, 8021da6 <__swbuf_r+0x12>
 8021da2:	f001 f803 	bl	8022dac <__sinit>
 8021da6:	4b21      	ldr	r3, [pc, #132]	; (8021e2c <__swbuf_r+0x98>)
 8021da8:	429c      	cmp	r4, r3
 8021daa:	d12b      	bne.n	8021e04 <__swbuf_r+0x70>
 8021dac:	686c      	ldr	r4, [r5, #4]
 8021dae:	69a3      	ldr	r3, [r4, #24]
 8021db0:	60a3      	str	r3, [r4, #8]
 8021db2:	89a3      	ldrh	r3, [r4, #12]
 8021db4:	071a      	lsls	r2, r3, #28
 8021db6:	d52f      	bpl.n	8021e18 <__swbuf_r+0x84>
 8021db8:	6923      	ldr	r3, [r4, #16]
 8021dba:	b36b      	cbz	r3, 8021e18 <__swbuf_r+0x84>
 8021dbc:	6923      	ldr	r3, [r4, #16]
 8021dbe:	6820      	ldr	r0, [r4, #0]
 8021dc0:	1ac0      	subs	r0, r0, r3
 8021dc2:	6963      	ldr	r3, [r4, #20]
 8021dc4:	b2f6      	uxtb	r6, r6
 8021dc6:	4283      	cmp	r3, r0
 8021dc8:	4637      	mov	r7, r6
 8021dca:	dc04      	bgt.n	8021dd6 <__swbuf_r+0x42>
 8021dcc:	4621      	mov	r1, r4
 8021dce:	4628      	mov	r0, r5
 8021dd0:	f000 ff58 	bl	8022c84 <_fflush_r>
 8021dd4:	bb30      	cbnz	r0, 8021e24 <__swbuf_r+0x90>
 8021dd6:	68a3      	ldr	r3, [r4, #8]
 8021dd8:	3b01      	subs	r3, #1
 8021dda:	60a3      	str	r3, [r4, #8]
 8021ddc:	6823      	ldr	r3, [r4, #0]
 8021dde:	1c5a      	adds	r2, r3, #1
 8021de0:	6022      	str	r2, [r4, #0]
 8021de2:	701e      	strb	r6, [r3, #0]
 8021de4:	6963      	ldr	r3, [r4, #20]
 8021de6:	3001      	adds	r0, #1
 8021de8:	4283      	cmp	r3, r0
 8021dea:	d004      	beq.n	8021df6 <__swbuf_r+0x62>
 8021dec:	89a3      	ldrh	r3, [r4, #12]
 8021dee:	07db      	lsls	r3, r3, #31
 8021df0:	d506      	bpl.n	8021e00 <__swbuf_r+0x6c>
 8021df2:	2e0a      	cmp	r6, #10
 8021df4:	d104      	bne.n	8021e00 <__swbuf_r+0x6c>
 8021df6:	4621      	mov	r1, r4
 8021df8:	4628      	mov	r0, r5
 8021dfa:	f000 ff43 	bl	8022c84 <_fflush_r>
 8021dfe:	b988      	cbnz	r0, 8021e24 <__swbuf_r+0x90>
 8021e00:	4638      	mov	r0, r7
 8021e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021e04:	4b0a      	ldr	r3, [pc, #40]	; (8021e30 <__swbuf_r+0x9c>)
 8021e06:	429c      	cmp	r4, r3
 8021e08:	d101      	bne.n	8021e0e <__swbuf_r+0x7a>
 8021e0a:	68ac      	ldr	r4, [r5, #8]
 8021e0c:	e7cf      	b.n	8021dae <__swbuf_r+0x1a>
 8021e0e:	4b09      	ldr	r3, [pc, #36]	; (8021e34 <__swbuf_r+0xa0>)
 8021e10:	429c      	cmp	r4, r3
 8021e12:	bf08      	it	eq
 8021e14:	68ec      	ldreq	r4, [r5, #12]
 8021e16:	e7ca      	b.n	8021dae <__swbuf_r+0x1a>
 8021e18:	4621      	mov	r1, r4
 8021e1a:	4628      	mov	r0, r5
 8021e1c:	f000 f80c 	bl	8021e38 <__swsetup_r>
 8021e20:	2800      	cmp	r0, #0
 8021e22:	d0cb      	beq.n	8021dbc <__swbuf_r+0x28>
 8021e24:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8021e28:	e7ea      	b.n	8021e00 <__swbuf_r+0x6c>
 8021e2a:	bf00      	nop
 8021e2c:	080294d4 	.word	0x080294d4
 8021e30:	080294f4 	.word	0x080294f4
 8021e34:	080294b4 	.word	0x080294b4

08021e38 <__swsetup_r>:
 8021e38:	4b32      	ldr	r3, [pc, #200]	; (8021f04 <__swsetup_r+0xcc>)
 8021e3a:	b570      	push	{r4, r5, r6, lr}
 8021e3c:	681d      	ldr	r5, [r3, #0]
 8021e3e:	4606      	mov	r6, r0
 8021e40:	460c      	mov	r4, r1
 8021e42:	b125      	cbz	r5, 8021e4e <__swsetup_r+0x16>
 8021e44:	69ab      	ldr	r3, [r5, #24]
 8021e46:	b913      	cbnz	r3, 8021e4e <__swsetup_r+0x16>
 8021e48:	4628      	mov	r0, r5
 8021e4a:	f000 ffaf 	bl	8022dac <__sinit>
 8021e4e:	4b2e      	ldr	r3, [pc, #184]	; (8021f08 <__swsetup_r+0xd0>)
 8021e50:	429c      	cmp	r4, r3
 8021e52:	d10f      	bne.n	8021e74 <__swsetup_r+0x3c>
 8021e54:	686c      	ldr	r4, [r5, #4]
 8021e56:	89a3      	ldrh	r3, [r4, #12]
 8021e58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021e5c:	0719      	lsls	r1, r3, #28
 8021e5e:	d42c      	bmi.n	8021eba <__swsetup_r+0x82>
 8021e60:	06dd      	lsls	r5, r3, #27
 8021e62:	d411      	bmi.n	8021e88 <__swsetup_r+0x50>
 8021e64:	2309      	movs	r3, #9
 8021e66:	6033      	str	r3, [r6, #0]
 8021e68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8021e6c:	81a3      	strh	r3, [r4, #12]
 8021e6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021e72:	e03e      	b.n	8021ef2 <__swsetup_r+0xba>
 8021e74:	4b25      	ldr	r3, [pc, #148]	; (8021f0c <__swsetup_r+0xd4>)
 8021e76:	429c      	cmp	r4, r3
 8021e78:	d101      	bne.n	8021e7e <__swsetup_r+0x46>
 8021e7a:	68ac      	ldr	r4, [r5, #8]
 8021e7c:	e7eb      	b.n	8021e56 <__swsetup_r+0x1e>
 8021e7e:	4b24      	ldr	r3, [pc, #144]	; (8021f10 <__swsetup_r+0xd8>)
 8021e80:	429c      	cmp	r4, r3
 8021e82:	bf08      	it	eq
 8021e84:	68ec      	ldreq	r4, [r5, #12]
 8021e86:	e7e6      	b.n	8021e56 <__swsetup_r+0x1e>
 8021e88:	0758      	lsls	r0, r3, #29
 8021e8a:	d512      	bpl.n	8021eb2 <__swsetup_r+0x7a>
 8021e8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021e8e:	b141      	cbz	r1, 8021ea2 <__swsetup_r+0x6a>
 8021e90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021e94:	4299      	cmp	r1, r3
 8021e96:	d002      	beq.n	8021e9e <__swsetup_r+0x66>
 8021e98:	4630      	mov	r0, r6
 8021e9a:	f7fe f8f5 	bl	8020088 <_free_r>
 8021e9e:	2300      	movs	r3, #0
 8021ea0:	6363      	str	r3, [r4, #52]	; 0x34
 8021ea2:	89a3      	ldrh	r3, [r4, #12]
 8021ea4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8021ea8:	81a3      	strh	r3, [r4, #12]
 8021eaa:	2300      	movs	r3, #0
 8021eac:	6063      	str	r3, [r4, #4]
 8021eae:	6923      	ldr	r3, [r4, #16]
 8021eb0:	6023      	str	r3, [r4, #0]
 8021eb2:	89a3      	ldrh	r3, [r4, #12]
 8021eb4:	f043 0308 	orr.w	r3, r3, #8
 8021eb8:	81a3      	strh	r3, [r4, #12]
 8021eba:	6923      	ldr	r3, [r4, #16]
 8021ebc:	b94b      	cbnz	r3, 8021ed2 <__swsetup_r+0x9a>
 8021ebe:	89a3      	ldrh	r3, [r4, #12]
 8021ec0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8021ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021ec8:	d003      	beq.n	8021ed2 <__swsetup_r+0x9a>
 8021eca:	4621      	mov	r1, r4
 8021ecc:	4630      	mov	r0, r6
 8021ece:	f001 fbb7 	bl	8023640 <__smakebuf_r>
 8021ed2:	89a0      	ldrh	r0, [r4, #12]
 8021ed4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021ed8:	f010 0301 	ands.w	r3, r0, #1
 8021edc:	d00a      	beq.n	8021ef4 <__swsetup_r+0xbc>
 8021ede:	2300      	movs	r3, #0
 8021ee0:	60a3      	str	r3, [r4, #8]
 8021ee2:	6963      	ldr	r3, [r4, #20]
 8021ee4:	425b      	negs	r3, r3
 8021ee6:	61a3      	str	r3, [r4, #24]
 8021ee8:	6923      	ldr	r3, [r4, #16]
 8021eea:	b943      	cbnz	r3, 8021efe <__swsetup_r+0xc6>
 8021eec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8021ef0:	d1ba      	bne.n	8021e68 <__swsetup_r+0x30>
 8021ef2:	bd70      	pop	{r4, r5, r6, pc}
 8021ef4:	0781      	lsls	r1, r0, #30
 8021ef6:	bf58      	it	pl
 8021ef8:	6963      	ldrpl	r3, [r4, #20]
 8021efa:	60a3      	str	r3, [r4, #8]
 8021efc:	e7f4      	b.n	8021ee8 <__swsetup_r+0xb0>
 8021efe:	2000      	movs	r0, #0
 8021f00:	e7f7      	b.n	8021ef2 <__swsetup_r+0xba>
 8021f02:	bf00      	nop
 8021f04:	24003450 	.word	0x24003450
 8021f08:	080294d4 	.word	0x080294d4
 8021f0c:	080294f4 	.word	0x080294f4
 8021f10:	080294b4 	.word	0x080294b4

08021f14 <__assert_func>:
 8021f14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021f16:	4614      	mov	r4, r2
 8021f18:	461a      	mov	r2, r3
 8021f1a:	4b09      	ldr	r3, [pc, #36]	; (8021f40 <__assert_func+0x2c>)
 8021f1c:	681b      	ldr	r3, [r3, #0]
 8021f1e:	4605      	mov	r5, r0
 8021f20:	68d8      	ldr	r0, [r3, #12]
 8021f22:	b14c      	cbz	r4, 8021f38 <__assert_func+0x24>
 8021f24:	4b07      	ldr	r3, [pc, #28]	; (8021f44 <__assert_func+0x30>)
 8021f26:	9100      	str	r1, [sp, #0]
 8021f28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021f2c:	4906      	ldr	r1, [pc, #24]	; (8021f48 <__assert_func+0x34>)
 8021f2e:	462b      	mov	r3, r5
 8021f30:	f000 ffba 	bl	8022ea8 <fiprintf>
 8021f34:	f002 fbce 	bl	80246d4 <abort>
 8021f38:	4b04      	ldr	r3, [pc, #16]	; (8021f4c <__assert_func+0x38>)
 8021f3a:	461c      	mov	r4, r3
 8021f3c:	e7f3      	b.n	8021f26 <__assert_func+0x12>
 8021f3e:	bf00      	nop
 8021f40:	24003450 	.word	0x24003450
 8021f44:	080293f8 	.word	0x080293f8
 8021f48:	08029405 	.word	0x08029405
 8021f4c:	08029433 	.word	0x08029433

08021f50 <quorem>:
 8021f50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f54:	6903      	ldr	r3, [r0, #16]
 8021f56:	690c      	ldr	r4, [r1, #16]
 8021f58:	42a3      	cmp	r3, r4
 8021f5a:	4607      	mov	r7, r0
 8021f5c:	f2c0 8081 	blt.w	8022062 <quorem+0x112>
 8021f60:	3c01      	subs	r4, #1
 8021f62:	f101 0814 	add.w	r8, r1, #20
 8021f66:	f100 0514 	add.w	r5, r0, #20
 8021f6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8021f6e:	9301      	str	r3, [sp, #4]
 8021f70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8021f74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8021f78:	3301      	adds	r3, #1
 8021f7a:	429a      	cmp	r2, r3
 8021f7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8021f80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8021f84:	fbb2 f6f3 	udiv	r6, r2, r3
 8021f88:	d331      	bcc.n	8021fee <quorem+0x9e>
 8021f8a:	f04f 0e00 	mov.w	lr, #0
 8021f8e:	4640      	mov	r0, r8
 8021f90:	46ac      	mov	ip, r5
 8021f92:	46f2      	mov	sl, lr
 8021f94:	f850 2b04 	ldr.w	r2, [r0], #4
 8021f98:	b293      	uxth	r3, r2
 8021f9a:	fb06 e303 	mla	r3, r6, r3, lr
 8021f9e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8021fa2:	b29b      	uxth	r3, r3
 8021fa4:	ebaa 0303 	sub.w	r3, sl, r3
 8021fa8:	0c12      	lsrs	r2, r2, #16
 8021faa:	f8dc a000 	ldr.w	sl, [ip]
 8021fae:	fb06 e202 	mla	r2, r6, r2, lr
 8021fb2:	fa13 f38a 	uxtah	r3, r3, sl
 8021fb6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8021fba:	fa1f fa82 	uxth.w	sl, r2
 8021fbe:	f8dc 2000 	ldr.w	r2, [ip]
 8021fc2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8021fc6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8021fca:	b29b      	uxth	r3, r3
 8021fcc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021fd0:	4581      	cmp	r9, r0
 8021fd2:	f84c 3b04 	str.w	r3, [ip], #4
 8021fd6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8021fda:	d2db      	bcs.n	8021f94 <quorem+0x44>
 8021fdc:	f855 300b 	ldr.w	r3, [r5, fp]
 8021fe0:	b92b      	cbnz	r3, 8021fee <quorem+0x9e>
 8021fe2:	9b01      	ldr	r3, [sp, #4]
 8021fe4:	3b04      	subs	r3, #4
 8021fe6:	429d      	cmp	r5, r3
 8021fe8:	461a      	mov	r2, r3
 8021fea:	d32e      	bcc.n	802204a <quorem+0xfa>
 8021fec:	613c      	str	r4, [r7, #16]
 8021fee:	4638      	mov	r0, r7
 8021ff0:	f001 fe4c 	bl	8023c8c <__mcmp>
 8021ff4:	2800      	cmp	r0, #0
 8021ff6:	db24      	blt.n	8022042 <quorem+0xf2>
 8021ff8:	3601      	adds	r6, #1
 8021ffa:	4628      	mov	r0, r5
 8021ffc:	f04f 0c00 	mov.w	ip, #0
 8022000:	f858 2b04 	ldr.w	r2, [r8], #4
 8022004:	f8d0 e000 	ldr.w	lr, [r0]
 8022008:	b293      	uxth	r3, r2
 802200a:	ebac 0303 	sub.w	r3, ip, r3
 802200e:	0c12      	lsrs	r2, r2, #16
 8022010:	fa13 f38e 	uxtah	r3, r3, lr
 8022014:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8022018:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802201c:	b29b      	uxth	r3, r3
 802201e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8022022:	45c1      	cmp	r9, r8
 8022024:	f840 3b04 	str.w	r3, [r0], #4
 8022028:	ea4f 4c22 	mov.w	ip, r2, asr #16
 802202c:	d2e8      	bcs.n	8022000 <quorem+0xb0>
 802202e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8022032:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8022036:	b922      	cbnz	r2, 8022042 <quorem+0xf2>
 8022038:	3b04      	subs	r3, #4
 802203a:	429d      	cmp	r5, r3
 802203c:	461a      	mov	r2, r3
 802203e:	d30a      	bcc.n	8022056 <quorem+0x106>
 8022040:	613c      	str	r4, [r7, #16]
 8022042:	4630      	mov	r0, r6
 8022044:	b003      	add	sp, #12
 8022046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802204a:	6812      	ldr	r2, [r2, #0]
 802204c:	3b04      	subs	r3, #4
 802204e:	2a00      	cmp	r2, #0
 8022050:	d1cc      	bne.n	8021fec <quorem+0x9c>
 8022052:	3c01      	subs	r4, #1
 8022054:	e7c7      	b.n	8021fe6 <quorem+0x96>
 8022056:	6812      	ldr	r2, [r2, #0]
 8022058:	3b04      	subs	r3, #4
 802205a:	2a00      	cmp	r2, #0
 802205c:	d1f0      	bne.n	8022040 <quorem+0xf0>
 802205e:	3c01      	subs	r4, #1
 8022060:	e7eb      	b.n	802203a <quorem+0xea>
 8022062:	2000      	movs	r0, #0
 8022064:	e7ee      	b.n	8022044 <quorem+0xf4>
	...

08022068 <_dtoa_r>:
 8022068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802206c:	ec59 8b10 	vmov	r8, r9, d0
 8022070:	b095      	sub	sp, #84	; 0x54
 8022072:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8022074:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8022076:	9107      	str	r1, [sp, #28]
 8022078:	e9cd 8902 	strd	r8, r9, [sp, #8]
 802207c:	4606      	mov	r6, r0
 802207e:	9209      	str	r2, [sp, #36]	; 0x24
 8022080:	9310      	str	r3, [sp, #64]	; 0x40
 8022082:	b975      	cbnz	r5, 80220a2 <_dtoa_r+0x3a>
 8022084:	2010      	movs	r0, #16
 8022086:	f7fd ffb9 	bl	801fffc <malloc>
 802208a:	4602      	mov	r2, r0
 802208c:	6270      	str	r0, [r6, #36]	; 0x24
 802208e:	b920      	cbnz	r0, 802209a <_dtoa_r+0x32>
 8022090:	4bab      	ldr	r3, [pc, #684]	; (8022340 <_dtoa_r+0x2d8>)
 8022092:	21ea      	movs	r1, #234	; 0xea
 8022094:	48ab      	ldr	r0, [pc, #684]	; (8022344 <_dtoa_r+0x2dc>)
 8022096:	f7ff ff3d 	bl	8021f14 <__assert_func>
 802209a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802209e:	6005      	str	r5, [r0, #0]
 80220a0:	60c5      	str	r5, [r0, #12]
 80220a2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80220a4:	6819      	ldr	r1, [r3, #0]
 80220a6:	b151      	cbz	r1, 80220be <_dtoa_r+0x56>
 80220a8:	685a      	ldr	r2, [r3, #4]
 80220aa:	604a      	str	r2, [r1, #4]
 80220ac:	2301      	movs	r3, #1
 80220ae:	4093      	lsls	r3, r2
 80220b0:	608b      	str	r3, [r1, #8]
 80220b2:	4630      	mov	r0, r6
 80220b4:	f001 fb62 	bl	802377c <_Bfree>
 80220b8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80220ba:	2200      	movs	r2, #0
 80220bc:	601a      	str	r2, [r3, #0]
 80220be:	f1b9 0300 	subs.w	r3, r9, #0
 80220c2:	bfbb      	ittet	lt
 80220c4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80220c8:	9303      	strlt	r3, [sp, #12]
 80220ca:	2300      	movge	r3, #0
 80220cc:	2201      	movlt	r2, #1
 80220ce:	bfac      	ite	ge
 80220d0:	6023      	strge	r3, [r4, #0]
 80220d2:	6022      	strlt	r2, [r4, #0]
 80220d4:	4b9c      	ldr	r3, [pc, #624]	; (8022348 <_dtoa_r+0x2e0>)
 80220d6:	9c03      	ldr	r4, [sp, #12]
 80220d8:	43a3      	bics	r3, r4
 80220da:	d11a      	bne.n	8022112 <_dtoa_r+0xaa>
 80220dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80220de:	f242 730f 	movw	r3, #9999	; 0x270f
 80220e2:	6013      	str	r3, [r2, #0]
 80220e4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80220e8:	ea53 0308 	orrs.w	r3, r3, r8
 80220ec:	f000 8512 	beq.w	8022b14 <_dtoa_r+0xaac>
 80220f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80220f2:	b953      	cbnz	r3, 802210a <_dtoa_r+0xa2>
 80220f4:	4b95      	ldr	r3, [pc, #596]	; (802234c <_dtoa_r+0x2e4>)
 80220f6:	e01f      	b.n	8022138 <_dtoa_r+0xd0>
 80220f8:	4b95      	ldr	r3, [pc, #596]	; (8022350 <_dtoa_r+0x2e8>)
 80220fa:	9300      	str	r3, [sp, #0]
 80220fc:	3308      	adds	r3, #8
 80220fe:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8022100:	6013      	str	r3, [r2, #0]
 8022102:	9800      	ldr	r0, [sp, #0]
 8022104:	b015      	add	sp, #84	; 0x54
 8022106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802210a:	4b90      	ldr	r3, [pc, #576]	; (802234c <_dtoa_r+0x2e4>)
 802210c:	9300      	str	r3, [sp, #0]
 802210e:	3303      	adds	r3, #3
 8022110:	e7f5      	b.n	80220fe <_dtoa_r+0x96>
 8022112:	ed9d 7b02 	vldr	d7, [sp, #8]
 8022116:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802211a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802211e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8022122:	d10b      	bne.n	802213c <_dtoa_r+0xd4>
 8022124:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022126:	2301      	movs	r3, #1
 8022128:	6013      	str	r3, [r2, #0]
 802212a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802212c:	2b00      	cmp	r3, #0
 802212e:	f000 84ee 	beq.w	8022b0e <_dtoa_r+0xaa6>
 8022132:	4888      	ldr	r0, [pc, #544]	; (8022354 <_dtoa_r+0x2ec>)
 8022134:	6018      	str	r0, [r3, #0]
 8022136:	1e43      	subs	r3, r0, #1
 8022138:	9300      	str	r3, [sp, #0]
 802213a:	e7e2      	b.n	8022102 <_dtoa_r+0x9a>
 802213c:	a913      	add	r1, sp, #76	; 0x4c
 802213e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8022142:	aa12      	add	r2, sp, #72	; 0x48
 8022144:	4630      	mov	r0, r6
 8022146:	f001 fec1 	bl	8023ecc <__d2b>
 802214a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 802214e:	4605      	mov	r5, r0
 8022150:	9812      	ldr	r0, [sp, #72]	; 0x48
 8022152:	2900      	cmp	r1, #0
 8022154:	d047      	beq.n	80221e6 <_dtoa_r+0x17e>
 8022156:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022158:	f3c4 0413 	ubfx	r4, r4, #0, #20
 802215c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8022160:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8022164:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8022168:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 802216c:	2400      	movs	r4, #0
 802216e:	ec43 2b16 	vmov	d6, r2, r3
 8022172:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8022176:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8022328 <_dtoa_r+0x2c0>
 802217a:	ee36 7b47 	vsub.f64	d7, d6, d7
 802217e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8022330 <_dtoa_r+0x2c8>
 8022182:	eea7 6b05 	vfma.f64	d6, d7, d5
 8022186:	eeb0 7b46 	vmov.f64	d7, d6
 802218a:	ee06 1a90 	vmov	s13, r1
 802218e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8022192:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8022338 <_dtoa_r+0x2d0>
 8022196:	eea5 7b06 	vfma.f64	d7, d5, d6
 802219a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 802219e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80221a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80221a6:	ee16 ba90 	vmov	fp, s13
 80221aa:	9411      	str	r4, [sp, #68]	; 0x44
 80221ac:	d508      	bpl.n	80221c0 <_dtoa_r+0x158>
 80221ae:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80221b2:	eeb4 6b47 	vcmp.f64	d6, d7
 80221b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80221ba:	bf18      	it	ne
 80221bc:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 80221c0:	f1bb 0f16 	cmp.w	fp, #22
 80221c4:	d832      	bhi.n	802222c <_dtoa_r+0x1c4>
 80221c6:	4b64      	ldr	r3, [pc, #400]	; (8022358 <_dtoa_r+0x2f0>)
 80221c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80221cc:	ed93 7b00 	vldr	d7, [r3]
 80221d0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80221d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80221d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80221dc:	d501      	bpl.n	80221e2 <_dtoa_r+0x17a>
 80221de:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80221e2:	2300      	movs	r3, #0
 80221e4:	e023      	b.n	802222e <_dtoa_r+0x1c6>
 80221e6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80221e8:	4401      	add	r1, r0
 80221ea:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80221ee:	2b20      	cmp	r3, #32
 80221f0:	bfc3      	ittte	gt
 80221f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80221f6:	fa04 f303 	lslgt.w	r3, r4, r3
 80221fa:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80221fe:	f1c3 0320 	rsble	r3, r3, #32
 8022202:	bfc6      	itte	gt
 8022204:	fa28 f804 	lsrgt.w	r8, r8, r4
 8022208:	ea43 0308 	orrgt.w	r3, r3, r8
 802220c:	fa08 f303 	lslle.w	r3, r8, r3
 8022210:	ee07 3a90 	vmov	s15, r3
 8022214:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8022218:	3901      	subs	r1, #1
 802221a:	ed8d 7b00 	vstr	d7, [sp]
 802221e:	9c01      	ldr	r4, [sp, #4]
 8022220:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022224:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8022228:	2401      	movs	r4, #1
 802222a:	e7a0      	b.n	802216e <_dtoa_r+0x106>
 802222c:	2301      	movs	r3, #1
 802222e:	930f      	str	r3, [sp, #60]	; 0x3c
 8022230:	1a43      	subs	r3, r0, r1
 8022232:	1e5a      	subs	r2, r3, #1
 8022234:	bf45      	ittet	mi
 8022236:	f1c3 0301 	rsbmi	r3, r3, #1
 802223a:	9305      	strmi	r3, [sp, #20]
 802223c:	2300      	movpl	r3, #0
 802223e:	2300      	movmi	r3, #0
 8022240:	9206      	str	r2, [sp, #24]
 8022242:	bf54      	ite	pl
 8022244:	9305      	strpl	r3, [sp, #20]
 8022246:	9306      	strmi	r3, [sp, #24]
 8022248:	f1bb 0f00 	cmp.w	fp, #0
 802224c:	db18      	blt.n	8022280 <_dtoa_r+0x218>
 802224e:	9b06      	ldr	r3, [sp, #24]
 8022250:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8022254:	445b      	add	r3, fp
 8022256:	9306      	str	r3, [sp, #24]
 8022258:	2300      	movs	r3, #0
 802225a:	9a07      	ldr	r2, [sp, #28]
 802225c:	2a09      	cmp	r2, #9
 802225e:	d849      	bhi.n	80222f4 <_dtoa_r+0x28c>
 8022260:	2a05      	cmp	r2, #5
 8022262:	bfc4      	itt	gt
 8022264:	3a04      	subgt	r2, #4
 8022266:	9207      	strgt	r2, [sp, #28]
 8022268:	9a07      	ldr	r2, [sp, #28]
 802226a:	f1a2 0202 	sub.w	r2, r2, #2
 802226e:	bfcc      	ite	gt
 8022270:	2400      	movgt	r4, #0
 8022272:	2401      	movle	r4, #1
 8022274:	2a03      	cmp	r2, #3
 8022276:	d848      	bhi.n	802230a <_dtoa_r+0x2a2>
 8022278:	e8df f002 	tbb	[pc, r2]
 802227c:	3a2c2e0b 	.word	0x3a2c2e0b
 8022280:	9b05      	ldr	r3, [sp, #20]
 8022282:	2200      	movs	r2, #0
 8022284:	eba3 030b 	sub.w	r3, r3, fp
 8022288:	9305      	str	r3, [sp, #20]
 802228a:	920e      	str	r2, [sp, #56]	; 0x38
 802228c:	f1cb 0300 	rsb	r3, fp, #0
 8022290:	e7e3      	b.n	802225a <_dtoa_r+0x1f2>
 8022292:	2200      	movs	r2, #0
 8022294:	9208      	str	r2, [sp, #32]
 8022296:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022298:	2a00      	cmp	r2, #0
 802229a:	dc39      	bgt.n	8022310 <_dtoa_r+0x2a8>
 802229c:	f04f 0a01 	mov.w	sl, #1
 80222a0:	46d1      	mov	r9, sl
 80222a2:	4652      	mov	r2, sl
 80222a4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80222a8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80222aa:	2100      	movs	r1, #0
 80222ac:	6079      	str	r1, [r7, #4]
 80222ae:	2004      	movs	r0, #4
 80222b0:	f100 0c14 	add.w	ip, r0, #20
 80222b4:	4594      	cmp	ip, r2
 80222b6:	6879      	ldr	r1, [r7, #4]
 80222b8:	d92f      	bls.n	802231a <_dtoa_r+0x2b2>
 80222ba:	4630      	mov	r0, r6
 80222bc:	930c      	str	r3, [sp, #48]	; 0x30
 80222be:	f001 fa1d 	bl	80236fc <_Balloc>
 80222c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80222c4:	9000      	str	r0, [sp, #0]
 80222c6:	4602      	mov	r2, r0
 80222c8:	2800      	cmp	r0, #0
 80222ca:	d149      	bne.n	8022360 <_dtoa_r+0x2f8>
 80222cc:	4b23      	ldr	r3, [pc, #140]	; (802235c <_dtoa_r+0x2f4>)
 80222ce:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80222d2:	e6df      	b.n	8022094 <_dtoa_r+0x2c>
 80222d4:	2201      	movs	r2, #1
 80222d6:	e7dd      	b.n	8022294 <_dtoa_r+0x22c>
 80222d8:	2200      	movs	r2, #0
 80222da:	9208      	str	r2, [sp, #32]
 80222dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80222de:	eb0b 0a02 	add.w	sl, fp, r2
 80222e2:	f10a 0901 	add.w	r9, sl, #1
 80222e6:	464a      	mov	r2, r9
 80222e8:	2a01      	cmp	r2, #1
 80222ea:	bfb8      	it	lt
 80222ec:	2201      	movlt	r2, #1
 80222ee:	e7db      	b.n	80222a8 <_dtoa_r+0x240>
 80222f0:	2201      	movs	r2, #1
 80222f2:	e7f2      	b.n	80222da <_dtoa_r+0x272>
 80222f4:	2401      	movs	r4, #1
 80222f6:	2200      	movs	r2, #0
 80222f8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80222fc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8022300:	2100      	movs	r1, #0
 8022302:	46d1      	mov	r9, sl
 8022304:	2212      	movs	r2, #18
 8022306:	9109      	str	r1, [sp, #36]	; 0x24
 8022308:	e7ce      	b.n	80222a8 <_dtoa_r+0x240>
 802230a:	2201      	movs	r2, #1
 802230c:	9208      	str	r2, [sp, #32]
 802230e:	e7f5      	b.n	80222fc <_dtoa_r+0x294>
 8022310:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8022314:	46d1      	mov	r9, sl
 8022316:	4652      	mov	r2, sl
 8022318:	e7c6      	b.n	80222a8 <_dtoa_r+0x240>
 802231a:	3101      	adds	r1, #1
 802231c:	6079      	str	r1, [r7, #4]
 802231e:	0040      	lsls	r0, r0, #1
 8022320:	e7c6      	b.n	80222b0 <_dtoa_r+0x248>
 8022322:	bf00      	nop
 8022324:	f3af 8000 	nop.w
 8022328:	636f4361 	.word	0x636f4361
 802232c:	3fd287a7 	.word	0x3fd287a7
 8022330:	8b60c8b3 	.word	0x8b60c8b3
 8022334:	3fc68a28 	.word	0x3fc68a28
 8022338:	509f79fb 	.word	0x509f79fb
 802233c:	3fd34413 	.word	0x3fd34413
 8022340:	08029331 	.word	0x08029331
 8022344:	08029441 	.word	0x08029441
 8022348:	7ff00000 	.word	0x7ff00000
 802234c:	0802943d 	.word	0x0802943d
 8022350:	08029434 	.word	0x08029434
 8022354:	08029309 	.word	0x08029309
 8022358:	08029620 	.word	0x08029620
 802235c:	080294a0 	.word	0x080294a0
 8022360:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8022362:	9900      	ldr	r1, [sp, #0]
 8022364:	6011      	str	r1, [r2, #0]
 8022366:	f1b9 0f0e 	cmp.w	r9, #14
 802236a:	d872      	bhi.n	8022452 <_dtoa_r+0x3ea>
 802236c:	2c00      	cmp	r4, #0
 802236e:	d070      	beq.n	8022452 <_dtoa_r+0x3ea>
 8022370:	f1bb 0f00 	cmp.w	fp, #0
 8022374:	f340 80a6 	ble.w	80224c4 <_dtoa_r+0x45c>
 8022378:	49ca      	ldr	r1, [pc, #808]	; (80226a4 <_dtoa_r+0x63c>)
 802237a:	f00b 020f 	and.w	r2, fp, #15
 802237e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8022382:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8022386:	ed92 7b00 	vldr	d7, [r2]
 802238a:	ea4f 112b 	mov.w	r1, fp, asr #4
 802238e:	f000 808d 	beq.w	80224ac <_dtoa_r+0x444>
 8022392:	4ac5      	ldr	r2, [pc, #788]	; (80226a8 <_dtoa_r+0x640>)
 8022394:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8022398:	ed92 6b08 	vldr	d6, [r2, #32]
 802239c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80223a0:	ed8d 6b02 	vstr	d6, [sp, #8]
 80223a4:	f001 010f 	and.w	r1, r1, #15
 80223a8:	2203      	movs	r2, #3
 80223aa:	48bf      	ldr	r0, [pc, #764]	; (80226a8 <_dtoa_r+0x640>)
 80223ac:	2900      	cmp	r1, #0
 80223ae:	d17f      	bne.n	80224b0 <_dtoa_r+0x448>
 80223b0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80223b4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80223b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80223bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80223be:	2900      	cmp	r1, #0
 80223c0:	f000 80b2 	beq.w	8022528 <_dtoa_r+0x4c0>
 80223c4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80223c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80223cc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80223d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80223d4:	f140 80a8 	bpl.w	8022528 <_dtoa_r+0x4c0>
 80223d8:	f1b9 0f00 	cmp.w	r9, #0
 80223dc:	f000 80a4 	beq.w	8022528 <_dtoa_r+0x4c0>
 80223e0:	f1ba 0f00 	cmp.w	sl, #0
 80223e4:	dd31      	ble.n	802244a <_dtoa_r+0x3e2>
 80223e6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80223ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80223ee:	ed8d 7b02 	vstr	d7, [sp, #8]
 80223f2:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80223f6:	3201      	adds	r2, #1
 80223f8:	4650      	mov	r0, sl
 80223fa:	ed9d 6b02 	vldr	d6, [sp, #8]
 80223fe:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8022402:	ee07 2a90 	vmov	s15, r2
 8022406:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 802240a:	eea7 5b06 	vfma.f64	d5, d7, d6
 802240e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8022412:	9c03      	ldr	r4, [sp, #12]
 8022414:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8022418:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 802241c:	2800      	cmp	r0, #0
 802241e:	f040 8086 	bne.w	802252e <_dtoa_r+0x4c6>
 8022422:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8022426:	ee36 6b47 	vsub.f64	d6, d6, d7
 802242a:	ec42 1b17 	vmov	d7, r1, r2
 802242e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8022432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022436:	f300 8272 	bgt.w	802291e <_dtoa_r+0x8b6>
 802243a:	eeb1 7b47 	vneg.f64	d7, d7
 802243e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8022442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022446:	f100 8267 	bmi.w	8022918 <_dtoa_r+0x8b0>
 802244a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 802244e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8022452:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022454:	2a00      	cmp	r2, #0
 8022456:	f2c0 8129 	blt.w	80226ac <_dtoa_r+0x644>
 802245a:	f1bb 0f0e 	cmp.w	fp, #14
 802245e:	f300 8125 	bgt.w	80226ac <_dtoa_r+0x644>
 8022462:	4b90      	ldr	r3, [pc, #576]	; (80226a4 <_dtoa_r+0x63c>)
 8022464:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8022468:	ed93 6b00 	vldr	d6, [r3]
 802246c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802246e:	2b00      	cmp	r3, #0
 8022470:	f280 80c3 	bge.w	80225fa <_dtoa_r+0x592>
 8022474:	f1b9 0f00 	cmp.w	r9, #0
 8022478:	f300 80bf 	bgt.w	80225fa <_dtoa_r+0x592>
 802247c:	f040 824c 	bne.w	8022918 <_dtoa_r+0x8b0>
 8022480:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8022484:	ee26 6b07 	vmul.f64	d6, d6, d7
 8022488:	ed9d 7b02 	vldr	d7, [sp, #8]
 802248c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8022490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022494:	464c      	mov	r4, r9
 8022496:	464f      	mov	r7, r9
 8022498:	f280 8222 	bge.w	80228e0 <_dtoa_r+0x878>
 802249c:	f8dd 8000 	ldr.w	r8, [sp]
 80224a0:	2331      	movs	r3, #49	; 0x31
 80224a2:	f808 3b01 	strb.w	r3, [r8], #1
 80224a6:	f10b 0b01 	add.w	fp, fp, #1
 80224aa:	e21e      	b.n	80228ea <_dtoa_r+0x882>
 80224ac:	2202      	movs	r2, #2
 80224ae:	e77c      	b.n	80223aa <_dtoa_r+0x342>
 80224b0:	07cc      	lsls	r4, r1, #31
 80224b2:	d504      	bpl.n	80224be <_dtoa_r+0x456>
 80224b4:	ed90 6b00 	vldr	d6, [r0]
 80224b8:	3201      	adds	r2, #1
 80224ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80224be:	1049      	asrs	r1, r1, #1
 80224c0:	3008      	adds	r0, #8
 80224c2:	e773      	b.n	80223ac <_dtoa_r+0x344>
 80224c4:	d02e      	beq.n	8022524 <_dtoa_r+0x4bc>
 80224c6:	f1cb 0100 	rsb	r1, fp, #0
 80224ca:	4a76      	ldr	r2, [pc, #472]	; (80226a4 <_dtoa_r+0x63c>)
 80224cc:	f001 000f 	and.w	r0, r1, #15
 80224d0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80224d4:	ed92 7b00 	vldr	d7, [r2]
 80224d8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80224dc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80224e0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80224e4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80224e8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80224ec:	486e      	ldr	r0, [pc, #440]	; (80226a8 <_dtoa_r+0x640>)
 80224ee:	1109      	asrs	r1, r1, #4
 80224f0:	2400      	movs	r4, #0
 80224f2:	2202      	movs	r2, #2
 80224f4:	b939      	cbnz	r1, 8022506 <_dtoa_r+0x49e>
 80224f6:	2c00      	cmp	r4, #0
 80224f8:	f43f af60 	beq.w	80223bc <_dtoa_r+0x354>
 80224fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8022500:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022504:	e75a      	b.n	80223bc <_dtoa_r+0x354>
 8022506:	07cf      	lsls	r7, r1, #31
 8022508:	d509      	bpl.n	802251e <_dtoa_r+0x4b6>
 802250a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 802250e:	ed90 7b00 	vldr	d7, [r0]
 8022512:	ee26 7b07 	vmul.f64	d7, d6, d7
 8022516:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 802251a:	3201      	adds	r2, #1
 802251c:	2401      	movs	r4, #1
 802251e:	1049      	asrs	r1, r1, #1
 8022520:	3008      	adds	r0, #8
 8022522:	e7e7      	b.n	80224f4 <_dtoa_r+0x48c>
 8022524:	2202      	movs	r2, #2
 8022526:	e749      	b.n	80223bc <_dtoa_r+0x354>
 8022528:	465f      	mov	r7, fp
 802252a:	4648      	mov	r0, r9
 802252c:	e765      	b.n	80223fa <_dtoa_r+0x392>
 802252e:	ec42 1b17 	vmov	d7, r1, r2
 8022532:	4a5c      	ldr	r2, [pc, #368]	; (80226a4 <_dtoa_r+0x63c>)
 8022534:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8022538:	ed12 4b02 	vldr	d4, [r2, #-8]
 802253c:	9a00      	ldr	r2, [sp, #0]
 802253e:	1814      	adds	r4, r2, r0
 8022540:	9a08      	ldr	r2, [sp, #32]
 8022542:	b352      	cbz	r2, 802259a <_dtoa_r+0x532>
 8022544:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8022548:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 802254c:	f8dd 8000 	ldr.w	r8, [sp]
 8022550:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8022554:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8022558:	ee35 7b47 	vsub.f64	d7, d5, d7
 802255c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8022560:	ee14 2a90 	vmov	r2, s9
 8022564:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8022568:	3230      	adds	r2, #48	; 0x30
 802256a:	ee36 6b45 	vsub.f64	d6, d6, d5
 802256e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8022572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022576:	f808 2b01 	strb.w	r2, [r8], #1
 802257a:	d439      	bmi.n	80225f0 <_dtoa_r+0x588>
 802257c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8022580:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8022584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022588:	d472      	bmi.n	8022670 <_dtoa_r+0x608>
 802258a:	45a0      	cmp	r8, r4
 802258c:	f43f af5d 	beq.w	802244a <_dtoa_r+0x3e2>
 8022590:	ee27 7b03 	vmul.f64	d7, d7, d3
 8022594:	ee26 6b03 	vmul.f64	d6, d6, d3
 8022598:	e7e0      	b.n	802255c <_dtoa_r+0x4f4>
 802259a:	f8dd 8000 	ldr.w	r8, [sp]
 802259e:	ee27 7b04 	vmul.f64	d7, d7, d4
 80225a2:	4621      	mov	r1, r4
 80225a4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80225a8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80225ac:	ee14 2a90 	vmov	r2, s9
 80225b0:	3230      	adds	r2, #48	; 0x30
 80225b2:	f808 2b01 	strb.w	r2, [r8], #1
 80225b6:	45a0      	cmp	r8, r4
 80225b8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80225bc:	ee36 6b45 	vsub.f64	d6, d6, d5
 80225c0:	d118      	bne.n	80225f4 <_dtoa_r+0x58c>
 80225c2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80225c6:	ee37 4b05 	vadd.f64	d4, d7, d5
 80225ca:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80225ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80225d2:	dc4d      	bgt.n	8022670 <_dtoa_r+0x608>
 80225d4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80225d8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80225dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80225e0:	f57f af33 	bpl.w	802244a <_dtoa_r+0x3e2>
 80225e4:	4688      	mov	r8, r1
 80225e6:	3901      	subs	r1, #1
 80225e8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80225ec:	2b30      	cmp	r3, #48	; 0x30
 80225ee:	d0f9      	beq.n	80225e4 <_dtoa_r+0x57c>
 80225f0:	46bb      	mov	fp, r7
 80225f2:	e02a      	b.n	802264a <_dtoa_r+0x5e2>
 80225f4:	ee26 6b03 	vmul.f64	d6, d6, d3
 80225f8:	e7d6      	b.n	80225a8 <_dtoa_r+0x540>
 80225fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80225fe:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8022602:	f8dd 8000 	ldr.w	r8, [sp]
 8022606:	ee87 5b06 	vdiv.f64	d5, d7, d6
 802260a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 802260e:	ee15 3a10 	vmov	r3, s10
 8022612:	3330      	adds	r3, #48	; 0x30
 8022614:	f808 3b01 	strb.w	r3, [r8], #1
 8022618:	9b00      	ldr	r3, [sp, #0]
 802261a:	eba8 0303 	sub.w	r3, r8, r3
 802261e:	4599      	cmp	r9, r3
 8022620:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8022624:	eea3 7b46 	vfms.f64	d7, d3, d6
 8022628:	d133      	bne.n	8022692 <_dtoa_r+0x62a>
 802262a:	ee37 7b07 	vadd.f64	d7, d7, d7
 802262e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8022632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022636:	dc1a      	bgt.n	802266e <_dtoa_r+0x606>
 8022638:	eeb4 7b46 	vcmp.f64	d7, d6
 802263c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022640:	d103      	bne.n	802264a <_dtoa_r+0x5e2>
 8022642:	ee15 3a10 	vmov	r3, s10
 8022646:	07d9      	lsls	r1, r3, #31
 8022648:	d411      	bmi.n	802266e <_dtoa_r+0x606>
 802264a:	4629      	mov	r1, r5
 802264c:	4630      	mov	r0, r6
 802264e:	f001 f895 	bl	802377c <_Bfree>
 8022652:	2300      	movs	r3, #0
 8022654:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022656:	f888 3000 	strb.w	r3, [r8]
 802265a:	f10b 0301 	add.w	r3, fp, #1
 802265e:	6013      	str	r3, [r2, #0]
 8022660:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022662:	2b00      	cmp	r3, #0
 8022664:	f43f ad4d 	beq.w	8022102 <_dtoa_r+0x9a>
 8022668:	f8c3 8000 	str.w	r8, [r3]
 802266c:	e549      	b.n	8022102 <_dtoa_r+0x9a>
 802266e:	465f      	mov	r7, fp
 8022670:	4643      	mov	r3, r8
 8022672:	4698      	mov	r8, r3
 8022674:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8022678:	2a39      	cmp	r2, #57	; 0x39
 802267a:	d106      	bne.n	802268a <_dtoa_r+0x622>
 802267c:	9a00      	ldr	r2, [sp, #0]
 802267e:	429a      	cmp	r2, r3
 8022680:	d1f7      	bne.n	8022672 <_dtoa_r+0x60a>
 8022682:	9900      	ldr	r1, [sp, #0]
 8022684:	2230      	movs	r2, #48	; 0x30
 8022686:	3701      	adds	r7, #1
 8022688:	700a      	strb	r2, [r1, #0]
 802268a:	781a      	ldrb	r2, [r3, #0]
 802268c:	3201      	adds	r2, #1
 802268e:	701a      	strb	r2, [r3, #0]
 8022690:	e7ae      	b.n	80225f0 <_dtoa_r+0x588>
 8022692:	ee27 7b04 	vmul.f64	d7, d7, d4
 8022696:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802269a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802269e:	d1b2      	bne.n	8022606 <_dtoa_r+0x59e>
 80226a0:	e7d3      	b.n	802264a <_dtoa_r+0x5e2>
 80226a2:	bf00      	nop
 80226a4:	08029620 	.word	0x08029620
 80226a8:	080295f8 	.word	0x080295f8
 80226ac:	9908      	ldr	r1, [sp, #32]
 80226ae:	2900      	cmp	r1, #0
 80226b0:	f000 80d1 	beq.w	8022856 <_dtoa_r+0x7ee>
 80226b4:	9907      	ldr	r1, [sp, #28]
 80226b6:	2901      	cmp	r1, #1
 80226b8:	f300 80b4 	bgt.w	8022824 <_dtoa_r+0x7bc>
 80226bc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80226be:	2900      	cmp	r1, #0
 80226c0:	f000 80ac 	beq.w	802281c <_dtoa_r+0x7b4>
 80226c4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80226c8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80226cc:	461c      	mov	r4, r3
 80226ce:	930a      	str	r3, [sp, #40]	; 0x28
 80226d0:	9b05      	ldr	r3, [sp, #20]
 80226d2:	4413      	add	r3, r2
 80226d4:	9305      	str	r3, [sp, #20]
 80226d6:	9b06      	ldr	r3, [sp, #24]
 80226d8:	2101      	movs	r1, #1
 80226da:	4413      	add	r3, r2
 80226dc:	4630      	mov	r0, r6
 80226de:	9306      	str	r3, [sp, #24]
 80226e0:	f001 f952 	bl	8023988 <__i2b>
 80226e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80226e6:	4607      	mov	r7, r0
 80226e8:	f1b8 0f00 	cmp.w	r8, #0
 80226ec:	dd0d      	ble.n	802270a <_dtoa_r+0x6a2>
 80226ee:	9a06      	ldr	r2, [sp, #24]
 80226f0:	2a00      	cmp	r2, #0
 80226f2:	dd0a      	ble.n	802270a <_dtoa_r+0x6a2>
 80226f4:	4542      	cmp	r2, r8
 80226f6:	9905      	ldr	r1, [sp, #20]
 80226f8:	bfa8      	it	ge
 80226fa:	4642      	movge	r2, r8
 80226fc:	1a89      	subs	r1, r1, r2
 80226fe:	9105      	str	r1, [sp, #20]
 8022700:	9906      	ldr	r1, [sp, #24]
 8022702:	eba8 0802 	sub.w	r8, r8, r2
 8022706:	1a8a      	subs	r2, r1, r2
 8022708:	9206      	str	r2, [sp, #24]
 802270a:	b303      	cbz	r3, 802274e <_dtoa_r+0x6e6>
 802270c:	9a08      	ldr	r2, [sp, #32]
 802270e:	2a00      	cmp	r2, #0
 8022710:	f000 80a6 	beq.w	8022860 <_dtoa_r+0x7f8>
 8022714:	2c00      	cmp	r4, #0
 8022716:	dd13      	ble.n	8022740 <_dtoa_r+0x6d8>
 8022718:	4639      	mov	r1, r7
 802271a:	4622      	mov	r2, r4
 802271c:	4630      	mov	r0, r6
 802271e:	930c      	str	r3, [sp, #48]	; 0x30
 8022720:	f001 f9ee 	bl	8023b00 <__pow5mult>
 8022724:	462a      	mov	r2, r5
 8022726:	4601      	mov	r1, r0
 8022728:	4607      	mov	r7, r0
 802272a:	4630      	mov	r0, r6
 802272c:	f001 f942 	bl	80239b4 <__multiply>
 8022730:	4629      	mov	r1, r5
 8022732:	900a      	str	r0, [sp, #40]	; 0x28
 8022734:	4630      	mov	r0, r6
 8022736:	f001 f821 	bl	802377c <_Bfree>
 802273a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802273c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802273e:	4615      	mov	r5, r2
 8022740:	1b1a      	subs	r2, r3, r4
 8022742:	d004      	beq.n	802274e <_dtoa_r+0x6e6>
 8022744:	4629      	mov	r1, r5
 8022746:	4630      	mov	r0, r6
 8022748:	f001 f9da 	bl	8023b00 <__pow5mult>
 802274c:	4605      	mov	r5, r0
 802274e:	2101      	movs	r1, #1
 8022750:	4630      	mov	r0, r6
 8022752:	f001 f919 	bl	8023988 <__i2b>
 8022756:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022758:	2b00      	cmp	r3, #0
 802275a:	4604      	mov	r4, r0
 802275c:	f340 8082 	ble.w	8022864 <_dtoa_r+0x7fc>
 8022760:	461a      	mov	r2, r3
 8022762:	4601      	mov	r1, r0
 8022764:	4630      	mov	r0, r6
 8022766:	f001 f9cb 	bl	8023b00 <__pow5mult>
 802276a:	9b07      	ldr	r3, [sp, #28]
 802276c:	2b01      	cmp	r3, #1
 802276e:	4604      	mov	r4, r0
 8022770:	dd7b      	ble.n	802286a <_dtoa_r+0x802>
 8022772:	2300      	movs	r3, #0
 8022774:	930a      	str	r3, [sp, #40]	; 0x28
 8022776:	6922      	ldr	r2, [r4, #16]
 8022778:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 802277c:	6910      	ldr	r0, [r2, #16]
 802277e:	f001 f8b3 	bl	80238e8 <__hi0bits>
 8022782:	f1c0 0020 	rsb	r0, r0, #32
 8022786:	9b06      	ldr	r3, [sp, #24]
 8022788:	4418      	add	r0, r3
 802278a:	f010 001f 	ands.w	r0, r0, #31
 802278e:	f000 808d 	beq.w	80228ac <_dtoa_r+0x844>
 8022792:	f1c0 0220 	rsb	r2, r0, #32
 8022796:	2a04      	cmp	r2, #4
 8022798:	f340 8086 	ble.w	80228a8 <_dtoa_r+0x840>
 802279c:	f1c0 001c 	rsb	r0, r0, #28
 80227a0:	9b05      	ldr	r3, [sp, #20]
 80227a2:	4403      	add	r3, r0
 80227a4:	9305      	str	r3, [sp, #20]
 80227a6:	9b06      	ldr	r3, [sp, #24]
 80227a8:	4403      	add	r3, r0
 80227aa:	4480      	add	r8, r0
 80227ac:	9306      	str	r3, [sp, #24]
 80227ae:	9b05      	ldr	r3, [sp, #20]
 80227b0:	2b00      	cmp	r3, #0
 80227b2:	dd05      	ble.n	80227c0 <_dtoa_r+0x758>
 80227b4:	4629      	mov	r1, r5
 80227b6:	461a      	mov	r2, r3
 80227b8:	4630      	mov	r0, r6
 80227ba:	f001 f9fb 	bl	8023bb4 <__lshift>
 80227be:	4605      	mov	r5, r0
 80227c0:	9b06      	ldr	r3, [sp, #24]
 80227c2:	2b00      	cmp	r3, #0
 80227c4:	dd05      	ble.n	80227d2 <_dtoa_r+0x76a>
 80227c6:	4621      	mov	r1, r4
 80227c8:	461a      	mov	r2, r3
 80227ca:	4630      	mov	r0, r6
 80227cc:	f001 f9f2 	bl	8023bb4 <__lshift>
 80227d0:	4604      	mov	r4, r0
 80227d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80227d4:	2b00      	cmp	r3, #0
 80227d6:	d06b      	beq.n	80228b0 <_dtoa_r+0x848>
 80227d8:	4621      	mov	r1, r4
 80227da:	4628      	mov	r0, r5
 80227dc:	f001 fa56 	bl	8023c8c <__mcmp>
 80227e0:	2800      	cmp	r0, #0
 80227e2:	da65      	bge.n	80228b0 <_dtoa_r+0x848>
 80227e4:	2300      	movs	r3, #0
 80227e6:	4629      	mov	r1, r5
 80227e8:	220a      	movs	r2, #10
 80227ea:	4630      	mov	r0, r6
 80227ec:	f000 ffe8 	bl	80237c0 <__multadd>
 80227f0:	9b08      	ldr	r3, [sp, #32]
 80227f2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80227f6:	4605      	mov	r5, r0
 80227f8:	2b00      	cmp	r3, #0
 80227fa:	f000 8192 	beq.w	8022b22 <_dtoa_r+0xaba>
 80227fe:	4639      	mov	r1, r7
 8022800:	2300      	movs	r3, #0
 8022802:	220a      	movs	r2, #10
 8022804:	4630      	mov	r0, r6
 8022806:	f000 ffdb 	bl	80237c0 <__multadd>
 802280a:	f1ba 0f00 	cmp.w	sl, #0
 802280e:	4607      	mov	r7, r0
 8022810:	f300 808e 	bgt.w	8022930 <_dtoa_r+0x8c8>
 8022814:	9b07      	ldr	r3, [sp, #28]
 8022816:	2b02      	cmp	r3, #2
 8022818:	dc51      	bgt.n	80228be <_dtoa_r+0x856>
 802281a:	e089      	b.n	8022930 <_dtoa_r+0x8c8>
 802281c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802281e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8022822:	e751      	b.n	80226c8 <_dtoa_r+0x660>
 8022824:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8022828:	42a3      	cmp	r3, r4
 802282a:	bfbf      	itttt	lt
 802282c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 802282e:	1ae3      	sublt	r3, r4, r3
 8022830:	18d2      	addlt	r2, r2, r3
 8022832:	4613      	movlt	r3, r2
 8022834:	bfb7      	itett	lt
 8022836:	930e      	strlt	r3, [sp, #56]	; 0x38
 8022838:	1b1c      	subge	r4, r3, r4
 802283a:	4623      	movlt	r3, r4
 802283c:	2400      	movlt	r4, #0
 802283e:	f1b9 0f00 	cmp.w	r9, #0
 8022842:	bfb5      	itete	lt
 8022844:	9a05      	ldrlt	r2, [sp, #20]
 8022846:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 802284a:	eba2 0809 	sublt.w	r8, r2, r9
 802284e:	464a      	movge	r2, r9
 8022850:	bfb8      	it	lt
 8022852:	2200      	movlt	r2, #0
 8022854:	e73b      	b.n	80226ce <_dtoa_r+0x666>
 8022856:	f8dd 8014 	ldr.w	r8, [sp, #20]
 802285a:	9f08      	ldr	r7, [sp, #32]
 802285c:	461c      	mov	r4, r3
 802285e:	e743      	b.n	80226e8 <_dtoa_r+0x680>
 8022860:	461a      	mov	r2, r3
 8022862:	e76f      	b.n	8022744 <_dtoa_r+0x6dc>
 8022864:	9b07      	ldr	r3, [sp, #28]
 8022866:	2b01      	cmp	r3, #1
 8022868:	dc18      	bgt.n	802289c <_dtoa_r+0x834>
 802286a:	9b02      	ldr	r3, [sp, #8]
 802286c:	b9b3      	cbnz	r3, 802289c <_dtoa_r+0x834>
 802286e:	9b03      	ldr	r3, [sp, #12]
 8022870:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8022874:	b9a2      	cbnz	r2, 80228a0 <_dtoa_r+0x838>
 8022876:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 802287a:	0d12      	lsrs	r2, r2, #20
 802287c:	0512      	lsls	r2, r2, #20
 802287e:	b18a      	cbz	r2, 80228a4 <_dtoa_r+0x83c>
 8022880:	9b05      	ldr	r3, [sp, #20]
 8022882:	3301      	adds	r3, #1
 8022884:	9305      	str	r3, [sp, #20]
 8022886:	9b06      	ldr	r3, [sp, #24]
 8022888:	3301      	adds	r3, #1
 802288a:	9306      	str	r3, [sp, #24]
 802288c:	2301      	movs	r3, #1
 802288e:	930a      	str	r3, [sp, #40]	; 0x28
 8022890:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022892:	2b00      	cmp	r3, #0
 8022894:	f47f af6f 	bne.w	8022776 <_dtoa_r+0x70e>
 8022898:	2001      	movs	r0, #1
 802289a:	e774      	b.n	8022786 <_dtoa_r+0x71e>
 802289c:	2300      	movs	r3, #0
 802289e:	e7f6      	b.n	802288e <_dtoa_r+0x826>
 80228a0:	9b02      	ldr	r3, [sp, #8]
 80228a2:	e7f4      	b.n	802288e <_dtoa_r+0x826>
 80228a4:	920a      	str	r2, [sp, #40]	; 0x28
 80228a6:	e7f3      	b.n	8022890 <_dtoa_r+0x828>
 80228a8:	d081      	beq.n	80227ae <_dtoa_r+0x746>
 80228aa:	4610      	mov	r0, r2
 80228ac:	301c      	adds	r0, #28
 80228ae:	e777      	b.n	80227a0 <_dtoa_r+0x738>
 80228b0:	f1b9 0f00 	cmp.w	r9, #0
 80228b4:	dc37      	bgt.n	8022926 <_dtoa_r+0x8be>
 80228b6:	9b07      	ldr	r3, [sp, #28]
 80228b8:	2b02      	cmp	r3, #2
 80228ba:	dd34      	ble.n	8022926 <_dtoa_r+0x8be>
 80228bc:	46ca      	mov	sl, r9
 80228be:	f1ba 0f00 	cmp.w	sl, #0
 80228c2:	d10d      	bne.n	80228e0 <_dtoa_r+0x878>
 80228c4:	4621      	mov	r1, r4
 80228c6:	4653      	mov	r3, sl
 80228c8:	2205      	movs	r2, #5
 80228ca:	4630      	mov	r0, r6
 80228cc:	f000 ff78 	bl	80237c0 <__multadd>
 80228d0:	4601      	mov	r1, r0
 80228d2:	4604      	mov	r4, r0
 80228d4:	4628      	mov	r0, r5
 80228d6:	f001 f9d9 	bl	8023c8c <__mcmp>
 80228da:	2800      	cmp	r0, #0
 80228dc:	f73f adde 	bgt.w	802249c <_dtoa_r+0x434>
 80228e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80228e2:	f8dd 8000 	ldr.w	r8, [sp]
 80228e6:	ea6f 0b03 	mvn.w	fp, r3
 80228ea:	f04f 0900 	mov.w	r9, #0
 80228ee:	4621      	mov	r1, r4
 80228f0:	4630      	mov	r0, r6
 80228f2:	f000 ff43 	bl	802377c <_Bfree>
 80228f6:	2f00      	cmp	r7, #0
 80228f8:	f43f aea7 	beq.w	802264a <_dtoa_r+0x5e2>
 80228fc:	f1b9 0f00 	cmp.w	r9, #0
 8022900:	d005      	beq.n	802290e <_dtoa_r+0x8a6>
 8022902:	45b9      	cmp	r9, r7
 8022904:	d003      	beq.n	802290e <_dtoa_r+0x8a6>
 8022906:	4649      	mov	r1, r9
 8022908:	4630      	mov	r0, r6
 802290a:	f000 ff37 	bl	802377c <_Bfree>
 802290e:	4639      	mov	r1, r7
 8022910:	4630      	mov	r0, r6
 8022912:	f000 ff33 	bl	802377c <_Bfree>
 8022916:	e698      	b.n	802264a <_dtoa_r+0x5e2>
 8022918:	2400      	movs	r4, #0
 802291a:	4627      	mov	r7, r4
 802291c:	e7e0      	b.n	80228e0 <_dtoa_r+0x878>
 802291e:	46bb      	mov	fp, r7
 8022920:	4604      	mov	r4, r0
 8022922:	4607      	mov	r7, r0
 8022924:	e5ba      	b.n	802249c <_dtoa_r+0x434>
 8022926:	9b08      	ldr	r3, [sp, #32]
 8022928:	46ca      	mov	sl, r9
 802292a:	2b00      	cmp	r3, #0
 802292c:	f000 8100 	beq.w	8022b30 <_dtoa_r+0xac8>
 8022930:	f1b8 0f00 	cmp.w	r8, #0
 8022934:	dd05      	ble.n	8022942 <_dtoa_r+0x8da>
 8022936:	4639      	mov	r1, r7
 8022938:	4642      	mov	r2, r8
 802293a:	4630      	mov	r0, r6
 802293c:	f001 f93a 	bl	8023bb4 <__lshift>
 8022940:	4607      	mov	r7, r0
 8022942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022944:	2b00      	cmp	r3, #0
 8022946:	d05d      	beq.n	8022a04 <_dtoa_r+0x99c>
 8022948:	6879      	ldr	r1, [r7, #4]
 802294a:	4630      	mov	r0, r6
 802294c:	f000 fed6 	bl	80236fc <_Balloc>
 8022950:	4680      	mov	r8, r0
 8022952:	b928      	cbnz	r0, 8022960 <_dtoa_r+0x8f8>
 8022954:	4b82      	ldr	r3, [pc, #520]	; (8022b60 <_dtoa_r+0xaf8>)
 8022956:	4602      	mov	r2, r0
 8022958:	f240 21ea 	movw	r1, #746	; 0x2ea
 802295c:	f7ff bb9a 	b.w	8022094 <_dtoa_r+0x2c>
 8022960:	693a      	ldr	r2, [r7, #16]
 8022962:	3202      	adds	r2, #2
 8022964:	0092      	lsls	r2, r2, #2
 8022966:	f107 010c 	add.w	r1, r7, #12
 802296a:	300c      	adds	r0, #12
 802296c:	f7fd fb5c 	bl	8020028 <memcpy>
 8022970:	2201      	movs	r2, #1
 8022972:	4641      	mov	r1, r8
 8022974:	4630      	mov	r0, r6
 8022976:	f001 f91d 	bl	8023bb4 <__lshift>
 802297a:	9b00      	ldr	r3, [sp, #0]
 802297c:	3301      	adds	r3, #1
 802297e:	9305      	str	r3, [sp, #20]
 8022980:	9b00      	ldr	r3, [sp, #0]
 8022982:	4453      	add	r3, sl
 8022984:	9309      	str	r3, [sp, #36]	; 0x24
 8022986:	9b02      	ldr	r3, [sp, #8]
 8022988:	f003 0301 	and.w	r3, r3, #1
 802298c:	46b9      	mov	r9, r7
 802298e:	9308      	str	r3, [sp, #32]
 8022990:	4607      	mov	r7, r0
 8022992:	9b05      	ldr	r3, [sp, #20]
 8022994:	4621      	mov	r1, r4
 8022996:	3b01      	subs	r3, #1
 8022998:	4628      	mov	r0, r5
 802299a:	9302      	str	r3, [sp, #8]
 802299c:	f7ff fad8 	bl	8021f50 <quorem>
 80229a0:	4603      	mov	r3, r0
 80229a2:	3330      	adds	r3, #48	; 0x30
 80229a4:	9006      	str	r0, [sp, #24]
 80229a6:	4649      	mov	r1, r9
 80229a8:	4628      	mov	r0, r5
 80229aa:	930a      	str	r3, [sp, #40]	; 0x28
 80229ac:	f001 f96e 	bl	8023c8c <__mcmp>
 80229b0:	463a      	mov	r2, r7
 80229b2:	4682      	mov	sl, r0
 80229b4:	4621      	mov	r1, r4
 80229b6:	4630      	mov	r0, r6
 80229b8:	f001 f984 	bl	8023cc4 <__mdiff>
 80229bc:	68c2      	ldr	r2, [r0, #12]
 80229be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80229c0:	4680      	mov	r8, r0
 80229c2:	bb0a      	cbnz	r2, 8022a08 <_dtoa_r+0x9a0>
 80229c4:	4601      	mov	r1, r0
 80229c6:	4628      	mov	r0, r5
 80229c8:	f001 f960 	bl	8023c8c <__mcmp>
 80229cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80229ce:	4602      	mov	r2, r0
 80229d0:	4641      	mov	r1, r8
 80229d2:	4630      	mov	r0, r6
 80229d4:	920e      	str	r2, [sp, #56]	; 0x38
 80229d6:	930a      	str	r3, [sp, #40]	; 0x28
 80229d8:	f000 fed0 	bl	802377c <_Bfree>
 80229dc:	9b07      	ldr	r3, [sp, #28]
 80229de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80229e0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80229e4:	ea43 0102 	orr.w	r1, r3, r2
 80229e8:	9b08      	ldr	r3, [sp, #32]
 80229ea:	430b      	orrs	r3, r1
 80229ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80229ee:	d10d      	bne.n	8022a0c <_dtoa_r+0x9a4>
 80229f0:	2b39      	cmp	r3, #57	; 0x39
 80229f2:	d029      	beq.n	8022a48 <_dtoa_r+0x9e0>
 80229f4:	f1ba 0f00 	cmp.w	sl, #0
 80229f8:	dd01      	ble.n	80229fe <_dtoa_r+0x996>
 80229fa:	9b06      	ldr	r3, [sp, #24]
 80229fc:	3331      	adds	r3, #49	; 0x31
 80229fe:	9a02      	ldr	r2, [sp, #8]
 8022a00:	7013      	strb	r3, [r2, #0]
 8022a02:	e774      	b.n	80228ee <_dtoa_r+0x886>
 8022a04:	4638      	mov	r0, r7
 8022a06:	e7b8      	b.n	802297a <_dtoa_r+0x912>
 8022a08:	2201      	movs	r2, #1
 8022a0a:	e7e1      	b.n	80229d0 <_dtoa_r+0x968>
 8022a0c:	f1ba 0f00 	cmp.w	sl, #0
 8022a10:	db06      	blt.n	8022a20 <_dtoa_r+0x9b8>
 8022a12:	9907      	ldr	r1, [sp, #28]
 8022a14:	ea41 0a0a 	orr.w	sl, r1, sl
 8022a18:	9908      	ldr	r1, [sp, #32]
 8022a1a:	ea5a 0101 	orrs.w	r1, sl, r1
 8022a1e:	d120      	bne.n	8022a62 <_dtoa_r+0x9fa>
 8022a20:	2a00      	cmp	r2, #0
 8022a22:	ddec      	ble.n	80229fe <_dtoa_r+0x996>
 8022a24:	4629      	mov	r1, r5
 8022a26:	2201      	movs	r2, #1
 8022a28:	4630      	mov	r0, r6
 8022a2a:	9305      	str	r3, [sp, #20]
 8022a2c:	f001 f8c2 	bl	8023bb4 <__lshift>
 8022a30:	4621      	mov	r1, r4
 8022a32:	4605      	mov	r5, r0
 8022a34:	f001 f92a 	bl	8023c8c <__mcmp>
 8022a38:	2800      	cmp	r0, #0
 8022a3a:	9b05      	ldr	r3, [sp, #20]
 8022a3c:	dc02      	bgt.n	8022a44 <_dtoa_r+0x9dc>
 8022a3e:	d1de      	bne.n	80229fe <_dtoa_r+0x996>
 8022a40:	07da      	lsls	r2, r3, #31
 8022a42:	d5dc      	bpl.n	80229fe <_dtoa_r+0x996>
 8022a44:	2b39      	cmp	r3, #57	; 0x39
 8022a46:	d1d8      	bne.n	80229fa <_dtoa_r+0x992>
 8022a48:	9a02      	ldr	r2, [sp, #8]
 8022a4a:	2339      	movs	r3, #57	; 0x39
 8022a4c:	7013      	strb	r3, [r2, #0]
 8022a4e:	4643      	mov	r3, r8
 8022a50:	4698      	mov	r8, r3
 8022a52:	3b01      	subs	r3, #1
 8022a54:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8022a58:	2a39      	cmp	r2, #57	; 0x39
 8022a5a:	d051      	beq.n	8022b00 <_dtoa_r+0xa98>
 8022a5c:	3201      	adds	r2, #1
 8022a5e:	701a      	strb	r2, [r3, #0]
 8022a60:	e745      	b.n	80228ee <_dtoa_r+0x886>
 8022a62:	2a00      	cmp	r2, #0
 8022a64:	dd03      	ble.n	8022a6e <_dtoa_r+0xa06>
 8022a66:	2b39      	cmp	r3, #57	; 0x39
 8022a68:	d0ee      	beq.n	8022a48 <_dtoa_r+0x9e0>
 8022a6a:	3301      	adds	r3, #1
 8022a6c:	e7c7      	b.n	80229fe <_dtoa_r+0x996>
 8022a6e:	9a05      	ldr	r2, [sp, #20]
 8022a70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022a72:	f802 3c01 	strb.w	r3, [r2, #-1]
 8022a76:	428a      	cmp	r2, r1
 8022a78:	d02b      	beq.n	8022ad2 <_dtoa_r+0xa6a>
 8022a7a:	4629      	mov	r1, r5
 8022a7c:	2300      	movs	r3, #0
 8022a7e:	220a      	movs	r2, #10
 8022a80:	4630      	mov	r0, r6
 8022a82:	f000 fe9d 	bl	80237c0 <__multadd>
 8022a86:	45b9      	cmp	r9, r7
 8022a88:	4605      	mov	r5, r0
 8022a8a:	f04f 0300 	mov.w	r3, #0
 8022a8e:	f04f 020a 	mov.w	r2, #10
 8022a92:	4649      	mov	r1, r9
 8022a94:	4630      	mov	r0, r6
 8022a96:	d107      	bne.n	8022aa8 <_dtoa_r+0xa40>
 8022a98:	f000 fe92 	bl	80237c0 <__multadd>
 8022a9c:	4681      	mov	r9, r0
 8022a9e:	4607      	mov	r7, r0
 8022aa0:	9b05      	ldr	r3, [sp, #20]
 8022aa2:	3301      	adds	r3, #1
 8022aa4:	9305      	str	r3, [sp, #20]
 8022aa6:	e774      	b.n	8022992 <_dtoa_r+0x92a>
 8022aa8:	f000 fe8a 	bl	80237c0 <__multadd>
 8022aac:	4639      	mov	r1, r7
 8022aae:	4681      	mov	r9, r0
 8022ab0:	2300      	movs	r3, #0
 8022ab2:	220a      	movs	r2, #10
 8022ab4:	4630      	mov	r0, r6
 8022ab6:	f000 fe83 	bl	80237c0 <__multadd>
 8022aba:	4607      	mov	r7, r0
 8022abc:	e7f0      	b.n	8022aa0 <_dtoa_r+0xa38>
 8022abe:	f1ba 0f00 	cmp.w	sl, #0
 8022ac2:	9a00      	ldr	r2, [sp, #0]
 8022ac4:	bfcc      	ite	gt
 8022ac6:	46d0      	movgt	r8, sl
 8022ac8:	f04f 0801 	movle.w	r8, #1
 8022acc:	4490      	add	r8, r2
 8022ace:	f04f 0900 	mov.w	r9, #0
 8022ad2:	4629      	mov	r1, r5
 8022ad4:	2201      	movs	r2, #1
 8022ad6:	4630      	mov	r0, r6
 8022ad8:	9302      	str	r3, [sp, #8]
 8022ada:	f001 f86b 	bl	8023bb4 <__lshift>
 8022ade:	4621      	mov	r1, r4
 8022ae0:	4605      	mov	r5, r0
 8022ae2:	f001 f8d3 	bl	8023c8c <__mcmp>
 8022ae6:	2800      	cmp	r0, #0
 8022ae8:	dcb1      	bgt.n	8022a4e <_dtoa_r+0x9e6>
 8022aea:	d102      	bne.n	8022af2 <_dtoa_r+0xa8a>
 8022aec:	9b02      	ldr	r3, [sp, #8]
 8022aee:	07db      	lsls	r3, r3, #31
 8022af0:	d4ad      	bmi.n	8022a4e <_dtoa_r+0x9e6>
 8022af2:	4643      	mov	r3, r8
 8022af4:	4698      	mov	r8, r3
 8022af6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8022afa:	2a30      	cmp	r2, #48	; 0x30
 8022afc:	d0fa      	beq.n	8022af4 <_dtoa_r+0xa8c>
 8022afe:	e6f6      	b.n	80228ee <_dtoa_r+0x886>
 8022b00:	9a00      	ldr	r2, [sp, #0]
 8022b02:	429a      	cmp	r2, r3
 8022b04:	d1a4      	bne.n	8022a50 <_dtoa_r+0x9e8>
 8022b06:	f10b 0b01 	add.w	fp, fp, #1
 8022b0a:	2331      	movs	r3, #49	; 0x31
 8022b0c:	e778      	b.n	8022a00 <_dtoa_r+0x998>
 8022b0e:	4b15      	ldr	r3, [pc, #84]	; (8022b64 <_dtoa_r+0xafc>)
 8022b10:	f7ff bb12 	b.w	8022138 <_dtoa_r+0xd0>
 8022b14:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022b16:	2b00      	cmp	r3, #0
 8022b18:	f47f aaee 	bne.w	80220f8 <_dtoa_r+0x90>
 8022b1c:	4b12      	ldr	r3, [pc, #72]	; (8022b68 <_dtoa_r+0xb00>)
 8022b1e:	f7ff bb0b 	b.w	8022138 <_dtoa_r+0xd0>
 8022b22:	f1ba 0f00 	cmp.w	sl, #0
 8022b26:	dc03      	bgt.n	8022b30 <_dtoa_r+0xac8>
 8022b28:	9b07      	ldr	r3, [sp, #28]
 8022b2a:	2b02      	cmp	r3, #2
 8022b2c:	f73f aec7 	bgt.w	80228be <_dtoa_r+0x856>
 8022b30:	f8dd 8000 	ldr.w	r8, [sp]
 8022b34:	4621      	mov	r1, r4
 8022b36:	4628      	mov	r0, r5
 8022b38:	f7ff fa0a 	bl	8021f50 <quorem>
 8022b3c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8022b40:	f808 3b01 	strb.w	r3, [r8], #1
 8022b44:	9a00      	ldr	r2, [sp, #0]
 8022b46:	eba8 0202 	sub.w	r2, r8, r2
 8022b4a:	4592      	cmp	sl, r2
 8022b4c:	ddb7      	ble.n	8022abe <_dtoa_r+0xa56>
 8022b4e:	4629      	mov	r1, r5
 8022b50:	2300      	movs	r3, #0
 8022b52:	220a      	movs	r2, #10
 8022b54:	4630      	mov	r0, r6
 8022b56:	f000 fe33 	bl	80237c0 <__multadd>
 8022b5a:	4605      	mov	r5, r0
 8022b5c:	e7ea      	b.n	8022b34 <_dtoa_r+0xacc>
 8022b5e:	bf00      	nop
 8022b60:	080294a0 	.word	0x080294a0
 8022b64:	08029308 	.word	0x08029308
 8022b68:	08029434 	.word	0x08029434

08022b6c <__errno>:
 8022b6c:	4b01      	ldr	r3, [pc, #4]	; (8022b74 <__errno+0x8>)
 8022b6e:	6818      	ldr	r0, [r3, #0]
 8022b70:	4770      	bx	lr
 8022b72:	bf00      	nop
 8022b74:	24003450 	.word	0x24003450

08022b78 <__sflush_r>:
 8022b78:	898a      	ldrh	r2, [r1, #12]
 8022b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022b7e:	4605      	mov	r5, r0
 8022b80:	0710      	lsls	r0, r2, #28
 8022b82:	460c      	mov	r4, r1
 8022b84:	d458      	bmi.n	8022c38 <__sflush_r+0xc0>
 8022b86:	684b      	ldr	r3, [r1, #4]
 8022b88:	2b00      	cmp	r3, #0
 8022b8a:	dc05      	bgt.n	8022b98 <__sflush_r+0x20>
 8022b8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8022b8e:	2b00      	cmp	r3, #0
 8022b90:	dc02      	bgt.n	8022b98 <__sflush_r+0x20>
 8022b92:	2000      	movs	r0, #0
 8022b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022b98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022b9a:	2e00      	cmp	r6, #0
 8022b9c:	d0f9      	beq.n	8022b92 <__sflush_r+0x1a>
 8022b9e:	2300      	movs	r3, #0
 8022ba0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8022ba4:	682f      	ldr	r7, [r5, #0]
 8022ba6:	602b      	str	r3, [r5, #0]
 8022ba8:	d032      	beq.n	8022c10 <__sflush_r+0x98>
 8022baa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8022bac:	89a3      	ldrh	r3, [r4, #12]
 8022bae:	075a      	lsls	r2, r3, #29
 8022bb0:	d505      	bpl.n	8022bbe <__sflush_r+0x46>
 8022bb2:	6863      	ldr	r3, [r4, #4]
 8022bb4:	1ac0      	subs	r0, r0, r3
 8022bb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022bb8:	b10b      	cbz	r3, 8022bbe <__sflush_r+0x46>
 8022bba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022bbc:	1ac0      	subs	r0, r0, r3
 8022bbe:	2300      	movs	r3, #0
 8022bc0:	4602      	mov	r2, r0
 8022bc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022bc4:	6a21      	ldr	r1, [r4, #32]
 8022bc6:	4628      	mov	r0, r5
 8022bc8:	47b0      	blx	r6
 8022bca:	1c43      	adds	r3, r0, #1
 8022bcc:	89a3      	ldrh	r3, [r4, #12]
 8022bce:	d106      	bne.n	8022bde <__sflush_r+0x66>
 8022bd0:	6829      	ldr	r1, [r5, #0]
 8022bd2:	291d      	cmp	r1, #29
 8022bd4:	d82c      	bhi.n	8022c30 <__sflush_r+0xb8>
 8022bd6:	4a2a      	ldr	r2, [pc, #168]	; (8022c80 <__sflush_r+0x108>)
 8022bd8:	40ca      	lsrs	r2, r1
 8022bda:	07d6      	lsls	r6, r2, #31
 8022bdc:	d528      	bpl.n	8022c30 <__sflush_r+0xb8>
 8022bde:	2200      	movs	r2, #0
 8022be0:	6062      	str	r2, [r4, #4]
 8022be2:	04d9      	lsls	r1, r3, #19
 8022be4:	6922      	ldr	r2, [r4, #16]
 8022be6:	6022      	str	r2, [r4, #0]
 8022be8:	d504      	bpl.n	8022bf4 <__sflush_r+0x7c>
 8022bea:	1c42      	adds	r2, r0, #1
 8022bec:	d101      	bne.n	8022bf2 <__sflush_r+0x7a>
 8022bee:	682b      	ldr	r3, [r5, #0]
 8022bf0:	b903      	cbnz	r3, 8022bf4 <__sflush_r+0x7c>
 8022bf2:	6560      	str	r0, [r4, #84]	; 0x54
 8022bf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022bf6:	602f      	str	r7, [r5, #0]
 8022bf8:	2900      	cmp	r1, #0
 8022bfa:	d0ca      	beq.n	8022b92 <__sflush_r+0x1a>
 8022bfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022c00:	4299      	cmp	r1, r3
 8022c02:	d002      	beq.n	8022c0a <__sflush_r+0x92>
 8022c04:	4628      	mov	r0, r5
 8022c06:	f7fd fa3f 	bl	8020088 <_free_r>
 8022c0a:	2000      	movs	r0, #0
 8022c0c:	6360      	str	r0, [r4, #52]	; 0x34
 8022c0e:	e7c1      	b.n	8022b94 <__sflush_r+0x1c>
 8022c10:	6a21      	ldr	r1, [r4, #32]
 8022c12:	2301      	movs	r3, #1
 8022c14:	4628      	mov	r0, r5
 8022c16:	47b0      	blx	r6
 8022c18:	1c41      	adds	r1, r0, #1
 8022c1a:	d1c7      	bne.n	8022bac <__sflush_r+0x34>
 8022c1c:	682b      	ldr	r3, [r5, #0]
 8022c1e:	2b00      	cmp	r3, #0
 8022c20:	d0c4      	beq.n	8022bac <__sflush_r+0x34>
 8022c22:	2b1d      	cmp	r3, #29
 8022c24:	d001      	beq.n	8022c2a <__sflush_r+0xb2>
 8022c26:	2b16      	cmp	r3, #22
 8022c28:	d101      	bne.n	8022c2e <__sflush_r+0xb6>
 8022c2a:	602f      	str	r7, [r5, #0]
 8022c2c:	e7b1      	b.n	8022b92 <__sflush_r+0x1a>
 8022c2e:	89a3      	ldrh	r3, [r4, #12]
 8022c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022c34:	81a3      	strh	r3, [r4, #12]
 8022c36:	e7ad      	b.n	8022b94 <__sflush_r+0x1c>
 8022c38:	690f      	ldr	r7, [r1, #16]
 8022c3a:	2f00      	cmp	r7, #0
 8022c3c:	d0a9      	beq.n	8022b92 <__sflush_r+0x1a>
 8022c3e:	0793      	lsls	r3, r2, #30
 8022c40:	680e      	ldr	r6, [r1, #0]
 8022c42:	bf08      	it	eq
 8022c44:	694b      	ldreq	r3, [r1, #20]
 8022c46:	600f      	str	r7, [r1, #0]
 8022c48:	bf18      	it	ne
 8022c4a:	2300      	movne	r3, #0
 8022c4c:	eba6 0807 	sub.w	r8, r6, r7
 8022c50:	608b      	str	r3, [r1, #8]
 8022c52:	f1b8 0f00 	cmp.w	r8, #0
 8022c56:	dd9c      	ble.n	8022b92 <__sflush_r+0x1a>
 8022c58:	6a21      	ldr	r1, [r4, #32]
 8022c5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8022c5c:	4643      	mov	r3, r8
 8022c5e:	463a      	mov	r2, r7
 8022c60:	4628      	mov	r0, r5
 8022c62:	47b0      	blx	r6
 8022c64:	2800      	cmp	r0, #0
 8022c66:	dc06      	bgt.n	8022c76 <__sflush_r+0xfe>
 8022c68:	89a3      	ldrh	r3, [r4, #12]
 8022c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022c6e:	81a3      	strh	r3, [r4, #12]
 8022c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022c74:	e78e      	b.n	8022b94 <__sflush_r+0x1c>
 8022c76:	4407      	add	r7, r0
 8022c78:	eba8 0800 	sub.w	r8, r8, r0
 8022c7c:	e7e9      	b.n	8022c52 <__sflush_r+0xda>
 8022c7e:	bf00      	nop
 8022c80:	20400001 	.word	0x20400001

08022c84 <_fflush_r>:
 8022c84:	b538      	push	{r3, r4, r5, lr}
 8022c86:	690b      	ldr	r3, [r1, #16]
 8022c88:	4605      	mov	r5, r0
 8022c8a:	460c      	mov	r4, r1
 8022c8c:	b913      	cbnz	r3, 8022c94 <_fflush_r+0x10>
 8022c8e:	2500      	movs	r5, #0
 8022c90:	4628      	mov	r0, r5
 8022c92:	bd38      	pop	{r3, r4, r5, pc}
 8022c94:	b118      	cbz	r0, 8022c9e <_fflush_r+0x1a>
 8022c96:	6983      	ldr	r3, [r0, #24]
 8022c98:	b90b      	cbnz	r3, 8022c9e <_fflush_r+0x1a>
 8022c9a:	f000 f887 	bl	8022dac <__sinit>
 8022c9e:	4b14      	ldr	r3, [pc, #80]	; (8022cf0 <_fflush_r+0x6c>)
 8022ca0:	429c      	cmp	r4, r3
 8022ca2:	d11b      	bne.n	8022cdc <_fflush_r+0x58>
 8022ca4:	686c      	ldr	r4, [r5, #4]
 8022ca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022caa:	2b00      	cmp	r3, #0
 8022cac:	d0ef      	beq.n	8022c8e <_fflush_r+0xa>
 8022cae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8022cb0:	07d0      	lsls	r0, r2, #31
 8022cb2:	d404      	bmi.n	8022cbe <_fflush_r+0x3a>
 8022cb4:	0599      	lsls	r1, r3, #22
 8022cb6:	d402      	bmi.n	8022cbe <_fflush_r+0x3a>
 8022cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022cba:	f000 fc9a 	bl	80235f2 <__retarget_lock_acquire_recursive>
 8022cbe:	4628      	mov	r0, r5
 8022cc0:	4621      	mov	r1, r4
 8022cc2:	f7ff ff59 	bl	8022b78 <__sflush_r>
 8022cc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022cc8:	07da      	lsls	r2, r3, #31
 8022cca:	4605      	mov	r5, r0
 8022ccc:	d4e0      	bmi.n	8022c90 <_fflush_r+0xc>
 8022cce:	89a3      	ldrh	r3, [r4, #12]
 8022cd0:	059b      	lsls	r3, r3, #22
 8022cd2:	d4dd      	bmi.n	8022c90 <_fflush_r+0xc>
 8022cd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022cd6:	f000 fc8d 	bl	80235f4 <__retarget_lock_release_recursive>
 8022cda:	e7d9      	b.n	8022c90 <_fflush_r+0xc>
 8022cdc:	4b05      	ldr	r3, [pc, #20]	; (8022cf4 <_fflush_r+0x70>)
 8022cde:	429c      	cmp	r4, r3
 8022ce0:	d101      	bne.n	8022ce6 <_fflush_r+0x62>
 8022ce2:	68ac      	ldr	r4, [r5, #8]
 8022ce4:	e7df      	b.n	8022ca6 <_fflush_r+0x22>
 8022ce6:	4b04      	ldr	r3, [pc, #16]	; (8022cf8 <_fflush_r+0x74>)
 8022ce8:	429c      	cmp	r4, r3
 8022cea:	bf08      	it	eq
 8022cec:	68ec      	ldreq	r4, [r5, #12]
 8022cee:	e7da      	b.n	8022ca6 <_fflush_r+0x22>
 8022cf0:	080294d4 	.word	0x080294d4
 8022cf4:	080294f4 	.word	0x080294f4
 8022cf8:	080294b4 	.word	0x080294b4

08022cfc <std>:
 8022cfc:	2300      	movs	r3, #0
 8022cfe:	b510      	push	{r4, lr}
 8022d00:	4604      	mov	r4, r0
 8022d02:	e9c0 3300 	strd	r3, r3, [r0]
 8022d06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8022d0a:	6083      	str	r3, [r0, #8]
 8022d0c:	8181      	strh	r1, [r0, #12]
 8022d0e:	6643      	str	r3, [r0, #100]	; 0x64
 8022d10:	81c2      	strh	r2, [r0, #14]
 8022d12:	6183      	str	r3, [r0, #24]
 8022d14:	4619      	mov	r1, r3
 8022d16:	2208      	movs	r2, #8
 8022d18:	305c      	adds	r0, #92	; 0x5c
 8022d1a:	f7fd f9ad 	bl	8020078 <memset>
 8022d1e:	4b05      	ldr	r3, [pc, #20]	; (8022d34 <std+0x38>)
 8022d20:	6263      	str	r3, [r4, #36]	; 0x24
 8022d22:	4b05      	ldr	r3, [pc, #20]	; (8022d38 <std+0x3c>)
 8022d24:	62a3      	str	r3, [r4, #40]	; 0x28
 8022d26:	4b05      	ldr	r3, [pc, #20]	; (8022d3c <std+0x40>)
 8022d28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8022d2a:	4b05      	ldr	r3, [pc, #20]	; (8022d40 <std+0x44>)
 8022d2c:	6224      	str	r4, [r4, #32]
 8022d2e:	6323      	str	r3, [r4, #48]	; 0x30
 8022d30:	bd10      	pop	{r4, pc}
 8022d32:	bf00      	nop
 8022d34:	08024611 	.word	0x08024611
 8022d38:	08024633 	.word	0x08024633
 8022d3c:	0802466b 	.word	0x0802466b
 8022d40:	0802468f 	.word	0x0802468f

08022d44 <_cleanup_r>:
 8022d44:	4901      	ldr	r1, [pc, #4]	; (8022d4c <_cleanup_r+0x8>)
 8022d46:	f000 b8c1 	b.w	8022ecc <_fwalk_reent>
 8022d4a:	bf00      	nop
 8022d4c:	08022c85 	.word	0x08022c85

08022d50 <__sfmoreglue>:
 8022d50:	b570      	push	{r4, r5, r6, lr}
 8022d52:	1e4a      	subs	r2, r1, #1
 8022d54:	2568      	movs	r5, #104	; 0x68
 8022d56:	4355      	muls	r5, r2
 8022d58:	460e      	mov	r6, r1
 8022d5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8022d5e:	f7fd f9e3 	bl	8020128 <_malloc_r>
 8022d62:	4604      	mov	r4, r0
 8022d64:	b140      	cbz	r0, 8022d78 <__sfmoreglue+0x28>
 8022d66:	2100      	movs	r1, #0
 8022d68:	e9c0 1600 	strd	r1, r6, [r0]
 8022d6c:	300c      	adds	r0, #12
 8022d6e:	60a0      	str	r0, [r4, #8]
 8022d70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8022d74:	f7fd f980 	bl	8020078 <memset>
 8022d78:	4620      	mov	r0, r4
 8022d7a:	bd70      	pop	{r4, r5, r6, pc}

08022d7c <__sfp_lock_acquire>:
 8022d7c:	4801      	ldr	r0, [pc, #4]	; (8022d84 <__sfp_lock_acquire+0x8>)
 8022d7e:	f000 bc38 	b.w	80235f2 <__retarget_lock_acquire_recursive>
 8022d82:	bf00      	nop
 8022d84:	2400cae0 	.word	0x2400cae0

08022d88 <__sfp_lock_release>:
 8022d88:	4801      	ldr	r0, [pc, #4]	; (8022d90 <__sfp_lock_release+0x8>)
 8022d8a:	f000 bc33 	b.w	80235f4 <__retarget_lock_release_recursive>
 8022d8e:	bf00      	nop
 8022d90:	2400cae0 	.word	0x2400cae0

08022d94 <__sinit_lock_acquire>:
 8022d94:	4801      	ldr	r0, [pc, #4]	; (8022d9c <__sinit_lock_acquire+0x8>)
 8022d96:	f000 bc2c 	b.w	80235f2 <__retarget_lock_acquire_recursive>
 8022d9a:	bf00      	nop
 8022d9c:	2400cadb 	.word	0x2400cadb

08022da0 <__sinit_lock_release>:
 8022da0:	4801      	ldr	r0, [pc, #4]	; (8022da8 <__sinit_lock_release+0x8>)
 8022da2:	f000 bc27 	b.w	80235f4 <__retarget_lock_release_recursive>
 8022da6:	bf00      	nop
 8022da8:	2400cadb 	.word	0x2400cadb

08022dac <__sinit>:
 8022dac:	b510      	push	{r4, lr}
 8022dae:	4604      	mov	r4, r0
 8022db0:	f7ff fff0 	bl	8022d94 <__sinit_lock_acquire>
 8022db4:	69a3      	ldr	r3, [r4, #24]
 8022db6:	b11b      	cbz	r3, 8022dc0 <__sinit+0x14>
 8022db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022dbc:	f7ff bff0 	b.w	8022da0 <__sinit_lock_release>
 8022dc0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8022dc4:	6523      	str	r3, [r4, #80]	; 0x50
 8022dc6:	4b13      	ldr	r3, [pc, #76]	; (8022e14 <__sinit+0x68>)
 8022dc8:	4a13      	ldr	r2, [pc, #76]	; (8022e18 <__sinit+0x6c>)
 8022dca:	681b      	ldr	r3, [r3, #0]
 8022dcc:	62a2      	str	r2, [r4, #40]	; 0x28
 8022dce:	42a3      	cmp	r3, r4
 8022dd0:	bf04      	itt	eq
 8022dd2:	2301      	moveq	r3, #1
 8022dd4:	61a3      	streq	r3, [r4, #24]
 8022dd6:	4620      	mov	r0, r4
 8022dd8:	f000 f820 	bl	8022e1c <__sfp>
 8022ddc:	6060      	str	r0, [r4, #4]
 8022dde:	4620      	mov	r0, r4
 8022de0:	f000 f81c 	bl	8022e1c <__sfp>
 8022de4:	60a0      	str	r0, [r4, #8]
 8022de6:	4620      	mov	r0, r4
 8022de8:	f000 f818 	bl	8022e1c <__sfp>
 8022dec:	2200      	movs	r2, #0
 8022dee:	60e0      	str	r0, [r4, #12]
 8022df0:	2104      	movs	r1, #4
 8022df2:	6860      	ldr	r0, [r4, #4]
 8022df4:	f7ff ff82 	bl	8022cfc <std>
 8022df8:	68a0      	ldr	r0, [r4, #8]
 8022dfa:	2201      	movs	r2, #1
 8022dfc:	2109      	movs	r1, #9
 8022dfe:	f7ff ff7d 	bl	8022cfc <std>
 8022e02:	68e0      	ldr	r0, [r4, #12]
 8022e04:	2202      	movs	r2, #2
 8022e06:	2112      	movs	r1, #18
 8022e08:	f7ff ff78 	bl	8022cfc <std>
 8022e0c:	2301      	movs	r3, #1
 8022e0e:	61a3      	str	r3, [r4, #24]
 8022e10:	e7d2      	b.n	8022db8 <__sinit+0xc>
 8022e12:	bf00      	nop
 8022e14:	080292f4 	.word	0x080292f4
 8022e18:	08022d45 	.word	0x08022d45

08022e1c <__sfp>:
 8022e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022e1e:	4607      	mov	r7, r0
 8022e20:	f7ff ffac 	bl	8022d7c <__sfp_lock_acquire>
 8022e24:	4b1e      	ldr	r3, [pc, #120]	; (8022ea0 <__sfp+0x84>)
 8022e26:	681e      	ldr	r6, [r3, #0]
 8022e28:	69b3      	ldr	r3, [r6, #24]
 8022e2a:	b913      	cbnz	r3, 8022e32 <__sfp+0x16>
 8022e2c:	4630      	mov	r0, r6
 8022e2e:	f7ff ffbd 	bl	8022dac <__sinit>
 8022e32:	3648      	adds	r6, #72	; 0x48
 8022e34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8022e38:	3b01      	subs	r3, #1
 8022e3a:	d503      	bpl.n	8022e44 <__sfp+0x28>
 8022e3c:	6833      	ldr	r3, [r6, #0]
 8022e3e:	b30b      	cbz	r3, 8022e84 <__sfp+0x68>
 8022e40:	6836      	ldr	r6, [r6, #0]
 8022e42:	e7f7      	b.n	8022e34 <__sfp+0x18>
 8022e44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8022e48:	b9d5      	cbnz	r5, 8022e80 <__sfp+0x64>
 8022e4a:	4b16      	ldr	r3, [pc, #88]	; (8022ea4 <__sfp+0x88>)
 8022e4c:	60e3      	str	r3, [r4, #12]
 8022e4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8022e52:	6665      	str	r5, [r4, #100]	; 0x64
 8022e54:	f000 fbcc 	bl	80235f0 <__retarget_lock_init_recursive>
 8022e58:	f7ff ff96 	bl	8022d88 <__sfp_lock_release>
 8022e5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8022e60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8022e64:	6025      	str	r5, [r4, #0]
 8022e66:	61a5      	str	r5, [r4, #24]
 8022e68:	2208      	movs	r2, #8
 8022e6a:	4629      	mov	r1, r5
 8022e6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8022e70:	f7fd f902 	bl	8020078 <memset>
 8022e74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8022e78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8022e7c:	4620      	mov	r0, r4
 8022e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022e80:	3468      	adds	r4, #104	; 0x68
 8022e82:	e7d9      	b.n	8022e38 <__sfp+0x1c>
 8022e84:	2104      	movs	r1, #4
 8022e86:	4638      	mov	r0, r7
 8022e88:	f7ff ff62 	bl	8022d50 <__sfmoreglue>
 8022e8c:	4604      	mov	r4, r0
 8022e8e:	6030      	str	r0, [r6, #0]
 8022e90:	2800      	cmp	r0, #0
 8022e92:	d1d5      	bne.n	8022e40 <__sfp+0x24>
 8022e94:	f7ff ff78 	bl	8022d88 <__sfp_lock_release>
 8022e98:	230c      	movs	r3, #12
 8022e9a:	603b      	str	r3, [r7, #0]
 8022e9c:	e7ee      	b.n	8022e7c <__sfp+0x60>
 8022e9e:	bf00      	nop
 8022ea0:	080292f4 	.word	0x080292f4
 8022ea4:	ffff0001 	.word	0xffff0001

08022ea8 <fiprintf>:
 8022ea8:	b40e      	push	{r1, r2, r3}
 8022eaa:	b503      	push	{r0, r1, lr}
 8022eac:	4601      	mov	r1, r0
 8022eae:	ab03      	add	r3, sp, #12
 8022eb0:	4805      	ldr	r0, [pc, #20]	; (8022ec8 <fiprintf+0x20>)
 8022eb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8022eb6:	6800      	ldr	r0, [r0, #0]
 8022eb8:	9301      	str	r3, [sp, #4]
 8022eba:	f001 fa6f 	bl	802439c <_vfiprintf_r>
 8022ebe:	b002      	add	sp, #8
 8022ec0:	f85d eb04 	ldr.w	lr, [sp], #4
 8022ec4:	b003      	add	sp, #12
 8022ec6:	4770      	bx	lr
 8022ec8:	24003450 	.word	0x24003450

08022ecc <_fwalk_reent>:
 8022ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022ed0:	4606      	mov	r6, r0
 8022ed2:	4688      	mov	r8, r1
 8022ed4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8022ed8:	2700      	movs	r7, #0
 8022eda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8022ede:	f1b9 0901 	subs.w	r9, r9, #1
 8022ee2:	d505      	bpl.n	8022ef0 <_fwalk_reent+0x24>
 8022ee4:	6824      	ldr	r4, [r4, #0]
 8022ee6:	2c00      	cmp	r4, #0
 8022ee8:	d1f7      	bne.n	8022eda <_fwalk_reent+0xe>
 8022eea:	4638      	mov	r0, r7
 8022eec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022ef0:	89ab      	ldrh	r3, [r5, #12]
 8022ef2:	2b01      	cmp	r3, #1
 8022ef4:	d907      	bls.n	8022f06 <_fwalk_reent+0x3a>
 8022ef6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8022efa:	3301      	adds	r3, #1
 8022efc:	d003      	beq.n	8022f06 <_fwalk_reent+0x3a>
 8022efe:	4629      	mov	r1, r5
 8022f00:	4630      	mov	r0, r6
 8022f02:	47c0      	blx	r8
 8022f04:	4307      	orrs	r7, r0
 8022f06:	3568      	adds	r5, #104	; 0x68
 8022f08:	e7e9      	b.n	8022ede <_fwalk_reent+0x12>

08022f0a <rshift>:
 8022f0a:	6903      	ldr	r3, [r0, #16]
 8022f0c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8022f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022f14:	ea4f 1261 	mov.w	r2, r1, asr #5
 8022f18:	f100 0414 	add.w	r4, r0, #20
 8022f1c:	dd45      	ble.n	8022faa <rshift+0xa0>
 8022f1e:	f011 011f 	ands.w	r1, r1, #31
 8022f22:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8022f26:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8022f2a:	d10c      	bne.n	8022f46 <rshift+0x3c>
 8022f2c:	f100 0710 	add.w	r7, r0, #16
 8022f30:	4629      	mov	r1, r5
 8022f32:	42b1      	cmp	r1, r6
 8022f34:	d334      	bcc.n	8022fa0 <rshift+0x96>
 8022f36:	1a9b      	subs	r3, r3, r2
 8022f38:	009b      	lsls	r3, r3, #2
 8022f3a:	1eea      	subs	r2, r5, #3
 8022f3c:	4296      	cmp	r6, r2
 8022f3e:	bf38      	it	cc
 8022f40:	2300      	movcc	r3, #0
 8022f42:	4423      	add	r3, r4
 8022f44:	e015      	b.n	8022f72 <rshift+0x68>
 8022f46:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8022f4a:	f1c1 0820 	rsb	r8, r1, #32
 8022f4e:	40cf      	lsrs	r7, r1
 8022f50:	f105 0e04 	add.w	lr, r5, #4
 8022f54:	46a1      	mov	r9, r4
 8022f56:	4576      	cmp	r6, lr
 8022f58:	46f4      	mov	ip, lr
 8022f5a:	d815      	bhi.n	8022f88 <rshift+0x7e>
 8022f5c:	1a9b      	subs	r3, r3, r2
 8022f5e:	009a      	lsls	r2, r3, #2
 8022f60:	3a04      	subs	r2, #4
 8022f62:	3501      	adds	r5, #1
 8022f64:	42ae      	cmp	r6, r5
 8022f66:	bf38      	it	cc
 8022f68:	2200      	movcc	r2, #0
 8022f6a:	18a3      	adds	r3, r4, r2
 8022f6c:	50a7      	str	r7, [r4, r2]
 8022f6e:	b107      	cbz	r7, 8022f72 <rshift+0x68>
 8022f70:	3304      	adds	r3, #4
 8022f72:	1b1a      	subs	r2, r3, r4
 8022f74:	42a3      	cmp	r3, r4
 8022f76:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8022f7a:	bf08      	it	eq
 8022f7c:	2300      	moveq	r3, #0
 8022f7e:	6102      	str	r2, [r0, #16]
 8022f80:	bf08      	it	eq
 8022f82:	6143      	streq	r3, [r0, #20]
 8022f84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022f88:	f8dc c000 	ldr.w	ip, [ip]
 8022f8c:	fa0c fc08 	lsl.w	ip, ip, r8
 8022f90:	ea4c 0707 	orr.w	r7, ip, r7
 8022f94:	f849 7b04 	str.w	r7, [r9], #4
 8022f98:	f85e 7b04 	ldr.w	r7, [lr], #4
 8022f9c:	40cf      	lsrs	r7, r1
 8022f9e:	e7da      	b.n	8022f56 <rshift+0x4c>
 8022fa0:	f851 cb04 	ldr.w	ip, [r1], #4
 8022fa4:	f847 cf04 	str.w	ip, [r7, #4]!
 8022fa8:	e7c3      	b.n	8022f32 <rshift+0x28>
 8022faa:	4623      	mov	r3, r4
 8022fac:	e7e1      	b.n	8022f72 <rshift+0x68>

08022fae <__hexdig_fun>:
 8022fae:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8022fb2:	2b09      	cmp	r3, #9
 8022fb4:	d802      	bhi.n	8022fbc <__hexdig_fun+0xe>
 8022fb6:	3820      	subs	r0, #32
 8022fb8:	b2c0      	uxtb	r0, r0
 8022fba:	4770      	bx	lr
 8022fbc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8022fc0:	2b05      	cmp	r3, #5
 8022fc2:	d801      	bhi.n	8022fc8 <__hexdig_fun+0x1a>
 8022fc4:	3847      	subs	r0, #71	; 0x47
 8022fc6:	e7f7      	b.n	8022fb8 <__hexdig_fun+0xa>
 8022fc8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8022fcc:	2b05      	cmp	r3, #5
 8022fce:	d801      	bhi.n	8022fd4 <__hexdig_fun+0x26>
 8022fd0:	3827      	subs	r0, #39	; 0x27
 8022fd2:	e7f1      	b.n	8022fb8 <__hexdig_fun+0xa>
 8022fd4:	2000      	movs	r0, #0
 8022fd6:	4770      	bx	lr

08022fd8 <__gethex>:
 8022fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022fdc:	ed2d 8b02 	vpush	{d8}
 8022fe0:	b089      	sub	sp, #36	; 0x24
 8022fe2:	ee08 0a10 	vmov	s16, r0
 8022fe6:	9304      	str	r3, [sp, #16]
 8022fe8:	4bbc      	ldr	r3, [pc, #752]	; (80232dc <__gethex+0x304>)
 8022fea:	681b      	ldr	r3, [r3, #0]
 8022fec:	9301      	str	r3, [sp, #4]
 8022fee:	4618      	mov	r0, r3
 8022ff0:	468b      	mov	fp, r1
 8022ff2:	4690      	mov	r8, r2
 8022ff4:	f7dd f974 	bl	80002e0 <strlen>
 8022ff8:	9b01      	ldr	r3, [sp, #4]
 8022ffa:	f8db 2000 	ldr.w	r2, [fp]
 8022ffe:	4403      	add	r3, r0
 8023000:	4682      	mov	sl, r0
 8023002:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8023006:	9305      	str	r3, [sp, #20]
 8023008:	1c93      	adds	r3, r2, #2
 802300a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 802300e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8023012:	32fe      	adds	r2, #254	; 0xfe
 8023014:	18d1      	adds	r1, r2, r3
 8023016:	461f      	mov	r7, r3
 8023018:	f813 0b01 	ldrb.w	r0, [r3], #1
 802301c:	9100      	str	r1, [sp, #0]
 802301e:	2830      	cmp	r0, #48	; 0x30
 8023020:	d0f8      	beq.n	8023014 <__gethex+0x3c>
 8023022:	f7ff ffc4 	bl	8022fae <__hexdig_fun>
 8023026:	4604      	mov	r4, r0
 8023028:	2800      	cmp	r0, #0
 802302a:	d13a      	bne.n	80230a2 <__gethex+0xca>
 802302c:	9901      	ldr	r1, [sp, #4]
 802302e:	4652      	mov	r2, sl
 8023030:	4638      	mov	r0, r7
 8023032:	f7fe f81f 	bl	8021074 <strncmp>
 8023036:	4605      	mov	r5, r0
 8023038:	2800      	cmp	r0, #0
 802303a:	d168      	bne.n	802310e <__gethex+0x136>
 802303c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8023040:	eb07 060a 	add.w	r6, r7, sl
 8023044:	f7ff ffb3 	bl	8022fae <__hexdig_fun>
 8023048:	2800      	cmp	r0, #0
 802304a:	d062      	beq.n	8023112 <__gethex+0x13a>
 802304c:	4633      	mov	r3, r6
 802304e:	7818      	ldrb	r0, [r3, #0]
 8023050:	2830      	cmp	r0, #48	; 0x30
 8023052:	461f      	mov	r7, r3
 8023054:	f103 0301 	add.w	r3, r3, #1
 8023058:	d0f9      	beq.n	802304e <__gethex+0x76>
 802305a:	f7ff ffa8 	bl	8022fae <__hexdig_fun>
 802305e:	2301      	movs	r3, #1
 8023060:	fab0 f480 	clz	r4, r0
 8023064:	0964      	lsrs	r4, r4, #5
 8023066:	4635      	mov	r5, r6
 8023068:	9300      	str	r3, [sp, #0]
 802306a:	463a      	mov	r2, r7
 802306c:	4616      	mov	r6, r2
 802306e:	3201      	adds	r2, #1
 8023070:	7830      	ldrb	r0, [r6, #0]
 8023072:	f7ff ff9c 	bl	8022fae <__hexdig_fun>
 8023076:	2800      	cmp	r0, #0
 8023078:	d1f8      	bne.n	802306c <__gethex+0x94>
 802307a:	9901      	ldr	r1, [sp, #4]
 802307c:	4652      	mov	r2, sl
 802307e:	4630      	mov	r0, r6
 8023080:	f7fd fff8 	bl	8021074 <strncmp>
 8023084:	b980      	cbnz	r0, 80230a8 <__gethex+0xd0>
 8023086:	b94d      	cbnz	r5, 802309c <__gethex+0xc4>
 8023088:	eb06 050a 	add.w	r5, r6, sl
 802308c:	462a      	mov	r2, r5
 802308e:	4616      	mov	r6, r2
 8023090:	3201      	adds	r2, #1
 8023092:	7830      	ldrb	r0, [r6, #0]
 8023094:	f7ff ff8b 	bl	8022fae <__hexdig_fun>
 8023098:	2800      	cmp	r0, #0
 802309a:	d1f8      	bne.n	802308e <__gethex+0xb6>
 802309c:	1bad      	subs	r5, r5, r6
 802309e:	00ad      	lsls	r5, r5, #2
 80230a0:	e004      	b.n	80230ac <__gethex+0xd4>
 80230a2:	2400      	movs	r4, #0
 80230a4:	4625      	mov	r5, r4
 80230a6:	e7e0      	b.n	802306a <__gethex+0x92>
 80230a8:	2d00      	cmp	r5, #0
 80230aa:	d1f7      	bne.n	802309c <__gethex+0xc4>
 80230ac:	7833      	ldrb	r3, [r6, #0]
 80230ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80230b2:	2b50      	cmp	r3, #80	; 0x50
 80230b4:	d13b      	bne.n	802312e <__gethex+0x156>
 80230b6:	7873      	ldrb	r3, [r6, #1]
 80230b8:	2b2b      	cmp	r3, #43	; 0x2b
 80230ba:	d02c      	beq.n	8023116 <__gethex+0x13e>
 80230bc:	2b2d      	cmp	r3, #45	; 0x2d
 80230be:	d02e      	beq.n	802311e <__gethex+0x146>
 80230c0:	1c71      	adds	r1, r6, #1
 80230c2:	f04f 0900 	mov.w	r9, #0
 80230c6:	7808      	ldrb	r0, [r1, #0]
 80230c8:	f7ff ff71 	bl	8022fae <__hexdig_fun>
 80230cc:	1e43      	subs	r3, r0, #1
 80230ce:	b2db      	uxtb	r3, r3
 80230d0:	2b18      	cmp	r3, #24
 80230d2:	d82c      	bhi.n	802312e <__gethex+0x156>
 80230d4:	f1a0 0210 	sub.w	r2, r0, #16
 80230d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80230dc:	f7ff ff67 	bl	8022fae <__hexdig_fun>
 80230e0:	1e43      	subs	r3, r0, #1
 80230e2:	b2db      	uxtb	r3, r3
 80230e4:	2b18      	cmp	r3, #24
 80230e6:	d91d      	bls.n	8023124 <__gethex+0x14c>
 80230e8:	f1b9 0f00 	cmp.w	r9, #0
 80230ec:	d000      	beq.n	80230f0 <__gethex+0x118>
 80230ee:	4252      	negs	r2, r2
 80230f0:	4415      	add	r5, r2
 80230f2:	f8cb 1000 	str.w	r1, [fp]
 80230f6:	b1e4      	cbz	r4, 8023132 <__gethex+0x15a>
 80230f8:	9b00      	ldr	r3, [sp, #0]
 80230fa:	2b00      	cmp	r3, #0
 80230fc:	bf14      	ite	ne
 80230fe:	2700      	movne	r7, #0
 8023100:	2706      	moveq	r7, #6
 8023102:	4638      	mov	r0, r7
 8023104:	b009      	add	sp, #36	; 0x24
 8023106:	ecbd 8b02 	vpop	{d8}
 802310a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802310e:	463e      	mov	r6, r7
 8023110:	4625      	mov	r5, r4
 8023112:	2401      	movs	r4, #1
 8023114:	e7ca      	b.n	80230ac <__gethex+0xd4>
 8023116:	f04f 0900 	mov.w	r9, #0
 802311a:	1cb1      	adds	r1, r6, #2
 802311c:	e7d3      	b.n	80230c6 <__gethex+0xee>
 802311e:	f04f 0901 	mov.w	r9, #1
 8023122:	e7fa      	b.n	802311a <__gethex+0x142>
 8023124:	230a      	movs	r3, #10
 8023126:	fb03 0202 	mla	r2, r3, r2, r0
 802312a:	3a10      	subs	r2, #16
 802312c:	e7d4      	b.n	80230d8 <__gethex+0x100>
 802312e:	4631      	mov	r1, r6
 8023130:	e7df      	b.n	80230f2 <__gethex+0x11a>
 8023132:	1bf3      	subs	r3, r6, r7
 8023134:	3b01      	subs	r3, #1
 8023136:	4621      	mov	r1, r4
 8023138:	2b07      	cmp	r3, #7
 802313a:	dc0b      	bgt.n	8023154 <__gethex+0x17c>
 802313c:	ee18 0a10 	vmov	r0, s16
 8023140:	f000 fadc 	bl	80236fc <_Balloc>
 8023144:	4604      	mov	r4, r0
 8023146:	b940      	cbnz	r0, 802315a <__gethex+0x182>
 8023148:	4b65      	ldr	r3, [pc, #404]	; (80232e0 <__gethex+0x308>)
 802314a:	4602      	mov	r2, r0
 802314c:	21de      	movs	r1, #222	; 0xde
 802314e:	4865      	ldr	r0, [pc, #404]	; (80232e4 <__gethex+0x30c>)
 8023150:	f7fe fee0 	bl	8021f14 <__assert_func>
 8023154:	3101      	adds	r1, #1
 8023156:	105b      	asrs	r3, r3, #1
 8023158:	e7ee      	b.n	8023138 <__gethex+0x160>
 802315a:	f100 0914 	add.w	r9, r0, #20
 802315e:	f04f 0b00 	mov.w	fp, #0
 8023162:	f1ca 0301 	rsb	r3, sl, #1
 8023166:	f8cd 9008 	str.w	r9, [sp, #8]
 802316a:	f8cd b000 	str.w	fp, [sp]
 802316e:	9306      	str	r3, [sp, #24]
 8023170:	42b7      	cmp	r7, r6
 8023172:	d340      	bcc.n	80231f6 <__gethex+0x21e>
 8023174:	9802      	ldr	r0, [sp, #8]
 8023176:	9b00      	ldr	r3, [sp, #0]
 8023178:	f840 3b04 	str.w	r3, [r0], #4
 802317c:	eba0 0009 	sub.w	r0, r0, r9
 8023180:	1080      	asrs	r0, r0, #2
 8023182:	0146      	lsls	r6, r0, #5
 8023184:	6120      	str	r0, [r4, #16]
 8023186:	4618      	mov	r0, r3
 8023188:	f000 fbae 	bl	80238e8 <__hi0bits>
 802318c:	1a30      	subs	r0, r6, r0
 802318e:	f8d8 6000 	ldr.w	r6, [r8]
 8023192:	42b0      	cmp	r0, r6
 8023194:	dd63      	ble.n	802325e <__gethex+0x286>
 8023196:	1b87      	subs	r7, r0, r6
 8023198:	4639      	mov	r1, r7
 802319a:	4620      	mov	r0, r4
 802319c:	f000 ff49 	bl	8024032 <__any_on>
 80231a0:	4682      	mov	sl, r0
 80231a2:	b1a8      	cbz	r0, 80231d0 <__gethex+0x1f8>
 80231a4:	1e7b      	subs	r3, r7, #1
 80231a6:	1159      	asrs	r1, r3, #5
 80231a8:	f003 021f 	and.w	r2, r3, #31
 80231ac:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80231b0:	f04f 0a01 	mov.w	sl, #1
 80231b4:	fa0a f202 	lsl.w	r2, sl, r2
 80231b8:	420a      	tst	r2, r1
 80231ba:	d009      	beq.n	80231d0 <__gethex+0x1f8>
 80231bc:	4553      	cmp	r3, sl
 80231be:	dd05      	ble.n	80231cc <__gethex+0x1f4>
 80231c0:	1eb9      	subs	r1, r7, #2
 80231c2:	4620      	mov	r0, r4
 80231c4:	f000 ff35 	bl	8024032 <__any_on>
 80231c8:	2800      	cmp	r0, #0
 80231ca:	d145      	bne.n	8023258 <__gethex+0x280>
 80231cc:	f04f 0a02 	mov.w	sl, #2
 80231d0:	4639      	mov	r1, r7
 80231d2:	4620      	mov	r0, r4
 80231d4:	f7ff fe99 	bl	8022f0a <rshift>
 80231d8:	443d      	add	r5, r7
 80231da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80231de:	42ab      	cmp	r3, r5
 80231e0:	da4c      	bge.n	802327c <__gethex+0x2a4>
 80231e2:	ee18 0a10 	vmov	r0, s16
 80231e6:	4621      	mov	r1, r4
 80231e8:	f000 fac8 	bl	802377c <_Bfree>
 80231ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80231ee:	2300      	movs	r3, #0
 80231f0:	6013      	str	r3, [r2, #0]
 80231f2:	27a3      	movs	r7, #163	; 0xa3
 80231f4:	e785      	b.n	8023102 <__gethex+0x12a>
 80231f6:	1e73      	subs	r3, r6, #1
 80231f8:	9a05      	ldr	r2, [sp, #20]
 80231fa:	9303      	str	r3, [sp, #12]
 80231fc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8023200:	4293      	cmp	r3, r2
 8023202:	d019      	beq.n	8023238 <__gethex+0x260>
 8023204:	f1bb 0f20 	cmp.w	fp, #32
 8023208:	d107      	bne.n	802321a <__gethex+0x242>
 802320a:	9b02      	ldr	r3, [sp, #8]
 802320c:	9a00      	ldr	r2, [sp, #0]
 802320e:	f843 2b04 	str.w	r2, [r3], #4
 8023212:	9302      	str	r3, [sp, #8]
 8023214:	2300      	movs	r3, #0
 8023216:	9300      	str	r3, [sp, #0]
 8023218:	469b      	mov	fp, r3
 802321a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 802321e:	f7ff fec6 	bl	8022fae <__hexdig_fun>
 8023222:	9b00      	ldr	r3, [sp, #0]
 8023224:	f000 000f 	and.w	r0, r0, #15
 8023228:	fa00 f00b 	lsl.w	r0, r0, fp
 802322c:	4303      	orrs	r3, r0
 802322e:	9300      	str	r3, [sp, #0]
 8023230:	f10b 0b04 	add.w	fp, fp, #4
 8023234:	9b03      	ldr	r3, [sp, #12]
 8023236:	e00d      	b.n	8023254 <__gethex+0x27c>
 8023238:	9b03      	ldr	r3, [sp, #12]
 802323a:	9a06      	ldr	r2, [sp, #24]
 802323c:	4413      	add	r3, r2
 802323e:	42bb      	cmp	r3, r7
 8023240:	d3e0      	bcc.n	8023204 <__gethex+0x22c>
 8023242:	4618      	mov	r0, r3
 8023244:	9901      	ldr	r1, [sp, #4]
 8023246:	9307      	str	r3, [sp, #28]
 8023248:	4652      	mov	r2, sl
 802324a:	f7fd ff13 	bl	8021074 <strncmp>
 802324e:	9b07      	ldr	r3, [sp, #28]
 8023250:	2800      	cmp	r0, #0
 8023252:	d1d7      	bne.n	8023204 <__gethex+0x22c>
 8023254:	461e      	mov	r6, r3
 8023256:	e78b      	b.n	8023170 <__gethex+0x198>
 8023258:	f04f 0a03 	mov.w	sl, #3
 802325c:	e7b8      	b.n	80231d0 <__gethex+0x1f8>
 802325e:	da0a      	bge.n	8023276 <__gethex+0x29e>
 8023260:	1a37      	subs	r7, r6, r0
 8023262:	4621      	mov	r1, r4
 8023264:	ee18 0a10 	vmov	r0, s16
 8023268:	463a      	mov	r2, r7
 802326a:	f000 fca3 	bl	8023bb4 <__lshift>
 802326e:	1bed      	subs	r5, r5, r7
 8023270:	4604      	mov	r4, r0
 8023272:	f100 0914 	add.w	r9, r0, #20
 8023276:	f04f 0a00 	mov.w	sl, #0
 802327a:	e7ae      	b.n	80231da <__gethex+0x202>
 802327c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8023280:	42a8      	cmp	r0, r5
 8023282:	dd72      	ble.n	802336a <__gethex+0x392>
 8023284:	1b45      	subs	r5, r0, r5
 8023286:	42ae      	cmp	r6, r5
 8023288:	dc36      	bgt.n	80232f8 <__gethex+0x320>
 802328a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802328e:	2b02      	cmp	r3, #2
 8023290:	d02a      	beq.n	80232e8 <__gethex+0x310>
 8023292:	2b03      	cmp	r3, #3
 8023294:	d02c      	beq.n	80232f0 <__gethex+0x318>
 8023296:	2b01      	cmp	r3, #1
 8023298:	d115      	bne.n	80232c6 <__gethex+0x2ee>
 802329a:	42ae      	cmp	r6, r5
 802329c:	d113      	bne.n	80232c6 <__gethex+0x2ee>
 802329e:	2e01      	cmp	r6, #1
 80232a0:	d10b      	bne.n	80232ba <__gethex+0x2e2>
 80232a2:	9a04      	ldr	r2, [sp, #16]
 80232a4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80232a8:	6013      	str	r3, [r2, #0]
 80232aa:	2301      	movs	r3, #1
 80232ac:	6123      	str	r3, [r4, #16]
 80232ae:	f8c9 3000 	str.w	r3, [r9]
 80232b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80232b4:	2762      	movs	r7, #98	; 0x62
 80232b6:	601c      	str	r4, [r3, #0]
 80232b8:	e723      	b.n	8023102 <__gethex+0x12a>
 80232ba:	1e71      	subs	r1, r6, #1
 80232bc:	4620      	mov	r0, r4
 80232be:	f000 feb8 	bl	8024032 <__any_on>
 80232c2:	2800      	cmp	r0, #0
 80232c4:	d1ed      	bne.n	80232a2 <__gethex+0x2ca>
 80232c6:	ee18 0a10 	vmov	r0, s16
 80232ca:	4621      	mov	r1, r4
 80232cc:	f000 fa56 	bl	802377c <_Bfree>
 80232d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80232d2:	2300      	movs	r3, #0
 80232d4:	6013      	str	r3, [r2, #0]
 80232d6:	2750      	movs	r7, #80	; 0x50
 80232d8:	e713      	b.n	8023102 <__gethex+0x12a>
 80232da:	bf00      	nop
 80232dc:	08029580 	.word	0x08029580
 80232e0:	080294a0 	.word	0x080294a0
 80232e4:	08029514 	.word	0x08029514
 80232e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80232ea:	2b00      	cmp	r3, #0
 80232ec:	d1eb      	bne.n	80232c6 <__gethex+0x2ee>
 80232ee:	e7d8      	b.n	80232a2 <__gethex+0x2ca>
 80232f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80232f2:	2b00      	cmp	r3, #0
 80232f4:	d1d5      	bne.n	80232a2 <__gethex+0x2ca>
 80232f6:	e7e6      	b.n	80232c6 <__gethex+0x2ee>
 80232f8:	1e6f      	subs	r7, r5, #1
 80232fa:	f1ba 0f00 	cmp.w	sl, #0
 80232fe:	d131      	bne.n	8023364 <__gethex+0x38c>
 8023300:	b127      	cbz	r7, 802330c <__gethex+0x334>
 8023302:	4639      	mov	r1, r7
 8023304:	4620      	mov	r0, r4
 8023306:	f000 fe94 	bl	8024032 <__any_on>
 802330a:	4682      	mov	sl, r0
 802330c:	117b      	asrs	r3, r7, #5
 802330e:	2101      	movs	r1, #1
 8023310:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8023314:	f007 071f 	and.w	r7, r7, #31
 8023318:	fa01 f707 	lsl.w	r7, r1, r7
 802331c:	421f      	tst	r7, r3
 802331e:	4629      	mov	r1, r5
 8023320:	4620      	mov	r0, r4
 8023322:	bf18      	it	ne
 8023324:	f04a 0a02 	orrne.w	sl, sl, #2
 8023328:	1b76      	subs	r6, r6, r5
 802332a:	f7ff fdee 	bl	8022f0a <rshift>
 802332e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8023332:	2702      	movs	r7, #2
 8023334:	f1ba 0f00 	cmp.w	sl, #0
 8023338:	d048      	beq.n	80233cc <__gethex+0x3f4>
 802333a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802333e:	2b02      	cmp	r3, #2
 8023340:	d015      	beq.n	802336e <__gethex+0x396>
 8023342:	2b03      	cmp	r3, #3
 8023344:	d017      	beq.n	8023376 <__gethex+0x39e>
 8023346:	2b01      	cmp	r3, #1
 8023348:	d109      	bne.n	802335e <__gethex+0x386>
 802334a:	f01a 0f02 	tst.w	sl, #2
 802334e:	d006      	beq.n	802335e <__gethex+0x386>
 8023350:	f8d9 0000 	ldr.w	r0, [r9]
 8023354:	ea4a 0a00 	orr.w	sl, sl, r0
 8023358:	f01a 0f01 	tst.w	sl, #1
 802335c:	d10e      	bne.n	802337c <__gethex+0x3a4>
 802335e:	f047 0710 	orr.w	r7, r7, #16
 8023362:	e033      	b.n	80233cc <__gethex+0x3f4>
 8023364:	f04f 0a01 	mov.w	sl, #1
 8023368:	e7d0      	b.n	802330c <__gethex+0x334>
 802336a:	2701      	movs	r7, #1
 802336c:	e7e2      	b.n	8023334 <__gethex+0x35c>
 802336e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023370:	f1c3 0301 	rsb	r3, r3, #1
 8023374:	9315      	str	r3, [sp, #84]	; 0x54
 8023376:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023378:	2b00      	cmp	r3, #0
 802337a:	d0f0      	beq.n	802335e <__gethex+0x386>
 802337c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8023380:	f104 0314 	add.w	r3, r4, #20
 8023384:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8023388:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 802338c:	f04f 0c00 	mov.w	ip, #0
 8023390:	4618      	mov	r0, r3
 8023392:	f853 2b04 	ldr.w	r2, [r3], #4
 8023396:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 802339a:	d01c      	beq.n	80233d6 <__gethex+0x3fe>
 802339c:	3201      	adds	r2, #1
 802339e:	6002      	str	r2, [r0, #0]
 80233a0:	2f02      	cmp	r7, #2
 80233a2:	f104 0314 	add.w	r3, r4, #20
 80233a6:	d13f      	bne.n	8023428 <__gethex+0x450>
 80233a8:	f8d8 2000 	ldr.w	r2, [r8]
 80233ac:	3a01      	subs	r2, #1
 80233ae:	42b2      	cmp	r2, r6
 80233b0:	d10a      	bne.n	80233c8 <__gethex+0x3f0>
 80233b2:	1171      	asrs	r1, r6, #5
 80233b4:	2201      	movs	r2, #1
 80233b6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80233ba:	f006 061f 	and.w	r6, r6, #31
 80233be:	fa02 f606 	lsl.w	r6, r2, r6
 80233c2:	421e      	tst	r6, r3
 80233c4:	bf18      	it	ne
 80233c6:	4617      	movne	r7, r2
 80233c8:	f047 0720 	orr.w	r7, r7, #32
 80233cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80233ce:	601c      	str	r4, [r3, #0]
 80233d0:	9b04      	ldr	r3, [sp, #16]
 80233d2:	601d      	str	r5, [r3, #0]
 80233d4:	e695      	b.n	8023102 <__gethex+0x12a>
 80233d6:	4299      	cmp	r1, r3
 80233d8:	f843 cc04 	str.w	ip, [r3, #-4]
 80233dc:	d8d8      	bhi.n	8023390 <__gethex+0x3b8>
 80233de:	68a3      	ldr	r3, [r4, #8]
 80233e0:	459b      	cmp	fp, r3
 80233e2:	db19      	blt.n	8023418 <__gethex+0x440>
 80233e4:	6861      	ldr	r1, [r4, #4]
 80233e6:	ee18 0a10 	vmov	r0, s16
 80233ea:	3101      	adds	r1, #1
 80233ec:	f000 f986 	bl	80236fc <_Balloc>
 80233f0:	4681      	mov	r9, r0
 80233f2:	b918      	cbnz	r0, 80233fc <__gethex+0x424>
 80233f4:	4b1a      	ldr	r3, [pc, #104]	; (8023460 <__gethex+0x488>)
 80233f6:	4602      	mov	r2, r0
 80233f8:	2184      	movs	r1, #132	; 0x84
 80233fa:	e6a8      	b.n	802314e <__gethex+0x176>
 80233fc:	6922      	ldr	r2, [r4, #16]
 80233fe:	3202      	adds	r2, #2
 8023400:	f104 010c 	add.w	r1, r4, #12
 8023404:	0092      	lsls	r2, r2, #2
 8023406:	300c      	adds	r0, #12
 8023408:	f7fc fe0e 	bl	8020028 <memcpy>
 802340c:	4621      	mov	r1, r4
 802340e:	ee18 0a10 	vmov	r0, s16
 8023412:	f000 f9b3 	bl	802377c <_Bfree>
 8023416:	464c      	mov	r4, r9
 8023418:	6923      	ldr	r3, [r4, #16]
 802341a:	1c5a      	adds	r2, r3, #1
 802341c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8023420:	6122      	str	r2, [r4, #16]
 8023422:	2201      	movs	r2, #1
 8023424:	615a      	str	r2, [r3, #20]
 8023426:	e7bb      	b.n	80233a0 <__gethex+0x3c8>
 8023428:	6922      	ldr	r2, [r4, #16]
 802342a:	455a      	cmp	r2, fp
 802342c:	dd0b      	ble.n	8023446 <__gethex+0x46e>
 802342e:	2101      	movs	r1, #1
 8023430:	4620      	mov	r0, r4
 8023432:	f7ff fd6a 	bl	8022f0a <rshift>
 8023436:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802343a:	3501      	adds	r5, #1
 802343c:	42ab      	cmp	r3, r5
 802343e:	f6ff aed0 	blt.w	80231e2 <__gethex+0x20a>
 8023442:	2701      	movs	r7, #1
 8023444:	e7c0      	b.n	80233c8 <__gethex+0x3f0>
 8023446:	f016 061f 	ands.w	r6, r6, #31
 802344a:	d0fa      	beq.n	8023442 <__gethex+0x46a>
 802344c:	449a      	add	sl, r3
 802344e:	f1c6 0620 	rsb	r6, r6, #32
 8023452:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8023456:	f000 fa47 	bl	80238e8 <__hi0bits>
 802345a:	42b0      	cmp	r0, r6
 802345c:	dbe7      	blt.n	802342e <__gethex+0x456>
 802345e:	e7f0      	b.n	8023442 <__gethex+0x46a>
 8023460:	080294a0 	.word	0x080294a0

08023464 <L_shift>:
 8023464:	f1c2 0208 	rsb	r2, r2, #8
 8023468:	0092      	lsls	r2, r2, #2
 802346a:	b570      	push	{r4, r5, r6, lr}
 802346c:	f1c2 0620 	rsb	r6, r2, #32
 8023470:	6843      	ldr	r3, [r0, #4]
 8023472:	6804      	ldr	r4, [r0, #0]
 8023474:	fa03 f506 	lsl.w	r5, r3, r6
 8023478:	432c      	orrs	r4, r5
 802347a:	40d3      	lsrs	r3, r2
 802347c:	6004      	str	r4, [r0, #0]
 802347e:	f840 3f04 	str.w	r3, [r0, #4]!
 8023482:	4288      	cmp	r0, r1
 8023484:	d3f4      	bcc.n	8023470 <L_shift+0xc>
 8023486:	bd70      	pop	{r4, r5, r6, pc}

08023488 <__match>:
 8023488:	b530      	push	{r4, r5, lr}
 802348a:	6803      	ldr	r3, [r0, #0]
 802348c:	3301      	adds	r3, #1
 802348e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8023492:	b914      	cbnz	r4, 802349a <__match+0x12>
 8023494:	6003      	str	r3, [r0, #0]
 8023496:	2001      	movs	r0, #1
 8023498:	bd30      	pop	{r4, r5, pc}
 802349a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802349e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80234a2:	2d19      	cmp	r5, #25
 80234a4:	bf98      	it	ls
 80234a6:	3220      	addls	r2, #32
 80234a8:	42a2      	cmp	r2, r4
 80234aa:	d0f0      	beq.n	802348e <__match+0x6>
 80234ac:	2000      	movs	r0, #0
 80234ae:	e7f3      	b.n	8023498 <__match+0x10>

080234b0 <__hexnan>:
 80234b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80234b4:	680b      	ldr	r3, [r1, #0]
 80234b6:	6801      	ldr	r1, [r0, #0]
 80234b8:	115e      	asrs	r6, r3, #5
 80234ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80234be:	f013 031f 	ands.w	r3, r3, #31
 80234c2:	b087      	sub	sp, #28
 80234c4:	bf18      	it	ne
 80234c6:	3604      	addne	r6, #4
 80234c8:	2500      	movs	r5, #0
 80234ca:	1f37      	subs	r7, r6, #4
 80234cc:	4682      	mov	sl, r0
 80234ce:	4690      	mov	r8, r2
 80234d0:	9301      	str	r3, [sp, #4]
 80234d2:	f846 5c04 	str.w	r5, [r6, #-4]
 80234d6:	46b9      	mov	r9, r7
 80234d8:	463c      	mov	r4, r7
 80234da:	9502      	str	r5, [sp, #8]
 80234dc:	46ab      	mov	fp, r5
 80234de:	784a      	ldrb	r2, [r1, #1]
 80234e0:	1c4b      	adds	r3, r1, #1
 80234e2:	9303      	str	r3, [sp, #12]
 80234e4:	b342      	cbz	r2, 8023538 <__hexnan+0x88>
 80234e6:	4610      	mov	r0, r2
 80234e8:	9105      	str	r1, [sp, #20]
 80234ea:	9204      	str	r2, [sp, #16]
 80234ec:	f7ff fd5f 	bl	8022fae <__hexdig_fun>
 80234f0:	2800      	cmp	r0, #0
 80234f2:	d14f      	bne.n	8023594 <__hexnan+0xe4>
 80234f4:	9a04      	ldr	r2, [sp, #16]
 80234f6:	9905      	ldr	r1, [sp, #20]
 80234f8:	2a20      	cmp	r2, #32
 80234fa:	d818      	bhi.n	802352e <__hexnan+0x7e>
 80234fc:	9b02      	ldr	r3, [sp, #8]
 80234fe:	459b      	cmp	fp, r3
 8023500:	dd13      	ble.n	802352a <__hexnan+0x7a>
 8023502:	454c      	cmp	r4, r9
 8023504:	d206      	bcs.n	8023514 <__hexnan+0x64>
 8023506:	2d07      	cmp	r5, #7
 8023508:	dc04      	bgt.n	8023514 <__hexnan+0x64>
 802350a:	462a      	mov	r2, r5
 802350c:	4649      	mov	r1, r9
 802350e:	4620      	mov	r0, r4
 8023510:	f7ff ffa8 	bl	8023464 <L_shift>
 8023514:	4544      	cmp	r4, r8
 8023516:	d950      	bls.n	80235ba <__hexnan+0x10a>
 8023518:	2300      	movs	r3, #0
 802351a:	f1a4 0904 	sub.w	r9, r4, #4
 802351e:	f844 3c04 	str.w	r3, [r4, #-4]
 8023522:	f8cd b008 	str.w	fp, [sp, #8]
 8023526:	464c      	mov	r4, r9
 8023528:	461d      	mov	r5, r3
 802352a:	9903      	ldr	r1, [sp, #12]
 802352c:	e7d7      	b.n	80234de <__hexnan+0x2e>
 802352e:	2a29      	cmp	r2, #41	; 0x29
 8023530:	d156      	bne.n	80235e0 <__hexnan+0x130>
 8023532:	3102      	adds	r1, #2
 8023534:	f8ca 1000 	str.w	r1, [sl]
 8023538:	f1bb 0f00 	cmp.w	fp, #0
 802353c:	d050      	beq.n	80235e0 <__hexnan+0x130>
 802353e:	454c      	cmp	r4, r9
 8023540:	d206      	bcs.n	8023550 <__hexnan+0xa0>
 8023542:	2d07      	cmp	r5, #7
 8023544:	dc04      	bgt.n	8023550 <__hexnan+0xa0>
 8023546:	462a      	mov	r2, r5
 8023548:	4649      	mov	r1, r9
 802354a:	4620      	mov	r0, r4
 802354c:	f7ff ff8a 	bl	8023464 <L_shift>
 8023550:	4544      	cmp	r4, r8
 8023552:	d934      	bls.n	80235be <__hexnan+0x10e>
 8023554:	f1a8 0204 	sub.w	r2, r8, #4
 8023558:	4623      	mov	r3, r4
 802355a:	f853 1b04 	ldr.w	r1, [r3], #4
 802355e:	f842 1f04 	str.w	r1, [r2, #4]!
 8023562:	429f      	cmp	r7, r3
 8023564:	d2f9      	bcs.n	802355a <__hexnan+0xaa>
 8023566:	1b3b      	subs	r3, r7, r4
 8023568:	f023 0303 	bic.w	r3, r3, #3
 802356c:	3304      	adds	r3, #4
 802356e:	3401      	adds	r4, #1
 8023570:	3e03      	subs	r6, #3
 8023572:	42b4      	cmp	r4, r6
 8023574:	bf88      	it	hi
 8023576:	2304      	movhi	r3, #4
 8023578:	4443      	add	r3, r8
 802357a:	2200      	movs	r2, #0
 802357c:	f843 2b04 	str.w	r2, [r3], #4
 8023580:	429f      	cmp	r7, r3
 8023582:	d2fb      	bcs.n	802357c <__hexnan+0xcc>
 8023584:	683b      	ldr	r3, [r7, #0]
 8023586:	b91b      	cbnz	r3, 8023590 <__hexnan+0xe0>
 8023588:	4547      	cmp	r7, r8
 802358a:	d127      	bne.n	80235dc <__hexnan+0x12c>
 802358c:	2301      	movs	r3, #1
 802358e:	603b      	str	r3, [r7, #0]
 8023590:	2005      	movs	r0, #5
 8023592:	e026      	b.n	80235e2 <__hexnan+0x132>
 8023594:	3501      	adds	r5, #1
 8023596:	2d08      	cmp	r5, #8
 8023598:	f10b 0b01 	add.w	fp, fp, #1
 802359c:	dd06      	ble.n	80235ac <__hexnan+0xfc>
 802359e:	4544      	cmp	r4, r8
 80235a0:	d9c3      	bls.n	802352a <__hexnan+0x7a>
 80235a2:	2300      	movs	r3, #0
 80235a4:	f844 3c04 	str.w	r3, [r4, #-4]
 80235a8:	2501      	movs	r5, #1
 80235aa:	3c04      	subs	r4, #4
 80235ac:	6822      	ldr	r2, [r4, #0]
 80235ae:	f000 000f 	and.w	r0, r0, #15
 80235b2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80235b6:	6022      	str	r2, [r4, #0]
 80235b8:	e7b7      	b.n	802352a <__hexnan+0x7a>
 80235ba:	2508      	movs	r5, #8
 80235bc:	e7b5      	b.n	802352a <__hexnan+0x7a>
 80235be:	9b01      	ldr	r3, [sp, #4]
 80235c0:	2b00      	cmp	r3, #0
 80235c2:	d0df      	beq.n	8023584 <__hexnan+0xd4>
 80235c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80235c8:	f1c3 0320 	rsb	r3, r3, #32
 80235cc:	fa22 f303 	lsr.w	r3, r2, r3
 80235d0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80235d4:	401a      	ands	r2, r3
 80235d6:	f846 2c04 	str.w	r2, [r6, #-4]
 80235da:	e7d3      	b.n	8023584 <__hexnan+0xd4>
 80235dc:	3f04      	subs	r7, #4
 80235de:	e7d1      	b.n	8023584 <__hexnan+0xd4>
 80235e0:	2004      	movs	r0, #4
 80235e2:	b007      	add	sp, #28
 80235e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080235e8 <_localeconv_r>:
 80235e8:	4800      	ldr	r0, [pc, #0]	; (80235ec <_localeconv_r+0x4>)
 80235ea:	4770      	bx	lr
 80235ec:	240035a8 	.word	0x240035a8

080235f0 <__retarget_lock_init_recursive>:
 80235f0:	4770      	bx	lr

080235f2 <__retarget_lock_acquire_recursive>:
 80235f2:	4770      	bx	lr

080235f4 <__retarget_lock_release_recursive>:
 80235f4:	4770      	bx	lr

080235f6 <__swhatbuf_r>:
 80235f6:	b570      	push	{r4, r5, r6, lr}
 80235f8:	460e      	mov	r6, r1
 80235fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80235fe:	2900      	cmp	r1, #0
 8023600:	b096      	sub	sp, #88	; 0x58
 8023602:	4614      	mov	r4, r2
 8023604:	461d      	mov	r5, r3
 8023606:	da07      	bge.n	8023618 <__swhatbuf_r+0x22>
 8023608:	2300      	movs	r3, #0
 802360a:	602b      	str	r3, [r5, #0]
 802360c:	89b3      	ldrh	r3, [r6, #12]
 802360e:	061a      	lsls	r2, r3, #24
 8023610:	d410      	bmi.n	8023634 <__swhatbuf_r+0x3e>
 8023612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023616:	e00e      	b.n	8023636 <__swhatbuf_r+0x40>
 8023618:	466a      	mov	r2, sp
 802361a:	f001 f873 	bl	8024704 <_fstat_r>
 802361e:	2800      	cmp	r0, #0
 8023620:	dbf2      	blt.n	8023608 <__swhatbuf_r+0x12>
 8023622:	9a01      	ldr	r2, [sp, #4]
 8023624:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8023628:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802362c:	425a      	negs	r2, r3
 802362e:	415a      	adcs	r2, r3
 8023630:	602a      	str	r2, [r5, #0]
 8023632:	e7ee      	b.n	8023612 <__swhatbuf_r+0x1c>
 8023634:	2340      	movs	r3, #64	; 0x40
 8023636:	2000      	movs	r0, #0
 8023638:	6023      	str	r3, [r4, #0]
 802363a:	b016      	add	sp, #88	; 0x58
 802363c:	bd70      	pop	{r4, r5, r6, pc}
	...

08023640 <__smakebuf_r>:
 8023640:	898b      	ldrh	r3, [r1, #12]
 8023642:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8023644:	079d      	lsls	r5, r3, #30
 8023646:	4606      	mov	r6, r0
 8023648:	460c      	mov	r4, r1
 802364a:	d507      	bpl.n	802365c <__smakebuf_r+0x1c>
 802364c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8023650:	6023      	str	r3, [r4, #0]
 8023652:	6123      	str	r3, [r4, #16]
 8023654:	2301      	movs	r3, #1
 8023656:	6163      	str	r3, [r4, #20]
 8023658:	b002      	add	sp, #8
 802365a:	bd70      	pop	{r4, r5, r6, pc}
 802365c:	ab01      	add	r3, sp, #4
 802365e:	466a      	mov	r2, sp
 8023660:	f7ff ffc9 	bl	80235f6 <__swhatbuf_r>
 8023664:	9900      	ldr	r1, [sp, #0]
 8023666:	4605      	mov	r5, r0
 8023668:	4630      	mov	r0, r6
 802366a:	f7fc fd5d 	bl	8020128 <_malloc_r>
 802366e:	b948      	cbnz	r0, 8023684 <__smakebuf_r+0x44>
 8023670:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023674:	059a      	lsls	r2, r3, #22
 8023676:	d4ef      	bmi.n	8023658 <__smakebuf_r+0x18>
 8023678:	f023 0303 	bic.w	r3, r3, #3
 802367c:	f043 0302 	orr.w	r3, r3, #2
 8023680:	81a3      	strh	r3, [r4, #12]
 8023682:	e7e3      	b.n	802364c <__smakebuf_r+0xc>
 8023684:	4b0d      	ldr	r3, [pc, #52]	; (80236bc <__smakebuf_r+0x7c>)
 8023686:	62b3      	str	r3, [r6, #40]	; 0x28
 8023688:	89a3      	ldrh	r3, [r4, #12]
 802368a:	6020      	str	r0, [r4, #0]
 802368c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023690:	81a3      	strh	r3, [r4, #12]
 8023692:	9b00      	ldr	r3, [sp, #0]
 8023694:	6163      	str	r3, [r4, #20]
 8023696:	9b01      	ldr	r3, [sp, #4]
 8023698:	6120      	str	r0, [r4, #16]
 802369a:	b15b      	cbz	r3, 80236b4 <__smakebuf_r+0x74>
 802369c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80236a0:	4630      	mov	r0, r6
 80236a2:	f001 f841 	bl	8024728 <_isatty_r>
 80236a6:	b128      	cbz	r0, 80236b4 <__smakebuf_r+0x74>
 80236a8:	89a3      	ldrh	r3, [r4, #12]
 80236aa:	f023 0303 	bic.w	r3, r3, #3
 80236ae:	f043 0301 	orr.w	r3, r3, #1
 80236b2:	81a3      	strh	r3, [r4, #12]
 80236b4:	89a0      	ldrh	r0, [r4, #12]
 80236b6:	4305      	orrs	r5, r0
 80236b8:	81a5      	strh	r5, [r4, #12]
 80236ba:	e7cd      	b.n	8023658 <__smakebuf_r+0x18>
 80236bc:	08022d45 	.word	0x08022d45

080236c0 <__ascii_mbtowc>:
 80236c0:	b082      	sub	sp, #8
 80236c2:	b901      	cbnz	r1, 80236c6 <__ascii_mbtowc+0x6>
 80236c4:	a901      	add	r1, sp, #4
 80236c6:	b142      	cbz	r2, 80236da <__ascii_mbtowc+0x1a>
 80236c8:	b14b      	cbz	r3, 80236de <__ascii_mbtowc+0x1e>
 80236ca:	7813      	ldrb	r3, [r2, #0]
 80236cc:	600b      	str	r3, [r1, #0]
 80236ce:	7812      	ldrb	r2, [r2, #0]
 80236d0:	1e10      	subs	r0, r2, #0
 80236d2:	bf18      	it	ne
 80236d4:	2001      	movne	r0, #1
 80236d6:	b002      	add	sp, #8
 80236d8:	4770      	bx	lr
 80236da:	4610      	mov	r0, r2
 80236dc:	e7fb      	b.n	80236d6 <__ascii_mbtowc+0x16>
 80236de:	f06f 0001 	mvn.w	r0, #1
 80236e2:	e7f8      	b.n	80236d6 <__ascii_mbtowc+0x16>

080236e4 <__malloc_lock>:
 80236e4:	4801      	ldr	r0, [pc, #4]	; (80236ec <__malloc_lock+0x8>)
 80236e6:	f7ff bf84 	b.w	80235f2 <__retarget_lock_acquire_recursive>
 80236ea:	bf00      	nop
 80236ec:	2400cadc 	.word	0x2400cadc

080236f0 <__malloc_unlock>:
 80236f0:	4801      	ldr	r0, [pc, #4]	; (80236f8 <__malloc_unlock+0x8>)
 80236f2:	f7ff bf7f 	b.w	80235f4 <__retarget_lock_release_recursive>
 80236f6:	bf00      	nop
 80236f8:	2400cadc 	.word	0x2400cadc

080236fc <_Balloc>:
 80236fc:	b570      	push	{r4, r5, r6, lr}
 80236fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8023700:	4604      	mov	r4, r0
 8023702:	460d      	mov	r5, r1
 8023704:	b976      	cbnz	r6, 8023724 <_Balloc+0x28>
 8023706:	2010      	movs	r0, #16
 8023708:	f7fc fc78 	bl	801fffc <malloc>
 802370c:	4602      	mov	r2, r0
 802370e:	6260      	str	r0, [r4, #36]	; 0x24
 8023710:	b920      	cbnz	r0, 802371c <_Balloc+0x20>
 8023712:	4b18      	ldr	r3, [pc, #96]	; (8023774 <_Balloc+0x78>)
 8023714:	4818      	ldr	r0, [pc, #96]	; (8023778 <_Balloc+0x7c>)
 8023716:	2166      	movs	r1, #102	; 0x66
 8023718:	f7fe fbfc 	bl	8021f14 <__assert_func>
 802371c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8023720:	6006      	str	r6, [r0, #0]
 8023722:	60c6      	str	r6, [r0, #12]
 8023724:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8023726:	68f3      	ldr	r3, [r6, #12]
 8023728:	b183      	cbz	r3, 802374c <_Balloc+0x50>
 802372a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802372c:	68db      	ldr	r3, [r3, #12]
 802372e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8023732:	b9b8      	cbnz	r0, 8023764 <_Balloc+0x68>
 8023734:	2101      	movs	r1, #1
 8023736:	fa01 f605 	lsl.w	r6, r1, r5
 802373a:	1d72      	adds	r2, r6, #5
 802373c:	0092      	lsls	r2, r2, #2
 802373e:	4620      	mov	r0, r4
 8023740:	f000 fc98 	bl	8024074 <_calloc_r>
 8023744:	b160      	cbz	r0, 8023760 <_Balloc+0x64>
 8023746:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802374a:	e00e      	b.n	802376a <_Balloc+0x6e>
 802374c:	2221      	movs	r2, #33	; 0x21
 802374e:	2104      	movs	r1, #4
 8023750:	4620      	mov	r0, r4
 8023752:	f000 fc8f 	bl	8024074 <_calloc_r>
 8023756:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023758:	60f0      	str	r0, [r6, #12]
 802375a:	68db      	ldr	r3, [r3, #12]
 802375c:	2b00      	cmp	r3, #0
 802375e:	d1e4      	bne.n	802372a <_Balloc+0x2e>
 8023760:	2000      	movs	r0, #0
 8023762:	bd70      	pop	{r4, r5, r6, pc}
 8023764:	6802      	ldr	r2, [r0, #0]
 8023766:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802376a:	2300      	movs	r3, #0
 802376c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8023770:	e7f7      	b.n	8023762 <_Balloc+0x66>
 8023772:	bf00      	nop
 8023774:	08029331 	.word	0x08029331
 8023778:	08029594 	.word	0x08029594

0802377c <_Bfree>:
 802377c:	b570      	push	{r4, r5, r6, lr}
 802377e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8023780:	4605      	mov	r5, r0
 8023782:	460c      	mov	r4, r1
 8023784:	b976      	cbnz	r6, 80237a4 <_Bfree+0x28>
 8023786:	2010      	movs	r0, #16
 8023788:	f7fc fc38 	bl	801fffc <malloc>
 802378c:	4602      	mov	r2, r0
 802378e:	6268      	str	r0, [r5, #36]	; 0x24
 8023790:	b920      	cbnz	r0, 802379c <_Bfree+0x20>
 8023792:	4b09      	ldr	r3, [pc, #36]	; (80237b8 <_Bfree+0x3c>)
 8023794:	4809      	ldr	r0, [pc, #36]	; (80237bc <_Bfree+0x40>)
 8023796:	218a      	movs	r1, #138	; 0x8a
 8023798:	f7fe fbbc 	bl	8021f14 <__assert_func>
 802379c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80237a0:	6006      	str	r6, [r0, #0]
 80237a2:	60c6      	str	r6, [r0, #12]
 80237a4:	b13c      	cbz	r4, 80237b6 <_Bfree+0x3a>
 80237a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80237a8:	6862      	ldr	r2, [r4, #4]
 80237aa:	68db      	ldr	r3, [r3, #12]
 80237ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80237b0:	6021      	str	r1, [r4, #0]
 80237b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80237b6:	bd70      	pop	{r4, r5, r6, pc}
 80237b8:	08029331 	.word	0x08029331
 80237bc:	08029594 	.word	0x08029594

080237c0 <__multadd>:
 80237c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80237c4:	690e      	ldr	r6, [r1, #16]
 80237c6:	4607      	mov	r7, r0
 80237c8:	4698      	mov	r8, r3
 80237ca:	460c      	mov	r4, r1
 80237cc:	f101 0014 	add.w	r0, r1, #20
 80237d0:	2300      	movs	r3, #0
 80237d2:	6805      	ldr	r5, [r0, #0]
 80237d4:	b2a9      	uxth	r1, r5
 80237d6:	fb02 8101 	mla	r1, r2, r1, r8
 80237da:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80237de:	0c2d      	lsrs	r5, r5, #16
 80237e0:	fb02 c505 	mla	r5, r2, r5, ip
 80237e4:	b289      	uxth	r1, r1
 80237e6:	3301      	adds	r3, #1
 80237e8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80237ec:	429e      	cmp	r6, r3
 80237ee:	f840 1b04 	str.w	r1, [r0], #4
 80237f2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80237f6:	dcec      	bgt.n	80237d2 <__multadd+0x12>
 80237f8:	f1b8 0f00 	cmp.w	r8, #0
 80237fc:	d022      	beq.n	8023844 <__multadd+0x84>
 80237fe:	68a3      	ldr	r3, [r4, #8]
 8023800:	42b3      	cmp	r3, r6
 8023802:	dc19      	bgt.n	8023838 <__multadd+0x78>
 8023804:	6861      	ldr	r1, [r4, #4]
 8023806:	4638      	mov	r0, r7
 8023808:	3101      	adds	r1, #1
 802380a:	f7ff ff77 	bl	80236fc <_Balloc>
 802380e:	4605      	mov	r5, r0
 8023810:	b928      	cbnz	r0, 802381e <__multadd+0x5e>
 8023812:	4602      	mov	r2, r0
 8023814:	4b0d      	ldr	r3, [pc, #52]	; (802384c <__multadd+0x8c>)
 8023816:	480e      	ldr	r0, [pc, #56]	; (8023850 <__multadd+0x90>)
 8023818:	21b5      	movs	r1, #181	; 0xb5
 802381a:	f7fe fb7b 	bl	8021f14 <__assert_func>
 802381e:	6922      	ldr	r2, [r4, #16]
 8023820:	3202      	adds	r2, #2
 8023822:	f104 010c 	add.w	r1, r4, #12
 8023826:	0092      	lsls	r2, r2, #2
 8023828:	300c      	adds	r0, #12
 802382a:	f7fc fbfd 	bl	8020028 <memcpy>
 802382e:	4621      	mov	r1, r4
 8023830:	4638      	mov	r0, r7
 8023832:	f7ff ffa3 	bl	802377c <_Bfree>
 8023836:	462c      	mov	r4, r5
 8023838:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 802383c:	3601      	adds	r6, #1
 802383e:	f8c3 8014 	str.w	r8, [r3, #20]
 8023842:	6126      	str	r6, [r4, #16]
 8023844:	4620      	mov	r0, r4
 8023846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802384a:	bf00      	nop
 802384c:	080294a0 	.word	0x080294a0
 8023850:	08029594 	.word	0x08029594

08023854 <__s2b>:
 8023854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023858:	460c      	mov	r4, r1
 802385a:	4615      	mov	r5, r2
 802385c:	461f      	mov	r7, r3
 802385e:	2209      	movs	r2, #9
 8023860:	3308      	adds	r3, #8
 8023862:	4606      	mov	r6, r0
 8023864:	fb93 f3f2 	sdiv	r3, r3, r2
 8023868:	2100      	movs	r1, #0
 802386a:	2201      	movs	r2, #1
 802386c:	429a      	cmp	r2, r3
 802386e:	db09      	blt.n	8023884 <__s2b+0x30>
 8023870:	4630      	mov	r0, r6
 8023872:	f7ff ff43 	bl	80236fc <_Balloc>
 8023876:	b940      	cbnz	r0, 802388a <__s2b+0x36>
 8023878:	4602      	mov	r2, r0
 802387a:	4b19      	ldr	r3, [pc, #100]	; (80238e0 <__s2b+0x8c>)
 802387c:	4819      	ldr	r0, [pc, #100]	; (80238e4 <__s2b+0x90>)
 802387e:	21ce      	movs	r1, #206	; 0xce
 8023880:	f7fe fb48 	bl	8021f14 <__assert_func>
 8023884:	0052      	lsls	r2, r2, #1
 8023886:	3101      	adds	r1, #1
 8023888:	e7f0      	b.n	802386c <__s2b+0x18>
 802388a:	9b08      	ldr	r3, [sp, #32]
 802388c:	6143      	str	r3, [r0, #20]
 802388e:	2d09      	cmp	r5, #9
 8023890:	f04f 0301 	mov.w	r3, #1
 8023894:	6103      	str	r3, [r0, #16]
 8023896:	dd16      	ble.n	80238c6 <__s2b+0x72>
 8023898:	f104 0909 	add.w	r9, r4, #9
 802389c:	46c8      	mov	r8, r9
 802389e:	442c      	add	r4, r5
 80238a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80238a4:	4601      	mov	r1, r0
 80238a6:	3b30      	subs	r3, #48	; 0x30
 80238a8:	220a      	movs	r2, #10
 80238aa:	4630      	mov	r0, r6
 80238ac:	f7ff ff88 	bl	80237c0 <__multadd>
 80238b0:	45a0      	cmp	r8, r4
 80238b2:	d1f5      	bne.n	80238a0 <__s2b+0x4c>
 80238b4:	f1a5 0408 	sub.w	r4, r5, #8
 80238b8:	444c      	add	r4, r9
 80238ba:	1b2d      	subs	r5, r5, r4
 80238bc:	1963      	adds	r3, r4, r5
 80238be:	42bb      	cmp	r3, r7
 80238c0:	db04      	blt.n	80238cc <__s2b+0x78>
 80238c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80238c6:	340a      	adds	r4, #10
 80238c8:	2509      	movs	r5, #9
 80238ca:	e7f6      	b.n	80238ba <__s2b+0x66>
 80238cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80238d0:	4601      	mov	r1, r0
 80238d2:	3b30      	subs	r3, #48	; 0x30
 80238d4:	220a      	movs	r2, #10
 80238d6:	4630      	mov	r0, r6
 80238d8:	f7ff ff72 	bl	80237c0 <__multadd>
 80238dc:	e7ee      	b.n	80238bc <__s2b+0x68>
 80238de:	bf00      	nop
 80238e0:	080294a0 	.word	0x080294a0
 80238e4:	08029594 	.word	0x08029594

080238e8 <__hi0bits>:
 80238e8:	0c03      	lsrs	r3, r0, #16
 80238ea:	041b      	lsls	r3, r3, #16
 80238ec:	b9d3      	cbnz	r3, 8023924 <__hi0bits+0x3c>
 80238ee:	0400      	lsls	r0, r0, #16
 80238f0:	2310      	movs	r3, #16
 80238f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80238f6:	bf04      	itt	eq
 80238f8:	0200      	lsleq	r0, r0, #8
 80238fa:	3308      	addeq	r3, #8
 80238fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8023900:	bf04      	itt	eq
 8023902:	0100      	lsleq	r0, r0, #4
 8023904:	3304      	addeq	r3, #4
 8023906:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802390a:	bf04      	itt	eq
 802390c:	0080      	lsleq	r0, r0, #2
 802390e:	3302      	addeq	r3, #2
 8023910:	2800      	cmp	r0, #0
 8023912:	db05      	blt.n	8023920 <__hi0bits+0x38>
 8023914:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8023918:	f103 0301 	add.w	r3, r3, #1
 802391c:	bf08      	it	eq
 802391e:	2320      	moveq	r3, #32
 8023920:	4618      	mov	r0, r3
 8023922:	4770      	bx	lr
 8023924:	2300      	movs	r3, #0
 8023926:	e7e4      	b.n	80238f2 <__hi0bits+0xa>

08023928 <__lo0bits>:
 8023928:	6803      	ldr	r3, [r0, #0]
 802392a:	f013 0207 	ands.w	r2, r3, #7
 802392e:	4601      	mov	r1, r0
 8023930:	d00b      	beq.n	802394a <__lo0bits+0x22>
 8023932:	07da      	lsls	r2, r3, #31
 8023934:	d424      	bmi.n	8023980 <__lo0bits+0x58>
 8023936:	0798      	lsls	r0, r3, #30
 8023938:	bf49      	itett	mi
 802393a:	085b      	lsrmi	r3, r3, #1
 802393c:	089b      	lsrpl	r3, r3, #2
 802393e:	2001      	movmi	r0, #1
 8023940:	600b      	strmi	r3, [r1, #0]
 8023942:	bf5c      	itt	pl
 8023944:	600b      	strpl	r3, [r1, #0]
 8023946:	2002      	movpl	r0, #2
 8023948:	4770      	bx	lr
 802394a:	b298      	uxth	r0, r3
 802394c:	b9b0      	cbnz	r0, 802397c <__lo0bits+0x54>
 802394e:	0c1b      	lsrs	r3, r3, #16
 8023950:	2010      	movs	r0, #16
 8023952:	f013 0fff 	tst.w	r3, #255	; 0xff
 8023956:	bf04      	itt	eq
 8023958:	0a1b      	lsreq	r3, r3, #8
 802395a:	3008      	addeq	r0, #8
 802395c:	071a      	lsls	r2, r3, #28
 802395e:	bf04      	itt	eq
 8023960:	091b      	lsreq	r3, r3, #4
 8023962:	3004      	addeq	r0, #4
 8023964:	079a      	lsls	r2, r3, #30
 8023966:	bf04      	itt	eq
 8023968:	089b      	lsreq	r3, r3, #2
 802396a:	3002      	addeq	r0, #2
 802396c:	07da      	lsls	r2, r3, #31
 802396e:	d403      	bmi.n	8023978 <__lo0bits+0x50>
 8023970:	085b      	lsrs	r3, r3, #1
 8023972:	f100 0001 	add.w	r0, r0, #1
 8023976:	d005      	beq.n	8023984 <__lo0bits+0x5c>
 8023978:	600b      	str	r3, [r1, #0]
 802397a:	4770      	bx	lr
 802397c:	4610      	mov	r0, r2
 802397e:	e7e8      	b.n	8023952 <__lo0bits+0x2a>
 8023980:	2000      	movs	r0, #0
 8023982:	4770      	bx	lr
 8023984:	2020      	movs	r0, #32
 8023986:	4770      	bx	lr

08023988 <__i2b>:
 8023988:	b510      	push	{r4, lr}
 802398a:	460c      	mov	r4, r1
 802398c:	2101      	movs	r1, #1
 802398e:	f7ff feb5 	bl	80236fc <_Balloc>
 8023992:	4602      	mov	r2, r0
 8023994:	b928      	cbnz	r0, 80239a2 <__i2b+0x1a>
 8023996:	4b05      	ldr	r3, [pc, #20]	; (80239ac <__i2b+0x24>)
 8023998:	4805      	ldr	r0, [pc, #20]	; (80239b0 <__i2b+0x28>)
 802399a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 802399e:	f7fe fab9 	bl	8021f14 <__assert_func>
 80239a2:	2301      	movs	r3, #1
 80239a4:	6144      	str	r4, [r0, #20]
 80239a6:	6103      	str	r3, [r0, #16]
 80239a8:	bd10      	pop	{r4, pc}
 80239aa:	bf00      	nop
 80239ac:	080294a0 	.word	0x080294a0
 80239b0:	08029594 	.word	0x08029594

080239b4 <__multiply>:
 80239b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80239b8:	4614      	mov	r4, r2
 80239ba:	690a      	ldr	r2, [r1, #16]
 80239bc:	6923      	ldr	r3, [r4, #16]
 80239be:	429a      	cmp	r2, r3
 80239c0:	bfb8      	it	lt
 80239c2:	460b      	movlt	r3, r1
 80239c4:	460d      	mov	r5, r1
 80239c6:	bfbc      	itt	lt
 80239c8:	4625      	movlt	r5, r4
 80239ca:	461c      	movlt	r4, r3
 80239cc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80239d0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80239d4:	68ab      	ldr	r3, [r5, #8]
 80239d6:	6869      	ldr	r1, [r5, #4]
 80239d8:	eb0a 0709 	add.w	r7, sl, r9
 80239dc:	42bb      	cmp	r3, r7
 80239de:	b085      	sub	sp, #20
 80239e0:	bfb8      	it	lt
 80239e2:	3101      	addlt	r1, #1
 80239e4:	f7ff fe8a 	bl	80236fc <_Balloc>
 80239e8:	b930      	cbnz	r0, 80239f8 <__multiply+0x44>
 80239ea:	4602      	mov	r2, r0
 80239ec:	4b42      	ldr	r3, [pc, #264]	; (8023af8 <__multiply+0x144>)
 80239ee:	4843      	ldr	r0, [pc, #268]	; (8023afc <__multiply+0x148>)
 80239f0:	f240 115d 	movw	r1, #349	; 0x15d
 80239f4:	f7fe fa8e 	bl	8021f14 <__assert_func>
 80239f8:	f100 0614 	add.w	r6, r0, #20
 80239fc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8023a00:	4633      	mov	r3, r6
 8023a02:	2200      	movs	r2, #0
 8023a04:	4543      	cmp	r3, r8
 8023a06:	d31e      	bcc.n	8023a46 <__multiply+0x92>
 8023a08:	f105 0c14 	add.w	ip, r5, #20
 8023a0c:	f104 0314 	add.w	r3, r4, #20
 8023a10:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8023a14:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8023a18:	9202      	str	r2, [sp, #8]
 8023a1a:	ebac 0205 	sub.w	r2, ip, r5
 8023a1e:	3a15      	subs	r2, #21
 8023a20:	f022 0203 	bic.w	r2, r2, #3
 8023a24:	3204      	adds	r2, #4
 8023a26:	f105 0115 	add.w	r1, r5, #21
 8023a2a:	458c      	cmp	ip, r1
 8023a2c:	bf38      	it	cc
 8023a2e:	2204      	movcc	r2, #4
 8023a30:	9201      	str	r2, [sp, #4]
 8023a32:	9a02      	ldr	r2, [sp, #8]
 8023a34:	9303      	str	r3, [sp, #12]
 8023a36:	429a      	cmp	r2, r3
 8023a38:	d808      	bhi.n	8023a4c <__multiply+0x98>
 8023a3a:	2f00      	cmp	r7, #0
 8023a3c:	dc55      	bgt.n	8023aea <__multiply+0x136>
 8023a3e:	6107      	str	r7, [r0, #16]
 8023a40:	b005      	add	sp, #20
 8023a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023a46:	f843 2b04 	str.w	r2, [r3], #4
 8023a4a:	e7db      	b.n	8023a04 <__multiply+0x50>
 8023a4c:	f8b3 a000 	ldrh.w	sl, [r3]
 8023a50:	f1ba 0f00 	cmp.w	sl, #0
 8023a54:	d020      	beq.n	8023a98 <__multiply+0xe4>
 8023a56:	f105 0e14 	add.w	lr, r5, #20
 8023a5a:	46b1      	mov	r9, r6
 8023a5c:	2200      	movs	r2, #0
 8023a5e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8023a62:	f8d9 b000 	ldr.w	fp, [r9]
 8023a66:	b2a1      	uxth	r1, r4
 8023a68:	fa1f fb8b 	uxth.w	fp, fp
 8023a6c:	fb0a b101 	mla	r1, sl, r1, fp
 8023a70:	4411      	add	r1, r2
 8023a72:	f8d9 2000 	ldr.w	r2, [r9]
 8023a76:	0c24      	lsrs	r4, r4, #16
 8023a78:	0c12      	lsrs	r2, r2, #16
 8023a7a:	fb0a 2404 	mla	r4, sl, r4, r2
 8023a7e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8023a82:	b289      	uxth	r1, r1
 8023a84:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8023a88:	45f4      	cmp	ip, lr
 8023a8a:	f849 1b04 	str.w	r1, [r9], #4
 8023a8e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8023a92:	d8e4      	bhi.n	8023a5e <__multiply+0xaa>
 8023a94:	9901      	ldr	r1, [sp, #4]
 8023a96:	5072      	str	r2, [r6, r1]
 8023a98:	9a03      	ldr	r2, [sp, #12]
 8023a9a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8023a9e:	3304      	adds	r3, #4
 8023aa0:	f1b9 0f00 	cmp.w	r9, #0
 8023aa4:	d01f      	beq.n	8023ae6 <__multiply+0x132>
 8023aa6:	6834      	ldr	r4, [r6, #0]
 8023aa8:	f105 0114 	add.w	r1, r5, #20
 8023aac:	46b6      	mov	lr, r6
 8023aae:	f04f 0a00 	mov.w	sl, #0
 8023ab2:	880a      	ldrh	r2, [r1, #0]
 8023ab4:	f8be b002 	ldrh.w	fp, [lr, #2]
 8023ab8:	fb09 b202 	mla	r2, r9, r2, fp
 8023abc:	4492      	add	sl, r2
 8023abe:	b2a4      	uxth	r4, r4
 8023ac0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8023ac4:	f84e 4b04 	str.w	r4, [lr], #4
 8023ac8:	f851 4b04 	ldr.w	r4, [r1], #4
 8023acc:	f8be 2000 	ldrh.w	r2, [lr]
 8023ad0:	0c24      	lsrs	r4, r4, #16
 8023ad2:	fb09 2404 	mla	r4, r9, r4, r2
 8023ad6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8023ada:	458c      	cmp	ip, r1
 8023adc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8023ae0:	d8e7      	bhi.n	8023ab2 <__multiply+0xfe>
 8023ae2:	9a01      	ldr	r2, [sp, #4]
 8023ae4:	50b4      	str	r4, [r6, r2]
 8023ae6:	3604      	adds	r6, #4
 8023ae8:	e7a3      	b.n	8023a32 <__multiply+0x7e>
 8023aea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8023aee:	2b00      	cmp	r3, #0
 8023af0:	d1a5      	bne.n	8023a3e <__multiply+0x8a>
 8023af2:	3f01      	subs	r7, #1
 8023af4:	e7a1      	b.n	8023a3a <__multiply+0x86>
 8023af6:	bf00      	nop
 8023af8:	080294a0 	.word	0x080294a0
 8023afc:	08029594 	.word	0x08029594

08023b00 <__pow5mult>:
 8023b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023b04:	4615      	mov	r5, r2
 8023b06:	f012 0203 	ands.w	r2, r2, #3
 8023b0a:	4606      	mov	r6, r0
 8023b0c:	460f      	mov	r7, r1
 8023b0e:	d007      	beq.n	8023b20 <__pow5mult+0x20>
 8023b10:	4c25      	ldr	r4, [pc, #148]	; (8023ba8 <__pow5mult+0xa8>)
 8023b12:	3a01      	subs	r2, #1
 8023b14:	2300      	movs	r3, #0
 8023b16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8023b1a:	f7ff fe51 	bl	80237c0 <__multadd>
 8023b1e:	4607      	mov	r7, r0
 8023b20:	10ad      	asrs	r5, r5, #2
 8023b22:	d03d      	beq.n	8023ba0 <__pow5mult+0xa0>
 8023b24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8023b26:	b97c      	cbnz	r4, 8023b48 <__pow5mult+0x48>
 8023b28:	2010      	movs	r0, #16
 8023b2a:	f7fc fa67 	bl	801fffc <malloc>
 8023b2e:	4602      	mov	r2, r0
 8023b30:	6270      	str	r0, [r6, #36]	; 0x24
 8023b32:	b928      	cbnz	r0, 8023b40 <__pow5mult+0x40>
 8023b34:	4b1d      	ldr	r3, [pc, #116]	; (8023bac <__pow5mult+0xac>)
 8023b36:	481e      	ldr	r0, [pc, #120]	; (8023bb0 <__pow5mult+0xb0>)
 8023b38:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8023b3c:	f7fe f9ea 	bl	8021f14 <__assert_func>
 8023b40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8023b44:	6004      	str	r4, [r0, #0]
 8023b46:	60c4      	str	r4, [r0, #12]
 8023b48:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8023b4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8023b50:	b94c      	cbnz	r4, 8023b66 <__pow5mult+0x66>
 8023b52:	f240 2171 	movw	r1, #625	; 0x271
 8023b56:	4630      	mov	r0, r6
 8023b58:	f7ff ff16 	bl	8023988 <__i2b>
 8023b5c:	2300      	movs	r3, #0
 8023b5e:	f8c8 0008 	str.w	r0, [r8, #8]
 8023b62:	4604      	mov	r4, r0
 8023b64:	6003      	str	r3, [r0, #0]
 8023b66:	f04f 0900 	mov.w	r9, #0
 8023b6a:	07eb      	lsls	r3, r5, #31
 8023b6c:	d50a      	bpl.n	8023b84 <__pow5mult+0x84>
 8023b6e:	4639      	mov	r1, r7
 8023b70:	4622      	mov	r2, r4
 8023b72:	4630      	mov	r0, r6
 8023b74:	f7ff ff1e 	bl	80239b4 <__multiply>
 8023b78:	4639      	mov	r1, r7
 8023b7a:	4680      	mov	r8, r0
 8023b7c:	4630      	mov	r0, r6
 8023b7e:	f7ff fdfd 	bl	802377c <_Bfree>
 8023b82:	4647      	mov	r7, r8
 8023b84:	106d      	asrs	r5, r5, #1
 8023b86:	d00b      	beq.n	8023ba0 <__pow5mult+0xa0>
 8023b88:	6820      	ldr	r0, [r4, #0]
 8023b8a:	b938      	cbnz	r0, 8023b9c <__pow5mult+0x9c>
 8023b8c:	4622      	mov	r2, r4
 8023b8e:	4621      	mov	r1, r4
 8023b90:	4630      	mov	r0, r6
 8023b92:	f7ff ff0f 	bl	80239b4 <__multiply>
 8023b96:	6020      	str	r0, [r4, #0]
 8023b98:	f8c0 9000 	str.w	r9, [r0]
 8023b9c:	4604      	mov	r4, r0
 8023b9e:	e7e4      	b.n	8023b6a <__pow5mult+0x6a>
 8023ba0:	4638      	mov	r0, r7
 8023ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023ba6:	bf00      	nop
 8023ba8:	080296e8 	.word	0x080296e8
 8023bac:	08029331 	.word	0x08029331
 8023bb0:	08029594 	.word	0x08029594

08023bb4 <__lshift>:
 8023bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023bb8:	460c      	mov	r4, r1
 8023bba:	6849      	ldr	r1, [r1, #4]
 8023bbc:	6923      	ldr	r3, [r4, #16]
 8023bbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8023bc2:	68a3      	ldr	r3, [r4, #8]
 8023bc4:	4607      	mov	r7, r0
 8023bc6:	4691      	mov	r9, r2
 8023bc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8023bcc:	f108 0601 	add.w	r6, r8, #1
 8023bd0:	42b3      	cmp	r3, r6
 8023bd2:	db0b      	blt.n	8023bec <__lshift+0x38>
 8023bd4:	4638      	mov	r0, r7
 8023bd6:	f7ff fd91 	bl	80236fc <_Balloc>
 8023bda:	4605      	mov	r5, r0
 8023bdc:	b948      	cbnz	r0, 8023bf2 <__lshift+0x3e>
 8023bde:	4602      	mov	r2, r0
 8023be0:	4b28      	ldr	r3, [pc, #160]	; (8023c84 <__lshift+0xd0>)
 8023be2:	4829      	ldr	r0, [pc, #164]	; (8023c88 <__lshift+0xd4>)
 8023be4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8023be8:	f7fe f994 	bl	8021f14 <__assert_func>
 8023bec:	3101      	adds	r1, #1
 8023bee:	005b      	lsls	r3, r3, #1
 8023bf0:	e7ee      	b.n	8023bd0 <__lshift+0x1c>
 8023bf2:	2300      	movs	r3, #0
 8023bf4:	f100 0114 	add.w	r1, r0, #20
 8023bf8:	f100 0210 	add.w	r2, r0, #16
 8023bfc:	4618      	mov	r0, r3
 8023bfe:	4553      	cmp	r3, sl
 8023c00:	db33      	blt.n	8023c6a <__lshift+0xb6>
 8023c02:	6920      	ldr	r0, [r4, #16]
 8023c04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8023c08:	f104 0314 	add.w	r3, r4, #20
 8023c0c:	f019 091f 	ands.w	r9, r9, #31
 8023c10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8023c14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8023c18:	d02b      	beq.n	8023c72 <__lshift+0xbe>
 8023c1a:	f1c9 0e20 	rsb	lr, r9, #32
 8023c1e:	468a      	mov	sl, r1
 8023c20:	2200      	movs	r2, #0
 8023c22:	6818      	ldr	r0, [r3, #0]
 8023c24:	fa00 f009 	lsl.w	r0, r0, r9
 8023c28:	4302      	orrs	r2, r0
 8023c2a:	f84a 2b04 	str.w	r2, [sl], #4
 8023c2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8023c32:	459c      	cmp	ip, r3
 8023c34:	fa22 f20e 	lsr.w	r2, r2, lr
 8023c38:	d8f3      	bhi.n	8023c22 <__lshift+0x6e>
 8023c3a:	ebac 0304 	sub.w	r3, ip, r4
 8023c3e:	3b15      	subs	r3, #21
 8023c40:	f023 0303 	bic.w	r3, r3, #3
 8023c44:	3304      	adds	r3, #4
 8023c46:	f104 0015 	add.w	r0, r4, #21
 8023c4a:	4584      	cmp	ip, r0
 8023c4c:	bf38      	it	cc
 8023c4e:	2304      	movcc	r3, #4
 8023c50:	50ca      	str	r2, [r1, r3]
 8023c52:	b10a      	cbz	r2, 8023c58 <__lshift+0xa4>
 8023c54:	f108 0602 	add.w	r6, r8, #2
 8023c58:	3e01      	subs	r6, #1
 8023c5a:	4638      	mov	r0, r7
 8023c5c:	612e      	str	r6, [r5, #16]
 8023c5e:	4621      	mov	r1, r4
 8023c60:	f7ff fd8c 	bl	802377c <_Bfree>
 8023c64:	4628      	mov	r0, r5
 8023c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023c6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8023c6e:	3301      	adds	r3, #1
 8023c70:	e7c5      	b.n	8023bfe <__lshift+0x4a>
 8023c72:	3904      	subs	r1, #4
 8023c74:	f853 2b04 	ldr.w	r2, [r3], #4
 8023c78:	f841 2f04 	str.w	r2, [r1, #4]!
 8023c7c:	459c      	cmp	ip, r3
 8023c7e:	d8f9      	bhi.n	8023c74 <__lshift+0xc0>
 8023c80:	e7ea      	b.n	8023c58 <__lshift+0xa4>
 8023c82:	bf00      	nop
 8023c84:	080294a0 	.word	0x080294a0
 8023c88:	08029594 	.word	0x08029594

08023c8c <__mcmp>:
 8023c8c:	b530      	push	{r4, r5, lr}
 8023c8e:	6902      	ldr	r2, [r0, #16]
 8023c90:	690c      	ldr	r4, [r1, #16]
 8023c92:	1b12      	subs	r2, r2, r4
 8023c94:	d10e      	bne.n	8023cb4 <__mcmp+0x28>
 8023c96:	f100 0314 	add.w	r3, r0, #20
 8023c9a:	3114      	adds	r1, #20
 8023c9c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8023ca0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8023ca4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8023ca8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8023cac:	42a5      	cmp	r5, r4
 8023cae:	d003      	beq.n	8023cb8 <__mcmp+0x2c>
 8023cb0:	d305      	bcc.n	8023cbe <__mcmp+0x32>
 8023cb2:	2201      	movs	r2, #1
 8023cb4:	4610      	mov	r0, r2
 8023cb6:	bd30      	pop	{r4, r5, pc}
 8023cb8:	4283      	cmp	r3, r0
 8023cba:	d3f3      	bcc.n	8023ca4 <__mcmp+0x18>
 8023cbc:	e7fa      	b.n	8023cb4 <__mcmp+0x28>
 8023cbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023cc2:	e7f7      	b.n	8023cb4 <__mcmp+0x28>

08023cc4 <__mdiff>:
 8023cc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023cc8:	460c      	mov	r4, r1
 8023cca:	4606      	mov	r6, r0
 8023ccc:	4611      	mov	r1, r2
 8023cce:	4620      	mov	r0, r4
 8023cd0:	4617      	mov	r7, r2
 8023cd2:	f7ff ffdb 	bl	8023c8c <__mcmp>
 8023cd6:	1e05      	subs	r5, r0, #0
 8023cd8:	d110      	bne.n	8023cfc <__mdiff+0x38>
 8023cda:	4629      	mov	r1, r5
 8023cdc:	4630      	mov	r0, r6
 8023cde:	f7ff fd0d 	bl	80236fc <_Balloc>
 8023ce2:	b930      	cbnz	r0, 8023cf2 <__mdiff+0x2e>
 8023ce4:	4b39      	ldr	r3, [pc, #228]	; (8023dcc <__mdiff+0x108>)
 8023ce6:	4602      	mov	r2, r0
 8023ce8:	f240 2132 	movw	r1, #562	; 0x232
 8023cec:	4838      	ldr	r0, [pc, #224]	; (8023dd0 <__mdiff+0x10c>)
 8023cee:	f7fe f911 	bl	8021f14 <__assert_func>
 8023cf2:	2301      	movs	r3, #1
 8023cf4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8023cf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023cfc:	bfa4      	itt	ge
 8023cfe:	463b      	movge	r3, r7
 8023d00:	4627      	movge	r7, r4
 8023d02:	4630      	mov	r0, r6
 8023d04:	6879      	ldr	r1, [r7, #4]
 8023d06:	bfa6      	itte	ge
 8023d08:	461c      	movge	r4, r3
 8023d0a:	2500      	movge	r5, #0
 8023d0c:	2501      	movlt	r5, #1
 8023d0e:	f7ff fcf5 	bl	80236fc <_Balloc>
 8023d12:	b920      	cbnz	r0, 8023d1e <__mdiff+0x5a>
 8023d14:	4b2d      	ldr	r3, [pc, #180]	; (8023dcc <__mdiff+0x108>)
 8023d16:	4602      	mov	r2, r0
 8023d18:	f44f 7110 	mov.w	r1, #576	; 0x240
 8023d1c:	e7e6      	b.n	8023cec <__mdiff+0x28>
 8023d1e:	693e      	ldr	r6, [r7, #16]
 8023d20:	60c5      	str	r5, [r0, #12]
 8023d22:	6925      	ldr	r5, [r4, #16]
 8023d24:	f107 0114 	add.w	r1, r7, #20
 8023d28:	f104 0914 	add.w	r9, r4, #20
 8023d2c:	f100 0e14 	add.w	lr, r0, #20
 8023d30:	f107 0210 	add.w	r2, r7, #16
 8023d34:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8023d38:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8023d3c:	46f2      	mov	sl, lr
 8023d3e:	2700      	movs	r7, #0
 8023d40:	f859 3b04 	ldr.w	r3, [r9], #4
 8023d44:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8023d48:	fa1f f883 	uxth.w	r8, r3
 8023d4c:	fa17 f78b 	uxtah	r7, r7, fp
 8023d50:	0c1b      	lsrs	r3, r3, #16
 8023d52:	eba7 0808 	sub.w	r8, r7, r8
 8023d56:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8023d5a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8023d5e:	fa1f f888 	uxth.w	r8, r8
 8023d62:	141f      	asrs	r7, r3, #16
 8023d64:	454d      	cmp	r5, r9
 8023d66:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8023d6a:	f84a 3b04 	str.w	r3, [sl], #4
 8023d6e:	d8e7      	bhi.n	8023d40 <__mdiff+0x7c>
 8023d70:	1b2b      	subs	r3, r5, r4
 8023d72:	3b15      	subs	r3, #21
 8023d74:	f023 0303 	bic.w	r3, r3, #3
 8023d78:	3304      	adds	r3, #4
 8023d7a:	3415      	adds	r4, #21
 8023d7c:	42a5      	cmp	r5, r4
 8023d7e:	bf38      	it	cc
 8023d80:	2304      	movcc	r3, #4
 8023d82:	4419      	add	r1, r3
 8023d84:	4473      	add	r3, lr
 8023d86:	469e      	mov	lr, r3
 8023d88:	460d      	mov	r5, r1
 8023d8a:	4565      	cmp	r5, ip
 8023d8c:	d30e      	bcc.n	8023dac <__mdiff+0xe8>
 8023d8e:	f10c 0203 	add.w	r2, ip, #3
 8023d92:	1a52      	subs	r2, r2, r1
 8023d94:	f022 0203 	bic.w	r2, r2, #3
 8023d98:	3903      	subs	r1, #3
 8023d9a:	458c      	cmp	ip, r1
 8023d9c:	bf38      	it	cc
 8023d9e:	2200      	movcc	r2, #0
 8023da0:	441a      	add	r2, r3
 8023da2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8023da6:	b17b      	cbz	r3, 8023dc8 <__mdiff+0x104>
 8023da8:	6106      	str	r6, [r0, #16]
 8023daa:	e7a5      	b.n	8023cf8 <__mdiff+0x34>
 8023dac:	f855 8b04 	ldr.w	r8, [r5], #4
 8023db0:	fa17 f488 	uxtah	r4, r7, r8
 8023db4:	1422      	asrs	r2, r4, #16
 8023db6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8023dba:	b2a4      	uxth	r4, r4
 8023dbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8023dc0:	f84e 4b04 	str.w	r4, [lr], #4
 8023dc4:	1417      	asrs	r7, r2, #16
 8023dc6:	e7e0      	b.n	8023d8a <__mdiff+0xc6>
 8023dc8:	3e01      	subs	r6, #1
 8023dca:	e7ea      	b.n	8023da2 <__mdiff+0xde>
 8023dcc:	080294a0 	.word	0x080294a0
 8023dd0:	08029594 	.word	0x08029594

08023dd4 <__ulp>:
 8023dd4:	b082      	sub	sp, #8
 8023dd6:	ed8d 0b00 	vstr	d0, [sp]
 8023dda:	9b01      	ldr	r3, [sp, #4]
 8023ddc:	4912      	ldr	r1, [pc, #72]	; (8023e28 <__ulp+0x54>)
 8023dde:	4019      	ands	r1, r3
 8023de0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8023de4:	2900      	cmp	r1, #0
 8023de6:	dd05      	ble.n	8023df4 <__ulp+0x20>
 8023de8:	2200      	movs	r2, #0
 8023dea:	460b      	mov	r3, r1
 8023dec:	ec43 2b10 	vmov	d0, r2, r3
 8023df0:	b002      	add	sp, #8
 8023df2:	4770      	bx	lr
 8023df4:	4249      	negs	r1, r1
 8023df6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8023dfa:	ea4f 5021 	mov.w	r0, r1, asr #20
 8023dfe:	f04f 0200 	mov.w	r2, #0
 8023e02:	f04f 0300 	mov.w	r3, #0
 8023e06:	da04      	bge.n	8023e12 <__ulp+0x3e>
 8023e08:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8023e0c:	fa41 f300 	asr.w	r3, r1, r0
 8023e10:	e7ec      	b.n	8023dec <__ulp+0x18>
 8023e12:	f1a0 0114 	sub.w	r1, r0, #20
 8023e16:	291e      	cmp	r1, #30
 8023e18:	bfda      	itte	le
 8023e1a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8023e1e:	fa20 f101 	lsrle.w	r1, r0, r1
 8023e22:	2101      	movgt	r1, #1
 8023e24:	460a      	mov	r2, r1
 8023e26:	e7e1      	b.n	8023dec <__ulp+0x18>
 8023e28:	7ff00000 	.word	0x7ff00000

08023e2c <__b2d>:
 8023e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023e2e:	6905      	ldr	r5, [r0, #16]
 8023e30:	f100 0714 	add.w	r7, r0, #20
 8023e34:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8023e38:	1f2e      	subs	r6, r5, #4
 8023e3a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8023e3e:	4620      	mov	r0, r4
 8023e40:	f7ff fd52 	bl	80238e8 <__hi0bits>
 8023e44:	f1c0 0320 	rsb	r3, r0, #32
 8023e48:	280a      	cmp	r0, #10
 8023e4a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8023ec8 <__b2d+0x9c>
 8023e4e:	600b      	str	r3, [r1, #0]
 8023e50:	dc14      	bgt.n	8023e7c <__b2d+0x50>
 8023e52:	f1c0 0e0b 	rsb	lr, r0, #11
 8023e56:	fa24 f10e 	lsr.w	r1, r4, lr
 8023e5a:	42b7      	cmp	r7, r6
 8023e5c:	ea41 030c 	orr.w	r3, r1, ip
 8023e60:	bf34      	ite	cc
 8023e62:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8023e66:	2100      	movcs	r1, #0
 8023e68:	3015      	adds	r0, #21
 8023e6a:	fa04 f000 	lsl.w	r0, r4, r0
 8023e6e:	fa21 f10e 	lsr.w	r1, r1, lr
 8023e72:	ea40 0201 	orr.w	r2, r0, r1
 8023e76:	ec43 2b10 	vmov	d0, r2, r3
 8023e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023e7c:	42b7      	cmp	r7, r6
 8023e7e:	bf3a      	itte	cc
 8023e80:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8023e84:	f1a5 0608 	subcc.w	r6, r5, #8
 8023e88:	2100      	movcs	r1, #0
 8023e8a:	380b      	subs	r0, #11
 8023e8c:	d017      	beq.n	8023ebe <__b2d+0x92>
 8023e8e:	f1c0 0c20 	rsb	ip, r0, #32
 8023e92:	fa04 f500 	lsl.w	r5, r4, r0
 8023e96:	42be      	cmp	r6, r7
 8023e98:	fa21 f40c 	lsr.w	r4, r1, ip
 8023e9c:	ea45 0504 	orr.w	r5, r5, r4
 8023ea0:	bf8c      	ite	hi
 8023ea2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8023ea6:	2400      	movls	r4, #0
 8023ea8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8023eac:	fa01 f000 	lsl.w	r0, r1, r0
 8023eb0:	fa24 f40c 	lsr.w	r4, r4, ip
 8023eb4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8023eb8:	ea40 0204 	orr.w	r2, r0, r4
 8023ebc:	e7db      	b.n	8023e76 <__b2d+0x4a>
 8023ebe:	ea44 030c 	orr.w	r3, r4, ip
 8023ec2:	460a      	mov	r2, r1
 8023ec4:	e7d7      	b.n	8023e76 <__b2d+0x4a>
 8023ec6:	bf00      	nop
 8023ec8:	3ff00000 	.word	0x3ff00000

08023ecc <__d2b>:
 8023ecc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8023ed0:	4689      	mov	r9, r1
 8023ed2:	2101      	movs	r1, #1
 8023ed4:	ec57 6b10 	vmov	r6, r7, d0
 8023ed8:	4690      	mov	r8, r2
 8023eda:	f7ff fc0f 	bl	80236fc <_Balloc>
 8023ede:	4604      	mov	r4, r0
 8023ee0:	b930      	cbnz	r0, 8023ef0 <__d2b+0x24>
 8023ee2:	4602      	mov	r2, r0
 8023ee4:	4b25      	ldr	r3, [pc, #148]	; (8023f7c <__d2b+0xb0>)
 8023ee6:	4826      	ldr	r0, [pc, #152]	; (8023f80 <__d2b+0xb4>)
 8023ee8:	f240 310a 	movw	r1, #778	; 0x30a
 8023eec:	f7fe f812 	bl	8021f14 <__assert_func>
 8023ef0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8023ef4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8023ef8:	bb35      	cbnz	r5, 8023f48 <__d2b+0x7c>
 8023efa:	2e00      	cmp	r6, #0
 8023efc:	9301      	str	r3, [sp, #4]
 8023efe:	d028      	beq.n	8023f52 <__d2b+0x86>
 8023f00:	4668      	mov	r0, sp
 8023f02:	9600      	str	r6, [sp, #0]
 8023f04:	f7ff fd10 	bl	8023928 <__lo0bits>
 8023f08:	9900      	ldr	r1, [sp, #0]
 8023f0a:	b300      	cbz	r0, 8023f4e <__d2b+0x82>
 8023f0c:	9a01      	ldr	r2, [sp, #4]
 8023f0e:	f1c0 0320 	rsb	r3, r0, #32
 8023f12:	fa02 f303 	lsl.w	r3, r2, r3
 8023f16:	430b      	orrs	r3, r1
 8023f18:	40c2      	lsrs	r2, r0
 8023f1a:	6163      	str	r3, [r4, #20]
 8023f1c:	9201      	str	r2, [sp, #4]
 8023f1e:	9b01      	ldr	r3, [sp, #4]
 8023f20:	61a3      	str	r3, [r4, #24]
 8023f22:	2b00      	cmp	r3, #0
 8023f24:	bf14      	ite	ne
 8023f26:	2202      	movne	r2, #2
 8023f28:	2201      	moveq	r2, #1
 8023f2a:	6122      	str	r2, [r4, #16]
 8023f2c:	b1d5      	cbz	r5, 8023f64 <__d2b+0x98>
 8023f2e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8023f32:	4405      	add	r5, r0
 8023f34:	f8c9 5000 	str.w	r5, [r9]
 8023f38:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8023f3c:	f8c8 0000 	str.w	r0, [r8]
 8023f40:	4620      	mov	r0, r4
 8023f42:	b003      	add	sp, #12
 8023f44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023f48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8023f4c:	e7d5      	b.n	8023efa <__d2b+0x2e>
 8023f4e:	6161      	str	r1, [r4, #20]
 8023f50:	e7e5      	b.n	8023f1e <__d2b+0x52>
 8023f52:	a801      	add	r0, sp, #4
 8023f54:	f7ff fce8 	bl	8023928 <__lo0bits>
 8023f58:	9b01      	ldr	r3, [sp, #4]
 8023f5a:	6163      	str	r3, [r4, #20]
 8023f5c:	2201      	movs	r2, #1
 8023f5e:	6122      	str	r2, [r4, #16]
 8023f60:	3020      	adds	r0, #32
 8023f62:	e7e3      	b.n	8023f2c <__d2b+0x60>
 8023f64:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8023f68:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8023f6c:	f8c9 0000 	str.w	r0, [r9]
 8023f70:	6918      	ldr	r0, [r3, #16]
 8023f72:	f7ff fcb9 	bl	80238e8 <__hi0bits>
 8023f76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8023f7a:	e7df      	b.n	8023f3c <__d2b+0x70>
 8023f7c:	080294a0 	.word	0x080294a0
 8023f80:	08029594 	.word	0x08029594

08023f84 <__ratio>:
 8023f84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f88:	468a      	mov	sl, r1
 8023f8a:	4669      	mov	r1, sp
 8023f8c:	4683      	mov	fp, r0
 8023f8e:	f7ff ff4d 	bl	8023e2c <__b2d>
 8023f92:	a901      	add	r1, sp, #4
 8023f94:	4650      	mov	r0, sl
 8023f96:	ec59 8b10 	vmov	r8, r9, d0
 8023f9a:	ee10 6a10 	vmov	r6, s0
 8023f9e:	f7ff ff45 	bl	8023e2c <__b2d>
 8023fa2:	f8db 3010 	ldr.w	r3, [fp, #16]
 8023fa6:	f8da 2010 	ldr.w	r2, [sl, #16]
 8023faa:	eba3 0c02 	sub.w	ip, r3, r2
 8023fae:	e9dd 3200 	ldrd	r3, r2, [sp]
 8023fb2:	1a9b      	subs	r3, r3, r2
 8023fb4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8023fb8:	ec55 4b10 	vmov	r4, r5, d0
 8023fbc:	2b00      	cmp	r3, #0
 8023fbe:	ee10 0a10 	vmov	r0, s0
 8023fc2:	bfce      	itee	gt
 8023fc4:	464a      	movgt	r2, r9
 8023fc6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8023fca:	462a      	movle	r2, r5
 8023fcc:	464f      	mov	r7, r9
 8023fce:	4629      	mov	r1, r5
 8023fd0:	bfcc      	ite	gt
 8023fd2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8023fd6:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8023fda:	ec47 6b17 	vmov	d7, r6, r7
 8023fde:	ec41 0b16 	vmov	d6, r0, r1
 8023fe2:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8023fe6:	b003      	add	sp, #12
 8023fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023fec <__copybits>:
 8023fec:	3901      	subs	r1, #1
 8023fee:	b570      	push	{r4, r5, r6, lr}
 8023ff0:	1149      	asrs	r1, r1, #5
 8023ff2:	6914      	ldr	r4, [r2, #16]
 8023ff4:	3101      	adds	r1, #1
 8023ff6:	f102 0314 	add.w	r3, r2, #20
 8023ffa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8023ffe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8024002:	1f05      	subs	r5, r0, #4
 8024004:	42a3      	cmp	r3, r4
 8024006:	d30c      	bcc.n	8024022 <__copybits+0x36>
 8024008:	1aa3      	subs	r3, r4, r2
 802400a:	3b11      	subs	r3, #17
 802400c:	f023 0303 	bic.w	r3, r3, #3
 8024010:	3211      	adds	r2, #17
 8024012:	42a2      	cmp	r2, r4
 8024014:	bf88      	it	hi
 8024016:	2300      	movhi	r3, #0
 8024018:	4418      	add	r0, r3
 802401a:	2300      	movs	r3, #0
 802401c:	4288      	cmp	r0, r1
 802401e:	d305      	bcc.n	802402c <__copybits+0x40>
 8024020:	bd70      	pop	{r4, r5, r6, pc}
 8024022:	f853 6b04 	ldr.w	r6, [r3], #4
 8024026:	f845 6f04 	str.w	r6, [r5, #4]!
 802402a:	e7eb      	b.n	8024004 <__copybits+0x18>
 802402c:	f840 3b04 	str.w	r3, [r0], #4
 8024030:	e7f4      	b.n	802401c <__copybits+0x30>

08024032 <__any_on>:
 8024032:	f100 0214 	add.w	r2, r0, #20
 8024036:	6900      	ldr	r0, [r0, #16]
 8024038:	114b      	asrs	r3, r1, #5
 802403a:	4298      	cmp	r0, r3
 802403c:	b510      	push	{r4, lr}
 802403e:	db11      	blt.n	8024064 <__any_on+0x32>
 8024040:	dd0a      	ble.n	8024058 <__any_on+0x26>
 8024042:	f011 011f 	ands.w	r1, r1, #31
 8024046:	d007      	beq.n	8024058 <__any_on+0x26>
 8024048:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802404c:	fa24 f001 	lsr.w	r0, r4, r1
 8024050:	fa00 f101 	lsl.w	r1, r0, r1
 8024054:	428c      	cmp	r4, r1
 8024056:	d10b      	bne.n	8024070 <__any_on+0x3e>
 8024058:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802405c:	4293      	cmp	r3, r2
 802405e:	d803      	bhi.n	8024068 <__any_on+0x36>
 8024060:	2000      	movs	r0, #0
 8024062:	bd10      	pop	{r4, pc}
 8024064:	4603      	mov	r3, r0
 8024066:	e7f7      	b.n	8024058 <__any_on+0x26>
 8024068:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802406c:	2900      	cmp	r1, #0
 802406e:	d0f5      	beq.n	802405c <__any_on+0x2a>
 8024070:	2001      	movs	r0, #1
 8024072:	e7f6      	b.n	8024062 <__any_on+0x30>

08024074 <_calloc_r>:
 8024074:	b513      	push	{r0, r1, r4, lr}
 8024076:	434a      	muls	r2, r1
 8024078:	4611      	mov	r1, r2
 802407a:	9201      	str	r2, [sp, #4]
 802407c:	f7fc f854 	bl	8020128 <_malloc_r>
 8024080:	4604      	mov	r4, r0
 8024082:	b118      	cbz	r0, 802408c <_calloc_r+0x18>
 8024084:	9a01      	ldr	r2, [sp, #4]
 8024086:	2100      	movs	r1, #0
 8024088:	f7fb fff6 	bl	8020078 <memset>
 802408c:	4620      	mov	r0, r4
 802408e:	b002      	add	sp, #8
 8024090:	bd10      	pop	{r4, pc}

08024092 <__ssputs_r>:
 8024092:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024096:	688e      	ldr	r6, [r1, #8]
 8024098:	429e      	cmp	r6, r3
 802409a:	4682      	mov	sl, r0
 802409c:	460c      	mov	r4, r1
 802409e:	4690      	mov	r8, r2
 80240a0:	461f      	mov	r7, r3
 80240a2:	d838      	bhi.n	8024116 <__ssputs_r+0x84>
 80240a4:	898a      	ldrh	r2, [r1, #12]
 80240a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80240aa:	d032      	beq.n	8024112 <__ssputs_r+0x80>
 80240ac:	6825      	ldr	r5, [r4, #0]
 80240ae:	6909      	ldr	r1, [r1, #16]
 80240b0:	eba5 0901 	sub.w	r9, r5, r1
 80240b4:	6965      	ldr	r5, [r4, #20]
 80240b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80240ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80240be:	3301      	adds	r3, #1
 80240c0:	444b      	add	r3, r9
 80240c2:	106d      	asrs	r5, r5, #1
 80240c4:	429d      	cmp	r5, r3
 80240c6:	bf38      	it	cc
 80240c8:	461d      	movcc	r5, r3
 80240ca:	0553      	lsls	r3, r2, #21
 80240cc:	d531      	bpl.n	8024132 <__ssputs_r+0xa0>
 80240ce:	4629      	mov	r1, r5
 80240d0:	f7fc f82a 	bl	8020128 <_malloc_r>
 80240d4:	4606      	mov	r6, r0
 80240d6:	b950      	cbnz	r0, 80240ee <__ssputs_r+0x5c>
 80240d8:	230c      	movs	r3, #12
 80240da:	f8ca 3000 	str.w	r3, [sl]
 80240de:	89a3      	ldrh	r3, [r4, #12]
 80240e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80240e4:	81a3      	strh	r3, [r4, #12]
 80240e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80240ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80240ee:	6921      	ldr	r1, [r4, #16]
 80240f0:	464a      	mov	r2, r9
 80240f2:	f7fb ff99 	bl	8020028 <memcpy>
 80240f6:	89a3      	ldrh	r3, [r4, #12]
 80240f8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80240fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024100:	81a3      	strh	r3, [r4, #12]
 8024102:	6126      	str	r6, [r4, #16]
 8024104:	6165      	str	r5, [r4, #20]
 8024106:	444e      	add	r6, r9
 8024108:	eba5 0509 	sub.w	r5, r5, r9
 802410c:	6026      	str	r6, [r4, #0]
 802410e:	60a5      	str	r5, [r4, #8]
 8024110:	463e      	mov	r6, r7
 8024112:	42be      	cmp	r6, r7
 8024114:	d900      	bls.n	8024118 <__ssputs_r+0x86>
 8024116:	463e      	mov	r6, r7
 8024118:	4632      	mov	r2, r6
 802411a:	6820      	ldr	r0, [r4, #0]
 802411c:	4641      	mov	r1, r8
 802411e:	f7fb ff91 	bl	8020044 <memmove>
 8024122:	68a3      	ldr	r3, [r4, #8]
 8024124:	6822      	ldr	r2, [r4, #0]
 8024126:	1b9b      	subs	r3, r3, r6
 8024128:	4432      	add	r2, r6
 802412a:	60a3      	str	r3, [r4, #8]
 802412c:	6022      	str	r2, [r4, #0]
 802412e:	2000      	movs	r0, #0
 8024130:	e7db      	b.n	80240ea <__ssputs_r+0x58>
 8024132:	462a      	mov	r2, r5
 8024134:	f000 fb1a 	bl	802476c <_realloc_r>
 8024138:	4606      	mov	r6, r0
 802413a:	2800      	cmp	r0, #0
 802413c:	d1e1      	bne.n	8024102 <__ssputs_r+0x70>
 802413e:	6921      	ldr	r1, [r4, #16]
 8024140:	4650      	mov	r0, sl
 8024142:	f7fb ffa1 	bl	8020088 <_free_r>
 8024146:	e7c7      	b.n	80240d8 <__ssputs_r+0x46>

08024148 <_svfiprintf_r>:
 8024148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802414c:	4698      	mov	r8, r3
 802414e:	898b      	ldrh	r3, [r1, #12]
 8024150:	061b      	lsls	r3, r3, #24
 8024152:	b09d      	sub	sp, #116	; 0x74
 8024154:	4607      	mov	r7, r0
 8024156:	460d      	mov	r5, r1
 8024158:	4614      	mov	r4, r2
 802415a:	d50e      	bpl.n	802417a <_svfiprintf_r+0x32>
 802415c:	690b      	ldr	r3, [r1, #16]
 802415e:	b963      	cbnz	r3, 802417a <_svfiprintf_r+0x32>
 8024160:	2140      	movs	r1, #64	; 0x40
 8024162:	f7fb ffe1 	bl	8020128 <_malloc_r>
 8024166:	6028      	str	r0, [r5, #0]
 8024168:	6128      	str	r0, [r5, #16]
 802416a:	b920      	cbnz	r0, 8024176 <_svfiprintf_r+0x2e>
 802416c:	230c      	movs	r3, #12
 802416e:	603b      	str	r3, [r7, #0]
 8024170:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024174:	e0d1      	b.n	802431a <_svfiprintf_r+0x1d2>
 8024176:	2340      	movs	r3, #64	; 0x40
 8024178:	616b      	str	r3, [r5, #20]
 802417a:	2300      	movs	r3, #0
 802417c:	9309      	str	r3, [sp, #36]	; 0x24
 802417e:	2320      	movs	r3, #32
 8024180:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8024184:	f8cd 800c 	str.w	r8, [sp, #12]
 8024188:	2330      	movs	r3, #48	; 0x30
 802418a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8024334 <_svfiprintf_r+0x1ec>
 802418e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8024192:	f04f 0901 	mov.w	r9, #1
 8024196:	4623      	mov	r3, r4
 8024198:	469a      	mov	sl, r3
 802419a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802419e:	b10a      	cbz	r2, 80241a4 <_svfiprintf_r+0x5c>
 80241a0:	2a25      	cmp	r2, #37	; 0x25
 80241a2:	d1f9      	bne.n	8024198 <_svfiprintf_r+0x50>
 80241a4:	ebba 0b04 	subs.w	fp, sl, r4
 80241a8:	d00b      	beq.n	80241c2 <_svfiprintf_r+0x7a>
 80241aa:	465b      	mov	r3, fp
 80241ac:	4622      	mov	r2, r4
 80241ae:	4629      	mov	r1, r5
 80241b0:	4638      	mov	r0, r7
 80241b2:	f7ff ff6e 	bl	8024092 <__ssputs_r>
 80241b6:	3001      	adds	r0, #1
 80241b8:	f000 80aa 	beq.w	8024310 <_svfiprintf_r+0x1c8>
 80241bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80241be:	445a      	add	r2, fp
 80241c0:	9209      	str	r2, [sp, #36]	; 0x24
 80241c2:	f89a 3000 	ldrb.w	r3, [sl]
 80241c6:	2b00      	cmp	r3, #0
 80241c8:	f000 80a2 	beq.w	8024310 <_svfiprintf_r+0x1c8>
 80241cc:	2300      	movs	r3, #0
 80241ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80241d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80241d6:	f10a 0a01 	add.w	sl, sl, #1
 80241da:	9304      	str	r3, [sp, #16]
 80241dc:	9307      	str	r3, [sp, #28]
 80241de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80241e2:	931a      	str	r3, [sp, #104]	; 0x68
 80241e4:	4654      	mov	r4, sl
 80241e6:	2205      	movs	r2, #5
 80241e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80241ec:	4851      	ldr	r0, [pc, #324]	; (8024334 <_svfiprintf_r+0x1ec>)
 80241ee:	f7dc f87f 	bl	80002f0 <memchr>
 80241f2:	9a04      	ldr	r2, [sp, #16]
 80241f4:	b9d8      	cbnz	r0, 802422e <_svfiprintf_r+0xe6>
 80241f6:	06d0      	lsls	r0, r2, #27
 80241f8:	bf44      	itt	mi
 80241fa:	2320      	movmi	r3, #32
 80241fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024200:	0711      	lsls	r1, r2, #28
 8024202:	bf44      	itt	mi
 8024204:	232b      	movmi	r3, #43	; 0x2b
 8024206:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802420a:	f89a 3000 	ldrb.w	r3, [sl]
 802420e:	2b2a      	cmp	r3, #42	; 0x2a
 8024210:	d015      	beq.n	802423e <_svfiprintf_r+0xf6>
 8024212:	9a07      	ldr	r2, [sp, #28]
 8024214:	4654      	mov	r4, sl
 8024216:	2000      	movs	r0, #0
 8024218:	f04f 0c0a 	mov.w	ip, #10
 802421c:	4621      	mov	r1, r4
 802421e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024222:	3b30      	subs	r3, #48	; 0x30
 8024224:	2b09      	cmp	r3, #9
 8024226:	d94e      	bls.n	80242c6 <_svfiprintf_r+0x17e>
 8024228:	b1b0      	cbz	r0, 8024258 <_svfiprintf_r+0x110>
 802422a:	9207      	str	r2, [sp, #28]
 802422c:	e014      	b.n	8024258 <_svfiprintf_r+0x110>
 802422e:	eba0 0308 	sub.w	r3, r0, r8
 8024232:	fa09 f303 	lsl.w	r3, r9, r3
 8024236:	4313      	orrs	r3, r2
 8024238:	9304      	str	r3, [sp, #16]
 802423a:	46a2      	mov	sl, r4
 802423c:	e7d2      	b.n	80241e4 <_svfiprintf_r+0x9c>
 802423e:	9b03      	ldr	r3, [sp, #12]
 8024240:	1d19      	adds	r1, r3, #4
 8024242:	681b      	ldr	r3, [r3, #0]
 8024244:	9103      	str	r1, [sp, #12]
 8024246:	2b00      	cmp	r3, #0
 8024248:	bfbb      	ittet	lt
 802424a:	425b      	neglt	r3, r3
 802424c:	f042 0202 	orrlt.w	r2, r2, #2
 8024250:	9307      	strge	r3, [sp, #28]
 8024252:	9307      	strlt	r3, [sp, #28]
 8024254:	bfb8      	it	lt
 8024256:	9204      	strlt	r2, [sp, #16]
 8024258:	7823      	ldrb	r3, [r4, #0]
 802425a:	2b2e      	cmp	r3, #46	; 0x2e
 802425c:	d10c      	bne.n	8024278 <_svfiprintf_r+0x130>
 802425e:	7863      	ldrb	r3, [r4, #1]
 8024260:	2b2a      	cmp	r3, #42	; 0x2a
 8024262:	d135      	bne.n	80242d0 <_svfiprintf_r+0x188>
 8024264:	9b03      	ldr	r3, [sp, #12]
 8024266:	1d1a      	adds	r2, r3, #4
 8024268:	681b      	ldr	r3, [r3, #0]
 802426a:	9203      	str	r2, [sp, #12]
 802426c:	2b00      	cmp	r3, #0
 802426e:	bfb8      	it	lt
 8024270:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8024274:	3402      	adds	r4, #2
 8024276:	9305      	str	r3, [sp, #20]
 8024278:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8024344 <_svfiprintf_r+0x1fc>
 802427c:	7821      	ldrb	r1, [r4, #0]
 802427e:	2203      	movs	r2, #3
 8024280:	4650      	mov	r0, sl
 8024282:	f7dc f835 	bl	80002f0 <memchr>
 8024286:	b140      	cbz	r0, 802429a <_svfiprintf_r+0x152>
 8024288:	2340      	movs	r3, #64	; 0x40
 802428a:	eba0 000a 	sub.w	r0, r0, sl
 802428e:	fa03 f000 	lsl.w	r0, r3, r0
 8024292:	9b04      	ldr	r3, [sp, #16]
 8024294:	4303      	orrs	r3, r0
 8024296:	3401      	adds	r4, #1
 8024298:	9304      	str	r3, [sp, #16]
 802429a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802429e:	4826      	ldr	r0, [pc, #152]	; (8024338 <_svfiprintf_r+0x1f0>)
 80242a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80242a4:	2206      	movs	r2, #6
 80242a6:	f7dc f823 	bl	80002f0 <memchr>
 80242aa:	2800      	cmp	r0, #0
 80242ac:	d038      	beq.n	8024320 <_svfiprintf_r+0x1d8>
 80242ae:	4b23      	ldr	r3, [pc, #140]	; (802433c <_svfiprintf_r+0x1f4>)
 80242b0:	bb1b      	cbnz	r3, 80242fa <_svfiprintf_r+0x1b2>
 80242b2:	9b03      	ldr	r3, [sp, #12]
 80242b4:	3307      	adds	r3, #7
 80242b6:	f023 0307 	bic.w	r3, r3, #7
 80242ba:	3308      	adds	r3, #8
 80242bc:	9303      	str	r3, [sp, #12]
 80242be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80242c0:	4433      	add	r3, r6
 80242c2:	9309      	str	r3, [sp, #36]	; 0x24
 80242c4:	e767      	b.n	8024196 <_svfiprintf_r+0x4e>
 80242c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80242ca:	460c      	mov	r4, r1
 80242cc:	2001      	movs	r0, #1
 80242ce:	e7a5      	b.n	802421c <_svfiprintf_r+0xd4>
 80242d0:	2300      	movs	r3, #0
 80242d2:	3401      	adds	r4, #1
 80242d4:	9305      	str	r3, [sp, #20]
 80242d6:	4619      	mov	r1, r3
 80242d8:	f04f 0c0a 	mov.w	ip, #10
 80242dc:	4620      	mov	r0, r4
 80242de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80242e2:	3a30      	subs	r2, #48	; 0x30
 80242e4:	2a09      	cmp	r2, #9
 80242e6:	d903      	bls.n	80242f0 <_svfiprintf_r+0x1a8>
 80242e8:	2b00      	cmp	r3, #0
 80242ea:	d0c5      	beq.n	8024278 <_svfiprintf_r+0x130>
 80242ec:	9105      	str	r1, [sp, #20]
 80242ee:	e7c3      	b.n	8024278 <_svfiprintf_r+0x130>
 80242f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80242f4:	4604      	mov	r4, r0
 80242f6:	2301      	movs	r3, #1
 80242f8:	e7f0      	b.n	80242dc <_svfiprintf_r+0x194>
 80242fa:	ab03      	add	r3, sp, #12
 80242fc:	9300      	str	r3, [sp, #0]
 80242fe:	462a      	mov	r2, r5
 8024300:	4b0f      	ldr	r3, [pc, #60]	; (8024340 <_svfiprintf_r+0x1f8>)
 8024302:	a904      	add	r1, sp, #16
 8024304:	4638      	mov	r0, r7
 8024306:	f7fb fffb 	bl	8020300 <_printf_float>
 802430a:	1c42      	adds	r2, r0, #1
 802430c:	4606      	mov	r6, r0
 802430e:	d1d6      	bne.n	80242be <_svfiprintf_r+0x176>
 8024310:	89ab      	ldrh	r3, [r5, #12]
 8024312:	065b      	lsls	r3, r3, #25
 8024314:	f53f af2c 	bmi.w	8024170 <_svfiprintf_r+0x28>
 8024318:	9809      	ldr	r0, [sp, #36]	; 0x24
 802431a:	b01d      	add	sp, #116	; 0x74
 802431c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024320:	ab03      	add	r3, sp, #12
 8024322:	9300      	str	r3, [sp, #0]
 8024324:	462a      	mov	r2, r5
 8024326:	4b06      	ldr	r3, [pc, #24]	; (8024340 <_svfiprintf_r+0x1f8>)
 8024328:	a904      	add	r1, sp, #16
 802432a:	4638      	mov	r0, r7
 802432c:	f7fc fa74 	bl	8020818 <_printf_i>
 8024330:	e7eb      	b.n	802430a <_svfiprintf_r+0x1c2>
 8024332:	bf00      	nop
 8024334:	080296f4 	.word	0x080296f4
 8024338:	080296fe 	.word	0x080296fe
 802433c:	08020301 	.word	0x08020301
 8024340:	08024093 	.word	0x08024093
 8024344:	080296fa 	.word	0x080296fa

08024348 <__sfputc_r>:
 8024348:	6893      	ldr	r3, [r2, #8]
 802434a:	3b01      	subs	r3, #1
 802434c:	2b00      	cmp	r3, #0
 802434e:	b410      	push	{r4}
 8024350:	6093      	str	r3, [r2, #8]
 8024352:	da08      	bge.n	8024366 <__sfputc_r+0x1e>
 8024354:	6994      	ldr	r4, [r2, #24]
 8024356:	42a3      	cmp	r3, r4
 8024358:	db01      	blt.n	802435e <__sfputc_r+0x16>
 802435a:	290a      	cmp	r1, #10
 802435c:	d103      	bne.n	8024366 <__sfputc_r+0x1e>
 802435e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024362:	f7fd bd17 	b.w	8021d94 <__swbuf_r>
 8024366:	6813      	ldr	r3, [r2, #0]
 8024368:	1c58      	adds	r0, r3, #1
 802436a:	6010      	str	r0, [r2, #0]
 802436c:	7019      	strb	r1, [r3, #0]
 802436e:	4608      	mov	r0, r1
 8024370:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024374:	4770      	bx	lr

08024376 <__sfputs_r>:
 8024376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024378:	4606      	mov	r6, r0
 802437a:	460f      	mov	r7, r1
 802437c:	4614      	mov	r4, r2
 802437e:	18d5      	adds	r5, r2, r3
 8024380:	42ac      	cmp	r4, r5
 8024382:	d101      	bne.n	8024388 <__sfputs_r+0x12>
 8024384:	2000      	movs	r0, #0
 8024386:	e007      	b.n	8024398 <__sfputs_r+0x22>
 8024388:	f814 1b01 	ldrb.w	r1, [r4], #1
 802438c:	463a      	mov	r2, r7
 802438e:	4630      	mov	r0, r6
 8024390:	f7ff ffda 	bl	8024348 <__sfputc_r>
 8024394:	1c43      	adds	r3, r0, #1
 8024396:	d1f3      	bne.n	8024380 <__sfputs_r+0xa>
 8024398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802439c <_vfiprintf_r>:
 802439c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80243a0:	460d      	mov	r5, r1
 80243a2:	b09d      	sub	sp, #116	; 0x74
 80243a4:	4614      	mov	r4, r2
 80243a6:	4698      	mov	r8, r3
 80243a8:	4606      	mov	r6, r0
 80243aa:	b118      	cbz	r0, 80243b4 <_vfiprintf_r+0x18>
 80243ac:	6983      	ldr	r3, [r0, #24]
 80243ae:	b90b      	cbnz	r3, 80243b4 <_vfiprintf_r+0x18>
 80243b0:	f7fe fcfc 	bl	8022dac <__sinit>
 80243b4:	4b89      	ldr	r3, [pc, #548]	; (80245dc <_vfiprintf_r+0x240>)
 80243b6:	429d      	cmp	r5, r3
 80243b8:	d11b      	bne.n	80243f2 <_vfiprintf_r+0x56>
 80243ba:	6875      	ldr	r5, [r6, #4]
 80243bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80243be:	07d9      	lsls	r1, r3, #31
 80243c0:	d405      	bmi.n	80243ce <_vfiprintf_r+0x32>
 80243c2:	89ab      	ldrh	r3, [r5, #12]
 80243c4:	059a      	lsls	r2, r3, #22
 80243c6:	d402      	bmi.n	80243ce <_vfiprintf_r+0x32>
 80243c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80243ca:	f7ff f912 	bl	80235f2 <__retarget_lock_acquire_recursive>
 80243ce:	89ab      	ldrh	r3, [r5, #12]
 80243d0:	071b      	lsls	r3, r3, #28
 80243d2:	d501      	bpl.n	80243d8 <_vfiprintf_r+0x3c>
 80243d4:	692b      	ldr	r3, [r5, #16]
 80243d6:	b9eb      	cbnz	r3, 8024414 <_vfiprintf_r+0x78>
 80243d8:	4629      	mov	r1, r5
 80243da:	4630      	mov	r0, r6
 80243dc:	f7fd fd2c 	bl	8021e38 <__swsetup_r>
 80243e0:	b1c0      	cbz	r0, 8024414 <_vfiprintf_r+0x78>
 80243e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80243e4:	07dc      	lsls	r4, r3, #31
 80243e6:	d50e      	bpl.n	8024406 <_vfiprintf_r+0x6a>
 80243e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80243ec:	b01d      	add	sp, #116	; 0x74
 80243ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80243f2:	4b7b      	ldr	r3, [pc, #492]	; (80245e0 <_vfiprintf_r+0x244>)
 80243f4:	429d      	cmp	r5, r3
 80243f6:	d101      	bne.n	80243fc <_vfiprintf_r+0x60>
 80243f8:	68b5      	ldr	r5, [r6, #8]
 80243fa:	e7df      	b.n	80243bc <_vfiprintf_r+0x20>
 80243fc:	4b79      	ldr	r3, [pc, #484]	; (80245e4 <_vfiprintf_r+0x248>)
 80243fe:	429d      	cmp	r5, r3
 8024400:	bf08      	it	eq
 8024402:	68f5      	ldreq	r5, [r6, #12]
 8024404:	e7da      	b.n	80243bc <_vfiprintf_r+0x20>
 8024406:	89ab      	ldrh	r3, [r5, #12]
 8024408:	0598      	lsls	r0, r3, #22
 802440a:	d4ed      	bmi.n	80243e8 <_vfiprintf_r+0x4c>
 802440c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802440e:	f7ff f8f1 	bl	80235f4 <__retarget_lock_release_recursive>
 8024412:	e7e9      	b.n	80243e8 <_vfiprintf_r+0x4c>
 8024414:	2300      	movs	r3, #0
 8024416:	9309      	str	r3, [sp, #36]	; 0x24
 8024418:	2320      	movs	r3, #32
 802441a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802441e:	f8cd 800c 	str.w	r8, [sp, #12]
 8024422:	2330      	movs	r3, #48	; 0x30
 8024424:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80245e8 <_vfiprintf_r+0x24c>
 8024428:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802442c:	f04f 0901 	mov.w	r9, #1
 8024430:	4623      	mov	r3, r4
 8024432:	469a      	mov	sl, r3
 8024434:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024438:	b10a      	cbz	r2, 802443e <_vfiprintf_r+0xa2>
 802443a:	2a25      	cmp	r2, #37	; 0x25
 802443c:	d1f9      	bne.n	8024432 <_vfiprintf_r+0x96>
 802443e:	ebba 0b04 	subs.w	fp, sl, r4
 8024442:	d00b      	beq.n	802445c <_vfiprintf_r+0xc0>
 8024444:	465b      	mov	r3, fp
 8024446:	4622      	mov	r2, r4
 8024448:	4629      	mov	r1, r5
 802444a:	4630      	mov	r0, r6
 802444c:	f7ff ff93 	bl	8024376 <__sfputs_r>
 8024450:	3001      	adds	r0, #1
 8024452:	f000 80aa 	beq.w	80245aa <_vfiprintf_r+0x20e>
 8024456:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024458:	445a      	add	r2, fp
 802445a:	9209      	str	r2, [sp, #36]	; 0x24
 802445c:	f89a 3000 	ldrb.w	r3, [sl]
 8024460:	2b00      	cmp	r3, #0
 8024462:	f000 80a2 	beq.w	80245aa <_vfiprintf_r+0x20e>
 8024466:	2300      	movs	r3, #0
 8024468:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802446c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024470:	f10a 0a01 	add.w	sl, sl, #1
 8024474:	9304      	str	r3, [sp, #16]
 8024476:	9307      	str	r3, [sp, #28]
 8024478:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802447c:	931a      	str	r3, [sp, #104]	; 0x68
 802447e:	4654      	mov	r4, sl
 8024480:	2205      	movs	r2, #5
 8024482:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024486:	4858      	ldr	r0, [pc, #352]	; (80245e8 <_vfiprintf_r+0x24c>)
 8024488:	f7db ff32 	bl	80002f0 <memchr>
 802448c:	9a04      	ldr	r2, [sp, #16]
 802448e:	b9d8      	cbnz	r0, 80244c8 <_vfiprintf_r+0x12c>
 8024490:	06d1      	lsls	r1, r2, #27
 8024492:	bf44      	itt	mi
 8024494:	2320      	movmi	r3, #32
 8024496:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802449a:	0713      	lsls	r3, r2, #28
 802449c:	bf44      	itt	mi
 802449e:	232b      	movmi	r3, #43	; 0x2b
 80244a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80244a4:	f89a 3000 	ldrb.w	r3, [sl]
 80244a8:	2b2a      	cmp	r3, #42	; 0x2a
 80244aa:	d015      	beq.n	80244d8 <_vfiprintf_r+0x13c>
 80244ac:	9a07      	ldr	r2, [sp, #28]
 80244ae:	4654      	mov	r4, sl
 80244b0:	2000      	movs	r0, #0
 80244b2:	f04f 0c0a 	mov.w	ip, #10
 80244b6:	4621      	mov	r1, r4
 80244b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80244bc:	3b30      	subs	r3, #48	; 0x30
 80244be:	2b09      	cmp	r3, #9
 80244c0:	d94e      	bls.n	8024560 <_vfiprintf_r+0x1c4>
 80244c2:	b1b0      	cbz	r0, 80244f2 <_vfiprintf_r+0x156>
 80244c4:	9207      	str	r2, [sp, #28]
 80244c6:	e014      	b.n	80244f2 <_vfiprintf_r+0x156>
 80244c8:	eba0 0308 	sub.w	r3, r0, r8
 80244cc:	fa09 f303 	lsl.w	r3, r9, r3
 80244d0:	4313      	orrs	r3, r2
 80244d2:	9304      	str	r3, [sp, #16]
 80244d4:	46a2      	mov	sl, r4
 80244d6:	e7d2      	b.n	802447e <_vfiprintf_r+0xe2>
 80244d8:	9b03      	ldr	r3, [sp, #12]
 80244da:	1d19      	adds	r1, r3, #4
 80244dc:	681b      	ldr	r3, [r3, #0]
 80244de:	9103      	str	r1, [sp, #12]
 80244e0:	2b00      	cmp	r3, #0
 80244e2:	bfbb      	ittet	lt
 80244e4:	425b      	neglt	r3, r3
 80244e6:	f042 0202 	orrlt.w	r2, r2, #2
 80244ea:	9307      	strge	r3, [sp, #28]
 80244ec:	9307      	strlt	r3, [sp, #28]
 80244ee:	bfb8      	it	lt
 80244f0:	9204      	strlt	r2, [sp, #16]
 80244f2:	7823      	ldrb	r3, [r4, #0]
 80244f4:	2b2e      	cmp	r3, #46	; 0x2e
 80244f6:	d10c      	bne.n	8024512 <_vfiprintf_r+0x176>
 80244f8:	7863      	ldrb	r3, [r4, #1]
 80244fa:	2b2a      	cmp	r3, #42	; 0x2a
 80244fc:	d135      	bne.n	802456a <_vfiprintf_r+0x1ce>
 80244fe:	9b03      	ldr	r3, [sp, #12]
 8024500:	1d1a      	adds	r2, r3, #4
 8024502:	681b      	ldr	r3, [r3, #0]
 8024504:	9203      	str	r2, [sp, #12]
 8024506:	2b00      	cmp	r3, #0
 8024508:	bfb8      	it	lt
 802450a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 802450e:	3402      	adds	r4, #2
 8024510:	9305      	str	r3, [sp, #20]
 8024512:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80245f8 <_vfiprintf_r+0x25c>
 8024516:	7821      	ldrb	r1, [r4, #0]
 8024518:	2203      	movs	r2, #3
 802451a:	4650      	mov	r0, sl
 802451c:	f7db fee8 	bl	80002f0 <memchr>
 8024520:	b140      	cbz	r0, 8024534 <_vfiprintf_r+0x198>
 8024522:	2340      	movs	r3, #64	; 0x40
 8024524:	eba0 000a 	sub.w	r0, r0, sl
 8024528:	fa03 f000 	lsl.w	r0, r3, r0
 802452c:	9b04      	ldr	r3, [sp, #16]
 802452e:	4303      	orrs	r3, r0
 8024530:	3401      	adds	r4, #1
 8024532:	9304      	str	r3, [sp, #16]
 8024534:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024538:	482c      	ldr	r0, [pc, #176]	; (80245ec <_vfiprintf_r+0x250>)
 802453a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802453e:	2206      	movs	r2, #6
 8024540:	f7db fed6 	bl	80002f0 <memchr>
 8024544:	2800      	cmp	r0, #0
 8024546:	d03f      	beq.n	80245c8 <_vfiprintf_r+0x22c>
 8024548:	4b29      	ldr	r3, [pc, #164]	; (80245f0 <_vfiprintf_r+0x254>)
 802454a:	bb1b      	cbnz	r3, 8024594 <_vfiprintf_r+0x1f8>
 802454c:	9b03      	ldr	r3, [sp, #12]
 802454e:	3307      	adds	r3, #7
 8024550:	f023 0307 	bic.w	r3, r3, #7
 8024554:	3308      	adds	r3, #8
 8024556:	9303      	str	r3, [sp, #12]
 8024558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802455a:	443b      	add	r3, r7
 802455c:	9309      	str	r3, [sp, #36]	; 0x24
 802455e:	e767      	b.n	8024430 <_vfiprintf_r+0x94>
 8024560:	fb0c 3202 	mla	r2, ip, r2, r3
 8024564:	460c      	mov	r4, r1
 8024566:	2001      	movs	r0, #1
 8024568:	e7a5      	b.n	80244b6 <_vfiprintf_r+0x11a>
 802456a:	2300      	movs	r3, #0
 802456c:	3401      	adds	r4, #1
 802456e:	9305      	str	r3, [sp, #20]
 8024570:	4619      	mov	r1, r3
 8024572:	f04f 0c0a 	mov.w	ip, #10
 8024576:	4620      	mov	r0, r4
 8024578:	f810 2b01 	ldrb.w	r2, [r0], #1
 802457c:	3a30      	subs	r2, #48	; 0x30
 802457e:	2a09      	cmp	r2, #9
 8024580:	d903      	bls.n	802458a <_vfiprintf_r+0x1ee>
 8024582:	2b00      	cmp	r3, #0
 8024584:	d0c5      	beq.n	8024512 <_vfiprintf_r+0x176>
 8024586:	9105      	str	r1, [sp, #20]
 8024588:	e7c3      	b.n	8024512 <_vfiprintf_r+0x176>
 802458a:	fb0c 2101 	mla	r1, ip, r1, r2
 802458e:	4604      	mov	r4, r0
 8024590:	2301      	movs	r3, #1
 8024592:	e7f0      	b.n	8024576 <_vfiprintf_r+0x1da>
 8024594:	ab03      	add	r3, sp, #12
 8024596:	9300      	str	r3, [sp, #0]
 8024598:	462a      	mov	r2, r5
 802459a:	4b16      	ldr	r3, [pc, #88]	; (80245f4 <_vfiprintf_r+0x258>)
 802459c:	a904      	add	r1, sp, #16
 802459e:	4630      	mov	r0, r6
 80245a0:	f7fb feae 	bl	8020300 <_printf_float>
 80245a4:	4607      	mov	r7, r0
 80245a6:	1c78      	adds	r0, r7, #1
 80245a8:	d1d6      	bne.n	8024558 <_vfiprintf_r+0x1bc>
 80245aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80245ac:	07d9      	lsls	r1, r3, #31
 80245ae:	d405      	bmi.n	80245bc <_vfiprintf_r+0x220>
 80245b0:	89ab      	ldrh	r3, [r5, #12]
 80245b2:	059a      	lsls	r2, r3, #22
 80245b4:	d402      	bmi.n	80245bc <_vfiprintf_r+0x220>
 80245b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80245b8:	f7ff f81c 	bl	80235f4 <__retarget_lock_release_recursive>
 80245bc:	89ab      	ldrh	r3, [r5, #12]
 80245be:	065b      	lsls	r3, r3, #25
 80245c0:	f53f af12 	bmi.w	80243e8 <_vfiprintf_r+0x4c>
 80245c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80245c6:	e711      	b.n	80243ec <_vfiprintf_r+0x50>
 80245c8:	ab03      	add	r3, sp, #12
 80245ca:	9300      	str	r3, [sp, #0]
 80245cc:	462a      	mov	r2, r5
 80245ce:	4b09      	ldr	r3, [pc, #36]	; (80245f4 <_vfiprintf_r+0x258>)
 80245d0:	a904      	add	r1, sp, #16
 80245d2:	4630      	mov	r0, r6
 80245d4:	f7fc f920 	bl	8020818 <_printf_i>
 80245d8:	e7e4      	b.n	80245a4 <_vfiprintf_r+0x208>
 80245da:	bf00      	nop
 80245dc:	080294d4 	.word	0x080294d4
 80245e0:	080294f4 	.word	0x080294f4
 80245e4:	080294b4 	.word	0x080294b4
 80245e8:	080296f4 	.word	0x080296f4
 80245ec:	080296fe 	.word	0x080296fe
 80245f0:	08020301 	.word	0x08020301
 80245f4:	08024377 	.word	0x08024377
 80245f8:	080296fa 	.word	0x080296fa
 80245fc:	00000000 	.word	0x00000000

08024600 <nan>:
 8024600:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8024608 <nan+0x8>
 8024604:	4770      	bx	lr
 8024606:	bf00      	nop
 8024608:	00000000 	.word	0x00000000
 802460c:	7ff80000 	.word	0x7ff80000

08024610 <__sread>:
 8024610:	b510      	push	{r4, lr}
 8024612:	460c      	mov	r4, r1
 8024614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024618:	f000 f8ce 	bl	80247b8 <_read_r>
 802461c:	2800      	cmp	r0, #0
 802461e:	bfab      	itete	ge
 8024620:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8024622:	89a3      	ldrhlt	r3, [r4, #12]
 8024624:	181b      	addge	r3, r3, r0
 8024626:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802462a:	bfac      	ite	ge
 802462c:	6563      	strge	r3, [r4, #84]	; 0x54
 802462e:	81a3      	strhlt	r3, [r4, #12]
 8024630:	bd10      	pop	{r4, pc}

08024632 <__swrite>:
 8024632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024636:	461f      	mov	r7, r3
 8024638:	898b      	ldrh	r3, [r1, #12]
 802463a:	05db      	lsls	r3, r3, #23
 802463c:	4605      	mov	r5, r0
 802463e:	460c      	mov	r4, r1
 8024640:	4616      	mov	r6, r2
 8024642:	d505      	bpl.n	8024650 <__swrite+0x1e>
 8024644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024648:	2302      	movs	r3, #2
 802464a:	2200      	movs	r2, #0
 802464c:	f000 f87c 	bl	8024748 <_lseek_r>
 8024650:	89a3      	ldrh	r3, [r4, #12]
 8024652:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024656:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802465a:	81a3      	strh	r3, [r4, #12]
 802465c:	4632      	mov	r2, r6
 802465e:	463b      	mov	r3, r7
 8024660:	4628      	mov	r0, r5
 8024662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024666:	f000 b823 	b.w	80246b0 <_write_r>

0802466a <__sseek>:
 802466a:	b510      	push	{r4, lr}
 802466c:	460c      	mov	r4, r1
 802466e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024672:	f000 f869 	bl	8024748 <_lseek_r>
 8024676:	1c43      	adds	r3, r0, #1
 8024678:	89a3      	ldrh	r3, [r4, #12]
 802467a:	bf15      	itete	ne
 802467c:	6560      	strne	r0, [r4, #84]	; 0x54
 802467e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8024682:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8024686:	81a3      	strheq	r3, [r4, #12]
 8024688:	bf18      	it	ne
 802468a:	81a3      	strhne	r3, [r4, #12]
 802468c:	bd10      	pop	{r4, pc}

0802468e <__sclose>:
 802468e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024692:	f000 b827 	b.w	80246e4 <_close_r>

08024696 <__ascii_wctomb>:
 8024696:	b149      	cbz	r1, 80246ac <__ascii_wctomb+0x16>
 8024698:	2aff      	cmp	r2, #255	; 0xff
 802469a:	bf85      	ittet	hi
 802469c:	238a      	movhi	r3, #138	; 0x8a
 802469e:	6003      	strhi	r3, [r0, #0]
 80246a0:	700a      	strbls	r2, [r1, #0]
 80246a2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80246a6:	bf98      	it	ls
 80246a8:	2001      	movls	r0, #1
 80246aa:	4770      	bx	lr
 80246ac:	4608      	mov	r0, r1
 80246ae:	4770      	bx	lr

080246b0 <_write_r>:
 80246b0:	b538      	push	{r3, r4, r5, lr}
 80246b2:	4d07      	ldr	r5, [pc, #28]	; (80246d0 <_write_r+0x20>)
 80246b4:	4604      	mov	r4, r0
 80246b6:	4608      	mov	r0, r1
 80246b8:	4611      	mov	r1, r2
 80246ba:	2200      	movs	r2, #0
 80246bc:	602a      	str	r2, [r5, #0]
 80246be:	461a      	mov	r2, r3
 80246c0:	f7de fd25 	bl	800310e <_write>
 80246c4:	1c43      	adds	r3, r0, #1
 80246c6:	d102      	bne.n	80246ce <_write_r+0x1e>
 80246c8:	682b      	ldr	r3, [r5, #0]
 80246ca:	b103      	cbz	r3, 80246ce <_write_r+0x1e>
 80246cc:	6023      	str	r3, [r4, #0]
 80246ce:	bd38      	pop	{r3, r4, r5, pc}
 80246d0:	2400cad4 	.word	0x2400cad4

080246d4 <abort>:
 80246d4:	b508      	push	{r3, lr}
 80246d6:	2006      	movs	r0, #6
 80246d8:	f000 f8a8 	bl	802482c <raise>
 80246dc:	2001      	movs	r0, #1
 80246de:	f7de fcef 	bl	80030c0 <_exit>
	...

080246e4 <_close_r>:
 80246e4:	b538      	push	{r3, r4, r5, lr}
 80246e6:	4d06      	ldr	r5, [pc, #24]	; (8024700 <_close_r+0x1c>)
 80246e8:	2300      	movs	r3, #0
 80246ea:	4604      	mov	r4, r0
 80246ec:	4608      	mov	r0, r1
 80246ee:	602b      	str	r3, [r5, #0]
 80246f0:	f7de fd29 	bl	8003146 <_close>
 80246f4:	1c43      	adds	r3, r0, #1
 80246f6:	d102      	bne.n	80246fe <_close_r+0x1a>
 80246f8:	682b      	ldr	r3, [r5, #0]
 80246fa:	b103      	cbz	r3, 80246fe <_close_r+0x1a>
 80246fc:	6023      	str	r3, [r4, #0]
 80246fe:	bd38      	pop	{r3, r4, r5, pc}
 8024700:	2400cad4 	.word	0x2400cad4

08024704 <_fstat_r>:
 8024704:	b538      	push	{r3, r4, r5, lr}
 8024706:	4d07      	ldr	r5, [pc, #28]	; (8024724 <_fstat_r+0x20>)
 8024708:	2300      	movs	r3, #0
 802470a:	4604      	mov	r4, r0
 802470c:	4608      	mov	r0, r1
 802470e:	4611      	mov	r1, r2
 8024710:	602b      	str	r3, [r5, #0]
 8024712:	f7de fd24 	bl	800315e <_fstat>
 8024716:	1c43      	adds	r3, r0, #1
 8024718:	d102      	bne.n	8024720 <_fstat_r+0x1c>
 802471a:	682b      	ldr	r3, [r5, #0]
 802471c:	b103      	cbz	r3, 8024720 <_fstat_r+0x1c>
 802471e:	6023      	str	r3, [r4, #0]
 8024720:	bd38      	pop	{r3, r4, r5, pc}
 8024722:	bf00      	nop
 8024724:	2400cad4 	.word	0x2400cad4

08024728 <_isatty_r>:
 8024728:	b538      	push	{r3, r4, r5, lr}
 802472a:	4d06      	ldr	r5, [pc, #24]	; (8024744 <_isatty_r+0x1c>)
 802472c:	2300      	movs	r3, #0
 802472e:	4604      	mov	r4, r0
 8024730:	4608      	mov	r0, r1
 8024732:	602b      	str	r3, [r5, #0]
 8024734:	f7de fd23 	bl	800317e <_isatty>
 8024738:	1c43      	adds	r3, r0, #1
 802473a:	d102      	bne.n	8024742 <_isatty_r+0x1a>
 802473c:	682b      	ldr	r3, [r5, #0]
 802473e:	b103      	cbz	r3, 8024742 <_isatty_r+0x1a>
 8024740:	6023      	str	r3, [r4, #0]
 8024742:	bd38      	pop	{r3, r4, r5, pc}
 8024744:	2400cad4 	.word	0x2400cad4

08024748 <_lseek_r>:
 8024748:	b538      	push	{r3, r4, r5, lr}
 802474a:	4d07      	ldr	r5, [pc, #28]	; (8024768 <_lseek_r+0x20>)
 802474c:	4604      	mov	r4, r0
 802474e:	4608      	mov	r0, r1
 8024750:	4611      	mov	r1, r2
 8024752:	2200      	movs	r2, #0
 8024754:	602a      	str	r2, [r5, #0]
 8024756:	461a      	mov	r2, r3
 8024758:	f7de fd1c 	bl	8003194 <_lseek>
 802475c:	1c43      	adds	r3, r0, #1
 802475e:	d102      	bne.n	8024766 <_lseek_r+0x1e>
 8024760:	682b      	ldr	r3, [r5, #0]
 8024762:	b103      	cbz	r3, 8024766 <_lseek_r+0x1e>
 8024764:	6023      	str	r3, [r4, #0]
 8024766:	bd38      	pop	{r3, r4, r5, pc}
 8024768:	2400cad4 	.word	0x2400cad4

0802476c <_realloc_r>:
 802476c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802476e:	4607      	mov	r7, r0
 8024770:	4614      	mov	r4, r2
 8024772:	460e      	mov	r6, r1
 8024774:	b921      	cbnz	r1, 8024780 <_realloc_r+0x14>
 8024776:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802477a:	4611      	mov	r1, r2
 802477c:	f7fb bcd4 	b.w	8020128 <_malloc_r>
 8024780:	b922      	cbnz	r2, 802478c <_realloc_r+0x20>
 8024782:	f7fb fc81 	bl	8020088 <_free_r>
 8024786:	4625      	mov	r5, r4
 8024788:	4628      	mov	r0, r5
 802478a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802478c:	f000 f86a 	bl	8024864 <_malloc_usable_size_r>
 8024790:	42a0      	cmp	r0, r4
 8024792:	d20f      	bcs.n	80247b4 <_realloc_r+0x48>
 8024794:	4621      	mov	r1, r4
 8024796:	4638      	mov	r0, r7
 8024798:	f7fb fcc6 	bl	8020128 <_malloc_r>
 802479c:	4605      	mov	r5, r0
 802479e:	2800      	cmp	r0, #0
 80247a0:	d0f2      	beq.n	8024788 <_realloc_r+0x1c>
 80247a2:	4631      	mov	r1, r6
 80247a4:	4622      	mov	r2, r4
 80247a6:	f7fb fc3f 	bl	8020028 <memcpy>
 80247aa:	4631      	mov	r1, r6
 80247ac:	4638      	mov	r0, r7
 80247ae:	f7fb fc6b 	bl	8020088 <_free_r>
 80247b2:	e7e9      	b.n	8024788 <_realloc_r+0x1c>
 80247b4:	4635      	mov	r5, r6
 80247b6:	e7e7      	b.n	8024788 <_realloc_r+0x1c>

080247b8 <_read_r>:
 80247b8:	b538      	push	{r3, r4, r5, lr}
 80247ba:	4d07      	ldr	r5, [pc, #28]	; (80247d8 <_read_r+0x20>)
 80247bc:	4604      	mov	r4, r0
 80247be:	4608      	mov	r0, r1
 80247c0:	4611      	mov	r1, r2
 80247c2:	2200      	movs	r2, #0
 80247c4:	602a      	str	r2, [r5, #0]
 80247c6:	461a      	mov	r2, r3
 80247c8:	f7de fc84 	bl	80030d4 <_read>
 80247cc:	1c43      	adds	r3, r0, #1
 80247ce:	d102      	bne.n	80247d6 <_read_r+0x1e>
 80247d0:	682b      	ldr	r3, [r5, #0]
 80247d2:	b103      	cbz	r3, 80247d6 <_read_r+0x1e>
 80247d4:	6023      	str	r3, [r4, #0]
 80247d6:	bd38      	pop	{r3, r4, r5, pc}
 80247d8:	2400cad4 	.word	0x2400cad4

080247dc <_raise_r>:
 80247dc:	291f      	cmp	r1, #31
 80247de:	b538      	push	{r3, r4, r5, lr}
 80247e0:	4604      	mov	r4, r0
 80247e2:	460d      	mov	r5, r1
 80247e4:	d904      	bls.n	80247f0 <_raise_r+0x14>
 80247e6:	2316      	movs	r3, #22
 80247e8:	6003      	str	r3, [r0, #0]
 80247ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80247ee:	bd38      	pop	{r3, r4, r5, pc}
 80247f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80247f2:	b112      	cbz	r2, 80247fa <_raise_r+0x1e>
 80247f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80247f8:	b94b      	cbnz	r3, 802480e <_raise_r+0x32>
 80247fa:	4620      	mov	r0, r4
 80247fc:	f000 f830 	bl	8024860 <_getpid_r>
 8024800:	462a      	mov	r2, r5
 8024802:	4601      	mov	r1, r0
 8024804:	4620      	mov	r0, r4
 8024806:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802480a:	f000 b817 	b.w	802483c <_kill_r>
 802480e:	2b01      	cmp	r3, #1
 8024810:	d00a      	beq.n	8024828 <_raise_r+0x4c>
 8024812:	1c59      	adds	r1, r3, #1
 8024814:	d103      	bne.n	802481e <_raise_r+0x42>
 8024816:	2316      	movs	r3, #22
 8024818:	6003      	str	r3, [r0, #0]
 802481a:	2001      	movs	r0, #1
 802481c:	e7e7      	b.n	80247ee <_raise_r+0x12>
 802481e:	2400      	movs	r4, #0
 8024820:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8024824:	4628      	mov	r0, r5
 8024826:	4798      	blx	r3
 8024828:	2000      	movs	r0, #0
 802482a:	e7e0      	b.n	80247ee <_raise_r+0x12>

0802482c <raise>:
 802482c:	4b02      	ldr	r3, [pc, #8]	; (8024838 <raise+0xc>)
 802482e:	4601      	mov	r1, r0
 8024830:	6818      	ldr	r0, [r3, #0]
 8024832:	f7ff bfd3 	b.w	80247dc <_raise_r>
 8024836:	bf00      	nop
 8024838:	24003450 	.word	0x24003450

0802483c <_kill_r>:
 802483c:	b538      	push	{r3, r4, r5, lr}
 802483e:	4d07      	ldr	r5, [pc, #28]	; (802485c <_kill_r+0x20>)
 8024840:	2300      	movs	r3, #0
 8024842:	4604      	mov	r4, r0
 8024844:	4608      	mov	r0, r1
 8024846:	4611      	mov	r1, r2
 8024848:	602b      	str	r3, [r5, #0]
 802484a:	f7de fc27 	bl	800309c <_kill>
 802484e:	1c43      	adds	r3, r0, #1
 8024850:	d102      	bne.n	8024858 <_kill_r+0x1c>
 8024852:	682b      	ldr	r3, [r5, #0]
 8024854:	b103      	cbz	r3, 8024858 <_kill_r+0x1c>
 8024856:	6023      	str	r3, [r4, #0]
 8024858:	bd38      	pop	{r3, r4, r5, pc}
 802485a:	bf00      	nop
 802485c:	2400cad4 	.word	0x2400cad4

08024860 <_getpid_r>:
 8024860:	f7de bc14 	b.w	800308c <_getpid>

08024864 <_malloc_usable_size_r>:
 8024864:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024868:	1f18      	subs	r0, r3, #4
 802486a:	2b00      	cmp	r3, #0
 802486c:	bfbc      	itt	lt
 802486e:	580b      	ldrlt	r3, [r1, r0]
 8024870:	18c0      	addlt	r0, r0, r3
 8024872:	4770      	bx	lr

08024874 <checkint>:
 8024874:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8024878:	f240 33fe 	movw	r3, #1022	; 0x3fe
 802487c:	429a      	cmp	r2, r3
 802487e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024880:	dd2b      	ble.n	80248da <checkint+0x66>
 8024882:	f240 4333 	movw	r3, #1075	; 0x433
 8024886:	429a      	cmp	r2, r3
 8024888:	dc25      	bgt.n	80248d6 <checkint+0x62>
 802488a:	1a9b      	subs	r3, r3, r2
 802488c:	f1a3 0620 	sub.w	r6, r3, #32
 8024890:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024894:	fa02 f606 	lsl.w	r6, r2, r6
 8024898:	fa02 f403 	lsl.w	r4, r2, r3
 802489c:	f1c3 0520 	rsb	r5, r3, #32
 80248a0:	4334      	orrs	r4, r6
 80248a2:	fa22 f505 	lsr.w	r5, r2, r5
 80248a6:	432c      	orrs	r4, r5
 80248a8:	409a      	lsls	r2, r3
 80248aa:	ea20 0602 	bic.w	r6, r0, r2
 80248ae:	ea21 0704 	bic.w	r7, r1, r4
 80248b2:	ea56 0207 	orrs.w	r2, r6, r7
 80248b6:	f1a3 0420 	sub.w	r4, r3, #32
 80248ba:	f1c3 0220 	rsb	r2, r3, #32
 80248be:	d10c      	bne.n	80248da <checkint+0x66>
 80248c0:	40d8      	lsrs	r0, r3
 80248c2:	fa01 f302 	lsl.w	r3, r1, r2
 80248c6:	4318      	orrs	r0, r3
 80248c8:	40e1      	lsrs	r1, r4
 80248ca:	4308      	orrs	r0, r1
 80248cc:	f000 0301 	and.w	r3, r0, #1
 80248d0:	f1c3 0002 	rsb	r0, r3, #2
 80248d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80248d6:	2002      	movs	r0, #2
 80248d8:	e7fc      	b.n	80248d4 <checkint+0x60>
 80248da:	2000      	movs	r0, #0
 80248dc:	e7fa      	b.n	80248d4 <checkint+0x60>
	...

080248e0 <pow>:
 80248e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80248e4:	ed2d 8b0a 	vpush	{d8-d12}
 80248e8:	b09b      	sub	sp, #108	; 0x6c
 80248ea:	ed8d 0b02 	vstr	d0, [sp, #8]
 80248ee:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80248f2:	ed8d 1b00 	vstr	d1, [sp]
 80248f6:	ea4f 5915 	mov.w	r9, r5, lsr #20
 80248fa:	e9dd 6700 	ldrd	r6, r7, [sp]
 80248fe:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8024902:	f240 71fd 	movw	r1, #2045	; 0x7fd
 8024906:	4288      	cmp	r0, r1
 8024908:	46cc      	mov	ip, r9
 802490a:	ea4f 5817 	mov.w	r8, r7, lsr #20
 802490e:	d806      	bhi.n	802491e <pow+0x3e>
 8024910:	f3c8 010a 	ubfx	r1, r8, #0, #11
 8024914:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 8024918:	297f      	cmp	r1, #127	; 0x7f
 802491a:	f240 81ab 	bls.w	8024c74 <pow+0x394>
 802491e:	19b1      	adds	r1, r6, r6
 8024920:	9104      	str	r1, [sp, #16]
 8024922:	eb47 0107 	adc.w	r1, r7, r7
 8024926:	9105      	str	r1, [sp, #20]
 8024928:	9904      	ldr	r1, [sp, #16]
 802492a:	f111 31ff 	adds.w	r1, r1, #4294967295	; 0xffffffff
 802492e:	460a      	mov	r2, r1
 8024930:	9905      	ldr	r1, [sp, #20]
 8024932:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 8024936:	460b      	mov	r3, r1
 8024938:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 802493c:	f06f 0001 	mvn.w	r0, #1
 8024940:	4299      	cmp	r1, r3
 8024942:	bf08      	it	eq
 8024944:	4290      	cmpeq	r0, r2
 8024946:	d260      	bcs.n	8024a0a <pow+0x12a>
 8024948:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802494c:	4313      	orrs	r3, r2
 802494e:	d11a      	bne.n	8024986 <pow+0xa6>
 8024950:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 8024954:	1923      	adds	r3, r4, r4
 8024956:	930c      	str	r3, [sp, #48]	; 0x30
 8024958:	eb42 0302 	adc.w	r3, r2, r2
 802495c:	930d      	str	r3, [sp, #52]	; 0x34
 802495e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8024962:	4bcf      	ldr	r3, [pc, #828]	; (8024ca0 <pow+0x3c0>)
 8024964:	2200      	movs	r2, #0
 8024966:	428b      	cmp	r3, r1
 8024968:	bf08      	it	eq
 802496a:	4282      	cmpeq	r2, r0
 802496c:	f080 8265 	bcs.w	8024e3a <pow+0x55a>
 8024970:	ed9d 7b02 	vldr	d7, [sp, #8]
 8024974:	ed9d 6b00 	vldr	d6, [sp]
 8024978:	ee37 0b06 	vadd.f64	d0, d7, d6
 802497c:	b01b      	add	sp, #108	; 0x6c
 802497e:	ecbd 8b0a 	vpop	{d8-d12}
 8024982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024986:	49c7      	ldr	r1, [pc, #796]	; (8024ca4 <pow+0x3c4>)
 8024988:	2000      	movs	r0, #0
 802498a:	428d      	cmp	r5, r1
 802498c:	bf08      	it	eq
 802498e:	4284      	cmpeq	r4, r0
 8024990:	d10b      	bne.n	80249aa <pow+0xca>
 8024992:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8024996:	19b3      	adds	r3, r6, r6
 8024998:	930e      	str	r3, [sp, #56]	; 0x38
 802499a:	eb42 0302 	adc.w	r3, r2, r2
 802499e:	930f      	str	r3, [sp, #60]	; 0x3c
 80249a0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80249a4:	4bbe      	ldr	r3, [pc, #760]	; (8024ca0 <pow+0x3c0>)
 80249a6:	2200      	movs	r2, #0
 80249a8:	e7dd      	b.n	8024966 <pow+0x86>
 80249aa:	1921      	adds	r1, r4, r4
 80249ac:	9106      	str	r1, [sp, #24]
 80249ae:	eb45 0105 	adc.w	r1, r5, r5
 80249b2:	9107      	str	r1, [sp, #28]
 80249b4:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80249b8:	49bb      	ldr	r1, [pc, #748]	; (8024ca8 <pow+0x3c8>)
 80249ba:	2000      	movs	r0, #0
 80249bc:	42a1      	cmp	r1, r4
 80249be:	bf08      	it	eq
 80249c0:	4298      	cmpeq	r0, r3
 80249c2:	d3d5      	bcc.n	8024970 <pow+0x90>
 80249c4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80249c8:	428c      	cmp	r4, r1
 80249ca:	bf08      	it	eq
 80249cc:	4283      	cmpeq	r3, r0
 80249ce:	d1cf      	bne.n	8024970 <pow+0x90>
 80249d0:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80249d4:	49b5      	ldr	r1, [pc, #724]	; (8024cac <pow+0x3cc>)
 80249d6:	2000      	movs	r0, #0
 80249d8:	428c      	cmp	r4, r1
 80249da:	bf08      	it	eq
 80249dc:	4283      	cmpeq	r3, r0
 80249de:	f000 822c 	beq.w	8024e3a <pow+0x55a>
 80249e2:	49b3      	ldr	r1, [pc, #716]	; (8024cb0 <pow+0x3d0>)
 80249e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80249e8:	42a1      	cmp	r1, r4
 80249ea:	bf08      	it	eq
 80249ec:	4298      	cmpeq	r0, r3
 80249ee:	ea6f 0307 	mvn.w	r3, r7
 80249f2:	bf34      	ite	cc
 80249f4:	2201      	movcc	r2, #1
 80249f6:	2200      	movcs	r2, #0
 80249f8:	0fdb      	lsrs	r3, r3, #31
 80249fa:	429a      	cmp	r2, r3
 80249fc:	f040 821a 	bne.w	8024e34 <pow+0x554>
 8024a00:	ed9d 7b00 	vldr	d7, [sp]
 8024a04:	ee27 0b07 	vmul.f64	d0, d7, d7
 8024a08:	e7b8      	b.n	802497c <pow+0x9c>
 8024a0a:	1923      	adds	r3, r4, r4
 8024a0c:	9308      	str	r3, [sp, #32]
 8024a0e:	eb45 0305 	adc.w	r3, r5, r5
 8024a12:	9309      	str	r3, [sp, #36]	; 0x24
 8024a14:	9b08      	ldr	r3, [sp, #32]
 8024a16:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8024a1a:	9310      	str	r3, [sp, #64]	; 0x40
 8024a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024a1e:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 8024a22:	9311      	str	r3, [sp, #68]	; 0x44
 8024a24:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8024a28:	4299      	cmp	r1, r3
 8024a2a:	bf08      	it	eq
 8024a2c:	4290      	cmpeq	r0, r2
 8024a2e:	d22d      	bcs.n	8024a8c <pow+0x1ac>
 8024a30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8024a34:	2c00      	cmp	r4, #0
 8024a36:	f175 0300 	sbcs.w	r3, r5, #0
 8024a3a:	ee27 0b07 	vmul.f64	d0, d7, d7
 8024a3e:	da16      	bge.n	8024a6e <pow+0x18e>
 8024a40:	4630      	mov	r0, r6
 8024a42:	4639      	mov	r1, r7
 8024a44:	f7ff ff16 	bl	8024874 <checkint>
 8024a48:	2801      	cmp	r0, #1
 8024a4a:	d110      	bne.n	8024a6e <pow+0x18e>
 8024a4c:	eeb1 0b40 	vneg.f64	d0, d0
 8024a50:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8024a54:	4323      	orrs	r3, r4
 8024a56:	d10c      	bne.n	8024a72 <pow+0x192>
 8024a58:	2e00      	cmp	r6, #0
 8024a5a:	f177 0300 	sbcs.w	r3, r7, #0
 8024a5e:	da8d      	bge.n	802497c <pow+0x9c>
 8024a60:	b01b      	add	sp, #108	; 0x6c
 8024a62:	ecbd 8b0a 	vpop	{d8-d12}
 8024a66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024a6a:	f000 bf25 	b.w	80258b8 <__math_divzero>
 8024a6e:	2000      	movs	r0, #0
 8024a70:	e7ee      	b.n	8024a50 <pow+0x170>
 8024a72:	2e00      	cmp	r6, #0
 8024a74:	f177 0300 	sbcs.w	r3, r7, #0
 8024a78:	da80      	bge.n	802497c <pow+0x9c>
 8024a7a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8024a7e:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8024a82:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8024a86:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8024a8a:	e777      	b.n	802497c <pow+0x9c>
 8024a8c:	2c00      	cmp	r4, #0
 8024a8e:	f175 0300 	sbcs.w	r3, r5, #0
 8024a92:	da35      	bge.n	8024b00 <pow+0x220>
 8024a94:	4630      	mov	r0, r6
 8024a96:	4639      	mov	r1, r7
 8024a98:	f7ff feec 	bl	8024874 <checkint>
 8024a9c:	b940      	cbnz	r0, 8024ab0 <pow+0x1d0>
 8024a9e:	ed9d 0b02 	vldr	d0, [sp, #8]
 8024aa2:	b01b      	add	sp, #108	; 0x6c
 8024aa4:	ecbd 8b0a 	vpop	{d8-d12}
 8024aa8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024aac:	f000 bf1c 	b.w	80258e8 <__math_invalid>
 8024ab0:	2801      	cmp	r0, #1
 8024ab2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8024ab6:	bf14      	ite	ne
 8024ab8:	2000      	movne	r0, #0
 8024aba:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8024abe:	461d      	mov	r5, r3
 8024ac0:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 8024ac4:	f3c8 030a 	ubfx	r3, r8, #0, #11
 8024ac8:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 8024acc:	2a7f      	cmp	r2, #127	; 0x7f
 8024ace:	d933      	bls.n	8024b38 <pow+0x258>
 8024ad0:	4974      	ldr	r1, [pc, #464]	; (8024ca4 <pow+0x3c4>)
 8024ad2:	2000      	movs	r0, #0
 8024ad4:	428d      	cmp	r5, r1
 8024ad6:	bf08      	it	eq
 8024ad8:	4284      	cmpeq	r4, r0
 8024ada:	f000 81ae 	beq.w	8024e3a <pow+0x55a>
 8024ade:	f240 32bd 	movw	r2, #957	; 0x3bd
 8024ae2:	4293      	cmp	r3, r2
 8024ae4:	d80e      	bhi.n	8024b04 <pow+0x224>
 8024ae6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8024aea:	ed9d 7b00 	vldr	d7, [sp]
 8024aee:	42a9      	cmp	r1, r5
 8024af0:	bf08      	it	eq
 8024af2:	42a0      	cmpeq	r0, r4
 8024af4:	bf34      	ite	cc
 8024af6:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 8024afa:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 8024afe:	e73d      	b.n	802497c <pow+0x9c>
 8024b00:	2000      	movs	r0, #0
 8024b02:	e7df      	b.n	8024ac4 <pow+0x1e4>
 8024b04:	42a9      	cmp	r1, r5
 8024b06:	bf08      	it	eq
 8024b08:	42a0      	cmpeq	r0, r4
 8024b0a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8024b0e:	bf2c      	ite	cs
 8024b10:	2301      	movcs	r3, #1
 8024b12:	2300      	movcc	r3, #0
 8024b14:	4590      	cmp	r8, r2
 8024b16:	bf8c      	ite	hi
 8024b18:	f04f 0800 	movhi.w	r8, #0
 8024b1c:	f04f 0801 	movls.w	r8, #1
 8024b20:	4543      	cmp	r3, r8
 8024b22:	f04f 0000 	mov.w	r0, #0
 8024b26:	f000 80af 	beq.w	8024c88 <pow+0x3a8>
 8024b2a:	b01b      	add	sp, #108	; 0x6c
 8024b2c:	ecbd 8b0a 	vpop	{d8-d12}
 8024b30:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024b34:	f000 beb8 	b.w	80258a8 <__math_oflow>
 8024b38:	f1bc 0f00 	cmp.w	ip, #0
 8024b3c:	d10e      	bne.n	8024b5c <pow+0x27c>
 8024b3e:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8024c98 <pow+0x3b8>
 8024b42:	ed9d 6b02 	vldr	d6, [sp, #8]
 8024b46:	ee26 7b07 	vmul.f64	d7, d6, d7
 8024b4a:	ec57 6b17 	vmov	r6, r7, d7
 8024b4e:	4b59      	ldr	r3, [pc, #356]	; (8024cb4 <pow+0x3d4>)
 8024b50:	2100      	movs	r1, #0
 8024b52:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8024b56:	1874      	adds	r4, r6, r1
 8024b58:	eb42 0503 	adc.w	r5, r2, r3
 8024b5c:	2300      	movs	r3, #0
 8024b5e:	18e3      	adds	r3, r4, r3
 8024b60:	4b55      	ldr	r3, [pc, #340]	; (8024cb8 <pow+0x3d8>)
 8024b62:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8024b66:	eb45 0303 	adc.w	r3, r5, r3
 8024b6a:	1519      	asrs	r1, r3, #20
 8024b6c:	ee03 1a10 	vmov	s6, r1
 8024b70:	0d1e      	lsrs	r6, r3, #20
 8024b72:	2100      	movs	r1, #0
 8024b74:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8024b78:	0536      	lsls	r6, r6, #20
 8024b7a:	1a63      	subs	r3, r4, r1
 8024b7c:	9312      	str	r3, [sp, #72]	; 0x48
 8024b7e:	eb65 0306 	sbc.w	r3, r5, r6
 8024b82:	9313      	str	r3, [sp, #76]	; 0x4c
 8024b84:	4b4d      	ldr	r3, [pc, #308]	; (8024cbc <pow+0x3dc>)
 8024b86:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 8024b8a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8024b8e:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 8024b92:	eea5 6b07 	vfma.f64	d6, d5, d7
 8024b96:	ed93 7b00 	vldr	d7, [r3]
 8024b9a:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 8024b9e:	ed93 4b02 	vldr	d4, [r3, #8]
 8024ba2:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8024ba6:	eea3 5b07 	vfma.f64	d5, d3, d7
 8024baa:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 8024bae:	ee36 9b05 	vadd.f64	d9, d6, d5
 8024bb2:	ee35 5b49 	vsub.f64	d5, d5, d9
 8024bb6:	eea3 7b04 	vfma.f64	d7, d3, d4
 8024bba:	ed93 4b04 	vldr	d4, [r3, #16]
 8024bbe:	ee35 5b06 	vadd.f64	d5, d5, d6
 8024bc2:	ee37 7b05 	vadd.f64	d7, d7, d5
 8024bc6:	ee26 4b04 	vmul.f64	d4, d6, d4
 8024bca:	ed93 3b08 	vldr	d3, [r3, #32]
 8024bce:	ee26 0b04 	vmul.f64	d0, d6, d4
 8024bd2:	eeb0 8b40 	vmov.f64	d8, d0
 8024bd6:	ee94 8b06 	vfnms.f64	d8, d4, d6
 8024bda:	ed93 4b06 	vldr	d4, [r3, #24]
 8024bde:	ee26 ab00 	vmul.f64	d10, d6, d0
 8024be2:	ee39 1b00 	vadd.f64	d1, d9, d0
 8024be6:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 8024bea:	eea6 4b03 	vfma.f64	d4, d6, d3
 8024bee:	ee39 9b41 	vsub.f64	d9, d9, d1
 8024bf2:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 8024bf6:	ee37 8b08 	vadd.f64	d8, d7, d8
 8024bfa:	ee39 9b00 	vadd.f64	d9, d9, d0
 8024bfe:	eea6 3b02 	vfma.f64	d3, d6, d2
 8024c02:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8024c06:	ee38 9b09 	vadd.f64	d9, d8, d9
 8024c0a:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 8024c0e:	eea6 2b0c 	vfma.f64	d2, d6, d12
 8024c12:	ed9d 6b00 	vldr	d6, [sp]
 8024c16:	eea0 3b02 	vfma.f64	d3, d0, d2
 8024c1a:	eea0 4b03 	vfma.f64	d4, d0, d3
 8024c1e:	eeaa 9b04 	vfma.f64	d9, d10, d4
 8024c22:	ee31 7b09 	vadd.f64	d7, d1, d9
 8024c26:	ee26 6b07 	vmul.f64	d6, d6, d7
 8024c2a:	ed8d 6b02 	vstr	d6, [sp, #8]
 8024c2e:	eeb0 3b46 	vmov.f64	d3, d6
 8024c32:	ee31 1b47 	vsub.f64	d1, d1, d7
 8024c36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8024c3a:	ee31 9b09 	vadd.f64	d9, d1, d9
 8024c3e:	ed9d 6b00 	vldr	d6, [sp]
 8024c42:	f3c3 570a 	ubfx	r7, r3, #20, #11
 8024c46:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 8024c4a:	193c      	adds	r4, r7, r4
 8024c4c:	2c3e      	cmp	r4, #62	; 0x3e
 8024c4e:	ee96 3b07 	vfnms.f64	d3, d6, d7
 8024c52:	eea6 3b09 	vfma.f64	d3, d6, d9
 8024c56:	d934      	bls.n	8024cc2 <pow+0x3e2>
 8024c58:	428c      	cmp	r4, r1
 8024c5a:	da0d      	bge.n	8024c78 <pow+0x398>
 8024c5c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8024c60:	ed9d 7b02 	vldr	d7, [sp, #8]
 8024c64:	ee37 0b00 	vadd.f64	d0, d7, d0
 8024c68:	2800      	cmp	r0, #0
 8024c6a:	f43f ae87 	beq.w	802497c <pow+0x9c>
 8024c6e:	eeb1 0b40 	vneg.f64	d0, d0
 8024c72:	e683      	b.n	802497c <pow+0x9c>
 8024c74:	2000      	movs	r0, #0
 8024c76:	e771      	b.n	8024b5c <pow+0x27c>
 8024c78:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 8024c7c:	d920      	bls.n	8024cc0 <pow+0x3e0>
 8024c7e:	2a00      	cmp	r2, #0
 8024c80:	f173 0300 	sbcs.w	r3, r3, #0
 8024c84:	f6bf af51 	bge.w	8024b2a <pow+0x24a>
 8024c88:	b01b      	add	sp, #108	; 0x6c
 8024c8a:	ecbd 8b0a 	vpop	{d8-d12}
 8024c8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024c92:	f000 be01 	b.w	8025898 <__math_uflow>
 8024c96:	bf00      	nop
 8024c98:	00000000 	.word	0x00000000
 8024c9c:	43300000 	.word	0x43300000
 8024ca0:	fff00000 	.word	0xfff00000
 8024ca4:	3ff00000 	.word	0x3ff00000
 8024ca8:	ffe00000 	.word	0xffe00000
 8024cac:	7fe00000 	.word	0x7fe00000
 8024cb0:	7fdfffff 	.word	0x7fdfffff
 8024cb4:	fcc00000 	.word	0xfcc00000
 8024cb8:	c0196aab 	.word	0xc0196aab
 8024cbc:	08029708 	.word	0x08029708
 8024cc0:	460f      	mov	r7, r1
 8024cc2:	4e65      	ldr	r6, [pc, #404]	; (8024e58 <pow+0x578>)
 8024cc4:	ed9d 4b02 	vldr	d4, [sp, #8]
 8024cc8:	ed96 6b02 	vldr	d6, [r6, #8]
 8024ccc:	ed96 7b00 	vldr	d7, [r6]
 8024cd0:	eeb0 5b46 	vmov.f64	d5, d6
 8024cd4:	eea4 5b07 	vfma.f64	d5, d4, d7
 8024cd8:	ed8d 5b00 	vstr	d5, [sp]
 8024cdc:	ee35 6b46 	vsub.f64	d6, d5, d6
 8024ce0:	eeb0 5b44 	vmov.f64	d5, d4
 8024ce4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8024ce8:	ed96 7b04 	vldr	d7, [r6, #16]
 8024cec:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 8024cf0:	eea6 5b07 	vfma.f64	d5, d6, d7
 8024cf4:	eeb0 7b45 	vmov.f64	d7, d5
 8024cf8:	ed96 5b06 	vldr	d5, [r6, #24]
 8024cfc:	1849      	adds	r1, r1, r1
 8024cfe:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 8024d02:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 8024d06:	eea6 7b05 	vfma.f64	d7, d6, d5
 8024d0a:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 8024d0e:	ee33 3b07 	vadd.f64	d3, d3, d7
 8024d12:	ee23 6b03 	vmul.f64	d6, d3, d3
 8024d16:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 8024d1a:	ed96 5b08 	vldr	d5, [r6, #32]
 8024d1e:	ee33 7b07 	vadd.f64	d7, d3, d7
 8024d22:	1814      	adds	r4, r2, r0
 8024d24:	0365      	lsls	r5, r4, #13
 8024d26:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 8024d2a:	eea3 5b04 	vfma.f64	d5, d3, d4
 8024d2e:	eea6 7b05 	vfma.f64	d7, d6, d5
 8024d32:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 8024d36:	ee26 6b06 	vmul.f64	d6, d6, d6
 8024d3a:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 8024d3e:	2000      	movs	r0, #0
 8024d40:	eb10 0a04 	adds.w	sl, r0, r4
 8024d44:	eea3 5b04 	vfma.f64	d5, d3, d4
 8024d48:	eb45 0b0c 	adc.w	fp, r5, ip
 8024d4c:	eea6 7b05 	vfma.f64	d7, d6, d5
 8024d50:	2f00      	cmp	r7, #0
 8024d52:	d16a      	bne.n	8024e2a <pow+0x54a>
 8024d54:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 8024d58:	4639      	mov	r1, r7
 8024d5a:	ea50 0301 	orrs.w	r3, r0, r1
 8024d5e:	f04f 0300 	mov.w	r3, #0
 8024d62:	d115      	bne.n	8024d90 <pow+0x4b0>
 8024d64:	eb1a 0303 	adds.w	r3, sl, r3
 8024d68:	ee0b 3a10 	vmov	s22, r3
 8024d6c:	4b3b      	ldr	r3, [pc, #236]	; (8024e5c <pow+0x57c>)
 8024d6e:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8024e40 <pow+0x560>
 8024d72:	eb4b 0303 	adc.w	r3, fp, r3
 8024d76:	ee0b 3a90 	vmov	s23, r3
 8024d7a:	eea7 bb0b 	vfma.f64	d11, d7, d11
 8024d7e:	ee2b 0b00 	vmul.f64	d0, d11, d0
 8024d82:	b01b      	add	sp, #108	; 0x6c
 8024d84:	ecbd 8b0a 	vpop	{d8-d12}
 8024d88:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024d8c:	f000 bdc4 	b.w	8025918 <__math_check_oflow>
 8024d90:	eb1a 0303 	adds.w	r3, sl, r3
 8024d94:	930a      	str	r3, [sp, #40]	; 0x28
 8024d96:	4b32      	ldr	r3, [pc, #200]	; (8024e60 <pow+0x580>)
 8024d98:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8024d9c:	eb4b 0303 	adc.w	r3, fp, r3
 8024da0:	930b      	str	r3, [sp, #44]	; 0x2c
 8024da2:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8024da6:	ee27 6b05 	vmul.f64	d6, d7, d5
 8024daa:	ee35 7b06 	vadd.f64	d7, d5, d6
 8024dae:	eeb0 3bc7 	vabs.f64	d3, d7
 8024db2:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8024db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024dba:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8024e48 <pow+0x568>
 8024dbe:	d52b      	bpl.n	8024e18 <pow+0x538>
 8024dc0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8024dc4:	ee35 5b47 	vsub.f64	d5, d5, d7
 8024dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024dcc:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8024dd0:	ee35 6b06 	vadd.f64	d6, d5, d6
 8024dd4:	bf48      	it	mi
 8024dd6:	eeb0 4b43 	vmovmi.f64	d4, d3
 8024dda:	ee37 3b04 	vadd.f64	d3, d7, d4
 8024dde:	ee34 5b43 	vsub.f64	d5, d4, d3
 8024de2:	ee35 7b07 	vadd.f64	d7, d5, d7
 8024de6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8024dea:	ee37 7b03 	vadd.f64	d7, d7, d3
 8024dee:	ee37 7b44 	vsub.f64	d7, d7, d4
 8024df2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8024df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024dfa:	d105      	bne.n	8024e08 <pow+0x528>
 8024dfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8024dfe:	463a      	mov	r2, r7
 8024e00:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8024e04:	ec43 2b17 	vmov	d7, r2, r3
 8024e08:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 8024e0c:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 8024e10:	ee26 6b00 	vmul.f64	d6, d6, d0
 8024e14:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 8024e18:	ee27 0b00 	vmul.f64	d0, d7, d0
 8024e1c:	b01b      	add	sp, #108	; 0x6c
 8024e1e:	ecbd 8b0a 	vpop	{d8-d12}
 8024e22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024e26:	f000 bd6e 	b.w	8025906 <__math_check_uflow>
 8024e2a:	ec4b ab10 	vmov	d0, sl, fp
 8024e2e:	eea7 0b00 	vfma.f64	d0, d7, d0
 8024e32:	e5a3      	b.n	802497c <pow+0x9c>
 8024e34:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8024e50 <pow+0x570>
 8024e38:	e5a0      	b.n	802497c <pow+0x9c>
 8024e3a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8024e3e:	e59d      	b.n	802497c <pow+0x9c>
 8024e40:	00000000 	.word	0x00000000
 8024e44:	7f000000 	.word	0x7f000000
 8024e48:	00000000 	.word	0x00000000
 8024e4c:	00100000 	.word	0x00100000
	...
 8024e58:	0802a8d8 	.word	0x0802a8d8
 8024e5c:	c0f00000 	.word	0xc0f00000
 8024e60:	3fe00000 	.word	0x3fe00000
 8024e64:	00000000 	.word	0x00000000

08024e68 <sin>:
 8024e68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024e6a:	eeb0 7b40 	vmov.f64	d7, d0
 8024e6e:	ee17 3a90 	vmov	r3, s15
 8024e72:	4a1f      	ldr	r2, [pc, #124]	; (8024ef0 <sin+0x88>)
 8024e74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8024e78:	4293      	cmp	r3, r2
 8024e7a:	dc05      	bgt.n	8024e88 <sin+0x20>
 8024e7c:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8024ee8 <sin+0x80>
 8024e80:	2000      	movs	r0, #0
 8024e82:	f000 fc95 	bl	80257b0 <__kernel_sin>
 8024e86:	e004      	b.n	8024e92 <sin+0x2a>
 8024e88:	4a1a      	ldr	r2, [pc, #104]	; (8024ef4 <sin+0x8c>)
 8024e8a:	4293      	cmp	r3, r2
 8024e8c:	dd04      	ble.n	8024e98 <sin+0x30>
 8024e8e:	ee30 0b40 	vsub.f64	d0, d0, d0
 8024e92:	b005      	add	sp, #20
 8024e94:	f85d fb04 	ldr.w	pc, [sp], #4
 8024e98:	4668      	mov	r0, sp
 8024e9a:	f000 f859 	bl	8024f50 <__ieee754_rem_pio2>
 8024e9e:	f000 0003 	and.w	r0, r0, #3
 8024ea2:	2801      	cmp	r0, #1
 8024ea4:	d008      	beq.n	8024eb8 <sin+0x50>
 8024ea6:	2802      	cmp	r0, #2
 8024ea8:	d00d      	beq.n	8024ec6 <sin+0x5e>
 8024eaa:	b9b0      	cbnz	r0, 8024eda <sin+0x72>
 8024eac:	ed9d 1b02 	vldr	d1, [sp, #8]
 8024eb0:	ed9d 0b00 	vldr	d0, [sp]
 8024eb4:	2001      	movs	r0, #1
 8024eb6:	e7e4      	b.n	8024e82 <sin+0x1a>
 8024eb8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8024ebc:	ed9d 0b00 	vldr	d0, [sp]
 8024ec0:	f000 f98a 	bl	80251d8 <__kernel_cos>
 8024ec4:	e7e5      	b.n	8024e92 <sin+0x2a>
 8024ec6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8024eca:	ed9d 0b00 	vldr	d0, [sp]
 8024ece:	2001      	movs	r0, #1
 8024ed0:	f000 fc6e 	bl	80257b0 <__kernel_sin>
 8024ed4:	eeb1 0b40 	vneg.f64	d0, d0
 8024ed8:	e7db      	b.n	8024e92 <sin+0x2a>
 8024eda:	ed9d 1b02 	vldr	d1, [sp, #8]
 8024ede:	ed9d 0b00 	vldr	d0, [sp]
 8024ee2:	f000 f979 	bl	80251d8 <__kernel_cos>
 8024ee6:	e7f5      	b.n	8024ed4 <sin+0x6c>
	...
 8024ef0:	3fe921fb 	.word	0x3fe921fb
 8024ef4:	7fefffff 	.word	0x7fefffff

08024ef8 <sqrt>:
 8024ef8:	b508      	push	{r3, lr}
 8024efa:	ed2d 8b04 	vpush	{d8-d9}
 8024efe:	eeb0 8b40 	vmov.f64	d8, d0
 8024f02:	f000 f965 	bl	80251d0 <__ieee754_sqrt>
 8024f06:	4b10      	ldr	r3, [pc, #64]	; (8024f48 <sqrt+0x50>)
 8024f08:	f993 3000 	ldrsb.w	r3, [r3]
 8024f0c:	3301      	adds	r3, #1
 8024f0e:	d011      	beq.n	8024f34 <sqrt+0x3c>
 8024f10:	eeb4 8b48 	vcmp.f64	d8, d8
 8024f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024f18:	d60c      	bvs.n	8024f34 <sqrt+0x3c>
 8024f1a:	ed9f 9b09 	vldr	d9, [pc, #36]	; 8024f40 <sqrt+0x48>
 8024f1e:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8024f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024f26:	d505      	bpl.n	8024f34 <sqrt+0x3c>
 8024f28:	f7fd fe20 	bl	8022b6c <__errno>
 8024f2c:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8024f30:	2321      	movs	r3, #33	; 0x21
 8024f32:	6003      	str	r3, [r0, #0]
 8024f34:	ecbd 8b04 	vpop	{d8-d9}
 8024f38:	bd08      	pop	{r3, pc}
 8024f3a:	bf00      	nop
 8024f3c:	f3af 8000 	nop.w
	...
 8024f48:	24003624 	.word	0x24003624
 8024f4c:	00000000 	.word	0x00000000

08024f50 <__ieee754_rem_pio2>:
 8024f50:	b570      	push	{r4, r5, r6, lr}
 8024f52:	eeb0 7b40 	vmov.f64	d7, d0
 8024f56:	ee17 5a90 	vmov	r5, s15
 8024f5a:	4b97      	ldr	r3, [pc, #604]	; (80251b8 <__ieee754_rem_pio2+0x268>)
 8024f5c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8024f60:	429e      	cmp	r6, r3
 8024f62:	b088      	sub	sp, #32
 8024f64:	4604      	mov	r4, r0
 8024f66:	dc07      	bgt.n	8024f78 <__ieee754_rem_pio2+0x28>
 8024f68:	2200      	movs	r2, #0
 8024f6a:	2300      	movs	r3, #0
 8024f6c:	ed84 0b00 	vstr	d0, [r4]
 8024f70:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8024f74:	2000      	movs	r0, #0
 8024f76:	e01b      	b.n	8024fb0 <__ieee754_rem_pio2+0x60>
 8024f78:	4b90      	ldr	r3, [pc, #576]	; (80251bc <__ieee754_rem_pio2+0x26c>)
 8024f7a:	429e      	cmp	r6, r3
 8024f7c:	dc3b      	bgt.n	8024ff6 <__ieee754_rem_pio2+0xa6>
 8024f7e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8024f82:	2d00      	cmp	r5, #0
 8024f84:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8025178 <__ieee754_rem_pio2+0x228>
 8024f88:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8024f8c:	dd19      	ble.n	8024fc2 <__ieee754_rem_pio2+0x72>
 8024f8e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8024f92:	429e      	cmp	r6, r3
 8024f94:	d00e      	beq.n	8024fb4 <__ieee754_rem_pio2+0x64>
 8024f96:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8025180 <__ieee754_rem_pio2+0x230>
 8024f9a:	ee37 5b46 	vsub.f64	d5, d7, d6
 8024f9e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8024fa2:	ed84 5b00 	vstr	d5, [r4]
 8024fa6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8024faa:	ed84 7b02 	vstr	d7, [r4, #8]
 8024fae:	2001      	movs	r0, #1
 8024fb0:	b008      	add	sp, #32
 8024fb2:	bd70      	pop	{r4, r5, r6, pc}
 8024fb4:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8025188 <__ieee754_rem_pio2+0x238>
 8024fb8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8024fbc:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8025190 <__ieee754_rem_pio2+0x240>
 8024fc0:	e7eb      	b.n	8024f9a <__ieee754_rem_pio2+0x4a>
 8024fc2:	429e      	cmp	r6, r3
 8024fc4:	ee30 7b06 	vadd.f64	d7, d0, d6
 8024fc8:	d00e      	beq.n	8024fe8 <__ieee754_rem_pio2+0x98>
 8024fca:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8025180 <__ieee754_rem_pio2+0x230>
 8024fce:	ee37 5b06 	vadd.f64	d5, d7, d6
 8024fd2:	ee37 7b45 	vsub.f64	d7, d7, d5
 8024fd6:	ed84 5b00 	vstr	d5, [r4]
 8024fda:	ee37 7b06 	vadd.f64	d7, d7, d6
 8024fde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024fe2:	ed84 7b02 	vstr	d7, [r4, #8]
 8024fe6:	e7e3      	b.n	8024fb0 <__ieee754_rem_pio2+0x60>
 8024fe8:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8025188 <__ieee754_rem_pio2+0x238>
 8024fec:	ee37 7b06 	vadd.f64	d7, d7, d6
 8024ff0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8025190 <__ieee754_rem_pio2+0x240>
 8024ff4:	e7eb      	b.n	8024fce <__ieee754_rem_pio2+0x7e>
 8024ff6:	4b72      	ldr	r3, [pc, #456]	; (80251c0 <__ieee754_rem_pio2+0x270>)
 8024ff8:	429e      	cmp	r6, r3
 8024ffa:	dc6e      	bgt.n	80250da <__ieee754_rem_pio2+0x18a>
 8024ffc:	f000 fca0 	bl	8025940 <fabs>
 8025000:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8025004:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8025198 <__ieee754_rem_pio2+0x248>
 8025008:	eea0 7b06 	vfma.f64	d7, d0, d6
 802500c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8025010:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8025014:	ee17 0a90 	vmov	r0, s15
 8025018:	eeb1 4b45 	vneg.f64	d4, d5
 802501c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8025178 <__ieee754_rem_pio2+0x228>
 8025020:	eea5 0b47 	vfms.f64	d0, d5, d7
 8025024:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8025180 <__ieee754_rem_pio2+0x230>
 8025028:	281f      	cmp	r0, #31
 802502a:	ee25 7b07 	vmul.f64	d7, d5, d7
 802502e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8025032:	dc08      	bgt.n	8025046 <__ieee754_rem_pio2+0xf6>
 8025034:	4b63      	ldr	r3, [pc, #396]	; (80251c4 <__ieee754_rem_pio2+0x274>)
 8025036:	1e42      	subs	r2, r0, #1
 8025038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802503c:	42b3      	cmp	r3, r6
 802503e:	d002      	beq.n	8025046 <__ieee754_rem_pio2+0xf6>
 8025040:	ed84 6b00 	vstr	d6, [r4]
 8025044:	e024      	b.n	8025090 <__ieee754_rem_pio2+0x140>
 8025046:	ee16 3a90 	vmov	r3, s13
 802504a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 802504e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8025052:	2b10      	cmp	r3, #16
 8025054:	ea4f 5226 	mov.w	r2, r6, asr #20
 8025058:	ddf2      	ble.n	8025040 <__ieee754_rem_pio2+0xf0>
 802505a:	eeb0 6b40 	vmov.f64	d6, d0
 802505e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8025188 <__ieee754_rem_pio2+0x238>
 8025062:	eea4 6b03 	vfma.f64	d6, d4, d3
 8025066:	ee30 7b46 	vsub.f64	d7, d0, d6
 802506a:	eea4 7b03 	vfma.f64	d7, d4, d3
 802506e:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8025190 <__ieee754_rem_pio2+0x240>
 8025072:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8025076:	ee36 3b47 	vsub.f64	d3, d6, d7
 802507a:	ee13 3a90 	vmov	r3, s7
 802507e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8025082:	1ad3      	subs	r3, r2, r3
 8025084:	2b31      	cmp	r3, #49	; 0x31
 8025086:	dc17      	bgt.n	80250b8 <__ieee754_rem_pio2+0x168>
 8025088:	eeb0 0b46 	vmov.f64	d0, d6
 802508c:	ed84 3b00 	vstr	d3, [r4]
 8025090:	ed94 6b00 	vldr	d6, [r4]
 8025094:	2d00      	cmp	r5, #0
 8025096:	ee30 0b46 	vsub.f64	d0, d0, d6
 802509a:	ee30 7b47 	vsub.f64	d7, d0, d7
 802509e:	ed84 7b02 	vstr	d7, [r4, #8]
 80250a2:	da85      	bge.n	8024fb0 <__ieee754_rem_pio2+0x60>
 80250a4:	eeb1 6b46 	vneg.f64	d6, d6
 80250a8:	ed84 6b00 	vstr	d6, [r4]
 80250ac:	eeb1 7b47 	vneg.f64	d7, d7
 80250b0:	4240      	negs	r0, r0
 80250b2:	ed84 7b02 	vstr	d7, [r4, #8]
 80250b6:	e77b      	b.n	8024fb0 <__ieee754_rem_pio2+0x60>
 80250b8:	ed9f 3b39 	vldr	d3, [pc, #228]	; 80251a0 <__ieee754_rem_pio2+0x250>
 80250bc:	eeb0 0b46 	vmov.f64	d0, d6
 80250c0:	eea4 0b03 	vfma.f64	d0, d4, d3
 80250c4:	ee36 7b40 	vsub.f64	d7, d6, d0
 80250c8:	ed9f 6b37 	vldr	d6, [pc, #220]	; 80251a8 <__ieee754_rem_pio2+0x258>
 80250cc:	eea4 7b03 	vfma.f64	d7, d4, d3
 80250d0:	ee95 7b06 	vfnms.f64	d7, d5, d6
 80250d4:	ee30 6b47 	vsub.f64	d6, d0, d7
 80250d8:	e7b2      	b.n	8025040 <__ieee754_rem_pio2+0xf0>
 80250da:	4b3b      	ldr	r3, [pc, #236]	; (80251c8 <__ieee754_rem_pio2+0x278>)
 80250dc:	429e      	cmp	r6, r3
 80250de:	dd06      	ble.n	80250ee <__ieee754_rem_pio2+0x19e>
 80250e0:	ee30 7b40 	vsub.f64	d7, d0, d0
 80250e4:	ed80 7b02 	vstr	d7, [r0, #8]
 80250e8:	ed80 7b00 	vstr	d7, [r0]
 80250ec:	e742      	b.n	8024f74 <__ieee754_rem_pio2+0x24>
 80250ee:	1532      	asrs	r2, r6, #20
 80250f0:	ee10 0a10 	vmov	r0, s0
 80250f4:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 80250f8:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80250fc:	ec41 0b17 	vmov	d7, r0, r1
 8025100:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8025104:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 80251b0 <__ieee754_rem_pio2+0x260>
 8025108:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 802510c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8025110:	ed8d 6b02 	vstr	d6, [sp, #8]
 8025114:	ee27 7b05 	vmul.f64	d7, d7, d5
 8025118:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 802511c:	a902      	add	r1, sp, #8
 802511e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8025122:	ee37 7b46 	vsub.f64	d7, d7, d6
 8025126:	ed8d 6b04 	vstr	d6, [sp, #16]
 802512a:	ee27 7b05 	vmul.f64	d7, d7, d5
 802512e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8025132:	2603      	movs	r6, #3
 8025134:	4608      	mov	r0, r1
 8025136:	ed91 7b04 	vldr	d7, [r1, #16]
 802513a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802513e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025142:	4633      	mov	r3, r6
 8025144:	f1a1 0108 	sub.w	r1, r1, #8
 8025148:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 802514c:	d0f3      	beq.n	8025136 <__ieee754_rem_pio2+0x1e6>
 802514e:	491f      	ldr	r1, [pc, #124]	; (80251cc <__ieee754_rem_pio2+0x27c>)
 8025150:	9101      	str	r1, [sp, #4]
 8025152:	2102      	movs	r1, #2
 8025154:	9100      	str	r1, [sp, #0]
 8025156:	4621      	mov	r1, r4
 8025158:	f000 f8aa 	bl	80252b0 <__kernel_rem_pio2>
 802515c:	2d00      	cmp	r5, #0
 802515e:	f6bf af27 	bge.w	8024fb0 <__ieee754_rem_pio2+0x60>
 8025162:	ed94 7b00 	vldr	d7, [r4]
 8025166:	eeb1 7b47 	vneg.f64	d7, d7
 802516a:	ed84 7b00 	vstr	d7, [r4]
 802516e:	ed94 7b02 	vldr	d7, [r4, #8]
 8025172:	e79b      	b.n	80250ac <__ieee754_rem_pio2+0x15c>
 8025174:	f3af 8000 	nop.w
 8025178:	54400000 	.word	0x54400000
 802517c:	3ff921fb 	.word	0x3ff921fb
 8025180:	1a626331 	.word	0x1a626331
 8025184:	3dd0b461 	.word	0x3dd0b461
 8025188:	1a600000 	.word	0x1a600000
 802518c:	3dd0b461 	.word	0x3dd0b461
 8025190:	2e037073 	.word	0x2e037073
 8025194:	3ba3198a 	.word	0x3ba3198a
 8025198:	6dc9c883 	.word	0x6dc9c883
 802519c:	3fe45f30 	.word	0x3fe45f30
 80251a0:	2e000000 	.word	0x2e000000
 80251a4:	3ba3198a 	.word	0x3ba3198a
 80251a8:	252049c1 	.word	0x252049c1
 80251ac:	397b839a 	.word	0x397b839a
 80251b0:	00000000 	.word	0x00000000
 80251b4:	41700000 	.word	0x41700000
 80251b8:	3fe921fb 	.word	0x3fe921fb
 80251bc:	4002d97b 	.word	0x4002d97b
 80251c0:	413921fb 	.word	0x413921fb
 80251c4:	0802a750 	.word	0x0802a750
 80251c8:	7fefffff 	.word	0x7fefffff
 80251cc:	0802a7d0 	.word	0x0802a7d0

080251d0 <__ieee754_sqrt>:
 80251d0:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80251d4:	4770      	bx	lr
	...

080251d8 <__kernel_cos>:
 80251d8:	ee10 1a90 	vmov	r1, s1
 80251dc:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80251e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80251e4:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 80251e8:	da05      	bge.n	80251f6 <__kernel_cos+0x1e>
 80251ea:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80251ee:	ee17 3a90 	vmov	r3, s15
 80251f2:	2b00      	cmp	r3, #0
 80251f4:	d03d      	beq.n	8025272 <__kernel_cos+0x9a>
 80251f6:	ee20 3b00 	vmul.f64	d3, d0, d0
 80251fa:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8025278 <__kernel_cos+0xa0>
 80251fe:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8025280 <__kernel_cos+0xa8>
 8025202:	eea3 6b07 	vfma.f64	d6, d3, d7
 8025206:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8025288 <__kernel_cos+0xb0>
 802520a:	eea6 7b03 	vfma.f64	d7, d6, d3
 802520e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8025290 <__kernel_cos+0xb8>
 8025212:	eea7 6b03 	vfma.f64	d6, d7, d3
 8025216:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8025298 <__kernel_cos+0xc0>
 802521a:	4b23      	ldr	r3, [pc, #140]	; (80252a8 <__kernel_cos+0xd0>)
 802521c:	eea6 7b03 	vfma.f64	d7, d6, d3
 8025220:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80252a0 <__kernel_cos+0xc8>
 8025224:	4299      	cmp	r1, r3
 8025226:	eea7 6b03 	vfma.f64	d6, d7, d3
 802522a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 802522e:	ee26 5b03 	vmul.f64	d5, d6, d3
 8025232:	ee23 7b07 	vmul.f64	d7, d3, d7
 8025236:	ee21 6b40 	vnmul.f64	d6, d1, d0
 802523a:	eea3 6b05 	vfma.f64	d6, d3, d5
 802523e:	dc04      	bgt.n	802524a <__kernel_cos+0x72>
 8025240:	ee37 6b46 	vsub.f64	d6, d7, d6
 8025244:	ee34 0b46 	vsub.f64	d0, d4, d6
 8025248:	4770      	bx	lr
 802524a:	4b18      	ldr	r3, [pc, #96]	; (80252ac <__kernel_cos+0xd4>)
 802524c:	4299      	cmp	r1, r3
 802524e:	dc0d      	bgt.n	802526c <__kernel_cos+0x94>
 8025250:	2200      	movs	r2, #0
 8025252:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8025256:	ec43 2b15 	vmov	d5, r2, r3
 802525a:	ee34 0b45 	vsub.f64	d0, d4, d5
 802525e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8025262:	ee37 7b46 	vsub.f64	d7, d7, d6
 8025266:	ee30 0b47 	vsub.f64	d0, d0, d7
 802526a:	4770      	bx	lr
 802526c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8025270:	e7f3      	b.n	802525a <__kernel_cos+0x82>
 8025272:	eeb0 0b44 	vmov.f64	d0, d4
 8025276:	4770      	bx	lr
 8025278:	be8838d4 	.word	0xbe8838d4
 802527c:	bda8fae9 	.word	0xbda8fae9
 8025280:	bdb4b1c4 	.word	0xbdb4b1c4
 8025284:	3e21ee9e 	.word	0x3e21ee9e
 8025288:	809c52ad 	.word	0x809c52ad
 802528c:	be927e4f 	.word	0xbe927e4f
 8025290:	19cb1590 	.word	0x19cb1590
 8025294:	3efa01a0 	.word	0x3efa01a0
 8025298:	16c15177 	.word	0x16c15177
 802529c:	bf56c16c 	.word	0xbf56c16c
 80252a0:	5555554c 	.word	0x5555554c
 80252a4:	3fa55555 	.word	0x3fa55555
 80252a8:	3fd33332 	.word	0x3fd33332
 80252ac:	3fe90000 	.word	0x3fe90000

080252b0 <__kernel_rem_pio2>:
 80252b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80252b4:	ed2d 8b06 	vpush	{d8-d10}
 80252b8:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 80252bc:	469b      	mov	fp, r3
 80252be:	460f      	mov	r7, r1
 80252c0:	4bcf      	ldr	r3, [pc, #828]	; (8025600 <__kernel_rem_pio2+0x350>)
 80252c2:	99a0      	ldr	r1, [sp, #640]	; 0x280
 80252c4:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 80252c8:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 80252cc:	9000      	str	r0, [sp, #0]
 80252ce:	f112 0f14 	cmn.w	r2, #20
 80252d2:	bfa8      	it	ge
 80252d4:	2318      	movge	r3, #24
 80252d6:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
 80252da:	bfb8      	it	lt
 80252dc:	2300      	movlt	r3, #0
 80252de:	f06f 0417 	mvn.w	r4, #23
 80252e2:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 80255e8 <__kernel_rem_pio2+0x338>
 80252e6:	bfa4      	itt	ge
 80252e8:	f1a2 0a03 	subge.w	sl, r2, #3
 80252ec:	fb9a f3f3 	sdivge	r3, sl, r3
 80252f0:	fb03 4404 	mla	r4, r3, r4, r4
 80252f4:	1a5d      	subs	r5, r3, r1
 80252f6:	4414      	add	r4, r2
 80252f8:	eb09 0601 	add.w	r6, r9, r1
 80252fc:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8025300:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 8025304:	2200      	movs	r2, #0
 8025306:	42b2      	cmp	r2, r6
 8025308:	dd12      	ble.n	8025330 <__kernel_rem_pio2+0x80>
 802530a:	aa18      	add	r2, sp, #96	; 0x60
 802530c:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8025310:	460e      	mov	r6, r1
 8025312:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 8025316:	f1cb 0a01 	rsb	sl, fp, #1
 802531a:	eb0a 0006 	add.w	r0, sl, r6
 802531e:	4581      	cmp	r9, r0
 8025320:	db25      	blt.n	802536e <__kernel_rem_pio2+0xbe>
 8025322:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 80255e8 <__kernel_rem_pio2+0x338>
 8025326:	f8dd e000 	ldr.w	lr, [sp]
 802532a:	4615      	mov	r5, r2
 802532c:	2000      	movs	r0, #0
 802532e:	e015      	b.n	802535c <__kernel_rem_pio2+0xac>
 8025330:	42d5      	cmn	r5, r2
 8025332:	d409      	bmi.n	8025348 <__kernel_rem_pio2+0x98>
 8025334:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 8025338:	ee07 0a90 	vmov	s15, r0
 802533c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8025340:	eca8 7b02 	vstmia	r8!, {d7}
 8025344:	3201      	adds	r2, #1
 8025346:	e7de      	b.n	8025306 <__kernel_rem_pio2+0x56>
 8025348:	eeb0 7b46 	vmov.f64	d7, d6
 802534c:	e7f8      	b.n	8025340 <__kernel_rem_pio2+0x90>
 802534e:	ecbe 5b02 	vldmia	lr!, {d5}
 8025352:	ed95 6b00 	vldr	d6, [r5]
 8025356:	3001      	adds	r0, #1
 8025358:	eea5 7b06 	vfma.f64	d7, d5, d6
 802535c:	4288      	cmp	r0, r1
 802535e:	f1a5 0508 	sub.w	r5, r5, #8
 8025362:	ddf4      	ble.n	802534e <__kernel_rem_pio2+0x9e>
 8025364:	eca8 7b02 	vstmia	r8!, {d7}
 8025368:	3208      	adds	r2, #8
 802536a:	3601      	adds	r6, #1
 802536c:	e7d5      	b.n	802531a <__kernel_rem_pio2+0x6a>
 802536e:	aa04      	add	r2, sp, #16
 8025370:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 80255f0 <__kernel_rem_pio2+0x340>
 8025374:	ed9f aba0 	vldr	d10, [pc, #640]	; 80255f8 <__kernel_rem_pio2+0x348>
 8025378:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 802537c:	9201      	str	r2, [sp, #4]
 802537e:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 8025382:	464e      	mov	r6, r9
 8025384:	ab90      	add	r3, sp, #576	; 0x240
 8025386:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 802538a:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 802538e:	ab04      	add	r3, sp, #16
 8025390:	4618      	mov	r0, r3
 8025392:	4632      	mov	r2, r6
 8025394:	2a00      	cmp	r2, #0
 8025396:	dc4e      	bgt.n	8025436 <__kernel_rem_pio2+0x186>
 8025398:	4620      	mov	r0, r4
 802539a:	e9cd 1302 	strd	r1, r3, [sp, #8]
 802539e:	f000 fb4f 	bl	8025a40 <scalbn>
 80253a2:	eeb0 8b40 	vmov.f64	d8, d0
 80253a6:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 80253aa:	ee28 0b00 	vmul.f64	d0, d8, d0
 80253ae:	f000 fad3 	bl	8025958 <floor>
 80253b2:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 80253b6:	eea0 8b47 	vfms.f64	d8, d0, d7
 80253ba:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80253be:	2c00      	cmp	r4, #0
 80253c0:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 80253c4:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 80253c8:	ee38 8b40 	vsub.f64	d8, d8, d0
 80253cc:	ee17 8a90 	vmov	r8, s15
 80253d0:	dd46      	ble.n	8025460 <__kernel_rem_pio2+0x1b0>
 80253d2:	1e70      	subs	r0, r6, #1
 80253d4:	aa04      	add	r2, sp, #16
 80253d6:	f1c4 0c18 	rsb	ip, r4, #24
 80253da:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 80253de:	fa45 f20c 	asr.w	r2, r5, ip
 80253e2:	4490      	add	r8, r2
 80253e4:	fa02 f20c 	lsl.w	r2, r2, ip
 80253e8:	1aad      	subs	r5, r5, r2
 80253ea:	aa04      	add	r2, sp, #16
 80253ec:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 80253f0:	f1c4 0217 	rsb	r2, r4, #23
 80253f4:	4115      	asrs	r5, r2
 80253f6:	2d00      	cmp	r5, #0
 80253f8:	dd41      	ble.n	802547e <__kernel_rem_pio2+0x1ce>
 80253fa:	f04f 0c00 	mov.w	ip, #0
 80253fe:	f108 0801 	add.w	r8, r8, #1
 8025402:	4660      	mov	r0, ip
 8025404:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8025408:	4566      	cmp	r6, ip
 802540a:	dc69      	bgt.n	80254e0 <__kernel_rem_pio2+0x230>
 802540c:	2c00      	cmp	r4, #0
 802540e:	dd03      	ble.n	8025418 <__kernel_rem_pio2+0x168>
 8025410:	2c01      	cmp	r4, #1
 8025412:	d076      	beq.n	8025502 <__kernel_rem_pio2+0x252>
 8025414:	2c02      	cmp	r4, #2
 8025416:	d07f      	beq.n	8025518 <__kernel_rem_pio2+0x268>
 8025418:	2d02      	cmp	r5, #2
 802541a:	d130      	bne.n	802547e <__kernel_rem_pio2+0x1ce>
 802541c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8025420:	ee30 8b48 	vsub.f64	d8, d0, d8
 8025424:	b358      	cbz	r0, 802547e <__kernel_rem_pio2+0x1ce>
 8025426:	4620      	mov	r0, r4
 8025428:	9102      	str	r1, [sp, #8]
 802542a:	f000 fb09 	bl	8025a40 <scalbn>
 802542e:	9902      	ldr	r1, [sp, #8]
 8025430:	ee38 8b40 	vsub.f64	d8, d8, d0
 8025434:	e023      	b.n	802547e <__kernel_rem_pio2+0x1ce>
 8025436:	ee20 7b09 	vmul.f64	d7, d0, d9
 802543a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 802543e:	3a01      	subs	r2, #1
 8025440:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8025444:	ad68      	add	r5, sp, #416	; 0x1a0
 8025446:	eea7 0b4a 	vfms.f64	d0, d7, d10
 802544a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 802544e:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8025452:	eca0 0a01 	vstmia	r0!, {s0}
 8025456:	ed95 0b00 	vldr	d0, [r5]
 802545a:	ee37 0b00 	vadd.f64	d0, d7, d0
 802545e:	e799      	b.n	8025394 <__kernel_rem_pio2+0xe4>
 8025460:	d105      	bne.n	802546e <__kernel_rem_pio2+0x1be>
 8025462:	1e72      	subs	r2, r6, #1
 8025464:	a804      	add	r0, sp, #16
 8025466:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 802546a:	15ed      	asrs	r5, r5, #23
 802546c:	e7c3      	b.n	80253f6 <__kernel_rem_pio2+0x146>
 802546e:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8025472:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8025476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802547a:	da2f      	bge.n	80254dc <__kernel_rem_pio2+0x22c>
 802547c:	2500      	movs	r5, #0
 802547e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8025482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025486:	f040 8087 	bne.w	8025598 <__kernel_rem_pio2+0x2e8>
 802548a:	1e73      	subs	r3, r6, #1
 802548c:	4618      	mov	r0, r3
 802548e:	f04f 0c00 	mov.w	ip, #0
 8025492:	4548      	cmp	r0, r9
 8025494:	da47      	bge.n	8025526 <__kernel_rem_pio2+0x276>
 8025496:	f1bc 0f00 	cmp.w	ip, #0
 802549a:	d070      	beq.n	802557e <__kernel_rem_pio2+0x2ce>
 802549c:	aa04      	add	r2, sp, #16
 802549e:	3c18      	subs	r4, #24
 80254a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80254a4:	2a00      	cmp	r2, #0
 80254a6:	d075      	beq.n	8025594 <__kernel_rem_pio2+0x2e4>
 80254a8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80254ac:	4620      	mov	r0, r4
 80254ae:	9300      	str	r3, [sp, #0]
 80254b0:	f000 fac6 	bl	8025a40 <scalbn>
 80254b4:	9b00      	ldr	r3, [sp, #0]
 80254b6:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80255f0 <__kernel_rem_pio2+0x340>
 80254ba:	461a      	mov	r2, r3
 80254bc:	2a00      	cmp	r2, #0
 80254be:	f280 80ac 	bge.w	802561a <__kernel_rem_pio2+0x36a>
 80254c2:	4619      	mov	r1, r3
 80254c4:	2000      	movs	r0, #0
 80254c6:	2900      	cmp	r1, #0
 80254c8:	f2c0 80cd 	blt.w	8025666 <__kernel_rem_pio2+0x3b6>
 80254cc:	aa68      	add	r2, sp, #416	; 0x1a0
 80254ce:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 80254d2:	ed9f 7b45 	vldr	d7, [pc, #276]	; 80255e8 <__kernel_rem_pio2+0x338>
 80254d6:	4e4b      	ldr	r6, [pc, #300]	; (8025604 <__kernel_rem_pio2+0x354>)
 80254d8:	2200      	movs	r2, #0
 80254da:	e0b8      	b.n	802564e <__kernel_rem_pio2+0x39e>
 80254dc:	2502      	movs	r5, #2
 80254de:	e78c      	b.n	80253fa <__kernel_rem_pio2+0x14a>
 80254e0:	681a      	ldr	r2, [r3, #0]
 80254e2:	b948      	cbnz	r0, 80254f8 <__kernel_rem_pio2+0x248>
 80254e4:	b11a      	cbz	r2, 80254ee <__kernel_rem_pio2+0x23e>
 80254e6:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 80254ea:	601a      	str	r2, [r3, #0]
 80254ec:	2201      	movs	r2, #1
 80254ee:	f10c 0c01 	add.w	ip, ip, #1
 80254f2:	3304      	adds	r3, #4
 80254f4:	4610      	mov	r0, r2
 80254f6:	e787      	b.n	8025408 <__kernel_rem_pio2+0x158>
 80254f8:	ebae 0202 	sub.w	r2, lr, r2
 80254fc:	601a      	str	r2, [r3, #0]
 80254fe:	4602      	mov	r2, r0
 8025500:	e7f5      	b.n	80254ee <__kernel_rem_pio2+0x23e>
 8025502:	1e72      	subs	r2, r6, #1
 8025504:	ab04      	add	r3, sp, #16
 8025506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802550a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 802550e:	f10d 0c10 	add.w	ip, sp, #16
 8025512:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 8025516:	e77f      	b.n	8025418 <__kernel_rem_pio2+0x168>
 8025518:	1e72      	subs	r2, r6, #1
 802551a:	ab04      	add	r3, sp, #16
 802551c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8025520:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8025524:	e7f3      	b.n	802550e <__kernel_rem_pio2+0x25e>
 8025526:	aa04      	add	r2, sp, #16
 8025528:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 802552c:	3801      	subs	r0, #1
 802552e:	ea4c 0c02 	orr.w	ip, ip, r2
 8025532:	e7ae      	b.n	8025492 <__kernel_rem_pio2+0x1e2>
 8025534:	3001      	adds	r0, #1
 8025536:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 802553a:	2a00      	cmp	r2, #0
 802553c:	d0fa      	beq.n	8025534 <__kernel_rem_pio2+0x284>
 802553e:	eb06 020b 	add.w	r2, r6, fp
 8025542:	ad18      	add	r5, sp, #96	; 0x60
 8025544:	1c73      	adds	r3, r6, #1
 8025546:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 802554a:	4406      	add	r6, r0
 802554c:	429e      	cmp	r6, r3
 802554e:	f6ff af19 	blt.w	8025384 <__kernel_rem_pio2+0xd4>
 8025552:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8025556:	9d00      	ldr	r5, [sp, #0]
 8025558:	ee07 0a90 	vmov	s15, r0
 802555c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8025560:	2000      	movs	r0, #0
 8025562:	eca2 7b02 	vstmia	r2!, {d7}
 8025566:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80255e8 <__kernel_rem_pio2+0x338>
 802556a:	4694      	mov	ip, r2
 802556c:	4288      	cmp	r0, r1
 802556e:	dd09      	ble.n	8025584 <__kernel_rem_pio2+0x2d4>
 8025570:	a868      	add	r0, sp, #416	; 0x1a0
 8025572:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8025576:	ed80 7b00 	vstr	d7, [r0]
 802557a:	3301      	adds	r3, #1
 802557c:	e7e6      	b.n	802554c <__kernel_rem_pio2+0x29c>
 802557e:	9b01      	ldr	r3, [sp, #4]
 8025580:	2001      	movs	r0, #1
 8025582:	e7d8      	b.n	8025536 <__kernel_rem_pio2+0x286>
 8025584:	ecb5 5b02 	vldmia	r5!, {d5}
 8025588:	ed3c 6b02 	vldmdb	ip!, {d6}
 802558c:	3001      	adds	r0, #1
 802558e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8025592:	e7eb      	b.n	802556c <__kernel_rem_pio2+0x2bc>
 8025594:	3b01      	subs	r3, #1
 8025596:	e781      	b.n	802549c <__kernel_rem_pio2+0x1ec>
 8025598:	4260      	negs	r0, r4
 802559a:	eeb0 0b48 	vmov.f64	d0, d8
 802559e:	f000 fa4f 	bl	8025a40 <scalbn>
 80255a2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80255f8 <__kernel_rem_pio2+0x348>
 80255a6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80255aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80255ae:	db2b      	blt.n	8025608 <__kernel_rem_pio2+0x358>
 80255b0:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 80255f0 <__kernel_rem_pio2+0x340>
 80255b4:	ee20 7b07 	vmul.f64	d7, d0, d7
 80255b8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80255bc:	aa04      	add	r2, sp, #16
 80255be:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80255c2:	eea5 0b46 	vfms.f64	d0, d5, d6
 80255c6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80255ca:	a904      	add	r1, sp, #16
 80255cc:	ee10 3a10 	vmov	r3, s0
 80255d0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80255d4:	ee17 2a10 	vmov	r2, s14
 80255d8:	1c73      	adds	r3, r6, #1
 80255da:	3418      	adds	r4, #24
 80255dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80255e0:	e762      	b.n	80254a8 <__kernel_rem_pio2+0x1f8>
 80255e2:	bf00      	nop
 80255e4:	f3af 8000 	nop.w
	...
 80255f4:	3e700000 	.word	0x3e700000
 80255f8:	00000000 	.word	0x00000000
 80255fc:	41700000 	.word	0x41700000
 8025600:	0802b188 	.word	0x0802b188
 8025604:	0802b148 	.word	0x0802b148
 8025608:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 802560c:	aa04      	add	r2, sp, #16
 802560e:	ee10 3a10 	vmov	r3, s0
 8025612:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8025616:	4633      	mov	r3, r6
 8025618:	e746      	b.n	80254a8 <__kernel_rem_pio2+0x1f8>
 802561a:	a804      	add	r0, sp, #16
 802561c:	a968      	add	r1, sp, #416	; 0x1a0
 802561e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8025622:	9000      	str	r0, [sp, #0]
 8025624:	ee07 0a90 	vmov	s15, r0
 8025628:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 802562c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8025630:	3a01      	subs	r2, #1
 8025632:	ee27 7b00 	vmul.f64	d7, d7, d0
 8025636:	ee20 0b06 	vmul.f64	d0, d0, d6
 802563a:	ed81 7b00 	vstr	d7, [r1]
 802563e:	e73d      	b.n	80254bc <__kernel_rem_pio2+0x20c>
 8025640:	ecb6 5b02 	vldmia	r6!, {d5}
 8025644:	ecb4 6b02 	vldmia	r4!, {d6}
 8025648:	3201      	adds	r2, #1
 802564a:	eea5 7b06 	vfma.f64	d7, d5, d6
 802564e:	454a      	cmp	r2, r9
 8025650:	dc01      	bgt.n	8025656 <__kernel_rem_pio2+0x3a6>
 8025652:	4290      	cmp	r0, r2
 8025654:	daf4      	bge.n	8025640 <__kernel_rem_pio2+0x390>
 8025656:	aa40      	add	r2, sp, #256	; 0x100
 8025658:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 802565c:	ed82 7b00 	vstr	d7, [r2]
 8025660:	3901      	subs	r1, #1
 8025662:	3001      	adds	r0, #1
 8025664:	e72f      	b.n	80254c6 <__kernel_rem_pio2+0x216>
 8025666:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8025668:	2a02      	cmp	r2, #2
 802566a:	dc0a      	bgt.n	8025682 <__kernel_rem_pio2+0x3d2>
 802566c:	2a00      	cmp	r2, #0
 802566e:	dc5a      	bgt.n	8025726 <__kernel_rem_pio2+0x476>
 8025670:	d039      	beq.n	80256e6 <__kernel_rem_pio2+0x436>
 8025672:	f008 0007 	and.w	r0, r8, #7
 8025676:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 802567a:	ecbd 8b06 	vpop	{d8-d10}
 802567e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025682:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8025684:	2a03      	cmp	r2, #3
 8025686:	d1f4      	bne.n	8025672 <__kernel_rem_pio2+0x3c2>
 8025688:	aa40      	add	r2, sp, #256	; 0x100
 802568a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 802568e:	4611      	mov	r1, r2
 8025690:	4618      	mov	r0, r3
 8025692:	2800      	cmp	r0, #0
 8025694:	f1a1 0108 	sub.w	r1, r1, #8
 8025698:	dc52      	bgt.n	8025740 <__kernel_rem_pio2+0x490>
 802569a:	4619      	mov	r1, r3
 802569c:	2901      	cmp	r1, #1
 802569e:	f1a2 0208 	sub.w	r2, r2, #8
 80256a2:	dc5d      	bgt.n	8025760 <__kernel_rem_pio2+0x4b0>
 80256a4:	ed9f 7b40 	vldr	d7, [pc, #256]	; 80257a8 <__kernel_rem_pio2+0x4f8>
 80256a8:	2b01      	cmp	r3, #1
 80256aa:	dc69      	bgt.n	8025780 <__kernel_rem_pio2+0x4d0>
 80256ac:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 80256b0:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 80256b4:	2d00      	cmp	r5, #0
 80256b6:	d16c      	bne.n	8025792 <__kernel_rem_pio2+0x4e2>
 80256b8:	ed87 5b00 	vstr	d5, [r7]
 80256bc:	ed87 6b02 	vstr	d6, [r7, #8]
 80256c0:	ed87 7b04 	vstr	d7, [r7, #16]
 80256c4:	e7d5      	b.n	8025672 <__kernel_rem_pio2+0x3c2>
 80256c6:	aa40      	add	r2, sp, #256	; 0x100
 80256c8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80256cc:	ed92 6b00 	vldr	d6, [r2]
 80256d0:	3b01      	subs	r3, #1
 80256d2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80256d6:	2b00      	cmp	r3, #0
 80256d8:	daf5      	bge.n	80256c6 <__kernel_rem_pio2+0x416>
 80256da:	b10d      	cbz	r5, 80256e0 <__kernel_rem_pio2+0x430>
 80256dc:	eeb1 7b47 	vneg.f64	d7, d7
 80256e0:	ed87 7b00 	vstr	d7, [r7]
 80256e4:	e7c5      	b.n	8025672 <__kernel_rem_pio2+0x3c2>
 80256e6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 80257a8 <__kernel_rem_pio2+0x4f8>
 80256ea:	e7f4      	b.n	80256d6 <__kernel_rem_pio2+0x426>
 80256ec:	a940      	add	r1, sp, #256	; 0x100
 80256ee:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80256f2:	ed91 7b00 	vldr	d7, [r1]
 80256f6:	3a01      	subs	r2, #1
 80256f8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80256fc:	2a00      	cmp	r2, #0
 80256fe:	daf5      	bge.n	80256ec <__kernel_rem_pio2+0x43c>
 8025700:	b1ad      	cbz	r5, 802572e <__kernel_rem_pio2+0x47e>
 8025702:	eeb1 7b46 	vneg.f64	d7, d6
 8025706:	ed87 7b00 	vstr	d7, [r7]
 802570a:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 802570e:	a942      	add	r1, sp, #264	; 0x108
 8025710:	2201      	movs	r2, #1
 8025712:	ee37 7b46 	vsub.f64	d7, d7, d6
 8025716:	4293      	cmp	r3, r2
 8025718:	da0c      	bge.n	8025734 <__kernel_rem_pio2+0x484>
 802571a:	b10d      	cbz	r5, 8025720 <__kernel_rem_pio2+0x470>
 802571c:	eeb1 7b47 	vneg.f64	d7, d7
 8025720:	ed87 7b02 	vstr	d7, [r7, #8]
 8025724:	e7a5      	b.n	8025672 <__kernel_rem_pio2+0x3c2>
 8025726:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80257a8 <__kernel_rem_pio2+0x4f8>
 802572a:	461a      	mov	r2, r3
 802572c:	e7e6      	b.n	80256fc <__kernel_rem_pio2+0x44c>
 802572e:	eeb0 7b46 	vmov.f64	d7, d6
 8025732:	e7e8      	b.n	8025706 <__kernel_rem_pio2+0x456>
 8025734:	ecb1 6b02 	vldmia	r1!, {d6}
 8025738:	3201      	adds	r2, #1
 802573a:	ee37 7b06 	vadd.f64	d7, d7, d6
 802573e:	e7ea      	b.n	8025716 <__kernel_rem_pio2+0x466>
 8025740:	ed91 7b00 	vldr	d7, [r1]
 8025744:	ed91 5b02 	vldr	d5, [r1, #8]
 8025748:	3801      	subs	r0, #1
 802574a:	ee37 6b05 	vadd.f64	d6, d7, d5
 802574e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8025752:	ed81 6b00 	vstr	d6, [r1]
 8025756:	ee37 7b05 	vadd.f64	d7, d7, d5
 802575a:	ed81 7b02 	vstr	d7, [r1, #8]
 802575e:	e798      	b.n	8025692 <__kernel_rem_pio2+0x3e2>
 8025760:	ed92 7b00 	vldr	d7, [r2]
 8025764:	ed92 5b02 	vldr	d5, [r2, #8]
 8025768:	3901      	subs	r1, #1
 802576a:	ee37 6b05 	vadd.f64	d6, d7, d5
 802576e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8025772:	ed82 6b00 	vstr	d6, [r2]
 8025776:	ee37 7b05 	vadd.f64	d7, d7, d5
 802577a:	ed82 7b02 	vstr	d7, [r2, #8]
 802577e:	e78d      	b.n	802569c <__kernel_rem_pio2+0x3ec>
 8025780:	aa40      	add	r2, sp, #256	; 0x100
 8025782:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8025786:	ed92 6b00 	vldr	d6, [r2]
 802578a:	3b01      	subs	r3, #1
 802578c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8025790:	e78a      	b.n	80256a8 <__kernel_rem_pio2+0x3f8>
 8025792:	eeb1 5b45 	vneg.f64	d5, d5
 8025796:	eeb1 6b46 	vneg.f64	d6, d6
 802579a:	ed87 5b00 	vstr	d5, [r7]
 802579e:	eeb1 7b47 	vneg.f64	d7, d7
 80257a2:	ed87 6b02 	vstr	d6, [r7, #8]
 80257a6:	e78b      	b.n	80256c0 <__kernel_rem_pio2+0x410>
	...

080257b0 <__kernel_sin>:
 80257b0:	ee10 3a90 	vmov	r3, s1
 80257b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80257b8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80257bc:	da04      	bge.n	80257c8 <__kernel_sin+0x18>
 80257be:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80257c2:	ee17 3a90 	vmov	r3, s15
 80257c6:	b35b      	cbz	r3, 8025820 <__kernel_sin+0x70>
 80257c8:	ee20 6b00 	vmul.f64	d6, d0, d0
 80257cc:	ee20 5b06 	vmul.f64	d5, d0, d6
 80257d0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8025828 <__kernel_sin+0x78>
 80257d4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8025830 <__kernel_sin+0x80>
 80257d8:	eea6 4b07 	vfma.f64	d4, d6, d7
 80257dc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8025838 <__kernel_sin+0x88>
 80257e0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80257e4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8025840 <__kernel_sin+0x90>
 80257e8:	eea7 4b06 	vfma.f64	d4, d7, d6
 80257ec:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8025848 <__kernel_sin+0x98>
 80257f0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80257f4:	b930      	cbnz	r0, 8025804 <__kernel_sin+0x54>
 80257f6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8025850 <__kernel_sin+0xa0>
 80257fa:	eea6 4b07 	vfma.f64	d4, d6, d7
 80257fe:	eea4 0b05 	vfma.f64	d0, d4, d5
 8025802:	4770      	bx	lr
 8025804:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8025808:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 802580c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8025810:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8025814:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8025858 <__kernel_sin+0xa8>
 8025818:	eea5 1b07 	vfma.f64	d1, d5, d7
 802581c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8025820:	4770      	bx	lr
 8025822:	bf00      	nop
 8025824:	f3af 8000 	nop.w
 8025828:	5acfd57c 	.word	0x5acfd57c
 802582c:	3de5d93a 	.word	0x3de5d93a
 8025830:	8a2b9ceb 	.word	0x8a2b9ceb
 8025834:	be5ae5e6 	.word	0xbe5ae5e6
 8025838:	57b1fe7d 	.word	0x57b1fe7d
 802583c:	3ec71de3 	.word	0x3ec71de3
 8025840:	19c161d5 	.word	0x19c161d5
 8025844:	bf2a01a0 	.word	0xbf2a01a0
 8025848:	1110f8a6 	.word	0x1110f8a6
 802584c:	3f811111 	.word	0x3f811111
 8025850:	55555549 	.word	0x55555549
 8025854:	bfc55555 	.word	0xbfc55555
 8025858:	55555549 	.word	0x55555549
 802585c:	3fc55555 	.word	0x3fc55555

08025860 <with_errno>:
 8025860:	b513      	push	{r0, r1, r4, lr}
 8025862:	4604      	mov	r4, r0
 8025864:	ed8d 0b00 	vstr	d0, [sp]
 8025868:	f7fd f980 	bl	8022b6c <__errno>
 802586c:	ed9d 0b00 	vldr	d0, [sp]
 8025870:	6004      	str	r4, [r0, #0]
 8025872:	b002      	add	sp, #8
 8025874:	bd10      	pop	{r4, pc}

08025876 <xflow>:
 8025876:	b082      	sub	sp, #8
 8025878:	b158      	cbz	r0, 8025892 <xflow+0x1c>
 802587a:	eeb1 7b40 	vneg.f64	d7, d0
 802587e:	ed8d 7b00 	vstr	d7, [sp]
 8025882:	ed9d 7b00 	vldr	d7, [sp]
 8025886:	2022      	movs	r0, #34	; 0x22
 8025888:	ee20 0b07 	vmul.f64	d0, d0, d7
 802588c:	b002      	add	sp, #8
 802588e:	f7ff bfe7 	b.w	8025860 <with_errno>
 8025892:	eeb0 7b40 	vmov.f64	d7, d0
 8025896:	e7f2      	b.n	802587e <xflow+0x8>

08025898 <__math_uflow>:
 8025898:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80258a0 <__math_uflow+0x8>
 802589c:	f7ff bfeb 	b.w	8025876 <xflow>
 80258a0:	00000000 	.word	0x00000000
 80258a4:	10000000 	.word	0x10000000

080258a8 <__math_oflow>:
 80258a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80258b0 <__math_oflow+0x8>
 80258ac:	f7ff bfe3 	b.w	8025876 <xflow>
 80258b0:	00000000 	.word	0x00000000
 80258b4:	70000000 	.word	0x70000000

080258b8 <__math_divzero>:
 80258b8:	b082      	sub	sp, #8
 80258ba:	2800      	cmp	r0, #0
 80258bc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80258c0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 80258c4:	fe06 7b07 	vseleq.f64	d7, d6, d7
 80258c8:	ed8d 7b00 	vstr	d7, [sp]
 80258cc:	ed9d 0b00 	vldr	d0, [sp]
 80258d0:	ed9f 7b03 	vldr	d7, [pc, #12]	; 80258e0 <__math_divzero+0x28>
 80258d4:	2022      	movs	r0, #34	; 0x22
 80258d6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80258da:	b002      	add	sp, #8
 80258dc:	f7ff bfc0 	b.w	8025860 <with_errno>
	...

080258e8 <__math_invalid>:
 80258e8:	eeb0 7b40 	vmov.f64	d7, d0
 80258ec:	eeb4 7b47 	vcmp.f64	d7, d7
 80258f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80258f4:	ee30 6b40 	vsub.f64	d6, d0, d0
 80258f8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80258fc:	d602      	bvs.n	8025904 <__math_invalid+0x1c>
 80258fe:	2021      	movs	r0, #33	; 0x21
 8025900:	f7ff bfae 	b.w	8025860 <with_errno>
 8025904:	4770      	bx	lr

08025906 <__math_check_uflow>:
 8025906:	eeb5 0b40 	vcmp.f64	d0, #0.0
 802590a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802590e:	d102      	bne.n	8025916 <__math_check_uflow+0x10>
 8025910:	2022      	movs	r0, #34	; 0x22
 8025912:	f7ff bfa5 	b.w	8025860 <with_errno>
 8025916:	4770      	bx	lr

08025918 <__math_check_oflow>:
 8025918:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8025938 <__math_check_oflow+0x20>
 802591c:	eeb0 7bc0 	vabs.f64	d7, d0
 8025920:	eeb4 7b46 	vcmp.f64	d7, d6
 8025924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025928:	dd02      	ble.n	8025930 <__math_check_oflow+0x18>
 802592a:	2022      	movs	r0, #34	; 0x22
 802592c:	f7ff bf98 	b.w	8025860 <with_errno>
 8025930:	4770      	bx	lr
 8025932:	bf00      	nop
 8025934:	f3af 8000 	nop.w
 8025938:	ffffffff 	.word	0xffffffff
 802593c:	7fefffff 	.word	0x7fefffff

08025940 <fabs>:
 8025940:	ec51 0b10 	vmov	r0, r1, d0
 8025944:	ee10 2a10 	vmov	r2, s0
 8025948:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802594c:	ec43 2b10 	vmov	d0, r2, r3
 8025950:	4770      	bx	lr
 8025952:	0000      	movs	r0, r0
 8025954:	0000      	movs	r0, r0
	...

08025958 <floor>:
 8025958:	ee10 1a90 	vmov	r1, s1
 802595c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8025960:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8025964:	2b13      	cmp	r3, #19
 8025966:	b530      	push	{r4, r5, lr}
 8025968:	ee10 0a10 	vmov	r0, s0
 802596c:	ee10 5a10 	vmov	r5, s0
 8025970:	dc31      	bgt.n	80259d6 <floor+0x7e>
 8025972:	2b00      	cmp	r3, #0
 8025974:	da15      	bge.n	80259a2 <floor+0x4a>
 8025976:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8025a30 <floor+0xd8>
 802597a:	ee30 0b07 	vadd.f64	d0, d0, d7
 802597e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8025982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025986:	dd07      	ble.n	8025998 <floor+0x40>
 8025988:	2900      	cmp	r1, #0
 802598a:	da4e      	bge.n	8025a2a <floor+0xd2>
 802598c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8025990:	4318      	orrs	r0, r3
 8025992:	d001      	beq.n	8025998 <floor+0x40>
 8025994:	4928      	ldr	r1, [pc, #160]	; (8025a38 <floor+0xe0>)
 8025996:	2000      	movs	r0, #0
 8025998:	460b      	mov	r3, r1
 802599a:	4602      	mov	r2, r0
 802599c:	ec43 2b10 	vmov	d0, r2, r3
 80259a0:	e020      	b.n	80259e4 <floor+0x8c>
 80259a2:	4a26      	ldr	r2, [pc, #152]	; (8025a3c <floor+0xe4>)
 80259a4:	411a      	asrs	r2, r3
 80259a6:	ea01 0402 	and.w	r4, r1, r2
 80259aa:	4304      	orrs	r4, r0
 80259ac:	d01a      	beq.n	80259e4 <floor+0x8c>
 80259ae:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8025a30 <floor+0xd8>
 80259b2:	ee30 0b07 	vadd.f64	d0, d0, d7
 80259b6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80259ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80259be:	ddeb      	ble.n	8025998 <floor+0x40>
 80259c0:	2900      	cmp	r1, #0
 80259c2:	bfbe      	ittt	lt
 80259c4:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 80259c8:	fa40 f303 	asrlt.w	r3, r0, r3
 80259cc:	18c9      	addlt	r1, r1, r3
 80259ce:	ea21 0102 	bic.w	r1, r1, r2
 80259d2:	2000      	movs	r0, #0
 80259d4:	e7e0      	b.n	8025998 <floor+0x40>
 80259d6:	2b33      	cmp	r3, #51	; 0x33
 80259d8:	dd05      	ble.n	80259e6 <floor+0x8e>
 80259da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80259de:	d101      	bne.n	80259e4 <floor+0x8c>
 80259e0:	ee30 0b00 	vadd.f64	d0, d0, d0
 80259e4:	bd30      	pop	{r4, r5, pc}
 80259e6:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 80259ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80259ee:	40e2      	lsrs	r2, r4
 80259f0:	4202      	tst	r2, r0
 80259f2:	d0f7      	beq.n	80259e4 <floor+0x8c>
 80259f4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8025a30 <floor+0xd8>
 80259f8:	ee30 0b07 	vadd.f64	d0, d0, d7
 80259fc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8025a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025a04:	ddc8      	ble.n	8025998 <floor+0x40>
 8025a06:	2900      	cmp	r1, #0
 8025a08:	da02      	bge.n	8025a10 <floor+0xb8>
 8025a0a:	2b14      	cmp	r3, #20
 8025a0c:	d103      	bne.n	8025a16 <floor+0xbe>
 8025a0e:	3101      	adds	r1, #1
 8025a10:	ea20 0002 	bic.w	r0, r0, r2
 8025a14:	e7c0      	b.n	8025998 <floor+0x40>
 8025a16:	2401      	movs	r4, #1
 8025a18:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8025a1c:	fa04 f303 	lsl.w	r3, r4, r3
 8025a20:	4418      	add	r0, r3
 8025a22:	42a8      	cmp	r0, r5
 8025a24:	bf38      	it	cc
 8025a26:	1909      	addcc	r1, r1, r4
 8025a28:	e7f2      	b.n	8025a10 <floor+0xb8>
 8025a2a:	2000      	movs	r0, #0
 8025a2c:	4601      	mov	r1, r0
 8025a2e:	e7b3      	b.n	8025998 <floor+0x40>
 8025a30:	8800759c 	.word	0x8800759c
 8025a34:	7e37e43c 	.word	0x7e37e43c
 8025a38:	bff00000 	.word	0xbff00000
 8025a3c:	000fffff 	.word	0x000fffff

08025a40 <scalbn>:
 8025a40:	b082      	sub	sp, #8
 8025a42:	ed8d 0b00 	vstr	d0, [sp]
 8025a46:	9b01      	ldr	r3, [sp, #4]
 8025a48:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8025a4c:	b9a2      	cbnz	r2, 8025a78 <scalbn+0x38>
 8025a4e:	9a00      	ldr	r2, [sp, #0]
 8025a50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8025a54:	4313      	orrs	r3, r2
 8025a56:	d03a      	beq.n	8025ace <scalbn+0x8e>
 8025a58:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8025b30 <scalbn+0xf0>
 8025a5c:	4b40      	ldr	r3, [pc, #256]	; (8025b60 <scalbn+0x120>)
 8025a5e:	ee20 7b07 	vmul.f64	d7, d0, d7
 8025a62:	4298      	cmp	r0, r3
 8025a64:	ed8d 7b00 	vstr	d7, [sp]
 8025a68:	da11      	bge.n	8025a8e <scalbn+0x4e>
 8025a6a:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8025b38 <scalbn+0xf8>
 8025a6e:	ed9d 6b00 	vldr	d6, [sp]
 8025a72:	ee27 7b06 	vmul.f64	d7, d7, d6
 8025a76:	e007      	b.n	8025a88 <scalbn+0x48>
 8025a78:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8025a7c:	428a      	cmp	r2, r1
 8025a7e:	d10a      	bne.n	8025a96 <scalbn+0x56>
 8025a80:	ed9d 7b00 	vldr	d7, [sp]
 8025a84:	ee37 7b07 	vadd.f64	d7, d7, d7
 8025a88:	ed8d 7b00 	vstr	d7, [sp]
 8025a8c:	e01f      	b.n	8025ace <scalbn+0x8e>
 8025a8e:	9b01      	ldr	r3, [sp, #4]
 8025a90:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8025a94:	3a36      	subs	r2, #54	; 0x36
 8025a96:	4402      	add	r2, r0
 8025a98:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8025a9c:	428a      	cmp	r2, r1
 8025a9e:	dd0a      	ble.n	8025ab6 <scalbn+0x76>
 8025aa0:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8025b40 <scalbn+0x100>
 8025aa4:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8025b48 <scalbn+0x108>
 8025aa8:	eeb0 6b47 	vmov.f64	d6, d7
 8025aac:	9b01      	ldr	r3, [sp, #4]
 8025aae:	2b00      	cmp	r3, #0
 8025ab0:	fe27 7b05 	vselge.f64	d7, d7, d5
 8025ab4:	e7dd      	b.n	8025a72 <scalbn+0x32>
 8025ab6:	2a00      	cmp	r2, #0
 8025ab8:	dd0d      	ble.n	8025ad6 <scalbn+0x96>
 8025aba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8025abe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8025ac2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8025ac6:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8025aca:	e9cd 0100 	strd	r0, r1, [sp]
 8025ace:	ed9d 0b00 	vldr	d0, [sp]
 8025ad2:	b002      	add	sp, #8
 8025ad4:	4770      	bx	lr
 8025ad6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8025ada:	da18      	bge.n	8025b0e <scalbn+0xce>
 8025adc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8025ae0:	4298      	cmp	r0, r3
 8025ae2:	9b01      	ldr	r3, [sp, #4]
 8025ae4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8025ae8:	dd09      	ble.n	8025afe <scalbn+0xbe>
 8025aea:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8025b40 <scalbn+0x100>
 8025aee:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8025b48 <scalbn+0x108>
 8025af2:	eeb0 6b47 	vmov.f64	d6, d7
 8025af6:	2b00      	cmp	r3, #0
 8025af8:	fe07 7b05 	vseleq.f64	d7, d7, d5
 8025afc:	e7b9      	b.n	8025a72 <scalbn+0x32>
 8025afe:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8025b38 <scalbn+0xf8>
 8025b02:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8025b50 <scalbn+0x110>
 8025b06:	eeb0 6b47 	vmov.f64	d6, d7
 8025b0a:	2b00      	cmp	r3, #0
 8025b0c:	e7f4      	b.n	8025af8 <scalbn+0xb8>
 8025b0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8025b12:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8025b16:	3236      	adds	r2, #54	; 0x36
 8025b18:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8025b1c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8025b20:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8025b58 <scalbn+0x118>
 8025b24:	ec41 0b17 	vmov	d7, r0, r1
 8025b28:	e7a3      	b.n	8025a72 <scalbn+0x32>
 8025b2a:	bf00      	nop
 8025b2c:	f3af 8000 	nop.w
 8025b30:	00000000 	.word	0x00000000
 8025b34:	43500000 	.word	0x43500000
 8025b38:	c2f8f359 	.word	0xc2f8f359
 8025b3c:	01a56e1f 	.word	0x01a56e1f
 8025b40:	8800759c 	.word	0x8800759c
 8025b44:	7e37e43c 	.word	0x7e37e43c
 8025b48:	8800759c 	.word	0x8800759c
 8025b4c:	fe37e43c 	.word	0xfe37e43c
 8025b50:	c2f8f359 	.word	0xc2f8f359
 8025b54:	81a56e1f 	.word	0x81a56e1f
 8025b58:	00000000 	.word	0x00000000
 8025b5c:	3c900000 	.word	0x3c900000
 8025b60:	ffff3cb0 	.word	0xffff3cb0

08025b64 <_init>:
 8025b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025b66:	bf00      	nop
 8025b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025b6a:	bc08      	pop	{r3}
 8025b6c:	469e      	mov	lr, r3
 8025b6e:	4770      	bx	lr

08025b70 <_fini>:
 8025b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025b72:	bf00      	nop
 8025b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025b76:	bc08      	pop	{r3}
 8025b78:	469e      	mov	lr, r3
 8025b7a:	4770      	bx	lr
