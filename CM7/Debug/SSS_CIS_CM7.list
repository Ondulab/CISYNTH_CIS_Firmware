
SSS_CIS_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002595c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005868  08025c00  08025c00  00035c00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802b468  0802b468  00043a1c  2**0
                  CONTENTS
  4 .ARM          00000008  0802b468  0802b468  0003b468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802b470  0802b470  00043a1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802b470  0802b470  0003b470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802b474  0802b474  0003b474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00003a1c  24000000  0802b478  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007c9c  24003a1c  0802ee94  00043a1c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2400b6b8  0802ee94  0004b6b8  2**0
                  ALLOC
 11 .lwip_sec     000019d0  30040000  0802ee94  00050000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00043a1c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000795f2  00000000  00000000  00043a4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000c688  00000000  00000000  000bd03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002e88  00000000  00000000  000c96c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002bd0  00000000  00000000  000cc550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000533a2  00000000  00000000  000cf120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00051f45  00000000  00000000  001224c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001c0ab4  00000000  00000000  00174407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000d1  00000000  00000000  00334ebb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d8e4  00000000  00000000  00334f8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24003a1c 	.word	0x24003a1c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08025be4 	.word	0x08025be4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24003a20 	.word	0x24003a20
 80002dc:	08025be4 	.word	0x08025be4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000718:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800071c:	f000 b9a6 	b.w	8000a6c <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468c      	mov	ip, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	f040 8083 	bne.w	80008be <__udivmoddi4+0x116>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4617      	mov	r7, r2
 80007bc:	d947      	bls.n	800084e <__udivmoddi4+0xa6>
 80007be:	fab2 f282 	clz	r2, r2
 80007c2:	b142      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c4:	f1c2 0020 	rsb	r0, r2, #32
 80007c8:	fa24 f000 	lsr.w	r0, r4, r0
 80007cc:	4091      	lsls	r1, r2
 80007ce:	4097      	lsls	r7, r2
 80007d0:	ea40 0c01 	orr.w	ip, r0, r1
 80007d4:	4094      	lsls	r4, r2
 80007d6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80007da:	0c23      	lsrs	r3, r4, #16
 80007dc:	fbbc f6f8 	udiv	r6, ip, r8
 80007e0:	fa1f fe87 	uxth.w	lr, r7
 80007e4:	fb08 c116 	mls	r1, r8, r6, ip
 80007e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ec:	fb06 f10e 	mul.w	r1, r6, lr
 80007f0:	4299      	cmp	r1, r3
 80007f2:	d909      	bls.n	8000808 <__udivmoddi4+0x60>
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80007fa:	f080 8119 	bcs.w	8000a30 <__udivmoddi4+0x288>
 80007fe:	4299      	cmp	r1, r3
 8000800:	f240 8116 	bls.w	8000a30 <__udivmoddi4+0x288>
 8000804:	3e02      	subs	r6, #2
 8000806:	443b      	add	r3, r7
 8000808:	1a5b      	subs	r3, r3, r1
 800080a:	b2a4      	uxth	r4, r4
 800080c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000810:	fb08 3310 	mls	r3, r8, r0, r3
 8000814:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000818:	fb00 fe0e 	mul.w	lr, r0, lr
 800081c:	45a6      	cmp	lr, r4
 800081e:	d909      	bls.n	8000834 <__udivmoddi4+0x8c>
 8000820:	193c      	adds	r4, r7, r4
 8000822:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000826:	f080 8105 	bcs.w	8000a34 <__udivmoddi4+0x28c>
 800082a:	45a6      	cmp	lr, r4
 800082c:	f240 8102 	bls.w	8000a34 <__udivmoddi4+0x28c>
 8000830:	3802      	subs	r0, #2
 8000832:	443c      	add	r4, r7
 8000834:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000838:	eba4 040e 	sub.w	r4, r4, lr
 800083c:	2600      	movs	r6, #0
 800083e:	b11d      	cbz	r5, 8000848 <__udivmoddi4+0xa0>
 8000840:	40d4      	lsrs	r4, r2
 8000842:	2300      	movs	r3, #0
 8000844:	e9c5 4300 	strd	r4, r3, [r5]
 8000848:	4631      	mov	r1, r6
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	b902      	cbnz	r2, 8000852 <__udivmoddi4+0xaa>
 8000850:	deff      	udf	#255	; 0xff
 8000852:	fab2 f282 	clz	r2, r2
 8000856:	2a00      	cmp	r2, #0
 8000858:	d150      	bne.n	80008fc <__udivmoddi4+0x154>
 800085a:	1bcb      	subs	r3, r1, r7
 800085c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000860:	fa1f f887 	uxth.w	r8, r7
 8000864:	2601      	movs	r6, #1
 8000866:	fbb3 fcfe 	udiv	ip, r3, lr
 800086a:	0c21      	lsrs	r1, r4, #16
 800086c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000870:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000874:	fb08 f30c 	mul.w	r3, r8, ip
 8000878:	428b      	cmp	r3, r1
 800087a:	d907      	bls.n	800088c <__udivmoddi4+0xe4>
 800087c:	1879      	adds	r1, r7, r1
 800087e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000882:	d202      	bcs.n	800088a <__udivmoddi4+0xe2>
 8000884:	428b      	cmp	r3, r1
 8000886:	f200 80e9 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 800088a:	4684      	mov	ip, r0
 800088c:	1ac9      	subs	r1, r1, r3
 800088e:	b2a3      	uxth	r3, r4
 8000890:	fbb1 f0fe 	udiv	r0, r1, lr
 8000894:	fb0e 1110 	mls	r1, lr, r0, r1
 8000898:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800089c:	fb08 f800 	mul.w	r8, r8, r0
 80008a0:	45a0      	cmp	r8, r4
 80008a2:	d907      	bls.n	80008b4 <__udivmoddi4+0x10c>
 80008a4:	193c      	adds	r4, r7, r4
 80008a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80008aa:	d202      	bcs.n	80008b2 <__udivmoddi4+0x10a>
 80008ac:	45a0      	cmp	r8, r4
 80008ae:	f200 80d9 	bhi.w	8000a64 <__udivmoddi4+0x2bc>
 80008b2:	4618      	mov	r0, r3
 80008b4:	eba4 0408 	sub.w	r4, r4, r8
 80008b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008bc:	e7bf      	b.n	800083e <__udivmoddi4+0x96>
 80008be:	428b      	cmp	r3, r1
 80008c0:	d909      	bls.n	80008d6 <__udivmoddi4+0x12e>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	f000 80b1 	beq.w	8000a2a <__udivmoddi4+0x282>
 80008c8:	2600      	movs	r6, #0
 80008ca:	e9c5 0100 	strd	r0, r1, [r5]
 80008ce:	4630      	mov	r0, r6
 80008d0:	4631      	mov	r1, r6
 80008d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d6:	fab3 f683 	clz	r6, r3
 80008da:	2e00      	cmp	r6, #0
 80008dc:	d14a      	bne.n	8000974 <__udivmoddi4+0x1cc>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d302      	bcc.n	80008e8 <__udivmoddi4+0x140>
 80008e2:	4282      	cmp	r2, r0
 80008e4:	f200 80b8 	bhi.w	8000a58 <__udivmoddi4+0x2b0>
 80008e8:	1a84      	subs	r4, r0, r2
 80008ea:	eb61 0103 	sbc.w	r1, r1, r3
 80008ee:	2001      	movs	r0, #1
 80008f0:	468c      	mov	ip, r1
 80008f2:	2d00      	cmp	r5, #0
 80008f4:	d0a8      	beq.n	8000848 <__udivmoddi4+0xa0>
 80008f6:	e9c5 4c00 	strd	r4, ip, [r5]
 80008fa:	e7a5      	b.n	8000848 <__udivmoddi4+0xa0>
 80008fc:	f1c2 0320 	rsb	r3, r2, #32
 8000900:	fa20 f603 	lsr.w	r6, r0, r3
 8000904:	4097      	lsls	r7, r2
 8000906:	fa01 f002 	lsl.w	r0, r1, r2
 800090a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800090e:	40d9      	lsrs	r1, r3
 8000910:	4330      	orrs	r0, r6
 8000912:	0c03      	lsrs	r3, r0, #16
 8000914:	fbb1 f6fe 	udiv	r6, r1, lr
 8000918:	fa1f f887 	uxth.w	r8, r7
 800091c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000920:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000924:	fb06 f108 	mul.w	r1, r6, r8
 8000928:	4299      	cmp	r1, r3
 800092a:	fa04 f402 	lsl.w	r4, r4, r2
 800092e:	d909      	bls.n	8000944 <__udivmoddi4+0x19c>
 8000930:	18fb      	adds	r3, r7, r3
 8000932:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000936:	f080 808d 	bcs.w	8000a54 <__udivmoddi4+0x2ac>
 800093a:	4299      	cmp	r1, r3
 800093c:	f240 808a 	bls.w	8000a54 <__udivmoddi4+0x2ac>
 8000940:	3e02      	subs	r6, #2
 8000942:	443b      	add	r3, r7
 8000944:	1a5b      	subs	r3, r3, r1
 8000946:	b281      	uxth	r1, r0
 8000948:	fbb3 f0fe 	udiv	r0, r3, lr
 800094c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000950:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000954:	fb00 f308 	mul.w	r3, r0, r8
 8000958:	428b      	cmp	r3, r1
 800095a:	d907      	bls.n	800096c <__udivmoddi4+0x1c4>
 800095c:	1879      	adds	r1, r7, r1
 800095e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000962:	d273      	bcs.n	8000a4c <__udivmoddi4+0x2a4>
 8000964:	428b      	cmp	r3, r1
 8000966:	d971      	bls.n	8000a4c <__udivmoddi4+0x2a4>
 8000968:	3802      	subs	r0, #2
 800096a:	4439      	add	r1, r7
 800096c:	1acb      	subs	r3, r1, r3
 800096e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000972:	e778      	b.n	8000866 <__udivmoddi4+0xbe>
 8000974:	f1c6 0c20 	rsb	ip, r6, #32
 8000978:	fa03 f406 	lsl.w	r4, r3, r6
 800097c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000980:	431c      	orrs	r4, r3
 8000982:	fa20 f70c 	lsr.w	r7, r0, ip
 8000986:	fa01 f306 	lsl.w	r3, r1, r6
 800098a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800098e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000992:	431f      	orrs	r7, r3
 8000994:	0c3b      	lsrs	r3, r7, #16
 8000996:	fbb1 f9fe 	udiv	r9, r1, lr
 800099a:	fa1f f884 	uxth.w	r8, r4
 800099e:	fb0e 1119 	mls	r1, lr, r9, r1
 80009a2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80009a6:	fb09 fa08 	mul.w	sl, r9, r8
 80009aa:	458a      	cmp	sl, r1
 80009ac:	fa02 f206 	lsl.w	r2, r2, r6
 80009b0:	fa00 f306 	lsl.w	r3, r0, r6
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x220>
 80009b6:	1861      	adds	r1, r4, r1
 80009b8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80009bc:	d248      	bcs.n	8000a50 <__udivmoddi4+0x2a8>
 80009be:	458a      	cmp	sl, r1
 80009c0:	d946      	bls.n	8000a50 <__udivmoddi4+0x2a8>
 80009c2:	f1a9 0902 	sub.w	r9, r9, #2
 80009c6:	4421      	add	r1, r4
 80009c8:	eba1 010a 	sub.w	r1, r1, sl
 80009cc:	b2bf      	uxth	r7, r7
 80009ce:	fbb1 f0fe 	udiv	r0, r1, lr
 80009d2:	fb0e 1110 	mls	r1, lr, r0, r1
 80009d6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80009da:	fb00 f808 	mul.w	r8, r0, r8
 80009de:	45b8      	cmp	r8, r7
 80009e0:	d907      	bls.n	80009f2 <__udivmoddi4+0x24a>
 80009e2:	19e7      	adds	r7, r4, r7
 80009e4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80009e8:	d22e      	bcs.n	8000a48 <__udivmoddi4+0x2a0>
 80009ea:	45b8      	cmp	r8, r7
 80009ec:	d92c      	bls.n	8000a48 <__udivmoddi4+0x2a0>
 80009ee:	3802      	subs	r0, #2
 80009f0:	4427      	add	r7, r4
 80009f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80009f6:	eba7 0708 	sub.w	r7, r7, r8
 80009fa:	fba0 8902 	umull	r8, r9, r0, r2
 80009fe:	454f      	cmp	r7, r9
 8000a00:	46c6      	mov	lr, r8
 8000a02:	4649      	mov	r1, r9
 8000a04:	d31a      	bcc.n	8000a3c <__udivmoddi4+0x294>
 8000a06:	d017      	beq.n	8000a38 <__udivmoddi4+0x290>
 8000a08:	b15d      	cbz	r5, 8000a22 <__udivmoddi4+0x27a>
 8000a0a:	ebb3 020e 	subs.w	r2, r3, lr
 8000a0e:	eb67 0701 	sbc.w	r7, r7, r1
 8000a12:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a16:	40f2      	lsrs	r2, r6
 8000a18:	ea4c 0202 	orr.w	r2, ip, r2
 8000a1c:	40f7      	lsrs	r7, r6
 8000a1e:	e9c5 2700 	strd	r2, r7, [r5]
 8000a22:	2600      	movs	r6, #0
 8000a24:	4631      	mov	r1, r6
 8000a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2a:	462e      	mov	r6, r5
 8000a2c:	4628      	mov	r0, r5
 8000a2e:	e70b      	b.n	8000848 <__udivmoddi4+0xa0>
 8000a30:	4606      	mov	r6, r0
 8000a32:	e6e9      	b.n	8000808 <__udivmoddi4+0x60>
 8000a34:	4618      	mov	r0, r3
 8000a36:	e6fd      	b.n	8000834 <__udivmoddi4+0x8c>
 8000a38:	4543      	cmp	r3, r8
 8000a3a:	d2e5      	bcs.n	8000a08 <__udivmoddi4+0x260>
 8000a3c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a40:	eb69 0104 	sbc.w	r1, r9, r4
 8000a44:	3801      	subs	r0, #1
 8000a46:	e7df      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a48:	4608      	mov	r0, r1
 8000a4a:	e7d2      	b.n	80009f2 <__udivmoddi4+0x24a>
 8000a4c:	4660      	mov	r0, ip
 8000a4e:	e78d      	b.n	800096c <__udivmoddi4+0x1c4>
 8000a50:	4681      	mov	r9, r0
 8000a52:	e7b9      	b.n	80009c8 <__udivmoddi4+0x220>
 8000a54:	4666      	mov	r6, ip
 8000a56:	e775      	b.n	8000944 <__udivmoddi4+0x19c>
 8000a58:	4630      	mov	r0, r6
 8000a5a:	e74a      	b.n	80008f2 <__udivmoddi4+0x14a>
 8000a5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a60:	4439      	add	r1, r7
 8000a62:	e713      	b.n	800088c <__udivmoddi4+0xe4>
 8000a64:	3802      	subs	r0, #2
 8000a66:	443c      	add	r4, r7
 8000a68:	e724      	b.n	80008b4 <__udivmoddi4+0x10c>
 8000a6a:	bf00      	nop

08000a6c <__aeabi_idiv0>:
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <cisynth_ifft>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int cisynth_ifft(void)
{
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	ed2d 8b02 	vpush	{d8}
 8000a76:	b0c7      	sub	sp, #284	; 0x11c
 8000a78:	af02      	add	r7, sp, #8
	uint8_t FreqStr[256] = {0};
 8000a7a:	463b      	mov	r3, r7
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	3304      	adds	r3, #4
 8000a82:	22fc      	movs	r2, #252	; 0xfc
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f01f f976 	bl	801fd78 <memset>
	uint32_t cis_color = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	printf("Start BW ifft mode \n");
 8000a92:	489d      	ldr	r0, [pc, #628]	; (8000d08 <cisynth_ifft+0x298>)
 8000a94:	f020 f8f0 	bl	8020c78 <puts>

	cisynth_ifft_SetHint();
 8000a98:	f000 f942 	bl	8000d20 <cisynth_ifft_SetHint>
	pcm5102_Init();
 8000a9c:	f01c fde2 	bl	801d664 <pcm5102_Init>
	cis_Init(IFFT_MODE);
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f01c f95b 	bl	801cd5c <cis_Init>
	synth_IfftInit();
 8000aa6:	f010 fc6f 	bl	8011388 <synth_IfftInit>
	//	cis_Test();

	/* Infinite loop */
	static uint32_t start_tick;
	uint32_t latency;
	int32_t i = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint32_t note = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	while (1)
	{
		start_tick = HAL_GetTick();
 8000ab6:	f003 faa3 	bl	8004000 <HAL_GetTick>
 8000aba:	4603      	mov	r3, r0
 8000abc:	4a93      	ldr	r2, [pc, #588]	; (8000d0c <cisynth_ifft+0x29c>)
 8000abe:	6013      	str	r3, [r2, #0]
//		synth_SetImageData(50, 32760); //for testing
		while ((synth_process_cnt) < (SAMPLING_FREQUENCY / DISPLAY_REFRESH_FPS))
 8000ac0:	e002      	b.n	8000ac8 <cisynth_ifft+0x58>
		{
			synth_AudioProcess(IFFT_MODE);
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f010 ff3a 	bl	801193c <synth_AudioProcess>
		while ((synth_process_cnt) < (SAMPLING_FREQUENCY / DISPLAY_REFRESH_FPS))
 8000ac8:	4b91      	ldr	r3, [pc, #580]	; (8000d10 <cisynth_ifft+0x2a0>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 8000ad0:	d3f7      	bcc.n	8000ac2 <cisynth_ifft+0x52>
		}

		latency = HAL_GetTick() - start_tick;
 8000ad2:	f003 fa95 	bl	8004000 <HAL_GetTick>
 8000ad6:	4602      	mov	r2, r0
 8000ad8:	4b8c      	ldr	r3, [pc, #560]	; (8000d0c <cisynth_ifft+0x29c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
		sprintf((char *)FreqStr, "%dHz", (int)((synth_process_cnt * 1000) / latency));
 8000ae2:	4b8b      	ldr	r3, [pc, #556]	; (8000d10 <cisynth_ifft+0x2a0>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000aea:	fb02 f203 	mul.w	r2, r2, r3
 8000aee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af6:	461a      	mov	r2, r3
 8000af8:	463b      	mov	r3, r7
 8000afa:	4986      	ldr	r1, [pc, #536]	; (8000d14 <cisynth_ifft+0x2a4>)
 8000afc:	4618      	mov	r0, r3
 8000afe:	f020 f919 	bl	8020d34 <siprintf>
//		sprintf((char *)FreqStr, "%dHz", (int)((SAMPLING_FREQUENCY * 1000) / (DISPLAY_REFRESH_FPS)));
		synth_process_cnt = 0;
 8000b02:	4b83      	ldr	r3, [pc, #524]	; (8000d10 <cisynth_ifft+0x2a0>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]

		ssd1362_drawRect(0, DISPLAY_AERA1_Y1POS, DISPLAY_MAX_X_LENGTH / 2 - 1, DISPLAY_AERA1_Y2POS, 3, false);
 8000b08:	2300      	movs	r3, #0
 8000b0a:	9301      	str	r3, [sp, #4]
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	231c      	movs	r3, #28
 8000b12:	227f      	movs	r2, #127	; 0x7f
 8000b14:	210a      	movs	r1, #10
 8000b16:	2000      	movs	r0, #0
 8000b18:	f01c ff40 	bl	801d99c <ssd1362_drawRect>
		ssd1362_drawRect(DISPLAY_MAX_X_LENGTH / 2 + 1, DISPLAY_AERA1_Y1POS, DISPLAY_MAX_X_LENGTH, DISPLAY_AERA1_Y2POS, 4, false);
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	9301      	str	r3, [sp, #4]
 8000b20:	2304      	movs	r3, #4
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	231c      	movs	r3, #28
 8000b26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b2a:	210a      	movs	r1, #10
 8000b2c:	2081      	movs	r0, #129	; 0x81
 8000b2e:	f01c ff35 	bl	801d99c <ssd1362_drawRect>
		ssd1362_drawRect(0, DISPLAY_AERA2_Y1POS, DISPLAY_MAX_X_LENGTH, DISPLAY_AERA2_Y2POS, 3, false);
 8000b32:	2300      	movs	r3, #0
 8000b34:	9301      	str	r3, [sp, #4]
 8000b36:	2303      	movs	r3, #3
 8000b38:	9300      	str	r3, [sp, #0]
 8000b3a:	2329      	movs	r3, #41	; 0x29
 8000b3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b40:	211d      	movs	r1, #29
 8000b42:	2000      	movs	r0, #0
 8000b44:	f01c ff2a 	bl	801d99c <ssd1362_drawRect>
		ssd1362_drawRect(0, DISPLAY_AERA3_Y1POS, DISPLAY_MAX_X_LENGTH, DISPLAY_AERA3_Y2POS, 8, false);
 8000b48:	2300      	movs	r3, #0
 8000b4a:	9301      	str	r3, [sp, #4]
 8000b4c:	2308      	movs	r3, #8
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	2332      	movs	r3, #50	; 0x32
 8000b52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b56:	212a      	movs	r1, #42	; 0x2a
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f01c ff1f 	bl	801d99c <ssd1362_drawRect>

		if (note > cis_GetEffectivePixelNb())
 8000b5e:	f01c f963 	bl	801ce28 <cis_GetEffectivePixelNb>
 8000b62:	4603      	mov	r3, r0
 8000b64:	461a      	mov	r2, r3
 8000b66:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d902      	bls.n	8000b74 <cisynth_ifft+0x104>
		{
			note = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		}

		synth_SetImageData(++note, 32760); //for testing
 8000b74:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000b78:	3301      	adds	r3, #1
 8000b7a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000b7e:	f647 71f8 	movw	r1, #32760	; 0x7ff8
 8000b82:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8000b86:	f010 fd2f 	bl	80115e8 <synth_SetImageData>
		synth_SetImageData(note - 1, 0);
 8000b8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f010 fd28 	bl	80115e8 <synth_SetImageData>

		for (i = 0; i < ((DISPLAY_MAX_X_LENGTH / 2) - 1); i++)
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000b9e:	e037      	b.n	8000c10 <cisynth_ifft+0x1a0>
		{
			ssd1362_drawPixel(i, DISPLAY_AERA1_Y1POS + (DISPLAY_AERAS1_HEIGHT / 2) + (synth_GetAudioData(i * 2) / 4096) - 1, 10, false);
 8000ba0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000ba4:	b29c      	uxth	r4, r3
 8000ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	4618      	mov	r0, r3
 8000bae:	f010 fd0b 	bl	80115c8 <synth_GetAudioData>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	da01      	bge.n	8000bbc <cisynth_ifft+0x14c>
 8000bb8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000bbc:	131b      	asrs	r3, r3, #12
 8000bbe:	b21b      	sxth	r3, r3
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	3312      	adds	r3, #18
 8000bc4:	b299      	uxth	r1, r3
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	220a      	movs	r2, #10
 8000bca:	4620      	mov	r0, r4
 8000bcc:	f01c fe7c 	bl	801d8c8 <ssd1362_drawPixel>
			ssd1362_drawPixel(i + (DISPLAY_MAX_X_LENGTH / 2) + 1, DISPLAY_AERA1_Y1POS + (DISPLAY_AERAS1_HEIGHT / 2) + (synth_GetAudioData(i * 2 - 1) / 4096) - 1, 10, false);
 8000bd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	3381      	adds	r3, #129	; 0x81
 8000bd8:	b29c      	uxth	r4, r3
 8000bda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	3b01      	subs	r3, #1
 8000be2:	4618      	mov	r0, r3
 8000be4:	f010 fcf0 	bl	80115c8 <synth_GetAudioData>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	da01      	bge.n	8000bf2 <cisynth_ifft+0x182>
 8000bee:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000bf2:	131b      	asrs	r3, r3, #12
 8000bf4:	b21b      	sxth	r3, r3
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	3312      	adds	r3, #18
 8000bfa:	b299      	uxth	r1, r3
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	220a      	movs	r2, #10
 8000c00:	4620      	mov	r0, r4
 8000c02:	f01c fe61 	bl	801d8c8 <ssd1362_drawPixel>
		for (i = 0; i < ((DISPLAY_MAX_X_LENGTH / 2) - 1); i++)
 8000c06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000c10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000c14:	2b7e      	cmp	r3, #126	; 0x7e
 8000c16:	ddc3      	ble.n	8000ba0 <cisynth_ifft+0x130>
		}

		for (i = 0; i < (DISPLAY_MAX_X_LENGTH); i++)
 8000c18:	2300      	movs	r3, #0
 8000c1a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000c1e:	e055      	b.n	8000ccc <cisynth_ifft+0x25c>
		{
			cis_color = cis_GetBuffData((i * ((float)cis_GetEffectivePixelNb() / (float)DISPLAY_MAX_X_LENGTH)));
 8000c20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000c24:	ee07 3a90 	vmov	s15, r3
 8000c28:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000c2c:	f01c f8fc 	bl	801ce28 <cis_GetEffectivePixelNb>
 8000c30:	4603      	mov	r3, r0
 8000c32:	ee07 3a90 	vmov	s15, r3
 8000c36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c3a:	eddf 6a37 	vldr	s13, [pc, #220]	; 8000d18 <cisynth_ifft+0x2a8>
 8000c3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c42:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000c46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c4a:	ee17 0a90 	vmov	r0, s15
 8000c4e:	f01c f8f7 	bl	801ce40 <cis_GetBuffData>
 8000c52:	4603      	mov	r3, r0
 8000c54:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			cis_color = cis_color >> 8;
 8000c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000c5c:	0a1b      	lsrs	r3, r3, #8
 8000c5e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			ssd1362_drawPixel(i, DISPLAY_AERA2_Y1POS + DISPLAY_AERAS2_HEIGHT - DISPLAY_INTER_AERAS_HEIGHT - (cis_color >> 5) - 1, 15, false);
 8000c62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000c66:	b298      	uxth	r0, r3
 8000c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000c6c:	095b      	lsrs	r3, r3, #5
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	f1c3 0327 	rsb	r3, r3, #39	; 0x27
 8000c74:	b299      	uxth	r1, r3
 8000c76:	2300      	movs	r3, #0
 8000c78:	220f      	movs	r2, #15
 8000c7a:	f01c fe25 	bl	801d8c8 <ssd1362_drawPixel>

			cis_color |= 0xFF000000;
 8000c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000c82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000c86:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			cis_color |= cis_color << 8;
 8000c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000c8e:	021b      	lsls	r3, r3, #8
 8000c90:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8000c94:	4313      	orrs	r3, r2
 8000c96:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			cis_color |= cis_color << 16;
 8000c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000c9e:	041b      	lsls	r3, r3, #16
 8000ca0:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			ssd1362_drawVLine(i, DISPLAY_AERA3_Y1POS + 1, DISPLAY_AERAS3_HEIGHT - 2, cis_color, false);
 8000caa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000cae:	b298      	uxth	r0, r3
 8000cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	9200      	str	r2, [sp, #0]
 8000cba:	2206      	movs	r2, #6
 8000cbc:	212b      	movs	r1, #43	; 0x2b
 8000cbe:	f01c fede 	bl	801da7e <ssd1362_drawVLine>
		for (i = 0; i < (DISPLAY_MAX_X_LENGTH); i++)
 8000cc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000cd0:	2bff      	cmp	r3, #255	; 0xff
 8000cd2:	dda5      	ble.n	8000c20 <cisynth_ifft+0x1b0>

			//			cis_color = synth_GetImageData((i * ((float)cis_GetEffectivePixelNb() / (float)DISPLAY_MAX_X_LENGTH)));
			//			cis_color = cis_color >> 11;
			//			ssd1362_drawPixel(i, DISPLAY_AERA5_YPOS + DISPLAY_AERAS_HEIGHT - DISPLAY_INTER_AERAS_HEIGHT - cis_color, 15, false);
		}
		ssd1362_drawRect(200, DISPLAY_HEAD_Y1POS, DISPLAY_MAX_X_LENGTH, DISPLAY_HEAD_Y2POS, 4, false);
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	9301      	str	r3, [sp, #4]
 8000cd8:	2304      	movs	r3, #4
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	2309      	movs	r3, #9
 8000cde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	20c8      	movs	r0, #200	; 0xc8
 8000ce6:	f01c fe59 	bl	801d99c <ssd1362_drawRect>
		ssd1362_drawString(200, 1, (int8_t*)FreqStr, 15, 8);
 8000cea:	463a      	mov	r2, r7
 8000cec:	2308      	movs	r3, #8
 8000cee:	9300      	str	r3, [sp, #0]
 8000cf0:	230f      	movs	r3, #15
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	20c8      	movs	r0, #200	; 0xc8
 8000cf6:	f01c ffb4 	bl	801dc62 <ssd1362_drawString>
		ssd1362_writeFullBuffer();
 8000cfa:	f01d f881 	bl	801de00 <ssd1362_writeFullBuffer>

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000cfe:	2140      	movs	r1, #64	; 0x40
 8000d00:	4806      	ldr	r0, [pc, #24]	; (8000d1c <cisynth_ifft+0x2ac>)
 8000d02:	f008 fe30 	bl	8009966 <HAL_GPIO_TogglePin>
		start_tick = HAL_GetTick();
 8000d06:	e6d6      	b.n	8000ab6 <cisynth_ifft+0x46>
 8000d08:	08025c00 	.word	0x08025c00
 8000d0c:	24003a3c 	.word	0x24003a3c
 8000d10:	24004650 	.word	0x24004650
 8000d14:	08025c14 	.word	0x08025c14
 8000d18:	43800000 	.word	0x43800000
 8000d1c:	58021c00 	.word	0x58021c00

08000d20 <cisynth_ifft_SetHint>:
 * @brief  Display Audio demo hint
 * @param  None
 * @retval None
 */
static void cisynth_ifft_SetHint(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af02      	add	r7, sp, #8
	/* Set Audio header description */
	ssd1362_clearBuffer();
 8000d26:	f01d f83d 	bl	801dda4 <ssd1362_clearBuffer>
	ssd1362_drawRect(0, DISPLAY_HEAD_Y1POS, DISPLAY_MAX_X_LENGTH, DISPLAY_HEAD_Y2POS, 4, false);
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	9301      	str	r3, [sp, #4]
 8000d2e:	2304      	movs	r3, #4
 8000d30:	9300      	str	r3, [sp, #0]
 8000d32:	2309      	movs	r3, #9
 8000d34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d38:	2100      	movs	r1, #0
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f01c fe2e 	bl	801d99c <ssd1362_drawRect>
	ssd1362_drawString(100, 1, (int8_t *)"CISYNTH 3", 0xF, 8);
 8000d40:	2308      	movs	r3, #8
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	230f      	movs	r3, #15
 8000d46:	4a09      	ldr	r2, [pc, #36]	; (8000d6c <cisynth_ifft_SetHint+0x4c>)
 8000d48:	2101      	movs	r1, #1
 8000d4a:	2064      	movs	r0, #100	; 0x64
 8000d4c:	f01c ff89 	bl	801dc62 <ssd1362_drawString>
	ssd1362_drawString(0, 1, (int8_t *)"BW ifft", 0xF, 8);
 8000d50:	2308      	movs	r3, #8
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	230f      	movs	r3, #15
 8000d56:	4a06      	ldr	r2, [pc, #24]	; (8000d70 <cisynth_ifft_SetHint+0x50>)
 8000d58:	2101      	movs	r1, #1
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f01c ff81 	bl	801dc62 <ssd1362_drawString>
	ssd1362_writeFullBuffer();
 8000d60:	f01d f84e 	bl	801de00 <ssd1362_writeFullBuffer>
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	08025c1c 	.word	0x08025c1c
 8000d70:	08025c28 	.word	0x08025c28

08000d74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d78:	4b3f      	ldr	r3, [pc, #252]	; (8000e78 <SystemInit+0x104>)
 8000d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7e:	4a3e      	ldr	r2, [pc, #248]	; (8000e78 <SystemInit+0x104>)
 8000d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000d88:	4b3b      	ldr	r3, [pc, #236]	; (8000e78 <SystemInit+0x104>)
 8000d8a:	691b      	ldr	r3, [r3, #16]
 8000d8c:	4a3a      	ldr	r2, [pc, #232]	; (8000e78 <SystemInit+0x104>)
 8000d8e:	f043 0310 	orr.w	r3, r3, #16
 8000d92:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d94:	4b39      	ldr	r3, [pc, #228]	; (8000e7c <SystemInit+0x108>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f003 030f 	and.w	r3, r3, #15
 8000d9c:	2b06      	cmp	r3, #6
 8000d9e:	d807      	bhi.n	8000db0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000da0:	4b36      	ldr	r3, [pc, #216]	; (8000e7c <SystemInit+0x108>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f023 030f 	bic.w	r3, r3, #15
 8000da8:	4a34      	ldr	r2, [pc, #208]	; (8000e7c <SystemInit+0x108>)
 8000daa:	f043 0307 	orr.w	r3, r3, #7
 8000dae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000db0:	4b33      	ldr	r3, [pc, #204]	; (8000e80 <SystemInit+0x10c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a32      	ldr	r2, [pc, #200]	; (8000e80 <SystemInit+0x10c>)
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000dbc:	4b30      	ldr	r3, [pc, #192]	; (8000e80 <SystemInit+0x10c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000dc2:	4b2f      	ldr	r3, [pc, #188]	; (8000e80 <SystemInit+0x10c>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	492e      	ldr	r1, [pc, #184]	; (8000e80 <SystemInit+0x10c>)
 8000dc8:	4b2e      	ldr	r3, [pc, #184]	; (8000e84 <SystemInit+0x110>)
 8000dca:	4013      	ands	r3, r2
 8000dcc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000dce:	4b2b      	ldr	r3, [pc, #172]	; (8000e7c <SystemInit+0x108>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f003 0308 	and.w	r3, r3, #8
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d007      	beq.n	8000dea <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000dda:	4b28      	ldr	r3, [pc, #160]	; (8000e7c <SystemInit+0x108>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f023 030f 	bic.w	r3, r3, #15
 8000de2:	4a26      	ldr	r2, [pc, #152]	; (8000e7c <SystemInit+0x108>)
 8000de4:	f043 0307 	orr.w	r3, r3, #7
 8000de8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000dea:	4b25      	ldr	r3, [pc, #148]	; (8000e80 <SystemInit+0x10c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000df0:	4b23      	ldr	r3, [pc, #140]	; (8000e80 <SystemInit+0x10c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000df6:	4b22      	ldr	r3, [pc, #136]	; (8000e80 <SystemInit+0x10c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000dfc:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <SystemInit+0x10c>)
 8000dfe:	4a22      	ldr	r2, [pc, #136]	; (8000e88 <SystemInit+0x114>)
 8000e00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e02:	4b1f      	ldr	r3, [pc, #124]	; (8000e80 <SystemInit+0x10c>)
 8000e04:	4a21      	ldr	r2, [pc, #132]	; (8000e8c <SystemInit+0x118>)
 8000e06:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e08:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <SystemInit+0x10c>)
 8000e0a:	4a21      	ldr	r2, [pc, #132]	; (8000e90 <SystemInit+0x11c>)
 8000e0c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e0e:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <SystemInit+0x10c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e14:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <SystemInit+0x10c>)
 8000e16:	4a1e      	ldr	r2, [pc, #120]	; (8000e90 <SystemInit+0x11c>)
 8000e18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e1a:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <SystemInit+0x10c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e20:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <SystemInit+0x10c>)
 8000e22:	4a1b      	ldr	r2, [pc, #108]	; (8000e90 <SystemInit+0x11c>)
 8000e24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e26:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <SystemInit+0x10c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <SystemInit+0x10c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a13      	ldr	r2, [pc, #76]	; (8000e80 <SystemInit+0x10c>)
 8000e32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e38:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <SystemInit+0x10c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <SystemInit+0x120>)
 8000e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e42:	4a14      	ldr	r2, [pc, #80]	; (8000e94 <SystemInit+0x120>)
 8000e44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e48:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000e4a:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <SystemInit+0x124>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <SystemInit+0x128>)
 8000e50:	4013      	ands	r3, r2
 8000e52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e56:	d202      	bcs.n	8000e5e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000e58:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <SystemInit+0x12c>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e5e:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <SystemInit+0x130>)
 8000e60:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000e64:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000e66:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <SystemInit+0x104>)
 8000e68:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e6c:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00
 8000e7c:	52002000 	.word	0x52002000
 8000e80:	58024400 	.word	0x58024400
 8000e84:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e88:	02020200 	.word	0x02020200
 8000e8c:	01ff0000 	.word	0x01ff0000
 8000e90:	01010280 	.word	0x01010280
 8000e94:	580000c0 	.word	0x580000c0
 8000e98:	5c001000 	.word	0x5c001000
 8000e9c:	ffff0000 	.word	0xffff0000
 8000ea0:	51008108 	.word	0x51008108
 8000ea4:	52004000 	.word	0x52004000

08000ea8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	; 0x28
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000eae:	f107 031c 	add.w	r3, r7, #28
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eba:	463b      	mov	r3, r7
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
 8000ec8:	615a      	str	r2, [r3, #20]
 8000eca:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ecc:	4b2f      	ldr	r3, [pc, #188]	; (8000f8c <MX_ADC1_Init+0xe4>)
 8000ece:	4a30      	ldr	r2, [pc, #192]	; (8000f90 <MX_ADC1_Init+0xe8>)
 8000ed0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ed2:	4b2e      	ldr	r3, [pc, #184]	; (8000f8c <MX_ADC1_Init+0xe4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000ed8:	4b2c      	ldr	r3, [pc, #176]	; (8000f8c <MX_ADC1_Init+0xe4>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ede:	4b2b      	ldr	r3, [pc, #172]	; (8000f8c <MX_ADC1_Init+0xe4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ee4:	4b29      	ldr	r3, [pc, #164]	; (8000f8c <MX_ADC1_Init+0xe4>)
 8000ee6:	2204      	movs	r2, #4
 8000ee8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000eea:	4b28      	ldr	r3, [pc, #160]	; (8000f8c <MX_ADC1_Init+0xe4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ef0:	4b26      	ldr	r3, [pc, #152]	; (8000f8c <MX_ADC1_Init+0xe4>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000ef6:	4b25      	ldr	r3, [pc, #148]	; (8000f8c <MX_ADC1_Init+0xe4>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000efc:	4b23      	ldr	r3, [pc, #140]	; (8000f8c <MX_ADC1_Init+0xe4>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f02:	4b22      	ldr	r3, [pc, #136]	; (8000f8c <MX_ADC1_Init+0xe4>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f08:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <MX_ADC1_Init+0xe4>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000f0e:	4b1f      	ldr	r3, [pc, #124]	; (8000f8c <MX_ADC1_Init+0xe4>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f14:	4b1d      	ldr	r3, [pc, #116]	; (8000f8c <MX_ADC1_Init+0xe4>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000f1a:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <MX_ADC1_Init+0xe4>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f20:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <MX_ADC1_Init+0xe4>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f28:	4818      	ldr	r0, [pc, #96]	; (8000f8c <MX_ADC1_Init+0xe4>)
 8000f2a:	f003 fa6f 	bl	800440c <HAL_ADC_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f34:	f001 fe7e 	bl	8002c34 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f3c:	f107 031c 	add.w	r3, r7, #28
 8000f40:	4619      	mov	r1, r3
 8000f42:	4812      	ldr	r0, [pc, #72]	; (8000f8c <MX_ADC1_Init+0xe4>)
 8000f44:	f004 f882 	bl	800504c <HAL_ADCEx_MultiModeConfigChannel>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000f4e:	f001 fe71 	bl	8002c34 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f52:	2301      	movs	r3, #1
 8000f54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f56:	2306      	movs	r3, #6
 8000f58:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f5e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000f62:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f64:	2304      	movs	r3, #4
 8000f66:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f70:	463b      	mov	r3, r7
 8000f72:	4619      	mov	r1, r3
 8000f74:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_ADC1_Init+0xe4>)
 8000f76:	f003 fbe9 	bl	800474c <HAL_ADC_ConfigChannel>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000f80:	f001 fe58 	bl	8002c34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f84:	bf00      	nop
 8000f86:	3728      	adds	r7, #40	; 0x28
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	24005858 	.word	0x24005858
 8000f90:	40022000 	.word	0x40022000

08000f94 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
 8000fa8:	615a      	str	r2, [r3, #20]
 8000faa:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000fac:	4b29      	ldr	r3, [pc, #164]	; (8001054 <MX_ADC2_Init+0xc0>)
 8000fae:	4a2a      	ldr	r2, [pc, #168]	; (8001058 <MX_ADC2_Init+0xc4>)
 8000fb0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fb2:	4b28      	ldr	r3, [pc, #160]	; (8001054 <MX_ADC2_Init+0xc0>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000fb8:	4b26      	ldr	r3, [pc, #152]	; (8001054 <MX_ADC2_Init+0xc0>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fbe:	4b25      	ldr	r3, [pc, #148]	; (8001054 <MX_ADC2_Init+0xc0>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fc4:	4b23      	ldr	r3, [pc, #140]	; (8001054 <MX_ADC2_Init+0xc0>)
 8000fc6:	2204      	movs	r2, #4
 8000fc8:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000fca:	4b22      	ldr	r3, [pc, #136]	; (8001054 <MX_ADC2_Init+0xc0>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000fd0:	4b20      	ldr	r3, [pc, #128]	; (8001054 <MX_ADC2_Init+0xc0>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000fd6:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <MX_ADC2_Init+0xc0>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000fdc:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <MX_ADC2_Init+0xc0>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fe2:	4b1c      	ldr	r3, [pc, #112]	; (8001054 <MX_ADC2_Init+0xc0>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fe8:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <MX_ADC2_Init+0xc0>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000fee:	4b19      	ldr	r3, [pc, #100]	; (8001054 <MX_ADC2_Init+0xc0>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ff4:	4b17      	ldr	r3, [pc, #92]	; (8001054 <MX_ADC2_Init+0xc0>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ffa:	4b16      	ldr	r3, [pc, #88]	; (8001054 <MX_ADC2_Init+0xc0>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8001000:	4b14      	ldr	r3, [pc, #80]	; (8001054 <MX_ADC2_Init+0xc0>)
 8001002:	2200      	movs	r2, #0
 8001004:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001008:	4812      	ldr	r0, [pc, #72]	; (8001054 <MX_ADC2_Init+0xc0>)
 800100a:	f003 f9ff 	bl	800440c <HAL_ADC_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8001014:	f001 fe0e 	bl	8002c34 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001018:	4b10      	ldr	r3, [pc, #64]	; (800105c <MX_ADC2_Init+0xc8>)
 800101a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800101c:	2306      	movs	r3, #6
 800101e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001020:	2300      	movs	r3, #0
 8001022:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001024:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001028:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800102a:	2304      	movs	r3, #4
 800102c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001032:	2300      	movs	r3, #0
 8001034:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	4619      	mov	r1, r3
 800103a:	4806      	ldr	r0, [pc, #24]	; (8001054 <MX_ADC2_Init+0xc0>)
 800103c:	f003 fb86 	bl	800474c <HAL_ADC_ConfigChannel>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001046:	f001 fdf5 	bl	8002c34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800104a:	bf00      	nop
 800104c:	3720      	adds	r7, #32
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	240057f4 	.word	0x240057f4
 8001058:	40022100 	.word	0x40022100
 800105c:	04300002 	.word	0x04300002

08001060 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
 8001074:	615a      	str	r2, [r3, #20]
 8001076:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8001078:	4b29      	ldr	r3, [pc, #164]	; (8001120 <MX_ADC3_Init+0xc0>)
 800107a:	4a2a      	ldr	r2, [pc, #168]	; (8001124 <MX_ADC3_Init+0xc4>)
 800107c:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800107e:	4b28      	ldr	r3, [pc, #160]	; (8001120 <MX_ADC3_Init+0xc0>)
 8001080:	2200      	movs	r2, #0
 8001082:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8001084:	4b26      	ldr	r3, [pc, #152]	; (8001120 <MX_ADC3_Init+0xc0>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800108a:	4b25      	ldr	r3, [pc, #148]	; (8001120 <MX_ADC3_Init+0xc0>)
 800108c:	2200      	movs	r2, #0
 800108e:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001090:	4b23      	ldr	r3, [pc, #140]	; (8001120 <MX_ADC3_Init+0xc0>)
 8001092:	2204      	movs	r2, #4
 8001094:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001096:	4b22      	ldr	r3, [pc, #136]	; (8001120 <MX_ADC3_Init+0xc0>)
 8001098:	2200      	movs	r2, #0
 800109a:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800109c:	4b20      	ldr	r3, [pc, #128]	; (8001120 <MX_ADC3_Init+0xc0>)
 800109e:	2200      	movs	r2, #0
 80010a0:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80010a2:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <MX_ADC3_Init+0xc0>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80010a8:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <MX_ADC3_Init+0xc0>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ae:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <MX_ADC3_Init+0xc0>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010b4:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <MX_ADC3_Init+0xc0>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80010ba:	4b19      	ldr	r3, [pc, #100]	; (8001120 <MX_ADC3_Init+0xc0>)
 80010bc:	2200      	movs	r2, #0
 80010be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010c0:	4b17      	ldr	r3, [pc, #92]	; (8001120 <MX_ADC3_Init+0xc0>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80010c6:	4b16      	ldr	r3, [pc, #88]	; (8001120 <MX_ADC3_Init+0xc0>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80010cc:	4b14      	ldr	r3, [pc, #80]	; (8001120 <MX_ADC3_Init+0xc0>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80010d4:	4812      	ldr	r0, [pc, #72]	; (8001120 <MX_ADC3_Init+0xc0>)
 80010d6:	f003 f999 	bl	800440c <HAL_ADC_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 80010e0:	f001 fda8 	bl	8002c34 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010e4:	4b10      	ldr	r3, [pc, #64]	; (8001128 <MX_ADC3_Init+0xc8>)
 80010e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010e8:	2306      	movs	r3, #6
 80010ea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010f0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80010f4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010f6:	2304      	movs	r3, #4
 80010f8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80010fe:	2300      	movs	r3, #0
 8001100:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	4619      	mov	r1, r3
 8001106:	4806      	ldr	r0, [pc, #24]	; (8001120 <MX_ADC3_Init+0xc0>)
 8001108:	f003 fb20 	bl	800474c <HAL_ADC_ConfigChannel>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 8001112:	f001 fd8f 	bl	8002c34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001116:	bf00      	nop
 8001118:	3720      	adds	r7, #32
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	240058bc 	.word	0x240058bc
 8001124:	58026000 	.word	0x58026000
 8001128:	04300002 	.word	0x04300002

0800112c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b0b8      	sub	sp, #224	; 0xe0
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001138:	22bc      	movs	r2, #188	; 0xbc
 800113a:	2100      	movs	r1, #0
 800113c:	4618      	mov	r0, r3
 800113e:	f01e fe1b 	bl	801fd78 <memset>
  if(adcHandle->Instance==ADC1)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a62      	ldr	r2, [pc, #392]	; (80012d0 <HAL_ADC_MspInit+0x1a4>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d13e      	bne.n	80011ca <HAL_ADC_MspInit+0x9e>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800114c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8001152:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001156:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800115a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115e:	4618      	mov	r0, r3
 8001160:	f009 fc64 	bl	800aa2c <HAL_RCCEx_PeriphCLKConfig>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <HAL_ADC_MspInit+0x42>
    {
      Error_Handler();
 800116a:	f001 fd63 	bl	8002c34 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800116e:	4b59      	ldr	r3, [pc, #356]	; (80012d4 <HAL_ADC_MspInit+0x1a8>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	3301      	adds	r3, #1
 8001174:	4a57      	ldr	r2, [pc, #348]	; (80012d4 <HAL_ADC_MspInit+0x1a8>)
 8001176:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001178:	4b56      	ldr	r3, [pc, #344]	; (80012d4 <HAL_ADC_MspInit+0x1a8>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d10e      	bne.n	800119e <HAL_ADC_MspInit+0x72>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001180:	4b55      	ldr	r3, [pc, #340]	; (80012d8 <HAL_ADC_MspInit+0x1ac>)
 8001182:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001186:	4a54      	ldr	r2, [pc, #336]	; (80012d8 <HAL_ADC_MspInit+0x1ac>)
 8001188:	f043 0320 	orr.w	r3, r3, #32
 800118c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001190:	4b51      	ldr	r3, [pc, #324]	; (80012d8 <HAL_ADC_MspInit+0x1ac>)
 8001192:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001196:	f003 0320 	and.w	r3, r3, #32
 800119a:	623b      	str	r3, [r7, #32]
 800119c:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119e:	4b4e      	ldr	r3, [pc, #312]	; (80012d8 <HAL_ADC_MspInit+0x1ac>)
 80011a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a4:	4a4c      	ldr	r2, [pc, #304]	; (80012d8 <HAL_ADC_MspInit+0x1ac>)
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ae:	4b4a      	ldr	r3, [pc, #296]	; (80012d8 <HAL_ADC_MspInit+0x1ac>)
 80011b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	61fb      	str	r3, [r7, #28]
 80011ba:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0_C     ------> ADC1_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 80011bc:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80011c0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80011c4:	f002 ff6c 	bl	80040a0 <HAL_SYSCFG_AnalogSwitchConfig>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80011c8:	e07d      	b.n	80012c6 <HAL_ADC_MspInit+0x19a>
  else if(adcHandle->Instance==ADC2)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a43      	ldr	r2, [pc, #268]	; (80012dc <HAL_ADC_MspInit+0x1b0>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d13e      	bne.n	8001252 <HAL_ADC_MspInit+0x126>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 80011da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e6:	4618      	mov	r0, r3
 80011e8:	f009 fc20 	bl	800aa2c <HAL_RCCEx_PeriphCLKConfig>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <HAL_ADC_MspInit+0xca>
      Error_Handler();
 80011f2:	f001 fd1f 	bl	8002c34 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80011f6:	4b37      	ldr	r3, [pc, #220]	; (80012d4 <HAL_ADC_MspInit+0x1a8>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	3301      	adds	r3, #1
 80011fc:	4a35      	ldr	r2, [pc, #212]	; (80012d4 <HAL_ADC_MspInit+0x1a8>)
 80011fe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001200:	4b34      	ldr	r3, [pc, #208]	; (80012d4 <HAL_ADC_MspInit+0x1a8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d10e      	bne.n	8001226 <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001208:	4b33      	ldr	r3, [pc, #204]	; (80012d8 <HAL_ADC_MspInit+0x1ac>)
 800120a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800120e:	4a32      	ldr	r2, [pc, #200]	; (80012d8 <HAL_ADC_MspInit+0x1ac>)
 8001210:	f043 0320 	orr.w	r3, r3, #32
 8001214:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001218:	4b2f      	ldr	r3, [pc, #188]	; (80012d8 <HAL_ADC_MspInit+0x1ac>)
 800121a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800121e:	f003 0320 	and.w	r3, r3, #32
 8001222:	61bb      	str	r3, [r7, #24]
 8001224:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001226:	4b2c      	ldr	r3, [pc, #176]	; (80012d8 <HAL_ADC_MspInit+0x1ac>)
 8001228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800122c:	4a2a      	ldr	r2, [pc, #168]	; (80012d8 <HAL_ADC_MspInit+0x1ac>)
 800122e:	f043 0301 	orr.w	r3, r3, #1
 8001232:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001236:	4b28      	ldr	r3, [pc, #160]	; (80012d8 <HAL_ADC_MspInit+0x1ac>)
 8001238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	617b      	str	r3, [r7, #20]
 8001242:	697b      	ldr	r3, [r7, #20]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001244:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001248:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800124c:	f002 ff28 	bl	80040a0 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001250:	e039      	b.n	80012c6 <HAL_ADC_MspInit+0x19a>
  else if(adcHandle->Instance==ADC3)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a22      	ldr	r2, [pc, #136]	; (80012e0 <HAL_ADC_MspInit+0x1b4>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d134      	bne.n	80012c6 <HAL_ADC_MspInit+0x19a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800125c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8001262:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001266:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800126a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126e:	4618      	mov	r0, r3
 8001270:	f009 fbdc 	bl	800aa2c <HAL_RCCEx_PeriphCLKConfig>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <HAL_ADC_MspInit+0x152>
      Error_Handler();
 800127a:	f001 fcdb 	bl	8002c34 <Error_Handler>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800127e:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <HAL_ADC_MspInit+0x1ac>)
 8001280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001284:	4a14      	ldr	r2, [pc, #80]	; (80012d8 <HAL_ADC_MspInit+0x1ac>)
 8001286:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800128a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800128e:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <HAL_ADC_MspInit+0x1ac>)
 8001290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001294:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800129c:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <HAL_ADC_MspInit+0x1ac>)
 800129e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a2:	4a0d      	ldr	r2, [pc, #52]	; (80012d8 <HAL_ADC_MspInit+0x1ac>)
 80012a4:	f043 0304 	orr.w	r3, r3, #4
 80012a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ac:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <HAL_ADC_MspInit+0x1ac>)
 80012ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b2:	f003 0304 	and.w	r3, r3, #4
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80012ba:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80012be:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80012c2:	f002 feed 	bl	80040a0 <HAL_SYSCFG_AnalogSwitchConfig>
}
 80012c6:	bf00      	nop
 80012c8:	37e0      	adds	r7, #224	; 0xe0
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40022000 	.word	0x40022000
 80012d4:	24003a40 	.word	0x24003a40
 80012d8:	58024400 	.word	0x58024400
 80012dc:	40022100 	.word	0x40022100
 80012e0:	58026000 	.word	0x58026000

080012e4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80012e8:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <MX_CRC_Init+0x3c>)
 80012ea:	4a0e      	ldr	r2, [pc, #56]	; (8001324 <MX_CRC_Init+0x40>)
 80012ec:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80012ee:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <MX_CRC_Init+0x3c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80012f4:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <MX_CRC_Init+0x3c>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80012fa:	4b09      	ldr	r3, [pc, #36]	; (8001320 <MX_CRC_Init+0x3c>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001300:	4b07      	ldr	r3, [pc, #28]	; (8001320 <MX_CRC_Init+0x3c>)
 8001302:	2200      	movs	r2, #0
 8001304:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <MX_CRC_Init+0x3c>)
 8001308:	2201      	movs	r2, #1
 800130a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800130c:	4804      	ldr	r0, [pc, #16]	; (8001320 <MX_CRC_Init+0x3c>)
 800130e:	f004 f91b 	bl	8005548 <HAL_CRC_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001318:	f001 fc8c 	bl	8002c34 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}
 8001320:	24005920 	.word	0x24005920
 8001324:	58024c00 	.word	0x58024c00

08001328 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a0b      	ldr	r2, [pc, #44]	; (8001364 <HAL_CRC_MspInit+0x3c>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d10e      	bne.n	8001358 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800133a:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <HAL_CRC_MspInit+0x40>)
 800133c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001340:	4a09      	ldr	r2, [pc, #36]	; (8001368 <HAL_CRC_MspInit+0x40>)
 8001342:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001346:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800134a:	4b07      	ldr	r3, [pc, #28]	; (8001368 <HAL_CRC_MspInit+0x40>)
 800134c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001350:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	58024c00 	.word	0x58024c00
 8001368:	58024400 	.word	0x58024400

0800136c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001372:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <MX_DMA_Init+0x3c>)
 8001374:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001378:	4a0b      	ldr	r2, [pc, #44]	; (80013a8 <MX_DMA_Init+0x3c>)
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001382:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <MX_DMA_Init+0x3c>)
 8001384:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	607b      	str	r3, [r7, #4]
 800138e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 1);
 8001390:	2201      	movs	r2, #1
 8001392:	2100      	movs	r1, #0
 8001394:	200b      	movs	r0, #11
 8001396:	f004 f812 	bl	80053be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800139a:	200b      	movs	r0, #11
 800139c:	f004 f829 	bl	80053f2 <HAL_NVIC_EnableIRQ>

}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	58024400 	.word	0x58024400

080013ac <MX_FMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08e      	sub	sp, #56	; 0x38
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80013b2:	f107 031c 	add.w	r3, r7, #28
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
 80013c0:	611a      	str	r2, [r3, #16]
 80013c2:	615a      	str	r2, [r3, #20]
 80013c4:	619a      	str	r2, [r3, #24]
  FMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80013c6:	463b      	mov	r3, r7
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]
 80013d4:	615a      	str	r2, [r3, #20]
 80013d6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80013d8:	4b32      	ldr	r3, [pc, #200]	; (80014a4 <MX_FMC_Init+0xf8>)
 80013da:	4a33      	ldr	r2, [pc, #204]	; (80014a8 <MX_FMC_Init+0xfc>)
 80013dc:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80013de:	4b31      	ldr	r3, [pc, #196]	; (80014a4 <MX_FMC_Init+0xf8>)
 80013e0:	4a32      	ldr	r2, [pc, #200]	; (80014ac <MX_FMC_Init+0x100>)
 80013e2:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80013e4:	4b2f      	ldr	r3, [pc, #188]	; (80014a4 <MX_FMC_Init+0xf8>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80013ea:	4b2e      	ldr	r3, [pc, #184]	; (80014a4 <MX_FMC_Init+0xf8>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80013f0:	4b2c      	ldr	r3, [pc, #176]	; (80014a4 <MX_FMC_Init+0xf8>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 80013f6:	4b2b      	ldr	r3, [pc, #172]	; (80014a4 <MX_FMC_Init+0xf8>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80013fc:	4b29      	ldr	r3, [pc, #164]	; (80014a4 <MX_FMC_Init+0xf8>)
 80013fe:	2200      	movs	r2, #0
 8001400:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001402:	4b28      	ldr	r3, [pc, #160]	; (80014a4 <MX_FMC_Init+0xf8>)
 8001404:	2200      	movs	r2, #0
 8001406:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001408:	4b26      	ldr	r3, [pc, #152]	; (80014a4 <MX_FMC_Init+0xf8>)
 800140a:	2200      	movs	r2, #0
 800140c:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 800140e:	4b25      	ldr	r3, [pc, #148]	; (80014a4 <MX_FMC_Init+0xf8>)
 8001410:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001414:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001416:	4b23      	ldr	r3, [pc, #140]	; (80014a4 <MX_FMC_Init+0xf8>)
 8001418:	2200      	movs	r2, #0
 800141a:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_ENABLE;
 800141c:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <MX_FMC_Init+0xf8>)
 800141e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001422:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001424:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <MX_FMC_Init+0xf8>)
 8001426:	2200      	movs	r2, #0
 8001428:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800142a:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <MX_FMC_Init+0xf8>)
 800142c:	2200      	movs	r2, #0
 800142e:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001430:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <MX_FMC_Init+0xf8>)
 8001432:	2200      	movs	r2, #0
 8001434:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8001436:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <MX_FMC_Init+0xf8>)
 8001438:	2200      	movs	r2, #0
 800143a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800143c:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <MX_FMC_Init+0xf8>)
 800143e:	2200      	movs	r2, #0
 8001440:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 8;
 8001442:	2308      	movs	r3, #8
 8001444:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001446:	230f      	movs	r3, #15
 8001448:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 10;
 800144a:	230a      	movs	r3, #10
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 5;
 800144e:	2305      	movs	r3, #5
 8001450:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001452:	2310      	movs	r3, #16
 8001454:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001456:	2311      	movs	r3, #17
 8001458:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800145a:	2300      	movs	r3, #0
 800145c:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800145e:	2308      	movs	r3, #8
 8001460:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001462:	230f      	movs	r3, #15
 8001464:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 10;
 8001466:	230a      	movs	r3, #10
 8001468:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 5;
 800146a:	2305      	movs	r3, #5
 800146c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800146e:	2310      	movs	r3, #16
 8001470:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001472:	2311      	movs	r3, #17
 8001474:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FMC_ACCESS_MODE_A;
 8001476:	2300      	movs	r3, #0
 8001478:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800147a:	463a      	mov	r2, r7
 800147c:	f107 031c 	add.w	r3, r7, #28
 8001480:	4619      	mov	r1, r3
 8001482:	4808      	ldr	r0, [pc, #32]	; (80014a4 <MX_FMC_Init+0xf8>)
 8001484:	f00d fb72 	bl	800eb6c <HAL_SRAM_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_FMC_Init+0xe6>
  {
    Error_Handler( );
 800148e:	f001 fbd1 	bl	8002c34 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 8001492:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001496:	f002 fe19 	bl	80040cc <HAL_SetFMCMemorySwappingConfig>

  /* USER CODE END FMC_Init 2 */
}
 800149a:	bf00      	nop
 800149c:	3738      	adds	r7, #56	; 0x38
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	24005944 	.word	0x24005944
 80014a8:	52004000 	.word	0x52004000
 80014ac:	52004104 	.word	0x52004104

080014b0 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b0b6      	sub	sp, #216	; 0xd8
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80014c6:	4b39      	ldr	r3, [pc, #228]	; (80015ac <HAL_FMC_MspInit+0xfc>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d169      	bne.n	80015a2 <HAL_FMC_MspInit+0xf2>
    return;
  }
  FMC_Initialized = 1;
 80014ce:	4b37      	ldr	r3, [pc, #220]	; (80015ac <HAL_FMC_MspInit+0xfc>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014d4:	f107 0308 	add.w	r3, r7, #8
 80014d8:	22bc      	movs	r2, #188	; 0xbc
 80014da:	2100      	movs	r1, #0
 80014dc:	4618      	mov	r0, r3
 80014de:	f01e fc4b 	bl	801fd78 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80014e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014e6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80014e8:	2300      	movs	r3, #0
 80014ea:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ec:	f107 0308 	add.w	r3, r7, #8
 80014f0:	4618      	mov	r0, r3
 80014f2:	f009 fa9b 	bl	800aa2c <HAL_RCCEx_PeriphCLKConfig>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <HAL_FMC_MspInit+0x50>
    {
      Error_Handler();
 80014fc:	f001 fb9a 	bl	8002c34 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001500:	4b2b      	ldr	r3, [pc, #172]	; (80015b0 <HAL_FMC_MspInit+0x100>)
 8001502:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001506:	4a2a      	ldr	r2, [pc, #168]	; (80015b0 <HAL_FMC_MspInit+0x100>)
 8001508:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800150c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001510:	4b27      	ldr	r3, [pc, #156]	; (80015b0 <HAL_FMC_MspInit+0x100>)
 8001512:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001516:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE10   ------> FMC_D7
  PE9   ------> FMC_D6
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4
 800151e:	f24c 03b3 	movw	r3, #49331	; 0xc0b3
 8001522:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001526:	2302      	movs	r3, #2
 8001528:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001532:	2303      	movs	r3, #3
 8001534:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001538:	230c      	movs	r3, #12
 800153a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800153e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001542:	4619      	mov	r1, r3
 8001544:	481b      	ldr	r0, [pc, #108]	; (80015b4 <HAL_FMC_MspInit+0x104>)
 8001546:	f008 f845 	bl	80095d4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800154a:	2301      	movs	r3, #1
 800154c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001550:	2302      	movs	r3, #2
 8001552:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155c:	2303      	movs	r3, #3
 800155e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001562:	230c      	movs	r3, #12
 8001564:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001568:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800156c:	4619      	mov	r1, r3
 800156e:	4812      	ldr	r0, [pc, #72]	; (80015b8 <HAL_FMC_MspInit+0x108>)
 8001570:	f008 f830 	bl	80095d4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_9;
 8001574:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001578:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001588:	2303      	movs	r3, #3
 800158a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800158e:	230c      	movs	r3, #12
 8001590:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001594:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001598:	4619      	mov	r1, r3
 800159a:	4808      	ldr	r0, [pc, #32]	; (80015bc <HAL_FMC_MspInit+0x10c>)
 800159c:	f008 f81a 	bl	80095d4 <HAL_GPIO_Init>
 80015a0:	e000      	b.n	80015a4 <HAL_FMC_MspInit+0xf4>
    return;
 80015a2:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80015a4:	37d8      	adds	r7, #216	; 0xd8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	24003a44 	.word	0x24003a44
 80015b0:	58024400 	.word	0x58024400
 80015b4:	58020c00 	.word	0x58020c00
 80015b8:	58021400 	.word	0x58021400
 80015bc:	58021000 	.word	0x58021000

080015c0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80015c8:	f7ff ff72 	bl	80014b0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08e      	sub	sp, #56	; 0x38
 80015d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
 80015e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ea:	4b96      	ldr	r3, [pc, #600]	; (8001844 <MX_GPIO_Init+0x270>)
 80015ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f0:	4a94      	ldr	r2, [pc, #592]	; (8001844 <MX_GPIO_Init+0x270>)
 80015f2:	f043 0302 	orr.w	r3, r3, #2
 80015f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015fa:	4b92      	ldr	r3, [pc, #584]	; (8001844 <MX_GPIO_Init+0x270>)
 80015fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	623b      	str	r3, [r7, #32]
 8001606:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001608:	4b8e      	ldr	r3, [pc, #568]	; (8001844 <MX_GPIO_Init+0x270>)
 800160a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800160e:	4a8d      	ldr	r2, [pc, #564]	; (8001844 <MX_GPIO_Init+0x270>)
 8001610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001614:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001618:	4b8a      	ldr	r3, [pc, #552]	; (8001844 <MX_GPIO_Init+0x270>)
 800161a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800161e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001622:	61fb      	str	r3, [r7, #28]
 8001624:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001626:	4b87      	ldr	r3, [pc, #540]	; (8001844 <MX_GPIO_Init+0x270>)
 8001628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800162c:	4a85      	ldr	r2, [pc, #532]	; (8001844 <MX_GPIO_Init+0x270>)
 800162e:	f043 0308 	orr.w	r3, r3, #8
 8001632:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001636:	4b83      	ldr	r3, [pc, #524]	; (8001844 <MX_GPIO_Init+0x270>)
 8001638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800163c:	f003 0308 	and.w	r3, r3, #8
 8001640:	61bb      	str	r3, [r7, #24]
 8001642:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001644:	4b7f      	ldr	r3, [pc, #508]	; (8001844 <MX_GPIO_Init+0x270>)
 8001646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800164a:	4a7e      	ldr	r2, [pc, #504]	; (8001844 <MX_GPIO_Init+0x270>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001654:	4b7b      	ldr	r3, [pc, #492]	; (8001844 <MX_GPIO_Init+0x270>)
 8001656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001662:	4b78      	ldr	r3, [pc, #480]	; (8001844 <MX_GPIO_Init+0x270>)
 8001664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001668:	4a76      	ldr	r2, [pc, #472]	; (8001844 <MX_GPIO_Init+0x270>)
 800166a:	f043 0310 	orr.w	r3, r3, #16
 800166e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001672:	4b74      	ldr	r3, [pc, #464]	; (8001844 <MX_GPIO_Init+0x270>)
 8001674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001678:	f003 0310 	and.w	r3, r3, #16
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001680:	4b70      	ldr	r3, [pc, #448]	; (8001844 <MX_GPIO_Init+0x270>)
 8001682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001686:	4a6f      	ldr	r2, [pc, #444]	; (8001844 <MX_GPIO_Init+0x270>)
 8001688:	f043 0304 	orr.w	r3, r3, #4
 800168c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001690:	4b6c      	ldr	r3, [pc, #432]	; (8001844 <MX_GPIO_Init+0x270>)
 8001692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001696:	f003 0304 	and.w	r3, r3, #4
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800169e:	4b69      	ldr	r3, [pc, #420]	; (8001844 <MX_GPIO_Init+0x270>)
 80016a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a4:	4a67      	ldr	r2, [pc, #412]	; (8001844 <MX_GPIO_Init+0x270>)
 80016a6:	f043 0320 	orr.w	r3, r3, #32
 80016aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016ae:	4b65      	ldr	r3, [pc, #404]	; (8001844 <MX_GPIO_Init+0x270>)
 80016b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b4:	f003 0320 	and.w	r3, r3, #32
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016bc:	4b61      	ldr	r3, [pc, #388]	; (8001844 <MX_GPIO_Init+0x270>)
 80016be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c2:	4a60      	ldr	r2, [pc, #384]	; (8001844 <MX_GPIO_Init+0x270>)
 80016c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016cc:	4b5d      	ldr	r3, [pc, #372]	; (8001844 <MX_GPIO_Init+0x270>)
 80016ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_RESET_Pin|MEMS_CS_Pin, GPIO_PIN_RESET);
 80016da:	2200      	movs	r2, #0
 80016dc:	f44f 7140 	mov.w	r1, #768	; 0x300
 80016e0:	4859      	ldr	r0, [pc, #356]	; (8001848 <MX_GPIO_Init+0x274>)
 80016e2:	f008 f927 	bl	8009934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CIS_RS_GPIO_Port, CIS_RS_Pin, GPIO_PIN_RESET);
 80016e6:	2200      	movs	r2, #0
 80016e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ec:	4857      	ldr	r0, [pc, #348]	; (800184c <MX_GPIO_Init+0x278>)
 80016ee:	f008 f921 	bl	8009934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DAC_FLT_Pin|DAC_XSMT_Pin, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	f242 0104 	movw	r1, #8196	; 0x2004
 80016f8:	4855      	ldr	r0, [pc, #340]	; (8001850 <MX_GPIO_Init+0x27c>)
 80016fa:	f008 f91b 	bl	8009934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, EN_12V_Pin|EN_5V_Pin, GPIO_PIN_RESET);
 80016fe:	2200      	movs	r2, #0
 8001700:	2124      	movs	r1, #36	; 0x24
 8001702:	4854      	ldr	r0, [pc, #336]	; (8001854 <MX_GPIO_Init+0x280>)
 8001704:	f008 f916 	bl	8009934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DAC_FMT_GPIO_Port, DAC_FMT_Pin, GPIO_PIN_RESET);
 8001708:	2200      	movs	r2, #0
 800170a:	2140      	movs	r1, #64	; 0x40
 800170c:	4852      	ldr	r0, [pc, #328]	; (8001858 <MX_GPIO_Init+0x284>)
 800170e:	f008 f911 	bl	8009934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_Pin|DAC_DEMP_Pin, GPIO_PIN_RESET);
 8001712:	2200      	movs	r2, #0
 8001714:	2148      	movs	r1, #72	; 0x48
 8001716:	4851      	ldr	r0, [pc, #324]	; (800185c <MX_GPIO_Init+0x288>)
 8001718:	f008 f90c 	bl	8009934 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = OLED_RESET_Pin|MEMS_CS_Pin;
 800171c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001722:	2301      	movs	r3, #1
 8001724:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172a:	2303      	movs	r3, #3
 800172c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001732:	4619      	mov	r1, r3
 8001734:	4844      	ldr	r0, [pc, #272]	; (8001848 <MX_GPIO_Init+0x274>)
 8001736:	f007 ff4d 	bl	80095d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_FSYNC_Pin;
 800173a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001740:	2300      	movs	r3, #0
 8001742:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MEMS_FSYNC_GPIO_Port, &GPIO_InitStruct);
 8001748:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800174c:	4619      	mov	r1, r3
 800174e:	483f      	ldr	r0, [pc, #252]	; (800184c <MX_GPIO_Init+0x278>)
 8001750:	f007 ff40 	bl	80095d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CIS_RS_Pin;
 8001754:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175a:	2301      	movs	r3, #1
 800175c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001762:	2303      	movs	r3, #3
 8001764:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CIS_RS_GPIO_Port, &GPIO_InitStruct);
 8001766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800176a:	4619      	mov	r1, r3
 800176c:	4837      	ldr	r0, [pc, #220]	; (800184c <MX_GPIO_Init+0x278>)
 800176e:	f007 ff31 	bl	80095d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DAC_FLT_Pin|DAC_XSMT_Pin;
 8001772:	f242 0304 	movw	r3, #8196	; 0x2004
 8001776:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001778:	2301      	movs	r3, #1
 800177a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001780:	2300      	movs	r3, #0
 8001782:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001788:	4619      	mov	r1, r3
 800178a:	4831      	ldr	r0, [pc, #196]	; (8001850 <MX_GPIO_Init+0x27c>)
 800178c:	f007 ff22 	bl	80095d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = EN_12V_Pin|EN_5V_Pin;
 8001790:	2324      	movs	r3, #36	; 0x24
 8001792:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001794:	2301      	movs	r3, #1
 8001796:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179c:	2300      	movs	r3, #0
 800179e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a4:	4619      	mov	r1, r3
 80017a6:	482b      	ldr	r0, [pc, #172]	; (8001854 <MX_GPIO_Init+0x280>)
 80017a8:	f007 ff14 	bl	80095d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_FMT_Pin;
 80017ac:	2340      	movs	r3, #64	; 0x40
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b0:	2301      	movs	r3, #1
 80017b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b8:	2300      	movs	r3, #0
 80017ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DAC_FMT_GPIO_Port, &GPIO_InitStruct);
 80017bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c0:	4619      	mov	r1, r3
 80017c2:	4825      	ldr	r0, [pc, #148]	; (8001858 <MX_GPIO_Init+0x284>)
 80017c4:	f007 ff06 	bl	80095d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT_Pin;
 80017c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017ce:	4b24      	ldr	r3, [pc, #144]	; (8001860 <MX_GPIO_Init+0x28c>)
 80017d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MEMS_INT_GPIO_Port, &GPIO_InitStruct);
 80017d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017da:	4619      	mov	r1, r3
 80017dc:	4821      	ldr	r0, [pc, #132]	; (8001864 <MX_GPIO_Init+0x290>)
 80017de:	f007 fef9 	bl	80095d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = SW_4_Pin|SW_5_Pin|SW_1_Pin|SW_3_Pin
 80017e2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
                          |SW_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017e8:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <MX_GPIO_Init+0x28c>)
 80017ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f4:	4619      	mov	r1, r3
 80017f6:	481c      	ldr	r0, [pc, #112]	; (8001868 <MX_GPIO_Init+0x294>)
 80017f8:	f007 feec 	bl	80095d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80017fc:	2340      	movs	r3, #64	; 0x40
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001800:	2301      	movs	r3, #1
 8001802:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001808:	2303      	movs	r3, #3
 800180a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800180c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001810:	4619      	mov	r1, r3
 8001812:	4812      	ldr	r0, [pc, #72]	; (800185c <MX_GPIO_Init+0x288>)
 8001814:	f007 fede 	bl	80095d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_DEMP_Pin;
 8001818:	2308      	movs	r3, #8
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181c:	2301      	movs	r3, #1
 800181e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001824:	2300      	movs	r3, #0
 8001826:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DAC_DEMP_GPIO_Port, &GPIO_InitStruct);
 8001828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800182c:	4619      	mov	r1, r3
 800182e:	480b      	ldr	r0, [pc, #44]	; (800185c <MX_GPIO_Init+0x288>)
 8001830:	f007 fed0 	bl	80095d4 <HAL_GPIO_Init>

  /**/
  HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB8_FMP);
 8001834:	2040      	movs	r0, #64	; 0x40
 8001836:	f008 f8df 	bl	80099f8 <HAL_I2CEx_EnableFastModePlus>

}
 800183a:	bf00      	nop
 800183c:	3738      	adds	r7, #56	; 0x38
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	58024400 	.word	0x58024400
 8001848:	58020400 	.word	0x58020400
 800184c:	58020000 	.word	0x58020000
 8001850:	58020800 	.word	0x58020800
 8001854:	58021800 	.word	0x58021800
 8001858:	58021400 	.word	0x58021400
 800185c:	58021c00 	.word	0x58021c00
 8001860:	11110000 	.word	0x11110000
 8001864:	58020c00 	.word	0x58020c00
 8001868:	58021000 	.word	0x58021000

0800186c <lwiperf_list_add>:


/** Add an iperf session to the 'active' list */
static void
lwiperf_list_add(lwiperf_state_base_t *item)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  item->next = lwiperf_all_connections;
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <lwiperf_list_add+0x24>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	601a      	str	r2, [r3, #0]
  lwiperf_all_connections = item;
 800187c:	4a04      	ldr	r2, [pc, #16]	; (8001890 <lwiperf_list_add+0x24>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6013      	str	r3, [r2, #0]
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	24003a48 	.word	0x24003a48

08001894 <lwiperf_list_remove>:

/** Remove an iperf session from the 'active' list */
static void
lwiperf_list_remove(lwiperf_state_base_t *item)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  lwiperf_state_base_t *prev = NULL;
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]
  lwiperf_state_base_t *iter;
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 80018a0:	4b1a      	ldr	r3, [pc, #104]	; (800190c <lwiperf_list_remove+0x78>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	e029      	b.n	80018fc <lwiperf_list_remove+0x68>
    if (iter == item) {
 80018a8:	68ba      	ldr	r2, [r7, #8]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d120      	bne.n	80018f2 <lwiperf_list_remove+0x5e>
      if (prev == NULL) {
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d104      	bne.n	80018c0 <lwiperf_list_remove+0x2c>
        lwiperf_all_connections = iter->next;
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a14      	ldr	r2, [pc, #80]	; (800190c <lwiperf_list_remove+0x78>)
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	e003      	b.n	80018c8 <lwiperf_list_remove+0x34>
      } else {
        prev->next = iter->next;
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	601a      	str	r2, [r3, #0]
      }
      /* @debug: ensure this item is listed only once */
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	e00c      	b.n	80018ea <lwiperf_list_remove+0x56>
        LWIP_ASSERT("duplicate entry", iter != item);
 80018d0:	68ba      	ldr	r2, [r7, #8]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d105      	bne.n	80018e4 <lwiperf_list_remove+0x50>
 80018d8:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <lwiperf_list_remove+0x7c>)
 80018da:	22d0      	movs	r2, #208	; 0xd0
 80018dc:	490d      	ldr	r1, [pc, #52]	; (8001914 <lwiperf_list_remove+0x80>)
 80018de:	480e      	ldr	r0, [pc, #56]	; (8001918 <lwiperf_list_remove+0x84>)
 80018e0:	f01f f944 	bl	8020b6c <iprintf>
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1ef      	bne.n	80018d0 <lwiperf_list_remove+0x3c>
      }
      break;
 80018f0:	e008      	b.n	8001904 <lwiperf_list_remove+0x70>
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1d2      	bne.n	80018a8 <lwiperf_list_remove+0x14>
    }
  }
}
 8001902:	bf00      	nop
 8001904:	bf00      	nop
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	24003a48 	.word	0x24003a48
 8001910:	08025c30 	.word	0x08025c30
 8001914:	08025c48 	.word	0x08025c48
 8001918:	08025c58 	.word	0x08025c58

0800191c <lwiperf_list_find>:

static lwiperf_state_base_t *
lwiperf_list_find(lwiperf_state_base_t *item)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  lwiperf_state_base_t *iter;
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <lwiperf_list_find+0x38>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	e008      	b.n	800193e <lwiperf_list_find+0x22>
    if (iter == item) {
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	429a      	cmp	r2, r3
 8001932:	d101      	bne.n	8001938 <lwiperf_list_find+0x1c>
      return item;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	e006      	b.n	8001946 <lwiperf_list_find+0x2a>
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1f3      	bne.n	800192c <lwiperf_list_find+0x10>
    }
  }
  return NULL;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	24003a48 	.word	0x24003a48

08001958 <lwip_tcp_conn_report>:

/** Call the report function of an iperf tcp session */
static void
lwip_tcp_conn_report(lwiperf_state_tcp_t *conn, enum lwiperf_report_type report_type)
{
 8001958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800195a:	b08d      	sub	sp, #52	; 0x34
 800195c:	af06      	add	r7, sp, #24
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	70fb      	strb	r3, [r7, #3]
  if ((conn != NULL) && (conn->report_fn != NULL)) {
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d038      	beq.n	80019dc <lwip_tcp_conn_report+0x84>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d034      	beq.n	80019dc <lwip_tcp_conn_report+0x84>
    u32_t now, duration_ms, bandwidth_kbitpsec;
    now = sys_now();
 8001972:	f00f fc2f 	bl	80111d4 <sys_now>
 8001976:	6138      	str	r0, [r7, #16]
    duration_ms = now - conn->time_started;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	695b      	ldr	r3, [r3, #20]
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	60fb      	str	r3, [r7, #12]
    if (duration_ms == 0) {
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d102      	bne.n	800198e <lwip_tcp_conn_report+0x36>
      bandwidth_kbitpsec = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	e006      	b.n	800199c <lwip_tcp_conn_report+0x44>
    } else {
      bandwidth_kbitpsec = (conn->bytes_transferred / duration_ms) * 8U;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	fbb2 f3f3 	udiv	r3, r2, r3
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	617b      	str	r3, [r7, #20]
    }
    conn->report_fn(conn->report_arg, report_type,
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	699c      	ldr	r4, [r3, #24]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69dd      	ldr	r5, [r3, #28]
                    &conn->conn_pcb->local_ip, conn->conn_pcb->local_port,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	469e      	mov	lr, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691b      	ldr	r3, [r3, #16]
    conn->report_fn(conn->report_arg, report_type,
 80019ae:	f8b3 c016 	ldrh.w	ip, [r3, #22]
                    &conn->conn_pcb->remote_ip, conn->conn_pcb->remote_port,
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	3304      	adds	r3, #4
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	6912      	ldr	r2, [r2, #16]
    conn->report_fn(conn->report_arg, report_type,
 80019bc:	8b12      	ldrh	r2, [r2, #24]
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80019c2:	78fe      	ldrb	r6, [r7, #3]
 80019c4:	6978      	ldr	r0, [r7, #20]
 80019c6:	9004      	str	r0, [sp, #16]
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	9003      	str	r0, [sp, #12]
 80019cc:	9102      	str	r1, [sp, #8]
 80019ce:	9201      	str	r2, [sp, #4]
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	4663      	mov	r3, ip
 80019d4:	4672      	mov	r2, lr
 80019d6:	4631      	mov	r1, r6
 80019d8:	4628      	mov	r0, r5
 80019da:	47a0      	blx	r4
                    conn->bytes_transferred, duration_ms, bandwidth_kbitpsec);
  }
}
 80019dc:	bf00      	nop
 80019de:	371c      	adds	r7, #28
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019e4 <lwiperf_tcp_close>:

/** Close an iperf tcp session */
static void
lwiperf_tcp_close(lwiperf_state_tcp_t *conn, enum lwiperf_report_type report_type)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	70fb      	strb	r3, [r7, #3]
  err_t err;

  lwiperf_list_remove(&conn->base);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff ff4e 	bl	8001894 <lwiperf_list_remove>
  lwip_tcp_conn_report(conn, report_type);
 80019f8:	78fb      	ldrb	r3, [r7, #3]
 80019fa:	4619      	mov	r1, r3
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff ffab 	bl	8001958 <lwip_tcp_conn_report>
  if (conn->conn_pcb != NULL) {
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d02f      	beq.n	8001a6a <lwiperf_tcp_close+0x86>
    tcp_arg(conn->conn_pcb, NULL);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4618      	mov	r0, r3
 8001a12:	f016 f891 	bl	8017b38 <tcp_arg>
    tcp_poll(conn->conn_pcb, NULL, 0);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f016 f91a 	bl	8017c58 <tcp_poll>
    tcp_sent(conn->conn_pcb, NULL);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f016 f8b8 	bl	8017ba0 <tcp_sent>
    tcp_recv(conn->conn_pcb, NULL);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	2100      	movs	r1, #0
 8001a36:	4618      	mov	r0, r3
 8001a38:	f016 f890 	bl	8017b5c <tcp_recv>
    tcp_err(conn->conn_pcb, NULL);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	2100      	movs	r1, #0
 8001a42:	4618      	mov	r0, r3
 8001a44:	f016 f8ce 	bl	8017be4 <tcp_err>
    err = tcp_close(conn->conn_pcb);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f014 fdd1 	bl	80165f4 <tcp_close>
 8001a52:	4603      	mov	r3, r0
 8001a54:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8001a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d017      	beq.n	8001a8e <lwiperf_tcp_close+0xaa>
      /* don't want to wait for free memory here... */
      tcp_abort(conn->conn_pcb);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f014 feb0 	bl	80167c8 <tcp_abort>
 8001a68:	e011      	b.n	8001a8e <lwiperf_tcp_close+0xaa>
    }
  } else {
    /* no conn pcb, this is the listener pcb */
    err = tcp_close(conn->server_pcb);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f014 fdc0 	bl	80165f4 <tcp_close>
 8001a74:	4603      	mov	r3, r0
 8001a76:	73fb      	strb	r3, [r7, #15]
    LWIP_ASSERT("error", err == ERR_OK);
 8001a78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d006      	beq.n	8001a8e <lwiperf_tcp_close+0xaa>
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <lwiperf_tcp_close+0xb8>)
 8001a82:	f240 120d 	movw	r2, #269	; 0x10d
 8001a86:	4906      	ldr	r1, [pc, #24]	; (8001aa0 <lwiperf_tcp_close+0xbc>)
 8001a88:	4806      	ldr	r0, [pc, #24]	; (8001aa4 <lwiperf_tcp_close+0xc0>)
 8001a8a:	f01f f86f 	bl	8020b6c <iprintf>
  }
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f012 fe7e 	bl	8014790 <mem_free>
}
 8001a94:	bf00      	nop
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	08025c30 	.word	0x08025c30
 8001aa0:	08025c80 	.word	0x08025c80
 8001aa4:	08025c58 	.word	0x08025c58

08001aa8 <lwiperf_tcp_client_send_more>:

/** Try to send more data on an iperf tcp session */
static err_t
lwiperf_tcp_client_send_more(lwiperf_state_tcp_t *conn)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08c      	sub	sp, #48	; 0x30
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  u16_t txlen;
  u16_t txlen_max;
  void *txptr;
  u8_t apiflags;

  LWIP_ASSERT("conn invalid", (conn != NULL) && conn->base.tcp && (conn->base.server == 0));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d007      	beq.n	8001ac6 <lwiperf_tcp_client_send_more+0x1e>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	791b      	ldrb	r3, [r3, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <lwiperf_tcp_client_send_more+0x1e>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	795b      	ldrb	r3, [r3, #5]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d006      	beq.n	8001ad4 <lwiperf_tcp_client_send_more+0x2c>
 8001ac6:	4b61      	ldr	r3, [pc, #388]	; (8001c4c <lwiperf_tcp_client_send_more+0x1a4>)
 8001ac8:	f240 121d 	movw	r2, #285	; 0x11d
 8001acc:	4960      	ldr	r1, [pc, #384]	; (8001c50 <lwiperf_tcp_client_send_more+0x1a8>)
 8001ace:	4861      	ldr	r0, [pc, #388]	; (8001c54 <lwiperf_tcp_client_send_more+0x1ac>)
 8001ad0:	f01f f84c 	bl	8020b6c <iprintf>

  do {
    send_more = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (conn->settings.amount & PP_HTONL(0x80000000)) {
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d01f      	beq.n	8001b24 <lwiperf_tcp_client_send_more+0x7c>
      /* this session is time-limited */
      u32_t now = sys_now();
 8001ae4:	f00f fb76 	bl	80111d4 <sys_now>
 8001ae8:	61b8      	str	r0, [r7, #24]
      u32_t diff_ms = now - conn->time_started;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	617b      	str	r3, [r7, #20]
      u32_t time = (u32_t) - (s32_t)lwip_htonl(conn->settings.amount);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af8:	4618      	mov	r0, r3
 8001afa:	f010 f93e 	bl	8011d7a <lwip_htonl>
 8001afe:	4603      	mov	r3, r0
 8001b00:	425b      	negs	r3, r3
 8001b02:	613b      	str	r3, [r7, #16]
      u32_t time_ms = time * 10;
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4613      	mov	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	60fb      	str	r3, [r7, #12]
      if (diff_ms >= time_ms) {
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d316      	bcc.n	8001b46 <lwiperf_tcp_client_send_more+0x9e>
        /* time specified by the client is over -> close the connection */
        lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_CLIENT);
 8001b18:	2101      	movs	r1, #1
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff ff62 	bl	80019e4 <lwiperf_tcp_close>
        return ERR_OK;
 8001b20:	2300      	movs	r3, #0
 8001b22:	e08e      	b.n	8001c42 <lwiperf_tcp_client_send_more+0x19a>
      }
    } else {
      /* this session is byte-limited */
      u32_t amount_bytes = lwip_htonl(conn->settings.amount);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f010 f926 	bl	8011d7a <lwip_htonl>
 8001b2e:	61f8      	str	r0, [r7, #28]
      /* @todo: this can send up to 1*MSS more than requested... */
      if (amount_bytes >= conn->bytes_transferred) {
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b34:	69fa      	ldr	r2, [r7, #28]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d305      	bcc.n	8001b46 <lwiperf_tcp_client_send_more+0x9e>
        /* all requested bytes transferred -> close the connection */
        lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_CLIENT);
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff ff51 	bl	80019e4 <lwiperf_tcp_close>
        return ERR_OK;
 8001b42:	2300      	movs	r3, #0
 8001b44:	e07d      	b.n	8001c42 <lwiperf_tcp_client_send_more+0x19a>
      }
    }

    if (conn->bytes_transferred < 24) {
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4a:	2b17      	cmp	r3, #23
 8001b4c:	d810      	bhi.n	8001b70 <lwiperf_tcp_client_send_more+0xc8>
      /* transmit the settings a first time */
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred];
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b58:	4413      	add	r3, r2
 8001b5a:	627b      	str	r3, [r7, #36]	; 0x24
      txlen_max = (u16_t)(24 - conn->bytes_transferred);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	f1c3 0318 	rsb	r3, r3, #24
 8001b66:	853b      	strh	r3, [r7, #40]	; 0x28
      apiflags = TCP_WRITE_FLAG_COPY;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001b6e:	e034      	b.n	8001bda <lwiperf_tcp_client_send_more+0x132>
    } else if (conn->bytes_transferred < 48) {
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b74:	2b2f      	cmp	r3, #47	; 0x2f
 8001b76:	d813      	bhi.n	8001ba0 <lwiperf_tcp_client_send_more+0xf8>
      /* transmit the settings a second time */
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred - 24];
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	3b18      	subs	r3, #24
 8001b84:	4413      	add	r3, r2
 8001b86:	627b      	str	r3, [r7, #36]	; 0x24
      txlen_max = (u16_t)(48 - conn->bytes_transferred);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	f1c3 0330 	rsb	r3, r3, #48	; 0x30
 8001b92:	853b      	strh	r3, [r7, #40]	; 0x28
      apiflags = TCP_WRITE_FLAG_COPY | TCP_WRITE_FLAG_MORE;
 8001b94:	2303      	movs	r3, #3
 8001b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      send_more = 1;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b9e:	e01c      	b.n	8001bda <lwiperf_tcp_client_send_more+0x132>
    } else {
      /* transmit data */
      /* @todo: every x bytes, transmit the settings again */
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001ba4:	4b2c      	ldr	r3, [pc, #176]	; (8001c58 <lwiperf_tcp_client_send_more+0x1b0>)
 8001ba6:	fba3 2301 	umull	r2, r3, r3, r1
 8001baa:	08da      	lsrs	r2, r3, #3
 8001bac:	4613      	mov	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	1aca      	subs	r2, r1, r3
 8001bb6:	4b29      	ldr	r3, [pc, #164]	; (8001c5c <lwiperf_tcp_client_send_more+0x1b4>)
 8001bb8:	4413      	add	r3, r2
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
      txlen_max = TCP_MSS;
 8001bbc:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001bc0:	853b      	strh	r3, [r7, #40]	; 0x28
      if (conn->bytes_transferred == 48) { /* @todo: fix this for intermediate settings, too */
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	2b30      	cmp	r3, #48	; 0x30
 8001bc8:	d102      	bne.n	8001bd0 <lwiperf_tcp_client_send_more+0x128>
        txlen_max = TCP_MSS - 24;
 8001bca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bce:	853b      	strh	r3, [r7, #40]	; 0x28
      }
      apiflags = 0; /* no copying needed */
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      send_more = 1;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    txlen = txlen_max;
 8001bda:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001bdc:	857b      	strh	r3, [r7, #42]	; 0x2a
    do {
      err = tcp_write(conn->conn_pcb, txptr, txlen, apiflags);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6918      	ldr	r0, [r3, #16]
 8001be2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001be6:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001be8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bea:	f018 fee3 	bl	801a9b4 <tcp_write>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	72fb      	strb	r3, [r7, #11]
      if (err ==  ERR_MEM) {
 8001bf2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001bf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bfa:	d102      	bne.n	8001c02 <lwiperf_tcp_client_send_more+0x15a>
        txlen /= 2;
 8001bfc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001bfe:	085b      	lsrs	r3, r3, #1
 8001c00:	857b      	strh	r3, [r7, #42]	; 0x2a
      }
    } while ((err == ERR_MEM) && (txlen >= (TCP_MSS / 2)));
 8001c02:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001c06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c0a:	d103      	bne.n	8001c14 <lwiperf_tcp_client_send_more+0x16c>
 8001c0c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c0e:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8001c12:	d2e4      	bcs.n	8001bde <lwiperf_tcp_client_send_more+0x136>

    if (err == ERR_OK) {
 8001c14:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d106      	bne.n	8001c2a <lwiperf_tcp_client_send_more+0x182>
      conn->bytes_transferred += txlen;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c20:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c22:	441a      	add	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	625a      	str	r2, [r3, #36]	; 0x24
 8001c28:	e001      	b.n	8001c2e <lwiperf_tcp_client_send_more+0x186>
    } else {
      send_more = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  } while (send_more);
 8001c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f47f af4f 	bne.w	8001ad4 <lwiperf_tcp_client_send_more+0x2c>

  tcp_output(conn->conn_pcb);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f019 fca4 	bl	801b588 <tcp_output>
  return ERR_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3730      	adds	r7, #48	; 0x30
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	08025c30 	.word	0x08025c30
 8001c50:	08025c88 	.word	0x08025c88
 8001c54:	08025c58 	.word	0x08025c58
 8001c58:	cccccccd 	.word	0xcccccccd
 8001c5c:	08028aec 	.word	0x08028aec

08001c60 <lwiperf_tcp_client_sent>:

/** TCP sent callback, try to send more data */
static err_t
lwiperf_tcp_client_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	80fb      	strh	r3, [r7, #6]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	617b      	str	r3, [r7, #20]
  /* @todo: check 'len' (e.g. to time ACK of all data)? for now, we just send more... */
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d006      	beq.n	8001c8a <lwiperf_tcp_client_sent+0x2a>
 8001c7c:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <lwiperf_tcp_client_sent+0x44>)
 8001c7e:	f44f 72b3 	mov.w	r2, #358	; 0x166
 8001c82:	4909      	ldr	r1, [pc, #36]	; (8001ca8 <lwiperf_tcp_client_sent+0x48>)
 8001c84:	4809      	ldr	r0, [pc, #36]	; (8001cac <lwiperf_tcp_client_sent+0x4c>)
 8001c86:	f01e ff71 	bl	8020b6c <iprintf>
  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  conn->poll_count = 0;
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2020 	strb.w	r2, [r3, #32]

  return lwiperf_tcp_client_send_more(conn);
 8001c92:	6978      	ldr	r0, [r7, #20]
 8001c94:	f7ff ff08 	bl	8001aa8 <lwiperf_tcp_client_send_more>
 8001c98:	4603      	mov	r3, r0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	08025c30 	.word	0x08025c30
 8001ca8:	08025c98 	.word	0x08025c98
 8001cac:	08025c58 	.word	0x08025c58

08001cb0 <lwiperf_tcp_client_connected>:

/** TCP connected callback (active connection), send data now */
static err_t
lwiperf_tcp_client_connected(void *arg, struct tcp_pcb *tpcb, err_t err)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	71fb      	strb	r3, [r7, #7]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d006      	beq.n	8001cda <lwiperf_tcp_client_connected+0x2a>
 8001ccc:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <lwiperf_tcp_client_connected+0x60>)
 8001cce:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8001cd2:	4910      	ldr	r1, [pc, #64]	; (8001d14 <lwiperf_tcp_client_connected+0x64>)
 8001cd4:	4810      	ldr	r0, [pc, #64]	; (8001d18 <lwiperf_tcp_client_connected+0x68>)
 8001cd6:	f01e ff49 	bl	8020b6c <iprintf>
  LWIP_UNUSED_ARG(tpcb);
  if (err != ERR_OK) {
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d005      	beq.n	8001cee <lwiperf_tcp_client_connected+0x3e>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 8001ce2:	2105      	movs	r1, #5
 8001ce4:	6978      	ldr	r0, [r7, #20]
 8001ce6:	f7ff fe7d 	bl	80019e4 <lwiperf_tcp_close>
    return ERR_OK;
 8001cea:	2300      	movs	r3, #0
 8001cec:	e00c      	b.n	8001d08 <lwiperf_tcp_client_connected+0x58>
  }
  conn->poll_count = 0;
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2020 	strb.w	r2, [r3, #32]
  conn->time_started = sys_now();
 8001cf6:	f00f fa6d 	bl	80111d4 <sys_now>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	615a      	str	r2, [r3, #20]
  return lwiperf_tcp_client_send_more(conn);
 8001d00:	6978      	ldr	r0, [r7, #20]
 8001d02:	f7ff fed1 	bl	8001aa8 <lwiperf_tcp_client_send_more>
 8001d06:	4603      	mov	r3, r0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3718      	adds	r7, #24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	08025c30 	.word	0x08025c30
 8001d14:	08025c98 	.word	0x08025c98
 8001d18:	08025c58 	.word	0x08025c58

08001d1c <lwiperf_tx_start_impl>:
 * receive test has finished.
 */
static err_t
lwiperf_tx_start_impl(const ip_addr_t *remote_ip, u16_t remote_port, lwiperf_settings_t *settings, lwiperf_report_fn report_fn,
                      void *report_arg, lwiperf_state_base_t *related_master_state, lwiperf_state_tcp_t **new_conn)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b088      	sub	sp, #32
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	607a      	str	r2, [r7, #4]
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	817b      	strh	r3, [r7, #10]
  err_t err;
  lwiperf_state_tcp_t *client_conn;
  struct tcp_pcb *newpcb;
  ip_addr_t remote_addr;

  LWIP_ASSERT("remote_ip != NULL", remote_ip != NULL);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d106      	bne.n	8001d40 <lwiperf_tx_start_impl+0x24>
 8001d32:	4b4a      	ldr	r3, [pc, #296]	; (8001e5c <lwiperf_tx_start_impl+0x140>)
 8001d34:	f240 128b 	movw	r2, #395	; 0x18b
 8001d38:	4949      	ldr	r1, [pc, #292]	; (8001e60 <lwiperf_tx_start_impl+0x144>)
 8001d3a:	484a      	ldr	r0, [pc, #296]	; (8001e64 <lwiperf_tx_start_impl+0x148>)
 8001d3c:	f01e ff16 	bl	8020b6c <iprintf>
  LWIP_ASSERT("remote_ip != NULL", settings != NULL);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d106      	bne.n	8001d54 <lwiperf_tx_start_impl+0x38>
 8001d46:	4b45      	ldr	r3, [pc, #276]	; (8001e5c <lwiperf_tx_start_impl+0x140>)
 8001d48:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8001d4c:	4944      	ldr	r1, [pc, #272]	; (8001e60 <lwiperf_tx_start_impl+0x144>)
 8001d4e:	4845      	ldr	r0, [pc, #276]	; (8001e64 <lwiperf_tx_start_impl+0x148>)
 8001d50:	f01e ff0c 	bl	8020b6c <iprintf>
  LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 8001d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d106      	bne.n	8001d68 <lwiperf_tx_start_impl+0x4c>
 8001d5a:	4b40      	ldr	r3, [pc, #256]	; (8001e5c <lwiperf_tx_start_impl+0x140>)
 8001d5c:	f240 128d 	movw	r2, #397	; 0x18d
 8001d60:	4941      	ldr	r1, [pc, #260]	; (8001e68 <lwiperf_tx_start_impl+0x14c>)
 8001d62:	4840      	ldr	r0, [pc, #256]	; (8001e64 <lwiperf_tx_start_impl+0x148>)
 8001d64:	f01e ff02 	bl	8020b6c <iprintf>
  *new_conn = NULL;
 8001d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]

  client_conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 8001d6e:	2048      	movs	r0, #72	; 0x48
 8001d70:	f012 fe74 	bl	8014a5c <mem_malloc>
 8001d74:	61f8      	str	r0, [r7, #28]
  if (client_conn == NULL) {
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d102      	bne.n	8001d82 <lwiperf_tx_start_impl+0x66>
    return ERR_MEM;
 8001d7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d80:	e067      	b.n	8001e52 <lwiperf_tx_start_impl+0x136>
  }
  newpcb = tcp_new_ip_type(IP_GET_TYPE(remote_ip));
 8001d82:	2000      	movs	r0, #0
 8001d84:	f015 feca 	bl	8017b1c <tcp_new_ip_type>
 8001d88:	61b8      	str	r0, [r7, #24]
  if (newpcb == NULL) {
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d105      	bne.n	8001d9c <lwiperf_tx_start_impl+0x80>
    LWIPERF_FREE(lwiperf_state_tcp_t, client_conn);
 8001d90:	69f8      	ldr	r0, [r7, #28]
 8001d92:	f012 fcfd 	bl	8014790 <mem_free>
    return ERR_MEM;
 8001d96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d9a:	e05a      	b.n	8001e52 <lwiperf_tx_start_impl+0x136>
  }
  memset(client_conn, 0, sizeof(lwiperf_state_tcp_t));
 8001d9c:	2248      	movs	r2, #72	; 0x48
 8001d9e:	2100      	movs	r1, #0
 8001da0:	69f8      	ldr	r0, [r7, #28]
 8001da2:	f01d ffe9 	bl	801fd78 <memset>
  client_conn->base.tcp = 1;
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	2201      	movs	r2, #1
 8001daa:	711a      	strb	r2, [r3, #4]
  client_conn->base.related_master_state = related_master_state;
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001db0:	609a      	str	r2, [r3, #8]
  client_conn->conn_pcb = newpcb;
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	611a      	str	r2, [r3, #16]
  client_conn->time_started = sys_now(); /* @todo: set this again on 'connected' */
 8001db8:	f00f fa0c 	bl	80111d4 <sys_now>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	615a      	str	r2, [r3, #20]
  client_conn->report_fn = report_fn;
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	619a      	str	r2, [r3, #24]
  client_conn->report_arg = report_arg;
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001dcc:	61da      	str	r2, [r3, #28]
  client_conn->next_num = 4; /* initial nr is '4' since the header has 24 byte */
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	2204      	movs	r2, #4
 8001dd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  client_conn->bytes_transferred = 0;
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	625a      	str	r2, [r3, #36]	; 0x24
  memcpy(&client_conn->settings, settings, sizeof(*settings));
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	3328      	adds	r3, #40	; 0x28
 8001de0:	2218      	movs	r2, #24
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f01d ff9f 	bl	801fd28 <memcpy>
  client_conn->have_settings_buf = 1;
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  tcp_arg(newpcb, client_conn);
 8001df2:	69f9      	ldr	r1, [r7, #28]
 8001df4:	69b8      	ldr	r0, [r7, #24]
 8001df6:	f015 fe9f 	bl	8017b38 <tcp_arg>
  tcp_sent(newpcb, lwiperf_tcp_client_sent);
 8001dfa:	491c      	ldr	r1, [pc, #112]	; (8001e6c <lwiperf_tx_start_impl+0x150>)
 8001dfc:	69b8      	ldr	r0, [r7, #24]
 8001dfe:	f015 fecf 	bl	8017ba0 <tcp_sent>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 8001e02:	2202      	movs	r2, #2
 8001e04:	491a      	ldr	r1, [pc, #104]	; (8001e70 <lwiperf_tx_start_impl+0x154>)
 8001e06:	69b8      	ldr	r0, [r7, #24]
 8001e08:	f015 ff26 	bl	8017c58 <tcp_poll>
  tcp_err(newpcb, lwiperf_tcp_err);
 8001e0c:	4919      	ldr	r1, [pc, #100]	; (8001e74 <lwiperf_tx_start_impl+0x158>)
 8001e0e:	69b8      	ldr	r0, [r7, #24]
 8001e10:	f015 fee8 	bl	8017be4 <tcp_err>

  ip_addr_copy(remote_addr, *remote_ip);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	613b      	str	r3, [r7, #16]

  err = tcp_connect(newpcb, &remote_addr, remote_port, lwiperf_tcp_client_connected);
 8001e1a:	897a      	ldrh	r2, [r7, #10]
 8001e1c:	f107 0110 	add.w	r1, r7, #16
 8001e20:	4b15      	ldr	r3, [pc, #84]	; (8001e78 <lwiperf_tx_start_impl+0x15c>)
 8001e22:	69b8      	ldr	r0, [r7, #24]
 8001e24:	f014 ff40 	bl	8016ca8 <tcp_connect>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8001e2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d006      	beq.n	8001e42 <lwiperf_tx_start_impl+0x126>
    lwiperf_tcp_close(client_conn, LWIPERF_TCP_ABORTED_LOCAL);
 8001e34:	2102      	movs	r1, #2
 8001e36:	69f8      	ldr	r0, [r7, #28]
 8001e38:	f7ff fdd4 	bl	80019e4 <lwiperf_tcp_close>
    return err;
 8001e3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e40:	e007      	b.n	8001e52 <lwiperf_tx_start_impl+0x136>
  }
  lwiperf_list_add(&client_conn->base);
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff fd11 	bl	800186c <lwiperf_list_add>
  *new_conn = client_conn;
 8001e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e4c:	69fa      	ldr	r2, [r7, #28]
 8001e4e:	601a      	str	r2, [r3, #0]
  return ERR_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3720      	adds	r7, #32
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	08025c30 	.word	0x08025c30
 8001e60:	08025ca8 	.word	0x08025ca8
 8001e64:	08025c58 	.word	0x08025c58
 8001e68:	08025cbc 	.word	0x08025cbc
 8001e6c:	08001c61 	.word	0x08001c61
 8001e70:	08002151 	.word	0x08002151
 8001e74:	08002131 	.word	0x08002131
 8001e78:	08001cb1 	.word	0x08001cb1

08001e7c <lwiperf_tx_start_passive>:

static err_t
lwiperf_tx_start_passive(lwiperf_state_tcp_t *conn)
{
 8001e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e7e:	b089      	sub	sp, #36	; 0x24
 8001e80:	af04      	add	r7, sp, #16
 8001e82:	6078      	str	r0, [r7, #4]
  err_t ret;
  lwiperf_state_tcp_t *new_conn = NULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	60bb      	str	r3, [r7, #8]
  u16_t remote_port = (u16_t)lwip_htonl(conn->settings.remote_port);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f00f ff74 	bl	8011d7a <lwip_htonl>
 8001e92:	4603      	mov	r3, r0
 8001e94:	81fb      	strh	r3, [r7, #14]

  ret = lwiperf_tx_start_impl(&conn->conn_pcb->remote_ip, remote_port, &conn->settings, conn->report_fn, conn->report_arg,
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	1d18      	adds	r0, r3, #4
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f103 0528 	add.w	r5, r3, #40	; 0x28
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	699e      	ldr	r6, [r3, #24]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6892      	ldr	r2, [r2, #8]
 8001eae:	89fc      	ldrh	r4, [r7, #14]
 8001eb0:	f107 0108 	add.w	r1, r7, #8
 8001eb4:	9102      	str	r1, [sp, #8]
 8001eb6:	9201      	str	r2, [sp, #4]
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	4633      	mov	r3, r6
 8001ebc:	462a      	mov	r2, r5
 8001ebe:	4621      	mov	r1, r4
 8001ec0:	f7ff ff2c 	bl	8001d1c <lwiperf_tx_start_impl>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	737b      	strb	r3, [r7, #13]
    conn->base.related_master_state, &new_conn);
  if (ret == ERR_OK) {
 8001ec8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d10c      	bne.n	8001eea <lwiperf_tx_start_passive+0x6e>
    LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d106      	bne.n	8001ee4 <lwiperf_tx_start_passive+0x68>
 8001ed6:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <lwiperf_tx_start_passive+0x7c>)
 8001ed8:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8001edc:	4907      	ldr	r1, [pc, #28]	; (8001efc <lwiperf_tx_start_passive+0x80>)
 8001ede:	4808      	ldr	r0, [pc, #32]	; (8001f00 <lwiperf_tx_start_passive+0x84>)
 8001ee0:	f01e fe44 	bl	8020b6c <iprintf>
    new_conn->settings.flags = 0; /* prevent the remote side starting back as client again */
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  return ret;
 8001eea:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	08025c30 	.word	0x08025c30
 8001efc:	08025cbc 	.word	0x08025cbc
 8001f00:	08025c58 	.word	0x08025c58

08001f04 <lwiperf_tcp_recv>:

/** Receive data on an iperf tcp session */
static err_t
lwiperf_tcp_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b088      	sub	sp, #32
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
 8001f10:	70fb      	strb	r3, [r7, #3]
  u8_t tmp;
  u16_t tot_len;
  u32_t packet_idx;
  struct pbuf *q;
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d006      	beq.n	8001f2e <lwiperf_tcp_recv+0x2a>
 8001f20:	4b7e      	ldr	r3, [pc, #504]	; (800211c <lwiperf_tcp_recv+0x218>)
 8001f22:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
 8001f26:	497e      	ldr	r1, [pc, #504]	; (8002120 <lwiperf_tcp_recv+0x21c>)
 8001f28:	487e      	ldr	r0, [pc, #504]	; (8002124 <lwiperf_tcp_recv+0x220>)
 8001f2a:	f01e fe1f 	bl	8020b6c <iprintf>
  LWIP_UNUSED_ARG(tpcb);

  if (err != ERR_OK) {
 8001f2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d005      	beq.n	8001f42 <lwiperf_tcp_recv+0x3e>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 8001f36:	2105      	movs	r1, #5
 8001f38:	6978      	ldr	r0, [r7, #20]
 8001f3a:	f7ff fd53 	bl	80019e4 <lwiperf_tcp_close>
    return ERR_OK;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	e0e8      	b.n	8002114 <lwiperf_tcp_recv+0x210>
  }
  if (p == NULL) {
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d114      	bne.n	8001f72 <lwiperf_tcp_recv+0x6e>
    /* connection closed -> test done */
    if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d008      	beq.n	8001f66 <lwiperf_tcp_recv+0x62>
      if ((conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) == 0) {
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d102      	bne.n	8001f66 <lwiperf_tcp_recv+0x62>
        /* client requested transmission after end of test */
        lwiperf_tx_start_passive(conn);
 8001f60:	6978      	ldr	r0, [r7, #20]
 8001f62:	f7ff ff8b 	bl	8001e7c <lwiperf_tx_start_passive>
      }
    }
    lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_SERVER);
 8001f66:	2100      	movs	r1, #0
 8001f68:	6978      	ldr	r0, [r7, #20]
 8001f6a:	f7ff fd3b 	bl	80019e4 <lwiperf_tcp_close>
    return ERR_OK;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	e0d0      	b.n	8002114 <lwiperf_tcp_recv+0x210>
  }
  tot_len = p->tot_len;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	891b      	ldrh	r3, [r3, #8]
 8001f76:	827b      	strh	r3, [r7, #18]

  conn->poll_count = 0;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2020 	strb.w	r2, [r3, #32]

  if ((!conn->have_settings_buf) || ((conn->bytes_transferred - 24) % (1024 * 128) == 0)) {
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d007      	beq.n	8001f9a <lwiperf_tcp_recv+0x96>
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8e:	3b18      	subs	r3, #24
 8001f90:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f040 8090 	bne.w	80020ba <lwiperf_tcp_recv+0x1b6>
    /* wait for 24-byte header */
    if (p->tot_len < sizeof(lwiperf_settings_t)) {
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	891b      	ldrh	r3, [r3, #8]
 8001f9e:	2b17      	cmp	r3, #23
 8001fa0:	d808      	bhi.n	8001fb4 <lwiperf_tcp_recv+0xb0>
      lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_DATAERROR);
 8001fa2:	2103      	movs	r1, #3
 8001fa4:	6978      	ldr	r0, [r7, #20]
 8001fa6:	f7ff fd1d 	bl	80019e4 <lwiperf_tcp_close>
      pbuf_free(p);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f013 fdcc 	bl	8015b48 <pbuf_free>
      return ERR_OK;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	e0af      	b.n	8002114 <lwiperf_tcp_recv+0x210>
    }
    if (!conn->have_settings_buf) {
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d135      	bne.n	800202a <lwiperf_tcp_recv+0x126>
      if (pbuf_copy_partial(p, &conn->settings, sizeof(lwiperf_settings_t), 0) != sizeof(lwiperf_settings_t)) {
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	2218      	movs	r2, #24
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f013 ffa7 	bl	8015f1c <pbuf_copy_partial>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b18      	cmp	r3, #24
 8001fd2:	d008      	beq.n	8001fe6 <lwiperf_tcp_recv+0xe2>
        lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 8001fd4:	2102      	movs	r1, #2
 8001fd6:	6978      	ldr	r0, [r7, #20]
 8001fd8:	f7ff fd04 	bl	80019e4 <lwiperf_tcp_close>
        pbuf_free(p);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f013 fdb3 	bl	8015b48 <pbuf_free>
        return ERR_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	e096      	b.n	8002114 <lwiperf_tcp_recv+0x210>
      }
      conn->have_settings_buf = 1;
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d031      	beq.n	800205e <lwiperf_tcp_recv+0x15a>
        if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) {
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d02b      	beq.n	800205e <lwiperf_tcp_recv+0x15a>
          /* client requested parallel transmission test */
          err_t err2 = lwiperf_tx_start_passive(conn);
 8002006:	6978      	ldr	r0, [r7, #20]
 8002008:	f7ff ff38 	bl	8001e7c <lwiperf_tx_start_passive>
 800200c:	4603      	mov	r3, r0
 800200e:	747b      	strb	r3, [r7, #17]
          if (err2 != ERR_OK) {
 8002010:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d022      	beq.n	800205e <lwiperf_tcp_recv+0x15a>
            lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_TXERROR);
 8002018:	2104      	movs	r1, #4
 800201a:	6978      	ldr	r0, [r7, #20]
 800201c:	f7ff fce2 	bl	80019e4 <lwiperf_tcp_close>
            pbuf_free(p);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f013 fd91 	bl	8015b48 <pbuf_free>
            return ERR_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	e074      	b.n	8002114 <lwiperf_tcp_recv+0x210>
          }
        }
      }
    } else {
      if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002032:	2b00      	cmp	r3, #0
 8002034:	d013      	beq.n	800205e <lwiperf_tcp_recv+0x15a>
        if (pbuf_memcmp(p, 0, &conn->settings, sizeof(lwiperf_settings_t)) != 0) {
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800203c:	2318      	movs	r3, #24
 800203e:	2100      	movs	r1, #0
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f014 f872 	bl	801612a <pbuf_memcmp>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d008      	beq.n	800205e <lwiperf_tcp_recv+0x15a>
          lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_DATAERROR);
 800204c:	2103      	movs	r1, #3
 800204e:	6978      	ldr	r0, [r7, #20]
 8002050:	f7ff fcc8 	bl	80019e4 <lwiperf_tcp_close>
          pbuf_free(p);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f013 fd77 	bl	8015b48 <pbuf_free>
          return ERR_OK;
 800205a:	2300      	movs	r3, #0
 800205c:	e05a      	b.n	8002114 <lwiperf_tcp_recv+0x210>
        }
      }
    }
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002062:	f103 0218 	add.w	r2, r3, #24
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	625a      	str	r2, [r3, #36]	; 0x24
    if (conn->bytes_transferred <= 24) {
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206e:	2b18      	cmp	r3, #24
 8002070:	d80f      	bhi.n	8002092 <lwiperf_tcp_recv+0x18e>
      conn->time_started = sys_now();
 8002072:	f00f f8af 	bl	80111d4 <sys_now>
 8002076:	4602      	mov	r2, r0
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	615a      	str	r2, [r3, #20]
      tcp_recved(tpcb, p->tot_len);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	891b      	ldrh	r3, [r3, #8]
 8002080:	4619      	mov	r1, r3
 8002082:	68b8      	ldr	r0, [r7, #8]
 8002084:	f014 fd7a 	bl	8016b7c <tcp_recved>
      pbuf_free(p);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f013 fd5d 	bl	8015b48 <pbuf_free>
      return ERR_OK;
 800208e:	2300      	movs	r3, #0
 8002090:	e040      	b.n	8002114 <lwiperf_tcp_recv+0x210>
    }
    conn->next_num = 4; /* 24 bytes received... */
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	2204      	movs	r2, #4
 8002096:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    tmp = pbuf_remove_header(p, 24);
 800209a:	2118      	movs	r1, #24
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f013 fccd 	bl	8015a3c <pbuf_remove_header>
 80020a2:	4603      	mov	r3, r0
 80020a4:	743b      	strb	r3, [r7, #16]
    LWIP_ASSERT("pbuf_remove_header failed", tmp == 0);
 80020a6:	7c3b      	ldrb	r3, [r7, #16]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d006      	beq.n	80020ba <lwiperf_tcp_recv+0x1b6>
 80020ac:	4b1b      	ldr	r3, [pc, #108]	; (800211c <lwiperf_tcp_recv+0x218>)
 80020ae:	f240 2211 	movw	r2, #529	; 0x211
 80020b2:	491d      	ldr	r1, [pc, #116]	; (8002128 <lwiperf_tcp_recv+0x224>)
 80020b4:	481b      	ldr	r0, [pc, #108]	; (8002124 <lwiperf_tcp_recv+0x220>)
 80020b6:	f01e fd59 	bl	8020b6c <iprintf>
    LWIP_UNUSED_ARG(tmp); /* for LWIP_NOASSERT */
  }

  packet_idx = 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61fb      	str	r3, [r7, #28]
  for (q = p; q != NULL; q = q->next) {
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	61bb      	str	r3, [r7, #24]
 80020c2:	e008      	b.n	80020d6 <lwiperf_tcp_recv+0x1d2>
        pbuf_free(p);
        return ERR_OK;
      }
    }
#endif
    packet_idx += q->len;
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	895b      	ldrh	r3, [r3, #10]
 80020c8:	461a      	mov	r2, r3
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	4413      	add	r3, r2
 80020ce:	61fb      	str	r3, [r7, #28]
  for (q = p; q != NULL; q = q->next) {
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	61bb      	str	r3, [r7, #24]
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1f3      	bne.n	80020c4 <lwiperf_tcp_recv+0x1c0>
  }
  LWIP_ASSERT("count mismatch", packet_idx == p->tot_len);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	891b      	ldrh	r3, [r3, #8]
 80020e0:	461a      	mov	r2, r3
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d006      	beq.n	80020f6 <lwiperf_tcp_recv+0x1f2>
 80020e8:	4b0c      	ldr	r3, [pc, #48]	; (800211c <lwiperf_tcp_recv+0x218>)
 80020ea:	f240 222b 	movw	r2, #555	; 0x22b
 80020ee:	490f      	ldr	r1, [pc, #60]	; (800212c <lwiperf_tcp_recv+0x228>)
 80020f0:	480c      	ldr	r0, [pc, #48]	; (8002124 <lwiperf_tcp_recv+0x220>)
 80020f2:	f01e fd3b 	bl	8020b6c <iprintf>
  conn->bytes_transferred += packet_idx;
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	441a      	add	r2, r3
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	625a      	str	r2, [r3, #36]	; 0x24
  tcp_recved(tpcb, tot_len);
 8002102:	8a7b      	ldrh	r3, [r7, #18]
 8002104:	4619      	mov	r1, r3
 8002106:	68b8      	ldr	r0, [r7, #8]
 8002108:	f014 fd38 	bl	8016b7c <tcp_recved>
  pbuf_free(p);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f013 fd1b 	bl	8015b48 <pbuf_free>
  return ERR_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3720      	adds	r7, #32
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	08025c30 	.word	0x08025c30
 8002120:	08025cd0 	.word	0x08025cd0
 8002124:	08025c58 	.word	0x08025c58
 8002128:	08025ce0 	.word	0x08025ce0
 800212c:	08025cfc 	.word	0x08025cfc

08002130 <lwiperf_tcp_err>:

/** Error callback, iperf tcp session aborted */
static void
lwiperf_tcp_err(void *arg, err_t err)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	70fb      	strb	r3, [r7, #3]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);
  lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 8002140:	2105      	movs	r1, #5
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f7ff fc4e 	bl	80019e4 <lwiperf_tcp_close>
}
 8002148:	bf00      	nop
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <lwiperf_tcp_poll>:

/** TCP poll callback, try to send more data */
static err_t
lwiperf_tcp_poll(void *arg, struct tcp_pcb *tpcb)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d006      	beq.n	8002176 <lwiperf_tcp_poll+0x26>
 8002168:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <lwiperf_tcp_poll+0x64>)
 800216a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800216e:	4912      	ldr	r1, [pc, #72]	; (80021b8 <lwiperf_tcp_poll+0x68>)
 8002170:	4812      	ldr	r0, [pc, #72]	; (80021bc <lwiperf_tcp_poll+0x6c>)
 8002172:	f01e fcfb 	bl	8020b6c <iprintf>
  LWIP_UNUSED_ARG(tpcb);
  if (++conn->poll_count >= LWIPERF_TCP_MAX_IDLE_SEC) {
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f893 3020 	ldrb.w	r3, [r3, #32]
 800217c:	3301      	adds	r3, #1
 800217e:	b2da      	uxtb	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f883 2020 	strb.w	r2, [r3, #32]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f893 3020 	ldrb.w	r3, [r3, #32]
 800218c:	2b09      	cmp	r3, #9
 800218e:	d905      	bls.n	800219c <lwiperf_tcp_poll+0x4c>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 8002190:	2102      	movs	r1, #2
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f7ff fc26 	bl	80019e4 <lwiperf_tcp_close>
    return ERR_OK; /* lwiperf_tcp_close frees conn */
 8002198:	2300      	movs	r3, #0
 800219a:	e007      	b.n	80021ac <lwiperf_tcp_poll+0x5c>
  }

  if (!conn->base.server) {
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	795b      	ldrb	r3, [r3, #5]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d102      	bne.n	80021aa <lwiperf_tcp_poll+0x5a>
    lwiperf_tcp_client_send_more(conn);
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f7ff fc7f 	bl	8001aa8 <lwiperf_tcp_client_send_more>
  }

  return ERR_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	08025c30 	.word	0x08025c30
 80021b8:	08025cd0 	.word	0x08025cd0
 80021bc:	08025c58 	.word	0x08025c58

080021c0 <lwiperf_tcp_accept>:

/** This is called when a new client connects for an iperf tcp session */
static err_t
lwiperf_tcp_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	4613      	mov	r3, r2
 80021cc:	71fb      	strb	r3, [r7, #7]
  lwiperf_state_tcp_t *s, *conn;
  if ((err != ERR_OK) || (newpcb == NULL) || (arg == NULL)) {
 80021ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d105      	bne.n	80021e2 <lwiperf_tcp_accept+0x22>
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d002      	beq.n	80021e2 <lwiperf_tcp_accept+0x22>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d102      	bne.n	80021e8 <lwiperf_tcp_accept+0x28>
    return ERR_VAL;
 80021e2:	f06f 0305 	mvn.w	r3, #5
 80021e6:	e0a3      	b.n	8002330 <lwiperf_tcp_accept+0x170>
  }

  s = (lwiperf_state_tcp_t *)arg;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("invalid session", s->base.server);
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	795b      	ldrb	r3, [r3, #5]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d106      	bne.n	8002202 <lwiperf_tcp_accept+0x42>
 80021f4:	4b50      	ldr	r3, [pc, #320]	; (8002338 <lwiperf_tcp_accept+0x178>)
 80021f6:	f44f 7216 	mov.w	r2, #600	; 0x258
 80021fa:	4950      	ldr	r1, [pc, #320]	; (800233c <lwiperf_tcp_accept+0x17c>)
 80021fc:	4850      	ldr	r0, [pc, #320]	; (8002340 <lwiperf_tcp_accept+0x180>)
 80021fe:	f01e fcb5 	bl	8020b6c <iprintf>
  LWIP_ASSERT("invalid listen pcb", s->server_pcb != NULL);
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d106      	bne.n	8002218 <lwiperf_tcp_accept+0x58>
 800220a:	4b4b      	ldr	r3, [pc, #300]	; (8002338 <lwiperf_tcp_accept+0x178>)
 800220c:	f240 2259 	movw	r2, #601	; 0x259
 8002210:	494c      	ldr	r1, [pc, #304]	; (8002344 <lwiperf_tcp_accept+0x184>)
 8002212:	484b      	ldr	r0, [pc, #300]	; (8002340 <lwiperf_tcp_accept+0x180>)
 8002214:	f01e fcaa 	bl	8020b6c <iprintf>
  LWIP_ASSERT("invalid conn pcb", s->conn_pcb == NULL);
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d006      	beq.n	800222e <lwiperf_tcp_accept+0x6e>
 8002220:	4b45      	ldr	r3, [pc, #276]	; (8002338 <lwiperf_tcp_accept+0x178>)
 8002222:	f240 225a 	movw	r2, #602	; 0x25a
 8002226:	4948      	ldr	r1, [pc, #288]	; (8002348 <lwiperf_tcp_accept+0x188>)
 8002228:	4845      	ldr	r0, [pc, #276]	; (8002340 <lwiperf_tcp_accept+0x180>)
 800222a:	f01e fc9f 	bl	8020b6c <iprintf>
  if (s->specific_remote) {
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002234:	2b00      	cmp	r3, #0
 8002236:	d013      	beq.n	8002260 <lwiperf_tcp_accept+0xa0>
    LWIP_ASSERT("s->base.related_master_state != NULL", s->base.related_master_state != NULL);
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d106      	bne.n	800224e <lwiperf_tcp_accept+0x8e>
 8002240:	4b3d      	ldr	r3, [pc, #244]	; (8002338 <lwiperf_tcp_accept+0x178>)
 8002242:	f44f 7217 	mov.w	r2, #604	; 0x25c
 8002246:	4941      	ldr	r1, [pc, #260]	; (800234c <lwiperf_tcp_accept+0x18c>)
 8002248:	483d      	ldr	r0, [pc, #244]	; (8002340 <lwiperf_tcp_accept+0x180>)
 800224a:	f01e fc8f 	bl	8020b6c <iprintf>
    if (!ip_addr_cmp(&newpcb->remote_ip, &s->remote_addr)) {
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002256:	429a      	cmp	r2, r3
 8002258:	d00d      	beq.n	8002276 <lwiperf_tcp_accept+0xb6>
      /* this listener belongs to a client session, and this is not the correct remote */
      return ERR_VAL;
 800225a:	f06f 0305 	mvn.w	r3, #5
 800225e:	e067      	b.n	8002330 <lwiperf_tcp_accept+0x170>
    }
  } else {
    LWIP_ASSERT("s->base.related_master_state == NULL", s->base.related_master_state == NULL);
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d006      	beq.n	8002276 <lwiperf_tcp_accept+0xb6>
 8002268:	4b33      	ldr	r3, [pc, #204]	; (8002338 <lwiperf_tcp_accept+0x178>)
 800226a:	f240 2262 	movw	r2, #610	; 0x262
 800226e:	4938      	ldr	r1, [pc, #224]	; (8002350 <lwiperf_tcp_accept+0x190>)
 8002270:	4833      	ldr	r0, [pc, #204]	; (8002340 <lwiperf_tcp_accept+0x180>)
 8002272:	f01e fc7b 	bl	8020b6c <iprintf>
  }

  conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 8002276:	2048      	movs	r0, #72	; 0x48
 8002278:	f012 fbf0 	bl	8014a5c <mem_malloc>
 800227c:	6138      	str	r0, [r7, #16]
  if (conn == NULL) {
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d102      	bne.n	800228a <lwiperf_tcp_accept+0xca>
    return ERR_MEM;
 8002284:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002288:	e052      	b.n	8002330 <lwiperf_tcp_accept+0x170>
  }
  memset(conn, 0, sizeof(lwiperf_state_tcp_t));
 800228a:	2248      	movs	r2, #72	; 0x48
 800228c:	2100      	movs	r1, #0
 800228e:	6938      	ldr	r0, [r7, #16]
 8002290:	f01d fd72 	bl	801fd78 <memset>
  conn->base.tcp = 1;
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	2201      	movs	r2, #1
 8002298:	711a      	strb	r2, [r3, #4]
  conn->base.server = 1;
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	2201      	movs	r2, #1
 800229e:	715a      	strb	r2, [r3, #5]
  conn->base.related_master_state = &s->base;
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	609a      	str	r2, [r3, #8]
  conn->conn_pcb = newpcb;
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	68ba      	ldr	r2, [r7, #8]
 80022aa:	611a      	str	r2, [r3, #16]
  conn->time_started = sys_now();
 80022ac:	f00e ff92 	bl	80111d4 <sys_now>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	615a      	str	r2, [r3, #20]
  conn->report_fn = s->report_fn;
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	699a      	ldr	r2, [r3, #24]
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	619a      	str	r2, [r3, #24]
  conn->report_arg = s->report_arg;
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	69da      	ldr	r2, [r3, #28]
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	61da      	str	r2, [r3, #28]

  /* setup the tcp rx connection */
  tcp_arg(newpcb, conn);
 80022c6:	6939      	ldr	r1, [r7, #16]
 80022c8:	68b8      	ldr	r0, [r7, #8]
 80022ca:	f015 fc35 	bl	8017b38 <tcp_arg>
  tcp_recv(newpcb, lwiperf_tcp_recv);
 80022ce:	4921      	ldr	r1, [pc, #132]	; (8002354 <lwiperf_tcp_accept+0x194>)
 80022d0:	68b8      	ldr	r0, [r7, #8]
 80022d2:	f015 fc43 	bl	8017b5c <tcp_recv>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 80022d6:	2202      	movs	r2, #2
 80022d8:	491f      	ldr	r1, [pc, #124]	; (8002358 <lwiperf_tcp_accept+0x198>)
 80022da:	68b8      	ldr	r0, [r7, #8]
 80022dc:	f015 fcbc 	bl	8017c58 <tcp_poll>
  tcp_err(conn->conn_pcb, lwiperf_tcp_err);
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	491d      	ldr	r1, [pc, #116]	; (800235c <lwiperf_tcp_accept+0x19c>)
 80022e6:	4618      	mov	r0, r3
 80022e8:	f015 fc7c 	bl	8017be4 <tcp_err>

  if (s->specific_remote) {
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d017      	beq.n	8002326 <lwiperf_tcp_accept+0x166>
    /* this listener belongs to a client, so make the client the master of the newly created connection */
    conn->base.related_master_state = s->base.related_master_state;
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	609a      	str	r2, [r3, #8]
    /* if dual mode or (tradeoff mode AND client is done): close the listener */
    if (!s->client_tradeoff_mode || !lwiperf_list_find(s->base.related_master_state)) {
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002304:	2b00      	cmp	r3, #0
 8002306:	d007      	beq.n	8002318 <lwiperf_tcp_accept+0x158>
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff fb05 	bl	800191c <lwiperf_list_find>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d106      	bne.n	8002326 <lwiperf_tcp_accept+0x166>
      /* prevent report when closing: this is expected */
      s->report_fn = NULL;
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	2200      	movs	r2, #0
 800231c:	619a      	str	r2, [r3, #24]
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
 800231e:	2102      	movs	r1, #2
 8002320:	6978      	ldr	r0, [r7, #20]
 8002322:	f7ff fb5f 	bl	80019e4 <lwiperf_tcp_close>
    }
  }
  lwiperf_list_add(&conn->base);
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff fa9f 	bl	800186c <lwiperf_list_add>
  return ERR_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	08025c30 	.word	0x08025c30
 800233c:	08025d0c 	.word	0x08025d0c
 8002340:	08025c58 	.word	0x08025c58
 8002344:	08025d1c 	.word	0x08025d1c
 8002348:	08025d30 	.word	0x08025d30
 800234c:	08025d44 	.word	0x08025d44
 8002350:	08025d6c 	.word	0x08025d6c
 8002354:	08001f05 	.word	0x08001f05
 8002358:	08002151 	.word	0x08002151
 800235c:	08002131 	.word	0x08002131

08002360 <lwiperf_start_tcp_server_default>:
 * @returns a connection handle that can be used to abort the server
 *          by calling @ref lwiperf_abort()
 */
void *
lwiperf_start_tcp_server_default(lwiperf_report_fn report_fn, void *report_arg)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  return lwiperf_start_tcp_server(IP_ADDR_ANY, LWIPERF_TCP_PORT_DEFAULT,
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	f241 3189 	movw	r1, #5001	; 0x1389
 8002372:	4804      	ldr	r0, [pc, #16]	; (8002384 <lwiperf_start_tcp_server_default+0x24>)
 8002374:	f000 f808 	bl	8002388 <lwiperf_start_tcp_server>
 8002378:	4603      	mov	r3, r0
                                  report_fn, report_arg);
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	08029178 	.word	0x08029178

08002388 <lwiperf_start_tcp_server>:
 *          by calling @ref lwiperf_abort()
 */
void *
lwiperf_start_tcp_server(const ip_addr_t *local_addr, u16_t local_port,
                         lwiperf_report_fn report_fn, void *report_arg)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b088      	sub	sp, #32
 800238c:	af02      	add	r7, sp, #8
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	607a      	str	r2, [r7, #4]
 8002392:	603b      	str	r3, [r7, #0]
 8002394:	460b      	mov	r3, r1
 8002396:	817b      	strh	r3, [r7, #10]
  err_t err;
  lwiperf_state_tcp_t *state = NULL;
 8002398:	2300      	movs	r3, #0
 800239a:	613b      	str	r3, [r7, #16]

  err = lwiperf_start_tcp_server_impl(local_addr, local_port, report_fn, report_arg,
 800239c:	8979      	ldrh	r1, [r7, #10]
 800239e:	f107 0310 	add.w	r3, r7, #16
 80023a2:	9301      	str	r3, [sp, #4]
 80023a4:	2300      	movs	r3, #0
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f000 f80d 	bl	80023cc <lwiperf_start_tcp_server_impl>
 80023b2:	4603      	mov	r3, r0
 80023b4:	75fb      	strb	r3, [r7, #23]
    NULL, &state);
  if (err == ERR_OK) {
 80023b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <lwiperf_start_tcp_server+0x3a>
    return state;
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	e000      	b.n	80023c4 <lwiperf_start_tcp_server+0x3c>
  }
  return NULL;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3718      	adds	r7, #24
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <lwiperf_start_tcp_server_impl>:

static err_t lwiperf_start_tcp_server_impl(const ip_addr_t *local_addr, u16_t local_port,
                                           lwiperf_report_fn report_fn, void *report_arg,
                                           lwiperf_state_base_t *related_master_state, lwiperf_state_tcp_t **state)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b088      	sub	sp, #32
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	607a      	str	r2, [r7, #4]
 80023d6:	603b      	str	r3, [r7, #0]
 80023d8:	460b      	mov	r3, r1
 80023da:	817b      	strh	r3, [r7, #10]
  struct tcp_pcb *pcb;
  lwiperf_state_tcp_t *s;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("state != NULL", state != NULL);
 80023dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d106      	bne.n	80023f0 <lwiperf_start_tcp_server_impl+0x24>
 80023e2:	4b3a      	ldr	r3, [pc, #232]	; (80024cc <lwiperf_start_tcp_server_impl+0x100>)
 80023e4:	f240 22b6 	movw	r2, #694	; 0x2b6
 80023e8:	4939      	ldr	r1, [pc, #228]	; (80024d0 <lwiperf_start_tcp_server_impl+0x104>)
 80023ea:	483a      	ldr	r0, [pc, #232]	; (80024d4 <lwiperf_start_tcp_server_impl+0x108>)
 80023ec:	f01e fbbe 	bl	8020b6c <iprintf>

  if (local_addr == NULL) {
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d102      	bne.n	80023fc <lwiperf_start_tcp_server_impl+0x30>
    return ERR_ARG;
 80023f6:	f06f 030f 	mvn.w	r3, #15
 80023fa:	e063      	b.n	80024c4 <lwiperf_start_tcp_server_impl+0xf8>
  }

  s = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 80023fc:	2048      	movs	r0, #72	; 0x48
 80023fe:	f012 fb2d 	bl	8014a5c <mem_malloc>
 8002402:	61f8      	str	r0, [r7, #28]
  if (s == NULL) {
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d102      	bne.n	8002410 <lwiperf_start_tcp_server_impl+0x44>
    return ERR_MEM;
 800240a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800240e:	e059      	b.n	80024c4 <lwiperf_start_tcp_server_impl+0xf8>
  }
  memset(s, 0, sizeof(lwiperf_state_tcp_t));
 8002410:	2248      	movs	r2, #72	; 0x48
 8002412:	2100      	movs	r1, #0
 8002414:	69f8      	ldr	r0, [r7, #28]
 8002416:	f01d fcaf 	bl	801fd78 <memset>
  s->base.tcp = 1;
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	2201      	movs	r2, #1
 800241e:	711a      	strb	r2, [r3, #4]
  s->base.server = 1;
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	2201      	movs	r2, #1
 8002424:	715a      	strb	r2, [r3, #5]
  s->base.related_master_state = related_master_state;
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800242a:	609a      	str	r2, [r3, #8]
  s->report_fn = report_fn;
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	619a      	str	r2, [r3, #24]
  s->report_arg = report_arg;
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	61da      	str	r2, [r3, #28]

  pcb = tcp_new_ip_type(LWIPERF_SERVER_IP_TYPE);
 8002438:	202e      	movs	r0, #46	; 0x2e
 800243a:	f015 fb6f 	bl	8017b1c <tcp_new_ip_type>
 800243e:	61b8      	str	r0, [r7, #24]
  if (pcb == NULL) {
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d102      	bne.n	800244c <lwiperf_start_tcp_server_impl+0x80>
    return ERR_MEM;
 8002446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800244a:	e03b      	b.n	80024c4 <lwiperf_start_tcp_server_impl+0xf8>
  }
  err = tcp_bind(pcb, local_addr, local_port);
 800244c:	897b      	ldrh	r3, [r7, #10]
 800244e:	461a      	mov	r2, r3
 8002450:	68f9      	ldr	r1, [r7, #12]
 8002452:	69b8      	ldr	r0, [r7, #24]
 8002454:	f014 f9c4 	bl	80167e0 <tcp_bind>
 8002458:	4603      	mov	r3, r0
 800245a:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800245c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d002      	beq.n	800246a <lwiperf_start_tcp_server_impl+0x9e>
    return err;
 8002464:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002468:	e02c      	b.n	80024c4 <lwiperf_start_tcp_server_impl+0xf8>
  }
  s->server_pcb = tcp_listen_with_backlog(pcb, 1);
 800246a:	2101      	movs	r1, #1
 800246c:	69b8      	ldr	r0, [r7, #24]
 800246e:	f014 fa6f 	bl	8016950 <tcp_listen_with_backlog>
 8002472:	4602      	mov	r2, r0
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	60da      	str	r2, [r3, #12]
  if (s->server_pcb == NULL) {
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10b      	bne.n	8002498 <lwiperf_start_tcp_server_impl+0xcc>
    if (pcb != NULL) {
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d002      	beq.n	800248c <lwiperf_start_tcp_server_impl+0xc0>
      tcp_close(pcb);
 8002486:	69b8      	ldr	r0, [r7, #24]
 8002488:	f014 f8b4 	bl	80165f4 <tcp_close>
    }
    LWIPERF_FREE(lwiperf_state_tcp_t, s);
 800248c:	69f8      	ldr	r0, [r7, #28]
 800248e:	f012 f97f 	bl	8014790 <mem_free>
    return ERR_MEM;
 8002492:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002496:	e015      	b.n	80024c4 <lwiperf_start_tcp_server_impl+0xf8>
  }
  pcb = NULL;
 8002498:	2300      	movs	r3, #0
 800249a:	61bb      	str	r3, [r7, #24]

  tcp_arg(s->server_pcb, s);
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	69f9      	ldr	r1, [r7, #28]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f015 fb48 	bl	8017b38 <tcp_arg>
  tcp_accept(s->server_pcb, lwiperf_tcp_accept);
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	490a      	ldr	r1, [pc, #40]	; (80024d8 <lwiperf_start_tcp_server_impl+0x10c>)
 80024ae:	4618      	mov	r0, r3
 80024b0:	f015 fbba 	bl	8017c28 <tcp_accept>

  lwiperf_list_add(&s->base);
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff f9d8 	bl	800186c <lwiperf_list_add>
  *state = s;
 80024bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024be:	69fa      	ldr	r2, [r7, #28]
 80024c0:	601a      	str	r2, [r3, #0]
  return ERR_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3720      	adds	r7, #32
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	08025c30 	.word	0x08025c30
 80024d0:	08025d94 	.word	0x08025d94
 80024d4:	08025c58 	.word	0x08025c58
 80024d8:	080021c1 	.word	0x080021c1

080024dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024dc:	b590      	push	{r4, r7, lr}
 80024de:	f5ad 5d1f 	sub.w	sp, sp, #10176	; 0x27c0
 80024e2:	b085      	sub	sp, #20
 80024e4:	af04      	add	r7, sp, #16
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80024e6:	f000 fb65 	bl	8002bb4 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80024ea:	4ba1      	ldr	r3, [pc, #644]	; (8002770 <main+0x294>)
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d11b      	bne.n	800252e <main+0x52>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80024f6:	f3bf 8f4f 	dsb	sy
}
 80024fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80024fc:	f3bf 8f6f 	isb	sy
}
 8002500:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002502:	4b9b      	ldr	r3, [pc, #620]	; (8002770 <main+0x294>)
 8002504:	2200      	movs	r2, #0
 8002506:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800250a:	f3bf 8f4f 	dsb	sy
}
 800250e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002510:	f3bf 8f6f 	isb	sy
}
 8002514:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002516:	4b96      	ldr	r3, [pc, #600]	; (8002770 <main+0x294>)
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	4a95      	ldr	r2, [pc, #596]	; (8002770 <main+0x294>)
 800251c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002520:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002522:	f3bf 8f4f 	dsb	sy
}
 8002526:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002528:	f3bf 8f6f 	isb	sy
}
 800252c:	e000      	b.n	8002530 <main+0x54>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800252e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002530:	4b8f      	ldr	r3, [pc, #572]	; (8002770 <main+0x294>)
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d159      	bne.n	80025f0 <main+0x114>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800253c:	4b8c      	ldr	r3, [pc, #560]	; (8002770 <main+0x294>)
 800253e:	2200      	movs	r2, #0
 8002540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002544:	f3bf 8f4f 	dsb	sy
}
 8002548:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800254a:	4b89      	ldr	r3, [pc, #548]	; (8002770 <main+0x294>)
 800254c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002550:	f242 72a8 	movw	r2, #10152	; 0x27a8
 8002554:	443a      	add	r2, r7
 8002556:	6013      	str	r3, [r2, #0]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002558:	f242 73a8 	movw	r3, #10152	; 0x27a8
 800255c:	443b      	add	r3, r7
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	0b5b      	lsrs	r3, r3, #13
 8002562:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002566:	f242 72a4 	movw	r2, #10148	; 0x27a4
 800256a:	443a      	add	r2, r7
 800256c:	6013      	str	r3, [r2, #0]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800256e:	f242 73a8 	movw	r3, #10152	; 0x27a8
 8002572:	443b      	add	r3, r7
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	08db      	lsrs	r3, r3, #3
 8002578:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800257c:	f242 72a0 	movw	r2, #10144	; 0x27a0
 8002580:	443a      	add	r2, r7
 8002582:	6013      	str	r3, [r2, #0]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002584:	f242 73a4 	movw	r3, #10148	; 0x27a4
 8002588:	443b      	add	r3, r7
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	015a      	lsls	r2, r3, #5
 800258e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002592:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8002594:	f242 72a0 	movw	r2, #10144	; 0x27a0
 8002598:	443a      	add	r2, r7
 800259a:	6812      	ldr	r2, [r2, #0]
 800259c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800259e:	4974      	ldr	r1, [pc, #464]	; (8002770 <main+0x294>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80025a6:	f242 73a0 	movw	r3, #10144	; 0x27a0
 80025aa:	443b      	add	r3, r7
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	1e5a      	subs	r2, r3, #1
 80025b0:	f242 71a0 	movw	r1, #10144	; 0x27a0
 80025b4:	4439      	add	r1, r7
 80025b6:	600a      	str	r2, [r1, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1e3      	bne.n	8002584 <main+0xa8>
    } while(sets-- != 0U);
 80025bc:	f242 73a4 	movw	r3, #10148	; 0x27a4
 80025c0:	443b      	add	r3, r7
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	1e5a      	subs	r2, r3, #1
 80025c6:	f242 71a4 	movw	r1, #10148	; 0x27a4
 80025ca:	4439      	add	r1, r7
 80025cc:	600a      	str	r2, [r1, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1cd      	bne.n	800256e <main+0x92>
  __ASM volatile ("dsb 0xF":::"memory");
 80025d2:	f3bf 8f4f 	dsb	sy
}
 80025d6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80025d8:	4b65      	ldr	r3, [pc, #404]	; (8002770 <main+0x294>)
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	4a64      	ldr	r2, [pc, #400]	; (8002770 <main+0x294>)
 80025de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80025e4:	f3bf 8f4f 	dsb	sy
}
 80025e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80025ea:	f3bf 8f6f 	isb	sy
}
 80025ee:	e000      	b.n	80025f2 <main+0x116>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80025f0:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 80025f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025f6:	f242 72bc 	movw	r2, #10172	; 0x27bc
 80025fa:	443a      	add	r2, r7
 80025fc:	6013      	str	r3, [r2, #0]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80025fe:	bf00      	nop
 8002600:	4b5c      	ldr	r3, [pc, #368]	; (8002774 <main+0x298>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00a      	beq.n	8002622 <main+0x146>
 800260c:	f242 73bc 	movw	r3, #10172	; 0x27bc
 8002610:	443b      	add	r3, r7
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	1e5a      	subs	r2, r3, #1
 8002616:	f242 71bc 	movw	r1, #10172	; 0x27bc
 800261a:	4439      	add	r1, r7
 800261c:	600a      	str	r2, [r1, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	dcee      	bgt.n	8002600 <main+0x124>
	if ( timeout < 0 )
 8002622:	f242 73bc 	movw	r3, #10172	; 0x27bc
 8002626:	443b      	add	r3, r7
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	da01      	bge.n	8002632 <main+0x156>
	{
		Error_Handler();
 800262e:	f000 fb01 	bl	8002c34 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002632:	f001 fc5f 	bl	8003ef4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002636:	f000 fa17 	bl	8002a68 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800263a:	f000 fa9f 	bl	8002b7c <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 800263e:	4b4d      	ldr	r3, [pc, #308]	; (8002774 <main+0x298>)
 8002640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002644:	4a4b      	ldr	r2, [pc, #300]	; (8002774 <main+0x298>)
 8002646:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800264a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800264e:	4b49      	ldr	r3, [pc, #292]	; (8002774 <main+0x298>)
 8002650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002654:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8002658:	4b47      	ldr	r3, [pc, #284]	; (8002778 <main+0x29c>)
 800265a:	f507 511f 	add.w	r1, r7, #10176	; 0x27c0
 800265e:	440b      	add	r3, r1
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	4b45      	ldr	r3, [pc, #276]	; (8002778 <main+0x29c>)
 8002664:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 8002668:	4413      	add	r3, r2
 800266a:	681b      	ldr	r3, [r3, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 800266c:	2000      	movs	r0, #0
 800266e:	f007 f995 	bl	800999c <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8002672:	2100      	movs	r1, #0
 8002674:	2000      	movs	r0, #0
 8002676:	f007 f9ab 	bl	80099d0 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 800267a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800267e:	f242 72bc 	movw	r2, #10172	; 0x27bc
 8002682:	443a      	add	r2, r7
 8002684:	6013      	str	r3, [r2, #0]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8002686:	bf00      	nop
 8002688:	4b3a      	ldr	r3, [pc, #232]	; (8002774 <main+0x298>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10a      	bne.n	80026aa <main+0x1ce>
 8002694:	f242 73bc 	movw	r3, #10172	; 0x27bc
 8002698:	443b      	add	r3, r7
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	1e5a      	subs	r2, r3, #1
 800269e:	f242 71bc 	movw	r1, #10172	; 0x27bc
 80026a2:	4439      	add	r1, r7
 80026a4:	600a      	str	r2, [r1, #0]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	dcee      	bgt.n	8002688 <main+0x1ac>
	if ( timeout < 0 )
 80026aa:	f242 73bc 	movw	r3, #10172	; 0x27bc
 80026ae:	443b      	add	r3, r7
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	da01      	bge.n	80026ba <main+0x1de>
	{
		Error_Handler();
 80026b6:	f000 fabd 	bl	8002c34 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026ba:	f7fe ff8b 	bl	80015d4 <MX_GPIO_Init>
  MX_DMA_Init();
 80026be:	f7fe fe55 	bl	800136c <MX_DMA_Init>
  MX_ADC1_Init();
 80026c2:	f7fe fbf1 	bl	8000ea8 <MX_ADC1_Init>
  MX_ADC2_Init();
 80026c6:	f7fe fc65 	bl	8000f94 <MX_ADC2_Init>
  MX_ADC3_Init();
 80026ca:	f7fe fcc9 	bl	8001060 <MX_ADC3_Init>
  MX_FMC_Init();
 80026ce:	f7fe fe6d 	bl	80013ac <MX_FMC_Init>
  MX_SAI1_Init();
 80026d2:	f000 fb03 	bl	8002cdc <MX_SAI1_Init>
  MX_SPI2_Init();
 80026d6:	f000 fbfd 	bl	8002ed4 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80026da:	f001 f98d 	bl	80039f8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80026de:	f000 fdff 	bl	80032e0 <MX_TIM1_Init>
  MX_TIM3_Init();
 80026e2:	f000 fe8d 	bl	8003400 <MX_TIM3_Init>
  MX_TIM4_Init();
 80026e6:	f000 fee5 	bl	80034b4 <MX_TIM4_Init>
  MX_TIM5_Init();
 80026ea:	f000 ff3d 	bl	8003568 <MX_TIM5_Init>
  MX_TIM8_Init();
 80026ee:	f000 ff95 	bl	800361c <MX_TIM8_Init>
  MX_RNG_Init();
 80026f2:	f000 faa5 	bl	8002c40 <MX_RNG_Init>
  MX_CRC_Init();
 80026f6:	f7fe fdf5 	bl	80012e4 <MX_CRC_Init>
  MX_LWIP_Init();
 80026fa:	f00e f93f 	bl	801097c <MX_LWIP_Init>
  MX_PDM2PCM_Init();
 80026fe:	f01a fb03 	bl	801cd08 <MX_PDM2PCM_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(EN_12V_GPIO_Port, EN_12V_Pin, GPIO_PIN_SET);
 8002702:	2201      	movs	r2, #1
 8002704:	2120      	movs	r1, #32
 8002706:	481d      	ldr	r0, [pc, #116]	; (800277c <main+0x2a0>)
 8002708:	f007 f914 	bl	8009934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_5V_GPIO_Port, EN_5V_Pin, GPIO_PIN_SET);
 800270c:	2201      	movs	r2, #1
 800270e:	2104      	movs	r1, #4
 8002710:	481a      	ldr	r0, [pc, #104]	; (800277c <main+0x2a0>)
 8002712:	f007 f90f 	bl	8009934 <HAL_GPIO_WritePin>

	//  int8_t timeText[] = {'1', '2', ':', '3', '5'};
	//  uint32_t framecount = 0;

	ssd1362_init();
 8002716:	f01b fba5 	bl	801de64 <ssd1362_init>

	ssd1362_clearBuffer();
 800271a:	f01b fb43 	bl	801dda4 <ssd1362_clearBuffer>
	ssd1362_drawHLine(0, 5, 256,0xF, 0);
 800271e:	2300      	movs	r3, #0
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	230f      	movs	r3, #15
 8002724:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002728:	2105      	movs	r1, #5
 800272a:	2000      	movs	r0, #0
 800272c:	f01b f97e 	bl	801da2c <ssd1362_drawHLine>
	ssd1362_drawHLine(0, 40, 256,0xF, 0);
 8002730:	2300      	movs	r3, #0
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	230f      	movs	r3, #15
 8002736:	f44f 7280 	mov.w	r2, #256	; 0x100
 800273a:	2128      	movs	r1, #40	; 0x28
 800273c:	2000      	movs	r0, #0
 800273e:	f01b f975 	bl	801da2c <ssd1362_drawHLine>
	ssd1362_drawString(16, 15, (int8_t *)"Hello Spectral Sound Scanner", 0xF, 16);
 8002742:	2310      	movs	r3, #16
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	230f      	movs	r3, #15
 8002748:	4a0d      	ldr	r2, [pc, #52]	; (8002780 <main+0x2a4>)
 800274a:	210f      	movs	r1, #15
 800274c:	2010      	movs	r0, #16
 800274e:	f01b fa88 	bl	801dc62 <ssd1362_drawString>
	ssd1362_writeFullBuffer();
 8002752:	f01b fb55 	bl	801de00 <ssd1362_writeFullBuffer>

	cisynth_ifft();  //while(1)
 8002756:	f7fe f98b 	bl	8000a70 <cisynth_ifft>



	uint32_t aRandom32bit = 0;
 800275a:	2300      	movs	r3, #0
 800275c:	f242 7290 	movw	r2, #10128	; 0x2790
 8002760:	443a      	add	r2, r7
 8002762:	6013      	str	r3, [r2, #0]
	uint8_t buff[10000];

	for (uint32_t i = 0; i < 10000; i++)
 8002764:	2300      	movs	r3, #0
 8002766:	f242 72b8 	movw	r2, #10168	; 0x27b8
 800276a:	443a      	add	r2, r7
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	e02c      	b.n	80027ca <main+0x2ee>
 8002770:	e000ed00 	.word	0xe000ed00
 8002774:	58024400 	.word	0x58024400
 8002778:	ffffd8a8 	.word	0xffffd8a8
 800277c:	58021800 	.word	0x58021800
 8002780:	08025da4 	.word	0x08025da4
	{
		if (HAL_RNG_GenerateRandomNumber(&hrng, &aRandom32bit) != HAL_OK)
 8002784:	f242 7390 	movw	r3, #10128	; 0x2790
 8002788:	443b      	add	r3, r7
 800278a:	4619      	mov	r1, r3
 800278c:	48a5      	ldr	r0, [pc, #660]	; (8002a24 <main+0x548>)
 800278e:	f00a fb2e 	bl	800cdee <HAL_RNG_GenerateRandomNumber>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <main+0x2c0>
		{
			/* Random number generation error */
			Error_Handler();
 8002798:	f000 fa4c 	bl	8002c34 <Error_Handler>
		}
		buff[i] = aRandom32bit;
 800279c:	f242 7390 	movw	r3, #10128	; 0x2790
 80027a0:	443b      	add	r3, r7
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	b2d9      	uxtb	r1, r3
 80027a6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80027aa:	f242 73b8 	movw	r3, #10168	; 0x27b8
 80027ae:	443b      	add	r3, r7
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4413      	add	r3, r2
 80027b4:	460a      	mov	r2, r1
 80027b6:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < 10000; i++)
 80027b8:	f242 73b8 	movw	r3, #10168	; 0x27b8
 80027bc:	443b      	add	r3, r7
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	3301      	adds	r3, #1
 80027c2:	f242 72b8 	movw	r2, #10168	; 0x27b8
 80027c6:	443a      	add	r2, r7
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	f242 73b8 	movw	r3, #10168	; 0x27b8
 80027ce:	443b      	add	r3, r7
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f242 720f 	movw	r2, #9999	; 0x270f
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d9d4      	bls.n	8002784 <main+0x2a8>
	}

	Audio_Player_Play(buff, 10000);
 80027da:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80027de:	f242 7110 	movw	r1, #10000	; 0x2710
 80027e2:	4618      	mov	r0, r3
 80027e4:	f01a ff5e 	bl	801d6a4 <Audio_Player_Play>

	//  HAL_GPIO_WritePin(MEMS_FSYNC_GPIO_Port, MEMS_FSYNC_Pin, GPIO_PIN_RESET);
	icm20602_init();
 80027e8:	f01a fcbc 	bl	801d164 <icm20602_init>
	int16_t accel_x, accel_y, accel_z, gyro_x, gyro_y, gyro_z, tmp;


	const char* message = "Hello UDP message!\n\r";
 80027ec:	4b8e      	ldr	r3, [pc, #568]	; (8002a28 <main+0x54c>)
 80027ee:	f242 72b4 	movw	r2, #10164	; 0x27b4
 80027f2:	443a      	add	r2, r7
 80027f4:	6013      	str	r3, [r2, #0]

	ip_addr_t PC_IPADDR;
	IP_ADDR4(&PC_IPADDR, 192, 168, 1, 1);
 80027f6:	4b8d      	ldr	r3, [pc, #564]	; (8002a2c <main+0x550>)
 80027f8:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 80027fc:	4413      	add	r3, r2
 80027fe:	4a8c      	ldr	r2, [pc, #560]	; (8002a30 <main+0x554>)
 8002800:	601a      	str	r2, [r3, #0]

	struct udp_pcb* my_udp = udp_new();
 8002802:	f01a fa39 	bl	801cc78 <udp_new>
 8002806:	f242 73b0 	movw	r3, #10160	; 0x27b0
 800280a:	443b      	add	r3, r7
 800280c:	6018      	str	r0, [r3, #0]
	udp_connect(my_udp, &PC_IPADDR, 55151);
 800280e:	4b87      	ldr	r3, [pc, #540]	; (8002a2c <main+0x550>)
 8002810:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 8002814:	4413      	add	r3, r2
 8002816:	f24d 726f 	movw	r2, #55151	; 0xd76f
 800281a:	4619      	mov	r1, r3
 800281c:	f242 73b0 	movw	r3, #10160	; 0x27b0
 8002820:	443b      	add	r3, r7
 8002822:	6818      	ldr	r0, [r3, #0]
 8002824:	f01a f9ba 	bl	801cb9c <udp_connect>
	struct pbuf* udp_buffer = NULL;
 8002828:	2300      	movs	r3, #0
 800282a:	f242 72ac 	movw	r2, #10156	; 0x27ac
 800282e:	443a      	add	r2, r7
 8002830:	6013      	str	r3, [r2, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002832:	4b80      	ldr	r3, [pc, #512]	; (8002a34 <main+0x558>)
 8002834:	2200      	movs	r2, #0
 8002836:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800283a:	f3bf 8f4f 	dsb	sy
}
 800283e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002840:	4b7c      	ldr	r3, [pc, #496]	; (8002a34 <main+0x558>)
 8002842:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002846:	f242 729c 	movw	r2, #10140	; 0x279c
 800284a:	443a      	add	r2, r7
 800284c:	6013      	str	r3, [r2, #0]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800284e:	f242 739c 	movw	r3, #10140	; 0x279c
 8002852:	443b      	add	r3, r7
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	0b5b      	lsrs	r3, r3, #13
 8002858:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800285c:	f242 7298 	movw	r2, #10136	; 0x2798
 8002860:	443a      	add	r2, r7
 8002862:	6013      	str	r3, [r2, #0]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002864:	f242 739c 	movw	r3, #10140	; 0x279c
 8002868:	443b      	add	r3, r7
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	08db      	lsrs	r3, r3, #3
 800286e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002872:	f242 7294 	movw	r2, #10132	; 0x2794
 8002876:	443a      	add	r2, r7
 8002878:	6013      	str	r3, [r2, #0]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800287a:	f242 7398 	movw	r3, #10136	; 0x2798
 800287e:	443b      	add	r3, r7
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	015a      	lsls	r2, r3, #5
 8002884:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002888:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800288a:	f242 7294 	movw	r2, #10132	; 0x2794
 800288e:	443a      	add	r2, r7
 8002890:	6812      	ldr	r2, [r2, #0]
 8002892:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002894:	4967      	ldr	r1, [pc, #412]	; (8002a34 <main+0x558>)
 8002896:	4313      	orrs	r3, r2
 8002898:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800289c:	f242 7394 	movw	r3, #10132	; 0x2794
 80028a0:	443b      	add	r3, r7
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	1e5a      	subs	r2, r3, #1
 80028a6:	f242 7194 	movw	r1, #10132	; 0x2794
 80028aa:	4439      	add	r1, r7
 80028ac:	600a      	str	r2, [r1, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1e3      	bne.n	800287a <main+0x39e>
    } while(sets-- != 0U);
 80028b2:	f242 7398 	movw	r3, #10136	; 0x2798
 80028b6:	443b      	add	r3, r7
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	1e5a      	subs	r2, r3, #1
 80028bc:	f242 7198 	movw	r1, #10136	; 0x2798
 80028c0:	4439      	add	r1, r7
 80028c2:	600a      	str	r2, [r1, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1cd      	bne.n	8002864 <main+0x388>
  __ASM volatile ("dsb 0xF":::"memory");
 80028c8:	f3bf 8f4f 	dsb	sy
}
 80028cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80028ce:	f3bf 8f6f 	isb	sy
}
 80028d2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80028d4:	bf00      	nop

	SCB_CleanInvalidateDCache();


	lwiperf_start_tcp_server_default(NULL, NULL); // TCP Perf = iperf -c 192.168.1.1 -i1 -t60 -u -b 1000M UDP Perf = iperf -c 192.168.1.1 -i1 -t60
 80028d6:	2100      	movs	r1, #0
 80028d8:	2000      	movs	r0, #0
 80028da:	f7ff fd41 	bl	8002360 <lwiperf_start_tcp_server_default>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		MX_LWIP_Process();
 80028de:	f00e f999 	bl	8010c14 <MX_LWIP_Process>
		//	  ssd1362_writeFullBuffer();
		//	  HAL_Delay(1);

		//	  icm20602_read_accel(&accel_x, &accel_y, &accel_z);
		//	  icm20602_read_gyro(&gyro_x, &gyro_y, &gyro_z);
		icm20602_read_data_raw(&accel_x, &accel_y, &accel_z, &gyro_x, &gyro_y, &gyro_z, &tmp);
 80028e2:	4c55      	ldr	r4, [pc, #340]	; (8002a38 <main+0x55c>)
 80028e4:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 80028e8:	441c      	add	r4, r3
 80028ea:	4a54      	ldr	r2, [pc, #336]	; (8002a3c <main+0x560>)
 80028ec:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 80028f0:	441a      	add	r2, r3
 80028f2:	4953      	ldr	r1, [pc, #332]	; (8002a40 <main+0x564>)
 80028f4:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 80028f8:	4419      	add	r1, r3
 80028fa:	4852      	ldr	r0, [pc, #328]	; (8002a44 <main+0x568>)
 80028fc:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 8002900:	4418      	add	r0, r3
 8002902:	4b51      	ldr	r3, [pc, #324]	; (8002a48 <main+0x56c>)
 8002904:	f507 5c1f 	add.w	ip, r7, #10176	; 0x27c0
 8002908:	4463      	add	r3, ip
 800290a:	9302      	str	r3, [sp, #8]
 800290c:	4b4f      	ldr	r3, [pc, #316]	; (8002a4c <main+0x570>)
 800290e:	f507 5c1f 	add.w	ip, r7, #10176	; 0x27c0
 8002912:	4463      	add	r3, ip
 8002914:	9301      	str	r3, [sp, #4]
 8002916:	4b4e      	ldr	r3, [pc, #312]	; (8002a50 <main+0x574>)
 8002918:	f507 5c1f 	add.w	ip, r7, #10176	; 0x27c0
 800291c:	4463      	add	r3, ip
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	4623      	mov	r3, r4
 8002922:	f01a fded 	bl	801d500 <icm20602_read_data_raw>

		ssd1362_clearBuffer();
 8002926:	f01b fa3d 	bl	801dda4 <ssd1362_clearBuffer>
		char text[100] = {0};
 800292a:	4b4a      	ldr	r3, [pc, #296]	; (8002a54 <main+0x578>)
 800292c:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 8002930:	4413      	add	r3, r2
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	3304      	adds	r3, #4
 8002938:	2260      	movs	r2, #96	; 0x60
 800293a:	2100      	movs	r1, #0
 800293c:	4618      	mov	r0, r3
 800293e:	f01d fa1b 	bl	801fd78 <memset>
		//	  sprintf(text,"Accel : %.2f  %.2f  %.2f", accel_x, accel_y, accel_z);
		//	  ssd1362_drawString(0, 10, (int8_t *)text, 0xF, 16);
		//	  sprintf(text,"Gyro  : %.2f  %.2f  %.2f", gyro_x, gyro_y, gyro_z);
		//	  ssd1362_drawString(0, 30, (int8_t *)text, 0xF, 16);
		//	  sprintf(text,"temp. : %.2f", tmp);
		sprintf(text,"Accel : %d  %d  %d", accel_x, accel_y, accel_z);
 8002942:	4b40      	ldr	r3, [pc, #256]	; (8002a44 <main+0x568>)
 8002944:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 8002948:	4413      	add	r3, r2
 800294a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800294e:	461a      	mov	r2, r3
 8002950:	4b3b      	ldr	r3, [pc, #236]	; (8002a40 <main+0x564>)
 8002952:	f507 511f 	add.w	r1, r7, #10176	; 0x27c0
 8002956:	440b      	add	r3, r1
 8002958:	f9b3 3000 	ldrsh.w	r3, [r3]
 800295c:	4619      	mov	r1, r3
 800295e:	4b37      	ldr	r3, [pc, #220]	; (8002a3c <main+0x560>)
 8002960:	f507 501f 	add.w	r0, r7, #10176	; 0x27c0
 8002964:	4403      	add	r3, r0
 8002966:	f9b3 3000 	ldrsh.w	r3, [r3]
 800296a:	483a      	ldr	r0, [pc, #232]	; (8002a54 <main+0x578>)
 800296c:	f507 541f 	add.w	r4, r7, #10176	; 0x27c0
 8002970:	4420      	add	r0, r4
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	460b      	mov	r3, r1
 8002976:	4938      	ldr	r1, [pc, #224]	; (8002a58 <main+0x57c>)
 8002978:	f01e f9dc 	bl	8020d34 <siprintf>
		ssd1362_drawString(0, 10, (int8_t *)text, 0xF, 16);
 800297c:	4a35      	ldr	r2, [pc, #212]	; (8002a54 <main+0x578>)
 800297e:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 8002982:	441a      	add	r2, r3
 8002984:	2310      	movs	r3, #16
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	230f      	movs	r3, #15
 800298a:	210a      	movs	r1, #10
 800298c:	2000      	movs	r0, #0
 800298e:	f01b f968 	bl	801dc62 <ssd1362_drawString>
		sprintf(text,"Gyro  : %d  %d  %d", gyro_x, gyro_y, gyro_z);
 8002992:	4b29      	ldr	r3, [pc, #164]	; (8002a38 <main+0x55c>)
 8002994:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 8002998:	4413      	add	r3, r2
 800299a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800299e:	461a      	mov	r2, r3
 80029a0:	4b2b      	ldr	r3, [pc, #172]	; (8002a50 <main+0x574>)
 80029a2:	f507 511f 	add.w	r1, r7, #10176	; 0x27c0
 80029a6:	440b      	add	r3, r1
 80029a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029ac:	4619      	mov	r1, r3
 80029ae:	4b27      	ldr	r3, [pc, #156]	; (8002a4c <main+0x570>)
 80029b0:	f507 501f 	add.w	r0, r7, #10176	; 0x27c0
 80029b4:	4403      	add	r3, r0
 80029b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029ba:	4826      	ldr	r0, [pc, #152]	; (8002a54 <main+0x578>)
 80029bc:	f507 541f 	add.w	r4, r7, #10176	; 0x27c0
 80029c0:	4420      	add	r0, r4
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	460b      	mov	r3, r1
 80029c6:	4925      	ldr	r1, [pc, #148]	; (8002a5c <main+0x580>)
 80029c8:	f01e f9b4 	bl	8020d34 <siprintf>
		ssd1362_drawString(0, 30, (int8_t *)text, 0xF, 16);
 80029cc:	4a21      	ldr	r2, [pc, #132]	; (8002a54 <main+0x578>)
 80029ce:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 80029d2:	441a      	add	r2, r3
 80029d4:	2310      	movs	r3, #16
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	230f      	movs	r3, #15
 80029da:	211e      	movs	r1, #30
 80029dc:	2000      	movs	r0, #0
 80029de:	f01b f940 	bl	801dc62 <ssd1362_drawString>
		sprintf(text,"temp. : %d", tmp);
 80029e2:	4b19      	ldr	r3, [pc, #100]	; (8002a48 <main+0x56c>)
 80029e4:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 80029e8:	4413      	add	r3, r2
 80029ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029ee:	461a      	mov	r2, r3
 80029f0:	4b18      	ldr	r3, [pc, #96]	; (8002a54 <main+0x578>)
 80029f2:	f507 511f 	add.w	r1, r7, #10176	; 0x27c0
 80029f6:	440b      	add	r3, r1
 80029f8:	4919      	ldr	r1, [pc, #100]	; (8002a60 <main+0x584>)
 80029fa:	4618      	mov	r0, r3
 80029fc:	f01e f99a 	bl	8020d34 <siprintf>
		ssd1362_drawString(0, 50, (int8_t *)text, 0xF, 16);
 8002a00:	4a14      	ldr	r2, [pc, #80]	; (8002a54 <main+0x578>)
 8002a02:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 8002a06:	441a      	add	r2, r3
 8002a08:	2310      	movs	r3, #16
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	230f      	movs	r3, #15
 8002a0e:	2132      	movs	r1, #50	; 0x32
 8002a10:	2000      	movs	r0, #0
 8002a12:	f01b f926 	bl	801dc62 <ssd1362_drawString>
		ssd1362_writeFullBuffer();
 8002a16:	f01b f9f3 	bl	801de00 <ssd1362_writeFullBuffer>

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002a1a:	2140      	movs	r1, #64	; 0x40
 8002a1c:	4811      	ldr	r0, [pc, #68]	; (8002a64 <main+0x588>)
 8002a1e:	f006 ffa2 	bl	8009966 <HAL_GPIO_TogglePin>
	{
 8002a22:	e75c      	b.n	80028de <main+0x402>
 8002a24:	24005990 	.word	0x24005990
 8002a28:	08025dc4 	.word	0x08025dc4
 8002a2c:	ffffd8ac 	.word	0xffffd8ac
 8002a30:	0101a8c0 	.word	0x0101a8c0
 8002a34:	e000ed00 	.word	0xe000ed00
 8002a38:	ffffd8b8 	.word	0xffffd8b8
 8002a3c:	ffffd8ba 	.word	0xffffd8ba
 8002a40:	ffffd8bc 	.word	0xffffd8bc
 8002a44:	ffffd8be 	.word	0xffffd8be
 8002a48:	ffffd8b2 	.word	0xffffd8b2
 8002a4c:	ffffd8b4 	.word	0xffffd8b4
 8002a50:	ffffd8b6 	.word	0xffffd8b6
 8002a54:	ffffd844 	.word	0xffffd844
 8002a58:	08025ddc 	.word	0x08025ddc
 8002a5c:	08025df0 	.word	0x08025df0
 8002a60:	08025e04 	.word	0x08025e04
 8002a64:	58021c00 	.word	0x58021c00

08002a68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b09c      	sub	sp, #112	; 0x70
 8002a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a72:	224c      	movs	r2, #76	; 0x4c
 8002a74:	2100      	movs	r1, #0
 8002a76:	4618      	mov	r0, r3
 8002a78:	f01d f97e 	bl	801fd78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a7c:	1d3b      	adds	r3, r7, #4
 8002a7e:	2220      	movs	r2, #32
 8002a80:	2100      	movs	r1, #0
 8002a82:	4618      	mov	r0, r3
 8002a84:	f01d f978 	bl	801fd78 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8002a88:	2004      	movs	r0, #4
 8002a8a:	f006 ffd9 	bl	8009a40 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002a8e:	2300      	movs	r3, #0
 8002a90:	603b      	str	r3, [r7, #0]
 8002a92:	4b37      	ldr	r3, [pc, #220]	; (8002b70 <SystemClock_Config+0x108>)
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	4a36      	ldr	r2, [pc, #216]	; (8002b70 <SystemClock_Config+0x108>)
 8002a98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a9c:	6193      	str	r3, [r2, #24]
 8002a9e:	4b34      	ldr	r3, [pc, #208]	; (8002b70 <SystemClock_Config+0x108>)
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002aa6:	603b      	str	r3, [r7, #0]
 8002aa8:	4b32      	ldr	r3, [pc, #200]	; (8002b74 <SystemClock_Config+0x10c>)
 8002aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aac:	4a31      	ldr	r2, [pc, #196]	; (8002b74 <SystemClock_Config+0x10c>)
 8002aae:	f043 0301 	orr.w	r3, r3, #1
 8002ab2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002ab4:	4b2f      	ldr	r3, [pc, #188]	; (8002b74 <SystemClock_Config+0x10c>)
 8002ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	603b      	str	r3, [r7, #0]
 8002abe:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002ac0:	bf00      	nop
 8002ac2:	4b2b      	ldr	r3, [pc, #172]	; (8002b70 <SystemClock_Config+0x108>)
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ace:	d1f8      	bne.n	8002ac2 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002ad0:	4b29      	ldr	r3, [pc, #164]	; (8002b78 <SystemClock_Config+0x110>)
 8002ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad4:	f023 0303 	bic.w	r3, r3, #3
 8002ad8:	4a27      	ldr	r2, [pc, #156]	; (8002b78 <SystemClock_Config+0x110>)
 8002ada:	f043 0302 	orr.w	r3, r3, #2
 8002ade:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8002ae0:	2323      	movs	r3, #35	; 0x23
 8002ae2:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ae4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002aea:	2301      	movs	r3, #1
 8002aec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002aee:	2340      	movs	r3, #64	; 0x40
 8002af0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002af2:	2301      	movs	r3, #1
 8002af4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002af6:	2302      	movs	r3, #2
 8002af8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002afa:	2302      	movs	r3, #2
 8002afc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8002afe:	2305      	movs	r3, #5
 8002b00:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002b02:	23c0      	movs	r3, #192	; 0xc0
 8002b04:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002b06:	2302      	movs	r3, #2
 8002b08:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002b0a:	2308      	movs	r3, #8
 8002b0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 8;
 8002b0e:	2308      	movs	r3, #8
 8002b10:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8002b12:	2308      	movs	r3, #8
 8002b14:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002b16:	2300      	movs	r3, #0
 8002b18:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b22:	4618      	mov	r0, r3
 8002b24:	f006 ffe6 	bl	8009af4 <HAL_RCC_OscConfig>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002b2e:	f000 f881 	bl	8002c34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b32:	233f      	movs	r3, #63	; 0x3f
 8002b34:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b36:	2303      	movs	r3, #3
 8002b38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002b3e:	2308      	movs	r3, #8
 8002b40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002b42:	2340      	movs	r3, #64	; 0x40
 8002b44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002b46:	2340      	movs	r3, #64	; 0x40
 8002b48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b4e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002b50:	2340      	movs	r3, #64	; 0x40
 8002b52:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002b54:	1d3b      	adds	r3, r7, #4
 8002b56:	2104      	movs	r1, #4
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f007 fbdb 	bl	800a314 <HAL_RCC_ClockConfig>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <SystemClock_Config+0x100>
  {
    Error_Handler();
 8002b64:	f000 f866 	bl	8002c34 <Error_Handler>
  }
}
 8002b68:	bf00      	nop
 8002b6a:	3770      	adds	r7, #112	; 0x70
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	58024800 	.word	0x58024800
 8002b74:	58000400 	.word	0x58000400
 8002b78:	58024400 	.word	0x58024400

08002b7c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b0b0      	sub	sp, #192	; 0xc0
 8002b80:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b82:	1d3b      	adds	r3, r7, #4
 8002b84:	22bc      	movs	r2, #188	; 0xbc
 8002b86:	2100      	movs	r1, #0
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f01d f8f5 	bl	801fd78 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8002b8e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002b92:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8002b94:	2300      	movs	r3, #0
 8002b96:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b98:	1d3b      	adds	r3, r7, #4
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f007 ff46 	bl	800aa2c <HAL_RCCEx_PeriphCLKConfig>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <PeriphCommonClock_Config+0x2e>
  {
    Error_Handler();
 8002ba6:	f000 f845 	bl	8002c34 <Error_Handler>
  }
}
 8002baa:	bf00      	nop
 8002bac:	37c0      	adds	r7, #192	; 0xc0
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
	...

08002bb4 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002bba:	463b      	mov	r3, r7
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	605a      	str	r2, [r3, #4]
 8002bc2:	609a      	str	r2, [r3, #8]
 8002bc4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002bc6:	f002 fc2f 	bl	8005428 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8002bd2:	4b16      	ldr	r3, [pc, #88]	; (8002c2c <MPU_Config+0x78>)
 8002bd4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8002bd6:	2307      	movs	r3, #7
 8002bd8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002bde:	2300      	movs	r3, #0
 8002be0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002be2:	2303      	movs	r3, #3
 8002be4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8002be6:	2300      	movs	r3, #0
 8002be8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8002bea:	2300      	movs	r3, #0
 8002bec:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002bf6:	463b      	mov	r3, r7
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f002 fc4d 	bl	8005498 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30044000;
 8002c02:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <MPU_Config+0x7c>)
 8002c04:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8002c06:	230d      	movs	r3, #13
 8002c08:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002c12:	2300      	movs	r3, #0
 8002c14:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002c16:	463b      	mov	r3, r7
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f002 fc3d 	bl	8005498 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002c1e:	2004      	movs	r0, #4
 8002c20:	f002 fc1a 	bl	8005458 <HAL_MPU_Enable>

}
 8002c24:	bf00      	nop
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	30040000 	.word	0x30040000
 8002c30:	30044000 	.word	0x30044000

08002c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002c38:	b672      	cpsid	i
}
 8002c3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002c3c:	e7fe      	b.n	8002c3c <Error_Handler+0x8>
	...

08002c40 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002c44:	4b07      	ldr	r3, [pc, #28]	; (8002c64 <MX_RNG_Init+0x24>)
 8002c46:	4a08      	ldr	r2, [pc, #32]	; (8002c68 <MX_RNG_Init+0x28>)
 8002c48:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8002c4a:	4b06      	ldr	r3, [pc, #24]	; (8002c64 <MX_RNG_Init+0x24>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002c50:	4804      	ldr	r0, [pc, #16]	; (8002c64 <MX_RNG_Init+0x24>)
 8002c52:	f00a f871 	bl	800cd38 <HAL_RNG_Init>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8002c5c:	f7ff ffea 	bl	8002c34 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002c60:	bf00      	nop
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	24005990 	.word	0x24005990
 8002c68:	48021800 	.word	0x48021800

08002c6c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b0b2      	sub	sp, #200	; 0xc8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c74:	f107 030c 	add.w	r3, r7, #12
 8002c78:	22bc      	movs	r2, #188	; 0xbc
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f01d f87b 	bl	801fd78 <memset>
  if(rngHandle->Instance==RNG)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a13      	ldr	r2, [pc, #76]	; (8002cd4 <HAL_RNG_MspInit+0x68>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d11e      	bne.n	8002cca <HAL_RNG_MspInit+0x5e>
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002c8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c90:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8002c92:	2300      	movs	r3, #0
 8002c94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c98:	f107 030c 	add.w	r3, r7, #12
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f007 fec5 	bl	800aa2c <HAL_RCCEx_PeriphCLKConfig>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8002ca8:	f7ff ffc4 	bl	8002c34 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002cac:	4b0a      	ldr	r3, [pc, #40]	; (8002cd8 <HAL_RNG_MspInit+0x6c>)
 8002cae:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002cb2:	4a09      	ldr	r2, [pc, #36]	; (8002cd8 <HAL_RNG_MspInit+0x6c>)
 8002cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cb8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002cbc:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <HAL_RNG_MspInit+0x6c>)
 8002cbe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc6:	60bb      	str	r3, [r7, #8]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8002cca:	bf00      	nop
 8002ccc:	37c8      	adds	r7, #200	; 0xc8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	48021800 	.word	0x48021800
 8002cd8:	58024400 	.word	0x58024400

08002cdc <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
DMA_HandleTypeDef hdma_sai1_a;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8002ce0:	4b17      	ldr	r3, [pc, #92]	; (8002d40 <MX_SAI1_Init+0x64>)
 8002ce2:	4a18      	ldr	r2, [pc, #96]	; (8002d44 <MX_SAI1_Init+0x68>)
 8002ce4:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002ce6:	4b16      	ldr	r3, [pc, #88]	; (8002d40 <MX_SAI1_Init+0x64>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002cec:	4b14      	ldr	r3, [pc, #80]	; (8002d40 <MX_SAI1_Init+0x64>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002cf2:	4b13      	ldr	r3, [pc, #76]	; (8002d40 <MX_SAI1_Init+0x64>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002cf8:	4b11      	ldr	r3, [pc, #68]	; (8002d40 <MX_SAI1_Init+0x64>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_FULL;
 8002cfe:	4b10      	ldr	r3, [pc, #64]	; (8002d40 <MX_SAI1_Init+0x64>)
 8002d00:	2204      	movs	r2, #4
 8002d02:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8002d04:	4b0e      	ldr	r3, [pc, #56]	; (8002d40 <MX_SAI1_Init+0x64>)
 8002d06:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8002d0a:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002d0c:	4b0c      	ldr	r3, [pc, #48]	; (8002d40 <MX_SAI1_Init+0x64>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002d12:	4b0b      	ldr	r3, [pc, #44]	; (8002d40 <MX_SAI1_Init+0x64>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002d18:	4b09      	ldr	r3, [pc, #36]	; (8002d40 <MX_SAI1_Init+0x64>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002d1e:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <MX_SAI1_Init+0x64>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8002d24:	2302      	movs	r3, #2
 8002d26:	2200      	movs	r2, #0
 8002d28:	2100      	movs	r1, #0
 8002d2a:	4805      	ldr	r0, [pc, #20]	; (8002d40 <MX_SAI1_Init+0x64>)
 8002d2c:	f00a f8ae 	bl	800ce8c <HAL_SAI_InitProtocol>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 8002d36:	f7ff ff7d 	bl	8002c34 <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8002d3a:	bf00      	nop
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	24005a1c 	.word	0x24005a1c
 8002d44:	40015804 	.word	0x40015804

08002d48 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b0b8      	sub	sp, #224	; 0xe0
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d50:	f107 0310 	add.w	r3, r7, #16
 8002d54:	22bc      	movs	r2, #188	; 0xbc
 8002d56:	2100      	movs	r1, #0
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f01d f80d 	bl	801fd78 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a55      	ldr	r2, [pc, #340]	; (8002eb8 <HAL_SAI_MspInit+0x170>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	f040 80a3 	bne.w	8002eb0 <HAL_SAI_MspInit+0x168>
    {
    /* SAI1 clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8002d6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d6e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 6;
 8002d70:	2306      	movs	r3, #6
 8002d72:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 193;
 8002d74:	23c1      	movs	r3, #193	; 0xc1
 8002d76:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 11;
 8002d78:	230b      	movs	r3, #11
 8002d7a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 11;
 8002d7c:	230b      	movs	r3, #11
 8002d7e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 11;
 8002d80:	230b      	movs	r3, #11
 8002d82:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8002d84:	2380      	movs	r3, #128	; 0x80
 8002d86:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8002d90:	2301      	movs	r3, #1
 8002d92:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d94:	f107 0310 	add.w	r3, r7, #16
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f007 fe47 	bl	800aa2c <HAL_RCCEx_PeriphCLKConfig>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <HAL_SAI_MspInit+0x60>
    {
      Error_Handler();
 8002da4:	f7ff ff46 	bl	8002c34 <Error_Handler>
    }

    if (SAI1_client == 0)
 8002da8:	4b44      	ldr	r3, [pc, #272]	; (8002ebc <HAL_SAI_MspInit+0x174>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d10e      	bne.n	8002dce <HAL_SAI_MspInit+0x86>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002db0:	4b43      	ldr	r3, [pc, #268]	; (8002ec0 <HAL_SAI_MspInit+0x178>)
 8002db2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002db6:	4a42      	ldr	r2, [pc, #264]	; (8002ec0 <HAL_SAI_MspInit+0x178>)
 8002db8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002dbc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002dc0:	4b3f      	ldr	r3, [pc, #252]	; (8002ec0 <HAL_SAI_MspInit+0x178>)
 8002dc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8002dce:	4b3b      	ldr	r3, [pc, #236]	; (8002ebc <HAL_SAI_MspInit+0x174>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	4a39      	ldr	r2, [pc, #228]	; (8002ebc <HAL_SAI_MspInit+0x174>)
 8002dd6:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE5     ------> SAI1_SCK_A
    PD6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_5;
 8002dd8:	2334      	movs	r3, #52	; 0x34
 8002dda:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dde:	2302      	movs	r3, #2
 8002de0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de4:	2300      	movs	r3, #0
 8002de6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dea:	2303      	movs	r3, #3
 8002dec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002df0:	2306      	movs	r3, #6
 8002df2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002df6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4831      	ldr	r0, [pc, #196]	; (8002ec4 <HAL_SAI_MspInit+0x17c>)
 8002dfe:	f006 fbe9 	bl	80095d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002e02:	2340      	movs	r3, #64	; 0x40
 8002e04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e08:	2302      	movs	r3, #2
 8002e0a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e14:	2303      	movs	r3, #3
 8002e16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002e1a:	2306      	movs	r3, #6
 8002e1c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e20:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002e24:	4619      	mov	r1, r3
 8002e26:	4828      	ldr	r0, [pc, #160]	; (8002ec8 <HAL_SAI_MspInit+0x180>)
 8002e28:	f006 fbd4 	bl	80095d4 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 8002e2c:	4b27      	ldr	r3, [pc, #156]	; (8002ecc <HAL_SAI_MspInit+0x184>)
 8002e2e:	4a28      	ldr	r2, [pc, #160]	; (8002ed0 <HAL_SAI_MspInit+0x188>)
 8002e30:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8002e32:	4b26      	ldr	r3, [pc, #152]	; (8002ecc <HAL_SAI_MspInit+0x184>)
 8002e34:	2257      	movs	r2, #87	; 0x57
 8002e36:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e38:	4b24      	ldr	r3, [pc, #144]	; (8002ecc <HAL_SAI_MspInit+0x184>)
 8002e3a:	2240      	movs	r2, #64	; 0x40
 8002e3c:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e3e:	4b23      	ldr	r3, [pc, #140]	; (8002ecc <HAL_SAI_MspInit+0x184>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8002e44:	4b21      	ldr	r3, [pc, #132]	; (8002ecc <HAL_SAI_MspInit+0x184>)
 8002e46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e4a:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e4c:	4b1f      	ldr	r3, [pc, #124]	; (8002ecc <HAL_SAI_MspInit+0x184>)
 8002e4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e52:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e54:	4b1d      	ldr	r3, [pc, #116]	; (8002ecc <HAL_SAI_MspInit+0x184>)
 8002e56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e5a:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8002e5c:	4b1b      	ldr	r3, [pc, #108]	; (8002ecc <HAL_SAI_MspInit+0x184>)
 8002e5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e62:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
 8002e64:	4b19      	ldr	r3, [pc, #100]	; (8002ecc <HAL_SAI_MspInit+0x184>)
 8002e66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e6a:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002e6c:	4b17      	ldr	r3, [pc, #92]	; (8002ecc <HAL_SAI_MspInit+0x184>)
 8002e6e:	2204      	movs	r2, #4
 8002e70:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002e72:	4b16      	ldr	r3, [pc, #88]	; (8002ecc <HAL_SAI_MspInit+0x184>)
 8002e74:	2203      	movs	r2, #3
 8002e76:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 8002e78:	4b14      	ldr	r3, [pc, #80]	; (8002ecc <HAL_SAI_MspInit+0x184>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002e7e:	4b13      	ldr	r3, [pc, #76]	; (8002ecc <HAL_SAI_MspInit+0x184>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8002e84:	4811      	ldr	r0, [pc, #68]	; (8002ecc <HAL_SAI_MspInit+0x184>)
 8002e86:	f002 fc49 	bl	800571c <HAL_DMA_Init>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <HAL_SAI_MspInit+0x14c>
    {
      Error_Handler();
 8002e90:	f7ff fed0 	bl	8002c34 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a0d      	ldr	r2, [pc, #52]	; (8002ecc <HAL_SAI_MspInit+0x184>)
 8002e98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002e9c:	4a0b      	ldr	r2, [pc, #44]	; (8002ecc <HAL_SAI_MspInit+0x184>)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a09      	ldr	r2, [pc, #36]	; (8002ecc <HAL_SAI_MspInit+0x184>)
 8002ea6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002eaa:	4a08      	ldr	r2, [pc, #32]	; (8002ecc <HAL_SAI_MspInit+0x184>)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8002eb0:	bf00      	nop
 8002eb2:	37e0      	adds	r7, #224	; 0xe0
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40015804 	.word	0x40015804
 8002ebc:	24003a4c 	.word	0x24003a4c
 8002ec0:	58024400 	.word	0x58024400
 8002ec4:	58021000 	.word	0x58021000
 8002ec8:	58020c00 	.word	0x58020c00
 8002ecc:	240059a4 	.word	0x240059a4
 8002ed0:	40020010 	.word	0x40020010

08002ed4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002ed8:	4b27      	ldr	r3, [pc, #156]	; (8002f78 <MX_SPI2_Init+0xa4>)
 8002eda:	4a28      	ldr	r2, [pc, #160]	; (8002f7c <MX_SPI2_Init+0xa8>)
 8002edc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002ede:	4b26      	ldr	r3, [pc, #152]	; (8002f78 <MX_SPI2_Init+0xa4>)
 8002ee0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002ee4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002ee6:	4b24      	ldr	r3, [pc, #144]	; (8002f78 <MX_SPI2_Init+0xa4>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002eec:	4b22      	ldr	r3, [pc, #136]	; (8002f78 <MX_SPI2_Init+0xa4>)
 8002eee:	2207      	movs	r2, #7
 8002ef0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ef2:	4b21      	ldr	r3, [pc, #132]	; (8002f78 <MX_SPI2_Init+0xa4>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ef8:	4b1f      	ldr	r3, [pc, #124]	; (8002f78 <MX_SPI2_Init+0xa4>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002efe:	4b1e      	ldr	r3, [pc, #120]	; (8002f78 <MX_SPI2_Init+0xa4>)
 8002f00:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002f04:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002f06:	4b1c      	ldr	r3, [pc, #112]	; (8002f78 <MX_SPI2_Init+0xa4>)
 8002f08:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8002f0c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f0e:	4b1a      	ldr	r3, [pc, #104]	; (8002f78 <MX_SPI2_Init+0xa4>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f14:	4b18      	ldr	r3, [pc, #96]	; (8002f78 <MX_SPI2_Init+0xa4>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f1a:	4b17      	ldr	r3, [pc, #92]	; (8002f78 <MX_SPI2_Init+0xa4>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002f20:	4b15      	ldr	r3, [pc, #84]	; (8002f78 <MX_SPI2_Init+0xa4>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002f26:	4b14      	ldr	r3, [pc, #80]	; (8002f78 <MX_SPI2_Init+0xa4>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002f2c:	4b12      	ldr	r3, [pc, #72]	; (8002f78 <MX_SPI2_Init+0xa4>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002f32:	4b11      	ldr	r3, [pc, #68]	; (8002f78 <MX_SPI2_Init+0xa4>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002f38:	4b0f      	ldr	r3, [pc, #60]	; (8002f78 <MX_SPI2_Init+0xa4>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002f3e:	4b0e      	ldr	r3, [pc, #56]	; (8002f78 <MX_SPI2_Init+0xa4>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002f44:	4b0c      	ldr	r3, [pc, #48]	; (8002f78 <MX_SPI2_Init+0xa4>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002f4a:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <MX_SPI2_Init+0xa4>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002f50:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <MX_SPI2_Init+0xa4>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002f56:	4b08      	ldr	r3, [pc, #32]	; (8002f78 <MX_SPI2_Init+0xa4>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002f5c:	4b06      	ldr	r3, [pc, #24]	; (8002f78 <MX_SPI2_Init+0xa4>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002f62:	4805      	ldr	r0, [pc, #20]	; (8002f78 <MX_SPI2_Init+0xa4>)
 8002f64:	f00a fd38 	bl	800d9d8 <HAL_SPI_Init>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8002f6e:	f7ff fe61 	bl	8002c34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002f72:	bf00      	nop
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	24005ab4 	.word	0x24005ab4
 8002f7c:	40003800 	.word	0x40003800

08002f80 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b0ba      	sub	sp, #232	; 0xe8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f88:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	605a      	str	r2, [r3, #4]
 8002f92:	609a      	str	r2, [r3, #8]
 8002f94:	60da      	str	r2, [r3, #12]
 8002f96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f98:	f107 0318 	add.w	r3, r7, #24
 8002f9c:	22bc      	movs	r2, #188	; 0xbc
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f01c fee9 	bl	801fd78 <memset>
  if(spiHandle->Instance==SPI2)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a37      	ldr	r2, [pc, #220]	; (8003088 <HAL_SPI_MspInit+0x108>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d166      	bne.n	800307e <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002fb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fb4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fba:	f107 0318 	add.w	r3, r7, #24
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f007 fd34 	bl	800aa2c <HAL_RCCEx_PeriphCLKConfig>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002fca:	f7ff fe33 	bl	8002c34 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002fce:	4b2f      	ldr	r3, [pc, #188]	; (800308c <HAL_SPI_MspInit+0x10c>)
 8002fd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fd4:	4a2d      	ldr	r2, [pc, #180]	; (800308c <HAL_SPI_MspInit+0x10c>)
 8002fd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fda:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002fde:	4b2b      	ldr	r3, [pc, #172]	; (800308c <HAL_SPI_MspInit+0x10c>)
 8002fe0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fe4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fe8:	617b      	str	r3, [r7, #20]
 8002fea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fec:	4b27      	ldr	r3, [pc, #156]	; (800308c <HAL_SPI_MspInit+0x10c>)
 8002fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ff2:	4a26      	ldr	r2, [pc, #152]	; (800308c <HAL_SPI_MspInit+0x10c>)
 8002ff4:	f043 0308 	orr.w	r3, r3, #8
 8002ff8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ffc:	4b23      	ldr	r3, [pc, #140]	; (800308c <HAL_SPI_MspInit+0x10c>)
 8002ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	613b      	str	r3, [r7, #16]
 8003008:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800300a:	4b20      	ldr	r3, [pc, #128]	; (800308c <HAL_SPI_MspInit+0x10c>)
 800300c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003010:	4a1e      	ldr	r2, [pc, #120]	; (800308c <HAL_SPI_MspInit+0x10c>)
 8003012:	f043 0302 	orr.w	r3, r3, #2
 8003016:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800301a:	4b1c      	ldr	r3, [pc, #112]	; (800308c <HAL_SPI_MspInit+0x10c>)
 800301c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PD3     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003028:	2308      	movs	r3, #8
 800302a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302e:	2302      	movs	r3, #2
 8003030:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003034:	2300      	movs	r3, #0
 8003036:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800303a:	2303      	movs	r3, #3
 800303c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003040:	2305      	movs	r3, #5
 8003042:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003046:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800304a:	4619      	mov	r1, r3
 800304c:	4810      	ldr	r0, [pc, #64]	; (8003090 <HAL_SPI_MspInit+0x110>)
 800304e:	f006 fac1 	bl	80095d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14;
 8003052:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003056:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305a:	2302      	movs	r3, #2
 800305c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003060:	2300      	movs	r3, #0
 8003062:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003066:	2300      	movs	r3, #0
 8003068:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800306c:	2305      	movs	r3, #5
 800306e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003072:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003076:	4619      	mov	r1, r3
 8003078:	4806      	ldr	r0, [pc, #24]	; (8003094 <HAL_SPI_MspInit+0x114>)
 800307a:	f006 faab 	bl	80095d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800307e:	bf00      	nop
 8003080:	37e8      	adds	r7, #232	; 0xe8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40003800 	.word	0x40003800
 800308c:	58024400 	.word	0x58024400
 8003090:	58020c00 	.word	0x58020c00
 8003094:	58020400 	.word	0x58020400

08003098 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800309e:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <HAL_MspInit+0x34>)
 80030a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80030a4:	4a09      	ldr	r2, [pc, #36]	; (80030cc <HAL_MspInit+0x34>)
 80030a6:	f043 0302 	orr.w	r3, r3, #2
 80030aa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80030ae:	4b07      	ldr	r3, [pc, #28]	; (80030cc <HAL_MspInit+0x34>)
 80030b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	607b      	str	r3, [r7, #4]
 80030ba:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80030bc:	2005      	movs	r0, #5
 80030be:	f002 f973 	bl	80053a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030c2:	bf00      	nop
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	58024400 	.word	0x58024400

080030d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030d4:	e7fe      	b.n	80030d4 <NMI_Handler+0x4>

080030d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030d6:	b480      	push	{r7}
 80030d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030da:	e7fe      	b.n	80030da <HardFault_Handler+0x4>

080030dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030e0:	e7fe      	b.n	80030e0 <MemManage_Handler+0x4>

080030e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030e2:	b480      	push	{r7}
 80030e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030e6:	e7fe      	b.n	80030e6 <BusFault_Handler+0x4>

080030e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030ec:	e7fe      	b.n	80030ec <UsageFault_Handler+0x4>

080030ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030ee:	b480      	push	{r7}
 80030f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030f2:	bf00      	nop
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003100:	bf00      	nop
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr

0800310a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800310a:	b480      	push	{r7}
 800310c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800310e:	bf00      	nop
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800311c:	f000 ff5c 	bl	8003fd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003120:	bf00      	nop
 8003122:	bd80      	pop	{r7, pc}

08003124 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8003128:	4802      	ldr	r0, [pc, #8]	; (8003134 <DMA1_Stream0_IRQHandler+0x10>)
 800312a:	f003 f8bd 	bl	80062a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800312e:	bf00      	nop
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	240059a4 	.word	0x240059a4

08003138 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800313c:	4802      	ldr	r0, [pc, #8]	; (8003148 <ETH_IRQHandler+0x10>)
 800313e:	f005 f859 	bl	80081f4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8003142:	bf00      	nop
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	24005e88 	.word	0x24005e88

0800314c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
	return 1;
 8003150:	2301      	movs	r3, #1
}
 8003152:	4618      	mov	r0, r3
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <_kill>:

int _kill(int pid, int sig)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003166:	4b05      	ldr	r3, [pc, #20]	; (800317c <_kill+0x20>)
 8003168:	2216      	movs	r2, #22
 800316a:	601a      	str	r2, [r3, #0]
	return -1;
 800316c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003170:	4618      	mov	r0, r3
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	2400b6a8 	.word	0x2400b6a8

08003180 <_exit>:

void _exit (int status)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003188:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f7ff ffe5 	bl	800315c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003192:	e7fe      	b.n	8003192 <_exit+0x12>

08003194 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	e00a      	b.n	80031bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80031a6:	f3af 8000 	nop.w
 80031aa:	4601      	mov	r1, r0
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	1c5a      	adds	r2, r3, #1
 80031b0:	60ba      	str	r2, [r7, #8]
 80031b2:	b2ca      	uxtb	r2, r1
 80031b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	3301      	adds	r3, #1
 80031ba:	617b      	str	r3, [r7, #20]
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	dbf0      	blt.n	80031a6 <_read+0x12>
	}

return len;
 80031c4:	687b      	ldr	r3, [r7, #4]
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b086      	sub	sp, #24
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	60f8      	str	r0, [r7, #12]
 80031d6:	60b9      	str	r1, [r7, #8]
 80031d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
 80031de:	e009      	b.n	80031f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	1c5a      	adds	r2, r3, #1
 80031e4:	60ba      	str	r2, [r7, #8]
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	3301      	adds	r3, #1
 80031f2:	617b      	str	r3, [r7, #20]
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	dbf1      	blt.n	80031e0 <_write+0x12>
	}
	return len;
 80031fc:	687b      	ldr	r3, [r7, #4]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3718      	adds	r7, #24
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <_close>:

int _close(int file)
{
 8003206:	b480      	push	{r7}
 8003208:	b083      	sub	sp, #12
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
	return -1;
 800320e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003212:	4618      	mov	r0, r3
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
 8003226:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800322e:	605a      	str	r2, [r3, #4]
	return 0;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr

0800323e <_isatty>:

int _isatty(int file)
{
 800323e:	b480      	push	{r7}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
	return 1;
 8003246:	2301      	movs	r3, #1
}
 8003248:	4618      	mov	r0, r3
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
	return 0;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3714      	adds	r7, #20
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
	...

08003270 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003270:	b480      	push	{r7}
 8003272:	b087      	sub	sp, #28
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003278:	4a14      	ldr	r2, [pc, #80]	; (80032cc <_sbrk+0x5c>)
 800327a:	4b15      	ldr	r3, [pc, #84]	; (80032d0 <_sbrk+0x60>)
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003284:	4b13      	ldr	r3, [pc, #76]	; (80032d4 <_sbrk+0x64>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d102      	bne.n	8003292 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800328c:	4b11      	ldr	r3, [pc, #68]	; (80032d4 <_sbrk+0x64>)
 800328e:	4a12      	ldr	r2, [pc, #72]	; (80032d8 <_sbrk+0x68>)
 8003290:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003292:	4b10      	ldr	r3, [pc, #64]	; (80032d4 <_sbrk+0x64>)
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4413      	add	r3, r2
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	429a      	cmp	r2, r3
 800329e:	d205      	bcs.n	80032ac <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80032a0:	4b0e      	ldr	r3, [pc, #56]	; (80032dc <_sbrk+0x6c>)
 80032a2:	220c      	movs	r2, #12
 80032a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032aa:	e009      	b.n	80032c0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80032ac:	4b09      	ldr	r3, [pc, #36]	; (80032d4 <_sbrk+0x64>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032b2:	4b08      	ldr	r3, [pc, #32]	; (80032d4 <_sbrk+0x64>)
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4413      	add	r3, r2
 80032ba:	4a06      	ldr	r2, [pc, #24]	; (80032d4 <_sbrk+0x64>)
 80032bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032be:	68fb      	ldr	r3, [r7, #12]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	371c      	adds	r7, #28
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	24080000 	.word	0x24080000
 80032d0:	00000400 	.word	0x00000400
 80032d4:	24003a50 	.word	0x24003a50
 80032d8:	2400b6b8 	.word	0x2400b6b8
 80032dc:	2400b6a8 	.word	0x2400b6a8

080032e0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b096      	sub	sp, #88	; 0x58
 80032e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80032ea:	2200      	movs	r2, #0
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	605a      	str	r2, [r3, #4]
 80032f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80032f6:	2200      	movs	r2, #0
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	605a      	str	r2, [r3, #4]
 80032fc:	609a      	str	r2, [r3, #8]
 80032fe:	60da      	str	r2, [r3, #12]
 8003300:	611a      	str	r2, [r3, #16]
 8003302:	615a      	str	r2, [r3, #20]
 8003304:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003306:	1d3b      	adds	r3, r7, #4
 8003308:	222c      	movs	r2, #44	; 0x2c
 800330a:	2100      	movs	r1, #0
 800330c:	4618      	mov	r0, r3
 800330e:	f01c fd33 	bl	801fd78 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003312:	4b39      	ldr	r3, [pc, #228]	; (80033f8 <MX_TIM1_Init+0x118>)
 8003314:	4a39      	ldr	r2, [pc, #228]	; (80033fc <MX_TIM1_Init+0x11c>)
 8003316:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003318:	4b37      	ldr	r3, [pc, #220]	; (80033f8 <MX_TIM1_Init+0x118>)
 800331a:	2200      	movs	r2, #0
 800331c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800331e:	4b36      	ldr	r3, [pc, #216]	; (80033f8 <MX_TIM1_Init+0x118>)
 8003320:	2200      	movs	r2, #0
 8003322:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003324:	4b34      	ldr	r3, [pc, #208]	; (80033f8 <MX_TIM1_Init+0x118>)
 8003326:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800332a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800332c:	4b32      	ldr	r3, [pc, #200]	; (80033f8 <MX_TIM1_Init+0x118>)
 800332e:	2200      	movs	r2, #0
 8003330:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003332:	4b31      	ldr	r3, [pc, #196]	; (80033f8 <MX_TIM1_Init+0x118>)
 8003334:	2200      	movs	r2, #0
 8003336:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003338:	4b2f      	ldr	r3, [pc, #188]	; (80033f8 <MX_TIM1_Init+0x118>)
 800333a:	2200      	movs	r2, #0
 800333c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800333e:	482e      	ldr	r0, [pc, #184]	; (80033f8 <MX_TIM1_Init+0x118>)
 8003340:	f00b fca8 	bl	800ec94 <HAL_TIM_OC_Init>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800334a:	f7ff fc73 	bl	8002c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800334e:	2300      	movs	r3, #0
 8003350:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003352:	2300      	movs	r3, #0
 8003354:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003356:	2300      	movs	r3, #0
 8003358:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800335a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800335e:	4619      	mov	r1, r3
 8003360:	4825      	ldr	r0, [pc, #148]	; (80033f8 <MX_TIM1_Init+0x118>)
 8003362:	f00c f8cd 	bl	800f500 <HAL_TIMEx_MasterConfigSynchronization>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800336c:	f7ff fc62 	bl	8002c34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003370:	2300      	movs	r3, #0
 8003372:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8003374:	2300      	movs	r3, #0
 8003376:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003378:	2300      	movs	r3, #0
 800337a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800337c:	2300      	movs	r3, #0
 800337e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003380:	2300      	movs	r3, #0
 8003382:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003384:	2300      	movs	r3, #0
 8003386:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003388:	2300      	movs	r3, #0
 800338a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800338c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003390:	2204      	movs	r2, #4
 8003392:	4619      	mov	r1, r3
 8003394:	4818      	ldr	r0, [pc, #96]	; (80033f8 <MX_TIM1_Init+0x118>)
 8003396:	f00b fcd5 	bl	800ed44 <HAL_TIM_OC_ConfigChannel>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80033a0:	f7ff fc48 	bl	8002c34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80033a4:	2300      	movs	r3, #0
 80033a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80033a8:	2300      	movs	r3, #0
 80033aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80033ac:	2300      	movs	r3, #0
 80033ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80033b0:	2300      	movs	r3, #0
 80033b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80033b4:	2300      	movs	r3, #0
 80033b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80033b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80033be:	2300      	movs	r3, #0
 80033c0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80033c2:	2300      	movs	r3, #0
 80033c4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80033c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033ca:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80033cc:	2300      	movs	r3, #0
 80033ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80033d0:	2300      	movs	r3, #0
 80033d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80033d4:	1d3b      	adds	r3, r7, #4
 80033d6:	4619      	mov	r1, r3
 80033d8:	4807      	ldr	r0, [pc, #28]	; (80033f8 <MX_TIM1_Init+0x118>)
 80033da:	f00c f919 	bl	800f610 <HAL_TIMEx_ConfigBreakDeadTime>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80033e4:	f7ff fc26 	bl	8002c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80033e8:	4803      	ldr	r0, [pc, #12]	; (80033f8 <MX_TIM1_Init+0x118>)
 80033ea:	f000 fa25 	bl	8003838 <HAL_TIM_MspPostInit>

}
 80033ee:	bf00      	nop
 80033f0:	3758      	adds	r7, #88	; 0x58
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	24005c6c 	.word	0x24005c6c
 80033fc:	40010000 	.word	0x40010000

08003400 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b08a      	sub	sp, #40	; 0x28
 8003404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003406:	f107 031c 	add.w	r3, r7, #28
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	605a      	str	r2, [r3, #4]
 8003410:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003412:	463b      	mov	r3, r7
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	605a      	str	r2, [r3, #4]
 800341a:	609a      	str	r2, [r3, #8]
 800341c:	60da      	str	r2, [r3, #12]
 800341e:	611a      	str	r2, [r3, #16]
 8003420:	615a      	str	r2, [r3, #20]
 8003422:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003424:	4b21      	ldr	r3, [pc, #132]	; (80034ac <MX_TIM3_Init+0xac>)
 8003426:	4a22      	ldr	r2, [pc, #136]	; (80034b0 <MX_TIM3_Init+0xb0>)
 8003428:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800342a:	4b20      	ldr	r3, [pc, #128]	; (80034ac <MX_TIM3_Init+0xac>)
 800342c:	2200      	movs	r2, #0
 800342e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003430:	4b1e      	ldr	r3, [pc, #120]	; (80034ac <MX_TIM3_Init+0xac>)
 8003432:	2200      	movs	r2, #0
 8003434:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003436:	4b1d      	ldr	r3, [pc, #116]	; (80034ac <MX_TIM3_Init+0xac>)
 8003438:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800343c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800343e:	4b1b      	ldr	r3, [pc, #108]	; (80034ac <MX_TIM3_Init+0xac>)
 8003440:	2200      	movs	r2, #0
 8003442:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003444:	4b19      	ldr	r3, [pc, #100]	; (80034ac <MX_TIM3_Init+0xac>)
 8003446:	2200      	movs	r2, #0
 8003448:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800344a:	4818      	ldr	r0, [pc, #96]	; (80034ac <MX_TIM3_Init+0xac>)
 800344c:	f00b fc22 	bl	800ec94 <HAL_TIM_OC_Init>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8003456:	f7ff fbed 	bl	8002c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800345a:	2300      	movs	r3, #0
 800345c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800345e:	2300      	movs	r3, #0
 8003460:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003462:	f107 031c 	add.w	r3, r7, #28
 8003466:	4619      	mov	r1, r3
 8003468:	4810      	ldr	r0, [pc, #64]	; (80034ac <MX_TIM3_Init+0xac>)
 800346a:	f00c f849 	bl	800f500 <HAL_TIMEx_MasterConfigSynchronization>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8003474:	f7ff fbde 	bl	8002c34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003478:	2300      	movs	r3, #0
 800347a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800347c:	2300      	movs	r3, #0
 800347e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003480:	2300      	movs	r3, #0
 8003482:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003484:	2300      	movs	r3, #0
 8003486:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003488:	463b      	mov	r3, r7
 800348a:	2200      	movs	r2, #0
 800348c:	4619      	mov	r1, r3
 800348e:	4807      	ldr	r0, [pc, #28]	; (80034ac <MX_TIM3_Init+0xac>)
 8003490:	f00b fc58 	bl	800ed44 <HAL_TIM_OC_ConfigChannel>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800349a:	f7ff fbcb 	bl	8002c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800349e:	4803      	ldr	r0, [pc, #12]	; (80034ac <MX_TIM3_Init+0xac>)
 80034a0:	f000 f9ca 	bl	8003838 <HAL_TIM_MspPostInit>

}
 80034a4:	bf00      	nop
 80034a6:	3728      	adds	r7, #40	; 0x28
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	24005c20 	.word	0x24005c20
 80034b0:	40000400 	.word	0x40000400

080034b4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b08a      	sub	sp, #40	; 0x28
 80034b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034ba:	f107 031c 	add.w	r3, r7, #28
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	605a      	str	r2, [r3, #4]
 80034c4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034c6:	463b      	mov	r3, r7
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]
 80034cc:	605a      	str	r2, [r3, #4]
 80034ce:	609a      	str	r2, [r3, #8]
 80034d0:	60da      	str	r2, [r3, #12]
 80034d2:	611a      	str	r2, [r3, #16]
 80034d4:	615a      	str	r2, [r3, #20]
 80034d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80034d8:	4b21      	ldr	r3, [pc, #132]	; (8003560 <MX_TIM4_Init+0xac>)
 80034da:	4a22      	ldr	r2, [pc, #136]	; (8003564 <MX_TIM4_Init+0xb0>)
 80034dc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80034de:	4b20      	ldr	r3, [pc, #128]	; (8003560 <MX_TIM4_Init+0xac>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034e4:	4b1e      	ldr	r3, [pc, #120]	; (8003560 <MX_TIM4_Init+0xac>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80034ea:	4b1d      	ldr	r3, [pc, #116]	; (8003560 <MX_TIM4_Init+0xac>)
 80034ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034f0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034f2:	4b1b      	ldr	r3, [pc, #108]	; (8003560 <MX_TIM4_Init+0xac>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034f8:	4b19      	ldr	r3, [pc, #100]	; (8003560 <MX_TIM4_Init+0xac>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80034fe:	4818      	ldr	r0, [pc, #96]	; (8003560 <MX_TIM4_Init+0xac>)
 8003500:	f00b fbc8 	bl	800ec94 <HAL_TIM_OC_Init>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800350a:	f7ff fb93 	bl	8002c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800350e:	2300      	movs	r3, #0
 8003510:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003512:	2300      	movs	r3, #0
 8003514:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003516:	f107 031c 	add.w	r3, r7, #28
 800351a:	4619      	mov	r1, r3
 800351c:	4810      	ldr	r0, [pc, #64]	; (8003560 <MX_TIM4_Init+0xac>)
 800351e:	f00b ffef 	bl	800f500 <HAL_TIMEx_MasterConfigSynchronization>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8003528:	f7ff fb84 	bl	8002c34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800352c:	2300      	movs	r3, #0
 800352e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003530:	2300      	movs	r3, #0
 8003532:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003534:	2300      	movs	r3, #0
 8003536:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003538:	2300      	movs	r3, #0
 800353a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800353c:	463b      	mov	r3, r7
 800353e:	2204      	movs	r2, #4
 8003540:	4619      	mov	r1, r3
 8003542:	4807      	ldr	r0, [pc, #28]	; (8003560 <MX_TIM4_Init+0xac>)
 8003544:	f00b fbfe 	bl	800ed44 <HAL_TIM_OC_ConfigChannel>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800354e:	f7ff fb71 	bl	8002c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003552:	4803      	ldr	r0, [pc, #12]	; (8003560 <MX_TIM4_Init+0xac>)
 8003554:	f000 f970 	bl	8003838 <HAL_TIM_MspPostInit>

}
 8003558:	bf00      	nop
 800355a:	3728      	adds	r7, #40	; 0x28
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	24005b88 	.word	0x24005b88
 8003564:	40000800 	.word	0x40000800

08003568 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b08a      	sub	sp, #40	; 0x28
 800356c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800356e:	f107 031c 	add.w	r3, r7, #28
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]
 8003576:	605a      	str	r2, [r3, #4]
 8003578:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800357a:	463b      	mov	r3, r7
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	605a      	str	r2, [r3, #4]
 8003582:	609a      	str	r2, [r3, #8]
 8003584:	60da      	str	r2, [r3, #12]
 8003586:	611a      	str	r2, [r3, #16]
 8003588:	615a      	str	r2, [r3, #20]
 800358a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800358c:	4b21      	ldr	r3, [pc, #132]	; (8003614 <MX_TIM5_Init+0xac>)
 800358e:	4a22      	ldr	r2, [pc, #136]	; (8003618 <MX_TIM5_Init+0xb0>)
 8003590:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003592:	4b20      	ldr	r3, [pc, #128]	; (8003614 <MX_TIM5_Init+0xac>)
 8003594:	2200      	movs	r2, #0
 8003596:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003598:	4b1e      	ldr	r3, [pc, #120]	; (8003614 <MX_TIM5_Init+0xac>)
 800359a:	2200      	movs	r2, #0
 800359c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800359e:	4b1d      	ldr	r3, [pc, #116]	; (8003614 <MX_TIM5_Init+0xac>)
 80035a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035a4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035a6:	4b1b      	ldr	r3, [pc, #108]	; (8003614 <MX_TIM5_Init+0xac>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035ac:	4b19      	ldr	r3, [pc, #100]	; (8003614 <MX_TIM5_Init+0xac>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 80035b2:	4818      	ldr	r0, [pc, #96]	; (8003614 <MX_TIM5_Init+0xac>)
 80035b4:	f00b fb6e 	bl	800ec94 <HAL_TIM_OC_Init>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 80035be:	f7ff fb39 	bl	8002c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035c2:	2300      	movs	r3, #0
 80035c4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035c6:	2300      	movs	r3, #0
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80035ca:	f107 031c 	add.w	r3, r7, #28
 80035ce:	4619      	mov	r1, r3
 80035d0:	4810      	ldr	r0, [pc, #64]	; (8003614 <MX_TIM5_Init+0xac>)
 80035d2:	f00b ff95 	bl	800f500 <HAL_TIMEx_MasterConfigSynchronization>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 80035dc:	f7ff fb2a 	bl	8002c34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80035e0:	2300      	movs	r3, #0
 80035e2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80035e4:	2300      	movs	r3, #0
 80035e6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035e8:	2300      	movs	r3, #0
 80035ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035ec:	2300      	movs	r3, #0
 80035ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80035f0:	463b      	mov	r3, r7
 80035f2:	2208      	movs	r2, #8
 80035f4:	4619      	mov	r1, r3
 80035f6:	4807      	ldr	r0, [pc, #28]	; (8003614 <MX_TIM5_Init+0xac>)
 80035f8:	f00b fba4 	bl	800ed44 <HAL_TIM_OC_ConfigChannel>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8003602:	f7ff fb17 	bl	8002c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8003606:	4803      	ldr	r0, [pc, #12]	; (8003614 <MX_TIM5_Init+0xac>)
 8003608:	f000 f916 	bl	8003838 <HAL_TIM_MspPostInit>

}
 800360c:	bf00      	nop
 800360e:	3728      	adds	r7, #40	; 0x28
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	24005bd4 	.word	0x24005bd4
 8003618:	40000c00 	.word	0x40000c00

0800361c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b096      	sub	sp, #88	; 0x58
 8003620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003622:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003626:	2200      	movs	r2, #0
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	605a      	str	r2, [r3, #4]
 800362c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800362e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	605a      	str	r2, [r3, #4]
 8003638:	609a      	str	r2, [r3, #8]
 800363a:	60da      	str	r2, [r3, #12]
 800363c:	611a      	str	r2, [r3, #16]
 800363e:	615a      	str	r2, [r3, #20]
 8003640:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003642:	1d3b      	adds	r3, r7, #4
 8003644:	222c      	movs	r2, #44	; 0x2c
 8003646:	2100      	movs	r1, #0
 8003648:	4618      	mov	r0, r3
 800364a:	f01c fb95 	bl	801fd78 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800364e:	4b39      	ldr	r3, [pc, #228]	; (8003734 <MX_TIM8_Init+0x118>)
 8003650:	4a39      	ldr	r2, [pc, #228]	; (8003738 <MX_TIM8_Init+0x11c>)
 8003652:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003654:	4b37      	ldr	r3, [pc, #220]	; (8003734 <MX_TIM8_Init+0x118>)
 8003656:	2200      	movs	r2, #0
 8003658:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800365a:	4b36      	ldr	r3, [pc, #216]	; (8003734 <MX_TIM8_Init+0x118>)
 800365c:	2200      	movs	r2, #0
 800365e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003660:	4b34      	ldr	r3, [pc, #208]	; (8003734 <MX_TIM8_Init+0x118>)
 8003662:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003666:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003668:	4b32      	ldr	r3, [pc, #200]	; (8003734 <MX_TIM8_Init+0x118>)
 800366a:	2200      	movs	r2, #0
 800366c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800366e:	4b31      	ldr	r3, [pc, #196]	; (8003734 <MX_TIM8_Init+0x118>)
 8003670:	2200      	movs	r2, #0
 8003672:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003674:	4b2f      	ldr	r3, [pc, #188]	; (8003734 <MX_TIM8_Init+0x118>)
 8003676:	2200      	movs	r2, #0
 8003678:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800367a:	482e      	ldr	r0, [pc, #184]	; (8003734 <MX_TIM8_Init+0x118>)
 800367c:	f00b fb0a 	bl	800ec94 <HAL_TIM_OC_Init>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8003686:	f7ff fad5 	bl	8002c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800368a:	2300      	movs	r3, #0
 800368c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800368e:	2300      	movs	r3, #0
 8003690:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003692:	2300      	movs	r3, #0
 8003694:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003696:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800369a:	4619      	mov	r1, r3
 800369c:	4825      	ldr	r0, [pc, #148]	; (8003734 <MX_TIM8_Init+0x118>)
 800369e:	f00b ff2f 	bl	800f500 <HAL_TIMEx_MasterConfigSynchronization>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80036a8:	f7ff fac4 	bl	8002c34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80036ac:	2300      	movs	r3, #0
 80036ae:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80036b0:	2300      	movs	r3, #0
 80036b2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80036b4:	2300      	movs	r3, #0
 80036b6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80036b8:	2300      	movs	r3, #0
 80036ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036bc:	2300      	movs	r3, #0
 80036be:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80036c0:	2300      	movs	r3, #0
 80036c2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80036c4:	2300      	movs	r3, #0
 80036c6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80036c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80036cc:	2208      	movs	r2, #8
 80036ce:	4619      	mov	r1, r3
 80036d0:	4818      	ldr	r0, [pc, #96]	; (8003734 <MX_TIM8_Init+0x118>)
 80036d2:	f00b fb37 	bl	800ed44 <HAL_TIM_OC_ConfigChannel>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80036dc:	f7ff faaa 	bl	8002c34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80036e0:	2300      	movs	r3, #0
 80036e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80036e4:	2300      	movs	r3, #0
 80036e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80036e8:	2300      	movs	r3, #0
 80036ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80036ec:	2300      	movs	r3, #0
 80036ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80036f0:	2300      	movs	r3, #0
 80036f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80036f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80036fa:	2300      	movs	r3, #0
 80036fc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80036fe:	2300      	movs	r3, #0
 8003700:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003702:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003706:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003708:	2300      	movs	r3, #0
 800370a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800370c:	2300      	movs	r3, #0
 800370e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003710:	1d3b      	adds	r3, r7, #4
 8003712:	4619      	mov	r1, r3
 8003714:	4807      	ldr	r0, [pc, #28]	; (8003734 <MX_TIM8_Init+0x118>)
 8003716:	f00b ff7b 	bl	800f610 <HAL_TIMEx_ConfigBreakDeadTime>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8003720:	f7ff fa88 	bl	8002c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003724:	4803      	ldr	r0, [pc, #12]	; (8003734 <MX_TIM8_Init+0x118>)
 8003726:	f000 f887 	bl	8003838 <HAL_TIM_MspPostInit>

}
 800372a:	bf00      	nop
 800372c:	3758      	adds	r7, #88	; 0x58
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	24005b3c 	.word	0x24005b3c
 8003738:	40010400 	.word	0x40010400

0800373c <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 800373c:	b480      	push	{r7}
 800373e:	b089      	sub	sp, #36	; 0x24
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a35      	ldr	r2, [pc, #212]	; (8003820 <HAL_TIM_OC_MspInit+0xe4>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d10f      	bne.n	800376e <HAL_TIM_OC_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800374e:	4b35      	ldr	r3, [pc, #212]	; (8003824 <HAL_TIM_OC_MspInit+0xe8>)
 8003750:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003754:	4a33      	ldr	r2, [pc, #204]	; (8003824 <HAL_TIM_OC_MspInit+0xe8>)
 8003756:	f043 0301 	orr.w	r3, r3, #1
 800375a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800375e:	4b31      	ldr	r3, [pc, #196]	; (8003824 <HAL_TIM_OC_MspInit+0xe8>)
 8003760:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	61fb      	str	r3, [r7, #28]
 800376a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800376c:	e052      	b.n	8003814 <HAL_TIM_OC_MspInit+0xd8>
  else if(tim_ocHandle->Instance==TIM3)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a2d      	ldr	r2, [pc, #180]	; (8003828 <HAL_TIM_OC_MspInit+0xec>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d10f      	bne.n	8003798 <HAL_TIM_OC_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003778:	4b2a      	ldr	r3, [pc, #168]	; (8003824 <HAL_TIM_OC_MspInit+0xe8>)
 800377a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800377e:	4a29      	ldr	r2, [pc, #164]	; (8003824 <HAL_TIM_OC_MspInit+0xe8>)
 8003780:	f043 0302 	orr.w	r3, r3, #2
 8003784:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003788:	4b26      	ldr	r3, [pc, #152]	; (8003824 <HAL_TIM_OC_MspInit+0xe8>)
 800378a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	61bb      	str	r3, [r7, #24]
 8003794:	69bb      	ldr	r3, [r7, #24]
}
 8003796:	e03d      	b.n	8003814 <HAL_TIM_OC_MspInit+0xd8>
  else if(tim_ocHandle->Instance==TIM4)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a23      	ldr	r2, [pc, #140]	; (800382c <HAL_TIM_OC_MspInit+0xf0>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d10f      	bne.n	80037c2 <HAL_TIM_OC_MspInit+0x86>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80037a2:	4b20      	ldr	r3, [pc, #128]	; (8003824 <HAL_TIM_OC_MspInit+0xe8>)
 80037a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037a8:	4a1e      	ldr	r2, [pc, #120]	; (8003824 <HAL_TIM_OC_MspInit+0xe8>)
 80037aa:	f043 0304 	orr.w	r3, r3, #4
 80037ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80037b2:	4b1c      	ldr	r3, [pc, #112]	; (8003824 <HAL_TIM_OC_MspInit+0xe8>)
 80037b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	617b      	str	r3, [r7, #20]
 80037be:	697b      	ldr	r3, [r7, #20]
}
 80037c0:	e028      	b.n	8003814 <HAL_TIM_OC_MspInit+0xd8>
  else if(tim_ocHandle->Instance==TIM5)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a1a      	ldr	r2, [pc, #104]	; (8003830 <HAL_TIM_OC_MspInit+0xf4>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d10f      	bne.n	80037ec <HAL_TIM_OC_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80037cc:	4b15      	ldr	r3, [pc, #84]	; (8003824 <HAL_TIM_OC_MspInit+0xe8>)
 80037ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037d2:	4a14      	ldr	r2, [pc, #80]	; (8003824 <HAL_TIM_OC_MspInit+0xe8>)
 80037d4:	f043 0308 	orr.w	r3, r3, #8
 80037d8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80037dc:	4b11      	ldr	r3, [pc, #68]	; (8003824 <HAL_TIM_OC_MspInit+0xe8>)
 80037de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037e2:	f003 0308 	and.w	r3, r3, #8
 80037e6:	613b      	str	r3, [r7, #16]
 80037e8:	693b      	ldr	r3, [r7, #16]
}
 80037ea:	e013      	b.n	8003814 <HAL_TIM_OC_MspInit+0xd8>
  else if(tim_ocHandle->Instance==TIM8)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a10      	ldr	r2, [pc, #64]	; (8003834 <HAL_TIM_OC_MspInit+0xf8>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d10e      	bne.n	8003814 <HAL_TIM_OC_MspInit+0xd8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80037f6:	4b0b      	ldr	r3, [pc, #44]	; (8003824 <HAL_TIM_OC_MspInit+0xe8>)
 80037f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037fc:	4a09      	ldr	r2, [pc, #36]	; (8003824 <HAL_TIM_OC_MspInit+0xe8>)
 80037fe:	f043 0302 	orr.w	r3, r3, #2
 8003802:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003806:	4b07      	ldr	r3, [pc, #28]	; (8003824 <HAL_TIM_OC_MspInit+0xe8>)
 8003808:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	60fb      	str	r3, [r7, #12]
 8003812:	68fb      	ldr	r3, [r7, #12]
}
 8003814:	bf00      	nop
 8003816:	3724      	adds	r7, #36	; 0x24
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	40010000 	.word	0x40010000
 8003824:	58024400 	.word	0x58024400
 8003828:	40000400 	.word	0x40000400
 800382c:	40000800 	.word	0x40000800
 8003830:	40000c00 	.word	0x40000c00
 8003834:	40010400 	.word	0x40010400

08003838 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08c      	sub	sp, #48	; 0x30
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003840:	f107 031c 	add.w	r3, r7, #28
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	605a      	str	r2, [r3, #4]
 800384a:	609a      	str	r2, [r3, #8]
 800384c:	60da      	str	r2, [r3, #12]
 800384e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a5e      	ldr	r2, [pc, #376]	; (80039d0 <HAL_TIM_MspPostInit+0x198>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d120      	bne.n	800389c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800385a:	4b5e      	ldr	r3, [pc, #376]	; (80039d4 <HAL_TIM_MspPostInit+0x19c>)
 800385c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003860:	4a5c      	ldr	r2, [pc, #368]	; (80039d4 <HAL_TIM_MspPostInit+0x19c>)
 8003862:	f043 0301 	orr.w	r3, r3, #1
 8003866:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800386a:	4b5a      	ldr	r3, [pc, #360]	; (80039d4 <HAL_TIM_MspPostInit+0x19c>)
 800386c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	61bb      	str	r3, [r7, #24]
 8003876:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = CIS_CP_Pin;
 8003878:	f44f 7300 	mov.w	r3, #512	; 0x200
 800387c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800387e:	2302      	movs	r3, #2
 8003880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003882:	2300      	movs	r3, #0
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003886:	2300      	movs	r3, #0
 8003888:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800388a:	2301      	movs	r3, #1
 800388c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_CP_GPIO_Port, &GPIO_InitStruct);
 800388e:	f107 031c 	add.w	r3, r7, #28
 8003892:	4619      	mov	r1, r3
 8003894:	4850      	ldr	r0, [pc, #320]	; (80039d8 <HAL_TIM_MspPostInit+0x1a0>)
 8003896:	f005 fe9d 	bl	80095d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800389a:	e095      	b.n	80039c8 <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM3)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a4e      	ldr	r2, [pc, #312]	; (80039dc <HAL_TIM_MspPostInit+0x1a4>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d11f      	bne.n	80038e6 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038a6:	4b4b      	ldr	r3, [pc, #300]	; (80039d4 <HAL_TIM_MspPostInit+0x19c>)
 80038a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038ac:	4a49      	ldr	r2, [pc, #292]	; (80039d4 <HAL_TIM_MspPostInit+0x19c>)
 80038ae:	f043 0304 	orr.w	r3, r3, #4
 80038b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038b6:	4b47      	ldr	r3, [pc, #284]	; (80039d4 <HAL_TIM_MspPostInit+0x19c>)
 80038b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	617b      	str	r3, [r7, #20]
 80038c2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = CIS_VLED_R_Pin;
 80038c4:	2340      	movs	r3, #64	; 0x40
 80038c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c8:	2302      	movs	r3, #2
 80038ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038cc:	2300      	movs	r3, #0
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038d0:	2300      	movs	r3, #0
 80038d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80038d4:	2302      	movs	r3, #2
 80038d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_VLED_R_GPIO_Port, &GPIO_InitStruct);
 80038d8:	f107 031c 	add.w	r3, r7, #28
 80038dc:	4619      	mov	r1, r3
 80038de:	4840      	ldr	r0, [pc, #256]	; (80039e0 <HAL_TIM_MspPostInit+0x1a8>)
 80038e0:	f005 fe78 	bl	80095d4 <HAL_GPIO_Init>
}
 80038e4:	e070      	b.n	80039c8 <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM4)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a3e      	ldr	r2, [pc, #248]	; (80039e4 <HAL_TIM_MspPostInit+0x1ac>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d120      	bne.n	8003932 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80038f0:	4b38      	ldr	r3, [pc, #224]	; (80039d4 <HAL_TIM_MspPostInit+0x19c>)
 80038f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038f6:	4a37      	ldr	r2, [pc, #220]	; (80039d4 <HAL_TIM_MspPostInit+0x19c>)
 80038f8:	f043 0308 	orr.w	r3, r3, #8
 80038fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003900:	4b34      	ldr	r3, [pc, #208]	; (80039d4 <HAL_TIM_MspPostInit+0x19c>)
 8003902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	613b      	str	r3, [r7, #16]
 800390c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = CIS_VLED_G_Pin;
 800390e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003914:	2302      	movs	r3, #2
 8003916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003918:	2300      	movs	r3, #0
 800391a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800391c:	2300      	movs	r3, #0
 800391e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003920:	2302      	movs	r3, #2
 8003922:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_VLED_G_GPIO_Port, &GPIO_InitStruct);
 8003924:	f107 031c 	add.w	r3, r7, #28
 8003928:	4619      	mov	r1, r3
 800392a:	482f      	ldr	r0, [pc, #188]	; (80039e8 <HAL_TIM_MspPostInit+0x1b0>)
 800392c:	f005 fe52 	bl	80095d4 <HAL_GPIO_Init>
}
 8003930:	e04a      	b.n	80039c8 <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM5)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a2d      	ldr	r2, [pc, #180]	; (80039ec <HAL_TIM_MspPostInit+0x1b4>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d120      	bne.n	800397e <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800393c:	4b25      	ldr	r3, [pc, #148]	; (80039d4 <HAL_TIM_MspPostInit+0x19c>)
 800393e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003942:	4a24      	ldr	r2, [pc, #144]	; (80039d4 <HAL_TIM_MspPostInit+0x19c>)
 8003944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003948:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800394c:	4b21      	ldr	r3, [pc, #132]	; (80039d4 <HAL_TIM_MspPostInit+0x19c>)
 800394e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003956:	60fb      	str	r3, [r7, #12]
 8003958:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CIS_VLED_B_Pin;
 800395a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800395e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003960:	2302      	movs	r3, #2
 8003962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003964:	2300      	movs	r3, #0
 8003966:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003968:	2300      	movs	r3, #0
 800396a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800396c:	2302      	movs	r3, #2
 800396e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_VLED_B_GPIO_Port, &GPIO_InitStruct);
 8003970:	f107 031c 	add.w	r3, r7, #28
 8003974:	4619      	mov	r1, r3
 8003976:	481e      	ldr	r0, [pc, #120]	; (80039f0 <HAL_TIM_MspPostInit+0x1b8>)
 8003978:	f005 fe2c 	bl	80095d4 <HAL_GPIO_Init>
}
 800397c:	e024      	b.n	80039c8 <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM8)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a1c      	ldr	r2, [pc, #112]	; (80039f4 <HAL_TIM_MspPostInit+0x1bc>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d11f      	bne.n	80039c8 <HAL_TIM_MspPostInit+0x190>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003988:	4b12      	ldr	r3, [pc, #72]	; (80039d4 <HAL_TIM_MspPostInit+0x19c>)
 800398a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800398e:	4a11      	ldr	r2, [pc, #68]	; (80039d4 <HAL_TIM_MspPostInit+0x19c>)
 8003990:	f043 0304 	orr.w	r3, r3, #4
 8003994:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003998:	4b0e      	ldr	r3, [pc, #56]	; (80039d4 <HAL_TIM_MspPostInit+0x19c>)
 800399a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800399e:	f003 0304 	and.w	r3, r3, #4
 80039a2:	60bb      	str	r3, [r7, #8]
 80039a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CIS_SP_Pin;
 80039a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ac:	2302      	movs	r3, #2
 80039ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b0:	2300      	movs	r3, #0
 80039b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039b4:	2300      	movs	r3, #0
 80039b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80039b8:	2303      	movs	r3, #3
 80039ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_SP_GPIO_Port, &GPIO_InitStruct);
 80039bc:	f107 031c 	add.w	r3, r7, #28
 80039c0:	4619      	mov	r1, r3
 80039c2:	4807      	ldr	r0, [pc, #28]	; (80039e0 <HAL_TIM_MspPostInit+0x1a8>)
 80039c4:	f005 fe06 	bl	80095d4 <HAL_GPIO_Init>
}
 80039c8:	bf00      	nop
 80039ca:	3730      	adds	r7, #48	; 0x30
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40010000 	.word	0x40010000
 80039d4:	58024400 	.word	0x58024400
 80039d8:	58020000 	.word	0x58020000
 80039dc:	40000400 	.word	0x40000400
 80039e0:	58020800 	.word	0x58020800
 80039e4:	40000800 	.word	0x40000800
 80039e8:	58020c00 	.word	0x58020c00
 80039ec:	40000c00 	.word	0x40000c00
 80039f0:	58021c00 	.word	0x58021c00
 80039f4:	40010400 	.word	0x40010400

080039f8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80039fc:	4b22      	ldr	r3, [pc, #136]	; (8003a88 <MX_USART1_UART_Init+0x90>)
 80039fe:	4a23      	ldr	r2, [pc, #140]	; (8003a8c <MX_USART1_UART_Init+0x94>)
 8003a00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003a02:	4b21      	ldr	r3, [pc, #132]	; (8003a88 <MX_USART1_UART_Init+0x90>)
 8003a04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003a0a:	4b1f      	ldr	r3, [pc, #124]	; (8003a88 <MX_USART1_UART_Init+0x90>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003a10:	4b1d      	ldr	r3, [pc, #116]	; (8003a88 <MX_USART1_UART_Init+0x90>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003a16:	4b1c      	ldr	r3, [pc, #112]	; (8003a88 <MX_USART1_UART_Init+0x90>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003a1c:	4b1a      	ldr	r3, [pc, #104]	; (8003a88 <MX_USART1_UART_Init+0x90>)
 8003a1e:	220c      	movs	r2, #12
 8003a20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a22:	4b19      	ldr	r3, [pc, #100]	; (8003a88 <MX_USART1_UART_Init+0x90>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a28:	4b17      	ldr	r3, [pc, #92]	; (8003a88 <MX_USART1_UART_Init+0x90>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a2e:	4b16      	ldr	r3, [pc, #88]	; (8003a88 <MX_USART1_UART_Init+0x90>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003a34:	4b14      	ldr	r3, [pc, #80]	; (8003a88 <MX_USART1_UART_Init+0x90>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a3a:	4b13      	ldr	r3, [pc, #76]	; (8003a88 <MX_USART1_UART_Init+0x90>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003a40:	4811      	ldr	r0, [pc, #68]	; (8003a88 <MX_USART1_UART_Init+0x90>)
 8003a42:	f00b fe63 	bl	800f70c <HAL_UART_Init>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003a4c:	f7ff f8f2 	bl	8002c34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a50:	2100      	movs	r1, #0
 8003a52:	480d      	ldr	r0, [pc, #52]	; (8003a88 <MX_USART1_UART_Init+0x90>)
 8003a54:	f00c fdb0 	bl	80105b8 <HAL_UARTEx_SetTxFifoThreshold>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003a5e:	f7ff f8e9 	bl	8002c34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a62:	2100      	movs	r1, #0
 8003a64:	4808      	ldr	r0, [pc, #32]	; (8003a88 <MX_USART1_UART_Init+0x90>)
 8003a66:	f00c fde5 	bl	8010634 <HAL_UARTEx_SetRxFifoThreshold>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003a70:	f7ff f8e0 	bl	8002c34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003a74:	4804      	ldr	r0, [pc, #16]	; (8003a88 <MX_USART1_UART_Init+0x90>)
 8003a76:	f00c fd66 	bl	8010546 <HAL_UARTEx_DisableFifoMode>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003a80:	f7ff f8d8 	bl	8002c34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003a84:	bf00      	nop
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	24005cb8 	.word	0x24005cb8
 8003a8c:	40011000 	.word	0x40011000

08003a90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b0b8      	sub	sp, #224	; 0xe0
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a98:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	605a      	str	r2, [r3, #4]
 8003aa2:	609a      	str	r2, [r3, #8]
 8003aa4:	60da      	str	r2, [r3, #12]
 8003aa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003aa8:	f107 0310 	add.w	r3, r7, #16
 8003aac:	22bc      	movs	r2, #188	; 0xbc
 8003aae:	2100      	movs	r1, #0
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f01c f961 	bl	801fd78 <memset>
  if(uartHandle->Instance==USART1)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a24      	ldr	r2, [pc, #144]	; (8003b4c <HAL_UART_MspInit+0xbc>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d141      	bne.n	8003b44 <HAL_UART_MspInit+0xb4>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003aca:	f107 0310 	add.w	r3, r7, #16
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f006 ffac 	bl	800aa2c <HAL_RCCEx_PeriphCLKConfig>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003ada:	f7ff f8ab 	bl	8002c34 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ade:	4b1c      	ldr	r3, [pc, #112]	; (8003b50 <HAL_UART_MspInit+0xc0>)
 8003ae0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ae4:	4a1a      	ldr	r2, [pc, #104]	; (8003b50 <HAL_UART_MspInit+0xc0>)
 8003ae6:	f043 0310 	orr.w	r3, r3, #16
 8003aea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003aee:	4b18      	ldr	r3, [pc, #96]	; (8003b50 <HAL_UART_MspInit+0xc0>)
 8003af0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003af4:	f003 0310 	and.w	r3, r3, #16
 8003af8:	60fb      	str	r3, [r7, #12]
 8003afa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003afc:	4b14      	ldr	r3, [pc, #80]	; (8003b50 <HAL_UART_MspInit+0xc0>)
 8003afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b02:	4a13      	ldr	r2, [pc, #76]	; (8003b50 <HAL_UART_MspInit+0xc0>)
 8003b04:	f043 0302 	orr.w	r3, r3, #2
 8003b08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b0c:	4b10      	ldr	r3, [pc, #64]	; (8003b50 <HAL_UART_MspInit+0xc0>)
 8003b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	60bb      	str	r3, [r7, #8]
 8003b18:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003b1a:	23c0      	movs	r3, #192	; 0xc0
 8003b1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b20:	2302      	movs	r3, #2
 8003b22:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b26:	2300      	movs	r3, #0
 8003b28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003b32:	2307      	movs	r3, #7
 8003b34:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b38:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	4805      	ldr	r0, [pc, #20]	; (8003b54 <HAL_UART_MspInit+0xc4>)
 8003b40:	f005 fd48 	bl	80095d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003b44:	bf00      	nop
 8003b46:	37e0      	adds	r7, #224	; 0xe0
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40011000 	.word	0x40011000
 8003b50:	58024400 	.word	0x58024400
 8003b54:	58020400 	.word	0x58020400

08003b58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003b58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b90 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003b5c:	f7fd f90a 	bl	8000d74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b60:	480c      	ldr	r0, [pc, #48]	; (8003b94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003b62:	490d      	ldr	r1, [pc, #52]	; (8003b98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003b64:	4a0d      	ldr	r2, [pc, #52]	; (8003b9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b68:	e002      	b.n	8003b70 <LoopCopyDataInit>

08003b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b6e:	3304      	adds	r3, #4

08003b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b74:	d3f9      	bcc.n	8003b6a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b76:	4a0a      	ldr	r2, [pc, #40]	; (8003ba0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003b78:	4c0a      	ldr	r4, [pc, #40]	; (8003ba4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b7c:	e001      	b.n	8003b82 <LoopFillZerobss>

08003b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b80:	3204      	adds	r2, #4

08003b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b84:	d3fb      	bcc.n	8003b7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b86:	f01c f895 	bl	801fcb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b8a:	f7fe fca7 	bl	80024dc <main>
  bx  lr
 8003b8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003b90:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003b94:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003b98:	24003a1c 	.word	0x24003a1c
  ldr r2, =_sidata
 8003b9c:	0802b478 	.word	0x0802b478
  ldr r2, =_sbss
 8003ba0:	24003a1c 	.word	0x24003a1c
  ldr r4, =_ebss
 8003ba4:	2400b6b8 	.word	0x2400b6b8

08003ba8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ba8:	e7fe      	b.n	8003ba8 <ADC3_IRQHandler>

08003baa <arm_copy_q15>:

void arm_copy_q15(
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b087      	sub	sp, #28
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	60f8      	str	r0, [r7, #12]
 8003bb2:	60b9      	str	r1, [r7, #8]
 8003bb4:	607a      	str	r2, [r7, #4]
#ifndef ARM_MATH_CM0_FAMILY

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  /*loop Unrolling */
  blkCnt = blockSize >> 2u;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	089b      	lsrs	r3, r3, #2
 8003bba:	617b      	str	r3, [r7, #20]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8003bbc:	e01a      	b.n	8003bf4 <arm_copy_q15+0x4a>
  {
    /* C = A */
    /* Read two inputs */
    *__SIMD32(pDst)++ = *__SIMD32(pSrc)++;
 8003bbe:	f107 030c 	add.w	r3, r7, #12
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	1d11      	adds	r1, r2, #4
 8003bc6:	6019      	str	r1, [r3, #0]
 8003bc8:	f107 0108 	add.w	r1, r7, #8
 8003bcc:	680b      	ldr	r3, [r1, #0]
 8003bce:	1d18      	adds	r0, r3, #4
 8003bd0:	6008      	str	r0, [r1, #0]
 8003bd2:	6812      	ldr	r2, [r2, #0]
 8003bd4:	601a      	str	r2, [r3, #0]
    *__SIMD32(pDst)++ = *__SIMD32(pSrc)++;
 8003bd6:	f107 030c 	add.w	r3, r7, #12
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	1d11      	adds	r1, r2, #4
 8003bde:	6019      	str	r1, [r3, #0]
 8003be0:	f107 0108 	add.w	r1, r7, #8
 8003be4:	680b      	ldr	r3, [r1, #0]
 8003be6:	1d18      	adds	r0, r3, #4
 8003be8:	6008      	str	r0, [r1, #0]
 8003bea:	6812      	ldr	r2, [r2, #0]
 8003bec:	601a      	str	r2, [r3, #0]

    /* Decrement the loop counter */
    blkCnt--;
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	617b      	str	r3, [r7, #20]
  while(blkCnt > 0u)
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1e1      	bne.n	8003bbe <arm_copy_q15+0x14>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f003 0303 	and.w	r3, r3, #3
 8003c00:	617b      	str	r3, [r7, #20]
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 8003c02:	e00b      	b.n	8003c1c <arm_copy_q15+0x72>
  {
    /* C = A */
    /* Copy and then store the value in the destination buffer */
    *pDst++ = *pSrc++;
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	1c93      	adds	r3, r2, #2
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	1c99      	adds	r1, r3, #2
 8003c0e:	60b9      	str	r1, [r7, #8]
 8003c10:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003c14:	801a      	strh	r2, [r3, #0]

    /* Decrement the loop counter */
    blkCnt--;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	617b      	str	r3, [r7, #20]
  while(blkCnt > 0u)
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1f0      	bne.n	8003c04 <arm_copy_q15+0x5a>
  }
}
 8003c22:	bf00      	nop
 8003c24:	bf00      	nop
 8003c26:	371c      	adds	r7, #28
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00b      	beq.n	8003c58 <LAN8742_RegisterBusIO+0x28>
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d007      	beq.n	8003c58 <LAN8742_RegisterBusIO+0x28>
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <LAN8742_RegisterBusIO+0x28>
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d102      	bne.n	8003c5e <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8003c58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c5c:	e014      	b.n	8003c88 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	68da      	ldr	r2, [r3, #12]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	691a      	ldr	r2, [r3, #16]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	60bb      	str	r3, [r7, #8]
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d17c      	bne.n	8003dae <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d002      	beq.n	8003cc2 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003cc8:	2300      	movs	r3, #0
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	e01c      	b.n	8003d08 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	f107 0208 	add.w	r2, r7, #8
 8003cd6:	2112      	movs	r1, #18
 8003cd8:	6978      	ldr	r0, [r7, #20]
 8003cda:	4798      	blx	r3
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	da03      	bge.n	8003cea <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8003ce2:	f06f 0304 	mvn.w	r3, #4
 8003ce6:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8003ce8:	e00b      	b.n	8003d02 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	f003 031f 	and.w	r3, r3, #31
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d105      	bne.n	8003d02 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	613b      	str	r3, [r7, #16]
         break;
 8003d00:	e005      	b.n	8003d0e <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	3301      	adds	r3, #1
 8003d06:	617b      	str	r3, [r7, #20]
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	2b1f      	cmp	r3, #31
 8003d0c:	d9df      	bls.n	8003cce <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2b1f      	cmp	r3, #31
 8003d14:	d902      	bls.n	8003d1c <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8003d16:	f06f 0302 	mvn.w	r3, #2
 8003d1a:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d145      	bne.n	8003dae <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	6810      	ldr	r0, [r2, #0]
 8003d2a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003d2e:	2100      	movs	r1, #0
 8003d30:	4798      	blx	r3
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	db37      	blt.n	8003da8 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6810      	ldr	r0, [r2, #0]
 8003d40:	f107 0208 	add.w	r2, r7, #8
 8003d44:	2100      	movs	r1, #0
 8003d46:	4798      	blx	r3
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	db28      	blt.n	8003da0 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	4798      	blx	r3
 8003d54:	4603      	mov	r3, r0
 8003d56:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003d58:	e01c      	b.n	8003d94 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	4798      	blx	r3
 8003d60:	4603      	mov	r3, r0
 8003d62:	461a      	mov	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003d6c:	d80e      	bhi.n	8003d8c <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6810      	ldr	r0, [r2, #0]
 8003d76:	f107 0208 	add.w	r2, r7, #8
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	4798      	blx	r3
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	da07      	bge.n	8003d94 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8003d84:	f06f 0304 	mvn.w	r3, #4
 8003d88:	613b      	str	r3, [r7, #16]
                 break;
 8003d8a:	e010      	b.n	8003dae <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8003d8c:	f06f 0301 	mvn.w	r3, #1
 8003d90:	613b      	str	r3, [r7, #16]
               break;
 8003d92:	e00c      	b.n	8003dae <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1dd      	bne.n	8003d5a <LAN8742_Init+0xc6>
 8003d9e:	e006      	b.n	8003dae <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8003da0:	f06f 0304 	mvn.w	r3, #4
 8003da4:	613b      	str	r3, [r7, #16]
 8003da6:	e002      	b.n	8003dae <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8003da8:	f06f 0303 	mvn.w	r3, #3
 8003dac:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d112      	bne.n	8003dda <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	4798      	blx	r3
 8003dba:	4603      	mov	r3, r0
 8003dbc:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8003dbe:	bf00      	nop
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	4798      	blx	r3
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	461a      	mov	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003dd2:	d9f5      	bls.n	8003dc0 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8003dda:	693b      	ldr	r3, [r7, #16]
 }
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3718      	adds	r7, #24
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8003dec:	2300      	movs	r3, #0
 8003dee:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	6810      	ldr	r0, [r2, #0]
 8003df8:	f107 020c 	add.w	r2, r7, #12
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	4798      	blx	r3
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	da02      	bge.n	8003e0c <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003e06:	f06f 0304 	mvn.w	r3, #4
 8003e0a:	e06e      	b.n	8003eea <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6810      	ldr	r0, [r2, #0]
 8003e14:	f107 020c 	add.w	r2, r7, #12
 8003e18:	2101      	movs	r1, #1
 8003e1a:	4798      	blx	r3
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	da02      	bge.n	8003e28 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003e22:	f06f 0304 	mvn.w	r3, #4
 8003e26:	e060      	b.n	8003eea <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f003 0304 	and.w	r3, r3, #4
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8003e32:	2301      	movs	r3, #1
 8003e34:	e059      	b.n	8003eea <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	6810      	ldr	r0, [r2, #0]
 8003e3e:	f107 020c 	add.w	r2, r7, #12
 8003e42:	2100      	movs	r1, #0
 8003e44:	4798      	blx	r3
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	da02      	bge.n	8003e52 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003e4c:	f06f 0304 	mvn.w	r3, #4
 8003e50:	e04b      	b.n	8003eea <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d11b      	bne.n	8003e94 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d006      	beq.n	8003e74 <LAN8742_GetLinkState+0x90>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003e70:	2302      	movs	r3, #2
 8003e72:	e03a      	b.n	8003eea <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e033      	b.n	8003eea <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003e8c:	2304      	movs	r3, #4
 8003e8e:	e02c      	b.n	8003eea <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003e90:	2305      	movs	r3, #5
 8003e92:	e02a      	b.n	8003eea <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6810      	ldr	r0, [r2, #0]
 8003e9c:	f107 020c 	add.w	r2, r7, #12
 8003ea0:	211f      	movs	r1, #31
 8003ea2:	4798      	blx	r3
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	da02      	bge.n	8003eb0 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8003eaa:	f06f 0304 	mvn.w	r3, #4
 8003eae:	e01c      	b.n	8003eea <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8003eba:	2306      	movs	r3, #6
 8003ebc:	e015      	b.n	8003eea <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f003 031c 	and.w	r3, r3, #28
 8003ec4:	2b18      	cmp	r3, #24
 8003ec6:	d101      	bne.n	8003ecc <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003ec8:	2302      	movs	r3, #2
 8003eca:	e00e      	b.n	8003eea <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f003 031c 	and.w	r3, r3, #28
 8003ed2:	2b08      	cmp	r3, #8
 8003ed4:	d101      	bne.n	8003eda <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e007      	b.n	8003eea <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f003 031c 	and.w	r3, r3, #28
 8003ee0:	2b14      	cmp	r3, #20
 8003ee2:	d101      	bne.n	8003ee8 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003ee4:	2304      	movs	r3, #4
 8003ee6:	e000      	b.n	8003eea <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003ee8:	2305      	movs	r3, #5
    }				
  }
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
	...

08003ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003efa:	2003      	movs	r0, #3
 8003efc:	f001 fa54 	bl	80053a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003f00:	f006 fbbe 	bl	800a680 <HAL_RCC_GetSysClockFreq>
 8003f04:	4602      	mov	r2, r0
 8003f06:	4b15      	ldr	r3, [pc, #84]	; (8003f5c <HAL_Init+0x68>)
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	0a1b      	lsrs	r3, r3, #8
 8003f0c:	f003 030f 	and.w	r3, r3, #15
 8003f10:	4913      	ldr	r1, [pc, #76]	; (8003f60 <HAL_Init+0x6c>)
 8003f12:	5ccb      	ldrb	r3, [r1, r3]
 8003f14:	f003 031f 	and.w	r3, r3, #31
 8003f18:	fa22 f303 	lsr.w	r3, r2, r3
 8003f1c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f1e:	4b0f      	ldr	r3, [pc, #60]	; (8003f5c <HAL_Init+0x68>)
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	f003 030f 	and.w	r3, r3, #15
 8003f26:	4a0e      	ldr	r2, [pc, #56]	; (8003f60 <HAL_Init+0x6c>)
 8003f28:	5cd3      	ldrb	r3, [r2, r3]
 8003f2a:	f003 031f 	and.w	r3, r3, #31
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	fa22 f303 	lsr.w	r3, r2, r3
 8003f34:	4a0b      	ldr	r2, [pc, #44]	; (8003f64 <HAL_Init+0x70>)
 8003f36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f38:	4a0b      	ldr	r2, [pc, #44]	; (8003f68 <HAL_Init+0x74>)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f3e:	2000      	movs	r0, #0
 8003f40:	f000 f814 	bl	8003f6c <HAL_InitTick>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e002      	b.n	8003f54 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003f4e:	f7ff f8a3 	bl	8003098 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3708      	adds	r7, #8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	58024400 	.word	0x58024400
 8003f60:	08028adc 	.word	0x08028adc
 8003f64:	24000404 	.word	0x24000404
 8003f68:	24000400 	.word	0x24000400

08003f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003f74:	4b15      	ldr	r3, [pc, #84]	; (8003fcc <HAL_InitTick+0x60>)
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e021      	b.n	8003fc4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003f80:	4b13      	ldr	r3, [pc, #76]	; (8003fd0 <HAL_InitTick+0x64>)
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	4b11      	ldr	r3, [pc, #68]	; (8003fcc <HAL_InitTick+0x60>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	4619      	mov	r1, r3
 8003f8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f96:	4618      	mov	r0, r3
 8003f98:	f001 fa39 	bl	800540e <HAL_SYSTICK_Config>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e00e      	b.n	8003fc4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2b0f      	cmp	r3, #15
 8003faa:	d80a      	bhi.n	8003fc2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fac:	2200      	movs	r2, #0
 8003fae:	6879      	ldr	r1, [r7, #4]
 8003fb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fb4:	f001 fa03 	bl	80053be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003fb8:	4a06      	ldr	r2, [pc, #24]	; (8003fd4 <HAL_InitTick+0x68>)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	e000      	b.n	8003fc4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3708      	adds	r7, #8
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	2400040c 	.word	0x2400040c
 8003fd0:	24000400 	.word	0x24000400
 8003fd4:	24000408 	.word	0x24000408

08003fd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003fdc:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <HAL_IncTick+0x20>)
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	4b06      	ldr	r3, [pc, #24]	; (8003ffc <HAL_IncTick+0x24>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	4a04      	ldr	r2, [pc, #16]	; (8003ffc <HAL_IncTick+0x24>)
 8003fea:	6013      	str	r3, [r2, #0]
}
 8003fec:	bf00      	nop
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	2400040c 	.word	0x2400040c
 8003ffc:	24005d48 	.word	0x24005d48

08004000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
  return uwTick;
 8004004:	4b03      	ldr	r3, [pc, #12]	; (8004014 <HAL_GetTick+0x14>)
 8004006:	681b      	ldr	r3, [r3, #0]
}
 8004008:	4618      	mov	r0, r3
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	24005d48 	.word	0x24005d48

08004018 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004020:	f7ff ffee 	bl	8004000 <HAL_GetTick>
 8004024:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004030:	d005      	beq.n	800403e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004032:	4b0a      	ldr	r3, [pc, #40]	; (800405c <HAL_Delay+0x44>)
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	461a      	mov	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4413      	add	r3, r2
 800403c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800403e:	bf00      	nop
 8004040:	f7ff ffde 	bl	8004000 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	429a      	cmp	r2, r3
 800404e:	d8f7      	bhi.n	8004040 <HAL_Delay+0x28>
  {
  }
}
 8004050:	bf00      	nop
 8004052:	bf00      	nop
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	2400040c 	.word	0x2400040c

08004060 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004060:	b480      	push	{r7}
 8004062:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004064:	4b03      	ldr	r3, [pc, #12]	; (8004074 <HAL_GetREVID+0x14>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	0c1b      	lsrs	r3, r3, #16
}
 800406a:	4618      	mov	r0, r3
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	5c001000 	.word	0x5c001000

08004078 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8004080:	4b06      	ldr	r3, [pc, #24]	; (800409c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004088:	4904      	ldr	r1, [pc, #16]	; (800409c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4313      	orrs	r3, r2
 800408e:	604b      	str	r3, [r1, #4]
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	58000400 	.word	0x58000400

080040a0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80040aa:	4b07      	ldr	r3, [pc, #28]	; (80040c8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	43db      	mvns	r3, r3
 80040b2:	401a      	ands	r2, r3
 80040b4:	4904      	ldr	r1, [pc, #16]	; (80040c8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	604b      	str	r3, [r1, #4]
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr
 80040c8:	58000400 	.word	0x58000400

080040cc <HAL_SetFMCMemorySwappingConfig>:
  * @param  BankMapConfig: Defines the FMC Bank mapping configuration. This parameter can be
            FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
  * @retval HAL state
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 80040d4:	4b06      	ldr	r3, [pc, #24]	; (80040f0 <HAL_SetFMCMemorySwappingConfig+0x24>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80040dc:	4904      	ldr	r1, [pc, #16]	; (80040f0 <HAL_SetFMCMemorySwappingConfig+0x24>)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	600b      	str	r3, [r1, #0]
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	52004000 	.word	0x52004000

080040f4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	431a      	orrs	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	609a      	str	r2, [r3, #8]
}
 800410e:	bf00      	nop
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
 8004122:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	431a      	orrs	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	609a      	str	r2, [r3, #8]
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004150:	4618      	mov	r0, r3
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800415c:	b480      	push	{r7}
 800415e:	b087      	sub	sp, #28
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
 8004168:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	3360      	adds	r3, #96	; 0x60
 800416e:	461a      	mov	r2, r3
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	430b      	orrs	r3, r1
 800418a:	431a      	orrs	r2, r3
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004190:	bf00      	nop
 8004192:	371c      	adds	r7, #28
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	f003 031f 	and.w	r3, r3, #31
 80041b6:	6879      	ldr	r1, [r7, #4]
 80041b8:	fa01 f303 	lsl.w	r3, r1, r3
 80041bc:	431a      	orrs	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	611a      	str	r2, [r3, #16]
}
 80041c2:	bf00      	nop
 80041c4:	3714      	adds	r7, #20
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b087      	sub	sp, #28
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	60f8      	str	r0, [r7, #12]
 80041d6:	60b9      	str	r1, [r7, #8]
 80041d8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	3360      	adds	r3, #96	; 0x60
 80041de:	461a      	mov	r2, r3
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4413      	add	r3, r2
 80041e6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	431a      	orrs	r2, r3
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	601a      	str	r2, [r3, #0]
  }
}
 80041f8:	bf00      	nop
 80041fa:	371c      	adds	r7, #28
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004204:	b480      	push	{r7}
 8004206:	b087      	sub	sp, #28
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	3330      	adds	r3, #48	; 0x30
 8004214:	461a      	mov	r2, r3
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	0a1b      	lsrs	r3, r3, #8
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	f003 030c 	and.w	r3, r3, #12
 8004220:	4413      	add	r3, r2
 8004222:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	f003 031f 	and.w	r3, r3, #31
 800422e:	211f      	movs	r1, #31
 8004230:	fa01 f303 	lsl.w	r3, r1, r3
 8004234:	43db      	mvns	r3, r3
 8004236:	401a      	ands	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	0e9b      	lsrs	r3, r3, #26
 800423c:	f003 011f 	and.w	r1, r3, #31
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	f003 031f 	and.w	r3, r3, #31
 8004246:	fa01 f303 	lsl.w	r3, r1, r3
 800424a:	431a      	orrs	r2, r3
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004250:	bf00      	nop
 8004252:	371c      	adds	r7, #28
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800425c:	b480      	push	{r7}
 800425e:	b087      	sub	sp, #28
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	3314      	adds	r3, #20
 800426c:	461a      	mov	r2, r3
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	0e5b      	lsrs	r3, r3, #25
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	4413      	add	r3, r2
 800427a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	0d1b      	lsrs	r3, r3, #20
 8004284:	f003 031f 	and.w	r3, r3, #31
 8004288:	2107      	movs	r1, #7
 800428a:	fa01 f303 	lsl.w	r3, r1, r3
 800428e:	43db      	mvns	r3, r3
 8004290:	401a      	ands	r2, r3
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	0d1b      	lsrs	r3, r3, #20
 8004296:	f003 031f 	and.w	r3, r3, #31
 800429a:	6879      	ldr	r1, [r7, #4]
 800429c:	fa01 f303 	lsl.w	r3, r1, r3
 80042a0:	431a      	orrs	r2, r3
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80042a6:	bf00      	nop
 80042a8:	371c      	adds	r7, #28
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
	...

080042b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042cc:	43db      	mvns	r3, r3
 80042ce:	401a      	ands	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f003 0318 	and.w	r3, r3, #24
 80042d6:	4908      	ldr	r1, [pc, #32]	; (80042f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80042d8:	40d9      	lsrs	r1, r3
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	400b      	ands	r3, r1
 80042de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042e2:	431a      	orrs	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80042ea:	bf00      	nop
 80042ec:	3714      	adds	r7, #20
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	000fffff 	.word	0x000fffff

080042fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	4b04      	ldr	r3, [pc, #16]	; (800431c <LL_ADC_DisableDeepPowerDown+0x20>)
 800430a:	4013      	ands	r3, r2
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	6093      	str	r3, [r2, #8]
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	5fffffc0 	.word	0x5fffffc0

08004320 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004330:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004334:	d101      	bne.n	800433a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004336:	2301      	movs	r3, #1
 8004338:	e000      	b.n	800433c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	4b05      	ldr	r3, [pc, #20]	; (800436c <LL_ADC_EnableInternalRegulator+0x24>)
 8004356:	4013      	ands	r3, r2
 8004358:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr
 800436c:	6fffffc0 	.word	0x6fffffc0

08004370 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004380:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004384:	d101      	bne.n	800438a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004386:	2301      	movs	r3, #1
 8004388:	e000      	b.n	800438c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d101      	bne.n	80043b0 <LL_ADC_IsEnabled+0x18>
 80043ac:	2301      	movs	r3, #1
 80043ae:	e000      	b.n	80043b2 <LL_ADC_IsEnabled+0x1a>
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f003 0304 	and.w	r3, r3, #4
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	d101      	bne.n	80043d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80043d2:	2301      	movs	r3, #1
 80043d4:	e000      	b.n	80043d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f003 0308 	and.w	r3, r3, #8
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d101      	bne.n	80043fc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80043f8:	2301      	movs	r3, #1
 80043fa:	e000      	b.n	80043fe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
	...

0800440c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800440c:	b590      	push	{r4, r7, lr}
 800440e:	b089      	sub	sp, #36	; 0x24
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004414:	2300      	movs	r3, #0
 8004416:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004418:	2300      	movs	r3, #0
 800441a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e18e      	b.n	8004744 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004430:	2b00      	cmp	r3, #0
 8004432:	d109      	bne.n	8004448 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f7fc fe79 	bl	800112c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4618      	mov	r0, r3
 800444e:	f7ff ff67 	bl	8004320 <LL_ADC_IsDeepPowerDownEnabled>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d004      	beq.n	8004462 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff ff4d 	bl	80042fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4618      	mov	r0, r3
 8004468:	f7ff ff82 	bl	8004370 <LL_ADC_IsInternalRegulatorEnabled>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d114      	bne.n	800449c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff ff66 	bl	8004348 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800447c:	4b9a      	ldr	r3, [pc, #616]	; (80046e8 <HAL_ADC_Init+0x2dc>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	099b      	lsrs	r3, r3, #6
 8004482:	4a9a      	ldr	r2, [pc, #616]	; (80046ec <HAL_ADC_Init+0x2e0>)
 8004484:	fba2 2303 	umull	r2, r3, r2, r3
 8004488:	099b      	lsrs	r3, r3, #6
 800448a:	3301      	adds	r3, #1
 800448c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800448e:	e002      	b.n	8004496 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	3b01      	subs	r3, #1
 8004494:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1f9      	bne.n	8004490 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7ff ff65 	bl	8004370 <LL_ADC_IsInternalRegulatorEnabled>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10d      	bne.n	80044c8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b0:	f043 0210 	orr.w	r2, r3, #16
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044bc:	f043 0201 	orr.w	r2, r3, #1
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7ff ff76 	bl	80043be <LL_ADC_REG_IsConversionOngoing>
 80044d2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d8:	f003 0310 	and.w	r3, r3, #16
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f040 8128 	bne.w	8004732 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f040 8124 	bne.w	8004732 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ee:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80044f2:	f043 0202 	orr.w	r2, r3, #2
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4618      	mov	r0, r3
 8004500:	f7ff ff4a 	bl	8004398 <LL_ADC_IsEnabled>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d136      	bne.n	8004578 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a78      	ldr	r2, [pc, #480]	; (80046f0 <HAL_ADC_Init+0x2e4>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d004      	beq.n	800451e <HAL_ADC_Init+0x112>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a76      	ldr	r2, [pc, #472]	; (80046f4 <HAL_ADC_Init+0x2e8>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d10e      	bne.n	800453c <HAL_ADC_Init+0x130>
 800451e:	4874      	ldr	r0, [pc, #464]	; (80046f0 <HAL_ADC_Init+0x2e4>)
 8004520:	f7ff ff3a 	bl	8004398 <LL_ADC_IsEnabled>
 8004524:	4604      	mov	r4, r0
 8004526:	4873      	ldr	r0, [pc, #460]	; (80046f4 <HAL_ADC_Init+0x2e8>)
 8004528:	f7ff ff36 	bl	8004398 <LL_ADC_IsEnabled>
 800452c:	4603      	mov	r3, r0
 800452e:	4323      	orrs	r3, r4
 8004530:	2b00      	cmp	r3, #0
 8004532:	bf0c      	ite	eq
 8004534:	2301      	moveq	r3, #1
 8004536:	2300      	movne	r3, #0
 8004538:	b2db      	uxtb	r3, r3
 800453a:	e008      	b.n	800454e <HAL_ADC_Init+0x142>
 800453c:	486e      	ldr	r0, [pc, #440]	; (80046f8 <HAL_ADC_Init+0x2ec>)
 800453e:	f7ff ff2b 	bl	8004398 <LL_ADC_IsEnabled>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	bf0c      	ite	eq
 8004548:	2301      	moveq	r3, #1
 800454a:	2300      	movne	r3, #0
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d012      	beq.n	8004578 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a66      	ldr	r2, [pc, #408]	; (80046f0 <HAL_ADC_Init+0x2e4>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d004      	beq.n	8004566 <HAL_ADC_Init+0x15a>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a64      	ldr	r2, [pc, #400]	; (80046f4 <HAL_ADC_Init+0x2e8>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d101      	bne.n	800456a <HAL_ADC_Init+0x15e>
 8004566:	4a65      	ldr	r2, [pc, #404]	; (80046fc <HAL_ADC_Init+0x2f0>)
 8004568:	e000      	b.n	800456c <HAL_ADC_Init+0x160>
 800456a:	4a65      	ldr	r2, [pc, #404]	; (8004700 <HAL_ADC_Init+0x2f4>)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	4619      	mov	r1, r3
 8004572:	4610      	mov	r0, r2
 8004574:	f7ff fdbe 	bl	80040f4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004578:	f7ff fd72 	bl	8004060 <HAL_GetREVID>
 800457c:	4603      	mov	r3, r0
 800457e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004582:	4293      	cmp	r3, r2
 8004584:	d914      	bls.n	80045b0 <HAL_ADC_Init+0x1a4>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	2b10      	cmp	r3, #16
 800458c:	d110      	bne.n	80045b0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	7d5b      	ldrb	r3, [r3, #21]
 8004592:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004598:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800459e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	7f1b      	ldrb	r3, [r3, #28]
 80045a4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80045a6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80045a8:	f043 030c 	orr.w	r3, r3, #12
 80045ac:	61bb      	str	r3, [r7, #24]
 80045ae:	e00d      	b.n	80045cc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	7d5b      	ldrb	r3, [r3, #21]
 80045b4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80045ba:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80045c0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	7f1b      	ldrb	r3, [r3, #28]
 80045c6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80045c8:	4313      	orrs	r3, r2
 80045ca:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	7f1b      	ldrb	r3, [r3, #28]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d106      	bne.n	80045e2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	3b01      	subs	r3, #1
 80045da:	045b      	lsls	r3, r3, #17
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	4313      	orrs	r3, r2
 80045e0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d009      	beq.n	80045fe <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68da      	ldr	r2, [r3, #12]
 8004604:	4b3f      	ldr	r3, [pc, #252]	; (8004704 <HAL_ADC_Init+0x2f8>)
 8004606:	4013      	ands	r3, r2
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	6812      	ldr	r2, [r2, #0]
 800460c:	69b9      	ldr	r1, [r7, #24]
 800460e:	430b      	orrs	r3, r1
 8004610:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4618      	mov	r0, r3
 8004618:	f7ff fed1 	bl	80043be <LL_ADC_REG_IsConversionOngoing>
 800461c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4618      	mov	r0, r3
 8004624:	f7ff fede 	bl	80043e4 <LL_ADC_INJ_IsConversionOngoing>
 8004628:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d14a      	bne.n	80046c6 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d147      	bne.n	80046c6 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	7d1b      	ldrb	r3, [r3, #20]
 800463a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004640:	4313      	orrs	r3, r2
 8004642:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	4b2f      	ldr	r3, [pc, #188]	; (8004708 <HAL_ADC_Init+0x2fc>)
 800464c:	4013      	ands	r3, r2
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	6812      	ldr	r2, [r2, #0]
 8004652:	69b9      	ldr	r1, [r7, #24]
 8004654:	430b      	orrs	r3, r1
 8004656:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800465e:	2b01      	cmp	r3, #1
 8004660:	d11b      	bne.n	800469a <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004666:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	691a      	ldr	r2, [r3, #16]
 800466e:	4b27      	ldr	r3, [pc, #156]	; (800470c <HAL_ADC_Init+0x300>)
 8004670:	4013      	ands	r3, r2
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004676:	3a01      	subs	r2, #1
 8004678:	0411      	lsls	r1, r2, #16
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800467e:	4311      	orrs	r1, r2
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004684:	4311      	orrs	r1, r2
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800468a:	430a      	orrs	r2, r1
 800468c:	431a      	orrs	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0201 	orr.w	r2, r2, #1
 8004696:	611a      	str	r2, [r3, #16]
 8004698:	e007      	b.n	80046aa <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	691a      	ldr	r2, [r3, #16]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 0201 	bic.w	r2, r2, #1
 80046a8:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	430a      	orrs	r2, r1
 80046be:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 fb93 	bl	8004dec <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d120      	bne.n	8004710 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d4:	f023 010f 	bic.w	r1, r3, #15
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	1e5a      	subs	r2, r3, #1
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	631a      	str	r2, [r3, #48]	; 0x30
 80046e6:	e01b      	b.n	8004720 <HAL_ADC_Init+0x314>
 80046e8:	24000400 	.word	0x24000400
 80046ec:	053e2d63 	.word	0x053e2d63
 80046f0:	40022000 	.word	0x40022000
 80046f4:	40022100 	.word	0x40022100
 80046f8:	58026000 	.word	0x58026000
 80046fc:	40022300 	.word	0x40022300
 8004700:	58026300 	.word	0x58026300
 8004704:	fff0c003 	.word	0xfff0c003
 8004708:	ffffbffc 	.word	0xffffbffc
 800470c:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 020f 	bic.w	r2, r2, #15
 800471e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004724:	f023 0303 	bic.w	r3, r3, #3
 8004728:	f043 0201 	orr.w	r2, r3, #1
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	655a      	str	r2, [r3, #84]	; 0x54
 8004730:	e007      	b.n	8004742 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004736:	f043 0210 	orr.w	r2, r3, #16
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004742:	7ffb      	ldrb	r3, [r7, #31]
}
 8004744:	4618      	mov	r0, r3
 8004746:	3724      	adds	r7, #36	; 0x24
 8004748:	46bd      	mov	sp, r7
 800474a:	bd90      	pop	{r4, r7, pc}

0800474c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800474c:	b590      	push	{r4, r7, lr}
 800474e:	b0a1      	sub	sp, #132	; 0x84
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004756:	2300      	movs	r3, #0
 8004758:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800475c:	2300      	movs	r3, #0
 800475e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	4a9d      	ldr	r2, [pc, #628]	; (80049dc <HAL_ADC_ConfigChannel+0x290>)
 8004766:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800476e:	2b01      	cmp	r3, #1
 8004770:	d101      	bne.n	8004776 <HAL_ADC_ConfigChannel+0x2a>
 8004772:	2302      	movs	r3, #2
 8004774:	e321      	b.n	8004dba <HAL_ADC_ConfigChannel+0x66e>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4618      	mov	r0, r3
 8004784:	f7ff fe1b 	bl	80043be <LL_ADC_REG_IsConversionOngoing>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	f040 8306 	bne.w	8004d9c <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004798:	2b00      	cmp	r3, #0
 800479a:	d108      	bne.n	80047ae <HAL_ADC_ConfigChannel+0x62>
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	0e9b      	lsrs	r3, r3, #26
 80047a2:	f003 031f 	and.w	r3, r3, #31
 80047a6:	2201      	movs	r2, #1
 80047a8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ac:	e016      	b.n	80047dc <HAL_ADC_ConfigChannel+0x90>
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047b6:	fa93 f3a3 	rbit	r3, r3
 80047ba:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80047bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047be:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80047c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80047c6:	2320      	movs	r3, #32
 80047c8:	e003      	b.n	80047d2 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80047ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047cc:	fab3 f383 	clz	r3, r3
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	f003 031f 	and.w	r3, r3, #31
 80047d6:	2201      	movs	r2, #1
 80047d8:	fa02 f303 	lsl.w	r3, r2, r3
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	6812      	ldr	r2, [r2, #0]
 80047e0:	69d1      	ldr	r1, [r2, #28]
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	6812      	ldr	r2, [r2, #0]
 80047e6:	430b      	orrs	r3, r1
 80047e8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6818      	ldr	r0, [r3, #0]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	6859      	ldr	r1, [r3, #4]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	461a      	mov	r2, r3
 80047f8:	f7ff fd04 	bl	8004204 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4618      	mov	r0, r3
 8004802:	f7ff fddc 	bl	80043be <LL_ADC_REG_IsConversionOngoing>
 8004806:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff fde9 	bl	80043e4 <LL_ADC_INJ_IsConversionOngoing>
 8004812:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004814:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004816:	2b00      	cmp	r3, #0
 8004818:	f040 80b3 	bne.w	8004982 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800481c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800481e:	2b00      	cmp	r3, #0
 8004820:	f040 80af 	bne.w	8004982 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6818      	ldr	r0, [r3, #0]
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	6819      	ldr	r1, [r3, #0]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	461a      	mov	r2, r3
 8004832:	f7ff fd13 	bl	800425c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004836:	4b6a      	ldr	r3, [pc, #424]	; (80049e0 <HAL_ADC_ConfigChannel+0x294>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800483e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004842:	d10b      	bne.n	800485c <HAL_ADC_ConfigChannel+0x110>
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	695a      	ldr	r2, [r3, #20]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	089b      	lsrs	r3, r3, #2
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	fa02 f303 	lsl.w	r3, r2, r3
 800485a:	e01d      	b.n	8004898 <HAL_ADC_ConfigChannel+0x14c>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	f003 0310 	and.w	r3, r3, #16
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10b      	bne.n	8004882 <HAL_ADC_ConfigChannel+0x136>
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	695a      	ldr	r2, [r3, #20]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	089b      	lsrs	r3, r3, #2
 8004876:	f003 0307 	and.w	r3, r3, #7
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	fa02 f303 	lsl.w	r3, r2, r3
 8004880:	e00a      	b.n	8004898 <HAL_ADC_ConfigChannel+0x14c>
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	695a      	ldr	r2, [r3, #20]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	089b      	lsrs	r3, r3, #2
 800488e:	f003 0304 	and.w	r3, r3, #4
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	fa02 f303 	lsl.w	r3, r2, r3
 8004898:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	2b04      	cmp	r3, #4
 80048a0:	d027      	beq.n	80048f2 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6818      	ldr	r0, [r3, #0]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	6919      	ldr	r1, [r3, #16]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048b0:	f7ff fc54 	bl	800415c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6818      	ldr	r0, [r3, #0]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	6919      	ldr	r1, [r3, #16]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	7e5b      	ldrb	r3, [r3, #25]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d102      	bne.n	80048ca <HAL_ADC_ConfigChannel+0x17e>
 80048c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80048c8:	e000      	b.n	80048cc <HAL_ADC_ConfigChannel+0x180>
 80048ca:	2300      	movs	r3, #0
 80048cc:	461a      	mov	r2, r3
 80048ce:	f7ff fc7e 	bl	80041ce <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6818      	ldr	r0, [r3, #0]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	6919      	ldr	r1, [r3, #16]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	7e1b      	ldrb	r3, [r3, #24]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d102      	bne.n	80048e8 <HAL_ADC_ConfigChannel+0x19c>
 80048e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80048e6:	e000      	b.n	80048ea <HAL_ADC_ConfigChannel+0x19e>
 80048e8:	2300      	movs	r3, #0
 80048ea:	461a      	mov	r2, r3
 80048ec:	f7ff fc56 	bl	800419c <LL_ADC_SetDataRightShift>
 80048f0:	e047      	b.n	8004982 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	069b      	lsls	r3, r3, #26
 8004902:	429a      	cmp	r2, r3
 8004904:	d107      	bne.n	8004916 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004914:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800491c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	069b      	lsls	r3, r3, #26
 8004926:	429a      	cmp	r2, r3
 8004928:	d107      	bne.n	800493a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004938:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004940:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	069b      	lsls	r3, r3, #26
 800494a:	429a      	cmp	r2, r3
 800494c:	d107      	bne.n	800495e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800495c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004964:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	069b      	lsls	r3, r3, #26
 800496e:	429a      	cmp	r2, r3
 8004970:	d107      	bne.n	8004982 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004980:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4618      	mov	r0, r3
 8004988:	f7ff fd06 	bl	8004398 <LL_ADC_IsEnabled>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	f040 820d 	bne.w	8004dae <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6818      	ldr	r0, [r3, #0]
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	6819      	ldr	r1, [r3, #0]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	461a      	mov	r2, r3
 80049a2:	f7ff fc87 	bl	80042b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	4a0c      	ldr	r2, [pc, #48]	; (80049dc <HAL_ADC_ConfigChannel+0x290>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	f040 8133 	bne.w	8004c18 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d110      	bne.n	80049e4 <HAL_ADC_ConfigChannel+0x298>
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	0e9b      	lsrs	r3, r3, #26
 80049c8:	3301      	adds	r3, #1
 80049ca:	f003 031f 	and.w	r3, r3, #31
 80049ce:	2b09      	cmp	r3, #9
 80049d0:	bf94      	ite	ls
 80049d2:	2301      	movls	r3, #1
 80049d4:	2300      	movhi	r3, #0
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	e01e      	b.n	8004a18 <HAL_ADC_ConfigChannel+0x2cc>
 80049da:	bf00      	nop
 80049dc:	47ff0000 	.word	0x47ff0000
 80049e0:	5c001000 	.word	0x5c001000
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049ec:	fa93 f3a3 	rbit	r3, r3
 80049f0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80049f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80049f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d101      	bne.n	8004a00 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80049fc:	2320      	movs	r3, #32
 80049fe:	e003      	b.n	8004a08 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8004a00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a02:	fab3 f383 	clz	r3, r3
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	3301      	adds	r3, #1
 8004a0a:	f003 031f 	and.w	r3, r3, #31
 8004a0e:	2b09      	cmp	r3, #9
 8004a10:	bf94      	ite	ls
 8004a12:	2301      	movls	r3, #1
 8004a14:	2300      	movhi	r3, #0
 8004a16:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d079      	beq.n	8004b10 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d107      	bne.n	8004a38 <HAL_ADC_ConfigChannel+0x2ec>
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	0e9b      	lsrs	r3, r3, #26
 8004a2e:	3301      	adds	r3, #1
 8004a30:	069b      	lsls	r3, r3, #26
 8004a32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a36:	e015      	b.n	8004a64 <HAL_ADC_ConfigChannel+0x318>
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a40:	fa93 f3a3 	rbit	r3, r3
 8004a44:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004a46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a48:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d101      	bne.n	8004a54 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8004a50:	2320      	movs	r3, #32
 8004a52:	e003      	b.n	8004a5c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004a54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a56:	fab3 f383 	clz	r3, r3
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	069b      	lsls	r3, r3, #26
 8004a60:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d109      	bne.n	8004a84 <HAL_ADC_ConfigChannel+0x338>
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	0e9b      	lsrs	r3, r3, #26
 8004a76:	3301      	adds	r3, #1
 8004a78:	f003 031f 	and.w	r3, r3, #31
 8004a7c:	2101      	movs	r1, #1
 8004a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a82:	e017      	b.n	8004ab4 <HAL_ADC_ConfigChannel+0x368>
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a8c:	fa93 f3a3 	rbit	r3, r3
 8004a90:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a94:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004a96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d101      	bne.n	8004aa0 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8004a9c:	2320      	movs	r3, #32
 8004a9e:	e003      	b.n	8004aa8 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8004aa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aa2:	fab3 f383 	clz	r3, r3
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	f003 031f 	and.w	r3, r3, #31
 8004aae:	2101      	movs	r1, #1
 8004ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab4:	ea42 0103 	orr.w	r1, r2, r3
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10a      	bne.n	8004ada <HAL_ADC_ConfigChannel+0x38e>
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	0e9b      	lsrs	r3, r3, #26
 8004aca:	3301      	adds	r3, #1
 8004acc:	f003 021f 	and.w	r2, r3, #31
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	4413      	add	r3, r2
 8004ad6:	051b      	lsls	r3, r3, #20
 8004ad8:	e018      	b.n	8004b0c <HAL_ADC_ConfigChannel+0x3c0>
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae2:	fa93 f3a3 	rbit	r3, r3
 8004ae6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aea:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8004af2:	2320      	movs	r3, #32
 8004af4:	e003      	b.n	8004afe <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8004af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af8:	fab3 f383 	clz	r3, r3
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	3301      	adds	r3, #1
 8004b00:	f003 021f 	and.w	r2, r3, #31
 8004b04:	4613      	mov	r3, r2
 8004b06:	005b      	lsls	r3, r3, #1
 8004b08:	4413      	add	r3, r2
 8004b0a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b0c:	430b      	orrs	r3, r1
 8004b0e:	e07e      	b.n	8004c0e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d107      	bne.n	8004b2c <HAL_ADC_ConfigChannel+0x3e0>
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	0e9b      	lsrs	r3, r3, #26
 8004b22:	3301      	adds	r3, #1
 8004b24:	069b      	lsls	r3, r3, #26
 8004b26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b2a:	e015      	b.n	8004b58 <HAL_ADC_ConfigChannel+0x40c>
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b34:	fa93 f3a3 	rbit	r3, r3
 8004b38:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d101      	bne.n	8004b48 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004b44:	2320      	movs	r3, #32
 8004b46:	e003      	b.n	8004b50 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4a:	fab3 f383 	clz	r3, r3
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	3301      	adds	r3, #1
 8004b52:	069b      	lsls	r3, r3, #26
 8004b54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d109      	bne.n	8004b78 <HAL_ADC_ConfigChannel+0x42c>
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	0e9b      	lsrs	r3, r3, #26
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	f003 031f 	and.w	r3, r3, #31
 8004b70:	2101      	movs	r1, #1
 8004b72:	fa01 f303 	lsl.w	r3, r1, r3
 8004b76:	e017      	b.n	8004ba8 <HAL_ADC_ConfigChannel+0x45c>
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	fa93 f3a3 	rbit	r3, r3
 8004b84:	61bb      	str	r3, [r7, #24]
  return result;
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004b8a:	6a3b      	ldr	r3, [r7, #32]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8004b90:	2320      	movs	r3, #32
 8004b92:	e003      	b.n	8004b9c <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8004b94:	6a3b      	ldr	r3, [r7, #32]
 8004b96:	fab3 f383 	clz	r3, r3
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	f003 031f 	and.w	r3, r3, #31
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba8:	ea42 0103 	orr.w	r1, r2, r3
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10d      	bne.n	8004bd4 <HAL_ADC_ConfigChannel+0x488>
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	0e9b      	lsrs	r3, r3, #26
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	f003 021f 	and.w	r2, r3, #31
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	4413      	add	r3, r2
 8004bca:	3b1e      	subs	r3, #30
 8004bcc:	051b      	lsls	r3, r3, #20
 8004bce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004bd2:	e01b      	b.n	8004c0c <HAL_ADC_ConfigChannel+0x4c0>
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	fa93 f3a3 	rbit	r3, r3
 8004be0:	60fb      	str	r3, [r7, #12]
  return result;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d101      	bne.n	8004bf0 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8004bec:	2320      	movs	r3, #32
 8004bee:	e003      	b.n	8004bf8 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	fab3 f383 	clz	r3, r3
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	f003 021f 	and.w	r2, r3, #31
 8004bfe:	4613      	mov	r3, r2
 8004c00:	005b      	lsls	r3, r3, #1
 8004c02:	4413      	add	r3, r2
 8004c04:	3b1e      	subs	r3, #30
 8004c06:	051b      	lsls	r3, r3, #20
 8004c08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c0c:	430b      	orrs	r3, r1
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	6892      	ldr	r2, [r2, #8]
 8004c12:	4619      	mov	r1, r3
 8004c14:	f7ff fb22 	bl	800425c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f280 80c6 	bge.w	8004dae <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a67      	ldr	r2, [pc, #412]	; (8004dc4 <HAL_ADC_ConfigChannel+0x678>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d004      	beq.n	8004c36 <HAL_ADC_ConfigChannel+0x4ea>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a65      	ldr	r2, [pc, #404]	; (8004dc8 <HAL_ADC_ConfigChannel+0x67c>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d101      	bne.n	8004c3a <HAL_ADC_ConfigChannel+0x4ee>
 8004c36:	4b65      	ldr	r3, [pc, #404]	; (8004dcc <HAL_ADC_ConfigChannel+0x680>)
 8004c38:	e000      	b.n	8004c3c <HAL_ADC_ConfigChannel+0x4f0>
 8004c3a:	4b65      	ldr	r3, [pc, #404]	; (8004dd0 <HAL_ADC_ConfigChannel+0x684>)
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7ff fa7f 	bl	8004140 <LL_ADC_GetCommonPathInternalCh>
 8004c42:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a5e      	ldr	r2, [pc, #376]	; (8004dc4 <HAL_ADC_ConfigChannel+0x678>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d004      	beq.n	8004c58 <HAL_ADC_ConfigChannel+0x50c>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a5d      	ldr	r2, [pc, #372]	; (8004dc8 <HAL_ADC_ConfigChannel+0x67c>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d10e      	bne.n	8004c76 <HAL_ADC_ConfigChannel+0x52a>
 8004c58:	485a      	ldr	r0, [pc, #360]	; (8004dc4 <HAL_ADC_ConfigChannel+0x678>)
 8004c5a:	f7ff fb9d 	bl	8004398 <LL_ADC_IsEnabled>
 8004c5e:	4604      	mov	r4, r0
 8004c60:	4859      	ldr	r0, [pc, #356]	; (8004dc8 <HAL_ADC_ConfigChannel+0x67c>)
 8004c62:	f7ff fb99 	bl	8004398 <LL_ADC_IsEnabled>
 8004c66:	4603      	mov	r3, r0
 8004c68:	4323      	orrs	r3, r4
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	bf0c      	ite	eq
 8004c6e:	2301      	moveq	r3, #1
 8004c70:	2300      	movne	r3, #0
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	e008      	b.n	8004c88 <HAL_ADC_ConfigChannel+0x53c>
 8004c76:	4857      	ldr	r0, [pc, #348]	; (8004dd4 <HAL_ADC_ConfigChannel+0x688>)
 8004c78:	f7ff fb8e 	bl	8004398 <LL_ADC_IsEnabled>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	bf0c      	ite	eq
 8004c82:	2301      	moveq	r3, #1
 8004c84:	2300      	movne	r3, #0
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d07d      	beq.n	8004d88 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a51      	ldr	r2, [pc, #324]	; (8004dd8 <HAL_ADC_ConfigChannel+0x68c>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d130      	bne.n	8004cf8 <HAL_ADC_ConfigChannel+0x5ac>
 8004c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d12b      	bne.n	8004cf8 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a4b      	ldr	r2, [pc, #300]	; (8004dd4 <HAL_ADC_ConfigChannel+0x688>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	f040 8081 	bne.w	8004dae <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a44      	ldr	r2, [pc, #272]	; (8004dc4 <HAL_ADC_ConfigChannel+0x678>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d004      	beq.n	8004cc0 <HAL_ADC_ConfigChannel+0x574>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a43      	ldr	r2, [pc, #268]	; (8004dc8 <HAL_ADC_ConfigChannel+0x67c>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d101      	bne.n	8004cc4 <HAL_ADC_ConfigChannel+0x578>
 8004cc0:	4a42      	ldr	r2, [pc, #264]	; (8004dcc <HAL_ADC_ConfigChannel+0x680>)
 8004cc2:	e000      	b.n	8004cc6 <HAL_ADC_ConfigChannel+0x57a>
 8004cc4:	4a42      	ldr	r2, [pc, #264]	; (8004dd0 <HAL_ADC_ConfigChannel+0x684>)
 8004cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cc8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4610      	mov	r0, r2
 8004cd0:	f7ff fa23 	bl	800411a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004cd4:	4b41      	ldr	r3, [pc, #260]	; (8004ddc <HAL_ADC_ConfigChannel+0x690>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	099b      	lsrs	r3, r3, #6
 8004cda:	4a41      	ldr	r2, [pc, #260]	; (8004de0 <HAL_ADC_ConfigChannel+0x694>)
 8004cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce0:	099b      	lsrs	r3, r3, #6
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	005b      	lsls	r3, r3, #1
 8004ce6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004ce8:	e002      	b.n	8004cf0 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	3b01      	subs	r3, #1
 8004cee:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1f9      	bne.n	8004cea <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004cf6:	e05a      	b.n	8004dae <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a39      	ldr	r2, [pc, #228]	; (8004de4 <HAL_ADC_ConfigChannel+0x698>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d11e      	bne.n	8004d40 <HAL_ADC_ConfigChannel+0x5f4>
 8004d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d119      	bne.n	8004d40 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a30      	ldr	r2, [pc, #192]	; (8004dd4 <HAL_ADC_ConfigChannel+0x688>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d14b      	bne.n	8004dae <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a2a      	ldr	r2, [pc, #168]	; (8004dc4 <HAL_ADC_ConfigChannel+0x678>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d004      	beq.n	8004d2a <HAL_ADC_ConfigChannel+0x5de>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a28      	ldr	r2, [pc, #160]	; (8004dc8 <HAL_ADC_ConfigChannel+0x67c>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d101      	bne.n	8004d2e <HAL_ADC_ConfigChannel+0x5e2>
 8004d2a:	4a28      	ldr	r2, [pc, #160]	; (8004dcc <HAL_ADC_ConfigChannel+0x680>)
 8004d2c:	e000      	b.n	8004d30 <HAL_ADC_ConfigChannel+0x5e4>
 8004d2e:	4a28      	ldr	r2, [pc, #160]	; (8004dd0 <HAL_ADC_ConfigChannel+0x684>)
 8004d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d36:	4619      	mov	r1, r3
 8004d38:	4610      	mov	r0, r2
 8004d3a:	f7ff f9ee 	bl	800411a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d3e:	e036      	b.n	8004dae <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a28      	ldr	r2, [pc, #160]	; (8004de8 <HAL_ADC_ConfigChannel+0x69c>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d131      	bne.n	8004dae <HAL_ADC_ConfigChannel+0x662>
 8004d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d12c      	bne.n	8004dae <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a1e      	ldr	r2, [pc, #120]	; (8004dd4 <HAL_ADC_ConfigChannel+0x688>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d127      	bne.n	8004dae <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a18      	ldr	r2, [pc, #96]	; (8004dc4 <HAL_ADC_ConfigChannel+0x678>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d004      	beq.n	8004d72 <HAL_ADC_ConfigChannel+0x626>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a16      	ldr	r2, [pc, #88]	; (8004dc8 <HAL_ADC_ConfigChannel+0x67c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d101      	bne.n	8004d76 <HAL_ADC_ConfigChannel+0x62a>
 8004d72:	4a16      	ldr	r2, [pc, #88]	; (8004dcc <HAL_ADC_ConfigChannel+0x680>)
 8004d74:	e000      	b.n	8004d78 <HAL_ADC_ConfigChannel+0x62c>
 8004d76:	4a16      	ldr	r2, [pc, #88]	; (8004dd0 <HAL_ADC_ConfigChannel+0x684>)
 8004d78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d7e:	4619      	mov	r1, r3
 8004d80:	4610      	mov	r0, r2
 8004d82:	f7ff f9ca 	bl	800411a <LL_ADC_SetCommonPathInternalCh>
 8004d86:	e012      	b.n	8004dae <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d8c:	f043 0220 	orr.w	r2, r3, #32
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004d9a:	e008      	b.n	8004dae <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da0:	f043 0220 	orr.w	r2, r3, #32
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004db6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3784      	adds	r7, #132	; 0x84
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd90      	pop	{r4, r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	40022000 	.word	0x40022000
 8004dc8:	40022100 	.word	0x40022100
 8004dcc:	40022300 	.word	0x40022300
 8004dd0:	58026300 	.word	0x58026300
 8004dd4:	58026000 	.word	0x58026000
 8004dd8:	cb840000 	.word	0xcb840000
 8004ddc:	24000400 	.word	0x24000400
 8004de0:	053e2d63 	.word	0x053e2d63
 8004de4:	c7520000 	.word	0xc7520000
 8004de8:	cfb80000 	.word	0xcfb80000

08004dec <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a79      	ldr	r2, [pc, #484]	; (8004fe0 <ADC_ConfigureBoostMode+0x1f4>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d004      	beq.n	8004e08 <ADC_ConfigureBoostMode+0x1c>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a78      	ldr	r2, [pc, #480]	; (8004fe4 <ADC_ConfigureBoostMode+0x1f8>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d109      	bne.n	8004e1c <ADC_ConfigureBoostMode+0x30>
 8004e08:	4b77      	ldr	r3, [pc, #476]	; (8004fe8 <ADC_ConfigureBoostMode+0x1fc>)
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	bf14      	ite	ne
 8004e14:	2301      	movne	r3, #1
 8004e16:	2300      	moveq	r3, #0
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	e008      	b.n	8004e2e <ADC_ConfigureBoostMode+0x42>
 8004e1c:	4b73      	ldr	r3, [pc, #460]	; (8004fec <ADC_ConfigureBoostMode+0x200>)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	bf14      	ite	ne
 8004e28:	2301      	movne	r3, #1
 8004e2a:	2300      	moveq	r3, #0
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d01c      	beq.n	8004e6c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004e32:	f005 fd9f 	bl	800a974 <HAL_RCC_GetHCLKFreq>
 8004e36:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e40:	d010      	beq.n	8004e64 <ADC_ConfigureBoostMode+0x78>
 8004e42:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e46:	d871      	bhi.n	8004f2c <ADC_ConfigureBoostMode+0x140>
 8004e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e4c:	d002      	beq.n	8004e54 <ADC_ConfigureBoostMode+0x68>
 8004e4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e52:	d16b      	bne.n	8004f2c <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	0c1b      	lsrs	r3, r3, #16
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e60:	60fb      	str	r3, [r7, #12]
        break;
 8004e62:	e066      	b.n	8004f32 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	089b      	lsrs	r3, r3, #2
 8004e68:	60fb      	str	r3, [r7, #12]
        break;
 8004e6a:	e062      	b.n	8004f32 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004e6c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004e70:	f006 fd1c 	bl	800b8ac <HAL_RCCEx_GetPeriphCLKFreq>
 8004e74:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004e7e:	d051      	beq.n	8004f24 <ADC_ConfigureBoostMode+0x138>
 8004e80:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004e84:	d854      	bhi.n	8004f30 <ADC_ConfigureBoostMode+0x144>
 8004e86:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004e8a:	d047      	beq.n	8004f1c <ADC_ConfigureBoostMode+0x130>
 8004e8c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004e90:	d84e      	bhi.n	8004f30 <ADC_ConfigureBoostMode+0x144>
 8004e92:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004e96:	d03d      	beq.n	8004f14 <ADC_ConfigureBoostMode+0x128>
 8004e98:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004e9c:	d848      	bhi.n	8004f30 <ADC_ConfigureBoostMode+0x144>
 8004e9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ea2:	d033      	beq.n	8004f0c <ADC_ConfigureBoostMode+0x120>
 8004ea4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ea8:	d842      	bhi.n	8004f30 <ADC_ConfigureBoostMode+0x144>
 8004eaa:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004eae:	d029      	beq.n	8004f04 <ADC_ConfigureBoostMode+0x118>
 8004eb0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004eb4:	d83c      	bhi.n	8004f30 <ADC_ConfigureBoostMode+0x144>
 8004eb6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004eba:	d01a      	beq.n	8004ef2 <ADC_ConfigureBoostMode+0x106>
 8004ebc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004ec0:	d836      	bhi.n	8004f30 <ADC_ConfigureBoostMode+0x144>
 8004ec2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004ec6:	d014      	beq.n	8004ef2 <ADC_ConfigureBoostMode+0x106>
 8004ec8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004ecc:	d830      	bhi.n	8004f30 <ADC_ConfigureBoostMode+0x144>
 8004ece:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ed2:	d00e      	beq.n	8004ef2 <ADC_ConfigureBoostMode+0x106>
 8004ed4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ed8:	d82a      	bhi.n	8004f30 <ADC_ConfigureBoostMode+0x144>
 8004eda:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004ede:	d008      	beq.n	8004ef2 <ADC_ConfigureBoostMode+0x106>
 8004ee0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004ee4:	d824      	bhi.n	8004f30 <ADC_ConfigureBoostMode+0x144>
 8004ee6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004eea:	d002      	beq.n	8004ef2 <ADC_ConfigureBoostMode+0x106>
 8004eec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ef0:	d11e      	bne.n	8004f30 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	0c9b      	lsrs	r3, r3, #18
 8004ef8:	005b      	lsls	r3, r3, #1
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f00:	60fb      	str	r3, [r7, #12]
        break;
 8004f02:	e016      	b.n	8004f32 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	091b      	lsrs	r3, r3, #4
 8004f08:	60fb      	str	r3, [r7, #12]
        break;
 8004f0a:	e012      	b.n	8004f32 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	095b      	lsrs	r3, r3, #5
 8004f10:	60fb      	str	r3, [r7, #12]
        break;
 8004f12:	e00e      	b.n	8004f32 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	099b      	lsrs	r3, r3, #6
 8004f18:	60fb      	str	r3, [r7, #12]
        break;
 8004f1a:	e00a      	b.n	8004f32 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	09db      	lsrs	r3, r3, #7
 8004f20:	60fb      	str	r3, [r7, #12]
        break;
 8004f22:	e006      	b.n	8004f32 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	0a1b      	lsrs	r3, r3, #8
 8004f28:	60fb      	str	r3, [r7, #12]
        break;
 8004f2a:	e002      	b.n	8004f32 <ADC_ConfigureBoostMode+0x146>
        break;
 8004f2c:	bf00      	nop
 8004f2e:	e000      	b.n	8004f32 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8004f30:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004f32:	f7ff f895 	bl	8004060 <HAL_GetREVID>
 8004f36:	4603      	mov	r3, r0
 8004f38:	f241 0203 	movw	r2, #4099	; 0x1003
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d815      	bhi.n	8004f6c <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4a2b      	ldr	r2, [pc, #172]	; (8004ff0 <ADC_ConfigureBoostMode+0x204>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d908      	bls.n	8004f5a <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	689a      	ldr	r2, [r3, #8]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f56:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004f58:	e03e      	b.n	8004fd8 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689a      	ldr	r2, [r3, #8]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f68:	609a      	str	r2, [r3, #8]
}
 8004f6a:	e035      	b.n	8004fd8 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	085b      	lsrs	r3, r3, #1
 8004f70:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	4a1f      	ldr	r2, [pc, #124]	; (8004ff4 <ADC_ConfigureBoostMode+0x208>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d808      	bhi.n	8004f8c <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	689a      	ldr	r2, [r3, #8]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004f88:	609a      	str	r2, [r3, #8]
}
 8004f8a:	e025      	b.n	8004fd8 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4a1a      	ldr	r2, [pc, #104]	; (8004ff8 <ADC_ConfigureBoostMode+0x20c>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d80a      	bhi.n	8004faa <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fa6:	609a      	str	r2, [r3, #8]
}
 8004fa8:	e016      	b.n	8004fd8 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	4a13      	ldr	r2, [pc, #76]	; (8004ffc <ADC_ConfigureBoostMode+0x210>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d80a      	bhi.n	8004fc8 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fc4:	609a      	str	r2, [r3, #8]
}
 8004fc6:	e007      	b.n	8004fd8 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689a      	ldr	r2, [r3, #8]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004fd6:	609a      	str	r2, [r3, #8]
}
 8004fd8:	bf00      	nop
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	40022000 	.word	0x40022000
 8004fe4:	40022100 	.word	0x40022100
 8004fe8:	40022300 	.word	0x40022300
 8004fec:	58026300 	.word	0x58026300
 8004ff0:	01312d00 	.word	0x01312d00
 8004ff4:	005f5e10 	.word	0x005f5e10
 8004ff8:	00bebc20 	.word	0x00bebc20
 8004ffc:	017d7840 	.word	0x017d7840

08005000 <LL_ADC_IsEnabled>:
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	2b01      	cmp	r3, #1
 8005012:	d101      	bne.n	8005018 <LL_ADC_IsEnabled+0x18>
 8005014:	2301      	movs	r3, #1
 8005016:	e000      	b.n	800501a <LL_ADC_IsEnabled+0x1a>
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <LL_ADC_REG_IsConversionOngoing>:
{
 8005026:	b480      	push	{r7}
 8005028:	b083      	sub	sp, #12
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f003 0304 	and.w	r3, r3, #4
 8005036:	2b04      	cmp	r3, #4
 8005038:	d101      	bne.n	800503e <LL_ADC_REG_IsConversionOngoing+0x18>
 800503a:	2301      	movs	r3, #1
 800503c:	e000      	b.n	8005040 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800504c:	b590      	push	{r4, r7, lr}
 800504e:	b09f      	sub	sp, #124	; 0x7c
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005056:	2300      	movs	r3, #0
 8005058:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005062:	2b01      	cmp	r3, #1
 8005064:	d101      	bne.n	800506a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005066:	2302      	movs	r3, #2
 8005068:	e0be      	b.n	80051e8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005072:	2300      	movs	r3, #0
 8005074:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005076:	2300      	movs	r3, #0
 8005078:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a5c      	ldr	r2, [pc, #368]	; (80051f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d102      	bne.n	800508a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005084:	4b5b      	ldr	r3, [pc, #364]	; (80051f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005086:	60bb      	str	r3, [r7, #8]
 8005088:	e001      	b.n	800508e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800508a:	2300      	movs	r3, #0
 800508c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10b      	bne.n	80050ac <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005098:	f043 0220 	orr.w	r2, r3, #32
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e09d      	b.n	80051e8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7ff ffb9 	bl	8005026 <LL_ADC_REG_IsConversionOngoing>
 80050b4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7ff ffb3 	bl	8005026 <LL_ADC_REG_IsConversionOngoing>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d17f      	bne.n	80051c6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80050c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d17c      	bne.n	80051c6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a47      	ldr	r2, [pc, #284]	; (80051f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d004      	beq.n	80050e0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a46      	ldr	r2, [pc, #280]	; (80051f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d101      	bne.n	80050e4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80050e0:	4b45      	ldr	r3, [pc, #276]	; (80051f8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80050e2:	e000      	b.n	80050e6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80050e4:	4b45      	ldr	r3, [pc, #276]	; (80051fc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80050e6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d039      	beq.n	8005164 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80050f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	431a      	orrs	r2, r3
 80050fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005100:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a3a      	ldr	r2, [pc, #232]	; (80051f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d004      	beq.n	8005116 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a38      	ldr	r2, [pc, #224]	; (80051f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d10e      	bne.n	8005134 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005116:	4836      	ldr	r0, [pc, #216]	; (80051f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005118:	f7ff ff72 	bl	8005000 <LL_ADC_IsEnabled>
 800511c:	4604      	mov	r4, r0
 800511e:	4835      	ldr	r0, [pc, #212]	; (80051f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005120:	f7ff ff6e 	bl	8005000 <LL_ADC_IsEnabled>
 8005124:	4603      	mov	r3, r0
 8005126:	4323      	orrs	r3, r4
 8005128:	2b00      	cmp	r3, #0
 800512a:	bf0c      	ite	eq
 800512c:	2301      	moveq	r3, #1
 800512e:	2300      	movne	r3, #0
 8005130:	b2db      	uxtb	r3, r3
 8005132:	e008      	b.n	8005146 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8005134:	4832      	ldr	r0, [pc, #200]	; (8005200 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005136:	f7ff ff63 	bl	8005000 <LL_ADC_IsEnabled>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	bf0c      	ite	eq
 8005140:	2301      	moveq	r3, #1
 8005142:	2300      	movne	r3, #0
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d047      	beq.n	80051da <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800514a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800514c:	689a      	ldr	r2, [r3, #8]
 800514e:	4b2d      	ldr	r3, [pc, #180]	; (8005204 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005150:	4013      	ands	r3, r2
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	6811      	ldr	r1, [r2, #0]
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	6892      	ldr	r2, [r2, #8]
 800515a:	430a      	orrs	r2, r1
 800515c:	431a      	orrs	r2, r3
 800515e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005160:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005162:	e03a      	b.n	80051da <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800516c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800516e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a1e      	ldr	r2, [pc, #120]	; (80051f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d004      	beq.n	8005184 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a1d      	ldr	r2, [pc, #116]	; (80051f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d10e      	bne.n	80051a2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8005184:	481a      	ldr	r0, [pc, #104]	; (80051f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005186:	f7ff ff3b 	bl	8005000 <LL_ADC_IsEnabled>
 800518a:	4604      	mov	r4, r0
 800518c:	4819      	ldr	r0, [pc, #100]	; (80051f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800518e:	f7ff ff37 	bl	8005000 <LL_ADC_IsEnabled>
 8005192:	4603      	mov	r3, r0
 8005194:	4323      	orrs	r3, r4
 8005196:	2b00      	cmp	r3, #0
 8005198:	bf0c      	ite	eq
 800519a:	2301      	moveq	r3, #1
 800519c:	2300      	movne	r3, #0
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	e008      	b.n	80051b4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80051a2:	4817      	ldr	r0, [pc, #92]	; (8005200 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80051a4:	f7ff ff2c 	bl	8005000 <LL_ADC_IsEnabled>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	bf0c      	ite	eq
 80051ae:	2301      	moveq	r3, #1
 80051b0:	2300      	movne	r3, #0
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d010      	beq.n	80051da <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80051b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ba:	689a      	ldr	r2, [r3, #8]
 80051bc:	4b11      	ldr	r3, [pc, #68]	; (8005204 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80051be:	4013      	ands	r3, r2
 80051c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80051c2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80051c4:	e009      	b.n	80051da <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ca:	f043 0220 	orr.w	r2, r3, #32
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80051d8:	e000      	b.n	80051dc <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80051da:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80051e4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	377c      	adds	r7, #124	; 0x7c
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd90      	pop	{r4, r7, pc}
 80051f0:	40022000 	.word	0x40022000
 80051f4:	40022100 	.word	0x40022100
 80051f8:	40022300 	.word	0x40022300
 80051fc:	58026300 	.word	0x58026300
 8005200:	58026000 	.word	0x58026000
 8005204:	fffff0e0 	.word	0xfffff0e0

08005208 <__NVIC_SetPriorityGrouping>:
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f003 0307 	and.w	r3, r3, #7
 8005216:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005218:	4b0b      	ldr	r3, [pc, #44]	; (8005248 <__NVIC_SetPriorityGrouping+0x40>)
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005224:	4013      	ands	r3, r2
 8005226:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005230:	4b06      	ldr	r3, [pc, #24]	; (800524c <__NVIC_SetPriorityGrouping+0x44>)
 8005232:	4313      	orrs	r3, r2
 8005234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005236:	4a04      	ldr	r2, [pc, #16]	; (8005248 <__NVIC_SetPriorityGrouping+0x40>)
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	60d3      	str	r3, [r2, #12]
}
 800523c:	bf00      	nop
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr
 8005248:	e000ed00 	.word	0xe000ed00
 800524c:	05fa0000 	.word	0x05fa0000

08005250 <__NVIC_GetPriorityGrouping>:
{
 8005250:	b480      	push	{r7}
 8005252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005254:	4b04      	ldr	r3, [pc, #16]	; (8005268 <__NVIC_GetPriorityGrouping+0x18>)
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	0a1b      	lsrs	r3, r3, #8
 800525a:	f003 0307 	and.w	r3, r3, #7
}
 800525e:	4618      	mov	r0, r3
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	e000ed00 	.word	0xe000ed00

0800526c <__NVIC_EnableIRQ>:
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	4603      	mov	r3, r0
 8005274:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005276:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800527a:	2b00      	cmp	r3, #0
 800527c:	db0b      	blt.n	8005296 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800527e:	88fb      	ldrh	r3, [r7, #6]
 8005280:	f003 021f 	and.w	r2, r3, #31
 8005284:	4907      	ldr	r1, [pc, #28]	; (80052a4 <__NVIC_EnableIRQ+0x38>)
 8005286:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800528a:	095b      	lsrs	r3, r3, #5
 800528c:	2001      	movs	r0, #1
 800528e:	fa00 f202 	lsl.w	r2, r0, r2
 8005292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005296:	bf00      	nop
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	e000e100 	.word	0xe000e100

080052a8 <__NVIC_SetPriority>:
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	4603      	mov	r3, r0
 80052b0:	6039      	str	r1, [r7, #0]
 80052b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80052b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	db0a      	blt.n	80052d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	b2da      	uxtb	r2, r3
 80052c0:	490c      	ldr	r1, [pc, #48]	; (80052f4 <__NVIC_SetPriority+0x4c>)
 80052c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052c6:	0112      	lsls	r2, r2, #4
 80052c8:	b2d2      	uxtb	r2, r2
 80052ca:	440b      	add	r3, r1
 80052cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80052d0:	e00a      	b.n	80052e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	b2da      	uxtb	r2, r3
 80052d6:	4908      	ldr	r1, [pc, #32]	; (80052f8 <__NVIC_SetPriority+0x50>)
 80052d8:	88fb      	ldrh	r3, [r7, #6]
 80052da:	f003 030f 	and.w	r3, r3, #15
 80052de:	3b04      	subs	r3, #4
 80052e0:	0112      	lsls	r2, r2, #4
 80052e2:	b2d2      	uxtb	r2, r2
 80052e4:	440b      	add	r3, r1
 80052e6:	761a      	strb	r2, [r3, #24]
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr
 80052f4:	e000e100 	.word	0xe000e100
 80052f8:	e000ed00 	.word	0xe000ed00

080052fc <NVIC_EncodePriority>:
{
 80052fc:	b480      	push	{r7}
 80052fe:	b089      	sub	sp, #36	; 0x24
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f003 0307 	and.w	r3, r3, #7
 800530e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	f1c3 0307 	rsb	r3, r3, #7
 8005316:	2b04      	cmp	r3, #4
 8005318:	bf28      	it	cs
 800531a:	2304      	movcs	r3, #4
 800531c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	3304      	adds	r3, #4
 8005322:	2b06      	cmp	r3, #6
 8005324:	d902      	bls.n	800532c <NVIC_EncodePriority+0x30>
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	3b03      	subs	r3, #3
 800532a:	e000      	b.n	800532e <NVIC_EncodePriority+0x32>
 800532c:	2300      	movs	r3, #0
 800532e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005330:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	fa02 f303 	lsl.w	r3, r2, r3
 800533a:	43da      	mvns	r2, r3
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	401a      	ands	r2, r3
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005344:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	fa01 f303 	lsl.w	r3, r1, r3
 800534e:	43d9      	mvns	r1, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005354:	4313      	orrs	r3, r2
}
 8005356:	4618      	mov	r0, r3
 8005358:	3724      	adds	r7, #36	; 0x24
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
	...

08005364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	3b01      	subs	r3, #1
 8005370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005374:	d301      	bcc.n	800537a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005376:	2301      	movs	r3, #1
 8005378:	e00f      	b.n	800539a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800537a:	4a0a      	ldr	r2, [pc, #40]	; (80053a4 <SysTick_Config+0x40>)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	3b01      	subs	r3, #1
 8005380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005382:	210f      	movs	r1, #15
 8005384:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005388:	f7ff ff8e 	bl	80052a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800538c:	4b05      	ldr	r3, [pc, #20]	; (80053a4 <SysTick_Config+0x40>)
 800538e:	2200      	movs	r2, #0
 8005390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005392:	4b04      	ldr	r3, [pc, #16]	; (80053a4 <SysTick_Config+0x40>)
 8005394:	2207      	movs	r2, #7
 8005396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	e000e010 	.word	0xe000e010

080053a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f7ff ff29 	bl	8005208 <__NVIC_SetPriorityGrouping>
}
 80053b6:	bf00      	nop
 80053b8:	3708      	adds	r7, #8
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053be:	b580      	push	{r7, lr}
 80053c0:	b086      	sub	sp, #24
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	4603      	mov	r3, r0
 80053c6:	60b9      	str	r1, [r7, #8]
 80053c8:	607a      	str	r2, [r7, #4]
 80053ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80053cc:	f7ff ff40 	bl	8005250 <__NVIC_GetPriorityGrouping>
 80053d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	68b9      	ldr	r1, [r7, #8]
 80053d6:	6978      	ldr	r0, [r7, #20]
 80053d8:	f7ff ff90 	bl	80052fc <NVIC_EncodePriority>
 80053dc:	4602      	mov	r2, r0
 80053de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80053e2:	4611      	mov	r1, r2
 80053e4:	4618      	mov	r0, r3
 80053e6:	f7ff ff5f 	bl	80052a8 <__NVIC_SetPriority>
}
 80053ea:	bf00      	nop
 80053ec:	3718      	adds	r7, #24
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b082      	sub	sp, #8
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	4603      	mov	r3, r0
 80053fa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005400:	4618      	mov	r0, r3
 8005402:	f7ff ff33 	bl	800526c <__NVIC_EnableIRQ>
}
 8005406:	bf00      	nop
 8005408:	3708      	adds	r7, #8
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b082      	sub	sp, #8
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7ff ffa4 	bl	8005364 <SysTick_Config>
 800541c:	4603      	mov	r3, r0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
	...

08005428 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005428:	b480      	push	{r7}
 800542a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800542c:	f3bf 8f5f 	dmb	sy
}
 8005430:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005432:	4b07      	ldr	r3, [pc, #28]	; (8005450 <HAL_MPU_Disable+0x28>)
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	4a06      	ldr	r2, [pc, #24]	; (8005450 <HAL_MPU_Disable+0x28>)
 8005438:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800543c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800543e:	4b05      	ldr	r3, [pc, #20]	; (8005454 <HAL_MPU_Disable+0x2c>)
 8005440:	2200      	movs	r2, #0
 8005442:	605a      	str	r2, [r3, #4]
}
 8005444:	bf00      	nop
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	e000ed00 	.word	0xe000ed00
 8005454:	e000ed90 	.word	0xe000ed90

08005458 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005460:	4a0b      	ldr	r2, [pc, #44]	; (8005490 <HAL_MPU_Enable+0x38>)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f043 0301 	orr.w	r3, r3, #1
 8005468:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800546a:	4b0a      	ldr	r3, [pc, #40]	; (8005494 <HAL_MPU_Enable+0x3c>)
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	4a09      	ldr	r2, [pc, #36]	; (8005494 <HAL_MPU_Enable+0x3c>)
 8005470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005474:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8005476:	f3bf 8f4f 	dsb	sy
}
 800547a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800547c:	f3bf 8f6f 	isb	sy
}
 8005480:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8005482:	bf00      	nop
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	e000ed90 	.word	0xe000ed90
 8005494:	e000ed00 	.word	0xe000ed00

08005498 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	785a      	ldrb	r2, [r3, #1]
 80054a4:	4b1d      	ldr	r3, [pc, #116]	; (800551c <HAL_MPU_ConfigRegion+0x84>)
 80054a6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d029      	beq.n	8005504 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80054b0:	4a1a      	ldr	r2, [pc, #104]	; (800551c <HAL_MPU_ConfigRegion+0x84>)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	7b1b      	ldrb	r3, [r3, #12]
 80054bc:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	7adb      	ldrb	r3, [r3, #11]
 80054c2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80054c4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	7a9b      	ldrb	r3, [r3, #10]
 80054ca:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80054cc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	7b5b      	ldrb	r3, [r3, #13]
 80054d2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80054d4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	7b9b      	ldrb	r3, [r3, #14]
 80054da:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80054dc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	7bdb      	ldrb	r3, [r3, #15]
 80054e2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80054e4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	7a5b      	ldrb	r3, [r3, #9]
 80054ea:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80054ec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	7a1b      	ldrb	r3, [r3, #8]
 80054f2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80054f4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	7812      	ldrb	r2, [r2, #0]
 80054fa:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80054fc:	4a07      	ldr	r2, [pc, #28]	; (800551c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80054fe:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005500:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8005502:	e005      	b.n	8005510 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8005504:	4b05      	ldr	r3, [pc, #20]	; (800551c <HAL_MPU_ConfigRegion+0x84>)
 8005506:	2200      	movs	r2, #0
 8005508:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800550a:	4b04      	ldr	r3, [pc, #16]	; (800551c <HAL_MPU_ConfigRegion+0x84>)
 800550c:	2200      	movs	r2, #0
 800550e:	611a      	str	r2, [r3, #16]
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr
 800551c:	e000ed90 	.word	0xe000ed90

08005520 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8005520:	b480      	push	{r7}
 8005522:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8005524:	4b07      	ldr	r3, [pc, #28]	; (8005544 <HAL_GetCurrentCPUID+0x24>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	091b      	lsrs	r3, r3, #4
 800552a:	f003 030f 	and.w	r3, r3, #15
 800552e:	2b07      	cmp	r3, #7
 8005530:	d101      	bne.n	8005536 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8005532:	2303      	movs	r3, #3
 8005534:	e000      	b.n	8005538 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8005536:	2301      	movs	r3, #1
  }
}
 8005538:	4618      	mov	r0, r3
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	e000ed00 	.word	0xe000ed00

08005548 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e054      	b.n	8005604 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	7f5b      	ldrb	r3, [r3, #29]
 800555e:	b2db      	uxtb	r3, r3
 8005560:	2b00      	cmp	r3, #0
 8005562:	d105      	bne.n	8005570 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f7fb fedc 	bl	8001328 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	791b      	ldrb	r3, [r3, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d10c      	bne.n	8005598 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a22      	ldr	r2, [pc, #136]	; (800560c <HAL_CRC_Init+0xc4>)
 8005584:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	689a      	ldr	r2, [r3, #8]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f022 0218 	bic.w	r2, r2, #24
 8005594:	609a      	str	r2, [r3, #8]
 8005596:	e00c      	b.n	80055b2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6899      	ldr	r1, [r3, #8]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	461a      	mov	r2, r3
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f834 	bl	8005610 <HAL_CRCEx_Polynomial_Set>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e028      	b.n	8005604 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	795b      	ldrb	r3, [r3, #5]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d105      	bne.n	80055c6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055c2:	611a      	str	r2, [r3, #16]
 80055c4:	e004      	b.n	80055d0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	6912      	ldr	r2, [r2, #16]
 80055ce:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	695a      	ldr	r2, [r3, #20]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	699a      	ldr	r2, [r3, #24]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	430a      	orrs	r2, r1
 80055fa:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3708      	adds	r7, #8
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	04c11db7 	.word	0x04c11db7

08005610 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005610:	b480      	push	{r7}
 8005612:	b087      	sub	sp, #28
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800561c:	2300      	movs	r3, #0
 800561e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005620:	231f      	movs	r3, #31
 8005622:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005624:	bf00      	nop
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	1e5a      	subs	r2, r3, #1
 800562a:	613a      	str	r2, [r7, #16]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d009      	beq.n	8005644 <HAL_CRCEx_Polynomial_Set+0x34>
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	f003 031f 	and.w	r3, r3, #31
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	fa22 f303 	lsr.w	r3, r2, r3
 800563c:	f003 0301 	and.w	r3, r3, #1
 8005640:	2b00      	cmp	r3, #0
 8005642:	d0f0      	beq.n	8005626 <HAL_CRCEx_Polynomial_Set+0x16>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b18      	cmp	r3, #24
 8005648:	d846      	bhi.n	80056d8 <HAL_CRCEx_Polynomial_Set+0xc8>
 800564a:	a201      	add	r2, pc, #4	; (adr r2, 8005650 <HAL_CRCEx_Polynomial_Set+0x40>)
 800564c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005650:	080056df 	.word	0x080056df
 8005654:	080056d9 	.word	0x080056d9
 8005658:	080056d9 	.word	0x080056d9
 800565c:	080056d9 	.word	0x080056d9
 8005660:	080056d9 	.word	0x080056d9
 8005664:	080056d9 	.word	0x080056d9
 8005668:	080056d9 	.word	0x080056d9
 800566c:	080056d9 	.word	0x080056d9
 8005670:	080056cd 	.word	0x080056cd
 8005674:	080056d9 	.word	0x080056d9
 8005678:	080056d9 	.word	0x080056d9
 800567c:	080056d9 	.word	0x080056d9
 8005680:	080056d9 	.word	0x080056d9
 8005684:	080056d9 	.word	0x080056d9
 8005688:	080056d9 	.word	0x080056d9
 800568c:	080056d9 	.word	0x080056d9
 8005690:	080056c1 	.word	0x080056c1
 8005694:	080056d9 	.word	0x080056d9
 8005698:	080056d9 	.word	0x080056d9
 800569c:	080056d9 	.word	0x080056d9
 80056a0:	080056d9 	.word	0x080056d9
 80056a4:	080056d9 	.word	0x080056d9
 80056a8:	080056d9 	.word	0x080056d9
 80056ac:	080056d9 	.word	0x080056d9
 80056b0:	080056b5 	.word	0x080056b5
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	2b06      	cmp	r3, #6
 80056b8:	d913      	bls.n	80056e2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80056be:	e010      	b.n	80056e2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	2b07      	cmp	r3, #7
 80056c4:	d90f      	bls.n	80056e6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80056ca:	e00c      	b.n	80056e6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	2b0f      	cmp	r3, #15
 80056d0:	d90b      	bls.n	80056ea <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80056d6:	e008      	b.n	80056ea <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	75fb      	strb	r3, [r7, #23]
      break;
 80056dc:	e006      	b.n	80056ec <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80056de:	bf00      	nop
 80056e0:	e004      	b.n	80056ec <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80056e2:	bf00      	nop
 80056e4:	e002      	b.n	80056ec <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80056e6:	bf00      	nop
 80056e8:	e000      	b.n	80056ec <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80056ea:	bf00      	nop
  }
  if (status == HAL_OK)
 80056ec:	7dfb      	ldrb	r3, [r7, #23]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10d      	bne.n	800570e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68ba      	ldr	r2, [r7, #8]
 80056f8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f023 0118 	bic.w	r1, r3, #24
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	430a      	orrs	r2, r1
 800570c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800570e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005710:	4618      	mov	r0, r3
 8005712:	371c      	adds	r7, #28
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005724:	f7fe fc6c 	bl	8004000 <HAL_GetTick>
 8005728:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d101      	bne.n	8005734 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e316      	b.n	8005d62 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a66      	ldr	r2, [pc, #408]	; (80058d4 <HAL_DMA_Init+0x1b8>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d04a      	beq.n	80057d4 <HAL_DMA_Init+0xb8>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a65      	ldr	r2, [pc, #404]	; (80058d8 <HAL_DMA_Init+0x1bc>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d045      	beq.n	80057d4 <HAL_DMA_Init+0xb8>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a63      	ldr	r2, [pc, #396]	; (80058dc <HAL_DMA_Init+0x1c0>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d040      	beq.n	80057d4 <HAL_DMA_Init+0xb8>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a62      	ldr	r2, [pc, #392]	; (80058e0 <HAL_DMA_Init+0x1c4>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d03b      	beq.n	80057d4 <HAL_DMA_Init+0xb8>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a60      	ldr	r2, [pc, #384]	; (80058e4 <HAL_DMA_Init+0x1c8>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d036      	beq.n	80057d4 <HAL_DMA_Init+0xb8>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a5f      	ldr	r2, [pc, #380]	; (80058e8 <HAL_DMA_Init+0x1cc>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d031      	beq.n	80057d4 <HAL_DMA_Init+0xb8>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a5d      	ldr	r2, [pc, #372]	; (80058ec <HAL_DMA_Init+0x1d0>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d02c      	beq.n	80057d4 <HAL_DMA_Init+0xb8>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a5c      	ldr	r2, [pc, #368]	; (80058f0 <HAL_DMA_Init+0x1d4>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d027      	beq.n	80057d4 <HAL_DMA_Init+0xb8>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a5a      	ldr	r2, [pc, #360]	; (80058f4 <HAL_DMA_Init+0x1d8>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d022      	beq.n	80057d4 <HAL_DMA_Init+0xb8>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a59      	ldr	r2, [pc, #356]	; (80058f8 <HAL_DMA_Init+0x1dc>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d01d      	beq.n	80057d4 <HAL_DMA_Init+0xb8>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a57      	ldr	r2, [pc, #348]	; (80058fc <HAL_DMA_Init+0x1e0>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d018      	beq.n	80057d4 <HAL_DMA_Init+0xb8>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a56      	ldr	r2, [pc, #344]	; (8005900 <HAL_DMA_Init+0x1e4>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d013      	beq.n	80057d4 <HAL_DMA_Init+0xb8>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a54      	ldr	r2, [pc, #336]	; (8005904 <HAL_DMA_Init+0x1e8>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d00e      	beq.n	80057d4 <HAL_DMA_Init+0xb8>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a53      	ldr	r2, [pc, #332]	; (8005908 <HAL_DMA_Init+0x1ec>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d009      	beq.n	80057d4 <HAL_DMA_Init+0xb8>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a51      	ldr	r2, [pc, #324]	; (800590c <HAL_DMA_Init+0x1f0>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d004      	beq.n	80057d4 <HAL_DMA_Init+0xb8>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a50      	ldr	r2, [pc, #320]	; (8005910 <HAL_DMA_Init+0x1f4>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d101      	bne.n	80057d8 <HAL_DMA_Init+0xbc>
 80057d4:	2301      	movs	r3, #1
 80057d6:	e000      	b.n	80057da <HAL_DMA_Init+0xbe>
 80057d8:	2300      	movs	r3, #0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f000 813b 	beq.w	8005a56 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2202      	movs	r2, #2
 80057ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a37      	ldr	r2, [pc, #220]	; (80058d4 <HAL_DMA_Init+0x1b8>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d04a      	beq.n	8005890 <HAL_DMA_Init+0x174>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a36      	ldr	r2, [pc, #216]	; (80058d8 <HAL_DMA_Init+0x1bc>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d045      	beq.n	8005890 <HAL_DMA_Init+0x174>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a34      	ldr	r2, [pc, #208]	; (80058dc <HAL_DMA_Init+0x1c0>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d040      	beq.n	8005890 <HAL_DMA_Init+0x174>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a33      	ldr	r2, [pc, #204]	; (80058e0 <HAL_DMA_Init+0x1c4>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d03b      	beq.n	8005890 <HAL_DMA_Init+0x174>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a31      	ldr	r2, [pc, #196]	; (80058e4 <HAL_DMA_Init+0x1c8>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d036      	beq.n	8005890 <HAL_DMA_Init+0x174>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a30      	ldr	r2, [pc, #192]	; (80058e8 <HAL_DMA_Init+0x1cc>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d031      	beq.n	8005890 <HAL_DMA_Init+0x174>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a2e      	ldr	r2, [pc, #184]	; (80058ec <HAL_DMA_Init+0x1d0>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d02c      	beq.n	8005890 <HAL_DMA_Init+0x174>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a2d      	ldr	r2, [pc, #180]	; (80058f0 <HAL_DMA_Init+0x1d4>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d027      	beq.n	8005890 <HAL_DMA_Init+0x174>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a2b      	ldr	r2, [pc, #172]	; (80058f4 <HAL_DMA_Init+0x1d8>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d022      	beq.n	8005890 <HAL_DMA_Init+0x174>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a2a      	ldr	r2, [pc, #168]	; (80058f8 <HAL_DMA_Init+0x1dc>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d01d      	beq.n	8005890 <HAL_DMA_Init+0x174>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a28      	ldr	r2, [pc, #160]	; (80058fc <HAL_DMA_Init+0x1e0>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d018      	beq.n	8005890 <HAL_DMA_Init+0x174>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a27      	ldr	r2, [pc, #156]	; (8005900 <HAL_DMA_Init+0x1e4>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d013      	beq.n	8005890 <HAL_DMA_Init+0x174>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a25      	ldr	r2, [pc, #148]	; (8005904 <HAL_DMA_Init+0x1e8>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d00e      	beq.n	8005890 <HAL_DMA_Init+0x174>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a24      	ldr	r2, [pc, #144]	; (8005908 <HAL_DMA_Init+0x1ec>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d009      	beq.n	8005890 <HAL_DMA_Init+0x174>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a22      	ldr	r2, [pc, #136]	; (800590c <HAL_DMA_Init+0x1f0>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d004      	beq.n	8005890 <HAL_DMA_Init+0x174>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a21      	ldr	r2, [pc, #132]	; (8005910 <HAL_DMA_Init+0x1f4>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d108      	bne.n	80058a2 <HAL_DMA_Init+0x186>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f022 0201 	bic.w	r2, r2, #1
 800589e:	601a      	str	r2, [r3, #0]
 80058a0:	e007      	b.n	80058b2 <HAL_DMA_Init+0x196>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f022 0201 	bic.w	r2, r2, #1
 80058b0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80058b2:	e02f      	b.n	8005914 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058b4:	f7fe fba4 	bl	8004000 <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	2b05      	cmp	r3, #5
 80058c0:	d928      	bls.n	8005914 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2220      	movs	r2, #32
 80058c6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2203      	movs	r2, #3
 80058cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e246      	b.n	8005d62 <HAL_DMA_Init+0x646>
 80058d4:	40020010 	.word	0x40020010
 80058d8:	40020028 	.word	0x40020028
 80058dc:	40020040 	.word	0x40020040
 80058e0:	40020058 	.word	0x40020058
 80058e4:	40020070 	.word	0x40020070
 80058e8:	40020088 	.word	0x40020088
 80058ec:	400200a0 	.word	0x400200a0
 80058f0:	400200b8 	.word	0x400200b8
 80058f4:	40020410 	.word	0x40020410
 80058f8:	40020428 	.word	0x40020428
 80058fc:	40020440 	.word	0x40020440
 8005900:	40020458 	.word	0x40020458
 8005904:	40020470 	.word	0x40020470
 8005908:	40020488 	.word	0x40020488
 800590c:	400204a0 	.word	0x400204a0
 8005910:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1c8      	bne.n	80058b4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	4b83      	ldr	r3, [pc, #524]	; (8005b3c <HAL_DMA_Init+0x420>)
 800592e:	4013      	ands	r3, r2
 8005930:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800593a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005946:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005952:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a1b      	ldr	r3, [r3, #32]
 8005958:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	4313      	orrs	r3, r2
 800595e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005964:	2b04      	cmp	r3, #4
 8005966:	d107      	bne.n	8005978 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005970:	4313      	orrs	r3, r2
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	4313      	orrs	r3, r2
 8005976:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005978:	4b71      	ldr	r3, [pc, #452]	; (8005b40 <HAL_DMA_Init+0x424>)
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	4b71      	ldr	r3, [pc, #452]	; (8005b44 <HAL_DMA_Init+0x428>)
 800597e:	4013      	ands	r3, r2
 8005980:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005984:	d328      	bcc.n	80059d8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	2b28      	cmp	r3, #40	; 0x28
 800598c:	d903      	bls.n	8005996 <HAL_DMA_Init+0x27a>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	2b2e      	cmp	r3, #46	; 0x2e
 8005994:	d917      	bls.n	80059c6 <HAL_DMA_Init+0x2aa>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	2b3e      	cmp	r3, #62	; 0x3e
 800599c:	d903      	bls.n	80059a6 <HAL_DMA_Init+0x28a>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	2b42      	cmp	r3, #66	; 0x42
 80059a4:	d90f      	bls.n	80059c6 <HAL_DMA_Init+0x2aa>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	2b46      	cmp	r3, #70	; 0x46
 80059ac:	d903      	bls.n	80059b6 <HAL_DMA_Init+0x29a>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	2b48      	cmp	r3, #72	; 0x48
 80059b4:	d907      	bls.n	80059c6 <HAL_DMA_Init+0x2aa>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	2b4e      	cmp	r3, #78	; 0x4e
 80059bc:	d905      	bls.n	80059ca <HAL_DMA_Init+0x2ae>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	2b52      	cmp	r3, #82	; 0x52
 80059c4:	d801      	bhi.n	80059ca <HAL_DMA_Init+0x2ae>
 80059c6:	2301      	movs	r3, #1
 80059c8:	e000      	b.n	80059cc <HAL_DMA_Init+0x2b0>
 80059ca:	2300      	movs	r3, #0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d003      	beq.n	80059d8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059d6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	f023 0307 	bic.w	r3, r3, #7
 80059ee:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fe:	2b04      	cmp	r3, #4
 8005a00:	d117      	bne.n	8005a32 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00e      	beq.n	8005a32 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f001 fddb 	bl	80075d0 <DMA_CheckFifoParam>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d008      	beq.n	8005a32 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2240      	movs	r2, #64	; 0x40
 8005a24:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e197      	b.n	8005d62 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f001 fd16 	bl	800746c <DMA_CalcBaseAndBitshift>
 8005a40:	4603      	mov	r3, r0
 8005a42:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a48:	f003 031f 	and.w	r3, r3, #31
 8005a4c:	223f      	movs	r2, #63	; 0x3f
 8005a4e:	409a      	lsls	r2, r3
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	609a      	str	r2, [r3, #8]
 8005a54:	e0cd      	b.n	8005bf2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a3b      	ldr	r2, [pc, #236]	; (8005b48 <HAL_DMA_Init+0x42c>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d022      	beq.n	8005aa6 <HAL_DMA_Init+0x38a>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a39      	ldr	r2, [pc, #228]	; (8005b4c <HAL_DMA_Init+0x430>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d01d      	beq.n	8005aa6 <HAL_DMA_Init+0x38a>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a38      	ldr	r2, [pc, #224]	; (8005b50 <HAL_DMA_Init+0x434>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d018      	beq.n	8005aa6 <HAL_DMA_Init+0x38a>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a36      	ldr	r2, [pc, #216]	; (8005b54 <HAL_DMA_Init+0x438>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d013      	beq.n	8005aa6 <HAL_DMA_Init+0x38a>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a35      	ldr	r2, [pc, #212]	; (8005b58 <HAL_DMA_Init+0x43c>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d00e      	beq.n	8005aa6 <HAL_DMA_Init+0x38a>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a33      	ldr	r2, [pc, #204]	; (8005b5c <HAL_DMA_Init+0x440>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d009      	beq.n	8005aa6 <HAL_DMA_Init+0x38a>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a32      	ldr	r2, [pc, #200]	; (8005b60 <HAL_DMA_Init+0x444>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d004      	beq.n	8005aa6 <HAL_DMA_Init+0x38a>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a30      	ldr	r2, [pc, #192]	; (8005b64 <HAL_DMA_Init+0x448>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d101      	bne.n	8005aaa <HAL_DMA_Init+0x38e>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e000      	b.n	8005aac <HAL_DMA_Init+0x390>
 8005aaa:	2300      	movs	r3, #0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f000 8097 	beq.w	8005be0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a24      	ldr	r2, [pc, #144]	; (8005b48 <HAL_DMA_Init+0x42c>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d021      	beq.n	8005b00 <HAL_DMA_Init+0x3e4>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a22      	ldr	r2, [pc, #136]	; (8005b4c <HAL_DMA_Init+0x430>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d01c      	beq.n	8005b00 <HAL_DMA_Init+0x3e4>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a21      	ldr	r2, [pc, #132]	; (8005b50 <HAL_DMA_Init+0x434>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d017      	beq.n	8005b00 <HAL_DMA_Init+0x3e4>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a1f      	ldr	r2, [pc, #124]	; (8005b54 <HAL_DMA_Init+0x438>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d012      	beq.n	8005b00 <HAL_DMA_Init+0x3e4>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a1e      	ldr	r2, [pc, #120]	; (8005b58 <HAL_DMA_Init+0x43c>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d00d      	beq.n	8005b00 <HAL_DMA_Init+0x3e4>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a1c      	ldr	r2, [pc, #112]	; (8005b5c <HAL_DMA_Init+0x440>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d008      	beq.n	8005b00 <HAL_DMA_Init+0x3e4>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a1b      	ldr	r2, [pc, #108]	; (8005b60 <HAL_DMA_Init+0x444>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d003      	beq.n	8005b00 <HAL_DMA_Init+0x3e4>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a19      	ldr	r2, [pc, #100]	; (8005b64 <HAL_DMA_Init+0x448>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2202      	movs	r2, #2
 8005b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	4b12      	ldr	r3, [pc, #72]	; (8005b68 <HAL_DMA_Init+0x44c>)
 8005b1e:	4013      	ands	r3, r2
 8005b20:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	2b40      	cmp	r3, #64	; 0x40
 8005b28:	d020      	beq.n	8005b6c <HAL_DMA_Init+0x450>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	2b80      	cmp	r3, #128	; 0x80
 8005b30:	d102      	bne.n	8005b38 <HAL_DMA_Init+0x41c>
 8005b32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005b36:	e01a      	b.n	8005b6e <HAL_DMA_Init+0x452>
 8005b38:	2300      	movs	r3, #0
 8005b3a:	e018      	b.n	8005b6e <HAL_DMA_Init+0x452>
 8005b3c:	fe10803f 	.word	0xfe10803f
 8005b40:	5c001000 	.word	0x5c001000
 8005b44:	ffff0000 	.word	0xffff0000
 8005b48:	58025408 	.word	0x58025408
 8005b4c:	5802541c 	.word	0x5802541c
 8005b50:	58025430 	.word	0x58025430
 8005b54:	58025444 	.word	0x58025444
 8005b58:	58025458 	.word	0x58025458
 8005b5c:	5802546c 	.word	0x5802546c
 8005b60:	58025480 	.word	0x58025480
 8005b64:	58025494 	.word	0x58025494
 8005b68:	fffe000f 	.word	0xfffe000f
 8005b6c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	68d2      	ldr	r2, [r2, #12]
 8005b72:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005b74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005b7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005b84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005b8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	69db      	ldr	r3, [r3, #28]
 8005b92:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005b94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005b9c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	4b6e      	ldr	r3, [pc, #440]	; (8005d6c <HAL_DMA_Init+0x650>)
 8005bb4:	4413      	add	r3, r2
 8005bb6:	4a6e      	ldr	r2, [pc, #440]	; (8005d70 <HAL_DMA_Init+0x654>)
 8005bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bbc:	091b      	lsrs	r3, r3, #4
 8005bbe:	009a      	lsls	r2, r3, #2
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f001 fc51 	bl	800746c <DMA_CalcBaseAndBitshift>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bd2:	f003 031f 	and.w	r3, r3, #31
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	409a      	lsls	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	605a      	str	r2, [r3, #4]
 8005bde:	e008      	b.n	8005bf2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2240      	movs	r2, #64	; 0x40
 8005be4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2203      	movs	r2, #3
 8005bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e0b7      	b.n	8005d62 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a5f      	ldr	r2, [pc, #380]	; (8005d74 <HAL_DMA_Init+0x658>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d072      	beq.n	8005ce2 <HAL_DMA_Init+0x5c6>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a5d      	ldr	r2, [pc, #372]	; (8005d78 <HAL_DMA_Init+0x65c>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d06d      	beq.n	8005ce2 <HAL_DMA_Init+0x5c6>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a5c      	ldr	r2, [pc, #368]	; (8005d7c <HAL_DMA_Init+0x660>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d068      	beq.n	8005ce2 <HAL_DMA_Init+0x5c6>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a5a      	ldr	r2, [pc, #360]	; (8005d80 <HAL_DMA_Init+0x664>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d063      	beq.n	8005ce2 <HAL_DMA_Init+0x5c6>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a59      	ldr	r2, [pc, #356]	; (8005d84 <HAL_DMA_Init+0x668>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d05e      	beq.n	8005ce2 <HAL_DMA_Init+0x5c6>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a57      	ldr	r2, [pc, #348]	; (8005d88 <HAL_DMA_Init+0x66c>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d059      	beq.n	8005ce2 <HAL_DMA_Init+0x5c6>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a56      	ldr	r2, [pc, #344]	; (8005d8c <HAL_DMA_Init+0x670>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d054      	beq.n	8005ce2 <HAL_DMA_Init+0x5c6>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a54      	ldr	r2, [pc, #336]	; (8005d90 <HAL_DMA_Init+0x674>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d04f      	beq.n	8005ce2 <HAL_DMA_Init+0x5c6>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a53      	ldr	r2, [pc, #332]	; (8005d94 <HAL_DMA_Init+0x678>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d04a      	beq.n	8005ce2 <HAL_DMA_Init+0x5c6>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a51      	ldr	r2, [pc, #324]	; (8005d98 <HAL_DMA_Init+0x67c>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d045      	beq.n	8005ce2 <HAL_DMA_Init+0x5c6>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a50      	ldr	r2, [pc, #320]	; (8005d9c <HAL_DMA_Init+0x680>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d040      	beq.n	8005ce2 <HAL_DMA_Init+0x5c6>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a4e      	ldr	r2, [pc, #312]	; (8005da0 <HAL_DMA_Init+0x684>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d03b      	beq.n	8005ce2 <HAL_DMA_Init+0x5c6>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a4d      	ldr	r2, [pc, #308]	; (8005da4 <HAL_DMA_Init+0x688>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d036      	beq.n	8005ce2 <HAL_DMA_Init+0x5c6>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a4b      	ldr	r2, [pc, #300]	; (8005da8 <HAL_DMA_Init+0x68c>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d031      	beq.n	8005ce2 <HAL_DMA_Init+0x5c6>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a4a      	ldr	r2, [pc, #296]	; (8005dac <HAL_DMA_Init+0x690>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d02c      	beq.n	8005ce2 <HAL_DMA_Init+0x5c6>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a48      	ldr	r2, [pc, #288]	; (8005db0 <HAL_DMA_Init+0x694>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d027      	beq.n	8005ce2 <HAL_DMA_Init+0x5c6>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a47      	ldr	r2, [pc, #284]	; (8005db4 <HAL_DMA_Init+0x698>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d022      	beq.n	8005ce2 <HAL_DMA_Init+0x5c6>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a45      	ldr	r2, [pc, #276]	; (8005db8 <HAL_DMA_Init+0x69c>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d01d      	beq.n	8005ce2 <HAL_DMA_Init+0x5c6>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a44      	ldr	r2, [pc, #272]	; (8005dbc <HAL_DMA_Init+0x6a0>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d018      	beq.n	8005ce2 <HAL_DMA_Init+0x5c6>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a42      	ldr	r2, [pc, #264]	; (8005dc0 <HAL_DMA_Init+0x6a4>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d013      	beq.n	8005ce2 <HAL_DMA_Init+0x5c6>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a41      	ldr	r2, [pc, #260]	; (8005dc4 <HAL_DMA_Init+0x6a8>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d00e      	beq.n	8005ce2 <HAL_DMA_Init+0x5c6>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a3f      	ldr	r2, [pc, #252]	; (8005dc8 <HAL_DMA_Init+0x6ac>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d009      	beq.n	8005ce2 <HAL_DMA_Init+0x5c6>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a3e      	ldr	r2, [pc, #248]	; (8005dcc <HAL_DMA_Init+0x6b0>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d004      	beq.n	8005ce2 <HAL_DMA_Init+0x5c6>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a3c      	ldr	r2, [pc, #240]	; (8005dd0 <HAL_DMA_Init+0x6b4>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d101      	bne.n	8005ce6 <HAL_DMA_Init+0x5ca>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e000      	b.n	8005ce8 <HAL_DMA_Init+0x5cc>
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d032      	beq.n	8005d52 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f001 fceb 	bl	80076c8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	2b80      	cmp	r3, #128	; 0x80
 8005cf8:	d102      	bne.n	8005d00 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685a      	ldr	r2, [r3, #4]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d08:	b2d2      	uxtb	r2, r2
 8005d0a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005d14:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d010      	beq.n	8005d40 <HAL_DMA_Init+0x624>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	2b08      	cmp	r3, #8
 8005d24:	d80c      	bhi.n	8005d40 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f001 fd68 	bl	80077fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d30:	2200      	movs	r2, #0
 8005d32:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005d3c:	605a      	str	r2, [r3, #4]
 8005d3e:	e008      	b.n	8005d52 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3718      	adds	r7, #24
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	a7fdabf8 	.word	0xa7fdabf8
 8005d70:	cccccccd 	.word	0xcccccccd
 8005d74:	40020010 	.word	0x40020010
 8005d78:	40020028 	.word	0x40020028
 8005d7c:	40020040 	.word	0x40020040
 8005d80:	40020058 	.word	0x40020058
 8005d84:	40020070 	.word	0x40020070
 8005d88:	40020088 	.word	0x40020088
 8005d8c:	400200a0 	.word	0x400200a0
 8005d90:	400200b8 	.word	0x400200b8
 8005d94:	40020410 	.word	0x40020410
 8005d98:	40020428 	.word	0x40020428
 8005d9c:	40020440 	.word	0x40020440
 8005da0:	40020458 	.word	0x40020458
 8005da4:	40020470 	.word	0x40020470
 8005da8:	40020488 	.word	0x40020488
 8005dac:	400204a0 	.word	0x400204a0
 8005db0:	400204b8 	.word	0x400204b8
 8005db4:	58025408 	.word	0x58025408
 8005db8:	5802541c 	.word	0x5802541c
 8005dbc:	58025430 	.word	0x58025430
 8005dc0:	58025444 	.word	0x58025444
 8005dc4:	58025458 	.word	0x58025458
 8005dc8:	5802546c 	.word	0x5802546c
 8005dcc:	58025480 	.word	0x58025480
 8005dd0:	58025494 	.word	0x58025494

08005dd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
 8005de0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005de2:	2300      	movs	r3, #0
 8005de4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d101      	bne.n	8005df0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e226      	b.n	800623e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d101      	bne.n	8005dfe <HAL_DMA_Start_IT+0x2a>
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	e21f      	b.n	800623e <HAL_DMA_Start_IT+0x46a>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	f040 820a 	bne.w	8006228 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2202      	movs	r2, #2
 8005e18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a68      	ldr	r2, [pc, #416]	; (8005fc8 <HAL_DMA_Start_IT+0x1f4>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d04a      	beq.n	8005ec2 <HAL_DMA_Start_IT+0xee>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a66      	ldr	r2, [pc, #408]	; (8005fcc <HAL_DMA_Start_IT+0x1f8>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d045      	beq.n	8005ec2 <HAL_DMA_Start_IT+0xee>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a65      	ldr	r2, [pc, #404]	; (8005fd0 <HAL_DMA_Start_IT+0x1fc>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d040      	beq.n	8005ec2 <HAL_DMA_Start_IT+0xee>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a63      	ldr	r2, [pc, #396]	; (8005fd4 <HAL_DMA_Start_IT+0x200>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d03b      	beq.n	8005ec2 <HAL_DMA_Start_IT+0xee>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a62      	ldr	r2, [pc, #392]	; (8005fd8 <HAL_DMA_Start_IT+0x204>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d036      	beq.n	8005ec2 <HAL_DMA_Start_IT+0xee>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a60      	ldr	r2, [pc, #384]	; (8005fdc <HAL_DMA_Start_IT+0x208>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d031      	beq.n	8005ec2 <HAL_DMA_Start_IT+0xee>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a5f      	ldr	r2, [pc, #380]	; (8005fe0 <HAL_DMA_Start_IT+0x20c>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d02c      	beq.n	8005ec2 <HAL_DMA_Start_IT+0xee>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a5d      	ldr	r2, [pc, #372]	; (8005fe4 <HAL_DMA_Start_IT+0x210>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d027      	beq.n	8005ec2 <HAL_DMA_Start_IT+0xee>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a5c      	ldr	r2, [pc, #368]	; (8005fe8 <HAL_DMA_Start_IT+0x214>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d022      	beq.n	8005ec2 <HAL_DMA_Start_IT+0xee>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a5a      	ldr	r2, [pc, #360]	; (8005fec <HAL_DMA_Start_IT+0x218>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d01d      	beq.n	8005ec2 <HAL_DMA_Start_IT+0xee>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a59      	ldr	r2, [pc, #356]	; (8005ff0 <HAL_DMA_Start_IT+0x21c>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d018      	beq.n	8005ec2 <HAL_DMA_Start_IT+0xee>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a57      	ldr	r2, [pc, #348]	; (8005ff4 <HAL_DMA_Start_IT+0x220>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d013      	beq.n	8005ec2 <HAL_DMA_Start_IT+0xee>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a56      	ldr	r2, [pc, #344]	; (8005ff8 <HAL_DMA_Start_IT+0x224>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d00e      	beq.n	8005ec2 <HAL_DMA_Start_IT+0xee>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a54      	ldr	r2, [pc, #336]	; (8005ffc <HAL_DMA_Start_IT+0x228>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d009      	beq.n	8005ec2 <HAL_DMA_Start_IT+0xee>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a53      	ldr	r2, [pc, #332]	; (8006000 <HAL_DMA_Start_IT+0x22c>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d004      	beq.n	8005ec2 <HAL_DMA_Start_IT+0xee>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a51      	ldr	r2, [pc, #324]	; (8006004 <HAL_DMA_Start_IT+0x230>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d108      	bne.n	8005ed4 <HAL_DMA_Start_IT+0x100>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f022 0201 	bic.w	r2, r2, #1
 8005ed0:	601a      	str	r2, [r3, #0]
 8005ed2:	e007      	b.n	8005ee4 <HAL_DMA_Start_IT+0x110>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f022 0201 	bic.w	r2, r2, #1
 8005ee2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	68b9      	ldr	r1, [r7, #8]
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f001 f912 	bl	8007114 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a34      	ldr	r2, [pc, #208]	; (8005fc8 <HAL_DMA_Start_IT+0x1f4>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d04a      	beq.n	8005f90 <HAL_DMA_Start_IT+0x1bc>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a33      	ldr	r2, [pc, #204]	; (8005fcc <HAL_DMA_Start_IT+0x1f8>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d045      	beq.n	8005f90 <HAL_DMA_Start_IT+0x1bc>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a31      	ldr	r2, [pc, #196]	; (8005fd0 <HAL_DMA_Start_IT+0x1fc>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d040      	beq.n	8005f90 <HAL_DMA_Start_IT+0x1bc>
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a30      	ldr	r2, [pc, #192]	; (8005fd4 <HAL_DMA_Start_IT+0x200>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d03b      	beq.n	8005f90 <HAL_DMA_Start_IT+0x1bc>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a2e      	ldr	r2, [pc, #184]	; (8005fd8 <HAL_DMA_Start_IT+0x204>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d036      	beq.n	8005f90 <HAL_DMA_Start_IT+0x1bc>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a2d      	ldr	r2, [pc, #180]	; (8005fdc <HAL_DMA_Start_IT+0x208>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d031      	beq.n	8005f90 <HAL_DMA_Start_IT+0x1bc>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a2b      	ldr	r2, [pc, #172]	; (8005fe0 <HAL_DMA_Start_IT+0x20c>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d02c      	beq.n	8005f90 <HAL_DMA_Start_IT+0x1bc>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a2a      	ldr	r2, [pc, #168]	; (8005fe4 <HAL_DMA_Start_IT+0x210>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d027      	beq.n	8005f90 <HAL_DMA_Start_IT+0x1bc>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a28      	ldr	r2, [pc, #160]	; (8005fe8 <HAL_DMA_Start_IT+0x214>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d022      	beq.n	8005f90 <HAL_DMA_Start_IT+0x1bc>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a27      	ldr	r2, [pc, #156]	; (8005fec <HAL_DMA_Start_IT+0x218>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d01d      	beq.n	8005f90 <HAL_DMA_Start_IT+0x1bc>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a25      	ldr	r2, [pc, #148]	; (8005ff0 <HAL_DMA_Start_IT+0x21c>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d018      	beq.n	8005f90 <HAL_DMA_Start_IT+0x1bc>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a24      	ldr	r2, [pc, #144]	; (8005ff4 <HAL_DMA_Start_IT+0x220>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d013      	beq.n	8005f90 <HAL_DMA_Start_IT+0x1bc>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a22      	ldr	r2, [pc, #136]	; (8005ff8 <HAL_DMA_Start_IT+0x224>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d00e      	beq.n	8005f90 <HAL_DMA_Start_IT+0x1bc>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a21      	ldr	r2, [pc, #132]	; (8005ffc <HAL_DMA_Start_IT+0x228>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d009      	beq.n	8005f90 <HAL_DMA_Start_IT+0x1bc>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a1f      	ldr	r2, [pc, #124]	; (8006000 <HAL_DMA_Start_IT+0x22c>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d004      	beq.n	8005f90 <HAL_DMA_Start_IT+0x1bc>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a1e      	ldr	r2, [pc, #120]	; (8006004 <HAL_DMA_Start_IT+0x230>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d101      	bne.n	8005f94 <HAL_DMA_Start_IT+0x1c0>
 8005f90:	2301      	movs	r3, #1
 8005f92:	e000      	b.n	8005f96 <HAL_DMA_Start_IT+0x1c2>
 8005f94:	2300      	movs	r3, #0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d036      	beq.n	8006008 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f023 021e 	bic.w	r2, r3, #30
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f042 0216 	orr.w	r2, r2, #22
 8005fac:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d03e      	beq.n	8006034 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f042 0208 	orr.w	r2, r2, #8
 8005fc4:	601a      	str	r2, [r3, #0]
 8005fc6:	e035      	b.n	8006034 <HAL_DMA_Start_IT+0x260>
 8005fc8:	40020010 	.word	0x40020010
 8005fcc:	40020028 	.word	0x40020028
 8005fd0:	40020040 	.word	0x40020040
 8005fd4:	40020058 	.word	0x40020058
 8005fd8:	40020070 	.word	0x40020070
 8005fdc:	40020088 	.word	0x40020088
 8005fe0:	400200a0 	.word	0x400200a0
 8005fe4:	400200b8 	.word	0x400200b8
 8005fe8:	40020410 	.word	0x40020410
 8005fec:	40020428 	.word	0x40020428
 8005ff0:	40020440 	.word	0x40020440
 8005ff4:	40020458 	.word	0x40020458
 8005ff8:	40020470 	.word	0x40020470
 8005ffc:	40020488 	.word	0x40020488
 8006000:	400204a0 	.word	0x400204a0
 8006004:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f023 020e 	bic.w	r2, r3, #14
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f042 020a 	orr.w	r2, r2, #10
 800601a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006020:	2b00      	cmp	r3, #0
 8006022:	d007      	beq.n	8006034 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f042 0204 	orr.w	r2, r2, #4
 8006032:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a83      	ldr	r2, [pc, #524]	; (8006248 <HAL_DMA_Start_IT+0x474>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d072      	beq.n	8006124 <HAL_DMA_Start_IT+0x350>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a82      	ldr	r2, [pc, #520]	; (800624c <HAL_DMA_Start_IT+0x478>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d06d      	beq.n	8006124 <HAL_DMA_Start_IT+0x350>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a80      	ldr	r2, [pc, #512]	; (8006250 <HAL_DMA_Start_IT+0x47c>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d068      	beq.n	8006124 <HAL_DMA_Start_IT+0x350>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a7f      	ldr	r2, [pc, #508]	; (8006254 <HAL_DMA_Start_IT+0x480>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d063      	beq.n	8006124 <HAL_DMA_Start_IT+0x350>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a7d      	ldr	r2, [pc, #500]	; (8006258 <HAL_DMA_Start_IT+0x484>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d05e      	beq.n	8006124 <HAL_DMA_Start_IT+0x350>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a7c      	ldr	r2, [pc, #496]	; (800625c <HAL_DMA_Start_IT+0x488>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d059      	beq.n	8006124 <HAL_DMA_Start_IT+0x350>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a7a      	ldr	r2, [pc, #488]	; (8006260 <HAL_DMA_Start_IT+0x48c>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d054      	beq.n	8006124 <HAL_DMA_Start_IT+0x350>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a79      	ldr	r2, [pc, #484]	; (8006264 <HAL_DMA_Start_IT+0x490>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d04f      	beq.n	8006124 <HAL_DMA_Start_IT+0x350>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a77      	ldr	r2, [pc, #476]	; (8006268 <HAL_DMA_Start_IT+0x494>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d04a      	beq.n	8006124 <HAL_DMA_Start_IT+0x350>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a76      	ldr	r2, [pc, #472]	; (800626c <HAL_DMA_Start_IT+0x498>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d045      	beq.n	8006124 <HAL_DMA_Start_IT+0x350>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a74      	ldr	r2, [pc, #464]	; (8006270 <HAL_DMA_Start_IT+0x49c>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d040      	beq.n	8006124 <HAL_DMA_Start_IT+0x350>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a73      	ldr	r2, [pc, #460]	; (8006274 <HAL_DMA_Start_IT+0x4a0>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d03b      	beq.n	8006124 <HAL_DMA_Start_IT+0x350>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a71      	ldr	r2, [pc, #452]	; (8006278 <HAL_DMA_Start_IT+0x4a4>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d036      	beq.n	8006124 <HAL_DMA_Start_IT+0x350>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a70      	ldr	r2, [pc, #448]	; (800627c <HAL_DMA_Start_IT+0x4a8>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d031      	beq.n	8006124 <HAL_DMA_Start_IT+0x350>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a6e      	ldr	r2, [pc, #440]	; (8006280 <HAL_DMA_Start_IT+0x4ac>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d02c      	beq.n	8006124 <HAL_DMA_Start_IT+0x350>
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a6d      	ldr	r2, [pc, #436]	; (8006284 <HAL_DMA_Start_IT+0x4b0>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d027      	beq.n	8006124 <HAL_DMA_Start_IT+0x350>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a6b      	ldr	r2, [pc, #428]	; (8006288 <HAL_DMA_Start_IT+0x4b4>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d022      	beq.n	8006124 <HAL_DMA_Start_IT+0x350>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a6a      	ldr	r2, [pc, #424]	; (800628c <HAL_DMA_Start_IT+0x4b8>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d01d      	beq.n	8006124 <HAL_DMA_Start_IT+0x350>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a68      	ldr	r2, [pc, #416]	; (8006290 <HAL_DMA_Start_IT+0x4bc>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d018      	beq.n	8006124 <HAL_DMA_Start_IT+0x350>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a67      	ldr	r2, [pc, #412]	; (8006294 <HAL_DMA_Start_IT+0x4c0>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d013      	beq.n	8006124 <HAL_DMA_Start_IT+0x350>
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a65      	ldr	r2, [pc, #404]	; (8006298 <HAL_DMA_Start_IT+0x4c4>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d00e      	beq.n	8006124 <HAL_DMA_Start_IT+0x350>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a64      	ldr	r2, [pc, #400]	; (800629c <HAL_DMA_Start_IT+0x4c8>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d009      	beq.n	8006124 <HAL_DMA_Start_IT+0x350>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a62      	ldr	r2, [pc, #392]	; (80062a0 <HAL_DMA_Start_IT+0x4cc>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d004      	beq.n	8006124 <HAL_DMA_Start_IT+0x350>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a61      	ldr	r2, [pc, #388]	; (80062a4 <HAL_DMA_Start_IT+0x4d0>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d101      	bne.n	8006128 <HAL_DMA_Start_IT+0x354>
 8006124:	2301      	movs	r3, #1
 8006126:	e000      	b.n	800612a <HAL_DMA_Start_IT+0x356>
 8006128:	2300      	movs	r3, #0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d01a      	beq.n	8006164 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d007      	beq.n	800614c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006146:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800614a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006150:	2b00      	cmp	r3, #0
 8006152:	d007      	beq.n	8006164 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800615e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006162:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a37      	ldr	r2, [pc, #220]	; (8006248 <HAL_DMA_Start_IT+0x474>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d04a      	beq.n	8006204 <HAL_DMA_Start_IT+0x430>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a36      	ldr	r2, [pc, #216]	; (800624c <HAL_DMA_Start_IT+0x478>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d045      	beq.n	8006204 <HAL_DMA_Start_IT+0x430>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a34      	ldr	r2, [pc, #208]	; (8006250 <HAL_DMA_Start_IT+0x47c>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d040      	beq.n	8006204 <HAL_DMA_Start_IT+0x430>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a33      	ldr	r2, [pc, #204]	; (8006254 <HAL_DMA_Start_IT+0x480>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d03b      	beq.n	8006204 <HAL_DMA_Start_IT+0x430>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a31      	ldr	r2, [pc, #196]	; (8006258 <HAL_DMA_Start_IT+0x484>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d036      	beq.n	8006204 <HAL_DMA_Start_IT+0x430>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a30      	ldr	r2, [pc, #192]	; (800625c <HAL_DMA_Start_IT+0x488>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d031      	beq.n	8006204 <HAL_DMA_Start_IT+0x430>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a2e      	ldr	r2, [pc, #184]	; (8006260 <HAL_DMA_Start_IT+0x48c>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d02c      	beq.n	8006204 <HAL_DMA_Start_IT+0x430>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a2d      	ldr	r2, [pc, #180]	; (8006264 <HAL_DMA_Start_IT+0x490>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d027      	beq.n	8006204 <HAL_DMA_Start_IT+0x430>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a2b      	ldr	r2, [pc, #172]	; (8006268 <HAL_DMA_Start_IT+0x494>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d022      	beq.n	8006204 <HAL_DMA_Start_IT+0x430>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a2a      	ldr	r2, [pc, #168]	; (800626c <HAL_DMA_Start_IT+0x498>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d01d      	beq.n	8006204 <HAL_DMA_Start_IT+0x430>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a28      	ldr	r2, [pc, #160]	; (8006270 <HAL_DMA_Start_IT+0x49c>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d018      	beq.n	8006204 <HAL_DMA_Start_IT+0x430>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a27      	ldr	r2, [pc, #156]	; (8006274 <HAL_DMA_Start_IT+0x4a0>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d013      	beq.n	8006204 <HAL_DMA_Start_IT+0x430>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a25      	ldr	r2, [pc, #148]	; (8006278 <HAL_DMA_Start_IT+0x4a4>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d00e      	beq.n	8006204 <HAL_DMA_Start_IT+0x430>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a24      	ldr	r2, [pc, #144]	; (800627c <HAL_DMA_Start_IT+0x4a8>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d009      	beq.n	8006204 <HAL_DMA_Start_IT+0x430>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a22      	ldr	r2, [pc, #136]	; (8006280 <HAL_DMA_Start_IT+0x4ac>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d004      	beq.n	8006204 <HAL_DMA_Start_IT+0x430>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a21      	ldr	r2, [pc, #132]	; (8006284 <HAL_DMA_Start_IT+0x4b0>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d108      	bne.n	8006216 <HAL_DMA_Start_IT+0x442>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f042 0201 	orr.w	r2, r2, #1
 8006212:	601a      	str	r2, [r3, #0]
 8006214:	e012      	b.n	800623c <HAL_DMA_Start_IT+0x468>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f042 0201 	orr.w	r2, r2, #1
 8006224:	601a      	str	r2, [r3, #0]
 8006226:	e009      	b.n	800623c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006236:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800623c:	7dfb      	ldrb	r3, [r7, #23]
}
 800623e:	4618      	mov	r0, r3
 8006240:	3718      	adds	r7, #24
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	40020010 	.word	0x40020010
 800624c:	40020028 	.word	0x40020028
 8006250:	40020040 	.word	0x40020040
 8006254:	40020058 	.word	0x40020058
 8006258:	40020070 	.word	0x40020070
 800625c:	40020088 	.word	0x40020088
 8006260:	400200a0 	.word	0x400200a0
 8006264:	400200b8 	.word	0x400200b8
 8006268:	40020410 	.word	0x40020410
 800626c:	40020428 	.word	0x40020428
 8006270:	40020440 	.word	0x40020440
 8006274:	40020458 	.word	0x40020458
 8006278:	40020470 	.word	0x40020470
 800627c:	40020488 	.word	0x40020488
 8006280:	400204a0 	.word	0x400204a0
 8006284:	400204b8 	.word	0x400204b8
 8006288:	58025408 	.word	0x58025408
 800628c:	5802541c 	.word	0x5802541c
 8006290:	58025430 	.word	0x58025430
 8006294:	58025444 	.word	0x58025444
 8006298:	58025458 	.word	0x58025458
 800629c:	5802546c 	.word	0x5802546c
 80062a0:	58025480 	.word	0x58025480
 80062a4:	58025494 	.word	0x58025494

080062a8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b08a      	sub	sp, #40	; 0x28
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80062b0:	2300      	movs	r3, #0
 80062b2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80062b4:	4b67      	ldr	r3, [pc, #412]	; (8006454 <HAL_DMA_IRQHandler+0x1ac>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a67      	ldr	r2, [pc, #412]	; (8006458 <HAL_DMA_IRQHandler+0x1b0>)
 80062ba:	fba2 2303 	umull	r2, r3, r2, r3
 80062be:	0a9b      	lsrs	r3, r3, #10
 80062c0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062c6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062cc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80062ce:	6a3b      	ldr	r3, [r7, #32]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a5f      	ldr	r2, [pc, #380]	; (800645c <HAL_DMA_IRQHandler+0x1b4>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d04a      	beq.n	800637a <HAL_DMA_IRQHandler+0xd2>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a5d      	ldr	r2, [pc, #372]	; (8006460 <HAL_DMA_IRQHandler+0x1b8>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d045      	beq.n	800637a <HAL_DMA_IRQHandler+0xd2>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a5c      	ldr	r2, [pc, #368]	; (8006464 <HAL_DMA_IRQHandler+0x1bc>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d040      	beq.n	800637a <HAL_DMA_IRQHandler+0xd2>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a5a      	ldr	r2, [pc, #360]	; (8006468 <HAL_DMA_IRQHandler+0x1c0>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d03b      	beq.n	800637a <HAL_DMA_IRQHandler+0xd2>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a59      	ldr	r2, [pc, #356]	; (800646c <HAL_DMA_IRQHandler+0x1c4>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d036      	beq.n	800637a <HAL_DMA_IRQHandler+0xd2>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a57      	ldr	r2, [pc, #348]	; (8006470 <HAL_DMA_IRQHandler+0x1c8>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d031      	beq.n	800637a <HAL_DMA_IRQHandler+0xd2>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a56      	ldr	r2, [pc, #344]	; (8006474 <HAL_DMA_IRQHandler+0x1cc>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d02c      	beq.n	800637a <HAL_DMA_IRQHandler+0xd2>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a54      	ldr	r2, [pc, #336]	; (8006478 <HAL_DMA_IRQHandler+0x1d0>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d027      	beq.n	800637a <HAL_DMA_IRQHandler+0xd2>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a53      	ldr	r2, [pc, #332]	; (800647c <HAL_DMA_IRQHandler+0x1d4>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d022      	beq.n	800637a <HAL_DMA_IRQHandler+0xd2>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a51      	ldr	r2, [pc, #324]	; (8006480 <HAL_DMA_IRQHandler+0x1d8>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d01d      	beq.n	800637a <HAL_DMA_IRQHandler+0xd2>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a50      	ldr	r2, [pc, #320]	; (8006484 <HAL_DMA_IRQHandler+0x1dc>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d018      	beq.n	800637a <HAL_DMA_IRQHandler+0xd2>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a4e      	ldr	r2, [pc, #312]	; (8006488 <HAL_DMA_IRQHandler+0x1e0>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d013      	beq.n	800637a <HAL_DMA_IRQHandler+0xd2>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a4d      	ldr	r2, [pc, #308]	; (800648c <HAL_DMA_IRQHandler+0x1e4>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d00e      	beq.n	800637a <HAL_DMA_IRQHandler+0xd2>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a4b      	ldr	r2, [pc, #300]	; (8006490 <HAL_DMA_IRQHandler+0x1e8>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d009      	beq.n	800637a <HAL_DMA_IRQHandler+0xd2>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a4a      	ldr	r2, [pc, #296]	; (8006494 <HAL_DMA_IRQHandler+0x1ec>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d004      	beq.n	800637a <HAL_DMA_IRQHandler+0xd2>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a48      	ldr	r2, [pc, #288]	; (8006498 <HAL_DMA_IRQHandler+0x1f0>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d101      	bne.n	800637e <HAL_DMA_IRQHandler+0xd6>
 800637a:	2301      	movs	r3, #1
 800637c:	e000      	b.n	8006380 <HAL_DMA_IRQHandler+0xd8>
 800637e:	2300      	movs	r3, #0
 8006380:	2b00      	cmp	r3, #0
 8006382:	f000 842b 	beq.w	8006bdc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800638a:	f003 031f 	and.w	r3, r3, #31
 800638e:	2208      	movs	r2, #8
 8006390:	409a      	lsls	r2, r3
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	4013      	ands	r3, r2
 8006396:	2b00      	cmp	r3, #0
 8006398:	f000 80a2 	beq.w	80064e0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a2e      	ldr	r2, [pc, #184]	; (800645c <HAL_DMA_IRQHandler+0x1b4>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d04a      	beq.n	800643c <HAL_DMA_IRQHandler+0x194>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a2d      	ldr	r2, [pc, #180]	; (8006460 <HAL_DMA_IRQHandler+0x1b8>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d045      	beq.n	800643c <HAL_DMA_IRQHandler+0x194>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a2b      	ldr	r2, [pc, #172]	; (8006464 <HAL_DMA_IRQHandler+0x1bc>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d040      	beq.n	800643c <HAL_DMA_IRQHandler+0x194>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a2a      	ldr	r2, [pc, #168]	; (8006468 <HAL_DMA_IRQHandler+0x1c0>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d03b      	beq.n	800643c <HAL_DMA_IRQHandler+0x194>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a28      	ldr	r2, [pc, #160]	; (800646c <HAL_DMA_IRQHandler+0x1c4>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d036      	beq.n	800643c <HAL_DMA_IRQHandler+0x194>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a27      	ldr	r2, [pc, #156]	; (8006470 <HAL_DMA_IRQHandler+0x1c8>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d031      	beq.n	800643c <HAL_DMA_IRQHandler+0x194>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a25      	ldr	r2, [pc, #148]	; (8006474 <HAL_DMA_IRQHandler+0x1cc>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d02c      	beq.n	800643c <HAL_DMA_IRQHandler+0x194>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a24      	ldr	r2, [pc, #144]	; (8006478 <HAL_DMA_IRQHandler+0x1d0>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d027      	beq.n	800643c <HAL_DMA_IRQHandler+0x194>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a22      	ldr	r2, [pc, #136]	; (800647c <HAL_DMA_IRQHandler+0x1d4>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d022      	beq.n	800643c <HAL_DMA_IRQHandler+0x194>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a21      	ldr	r2, [pc, #132]	; (8006480 <HAL_DMA_IRQHandler+0x1d8>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d01d      	beq.n	800643c <HAL_DMA_IRQHandler+0x194>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a1f      	ldr	r2, [pc, #124]	; (8006484 <HAL_DMA_IRQHandler+0x1dc>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d018      	beq.n	800643c <HAL_DMA_IRQHandler+0x194>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a1e      	ldr	r2, [pc, #120]	; (8006488 <HAL_DMA_IRQHandler+0x1e0>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d013      	beq.n	800643c <HAL_DMA_IRQHandler+0x194>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a1c      	ldr	r2, [pc, #112]	; (800648c <HAL_DMA_IRQHandler+0x1e4>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d00e      	beq.n	800643c <HAL_DMA_IRQHandler+0x194>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a1b      	ldr	r2, [pc, #108]	; (8006490 <HAL_DMA_IRQHandler+0x1e8>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d009      	beq.n	800643c <HAL_DMA_IRQHandler+0x194>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a19      	ldr	r2, [pc, #100]	; (8006494 <HAL_DMA_IRQHandler+0x1ec>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d004      	beq.n	800643c <HAL_DMA_IRQHandler+0x194>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a18      	ldr	r2, [pc, #96]	; (8006498 <HAL_DMA_IRQHandler+0x1f0>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d12f      	bne.n	800649c <HAL_DMA_IRQHandler+0x1f4>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0304 	and.w	r3, r3, #4
 8006446:	2b00      	cmp	r3, #0
 8006448:	bf14      	ite	ne
 800644a:	2301      	movne	r3, #1
 800644c:	2300      	moveq	r3, #0
 800644e:	b2db      	uxtb	r3, r3
 8006450:	e02e      	b.n	80064b0 <HAL_DMA_IRQHandler+0x208>
 8006452:	bf00      	nop
 8006454:	24000400 	.word	0x24000400
 8006458:	1b4e81b5 	.word	0x1b4e81b5
 800645c:	40020010 	.word	0x40020010
 8006460:	40020028 	.word	0x40020028
 8006464:	40020040 	.word	0x40020040
 8006468:	40020058 	.word	0x40020058
 800646c:	40020070 	.word	0x40020070
 8006470:	40020088 	.word	0x40020088
 8006474:	400200a0 	.word	0x400200a0
 8006478:	400200b8 	.word	0x400200b8
 800647c:	40020410 	.word	0x40020410
 8006480:	40020428 	.word	0x40020428
 8006484:	40020440 	.word	0x40020440
 8006488:	40020458 	.word	0x40020458
 800648c:	40020470 	.word	0x40020470
 8006490:	40020488 	.word	0x40020488
 8006494:	400204a0 	.word	0x400204a0
 8006498:	400204b8 	.word	0x400204b8
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 0308 	and.w	r3, r3, #8
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	bf14      	ite	ne
 80064aa:	2301      	movne	r3, #1
 80064ac:	2300      	moveq	r3, #0
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d015      	beq.n	80064e0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f022 0204 	bic.w	r2, r2, #4
 80064c2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064c8:	f003 031f 	and.w	r3, r3, #31
 80064cc:	2208      	movs	r2, #8
 80064ce:	409a      	lsls	r2, r3
 80064d0:	6a3b      	ldr	r3, [r7, #32]
 80064d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064d8:	f043 0201 	orr.w	r2, r3, #1
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064e4:	f003 031f 	and.w	r3, r3, #31
 80064e8:	69ba      	ldr	r2, [r7, #24]
 80064ea:	fa22 f303 	lsr.w	r3, r2, r3
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d06e      	beq.n	80065d4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a69      	ldr	r2, [pc, #420]	; (80066a0 <HAL_DMA_IRQHandler+0x3f8>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d04a      	beq.n	8006596 <HAL_DMA_IRQHandler+0x2ee>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a67      	ldr	r2, [pc, #412]	; (80066a4 <HAL_DMA_IRQHandler+0x3fc>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d045      	beq.n	8006596 <HAL_DMA_IRQHandler+0x2ee>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a66      	ldr	r2, [pc, #408]	; (80066a8 <HAL_DMA_IRQHandler+0x400>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d040      	beq.n	8006596 <HAL_DMA_IRQHandler+0x2ee>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a64      	ldr	r2, [pc, #400]	; (80066ac <HAL_DMA_IRQHandler+0x404>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d03b      	beq.n	8006596 <HAL_DMA_IRQHandler+0x2ee>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a63      	ldr	r2, [pc, #396]	; (80066b0 <HAL_DMA_IRQHandler+0x408>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d036      	beq.n	8006596 <HAL_DMA_IRQHandler+0x2ee>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a61      	ldr	r2, [pc, #388]	; (80066b4 <HAL_DMA_IRQHandler+0x40c>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d031      	beq.n	8006596 <HAL_DMA_IRQHandler+0x2ee>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a60      	ldr	r2, [pc, #384]	; (80066b8 <HAL_DMA_IRQHandler+0x410>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d02c      	beq.n	8006596 <HAL_DMA_IRQHandler+0x2ee>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a5e      	ldr	r2, [pc, #376]	; (80066bc <HAL_DMA_IRQHandler+0x414>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d027      	beq.n	8006596 <HAL_DMA_IRQHandler+0x2ee>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a5d      	ldr	r2, [pc, #372]	; (80066c0 <HAL_DMA_IRQHandler+0x418>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d022      	beq.n	8006596 <HAL_DMA_IRQHandler+0x2ee>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a5b      	ldr	r2, [pc, #364]	; (80066c4 <HAL_DMA_IRQHandler+0x41c>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d01d      	beq.n	8006596 <HAL_DMA_IRQHandler+0x2ee>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a5a      	ldr	r2, [pc, #360]	; (80066c8 <HAL_DMA_IRQHandler+0x420>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d018      	beq.n	8006596 <HAL_DMA_IRQHandler+0x2ee>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a58      	ldr	r2, [pc, #352]	; (80066cc <HAL_DMA_IRQHandler+0x424>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d013      	beq.n	8006596 <HAL_DMA_IRQHandler+0x2ee>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a57      	ldr	r2, [pc, #348]	; (80066d0 <HAL_DMA_IRQHandler+0x428>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d00e      	beq.n	8006596 <HAL_DMA_IRQHandler+0x2ee>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a55      	ldr	r2, [pc, #340]	; (80066d4 <HAL_DMA_IRQHandler+0x42c>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d009      	beq.n	8006596 <HAL_DMA_IRQHandler+0x2ee>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a54      	ldr	r2, [pc, #336]	; (80066d8 <HAL_DMA_IRQHandler+0x430>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d004      	beq.n	8006596 <HAL_DMA_IRQHandler+0x2ee>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a52      	ldr	r2, [pc, #328]	; (80066dc <HAL_DMA_IRQHandler+0x434>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d10a      	bne.n	80065ac <HAL_DMA_IRQHandler+0x304>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	695b      	ldr	r3, [r3, #20]
 800659c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	bf14      	ite	ne
 80065a4:	2301      	movne	r3, #1
 80065a6:	2300      	moveq	r3, #0
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	e003      	b.n	80065b4 <HAL_DMA_IRQHandler+0x30c>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2300      	movs	r3, #0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00d      	beq.n	80065d4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065bc:	f003 031f 	and.w	r3, r3, #31
 80065c0:	2201      	movs	r2, #1
 80065c2:	409a      	lsls	r2, r3
 80065c4:	6a3b      	ldr	r3, [r7, #32]
 80065c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065cc:	f043 0202 	orr.w	r2, r3, #2
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065d8:	f003 031f 	and.w	r3, r3, #31
 80065dc:	2204      	movs	r2, #4
 80065de:	409a      	lsls	r2, r3
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	4013      	ands	r3, r2
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f000 808f 	beq.w	8006708 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a2c      	ldr	r2, [pc, #176]	; (80066a0 <HAL_DMA_IRQHandler+0x3f8>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d04a      	beq.n	800668a <HAL_DMA_IRQHandler+0x3e2>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a2a      	ldr	r2, [pc, #168]	; (80066a4 <HAL_DMA_IRQHandler+0x3fc>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d045      	beq.n	800668a <HAL_DMA_IRQHandler+0x3e2>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a29      	ldr	r2, [pc, #164]	; (80066a8 <HAL_DMA_IRQHandler+0x400>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d040      	beq.n	800668a <HAL_DMA_IRQHandler+0x3e2>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a27      	ldr	r2, [pc, #156]	; (80066ac <HAL_DMA_IRQHandler+0x404>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d03b      	beq.n	800668a <HAL_DMA_IRQHandler+0x3e2>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a26      	ldr	r2, [pc, #152]	; (80066b0 <HAL_DMA_IRQHandler+0x408>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d036      	beq.n	800668a <HAL_DMA_IRQHandler+0x3e2>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a24      	ldr	r2, [pc, #144]	; (80066b4 <HAL_DMA_IRQHandler+0x40c>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d031      	beq.n	800668a <HAL_DMA_IRQHandler+0x3e2>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a23      	ldr	r2, [pc, #140]	; (80066b8 <HAL_DMA_IRQHandler+0x410>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d02c      	beq.n	800668a <HAL_DMA_IRQHandler+0x3e2>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a21      	ldr	r2, [pc, #132]	; (80066bc <HAL_DMA_IRQHandler+0x414>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d027      	beq.n	800668a <HAL_DMA_IRQHandler+0x3e2>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a20      	ldr	r2, [pc, #128]	; (80066c0 <HAL_DMA_IRQHandler+0x418>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d022      	beq.n	800668a <HAL_DMA_IRQHandler+0x3e2>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a1e      	ldr	r2, [pc, #120]	; (80066c4 <HAL_DMA_IRQHandler+0x41c>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d01d      	beq.n	800668a <HAL_DMA_IRQHandler+0x3e2>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a1d      	ldr	r2, [pc, #116]	; (80066c8 <HAL_DMA_IRQHandler+0x420>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d018      	beq.n	800668a <HAL_DMA_IRQHandler+0x3e2>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a1b      	ldr	r2, [pc, #108]	; (80066cc <HAL_DMA_IRQHandler+0x424>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d013      	beq.n	800668a <HAL_DMA_IRQHandler+0x3e2>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a1a      	ldr	r2, [pc, #104]	; (80066d0 <HAL_DMA_IRQHandler+0x428>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d00e      	beq.n	800668a <HAL_DMA_IRQHandler+0x3e2>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a18      	ldr	r2, [pc, #96]	; (80066d4 <HAL_DMA_IRQHandler+0x42c>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d009      	beq.n	800668a <HAL_DMA_IRQHandler+0x3e2>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a17      	ldr	r2, [pc, #92]	; (80066d8 <HAL_DMA_IRQHandler+0x430>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d004      	beq.n	800668a <HAL_DMA_IRQHandler+0x3e2>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a15      	ldr	r2, [pc, #84]	; (80066dc <HAL_DMA_IRQHandler+0x434>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d12a      	bne.n	80066e0 <HAL_DMA_IRQHandler+0x438>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0302 	and.w	r3, r3, #2
 8006694:	2b00      	cmp	r3, #0
 8006696:	bf14      	ite	ne
 8006698:	2301      	movne	r3, #1
 800669a:	2300      	moveq	r3, #0
 800669c:	b2db      	uxtb	r3, r3
 800669e:	e023      	b.n	80066e8 <HAL_DMA_IRQHandler+0x440>
 80066a0:	40020010 	.word	0x40020010
 80066a4:	40020028 	.word	0x40020028
 80066a8:	40020040 	.word	0x40020040
 80066ac:	40020058 	.word	0x40020058
 80066b0:	40020070 	.word	0x40020070
 80066b4:	40020088 	.word	0x40020088
 80066b8:	400200a0 	.word	0x400200a0
 80066bc:	400200b8 	.word	0x400200b8
 80066c0:	40020410 	.word	0x40020410
 80066c4:	40020428 	.word	0x40020428
 80066c8:	40020440 	.word	0x40020440
 80066cc:	40020458 	.word	0x40020458
 80066d0:	40020470 	.word	0x40020470
 80066d4:	40020488 	.word	0x40020488
 80066d8:	400204a0 	.word	0x400204a0
 80066dc:	400204b8 	.word	0x400204b8
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2300      	movs	r3, #0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00d      	beq.n	8006708 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066f0:	f003 031f 	and.w	r3, r3, #31
 80066f4:	2204      	movs	r2, #4
 80066f6:	409a      	lsls	r2, r3
 80066f8:	6a3b      	ldr	r3, [r7, #32]
 80066fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006700:	f043 0204 	orr.w	r2, r3, #4
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800670c:	f003 031f 	and.w	r3, r3, #31
 8006710:	2210      	movs	r2, #16
 8006712:	409a      	lsls	r2, r3
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	4013      	ands	r3, r2
 8006718:	2b00      	cmp	r3, #0
 800671a:	f000 80a6 	beq.w	800686a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a85      	ldr	r2, [pc, #532]	; (8006938 <HAL_DMA_IRQHandler+0x690>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d04a      	beq.n	80067be <HAL_DMA_IRQHandler+0x516>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a83      	ldr	r2, [pc, #524]	; (800693c <HAL_DMA_IRQHandler+0x694>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d045      	beq.n	80067be <HAL_DMA_IRQHandler+0x516>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a82      	ldr	r2, [pc, #520]	; (8006940 <HAL_DMA_IRQHandler+0x698>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d040      	beq.n	80067be <HAL_DMA_IRQHandler+0x516>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a80      	ldr	r2, [pc, #512]	; (8006944 <HAL_DMA_IRQHandler+0x69c>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d03b      	beq.n	80067be <HAL_DMA_IRQHandler+0x516>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a7f      	ldr	r2, [pc, #508]	; (8006948 <HAL_DMA_IRQHandler+0x6a0>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d036      	beq.n	80067be <HAL_DMA_IRQHandler+0x516>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a7d      	ldr	r2, [pc, #500]	; (800694c <HAL_DMA_IRQHandler+0x6a4>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d031      	beq.n	80067be <HAL_DMA_IRQHandler+0x516>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a7c      	ldr	r2, [pc, #496]	; (8006950 <HAL_DMA_IRQHandler+0x6a8>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d02c      	beq.n	80067be <HAL_DMA_IRQHandler+0x516>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a7a      	ldr	r2, [pc, #488]	; (8006954 <HAL_DMA_IRQHandler+0x6ac>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d027      	beq.n	80067be <HAL_DMA_IRQHandler+0x516>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a79      	ldr	r2, [pc, #484]	; (8006958 <HAL_DMA_IRQHandler+0x6b0>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d022      	beq.n	80067be <HAL_DMA_IRQHandler+0x516>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a77      	ldr	r2, [pc, #476]	; (800695c <HAL_DMA_IRQHandler+0x6b4>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d01d      	beq.n	80067be <HAL_DMA_IRQHandler+0x516>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a76      	ldr	r2, [pc, #472]	; (8006960 <HAL_DMA_IRQHandler+0x6b8>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d018      	beq.n	80067be <HAL_DMA_IRQHandler+0x516>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a74      	ldr	r2, [pc, #464]	; (8006964 <HAL_DMA_IRQHandler+0x6bc>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d013      	beq.n	80067be <HAL_DMA_IRQHandler+0x516>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a73      	ldr	r2, [pc, #460]	; (8006968 <HAL_DMA_IRQHandler+0x6c0>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d00e      	beq.n	80067be <HAL_DMA_IRQHandler+0x516>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a71      	ldr	r2, [pc, #452]	; (800696c <HAL_DMA_IRQHandler+0x6c4>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d009      	beq.n	80067be <HAL_DMA_IRQHandler+0x516>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a70      	ldr	r2, [pc, #448]	; (8006970 <HAL_DMA_IRQHandler+0x6c8>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d004      	beq.n	80067be <HAL_DMA_IRQHandler+0x516>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a6e      	ldr	r2, [pc, #440]	; (8006974 <HAL_DMA_IRQHandler+0x6cc>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d10a      	bne.n	80067d4 <HAL_DMA_IRQHandler+0x52c>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0308 	and.w	r3, r3, #8
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	bf14      	ite	ne
 80067cc:	2301      	movne	r3, #1
 80067ce:	2300      	moveq	r3, #0
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	e009      	b.n	80067e8 <HAL_DMA_IRQHandler+0x540>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 0304 	and.w	r3, r3, #4
 80067de:	2b00      	cmp	r3, #0
 80067e0:	bf14      	ite	ne
 80067e2:	2301      	movne	r3, #1
 80067e4:	2300      	moveq	r3, #0
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d03e      	beq.n	800686a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067f0:	f003 031f 	and.w	r3, r3, #31
 80067f4:	2210      	movs	r2, #16
 80067f6:	409a      	lsls	r2, r3
 80067f8:	6a3b      	ldr	r3, [r7, #32]
 80067fa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d018      	beq.n	800683c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006814:	2b00      	cmp	r3, #0
 8006816:	d108      	bne.n	800682a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681c:	2b00      	cmp	r3, #0
 800681e:	d024      	beq.n	800686a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	4798      	blx	r3
 8006828:	e01f      	b.n	800686a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800682e:	2b00      	cmp	r3, #0
 8006830:	d01b      	beq.n	800686a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	4798      	blx	r3
 800683a:	e016      	b.n	800686a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006846:	2b00      	cmp	r3, #0
 8006848:	d107      	bne.n	800685a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f022 0208 	bic.w	r2, r2, #8
 8006858:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685e:	2b00      	cmp	r3, #0
 8006860:	d003      	beq.n	800686a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800686e:	f003 031f 	and.w	r3, r3, #31
 8006872:	2220      	movs	r2, #32
 8006874:	409a      	lsls	r2, r3
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	4013      	ands	r3, r2
 800687a:	2b00      	cmp	r3, #0
 800687c:	f000 8110 	beq.w	8006aa0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a2c      	ldr	r2, [pc, #176]	; (8006938 <HAL_DMA_IRQHandler+0x690>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d04a      	beq.n	8006920 <HAL_DMA_IRQHandler+0x678>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a2b      	ldr	r2, [pc, #172]	; (800693c <HAL_DMA_IRQHandler+0x694>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d045      	beq.n	8006920 <HAL_DMA_IRQHandler+0x678>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a29      	ldr	r2, [pc, #164]	; (8006940 <HAL_DMA_IRQHandler+0x698>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d040      	beq.n	8006920 <HAL_DMA_IRQHandler+0x678>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a28      	ldr	r2, [pc, #160]	; (8006944 <HAL_DMA_IRQHandler+0x69c>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d03b      	beq.n	8006920 <HAL_DMA_IRQHandler+0x678>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a26      	ldr	r2, [pc, #152]	; (8006948 <HAL_DMA_IRQHandler+0x6a0>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d036      	beq.n	8006920 <HAL_DMA_IRQHandler+0x678>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a25      	ldr	r2, [pc, #148]	; (800694c <HAL_DMA_IRQHandler+0x6a4>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d031      	beq.n	8006920 <HAL_DMA_IRQHandler+0x678>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a23      	ldr	r2, [pc, #140]	; (8006950 <HAL_DMA_IRQHandler+0x6a8>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d02c      	beq.n	8006920 <HAL_DMA_IRQHandler+0x678>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a22      	ldr	r2, [pc, #136]	; (8006954 <HAL_DMA_IRQHandler+0x6ac>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d027      	beq.n	8006920 <HAL_DMA_IRQHandler+0x678>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a20      	ldr	r2, [pc, #128]	; (8006958 <HAL_DMA_IRQHandler+0x6b0>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d022      	beq.n	8006920 <HAL_DMA_IRQHandler+0x678>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a1f      	ldr	r2, [pc, #124]	; (800695c <HAL_DMA_IRQHandler+0x6b4>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d01d      	beq.n	8006920 <HAL_DMA_IRQHandler+0x678>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a1d      	ldr	r2, [pc, #116]	; (8006960 <HAL_DMA_IRQHandler+0x6b8>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d018      	beq.n	8006920 <HAL_DMA_IRQHandler+0x678>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a1c      	ldr	r2, [pc, #112]	; (8006964 <HAL_DMA_IRQHandler+0x6bc>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d013      	beq.n	8006920 <HAL_DMA_IRQHandler+0x678>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a1a      	ldr	r2, [pc, #104]	; (8006968 <HAL_DMA_IRQHandler+0x6c0>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d00e      	beq.n	8006920 <HAL_DMA_IRQHandler+0x678>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a19      	ldr	r2, [pc, #100]	; (800696c <HAL_DMA_IRQHandler+0x6c4>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d009      	beq.n	8006920 <HAL_DMA_IRQHandler+0x678>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a17      	ldr	r2, [pc, #92]	; (8006970 <HAL_DMA_IRQHandler+0x6c8>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d004      	beq.n	8006920 <HAL_DMA_IRQHandler+0x678>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a16      	ldr	r2, [pc, #88]	; (8006974 <HAL_DMA_IRQHandler+0x6cc>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d12b      	bne.n	8006978 <HAL_DMA_IRQHandler+0x6d0>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0310 	and.w	r3, r3, #16
 800692a:	2b00      	cmp	r3, #0
 800692c:	bf14      	ite	ne
 800692e:	2301      	movne	r3, #1
 8006930:	2300      	moveq	r3, #0
 8006932:	b2db      	uxtb	r3, r3
 8006934:	e02a      	b.n	800698c <HAL_DMA_IRQHandler+0x6e4>
 8006936:	bf00      	nop
 8006938:	40020010 	.word	0x40020010
 800693c:	40020028 	.word	0x40020028
 8006940:	40020040 	.word	0x40020040
 8006944:	40020058 	.word	0x40020058
 8006948:	40020070 	.word	0x40020070
 800694c:	40020088 	.word	0x40020088
 8006950:	400200a0 	.word	0x400200a0
 8006954:	400200b8 	.word	0x400200b8
 8006958:	40020410 	.word	0x40020410
 800695c:	40020428 	.word	0x40020428
 8006960:	40020440 	.word	0x40020440
 8006964:	40020458 	.word	0x40020458
 8006968:	40020470 	.word	0x40020470
 800696c:	40020488 	.word	0x40020488
 8006970:	400204a0 	.word	0x400204a0
 8006974:	400204b8 	.word	0x400204b8
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0302 	and.w	r3, r3, #2
 8006982:	2b00      	cmp	r3, #0
 8006984:	bf14      	ite	ne
 8006986:	2301      	movne	r3, #1
 8006988:	2300      	moveq	r3, #0
 800698a:	b2db      	uxtb	r3, r3
 800698c:	2b00      	cmp	r3, #0
 800698e:	f000 8087 	beq.w	8006aa0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006996:	f003 031f 	and.w	r3, r3, #31
 800699a:	2220      	movs	r2, #32
 800699c:	409a      	lsls	r2, r3
 800699e:	6a3b      	ldr	r3, [r7, #32]
 80069a0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	2b04      	cmp	r3, #4
 80069ac:	d139      	bne.n	8006a22 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f022 0216 	bic.w	r2, r2, #22
 80069bc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	695a      	ldr	r2, [r3, #20]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069cc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d103      	bne.n	80069de <HAL_DMA_IRQHandler+0x736>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d007      	beq.n	80069ee <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f022 0208 	bic.w	r2, r2, #8
 80069ec:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069f2:	f003 031f 	and.w	r3, r3, #31
 80069f6:	223f      	movs	r2, #63	; 0x3f
 80069f8:	409a      	lsls	r2, r3
 80069fa:	6a3b      	ldr	r3, [r7, #32]
 80069fc:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f000 834a 	beq.w	80070ac <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	4798      	blx	r3
          }
          return;
 8006a20:	e344      	b.n	80070ac <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d018      	beq.n	8006a62 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d108      	bne.n	8006a50 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d02c      	beq.n	8006aa0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	4798      	blx	r3
 8006a4e:	e027      	b.n	8006aa0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d023      	beq.n	8006aa0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	4798      	blx	r3
 8006a60:	e01e      	b.n	8006aa0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d10f      	bne.n	8006a90 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f022 0210 	bic.w	r2, r2, #16
 8006a7e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d003      	beq.n	8006aa0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f000 8306 	beq.w	80070b6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aae:	f003 0301 	and.w	r3, r3, #1
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f000 8088 	beq.w	8006bc8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2204      	movs	r2, #4
 8006abc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a7a      	ldr	r2, [pc, #488]	; (8006cb0 <HAL_DMA_IRQHandler+0xa08>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d04a      	beq.n	8006b60 <HAL_DMA_IRQHandler+0x8b8>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a79      	ldr	r2, [pc, #484]	; (8006cb4 <HAL_DMA_IRQHandler+0xa0c>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d045      	beq.n	8006b60 <HAL_DMA_IRQHandler+0x8b8>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a77      	ldr	r2, [pc, #476]	; (8006cb8 <HAL_DMA_IRQHandler+0xa10>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d040      	beq.n	8006b60 <HAL_DMA_IRQHandler+0x8b8>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a76      	ldr	r2, [pc, #472]	; (8006cbc <HAL_DMA_IRQHandler+0xa14>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d03b      	beq.n	8006b60 <HAL_DMA_IRQHandler+0x8b8>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a74      	ldr	r2, [pc, #464]	; (8006cc0 <HAL_DMA_IRQHandler+0xa18>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d036      	beq.n	8006b60 <HAL_DMA_IRQHandler+0x8b8>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a73      	ldr	r2, [pc, #460]	; (8006cc4 <HAL_DMA_IRQHandler+0xa1c>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d031      	beq.n	8006b60 <HAL_DMA_IRQHandler+0x8b8>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a71      	ldr	r2, [pc, #452]	; (8006cc8 <HAL_DMA_IRQHandler+0xa20>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d02c      	beq.n	8006b60 <HAL_DMA_IRQHandler+0x8b8>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a70      	ldr	r2, [pc, #448]	; (8006ccc <HAL_DMA_IRQHandler+0xa24>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d027      	beq.n	8006b60 <HAL_DMA_IRQHandler+0x8b8>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a6e      	ldr	r2, [pc, #440]	; (8006cd0 <HAL_DMA_IRQHandler+0xa28>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d022      	beq.n	8006b60 <HAL_DMA_IRQHandler+0x8b8>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a6d      	ldr	r2, [pc, #436]	; (8006cd4 <HAL_DMA_IRQHandler+0xa2c>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d01d      	beq.n	8006b60 <HAL_DMA_IRQHandler+0x8b8>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a6b      	ldr	r2, [pc, #428]	; (8006cd8 <HAL_DMA_IRQHandler+0xa30>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d018      	beq.n	8006b60 <HAL_DMA_IRQHandler+0x8b8>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a6a      	ldr	r2, [pc, #424]	; (8006cdc <HAL_DMA_IRQHandler+0xa34>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d013      	beq.n	8006b60 <HAL_DMA_IRQHandler+0x8b8>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a68      	ldr	r2, [pc, #416]	; (8006ce0 <HAL_DMA_IRQHandler+0xa38>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d00e      	beq.n	8006b60 <HAL_DMA_IRQHandler+0x8b8>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a67      	ldr	r2, [pc, #412]	; (8006ce4 <HAL_DMA_IRQHandler+0xa3c>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d009      	beq.n	8006b60 <HAL_DMA_IRQHandler+0x8b8>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a65      	ldr	r2, [pc, #404]	; (8006ce8 <HAL_DMA_IRQHandler+0xa40>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d004      	beq.n	8006b60 <HAL_DMA_IRQHandler+0x8b8>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a64      	ldr	r2, [pc, #400]	; (8006cec <HAL_DMA_IRQHandler+0xa44>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d108      	bne.n	8006b72 <HAL_DMA_IRQHandler+0x8ca>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f022 0201 	bic.w	r2, r2, #1
 8006b6e:	601a      	str	r2, [r3, #0]
 8006b70:	e007      	b.n	8006b82 <HAL_DMA_IRQHandler+0x8da>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f022 0201 	bic.w	r2, r2, #1
 8006b80:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	3301      	adds	r3, #1
 8006b86:	60fb      	str	r3, [r7, #12]
 8006b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d307      	bcc.n	8006b9e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0301 	and.w	r3, r3, #1
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1f2      	bne.n	8006b82 <HAL_DMA_IRQHandler+0x8da>
 8006b9c:	e000      	b.n	8006ba0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006b9e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0301 	and.w	r3, r3, #1
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d004      	beq.n	8006bc0 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2203      	movs	r2, #3
 8006bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006bbe:	e003      	b.n	8006bc8 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f000 8272 	beq.w	80070b6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	4798      	blx	r3
 8006bda:	e26c      	b.n	80070b6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a43      	ldr	r2, [pc, #268]	; (8006cf0 <HAL_DMA_IRQHandler+0xa48>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d022      	beq.n	8006c2c <HAL_DMA_IRQHandler+0x984>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a42      	ldr	r2, [pc, #264]	; (8006cf4 <HAL_DMA_IRQHandler+0xa4c>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d01d      	beq.n	8006c2c <HAL_DMA_IRQHandler+0x984>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a40      	ldr	r2, [pc, #256]	; (8006cf8 <HAL_DMA_IRQHandler+0xa50>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d018      	beq.n	8006c2c <HAL_DMA_IRQHandler+0x984>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a3f      	ldr	r2, [pc, #252]	; (8006cfc <HAL_DMA_IRQHandler+0xa54>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d013      	beq.n	8006c2c <HAL_DMA_IRQHandler+0x984>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a3d      	ldr	r2, [pc, #244]	; (8006d00 <HAL_DMA_IRQHandler+0xa58>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d00e      	beq.n	8006c2c <HAL_DMA_IRQHandler+0x984>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a3c      	ldr	r2, [pc, #240]	; (8006d04 <HAL_DMA_IRQHandler+0xa5c>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d009      	beq.n	8006c2c <HAL_DMA_IRQHandler+0x984>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a3a      	ldr	r2, [pc, #232]	; (8006d08 <HAL_DMA_IRQHandler+0xa60>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d004      	beq.n	8006c2c <HAL_DMA_IRQHandler+0x984>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a39      	ldr	r2, [pc, #228]	; (8006d0c <HAL_DMA_IRQHandler+0xa64>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d101      	bne.n	8006c30 <HAL_DMA_IRQHandler+0x988>
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e000      	b.n	8006c32 <HAL_DMA_IRQHandler+0x98a>
 8006c30:	2300      	movs	r3, #0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f000 823f 	beq.w	80070b6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c44:	f003 031f 	and.w	r3, r3, #31
 8006c48:	2204      	movs	r2, #4
 8006c4a:	409a      	lsls	r2, r3
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	4013      	ands	r3, r2
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f000 80cd 	beq.w	8006df0 <HAL_DMA_IRQHandler+0xb48>
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	f003 0304 	and.w	r3, r3, #4
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	f000 80c7 	beq.w	8006df0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c66:	f003 031f 	and.w	r3, r3, #31
 8006c6a:	2204      	movs	r2, #4
 8006c6c:	409a      	lsls	r2, r3
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d049      	beq.n	8006d10 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d109      	bne.n	8006c9a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	f000 8210 	beq.w	80070b0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c98:	e20a      	b.n	80070b0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	f000 8206 	beq.w	80070b0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cac:	e200      	b.n	80070b0 <HAL_DMA_IRQHandler+0xe08>
 8006cae:	bf00      	nop
 8006cb0:	40020010 	.word	0x40020010
 8006cb4:	40020028 	.word	0x40020028
 8006cb8:	40020040 	.word	0x40020040
 8006cbc:	40020058 	.word	0x40020058
 8006cc0:	40020070 	.word	0x40020070
 8006cc4:	40020088 	.word	0x40020088
 8006cc8:	400200a0 	.word	0x400200a0
 8006ccc:	400200b8 	.word	0x400200b8
 8006cd0:	40020410 	.word	0x40020410
 8006cd4:	40020428 	.word	0x40020428
 8006cd8:	40020440 	.word	0x40020440
 8006cdc:	40020458 	.word	0x40020458
 8006ce0:	40020470 	.word	0x40020470
 8006ce4:	40020488 	.word	0x40020488
 8006ce8:	400204a0 	.word	0x400204a0
 8006cec:	400204b8 	.word	0x400204b8
 8006cf0:	58025408 	.word	0x58025408
 8006cf4:	5802541c 	.word	0x5802541c
 8006cf8:	58025430 	.word	0x58025430
 8006cfc:	58025444 	.word	0x58025444
 8006d00:	58025458 	.word	0x58025458
 8006d04:	5802546c 	.word	0x5802546c
 8006d08:	58025480 	.word	0x58025480
 8006d0c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	f003 0320 	and.w	r3, r3, #32
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d160      	bne.n	8006ddc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a8c      	ldr	r2, [pc, #560]	; (8006f50 <HAL_DMA_IRQHandler+0xca8>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d04a      	beq.n	8006dba <HAL_DMA_IRQHandler+0xb12>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a8a      	ldr	r2, [pc, #552]	; (8006f54 <HAL_DMA_IRQHandler+0xcac>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d045      	beq.n	8006dba <HAL_DMA_IRQHandler+0xb12>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a89      	ldr	r2, [pc, #548]	; (8006f58 <HAL_DMA_IRQHandler+0xcb0>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d040      	beq.n	8006dba <HAL_DMA_IRQHandler+0xb12>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a87      	ldr	r2, [pc, #540]	; (8006f5c <HAL_DMA_IRQHandler+0xcb4>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d03b      	beq.n	8006dba <HAL_DMA_IRQHandler+0xb12>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a86      	ldr	r2, [pc, #536]	; (8006f60 <HAL_DMA_IRQHandler+0xcb8>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d036      	beq.n	8006dba <HAL_DMA_IRQHandler+0xb12>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a84      	ldr	r2, [pc, #528]	; (8006f64 <HAL_DMA_IRQHandler+0xcbc>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d031      	beq.n	8006dba <HAL_DMA_IRQHandler+0xb12>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a83      	ldr	r2, [pc, #524]	; (8006f68 <HAL_DMA_IRQHandler+0xcc0>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d02c      	beq.n	8006dba <HAL_DMA_IRQHandler+0xb12>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a81      	ldr	r2, [pc, #516]	; (8006f6c <HAL_DMA_IRQHandler+0xcc4>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d027      	beq.n	8006dba <HAL_DMA_IRQHandler+0xb12>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a80      	ldr	r2, [pc, #512]	; (8006f70 <HAL_DMA_IRQHandler+0xcc8>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d022      	beq.n	8006dba <HAL_DMA_IRQHandler+0xb12>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a7e      	ldr	r2, [pc, #504]	; (8006f74 <HAL_DMA_IRQHandler+0xccc>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d01d      	beq.n	8006dba <HAL_DMA_IRQHandler+0xb12>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a7d      	ldr	r2, [pc, #500]	; (8006f78 <HAL_DMA_IRQHandler+0xcd0>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d018      	beq.n	8006dba <HAL_DMA_IRQHandler+0xb12>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a7b      	ldr	r2, [pc, #492]	; (8006f7c <HAL_DMA_IRQHandler+0xcd4>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d013      	beq.n	8006dba <HAL_DMA_IRQHandler+0xb12>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a7a      	ldr	r2, [pc, #488]	; (8006f80 <HAL_DMA_IRQHandler+0xcd8>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d00e      	beq.n	8006dba <HAL_DMA_IRQHandler+0xb12>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a78      	ldr	r2, [pc, #480]	; (8006f84 <HAL_DMA_IRQHandler+0xcdc>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d009      	beq.n	8006dba <HAL_DMA_IRQHandler+0xb12>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a77      	ldr	r2, [pc, #476]	; (8006f88 <HAL_DMA_IRQHandler+0xce0>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d004      	beq.n	8006dba <HAL_DMA_IRQHandler+0xb12>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a75      	ldr	r2, [pc, #468]	; (8006f8c <HAL_DMA_IRQHandler+0xce4>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d108      	bne.n	8006dcc <HAL_DMA_IRQHandler+0xb24>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f022 0208 	bic.w	r2, r2, #8
 8006dc8:	601a      	str	r2, [r3, #0]
 8006dca:	e007      	b.n	8006ddc <HAL_DMA_IRQHandler+0xb34>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f022 0204 	bic.w	r2, r2, #4
 8006dda:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f000 8165 	beq.w	80070b0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dee:	e15f      	b.n	80070b0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006df4:	f003 031f 	and.w	r3, r3, #31
 8006df8:	2202      	movs	r2, #2
 8006dfa:	409a      	lsls	r2, r3
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	4013      	ands	r3, r2
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f000 80c5 	beq.w	8006f90 <HAL_DMA_IRQHandler+0xce8>
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	f003 0302 	and.w	r3, r3, #2
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f000 80bf 	beq.w	8006f90 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e16:	f003 031f 	and.w	r3, r3, #31
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	409a      	lsls	r2, r3
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d018      	beq.n	8006e5e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d109      	bne.n	8006e4a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f000 813a 	beq.w	80070b4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e48:	e134      	b.n	80070b4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	f000 8130 	beq.w	80070b4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e5c:	e12a      	b.n	80070b4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	f003 0320 	and.w	r3, r3, #32
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d168      	bne.n	8006f3a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a38      	ldr	r2, [pc, #224]	; (8006f50 <HAL_DMA_IRQHandler+0xca8>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d04a      	beq.n	8006f08 <HAL_DMA_IRQHandler+0xc60>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a37      	ldr	r2, [pc, #220]	; (8006f54 <HAL_DMA_IRQHandler+0xcac>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d045      	beq.n	8006f08 <HAL_DMA_IRQHandler+0xc60>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a35      	ldr	r2, [pc, #212]	; (8006f58 <HAL_DMA_IRQHandler+0xcb0>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d040      	beq.n	8006f08 <HAL_DMA_IRQHandler+0xc60>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a34      	ldr	r2, [pc, #208]	; (8006f5c <HAL_DMA_IRQHandler+0xcb4>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d03b      	beq.n	8006f08 <HAL_DMA_IRQHandler+0xc60>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a32      	ldr	r2, [pc, #200]	; (8006f60 <HAL_DMA_IRQHandler+0xcb8>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d036      	beq.n	8006f08 <HAL_DMA_IRQHandler+0xc60>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a31      	ldr	r2, [pc, #196]	; (8006f64 <HAL_DMA_IRQHandler+0xcbc>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d031      	beq.n	8006f08 <HAL_DMA_IRQHandler+0xc60>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a2f      	ldr	r2, [pc, #188]	; (8006f68 <HAL_DMA_IRQHandler+0xcc0>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d02c      	beq.n	8006f08 <HAL_DMA_IRQHandler+0xc60>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a2e      	ldr	r2, [pc, #184]	; (8006f6c <HAL_DMA_IRQHandler+0xcc4>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d027      	beq.n	8006f08 <HAL_DMA_IRQHandler+0xc60>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a2c      	ldr	r2, [pc, #176]	; (8006f70 <HAL_DMA_IRQHandler+0xcc8>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d022      	beq.n	8006f08 <HAL_DMA_IRQHandler+0xc60>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a2b      	ldr	r2, [pc, #172]	; (8006f74 <HAL_DMA_IRQHandler+0xccc>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d01d      	beq.n	8006f08 <HAL_DMA_IRQHandler+0xc60>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a29      	ldr	r2, [pc, #164]	; (8006f78 <HAL_DMA_IRQHandler+0xcd0>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d018      	beq.n	8006f08 <HAL_DMA_IRQHandler+0xc60>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a28      	ldr	r2, [pc, #160]	; (8006f7c <HAL_DMA_IRQHandler+0xcd4>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d013      	beq.n	8006f08 <HAL_DMA_IRQHandler+0xc60>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a26      	ldr	r2, [pc, #152]	; (8006f80 <HAL_DMA_IRQHandler+0xcd8>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d00e      	beq.n	8006f08 <HAL_DMA_IRQHandler+0xc60>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a25      	ldr	r2, [pc, #148]	; (8006f84 <HAL_DMA_IRQHandler+0xcdc>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d009      	beq.n	8006f08 <HAL_DMA_IRQHandler+0xc60>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a23      	ldr	r2, [pc, #140]	; (8006f88 <HAL_DMA_IRQHandler+0xce0>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d004      	beq.n	8006f08 <HAL_DMA_IRQHandler+0xc60>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a22      	ldr	r2, [pc, #136]	; (8006f8c <HAL_DMA_IRQHandler+0xce4>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d108      	bne.n	8006f1a <HAL_DMA_IRQHandler+0xc72>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f022 0214 	bic.w	r2, r2, #20
 8006f16:	601a      	str	r2, [r3, #0]
 8006f18:	e007      	b.n	8006f2a <HAL_DMA_IRQHandler+0xc82>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f022 020a 	bic.w	r2, r2, #10
 8006f28:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f000 80b8 	beq.w	80070b4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f4c:	e0b2      	b.n	80070b4 <HAL_DMA_IRQHandler+0xe0c>
 8006f4e:	bf00      	nop
 8006f50:	40020010 	.word	0x40020010
 8006f54:	40020028 	.word	0x40020028
 8006f58:	40020040 	.word	0x40020040
 8006f5c:	40020058 	.word	0x40020058
 8006f60:	40020070 	.word	0x40020070
 8006f64:	40020088 	.word	0x40020088
 8006f68:	400200a0 	.word	0x400200a0
 8006f6c:	400200b8 	.word	0x400200b8
 8006f70:	40020410 	.word	0x40020410
 8006f74:	40020428 	.word	0x40020428
 8006f78:	40020440 	.word	0x40020440
 8006f7c:	40020458 	.word	0x40020458
 8006f80:	40020470 	.word	0x40020470
 8006f84:	40020488 	.word	0x40020488
 8006f88:	400204a0 	.word	0x400204a0
 8006f8c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f94:	f003 031f 	and.w	r3, r3, #31
 8006f98:	2208      	movs	r2, #8
 8006f9a:	409a      	lsls	r2, r3
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f000 8088 	beq.w	80070b6 <HAL_DMA_IRQHandler+0xe0e>
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	f003 0308 	and.w	r3, r3, #8
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f000 8082 	beq.w	80070b6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a41      	ldr	r2, [pc, #260]	; (80070bc <HAL_DMA_IRQHandler+0xe14>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d04a      	beq.n	8007052 <HAL_DMA_IRQHandler+0xdaa>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a3f      	ldr	r2, [pc, #252]	; (80070c0 <HAL_DMA_IRQHandler+0xe18>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d045      	beq.n	8007052 <HAL_DMA_IRQHandler+0xdaa>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a3e      	ldr	r2, [pc, #248]	; (80070c4 <HAL_DMA_IRQHandler+0xe1c>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d040      	beq.n	8007052 <HAL_DMA_IRQHandler+0xdaa>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a3c      	ldr	r2, [pc, #240]	; (80070c8 <HAL_DMA_IRQHandler+0xe20>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d03b      	beq.n	8007052 <HAL_DMA_IRQHandler+0xdaa>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a3b      	ldr	r2, [pc, #236]	; (80070cc <HAL_DMA_IRQHandler+0xe24>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d036      	beq.n	8007052 <HAL_DMA_IRQHandler+0xdaa>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a39      	ldr	r2, [pc, #228]	; (80070d0 <HAL_DMA_IRQHandler+0xe28>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d031      	beq.n	8007052 <HAL_DMA_IRQHandler+0xdaa>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a38      	ldr	r2, [pc, #224]	; (80070d4 <HAL_DMA_IRQHandler+0xe2c>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d02c      	beq.n	8007052 <HAL_DMA_IRQHandler+0xdaa>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a36      	ldr	r2, [pc, #216]	; (80070d8 <HAL_DMA_IRQHandler+0xe30>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d027      	beq.n	8007052 <HAL_DMA_IRQHandler+0xdaa>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a35      	ldr	r2, [pc, #212]	; (80070dc <HAL_DMA_IRQHandler+0xe34>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d022      	beq.n	8007052 <HAL_DMA_IRQHandler+0xdaa>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a33      	ldr	r2, [pc, #204]	; (80070e0 <HAL_DMA_IRQHandler+0xe38>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d01d      	beq.n	8007052 <HAL_DMA_IRQHandler+0xdaa>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a32      	ldr	r2, [pc, #200]	; (80070e4 <HAL_DMA_IRQHandler+0xe3c>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d018      	beq.n	8007052 <HAL_DMA_IRQHandler+0xdaa>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a30      	ldr	r2, [pc, #192]	; (80070e8 <HAL_DMA_IRQHandler+0xe40>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d013      	beq.n	8007052 <HAL_DMA_IRQHandler+0xdaa>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a2f      	ldr	r2, [pc, #188]	; (80070ec <HAL_DMA_IRQHandler+0xe44>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d00e      	beq.n	8007052 <HAL_DMA_IRQHandler+0xdaa>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a2d      	ldr	r2, [pc, #180]	; (80070f0 <HAL_DMA_IRQHandler+0xe48>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d009      	beq.n	8007052 <HAL_DMA_IRQHandler+0xdaa>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a2c      	ldr	r2, [pc, #176]	; (80070f4 <HAL_DMA_IRQHandler+0xe4c>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d004      	beq.n	8007052 <HAL_DMA_IRQHandler+0xdaa>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a2a      	ldr	r2, [pc, #168]	; (80070f8 <HAL_DMA_IRQHandler+0xe50>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d108      	bne.n	8007064 <HAL_DMA_IRQHandler+0xdbc>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f022 021c 	bic.w	r2, r2, #28
 8007060:	601a      	str	r2, [r3, #0]
 8007062:	e007      	b.n	8007074 <HAL_DMA_IRQHandler+0xdcc>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f022 020e 	bic.w	r2, r2, #14
 8007072:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007078:	f003 031f 	and.w	r3, r3, #31
 800707c:	2201      	movs	r2, #1
 800707e:	409a      	lsls	r2, r3
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2201      	movs	r2, #1
 8007096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d009      	beq.n	80070b6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	4798      	blx	r3
 80070aa:	e004      	b.n	80070b6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80070ac:	bf00      	nop
 80070ae:	e002      	b.n	80070b6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070b0:	bf00      	nop
 80070b2:	e000      	b.n	80070b6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070b4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80070b6:	3728      	adds	r7, #40	; 0x28
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	40020010 	.word	0x40020010
 80070c0:	40020028 	.word	0x40020028
 80070c4:	40020040 	.word	0x40020040
 80070c8:	40020058 	.word	0x40020058
 80070cc:	40020070 	.word	0x40020070
 80070d0:	40020088 	.word	0x40020088
 80070d4:	400200a0 	.word	0x400200a0
 80070d8:	400200b8 	.word	0x400200b8
 80070dc:	40020410 	.word	0x40020410
 80070e0:	40020428 	.word	0x40020428
 80070e4:	40020440 	.word	0x40020440
 80070e8:	40020458 	.word	0x40020458
 80070ec:	40020470 	.word	0x40020470
 80070f0:	40020488 	.word	0x40020488
 80070f4:	400204a0 	.word	0x400204a0
 80070f8:	400204b8 	.word	0x400204b8

080070fc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8007108:	4618      	mov	r0, r3
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007114:	b480      	push	{r7}
 8007116:	b087      	sub	sp, #28
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	607a      	str	r2, [r7, #4]
 8007120:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007126:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800712c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a84      	ldr	r2, [pc, #528]	; (8007344 <DMA_SetConfig+0x230>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d072      	beq.n	800721e <DMA_SetConfig+0x10a>
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a82      	ldr	r2, [pc, #520]	; (8007348 <DMA_SetConfig+0x234>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d06d      	beq.n	800721e <DMA_SetConfig+0x10a>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a81      	ldr	r2, [pc, #516]	; (800734c <DMA_SetConfig+0x238>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d068      	beq.n	800721e <DMA_SetConfig+0x10a>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a7f      	ldr	r2, [pc, #508]	; (8007350 <DMA_SetConfig+0x23c>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d063      	beq.n	800721e <DMA_SetConfig+0x10a>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a7e      	ldr	r2, [pc, #504]	; (8007354 <DMA_SetConfig+0x240>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d05e      	beq.n	800721e <DMA_SetConfig+0x10a>
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a7c      	ldr	r2, [pc, #496]	; (8007358 <DMA_SetConfig+0x244>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d059      	beq.n	800721e <DMA_SetConfig+0x10a>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a7b      	ldr	r2, [pc, #492]	; (800735c <DMA_SetConfig+0x248>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d054      	beq.n	800721e <DMA_SetConfig+0x10a>
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a79      	ldr	r2, [pc, #484]	; (8007360 <DMA_SetConfig+0x24c>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d04f      	beq.n	800721e <DMA_SetConfig+0x10a>
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a78      	ldr	r2, [pc, #480]	; (8007364 <DMA_SetConfig+0x250>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d04a      	beq.n	800721e <DMA_SetConfig+0x10a>
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a76      	ldr	r2, [pc, #472]	; (8007368 <DMA_SetConfig+0x254>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d045      	beq.n	800721e <DMA_SetConfig+0x10a>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a75      	ldr	r2, [pc, #468]	; (800736c <DMA_SetConfig+0x258>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d040      	beq.n	800721e <DMA_SetConfig+0x10a>
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a73      	ldr	r2, [pc, #460]	; (8007370 <DMA_SetConfig+0x25c>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d03b      	beq.n	800721e <DMA_SetConfig+0x10a>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a72      	ldr	r2, [pc, #456]	; (8007374 <DMA_SetConfig+0x260>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d036      	beq.n	800721e <DMA_SetConfig+0x10a>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a70      	ldr	r2, [pc, #448]	; (8007378 <DMA_SetConfig+0x264>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d031      	beq.n	800721e <DMA_SetConfig+0x10a>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a6f      	ldr	r2, [pc, #444]	; (800737c <DMA_SetConfig+0x268>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d02c      	beq.n	800721e <DMA_SetConfig+0x10a>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a6d      	ldr	r2, [pc, #436]	; (8007380 <DMA_SetConfig+0x26c>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d027      	beq.n	800721e <DMA_SetConfig+0x10a>
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a6c      	ldr	r2, [pc, #432]	; (8007384 <DMA_SetConfig+0x270>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d022      	beq.n	800721e <DMA_SetConfig+0x10a>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a6a      	ldr	r2, [pc, #424]	; (8007388 <DMA_SetConfig+0x274>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d01d      	beq.n	800721e <DMA_SetConfig+0x10a>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a69      	ldr	r2, [pc, #420]	; (800738c <DMA_SetConfig+0x278>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d018      	beq.n	800721e <DMA_SetConfig+0x10a>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a67      	ldr	r2, [pc, #412]	; (8007390 <DMA_SetConfig+0x27c>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d013      	beq.n	800721e <DMA_SetConfig+0x10a>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a66      	ldr	r2, [pc, #408]	; (8007394 <DMA_SetConfig+0x280>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d00e      	beq.n	800721e <DMA_SetConfig+0x10a>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a64      	ldr	r2, [pc, #400]	; (8007398 <DMA_SetConfig+0x284>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d009      	beq.n	800721e <DMA_SetConfig+0x10a>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a63      	ldr	r2, [pc, #396]	; (800739c <DMA_SetConfig+0x288>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d004      	beq.n	800721e <DMA_SetConfig+0x10a>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a61      	ldr	r2, [pc, #388]	; (80073a0 <DMA_SetConfig+0x28c>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d101      	bne.n	8007222 <DMA_SetConfig+0x10e>
 800721e:	2301      	movs	r3, #1
 8007220:	e000      	b.n	8007224 <DMA_SetConfig+0x110>
 8007222:	2300      	movs	r3, #0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00d      	beq.n	8007244 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007230:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007236:	2b00      	cmp	r3, #0
 8007238:	d004      	beq.n	8007244 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007242:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a3e      	ldr	r2, [pc, #248]	; (8007344 <DMA_SetConfig+0x230>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d04a      	beq.n	80072e4 <DMA_SetConfig+0x1d0>
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a3d      	ldr	r2, [pc, #244]	; (8007348 <DMA_SetConfig+0x234>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d045      	beq.n	80072e4 <DMA_SetConfig+0x1d0>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a3b      	ldr	r2, [pc, #236]	; (800734c <DMA_SetConfig+0x238>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d040      	beq.n	80072e4 <DMA_SetConfig+0x1d0>
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a3a      	ldr	r2, [pc, #232]	; (8007350 <DMA_SetConfig+0x23c>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d03b      	beq.n	80072e4 <DMA_SetConfig+0x1d0>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a38      	ldr	r2, [pc, #224]	; (8007354 <DMA_SetConfig+0x240>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d036      	beq.n	80072e4 <DMA_SetConfig+0x1d0>
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a37      	ldr	r2, [pc, #220]	; (8007358 <DMA_SetConfig+0x244>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d031      	beq.n	80072e4 <DMA_SetConfig+0x1d0>
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a35      	ldr	r2, [pc, #212]	; (800735c <DMA_SetConfig+0x248>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d02c      	beq.n	80072e4 <DMA_SetConfig+0x1d0>
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a34      	ldr	r2, [pc, #208]	; (8007360 <DMA_SetConfig+0x24c>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d027      	beq.n	80072e4 <DMA_SetConfig+0x1d0>
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a32      	ldr	r2, [pc, #200]	; (8007364 <DMA_SetConfig+0x250>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d022      	beq.n	80072e4 <DMA_SetConfig+0x1d0>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a31      	ldr	r2, [pc, #196]	; (8007368 <DMA_SetConfig+0x254>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d01d      	beq.n	80072e4 <DMA_SetConfig+0x1d0>
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a2f      	ldr	r2, [pc, #188]	; (800736c <DMA_SetConfig+0x258>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d018      	beq.n	80072e4 <DMA_SetConfig+0x1d0>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a2e      	ldr	r2, [pc, #184]	; (8007370 <DMA_SetConfig+0x25c>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d013      	beq.n	80072e4 <DMA_SetConfig+0x1d0>
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a2c      	ldr	r2, [pc, #176]	; (8007374 <DMA_SetConfig+0x260>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d00e      	beq.n	80072e4 <DMA_SetConfig+0x1d0>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a2b      	ldr	r2, [pc, #172]	; (8007378 <DMA_SetConfig+0x264>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d009      	beq.n	80072e4 <DMA_SetConfig+0x1d0>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a29      	ldr	r2, [pc, #164]	; (800737c <DMA_SetConfig+0x268>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d004      	beq.n	80072e4 <DMA_SetConfig+0x1d0>
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a28      	ldr	r2, [pc, #160]	; (8007380 <DMA_SetConfig+0x26c>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d101      	bne.n	80072e8 <DMA_SetConfig+0x1d4>
 80072e4:	2301      	movs	r3, #1
 80072e6:	e000      	b.n	80072ea <DMA_SetConfig+0x1d6>
 80072e8:	2300      	movs	r3, #0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d05a      	beq.n	80073a4 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072f2:	f003 031f 	and.w	r3, r3, #31
 80072f6:	223f      	movs	r2, #63	; 0x3f
 80072f8:	409a      	lsls	r2, r3
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800730c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	683a      	ldr	r2, [r7, #0]
 8007314:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	2b40      	cmp	r3, #64	; 0x40
 800731c:	d108      	bne.n	8007330 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800732e:	e087      	b.n	8007440 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	60da      	str	r2, [r3, #12]
}
 8007340:	e07e      	b.n	8007440 <DMA_SetConfig+0x32c>
 8007342:	bf00      	nop
 8007344:	40020010 	.word	0x40020010
 8007348:	40020028 	.word	0x40020028
 800734c:	40020040 	.word	0x40020040
 8007350:	40020058 	.word	0x40020058
 8007354:	40020070 	.word	0x40020070
 8007358:	40020088 	.word	0x40020088
 800735c:	400200a0 	.word	0x400200a0
 8007360:	400200b8 	.word	0x400200b8
 8007364:	40020410 	.word	0x40020410
 8007368:	40020428 	.word	0x40020428
 800736c:	40020440 	.word	0x40020440
 8007370:	40020458 	.word	0x40020458
 8007374:	40020470 	.word	0x40020470
 8007378:	40020488 	.word	0x40020488
 800737c:	400204a0 	.word	0x400204a0
 8007380:	400204b8 	.word	0x400204b8
 8007384:	58025408 	.word	0x58025408
 8007388:	5802541c 	.word	0x5802541c
 800738c:	58025430 	.word	0x58025430
 8007390:	58025444 	.word	0x58025444
 8007394:	58025458 	.word	0x58025458
 8007398:	5802546c 	.word	0x5802546c
 800739c:	58025480 	.word	0x58025480
 80073a0:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a28      	ldr	r2, [pc, #160]	; (800744c <DMA_SetConfig+0x338>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d022      	beq.n	80073f4 <DMA_SetConfig+0x2e0>
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a27      	ldr	r2, [pc, #156]	; (8007450 <DMA_SetConfig+0x33c>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d01d      	beq.n	80073f4 <DMA_SetConfig+0x2e0>
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a25      	ldr	r2, [pc, #148]	; (8007454 <DMA_SetConfig+0x340>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d018      	beq.n	80073f4 <DMA_SetConfig+0x2e0>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a24      	ldr	r2, [pc, #144]	; (8007458 <DMA_SetConfig+0x344>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d013      	beq.n	80073f4 <DMA_SetConfig+0x2e0>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a22      	ldr	r2, [pc, #136]	; (800745c <DMA_SetConfig+0x348>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d00e      	beq.n	80073f4 <DMA_SetConfig+0x2e0>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a21      	ldr	r2, [pc, #132]	; (8007460 <DMA_SetConfig+0x34c>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d009      	beq.n	80073f4 <DMA_SetConfig+0x2e0>
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a1f      	ldr	r2, [pc, #124]	; (8007464 <DMA_SetConfig+0x350>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d004      	beq.n	80073f4 <DMA_SetConfig+0x2e0>
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a1e      	ldr	r2, [pc, #120]	; (8007468 <DMA_SetConfig+0x354>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d101      	bne.n	80073f8 <DMA_SetConfig+0x2e4>
 80073f4:	2301      	movs	r3, #1
 80073f6:	e000      	b.n	80073fa <DMA_SetConfig+0x2e6>
 80073f8:	2300      	movs	r3, #0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d020      	beq.n	8007440 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007402:	f003 031f 	and.w	r3, r3, #31
 8007406:	2201      	movs	r2, #1
 8007408:	409a      	lsls	r2, r3
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	683a      	ldr	r2, [r7, #0]
 8007414:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	2b40      	cmp	r3, #64	; 0x40
 800741c:	d108      	bne.n	8007430 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	68ba      	ldr	r2, [r7, #8]
 800742c:	60da      	str	r2, [r3, #12]
}
 800742e:	e007      	b.n	8007440 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	68ba      	ldr	r2, [r7, #8]
 8007436:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	60da      	str	r2, [r3, #12]
}
 8007440:	bf00      	nop
 8007442:	371c      	adds	r7, #28
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr
 800744c:	58025408 	.word	0x58025408
 8007450:	5802541c 	.word	0x5802541c
 8007454:	58025430 	.word	0x58025430
 8007458:	58025444 	.word	0x58025444
 800745c:	58025458 	.word	0x58025458
 8007460:	5802546c 	.word	0x5802546c
 8007464:	58025480 	.word	0x58025480
 8007468:	58025494 	.word	0x58025494

0800746c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a42      	ldr	r2, [pc, #264]	; (8007584 <DMA_CalcBaseAndBitshift+0x118>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d04a      	beq.n	8007514 <DMA_CalcBaseAndBitshift+0xa8>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a41      	ldr	r2, [pc, #260]	; (8007588 <DMA_CalcBaseAndBitshift+0x11c>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d045      	beq.n	8007514 <DMA_CalcBaseAndBitshift+0xa8>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a3f      	ldr	r2, [pc, #252]	; (800758c <DMA_CalcBaseAndBitshift+0x120>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d040      	beq.n	8007514 <DMA_CalcBaseAndBitshift+0xa8>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a3e      	ldr	r2, [pc, #248]	; (8007590 <DMA_CalcBaseAndBitshift+0x124>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d03b      	beq.n	8007514 <DMA_CalcBaseAndBitshift+0xa8>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a3c      	ldr	r2, [pc, #240]	; (8007594 <DMA_CalcBaseAndBitshift+0x128>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d036      	beq.n	8007514 <DMA_CalcBaseAndBitshift+0xa8>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a3b      	ldr	r2, [pc, #236]	; (8007598 <DMA_CalcBaseAndBitshift+0x12c>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d031      	beq.n	8007514 <DMA_CalcBaseAndBitshift+0xa8>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a39      	ldr	r2, [pc, #228]	; (800759c <DMA_CalcBaseAndBitshift+0x130>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d02c      	beq.n	8007514 <DMA_CalcBaseAndBitshift+0xa8>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a38      	ldr	r2, [pc, #224]	; (80075a0 <DMA_CalcBaseAndBitshift+0x134>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d027      	beq.n	8007514 <DMA_CalcBaseAndBitshift+0xa8>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a36      	ldr	r2, [pc, #216]	; (80075a4 <DMA_CalcBaseAndBitshift+0x138>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d022      	beq.n	8007514 <DMA_CalcBaseAndBitshift+0xa8>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a35      	ldr	r2, [pc, #212]	; (80075a8 <DMA_CalcBaseAndBitshift+0x13c>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d01d      	beq.n	8007514 <DMA_CalcBaseAndBitshift+0xa8>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a33      	ldr	r2, [pc, #204]	; (80075ac <DMA_CalcBaseAndBitshift+0x140>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d018      	beq.n	8007514 <DMA_CalcBaseAndBitshift+0xa8>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a32      	ldr	r2, [pc, #200]	; (80075b0 <DMA_CalcBaseAndBitshift+0x144>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d013      	beq.n	8007514 <DMA_CalcBaseAndBitshift+0xa8>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a30      	ldr	r2, [pc, #192]	; (80075b4 <DMA_CalcBaseAndBitshift+0x148>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d00e      	beq.n	8007514 <DMA_CalcBaseAndBitshift+0xa8>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a2f      	ldr	r2, [pc, #188]	; (80075b8 <DMA_CalcBaseAndBitshift+0x14c>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d009      	beq.n	8007514 <DMA_CalcBaseAndBitshift+0xa8>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a2d      	ldr	r2, [pc, #180]	; (80075bc <DMA_CalcBaseAndBitshift+0x150>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d004      	beq.n	8007514 <DMA_CalcBaseAndBitshift+0xa8>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a2c      	ldr	r2, [pc, #176]	; (80075c0 <DMA_CalcBaseAndBitshift+0x154>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d101      	bne.n	8007518 <DMA_CalcBaseAndBitshift+0xac>
 8007514:	2301      	movs	r3, #1
 8007516:	e000      	b.n	800751a <DMA_CalcBaseAndBitshift+0xae>
 8007518:	2300      	movs	r3, #0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d024      	beq.n	8007568 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	b2db      	uxtb	r3, r3
 8007524:	3b10      	subs	r3, #16
 8007526:	4a27      	ldr	r2, [pc, #156]	; (80075c4 <DMA_CalcBaseAndBitshift+0x158>)
 8007528:	fba2 2303 	umull	r2, r3, r2, r3
 800752c:	091b      	lsrs	r3, r3, #4
 800752e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f003 0307 	and.w	r3, r3, #7
 8007536:	4a24      	ldr	r2, [pc, #144]	; (80075c8 <DMA_CalcBaseAndBitshift+0x15c>)
 8007538:	5cd3      	ldrb	r3, [r2, r3]
 800753a:	461a      	mov	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2b03      	cmp	r3, #3
 8007544:	d908      	bls.n	8007558 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	461a      	mov	r2, r3
 800754c:	4b1f      	ldr	r3, [pc, #124]	; (80075cc <DMA_CalcBaseAndBitshift+0x160>)
 800754e:	4013      	ands	r3, r2
 8007550:	1d1a      	adds	r2, r3, #4
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	659a      	str	r2, [r3, #88]	; 0x58
 8007556:	e00d      	b.n	8007574 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	461a      	mov	r2, r3
 800755e:	4b1b      	ldr	r3, [pc, #108]	; (80075cc <DMA_CalcBaseAndBitshift+0x160>)
 8007560:	4013      	ands	r3, r2
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	6593      	str	r3, [r2, #88]	; 0x58
 8007566:	e005      	b.n	8007574 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007578:	4618      	mov	r0, r3
 800757a:	3714      	adds	r7, #20
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr
 8007584:	40020010 	.word	0x40020010
 8007588:	40020028 	.word	0x40020028
 800758c:	40020040 	.word	0x40020040
 8007590:	40020058 	.word	0x40020058
 8007594:	40020070 	.word	0x40020070
 8007598:	40020088 	.word	0x40020088
 800759c:	400200a0 	.word	0x400200a0
 80075a0:	400200b8 	.word	0x400200b8
 80075a4:	40020410 	.word	0x40020410
 80075a8:	40020428 	.word	0x40020428
 80075ac:	40020440 	.word	0x40020440
 80075b0:	40020458 	.word	0x40020458
 80075b4:	40020470 	.word	0x40020470
 80075b8:	40020488 	.word	0x40020488
 80075bc:	400204a0 	.word	0x400204a0
 80075c0:	400204b8 	.word	0x400204b8
 80075c4:	aaaaaaab 	.word	0xaaaaaaab
 80075c8:	0802912c 	.word	0x0802912c
 80075cc:	fffffc00 	.word	0xfffffc00

080075d0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b085      	sub	sp, #20
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075d8:	2300      	movs	r3, #0
 80075da:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d120      	bne.n	8007626 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e8:	2b03      	cmp	r3, #3
 80075ea:	d858      	bhi.n	800769e <DMA_CheckFifoParam+0xce>
 80075ec:	a201      	add	r2, pc, #4	; (adr r2, 80075f4 <DMA_CheckFifoParam+0x24>)
 80075ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f2:	bf00      	nop
 80075f4:	08007605 	.word	0x08007605
 80075f8:	08007617 	.word	0x08007617
 80075fc:	08007605 	.word	0x08007605
 8007600:	0800769f 	.word	0x0800769f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007608:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800760c:	2b00      	cmp	r3, #0
 800760e:	d048      	beq.n	80076a2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007614:	e045      	b.n	80076a2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800761e:	d142      	bne.n	80076a6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007624:	e03f      	b.n	80076a6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	699b      	ldr	r3, [r3, #24]
 800762a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800762e:	d123      	bne.n	8007678 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007634:	2b03      	cmp	r3, #3
 8007636:	d838      	bhi.n	80076aa <DMA_CheckFifoParam+0xda>
 8007638:	a201      	add	r2, pc, #4	; (adr r2, 8007640 <DMA_CheckFifoParam+0x70>)
 800763a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763e:	bf00      	nop
 8007640:	08007651 	.word	0x08007651
 8007644:	08007657 	.word	0x08007657
 8007648:	08007651 	.word	0x08007651
 800764c:	08007669 	.word	0x08007669
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	73fb      	strb	r3, [r7, #15]
        break;
 8007654:	e030      	b.n	80076b8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800765e:	2b00      	cmp	r3, #0
 8007660:	d025      	beq.n	80076ae <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007666:	e022      	b.n	80076ae <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007670:	d11f      	bne.n	80076b2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007676:	e01c      	b.n	80076b2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767c:	2b02      	cmp	r3, #2
 800767e:	d902      	bls.n	8007686 <DMA_CheckFifoParam+0xb6>
 8007680:	2b03      	cmp	r3, #3
 8007682:	d003      	beq.n	800768c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007684:	e018      	b.n	80076b8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	73fb      	strb	r3, [r7, #15]
        break;
 800768a:	e015      	b.n	80076b8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007690:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00e      	beq.n	80076b6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	73fb      	strb	r3, [r7, #15]
    break;
 800769c:	e00b      	b.n	80076b6 <DMA_CheckFifoParam+0xe6>
        break;
 800769e:	bf00      	nop
 80076a0:	e00a      	b.n	80076b8 <DMA_CheckFifoParam+0xe8>
        break;
 80076a2:	bf00      	nop
 80076a4:	e008      	b.n	80076b8 <DMA_CheckFifoParam+0xe8>
        break;
 80076a6:	bf00      	nop
 80076a8:	e006      	b.n	80076b8 <DMA_CheckFifoParam+0xe8>
        break;
 80076aa:	bf00      	nop
 80076ac:	e004      	b.n	80076b8 <DMA_CheckFifoParam+0xe8>
        break;
 80076ae:	bf00      	nop
 80076b0:	e002      	b.n	80076b8 <DMA_CheckFifoParam+0xe8>
        break;
 80076b2:	bf00      	nop
 80076b4:	e000      	b.n	80076b8 <DMA_CheckFifoParam+0xe8>
    break;
 80076b6:	bf00      	nop
    }
  }

  return status;
 80076b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3714      	adds	r7, #20
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop

080076c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a38      	ldr	r2, [pc, #224]	; (80077bc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d022      	beq.n	8007726 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a36      	ldr	r2, [pc, #216]	; (80077c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d01d      	beq.n	8007726 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a35      	ldr	r2, [pc, #212]	; (80077c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d018      	beq.n	8007726 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a33      	ldr	r2, [pc, #204]	; (80077c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d013      	beq.n	8007726 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a32      	ldr	r2, [pc, #200]	; (80077cc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d00e      	beq.n	8007726 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a30      	ldr	r2, [pc, #192]	; (80077d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d009      	beq.n	8007726 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a2f      	ldr	r2, [pc, #188]	; (80077d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d004      	beq.n	8007726 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a2d      	ldr	r2, [pc, #180]	; (80077d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d101      	bne.n	800772a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007726:	2301      	movs	r3, #1
 8007728:	e000      	b.n	800772c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800772a:	2300      	movs	r3, #0
 800772c:	2b00      	cmp	r3, #0
 800772e:	d01a      	beq.n	8007766 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	b2db      	uxtb	r3, r3
 8007736:	3b08      	subs	r3, #8
 8007738:	4a28      	ldr	r2, [pc, #160]	; (80077dc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800773a:	fba2 2303 	umull	r2, r3, r2, r3
 800773e:	091b      	lsrs	r3, r3, #4
 8007740:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	4b26      	ldr	r3, [pc, #152]	; (80077e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007746:	4413      	add	r3, r2
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	461a      	mov	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4a24      	ldr	r2, [pc, #144]	; (80077e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007754:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f003 031f 	and.w	r3, r3, #31
 800775c:	2201      	movs	r2, #1
 800775e:	409a      	lsls	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007764:	e024      	b.n	80077b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	b2db      	uxtb	r3, r3
 800776c:	3b10      	subs	r3, #16
 800776e:	4a1e      	ldr	r2, [pc, #120]	; (80077e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007770:	fba2 2303 	umull	r2, r3, r2, r3
 8007774:	091b      	lsrs	r3, r3, #4
 8007776:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	4a1c      	ldr	r2, [pc, #112]	; (80077ec <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d806      	bhi.n	800778e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	4a1b      	ldr	r2, [pc, #108]	; (80077f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d902      	bls.n	800778e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	3308      	adds	r3, #8
 800778c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800778e:	68fa      	ldr	r2, [r7, #12]
 8007790:	4b18      	ldr	r3, [pc, #96]	; (80077f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007792:	4413      	add	r3, r2
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	461a      	mov	r2, r3
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4a16      	ldr	r2, [pc, #88]	; (80077f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80077a0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f003 031f 	and.w	r3, r3, #31
 80077a8:	2201      	movs	r2, #1
 80077aa:	409a      	lsls	r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	669a      	str	r2, [r3, #104]	; 0x68
}
 80077b0:	bf00      	nop
 80077b2:	3714      	adds	r7, #20
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr
 80077bc:	58025408 	.word	0x58025408
 80077c0:	5802541c 	.word	0x5802541c
 80077c4:	58025430 	.word	0x58025430
 80077c8:	58025444 	.word	0x58025444
 80077cc:	58025458 	.word	0x58025458
 80077d0:	5802546c 	.word	0x5802546c
 80077d4:	58025480 	.word	0x58025480
 80077d8:	58025494 	.word	0x58025494
 80077dc:	cccccccd 	.word	0xcccccccd
 80077e0:	16009600 	.word	0x16009600
 80077e4:	58025880 	.word	0x58025880
 80077e8:	aaaaaaab 	.word	0xaaaaaaab
 80077ec:	400204b8 	.word	0x400204b8
 80077f0:	4002040f 	.word	0x4002040f
 80077f4:	10008200 	.word	0x10008200
 80077f8:	40020880 	.word	0x40020880

080077fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	b2db      	uxtb	r3, r3
 800780a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d04a      	beq.n	80078a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2b08      	cmp	r3, #8
 8007816:	d847      	bhi.n	80078a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a25      	ldr	r2, [pc, #148]	; (80078b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d022      	beq.n	8007868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a24      	ldr	r2, [pc, #144]	; (80078b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d01d      	beq.n	8007868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a22      	ldr	r2, [pc, #136]	; (80078bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d018      	beq.n	8007868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a21      	ldr	r2, [pc, #132]	; (80078c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d013      	beq.n	8007868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a1f      	ldr	r2, [pc, #124]	; (80078c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d00e      	beq.n	8007868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a1e      	ldr	r2, [pc, #120]	; (80078c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d009      	beq.n	8007868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a1c      	ldr	r2, [pc, #112]	; (80078cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d004      	beq.n	8007868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a1b      	ldr	r2, [pc, #108]	; (80078d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d101      	bne.n	800786c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007868:	2301      	movs	r3, #1
 800786a:	e000      	b.n	800786e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800786c:	2300      	movs	r3, #0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d00a      	beq.n	8007888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007872:	68fa      	ldr	r2, [r7, #12]
 8007874:	4b17      	ldr	r3, [pc, #92]	; (80078d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007876:	4413      	add	r3, r2
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	461a      	mov	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a15      	ldr	r2, [pc, #84]	; (80078d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007884:	671a      	str	r2, [r3, #112]	; 0x70
 8007886:	e009      	b.n	800789c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	4b14      	ldr	r3, [pc, #80]	; (80078dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800788c:	4413      	add	r3, r2
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	461a      	mov	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4a11      	ldr	r2, [pc, #68]	; (80078e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800789a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	3b01      	subs	r3, #1
 80078a0:	2201      	movs	r2, #1
 80078a2:	409a      	lsls	r2, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80078a8:	bf00      	nop
 80078aa:	3714      	adds	r7, #20
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr
 80078b4:	58025408 	.word	0x58025408
 80078b8:	5802541c 	.word	0x5802541c
 80078bc:	58025430 	.word	0x58025430
 80078c0:	58025444 	.word	0x58025444
 80078c4:	58025458 	.word	0x58025458
 80078c8:	5802546c 	.word	0x5802546c
 80078cc:	58025480 	.word	0x58025480
 80078d0:	58025494 	.word	0x58025494
 80078d4:	1600963f 	.word	0x1600963f
 80078d8:	58025940 	.word	0x58025940
 80078dc:	1000823f 	.word	0x1000823f
 80078e0:	40020940 	.word	0x40020940

080078e4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d101      	bne.n	80078f6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	e0c6      	b.n	8007a84 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d102      	bne.n	8007904 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f009 f9a0 	bl	8010c44 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2223      	movs	r2, #35	; 0x23
 8007908:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800790a:	4b60      	ldr	r3, [pc, #384]	; (8007a8c <HAL_ETH_Init+0x1a8>)
 800790c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007910:	4a5e      	ldr	r2, [pc, #376]	; (8007a8c <HAL_ETH_Init+0x1a8>)
 8007912:	f043 0302 	orr.w	r3, r3, #2
 8007916:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800791a:	4b5c      	ldr	r3, [pc, #368]	; (8007a8c <HAL_ETH_Init+0x1a8>)
 800791c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007920:	f003 0302 	and.w	r3, r3, #2
 8007924:	60bb      	str	r3, [r7, #8]
 8007926:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	7a1b      	ldrb	r3, [r3, #8]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d103      	bne.n	8007938 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8007930:	2000      	movs	r0, #0
 8007932:	f7fc fba1 	bl	8004078 <HAL_SYSCFG_ETHInterfaceSelect>
 8007936:	e003      	b.n	8007940 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8007938:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800793c:	f7fc fb9c 	bl	8004078 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f042 0201 	orr.w	r2, r2, #1
 8007952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007956:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007958:	f7fc fb52 	bl	8004000 <HAL_GetTick>
 800795c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800795e:	e00f      	b.n	8007980 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8007960:	f7fc fb4e 	bl	8004000 <HAL_GetTick>
 8007964:	4602      	mov	r2, r0
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	1ad3      	subs	r3, r2, r3
 800796a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800796e:	d907      	bls.n	8007980 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2204      	movs	r2, #4
 8007974:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	22e0      	movs	r2, #224	; 0xe0
 800797a:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	e081      	b.n	8007a84 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f003 0301 	and.w	r3, r3, #1
 800798e:	2b00      	cmp	r3, #0
 8007990:	d1e6      	bne.n	8007960 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f001 faa4 	bl	8008ee0 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8007998:	f002 ffec 	bl	800a974 <HAL_RCC_GetHCLKFreq>
 800799c:	4603      	mov	r3, r0
 800799e:	4a3c      	ldr	r2, [pc, #240]	; (8007a90 <HAL_ETH_Init+0x1ac>)
 80079a0:	fba2 2303 	umull	r2, r3, r2, r3
 80079a4:	0c9a      	lsrs	r2, r3, #18
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	3a01      	subs	r2, #1
 80079ac:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f001 f9f7 	bl	8008da4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80079cc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80079d0:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	695b      	ldr	r3, [r3, #20]
 80079d6:	f003 0303 	and.w	r3, r3, #3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d007      	beq.n	80079ee <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2201      	movs	r2, #1
 80079e2:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	22e0      	movs	r2, #224	; 0xe0
 80079e8:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e04a      	b.n	8007a84 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	f241 1308 	movw	r3, #4360	; 0x1108
 80079f6:	4413      	add	r3, r2
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	4b26      	ldr	r3, [pc, #152]	; (8007a94 <HAL_ETH_Init+0x1b0>)
 80079fc:	4013      	ands	r3, r2
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	6952      	ldr	r2, [r2, #20]
 8007a02:	0052      	lsls	r2, r2, #1
 8007a04:	6879      	ldr	r1, [r7, #4]
 8007a06:	6809      	ldr	r1, [r1, #0]
 8007a08:	431a      	orrs	r2, r3
 8007a0a:	f241 1308 	movw	r3, #4360	; 0x1108
 8007a0e:	440b      	add	r3, r1
 8007a10:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f001 fabc 	bl	8008f90 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f001 fb00 	bl	800901e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	3305      	adds	r3, #5
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	021a      	lsls	r2, r3, #8
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	3304      	adds	r3, #4
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	4619      	mov	r1, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	430a      	orrs	r2, r1
 8007a38:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	3303      	adds	r3, #3
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	061a      	lsls	r2, r3, #24
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	3302      	adds	r3, #2
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	041b      	lsls	r3, r3, #16
 8007a50:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	3301      	adds	r3, #1
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8007a5c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8007a6a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8007a6c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2210      	movs	r2, #16
 8007a7a:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2210      	movs	r2, #16
 8007a80:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	58024400 	.word	0x58024400
 8007a90:	431bde83 	.word	0x431bde83
 8007a94:	ffff8001 	.word	0xffff8001

08007a98 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b087      	sub	sp, #28
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	607a      	str	r2, [r7, #4]
 8007aa4:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8007aa6:	68fa      	ldr	r2, [r7, #12]
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	3310      	adds	r3, #16
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	4413      	add	r3, r2
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d002      	beq.n	8007ac0 <HAL_ETH_DescAssignMemory+0x28>
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	2b03      	cmp	r3, #3
 8007abe:	d904      	bls.n	8007aca <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e021      	b.n	8007b0e <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00b      	beq.n	8007b00 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8007ae8:	683a      	ldr	r2, [r7, #0]
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8007aee:	683a      	ldr	r2, [r7, #0]
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	371c      	adds	r7, #28
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr

08007b1a <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8007b1a:	b480      	push	{r7}
 8007b1c:	b083      	sub	sp, #12
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
  if(heth->gState == HAL_ETH_STATE_READY)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b26:	2b10      	cmp	r3, #16
 8007b28:	d14c      	bne.n	8007bc4 <HAL_ETH_Start+0xaa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2223      	movs	r2, #35	; 0x23
 8007b2e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f042 0202 	orr.w	r2, r2, #2
 8007b3e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f042 0201 	orr.w	r2, r2, #1
 8007b4e:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f042 0201 	orr.w	r2, r2, #1
 8007b60:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	f241 1304 	movw	r3, #4356	; 0x1104
 8007b6c:	4413      	add	r3, r2
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	6811      	ldr	r1, [r2, #0]
 8007b74:	f043 0201 	orr.w	r2, r3, #1
 8007b78:	f241 1304 	movw	r3, #4356	; 0x1104
 8007b7c:	440b      	add	r3, r1
 8007b7e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	f241 1308 	movw	r3, #4360	; 0x1108
 8007b88:	4413      	add	r3, r2
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	6811      	ldr	r1, [r2, #0]
 8007b90:	f043 0201 	orr.w	r2, r3, #1
 8007b94:	f241 1308 	movw	r3, #4360	; 0x1108
 8007b98:	440b      	add	r3, r1
 8007b9a:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8007bae:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8007bb2:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2210      	movs	r2, #16
 8007bb8:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2222      	movs	r2, #34	; 0x22
 8007bbe:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	e000      	b.n	8007bc6 <HAL_ETH_Start+0xac>
  }
  else
  {
    return HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
  }
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	370c      	adds	r7, #12
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr

08007bd2 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8007bd2:	b480      	push	{r7}
 8007bd4:	b083      	sub	sp, #12
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
  if(heth->gState != HAL_ETH_STATE_RESET)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d040      	beq.n	8007c64 <HAL_ETH_Stop+0x92>
  {
     /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2223      	movs	r2, #35	; 0x23
 8007be6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	f241 1304 	movw	r3, #4356	; 0x1104
 8007bf0:	4413      	add	r3, r2
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	6811      	ldr	r1, [r2, #0]
 8007bf8:	f023 0201 	bic.w	r2, r3, #1
 8007bfc:	f241 1304 	movw	r3, #4356	; 0x1104
 8007c00:	440b      	add	r3, r1
 8007c02:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	f241 1308 	movw	r3, #4360	; 0x1108
 8007c0c:	4413      	add	r3, r2
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	6811      	ldr	r1, [r2, #0]
 8007c14:	f023 0201 	bic.w	r2, r3, #1
 8007c18:	f241 1308 	movw	r3, #4360	; 0x1108
 8007c1c:	440b      	add	r3, r1
 8007c1e:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f022 0201 	bic.w	r2, r2, #1
 8007c2e:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f042 0201 	orr.w	r2, r2, #1
 8007c40:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f022 0202 	bic.w	r2, r2, #2
 8007c52:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2210      	movs	r2, #16
 8007c58:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2210      	movs	r2, #16
 8007c5e:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 8007c60:	2300      	movs	r3, #0
 8007c62:	e000      	b.n	8007c66 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
  }
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	370c      	adds	r7, #12
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr

08007c72 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b086      	sub	sp, #24
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	60f8      	str	r0, [r7, #12]
 8007c7a:	60b9      	str	r1, [r7, #8]
 8007c7c:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d107      	bne.n	8007c94 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c88:	f043 0201 	orr.w	r2, r3, #1
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	e073      	b.n	8007d7c <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c98:	2b10      	cmp	r3, #16
 8007c9a:	d16e      	bne.n	8007d7a <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	68b9      	ldr	r1, [r7, #8]
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	f001 fa19 	bl	80090d8 <ETH_Prepare_Tx_Descriptors>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d007      	beq.n	8007cbc <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cb0:	f043 0202 	orr.w	r2, r3, #2
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	e05f      	b.n	8007d7c <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	3206      	adds	r2, #6
 8007cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cc8:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cce:	1c5a      	adds	r2, r3, #1
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	629a      	str	r2, [r3, #40]	; 0x28
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd8:	2b03      	cmp	r3, #3
 8007cda:	d904      	bls.n	8007ce6 <HAL_ETH_Transmit+0x74>
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce0:	1f1a      	subs	r2, r3, #4
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	3106      	adds	r1, #6
 8007cf2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8007cf6:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8007cfa:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8007cfc:	f7fc f980 	bl	8004000 <HAL_GetTick>
 8007d00:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8007d02:	e034      	b.n	8007d6e <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d011      	beq.n	8007d3a <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d1a:	f043 0208 	orr.w	r2, r3, #8
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	22e0      	movs	r2, #224	; 0xe0
 8007d34:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e020      	b.n	8007d7c <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d40:	d015      	beq.n	8007d6e <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8007d42:	f7fc f95d 	bl	8004000 <HAL_GetTick>
 8007d46:	4602      	mov	r2, r0
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	1ad3      	subs	r3, r2, r3
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d302      	bcc.n	8007d58 <HAL_ETH_Transmit+0xe6>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d10a      	bne.n	8007d6e <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d5c:	f043 0204 	orr.w	r2, r3, #4
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	22e0      	movs	r2, #224	; 0xe0
 8007d68:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e006      	b.n	8007d7c <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	dbc6      	blt.n	8007d04 <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8007d76:	2300      	movs	r3, #0
 8007d78:	e000      	b.n	8007d7c <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
  }
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3718      	adds	r7, #24
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b089      	sub	sp, #36	; 0x24
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	3344      	adds	r3, #68	; 0x44
 8007d90:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	69fa      	ldr	r2, [r7, #28]
 8007d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007da0:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8007da2:	2300      	movs	r3, #0
 8007da4:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8007da6:	2300      	movs	r3, #0
 8007da8:	613b      	str	r3, [r7, #16]
 8007daa:	2300      	movs	r3, #0
 8007dac:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	699b      	ldr	r3, [r3, #24]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d06b      	beq.n	8007e8e <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8007db6:	2300      	movs	r3, #0
 8007db8:	e0ce      	b.n	8007f58 <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8007dc0:	69bb      	ldr	r3, [r7, #24]
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d036      	beq.n	8007e3a <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	3301      	adds	r3, #1
 8007dd0:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d101      	bne.n	8007ddc <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	3301      	adds	r3, #1
 8007de0:	61fb      	str	r3, [r7, #28]
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	2b03      	cmp	r3, #3
 8007de6:	d902      	bls.n	8007dee <HAL_ETH_IsRxDataAvailable+0x6a>
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	3b04      	subs	r3, #4
 8007dec:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	69fa      	ldr	r2, [r7, #28]
 8007df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007df6:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	db11      	blt.n	8007e24 <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8007e00:	69bb      	ldr	r3, [r7, #24]
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d00b      	beq.n	8007e24 <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8007e12:	69fb      	ldr	r3, [r7, #28]
 8007e14:	3301      	adds	r3, #1
 8007e16:	61fb      	str	r3, [r7, #28]
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	2b03      	cmp	r3, #3
 8007e1c:	d902      	bls.n	8007e24 <HAL_ETH_IsRxDataAvailable+0xa0>
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	3b04      	subs	r3, #4
 8007e22:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	69fa      	ldr	r2, [r7, #28]
 8007e28:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	693a      	ldr	r2, [r7, #16]
 8007e34:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e08e      	b.n	8007f58 <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d012      	beq.n	8007e6c <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8007e4e:	69fb      	ldr	r3, [r7, #28]
 8007e50:	3301      	adds	r3, #1
 8007e52:	61fb      	str	r3, [r7, #28]
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	2b03      	cmp	r3, #3
 8007e58:	d902      	bls.n	8007e60 <HAL_ETH_IsRxDataAvailable+0xdc>
 8007e5a:	69fb      	ldr	r3, [r7, #28]
 8007e5c:	3b04      	subs	r3, #4
 8007e5e:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	69fa      	ldr	r2, [r7, #28]
 8007e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e68:	61bb      	str	r3, [r7, #24]
 8007e6a:	e010      	b.n	8007e8e <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	3301      	adds	r3, #1
 8007e76:	61fb      	str	r3, [r7, #28]
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	2b03      	cmp	r3, #3
 8007e7c:	d902      	bls.n	8007e84 <HAL_ETH_IsRxDataAvailable+0x100>
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	3b04      	subs	r3, #4
 8007e82:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	69fa      	ldr	r2, [r7, #28]
 8007e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e8c:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	db02      	blt.n	8007e9c <HAL_ETH_IsRxDataAvailable+0x118>
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	2b03      	cmp	r3, #3
 8007e9a:	d98e      	bls.n	8007dba <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d056      	beq.n	8007f50 <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	69fa      	ldr	r2, [r7, #28]
 8007ea6:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	68fa      	ldr	r2, [r7, #12]
 8007eac:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	69fa      	ldr	r2, [r7, #28]
 8007eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eba:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	617b      	str	r3, [r7, #20]
 8007ec0:	e03b      	b.n	8007f3a <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	691a      	ldr	r2, [r3, #16]
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8007eca:	69bb      	ldr	r3, [r7, #24]
 8007ecc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ed0:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	695b      	ldr	r3, [r3, #20]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d009      	beq.n	8007eee <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	695a      	ldr	r2, [r3, #20]
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8007ee2:	69bb      	ldr	r3, [r7, #24]
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	6a1b      	ldr	r3, [r3, #32]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d005      	beq.n	8007f0e <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8007f02:	69bb      	ldr	r3, [r7, #24]
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	3b01      	subs	r3, #1
 8007f12:	697a      	ldr	r2, [r7, #20]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d20d      	bcs.n	8007f34 <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	61fb      	str	r3, [r7, #28]
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	2b03      	cmp	r3, #3
 8007f22:	d902      	bls.n	8007f2a <HAL_ETH_IsRxDataAvailable+0x1a6>
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	3b04      	subs	r3, #4
 8007f28:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	69fa      	ldr	r2, [r7, #28]
 8007f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f32:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	3301      	adds	r3, #1
 8007f38:	617b      	str	r3, [r7, #20]
 8007f3a:	697a      	ldr	r2, [r7, #20]
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d3bf      	bcc.n	8007ec2 <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6819      	ldr	r1, [r3, #0]
 8007f46:	69ba      	ldr	r2, [r7, #24]
 8007f48:	f241 1328 	movw	r3, #4392	; 0x1128
 8007f4c:	440b      	add	r3, r1
 8007f4e:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	2200      	movs	r2, #0
 8007f54:	619a      	str	r2, [r3, #24]

  return 0;
 8007f56:	2300      	movs	r3, #0
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3724      	adds	r7, #36	; 0x24
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b08a      	sub	sp, #40	; 0x28
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	3344      	adds	r3, #68	; 0x44
 8007f72:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	695b      	ldr	r3, [r3, #20]
 8007f78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f86:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d104      	bne.n	8007f9c <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2201      	movs	r2, #1
 8007f96:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	e07d      	b.n	8008098 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	699b      	ldr	r3, [r3, #24]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d10f      	bne.n	8007fc4 <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f7ff feed 	bl	8007d84 <HAL_ETH_IsRxDataAvailable>
 8007faa:	4603      	mov	r3, r0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d101      	bne.n	8007fb4 <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e071      	b.n	8008098 <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	695b      	ldr	r3, [r3, #20]
 8007fb8:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fc2:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	623b      	str	r3, [r7, #32]
 8007fc8:	e031      	b.n	800802e <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	695a      	ldr	r2, [r3, #20]
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	695b      	ldr	r3, [r3, #20]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d00b      	beq.n	8007ffc <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	695b      	ldr	r3, [r3, #20]
 8007fee:	461a      	mov	r2, r3
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	695a      	ldr	r2, [r3, #20]
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008004:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8008006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008008:	3301      	adds	r3, #1
 800800a:	627b      	str	r3, [r7, #36]	; 0x24
 800800c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800e:	2b03      	cmp	r3, #3
 8008010:	d902      	bls.n	8008018 <HAL_ETH_GetRxDataBuffer+0xb4>
 8008012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008014:	3b04      	subs	r3, #4
 8008016:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800801c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008020:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8008028:	6a3b      	ldr	r3, [r7, #32]
 800802a:	3301      	adds	r3, #1
 800802c:	623b      	str	r3, [r7, #32]
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	699b      	ldr	r3, [r3, #24]
 8008032:	3b01      	subs	r3, #1
 8008034:	6a3a      	ldr	r2, [r7, #32]
 8008036:	429a      	cmp	r2, r3
 8008038:	d3c7      	bcc.n	8007fca <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	1ad3      	subs	r3, r2, r3
 8008046:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	691b      	ldr	r3, [r3, #16]
 800804c:	461a      	mov	r2, r3
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	695b      	ldr	r3, [r3, #20]
 8008056:	68fa      	ldr	r2, [r7, #12]
 8008058:	429a      	cmp	r2, r3
 800805a:	d803      	bhi.n	8008064 <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	68fa      	ldr	r2, [r7, #12]
 8008060:	605a      	str	r2, [r3, #4]
 8008062:	e018      	b.n	8008096 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	695b      	ldr	r3, [r3, #20]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d012      	beq.n	8008092 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	695a      	ldr	r2, [r3, #20]
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	695b      	ldr	r3, [r3, #20]
 800807e:	461a      	mov	r2, r3
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	695b      	ldr	r3, [r3, #20]
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	1ad2      	subs	r2, r2, r3
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	605a      	str	r2, [r3, #4]
 8008090:	e001      	b.n	8008096 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e000      	b.n	8008098 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8008096:	2300      	movs	r3, #0
}
 8008098:	4618      	mov	r0, r3
 800809a:	3728      	adds	r7, #40	; 0x28
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b086      	sub	sp, #24
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	3344      	adds	r3, #68	; 0x44
 80080ae:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	695b      	ldr	r3, [r3, #20]
 80080b4:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	699b      	ldr	r3, [r3, #24]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d107      	bne.n	80080ce <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f7ff fe60 	bl	8007d84 <HAL_ETH_IsRxDataAvailable>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d101      	bne.n	80080ce <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	e017      	b.n	80080fe <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	699a      	ldr	r2, [r3, #24]
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	4413      	add	r3, r2
 80080d6:	3b01      	subs	r3, #1
 80080d8:	617b      	str	r3, [r7, #20]
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	2b03      	cmp	r3, #3
 80080de:	d902      	bls.n	80080e6 <HAL_ETH_GetRxDataLength+0x46>
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	3b04      	subs	r3, #4
 80080e4:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	697a      	ldr	r2, [r7, #20]
 80080ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ee:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80080fc:	2300      	movs	r3, #0
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3718      	adds	r7, #24
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 8008106:	b480      	push	{r7}
 8008108:	b089      	sub	sp, #36	; 0x24
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	3344      	adds	r3, #68	; 0x44
 8008112:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	695b      	ldr	r3, [r3, #20]
 8008118:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	69fa      	ldr	r2, [r7, #28]
 800811e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008122:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	699b      	ldr	r3, [r3, #24]
 8008128:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	699b      	ldr	r3, [r3, #24]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d101      	bne.n	8008136 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8008132:	2301      	movs	r3, #1
 8008134:	e057      	b.n	80081e6 <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	69db      	ldr	r3, [r3, #28]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d002      	beq.n	8008144 <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	3301      	adds	r3, #1
 8008142:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8008144:	2300      	movs	r3, #0
 8008146:	613b      	str	r3, [r7, #16]
 8008148:	e03b      	b.n	80081c2 <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	691a      	ldr	r2, [r3, #16]
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008158:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 800815a:	69bb      	ldr	r3, [r7, #24]
 800815c:	695b      	ldr	r3, [r3, #20]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d009      	beq.n	8008176 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	695a      	ldr	r2, [r3, #20]
 8008166:	69bb      	ldr	r3, [r7, #24]
 8008168:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	68db      	ldr	r3, [r3, #12]
 800816e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8008176:	69bb      	ldr	r3, [r7, #24]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6a1b      	ldr	r3, [r3, #32]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d005      	beq.n	8008196 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	3b01      	subs	r3, #1
 800819a:	693a      	ldr	r2, [r7, #16]
 800819c:	429a      	cmp	r2, r3
 800819e:	d20d      	bcs.n	80081bc <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	3301      	adds	r3, #1
 80081a4:	61fb      	str	r3, [r7, #28]
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	2b03      	cmp	r3, #3
 80081aa:	d902      	bls.n	80081b2 <HAL_ETH_BuildRxDescriptors+0xac>
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	3b04      	subs	r3, #4
 80081b0:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	69fa      	ldr	r2, [r7, #28]
 80081b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ba:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	3301      	adds	r3, #1
 80081c0:	613b      	str	r3, [r7, #16]
 80081c2:	693a      	ldr	r2, [r7, #16]
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d3bf      	bcc.n	800814a <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6819      	ldr	r1, [r3, #0]
 80081ce:	69ba      	ldr	r2, [r7, #24]
 80081d0:	f241 1328 	movw	r3, #4392	; 0x1128
 80081d4:	440b      	add	r3, r1
 80081d6:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2200      	movs	r2, #0
 80081dc:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3724      	adds	r7, #36	; 0x24
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr
	...

080081f4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800820a:	2b40      	cmp	r3, #64	; 0x40
 800820c:	d113      	bne.n	8008236 <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	f241 1334 	movw	r3, #4404	; 0x1134
 8008216:	4413      	add	r3, r2
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800821e:	2b40      	cmp	r3, #64	; 0x40
 8008220:	d109      	bne.n	8008236 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 f8f2 	bl	800840c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8008230:	f248 0240 	movw	r2, #32832	; 0x8040
 8008234:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 0301 	and.w	r3, r3, #1
 8008244:	2b01      	cmp	r3, #1
 8008246:	d113      	bne.n	8008270 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	f241 1334 	movw	r3, #4404	; 0x1134
 8008250:	4413      	add	r3, r2
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f003 0301 	and.w	r3, r3, #1
 8008258:	2b01      	cmp	r3, #1
 800825a:	d109      	bne.n	8008270 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 f8cb 	bl	80083f8 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800826a:	f248 0201 	movw	r2, #32769	; 0x8001
 800826e:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800827e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008282:	d149      	bne.n	8008318 <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	f241 1334 	movw	r3, #4404	; 0x1134
 800828c:	4413      	add	r3, r2
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008294:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008298:	d13e      	bne.n	8008318 <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800829e:	f043 0208 	orr.w	r2, r3, #8
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	675a      	str	r2, [r3, #116]	; 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80082b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082b8:	d11b      	bne.n	80082f2 <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	f241 1302 	movw	r3, #4354	; 0x1102
 80082c8:	4013      	ands	r3, r2
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	6793      	str	r3, [r2, #120]	; 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	f241 1334 	movw	r3, #4404	; 0x1134
 80082d6:	4413      	add	r3, r2
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	6811      	ldr	r1, [r2, #0]
 80082de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80082e2:	f241 1334 	movw	r3, #4404	; 0x1134
 80082e6:	440b      	add	r3, r1
 80082e8:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	22e0      	movs	r2, #224	; 0xe0
 80082ee:	66da      	str	r2, [r3, #108]	; 0x6c
 80082f0:	e00f      	b.n	8008312 <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	679a      	str	r2, [r3, #120]	; 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800830c:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8008310:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 f884 	bl	8008420 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008320:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008324:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008328:	d10e      	bne.n	8008348 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	67da      	str	r2, [r3, #124]	; 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	22e0      	movs	r2, #224	; 0xe0
 800833a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 f879 	bl	8008434 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008350:	f003 0310 	and.w	r3, r3, #16
 8008354:	2b10      	cmp	r3, #16
 8008356:	d10f      	bne.n	8008378 <HAL_ETH_IRQHandler+0x184>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008360:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 f86c 	bl	8008448 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008380:	f003 0320 	and.w	r3, r3, #32
 8008384:	2b20      	cmp	r3, #32
 8008386:	d10f      	bne.n	80083a8 <HAL_ETH_IRQHandler+0x1b4>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008390:	f003 020f 	and.w	r2, r3, #15
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 f85e 	bl	800845c <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 80083a8:	f7fd f8ba 	bl	8005520 <HAL_GetCurrentCPUID>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b03      	cmp	r3, #3
 80083b0:	d10d      	bne.n	80083ce <HAL_ETH_IRQHandler+0x1da>
  {
    /* check ETH WAKEUP exti flag */
    if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80083b2:	4b0f      	ldr	r3, [pc, #60]	; (80083f0 <HAL_ETH_IRQHandler+0x1fc>)
 80083b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d014      	beq.n	80083e8 <HAL_ETH_IRQHandler+0x1f4>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80083be:	4b0c      	ldr	r3, [pc, #48]	; (80083f0 <HAL_ETH_IRQHandler+0x1fc>)
 80083c0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80083c4:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 f852 	bl	8008470 <HAL_ETH_WakeUpCallback>
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
#endif
  }
#endif
}
 80083cc:	e00c      	b.n	80083e8 <HAL_ETH_IRQHandler+0x1f4>
    if(__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80083ce:	4b09      	ldr	r3, [pc, #36]	; (80083f4 <HAL_ETH_IRQHandler+0x200>)
 80083d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d006      	beq.n	80083e8 <HAL_ETH_IRQHandler+0x1f4>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80083da:	4b06      	ldr	r3, [pc, #24]	; (80083f4 <HAL_ETH_IRQHandler+0x200>)
 80083dc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80083e0:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 f844 	bl	8008470 <HAL_ETH_WakeUpCallback>
}
 80083e8:	bf00      	nop
 80083ea:	3708      	adds	r7, #8
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	58000080 	.word	0x58000080
 80083f4:	580000c0 	.word	0x580000c0

080083f8 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8008400:	bf00      	nop
 8008402:	370c      	adds	r7, #12
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8008414:	bf00      	nop
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8008428:	bf00      	nop
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 800843c:	bf00      	nop
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8008450:	bf00      	nop
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8008464:	bf00      	nop
 8008466:	370c      	adds	r7, #12
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr

08008470 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8008470:	b480      	push	{r7}
 8008472:	b083      	sub	sp, #12
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8008478:	bf00      	nop
 800847a:	370c      	adds	r7, #12
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b086      	sub	sp, #24
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	607a      	str	r2, [r7, #4]
 8008490:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800849a:	f003 0301 	and.w	r3, r3, #1
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d001      	beq.n	80084a6 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	e03e      	b.n	8008524 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80084ae:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	055b      	lsls	r3, r3, #21
 80084ba:	4313      	orrs	r3, r2
 80084bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	041b      	lsls	r3, r3, #16
 80084c8:	4313      	orrs	r3, r2
 80084ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	f043 030c 	orr.w	r3, r3, #12
 80084d2:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	f043 0301 	orr.w	r3, r3, #1
 80084da:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	697a      	ldr	r2, [r7, #20]
 80084e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 80084e6:	f7fb fd8b 	bl	8004000 <HAL_GetTick>
 80084ea:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80084ec:	e009      	b.n	8008502 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80084ee:	f7fb fd87 	bl	8004000 <HAL_GetTick>
 80084f2:	4602      	mov	r2, r0
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	1ad3      	subs	r3, r2, r3
 80084f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80084fc:	d901      	bls.n	8008502 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	e010      	b.n	8008524 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800850a:	f003 0301 	and.w	r3, r3, #1
 800850e:	2b00      	cmp	r3, #0
 8008510:	d1ed      	bne.n	80084ee <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800851a:	b29b      	uxth	r3, r3
 800851c:	461a      	mov	r2, r3
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	3718      	adds	r7, #24
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b086      	sub	sp, #24
 8008530:	af00      	add	r7, sp, #0
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	60b9      	str	r1, [r7, #8]
 8008536:	607a      	str	r2, [r7, #4]
 8008538:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008542:	f003 0301 	and.w	r3, r3, #1
 8008546:	2b00      	cmp	r3, #0
 8008548:	d001      	beq.n	800854e <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 800854a:	2301      	movs	r3, #1
 800854c:	e03c      	b.n	80085c8 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008556:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	055b      	lsls	r3, r3, #21
 8008562:	4313      	orrs	r3, r2
 8008564:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	041b      	lsls	r3, r3, #16
 8008570:	4313      	orrs	r3, r2
 8008572:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	f023 030c 	bic.w	r3, r3, #12
 800857a:	f043 0304 	orr.w	r3, r3, #4
 800857e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	f043 0301 	orr.w	r3, r3, #1
 8008586:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	b29a      	uxth	r2, r3
 800858c:	4b10      	ldr	r3, [pc, #64]	; (80085d0 <HAL_ETH_WritePHYRegister+0xa4>)
 800858e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8008592:	4a0f      	ldr	r2, [pc, #60]	; (80085d0 <HAL_ETH_WritePHYRegister+0xa4>)
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 800859a:	f7fb fd31 	bl	8004000 <HAL_GetTick>
 800859e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80085a0:	e009      	b.n	80085b6 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80085a2:	f7fb fd2d 	bl	8004000 <HAL_GetTick>
 80085a6:	4602      	mov	r2, r0
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	1ad3      	subs	r3, r2, r3
 80085ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80085b0:	d901      	bls.n	80085b6 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	e008      	b.n	80085c8 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80085be:	f003 0301 	and.w	r3, r3, #1
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d1ed      	bne.n	80085a2 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80085c6:	2300      	movs	r3, #0
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3718      	adds	r7, #24
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}
 80085d0:	40028000 	.word	0x40028000

080085d4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d101      	bne.n	80085e8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80085e4:	2301      	movs	r3, #1
 80085e6:	e1c3      	b.n	8008970 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f003 020c 	and.w	r2, r3, #12
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 0310 	and.w	r3, r3, #16
 8008600:	2b00      	cmp	r3, #0
 8008602:	bf14      	ite	ne
 8008604:	2301      	movne	r3, #1
 8008606:	2300      	moveq	r3, #0
 8008608:	b2db      	uxtb	r3, r3
 800860a:	461a      	mov	r2, r3
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800862a:	2b00      	cmp	r3, #0
 800862c:	bf0c      	ite	eq
 800862e:	2301      	moveq	r3, #1
 8008630:	2300      	movne	r3, #0
 8008632:	b2db      	uxtb	r3, r3
 8008634:	461a      	mov	r2, r3
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008646:	2b00      	cmp	r3, #0
 8008648:	bf14      	ite	ne
 800864a:	2301      	movne	r3, #1
 800864c:	2300      	moveq	r3, #0
 800864e:	b2db      	uxtb	r3, r3
 8008650:	461a      	mov	r2, r3
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008660:	2b00      	cmp	r3, #0
 8008662:	bf0c      	ite	eq
 8008664:	2301      	moveq	r3, #1
 8008666:	2300      	movne	r3, #0
 8008668:	b2db      	uxtb	r3, r3
 800866a:	461a      	mov	r2, r3
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800867a:	2b00      	cmp	r3, #0
 800867c:	bf14      	ite	ne
 800867e:	2301      	movne	r3, #1
 8008680:	2300      	moveq	r3, #0
 8008682:	b2db      	uxtb	r3, r3
 8008684:	461a      	mov	r2, r3
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008694:	2b00      	cmp	r3, #0
 8008696:	bf14      	ite	ne
 8008698:	2301      	movne	r3, #1
 800869a:	2300      	moveq	r3, #0
 800869c:	b2db      	uxtb	r3, r3
 800869e:	461a      	mov	r2, r3
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	bf14      	ite	ne
 80086ce:	2301      	movne	r3, #1
 80086d0:	2300      	moveq	r3, #0
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	461a      	mov	r2, r3
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	bf0c      	ite	eq
 80086e8:	2301      	moveq	r3, #1
 80086ea:	2300      	movne	r3, #0
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	461a      	mov	r2, r3
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80086fe:	2b00      	cmp	r3, #0
 8008700:	bf0c      	ite	eq
 8008702:	2301      	moveq	r3, #1
 8008704:	2300      	movne	r3, #0
 8008706:	b2db      	uxtb	r3, r3
 8008708:	461a      	mov	r2, r3
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008718:	2b00      	cmp	r3, #0
 800871a:	bf14      	ite	ne
 800871c:	2301      	movne	r3, #1
 800871e:	2300      	moveq	r3, #0
 8008720:	b2db      	uxtb	r3, r3
 8008722:	461a      	mov	r2, r3
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008732:	2b00      	cmp	r3, #0
 8008734:	bf14      	ite	ne
 8008736:	2301      	movne	r3, #1
 8008738:	2300      	moveq	r3, #0
 800873a:	b2db      	uxtb	r3, r3
 800873c:	461a      	mov	r2, r3
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800874c:	2b00      	cmp	r3, #0
 800874e:	bf14      	ite	ne
 8008750:	2301      	movne	r3, #1
 8008752:	2300      	moveq	r3, #0
 8008754:	b2db      	uxtb	r3, r3
 8008756:	461a      	mov	r2, r3
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008766:	2b00      	cmp	r3, #0
 8008768:	bf14      	ite	ne
 800876a:	2301      	movne	r3, #1
 800876c:	2300      	moveq	r3, #0
 800876e:	b2db      	uxtb	r3, r3
 8008770:	461a      	mov	r2, r3
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800878e:	2b00      	cmp	r3, #0
 8008790:	bf14      	ite	ne
 8008792:	2301      	movne	r3, #1
 8008794:	2300      	moveq	r3, #0
 8008796:	b2db      	uxtb	r3, r3
 8008798:	461a      	mov	r2, r3
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	bf0c      	ite	eq
 80087c8:	2301      	moveq	r3, #1
 80087ca:	2300      	movne	r3, #0
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	461a      	mov	r2, r3
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	bf14      	ite	ne
 80087e4:	2301      	movne	r3, #1
 80087e6:	2300      	moveq	r3, #0
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	461a      	mov	r2, r3
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	bf14      	ite	ne
 8008800:	2301      	movne	r3, #1
 8008802:	2300      	moveq	r3, #0
 8008804:	b2db      	uxtb	r3, r3
 8008806:	461a      	mov	r2, r3
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008818:	2b00      	cmp	r3, #0
 800881a:	bf14      	ite	ne
 800881c:	2301      	movne	r3, #1
 800881e:	2300      	moveq	r3, #0
 8008820:	b2db      	uxtb	r3, r3
 8008822:	461a      	mov	r2, r3
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	0e5b      	lsrs	r3, r3, #25
 8008832:	f003 021f 	and.w	r2, r3, #31
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008844:	2b00      	cmp	r3, #0
 8008846:	bf14      	ite	ne
 8008848:	2301      	movne	r3, #1
 800884a:	2300      	moveq	r3, #0
 800884c:	b2db      	uxtb	r3, r3
 800884e:	461a      	mov	r2, r3
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	f003 020f 	and.w	r2, r3, #15
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800886a:	f003 0302 	and.w	r3, r3, #2
 800886e:	2b00      	cmp	r3, #0
 8008870:	bf14      	ite	ne
 8008872:	2301      	movne	r3, #1
 8008874:	2300      	moveq	r3, #0
 8008876:	b2db      	uxtb	r3, r3
 8008878:	461a      	mov	r2, r3
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800888a:	2b00      	cmp	r3, #0
 800888c:	bf0c      	ite	eq
 800888e:	2301      	moveq	r3, #1
 8008890:	2300      	movne	r3, #0
 8008892:	b2db      	uxtb	r3, r3
 8008894:	461a      	mov	r2, r3
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088a2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088b0:	0c1b      	lsrs	r3, r3, #16
 80088b2:	b29a      	uxth	r2, r3
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088c0:	f003 0301 	and.w	r3, r3, #1
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	bf14      	ite	ne
 80088c8:	2301      	movne	r3, #1
 80088ca:	2300      	moveq	r3, #0
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	461a      	mov	r2, r3
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088de:	f003 0302 	and.w	r3, r3, #2
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	bf14      	ite	ne
 80088e6:	2301      	movne	r3, #1
 80088e8:	2300      	moveq	r3, #0
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	461a      	mov	r2, r3
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80088fc:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800890c:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800891c:	f003 0308 	and.w	r3, r3, #8
 8008920:	2b00      	cmp	r3, #0
 8008922:	bf14      	ite	ne
 8008924:	2301      	movne	r3, #1
 8008926:	2300      	moveq	r3, #0
 8008928:	b2db      	uxtb	r3, r3
 800892a:	461a      	mov	r2, r3
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800893a:	f003 0310 	and.w	r3, r3, #16
 800893e:	2b00      	cmp	r3, #0
 8008940:	bf14      	ite	ne
 8008942:	2301      	movne	r3, #1
 8008944:	2300      	moveq	r3, #0
 8008946:	b2db      	uxtb	r3, r3
 8008948:	461a      	mov	r2, r3
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8008958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800895c:	2b00      	cmp	r3, #0
 800895e:	bf0c      	ite	eq
 8008960:	2301      	moveq	r3, #1
 8008962:	2300      	movne	r3, #0
 8008964:	b2db      	uxtb	r3, r3
 8008966:	461a      	mov	r2, r3
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800896e:	2300      	movs	r3, #0
}
 8008970:	4618      	mov	r0, r3
 8008972:	370c      	adds	r7, #12
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr

0800897c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d101      	bne.n	8008990 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800898c:	2301      	movs	r3, #1
 800898e:	e00a      	b.n	80089a6 <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008994:	2b10      	cmp	r3, #16
 8008996:	d105      	bne.n	80089a4 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8008998:	6839      	ldr	r1, [r7, #0]
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 f860 	bl	8008a60 <ETH_SetMACConfig>

    return HAL_OK;
 80089a0:	2300      	movs	r3, #0
 80089a2:	e000      	b.n	80089a6 <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 80089a4:	2301      	movs	r3, #1
  }
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3708      	adds	r7, #8
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
	...

080089b0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80089c0:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80089c8:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80089ca:	f001 ffd3 	bl	800a974 <HAL_RCC_GetHCLKFreq>
 80089ce:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	4a1e      	ldr	r2, [pc, #120]	; (8008a4c <HAL_ETH_SetMDIOClockRange+0x9c>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d908      	bls.n	80089ea <HAL_ETH_SetMDIOClockRange+0x3a>
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	4a1d      	ldr	r2, [pc, #116]	; (8008a50 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d804      	bhi.n	80089ea <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80089e6:	60fb      	str	r3, [r7, #12]
 80089e8:	e027      	b.n	8008a3a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	4a18      	ldr	r2, [pc, #96]	; (8008a50 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d908      	bls.n	8008a04 <HAL_ETH_SetMDIOClockRange+0x54>
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	4a17      	ldr	r2, [pc, #92]	; (8008a54 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d204      	bcs.n	8008a04 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008a00:	60fb      	str	r3, [r7, #12]
 8008a02:	e01a      	b.n	8008a3a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	4a13      	ldr	r2, [pc, #76]	; (8008a54 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d303      	bcc.n	8008a14 <HAL_ETH_SetMDIOClockRange+0x64>
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	4a12      	ldr	r2, [pc, #72]	; (8008a58 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d911      	bls.n	8008a38 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	4a10      	ldr	r2, [pc, #64]	; (8008a58 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d908      	bls.n	8008a2e <HAL_ETH_SetMDIOClockRange+0x7e>
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	4a0f      	ldr	r2, [pc, #60]	; (8008a5c <HAL_ETH_SetMDIOClockRange+0xac>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d804      	bhi.n	8008a2e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a2a:	60fb      	str	r3, [r7, #12]
 8008a2c:	e005      	b.n	8008a3a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008a34:	60fb      	str	r3, [r7, #12]
 8008a36:	e000      	b.n	8008a3a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8008a38:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	68fa      	ldr	r2, [r7, #12]
 8008a40:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8008a44:	bf00      	nop
 8008a46:	3710      	adds	r7, #16
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	01312cff 	.word	0x01312cff
 8008a50:	02160ebf 	.word	0x02160ebf
 8008a54:	03938700 	.word	0x03938700
 8008a58:	05f5e0ff 	.word	0x05f5e0ff
 8008a5c:	08f0d17f 	.word	0x08f0d17f

08008a60 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b085      	sub	sp, #20
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8008a72:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	791b      	ldrb	r3, [r3, #4]
 8008a78:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8008a7a:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	7b1b      	ldrb	r3, [r3, #12]
 8008a80:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8008a82:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	7b5b      	ldrb	r3, [r3, #13]
 8008a88:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8008a8a:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	7b9b      	ldrb	r3, [r3, #14]
 8008a90:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8008a92:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	7bdb      	ldrb	r3, [r3, #15]
 8008a98:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8008a9a:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8008a9c:	683a      	ldr	r2, [r7, #0]
 8008a9e:	7c12      	ldrb	r2, [r2, #16]
 8008aa0:	2a00      	cmp	r2, #0
 8008aa2:	d102      	bne.n	8008aaa <ETH_SetMACConfig+0x4a>
 8008aa4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008aa8:	e000      	b.n	8008aac <ETH_SetMACConfig+0x4c>
 8008aaa:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8008aac:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8008aae:	683a      	ldr	r2, [r7, #0]
 8008ab0:	7c52      	ldrb	r2, [r2, #17]
 8008ab2:	2a00      	cmp	r2, #0
 8008ab4:	d102      	bne.n	8008abc <ETH_SetMACConfig+0x5c>
 8008ab6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008aba:	e000      	b.n	8008abe <ETH_SetMACConfig+0x5e>
 8008abc:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8008abe:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	7c9b      	ldrb	r3, [r3, #18]
 8008ac4:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8008ac6:	431a      	orrs	r2, r3
                                macconf->Speed |
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8008acc:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8008ad2:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	7f1b      	ldrb	r3, [r3, #28]
 8008ad8:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8008ada:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	7f5b      	ldrb	r3, [r3, #29]
 8008ae0:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8008ae2:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8008ae4:	683a      	ldr	r2, [r7, #0]
 8008ae6:	7f92      	ldrb	r2, [r2, #30]
 8008ae8:	2a00      	cmp	r2, #0
 8008aea:	d102      	bne.n	8008af2 <ETH_SetMACConfig+0x92>
 8008aec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008af0:	e000      	b.n	8008af4 <ETH_SetMACConfig+0x94>
 8008af2:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8008af4:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	7fdb      	ldrb	r3, [r3, #31]
 8008afa:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8008afc:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8008afe:	683a      	ldr	r2, [r7, #0]
 8008b00:	f892 2020 	ldrb.w	r2, [r2, #32]
 8008b04:	2a00      	cmp	r2, #0
 8008b06:	d102      	bne.n	8008b0e <ETH_SetMACConfig+0xae>
 8008b08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b0c:	e000      	b.n	8008b10 <ETH_SetMACConfig+0xb0>
 8008b0e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8008b10:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8008b16:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b1e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8008b20:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8008b26:	4313      	orrs	r3, r2
 8008b28:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	4b56      	ldr	r3, [pc, #344]	; (8008c8c <ETH_SetMACConfig+0x22c>)
 8008b32:	4013      	ands	r3, r2
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	6812      	ldr	r2, [r2, #0]
 8008b38:	68f9      	ldr	r1, [r7, #12]
 8008b3a:	430b      	orrs	r3, r1
 8008b3c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b42:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008b4a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8008b4c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008b54:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8008b56:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008b5e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8008b60:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8008b62:	683a      	ldr	r2, [r7, #0]
 8008b64:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8008b68:	2a00      	cmp	r2, #0
 8008b6a:	d102      	bne.n	8008b72 <ETH_SetMACConfig+0x112>
 8008b6c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008b70:	e000      	b.n	8008b74 <ETH_SetMACConfig+0x114>
 8008b72:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8008b74:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	685a      	ldr	r2, [r3, #4]
 8008b84:	4b42      	ldr	r3, [pc, #264]	; (8008c90 <ETH_SetMACConfig+0x230>)
 8008b86:	4013      	ands	r3, r2
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	6812      	ldr	r2, [r2, #0]
 8008b8c:	68f9      	ldr	r1, [r7, #12]
 8008b8e:	430b      	orrs	r3, r1
 8008b90:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b98:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	68da      	ldr	r2, [r3, #12]
 8008ba8:	4b3a      	ldr	r3, [pc, #232]	; (8008c94 <ETH_SetMACConfig+0x234>)
 8008baa:	4013      	ands	r3, r2
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	6812      	ldr	r2, [r2, #0]
 8008bb0:	68f9      	ldr	r1, [r7, #12]
 8008bb2:	430b      	orrs	r3, r1
 8008bb4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008bbc:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8008bc2:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8008bc4:	683a      	ldr	r2, [r7, #0]
 8008bc6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8008bca:	2a00      	cmp	r2, #0
 8008bcc:	d101      	bne.n	8008bd2 <ETH_SetMACConfig+0x172>
 8008bce:	2280      	movs	r2, #128	; 0x80
 8008bd0:	e000      	b.n	8008bd4 <ETH_SetMACConfig+0x174>
 8008bd2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8008bd4:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bda:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008be6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8008bea:	4013      	ands	r3, r2
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	6812      	ldr	r2, [r2, #0]
 8008bf0:	68f9      	ldr	r1, [r7, #12]
 8008bf2:	430b      	orrs	r3, r1
 8008bf4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008bfc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8008c04:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8008c06:	4313      	orrs	r3, r2
 8008c08:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c12:	f023 0103 	bic.w	r1, r3, #3
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	68fa      	ldr	r2, [r7, #12]
 8008c1c:	430a      	orrs	r2, r1
 8008c1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8008c2a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	430a      	orrs	r2, r1
 8008c38:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8008c40:	683a      	ldr	r2, [r7, #0]
 8008c42:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8008c46:	2a00      	cmp	r2, #0
 8008c48:	d101      	bne.n	8008c4e <ETH_SetMACConfig+0x1ee>
 8008c4a:	2240      	movs	r2, #64	; 0x40
 8008c4c:	e000      	b.n	8008c50 <ETH_SetMACConfig+0x1f0>
 8008c4e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8008c50:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8008c58:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8008c5a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8008c62:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8008c64:	4313      	orrs	r3, r2
 8008c66:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8008c70:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	68fa      	ldr	r2, [r7, #12]
 8008c7a:	430a      	orrs	r2, r1
 8008c7c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8008c80:	bf00      	nop
 8008c82:	3714      	adds	r7, #20
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr
 8008c8c:	00048083 	.word	0x00048083
 8008c90:	c0f88000 	.word	0xc0f88000
 8008c94:	fffffef0 	.word	0xfffffef0

08008c98 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b085      	sub	sp, #20
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	4b38      	ldr	r3, [pc, #224]	; (8008d90 <ETH_SetDMAConfig+0xf8>)
 8008cae:	4013      	ands	r3, r2
 8008cb0:	683a      	ldr	r2, [r7, #0]
 8008cb2:	6812      	ldr	r2, [r2, #0]
 8008cb4:	6879      	ldr	r1, [r7, #4]
 8008cb6:	6809      	ldr	r1, [r1, #0]
 8008cb8:	431a      	orrs	r2, r3
 8008cba:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8008cbe:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	791b      	ldrb	r3, [r3, #4]
 8008cc4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8008cca:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	7b1b      	ldrb	r3, [r3, #12]
 8008cd0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	f241 0304 	movw	r3, #4100	; 0x1004
 8008cde:	4413      	add	r3, r2
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	4b2c      	ldr	r3, [pc, #176]	; (8008d94 <ETH_SetDMAConfig+0xfc>)
 8008ce4:	4013      	ands	r3, r2
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	6811      	ldr	r1, [r2, #0]
 8008cea:	68fa      	ldr	r2, [r7, #12]
 8008cec:	431a      	orrs	r2, r3
 8008cee:	f241 0304 	movw	r3, #4100	; 0x1004
 8008cf2:	440b      	add	r3, r1
 8008cf4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	7b5b      	ldrb	r3, [r3, #13]
 8008cfa:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8008d00:	4313      	orrs	r3, r2
 8008d02:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	4b22      	ldr	r3, [pc, #136]	; (8008d98 <ETH_SetDMAConfig+0x100>)
 8008d10:	4013      	ands	r3, r2
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	6811      	ldr	r1, [r2, #0]
 8008d16:	68fa      	ldr	r2, [r7, #12]
 8008d18:	431a      	orrs	r2, r3
 8008d1a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8008d1e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	7d1b      	ldrb	r3, [r3, #20]
 8008d28:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8008d2a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	7f5b      	ldrb	r3, [r3, #29]
 8008d30:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8008d32:	4313      	orrs	r3, r2
 8008d34:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681a      	ldr	r2, [r3, #0]
 8008d3a:	f241 1304 	movw	r3, #4356	; 0x1104
 8008d3e:	4413      	add	r3, r2
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	4b16      	ldr	r3, [pc, #88]	; (8008d9c <ETH_SetDMAConfig+0x104>)
 8008d44:	4013      	ands	r3, r2
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	6811      	ldr	r1, [r2, #0]
 8008d4a:	68fa      	ldr	r2, [r7, #12]
 8008d4c:	431a      	orrs	r2, r3
 8008d4e:	f241 1304 	movw	r3, #4356	; 0x1104
 8008d52:	440b      	add	r3, r1
 8008d54:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	7f1b      	ldrb	r3, [r3, #28]
 8008d5a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8008d60:	4313      	orrs	r3, r2
 8008d62:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	f241 1308 	movw	r3, #4360	; 0x1108
 8008d6c:	4413      	add	r3, r2
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	4b0b      	ldr	r3, [pc, #44]	; (8008da0 <ETH_SetDMAConfig+0x108>)
 8008d72:	4013      	ands	r3, r2
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	6811      	ldr	r1, [r2, #0]
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	431a      	orrs	r2, r3
 8008d7c:	f241 1308 	movw	r3, #4360	; 0x1108
 8008d80:	440b      	add	r3, r1
 8008d82:	601a      	str	r2, [r3, #0]
}
 8008d84:	bf00      	nop
 8008d86:	3714      	adds	r7, #20
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr
 8008d90:	ffff87fd 	.word	0xffff87fd
 8008d94:	ffff2ffe 	.word	0xffff2ffe
 8008d98:	fffec000 	.word	0xfffec000
 8008d9c:	ffc0efef 	.word	0xffc0efef
 8008da0:	7fc0ffff 	.word	0x7fc0ffff

08008da4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b0a4      	sub	sp, #144	; 0x90
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8008dac:	2301      	movs	r3, #1
 8008dae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8008db2:	2300      	movs	r3, #0
 8008db4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8008db6:	2300      	movs	r3, #0
 8008db8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8008de0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008de4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8008de6:	2300      	movs	r3, #0
 8008de8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8008dec:	2300      	movs	r3, #0
 8008dee:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8008df0:	2300      	movs	r3, #0
 8008df2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8008df6:	2300      	movs	r3, #0
 8008df8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8008dfc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8008e00:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8008e02:	2300      	movs	r3, #0
 8008e04:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8008e12:	2300      	movs	r3, #0
 8008e14:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8008e22:	2300      	movs	r3, #0
 8008e24:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8008e26:	2300      	movs	r3, #0
 8008e28:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8008e30:	2300      	movs	r3, #0
 8008e32:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8008e36:	2301      	movs	r3, #1
 8008e38:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8008e3c:	2320      	movs	r3, #32
 8008e3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8008e42:	2301      	movs	r3, #1
 8008e44:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8008e4e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8008e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8008e54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008e58:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8008e60:	2302      	movs	r3, #2
 8008e62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8008e66:	2300      	movs	r3, #0
 8008e68:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8008e72:	2300      	movs	r3, #0
 8008e74:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8008e82:	2301      	movs	r3, #1
 8008e84:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8008e88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f7ff fde6 	bl	8008a60 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8008e94:	2301      	movs	r3, #1
 8008e96:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8008eae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008eb2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8008eb8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008ebc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8008ec4:	f44f 7306 	mov.w	r3, #536	; 0x218
 8008ec8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8008eca:	f107 0308 	add.w	r3, r7, #8
 8008ece:	4619      	mov	r1, r3
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f7ff fee1 	bl	8008c98 <ETH_SetDMAConfig>
}
 8008ed6:	bf00      	nop
 8008ed8:	3790      	adds	r7, #144	; 0x90
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
	...

08008ee0 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008ef0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008ef8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8008efa:	f001 fd3b 	bl	800a974 <HAL_RCC_GetHCLKFreq>
 8008efe:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	4a1e      	ldr	r2, [pc, #120]	; (8008f7c <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d908      	bls.n	8008f1a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	4a1d      	ldr	r2, [pc, #116]	; (8008f80 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d804      	bhi.n	8008f1a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008f16:	60fb      	str	r3, [r7, #12]
 8008f18:	e027      	b.n	8008f6a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	4a18      	ldr	r2, [pc, #96]	; (8008f80 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d908      	bls.n	8008f34 <ETH_MAC_MDIO_ClkConfig+0x54>
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	4a17      	ldr	r2, [pc, #92]	; (8008f84 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d204      	bcs.n	8008f34 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008f30:	60fb      	str	r3, [r7, #12]
 8008f32:	e01a      	b.n	8008f6a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	4a13      	ldr	r2, [pc, #76]	; (8008f84 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d303      	bcc.n	8008f44 <ETH_MAC_MDIO_ClkConfig+0x64>
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	4a12      	ldr	r2, [pc, #72]	; (8008f88 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d911      	bls.n	8008f68 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	4a10      	ldr	r2, [pc, #64]	; (8008f88 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d908      	bls.n	8008f5e <ETH_MAC_MDIO_ClkConfig+0x7e>
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	4a0f      	ldr	r2, [pc, #60]	; (8008f8c <ETH_MAC_MDIO_ClkConfig+0xac>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d804      	bhi.n	8008f5e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f5a:	60fb      	str	r3, [r7, #12]
 8008f5c:	e005      	b.n	8008f6a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008f64:	60fb      	str	r3, [r7, #12]
 8008f66:	e000      	b.n	8008f6a <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8008f68:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	68fa      	ldr	r2, [r7, #12]
 8008f70:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8008f74:	bf00      	nop
 8008f76:	3710      	adds	r7, #16
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	01312cff 	.word	0x01312cff
 8008f80:	02160ebf 	.word	0x02160ebf
 8008f84:	03938700 	.word	0x03938700
 8008f88:	05f5e0ff 	.word	0x05f5e0ff
 8008f8c:	08f0d17f 	.word	0x08f0d17f

08008f90 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b085      	sub	sp, #20
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8008f98:	2300      	movs	r3, #0
 8008f9a:	60fb      	str	r3, [r7, #12]
 8008f9c:	e01d      	b.n	8008fda <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	68d9      	ldr	r1, [r3, #12]
 8008fa2:	68fa      	ldr	r2, [r7, #12]
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	005b      	lsls	r3, r3, #1
 8008fa8:	4413      	add	r3, r2
 8008faa:	00db      	lsls	r3, r3, #3
 8008fac:	440b      	add	r3, r1
 8008fae:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8008fc8:	68b9      	ldr	r1, [r7, #8]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	68fa      	ldr	r2, [r7, #12]
 8008fce:	3206      	adds	r2, #6
 8008fd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	60fb      	str	r3, [r7, #12]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2b03      	cmp	r3, #3
 8008fde:	d9de      	bls.n	8008f9e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681a      	ldr	r2, [r3, #0]
 8008fea:	f241 132c 	movw	r3, #4396	; 0x112c
 8008fee:	4413      	add	r3, r2
 8008ff0:	2203      	movs	r2, #3
 8008ff2:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	68d9      	ldr	r1, [r3, #12]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	f241 1314 	movw	r3, #4372	; 0x1114
 8009000:	4413      	add	r3, r2
 8009002:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	68da      	ldr	r2, [r3, #12]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8009010:	601a      	str	r2, [r3, #0]
}
 8009012:	bf00      	nop
 8009014:	3714      	adds	r7, #20
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr

0800901e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800901e:	b480      	push	{r7}
 8009020:	b085      	sub	sp, #20
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8009026:	2300      	movs	r3, #0
 8009028:	60fb      	str	r3, [r7, #12]
 800902a:	e024      	b.n	8009076 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6919      	ldr	r1, [r3, #16]
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	4613      	mov	r3, r2
 8009034:	005b      	lsls	r3, r3, #1
 8009036:	4413      	add	r3, r2
 8009038:	00db      	lsls	r3, r3, #3
 800903a:	440b      	add	r3, r1
 800903c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	2200      	movs	r2, #0
 8009042:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	2200      	movs	r2, #0
 8009048:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	2200      	movs	r2, #0
 800904e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	2200      	movs	r2, #0
 8009054:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	2200      	movs	r2, #0
 800905a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	2200      	movs	r2, #0
 8009060:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8009062:	68ba      	ldr	r2, [r7, #8]
 8009064:	6879      	ldr	r1, [r7, #4]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	3310      	adds	r3, #16
 800906a:	009b      	lsls	r3, r3, #2
 800906c:	440b      	add	r3, r1
 800906e:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	3301      	adds	r3, #1
 8009074:	60fb      	str	r3, [r7, #12]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2b03      	cmp	r3, #3
 800907a:	d9d7      	bls.n	800902c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2200      	movs	r2, #0
 8009080:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2200      	movs	r2, #0
 800908c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681a      	ldr	r2, [r3, #0]
 800909e:	f241 1330 	movw	r3, #4400	; 0x1130
 80090a2:	4413      	add	r3, r2
 80090a4:	2203      	movs	r2, #3
 80090a6:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6919      	ldr	r1, [r3, #16]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	f241 131c 	movw	r3, #4380	; 0x111c
 80090b4:	4413      	add	r3, r2
 80090b6:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	691b      	ldr	r3, [r3, #16]
 80090bc:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	f241 1328 	movw	r3, #4392	; 0x1128
 80090c8:	4413      	add	r3, r2
 80090ca:	6019      	str	r1, [r3, #0]
}
 80090cc:	bf00      	nop
 80090ce:	3714      	adds	r7, #20
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr

080090d8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80090d8:	b480      	push	{r7}
 80090da:	b08d      	sub	sp, #52	; 0x34
 80090dc:	af00      	add	r7, sp, #0
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	60b9      	str	r1, [r7, #8]
 80090e2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	3318      	adds	r3, #24
 80090e8:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	691b      	ldr	r3, [r3, #16]
 80090ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	691b      	ldr	r3, [r3, #16]
 80090f4:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 80090f6:	2300      	movs	r3, #0
 80090f8:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009102:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800910a:	2300      	movs	r3, #0
 800910c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800910e:	6a3b      	ldr	r3, [r7, #32]
 8009110:	68db      	ldr	r3, [r3, #12]
 8009112:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009116:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800911a:	d007      	beq.n	800912c <ETH_Prepare_Tx_Descriptors+0x54>
 800911c:	697a      	ldr	r2, [r7, #20]
 800911e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009120:	3304      	adds	r3, #4
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	4413      	add	r3, r2
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d001      	beq.n	8009130 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800912c:	2302      	movs	r3, #2
 800912e:	e24a      	b.n	80095c6 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f003 0304 	and.w	r3, r3, #4
 8009138:	2b00      	cmp	r3, #0
 800913a:	d044      	beq.n	80091c6 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 800913c:	6a3b      	ldr	r3, [r7, #32]
 800913e:	68da      	ldr	r2, [r3, #12]
 8009140:	4b72      	ldr	r3, [pc, #456]	; (800930c <ETH_Prepare_Tx_Descriptors+0x234>)
 8009142:	4013      	ands	r3, r2
 8009144:	68ba      	ldr	r2, [r7, #8]
 8009146:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009148:	431a      	orrs	r2, r3
 800914a:	6a3b      	ldr	r3, [r7, #32]
 800914c:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800914e:	6a3b      	ldr	r3, [r7, #32]
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009156:	6a3b      	ldr	r3, [r7, #32]
 8009158:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009168:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f003 0308 	and.w	r3, r3, #8
 8009172:	2b00      	cmp	r3, #0
 8009174:	d027      	beq.n	80091c6 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8009176:	6a3b      	ldr	r3, [r7, #32]
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	b29a      	uxth	r2, r3
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009180:	041b      	lsls	r3, r3, #16
 8009182:	431a      	orrs	r2, r3
 8009184:	6a3b      	ldr	r3, [r7, #32]
 8009186:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8009188:	6a3b      	ldr	r3, [r7, #32]
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009190:	6a3b      	ldr	r3, [r7, #32]
 8009192:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8009194:	6a3b      	ldr	r3, [r7, #32]
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091a0:	431a      	orrs	r2, r3
 80091a2:	6a3b      	ldr	r3, [r7, #32]
 80091a4:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80091b4:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80091c4:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f003 0310 	and.w	r3, r3, #16
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d00e      	beq.n	80091f0 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80091d2:	6a3b      	ldr	r3, [r7, #32]
 80091d4:	689a      	ldr	r2, [r3, #8]
 80091d6:	4b4e      	ldr	r3, [pc, #312]	; (8009310 <ETH_Prepare_Tx_Descriptors+0x238>)
 80091d8:	4013      	ands	r3, r2
 80091da:	68ba      	ldr	r2, [r7, #8]
 80091dc:	6992      	ldr	r2, [r2, #24]
 80091de:	431a      	orrs	r2, r3
 80091e0:	6a3b      	ldr	r3, [r7, #32]
 80091e2:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80091e4:	6a3b      	ldr	r3, [r7, #32]
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80091ec:	6a3b      	ldr	r3, [r7, #32]
 80091ee:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f003 0304 	and.w	r3, r3, #4
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d105      	bne.n	8009208 <ETH_Prepare_Tx_Descriptors+0x130>
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f003 0310 	and.w	r3, r3, #16
 8009204:	2b00      	cmp	r3, #0
 8009206:	d030      	beq.n	800926a <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8009208:	6a3b      	ldr	r3, [r7, #32]
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009210:	6a3b      	ldr	r3, [r7, #32]
 8009212:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8009214:	6a3b      	ldr	r3, [r7, #32]
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800921c:	6a3b      	ldr	r3, [r7, #32]
 800921e:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8009220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009222:	3301      	adds	r3, #1
 8009224:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009228:	2b03      	cmp	r3, #3
 800922a:	d902      	bls.n	8009232 <ETH_Prepare_Tx_Descriptors+0x15a>
 800922c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800922e:	3b04      	subs	r3, #4
 8009230:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800923a:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 800923c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923e:	3301      	adds	r3, #1
 8009240:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8009242:	6a3b      	ldr	r3, [r7, #32]
 8009244:	68db      	ldr	r3, [r3, #12]
 8009246:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800924a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800924e:	d10c      	bne.n	800926a <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	693a      	ldr	r2, [r7, #16]
 8009254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009258:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800925a:	6a3b      	ldr	r3, [r7, #32]
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009262:	6a3b      	ldr	r3, [r7, #32]
 8009264:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8009266:	2302      	movs	r3, #2
 8009268:	e1ad      	b.n	80095c6 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 800926a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800926c:	3301      	adds	r3, #1
 800926e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	461a      	mov	r2, r3
 8009276:	6a3b      	ldr	r3, [r7, #32]
 8009278:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800927a:	6a3b      	ldr	r3, [r7, #32]
 800927c:	689a      	ldr	r2, [r3, #8]
 800927e:	4b24      	ldr	r3, [pc, #144]	; (8009310 <ETH_Prepare_Tx_Descriptors+0x238>)
 8009280:	4013      	ands	r3, r2
 8009282:	69fa      	ldr	r2, [r7, #28]
 8009284:	6852      	ldr	r2, [r2, #4]
 8009286:	431a      	orrs	r2, r3
 8009288:	6a3b      	ldr	r3, [r7, #32]
 800928a:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d012      	beq.n	80092ba <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 8009294:	69fb      	ldr	r3, [r7, #28]
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800929a:	69fb      	ldr	r3, [r7, #28]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	461a      	mov	r2, r3
 80092a0:	6a3b      	ldr	r3, [r7, #32]
 80092a2:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80092a4:	6a3b      	ldr	r3, [r7, #32]
 80092a6:	689a      	ldr	r2, [r3, #8]
 80092a8:	4b1a      	ldr	r3, [pc, #104]	; (8009314 <ETH_Prepare_Tx_Descriptors+0x23c>)
 80092aa:	4013      	ands	r3, r2
 80092ac:	69fa      	ldr	r2, [r7, #28]
 80092ae:	6852      	ldr	r2, [r2, #4]
 80092b0:	0412      	lsls	r2, r2, #16
 80092b2:	431a      	orrs	r2, r3
 80092b4:	6a3b      	ldr	r3, [r7, #32]
 80092b6:	609a      	str	r2, [r3, #8]
 80092b8:	e008      	b.n	80092cc <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80092ba:	6a3b      	ldr	r3, [r7, #32]
 80092bc:	2200      	movs	r2, #0
 80092be:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80092c0:	6a3b      	ldr	r3, [r7, #32]
 80092c2:	689a      	ldr	r2, [r3, #8]
 80092c4:	4b13      	ldr	r3, [pc, #76]	; (8009314 <ETH_Prepare_Tx_Descriptors+0x23c>)
 80092c6:	4013      	ands	r3, r2
 80092c8:	6a3a      	ldr	r2, [r7, #32]
 80092ca:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f003 0310 	and.w	r3, r3, #16
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d021      	beq.n	800931c <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80092d8:	6a3b      	ldr	r3, [r7, #32]
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	6a1b      	ldr	r3, [r3, #32]
 80092e4:	04db      	lsls	r3, r3, #19
 80092e6:	431a      	orrs	r2, r3
 80092e8:	6a3b      	ldr	r3, [r7, #32]
 80092ea:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80092ec:	6a3b      	ldr	r3, [r7, #32]
 80092ee:	68da      	ldr	r2, [r3, #12]
 80092f0:	4b09      	ldr	r3, [pc, #36]	; (8009318 <ETH_Prepare_Tx_Descriptors+0x240>)
 80092f2:	4013      	ands	r3, r2
 80092f4:	68ba      	ldr	r2, [r7, #8]
 80092f6:	69d2      	ldr	r2, [r2, #28]
 80092f8:	431a      	orrs	r2, r3
 80092fa:	6a3b      	ldr	r3, [r7, #32]
 80092fc:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80092fe:	6a3b      	ldr	r3, [r7, #32]
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009306:	6a3b      	ldr	r3, [r7, #32]
 8009308:	60da      	str	r2, [r3, #12]
 800930a:	e02e      	b.n	800936a <ETH_Prepare_Tx_Descriptors+0x292>
 800930c:	ffff0000 	.word	0xffff0000
 8009310:	ffffc000 	.word	0xffffc000
 8009314:	c000ffff 	.word	0xc000ffff
 8009318:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800931c:	6a3b      	ldr	r3, [r7, #32]
 800931e:	68da      	ldr	r2, [r3, #12]
 8009320:	4b93      	ldr	r3, [pc, #588]	; (8009570 <ETH_Prepare_Tx_Descriptors+0x498>)
 8009322:	4013      	ands	r3, r2
 8009324:	68ba      	ldr	r2, [r7, #8]
 8009326:	6852      	ldr	r2, [r2, #4]
 8009328:	431a      	orrs	r2, r3
 800932a:	6a3b      	ldr	r3, [r7, #32]
 800932c:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f003 0301 	and.w	r3, r3, #1
 8009336:	2b00      	cmp	r3, #0
 8009338:	d008      	beq.n	800934c <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800933a:	6a3b      	ldr	r3, [r7, #32]
 800933c:	68db      	ldr	r3, [r3, #12]
 800933e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	695b      	ldr	r3, [r3, #20]
 8009346:	431a      	orrs	r2, r3
 8009348:	6a3b      	ldr	r3, [r7, #32]
 800934a:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f003 0320 	and.w	r3, r3, #32
 8009354:	2b00      	cmp	r3, #0
 8009356:	d008      	beq.n	800936a <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8009358:	6a3b      	ldr	r3, [r7, #32]
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	691b      	ldr	r3, [r3, #16]
 8009364:	431a      	orrs	r2, r3
 8009366:	6a3b      	ldr	r3, [r7, #32]
 8009368:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f003 0304 	and.w	r3, r3, #4
 8009372:	2b00      	cmp	r3, #0
 8009374:	d008      	beq.n	8009388 <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8009376:	6a3b      	ldr	r3, [r7, #32]
 8009378:	689b      	ldr	r3, [r3, #8]
 800937a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009382:	431a      	orrs	r2, r3
 8009384:	6a3b      	ldr	r3, [r7, #32]
 8009386:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8009388:	6a3b      	ldr	r3, [r7, #32]
 800938a:	68db      	ldr	r3, [r3, #12]
 800938c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009390:	6a3b      	ldr	r3, [r7, #32]
 8009392:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8009394:	6a3b      	ldr	r3, [r7, #32]
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800939c:	6a3b      	ldr	r3, [r7, #32]
 800939e:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80093a0:	6a3b      	ldr	r3, [r7, #32]
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80093a8:	6a3b      	ldr	r3, [r7, #32]
 80093aa:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f003 0302 	and.w	r3, r3, #2
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	f000 80cb 	beq.w	8009550 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80093ba:	6a3b      	ldr	r3, [r7, #32]
 80093bc:	68db      	ldr	r3, [r3, #12]
 80093be:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	68db      	ldr	r3, [r3, #12]
 80093c6:	431a      	orrs	r2, r3
 80093c8:	6a3b      	ldr	r3, [r7, #32]
 80093ca:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80093cc:	e0c0      	b.n	8009550 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80093ce:	6a3b      	ldr	r3, [r7, #32]
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80093d6:	6a3b      	ldr	r3, [r7, #32]
 80093d8:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80093da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093dc:	3301      	adds	r3, #1
 80093de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e2:	2b03      	cmp	r3, #3
 80093e4:	d902      	bls.n	80093ec <ETH_Prepare_Tx_Descriptors+0x314>
 80093e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e8:	3b04      	subs	r3, #4
 80093ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093f4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80093f6:	6a3b      	ldr	r3, [r7, #32]
 80093f8:	68db      	ldr	r3, [r3, #12]
 80093fa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80093fe:	6a3b      	ldr	r3, [r7, #32]
 8009400:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8009402:	6a3b      	ldr	r3, [r7, #32]
 8009404:	68db      	ldr	r3, [r3, #12]
 8009406:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800940a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800940e:	d007      	beq.n	8009420 <ETH_Prepare_Tx_Descriptors+0x348>
 8009410:	697a      	ldr	r2, [r7, #20]
 8009412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009414:	3304      	adds	r3, #4
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	4413      	add	r3, r2
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d026      	beq.n	800946e <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800942c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 800942e:	2300      	movs	r3, #0
 8009430:	627b      	str	r3, [r7, #36]	; 0x24
 8009432:	e016      	b.n	8009462 <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8009434:	6a3b      	ldr	r3, [r7, #32]
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800943c:	6a3b      	ldr	r3, [r7, #32]
 800943e:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8009440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009442:	3301      	adds	r3, #1
 8009444:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009448:	2b03      	cmp	r3, #3
 800944a:	d902      	bls.n	8009452 <ETH_Prepare_Tx_Descriptors+0x37a>
 800944c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800944e:	3b04      	subs	r3, #4
 8009450:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800945a:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 800945c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945e:	3301      	adds	r3, #1
 8009460:	627b      	str	r3, [r7, #36]	; 0x24
 8009462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009466:	429a      	cmp	r2, r3
 8009468:	d3e4      	bcc.n	8009434 <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 800946a:	2302      	movs	r3, #2
 800946c:	e0ab      	b.n	80095c6 <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 800946e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009470:	3301      	adds	r3, #1
 8009472:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8009474:	69fb      	ldr	r3, [r7, #28]
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	461a      	mov	r2, r3
 8009480:	6a3b      	ldr	r3, [r7, #32]
 8009482:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8009484:	6a3b      	ldr	r3, [r7, #32]
 8009486:	689a      	ldr	r2, [r3, #8]
 8009488:	4b3a      	ldr	r3, [pc, #232]	; (8009574 <ETH_Prepare_Tx_Descriptors+0x49c>)
 800948a:	4013      	ands	r3, r2
 800948c:	69fa      	ldr	r2, [r7, #28]
 800948e:	6852      	ldr	r2, [r2, #4]
 8009490:	431a      	orrs	r2, r3
 8009492:	6a3b      	ldr	r3, [r7, #32]
 8009494:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8009496:	69fb      	ldr	r3, [r7, #28]
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d012      	beq.n	80094c4 <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 800949e:	69fb      	ldr	r3, [r7, #28]
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80094a4:	69fb      	ldr	r3, [r7, #28]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	461a      	mov	r2, r3
 80094aa:	6a3b      	ldr	r3, [r7, #32]
 80094ac:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80094ae:	6a3b      	ldr	r3, [r7, #32]
 80094b0:	689a      	ldr	r2, [r3, #8]
 80094b2:	4b31      	ldr	r3, [pc, #196]	; (8009578 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 80094b4:	4013      	ands	r3, r2
 80094b6:	69fa      	ldr	r2, [r7, #28]
 80094b8:	6852      	ldr	r2, [r2, #4]
 80094ba:	0412      	lsls	r2, r2, #16
 80094bc:	431a      	orrs	r2, r3
 80094be:	6a3b      	ldr	r3, [r7, #32]
 80094c0:	609a      	str	r2, [r3, #8]
 80094c2:	e008      	b.n	80094d6 <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 80094c4:	6a3b      	ldr	r3, [r7, #32]
 80094c6:	2200      	movs	r2, #0
 80094c8:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80094ca:	6a3b      	ldr	r3, [r7, #32]
 80094cc:	689a      	ldr	r2, [r3, #8]
 80094ce:	4b2a      	ldr	r3, [pc, #168]	; (8009578 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 80094d0:	4013      	ands	r3, r2
 80094d2:	6a3a      	ldr	r2, [r7, #32]
 80094d4:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f003 0310 	and.w	r3, r3, #16
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d00f      	beq.n	8009502 <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80094e2:	6a3b      	ldr	r3, [r7, #32]
 80094e4:	68da      	ldr	r2, [r3, #12]
 80094e6:	4b25      	ldr	r3, [pc, #148]	; (800957c <ETH_Prepare_Tx_Descriptors+0x4a4>)
 80094e8:	4013      	ands	r3, r2
 80094ea:	68ba      	ldr	r2, [r7, #8]
 80094ec:	69d2      	ldr	r2, [r2, #28]
 80094ee:	431a      	orrs	r2, r3
 80094f0:	6a3b      	ldr	r3, [r7, #32]
 80094f2:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80094f4:	6a3b      	ldr	r3, [r7, #32]
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80094fc:	6a3b      	ldr	r3, [r7, #32]
 80094fe:	60da      	str	r2, [r3, #12]
 8009500:	e017      	b.n	8009532 <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8009502:	6a3b      	ldr	r3, [r7, #32]
 8009504:	68da      	ldr	r2, [r3, #12]
 8009506:	4b1a      	ldr	r3, [pc, #104]	; (8009570 <ETH_Prepare_Tx_Descriptors+0x498>)
 8009508:	4013      	ands	r3, r2
 800950a:	68ba      	ldr	r2, [r7, #8]
 800950c:	6852      	ldr	r2, [r2, #4]
 800950e:	431a      	orrs	r2, r3
 8009510:	6a3b      	ldr	r3, [r7, #32]
 8009512:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f003 0301 	and.w	r3, r3, #1
 800951c:	2b00      	cmp	r3, #0
 800951e:	d008      	beq.n	8009532 <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8009520:	6a3b      	ldr	r3, [r7, #32]
 8009522:	68db      	ldr	r3, [r3, #12]
 8009524:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	695b      	ldr	r3, [r3, #20]
 800952c:	431a      	orrs	r2, r3
 800952e:	6a3b      	ldr	r3, [r7, #32]
 8009530:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8009532:	69bb      	ldr	r3, [r7, #24]
 8009534:	3301      	adds	r3, #1
 8009536:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8009538:	6a3b      	ldr	r3, [r7, #32]
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009540:	6a3b      	ldr	r3, [r7, #32]
 8009542:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8009544:	6a3b      	ldr	r3, [r7, #32]
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800954c:	6a3b      	ldr	r3, [r7, #32]
 800954e:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	689b      	ldr	r3, [r3, #8]
 8009554:	2b00      	cmp	r3, #0
 8009556:	f47f af3a 	bne.w	80093ce <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d00f      	beq.n	8009580 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8009560:	6a3b      	ldr	r3, [r7, #32]
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009568:	6a3b      	ldr	r3, [r7, #32]
 800956a:	609a      	str	r2, [r3, #8]
 800956c:	e00e      	b.n	800958c <ETH_Prepare_Tx_Descriptors+0x4b4>
 800956e:	bf00      	nop
 8009570:	ffff8000 	.word	0xffff8000
 8009574:	ffffc000 	.word	0xffffc000
 8009578:	c000ffff 	.word	0xc000ffff
 800957c:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8009580:	6a3b      	ldr	r3, [r7, #32]
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009588:	6a3b      	ldr	r3, [r7, #32]
 800958a:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800958c:	6a3b      	ldr	r3, [r7, #32]
 800958e:	68db      	ldr	r3, [r3, #12]
 8009590:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009594:	6a3b      	ldr	r3, [r7, #32]
 8009596:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800959c:	6979      	ldr	r1, [r7, #20]
 800959e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a0:	3304      	adds	r3, #4
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	440b      	add	r3, r1
 80095a6:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095ac:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80095ae:	b672      	cpsid	i
}
 80095b0:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80095b6:	69bb      	ldr	r3, [r7, #24]
 80095b8:	4413      	add	r3, r2
 80095ba:	1c5a      	adds	r2, r3, #1
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80095c0:	b662      	cpsie	i
}
 80095c2:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80095c4:	2300      	movs	r3, #0
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3734      	adds	r7, #52	; 0x34
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop

080095d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b089      	sub	sp, #36	; 0x24
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80095de:	2300      	movs	r3, #0
 80095e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80095e2:	4b89      	ldr	r3, [pc, #548]	; (8009808 <HAL_GPIO_Init+0x234>)
 80095e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80095e6:	e194      	b.n	8009912 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	2101      	movs	r1, #1
 80095ee:	69fb      	ldr	r3, [r7, #28]
 80095f0:	fa01 f303 	lsl.w	r3, r1, r3
 80095f4:	4013      	ands	r3, r2
 80095f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	f000 8186 	beq.w	800990c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	2b01      	cmp	r3, #1
 8009606:	d00b      	beq.n	8009620 <HAL_GPIO_Init+0x4c>
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	2b02      	cmp	r3, #2
 800960e:	d007      	beq.n	8009620 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009614:	2b11      	cmp	r3, #17
 8009616:	d003      	beq.n	8009620 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	2b12      	cmp	r3, #18
 800961e:	d130      	bne.n	8009682 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009626:	69fb      	ldr	r3, [r7, #28]
 8009628:	005b      	lsls	r3, r3, #1
 800962a:	2203      	movs	r2, #3
 800962c:	fa02 f303 	lsl.w	r3, r2, r3
 8009630:	43db      	mvns	r3, r3
 8009632:	69ba      	ldr	r2, [r7, #24]
 8009634:	4013      	ands	r3, r2
 8009636:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	68da      	ldr	r2, [r3, #12]
 800963c:	69fb      	ldr	r3, [r7, #28]
 800963e:	005b      	lsls	r3, r3, #1
 8009640:	fa02 f303 	lsl.w	r3, r2, r3
 8009644:	69ba      	ldr	r2, [r7, #24]
 8009646:	4313      	orrs	r3, r2
 8009648:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	69ba      	ldr	r2, [r7, #24]
 800964e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009656:	2201      	movs	r2, #1
 8009658:	69fb      	ldr	r3, [r7, #28]
 800965a:	fa02 f303 	lsl.w	r3, r2, r3
 800965e:	43db      	mvns	r3, r3
 8009660:	69ba      	ldr	r2, [r7, #24]
 8009662:	4013      	ands	r3, r2
 8009664:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	091b      	lsrs	r3, r3, #4
 800966c:	f003 0201 	and.w	r2, r3, #1
 8009670:	69fb      	ldr	r3, [r7, #28]
 8009672:	fa02 f303 	lsl.w	r3, r2, r3
 8009676:	69ba      	ldr	r2, [r7, #24]
 8009678:	4313      	orrs	r3, r2
 800967a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	69ba      	ldr	r2, [r7, #24]
 8009680:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	68db      	ldr	r3, [r3, #12]
 8009686:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009688:	69fb      	ldr	r3, [r7, #28]
 800968a:	005b      	lsls	r3, r3, #1
 800968c:	2203      	movs	r2, #3
 800968e:	fa02 f303 	lsl.w	r3, r2, r3
 8009692:	43db      	mvns	r3, r3
 8009694:	69ba      	ldr	r2, [r7, #24]
 8009696:	4013      	ands	r3, r2
 8009698:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	689a      	ldr	r2, [r3, #8]
 800969e:	69fb      	ldr	r3, [r7, #28]
 80096a0:	005b      	lsls	r3, r3, #1
 80096a2:	fa02 f303 	lsl.w	r3, r2, r3
 80096a6:	69ba      	ldr	r2, [r7, #24]
 80096a8:	4313      	orrs	r3, r2
 80096aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	69ba      	ldr	r2, [r7, #24]
 80096b0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	2b02      	cmp	r3, #2
 80096b8:	d003      	beq.n	80096c2 <HAL_GPIO_Init+0xee>
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	2b12      	cmp	r3, #18
 80096c0:	d123      	bne.n	800970a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80096c2:	69fb      	ldr	r3, [r7, #28]
 80096c4:	08da      	lsrs	r2, r3, #3
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	3208      	adds	r2, #8
 80096ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80096d0:	69fb      	ldr	r3, [r7, #28]
 80096d2:	f003 0307 	and.w	r3, r3, #7
 80096d6:	009b      	lsls	r3, r3, #2
 80096d8:	220f      	movs	r2, #15
 80096da:	fa02 f303 	lsl.w	r3, r2, r3
 80096de:	43db      	mvns	r3, r3
 80096e0:	69ba      	ldr	r2, [r7, #24]
 80096e2:	4013      	ands	r3, r2
 80096e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	691a      	ldr	r2, [r3, #16]
 80096ea:	69fb      	ldr	r3, [r7, #28]
 80096ec:	f003 0307 	and.w	r3, r3, #7
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	fa02 f303 	lsl.w	r3, r2, r3
 80096f6:	69ba      	ldr	r2, [r7, #24]
 80096f8:	4313      	orrs	r3, r2
 80096fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80096fc:	69fb      	ldr	r3, [r7, #28]
 80096fe:	08da      	lsrs	r2, r3, #3
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	3208      	adds	r2, #8
 8009704:	69b9      	ldr	r1, [r7, #24]
 8009706:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009710:	69fb      	ldr	r3, [r7, #28]
 8009712:	005b      	lsls	r3, r3, #1
 8009714:	2203      	movs	r2, #3
 8009716:	fa02 f303 	lsl.w	r3, r2, r3
 800971a:	43db      	mvns	r3, r3
 800971c:	69ba      	ldr	r2, [r7, #24]
 800971e:	4013      	ands	r3, r2
 8009720:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	f003 0203 	and.w	r2, r3, #3
 800972a:	69fb      	ldr	r3, [r7, #28]
 800972c:	005b      	lsls	r3, r3, #1
 800972e:	fa02 f303 	lsl.w	r3, r2, r3
 8009732:	69ba      	ldr	r2, [r7, #24]
 8009734:	4313      	orrs	r3, r2
 8009736:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	69ba      	ldr	r2, [r7, #24]
 800973c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009746:	2b00      	cmp	r3, #0
 8009748:	f000 80e0 	beq.w	800990c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800974c:	4b2f      	ldr	r3, [pc, #188]	; (800980c <HAL_GPIO_Init+0x238>)
 800974e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009752:	4a2e      	ldr	r2, [pc, #184]	; (800980c <HAL_GPIO_Init+0x238>)
 8009754:	f043 0302 	orr.w	r3, r3, #2
 8009758:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800975c:	4b2b      	ldr	r3, [pc, #172]	; (800980c <HAL_GPIO_Init+0x238>)
 800975e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009762:	f003 0302 	and.w	r3, r3, #2
 8009766:	60fb      	str	r3, [r7, #12]
 8009768:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800976a:	4a29      	ldr	r2, [pc, #164]	; (8009810 <HAL_GPIO_Init+0x23c>)
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	089b      	lsrs	r3, r3, #2
 8009770:	3302      	adds	r3, #2
 8009772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009776:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009778:	69fb      	ldr	r3, [r7, #28]
 800977a:	f003 0303 	and.w	r3, r3, #3
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	220f      	movs	r2, #15
 8009782:	fa02 f303 	lsl.w	r3, r2, r3
 8009786:	43db      	mvns	r3, r3
 8009788:	69ba      	ldr	r2, [r7, #24]
 800978a:	4013      	ands	r3, r2
 800978c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	4a20      	ldr	r2, [pc, #128]	; (8009814 <HAL_GPIO_Init+0x240>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d052      	beq.n	800983c <HAL_GPIO_Init+0x268>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	4a1f      	ldr	r2, [pc, #124]	; (8009818 <HAL_GPIO_Init+0x244>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d031      	beq.n	8009802 <HAL_GPIO_Init+0x22e>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	4a1e      	ldr	r2, [pc, #120]	; (800981c <HAL_GPIO_Init+0x248>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d02b      	beq.n	80097fe <HAL_GPIO_Init+0x22a>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	4a1d      	ldr	r2, [pc, #116]	; (8009820 <HAL_GPIO_Init+0x24c>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d025      	beq.n	80097fa <HAL_GPIO_Init+0x226>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	4a1c      	ldr	r2, [pc, #112]	; (8009824 <HAL_GPIO_Init+0x250>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d01f      	beq.n	80097f6 <HAL_GPIO_Init+0x222>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	4a1b      	ldr	r2, [pc, #108]	; (8009828 <HAL_GPIO_Init+0x254>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d019      	beq.n	80097f2 <HAL_GPIO_Init+0x21e>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	4a1a      	ldr	r2, [pc, #104]	; (800982c <HAL_GPIO_Init+0x258>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d013      	beq.n	80097ee <HAL_GPIO_Init+0x21a>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	4a19      	ldr	r2, [pc, #100]	; (8009830 <HAL_GPIO_Init+0x25c>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d00d      	beq.n	80097ea <HAL_GPIO_Init+0x216>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	4a18      	ldr	r2, [pc, #96]	; (8009834 <HAL_GPIO_Init+0x260>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d007      	beq.n	80097e6 <HAL_GPIO_Init+0x212>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	4a17      	ldr	r2, [pc, #92]	; (8009838 <HAL_GPIO_Init+0x264>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d101      	bne.n	80097e2 <HAL_GPIO_Init+0x20e>
 80097de:	2309      	movs	r3, #9
 80097e0:	e02d      	b.n	800983e <HAL_GPIO_Init+0x26a>
 80097e2:	230a      	movs	r3, #10
 80097e4:	e02b      	b.n	800983e <HAL_GPIO_Init+0x26a>
 80097e6:	2308      	movs	r3, #8
 80097e8:	e029      	b.n	800983e <HAL_GPIO_Init+0x26a>
 80097ea:	2307      	movs	r3, #7
 80097ec:	e027      	b.n	800983e <HAL_GPIO_Init+0x26a>
 80097ee:	2306      	movs	r3, #6
 80097f0:	e025      	b.n	800983e <HAL_GPIO_Init+0x26a>
 80097f2:	2305      	movs	r3, #5
 80097f4:	e023      	b.n	800983e <HAL_GPIO_Init+0x26a>
 80097f6:	2304      	movs	r3, #4
 80097f8:	e021      	b.n	800983e <HAL_GPIO_Init+0x26a>
 80097fa:	2303      	movs	r3, #3
 80097fc:	e01f      	b.n	800983e <HAL_GPIO_Init+0x26a>
 80097fe:	2302      	movs	r3, #2
 8009800:	e01d      	b.n	800983e <HAL_GPIO_Init+0x26a>
 8009802:	2301      	movs	r3, #1
 8009804:	e01b      	b.n	800983e <HAL_GPIO_Init+0x26a>
 8009806:	bf00      	nop
 8009808:	58000080 	.word	0x58000080
 800980c:	58024400 	.word	0x58024400
 8009810:	58000400 	.word	0x58000400
 8009814:	58020000 	.word	0x58020000
 8009818:	58020400 	.word	0x58020400
 800981c:	58020800 	.word	0x58020800
 8009820:	58020c00 	.word	0x58020c00
 8009824:	58021000 	.word	0x58021000
 8009828:	58021400 	.word	0x58021400
 800982c:	58021800 	.word	0x58021800
 8009830:	58021c00 	.word	0x58021c00
 8009834:	58022000 	.word	0x58022000
 8009838:	58022400 	.word	0x58022400
 800983c:	2300      	movs	r3, #0
 800983e:	69fa      	ldr	r2, [r7, #28]
 8009840:	f002 0203 	and.w	r2, r2, #3
 8009844:	0092      	lsls	r2, r2, #2
 8009846:	4093      	lsls	r3, r2
 8009848:	69ba      	ldr	r2, [r7, #24]
 800984a:	4313      	orrs	r3, r2
 800984c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800984e:	4938      	ldr	r1, [pc, #224]	; (8009930 <HAL_GPIO_Init+0x35c>)
 8009850:	69fb      	ldr	r3, [r7, #28]
 8009852:	089b      	lsrs	r3, r3, #2
 8009854:	3302      	adds	r3, #2
 8009856:	69ba      	ldr	r2, [r7, #24]
 8009858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	43db      	mvns	r3, r3
 8009866:	69ba      	ldr	r2, [r7, #24]
 8009868:	4013      	ands	r3, r2
 800986a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009874:	2b00      	cmp	r3, #0
 8009876:	d003      	beq.n	8009880 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009878:	69ba      	ldr	r2, [r7, #24]
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	4313      	orrs	r3, r2
 800987e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	69ba      	ldr	r2, [r7, #24]
 8009884:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	43db      	mvns	r3, r3
 8009890:	69ba      	ldr	r2, [r7, #24]
 8009892:	4013      	ands	r3, r2
 8009894:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d003      	beq.n	80098aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80098a2:	69ba      	ldr	r2, [r7, #24]
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	4313      	orrs	r3, r2
 80098a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	69ba      	ldr	r2, [r7, #24]
 80098ae:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80098b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	43db      	mvns	r3, r3
 80098bc:	69ba      	ldr	r2, [r7, #24]
 80098be:	4013      	ands	r3, r2
 80098c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d003      	beq.n	80098d6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80098ce:	69ba      	ldr	r2, [r7, #24]
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	4313      	orrs	r3, r2
 80098d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80098d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80098da:	69bb      	ldr	r3, [r7, #24]
 80098dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80098de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	43db      	mvns	r3, r3
 80098ea:	69ba      	ldr	r2, [r7, #24]
 80098ec:	4013      	ands	r3, r2
 80098ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d003      	beq.n	8009904 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80098fc:	69ba      	ldr	r2, [r7, #24]
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	4313      	orrs	r3, r2
 8009902:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009904:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009908:	69bb      	ldr	r3, [r7, #24]
 800990a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800990c:	69fb      	ldr	r3, [r7, #28]
 800990e:	3301      	adds	r3, #1
 8009910:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	69fb      	ldr	r3, [r7, #28]
 8009918:	fa22 f303 	lsr.w	r3, r2, r3
 800991c:	2b00      	cmp	r3, #0
 800991e:	f47f ae63 	bne.w	80095e8 <HAL_GPIO_Init+0x14>
  }
}
 8009922:	bf00      	nop
 8009924:	bf00      	nop
 8009926:	3724      	adds	r7, #36	; 0x24
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr
 8009930:	58000400 	.word	0x58000400

08009934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	460b      	mov	r3, r1
 800993e:	807b      	strh	r3, [r7, #2]
 8009940:	4613      	mov	r3, r2
 8009942:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009944:	787b      	ldrb	r3, [r7, #1]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d003      	beq.n	8009952 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800994a:	887a      	ldrh	r2, [r7, #2]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009950:	e003      	b.n	800995a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009952:	887b      	ldrh	r3, [r7, #2]
 8009954:	041a      	lsls	r2, r3, #16
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	619a      	str	r2, [r3, #24]
}
 800995a:	bf00      	nop
 800995c:	370c      	adds	r7, #12
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr

08009966 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009966:	b480      	push	{r7}
 8009968:	b085      	sub	sp, #20
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
 800996e:	460b      	mov	r3, r1
 8009970:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	695b      	ldr	r3, [r3, #20]
 8009976:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009978:	887a      	ldrh	r2, [r7, #2]
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	4013      	ands	r3, r2
 800997e:	041a      	lsls	r2, r3, #16
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	43d9      	mvns	r1, r3
 8009984:	887b      	ldrh	r3, [r7, #2]
 8009986:	400b      	ands	r3, r1
 8009988:	431a      	orrs	r2, r3
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	619a      	str	r2, [r3, #24]
}
 800998e:	bf00      	nop
 8009990:	3714      	adds	r7, #20
 8009992:	46bd      	mov	sp, r7
 8009994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009998:	4770      	bx	lr
	...

0800999c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80099a4:	4a08      	ldr	r2, [pc, #32]	; (80099c8 <HAL_HSEM_FastTake+0x2c>)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	3320      	adds	r3, #32
 80099aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099ae:	4a07      	ldr	r2, [pc, #28]	; (80099cc <HAL_HSEM_FastTake+0x30>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d101      	bne.n	80099b8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80099b4:	2300      	movs	r3, #0
 80099b6:	e000      	b.n	80099ba <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80099b8:	2301      	movs	r3, #1
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	370c      	adds	r7, #12
 80099be:	46bd      	mov	sp, r7
 80099c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c4:	4770      	bx	lr
 80099c6:	bf00      	nop
 80099c8:	58026400 	.word	0x58026400
 80099cc:	80000300 	.word	0x80000300

080099d0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b083      	sub	sp, #12
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80099da:	4906      	ldr	r1, [pc, #24]	; (80099f4 <HAL_HSEM_Release+0x24>)
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80099e8:	bf00      	nop
 80099ea:	370c      	adds	r7, #12
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr
 80099f4:	58026400 	.word	0x58026400

080099f8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b085      	sub	sp, #20
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009a00:	4b0d      	ldr	r3, [pc, #52]	; (8009a38 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009a02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009a06:	4a0c      	ldr	r2, [pc, #48]	; (8009a38 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009a08:	f043 0302 	orr.w	r3, r3, #2
 8009a0c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009a10:	4b09      	ldr	r3, [pc, #36]	; (8009a38 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009a12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009a16:	f003 0302 	and.w	r3, r3, #2
 8009a1a:	60fb      	str	r3, [r7, #12]
 8009a1c:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8009a1e:	4b07      	ldr	r3, [pc, #28]	; (8009a3c <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009a20:	685a      	ldr	r2, [r3, #4]
 8009a22:	4906      	ldr	r1, [pc, #24]	; (8009a3c <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	4313      	orrs	r3, r2
 8009a28:	604b      	str	r3, [r1, #4]
}
 8009a2a:	bf00      	nop
 8009a2c:	3714      	adds	r7, #20
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr
 8009a36:	bf00      	nop
 8009a38:	58024400 	.word	0x58024400
 8009a3c:	58000400 	.word	0x58000400

08009a40 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8009a48:	4b29      	ldr	r3, [pc, #164]	; (8009af0 <HAL_PWREx_ConfigSupply+0xb0>)
 8009a4a:	68db      	ldr	r3, [r3, #12]
 8009a4c:	f003 0307 	and.w	r3, r3, #7
 8009a50:	2b06      	cmp	r3, #6
 8009a52:	d00a      	beq.n	8009a6a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009a54:	4b26      	ldr	r3, [pc, #152]	; (8009af0 <HAL_PWREx_ConfigSupply+0xb0>)
 8009a56:	68db      	ldr	r3, [r3, #12]
 8009a58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d001      	beq.n	8009a66 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009a62:	2301      	movs	r3, #1
 8009a64:	e040      	b.n	8009ae8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009a66:	2300      	movs	r3, #0
 8009a68:	e03e      	b.n	8009ae8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009a6a:	4b21      	ldr	r3, [pc, #132]	; (8009af0 <HAL_PWREx_ConfigSupply+0xb0>)
 8009a6c:	68db      	ldr	r3, [r3, #12]
 8009a6e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8009a72:	491f      	ldr	r1, [pc, #124]	; (8009af0 <HAL_PWREx_ConfigSupply+0xb0>)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	4313      	orrs	r3, r2
 8009a78:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009a7a:	f7fa fac1 	bl	8004000 <HAL_GetTick>
 8009a7e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009a80:	e009      	b.n	8009a96 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009a82:	f7fa fabd 	bl	8004000 <HAL_GetTick>
 8009a86:	4602      	mov	r2, r0
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	1ad3      	subs	r3, r2, r3
 8009a8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a90:	d901      	bls.n	8009a96 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009a92:	2301      	movs	r3, #1
 8009a94:	e028      	b.n	8009ae8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009a96:	4b16      	ldr	r3, [pc, #88]	; (8009af0 <HAL_PWREx_ConfigSupply+0xb0>)
 8009a98:	685b      	ldr	r3, [r3, #4]
 8009a9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009aa2:	d1ee      	bne.n	8009a82 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2b1e      	cmp	r3, #30
 8009aa8:	d008      	beq.n	8009abc <HAL_PWREx_ConfigSupply+0x7c>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2b2e      	cmp	r3, #46	; 0x2e
 8009aae:	d005      	beq.n	8009abc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2b1d      	cmp	r3, #29
 8009ab4:	d002      	beq.n	8009abc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2b2d      	cmp	r3, #45	; 0x2d
 8009aba:	d114      	bne.n	8009ae6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8009abc:	f7fa faa0 	bl	8004000 <HAL_GetTick>
 8009ac0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8009ac2:	e009      	b.n	8009ad8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009ac4:	f7fa fa9c 	bl	8004000 <HAL_GetTick>
 8009ac8:	4602      	mov	r2, r0
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	1ad3      	subs	r3, r2, r3
 8009ace:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ad2:	d901      	bls.n	8009ad8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	e007      	b.n	8009ae8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8009ad8:	4b05      	ldr	r3, [pc, #20]	; (8009af0 <HAL_PWREx_ConfigSupply+0xb0>)
 8009ada:	68db      	ldr	r3, [r3, #12]
 8009adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ae4:	d1ee      	bne.n	8009ac4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009ae6:	2300      	movs	r3, #0
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3710      	adds	r7, #16
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}
 8009af0:	58024800 	.word	0x58024800

08009af4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b08c      	sub	sp, #48	; 0x30
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d101      	bne.n	8009b06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009b02:	2301      	movs	r3, #1
 8009b04:	e3ff      	b.n	800a306 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f003 0301 	and.w	r3, r3, #1
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	f000 8087 	beq.w	8009c22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009b14:	4b99      	ldr	r3, [pc, #612]	; (8009d7c <HAL_RCC_OscConfig+0x288>)
 8009b16:	691b      	ldr	r3, [r3, #16]
 8009b18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009b1e:	4b97      	ldr	r3, [pc, #604]	; (8009d7c <HAL_RCC_OscConfig+0x288>)
 8009b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b22:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b26:	2b10      	cmp	r3, #16
 8009b28:	d007      	beq.n	8009b3a <HAL_RCC_OscConfig+0x46>
 8009b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b2c:	2b18      	cmp	r3, #24
 8009b2e:	d110      	bne.n	8009b52 <HAL_RCC_OscConfig+0x5e>
 8009b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b32:	f003 0303 	and.w	r3, r3, #3
 8009b36:	2b02      	cmp	r3, #2
 8009b38:	d10b      	bne.n	8009b52 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b3a:	4b90      	ldr	r3, [pc, #576]	; (8009d7c <HAL_RCC_OscConfig+0x288>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d06c      	beq.n	8009c20 <HAL_RCC_OscConfig+0x12c>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d168      	bne.n	8009c20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	e3d9      	b.n	800a306 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b5a:	d106      	bne.n	8009b6a <HAL_RCC_OscConfig+0x76>
 8009b5c:	4b87      	ldr	r3, [pc, #540]	; (8009d7c <HAL_RCC_OscConfig+0x288>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4a86      	ldr	r2, [pc, #536]	; (8009d7c <HAL_RCC_OscConfig+0x288>)
 8009b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b66:	6013      	str	r3, [r2, #0]
 8009b68:	e02e      	b.n	8009bc8 <HAL_RCC_OscConfig+0xd4>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d10c      	bne.n	8009b8c <HAL_RCC_OscConfig+0x98>
 8009b72:	4b82      	ldr	r3, [pc, #520]	; (8009d7c <HAL_RCC_OscConfig+0x288>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a81      	ldr	r2, [pc, #516]	; (8009d7c <HAL_RCC_OscConfig+0x288>)
 8009b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b7c:	6013      	str	r3, [r2, #0]
 8009b7e:	4b7f      	ldr	r3, [pc, #508]	; (8009d7c <HAL_RCC_OscConfig+0x288>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4a7e      	ldr	r2, [pc, #504]	; (8009d7c <HAL_RCC_OscConfig+0x288>)
 8009b84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b88:	6013      	str	r3, [r2, #0]
 8009b8a:	e01d      	b.n	8009bc8 <HAL_RCC_OscConfig+0xd4>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009b94:	d10c      	bne.n	8009bb0 <HAL_RCC_OscConfig+0xbc>
 8009b96:	4b79      	ldr	r3, [pc, #484]	; (8009d7c <HAL_RCC_OscConfig+0x288>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4a78      	ldr	r2, [pc, #480]	; (8009d7c <HAL_RCC_OscConfig+0x288>)
 8009b9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009ba0:	6013      	str	r3, [r2, #0]
 8009ba2:	4b76      	ldr	r3, [pc, #472]	; (8009d7c <HAL_RCC_OscConfig+0x288>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a75      	ldr	r2, [pc, #468]	; (8009d7c <HAL_RCC_OscConfig+0x288>)
 8009ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009bac:	6013      	str	r3, [r2, #0]
 8009bae:	e00b      	b.n	8009bc8 <HAL_RCC_OscConfig+0xd4>
 8009bb0:	4b72      	ldr	r3, [pc, #456]	; (8009d7c <HAL_RCC_OscConfig+0x288>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4a71      	ldr	r2, [pc, #452]	; (8009d7c <HAL_RCC_OscConfig+0x288>)
 8009bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009bba:	6013      	str	r3, [r2, #0]
 8009bbc:	4b6f      	ldr	r3, [pc, #444]	; (8009d7c <HAL_RCC_OscConfig+0x288>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a6e      	ldr	r2, [pc, #440]	; (8009d7c <HAL_RCC_OscConfig+0x288>)
 8009bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009bc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d013      	beq.n	8009bf8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bd0:	f7fa fa16 	bl	8004000 <HAL_GetTick>
 8009bd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009bd6:	e008      	b.n	8009bea <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009bd8:	f7fa fa12 	bl	8004000 <HAL_GetTick>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be0:	1ad3      	subs	r3, r2, r3
 8009be2:	2b64      	cmp	r3, #100	; 0x64
 8009be4:	d901      	bls.n	8009bea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009be6:	2303      	movs	r3, #3
 8009be8:	e38d      	b.n	800a306 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009bea:	4b64      	ldr	r3, [pc, #400]	; (8009d7c <HAL_RCC_OscConfig+0x288>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d0f0      	beq.n	8009bd8 <HAL_RCC_OscConfig+0xe4>
 8009bf6:	e014      	b.n	8009c22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bf8:	f7fa fa02 	bl	8004000 <HAL_GetTick>
 8009bfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009bfe:	e008      	b.n	8009c12 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009c00:	f7fa f9fe 	bl	8004000 <HAL_GetTick>
 8009c04:	4602      	mov	r2, r0
 8009c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c08:	1ad3      	subs	r3, r2, r3
 8009c0a:	2b64      	cmp	r3, #100	; 0x64
 8009c0c:	d901      	bls.n	8009c12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009c0e:	2303      	movs	r3, #3
 8009c10:	e379      	b.n	800a306 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009c12:	4b5a      	ldr	r3, [pc, #360]	; (8009d7c <HAL_RCC_OscConfig+0x288>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d1f0      	bne.n	8009c00 <HAL_RCC_OscConfig+0x10c>
 8009c1e:	e000      	b.n	8009c22 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f003 0302 	and.w	r3, r3, #2
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	f000 80ae 	beq.w	8009d8c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009c30:	4b52      	ldr	r3, [pc, #328]	; (8009d7c <HAL_RCC_OscConfig+0x288>)
 8009c32:	691b      	ldr	r3, [r3, #16]
 8009c34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c38:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009c3a:	4b50      	ldr	r3, [pc, #320]	; (8009d7c <HAL_RCC_OscConfig+0x288>)
 8009c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c3e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009c40:	6a3b      	ldr	r3, [r7, #32]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d007      	beq.n	8009c56 <HAL_RCC_OscConfig+0x162>
 8009c46:	6a3b      	ldr	r3, [r7, #32]
 8009c48:	2b18      	cmp	r3, #24
 8009c4a:	d13a      	bne.n	8009cc2 <HAL_RCC_OscConfig+0x1ce>
 8009c4c:	69fb      	ldr	r3, [r7, #28]
 8009c4e:	f003 0303 	and.w	r3, r3, #3
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d135      	bne.n	8009cc2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c56:	4b49      	ldr	r3, [pc, #292]	; (8009d7c <HAL_RCC_OscConfig+0x288>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f003 0304 	and.w	r3, r3, #4
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d005      	beq.n	8009c6e <HAL_RCC_OscConfig+0x17a>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	68db      	ldr	r3, [r3, #12]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d101      	bne.n	8009c6e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	e34b      	b.n	800a306 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c6e:	f7fa f9f7 	bl	8004060 <HAL_GetREVID>
 8009c72:	4603      	mov	r3, r0
 8009c74:	f241 0203 	movw	r2, #4099	; 0x1003
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d817      	bhi.n	8009cac <HAL_RCC_OscConfig+0x1b8>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	691b      	ldr	r3, [r3, #16]
 8009c80:	2b40      	cmp	r3, #64	; 0x40
 8009c82:	d108      	bne.n	8009c96 <HAL_RCC_OscConfig+0x1a2>
 8009c84:	4b3d      	ldr	r3, [pc, #244]	; (8009d7c <HAL_RCC_OscConfig+0x288>)
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009c8c:	4a3b      	ldr	r2, [pc, #236]	; (8009d7c <HAL_RCC_OscConfig+0x288>)
 8009c8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c92:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c94:	e07a      	b.n	8009d8c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c96:	4b39      	ldr	r3, [pc, #228]	; (8009d7c <HAL_RCC_OscConfig+0x288>)
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	691b      	ldr	r3, [r3, #16]
 8009ca2:	031b      	lsls	r3, r3, #12
 8009ca4:	4935      	ldr	r1, [pc, #212]	; (8009d7c <HAL_RCC_OscConfig+0x288>)
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009caa:	e06f      	b.n	8009d8c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009cac:	4b33      	ldr	r3, [pc, #204]	; (8009d7c <HAL_RCC_OscConfig+0x288>)
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	691b      	ldr	r3, [r3, #16]
 8009cb8:	061b      	lsls	r3, r3, #24
 8009cba:	4930      	ldr	r1, [pc, #192]	; (8009d7c <HAL_RCC_OscConfig+0x288>)
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009cc0:	e064      	b.n	8009d8c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	68db      	ldr	r3, [r3, #12]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d045      	beq.n	8009d56 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009cca:	4b2c      	ldr	r3, [pc, #176]	; (8009d7c <HAL_RCC_OscConfig+0x288>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f023 0219 	bic.w	r2, r3, #25
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	68db      	ldr	r3, [r3, #12]
 8009cd6:	4929      	ldr	r1, [pc, #164]	; (8009d7c <HAL_RCC_OscConfig+0x288>)
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cdc:	f7fa f990 	bl	8004000 <HAL_GetTick>
 8009ce0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009ce2:	e008      	b.n	8009cf6 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009ce4:	f7fa f98c 	bl	8004000 <HAL_GetTick>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cec:	1ad3      	subs	r3, r2, r3
 8009cee:	2b02      	cmp	r3, #2
 8009cf0:	d901      	bls.n	8009cf6 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8009cf2:	2303      	movs	r3, #3
 8009cf4:	e307      	b.n	800a306 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009cf6:	4b21      	ldr	r3, [pc, #132]	; (8009d7c <HAL_RCC_OscConfig+0x288>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f003 0304 	and.w	r3, r3, #4
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d0f0      	beq.n	8009ce4 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009d02:	f7fa f9ad 	bl	8004060 <HAL_GetREVID>
 8009d06:	4603      	mov	r3, r0
 8009d08:	f241 0203 	movw	r2, #4099	; 0x1003
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d817      	bhi.n	8009d40 <HAL_RCC_OscConfig+0x24c>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	691b      	ldr	r3, [r3, #16]
 8009d14:	2b40      	cmp	r3, #64	; 0x40
 8009d16:	d108      	bne.n	8009d2a <HAL_RCC_OscConfig+0x236>
 8009d18:	4b18      	ldr	r3, [pc, #96]	; (8009d7c <HAL_RCC_OscConfig+0x288>)
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009d20:	4a16      	ldr	r2, [pc, #88]	; (8009d7c <HAL_RCC_OscConfig+0x288>)
 8009d22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d26:	6053      	str	r3, [r2, #4]
 8009d28:	e030      	b.n	8009d8c <HAL_RCC_OscConfig+0x298>
 8009d2a:	4b14      	ldr	r3, [pc, #80]	; (8009d7c <HAL_RCC_OscConfig+0x288>)
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	691b      	ldr	r3, [r3, #16]
 8009d36:	031b      	lsls	r3, r3, #12
 8009d38:	4910      	ldr	r1, [pc, #64]	; (8009d7c <HAL_RCC_OscConfig+0x288>)
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	604b      	str	r3, [r1, #4]
 8009d3e:	e025      	b.n	8009d8c <HAL_RCC_OscConfig+0x298>
 8009d40:	4b0e      	ldr	r3, [pc, #56]	; (8009d7c <HAL_RCC_OscConfig+0x288>)
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	691b      	ldr	r3, [r3, #16]
 8009d4c:	061b      	lsls	r3, r3, #24
 8009d4e:	490b      	ldr	r1, [pc, #44]	; (8009d7c <HAL_RCC_OscConfig+0x288>)
 8009d50:	4313      	orrs	r3, r2
 8009d52:	604b      	str	r3, [r1, #4]
 8009d54:	e01a      	b.n	8009d8c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009d56:	4b09      	ldr	r3, [pc, #36]	; (8009d7c <HAL_RCC_OscConfig+0x288>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a08      	ldr	r2, [pc, #32]	; (8009d7c <HAL_RCC_OscConfig+0x288>)
 8009d5c:	f023 0301 	bic.w	r3, r3, #1
 8009d60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d62:	f7fa f94d 	bl	8004000 <HAL_GetTick>
 8009d66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009d68:	e00a      	b.n	8009d80 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009d6a:	f7fa f949 	bl	8004000 <HAL_GetTick>
 8009d6e:	4602      	mov	r2, r0
 8009d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d72:	1ad3      	subs	r3, r2, r3
 8009d74:	2b02      	cmp	r3, #2
 8009d76:	d903      	bls.n	8009d80 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8009d78:	2303      	movs	r3, #3
 8009d7a:	e2c4      	b.n	800a306 <HAL_RCC_OscConfig+0x812>
 8009d7c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009d80:	4ba4      	ldr	r3, [pc, #656]	; (800a014 <HAL_RCC_OscConfig+0x520>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f003 0304 	and.w	r3, r3, #4
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d1ee      	bne.n	8009d6a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f003 0310 	and.w	r3, r3, #16
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	f000 80a9 	beq.w	8009eec <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009d9a:	4b9e      	ldr	r3, [pc, #632]	; (800a014 <HAL_RCC_OscConfig+0x520>)
 8009d9c:	691b      	ldr	r3, [r3, #16]
 8009d9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009da2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009da4:	4b9b      	ldr	r3, [pc, #620]	; (800a014 <HAL_RCC_OscConfig+0x520>)
 8009da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009da8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009daa:	69bb      	ldr	r3, [r7, #24]
 8009dac:	2b08      	cmp	r3, #8
 8009dae:	d007      	beq.n	8009dc0 <HAL_RCC_OscConfig+0x2cc>
 8009db0:	69bb      	ldr	r3, [r7, #24]
 8009db2:	2b18      	cmp	r3, #24
 8009db4:	d13a      	bne.n	8009e2c <HAL_RCC_OscConfig+0x338>
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	f003 0303 	and.w	r3, r3, #3
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d135      	bne.n	8009e2c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009dc0:	4b94      	ldr	r3, [pc, #592]	; (800a014 <HAL_RCC_OscConfig+0x520>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d005      	beq.n	8009dd8 <HAL_RCC_OscConfig+0x2e4>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	69db      	ldr	r3, [r3, #28]
 8009dd0:	2b80      	cmp	r3, #128	; 0x80
 8009dd2:	d001      	beq.n	8009dd8 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	e296      	b.n	800a306 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009dd8:	f7fa f942 	bl	8004060 <HAL_GetREVID>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	f241 0203 	movw	r2, #4099	; 0x1003
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d817      	bhi.n	8009e16 <HAL_RCC_OscConfig+0x322>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6a1b      	ldr	r3, [r3, #32]
 8009dea:	2b20      	cmp	r3, #32
 8009dec:	d108      	bne.n	8009e00 <HAL_RCC_OscConfig+0x30c>
 8009dee:	4b89      	ldr	r3, [pc, #548]	; (800a014 <HAL_RCC_OscConfig+0x520>)
 8009df0:	685b      	ldr	r3, [r3, #4]
 8009df2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009df6:	4a87      	ldr	r2, [pc, #540]	; (800a014 <HAL_RCC_OscConfig+0x520>)
 8009df8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009dfc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009dfe:	e075      	b.n	8009eec <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009e00:	4b84      	ldr	r3, [pc, #528]	; (800a014 <HAL_RCC_OscConfig+0x520>)
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6a1b      	ldr	r3, [r3, #32]
 8009e0c:	069b      	lsls	r3, r3, #26
 8009e0e:	4981      	ldr	r1, [pc, #516]	; (800a014 <HAL_RCC_OscConfig+0x520>)
 8009e10:	4313      	orrs	r3, r2
 8009e12:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009e14:	e06a      	b.n	8009eec <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009e16:	4b7f      	ldr	r3, [pc, #508]	; (800a014 <HAL_RCC_OscConfig+0x520>)
 8009e18:	68db      	ldr	r3, [r3, #12]
 8009e1a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6a1b      	ldr	r3, [r3, #32]
 8009e22:	061b      	lsls	r3, r3, #24
 8009e24:	497b      	ldr	r1, [pc, #492]	; (800a014 <HAL_RCC_OscConfig+0x520>)
 8009e26:	4313      	orrs	r3, r2
 8009e28:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009e2a:	e05f      	b.n	8009eec <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	69db      	ldr	r3, [r3, #28]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d042      	beq.n	8009eba <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009e34:	4b77      	ldr	r3, [pc, #476]	; (800a014 <HAL_RCC_OscConfig+0x520>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4a76      	ldr	r2, [pc, #472]	; (800a014 <HAL_RCC_OscConfig+0x520>)
 8009e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e40:	f7fa f8de 	bl	8004000 <HAL_GetTick>
 8009e44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009e46:	e008      	b.n	8009e5a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009e48:	f7fa f8da 	bl	8004000 <HAL_GetTick>
 8009e4c:	4602      	mov	r2, r0
 8009e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e50:	1ad3      	subs	r3, r2, r3
 8009e52:	2b02      	cmp	r3, #2
 8009e54:	d901      	bls.n	8009e5a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8009e56:	2303      	movs	r3, #3
 8009e58:	e255      	b.n	800a306 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009e5a:	4b6e      	ldr	r3, [pc, #440]	; (800a014 <HAL_RCC_OscConfig+0x520>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d0f0      	beq.n	8009e48 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009e66:	f7fa f8fb 	bl	8004060 <HAL_GetREVID>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	f241 0203 	movw	r2, #4099	; 0x1003
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d817      	bhi.n	8009ea4 <HAL_RCC_OscConfig+0x3b0>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6a1b      	ldr	r3, [r3, #32]
 8009e78:	2b20      	cmp	r3, #32
 8009e7a:	d108      	bne.n	8009e8e <HAL_RCC_OscConfig+0x39a>
 8009e7c:	4b65      	ldr	r3, [pc, #404]	; (800a014 <HAL_RCC_OscConfig+0x520>)
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009e84:	4a63      	ldr	r2, [pc, #396]	; (800a014 <HAL_RCC_OscConfig+0x520>)
 8009e86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e8a:	6053      	str	r3, [r2, #4]
 8009e8c:	e02e      	b.n	8009eec <HAL_RCC_OscConfig+0x3f8>
 8009e8e:	4b61      	ldr	r3, [pc, #388]	; (800a014 <HAL_RCC_OscConfig+0x520>)
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6a1b      	ldr	r3, [r3, #32]
 8009e9a:	069b      	lsls	r3, r3, #26
 8009e9c:	495d      	ldr	r1, [pc, #372]	; (800a014 <HAL_RCC_OscConfig+0x520>)
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	604b      	str	r3, [r1, #4]
 8009ea2:	e023      	b.n	8009eec <HAL_RCC_OscConfig+0x3f8>
 8009ea4:	4b5b      	ldr	r3, [pc, #364]	; (800a014 <HAL_RCC_OscConfig+0x520>)
 8009ea6:	68db      	ldr	r3, [r3, #12]
 8009ea8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6a1b      	ldr	r3, [r3, #32]
 8009eb0:	061b      	lsls	r3, r3, #24
 8009eb2:	4958      	ldr	r1, [pc, #352]	; (800a014 <HAL_RCC_OscConfig+0x520>)
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	60cb      	str	r3, [r1, #12]
 8009eb8:	e018      	b.n	8009eec <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009eba:	4b56      	ldr	r3, [pc, #344]	; (800a014 <HAL_RCC_OscConfig+0x520>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4a55      	ldr	r2, [pc, #340]	; (800a014 <HAL_RCC_OscConfig+0x520>)
 8009ec0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ec4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ec6:	f7fa f89b 	bl	8004000 <HAL_GetTick>
 8009eca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009ecc:	e008      	b.n	8009ee0 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009ece:	f7fa f897 	bl	8004000 <HAL_GetTick>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed6:	1ad3      	subs	r3, r2, r3
 8009ed8:	2b02      	cmp	r3, #2
 8009eda:	d901      	bls.n	8009ee0 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8009edc:	2303      	movs	r3, #3
 8009ede:	e212      	b.n	800a306 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009ee0:	4b4c      	ldr	r3, [pc, #304]	; (800a014 <HAL_RCC_OscConfig+0x520>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d1f0      	bne.n	8009ece <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f003 0308 	and.w	r3, r3, #8
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d036      	beq.n	8009f66 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	695b      	ldr	r3, [r3, #20]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d019      	beq.n	8009f34 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009f00:	4b44      	ldr	r3, [pc, #272]	; (800a014 <HAL_RCC_OscConfig+0x520>)
 8009f02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f04:	4a43      	ldr	r2, [pc, #268]	; (800a014 <HAL_RCC_OscConfig+0x520>)
 8009f06:	f043 0301 	orr.w	r3, r3, #1
 8009f0a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f0c:	f7fa f878 	bl	8004000 <HAL_GetTick>
 8009f10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009f12:	e008      	b.n	8009f26 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009f14:	f7fa f874 	bl	8004000 <HAL_GetTick>
 8009f18:	4602      	mov	r2, r0
 8009f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f1c:	1ad3      	subs	r3, r2, r3
 8009f1e:	2b02      	cmp	r3, #2
 8009f20:	d901      	bls.n	8009f26 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8009f22:	2303      	movs	r3, #3
 8009f24:	e1ef      	b.n	800a306 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009f26:	4b3b      	ldr	r3, [pc, #236]	; (800a014 <HAL_RCC_OscConfig+0x520>)
 8009f28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f2a:	f003 0302 	and.w	r3, r3, #2
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d0f0      	beq.n	8009f14 <HAL_RCC_OscConfig+0x420>
 8009f32:	e018      	b.n	8009f66 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009f34:	4b37      	ldr	r3, [pc, #220]	; (800a014 <HAL_RCC_OscConfig+0x520>)
 8009f36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f38:	4a36      	ldr	r2, [pc, #216]	; (800a014 <HAL_RCC_OscConfig+0x520>)
 8009f3a:	f023 0301 	bic.w	r3, r3, #1
 8009f3e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f40:	f7fa f85e 	bl	8004000 <HAL_GetTick>
 8009f44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009f46:	e008      	b.n	8009f5a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009f48:	f7fa f85a 	bl	8004000 <HAL_GetTick>
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f50:	1ad3      	subs	r3, r2, r3
 8009f52:	2b02      	cmp	r3, #2
 8009f54:	d901      	bls.n	8009f5a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8009f56:	2303      	movs	r3, #3
 8009f58:	e1d5      	b.n	800a306 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009f5a:	4b2e      	ldr	r3, [pc, #184]	; (800a014 <HAL_RCC_OscConfig+0x520>)
 8009f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f5e:	f003 0302 	and.w	r3, r3, #2
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d1f0      	bne.n	8009f48 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f003 0320 	and.w	r3, r3, #32
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d036      	beq.n	8009fe0 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	699b      	ldr	r3, [r3, #24]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d019      	beq.n	8009fae <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009f7a:	4b26      	ldr	r3, [pc, #152]	; (800a014 <HAL_RCC_OscConfig+0x520>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	4a25      	ldr	r2, [pc, #148]	; (800a014 <HAL_RCC_OscConfig+0x520>)
 8009f80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009f84:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009f86:	f7fa f83b 	bl	8004000 <HAL_GetTick>
 8009f8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009f8c:	e008      	b.n	8009fa0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009f8e:	f7fa f837 	bl	8004000 <HAL_GetTick>
 8009f92:	4602      	mov	r2, r0
 8009f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f96:	1ad3      	subs	r3, r2, r3
 8009f98:	2b02      	cmp	r3, #2
 8009f9a:	d901      	bls.n	8009fa0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8009f9c:	2303      	movs	r3, #3
 8009f9e:	e1b2      	b.n	800a306 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009fa0:	4b1c      	ldr	r3, [pc, #112]	; (800a014 <HAL_RCC_OscConfig+0x520>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d0f0      	beq.n	8009f8e <HAL_RCC_OscConfig+0x49a>
 8009fac:	e018      	b.n	8009fe0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009fae:	4b19      	ldr	r3, [pc, #100]	; (800a014 <HAL_RCC_OscConfig+0x520>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4a18      	ldr	r2, [pc, #96]	; (800a014 <HAL_RCC_OscConfig+0x520>)
 8009fb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009fb8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009fba:	f7fa f821 	bl	8004000 <HAL_GetTick>
 8009fbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009fc0:	e008      	b.n	8009fd4 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009fc2:	f7fa f81d 	bl	8004000 <HAL_GetTick>
 8009fc6:	4602      	mov	r2, r0
 8009fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fca:	1ad3      	subs	r3, r2, r3
 8009fcc:	2b02      	cmp	r3, #2
 8009fce:	d901      	bls.n	8009fd4 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8009fd0:	2303      	movs	r3, #3
 8009fd2:	e198      	b.n	800a306 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009fd4:	4b0f      	ldr	r3, [pc, #60]	; (800a014 <HAL_RCC_OscConfig+0x520>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d1f0      	bne.n	8009fc2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f003 0304 	and.w	r3, r3, #4
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	f000 8085 	beq.w	800a0f8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009fee:	4b0a      	ldr	r3, [pc, #40]	; (800a018 <HAL_RCC_OscConfig+0x524>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4a09      	ldr	r2, [pc, #36]	; (800a018 <HAL_RCC_OscConfig+0x524>)
 8009ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ff8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009ffa:	f7fa f801 	bl	8004000 <HAL_GetTick>
 8009ffe:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a000:	e00c      	b.n	800a01c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a002:	f7f9 fffd 	bl	8004000 <HAL_GetTick>
 800a006:	4602      	mov	r2, r0
 800a008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00a:	1ad3      	subs	r3, r2, r3
 800a00c:	2b64      	cmp	r3, #100	; 0x64
 800a00e:	d905      	bls.n	800a01c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800a010:	2303      	movs	r3, #3
 800a012:	e178      	b.n	800a306 <HAL_RCC_OscConfig+0x812>
 800a014:	58024400 	.word	0x58024400
 800a018:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a01c:	4b96      	ldr	r3, [pc, #600]	; (800a278 <HAL_RCC_OscConfig+0x784>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a024:	2b00      	cmp	r3, #0
 800a026:	d0ec      	beq.n	800a002 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	689b      	ldr	r3, [r3, #8]
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d106      	bne.n	800a03e <HAL_RCC_OscConfig+0x54a>
 800a030:	4b92      	ldr	r3, [pc, #584]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a034:	4a91      	ldr	r2, [pc, #580]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a036:	f043 0301 	orr.w	r3, r3, #1
 800a03a:	6713      	str	r3, [r2, #112]	; 0x70
 800a03c:	e02d      	b.n	800a09a <HAL_RCC_OscConfig+0x5a6>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	689b      	ldr	r3, [r3, #8]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d10c      	bne.n	800a060 <HAL_RCC_OscConfig+0x56c>
 800a046:	4b8d      	ldr	r3, [pc, #564]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a04a:	4a8c      	ldr	r2, [pc, #560]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a04c:	f023 0301 	bic.w	r3, r3, #1
 800a050:	6713      	str	r3, [r2, #112]	; 0x70
 800a052:	4b8a      	ldr	r3, [pc, #552]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a056:	4a89      	ldr	r2, [pc, #548]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a058:	f023 0304 	bic.w	r3, r3, #4
 800a05c:	6713      	str	r3, [r2, #112]	; 0x70
 800a05e:	e01c      	b.n	800a09a <HAL_RCC_OscConfig+0x5a6>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	689b      	ldr	r3, [r3, #8]
 800a064:	2b05      	cmp	r3, #5
 800a066:	d10c      	bne.n	800a082 <HAL_RCC_OscConfig+0x58e>
 800a068:	4b84      	ldr	r3, [pc, #528]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a06a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a06c:	4a83      	ldr	r2, [pc, #524]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a06e:	f043 0304 	orr.w	r3, r3, #4
 800a072:	6713      	str	r3, [r2, #112]	; 0x70
 800a074:	4b81      	ldr	r3, [pc, #516]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a078:	4a80      	ldr	r2, [pc, #512]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a07a:	f043 0301 	orr.w	r3, r3, #1
 800a07e:	6713      	str	r3, [r2, #112]	; 0x70
 800a080:	e00b      	b.n	800a09a <HAL_RCC_OscConfig+0x5a6>
 800a082:	4b7e      	ldr	r3, [pc, #504]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a086:	4a7d      	ldr	r2, [pc, #500]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a088:	f023 0301 	bic.w	r3, r3, #1
 800a08c:	6713      	str	r3, [r2, #112]	; 0x70
 800a08e:	4b7b      	ldr	r3, [pc, #492]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a092:	4a7a      	ldr	r2, [pc, #488]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a094:	f023 0304 	bic.w	r3, r3, #4
 800a098:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d015      	beq.n	800a0ce <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0a2:	f7f9 ffad 	bl	8004000 <HAL_GetTick>
 800a0a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a0a8:	e00a      	b.n	800a0c0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a0aa:	f7f9 ffa9 	bl	8004000 <HAL_GetTick>
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b2:	1ad3      	subs	r3, r2, r3
 800a0b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d901      	bls.n	800a0c0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800a0bc:	2303      	movs	r3, #3
 800a0be:	e122      	b.n	800a306 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a0c0:	4b6e      	ldr	r3, [pc, #440]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a0c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0c4:	f003 0302 	and.w	r3, r3, #2
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d0ee      	beq.n	800a0aa <HAL_RCC_OscConfig+0x5b6>
 800a0cc:	e014      	b.n	800a0f8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0ce:	f7f9 ff97 	bl	8004000 <HAL_GetTick>
 800a0d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a0d4:	e00a      	b.n	800a0ec <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a0d6:	f7f9 ff93 	bl	8004000 <HAL_GetTick>
 800a0da:	4602      	mov	r2, r0
 800a0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0de:	1ad3      	subs	r3, r2, r3
 800a0e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d901      	bls.n	800a0ec <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800a0e8:	2303      	movs	r3, #3
 800a0ea:	e10c      	b.n	800a306 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a0ec:	4b63      	ldr	r3, [pc, #396]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a0ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0f0:	f003 0302 	and.w	r3, r3, #2
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d1ee      	bne.n	800a0d6 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	f000 8101 	beq.w	800a304 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a102:	4b5e      	ldr	r3, [pc, #376]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a104:	691b      	ldr	r3, [r3, #16]
 800a106:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a10a:	2b18      	cmp	r3, #24
 800a10c:	f000 80bc 	beq.w	800a288 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a114:	2b02      	cmp	r3, #2
 800a116:	f040 8095 	bne.w	800a244 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a11a:	4b58      	ldr	r3, [pc, #352]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	4a57      	ldr	r2, [pc, #348]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a120:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a124:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a126:	f7f9 ff6b 	bl	8004000 <HAL_GetTick>
 800a12a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a12c:	e008      	b.n	800a140 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a12e:	f7f9 ff67 	bl	8004000 <HAL_GetTick>
 800a132:	4602      	mov	r2, r0
 800a134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a136:	1ad3      	subs	r3, r2, r3
 800a138:	2b02      	cmp	r3, #2
 800a13a:	d901      	bls.n	800a140 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800a13c:	2303      	movs	r3, #3
 800a13e:	e0e2      	b.n	800a306 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a140:	4b4e      	ldr	r3, [pc, #312]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d1f0      	bne.n	800a12e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a14c:	4b4b      	ldr	r3, [pc, #300]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a14e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a150:	4b4b      	ldr	r3, [pc, #300]	; (800a280 <HAL_RCC_OscConfig+0x78c>)
 800a152:	4013      	ands	r3, r2
 800a154:	687a      	ldr	r2, [r7, #4]
 800a156:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a15c:	0112      	lsls	r2, r2, #4
 800a15e:	430a      	orrs	r2, r1
 800a160:	4946      	ldr	r1, [pc, #280]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a162:	4313      	orrs	r3, r2
 800a164:	628b      	str	r3, [r1, #40]	; 0x28
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a16a:	3b01      	subs	r3, #1
 800a16c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a174:	3b01      	subs	r3, #1
 800a176:	025b      	lsls	r3, r3, #9
 800a178:	b29b      	uxth	r3, r3
 800a17a:	431a      	orrs	r2, r3
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a180:	3b01      	subs	r3, #1
 800a182:	041b      	lsls	r3, r3, #16
 800a184:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a188:	431a      	orrs	r2, r3
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a18e:	3b01      	subs	r3, #1
 800a190:	061b      	lsls	r3, r3, #24
 800a192:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a196:	4939      	ldr	r1, [pc, #228]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a198:	4313      	orrs	r3, r2
 800a19a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800a19c:	4b37      	ldr	r3, [pc, #220]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a0:	4a36      	ldr	r2, [pc, #216]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a1a2:	f023 0301 	bic.w	r3, r3, #1
 800a1a6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a1a8:	4b34      	ldr	r3, [pc, #208]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a1aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1ac:	4b35      	ldr	r3, [pc, #212]	; (800a284 <HAL_RCC_OscConfig+0x790>)
 800a1ae:	4013      	ands	r3, r2
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a1b4:	00d2      	lsls	r2, r2, #3
 800a1b6:	4931      	ldr	r1, [pc, #196]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a1bc:	4b2f      	ldr	r3, [pc, #188]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a1be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c0:	f023 020c 	bic.w	r2, r3, #12
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c8:	492c      	ldr	r1, [pc, #176]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a1ce:	4b2b      	ldr	r3, [pc, #172]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a1d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d2:	f023 0202 	bic.w	r2, r3, #2
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1da:	4928      	ldr	r1, [pc, #160]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a1e0:	4b26      	ldr	r3, [pc, #152]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a1e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e4:	4a25      	ldr	r2, [pc, #148]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a1e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a1ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1ec:	4b23      	ldr	r3, [pc, #140]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1f0:	4a22      	ldr	r2, [pc, #136]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a1f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a1f8:	4b20      	ldr	r3, [pc, #128]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a1fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1fc:	4a1f      	ldr	r2, [pc, #124]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a1fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a202:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800a204:	4b1d      	ldr	r3, [pc, #116]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a208:	4a1c      	ldr	r2, [pc, #112]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a20a:	f043 0301 	orr.w	r3, r3, #1
 800a20e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a210:	4b1a      	ldr	r3, [pc, #104]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a19      	ldr	r2, [pc, #100]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a216:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a21a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a21c:	f7f9 fef0 	bl	8004000 <HAL_GetTick>
 800a220:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a222:	e008      	b.n	800a236 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a224:	f7f9 feec 	bl	8004000 <HAL_GetTick>
 800a228:	4602      	mov	r2, r0
 800a22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22c:	1ad3      	subs	r3, r2, r3
 800a22e:	2b02      	cmp	r3, #2
 800a230:	d901      	bls.n	800a236 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800a232:	2303      	movs	r3, #3
 800a234:	e067      	b.n	800a306 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a236:	4b11      	ldr	r3, [pc, #68]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d0f0      	beq.n	800a224 <HAL_RCC_OscConfig+0x730>
 800a242:	e05f      	b.n	800a304 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a244:	4b0d      	ldr	r3, [pc, #52]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4a0c      	ldr	r2, [pc, #48]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a24a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a24e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a250:	f7f9 fed6 	bl	8004000 <HAL_GetTick>
 800a254:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a256:	e008      	b.n	800a26a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a258:	f7f9 fed2 	bl	8004000 <HAL_GetTick>
 800a25c:	4602      	mov	r2, r0
 800a25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a260:	1ad3      	subs	r3, r2, r3
 800a262:	2b02      	cmp	r3, #2
 800a264:	d901      	bls.n	800a26a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800a266:	2303      	movs	r3, #3
 800a268:	e04d      	b.n	800a306 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a26a:	4b04      	ldr	r3, [pc, #16]	; (800a27c <HAL_RCC_OscConfig+0x788>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a272:	2b00      	cmp	r3, #0
 800a274:	d1f0      	bne.n	800a258 <HAL_RCC_OscConfig+0x764>
 800a276:	e045      	b.n	800a304 <HAL_RCC_OscConfig+0x810>
 800a278:	58024800 	.word	0x58024800
 800a27c:	58024400 	.word	0x58024400
 800a280:	fffffc0c 	.word	0xfffffc0c
 800a284:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a288:	4b21      	ldr	r3, [pc, #132]	; (800a310 <HAL_RCC_OscConfig+0x81c>)
 800a28a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a28c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a28e:	4b20      	ldr	r3, [pc, #128]	; (800a310 <HAL_RCC_OscConfig+0x81c>)
 800a290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a292:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d031      	beq.n	800a300 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	f003 0203 	and.w	r2, r3, #3
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d12a      	bne.n	800a300 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	091b      	lsrs	r3, r3, #4
 800a2ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d122      	bne.n	800a300 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2c4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d11a      	bne.n	800a300 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	0a5b      	lsrs	r3, r3, #9
 800a2ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2d6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	d111      	bne.n	800a300 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	0c1b      	lsrs	r3, r3, #16
 800a2e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d108      	bne.n	800a300 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	0e1b      	lsrs	r3, r3, #24
 800a2f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2fa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d001      	beq.n	800a304 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800a300:	2301      	movs	r3, #1
 800a302:	e000      	b.n	800a306 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800a304:	2300      	movs	r3, #0
}
 800a306:	4618      	mov	r0, r3
 800a308:	3730      	adds	r7, #48	; 0x30
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	bf00      	nop
 800a310:	58024400 	.word	0x58024400

0800a314 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b086      	sub	sp, #24
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d101      	bne.n	800a328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a324:	2301      	movs	r3, #1
 800a326:	e19c      	b.n	800a662 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a328:	4b8a      	ldr	r3, [pc, #552]	; (800a554 <HAL_RCC_ClockConfig+0x240>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f003 030f 	and.w	r3, r3, #15
 800a330:	683a      	ldr	r2, [r7, #0]
 800a332:	429a      	cmp	r2, r3
 800a334:	d910      	bls.n	800a358 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a336:	4b87      	ldr	r3, [pc, #540]	; (800a554 <HAL_RCC_ClockConfig+0x240>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f023 020f 	bic.w	r2, r3, #15
 800a33e:	4985      	ldr	r1, [pc, #532]	; (800a554 <HAL_RCC_ClockConfig+0x240>)
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	4313      	orrs	r3, r2
 800a344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a346:	4b83      	ldr	r3, [pc, #524]	; (800a554 <HAL_RCC_ClockConfig+0x240>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f003 030f 	and.w	r3, r3, #15
 800a34e:	683a      	ldr	r2, [r7, #0]
 800a350:	429a      	cmp	r2, r3
 800a352:	d001      	beq.n	800a358 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a354:	2301      	movs	r3, #1
 800a356:	e184      	b.n	800a662 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f003 0304 	and.w	r3, r3, #4
 800a360:	2b00      	cmp	r3, #0
 800a362:	d010      	beq.n	800a386 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	691a      	ldr	r2, [r3, #16]
 800a368:	4b7b      	ldr	r3, [pc, #492]	; (800a558 <HAL_RCC_ClockConfig+0x244>)
 800a36a:	699b      	ldr	r3, [r3, #24]
 800a36c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a370:	429a      	cmp	r2, r3
 800a372:	d908      	bls.n	800a386 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a374:	4b78      	ldr	r3, [pc, #480]	; (800a558 <HAL_RCC_ClockConfig+0x244>)
 800a376:	699b      	ldr	r3, [r3, #24]
 800a378:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	691b      	ldr	r3, [r3, #16]
 800a380:	4975      	ldr	r1, [pc, #468]	; (800a558 <HAL_RCC_ClockConfig+0x244>)
 800a382:	4313      	orrs	r3, r2
 800a384:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f003 0308 	and.w	r3, r3, #8
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d010      	beq.n	800a3b4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	695a      	ldr	r2, [r3, #20]
 800a396:	4b70      	ldr	r3, [pc, #448]	; (800a558 <HAL_RCC_ClockConfig+0x244>)
 800a398:	69db      	ldr	r3, [r3, #28]
 800a39a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a39e:	429a      	cmp	r2, r3
 800a3a0:	d908      	bls.n	800a3b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a3a2:	4b6d      	ldr	r3, [pc, #436]	; (800a558 <HAL_RCC_ClockConfig+0x244>)
 800a3a4:	69db      	ldr	r3, [r3, #28]
 800a3a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	695b      	ldr	r3, [r3, #20]
 800a3ae:	496a      	ldr	r1, [pc, #424]	; (800a558 <HAL_RCC_ClockConfig+0x244>)
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f003 0310 	and.w	r3, r3, #16
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d010      	beq.n	800a3e2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	699a      	ldr	r2, [r3, #24]
 800a3c4:	4b64      	ldr	r3, [pc, #400]	; (800a558 <HAL_RCC_ClockConfig+0x244>)
 800a3c6:	69db      	ldr	r3, [r3, #28]
 800a3c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d908      	bls.n	800a3e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a3d0:	4b61      	ldr	r3, [pc, #388]	; (800a558 <HAL_RCC_ClockConfig+0x244>)
 800a3d2:	69db      	ldr	r3, [r3, #28]
 800a3d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	699b      	ldr	r3, [r3, #24]
 800a3dc:	495e      	ldr	r1, [pc, #376]	; (800a558 <HAL_RCC_ClockConfig+0x244>)
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f003 0320 	and.w	r3, r3, #32
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d010      	beq.n	800a410 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	69da      	ldr	r2, [r3, #28]
 800a3f2:	4b59      	ldr	r3, [pc, #356]	; (800a558 <HAL_RCC_ClockConfig+0x244>)
 800a3f4:	6a1b      	ldr	r3, [r3, #32]
 800a3f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d908      	bls.n	800a410 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a3fe:	4b56      	ldr	r3, [pc, #344]	; (800a558 <HAL_RCC_ClockConfig+0x244>)
 800a400:	6a1b      	ldr	r3, [r3, #32]
 800a402:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	69db      	ldr	r3, [r3, #28]
 800a40a:	4953      	ldr	r1, [pc, #332]	; (800a558 <HAL_RCC_ClockConfig+0x244>)
 800a40c:	4313      	orrs	r3, r2
 800a40e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f003 0302 	and.w	r3, r3, #2
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d010      	beq.n	800a43e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	68da      	ldr	r2, [r3, #12]
 800a420:	4b4d      	ldr	r3, [pc, #308]	; (800a558 <HAL_RCC_ClockConfig+0x244>)
 800a422:	699b      	ldr	r3, [r3, #24]
 800a424:	f003 030f 	and.w	r3, r3, #15
 800a428:	429a      	cmp	r2, r3
 800a42a:	d908      	bls.n	800a43e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a42c:	4b4a      	ldr	r3, [pc, #296]	; (800a558 <HAL_RCC_ClockConfig+0x244>)
 800a42e:	699b      	ldr	r3, [r3, #24]
 800a430:	f023 020f 	bic.w	r2, r3, #15
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	68db      	ldr	r3, [r3, #12]
 800a438:	4947      	ldr	r1, [pc, #284]	; (800a558 <HAL_RCC_ClockConfig+0x244>)
 800a43a:	4313      	orrs	r3, r2
 800a43c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f003 0301 	and.w	r3, r3, #1
 800a446:	2b00      	cmp	r3, #0
 800a448:	d055      	beq.n	800a4f6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a44a:	4b43      	ldr	r3, [pc, #268]	; (800a558 <HAL_RCC_ClockConfig+0x244>)
 800a44c:	699b      	ldr	r3, [r3, #24]
 800a44e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	689b      	ldr	r3, [r3, #8]
 800a456:	4940      	ldr	r1, [pc, #256]	; (800a558 <HAL_RCC_ClockConfig+0x244>)
 800a458:	4313      	orrs	r3, r2
 800a45a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	2b02      	cmp	r3, #2
 800a462:	d107      	bne.n	800a474 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a464:	4b3c      	ldr	r3, [pc, #240]	; (800a558 <HAL_RCC_ClockConfig+0x244>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d121      	bne.n	800a4b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a470:	2301      	movs	r3, #1
 800a472:	e0f6      	b.n	800a662 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	685b      	ldr	r3, [r3, #4]
 800a478:	2b03      	cmp	r3, #3
 800a47a:	d107      	bne.n	800a48c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a47c:	4b36      	ldr	r3, [pc, #216]	; (800a558 <HAL_RCC_ClockConfig+0x244>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a484:	2b00      	cmp	r3, #0
 800a486:	d115      	bne.n	800a4b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a488:	2301      	movs	r3, #1
 800a48a:	e0ea      	b.n	800a662 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	2b01      	cmp	r3, #1
 800a492:	d107      	bne.n	800a4a4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a494:	4b30      	ldr	r3, [pc, #192]	; (800a558 <HAL_RCC_ClockConfig+0x244>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d109      	bne.n	800a4b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e0de      	b.n	800a662 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a4a4:	4b2c      	ldr	r3, [pc, #176]	; (800a558 <HAL_RCC_ClockConfig+0x244>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f003 0304 	and.w	r3, r3, #4
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d101      	bne.n	800a4b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	e0d6      	b.n	800a662 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a4b4:	4b28      	ldr	r3, [pc, #160]	; (800a558 <HAL_RCC_ClockConfig+0x244>)
 800a4b6:	691b      	ldr	r3, [r3, #16]
 800a4b8:	f023 0207 	bic.w	r2, r3, #7
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	4925      	ldr	r1, [pc, #148]	; (800a558 <HAL_RCC_ClockConfig+0x244>)
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4c6:	f7f9 fd9b 	bl	8004000 <HAL_GetTick>
 800a4ca:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a4cc:	e00a      	b.n	800a4e4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a4ce:	f7f9 fd97 	bl	8004000 <HAL_GetTick>
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	1ad3      	subs	r3, r2, r3
 800a4d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d901      	bls.n	800a4e4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a4e0:	2303      	movs	r3, #3
 800a4e2:	e0be      	b.n	800a662 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a4e4:	4b1c      	ldr	r3, [pc, #112]	; (800a558 <HAL_RCC_ClockConfig+0x244>)
 800a4e6:	691b      	ldr	r3, [r3, #16]
 800a4e8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	00db      	lsls	r3, r3, #3
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d1eb      	bne.n	800a4ce <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f003 0302 	and.w	r3, r3, #2
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d010      	beq.n	800a524 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	68da      	ldr	r2, [r3, #12]
 800a506:	4b14      	ldr	r3, [pc, #80]	; (800a558 <HAL_RCC_ClockConfig+0x244>)
 800a508:	699b      	ldr	r3, [r3, #24]
 800a50a:	f003 030f 	and.w	r3, r3, #15
 800a50e:	429a      	cmp	r2, r3
 800a510:	d208      	bcs.n	800a524 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a512:	4b11      	ldr	r3, [pc, #68]	; (800a558 <HAL_RCC_ClockConfig+0x244>)
 800a514:	699b      	ldr	r3, [r3, #24]
 800a516:	f023 020f 	bic.w	r2, r3, #15
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	68db      	ldr	r3, [r3, #12]
 800a51e:	490e      	ldr	r1, [pc, #56]	; (800a558 <HAL_RCC_ClockConfig+0x244>)
 800a520:	4313      	orrs	r3, r2
 800a522:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a524:	4b0b      	ldr	r3, [pc, #44]	; (800a554 <HAL_RCC_ClockConfig+0x240>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f003 030f 	and.w	r3, r3, #15
 800a52c:	683a      	ldr	r2, [r7, #0]
 800a52e:	429a      	cmp	r2, r3
 800a530:	d214      	bcs.n	800a55c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a532:	4b08      	ldr	r3, [pc, #32]	; (800a554 <HAL_RCC_ClockConfig+0x240>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f023 020f 	bic.w	r2, r3, #15
 800a53a:	4906      	ldr	r1, [pc, #24]	; (800a554 <HAL_RCC_ClockConfig+0x240>)
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	4313      	orrs	r3, r2
 800a540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a542:	4b04      	ldr	r3, [pc, #16]	; (800a554 <HAL_RCC_ClockConfig+0x240>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f003 030f 	and.w	r3, r3, #15
 800a54a:	683a      	ldr	r2, [r7, #0]
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d005      	beq.n	800a55c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a550:	2301      	movs	r3, #1
 800a552:	e086      	b.n	800a662 <HAL_RCC_ClockConfig+0x34e>
 800a554:	52002000 	.word	0x52002000
 800a558:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f003 0304 	and.w	r3, r3, #4
 800a564:	2b00      	cmp	r3, #0
 800a566:	d010      	beq.n	800a58a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	691a      	ldr	r2, [r3, #16]
 800a56c:	4b3f      	ldr	r3, [pc, #252]	; (800a66c <HAL_RCC_ClockConfig+0x358>)
 800a56e:	699b      	ldr	r3, [r3, #24]
 800a570:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a574:	429a      	cmp	r2, r3
 800a576:	d208      	bcs.n	800a58a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a578:	4b3c      	ldr	r3, [pc, #240]	; (800a66c <HAL_RCC_ClockConfig+0x358>)
 800a57a:	699b      	ldr	r3, [r3, #24]
 800a57c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	691b      	ldr	r3, [r3, #16]
 800a584:	4939      	ldr	r1, [pc, #228]	; (800a66c <HAL_RCC_ClockConfig+0x358>)
 800a586:	4313      	orrs	r3, r2
 800a588:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f003 0308 	and.w	r3, r3, #8
 800a592:	2b00      	cmp	r3, #0
 800a594:	d010      	beq.n	800a5b8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	695a      	ldr	r2, [r3, #20]
 800a59a:	4b34      	ldr	r3, [pc, #208]	; (800a66c <HAL_RCC_ClockConfig+0x358>)
 800a59c:	69db      	ldr	r3, [r3, #28]
 800a59e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d208      	bcs.n	800a5b8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a5a6:	4b31      	ldr	r3, [pc, #196]	; (800a66c <HAL_RCC_ClockConfig+0x358>)
 800a5a8:	69db      	ldr	r3, [r3, #28]
 800a5aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	695b      	ldr	r3, [r3, #20]
 800a5b2:	492e      	ldr	r1, [pc, #184]	; (800a66c <HAL_RCC_ClockConfig+0x358>)
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f003 0310 	and.w	r3, r3, #16
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d010      	beq.n	800a5e6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	699a      	ldr	r2, [r3, #24]
 800a5c8:	4b28      	ldr	r3, [pc, #160]	; (800a66c <HAL_RCC_ClockConfig+0x358>)
 800a5ca:	69db      	ldr	r3, [r3, #28]
 800a5cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d208      	bcs.n	800a5e6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a5d4:	4b25      	ldr	r3, [pc, #148]	; (800a66c <HAL_RCC_ClockConfig+0x358>)
 800a5d6:	69db      	ldr	r3, [r3, #28]
 800a5d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	699b      	ldr	r3, [r3, #24]
 800a5e0:	4922      	ldr	r1, [pc, #136]	; (800a66c <HAL_RCC_ClockConfig+0x358>)
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f003 0320 	and.w	r3, r3, #32
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d010      	beq.n	800a614 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	69da      	ldr	r2, [r3, #28]
 800a5f6:	4b1d      	ldr	r3, [pc, #116]	; (800a66c <HAL_RCC_ClockConfig+0x358>)
 800a5f8:	6a1b      	ldr	r3, [r3, #32]
 800a5fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d208      	bcs.n	800a614 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a602:	4b1a      	ldr	r3, [pc, #104]	; (800a66c <HAL_RCC_ClockConfig+0x358>)
 800a604:	6a1b      	ldr	r3, [r3, #32]
 800a606:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	69db      	ldr	r3, [r3, #28]
 800a60e:	4917      	ldr	r1, [pc, #92]	; (800a66c <HAL_RCC_ClockConfig+0x358>)
 800a610:	4313      	orrs	r3, r2
 800a612:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a614:	f000 f834 	bl	800a680 <HAL_RCC_GetSysClockFreq>
 800a618:	4602      	mov	r2, r0
 800a61a:	4b14      	ldr	r3, [pc, #80]	; (800a66c <HAL_RCC_ClockConfig+0x358>)
 800a61c:	699b      	ldr	r3, [r3, #24]
 800a61e:	0a1b      	lsrs	r3, r3, #8
 800a620:	f003 030f 	and.w	r3, r3, #15
 800a624:	4912      	ldr	r1, [pc, #72]	; (800a670 <HAL_RCC_ClockConfig+0x35c>)
 800a626:	5ccb      	ldrb	r3, [r1, r3]
 800a628:	f003 031f 	and.w	r3, r3, #31
 800a62c:	fa22 f303 	lsr.w	r3, r2, r3
 800a630:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a632:	4b0e      	ldr	r3, [pc, #56]	; (800a66c <HAL_RCC_ClockConfig+0x358>)
 800a634:	699b      	ldr	r3, [r3, #24]
 800a636:	f003 030f 	and.w	r3, r3, #15
 800a63a:	4a0d      	ldr	r2, [pc, #52]	; (800a670 <HAL_RCC_ClockConfig+0x35c>)
 800a63c:	5cd3      	ldrb	r3, [r2, r3]
 800a63e:	f003 031f 	and.w	r3, r3, #31
 800a642:	693a      	ldr	r2, [r7, #16]
 800a644:	fa22 f303 	lsr.w	r3, r2, r3
 800a648:	4a0a      	ldr	r2, [pc, #40]	; (800a674 <HAL_RCC_ClockConfig+0x360>)
 800a64a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a64c:	4a0a      	ldr	r2, [pc, #40]	; (800a678 <HAL_RCC_ClockConfig+0x364>)
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800a652:	4b0a      	ldr	r3, [pc, #40]	; (800a67c <HAL_RCC_ClockConfig+0x368>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4618      	mov	r0, r3
 800a658:	f7f9 fc88 	bl	8003f6c <HAL_InitTick>
 800a65c:	4603      	mov	r3, r0
 800a65e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a660:	7bfb      	ldrb	r3, [r7, #15]
}
 800a662:	4618      	mov	r0, r3
 800a664:	3718      	adds	r7, #24
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	bf00      	nop
 800a66c:	58024400 	.word	0x58024400
 800a670:	08028adc 	.word	0x08028adc
 800a674:	24000404 	.word	0x24000404
 800a678:	24000400 	.word	0x24000400
 800a67c:	24000408 	.word	0x24000408

0800a680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a680:	b480      	push	{r7}
 800a682:	b089      	sub	sp, #36	; 0x24
 800a684:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a686:	4bb3      	ldr	r3, [pc, #716]	; (800a954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a688:	691b      	ldr	r3, [r3, #16]
 800a68a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a68e:	2b18      	cmp	r3, #24
 800a690:	f200 8155 	bhi.w	800a93e <HAL_RCC_GetSysClockFreq+0x2be>
 800a694:	a201      	add	r2, pc, #4	; (adr r2, 800a69c <HAL_RCC_GetSysClockFreq+0x1c>)
 800a696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a69a:	bf00      	nop
 800a69c:	0800a701 	.word	0x0800a701
 800a6a0:	0800a93f 	.word	0x0800a93f
 800a6a4:	0800a93f 	.word	0x0800a93f
 800a6a8:	0800a93f 	.word	0x0800a93f
 800a6ac:	0800a93f 	.word	0x0800a93f
 800a6b0:	0800a93f 	.word	0x0800a93f
 800a6b4:	0800a93f 	.word	0x0800a93f
 800a6b8:	0800a93f 	.word	0x0800a93f
 800a6bc:	0800a727 	.word	0x0800a727
 800a6c0:	0800a93f 	.word	0x0800a93f
 800a6c4:	0800a93f 	.word	0x0800a93f
 800a6c8:	0800a93f 	.word	0x0800a93f
 800a6cc:	0800a93f 	.word	0x0800a93f
 800a6d0:	0800a93f 	.word	0x0800a93f
 800a6d4:	0800a93f 	.word	0x0800a93f
 800a6d8:	0800a93f 	.word	0x0800a93f
 800a6dc:	0800a72d 	.word	0x0800a72d
 800a6e0:	0800a93f 	.word	0x0800a93f
 800a6e4:	0800a93f 	.word	0x0800a93f
 800a6e8:	0800a93f 	.word	0x0800a93f
 800a6ec:	0800a93f 	.word	0x0800a93f
 800a6f0:	0800a93f 	.word	0x0800a93f
 800a6f4:	0800a93f 	.word	0x0800a93f
 800a6f8:	0800a93f 	.word	0x0800a93f
 800a6fc:	0800a733 	.word	0x0800a733
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a700:	4b94      	ldr	r3, [pc, #592]	; (800a954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f003 0320 	and.w	r3, r3, #32
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d009      	beq.n	800a720 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a70c:	4b91      	ldr	r3, [pc, #580]	; (800a954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	08db      	lsrs	r3, r3, #3
 800a712:	f003 0303 	and.w	r3, r3, #3
 800a716:	4a90      	ldr	r2, [pc, #576]	; (800a958 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a718:	fa22 f303 	lsr.w	r3, r2, r3
 800a71c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800a71e:	e111      	b.n	800a944 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a720:	4b8d      	ldr	r3, [pc, #564]	; (800a958 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a722:	61bb      	str	r3, [r7, #24]
    break;
 800a724:	e10e      	b.n	800a944 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800a726:	4b8d      	ldr	r3, [pc, #564]	; (800a95c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a728:	61bb      	str	r3, [r7, #24]
    break;
 800a72a:	e10b      	b.n	800a944 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800a72c:	4b8c      	ldr	r3, [pc, #560]	; (800a960 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a72e:	61bb      	str	r3, [r7, #24]
    break;
 800a730:	e108      	b.n	800a944 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a732:	4b88      	ldr	r3, [pc, #544]	; (800a954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a736:	f003 0303 	and.w	r3, r3, #3
 800a73a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800a73c:	4b85      	ldr	r3, [pc, #532]	; (800a954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a73e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a740:	091b      	lsrs	r3, r3, #4
 800a742:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a746:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a748:	4b82      	ldr	r3, [pc, #520]	; (800a954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a74c:	f003 0301 	and.w	r3, r3, #1
 800a750:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a752:	4b80      	ldr	r3, [pc, #512]	; (800a954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a756:	08db      	lsrs	r3, r3, #3
 800a758:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a75c:	68fa      	ldr	r2, [r7, #12]
 800a75e:	fb02 f303 	mul.w	r3, r2, r3
 800a762:	ee07 3a90 	vmov	s15, r3
 800a766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a76a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	2b00      	cmp	r3, #0
 800a772:	f000 80e1 	beq.w	800a938 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	2b02      	cmp	r3, #2
 800a77a:	f000 8083 	beq.w	800a884 <HAL_RCC_GetSysClockFreq+0x204>
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	2b02      	cmp	r3, #2
 800a782:	f200 80a1 	bhi.w	800a8c8 <HAL_RCC_GetSysClockFreq+0x248>
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d003      	beq.n	800a794 <HAL_RCC_GetSysClockFreq+0x114>
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	2b01      	cmp	r3, #1
 800a790:	d056      	beq.n	800a840 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a792:	e099      	b.n	800a8c8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a794:	4b6f      	ldr	r3, [pc, #444]	; (800a954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f003 0320 	and.w	r3, r3, #32
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d02d      	beq.n	800a7fc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a7a0:	4b6c      	ldr	r3, [pc, #432]	; (800a954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	08db      	lsrs	r3, r3, #3
 800a7a6:	f003 0303 	and.w	r3, r3, #3
 800a7aa:	4a6b      	ldr	r2, [pc, #428]	; (800a958 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a7ac:	fa22 f303 	lsr.w	r3, r2, r3
 800a7b0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	ee07 3a90 	vmov	s15, r3
 800a7b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	ee07 3a90 	vmov	s15, r3
 800a7c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7ca:	4b62      	ldr	r3, [pc, #392]	; (800a954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7d2:	ee07 3a90 	vmov	s15, r3
 800a7d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7da:	ed97 6a02 	vldr	s12, [r7, #8]
 800a7de:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a964 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a7e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800a7fa:	e087      	b.n	800a90c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	ee07 3a90 	vmov	s15, r3
 800a802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a806:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a968 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a80a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a80e:	4b51      	ldr	r3, [pc, #324]	; (800a954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a816:	ee07 3a90 	vmov	s15, r3
 800a81a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a81e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a822:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a964 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a82a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a82e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a83a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a83e:	e065      	b.n	800a90c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	ee07 3a90 	vmov	s15, r3
 800a846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a84a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a96c <HAL_RCC_GetSysClockFreq+0x2ec>
 800a84e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a852:	4b40      	ldr	r3, [pc, #256]	; (800a954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a85a:	ee07 3a90 	vmov	s15, r3
 800a85e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a862:	ed97 6a02 	vldr	s12, [r7, #8]
 800a866:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a964 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a86a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a86e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a87a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a87e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a882:	e043      	b.n	800a90c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	ee07 3a90 	vmov	s15, r3
 800a88a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a88e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a970 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a896:	4b2f      	ldr	r3, [pc, #188]	; (800a954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a89a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a89e:	ee07 3a90 	vmov	s15, r3
 800a8a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8a6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a8aa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a964 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a8ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a8c6:	e021      	b.n	800a90c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	ee07 3a90 	vmov	s15, r3
 800a8ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8d2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a96c <HAL_RCC_GetSysClockFreq+0x2ec>
 800a8d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8da:	4b1e      	ldr	r3, [pc, #120]	; (800a954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8e2:	ee07 3a90 	vmov	s15, r3
 800a8e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8ea:	ed97 6a02 	vldr	s12, [r7, #8]
 800a8ee:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a964 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a8f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a902:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a906:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a90a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800a90c:	4b11      	ldr	r3, [pc, #68]	; (800a954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a90e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a910:	0a5b      	lsrs	r3, r3, #9
 800a912:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a916:	3301      	adds	r3, #1
 800a918:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	ee07 3a90 	vmov	s15, r3
 800a920:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a924:	edd7 6a07 	vldr	s13, [r7, #28]
 800a928:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a92c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a930:	ee17 3a90 	vmov	r3, s15
 800a934:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800a936:	e005      	b.n	800a944 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800a938:	2300      	movs	r3, #0
 800a93a:	61bb      	str	r3, [r7, #24]
    break;
 800a93c:	e002      	b.n	800a944 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800a93e:	4b07      	ldr	r3, [pc, #28]	; (800a95c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a940:	61bb      	str	r3, [r7, #24]
    break;
 800a942:	bf00      	nop
  }

  return sysclockfreq;
 800a944:	69bb      	ldr	r3, [r7, #24]
}
 800a946:	4618      	mov	r0, r3
 800a948:	3724      	adds	r7, #36	; 0x24
 800a94a:	46bd      	mov	sp, r7
 800a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a950:	4770      	bx	lr
 800a952:	bf00      	nop
 800a954:	58024400 	.word	0x58024400
 800a958:	03d09000 	.word	0x03d09000
 800a95c:	003d0900 	.word	0x003d0900
 800a960:	017d7840 	.word	0x017d7840
 800a964:	46000000 	.word	0x46000000
 800a968:	4c742400 	.word	0x4c742400
 800a96c:	4a742400 	.word	0x4a742400
 800a970:	4bbebc20 	.word	0x4bbebc20

0800a974 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b082      	sub	sp, #8
 800a978:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a97a:	f7ff fe81 	bl	800a680 <HAL_RCC_GetSysClockFreq>
 800a97e:	4602      	mov	r2, r0
 800a980:	4b10      	ldr	r3, [pc, #64]	; (800a9c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800a982:	699b      	ldr	r3, [r3, #24]
 800a984:	0a1b      	lsrs	r3, r3, #8
 800a986:	f003 030f 	and.w	r3, r3, #15
 800a98a:	490f      	ldr	r1, [pc, #60]	; (800a9c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800a98c:	5ccb      	ldrb	r3, [r1, r3]
 800a98e:	f003 031f 	and.w	r3, r3, #31
 800a992:	fa22 f303 	lsr.w	r3, r2, r3
 800a996:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a998:	4b0a      	ldr	r3, [pc, #40]	; (800a9c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800a99a:	699b      	ldr	r3, [r3, #24]
 800a99c:	f003 030f 	and.w	r3, r3, #15
 800a9a0:	4a09      	ldr	r2, [pc, #36]	; (800a9c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800a9a2:	5cd3      	ldrb	r3, [r2, r3]
 800a9a4:	f003 031f 	and.w	r3, r3, #31
 800a9a8:	687a      	ldr	r2, [r7, #4]
 800a9aa:	fa22 f303 	lsr.w	r3, r2, r3
 800a9ae:	4a07      	ldr	r2, [pc, #28]	; (800a9cc <HAL_RCC_GetHCLKFreq+0x58>)
 800a9b0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a9b2:	4a07      	ldr	r2, [pc, #28]	; (800a9d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a9b8:	4b04      	ldr	r3, [pc, #16]	; (800a9cc <HAL_RCC_GetHCLKFreq+0x58>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3708      	adds	r7, #8
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}
 800a9c4:	58024400 	.word	0x58024400
 800a9c8:	08028adc 	.word	0x08028adc
 800a9cc:	24000404 	.word	0x24000404
 800a9d0:	24000400 	.word	0x24000400

0800a9d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a9d8:	f7ff ffcc 	bl	800a974 <HAL_RCC_GetHCLKFreq>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	4b06      	ldr	r3, [pc, #24]	; (800a9f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a9e0:	69db      	ldr	r3, [r3, #28]
 800a9e2:	091b      	lsrs	r3, r3, #4
 800a9e4:	f003 0307 	and.w	r3, r3, #7
 800a9e8:	4904      	ldr	r1, [pc, #16]	; (800a9fc <HAL_RCC_GetPCLK1Freq+0x28>)
 800a9ea:	5ccb      	ldrb	r3, [r1, r3]
 800a9ec:	f003 031f 	and.w	r3, r3, #31
 800a9f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	bd80      	pop	{r7, pc}
 800a9f8:	58024400 	.word	0x58024400
 800a9fc:	08028adc 	.word	0x08028adc

0800aa00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800aa04:	f7ff ffb6 	bl	800a974 <HAL_RCC_GetHCLKFreq>
 800aa08:	4602      	mov	r2, r0
 800aa0a:	4b06      	ldr	r3, [pc, #24]	; (800aa24 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aa0c:	69db      	ldr	r3, [r3, #28]
 800aa0e:	0a1b      	lsrs	r3, r3, #8
 800aa10:	f003 0307 	and.w	r3, r3, #7
 800aa14:	4904      	ldr	r1, [pc, #16]	; (800aa28 <HAL_RCC_GetPCLK2Freq+0x28>)
 800aa16:	5ccb      	ldrb	r3, [r1, r3]
 800aa18:	f003 031f 	and.w	r3, r3, #31
 800aa1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	bd80      	pop	{r7, pc}
 800aa24:	58024400 	.word	0x58024400
 800aa28:	08028adc 	.word	0x08028adc

0800aa2c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b086      	sub	sp, #24
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800aa34:	2300      	movs	r3, #0
 800aa36:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800aa38:	2300      	movs	r3, #0
 800aa3a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d03f      	beq.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa4c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aa50:	d02a      	beq.n	800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800aa52:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aa56:	d824      	bhi.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800aa58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa5c:	d018      	beq.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800aa5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa62:	d81e      	bhi.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d003      	beq.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800aa68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa6c:	d007      	beq.n	800aa7e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800aa6e:	e018      	b.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa70:	4bab      	ldr	r3, [pc, #684]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aa72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa74:	4aaa      	ldr	r2, [pc, #680]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aa76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800aa7c:	e015      	b.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	3304      	adds	r3, #4
 800aa82:	2102      	movs	r1, #2
 800aa84:	4618      	mov	r0, r3
 800aa86:	f001 fff3 	bl	800ca70 <RCCEx_PLL2_Config>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800aa8e:	e00c      	b.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	3324      	adds	r3, #36	; 0x24
 800aa94:	2102      	movs	r1, #2
 800aa96:	4618      	mov	r0, r3
 800aa98:	f002 f89c 	bl	800cbd4 <RCCEx_PLL3_Config>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800aaa0:	e003      	b.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	75fb      	strb	r3, [r7, #23]
      break;
 800aaa6:	e000      	b.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800aaa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aaaa:	7dfb      	ldrb	r3, [r7, #23]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d109      	bne.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800aab0:	4b9b      	ldr	r3, [pc, #620]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aab4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aabc:	4998      	ldr	r1, [pc, #608]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aabe:	4313      	orrs	r3, r2
 800aac0:	650b      	str	r3, [r1, #80]	; 0x50
 800aac2:	e001      	b.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aac4:	7dfb      	ldrb	r3, [r7, #23]
 800aac6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d03d      	beq.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aad8:	2b04      	cmp	r3, #4
 800aada:	d826      	bhi.n	800ab2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800aadc:	a201      	add	r2, pc, #4	; (adr r2, 800aae4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800aade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aae2:	bf00      	nop
 800aae4:	0800aaf9 	.word	0x0800aaf9
 800aae8:	0800ab07 	.word	0x0800ab07
 800aaec:	0800ab19 	.word	0x0800ab19
 800aaf0:	0800ab31 	.word	0x0800ab31
 800aaf4:	0800ab31 	.word	0x0800ab31
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aaf8:	4b89      	ldr	r3, [pc, #548]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aafa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aafc:	4a88      	ldr	r2, [pc, #544]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aafe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ab04:	e015      	b.n	800ab32 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	3304      	adds	r3, #4
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f001 ffaf 	bl	800ca70 <RCCEx_PLL2_Config>
 800ab12:	4603      	mov	r3, r0
 800ab14:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ab16:	e00c      	b.n	800ab32 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	3324      	adds	r3, #36	; 0x24
 800ab1c:	2100      	movs	r1, #0
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f002 f858 	bl	800cbd4 <RCCEx_PLL3_Config>
 800ab24:	4603      	mov	r3, r0
 800ab26:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ab28:	e003      	b.n	800ab32 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	75fb      	strb	r3, [r7, #23]
      break;
 800ab2e:	e000      	b.n	800ab32 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800ab30:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab32:	7dfb      	ldrb	r3, [r7, #23]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d109      	bne.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ab38:	4b79      	ldr	r3, [pc, #484]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ab3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab3c:	f023 0207 	bic.w	r2, r3, #7
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab44:	4976      	ldr	r1, [pc, #472]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ab46:	4313      	orrs	r3, r2
 800ab48:	650b      	str	r3, [r1, #80]	; 0x50
 800ab4a:	e001      	b.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab4c:	7dfb      	ldrb	r3, [r7, #23]
 800ab4e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d042      	beq.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab64:	d02b      	beq.n	800abbe <HAL_RCCEx_PeriphCLKConfig+0x192>
 800ab66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab6a:	d825      	bhi.n	800abb8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800ab6c:	2bc0      	cmp	r3, #192	; 0xc0
 800ab6e:	d028      	beq.n	800abc2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800ab70:	2bc0      	cmp	r3, #192	; 0xc0
 800ab72:	d821      	bhi.n	800abb8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800ab74:	2b80      	cmp	r3, #128	; 0x80
 800ab76:	d016      	beq.n	800aba6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800ab78:	2b80      	cmp	r3, #128	; 0x80
 800ab7a:	d81d      	bhi.n	800abb8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d002      	beq.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800ab80:	2b40      	cmp	r3, #64	; 0x40
 800ab82:	d007      	beq.n	800ab94 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800ab84:	e018      	b.n	800abb8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab86:	4b66      	ldr	r3, [pc, #408]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ab88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab8a:	4a65      	ldr	r2, [pc, #404]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ab8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800ab92:	e017      	b.n	800abc4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	3304      	adds	r3, #4
 800ab98:	2100      	movs	r1, #0
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f001 ff68 	bl	800ca70 <RCCEx_PLL2_Config>
 800aba0:	4603      	mov	r3, r0
 800aba2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800aba4:	e00e      	b.n	800abc4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	3324      	adds	r3, #36	; 0x24
 800abaa:	2100      	movs	r1, #0
 800abac:	4618      	mov	r0, r3
 800abae:	f002 f811 	bl	800cbd4 <RCCEx_PLL3_Config>
 800abb2:	4603      	mov	r3, r0
 800abb4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800abb6:	e005      	b.n	800abc4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800abb8:	2301      	movs	r3, #1
 800abba:	75fb      	strb	r3, [r7, #23]
      break;
 800abbc:	e002      	b.n	800abc4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800abbe:	bf00      	nop
 800abc0:	e000      	b.n	800abc4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800abc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800abc4:	7dfb      	ldrb	r3, [r7, #23]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d109      	bne.n	800abde <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800abca:	4b55      	ldr	r3, [pc, #340]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800abcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abce:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abd6:	4952      	ldr	r1, [pc, #328]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800abd8:	4313      	orrs	r3, r2
 800abda:	650b      	str	r3, [r1, #80]	; 0x50
 800abdc:	e001      	b.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abde:	7dfb      	ldrb	r3, [r7, #23]
 800abe0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800abea:	2b00      	cmp	r3, #0
 800abec:	d049      	beq.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800abf4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800abf8:	d030      	beq.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800abfa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800abfe:	d82a      	bhi.n	800ac56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800ac00:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ac04:	d02c      	beq.n	800ac60 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800ac06:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ac0a:	d824      	bhi.n	800ac56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800ac0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac10:	d018      	beq.n	800ac44 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800ac12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac16:	d81e      	bhi.n	800ac56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d003      	beq.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800ac1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac20:	d007      	beq.n	800ac32 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800ac22:	e018      	b.n	800ac56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac24:	4b3e      	ldr	r3, [pc, #248]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ac26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac28:	4a3d      	ldr	r2, [pc, #244]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ac2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ac30:	e017      	b.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	3304      	adds	r3, #4
 800ac36:	2100      	movs	r1, #0
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f001 ff19 	bl	800ca70 <RCCEx_PLL2_Config>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800ac42:	e00e      	b.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	3324      	adds	r3, #36	; 0x24
 800ac48:	2100      	movs	r1, #0
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f001 ffc2 	bl	800cbd4 <RCCEx_PLL3_Config>
 800ac50:	4603      	mov	r3, r0
 800ac52:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ac54:	e005      	b.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800ac56:	2301      	movs	r3, #1
 800ac58:	75fb      	strb	r3, [r7, #23]
      break;
 800ac5a:	e002      	b.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800ac5c:	bf00      	nop
 800ac5e:	e000      	b.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800ac60:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac62:	7dfb      	ldrb	r3, [r7, #23]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d10a      	bne.n	800ac7e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ac68:	4b2d      	ldr	r3, [pc, #180]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ac6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac6c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ac76:	492a      	ldr	r1, [pc, #168]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	658b      	str	r3, [r1, #88]	; 0x58
 800ac7c:	e001      	b.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac7e:	7dfb      	ldrb	r3, [r7, #23]
 800ac80:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d04c      	beq.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ac94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ac98:	d030      	beq.n	800acfc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800ac9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ac9e:	d82a      	bhi.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800aca0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aca4:	d02c      	beq.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800aca6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800acaa:	d824      	bhi.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800acac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800acb0:	d018      	beq.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800acb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800acb6:	d81e      	bhi.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d003      	beq.n	800acc4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800acbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800acc0:	d007      	beq.n	800acd2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800acc2:	e018      	b.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acc4:	4b16      	ldr	r3, [pc, #88]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800acc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acc8:	4a15      	ldr	r2, [pc, #84]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800acca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800acd0:	e017      	b.n	800ad02 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	3304      	adds	r3, #4
 800acd6:	2100      	movs	r1, #0
 800acd8:	4618      	mov	r0, r3
 800acda:	f001 fec9 	bl	800ca70 <RCCEx_PLL2_Config>
 800acde:	4603      	mov	r3, r0
 800ace0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800ace2:	e00e      	b.n	800ad02 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	3324      	adds	r3, #36	; 0x24
 800ace8:	2100      	movs	r1, #0
 800acea:	4618      	mov	r0, r3
 800acec:	f001 ff72 	bl	800cbd4 <RCCEx_PLL3_Config>
 800acf0:	4603      	mov	r3, r0
 800acf2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800acf4:	e005      	b.n	800ad02 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800acf6:	2301      	movs	r3, #1
 800acf8:	75fb      	strb	r3, [r7, #23]
      break;
 800acfa:	e002      	b.n	800ad02 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800acfc:	bf00      	nop
 800acfe:	e000      	b.n	800ad02 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800ad00:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad02:	7dfb      	ldrb	r3, [r7, #23]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d10d      	bne.n	800ad24 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ad08:	4b05      	ldr	r3, [pc, #20]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ad0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad0c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ad16:	4902      	ldr	r1, [pc, #8]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	658b      	str	r3, [r1, #88]	; 0x58
 800ad1c:	e004      	b.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800ad1e:	bf00      	nop
 800ad20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad24:	7dfb      	ldrb	r3, [r7, #23]
 800ad26:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d032      	beq.n	800ad9a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad38:	2b30      	cmp	r3, #48	; 0x30
 800ad3a:	d01c      	beq.n	800ad76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800ad3c:	2b30      	cmp	r3, #48	; 0x30
 800ad3e:	d817      	bhi.n	800ad70 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800ad40:	2b20      	cmp	r3, #32
 800ad42:	d00c      	beq.n	800ad5e <HAL_RCCEx_PeriphCLKConfig+0x332>
 800ad44:	2b20      	cmp	r3, #32
 800ad46:	d813      	bhi.n	800ad70 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d016      	beq.n	800ad7a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800ad4c:	2b10      	cmp	r3, #16
 800ad4e:	d10f      	bne.n	800ad70 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad50:	4baf      	ldr	r3, [pc, #700]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ad52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad54:	4aae      	ldr	r2, [pc, #696]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ad56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800ad5c:	e00e      	b.n	800ad7c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	3304      	adds	r3, #4
 800ad62:	2102      	movs	r1, #2
 800ad64:	4618      	mov	r0, r3
 800ad66:	f001 fe83 	bl	800ca70 <RCCEx_PLL2_Config>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800ad6e:	e005      	b.n	800ad7c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800ad70:	2301      	movs	r3, #1
 800ad72:	75fb      	strb	r3, [r7, #23]
      break;
 800ad74:	e002      	b.n	800ad7c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800ad76:	bf00      	nop
 800ad78:	e000      	b.n	800ad7c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800ad7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad7c:	7dfb      	ldrb	r3, [r7, #23]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d109      	bne.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ad82:	4ba3      	ldr	r3, [pc, #652]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ad84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad86:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad8e:	49a0      	ldr	r1, [pc, #640]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ad90:	4313      	orrs	r3, r2
 800ad92:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ad94:	e001      	b.n	800ad9a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad96:	7dfb      	ldrb	r3, [r7, #23]
 800ad98:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d047      	beq.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800adaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800adae:	d030      	beq.n	800ae12 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800adb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800adb4:	d82a      	bhi.n	800ae0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800adb6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800adba:	d02c      	beq.n	800ae16 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800adbc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800adc0:	d824      	bhi.n	800ae0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800adc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800adc6:	d018      	beq.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800adc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800adcc:	d81e      	bhi.n	800ae0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800adce:	2b00      	cmp	r3, #0
 800add0:	d003      	beq.n	800adda <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800add2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800add6:	d007      	beq.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800add8:	e018      	b.n	800ae0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800adda:	4b8d      	ldr	r3, [pc, #564]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800addc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adde:	4a8c      	ldr	r2, [pc, #560]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ade0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ade4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800ade6:	e017      	b.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	3304      	adds	r3, #4
 800adec:	2100      	movs	r1, #0
 800adee:	4618      	mov	r0, r3
 800adf0:	f001 fe3e 	bl	800ca70 <RCCEx_PLL2_Config>
 800adf4:	4603      	mov	r3, r0
 800adf6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800adf8:	e00e      	b.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	3324      	adds	r3, #36	; 0x24
 800adfe:	2100      	movs	r1, #0
 800ae00:	4618      	mov	r0, r3
 800ae02:	f001 fee7 	bl	800cbd4 <RCCEx_PLL3_Config>
 800ae06:	4603      	mov	r3, r0
 800ae08:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800ae0a:	e005      	b.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	75fb      	strb	r3, [r7, #23]
      break;
 800ae10:	e002      	b.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800ae12:	bf00      	nop
 800ae14:	e000      	b.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800ae16:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae18:	7dfb      	ldrb	r3, [r7, #23]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d109      	bne.n	800ae32 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ae1e:	4b7c      	ldr	r3, [pc, #496]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ae20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae22:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae2a:	4979      	ldr	r1, [pc, #484]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ae2c:	4313      	orrs	r3, r2
 800ae2e:	650b      	str	r3, [r1, #80]	; 0x50
 800ae30:	e001      	b.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae32:	7dfb      	ldrb	r3, [r7, #23]
 800ae34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d049      	beq.n	800aed6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ae4a:	d02e      	beq.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800ae4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ae50:	d828      	bhi.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800ae52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ae56:	d02a      	beq.n	800aeae <HAL_RCCEx_PeriphCLKConfig+0x482>
 800ae58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ae5c:	d822      	bhi.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800ae5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ae62:	d026      	beq.n	800aeb2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800ae64:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ae68:	d81c      	bhi.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800ae6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae6e:	d010      	beq.n	800ae92 <HAL_RCCEx_PeriphCLKConfig+0x466>
 800ae70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae74:	d816      	bhi.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d01d      	beq.n	800aeb6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800ae7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae7e:	d111      	bne.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	3304      	adds	r3, #4
 800ae84:	2101      	movs	r1, #1
 800ae86:	4618      	mov	r0, r3
 800ae88:	f001 fdf2 	bl	800ca70 <RCCEx_PLL2_Config>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800ae90:	e012      	b.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	3324      	adds	r3, #36	; 0x24
 800ae96:	2101      	movs	r1, #1
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f001 fe9b 	bl	800cbd4 <RCCEx_PLL3_Config>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800aea2:	e009      	b.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aea4:	2301      	movs	r3, #1
 800aea6:	75fb      	strb	r3, [r7, #23]
      break;
 800aea8:	e006      	b.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800aeaa:	bf00      	nop
 800aeac:	e004      	b.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800aeae:	bf00      	nop
 800aeb0:	e002      	b.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800aeb2:	bf00      	nop
 800aeb4:	e000      	b.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800aeb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aeb8:	7dfb      	ldrb	r3, [r7, #23]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d109      	bne.n	800aed2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800aebe:	4b54      	ldr	r3, [pc, #336]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800aec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aec2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aeca:	4951      	ldr	r1, [pc, #324]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800aecc:	4313      	orrs	r3, r2
 800aece:	650b      	str	r3, [r1, #80]	; 0x50
 800aed0:	e001      	b.n	800aed6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aed2:	7dfb      	ldrb	r3, [r7, #23]
 800aed4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d04b      	beq.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800aee8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aeec:	d02e      	beq.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0x520>
 800aeee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aef2:	d828      	bhi.n	800af46 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800aef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aef8:	d02a      	beq.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800aefa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aefe:	d822      	bhi.n	800af46 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800af00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800af04:	d026      	beq.n	800af54 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800af06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800af0a:	d81c      	bhi.n	800af46 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800af0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af10:	d010      	beq.n	800af34 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800af12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af16:	d816      	bhi.n	800af46 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d01d      	beq.n	800af58 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800af1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af20:	d111      	bne.n	800af46 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	3304      	adds	r3, #4
 800af26:	2101      	movs	r1, #1
 800af28:	4618      	mov	r0, r3
 800af2a:	f001 fda1 	bl	800ca70 <RCCEx_PLL2_Config>
 800af2e:	4603      	mov	r3, r0
 800af30:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800af32:	e012      	b.n	800af5a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	3324      	adds	r3, #36	; 0x24
 800af38:	2101      	movs	r1, #1
 800af3a:	4618      	mov	r0, r3
 800af3c:	f001 fe4a 	bl	800cbd4 <RCCEx_PLL3_Config>
 800af40:	4603      	mov	r3, r0
 800af42:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800af44:	e009      	b.n	800af5a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800af46:	2301      	movs	r3, #1
 800af48:	75fb      	strb	r3, [r7, #23]
      break;
 800af4a:	e006      	b.n	800af5a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800af4c:	bf00      	nop
 800af4e:	e004      	b.n	800af5a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800af50:	bf00      	nop
 800af52:	e002      	b.n	800af5a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800af54:	bf00      	nop
 800af56:	e000      	b.n	800af5a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800af58:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af5a:	7dfb      	ldrb	r3, [r7, #23]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d10a      	bne.n	800af76 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800af60:	4b2b      	ldr	r3, [pc, #172]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800af62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af64:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800af6e:	4928      	ldr	r1, [pc, #160]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800af70:	4313      	orrs	r3, r2
 800af72:	658b      	str	r3, [r1, #88]	; 0x58
 800af74:	e001      	b.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af76:	7dfb      	ldrb	r3, [r7, #23]
 800af78:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af82:	2b00      	cmp	r3, #0
 800af84:	d02f      	beq.n	800afe6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af8e:	d00e      	beq.n	800afae <HAL_RCCEx_PeriphCLKConfig+0x582>
 800af90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af94:	d814      	bhi.n	800afc0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800af96:	2b00      	cmp	r3, #0
 800af98:	d015      	beq.n	800afc6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800af9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af9e:	d10f      	bne.n	800afc0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afa0:	4b1b      	ldr	r3, [pc, #108]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800afa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afa4:	4a1a      	ldr	r2, [pc, #104]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800afa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afaa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800afac:	e00c      	b.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	3304      	adds	r3, #4
 800afb2:	2101      	movs	r1, #1
 800afb4:	4618      	mov	r0, r3
 800afb6:	f001 fd5b 	bl	800ca70 <RCCEx_PLL2_Config>
 800afba:	4603      	mov	r3, r0
 800afbc:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800afbe:	e003      	b.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800afc0:	2301      	movs	r3, #1
 800afc2:	75fb      	strb	r3, [r7, #23]
      break;
 800afc4:	e000      	b.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800afc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800afc8:	7dfb      	ldrb	r3, [r7, #23]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d109      	bne.n	800afe2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800afce:	4b10      	ldr	r3, [pc, #64]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800afd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afd2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afda:	490d      	ldr	r1, [pc, #52]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800afdc:	4313      	orrs	r3, r2
 800afde:	650b      	str	r3, [r1, #80]	; 0x50
 800afe0:	e001      	b.n	800afe6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afe2:	7dfb      	ldrb	r3, [r7, #23]
 800afe4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d033      	beq.n	800b05a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aff6:	2b03      	cmp	r3, #3
 800aff8:	d81c      	bhi.n	800b034 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800affa:	a201      	add	r2, pc, #4	; (adr r2, 800b000 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800affc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b000:	0800b03b 	.word	0x0800b03b
 800b004:	0800b015 	.word	0x0800b015
 800b008:	0800b023 	.word	0x0800b023
 800b00c:	0800b03b 	.word	0x0800b03b
 800b010:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b014:	4bb8      	ldr	r3, [pc, #736]	; (800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b018:	4ab7      	ldr	r2, [pc, #732]	; (800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b01a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b01e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b020:	e00c      	b.n	800b03c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	3304      	adds	r3, #4
 800b026:	2102      	movs	r1, #2
 800b028:	4618      	mov	r0, r3
 800b02a:	f001 fd21 	bl	800ca70 <RCCEx_PLL2_Config>
 800b02e:	4603      	mov	r3, r0
 800b030:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b032:	e003      	b.n	800b03c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b034:	2301      	movs	r3, #1
 800b036:	75fb      	strb	r3, [r7, #23]
      break;
 800b038:	e000      	b.n	800b03c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800b03a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b03c:	7dfb      	ldrb	r3, [r7, #23]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d109      	bne.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b042:	4bad      	ldr	r3, [pc, #692]	; (800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b046:	f023 0203 	bic.w	r2, r3, #3
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b04e:	49aa      	ldr	r1, [pc, #680]	; (800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b050:	4313      	orrs	r3, r2
 800b052:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b054:	e001      	b.n	800b05a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b056:	7dfb      	ldrb	r3, [r7, #23]
 800b058:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b062:	2b00      	cmp	r3, #0
 800b064:	f000 8086 	beq.w	800b174 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b068:	4ba4      	ldr	r3, [pc, #656]	; (800b2fc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4aa3      	ldr	r2, [pc, #652]	; (800b2fc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800b06e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b072:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b074:	f7f8 ffc4 	bl	8004000 <HAL_GetTick>
 800b078:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b07a:	e009      	b.n	800b090 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b07c:	f7f8 ffc0 	bl	8004000 <HAL_GetTick>
 800b080:	4602      	mov	r2, r0
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	1ad3      	subs	r3, r2, r3
 800b086:	2b64      	cmp	r3, #100	; 0x64
 800b088:	d902      	bls.n	800b090 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800b08a:	2303      	movs	r3, #3
 800b08c:	75fb      	strb	r3, [r7, #23]
        break;
 800b08e:	e005      	b.n	800b09c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b090:	4b9a      	ldr	r3, [pc, #616]	; (800b2fc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d0ef      	beq.n	800b07c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800b09c:	7dfb      	ldrb	r3, [r7, #23]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d166      	bne.n	800b170 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b0a2:	4b95      	ldr	r3, [pc, #596]	; (800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b0a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b0ac:	4053      	eors	r3, r2
 800b0ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d013      	beq.n	800b0de <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b0b6:	4b90      	ldr	r3, [pc, #576]	; (800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b0b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b0be:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b0c0:	4b8d      	ldr	r3, [pc, #564]	; (800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b0c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0c4:	4a8c      	ldr	r2, [pc, #560]	; (800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b0c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b0ca:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b0cc:	4b8a      	ldr	r3, [pc, #552]	; (800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b0ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0d0:	4a89      	ldr	r2, [pc, #548]	; (800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b0d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b0d6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b0d8:	4a87      	ldr	r2, [pc, #540]	; (800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b0e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0e8:	d115      	bne.n	800b116 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0ea:	f7f8 ff89 	bl	8004000 <HAL_GetTick>
 800b0ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b0f0:	e00b      	b.n	800b10a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b0f2:	f7f8 ff85 	bl	8004000 <HAL_GetTick>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	1ad3      	subs	r3, r2, r3
 800b0fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b100:	4293      	cmp	r3, r2
 800b102:	d902      	bls.n	800b10a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800b104:	2303      	movs	r3, #3
 800b106:	75fb      	strb	r3, [r7, #23]
            break;
 800b108:	e005      	b.n	800b116 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b10a:	4b7b      	ldr	r3, [pc, #492]	; (800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b10c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b10e:	f003 0302 	and.w	r3, r3, #2
 800b112:	2b00      	cmp	r3, #0
 800b114:	d0ed      	beq.n	800b0f2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800b116:	7dfb      	ldrb	r3, [r7, #23]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d126      	bne.n	800b16a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b126:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b12a:	d10d      	bne.n	800b148 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800b12c:	4b72      	ldr	r3, [pc, #456]	; (800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b12e:	691b      	ldr	r3, [r3, #16]
 800b130:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b13a:	0919      	lsrs	r1, r3, #4
 800b13c:	4b70      	ldr	r3, [pc, #448]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800b13e:	400b      	ands	r3, r1
 800b140:	496d      	ldr	r1, [pc, #436]	; (800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b142:	4313      	orrs	r3, r2
 800b144:	610b      	str	r3, [r1, #16]
 800b146:	e005      	b.n	800b154 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800b148:	4b6b      	ldr	r3, [pc, #428]	; (800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b14a:	691b      	ldr	r3, [r3, #16]
 800b14c:	4a6a      	ldr	r2, [pc, #424]	; (800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b14e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b152:	6113      	str	r3, [r2, #16]
 800b154:	4b68      	ldr	r3, [pc, #416]	; (800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b156:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b15e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b162:	4965      	ldr	r1, [pc, #404]	; (800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b164:	4313      	orrs	r3, r2
 800b166:	670b      	str	r3, [r1, #112]	; 0x70
 800b168:	e004      	b.n	800b174 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b16a:	7dfb      	ldrb	r3, [r7, #23]
 800b16c:	75bb      	strb	r3, [r7, #22]
 800b16e:	e001      	b.n	800b174 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b170:	7dfb      	ldrb	r3, [r7, #23]
 800b172:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f003 0301 	and.w	r3, r3, #1
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d07e      	beq.n	800b27e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b184:	2b28      	cmp	r3, #40	; 0x28
 800b186:	d867      	bhi.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800b188:	a201      	add	r2, pc, #4	; (adr r2, 800b190 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800b18a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b18e:	bf00      	nop
 800b190:	0800b25f 	.word	0x0800b25f
 800b194:	0800b259 	.word	0x0800b259
 800b198:	0800b259 	.word	0x0800b259
 800b19c:	0800b259 	.word	0x0800b259
 800b1a0:	0800b259 	.word	0x0800b259
 800b1a4:	0800b259 	.word	0x0800b259
 800b1a8:	0800b259 	.word	0x0800b259
 800b1ac:	0800b259 	.word	0x0800b259
 800b1b0:	0800b235 	.word	0x0800b235
 800b1b4:	0800b259 	.word	0x0800b259
 800b1b8:	0800b259 	.word	0x0800b259
 800b1bc:	0800b259 	.word	0x0800b259
 800b1c0:	0800b259 	.word	0x0800b259
 800b1c4:	0800b259 	.word	0x0800b259
 800b1c8:	0800b259 	.word	0x0800b259
 800b1cc:	0800b259 	.word	0x0800b259
 800b1d0:	0800b247 	.word	0x0800b247
 800b1d4:	0800b259 	.word	0x0800b259
 800b1d8:	0800b259 	.word	0x0800b259
 800b1dc:	0800b259 	.word	0x0800b259
 800b1e0:	0800b259 	.word	0x0800b259
 800b1e4:	0800b259 	.word	0x0800b259
 800b1e8:	0800b259 	.word	0x0800b259
 800b1ec:	0800b259 	.word	0x0800b259
 800b1f0:	0800b25f 	.word	0x0800b25f
 800b1f4:	0800b259 	.word	0x0800b259
 800b1f8:	0800b259 	.word	0x0800b259
 800b1fc:	0800b259 	.word	0x0800b259
 800b200:	0800b259 	.word	0x0800b259
 800b204:	0800b259 	.word	0x0800b259
 800b208:	0800b259 	.word	0x0800b259
 800b20c:	0800b259 	.word	0x0800b259
 800b210:	0800b25f 	.word	0x0800b25f
 800b214:	0800b259 	.word	0x0800b259
 800b218:	0800b259 	.word	0x0800b259
 800b21c:	0800b259 	.word	0x0800b259
 800b220:	0800b259 	.word	0x0800b259
 800b224:	0800b259 	.word	0x0800b259
 800b228:	0800b259 	.word	0x0800b259
 800b22c:	0800b259 	.word	0x0800b259
 800b230:	0800b25f 	.word	0x0800b25f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	3304      	adds	r3, #4
 800b238:	2101      	movs	r1, #1
 800b23a:	4618      	mov	r0, r3
 800b23c:	f001 fc18 	bl	800ca70 <RCCEx_PLL2_Config>
 800b240:	4603      	mov	r3, r0
 800b242:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b244:	e00c      	b.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	3324      	adds	r3, #36	; 0x24
 800b24a:	2101      	movs	r1, #1
 800b24c:	4618      	mov	r0, r3
 800b24e:	f001 fcc1 	bl	800cbd4 <RCCEx_PLL3_Config>
 800b252:	4603      	mov	r3, r0
 800b254:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b256:	e003      	b.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b258:	2301      	movs	r3, #1
 800b25a:	75fb      	strb	r3, [r7, #23]
      break;
 800b25c:	e000      	b.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800b25e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b260:	7dfb      	ldrb	r3, [r7, #23]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d109      	bne.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b266:	4b24      	ldr	r3, [pc, #144]	; (800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b26a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b272:	4921      	ldr	r1, [pc, #132]	; (800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b274:	4313      	orrs	r3, r2
 800b276:	654b      	str	r3, [r1, #84]	; 0x54
 800b278:	e001      	b.n	800b27e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b27a:	7dfb      	ldrb	r3, [r7, #23]
 800b27c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f003 0302 	and.w	r3, r3, #2
 800b286:	2b00      	cmp	r3, #0
 800b288:	d03e      	beq.n	800b308 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b28e:	2b05      	cmp	r3, #5
 800b290:	d820      	bhi.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800b292:	a201      	add	r2, pc, #4	; (adr r2, 800b298 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800b294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b298:	0800b2db 	.word	0x0800b2db
 800b29c:	0800b2b1 	.word	0x0800b2b1
 800b2a0:	0800b2c3 	.word	0x0800b2c3
 800b2a4:	0800b2db 	.word	0x0800b2db
 800b2a8:	0800b2db 	.word	0x0800b2db
 800b2ac:	0800b2db 	.word	0x0800b2db
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	3304      	adds	r3, #4
 800b2b4:	2101      	movs	r1, #1
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f001 fbda 	bl	800ca70 <RCCEx_PLL2_Config>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b2c0:	e00c      	b.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	3324      	adds	r3, #36	; 0x24
 800b2c6:	2101      	movs	r1, #1
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f001 fc83 	bl	800cbd4 <RCCEx_PLL3_Config>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b2d2:	e003      	b.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	75fb      	strb	r3, [r7, #23]
      break;
 800b2d8:	e000      	b.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800b2da:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b2dc:	7dfb      	ldrb	r3, [r7, #23]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d110      	bne.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b2e2:	4b05      	ldr	r3, [pc, #20]	; (800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b2e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2e6:	f023 0207 	bic.w	r2, r3, #7
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2ee:	4902      	ldr	r1, [pc, #8]	; (800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b2f0:	4313      	orrs	r3, r2
 800b2f2:	654b      	str	r3, [r1, #84]	; 0x54
 800b2f4:	e008      	b.n	800b308 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800b2f6:	bf00      	nop
 800b2f8:	58024400 	.word	0x58024400
 800b2fc:	58024800 	.word	0x58024800
 800b300:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b304:	7dfb      	ldrb	r3, [r7, #23]
 800b306:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f003 0304 	and.w	r3, r3, #4
 800b310:	2b00      	cmp	r3, #0
 800b312:	d039      	beq.n	800b388 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b31a:	2b05      	cmp	r3, #5
 800b31c:	d820      	bhi.n	800b360 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800b31e:	a201      	add	r2, pc, #4	; (adr r2, 800b324 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800b320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b324:	0800b367 	.word	0x0800b367
 800b328:	0800b33d 	.word	0x0800b33d
 800b32c:	0800b34f 	.word	0x0800b34f
 800b330:	0800b367 	.word	0x0800b367
 800b334:	0800b367 	.word	0x0800b367
 800b338:	0800b367 	.word	0x0800b367
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	3304      	adds	r3, #4
 800b340:	2101      	movs	r1, #1
 800b342:	4618      	mov	r0, r3
 800b344:	f001 fb94 	bl	800ca70 <RCCEx_PLL2_Config>
 800b348:	4603      	mov	r3, r0
 800b34a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b34c:	e00c      	b.n	800b368 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	3324      	adds	r3, #36	; 0x24
 800b352:	2101      	movs	r1, #1
 800b354:	4618      	mov	r0, r3
 800b356:	f001 fc3d 	bl	800cbd4 <RCCEx_PLL3_Config>
 800b35a:	4603      	mov	r3, r0
 800b35c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b35e:	e003      	b.n	800b368 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b360:	2301      	movs	r3, #1
 800b362:	75fb      	strb	r3, [r7, #23]
      break;
 800b364:	e000      	b.n	800b368 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800b366:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b368:	7dfb      	ldrb	r3, [r7, #23]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d10a      	bne.n	800b384 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b36e:	4bb7      	ldr	r3, [pc, #732]	; (800b64c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b372:	f023 0207 	bic.w	r2, r3, #7
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b37c:	49b3      	ldr	r1, [pc, #716]	; (800b64c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b37e:	4313      	orrs	r3, r2
 800b380:	658b      	str	r3, [r1, #88]	; 0x58
 800b382:	e001      	b.n	800b388 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b384:	7dfb      	ldrb	r3, [r7, #23]
 800b386:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f003 0320 	and.w	r3, r3, #32
 800b390:	2b00      	cmp	r3, #0
 800b392:	d04b      	beq.n	800b42c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b39a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b39e:	d02e      	beq.n	800b3fe <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800b3a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b3a4:	d828      	bhi.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b3a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3aa:	d02a      	beq.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800b3ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3b0:	d822      	bhi.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b3b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b3b6:	d026      	beq.n	800b406 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800b3b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b3bc:	d81c      	bhi.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b3be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3c2:	d010      	beq.n	800b3e6 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800b3c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3c8:	d816      	bhi.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d01d      	beq.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800b3ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b3d2:	d111      	bne.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	3304      	adds	r3, #4
 800b3d8:	2100      	movs	r1, #0
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f001 fb48 	bl	800ca70 <RCCEx_PLL2_Config>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b3e4:	e012      	b.n	800b40c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	3324      	adds	r3, #36	; 0x24
 800b3ea:	2102      	movs	r1, #2
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f001 fbf1 	bl	800cbd4 <RCCEx_PLL3_Config>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b3f6:	e009      	b.n	800b40c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	75fb      	strb	r3, [r7, #23]
      break;
 800b3fc:	e006      	b.n	800b40c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b3fe:	bf00      	nop
 800b400:	e004      	b.n	800b40c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b402:	bf00      	nop
 800b404:	e002      	b.n	800b40c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b406:	bf00      	nop
 800b408:	e000      	b.n	800b40c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b40a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b40c:	7dfb      	ldrb	r3, [r7, #23]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d10a      	bne.n	800b428 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b412:	4b8e      	ldr	r3, [pc, #568]	; (800b64c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b416:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b420:	498a      	ldr	r1, [pc, #552]	; (800b64c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b422:	4313      	orrs	r3, r2
 800b424:	654b      	str	r3, [r1, #84]	; 0x54
 800b426:	e001      	b.n	800b42c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b428:	7dfb      	ldrb	r3, [r7, #23]
 800b42a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b434:	2b00      	cmp	r3, #0
 800b436:	d04b      	beq.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b43e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b442:	d02e      	beq.n	800b4a2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800b444:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b448:	d828      	bhi.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b44a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b44e:	d02a      	beq.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800b450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b454:	d822      	bhi.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b456:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b45a:	d026      	beq.n	800b4aa <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800b45c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b460:	d81c      	bhi.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b462:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b466:	d010      	beq.n	800b48a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800b468:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b46c:	d816      	bhi.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d01d      	beq.n	800b4ae <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800b472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b476:	d111      	bne.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	3304      	adds	r3, #4
 800b47c:	2100      	movs	r1, #0
 800b47e:	4618      	mov	r0, r3
 800b480:	f001 faf6 	bl	800ca70 <RCCEx_PLL2_Config>
 800b484:	4603      	mov	r3, r0
 800b486:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b488:	e012      	b.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	3324      	adds	r3, #36	; 0x24
 800b48e:	2102      	movs	r1, #2
 800b490:	4618      	mov	r0, r3
 800b492:	f001 fb9f 	bl	800cbd4 <RCCEx_PLL3_Config>
 800b496:	4603      	mov	r3, r0
 800b498:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b49a:	e009      	b.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b49c:	2301      	movs	r3, #1
 800b49e:	75fb      	strb	r3, [r7, #23]
      break;
 800b4a0:	e006      	b.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b4a2:	bf00      	nop
 800b4a4:	e004      	b.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b4a6:	bf00      	nop
 800b4a8:	e002      	b.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b4aa:	bf00      	nop
 800b4ac:	e000      	b.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b4ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b4b0:	7dfb      	ldrb	r3, [r7, #23]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d10a      	bne.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b4b6:	4b65      	ldr	r3, [pc, #404]	; (800b64c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b4b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4ba:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b4c4:	4961      	ldr	r1, [pc, #388]	; (800b64c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	658b      	str	r3, [r1, #88]	; 0x58
 800b4ca:	e001      	b.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4cc:	7dfb      	ldrb	r3, [r7, #23]
 800b4ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d04b      	beq.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b4e2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b4e6:	d02e      	beq.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800b4e8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b4ec:	d828      	bhi.n	800b540 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b4ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4f2:	d02a      	beq.n	800b54a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800b4f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4f8:	d822      	bhi.n	800b540 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b4fa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b4fe:	d026      	beq.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800b500:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b504:	d81c      	bhi.n	800b540 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b506:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b50a:	d010      	beq.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800b50c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b510:	d816      	bhi.n	800b540 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b512:	2b00      	cmp	r3, #0
 800b514:	d01d      	beq.n	800b552 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800b516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b51a:	d111      	bne.n	800b540 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	3304      	adds	r3, #4
 800b520:	2100      	movs	r1, #0
 800b522:	4618      	mov	r0, r3
 800b524:	f001 faa4 	bl	800ca70 <RCCEx_PLL2_Config>
 800b528:	4603      	mov	r3, r0
 800b52a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b52c:	e012      	b.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	3324      	adds	r3, #36	; 0x24
 800b532:	2102      	movs	r1, #2
 800b534:	4618      	mov	r0, r3
 800b536:	f001 fb4d 	bl	800cbd4 <RCCEx_PLL3_Config>
 800b53a:	4603      	mov	r3, r0
 800b53c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b53e:	e009      	b.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b540:	2301      	movs	r3, #1
 800b542:	75fb      	strb	r3, [r7, #23]
      break;
 800b544:	e006      	b.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b546:	bf00      	nop
 800b548:	e004      	b.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b54a:	bf00      	nop
 800b54c:	e002      	b.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b54e:	bf00      	nop
 800b550:	e000      	b.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b552:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b554:	7dfb      	ldrb	r3, [r7, #23]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d10a      	bne.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b55a:	4b3c      	ldr	r3, [pc, #240]	; (800b64c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b55c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b55e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b568:	4938      	ldr	r1, [pc, #224]	; (800b64c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b56a:	4313      	orrs	r3, r2
 800b56c:	658b      	str	r3, [r1, #88]	; 0x58
 800b56e:	e001      	b.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b570:	7dfb      	ldrb	r3, [r7, #23]
 800b572:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	f003 0308 	and.w	r3, r3, #8
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d01a      	beq.n	800b5b6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b58a:	d10a      	bne.n	800b5a2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	3324      	adds	r3, #36	; 0x24
 800b590:	2102      	movs	r1, #2
 800b592:	4618      	mov	r0, r3
 800b594:	f001 fb1e 	bl	800cbd4 <RCCEx_PLL3_Config>
 800b598:	4603      	mov	r3, r0
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d001      	beq.n	800b5a2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800b59e:	2301      	movs	r3, #1
 800b5a0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b5a2:	4b2a      	ldr	r3, [pc, #168]	; (800b64c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b5a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5b0:	4926      	ldr	r1, [pc, #152]	; (800b64c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b5b2:	4313      	orrs	r3, r2
 800b5b4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f003 0310 	and.w	r3, r3, #16
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d01a      	beq.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b5c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5cc:	d10a      	bne.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	3324      	adds	r3, #36	; 0x24
 800b5d2:	2102      	movs	r1, #2
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f001 fafd 	bl	800cbd4 <RCCEx_PLL3_Config>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d001      	beq.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b5e4:	4b19      	ldr	r3, [pc, #100]	; (800b64c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b5e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b5f2:	4916      	ldr	r1, [pc, #88]	; (800b64c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b600:	2b00      	cmp	r3, #0
 800b602:	d036      	beq.n	800b672 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b60a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b60e:	d01f      	beq.n	800b650 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800b610:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b614:	d817      	bhi.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800b616:	2b00      	cmp	r3, #0
 800b618:	d003      	beq.n	800b622 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800b61a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b61e:	d009      	beq.n	800b634 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800b620:	e011      	b.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	3304      	adds	r3, #4
 800b626:	2100      	movs	r1, #0
 800b628:	4618      	mov	r0, r3
 800b62a:	f001 fa21 	bl	800ca70 <RCCEx_PLL2_Config>
 800b62e:	4603      	mov	r3, r0
 800b630:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b632:	e00e      	b.n	800b652 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	3324      	adds	r3, #36	; 0x24
 800b638:	2102      	movs	r1, #2
 800b63a:	4618      	mov	r0, r3
 800b63c:	f001 faca 	bl	800cbd4 <RCCEx_PLL3_Config>
 800b640:	4603      	mov	r3, r0
 800b642:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b644:	e005      	b.n	800b652 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b646:	2301      	movs	r3, #1
 800b648:	75fb      	strb	r3, [r7, #23]
      break;
 800b64a:	e002      	b.n	800b652 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800b64c:	58024400 	.word	0x58024400
      break;
 800b650:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b652:	7dfb      	ldrb	r3, [r7, #23]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d10a      	bne.n	800b66e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b658:	4b93      	ldr	r3, [pc, #588]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b65a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b65c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b666:	4990      	ldr	r1, [pc, #576]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b668:	4313      	orrs	r3, r2
 800b66a:	658b      	str	r3, [r1, #88]	; 0x58
 800b66c:	e001      	b.n	800b672 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b66e:	7dfb      	ldrb	r3, [r7, #23]
 800b670:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d033      	beq.n	800b6e6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b684:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b688:	d01c      	beq.n	800b6c4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800b68a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b68e:	d816      	bhi.n	800b6be <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800b690:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b694:	d003      	beq.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800b696:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b69a:	d007      	beq.n	800b6ac <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800b69c:	e00f      	b.n	800b6be <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b69e:	4b82      	ldr	r3, [pc, #520]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b6a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6a2:	4a81      	ldr	r2, [pc, #516]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b6a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800b6aa:	e00c      	b.n	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	3324      	adds	r3, #36	; 0x24
 800b6b0:	2101      	movs	r1, #1
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f001 fa8e 	bl	800cbd4 <RCCEx_PLL3_Config>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800b6bc:	e003      	b.n	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b6be:	2301      	movs	r3, #1
 800b6c0:	75fb      	strb	r3, [r7, #23]
      break;
 800b6c2:	e000      	b.n	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800b6c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b6c6:	7dfb      	ldrb	r3, [r7, #23]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d10a      	bne.n	800b6e2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b6cc:	4b76      	ldr	r3, [pc, #472]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b6ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6da:	4973      	ldr	r1, [pc, #460]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b6dc:	4313      	orrs	r3, r2
 800b6de:	654b      	str	r3, [r1, #84]	; 0x54
 800b6e0:	e001      	b.n	800b6e6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6e2:	7dfb      	ldrb	r3, [r7, #23]
 800b6e4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d029      	beq.n	800b746 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d003      	beq.n	800b702 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800b6fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6fe:	d007      	beq.n	800b710 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800b700:	e00f      	b.n	800b722 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b702:	4b69      	ldr	r3, [pc, #420]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b706:	4a68      	ldr	r2, [pc, #416]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b70c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b70e:	e00b      	b.n	800b728 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	3304      	adds	r3, #4
 800b714:	2102      	movs	r1, #2
 800b716:	4618      	mov	r0, r3
 800b718:	f001 f9aa 	bl	800ca70 <RCCEx_PLL2_Config>
 800b71c:	4603      	mov	r3, r0
 800b71e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b720:	e002      	b.n	800b728 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800b722:	2301      	movs	r3, #1
 800b724:	75fb      	strb	r3, [r7, #23]
      break;
 800b726:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b728:	7dfb      	ldrb	r3, [r7, #23]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d109      	bne.n	800b742 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b72e:	4b5e      	ldr	r3, [pc, #376]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b732:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b73a:	495b      	ldr	r1, [pc, #364]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b73c:	4313      	orrs	r3, r2
 800b73e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b740:	e001      	b.n	800b746 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b742:	7dfb      	ldrb	r3, [r7, #23]
 800b744:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d00a      	beq.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	3324      	adds	r3, #36	; 0x24
 800b756:	2102      	movs	r1, #2
 800b758:	4618      	mov	r0, r3
 800b75a:	f001 fa3b 	bl	800cbd4 <RCCEx_PLL3_Config>
 800b75e:	4603      	mov	r3, r0
 800b760:	2b00      	cmp	r3, #0
 800b762:	d001      	beq.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800b764:	2301      	movs	r3, #1
 800b766:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b770:	2b00      	cmp	r3, #0
 800b772:	d030      	beq.n	800b7d6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b778:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b77c:	d017      	beq.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800b77e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b782:	d811      	bhi.n	800b7a8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800b784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b788:	d013      	beq.n	800b7b2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800b78a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b78e:	d80b      	bhi.n	800b7a8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800b790:	2b00      	cmp	r3, #0
 800b792:	d010      	beq.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800b794:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b798:	d106      	bne.n	800b7a8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b79a:	4b43      	ldr	r3, [pc, #268]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b79c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b79e:	4a42      	ldr	r2, [pc, #264]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b7a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800b7a6:	e007      	b.n	800b7b8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	75fb      	strb	r3, [r7, #23]
      break;
 800b7ac:	e004      	b.n	800b7b8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b7ae:	bf00      	nop
 800b7b0:	e002      	b.n	800b7b8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b7b2:	bf00      	nop
 800b7b4:	e000      	b.n	800b7b8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b7b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b7b8:	7dfb      	ldrb	r3, [r7, #23]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d109      	bne.n	800b7d2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b7be:	4b3a      	ldr	r3, [pc, #232]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b7c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7ca:	4937      	ldr	r1, [pc, #220]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b7cc:	4313      	orrs	r3, r2
 800b7ce:	654b      	str	r3, [r1, #84]	; 0x54
 800b7d0:	e001      	b.n	800b7d6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7d2:	7dfb      	ldrb	r3, [r7, #23]
 800b7d4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d008      	beq.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b7e2:	4b31      	ldr	r3, [pc, #196]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b7e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7ee:	492e      	ldr	r1, [pc, #184]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b7f0:	4313      	orrs	r3, r2
 800b7f2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d009      	beq.n	800b814 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b800:	4b29      	ldr	r3, [pc, #164]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b802:	691b      	ldr	r3, [r3, #16]
 800b804:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b80e:	4926      	ldr	r1, [pc, #152]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b810:	4313      	orrs	r3, r2
 800b812:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d008      	beq.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b820:	4b21      	ldr	r3, [pc, #132]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b824:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b82c:	491e      	ldr	r1, [pc, #120]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b82e:	4313      	orrs	r3, r2
 800b830:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d00d      	beq.n	800b85a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b83e:	4b1a      	ldr	r3, [pc, #104]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b840:	691b      	ldr	r3, [r3, #16]
 800b842:	4a19      	ldr	r2, [pc, #100]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b844:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b848:	6113      	str	r3, [r2, #16]
 800b84a:	4b17      	ldr	r3, [pc, #92]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b84c:	691a      	ldr	r2, [r3, #16]
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b854:	4914      	ldr	r1, [pc, #80]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b856:	4313      	orrs	r3, r2
 800b858:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	da08      	bge.n	800b874 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b862:	4b11      	ldr	r3, [pc, #68]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b866:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b86e:	490e      	ldr	r1, [pc, #56]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b870:	4313      	orrs	r3, r2
 800b872:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d009      	beq.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b880:	4b09      	ldr	r3, [pc, #36]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b884:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b88e:	4906      	ldr	r1, [pc, #24]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b890:	4313      	orrs	r3, r2
 800b892:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800b894:	7dbb      	ldrb	r3, [r7, #22]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d101      	bne.n	800b89e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800b89a:	2300      	movs	r3, #0
 800b89c:	e000      	b.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800b89e:	2301      	movs	r3, #1
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3718      	adds	r7, #24
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}
 800b8a8:	58024400 	.word	0x58024400

0800b8ac <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b090      	sub	sp, #64	; 0x40
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8ba:	f040 8095 	bne.w	800b9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800b8be:	4bae      	ldr	r3, [pc, #696]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b8c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8c2:	f003 0307 	and.w	r3, r3, #7
 800b8c6:	633b      	str	r3, [r7, #48]	; 0x30
 800b8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ca:	2b04      	cmp	r3, #4
 800b8cc:	f200 8088 	bhi.w	800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800b8d0:	a201      	add	r2, pc, #4	; (adr r2, 800b8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800b8d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8d6:	bf00      	nop
 800b8d8:	0800b8ed 	.word	0x0800b8ed
 800b8dc:	0800b915 	.word	0x0800b915
 800b8e0:	0800b93d 	.word	0x0800b93d
 800b8e4:	0800b9d9 	.word	0x0800b9d9
 800b8e8:	0800b965 	.word	0x0800b965

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b8ec:	4ba2      	ldr	r3, [pc, #648]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b8f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b8f8:	d108      	bne.n	800b90c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b8fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8fe:	4618      	mov	r0, r3
 800b900:	f000 ff64 	bl	800c7cc <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800b904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b906:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b908:	f000 bc95 	b.w	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b90c:	2300      	movs	r3, #0
 800b90e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b910:	f000 bc91 	b.w	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b914:	4b98      	ldr	r3, [pc, #608]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b91c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b920:	d108      	bne.n	800b934 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b922:	f107 0318 	add.w	r3, r7, #24
 800b926:	4618      	mov	r0, r3
 800b928:	f000 fca8 	bl	800c27c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b92c:	69bb      	ldr	r3, [r7, #24]
 800b92e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b930:	f000 bc81 	b.w	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b934:	2300      	movs	r3, #0
 800b936:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b938:	f000 bc7d 	b.w	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b93c:	4b8e      	ldr	r3, [pc, #568]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b944:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b948:	d108      	bne.n	800b95c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b94a:	f107 030c 	add.w	r3, r7, #12
 800b94e:	4618      	mov	r0, r3
 800b950:	f000 fde8 	bl	800c524 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b958:	f000 bc6d 	b.w	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b95c:	2300      	movs	r3, #0
 800b95e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b960:	f000 bc69 	b.w	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b964:	4b84      	ldr	r3, [pc, #528]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b968:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b96c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b96e:	4b82      	ldr	r3, [pc, #520]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f003 0304 	and.w	r3, r3, #4
 800b976:	2b04      	cmp	r3, #4
 800b978:	d10c      	bne.n	800b994 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800b97a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d109      	bne.n	800b994 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b980:	4b7d      	ldr	r3, [pc, #500]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	08db      	lsrs	r3, r3, #3
 800b986:	f003 0303 	and.w	r3, r3, #3
 800b98a:	4a7c      	ldr	r2, [pc, #496]	; (800bb7c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800b98c:	fa22 f303 	lsr.w	r3, r2, r3
 800b990:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b992:	e01f      	b.n	800b9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b994:	4b78      	ldr	r3, [pc, #480]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b99c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9a0:	d106      	bne.n	800b9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800b9a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b9a8:	d102      	bne.n	800b9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b9aa:	4b75      	ldr	r3, [pc, #468]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800b9ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9ae:	e011      	b.n	800b9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b9b0:	4b71      	ldr	r3, [pc, #452]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9bc:	d106      	bne.n	800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800b9be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9c4:	d102      	bne.n	800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b9c6:	4b6f      	ldr	r3, [pc, #444]	; (800bb84 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800b9c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9ca:	e003      	b.n	800b9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b9d0:	f000 bc31 	b.w	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b9d4:	f000 bc2f 	b.w	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b9d8:	4b6b      	ldr	r3, [pc, #428]	; (800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b9da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b9dc:	f000 bc2b 	b.w	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b9e4:	f000 bc27 	b.w	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9ee:	f040 8095 	bne.w	800bb1c <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800b9f2:	4b61      	ldr	r3, [pc, #388]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b9f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9f6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800b9fa:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba02:	d04d      	beq.n	800baa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800ba04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba0a:	f200 8084 	bhi.w	800bb16 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800ba0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba10:	2bc0      	cmp	r3, #192	; 0xc0
 800ba12:	d07d      	beq.n	800bb10 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800ba14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba16:	2bc0      	cmp	r3, #192	; 0xc0
 800ba18:	d87d      	bhi.n	800bb16 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800ba1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba1c:	2b80      	cmp	r3, #128	; 0x80
 800ba1e:	d02d      	beq.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800ba20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba22:	2b80      	cmp	r3, #128	; 0x80
 800ba24:	d877      	bhi.n	800bb16 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800ba26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d003      	beq.n	800ba34 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800ba2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba2e:	2b40      	cmp	r3, #64	; 0x40
 800ba30:	d012      	beq.n	800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800ba32:	e070      	b.n	800bb16 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ba34:	4b50      	ldr	r3, [pc, #320]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba40:	d107      	bne.n	800ba52 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ba42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba46:	4618      	mov	r0, r3
 800ba48:	f000 fec0 	bl	800c7cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ba4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba4e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ba50:	e3f1      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ba52:	2300      	movs	r3, #0
 800ba54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba56:	e3ee      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ba58:	4b47      	ldr	r3, [pc, #284]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba64:	d107      	bne.n	800ba76 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba66:	f107 0318 	add.w	r3, r7, #24
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f000 fc06 	bl	800c27c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ba70:	69bb      	ldr	r3, [r7, #24]
 800ba72:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ba74:	e3df      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ba76:	2300      	movs	r3, #0
 800ba78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba7a:	e3dc      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ba7c:	4b3e      	ldr	r3, [pc, #248]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba88:	d107      	bne.n	800ba9a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba8a:	f107 030c 	add.w	r3, r7, #12
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f000 fd48 	bl	800c524 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ba98:	e3cd      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba9e:	e3ca      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800baa0:	4b35      	ldr	r3, [pc, #212]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800baa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800baa4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800baa8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800baaa:	4b33      	ldr	r3, [pc, #204]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f003 0304 	and.w	r3, r3, #4
 800bab2:	2b04      	cmp	r3, #4
 800bab4:	d10c      	bne.n	800bad0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800bab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d109      	bne.n	800bad0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800babc:	4b2e      	ldr	r3, [pc, #184]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	08db      	lsrs	r3, r3, #3
 800bac2:	f003 0303 	and.w	r3, r3, #3
 800bac6:	4a2d      	ldr	r2, [pc, #180]	; (800bb7c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800bac8:	fa22 f303 	lsr.w	r3, r2, r3
 800bacc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bace:	e01e      	b.n	800bb0e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bad0:	4b29      	ldr	r3, [pc, #164]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bad8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800badc:	d106      	bne.n	800baec <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800bade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bae0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bae4:	d102      	bne.n	800baec <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800bae6:	4b26      	ldr	r3, [pc, #152]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800bae8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800baea:	e010      	b.n	800bb0e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800baec:	4b22      	ldr	r3, [pc, #136]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800baf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800baf8:	d106      	bne.n	800bb08 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800bafa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bafc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb00:	d102      	bne.n	800bb08 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800bb02:	4b20      	ldr	r3, [pc, #128]	; (800bb84 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800bb04:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb06:	e002      	b.n	800bb0e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800bb0c:	e393      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bb0e:	e392      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800bb10:	4b1d      	ldr	r3, [pc, #116]	; (800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800bb12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bb14:	e38f      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800bb16:	2300      	movs	r3, #0
 800bb18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bb1a:	e38c      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb22:	f040 80a7 	bne.w	800bc74 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800bb26:	4b14      	ldr	r3, [pc, #80]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bb28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb2a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800bb2e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800bb30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bb36:	d05f      	beq.n	800bbf8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800bb38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bb3e:	f200 8096 	bhi.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800bb42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb44:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bb48:	f000 808e 	beq.w	800bc68 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800bb4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb4e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bb52:	f200 808c 	bhi.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800bb56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bb5c:	d03a      	beq.n	800bbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800bb5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bb64:	f200 8083 	bhi.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800bb68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d00e      	beq.n	800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800bb6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bb74:	d01c      	beq.n	800bbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800bb76:	e07a      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800bb78:	58024400 	.word	0x58024400
 800bb7c:	03d09000 	.word	0x03d09000
 800bb80:	003d0900 	.word	0x003d0900
 800bb84:	017d7840 	.word	0x017d7840
 800bb88:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bb8c:	4baa      	ldr	r3, [pc, #680]	; (800be38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb98:	d107      	bne.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f000 fe14 	bl	800c7cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bba8:	e345      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bbae:	e342      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bbb0:	4ba1      	ldr	r3, [pc, #644]	; (800be38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bbb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bbbc:	d107      	bne.n	800bbce <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bbbe:	f107 0318 	add.w	r3, r7, #24
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f000 fb5a 	bl	800c27c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bbc8:	69bb      	ldr	r3, [r7, #24]
 800bbca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bbcc:	e333      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bbd2:	e330      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bbd4:	4b98      	ldr	r3, [pc, #608]	; (800be38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bbdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbe0:	d107      	bne.n	800bbf2 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bbe2:	f107 030c 	add.w	r3, r7, #12
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f000 fc9c 	bl	800c524 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bbf0:	e321      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bbf6:	e31e      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bbf8:	4b8f      	ldr	r3, [pc, #572]	; (800be38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bbfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbfc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bc00:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bc02:	4b8d      	ldr	r3, [pc, #564]	; (800be38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f003 0304 	and.w	r3, r3, #4
 800bc0a:	2b04      	cmp	r3, #4
 800bc0c:	d10c      	bne.n	800bc28 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800bc0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d109      	bne.n	800bc28 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bc14:	4b88      	ldr	r3, [pc, #544]	; (800be38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	08db      	lsrs	r3, r3, #3
 800bc1a:	f003 0303 	and.w	r3, r3, #3
 800bc1e:	4a87      	ldr	r2, [pc, #540]	; (800be3c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800bc20:	fa22 f303 	lsr.w	r3, r2, r3
 800bc24:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc26:	e01e      	b.n	800bc66 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bc28:	4b83      	ldr	r3, [pc, #524]	; (800be38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc34:	d106      	bne.n	800bc44 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800bc36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc3c:	d102      	bne.n	800bc44 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800bc3e:	4b80      	ldr	r3, [pc, #512]	; (800be40 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800bc40:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc42:	e010      	b.n	800bc66 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bc44:	4b7c      	ldr	r3, [pc, #496]	; (800be38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc50:	d106      	bne.n	800bc60 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800bc52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc58:	d102      	bne.n	800bc60 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800bc5a:	4b7a      	ldr	r3, [pc, #488]	; (800be44 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800bc5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc5e:	e002      	b.n	800bc66 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800bc60:	2300      	movs	r3, #0
 800bc62:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800bc64:	e2e7      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bc66:	e2e6      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800bc68:	4b77      	ldr	r3, [pc, #476]	; (800be48 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800bc6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bc6c:	e2e3      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bc72:	e2e0      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc7a:	f040 809c 	bne.w	800bdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800bc7e:	4b6e      	ldr	r3, [pc, #440]	; (800be38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bc80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc82:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800bc86:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800bc88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bc8e:	d054      	beq.n	800bd3a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800bc90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bc96:	f200 808b 	bhi.w	800bdb0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800bc9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc9c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bca0:	f000 8083 	beq.w	800bdaa <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800bca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bca6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bcaa:	f200 8081 	bhi.w	800bdb0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800bcae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bcb4:	d02f      	beq.n	800bd16 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800bcb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bcbc:	d878      	bhi.n	800bdb0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800bcbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d004      	beq.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800bcc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bcca:	d012      	beq.n	800bcf2 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800bccc:	e070      	b.n	800bdb0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bcce:	4b5a      	ldr	r3, [pc, #360]	; (800be38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bcd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bcda:	d107      	bne.n	800bcec <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bcdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bce0:	4618      	mov	r0, r3
 800bce2:	f000 fd73 	bl	800c7cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bcea:	e2a4      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bcec:	2300      	movs	r3, #0
 800bcee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bcf0:	e2a1      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bcf2:	4b51      	ldr	r3, [pc, #324]	; (800be38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bcfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bcfe:	d107      	bne.n	800bd10 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd00:	f107 0318 	add.w	r3, r7, #24
 800bd04:	4618      	mov	r0, r3
 800bd06:	f000 fab9 	bl	800c27c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bd0a:	69bb      	ldr	r3, [r7, #24]
 800bd0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800bd0e:	e292      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bd10:	2300      	movs	r3, #0
 800bd12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd14:	e28f      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bd16:	4b48      	ldr	r3, [pc, #288]	; (800be38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bd1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd22:	d107      	bne.n	800bd34 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd24:	f107 030c 	add.w	r3, r7, #12
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f000 fbfb 	bl	800c524 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bd32:	e280      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bd34:	2300      	movs	r3, #0
 800bd36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd38:	e27d      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bd3a:	4b3f      	ldr	r3, [pc, #252]	; (800be38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bd3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bd42:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bd44:	4b3c      	ldr	r3, [pc, #240]	; (800be38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f003 0304 	and.w	r3, r3, #4
 800bd4c:	2b04      	cmp	r3, #4
 800bd4e:	d10c      	bne.n	800bd6a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800bd50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d109      	bne.n	800bd6a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bd56:	4b38      	ldr	r3, [pc, #224]	; (800be38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	08db      	lsrs	r3, r3, #3
 800bd5c:	f003 0303 	and.w	r3, r3, #3
 800bd60:	4a36      	ldr	r2, [pc, #216]	; (800be3c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800bd62:	fa22 f303 	lsr.w	r3, r2, r3
 800bd66:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd68:	e01e      	b.n	800bda8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bd6a:	4b33      	ldr	r3, [pc, #204]	; (800be38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd76:	d106      	bne.n	800bd86 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800bd78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd7e:	d102      	bne.n	800bd86 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800bd80:	4b2f      	ldr	r3, [pc, #188]	; (800be40 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800bd82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd84:	e010      	b.n	800bda8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bd86:	4b2c      	ldr	r3, [pc, #176]	; (800be38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd92:	d106      	bne.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800bd94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd9a:	d102      	bne.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800bd9c:	4b29      	ldr	r3, [pc, #164]	; (800be44 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800bd9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bda0:	e002      	b.n	800bda8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800bda2:	2300      	movs	r3, #0
 800bda4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800bda6:	e246      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bda8:	e245      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800bdaa:	4b27      	ldr	r3, [pc, #156]	; (800be48 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800bdac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bdae:	e242      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bdb4:	e23f      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdbc:	f040 80a8 	bne.w	800bf10 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800bdc0:	4b1d      	ldr	r3, [pc, #116]	; (800be38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bdc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdc4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800bdc8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800bdca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bdd0:	d060      	beq.n	800be94 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800bdd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bdd8:	f200 8097 	bhi.w	800bf0a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800bddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdde:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bde2:	f000 808f 	beq.w	800bf04 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800bde6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bde8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bdec:	f200 808d 	bhi.w	800bf0a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800bdf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bdf6:	d03b      	beq.n	800be70 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800bdf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bdfe:	f200 8084 	bhi.w	800bf0a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800be02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be04:	2b00      	cmp	r3, #0
 800be06:	d004      	beq.n	800be12 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800be08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be0e:	d01d      	beq.n	800be4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 800be10:	e07b      	b.n	800bf0a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800be12:	4b09      	ldr	r3, [pc, #36]	; (800be38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be1e:	d107      	bne.n	800be30 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be24:	4618      	mov	r0, r3
 800be26:	f000 fcd1 	bl	800c7cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800be2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be2c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800be2e:	e202      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800be30:	2300      	movs	r3, #0
 800be32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be34:	e1ff      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800be36:	bf00      	nop
 800be38:	58024400 	.word	0x58024400
 800be3c:	03d09000 	.word	0x03d09000
 800be40:	003d0900 	.word	0x003d0900
 800be44:	017d7840 	.word	0x017d7840
 800be48:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800be4c:	4ba3      	ldr	r3, [pc, #652]	; (800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be58:	d107      	bne.n	800be6a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be5a:	f107 0318 	add.w	r3, r7, #24
 800be5e:	4618      	mov	r0, r3
 800be60:	f000 fa0c 	bl	800c27c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800be64:	69bb      	ldr	r3, [r7, #24]
 800be66:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800be68:	e1e5      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800be6a:	2300      	movs	r3, #0
 800be6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be6e:	e1e2      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800be70:	4b9a      	ldr	r3, [pc, #616]	; (800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be7c:	d107      	bne.n	800be8e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be7e:	f107 030c 	add.w	r3, r7, #12
 800be82:	4618      	mov	r0, r3
 800be84:	f000 fb4e 	bl	800c524 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800be8c:	e1d3      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800be8e:	2300      	movs	r3, #0
 800be90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be92:	e1d0      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800be94:	4b91      	ldr	r3, [pc, #580]	; (800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800be96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800be9c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800be9e:	4b8f      	ldr	r3, [pc, #572]	; (800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	f003 0304 	and.w	r3, r3, #4
 800bea6:	2b04      	cmp	r3, #4
 800bea8:	d10c      	bne.n	800bec4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800beaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beac:	2b00      	cmp	r3, #0
 800beae:	d109      	bne.n	800bec4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800beb0:	4b8a      	ldr	r3, [pc, #552]	; (800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	08db      	lsrs	r3, r3, #3
 800beb6:	f003 0303 	and.w	r3, r3, #3
 800beba:	4a89      	ldr	r2, [pc, #548]	; (800c0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800bebc:	fa22 f303 	lsr.w	r3, r2, r3
 800bec0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bec2:	e01e      	b.n	800bf02 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bec4:	4b85      	ldr	r3, [pc, #532]	; (800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800becc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bed0:	d106      	bne.n	800bee0 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800bed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bed4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bed8:	d102      	bne.n	800bee0 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800beda:	4b82      	ldr	r3, [pc, #520]	; (800c0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800bedc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bede:	e010      	b.n	800bf02 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bee0:	4b7e      	ldr	r3, [pc, #504]	; (800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bee8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800beec:	d106      	bne.n	800befc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800beee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bef0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bef4:	d102      	bne.n	800befc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800bef6:	4b7c      	ldr	r3, [pc, #496]	; (800c0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800bef8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800befa:	e002      	b.n	800bf02 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800befc:	2300      	movs	r3, #0
 800befe:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800bf00:	e199      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bf02:	e198      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800bf04:	4b79      	ldr	r3, [pc, #484]	; (800c0ec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800bf06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf08:	e195      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf0e:	e192      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bf16:	d173      	bne.n	800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800bf18:	4b70      	ldr	r3, [pc, #448]	; (800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bf1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bf20:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800bf22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf28:	d02f      	beq.n	800bf8a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800bf2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf30:	d863      	bhi.n	800bffa <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800bf32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d004      	beq.n	800bf42 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800bf38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf3e:	d012      	beq.n	800bf66 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 800bf40:	e05b      	b.n	800bffa <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf42:	4b66      	ldr	r3, [pc, #408]	; (800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf4e:	d107      	bne.n	800bf60 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf50:	f107 0318 	add.w	r3, r7, #24
 800bf54:	4618      	mov	r0, r3
 800bf56:	f000 f991 	bl	800c27c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bf5a:	69bb      	ldr	r3, [r7, #24]
 800bf5c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bf5e:	e16a      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bf60:	2300      	movs	r3, #0
 800bf62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf64:	e167      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bf66:	4b5d      	ldr	r3, [pc, #372]	; (800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf72:	d107      	bne.n	800bf84 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf74:	f107 030c 	add.w	r3, r7, #12
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f000 fad3 	bl	800c524 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bf82:	e158      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bf84:	2300      	movs	r3, #0
 800bf86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf88:	e155      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bf8a:	4b54      	ldr	r3, [pc, #336]	; (800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bf8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf8e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bf92:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bf94:	4b51      	ldr	r3, [pc, #324]	; (800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	f003 0304 	and.w	r3, r3, #4
 800bf9c:	2b04      	cmp	r3, #4
 800bf9e:	d10c      	bne.n	800bfba <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 800bfa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d109      	bne.n	800bfba <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bfa6:	4b4d      	ldr	r3, [pc, #308]	; (800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	08db      	lsrs	r3, r3, #3
 800bfac:	f003 0303 	and.w	r3, r3, #3
 800bfb0:	4a4b      	ldr	r2, [pc, #300]	; (800c0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800bfb2:	fa22 f303 	lsr.w	r3, r2, r3
 800bfb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfb8:	e01e      	b.n	800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bfba:	4b48      	ldr	r3, [pc, #288]	; (800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfc6:	d106      	bne.n	800bfd6 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800bfc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bfce:	d102      	bne.n	800bfd6 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800bfd0:	4b44      	ldr	r3, [pc, #272]	; (800c0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800bfd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfd4:	e010      	b.n	800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bfd6:	4b41      	ldr	r3, [pc, #260]	; (800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bfe2:	d106      	bne.n	800bff2 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800bfe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfe6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfea:	d102      	bne.n	800bff2 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800bfec:	4b3e      	ldr	r3, [pc, #248]	; (800c0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800bfee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bff0:	e002      	b.n	800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800bff2:	2300      	movs	r3, #0
 800bff4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800bff6:	e11e      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bff8:	e11d      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800bffa:	2300      	movs	r3, #0
 800bffc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bffe:	e11a      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c006:	d133      	bne.n	800c070 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800c008:	4b34      	ldr	r3, [pc, #208]	; (800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c00a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c00c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c010:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800c012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c014:	2b00      	cmp	r3, #0
 800c016:	d004      	beq.n	800c022 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 800c018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c01a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c01e:	d012      	beq.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 800c020:	e023      	b.n	800c06a <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c022:	4b2e      	ldr	r3, [pc, #184]	; (800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c02a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c02e:	d107      	bne.n	800c040 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c030:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c034:	4618      	mov	r0, r3
 800c036:	f000 fbc9 	bl	800c7cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c03c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c03e:	e0fa      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c040:	2300      	movs	r3, #0
 800c042:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c044:	e0f7      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c046:	4b25      	ldr	r3, [pc, #148]	; (800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c04e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c052:	d107      	bne.n	800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c054:	f107 0318 	add.w	r3, r7, #24
 800c058:	4618      	mov	r0, r3
 800c05a:	f000 f90f 	bl	800c27c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c05e:	6a3b      	ldr	r3, [r7, #32]
 800c060:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c062:	e0e8      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c064:	2300      	movs	r3, #0
 800c066:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c068:	e0e5      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800c06a:	2300      	movs	r3, #0
 800c06c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c06e:	e0e2      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c076:	f040 808f 	bne.w	800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800c07a:	4b18      	ldr	r3, [pc, #96]	; (800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c07c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c07e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c082:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800c084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c086:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c08a:	d075      	beq.n	800c178 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 800c08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c08e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c092:	d87e      	bhi.n	800c192 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800c094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c09a:	d060      	beq.n	800c15e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800c09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c09e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0a2:	d876      	bhi.n	800c192 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800c0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c0aa:	d045      	beq.n	800c138 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800c0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c0b2:	d86e      	bhi.n	800c192 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800c0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0ba:	d02b      	beq.n	800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800c0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0c2:	d866      	bhi.n	800c192 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800c0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d004      	beq.n	800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800c0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c0d0:	d00e      	beq.n	800c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800c0d2:	e05e      	b.n	800c192 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c0d4:	f000 f8bc 	bl	800c250 <HAL_RCCEx_GetD3PCLK1Freq>
 800c0d8:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800c0da:	e0ac      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c0dc:	58024400 	.word	0x58024400
 800c0e0:	03d09000 	.word	0x03d09000
 800c0e4:	003d0900 	.word	0x003d0900
 800c0e8:	017d7840 	.word	0x017d7840
 800c0ec:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c0f0:	4b53      	ldr	r3, [pc, #332]	; (800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c0fc:	d107      	bne.n	800c10e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0fe:	f107 0318 	add.w	r3, r7, #24
 800c102:	4618      	mov	r0, r3
 800c104:	f000 f8ba 	bl	800c27c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c108:	69fb      	ldr	r3, [r7, #28]
 800c10a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c10c:	e093      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c10e:	2300      	movs	r3, #0
 800c110:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c112:	e090      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c114:	4b4a      	ldr	r3, [pc, #296]	; (800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c11c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c120:	d107      	bne.n	800c132 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c122:	f107 030c 	add.w	r3, r7, #12
 800c126:	4618      	mov	r0, r3
 800c128:	f000 f9fc 	bl	800c524 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c12c:	693b      	ldr	r3, [r7, #16]
 800c12e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c130:	e081      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c132:	2300      	movs	r3, #0
 800c134:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c136:	e07e      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c138:	4b41      	ldr	r3, [pc, #260]	; (800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f003 0304 	and.w	r3, r3, #4
 800c140:	2b04      	cmp	r3, #4
 800c142:	d109      	bne.n	800c158 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c144:	4b3e      	ldr	r3, [pc, #248]	; (800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	08db      	lsrs	r3, r3, #3
 800c14a:	f003 0303 	and.w	r3, r3, #3
 800c14e:	4a3d      	ldr	r2, [pc, #244]	; (800c244 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c150:	fa22 f303 	lsr.w	r3, r2, r3
 800c154:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c156:	e06e      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c158:	2300      	movs	r3, #0
 800c15a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c15c:	e06b      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c15e:	4b38      	ldr	r3, [pc, #224]	; (800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c16a:	d102      	bne.n	800c172 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 800c16c:	4b36      	ldr	r3, [pc, #216]	; (800c248 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c16e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c170:	e061      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c172:	2300      	movs	r3, #0
 800c174:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c176:	e05e      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c178:	4b31      	ldr	r3, [pc, #196]	; (800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c180:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c184:	d102      	bne.n	800c18c <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800c186:	4b31      	ldr	r3, [pc, #196]	; (800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c188:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c18a:	e054      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c18c:	2300      	movs	r3, #0
 800c18e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c190:	e051      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800c192:	2300      	movs	r3, #0
 800c194:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c196:	e04e      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c19e:	d148      	bne.n	800c232 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800c1a0:	4b27      	ldr	r3, [pc, #156]	; (800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c1a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c1a8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800c1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1b0:	d02a      	beq.n	800c208 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c1b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1b8:	d838      	bhi.n	800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d004      	beq.n	800c1ca <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c1c6:	d00d      	beq.n	800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c1c8:	e030      	b.n	800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c1ca:	4b1d      	ldr	r3, [pc, #116]	; (800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1d6:	d102      	bne.n	800c1de <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800c1d8:	4b1c      	ldr	r3, [pc, #112]	; (800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c1da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c1dc:	e02b      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1de:	2300      	movs	r3, #0
 800c1e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c1e2:	e028      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c1e4:	4b16      	ldr	r3, [pc, #88]	; (800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c1ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c1f0:	d107      	bne.n	800c202 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c1f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f000 fae8 	bl	800c7cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c200:	e019      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c202:	2300      	movs	r3, #0
 800c204:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c206:	e016      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c208:	4b0d      	ldr	r3, [pc, #52]	; (800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c210:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c214:	d107      	bne.n	800c226 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c216:	f107 0318 	add.w	r3, r7, #24
 800c21a:	4618      	mov	r0, r3
 800c21c:	f000 f82e 	bl	800c27c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c220:	69fb      	ldr	r3, [r7, #28]
 800c222:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c224:	e007      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c226:	2300      	movs	r3, #0
 800c228:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c22a:	e004      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800c22c:	2300      	movs	r3, #0
 800c22e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c230:	e001      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800c232:	2300      	movs	r3, #0
 800c234:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800c236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3740      	adds	r7, #64	; 0x40
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}
 800c240:	58024400 	.word	0x58024400
 800c244:	03d09000 	.word	0x03d09000
 800c248:	003d0900 	.word	0x003d0900
 800c24c:	017d7840 	.word	0x017d7840

0800c250 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c254:	f7fe fb8e 	bl	800a974 <HAL_RCC_GetHCLKFreq>
 800c258:	4602      	mov	r2, r0
 800c25a:	4b06      	ldr	r3, [pc, #24]	; (800c274 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c25c:	6a1b      	ldr	r3, [r3, #32]
 800c25e:	091b      	lsrs	r3, r3, #4
 800c260:	f003 0307 	and.w	r3, r3, #7
 800c264:	4904      	ldr	r1, [pc, #16]	; (800c278 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c266:	5ccb      	ldrb	r3, [r1, r3]
 800c268:	f003 031f 	and.w	r3, r3, #31
 800c26c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c270:	4618      	mov	r0, r3
 800c272:	bd80      	pop	{r7, pc}
 800c274:	58024400 	.word	0x58024400
 800c278:	08028adc 	.word	0x08028adc

0800c27c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800c27c:	b480      	push	{r7}
 800c27e:	b089      	sub	sp, #36	; 0x24
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c284:	4ba1      	ldr	r3, [pc, #644]	; (800c50c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c288:	f003 0303 	and.w	r3, r3, #3
 800c28c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800c28e:	4b9f      	ldr	r3, [pc, #636]	; (800c50c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c292:	0b1b      	lsrs	r3, r3, #12
 800c294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c298:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c29a:	4b9c      	ldr	r3, [pc, #624]	; (800c50c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c29c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c29e:	091b      	lsrs	r3, r3, #4
 800c2a0:	f003 0301 	and.w	r3, r3, #1
 800c2a4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800c2a6:	4b99      	ldr	r3, [pc, #612]	; (800c50c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2aa:	08db      	lsrs	r3, r3, #3
 800c2ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c2b0:	693a      	ldr	r2, [r7, #16]
 800c2b2:	fb02 f303 	mul.w	r3, r2, r3
 800c2b6:	ee07 3a90 	vmov	s15, r3
 800c2ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	f000 8111 	beq.w	800c4ec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c2ca:	69bb      	ldr	r3, [r7, #24]
 800c2cc:	2b02      	cmp	r3, #2
 800c2ce:	f000 8083 	beq.w	800c3d8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c2d2:	69bb      	ldr	r3, [r7, #24]
 800c2d4:	2b02      	cmp	r3, #2
 800c2d6:	f200 80a1 	bhi.w	800c41c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c2da:	69bb      	ldr	r3, [r7, #24]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d003      	beq.n	800c2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c2e0:	69bb      	ldr	r3, [r7, #24]
 800c2e2:	2b01      	cmp	r3, #1
 800c2e4:	d056      	beq.n	800c394 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c2e6:	e099      	b.n	800c41c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c2e8:	4b88      	ldr	r3, [pc, #544]	; (800c50c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	f003 0320 	and.w	r3, r3, #32
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d02d      	beq.n	800c350 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c2f4:	4b85      	ldr	r3, [pc, #532]	; (800c50c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	08db      	lsrs	r3, r3, #3
 800c2fa:	f003 0303 	and.w	r3, r3, #3
 800c2fe:	4a84      	ldr	r2, [pc, #528]	; (800c510 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c300:	fa22 f303 	lsr.w	r3, r2, r3
 800c304:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	ee07 3a90 	vmov	s15, r3
 800c30c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	ee07 3a90 	vmov	s15, r3
 800c316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c31a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c31e:	4b7b      	ldr	r3, [pc, #492]	; (800c50c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c326:	ee07 3a90 	vmov	s15, r3
 800c32a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c32e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c332:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c514 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c33a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c33e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c34a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c34e:	e087      	b.n	800c460 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	ee07 3a90 	vmov	s15, r3
 800c356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c35a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c518 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c35e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c362:	4b6a      	ldr	r3, [pc, #424]	; (800c50c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c36a:	ee07 3a90 	vmov	s15, r3
 800c36e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c372:	ed97 6a03 	vldr	s12, [r7, #12]
 800c376:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c514 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c37a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c37e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c38a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c38e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c392:	e065      	b.n	800c460 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	ee07 3a90 	vmov	s15, r3
 800c39a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c39e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c51c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c3a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3a6:	4b59      	ldr	r3, [pc, #356]	; (800c50c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c3a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3ae:	ee07 3a90 	vmov	s15, r3
 800c3b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c514 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c3be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c3ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c3d6:	e043      	b.n	800c460 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	ee07 3a90 	vmov	s15, r3
 800c3de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c520 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c3e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3ea:	4b48      	ldr	r3, [pc, #288]	; (800c50c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c3ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3f2:	ee07 3a90 	vmov	s15, r3
 800c3f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c514 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c40a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c40e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c412:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c416:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c41a:	e021      	b.n	800c460 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	ee07 3a90 	vmov	s15, r3
 800c422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c426:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c51c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c42a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c42e:	4b37      	ldr	r3, [pc, #220]	; (800c50c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c436:	ee07 3a90 	vmov	s15, r3
 800c43a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c43e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c442:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c514 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c44a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c44e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c45a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c45e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800c460:	4b2a      	ldr	r3, [pc, #168]	; (800c50c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c464:	0a5b      	lsrs	r3, r3, #9
 800c466:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c46a:	ee07 3a90 	vmov	s15, r3
 800c46e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c472:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c476:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c47a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c47e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c482:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c486:	ee17 2a90 	vmov	r2, s15
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800c48e:	4b1f      	ldr	r3, [pc, #124]	; (800c50c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c492:	0c1b      	lsrs	r3, r3, #16
 800c494:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c498:	ee07 3a90 	vmov	s15, r3
 800c49c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c4a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c4a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4b4:	ee17 2a90 	vmov	r2, s15
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800c4bc:	4b13      	ldr	r3, [pc, #76]	; (800c50c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4c0:	0e1b      	lsrs	r3, r3, #24
 800c4c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4c6:	ee07 3a90 	vmov	s15, r3
 800c4ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c4d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c4d6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4e2:	ee17 2a90 	vmov	r2, s15
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c4ea:	e008      	b.n	800c4fe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	609a      	str	r2, [r3, #8]
}
 800c4fe:	bf00      	nop
 800c500:	3724      	adds	r7, #36	; 0x24
 800c502:	46bd      	mov	sp, r7
 800c504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c508:	4770      	bx	lr
 800c50a:	bf00      	nop
 800c50c:	58024400 	.word	0x58024400
 800c510:	03d09000 	.word	0x03d09000
 800c514:	46000000 	.word	0x46000000
 800c518:	4c742400 	.word	0x4c742400
 800c51c:	4a742400 	.word	0x4a742400
 800c520:	4bbebc20 	.word	0x4bbebc20

0800c524 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800c524:	b480      	push	{r7}
 800c526:	b089      	sub	sp, #36	; 0x24
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c52c:	4ba1      	ldr	r3, [pc, #644]	; (800c7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c52e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c530:	f003 0303 	and.w	r3, r3, #3
 800c534:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800c536:	4b9f      	ldr	r3, [pc, #636]	; (800c7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c53a:	0d1b      	lsrs	r3, r3, #20
 800c53c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c540:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c542:	4b9c      	ldr	r3, [pc, #624]	; (800c7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c546:	0a1b      	lsrs	r3, r3, #8
 800c548:	f003 0301 	and.w	r3, r3, #1
 800c54c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800c54e:	4b99      	ldr	r3, [pc, #612]	; (800c7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c552:	08db      	lsrs	r3, r3, #3
 800c554:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c558:	693a      	ldr	r2, [r7, #16]
 800c55a:	fb02 f303 	mul.w	r3, r2, r3
 800c55e:	ee07 3a90 	vmov	s15, r3
 800c562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c566:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	f000 8111 	beq.w	800c794 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c572:	69bb      	ldr	r3, [r7, #24]
 800c574:	2b02      	cmp	r3, #2
 800c576:	f000 8083 	beq.w	800c680 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c57a:	69bb      	ldr	r3, [r7, #24]
 800c57c:	2b02      	cmp	r3, #2
 800c57e:	f200 80a1 	bhi.w	800c6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c582:	69bb      	ldr	r3, [r7, #24]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d003      	beq.n	800c590 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c588:	69bb      	ldr	r3, [r7, #24]
 800c58a:	2b01      	cmp	r3, #1
 800c58c:	d056      	beq.n	800c63c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c58e:	e099      	b.n	800c6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c590:	4b88      	ldr	r3, [pc, #544]	; (800c7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	f003 0320 	and.w	r3, r3, #32
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d02d      	beq.n	800c5f8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c59c:	4b85      	ldr	r3, [pc, #532]	; (800c7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	08db      	lsrs	r3, r3, #3
 800c5a2:	f003 0303 	and.w	r3, r3, #3
 800c5a6:	4a84      	ldr	r2, [pc, #528]	; (800c7b8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c5a8:	fa22 f303 	lsr.w	r3, r2, r3
 800c5ac:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	ee07 3a90 	vmov	s15, r3
 800c5b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5b8:	697b      	ldr	r3, [r7, #20]
 800c5ba:	ee07 3a90 	vmov	s15, r3
 800c5be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5c6:	4b7b      	ldr	r3, [pc, #492]	; (800c7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c5c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5ce:	ee07 3a90 	vmov	s15, r3
 800c5d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5da:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c7bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c5de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5f2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c5f6:	e087      	b.n	800c708 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c5f8:	697b      	ldr	r3, [r7, #20]
 800c5fa:	ee07 3a90 	vmov	s15, r3
 800c5fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c602:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c7c0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c60a:	4b6a      	ldr	r3, [pc, #424]	; (800c7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c60c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c60e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c612:	ee07 3a90 	vmov	s15, r3
 800c616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c61a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c61e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c7bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c62a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c62e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c632:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c636:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c63a:	e065      	b.n	800c708 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	ee07 3a90 	vmov	s15, r3
 800c642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c646:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c64a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c64e:	4b59      	ldr	r3, [pc, #356]	; (800c7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c656:	ee07 3a90 	vmov	s15, r3
 800c65a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c65e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c662:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c7bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c66a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c66e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c67a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c67e:	e043      	b.n	800c708 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c680:	697b      	ldr	r3, [r7, #20]
 800c682:	ee07 3a90 	vmov	s15, r3
 800c686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c68a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c7c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c68e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c692:	4b48      	ldr	r3, [pc, #288]	; (800c7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c69a:	ee07 3a90 	vmov	s15, r3
 800c69e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c7bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c6aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c6c2:	e021      	b.n	800c708 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	ee07 3a90 	vmov	s15, r3
 800c6ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c6d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6d6:	4b37      	ldr	r3, [pc, #220]	; (800c7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c6d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6de:	ee07 3a90 	vmov	s15, r3
 800c6e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c7bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c6ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c702:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c706:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800c708:	4b2a      	ldr	r3, [pc, #168]	; (800c7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c70a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c70c:	0a5b      	lsrs	r3, r3, #9
 800c70e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c712:	ee07 3a90 	vmov	s15, r3
 800c716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c71a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c71e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c722:	edd7 6a07 	vldr	s13, [r7, #28]
 800c726:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c72a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c72e:	ee17 2a90 	vmov	r2, s15
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800c736:	4b1f      	ldr	r3, [pc, #124]	; (800c7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c73a:	0c1b      	lsrs	r3, r3, #16
 800c73c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c740:	ee07 3a90 	vmov	s15, r3
 800c744:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c748:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c74c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c750:	edd7 6a07 	vldr	s13, [r7, #28]
 800c754:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c758:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c75c:	ee17 2a90 	vmov	r2, s15
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800c764:	4b13      	ldr	r3, [pc, #76]	; (800c7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c768:	0e1b      	lsrs	r3, r3, #24
 800c76a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c76e:	ee07 3a90 	vmov	s15, r3
 800c772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c776:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c77a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c77e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c782:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c786:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c78a:	ee17 2a90 	vmov	r2, s15
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c792:	e008      	b.n	800c7a6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2200      	movs	r2, #0
 800c798:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2200      	movs	r2, #0
 800c79e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	609a      	str	r2, [r3, #8]
}
 800c7a6:	bf00      	nop
 800c7a8:	3724      	adds	r7, #36	; 0x24
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b0:	4770      	bx	lr
 800c7b2:	bf00      	nop
 800c7b4:	58024400 	.word	0x58024400
 800c7b8:	03d09000 	.word	0x03d09000
 800c7bc:	46000000 	.word	0x46000000
 800c7c0:	4c742400 	.word	0x4c742400
 800c7c4:	4a742400 	.word	0x4a742400
 800c7c8:	4bbebc20 	.word	0x4bbebc20

0800c7cc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	b089      	sub	sp, #36	; 0x24
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c7d4:	4ba0      	ldr	r3, [pc, #640]	; (800ca58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c7d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7d8:	f003 0303 	and.w	r3, r3, #3
 800c7dc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800c7de:	4b9e      	ldr	r3, [pc, #632]	; (800ca58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c7e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7e2:	091b      	lsrs	r3, r3, #4
 800c7e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c7e8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c7ea:	4b9b      	ldr	r3, [pc, #620]	; (800ca58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c7ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7ee:	f003 0301 	and.w	r3, r3, #1
 800c7f2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800c7f4:	4b98      	ldr	r3, [pc, #608]	; (800ca58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c7f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7f8:	08db      	lsrs	r3, r3, #3
 800c7fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c7fe:	693a      	ldr	r2, [r7, #16]
 800c800:	fb02 f303 	mul.w	r3, r2, r3
 800c804:	ee07 3a90 	vmov	s15, r3
 800c808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c80c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	2b00      	cmp	r3, #0
 800c814:	f000 8111 	beq.w	800ca3a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c818:	69bb      	ldr	r3, [r7, #24]
 800c81a:	2b02      	cmp	r3, #2
 800c81c:	f000 8083 	beq.w	800c926 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c820:	69bb      	ldr	r3, [r7, #24]
 800c822:	2b02      	cmp	r3, #2
 800c824:	f200 80a1 	bhi.w	800c96a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c828:	69bb      	ldr	r3, [r7, #24]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d003      	beq.n	800c836 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c82e:	69bb      	ldr	r3, [r7, #24]
 800c830:	2b01      	cmp	r3, #1
 800c832:	d056      	beq.n	800c8e2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c834:	e099      	b.n	800c96a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c836:	4b88      	ldr	r3, [pc, #544]	; (800ca58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f003 0320 	and.w	r3, r3, #32
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d02d      	beq.n	800c89e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c842:	4b85      	ldr	r3, [pc, #532]	; (800ca58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	08db      	lsrs	r3, r3, #3
 800c848:	f003 0303 	and.w	r3, r3, #3
 800c84c:	4a83      	ldr	r2, [pc, #524]	; (800ca5c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c84e:	fa22 f303 	lsr.w	r3, r2, r3
 800c852:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	ee07 3a90 	vmov	s15, r3
 800c85a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	ee07 3a90 	vmov	s15, r3
 800c864:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c868:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c86c:	4b7a      	ldr	r3, [pc, #488]	; (800ca58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c86e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c874:	ee07 3a90 	vmov	s15, r3
 800c878:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c87c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c880:	eddf 5a77 	vldr	s11, [pc, #476]	; 800ca60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c884:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c888:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c88c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c890:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c894:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c898:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c89c:	e087      	b.n	800c9ae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	ee07 3a90 	vmov	s15, r3
 800c8a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8a8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800ca64 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c8ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8b0:	4b69      	ldr	r3, [pc, #420]	; (800ca58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c8b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8b8:	ee07 3a90 	vmov	s15, r3
 800c8bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8c0:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8c4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800ca60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c8c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c8e0:	e065      	b.n	800c9ae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	ee07 3a90 	vmov	s15, r3
 800c8e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8ec:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800ca68 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c8f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8f4:	4b58      	ldr	r3, [pc, #352]	; (800ca58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c8f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8fc:	ee07 3a90 	vmov	s15, r3
 800c900:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c904:	ed97 6a03 	vldr	s12, [r7, #12]
 800c908:	eddf 5a55 	vldr	s11, [pc, #340]	; 800ca60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c90c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c910:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c914:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c918:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c91c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c920:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c924:	e043      	b.n	800c9ae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c926:	697b      	ldr	r3, [r7, #20]
 800c928:	ee07 3a90 	vmov	s15, r3
 800c92c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c930:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800ca6c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c934:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c938:	4b47      	ldr	r3, [pc, #284]	; (800ca58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c93a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c93c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c940:	ee07 3a90 	vmov	s15, r3
 800c944:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c948:	ed97 6a03 	vldr	s12, [r7, #12]
 800c94c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ca60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c950:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c954:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c958:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c95c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c960:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c964:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c968:	e021      	b.n	800c9ae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	ee07 3a90 	vmov	s15, r3
 800c970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c974:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800ca64 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c978:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c97c:	4b36      	ldr	r3, [pc, #216]	; (800ca58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c97e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c984:	ee07 3a90 	vmov	s15, r3
 800c988:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c98c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c990:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ca60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c994:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c998:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c99c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c9ac:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800c9ae:	4b2a      	ldr	r3, [pc, #168]	; (800ca58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c9b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9b2:	0a5b      	lsrs	r3, r3, #9
 800c9b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9b8:	ee07 3a90 	vmov	s15, r3
 800c9bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c9c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c9c8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c9cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c9d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9d4:	ee17 2a90 	vmov	r2, s15
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800c9dc:	4b1e      	ldr	r3, [pc, #120]	; (800ca58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c9de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9e0:	0c1b      	lsrs	r3, r3, #16
 800c9e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9e6:	ee07 3a90 	vmov	s15, r3
 800c9ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c9f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c9f6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c9fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c9fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca02:	ee17 2a90 	vmov	r2, s15
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800ca0a:	4b13      	ldr	r3, [pc, #76]	; (800ca58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca0e:	0e1b      	lsrs	r3, r3, #24
 800ca10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca14:	ee07 3a90 	vmov	s15, r3
 800ca18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca20:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca24:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca30:	ee17 2a90 	vmov	r2, s15
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ca38:	e008      	b.n	800ca4c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2200      	movs	r2, #0
 800ca44:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2200      	movs	r2, #0
 800ca4a:	609a      	str	r2, [r3, #8]
}
 800ca4c:	bf00      	nop
 800ca4e:	3724      	adds	r7, #36	; 0x24
 800ca50:	46bd      	mov	sp, r7
 800ca52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca56:	4770      	bx	lr
 800ca58:	58024400 	.word	0x58024400
 800ca5c:	03d09000 	.word	0x03d09000
 800ca60:	46000000 	.word	0x46000000
 800ca64:	4c742400 	.word	0x4c742400
 800ca68:	4a742400 	.word	0x4a742400
 800ca6c:	4bbebc20 	.word	0x4bbebc20

0800ca70 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b084      	sub	sp, #16
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
 800ca78:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ca7e:	4b53      	ldr	r3, [pc, #332]	; (800cbcc <RCCEx_PLL2_Config+0x15c>)
 800ca80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca82:	f003 0303 	and.w	r3, r3, #3
 800ca86:	2b03      	cmp	r3, #3
 800ca88:	d101      	bne.n	800ca8e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	e099      	b.n	800cbc2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ca8e:	4b4f      	ldr	r3, [pc, #316]	; (800cbcc <RCCEx_PLL2_Config+0x15c>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	4a4e      	ldr	r2, [pc, #312]	; (800cbcc <RCCEx_PLL2_Config+0x15c>)
 800ca94:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ca98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca9a:	f7f7 fab1 	bl	8004000 <HAL_GetTick>
 800ca9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800caa0:	e008      	b.n	800cab4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800caa2:	f7f7 faad 	bl	8004000 <HAL_GetTick>
 800caa6:	4602      	mov	r2, r0
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	1ad3      	subs	r3, r2, r3
 800caac:	2b02      	cmp	r3, #2
 800caae:	d901      	bls.n	800cab4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cab0:	2303      	movs	r3, #3
 800cab2:	e086      	b.n	800cbc2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cab4:	4b45      	ldr	r3, [pc, #276]	; (800cbcc <RCCEx_PLL2_Config+0x15c>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d1f0      	bne.n	800caa2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cac0:	4b42      	ldr	r3, [pc, #264]	; (800cbcc <RCCEx_PLL2_Config+0x15c>)
 800cac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cac4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	031b      	lsls	r3, r3, #12
 800cace:	493f      	ldr	r1, [pc, #252]	; (800cbcc <RCCEx_PLL2_Config+0x15c>)
 800cad0:	4313      	orrs	r3, r2
 800cad2:	628b      	str	r3, [r1, #40]	; 0x28
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	685b      	ldr	r3, [r3, #4]
 800cad8:	3b01      	subs	r3, #1
 800cada:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	689b      	ldr	r3, [r3, #8]
 800cae2:	3b01      	subs	r3, #1
 800cae4:	025b      	lsls	r3, r3, #9
 800cae6:	b29b      	uxth	r3, r3
 800cae8:	431a      	orrs	r2, r3
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	68db      	ldr	r3, [r3, #12]
 800caee:	3b01      	subs	r3, #1
 800caf0:	041b      	lsls	r3, r3, #16
 800caf2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800caf6:	431a      	orrs	r2, r3
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	691b      	ldr	r3, [r3, #16]
 800cafc:	3b01      	subs	r3, #1
 800cafe:	061b      	lsls	r3, r3, #24
 800cb00:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cb04:	4931      	ldr	r1, [pc, #196]	; (800cbcc <RCCEx_PLL2_Config+0x15c>)
 800cb06:	4313      	orrs	r3, r2
 800cb08:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cb0a:	4b30      	ldr	r3, [pc, #192]	; (800cbcc <RCCEx_PLL2_Config+0x15c>)
 800cb0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb0e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	695b      	ldr	r3, [r3, #20]
 800cb16:	492d      	ldr	r1, [pc, #180]	; (800cbcc <RCCEx_PLL2_Config+0x15c>)
 800cb18:	4313      	orrs	r3, r2
 800cb1a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cb1c:	4b2b      	ldr	r3, [pc, #172]	; (800cbcc <RCCEx_PLL2_Config+0x15c>)
 800cb1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb20:	f023 0220 	bic.w	r2, r3, #32
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	699b      	ldr	r3, [r3, #24]
 800cb28:	4928      	ldr	r1, [pc, #160]	; (800cbcc <RCCEx_PLL2_Config+0x15c>)
 800cb2a:	4313      	orrs	r3, r2
 800cb2c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cb2e:	4b27      	ldr	r3, [pc, #156]	; (800cbcc <RCCEx_PLL2_Config+0x15c>)
 800cb30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb32:	4a26      	ldr	r2, [pc, #152]	; (800cbcc <RCCEx_PLL2_Config+0x15c>)
 800cb34:	f023 0310 	bic.w	r3, r3, #16
 800cb38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cb3a:	4b24      	ldr	r3, [pc, #144]	; (800cbcc <RCCEx_PLL2_Config+0x15c>)
 800cb3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cb3e:	4b24      	ldr	r3, [pc, #144]	; (800cbd0 <RCCEx_PLL2_Config+0x160>)
 800cb40:	4013      	ands	r3, r2
 800cb42:	687a      	ldr	r2, [r7, #4]
 800cb44:	69d2      	ldr	r2, [r2, #28]
 800cb46:	00d2      	lsls	r2, r2, #3
 800cb48:	4920      	ldr	r1, [pc, #128]	; (800cbcc <RCCEx_PLL2_Config+0x15c>)
 800cb4a:	4313      	orrs	r3, r2
 800cb4c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cb4e:	4b1f      	ldr	r3, [pc, #124]	; (800cbcc <RCCEx_PLL2_Config+0x15c>)
 800cb50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb52:	4a1e      	ldr	r2, [pc, #120]	; (800cbcc <RCCEx_PLL2_Config+0x15c>)
 800cb54:	f043 0310 	orr.w	r3, r3, #16
 800cb58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d106      	bne.n	800cb6e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cb60:	4b1a      	ldr	r3, [pc, #104]	; (800cbcc <RCCEx_PLL2_Config+0x15c>)
 800cb62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb64:	4a19      	ldr	r2, [pc, #100]	; (800cbcc <RCCEx_PLL2_Config+0x15c>)
 800cb66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cb6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cb6c:	e00f      	b.n	800cb8e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	2b01      	cmp	r3, #1
 800cb72:	d106      	bne.n	800cb82 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cb74:	4b15      	ldr	r3, [pc, #84]	; (800cbcc <RCCEx_PLL2_Config+0x15c>)
 800cb76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb78:	4a14      	ldr	r2, [pc, #80]	; (800cbcc <RCCEx_PLL2_Config+0x15c>)
 800cb7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cb80:	e005      	b.n	800cb8e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cb82:	4b12      	ldr	r3, [pc, #72]	; (800cbcc <RCCEx_PLL2_Config+0x15c>)
 800cb84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb86:	4a11      	ldr	r2, [pc, #68]	; (800cbcc <RCCEx_PLL2_Config+0x15c>)
 800cb88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cb8c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cb8e:	4b0f      	ldr	r3, [pc, #60]	; (800cbcc <RCCEx_PLL2_Config+0x15c>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	4a0e      	ldr	r2, [pc, #56]	; (800cbcc <RCCEx_PLL2_Config+0x15c>)
 800cb94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cb98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb9a:	f7f7 fa31 	bl	8004000 <HAL_GetTick>
 800cb9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cba0:	e008      	b.n	800cbb4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800cba2:	f7f7 fa2d 	bl	8004000 <HAL_GetTick>
 800cba6:	4602      	mov	r2, r0
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	1ad3      	subs	r3, r2, r3
 800cbac:	2b02      	cmp	r3, #2
 800cbae:	d901      	bls.n	800cbb4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cbb0:	2303      	movs	r3, #3
 800cbb2:	e006      	b.n	800cbc2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cbb4:	4b05      	ldr	r3, [pc, #20]	; (800cbcc <RCCEx_PLL2_Config+0x15c>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d0f0      	beq.n	800cba2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cbc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3710      	adds	r7, #16
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}
 800cbca:	bf00      	nop
 800cbcc:	58024400 	.word	0x58024400
 800cbd0:	ffff0007 	.word	0xffff0007

0800cbd4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b084      	sub	sp, #16
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
 800cbdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cbe2:	4b53      	ldr	r3, [pc, #332]	; (800cd30 <RCCEx_PLL3_Config+0x15c>)
 800cbe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbe6:	f003 0303 	and.w	r3, r3, #3
 800cbea:	2b03      	cmp	r3, #3
 800cbec:	d101      	bne.n	800cbf2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cbee:	2301      	movs	r3, #1
 800cbf0:	e099      	b.n	800cd26 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cbf2:	4b4f      	ldr	r3, [pc, #316]	; (800cd30 <RCCEx_PLL3_Config+0x15c>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	4a4e      	ldr	r2, [pc, #312]	; (800cd30 <RCCEx_PLL3_Config+0x15c>)
 800cbf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cbfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cbfe:	f7f7 f9ff 	bl	8004000 <HAL_GetTick>
 800cc02:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cc04:	e008      	b.n	800cc18 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800cc06:	f7f7 f9fb 	bl	8004000 <HAL_GetTick>
 800cc0a:	4602      	mov	r2, r0
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	1ad3      	subs	r3, r2, r3
 800cc10:	2b02      	cmp	r3, #2
 800cc12:	d901      	bls.n	800cc18 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cc14:	2303      	movs	r3, #3
 800cc16:	e086      	b.n	800cd26 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cc18:	4b45      	ldr	r3, [pc, #276]	; (800cd30 <RCCEx_PLL3_Config+0x15c>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d1f0      	bne.n	800cc06 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cc24:	4b42      	ldr	r3, [pc, #264]	; (800cd30 <RCCEx_PLL3_Config+0x15c>)
 800cc26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc28:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	051b      	lsls	r3, r3, #20
 800cc32:	493f      	ldr	r1, [pc, #252]	; (800cd30 <RCCEx_PLL3_Config+0x15c>)
 800cc34:	4313      	orrs	r3, r2
 800cc36:	628b      	str	r3, [r1, #40]	; 0x28
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	685b      	ldr	r3, [r3, #4]
 800cc3c:	3b01      	subs	r3, #1
 800cc3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	689b      	ldr	r3, [r3, #8]
 800cc46:	3b01      	subs	r3, #1
 800cc48:	025b      	lsls	r3, r3, #9
 800cc4a:	b29b      	uxth	r3, r3
 800cc4c:	431a      	orrs	r2, r3
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	68db      	ldr	r3, [r3, #12]
 800cc52:	3b01      	subs	r3, #1
 800cc54:	041b      	lsls	r3, r3, #16
 800cc56:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cc5a:	431a      	orrs	r2, r3
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	691b      	ldr	r3, [r3, #16]
 800cc60:	3b01      	subs	r3, #1
 800cc62:	061b      	lsls	r3, r3, #24
 800cc64:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cc68:	4931      	ldr	r1, [pc, #196]	; (800cd30 <RCCEx_PLL3_Config+0x15c>)
 800cc6a:	4313      	orrs	r3, r2
 800cc6c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cc6e:	4b30      	ldr	r3, [pc, #192]	; (800cd30 <RCCEx_PLL3_Config+0x15c>)
 800cc70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	695b      	ldr	r3, [r3, #20]
 800cc7a:	492d      	ldr	r1, [pc, #180]	; (800cd30 <RCCEx_PLL3_Config+0x15c>)
 800cc7c:	4313      	orrs	r3, r2
 800cc7e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cc80:	4b2b      	ldr	r3, [pc, #172]	; (800cd30 <RCCEx_PLL3_Config+0x15c>)
 800cc82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc84:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	699b      	ldr	r3, [r3, #24]
 800cc8c:	4928      	ldr	r1, [pc, #160]	; (800cd30 <RCCEx_PLL3_Config+0x15c>)
 800cc8e:	4313      	orrs	r3, r2
 800cc90:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cc92:	4b27      	ldr	r3, [pc, #156]	; (800cd30 <RCCEx_PLL3_Config+0x15c>)
 800cc94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc96:	4a26      	ldr	r2, [pc, #152]	; (800cd30 <RCCEx_PLL3_Config+0x15c>)
 800cc98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cc9e:	4b24      	ldr	r3, [pc, #144]	; (800cd30 <RCCEx_PLL3_Config+0x15c>)
 800cca0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cca2:	4b24      	ldr	r3, [pc, #144]	; (800cd34 <RCCEx_PLL3_Config+0x160>)
 800cca4:	4013      	ands	r3, r2
 800cca6:	687a      	ldr	r2, [r7, #4]
 800cca8:	69d2      	ldr	r2, [r2, #28]
 800ccaa:	00d2      	lsls	r2, r2, #3
 800ccac:	4920      	ldr	r1, [pc, #128]	; (800cd30 <RCCEx_PLL3_Config+0x15c>)
 800ccae:	4313      	orrs	r3, r2
 800ccb0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ccb2:	4b1f      	ldr	r3, [pc, #124]	; (800cd30 <RCCEx_PLL3_Config+0x15c>)
 800ccb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccb6:	4a1e      	ldr	r2, [pc, #120]	; (800cd30 <RCCEx_PLL3_Config+0x15c>)
 800ccb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ccbc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d106      	bne.n	800ccd2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ccc4:	4b1a      	ldr	r3, [pc, #104]	; (800cd30 <RCCEx_PLL3_Config+0x15c>)
 800ccc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccc8:	4a19      	ldr	r2, [pc, #100]	; (800cd30 <RCCEx_PLL3_Config+0x15c>)
 800ccca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ccce:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ccd0:	e00f      	b.n	800ccf2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	2b01      	cmp	r3, #1
 800ccd6:	d106      	bne.n	800cce6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ccd8:	4b15      	ldr	r3, [pc, #84]	; (800cd30 <RCCEx_PLL3_Config+0x15c>)
 800ccda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccdc:	4a14      	ldr	r2, [pc, #80]	; (800cd30 <RCCEx_PLL3_Config+0x15c>)
 800ccde:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cce2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cce4:	e005      	b.n	800ccf2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cce6:	4b12      	ldr	r3, [pc, #72]	; (800cd30 <RCCEx_PLL3_Config+0x15c>)
 800cce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccea:	4a11      	ldr	r2, [pc, #68]	; (800cd30 <RCCEx_PLL3_Config+0x15c>)
 800ccec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ccf0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ccf2:	4b0f      	ldr	r3, [pc, #60]	; (800cd30 <RCCEx_PLL3_Config+0x15c>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	4a0e      	ldr	r2, [pc, #56]	; (800cd30 <RCCEx_PLL3_Config+0x15c>)
 800ccf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ccfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ccfe:	f7f7 f97f 	bl	8004000 <HAL_GetTick>
 800cd02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cd04:	e008      	b.n	800cd18 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800cd06:	f7f7 f97b 	bl	8004000 <HAL_GetTick>
 800cd0a:	4602      	mov	r2, r0
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	1ad3      	subs	r3, r2, r3
 800cd10:	2b02      	cmp	r3, #2
 800cd12:	d901      	bls.n	800cd18 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cd14:	2303      	movs	r3, #3
 800cd16:	e006      	b.n	800cd26 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cd18:	4b05      	ldr	r3, [pc, #20]	; (800cd30 <RCCEx_PLL3_Config+0x15c>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d0f0      	beq.n	800cd06 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cd24:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	3710      	adds	r7, #16
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
 800cd2e:	bf00      	nop
 800cd30:	58024400 	.word	0x58024400
 800cd34:	ffff0007 	.word	0xffff0007

0800cd38 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b084      	sub	sp, #16
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d101      	bne.n	800cd4a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800cd46:	2301      	movs	r3, #1
 800cd48:	e04d      	b.n	800cde6 <HAL_RNG_Init+0xae>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	7a5b      	ldrb	r3, [r3, #9]
 800cd4e:	b2db      	uxtb	r3, r3
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d105      	bne.n	800cd60 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2200      	movs	r2, #0
 800cd58:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f7f5 ff86 	bl	8002c6c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2202      	movs	r2, #2
 800cd64:	725a      	strb	r2, [r3, #9]
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	f023 0120 	bic.w	r1, r3, #32
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	685a      	ldr	r2, [r3, #4]
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	430a      	orrs	r2, r1
 800cd7a:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	681a      	ldr	r2, [r3, #0]
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	f042 0204 	orr.w	r2, r2, #4
 800cd8a:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	685b      	ldr	r3, [r3, #4]
 800cd92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd96:	2b40      	cmp	r3, #64	; 0x40
 800cd98:	d104      	bne.n	800cda4 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2204      	movs	r2, #4
 800cd9e:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800cda0:	2301      	movs	r3, #1
 800cda2:	e020      	b.n	800cde6 <HAL_RNG_Init+0xae>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800cda4:	f7f7 f92c 	bl	8004000 <HAL_GetTick>
 800cda8:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800cdaa:	e00e      	b.n	800cdca <HAL_RNG_Init+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800cdac:	f7f7 f928 	bl	8004000 <HAL_GetTick>
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	1ad3      	subs	r3, r2, r3
 800cdb6:	2b02      	cmp	r3, #2
 800cdb8:	d907      	bls.n	800cdca <HAL_RNG_Init+0x92>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2204      	movs	r2, #4
 800cdbe:	725a      	strb	r2, [r3, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2202      	movs	r2, #2
 800cdc4:	60da      	str	r2, [r3, #12]
      return HAL_ERROR;
 800cdc6:	2301      	movs	r3, #1
 800cdc8:	e00d      	b.n	800cde6 <HAL_RNG_Init+0xae>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	685b      	ldr	r3, [r3, #4]
 800cdd0:	f003 0304 	and.w	r3, r3, #4
 800cdd4:	2b04      	cmp	r3, #4
 800cdd6:	d0e9      	beq.n	800cdac <HAL_RNG_Init+0x74>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2201      	movs	r2, #1
 800cddc:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	2200      	movs	r2, #0
 800cde2:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800cde4:	2300      	movs	r3, #0
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	3710      	adds	r7, #16
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}

0800cdee <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800cdee:	b580      	push	{r7, lr}
 800cdf0:	b084      	sub	sp, #16
 800cdf2:	af00      	add	r7, sp, #0
 800cdf4:	6078      	str	r0, [r7, #4]
 800cdf6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	7a1b      	ldrb	r3, [r3, #8]
 800ce00:	2b01      	cmp	r3, #1
 800ce02:	d101      	bne.n	800ce08 <HAL_RNG_GenerateRandomNumber+0x1a>
 800ce04:	2302      	movs	r3, #2
 800ce06:	e03d      	b.n	800ce84 <HAL_RNG_GenerateRandomNumber+0x96>
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2201      	movs	r2, #1
 800ce0c:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	7a5b      	ldrb	r3, [r3, #9]
 800ce12:	b2db      	uxtb	r3, r3
 800ce14:	2b01      	cmp	r3, #1
 800ce16:	d12c      	bne.n	800ce72 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2202      	movs	r2, #2
 800ce1c:	725a      	strb	r2, [r3, #9]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 800ce1e:	f7f7 f8ef 	bl	8004000 <HAL_GetTick>
 800ce22:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800ce24:	e011      	b.n	800ce4a <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800ce26:	f7f7 f8eb 	bl	8004000 <HAL_GetTick>
 800ce2a:	4602      	mov	r2, r0
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	1ad3      	subs	r3, r2, r3
 800ce30:	2b02      	cmp	r3, #2
 800ce32:	d90a      	bls.n	800ce4a <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2201      	movs	r2, #1
 800ce38:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2202      	movs	r2, #2
 800ce3e:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2200      	movs	r2, #0
 800ce44:	721a      	strb	r2, [r3, #8]
        return HAL_ERROR;
 800ce46:	2301      	movs	r3, #1
 800ce48:	e01c      	b.n	800ce84 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	685b      	ldr	r3, [r3, #4]
 800ce50:	f003 0301 	and.w	r3, r3, #1
 800ce54:	2b01      	cmp	r3, #1
 800ce56:	d1e6      	bne.n	800ce26 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	689a      	ldr	r2, [r3, #8]
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	611a      	str	r2, [r3, #16]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	691a      	ldr	r2, [r3, #16]
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2201      	movs	r2, #1
 800ce6e:	725a      	strb	r2, [r3, #9]
 800ce70:	e004      	b.n	800ce7c <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	2204      	movs	r2, #4
 800ce76:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800ce78:	2301      	movs	r3, #1
 800ce7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2200      	movs	r2, #0
 800ce80:	721a      	strb	r2, [r3, #8]

  return status;
 800ce82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	3710      	adds	r7, #16
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}

0800ce8c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b086      	sub	sp, #24
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	60f8      	str	r0, [r7, #12]
 800ce94:	60b9      	str	r1, [r7, #8]
 800ce96:	607a      	str	r2, [r7, #4]
 800ce98:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800ce9a:	68bb      	ldr	r3, [r7, #8]
 800ce9c:	2b02      	cmp	r3, #2
 800ce9e:	d904      	bls.n	800ceaa <HAL_SAI_InitProtocol+0x1e>
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	3b03      	subs	r3, #3
 800cea4:	2b01      	cmp	r3, #1
 800cea6:	d812      	bhi.n	800cece <HAL_SAI_InitProtocol+0x42>
 800cea8:	e008      	b.n	800cebc <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	687a      	ldr	r2, [r7, #4]
 800ceae:	68b9      	ldr	r1, [r7, #8]
 800ceb0:	68f8      	ldr	r0, [r7, #12]
 800ceb2:	f000 fb7d 	bl	800d5b0 <SAI_InitI2S>
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	75fb      	strb	r3, [r7, #23]
      break;
 800ceba:	e00b      	b.n	800ced4 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	687a      	ldr	r2, [r7, #4]
 800cec0:	68b9      	ldr	r1, [r7, #8]
 800cec2:	68f8      	ldr	r0, [r7, #12]
 800cec4:	f000 fc26 	bl	800d714 <SAI_InitPCM>
 800cec8:	4603      	mov	r3, r0
 800ceca:	75fb      	strb	r3, [r7, #23]
      break;
 800cecc:	e002      	b.n	800ced4 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800cece:	2301      	movs	r3, #1
 800ced0:	75fb      	strb	r3, [r7, #23]
      break;
 800ced2:	bf00      	nop
  }

  if (status == HAL_OK)
 800ced4:	7dfb      	ldrb	r3, [r7, #23]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d104      	bne.n	800cee4 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800ceda:	68f8      	ldr	r0, [r7, #12]
 800cedc:	f000 f808 	bl	800cef0 <HAL_SAI_Init>
 800cee0:	4603      	mov	r3, r0
 800cee2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800cee4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3718      	adds	r7, #24
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}
	...

0800cef0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b08a      	sub	sp, #40	; 0x28
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d101      	bne.n	800cf02 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800cefe:	2301      	movs	r3, #1
 800cf00:	e283      	b.n	800d40a <HAL_SAI_Init+0x51a>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800cf02:	f7f7 f8ad 	bl	8004060 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cf0c:	2b01      	cmp	r3, #1
 800cf0e:	d113      	bne.n	800cf38 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	4a94      	ldr	r2, [pc, #592]	; (800d168 <HAL_SAI_Init+0x278>)
 800cf16:	4293      	cmp	r3, r2
 800cf18:	d004      	beq.n	800cf24 <HAL_SAI_Init+0x34>
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	4a93      	ldr	r2, [pc, #588]	; (800d16c <HAL_SAI_Init+0x27c>)
 800cf20:	4293      	cmp	r3, r2
 800cf22:	d107      	bne.n	800cf34 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800cf28:	2b01      	cmp	r3, #1
 800cf2a:	d103      	bne.n	800cf34 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d001      	beq.n	800cf38 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800cf34:	2301      	movs	r3, #1
 800cf36:	e268      	b.n	800d40a <HAL_SAI_Init+0x51a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	4a8a      	ldr	r2, [pc, #552]	; (800d168 <HAL_SAI_Init+0x278>)
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d004      	beq.n	800cf4c <HAL_SAI_Init+0x5c>
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	4a8a      	ldr	r2, [pc, #552]	; (800d170 <HAL_SAI_Init+0x280>)
 800cf48:	4293      	cmp	r3, r2
 800cf4a:	d102      	bne.n	800cf52 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800cf4c:	4b89      	ldr	r3, [pc, #548]	; (800d174 <HAL_SAI_Init+0x284>)
 800cf4e:	61bb      	str	r3, [r7, #24]
 800cf50:	e028      	b.n	800cfa4 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	4a88      	ldr	r2, [pc, #544]	; (800d178 <HAL_SAI_Init+0x288>)
 800cf58:	4293      	cmp	r3, r2
 800cf5a:	d004      	beq.n	800cf66 <HAL_SAI_Init+0x76>
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	4a86      	ldr	r2, [pc, #536]	; (800d17c <HAL_SAI_Init+0x28c>)
 800cf62:	4293      	cmp	r3, r2
 800cf64:	d102      	bne.n	800cf6c <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800cf66:	4b86      	ldr	r3, [pc, #536]	; (800d180 <HAL_SAI_Init+0x290>)
 800cf68:	61bb      	str	r3, [r7, #24]
 800cf6a:	e01b      	b.n	800cfa4 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	4a84      	ldr	r2, [pc, #528]	; (800d184 <HAL_SAI_Init+0x294>)
 800cf72:	4293      	cmp	r3, r2
 800cf74:	d004      	beq.n	800cf80 <HAL_SAI_Init+0x90>
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	4a83      	ldr	r2, [pc, #524]	; (800d188 <HAL_SAI_Init+0x298>)
 800cf7c:	4293      	cmp	r3, r2
 800cf7e:	d102      	bne.n	800cf86 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800cf80:	4b82      	ldr	r3, [pc, #520]	; (800d18c <HAL_SAI_Init+0x29c>)
 800cf82:	61bb      	str	r3, [r7, #24]
 800cf84:	e00e      	b.n	800cfa4 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	4a78      	ldr	r2, [pc, #480]	; (800d16c <HAL_SAI_Init+0x27c>)
 800cf8c:	4293      	cmp	r3, r2
 800cf8e:	d004      	beq.n	800cf9a <HAL_SAI_Init+0xaa>
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	4a7e      	ldr	r2, [pc, #504]	; (800d190 <HAL_SAI_Init+0x2a0>)
 800cf96:	4293      	cmp	r3, r2
 800cf98:	d102      	bne.n	800cfa0 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800cf9a:	4b7e      	ldr	r3, [pc, #504]	; (800d194 <HAL_SAI_Init+0x2a4>)
 800cf9c:	61bb      	str	r3, [r7, #24]
 800cf9e:	e001      	b.n	800cfa4 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	e232      	b.n	800d40a <HAL_SAI_Init+0x51a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800cfaa:	b2db      	uxtb	r3, r3
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d106      	bne.n	800cfbe <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f7f5 fec5 	bl	8002d48 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f000 fc62 	bl	800d888 <SAI_Disable>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d001      	beq.n	800cfce <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800cfca:	2301      	movs	r3, #1
 800cfcc:	e21d      	b.n	800d40a <HAL_SAI_Init+0x51a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	2202      	movs	r2, #2
 800cfd2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	68db      	ldr	r3, [r3, #12]
 800cfda:	2b02      	cmp	r3, #2
 800cfdc:	d00c      	beq.n	800cff8 <HAL_SAI_Init+0x108>
 800cfde:	2b02      	cmp	r3, #2
 800cfe0:	d80d      	bhi.n	800cffe <HAL_SAI_Init+0x10e>
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d002      	beq.n	800cfec <HAL_SAI_Init+0xfc>
 800cfe6:	2b01      	cmp	r3, #1
 800cfe8:	d003      	beq.n	800cff2 <HAL_SAI_Init+0x102>
 800cfea:	e008      	b.n	800cffe <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800cfec:	2300      	movs	r3, #0
 800cfee:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800cff0:	e008      	b.n	800d004 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800cff2:	2310      	movs	r3, #16
 800cff4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800cff6:	e005      	b.n	800d004 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800cff8:	2320      	movs	r3, #32
 800cffa:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800cffc:	e002      	b.n	800d004 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800cffe:	2300      	movs	r3, #0
 800d000:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800d002:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	689b      	ldr	r3, [r3, #8]
 800d008:	2b05      	cmp	r3, #5
 800d00a:	d832      	bhi.n	800d072 <HAL_SAI_Init+0x182>
 800d00c:	a201      	add	r2, pc, #4	; (adr r2, 800d014 <HAL_SAI_Init+0x124>)
 800d00e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d012:	bf00      	nop
 800d014:	0800d02d 	.word	0x0800d02d
 800d018:	0800d033 	.word	0x0800d033
 800d01c:	0800d03b 	.word	0x0800d03b
 800d020:	0800d043 	.word	0x0800d043
 800d024:	0800d053 	.word	0x0800d053
 800d028:	0800d063 	.word	0x0800d063
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800d02c:	2300      	movs	r3, #0
 800d02e:	61fb      	str	r3, [r7, #28]
      break;
 800d030:	e022      	b.n	800d078 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800d032:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d036:	61fb      	str	r3, [r7, #28]
      break;
 800d038:	e01e      	b.n	800d078 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d03a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d03e:	61fb      	str	r3, [r7, #28]
      break;
 800d040:	e01a      	b.n	800d078 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d042:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d046:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800d048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d04a:	f043 0301 	orr.w	r3, r3, #1
 800d04e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800d050:	e012      	b.n	800d078 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d052:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d056:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800d058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d05a:	f043 0302 	orr.w	r3, r3, #2
 800d05e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800d060:	e00a      	b.n	800d078 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d062:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d066:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800d068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d06a:	f043 0303 	orr.w	r3, r3, #3
 800d06e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800d070:	e002      	b.n	800d078 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800d072:	2300      	movs	r3, #0
 800d074:	61fb      	str	r3, [r7, #28]
      break;
 800d076:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800d078:	69bb      	ldr	r3, [r7, #24]
 800d07a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d07c:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	6a1b      	ldr	r3, [r3, #32]
 800d082:	2b00      	cmp	r3, #0
 800d084:	f000 80ba 	beq.w	800d1fc <HAL_SAI_Init+0x30c>
  {
    uint32_t freq = 0;
 800d088:	2300      	movs	r3, #0
 800d08a:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4a35      	ldr	r2, [pc, #212]	; (800d168 <HAL_SAI_Init+0x278>)
 800d092:	4293      	cmp	r3, r2
 800d094:	d004      	beq.n	800d0a0 <HAL_SAI_Init+0x1b0>
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	4a35      	ldr	r2, [pc, #212]	; (800d170 <HAL_SAI_Init+0x280>)
 800d09c:	4293      	cmp	r3, r2
 800d09e:	d104      	bne.n	800d0aa <HAL_SAI_Init+0x1ba>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800d0a0:	f44f 7080 	mov.w	r0, #256	; 0x100
 800d0a4:	f7fe fc02 	bl	800b8ac <HAL_RCCEx_GetPeriphCLKFreq>
 800d0a8:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	4a32      	ldr	r2, [pc, #200]	; (800d178 <HAL_SAI_Init+0x288>)
 800d0b0:	4293      	cmp	r3, r2
 800d0b2:	d004      	beq.n	800d0be <HAL_SAI_Init+0x1ce>
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	4a30      	ldr	r2, [pc, #192]	; (800d17c <HAL_SAI_Init+0x28c>)
 800d0ba:	4293      	cmp	r3, r2
 800d0bc:	d104      	bne.n	800d0c8 <HAL_SAI_Init+0x1d8>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800d0be:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d0c2:	f7fe fbf3 	bl	800b8ac <HAL_RCCEx_GetPeriphCLKFreq>
 800d0c6:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	4a2d      	ldr	r2, [pc, #180]	; (800d184 <HAL_SAI_Init+0x294>)
 800d0ce:	4293      	cmp	r3, r2
 800d0d0:	d004      	beq.n	800d0dc <HAL_SAI_Init+0x1ec>
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	4a2c      	ldr	r2, [pc, #176]	; (800d188 <HAL_SAI_Init+0x298>)
 800d0d8:	4293      	cmp	r3, r2
 800d0da:	d104      	bne.n	800d0e6 <HAL_SAI_Init+0x1f6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800d0dc:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d0e0:	f7fe fbe4 	bl	800b8ac <HAL_RCCEx_GetPeriphCLKFreq>
 800d0e4:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	4a20      	ldr	r2, [pc, #128]	; (800d16c <HAL_SAI_Init+0x27c>)
 800d0ec:	4293      	cmp	r3, r2
 800d0ee:	d104      	bne.n	800d0fa <HAL_SAI_Init+0x20a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800d0f0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800d0f4:	f7fe fbda 	bl	800b8ac <HAL_RCCEx_GetPeriphCLKFreq>
 800d0f8:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	4a24      	ldr	r2, [pc, #144]	; (800d190 <HAL_SAI_Init+0x2a0>)
 800d100:	4293      	cmp	r3, r2
 800d102:	d104      	bne.n	800d10e <HAL_SAI_Init+0x21e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800d104:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800d108:	f7fe fbd0 	bl	800b8ac <HAL_RCCEx_GetPeriphCLKFreq>
 800d10c:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	699b      	ldr	r3, [r3, #24]
 800d112:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800d116:	d120      	bne.n	800d15a <HAL_SAI_Init+0x26a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d11c:	2b04      	cmp	r3, #4
 800d11e:	d102      	bne.n	800d126 <HAL_SAI_Init+0x236>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 800d120:	2340      	movs	r3, #64	; 0x40
 800d122:	60fb      	str	r3, [r7, #12]
 800d124:	e00a      	b.n	800d13c <HAL_SAI_Init+0x24c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d12a:	2b08      	cmp	r3, #8
 800d12c:	d103      	bne.n	800d136 <HAL_SAI_Init+0x246>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 800d12e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d132:	60fb      	str	r3, [r7, #12]
 800d134:	e002      	b.n	800d13c <HAL_SAI_Init+0x24c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d13a:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800d13c:	697a      	ldr	r2, [r7, #20]
 800d13e:	4613      	mov	r3, r2
 800d140:	009b      	lsls	r3, r3, #2
 800d142:	4413      	add	r3, r2
 800d144:	005b      	lsls	r3, r3, #1
 800d146:	4619      	mov	r1, r3
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	6a1b      	ldr	r3, [r3, #32]
 800d14c:	68fa      	ldr	r2, [r7, #12]
 800d14e:	fb02 f303 	mul.w	r3, r2, r3
 800d152:	fbb1 f3f3 	udiv	r3, r1, r3
 800d156:	613b      	str	r3, [r7, #16]
 800d158:	e02f      	b.n	800d1ba <HAL_SAI_Init+0x2ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d15e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d162:	d119      	bne.n	800d198 <HAL_SAI_Init+0x2a8>
 800d164:	2302      	movs	r3, #2
 800d166:	e018      	b.n	800d19a <HAL_SAI_Init+0x2aa>
 800d168:	40015804 	.word	0x40015804
 800d16c:	58005404 	.word	0x58005404
 800d170:	40015824 	.word	0x40015824
 800d174:	40015800 	.word	0x40015800
 800d178:	40015c04 	.word	0x40015c04
 800d17c:	40015c24 	.word	0x40015c24
 800d180:	40015c00 	.word	0x40015c00
 800d184:	40016004 	.word	0x40016004
 800d188:	40016024 	.word	0x40016024
 800d18c:	40016000 	.word	0x40016000
 800d190:	58005424 	.word	0x58005424
 800d194:	58005400 	.word	0x58005400
 800d198:	2301      	movs	r3, #1
 800d19a:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800d19c:	697a      	ldr	r2, [r7, #20]
 800d19e:	4613      	mov	r3, r2
 800d1a0:	009b      	lsls	r3, r3, #2
 800d1a2:	4413      	add	r3, r2
 800d1a4:	005b      	lsls	r3, r3, #1
 800d1a6:	4619      	mov	r1, r3
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	6a1b      	ldr	r3, [r3, #32]
 800d1ac:	68ba      	ldr	r2, [r7, #8]
 800d1ae:	fb02 f303 	mul.w	r3, r2, r3
 800d1b2:	021b      	lsls	r3, r3, #8
 800d1b4:	fbb1 f3f3 	udiv	r3, r1, r3
 800d1b8:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	4a95      	ldr	r2, [pc, #596]	; (800d414 <HAL_SAI_Init+0x524>)
 800d1be:	fba2 2303 	umull	r2, r3, r2, r3
 800d1c2:	08da      	lsrs	r2, r3, #3
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800d1c8:	6939      	ldr	r1, [r7, #16]
 800d1ca:	4b92      	ldr	r3, [pc, #584]	; (800d414 <HAL_SAI_Init+0x524>)
 800d1cc:	fba3 2301 	umull	r2, r3, r3, r1
 800d1d0:	08da      	lsrs	r2, r3, #3
 800d1d2:	4613      	mov	r3, r2
 800d1d4:	009b      	lsls	r3, r3, #2
 800d1d6:	4413      	add	r3, r2
 800d1d8:	005b      	lsls	r3, r3, #1
 800d1da:	1aca      	subs	r2, r1, r3
 800d1dc:	2a08      	cmp	r2, #8
 800d1de:	d904      	bls.n	800d1ea <HAL_SAI_Init+0x2fa>
    {
      hsai->Init.Mckdiv += 1U;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1e4:	1c5a      	adds	r2, r3, #1
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1ee:	2b04      	cmp	r3, #4
 800d1f0:	d104      	bne.n	800d1fc <HAL_SAI_Init+0x30c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1f6:	085a      	lsrs	r2, r3, #1
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	685b      	ldr	r3, [r3, #4]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d003      	beq.n	800d20c <HAL_SAI_Init+0x31c>
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	685b      	ldr	r3, [r3, #4]
 800d208:	2b02      	cmp	r3, #2
 800d20a:	d109      	bne.n	800d220 <HAL_SAI_Init+0x330>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d210:	2b01      	cmp	r3, #1
 800d212:	d101      	bne.n	800d218 <HAL_SAI_Init+0x328>
 800d214:	2300      	movs	r3, #0
 800d216:	e001      	b.n	800d21c <HAL_SAI_Init+0x32c>
 800d218:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d21c:	623b      	str	r3, [r7, #32]
 800d21e:	e008      	b.n	800d232 <HAL_SAI_Init+0x342>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d224:	2b01      	cmp	r3, #1
 800d226:	d102      	bne.n	800d22e <HAL_SAI_Init+0x33e>
 800d228:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d22c:	e000      	b.n	800d230 <HAL_SAI_Init+0x340>
 800d22e:	2300      	movs	r3, #0
 800d230:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800d232:	f7f6 ff15 	bl	8004060 <HAL_GetREVID>
 800d236:	4603      	mov	r3, r0
 800d238:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d23c:	d331      	bcc.n	800d2a2 <HAL_SAI_Init+0x3b2>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	6819      	ldr	r1, [r3, #0]
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681a      	ldr	r2, [r3, #0]
 800d248:	4b73      	ldr	r3, [pc, #460]	; (800d418 <HAL_SAI_Init+0x528>)
 800d24a:	400b      	ands	r3, r1
 800d24c:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	6819      	ldr	r1, [r3, #0]
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	685a      	ldr	r2, [r3, #4]
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d25c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d262:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d268:	431a      	orrs	r2, r3
 800d26a:	6a3b      	ldr	r3, [r7, #32]
 800d26c:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800d26e:	69fb      	ldr	r3, [r7, #28]
 800d270:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800d276:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	695b      	ldr	r3, [r3, #20]
 800d27c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d282:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d288:	051b      	lsls	r3, r3, #20
 800d28a:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800d290:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	691b      	ldr	r3, [r3, #16]
 800d296:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	430a      	orrs	r2, r1
 800d29e:	601a      	str	r2, [r3, #0]
 800d2a0:	e02d      	b.n	800d2fe <HAL_SAI_Init+0x40e>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	6819      	ldr	r1, [r3, #0]
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681a      	ldr	r2, [r3, #0]
 800d2ac:	4b5b      	ldr	r3, [pc, #364]	; (800d41c <HAL_SAI_Init+0x52c>)
 800d2ae:	400b      	ands	r3, r1
 800d2b0:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	6819      	ldr	r1, [r3, #0]
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	685a      	ldr	r2, [r3, #4]
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2c0:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d2c6:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d2cc:	431a      	orrs	r2, r3
 800d2ce:	6a3b      	ldr	r3, [r7, #32]
 800d2d0:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800d2d2:	69fb      	ldr	r3, [r7, #28]
 800d2d4:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800d2da:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	695b      	ldr	r3, [r3, #20]
 800d2e0:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d2e6:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2ec:	051b      	lsls	r3, r3, #20
 800d2ee:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800d2f4:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	430a      	orrs	r2, r1
 800d2fc:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	6859      	ldr	r1, [r3, #4]
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681a      	ldr	r2, [r3, #0]
 800d308:	4b45      	ldr	r3, [pc, #276]	; (800d420 <HAL_SAI_Init+0x530>)
 800d30a:	400b      	ands	r3, r1
 800d30c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	6859      	ldr	r1, [r3, #4]
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	69da      	ldr	r2, [r3, #28]
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d31c:	431a      	orrs	r2, r3
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d322:	431a      	orrs	r2, r3
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	430a      	orrs	r2, r1
 800d32a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	6899      	ldr	r1, [r3, #8]
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681a      	ldr	r2, [r3, #0]
 800d336:	4b3b      	ldr	r3, [pc, #236]	; (800d424 <HAL_SAI_Init+0x534>)
 800d338:	400b      	ands	r3, r1
 800d33a:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	6899      	ldr	r1, [r3, #8]
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d346:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800d34c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800d352:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800d358:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d35e:	3b01      	subs	r3, #1
 800d360:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800d362:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	430a      	orrs	r2, r1
 800d36a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	68d9      	ldr	r1, [r3, #12]
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681a      	ldr	r2, [r3, #0]
 800d376:	f24f 0320 	movw	r3, #61472	; 0xf020
 800d37a:	400b      	ands	r3, r1
 800d37c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	68d9      	ldr	r1, [r3, #12]
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d38c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d392:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800d394:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d39a:	3b01      	subs	r3, #1
 800d39c:	021b      	lsls	r3, r3, #8
 800d39e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	430a      	orrs	r2, r1
 800d3a6:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	4a1e      	ldr	r2, [pc, #120]	; (800d428 <HAL_SAI_Init+0x538>)
 800d3ae:	4293      	cmp	r3, r2
 800d3b0:	d004      	beq.n	800d3bc <HAL_SAI_Init+0x4cc>
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	4a1d      	ldr	r2, [pc, #116]	; (800d42c <HAL_SAI_Init+0x53c>)
 800d3b8:	4293      	cmp	r3, r2
 800d3ba:	d119      	bne.n	800d3f0 <HAL_SAI_Init+0x500>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800d3bc:	69bb      	ldr	r3, [r7, #24]
 800d3be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3c0:	f023 0201 	bic.w	r2, r3, #1
 800d3c4:	69bb      	ldr	r3, [r7, #24]
 800d3c6:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d3ce:	2b01      	cmp	r3, #1
 800d3d0:	d10e      	bne.n	800d3f0 <HAL_SAI_Init+0x500>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3da:	3b01      	subs	r3, #1
 800d3dc:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800d3de:	431a      	orrs	r2, r3
 800d3e0:	69bb      	ldr	r3, [r7, #24]
 800d3e2:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800d3e4:	69bb      	ldr	r3, [r7, #24]
 800d3e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3e8:	f043 0201 	orr.w	r2, r3, #1
 800d3ec:	69bb      	ldr	r3, [r7, #24]
 800d3ee:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2201      	movs	r2, #1
 800d3fc:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2200      	movs	r2, #0
 800d404:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800d408:	2300      	movs	r3, #0
}
 800d40a:	4618      	mov	r0, r3
 800d40c:	3728      	adds	r7, #40	; 0x28
 800d40e:	46bd      	mov	sp, r7
 800d410:	bd80      	pop	{r7, pc}
 800d412:	bf00      	nop
 800d414:	cccccccd 	.word	0xcccccccd
 800d418:	f005c010 	.word	0xf005c010
 800d41c:	f805c010 	.word	0xf805c010
 800d420:	ffff1ff0 	.word	0xffff1ff0
 800d424:	fff88000 	.word	0xfff88000
 800d428:	40015804 	.word	0x40015804
 800d42c:	58005404 	.word	0x58005404

0800d430 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b086      	sub	sp, #24
 800d434:	af00      	add	r7, sp, #0
 800d436:	60f8      	str	r0, [r7, #12]
 800d438:	60b9      	str	r1, [r7, #8]
 800d43a:	4613      	mov	r3, r2
 800d43c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800d43e:	f7f6 fddf 	bl	8004000 <HAL_GetTick>
 800d442:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d002      	beq.n	800d450 <HAL_SAI_Transmit_DMA+0x20>
 800d44a:	88fb      	ldrh	r3, [r7, #6]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d101      	bne.n	800d454 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800d450:	2301      	movs	r3, #1
 800d452:	e098      	b.n	800d586 <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800d45a:	b2db      	uxtb	r3, r3
 800d45c:	2b01      	cmp	r3, #1
 800d45e:	f040 8091 	bne.w	800d584 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800d468:	2b01      	cmp	r3, #1
 800d46a:	d101      	bne.n	800d470 <HAL_SAI_Transmit_DMA+0x40>
 800d46c:	2302      	movs	r3, #2
 800d46e:	e08a      	b.n	800d586 <HAL_SAI_Transmit_DMA+0x156>
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	2201      	movs	r2, #1
 800d474:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	68ba      	ldr	r2, [r7, #8]
 800d47c:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	88fa      	ldrh	r2, [r7, #6]
 800d482:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	88fa      	ldrh	r2, [r7, #6]
 800d48a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	2200      	movs	r2, #0
 800d492:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	2212      	movs	r2, #18
 800d49a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4a4:	4a3a      	ldr	r2, [pc, #232]	; (800d590 <HAL_SAI_Transmit_DMA+0x160>)
 800d4a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4ae:	4a39      	ldr	r2, [pc, #228]	; (800d594 <HAL_SAI_Transmit_DMA+0x164>)
 800d4b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4b8:	4a37      	ldr	r2, [pc, #220]	; (800d598 <HAL_SAI_Transmit_DMA+0x168>)
 800d4ba:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d4d0:	4619      	mov	r1, r3
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	331c      	adds	r3, #28
 800d4d8:	461a      	mov	r2, r3
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800d4e0:	f7f8 fc78 	bl	8005dd4 <HAL_DMA_Start_IT>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d005      	beq.n	800d4f6 <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800d4f2:	2301      	movs	r3, #1
 800d4f4:	e047      	b.n	800d586 <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800d4f6:	2100      	movs	r1, #0
 800d4f8:	68f8      	ldr	r0, [r7, #12]
 800d4fa:	f000 f98d 	bl	800d818 <SAI_InterruptFlag>
 800d4fe:	4601      	mov	r1, r0
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	691a      	ldr	r2, [r3, #16]
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	430a      	orrs	r2, r1
 800d50c:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	681a      	ldr	r2, [r3, #0]
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800d51c:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800d51e:	e015      	b.n	800d54c <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800d520:	f7f6 fd6e 	bl	8004000 <HAL_GetTick>
 800d524:	4602      	mov	r2, r0
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	1ad3      	subs	r3, r2, r3
 800d52a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d52e:	d90d      	bls.n	800d54c <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d536:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	2200      	movs	r2, #0
 800d544:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 800d548:	2303      	movs	r3, #3
 800d54a:	e01c      	b.n	800d586 <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	695b      	ldr	r3, [r3, #20]
 800d552:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800d556:	2b00      	cmp	r3, #0
 800d558:	d0e2      	beq.n	800d520 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d564:	2b00      	cmp	r3, #0
 800d566:	d107      	bne.n	800d578 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	681a      	ldr	r2, [r3, #0]
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800d576:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	2200      	movs	r2, #0
 800d57c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800d580:	2300      	movs	r3, #0
 800d582:	e000      	b.n	800d586 <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 800d584:	2302      	movs	r3, #2
  }
}
 800d586:	4618      	mov	r0, r3
 800d588:	3718      	adds	r7, #24
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}
 800d58e:	bf00      	nop
 800d590:	0800d95d 	.word	0x0800d95d
 800d594:	0800d8fd 	.word	0x0800d8fd
 800d598:	0800d979 	.word	0x0800d979

0800d59c <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800d59c:	b480      	push	{r7}
 800d59e:	b083      	sub	sp, #12
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800d5a4:	bf00      	nop
 800d5a6:	370c      	adds	r7, #12
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ae:	4770      	bx	lr

0800d5b0 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800d5b0:	b480      	push	{r7}
 800d5b2:	b087      	sub	sp, #28
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	60f8      	str	r0, [r7, #12]
 800d5b8:	60b9      	str	r1, [r7, #8]
 800d5ba:	607a      	str	r2, [r7, #4]
 800d5bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d5be:	2300      	movs	r3, #0
 800d5c0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	685b      	ldr	r3, [r3, #4]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d003      	beq.n	800d5de <SAI_InitI2S+0x2e>
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	685b      	ldr	r3, [r3, #4]
 800d5da:	2b02      	cmp	r3, #2
 800d5dc:	d103      	bne.n	800d5e6 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	651a      	str	r2, [r3, #80]	; 0x50
 800d5e4:	e002      	b.n	800d5ec <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	2201      	movs	r2, #1
 800d5ea:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800d5f2:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d5fa:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	2200      	movs	r2, #0
 800d600:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	683a      	ldr	r2, [r7, #0]
 800d606:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	f003 0301 	and.w	r3, r3, #1
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d001      	beq.n	800d616 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800d612:	2301      	movs	r3, #1
 800d614:	e077      	b.n	800d706 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800d616:	68bb      	ldr	r3, [r7, #8]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d107      	bne.n	800d62c <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	2200      	movs	r2, #0
 800d620:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800d628:	665a      	str	r2, [r3, #100]	; 0x64
 800d62a:	e006      	b.n	800d63a <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800d632:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	2200      	movs	r2, #0
 800d638:	665a      	str	r2, [r3, #100]	; 0x64
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2b03      	cmp	r3, #3
 800d63e:	d84f      	bhi.n	800d6e0 <SAI_InitI2S+0x130>
 800d640:	a201      	add	r2, pc, #4	; (adr r2, 800d648 <SAI_InitI2S+0x98>)
 800d642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d646:	bf00      	nop
 800d648:	0800d659 	.word	0x0800d659
 800d64c:	0800d67b 	.word	0x0800d67b
 800d650:	0800d69d 	.word	0x0800d69d
 800d654:	0800d6bf 	.word	0x0800d6bf

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	2280      	movs	r2, #128	; 0x80
 800d65c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	085b      	lsrs	r3, r3, #1
 800d662:	015a      	lsls	r2, r3, #5
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	085b      	lsrs	r3, r3, #1
 800d66c:	011a      	lsls	r2, r3, #4
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	2240      	movs	r2, #64	; 0x40
 800d676:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800d678:	e035      	b.n	800d6e6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	2280      	movs	r2, #128	; 0x80
 800d67e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	085b      	lsrs	r3, r3, #1
 800d684:	019a      	lsls	r2, r3, #6
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	085b      	lsrs	r3, r3, #1
 800d68e:	015a      	lsls	r2, r3, #5
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	2280      	movs	r2, #128	; 0x80
 800d698:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800d69a:	e024      	b.n	800d6e6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	22c0      	movs	r2, #192	; 0xc0
 800d6a0:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	085b      	lsrs	r3, r3, #1
 800d6a6:	019a      	lsls	r2, r3, #6
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	085b      	lsrs	r3, r3, #1
 800d6b0:	015a      	lsls	r2, r3, #5
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	2280      	movs	r2, #128	; 0x80
 800d6ba:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800d6bc:	e013      	b.n	800d6e6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	22e0      	movs	r2, #224	; 0xe0
 800d6c2:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	085b      	lsrs	r3, r3, #1
 800d6c8:	019a      	lsls	r2, r3, #6
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	085b      	lsrs	r3, r3, #1
 800d6d2:	015a      	lsls	r2, r3, #5
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	2280      	movs	r2, #128	; 0x80
 800d6dc:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800d6de:	e002      	b.n	800d6e6 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800d6e0:	2301      	movs	r3, #1
 800d6e2:	75fb      	strb	r3, [r7, #23]
      break;
 800d6e4:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	2b02      	cmp	r3, #2
 800d6ea:	d10b      	bne.n	800d704 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2b01      	cmp	r3, #1
 800d6f0:	d102      	bne.n	800d6f8 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	2210      	movs	r2, #16
 800d6f6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2b02      	cmp	r3, #2
 800d6fc:	d102      	bne.n	800d704 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	2208      	movs	r2, #8
 800d702:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 800d704:	7dfb      	ldrb	r3, [r7, #23]
}
 800d706:	4618      	mov	r0, r3
 800d708:	371c      	adds	r7, #28
 800d70a:	46bd      	mov	sp, r7
 800d70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d710:	4770      	bx	lr
 800d712:	bf00      	nop

0800d714 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800d714:	b480      	push	{r7}
 800d716:	b087      	sub	sp, #28
 800d718:	af00      	add	r7, sp, #0
 800d71a:	60f8      	str	r0, [r7, #12]
 800d71c:	60b9      	str	r1, [r7, #8]
 800d71e:	607a      	str	r2, [r7, #4]
 800d720:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d722:	2300      	movs	r3, #0
 800d724:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	2200      	movs	r2, #0
 800d72a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	2200      	movs	r2, #0
 800d730:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	685b      	ldr	r3, [r3, #4]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d003      	beq.n	800d742 <SAI_InitPCM+0x2e>
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	685b      	ldr	r3, [r3, #4]
 800d73e:	2b02      	cmp	r3, #2
 800d740:	d103      	bne.n	800d74a <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	2201      	movs	r2, #1
 800d746:	651a      	str	r2, [r3, #80]	; 0x50
 800d748:	e002      	b.n	800d750 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	2200      	movs	r2, #0
 800d74e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	2200      	movs	r2, #0
 800d754:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800d75c:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800d764:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	2200      	movs	r2, #0
 800d76a:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	683a      	ldr	r2, [r7, #0]
 800d770:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d778:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	2b04      	cmp	r3, #4
 800d77e:	d103      	bne.n	800d788 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	2201      	movs	r2, #1
 800d784:	659a      	str	r2, [r3, #88]	; 0x58
 800d786:	e002      	b.n	800d78e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	220d      	movs	r2, #13
 800d78c:	659a      	str	r2, [r3, #88]	; 0x58
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	2b03      	cmp	r3, #3
 800d792:	d837      	bhi.n	800d804 <SAI_InitPCM+0xf0>
 800d794:	a201      	add	r2, pc, #4	; (adr r2, 800d79c <SAI_InitPCM+0x88>)
 800d796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d79a:	bf00      	nop
 800d79c:	0800d7ad 	.word	0x0800d7ad
 800d7a0:	0800d7c3 	.word	0x0800d7c3
 800d7a4:	0800d7d9 	.word	0x0800d7d9
 800d7a8:	0800d7ef 	.word	0x0800d7ef
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	2280      	movs	r2, #128	; 0x80
 800d7b0:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	011a      	lsls	r2, r3, #4
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	2240      	movs	r2, #64	; 0x40
 800d7be:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800d7c0:	e023      	b.n	800d80a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	2280      	movs	r2, #128	; 0x80
 800d7c6:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	015a      	lsls	r2, r3, #5
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	2280      	movs	r2, #128	; 0x80
 800d7d4:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800d7d6:	e018      	b.n	800d80a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	22c0      	movs	r2, #192	; 0xc0
 800d7dc:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	015a      	lsls	r2, r3, #5
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	2280      	movs	r2, #128	; 0x80
 800d7ea:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800d7ec:	e00d      	b.n	800d80a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	22e0      	movs	r2, #224	; 0xe0
 800d7f2:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	015a      	lsls	r2, r3, #5
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	2280      	movs	r2, #128	; 0x80
 800d800:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800d802:	e002      	b.n	800d80a <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800d804:	2301      	movs	r3, #1
 800d806:	75fb      	strb	r3, [r7, #23]
      break;
 800d808:	bf00      	nop
  }

  return status;
 800d80a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d80c:	4618      	mov	r0, r3
 800d80e:	371c      	adds	r7, #28
 800d810:	46bd      	mov	sp, r7
 800d812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d816:	4770      	bx	lr

0800d818 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800d818:	b480      	push	{r7}
 800d81a:	b085      	sub	sp, #20
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
 800d820:	460b      	mov	r3, r1
 800d822:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800d824:	2301      	movs	r3, #1
 800d826:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800d828:	78fb      	ldrb	r3, [r7, #3]
 800d82a:	2b01      	cmp	r3, #1
 800d82c:	d103      	bne.n	800d836 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	f043 0308 	orr.w	r3, r3, #8
 800d834:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d83a:	2b08      	cmp	r3, #8
 800d83c:	d10b      	bne.n	800d856 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800d842:	2b03      	cmp	r3, #3
 800d844:	d003      	beq.n	800d84e <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	685b      	ldr	r3, [r3, #4]
 800d84a:	2b01      	cmp	r3, #1
 800d84c:	d103      	bne.n	800d856 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	f043 0310 	orr.w	r3, r3, #16
 800d854:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	685b      	ldr	r3, [r3, #4]
 800d85a:	2b03      	cmp	r3, #3
 800d85c:	d003      	beq.n	800d866 <SAI_InterruptFlag+0x4e>
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	685b      	ldr	r3, [r3, #4]
 800d862:	2b02      	cmp	r3, #2
 800d864:	d104      	bne.n	800d870 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d86c:	60fb      	str	r3, [r7, #12]
 800d86e:	e003      	b.n	800d878 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	f043 0304 	orr.w	r3, r3, #4
 800d876:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800d878:	68fb      	ldr	r3, [r7, #12]
}
 800d87a:	4618      	mov	r0, r3
 800d87c:	3714      	adds	r7, #20
 800d87e:	46bd      	mov	sp, r7
 800d880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d884:	4770      	bx	lr
	...

0800d888 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800d888:	b480      	push	{r7}
 800d88a:	b085      	sub	sp, #20
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800d890:	4b18      	ldr	r3, [pc, #96]	; (800d8f4 <SAI_Disable+0x6c>)
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	4a18      	ldr	r2, [pc, #96]	; (800d8f8 <SAI_Disable+0x70>)
 800d896:	fba2 2303 	umull	r2, r3, r2, r3
 800d89a:	0b1b      	lsrs	r3, r3, #12
 800d89c:	009b      	lsls	r3, r3, #2
 800d89e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	681a      	ldr	r2, [r3, #0]
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d8b2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d10a      	bne.n	800d8d0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d8c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800d8ca:	2303      	movs	r3, #3
 800d8cc:	72fb      	strb	r3, [r7, #11]
      break;
 800d8ce:	e009      	b.n	800d8e4 <SAI_Disable+0x5c>
    }
    count--;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	3b01      	subs	r3, #1
 800d8d4:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d1e7      	bne.n	800d8b4 <SAI_Disable+0x2c>

  return status;
 800d8e4:	7afb      	ldrb	r3, [r7, #11]
}
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	3714      	adds	r7, #20
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f0:	4770      	bx	lr
 800d8f2:	bf00      	nop
 800d8f4:	24000400 	.word	0x24000400
 800d8f8:	95cbec1b 	.word	0x95cbec1b

0800d8fc <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b084      	sub	sp, #16
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d908:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	69db      	ldr	r3, [r3, #28]
 800d90e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d912:	d01c      	beq.n	800d94e <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	2200      	movs	r2, #0
 800d918:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	681a      	ldr	r2, [r3, #0]
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d92a:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800d92c:	2100      	movs	r1, #0
 800d92e:	68f8      	ldr	r0, [r7, #12]
 800d930:	f7ff ff72 	bl	800d818 <SAI_InterruptFlag>
 800d934:	4603      	mov	r3, r0
 800d936:	43d9      	mvns	r1, r3
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	691a      	ldr	r2, [r3, #16]
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	400a      	ands	r2, r1
 800d944:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	2201      	movs	r2, #1
 800d94a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800d94e:	68f8      	ldr	r0, [r7, #12]
 800d950:	f004 f89a 	bl	8011a88 <HAL_SAI_TxCpltCallback>
#endif
}
 800d954:	bf00      	nop
 800d956:	3710      	adds	r7, #16
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}

0800d95c <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b084      	sub	sp, #16
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d968:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800d96a:	68f8      	ldr	r0, [r7, #12]
 800d96c:	f004 f876 	bl	8011a5c <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800d970:	bf00      	nop
 800d972:	3710      	adds	r7, #16
 800d974:	46bd      	mov	sp, r7
 800d976:	bd80      	pop	{r7, pc}

0800d978 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b084      	sub	sp, #16
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d984:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800d986:	6878      	ldr	r0, [r7, #4]
 800d988:	f7f9 fbb8 	bl	80070fc <HAL_DMA_GetError>
 800d98c:	4603      	mov	r3, r0
 800d98e:	2b02      	cmp	r3, #2
 800d990:	d01d      	beq.n	800d9ce <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d998:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	681a      	ldr	r2, [r3, #0]
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d9b0:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800d9b2:	68f8      	ldr	r0, [r7, #12]
 800d9b4:	f7ff ff68 	bl	800d888 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	2201      	movs	r2, #1
 800d9bc:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800d9c8:	68f8      	ldr	r0, [r7, #12]
 800d9ca:	f7ff fde7 	bl	800d59c <HAL_SAI_ErrorCallback>
#endif
  }
}
 800d9ce:	bf00      	nop
 800d9d0:	3710      	adds	r7, #16
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}
	...

0800d9d8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b084      	sub	sp, #16
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d101      	bne.n	800d9ee <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800d9ea:	2301      	movs	r3, #1
 800d9ec:	e0eb      	b.n	800dbc6 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	4a75      	ldr	r2, [pc, #468]	; (800dbd0 <HAL_SPI_Init+0x1f8>)
 800d9fa:	4293      	cmp	r3, r2
 800d9fc:	d00f      	beq.n	800da1e <HAL_SPI_Init+0x46>
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	4a74      	ldr	r2, [pc, #464]	; (800dbd4 <HAL_SPI_Init+0x1fc>)
 800da04:	4293      	cmp	r3, r2
 800da06:	d00a      	beq.n	800da1e <HAL_SPI_Init+0x46>
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	4a72      	ldr	r2, [pc, #456]	; (800dbd8 <HAL_SPI_Init+0x200>)
 800da0e:	4293      	cmp	r3, r2
 800da10:	d005      	beq.n	800da1e <HAL_SPI_Init+0x46>
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	68db      	ldr	r3, [r3, #12]
 800da16:	2b0f      	cmp	r3, #15
 800da18:	d901      	bls.n	800da1e <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800da1a:	2301      	movs	r3, #1
 800da1c:	e0d3      	b.n	800dbc6 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800da1e:	6878      	ldr	r0, [r7, #4]
 800da20:	f001 f888 	bl	800eb34 <SPI_GetPacketSize>
 800da24:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	4a69      	ldr	r2, [pc, #420]	; (800dbd0 <HAL_SPI_Init+0x1f8>)
 800da2c:	4293      	cmp	r3, r2
 800da2e:	d00c      	beq.n	800da4a <HAL_SPI_Init+0x72>
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	4a67      	ldr	r2, [pc, #412]	; (800dbd4 <HAL_SPI_Init+0x1fc>)
 800da36:	4293      	cmp	r3, r2
 800da38:	d007      	beq.n	800da4a <HAL_SPI_Init+0x72>
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	4a66      	ldr	r2, [pc, #408]	; (800dbd8 <HAL_SPI_Init+0x200>)
 800da40:	4293      	cmp	r3, r2
 800da42:	d002      	beq.n	800da4a <HAL_SPI_Init+0x72>
 800da44:	68bb      	ldr	r3, [r7, #8]
 800da46:	2b08      	cmp	r3, #8
 800da48:	d811      	bhi.n	800da6e <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800da4e:	4a60      	ldr	r2, [pc, #384]	; (800dbd0 <HAL_SPI_Init+0x1f8>)
 800da50:	4293      	cmp	r3, r2
 800da52:	d009      	beq.n	800da68 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	4a5e      	ldr	r2, [pc, #376]	; (800dbd4 <HAL_SPI_Init+0x1fc>)
 800da5a:	4293      	cmp	r3, r2
 800da5c:	d004      	beq.n	800da68 <HAL_SPI_Init+0x90>
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	4a5d      	ldr	r2, [pc, #372]	; (800dbd8 <HAL_SPI_Init+0x200>)
 800da64:	4293      	cmp	r3, r2
 800da66:	d104      	bne.n	800da72 <HAL_SPI_Init+0x9a>
 800da68:	68bb      	ldr	r3, [r7, #8]
 800da6a:	2b10      	cmp	r3, #16
 800da6c:	d901      	bls.n	800da72 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800da6e:	2301      	movs	r3, #1
 800da70:	e0a9      	b.n	800dbc6 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800da78:	b2db      	uxtb	r3, r3
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d106      	bne.n	800da8c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	2200      	movs	r2, #0
 800da82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800da86:	6878      	ldr	r0, [r7, #4]
 800da88:	f7f5 fa7a 	bl	8002f80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2202      	movs	r2, #2
 800da90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	681a      	ldr	r2, [r3, #0]
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	f022 0201 	bic.w	r2, r2, #1
 800daa2:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	699b      	ldr	r3, [r3, #24]
 800daa8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800daac:	d119      	bne.n	800dae2 <HAL_SPI_Init+0x10a>
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	685b      	ldr	r3, [r3, #4]
 800dab2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dab6:	d103      	bne.n	800dac0 <HAL_SPI_Init+0xe8>
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d008      	beq.n	800dad2 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d10c      	bne.n	800dae2 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dacc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dad0:	d107      	bne.n	800dae2 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	681a      	ldr	r2, [r3, #0]
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dae0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	69da      	ldr	r2, [r3, #28]
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daea:	431a      	orrs	r2, r3
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	431a      	orrs	r2, r3
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800daf4:	ea42 0103 	orr.w	r1, r2, r3
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	68da      	ldr	r2, [r3, #12]
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	430a      	orrs	r2, r1
 800db02:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db0c:	431a      	orrs	r2, r3
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db12:	431a      	orrs	r2, r3
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	699b      	ldr	r3, [r3, #24]
 800db18:	431a      	orrs	r2, r3
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	691b      	ldr	r3, [r3, #16]
 800db1e:	431a      	orrs	r2, r3
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	695b      	ldr	r3, [r3, #20]
 800db24:	431a      	orrs	r2, r3
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	6a1b      	ldr	r3, [r3, #32]
 800db2a:	431a      	orrs	r2, r3
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	685b      	ldr	r3, [r3, #4]
 800db30:	431a      	orrs	r2, r3
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db36:	431a      	orrs	r2, r3
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	689b      	ldr	r3, [r3, #8]
 800db3c:	431a      	orrs	r2, r3
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800db42:	ea42 0103 	orr.w	r1, r2, r3
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	430a      	orrs	r2, r1
 800db50:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	685b      	ldr	r3, [r3, #4]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d113      	bne.n	800db82 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	689b      	ldr	r3, [r3, #8]
 800db60:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800db6c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	689b      	ldr	r3, [r3, #8]
 800db74:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800db80:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	f022 0201 	bic.w	r2, r2, #1
 800db90:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	685b      	ldr	r3, [r3, #4]
 800db96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d00a      	beq.n	800dbb4 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	68db      	ldr	r3, [r3, #12]
 800dba4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	430a      	orrs	r2, r1
 800dbb2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2201      	movs	r2, #1
 800dbc0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800dbc4:	2300      	movs	r3, #0
}
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	3710      	adds	r7, #16
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	bd80      	pop	{r7, pc}
 800dbce:	bf00      	nop
 800dbd0:	40013000 	.word	0x40013000
 800dbd4:	40003800 	.word	0x40003800
 800dbd8:	40003c00 	.word	0x40003c00

0800dbdc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b08a      	sub	sp, #40	; 0x28
 800dbe0:	af02      	add	r7, sp, #8
 800dbe2:	60f8      	str	r0, [r7, #12]
 800dbe4:	60b9      	str	r1, [r7, #8]
 800dbe6:	603b      	str	r3, [r7, #0]
 800dbe8:	4613      	mov	r3, r2
 800dbea:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	3320      	adds	r3, #32
 800dbf2:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dbfe:	2b01      	cmp	r3, #1
 800dc00:	d101      	bne.n	800dc06 <HAL_SPI_Transmit+0x2a>
 800dc02:	2302      	movs	r3, #2
 800dc04:	e1d7      	b.n	800dfb6 <HAL_SPI_Transmit+0x3da>
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	2201      	movs	r2, #1
 800dc0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dc0e:	f7f6 f9f7 	bl	8004000 <HAL_GetTick>
 800dc12:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dc1a:	b2db      	uxtb	r3, r3
 800dc1c:	2b01      	cmp	r3, #1
 800dc1e:	d007      	beq.n	800dc30 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800dc20:	2302      	movs	r3, #2
 800dc22:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	2200      	movs	r2, #0
 800dc28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800dc2c:	7efb      	ldrb	r3, [r7, #27]
 800dc2e:	e1c2      	b.n	800dfb6 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d002      	beq.n	800dc3c <HAL_SPI_Transmit+0x60>
 800dc36:	88fb      	ldrh	r3, [r7, #6]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d107      	bne.n	800dc4c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800dc3c:	2301      	movs	r3, #1
 800dc3e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	2200      	movs	r2, #0
 800dc44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800dc48:	7efb      	ldrb	r3, [r7, #27]
 800dc4a:	e1b4      	b.n	800dfb6 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	2203      	movs	r2, #3
 800dc50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	2200      	movs	r2, #0
 800dc58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	68ba      	ldr	r2, [r7, #8]
 800dc60:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	88fa      	ldrh	r2, [r7, #6]
 800dc66:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	88fa      	ldrh	r2, [r7, #6]
 800dc6e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	2200      	movs	r2, #0
 800dc76:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	2200      	movs	r2, #0
 800dc84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	2200      	movs	r2, #0
 800dc92:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	689b      	ldr	r3, [r3, #8]
 800dc98:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800dc9c:	d107      	bne.n	800dcae <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	681a      	ldr	r2, [r3, #0]
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dcac:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	685a      	ldr	r2, [r3, #4]
 800dcb4:	4b96      	ldr	r3, [pc, #600]	; (800df10 <HAL_SPI_Transmit+0x334>)
 800dcb6:	4013      	ands	r3, r2
 800dcb8:	88f9      	ldrh	r1, [r7, #6]
 800dcba:	68fa      	ldr	r2, [r7, #12]
 800dcbc:	6812      	ldr	r2, [r2, #0]
 800dcbe:	430b      	orrs	r3, r1
 800dcc0:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	681a      	ldr	r2, [r3, #0]
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	f042 0201 	orr.w	r2, r2, #1
 800dcd0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	685b      	ldr	r3, [r3, #4]
 800dcd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dcda:	d107      	bne.n	800dcec <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	681a      	ldr	r2, [r3, #0]
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dcea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	68db      	ldr	r3, [r3, #12]
 800dcf0:	2b0f      	cmp	r3, #15
 800dcf2:	d947      	bls.n	800dd84 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800dcf4:	e03f      	b.n	800dd76 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	695b      	ldr	r3, [r3, #20]
 800dcfc:	f003 0302 	and.w	r3, r3, #2
 800dd00:	2b02      	cmp	r3, #2
 800dd02:	d114      	bne.n	800dd2e <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	6812      	ldr	r2, [r2, #0]
 800dd0e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd14:	1d1a      	adds	r2, r3, #4
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd20:	b29b      	uxth	r3, r3
 800dd22:	3b01      	subs	r3, #1
 800dd24:	b29a      	uxth	r2, r3
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dd2c:	e023      	b.n	800dd76 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dd2e:	f7f6 f967 	bl	8004000 <HAL_GetTick>
 800dd32:	4602      	mov	r2, r0
 800dd34:	697b      	ldr	r3, [r7, #20]
 800dd36:	1ad3      	subs	r3, r2, r3
 800dd38:	683a      	ldr	r2, [r7, #0]
 800dd3a:	429a      	cmp	r2, r3
 800dd3c:	d803      	bhi.n	800dd46 <HAL_SPI_Transmit+0x16a>
 800dd3e:	683b      	ldr	r3, [r7, #0]
 800dd40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd44:	d102      	bne.n	800dd4c <HAL_SPI_Transmit+0x170>
 800dd46:	683b      	ldr	r3, [r7, #0]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d114      	bne.n	800dd76 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dd4c:	68f8      	ldr	r0, [r7, #12]
 800dd4e:	f000 fe23 	bl	800e998 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	2200      	movs	r2, #0
 800dd56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd60:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	2201      	movs	r2, #1
 800dd6e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800dd72:	2301      	movs	r3, #1
 800dd74:	e11f      	b.n	800dfb6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd7c:	b29b      	uxth	r3, r3
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d1b9      	bne.n	800dcf6 <HAL_SPI_Transmit+0x11a>
 800dd82:	e0f2      	b.n	800df6a <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	68db      	ldr	r3, [r3, #12]
 800dd88:	2b07      	cmp	r3, #7
 800dd8a:	f240 80e7 	bls.w	800df5c <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800dd8e:	e05d      	b.n	800de4c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	695b      	ldr	r3, [r3, #20]
 800dd96:	f003 0302 	and.w	r3, r3, #2
 800dd9a:	2b02      	cmp	r3, #2
 800dd9c:	d132      	bne.n	800de04 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dda4:	b29b      	uxth	r3, r3
 800dda6:	2b01      	cmp	r3, #1
 800dda8:	d918      	bls.n	800dddc <HAL_SPI_Transmit+0x200>
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d014      	beq.n	800dddc <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	6812      	ldr	r2, [r2, #0]
 800ddbc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ddc2:	1d1a      	adds	r2, r3, #4
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ddce:	b29b      	uxth	r3, r3
 800ddd0:	3b02      	subs	r3, #2
 800ddd2:	b29a      	uxth	r2, r3
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ddda:	e037      	b.n	800de4c <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dde0:	881a      	ldrh	r2, [r3, #0]
 800dde2:	69fb      	ldr	r3, [r7, #28]
 800dde4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ddea:	1c9a      	adds	r2, r3, #2
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ddf6:	b29b      	uxth	r3, r3
 800ddf8:	3b01      	subs	r3, #1
 800ddfa:	b29a      	uxth	r2, r3
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800de02:	e023      	b.n	800de4c <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800de04:	f7f6 f8fc 	bl	8004000 <HAL_GetTick>
 800de08:	4602      	mov	r2, r0
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	1ad3      	subs	r3, r2, r3
 800de0e:	683a      	ldr	r2, [r7, #0]
 800de10:	429a      	cmp	r2, r3
 800de12:	d803      	bhi.n	800de1c <HAL_SPI_Transmit+0x240>
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de1a:	d102      	bne.n	800de22 <HAL_SPI_Transmit+0x246>
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d114      	bne.n	800de4c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800de22:	68f8      	ldr	r0, [r7, #12]
 800de24:	f000 fdb8 	bl	800e998 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	2200      	movs	r2, #0
 800de2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	2201      	movs	r2, #1
 800de44:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800de48:	2301      	movs	r3, #1
 800de4a:	e0b4      	b.n	800dfb6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de52:	b29b      	uxth	r3, r3
 800de54:	2b00      	cmp	r3, #0
 800de56:	d19b      	bne.n	800dd90 <HAL_SPI_Transmit+0x1b4>
 800de58:	e087      	b.n	800df6a <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	695b      	ldr	r3, [r3, #20]
 800de60:	f003 0302 	and.w	r3, r3, #2
 800de64:	2b02      	cmp	r3, #2
 800de66:	d155      	bne.n	800df14 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de6e:	b29b      	uxth	r3, r3
 800de70:	2b03      	cmp	r3, #3
 800de72:	d918      	bls.n	800dea6 <HAL_SPI_Transmit+0x2ca>
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de78:	2b40      	cmp	r3, #64	; 0x40
 800de7a:	d914      	bls.n	800dea6 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	6812      	ldr	r2, [r2, #0]
 800de86:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de8c:	1d1a      	adds	r2, r3, #4
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de98:	b29b      	uxth	r3, r3
 800de9a:	3b04      	subs	r3, #4
 800de9c:	b29a      	uxth	r2, r3
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dea4:	e05a      	b.n	800df5c <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800deac:	b29b      	uxth	r3, r3
 800deae:	2b01      	cmp	r3, #1
 800deb0:	d917      	bls.n	800dee2 <HAL_SPI_Transmit+0x306>
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d013      	beq.n	800dee2 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800debe:	881a      	ldrh	r2, [r3, #0]
 800dec0:	69fb      	ldr	r3, [r7, #28]
 800dec2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dec8:	1c9a      	adds	r2, r3, #2
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ded4:	b29b      	uxth	r3, r3
 800ded6:	3b02      	subs	r3, #2
 800ded8:	b29a      	uxth	r2, r3
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dee0:	e03c      	b.n	800df5c <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	3320      	adds	r3, #32
 800deec:	7812      	ldrb	r2, [r2, #0]
 800deee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800def4:	1c5a      	adds	r2, r3, #1
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800df00:	b29b      	uxth	r3, r3
 800df02:	3b01      	subs	r3, #1
 800df04:	b29a      	uxth	r2, r3
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800df0c:	e026      	b.n	800df5c <HAL_SPI_Transmit+0x380>
 800df0e:	bf00      	nop
 800df10:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800df14:	f7f6 f874 	bl	8004000 <HAL_GetTick>
 800df18:	4602      	mov	r2, r0
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	1ad3      	subs	r3, r2, r3
 800df1e:	683a      	ldr	r2, [r7, #0]
 800df20:	429a      	cmp	r2, r3
 800df22:	d803      	bhi.n	800df2c <HAL_SPI_Transmit+0x350>
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df2a:	d102      	bne.n	800df32 <HAL_SPI_Transmit+0x356>
 800df2c:	683b      	ldr	r3, [r7, #0]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d114      	bne.n	800df5c <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800df32:	68f8      	ldr	r0, [r7, #12]
 800df34:	f000 fd30 	bl	800e998 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	2200      	movs	r2, #0
 800df3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	2201      	movs	r2, #1
 800df54:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800df58:	2301      	movs	r3, #1
 800df5a:	e02c      	b.n	800dfb6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800df62:	b29b      	uxth	r3, r3
 800df64:	2b00      	cmp	r3, #0
 800df66:	f47f af78 	bne.w	800de5a <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800df6a:	683b      	ldr	r3, [r7, #0]
 800df6c:	9300      	str	r3, [sp, #0]
 800df6e:	697b      	ldr	r3, [r7, #20]
 800df70:	2200      	movs	r2, #0
 800df72:	2108      	movs	r1, #8
 800df74:	68f8      	ldr	r0, [r7, #12]
 800df76:	f000 fdaf 	bl	800ead8 <SPI_WaitOnFlagUntilTimeout>
 800df7a:	4603      	mov	r3, r0
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d007      	beq.n	800df90 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df86:	f043 0220 	orr.w	r2, r3, #32
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800df90:	68f8      	ldr	r0, [r7, #12]
 800df92:	f000 fd01 	bl	800e998 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	2200      	movs	r2, #0
 800df9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	2201      	movs	r2, #1
 800dfa2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d001      	beq.n	800dfb4 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800dfb0:	2301      	movs	r3, #1
 800dfb2:	e000      	b.n	800dfb6 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800dfb4:	7efb      	ldrb	r3, [r7, #27]
}
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	3720      	adds	r7, #32
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	bd80      	pop	{r7, pc}
 800dfbe:	bf00      	nop

0800dfc0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b08a      	sub	sp, #40	; 0x28
 800dfc4:	af02      	add	r7, sp, #8
 800dfc6:	60f8      	str	r0, [r7, #12]
 800dfc8:	60b9      	str	r1, [r7, #8]
 800dfca:	603b      	str	r3, [r7, #0]
 800dfcc:	4613      	mov	r3, r2
 800dfce:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	3330      	adds	r3, #48	; 0x30
 800dfda:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	685b      	ldr	r3, [r3, #4]
 800dfe0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dfe4:	d112      	bne.n	800e00c <HAL_SPI_Receive+0x4c>
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	689b      	ldr	r3, [r3, #8]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d10e      	bne.n	800e00c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	2204      	movs	r2, #4
 800dff2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800dff6:	88fa      	ldrh	r2, [r7, #6]
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	9300      	str	r3, [sp, #0]
 800dffc:	4613      	mov	r3, r2
 800dffe:	68ba      	ldr	r2, [r7, #8]
 800e000:	68b9      	ldr	r1, [r7, #8]
 800e002:	68f8      	ldr	r0, [r7, #12]
 800e004:	f000 f9ce 	bl	800e3a4 <HAL_SPI_TransmitReceive>
 800e008:	4603      	mov	r3, r0
 800e00a:	e1c7      	b.n	800e39c <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e012:	2b01      	cmp	r3, #1
 800e014:	d101      	bne.n	800e01a <HAL_SPI_Receive+0x5a>
 800e016:	2302      	movs	r3, #2
 800e018:	e1c0      	b.n	800e39c <HAL_SPI_Receive+0x3dc>
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	2201      	movs	r2, #1
 800e01e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e022:	f7f5 ffed 	bl	8004000 <HAL_GetTick>
 800e026:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e02e:	b2db      	uxtb	r3, r3
 800e030:	2b01      	cmp	r3, #1
 800e032:	d007      	beq.n	800e044 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800e034:	2302      	movs	r3, #2
 800e036:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	2200      	movs	r2, #0
 800e03c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e040:	7ffb      	ldrb	r3, [r7, #31]
 800e042:	e1ab      	b.n	800e39c <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d002      	beq.n	800e050 <HAL_SPI_Receive+0x90>
 800e04a:	88fb      	ldrh	r3, [r7, #6]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d107      	bne.n	800e060 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800e050:	2301      	movs	r3, #1
 800e052:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	2200      	movs	r2, #0
 800e058:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e05c:	7ffb      	ldrb	r3, [r7, #31]
 800e05e:	e19d      	b.n	800e39c <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	2204      	movs	r2, #4
 800e064:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	2200      	movs	r2, #0
 800e06c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	68ba      	ldr	r2, [r7, #8]
 800e074:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	88fa      	ldrh	r2, [r7, #6]
 800e07a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	88fa      	ldrh	r2, [r7, #6]
 800e082:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	2200      	movs	r2, #0
 800e08a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	2200      	movs	r2, #0
 800e090:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	2200      	movs	r2, #0
 800e098:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	2200      	movs	r2, #0
 800e0a0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	689b      	ldr	r3, [r3, #8]
 800e0ac:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e0b0:	d107      	bne.n	800e0c2 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	681a      	ldr	r2, [r3, #0]
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e0c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	685a      	ldr	r2, [r3, #4]
 800e0c8:	4b94      	ldr	r3, [pc, #592]	; (800e31c <HAL_SPI_Receive+0x35c>)
 800e0ca:	4013      	ands	r3, r2
 800e0cc:	88f9      	ldrh	r1, [r7, #6]
 800e0ce:	68fa      	ldr	r2, [r7, #12]
 800e0d0:	6812      	ldr	r2, [r2, #0]
 800e0d2:	430b      	orrs	r3, r1
 800e0d4:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	681a      	ldr	r2, [r3, #0]
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	f042 0201 	orr.w	r2, r2, #1
 800e0e4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	685b      	ldr	r3, [r3, #4]
 800e0ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e0ee:	d107      	bne.n	800e100 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	681a      	ldr	r2, [r3, #0]
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e0fe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	68db      	ldr	r3, [r3, #12]
 800e104:	2b0f      	cmp	r3, #15
 800e106:	d948      	bls.n	800e19a <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e108:	e040      	b.n	800e18c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	695a      	ldr	r2, [r3, #20]
 800e110:	f248 0308 	movw	r3, #32776	; 0x8008
 800e114:	4013      	ands	r3, r2
 800e116:	2b00      	cmp	r3, #0
 800e118:	d014      	beq.n	800e144 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	681a      	ldr	r2, [r3, #0]
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e122:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e124:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e12a:	1d1a      	adds	r2, r3, #4
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e136:	b29b      	uxth	r3, r3
 800e138:	3b01      	subs	r3, #1
 800e13a:	b29a      	uxth	r2, r3
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e142:	e023      	b.n	800e18c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e144:	f7f5 ff5c 	bl	8004000 <HAL_GetTick>
 800e148:	4602      	mov	r2, r0
 800e14a:	697b      	ldr	r3, [r7, #20]
 800e14c:	1ad3      	subs	r3, r2, r3
 800e14e:	683a      	ldr	r2, [r7, #0]
 800e150:	429a      	cmp	r2, r3
 800e152:	d803      	bhi.n	800e15c <HAL_SPI_Receive+0x19c>
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e15a:	d102      	bne.n	800e162 <HAL_SPI_Receive+0x1a2>
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d114      	bne.n	800e18c <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e162:	68f8      	ldr	r0, [r7, #12]
 800e164:	f000 fc18 	bl	800e998 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	2200      	movs	r2, #0
 800e16c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e176:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	2201      	movs	r2, #1
 800e184:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e188:	2301      	movs	r3, #1
 800e18a:	e107      	b.n	800e39c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e192:	b29b      	uxth	r3, r3
 800e194:	2b00      	cmp	r3, #0
 800e196:	d1b8      	bne.n	800e10a <HAL_SPI_Receive+0x14a>
 800e198:	e0ed      	b.n	800e376 <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	68db      	ldr	r3, [r3, #12]
 800e19e:	2b07      	cmp	r3, #7
 800e1a0:	f240 80e2 	bls.w	800e368 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e1a4:	e05b      	b.n	800e25e <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	695b      	ldr	r3, [r3, #20]
 800e1ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d030      	beq.n	800e216 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	695b      	ldr	r3, [r3, #20]
 800e1ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d014      	beq.n	800e1ec <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	681a      	ldr	r2, [r3, #0]
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1ca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e1cc:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1d2:	1d1a      	adds	r2, r3, #4
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e1de:	b29b      	uxth	r3, r3
 800e1e0:	3b02      	subs	r3, #2
 800e1e2:	b29a      	uxth	r2, r3
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e1ea:	e038      	b.n	800e25e <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1f0:	69ba      	ldr	r2, [r7, #24]
 800e1f2:	8812      	ldrh	r2, [r2, #0]
 800e1f4:	b292      	uxth	r2, r2
 800e1f6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1fc:	1c9a      	adds	r2, r3, #2
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e208:	b29b      	uxth	r3, r3
 800e20a:	3b01      	subs	r3, #1
 800e20c:	b29a      	uxth	r2, r3
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e214:	e023      	b.n	800e25e <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e216:	f7f5 fef3 	bl	8004000 <HAL_GetTick>
 800e21a:	4602      	mov	r2, r0
 800e21c:	697b      	ldr	r3, [r7, #20]
 800e21e:	1ad3      	subs	r3, r2, r3
 800e220:	683a      	ldr	r2, [r7, #0]
 800e222:	429a      	cmp	r2, r3
 800e224:	d803      	bhi.n	800e22e <HAL_SPI_Receive+0x26e>
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e22c:	d102      	bne.n	800e234 <HAL_SPI_Receive+0x274>
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d114      	bne.n	800e25e <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e234:	68f8      	ldr	r0, [r7, #12]
 800e236:	f000 fbaf 	bl	800e998 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	2200      	movs	r2, #0
 800e23e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e248:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	2201      	movs	r2, #1
 800e256:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e25a:	2301      	movs	r3, #1
 800e25c:	e09e      	b.n	800e39c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e264:	b29b      	uxth	r3, r3
 800e266:	2b00      	cmp	r3, #0
 800e268:	d19d      	bne.n	800e1a6 <HAL_SPI_Receive+0x1e6>
 800e26a:	e084      	b.n	800e376 <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	695b      	ldr	r3, [r3, #20]
 800e272:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e276:	2b00      	cmp	r3, #0
 800e278:	d052      	beq.n	800e320 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	695b      	ldr	r3, [r3, #20]
 800e280:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e284:	2b00      	cmp	r3, #0
 800e286:	d014      	beq.n	800e2b2 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	681a      	ldr	r2, [r3, #0]
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e290:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e292:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e298:	1d1a      	adds	r2, r3, #4
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e2a4:	b29b      	uxth	r3, r3
 800e2a6:	3b04      	subs	r3, #4
 800e2a8:	b29a      	uxth	r2, r3
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e2b0:	e05a      	b.n	800e368 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	695b      	ldr	r3, [r3, #20]
 800e2b8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e2bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e2c0:	d914      	bls.n	800e2ec <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2c6:	69ba      	ldr	r2, [r7, #24]
 800e2c8:	8812      	ldrh	r2, [r2, #0]
 800e2ca:	b292      	uxth	r2, r2
 800e2cc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2d2:	1c9a      	adds	r2, r3, #2
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e2de:	b29b      	uxth	r3, r3
 800e2e0:	3b02      	subs	r3, #2
 800e2e2:	b29a      	uxth	r2, r3
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e2ea:	e03d      	b.n	800e368 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2f8:	7812      	ldrb	r2, [r2, #0]
 800e2fa:	b2d2      	uxtb	r2, r2
 800e2fc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e302:	1c5a      	adds	r2, r3, #1
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e30e:	b29b      	uxth	r3, r3
 800e310:	3b01      	subs	r3, #1
 800e312:	b29a      	uxth	r2, r3
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e31a:	e025      	b.n	800e368 <HAL_SPI_Receive+0x3a8>
 800e31c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e320:	f7f5 fe6e 	bl	8004000 <HAL_GetTick>
 800e324:	4602      	mov	r2, r0
 800e326:	697b      	ldr	r3, [r7, #20]
 800e328:	1ad3      	subs	r3, r2, r3
 800e32a:	683a      	ldr	r2, [r7, #0]
 800e32c:	429a      	cmp	r2, r3
 800e32e:	d803      	bhi.n	800e338 <HAL_SPI_Receive+0x378>
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e336:	d102      	bne.n	800e33e <HAL_SPI_Receive+0x37e>
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d114      	bne.n	800e368 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e33e:	68f8      	ldr	r0, [r7, #12]
 800e340:	f000 fb2a 	bl	800e998 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	2200      	movs	r2, #0
 800e348:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e352:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	2201      	movs	r2, #1
 800e360:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e364:	2301      	movs	r3, #1
 800e366:	e019      	b.n	800e39c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e36e:	b29b      	uxth	r3, r3
 800e370:	2b00      	cmp	r3, #0
 800e372:	f47f af7b 	bne.w	800e26c <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e376:	68f8      	ldr	r0, [r7, #12]
 800e378:	f000 fb0e 	bl	800e998 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	2200      	movs	r2, #0
 800e380:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	2201      	movs	r2, #1
 800e388:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e392:	2b00      	cmp	r3, #0
 800e394:	d001      	beq.n	800e39a <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800e396:	2301      	movs	r3, #1
 800e398:	e000      	b.n	800e39c <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800e39a:	7ffb      	ldrb	r3, [r7, #31]
}
 800e39c:	4618      	mov	r0, r3
 800e39e:	3720      	adds	r7, #32
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}

0800e3a4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b08e      	sub	sp, #56	; 0x38
 800e3a8:	af02      	add	r7, sp, #8
 800e3aa:	60f8      	str	r0, [r7, #12]
 800e3ac:	60b9      	str	r1, [r7, #8]
 800e3ae:	607a      	str	r2, [r7, #4]
 800e3b0:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	3320      	adds	r3, #32
 800e3be:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	3330      	adds	r3, #48	; 0x30
 800e3c6:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e3ce:	2b01      	cmp	r3, #1
 800e3d0:	d101      	bne.n	800e3d6 <HAL_SPI_TransmitReceive+0x32>
 800e3d2:	2302      	movs	r3, #2
 800e3d4:	e2ce      	b.n	800e974 <HAL_SPI_TransmitReceive+0x5d0>
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	2201      	movs	r2, #1
 800e3da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e3de:	f7f5 fe0f 	bl	8004000 <HAL_GetTick>
 800e3e2:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800e3e4:	887b      	ldrh	r3, [r7, #2]
 800e3e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800e3e8:	887b      	ldrh	r3, [r7, #2]
 800e3ea:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e3f2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	685b      	ldr	r3, [r3, #4]
 800e3f8:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e3fa:	7efb      	ldrb	r3, [r7, #27]
 800e3fc:	2b01      	cmp	r3, #1
 800e3fe:	d014      	beq.n	800e42a <HAL_SPI_TransmitReceive+0x86>
 800e400:	697b      	ldr	r3, [r7, #20]
 800e402:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e406:	d106      	bne.n	800e416 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	689b      	ldr	r3, [r3, #8]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d102      	bne.n	800e416 <HAL_SPI_TransmitReceive+0x72>
 800e410:	7efb      	ldrb	r3, [r7, #27]
 800e412:	2b04      	cmp	r3, #4
 800e414:	d009      	beq.n	800e42a <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800e416:	2302      	movs	r3, #2
 800e418:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	2200      	movs	r2, #0
 800e420:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e424:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e428:	e2a4      	b.n	800e974 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d005      	beq.n	800e43c <HAL_SPI_TransmitReceive+0x98>
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d002      	beq.n	800e43c <HAL_SPI_TransmitReceive+0x98>
 800e436:	887b      	ldrh	r3, [r7, #2]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d109      	bne.n	800e450 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800e43c:	2301      	movs	r3, #1
 800e43e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	2200      	movs	r2, #0
 800e446:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e44a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e44e:	e291      	b.n	800e974 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e456:	b2db      	uxtb	r3, r3
 800e458:	2b04      	cmp	r3, #4
 800e45a:	d003      	beq.n	800e464 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	2205      	movs	r2, #5
 800e460:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	2200      	movs	r2, #0
 800e468:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	687a      	ldr	r2, [r7, #4]
 800e470:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	887a      	ldrh	r2, [r7, #2]
 800e476:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	887a      	ldrh	r2, [r7, #2]
 800e47e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	68ba      	ldr	r2, [r7, #8]
 800e486:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	887a      	ldrh	r2, [r7, #2]
 800e48c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	887a      	ldrh	r2, [r7, #2]
 800e494:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	2200      	movs	r2, #0
 800e49c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	685a      	ldr	r2, [r3, #4]
 800e4aa:	4b9f      	ldr	r3, [pc, #636]	; (800e728 <HAL_SPI_TransmitReceive+0x384>)
 800e4ac:	4013      	ands	r3, r2
 800e4ae:	8879      	ldrh	r1, [r7, #2]
 800e4b0:	68fa      	ldr	r2, [r7, #12]
 800e4b2:	6812      	ldr	r2, [r2, #0]
 800e4b4:	430b      	orrs	r3, r1
 800e4b6:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	681a      	ldr	r2, [r3, #0]
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	f042 0201 	orr.w	r2, r2, #1
 800e4c6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	685b      	ldr	r3, [r3, #4]
 800e4cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e4d0:	d107      	bne.n	800e4e2 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	681a      	ldr	r2, [r3, #0]
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e4e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	68db      	ldr	r3, [r3, #12]
 800e4e6:	2b0f      	cmp	r3, #15
 800e4e8:	d970      	bls.n	800e5cc <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e4ea:	e068      	b.n	800e5be <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	695b      	ldr	r3, [r3, #20]
 800e4f2:	f003 0302 	and.w	r3, r3, #2
 800e4f6:	2b02      	cmp	r3, #2
 800e4f8:	d11a      	bne.n	800e530 <HAL_SPI_TransmitReceive+0x18c>
 800e4fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d017      	beq.n	800e530 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	6812      	ldr	r2, [r2, #0]
 800e50a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e510:	1d1a      	adds	r2, r3, #4
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e51c:	b29b      	uxth	r3, r3
 800e51e:	3b01      	subs	r3, #1
 800e520:	b29a      	uxth	r2, r3
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e52e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	695a      	ldr	r2, [r3, #20]
 800e536:	f248 0308 	movw	r3, #32776	; 0x8008
 800e53a:	4013      	ands	r3, r2
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d01a      	beq.n	800e576 <HAL_SPI_TransmitReceive+0x1d2>
 800e540:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e542:	2b00      	cmp	r3, #0
 800e544:	d017      	beq.n	800e576 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	681a      	ldr	r2, [r3, #0]
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e54e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e550:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e556:	1d1a      	adds	r2, r3, #4
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e562:	b29b      	uxth	r3, r3
 800e564:	3b01      	subs	r3, #1
 800e566:	b29a      	uxth	r2, r3
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e574:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e576:	f7f5 fd43 	bl	8004000 <HAL_GetTick>
 800e57a:	4602      	mov	r2, r0
 800e57c:	69fb      	ldr	r3, [r7, #28]
 800e57e:	1ad3      	subs	r3, r2, r3
 800e580:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e582:	429a      	cmp	r2, r3
 800e584:	d803      	bhi.n	800e58e <HAL_SPI_TransmitReceive+0x1ea>
 800e586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e588:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e58c:	d102      	bne.n	800e594 <HAL_SPI_TransmitReceive+0x1f0>
 800e58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e590:	2b00      	cmp	r3, #0
 800e592:	d114      	bne.n	800e5be <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800e594:	68f8      	ldr	r0, [r7, #12]
 800e596:	f000 f9ff 	bl	800e998 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	2200      	movs	r2, #0
 800e59e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e5a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	2201      	movs	r2, #1
 800e5b6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800e5ba:	2301      	movs	r3, #1
 800e5bc:	e1da      	b.n	800e974 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e5be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d193      	bne.n	800e4ec <HAL_SPI_TransmitReceive+0x148>
 800e5c4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d190      	bne.n	800e4ec <HAL_SPI_TransmitReceive+0x148>
 800e5ca:	e1ac      	b.n	800e926 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	68db      	ldr	r3, [r3, #12]
 800e5d0:	2b07      	cmp	r3, #7
 800e5d2:	f240 81a0 	bls.w	800e916 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e5d6:	e0a9      	b.n	800e72c <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	695b      	ldr	r3, [r3, #20]
 800e5de:	f003 0302 	and.w	r3, r3, #2
 800e5e2:	2b02      	cmp	r3, #2
 800e5e4:	d139      	bne.n	800e65a <HAL_SPI_TransmitReceive+0x2b6>
 800e5e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d036      	beq.n	800e65a <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e5ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e5ee:	2b01      	cmp	r3, #1
 800e5f0:	d91c      	bls.n	800e62c <HAL_SPI_TransmitReceive+0x288>
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d018      	beq.n	800e62c <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	6812      	ldr	r2, [r2, #0]
 800e604:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e60a:	1d1a      	adds	r2, r3, #4
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e616:	b29b      	uxth	r3, r3
 800e618:	3b02      	subs	r3, #2
 800e61a:	b29a      	uxth	r2, r3
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e628:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e62a:	e016      	b.n	800e65a <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e630:	881a      	ldrh	r2, [r3, #0]
 800e632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e634:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e63a:	1c9a      	adds	r2, r3, #2
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e646:	b29b      	uxth	r3, r3
 800e648:	3b01      	subs	r3, #1
 800e64a:	b29a      	uxth	r2, r3
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e658:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	695b      	ldr	r3, [r3, #20]
 800e660:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e664:	2b00      	cmp	r3, #0
 800e666:	d03a      	beq.n	800e6de <HAL_SPI_TransmitReceive+0x33a>
 800e668:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d037      	beq.n	800e6de <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	695b      	ldr	r3, [r3, #20]
 800e674:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d018      	beq.n	800e6ae <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	681a      	ldr	r2, [r3, #0]
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e684:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e686:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e68c:	1d1a      	adds	r2, r3, #4
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e698:	b29b      	uxth	r3, r3
 800e69a:	3b02      	subs	r3, #2
 800e69c:	b29a      	uxth	r2, r3
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e6aa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e6ac:	e017      	b.n	800e6de <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6b2:	6a3a      	ldr	r2, [r7, #32]
 800e6b4:	8812      	ldrh	r2, [r2, #0]
 800e6b6:	b292      	uxth	r2, r2
 800e6b8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6be:	1c9a      	adds	r2, r3, #2
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e6ca:	b29b      	uxth	r3, r3
 800e6cc:	3b01      	subs	r3, #1
 800e6ce:	b29a      	uxth	r2, r3
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e6dc:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e6de:	f7f5 fc8f 	bl	8004000 <HAL_GetTick>
 800e6e2:	4602      	mov	r2, r0
 800e6e4:	69fb      	ldr	r3, [r7, #28]
 800e6e6:	1ad3      	subs	r3, r2, r3
 800e6e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e6ea:	429a      	cmp	r2, r3
 800e6ec:	d803      	bhi.n	800e6f6 <HAL_SPI_TransmitReceive+0x352>
 800e6ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e6f4:	d102      	bne.n	800e6fc <HAL_SPI_TransmitReceive+0x358>
 800e6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d117      	bne.n	800e72c <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800e6fc:	68f8      	ldr	r0, [r7, #12]
 800e6fe:	f000 f94b 	bl	800e998 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	2200      	movs	r2, #0
 800e706:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e710:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	2201      	movs	r2, #1
 800e71e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800e722:	2301      	movs	r3, #1
 800e724:	e126      	b.n	800e974 <HAL_SPI_TransmitReceive+0x5d0>
 800e726:	bf00      	nop
 800e728:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e72c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e72e:	2b00      	cmp	r3, #0
 800e730:	f47f af52 	bne.w	800e5d8 <HAL_SPI_TransmitReceive+0x234>
 800e734:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e736:	2b00      	cmp	r3, #0
 800e738:	f47f af4e 	bne.w	800e5d8 <HAL_SPI_TransmitReceive+0x234>
 800e73c:	e0f3      	b.n	800e926 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	695b      	ldr	r3, [r3, #20]
 800e744:	f003 0302 	and.w	r3, r3, #2
 800e748:	2b02      	cmp	r3, #2
 800e74a:	d15a      	bne.n	800e802 <HAL_SPI_TransmitReceive+0x45e>
 800e74c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d057      	beq.n	800e802 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800e752:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e754:	2b03      	cmp	r3, #3
 800e756:	d91c      	bls.n	800e792 <HAL_SPI_TransmitReceive+0x3ee>
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e75c:	2b40      	cmp	r3, #64	; 0x40
 800e75e:	d918      	bls.n	800e792 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	6812      	ldr	r2, [r2, #0]
 800e76a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e770:	1d1a      	adds	r2, r3, #4
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e77c:	b29b      	uxth	r3, r3
 800e77e:	3b04      	subs	r3, #4
 800e780:	b29a      	uxth	r2, r3
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e78e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e790:	e037      	b.n	800e802 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e792:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e794:	2b01      	cmp	r3, #1
 800e796:	d91b      	bls.n	800e7d0 <HAL_SPI_TransmitReceive+0x42c>
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d017      	beq.n	800e7d0 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e7a4:	881a      	ldrh	r2, [r3, #0]
 800e7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e7ae:	1c9a      	adds	r2, r3, #2
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e7ba:	b29b      	uxth	r3, r3
 800e7bc:	3b02      	subs	r3, #2
 800e7be:	b29a      	uxth	r2, r3
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e7cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e7ce:	e018      	b.n	800e802 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	3320      	adds	r3, #32
 800e7da:	7812      	ldrb	r2, [r2, #0]
 800e7dc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e7e2:	1c5a      	adds	r2, r3, #1
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e7ee:	b29b      	uxth	r3, r3
 800e7f0:	3b01      	subs	r3, #1
 800e7f2:	b29a      	uxth	r2, r3
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e800:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	695b      	ldr	r3, [r3, #20]
 800e808:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d05e      	beq.n	800e8ce <HAL_SPI_TransmitReceive+0x52a>
 800e810:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e812:	2b00      	cmp	r3, #0
 800e814:	d05b      	beq.n	800e8ce <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	695b      	ldr	r3, [r3, #20]
 800e81c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e820:	2b00      	cmp	r3, #0
 800e822:	d018      	beq.n	800e856 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	681a      	ldr	r2, [r3, #0]
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e82c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e82e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e834:	1d1a      	adds	r2, r3, #4
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e840:	b29b      	uxth	r3, r3
 800e842:	3b04      	subs	r3, #4
 800e844:	b29a      	uxth	r2, r3
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e852:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e854:	e03b      	b.n	800e8ce <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	695b      	ldr	r3, [r3, #20]
 800e85c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e864:	d918      	bls.n	800e898 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e86a:	6a3a      	ldr	r2, [r7, #32]
 800e86c:	8812      	ldrh	r2, [r2, #0]
 800e86e:	b292      	uxth	r2, r2
 800e870:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e876:	1c9a      	adds	r2, r3, #2
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e882:	b29b      	uxth	r3, r3
 800e884:	3b02      	subs	r3, #2
 800e886:	b29a      	uxth	r2, r3
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e894:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e896:	e01a      	b.n	800e8ce <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8a4:	7812      	ldrb	r2, [r2, #0]
 800e8a6:	b2d2      	uxtb	r2, r2
 800e8a8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8ae:	1c5a      	adds	r2, r3, #1
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e8ba:	b29b      	uxth	r3, r3
 800e8bc:	3b01      	subs	r3, #1
 800e8be:	b29a      	uxth	r2, r3
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e8cc:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e8ce:	f7f5 fb97 	bl	8004000 <HAL_GetTick>
 800e8d2:	4602      	mov	r2, r0
 800e8d4:	69fb      	ldr	r3, [r7, #28]
 800e8d6:	1ad3      	subs	r3, r2, r3
 800e8d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e8da:	429a      	cmp	r2, r3
 800e8dc:	d803      	bhi.n	800e8e6 <HAL_SPI_TransmitReceive+0x542>
 800e8de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e8e4:	d102      	bne.n	800e8ec <HAL_SPI_TransmitReceive+0x548>
 800e8e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d114      	bne.n	800e916 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800e8ec:	68f8      	ldr	r0, [r7, #12]
 800e8ee:	f000 f853 	bl	800e998 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e900:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	2201      	movs	r2, #1
 800e90e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800e912:	2301      	movs	r3, #1
 800e914:	e02e      	b.n	800e974 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e916:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e918:	2b00      	cmp	r3, #0
 800e91a:	f47f af10 	bne.w	800e73e <HAL_SPI_TransmitReceive+0x39a>
 800e91e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e920:	2b00      	cmp	r3, #0
 800e922:	f47f af0c 	bne.w	800e73e <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800e926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e928:	9300      	str	r3, [sp, #0]
 800e92a:	69fb      	ldr	r3, [r7, #28]
 800e92c:	2200      	movs	r2, #0
 800e92e:	2108      	movs	r1, #8
 800e930:	68f8      	ldr	r0, [r7, #12]
 800e932:	f000 f8d1 	bl	800ead8 <SPI_WaitOnFlagUntilTimeout>
 800e936:	4603      	mov	r3, r0
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d007      	beq.n	800e94c <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e942:	f043 0220 	orr.w	r2, r3, #32
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e94c:	68f8      	ldr	r0, [r7, #12]
 800e94e:	f000 f823 	bl	800e998 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	2200      	movs	r2, #0
 800e956:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	2201      	movs	r2, #1
 800e95e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d001      	beq.n	800e970 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800e96c:	2301      	movs	r3, #1
 800e96e:	e001      	b.n	800e974 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800e970:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800e974:	4618      	mov	r0, r3
 800e976:	3730      	adds	r7, #48	; 0x30
 800e978:	46bd      	mov	sp, r7
 800e97a:	bd80      	pop	{r7, pc}

0800e97c <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800e97c:	b480      	push	{r7}
 800e97e:	b083      	sub	sp, #12
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e98a:	b2db      	uxtb	r3, r3
}
 800e98c:	4618      	mov	r0, r3
 800e98e:	370c      	adds	r7, #12
 800e990:	46bd      	mov	sp, r7
 800e992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e996:	4770      	bx	lr

0800e998 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e998:	b480      	push	{r7}
 800e99a:	b085      	sub	sp, #20
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	695b      	ldr	r3, [r3, #20]
 800e9a6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	699a      	ldr	r2, [r3, #24]
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	f042 0208 	orr.w	r2, r2, #8
 800e9b6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	699a      	ldr	r2, [r3, #24]
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	f042 0210 	orr.w	r2, r2, #16
 800e9c6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	681a      	ldr	r2, [r3, #0]
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	f022 0201 	bic.w	r2, r2, #1
 800e9d6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	6919      	ldr	r1, [r3, #16]
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681a      	ldr	r2, [r3, #0]
 800e9e2:	4b3c      	ldr	r3, [pc, #240]	; (800ead4 <SPI_CloseTransfer+0x13c>)
 800e9e4:	400b      	ands	r3, r1
 800e9e6:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	689a      	ldr	r2, [r3, #8]
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e9f6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e9fe:	b2db      	uxtb	r3, r3
 800ea00:	2b04      	cmp	r3, #4
 800ea02:	d014      	beq.n	800ea2e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	f003 0320 	and.w	r3, r3, #32
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d00f      	beq.n	800ea2e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea14:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	699a      	ldr	r2, [r3, #24]
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	f042 0220 	orr.w	r2, r2, #32
 800ea2c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ea34:	b2db      	uxtb	r3, r3
 800ea36:	2b03      	cmp	r3, #3
 800ea38:	d014      	beq.n	800ea64 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d00f      	beq.n	800ea64 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea4a:	f043 0204 	orr.w	r2, r3, #4
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	699a      	ldr	r2, [r3, #24]
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ea62:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d00f      	beq.n	800ea8e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea74:	f043 0201 	orr.w	r2, r3, #1
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	699a      	ldr	r2, [r3, #24]
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ea8c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d00f      	beq.n	800eab8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea9e:	f043 0208 	orr.w	r2, r3, #8
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	699a      	ldr	r2, [r3, #24]
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800eab6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2200      	movs	r2, #0
 800eabc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	2200      	movs	r2, #0
 800eac4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800eac8:	bf00      	nop
 800eaca:	3714      	adds	r7, #20
 800eacc:	46bd      	mov	sp, r7
 800eace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead2:	4770      	bx	lr
 800ead4:	fffffc90 	.word	0xfffffc90

0800ead8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b084      	sub	sp, #16
 800eadc:	af00      	add	r7, sp, #0
 800eade:	60f8      	str	r0, [r7, #12]
 800eae0:	60b9      	str	r1, [r7, #8]
 800eae2:	603b      	str	r3, [r7, #0]
 800eae4:	4613      	mov	r3, r2
 800eae6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800eae8:	e010      	b.n	800eb0c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eaea:	f7f5 fa89 	bl	8004000 <HAL_GetTick>
 800eaee:	4602      	mov	r2, r0
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	1ad3      	subs	r3, r2, r3
 800eaf4:	69ba      	ldr	r2, [r7, #24]
 800eaf6:	429a      	cmp	r2, r3
 800eaf8:	d803      	bhi.n	800eb02 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800eafa:	69bb      	ldr	r3, [r7, #24]
 800eafc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb00:	d102      	bne.n	800eb08 <SPI_WaitOnFlagUntilTimeout+0x30>
 800eb02:	69bb      	ldr	r3, [r7, #24]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d101      	bne.n	800eb0c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800eb08:	2303      	movs	r3, #3
 800eb0a:	e00f      	b.n	800eb2c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	695a      	ldr	r2, [r3, #20]
 800eb12:	68bb      	ldr	r3, [r7, #8]
 800eb14:	4013      	ands	r3, r2
 800eb16:	68ba      	ldr	r2, [r7, #8]
 800eb18:	429a      	cmp	r2, r3
 800eb1a:	bf0c      	ite	eq
 800eb1c:	2301      	moveq	r3, #1
 800eb1e:	2300      	movne	r3, #0
 800eb20:	b2db      	uxtb	r3, r3
 800eb22:	461a      	mov	r2, r3
 800eb24:	79fb      	ldrb	r3, [r7, #7]
 800eb26:	429a      	cmp	r2, r3
 800eb28:	d0df      	beq.n	800eaea <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800eb2a:	2300      	movs	r3, #0
}
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	3710      	adds	r7, #16
 800eb30:	46bd      	mov	sp, r7
 800eb32:	bd80      	pop	{r7, pc}

0800eb34 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800eb34:	b480      	push	{r7}
 800eb36:	b085      	sub	sp, #20
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb40:	095b      	lsrs	r3, r3, #5
 800eb42:	3301      	adds	r3, #1
 800eb44:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	68db      	ldr	r3, [r3, #12]
 800eb4a:	3301      	adds	r3, #1
 800eb4c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800eb4e:	68bb      	ldr	r3, [r7, #8]
 800eb50:	3307      	adds	r3, #7
 800eb52:	08db      	lsrs	r3, r3, #3
 800eb54:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800eb56:	68bb      	ldr	r3, [r7, #8]
 800eb58:	68fa      	ldr	r2, [r7, #12]
 800eb5a:	fb02 f303 	mul.w	r3, r2, r3
}
 800eb5e:	4618      	mov	r0, r3
 800eb60:	3714      	adds	r7, #20
 800eb62:	46bd      	mov	sp, r7
 800eb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb68:	4770      	bx	lr
	...

0800eb6c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b084      	sub	sp, #16
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	60f8      	str	r0, [r7, #12]
 800eb74:	60b9      	str	r1, [r7, #8]
 800eb76:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d101      	bne.n	800eb82 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800eb7e:	2301      	movs	r3, #1
 800eb80:	e03e      	b.n	800ec00 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eb88:	b2db      	uxtb	r3, r3
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d106      	bne.n	800eb9c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	2200      	movs	r2, #0
 800eb92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800eb96:	68f8      	ldr	r0, [r7, #12]
 800eb98:	f7f2 fd12 	bl	80015c0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	681a      	ldr	r2, [r3, #0]
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	3308      	adds	r3, #8
 800eba4:	4619      	mov	r1, r3
 800eba6:	4610      	mov	r0, r2
 800eba8:	f001 fdd0 	bl	801074c <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	6818      	ldr	r0, [r3, #0]
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	689b      	ldr	r3, [r3, #8]
 800ebb4:	461a      	mov	r2, r3
 800ebb6:	68b9      	ldr	r1, [r7, #8]
 800ebb8:	f001 fe58 	bl	801086c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	6858      	ldr	r0, [r3, #4]
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	689a      	ldr	r2, [r3, #8]
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebc8:	6879      	ldr	r1, [r7, #4]
 800ebca:	f001 fe9f 	bl	801090c <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	68fa      	ldr	r2, [r7, #12]
 800ebd4:	6892      	ldr	r2, [r2, #8]
 800ebd6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	68fa      	ldr	r2, [r7, #12]
 800ebe0:	6892      	ldr	r2, [r2, #8]
 800ebe2:	f041 0101 	orr.w	r1, r1, #1
 800ebe6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800ebea:	4b07      	ldr	r3, [pc, #28]	; (800ec08 <HAL_SRAM_Init+0x9c>)
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	4a06      	ldr	r2, [pc, #24]	; (800ec08 <HAL_SRAM_Init+0x9c>)
 800ebf0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ebf4:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	2201      	movs	r2, #1
 800ebfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800ebfe:	2300      	movs	r3, #0
}
 800ec00:	4618      	mov	r0, r3
 800ec02:	3710      	adds	r7, #16
 800ec04:	46bd      	mov	sp, r7
 800ec06:	bd80      	pop	{r7, pc}
 800ec08:	52004000 	.word	0x52004000

0800ec0c <HAL_SRAM_Write_8b>:
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pSrcBuffer,
                                    uint32_t BufferSize)
{
 800ec0c:	b480      	push	{r7}
 800ec0e:	b089      	sub	sp, #36	; 0x24
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	60f8      	str	r0, [r7, #12]
 800ec14:	60b9      	str	r1, [r7, #8]
 800ec16:	607a      	str	r2, [r7, #4]
 800ec18:	603b      	str	r3, [r7, #0]
  uint32_t size;
  __IO uint8_t *psramaddress = (uint8_t *)pAddress;
 800ec1a:	68bb      	ldr	r3, [r7, #8]
 800ec1c:	61bb      	str	r3, [r7, #24]
  uint8_t *psrcbuff = pSrcBuffer;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	617b      	str	r3, [r7, #20]

  /* Check the SRAM controller state */
  if (hsram->State == HAL_SRAM_STATE_READY)
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ec28:	b2db      	uxtb	r3, r3
 800ec2a:	2b01      	cmp	r3, #1
 800ec2c:	d12b      	bne.n	800ec86 <HAL_SRAM_Write_8b+0x7a>
  {
    /* Process Locked */
    __HAL_LOCK(hsram);
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ec34:	2b01      	cmp	r3, #1
 800ec36:	d101      	bne.n	800ec3c <HAL_SRAM_Write_8b+0x30>
 800ec38:	2302      	movs	r3, #2
 800ec3a:	e025      	b.n	800ec88 <HAL_SRAM_Write_8b+0x7c>
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	2201      	movs	r2, #1
 800ec40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_BUSY;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	2202      	movs	r2, #2
 800ec48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Write data to memory */
    for (size = BufferSize; size != 0U; size--)
 800ec4c:	683b      	ldr	r3, [r7, #0]
 800ec4e:	61fb      	str	r3, [r7, #28]
 800ec50:	e00c      	b.n	800ec6c <HAL_SRAM_Write_8b+0x60>
    {
      *psramaddress = *psrcbuff;
 800ec52:	697b      	ldr	r3, [r7, #20]
 800ec54:	781a      	ldrb	r2, [r3, #0]
 800ec56:	69bb      	ldr	r3, [r7, #24]
 800ec58:	701a      	strb	r2, [r3, #0]
      psrcbuff++;
 800ec5a:	697b      	ldr	r3, [r7, #20]
 800ec5c:	3301      	adds	r3, #1
 800ec5e:	617b      	str	r3, [r7, #20]
      psramaddress++;
 800ec60:	69bb      	ldr	r3, [r7, #24]
 800ec62:	3301      	adds	r3, #1
 800ec64:	61bb      	str	r3, [r7, #24]
    for (size = BufferSize; size != 0U; size--)
 800ec66:	69fb      	ldr	r3, [r7, #28]
 800ec68:	3b01      	subs	r3, #1
 800ec6a:	61fb      	str	r3, [r7, #28]
 800ec6c:	69fb      	ldr	r3, [r7, #28]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d1ef      	bne.n	800ec52 <HAL_SRAM_Write_8b+0x46>
    }

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_READY;
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	2201      	movs	r2, #1
 800ec76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Process unlocked */
    __HAL_UNLOCK(hsram);
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800ec82:	2300      	movs	r3, #0
 800ec84:	e000      	b.n	800ec88 <HAL_SRAM_Write_8b+0x7c>
    return HAL_ERROR;
 800ec86:	2301      	movs	r3, #1
}
 800ec88:	4618      	mov	r0, r3
 800ec8a:	3724      	adds	r7, #36	; 0x24
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec92:	4770      	bx	lr

0800ec94 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b082      	sub	sp, #8
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d101      	bne.n	800eca6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800eca2:	2301      	movs	r3, #1
 800eca4:	e049      	b.n	800ed3a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ecac:	b2db      	uxtb	r3, r3
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d106      	bne.n	800ecc0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800ecba:	6878      	ldr	r0, [r7, #4]
 800ecbc:	f7f4 fd3e 	bl	800373c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	2202      	movs	r2, #2
 800ecc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681a      	ldr	r2, [r3, #0]
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	3304      	adds	r3, #4
 800ecd0:	4619      	mov	r1, r3
 800ecd2:	4610      	mov	r0, r2
 800ecd4:	f000 f8ac 	bl	800ee30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	2201      	movs	r2, #1
 800ecdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2201      	movs	r2, #1
 800ece4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	2201      	movs	r2, #1
 800ecec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2201      	movs	r2, #1
 800ecf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2201      	movs	r2, #1
 800ecfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	2201      	movs	r2, #1
 800ed04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2201      	movs	r2, #1
 800ed0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2201      	movs	r2, #1
 800ed14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	2201      	movs	r2, #1
 800ed1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	2201      	movs	r2, #1
 800ed24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2201      	movs	r2, #1
 800ed2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	2201      	movs	r2, #1
 800ed34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ed38:	2300      	movs	r3, #0
}
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	3708      	adds	r7, #8
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}
	...

0800ed44 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b084      	sub	sp, #16
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	60f8      	str	r0, [r7, #12]
 800ed4c:	60b9      	str	r1, [r7, #8]
 800ed4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ed56:	2b01      	cmp	r3, #1
 800ed58:	d101      	bne.n	800ed5e <HAL_TIM_OC_ConfigChannel+0x1a>
 800ed5a:	2302      	movs	r3, #2
 800ed5c:	e064      	b.n	800ee28 <HAL_TIM_OC_ConfigChannel+0xe4>
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	2201      	movs	r2, #1
 800ed62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	2b14      	cmp	r3, #20
 800ed6a:	d857      	bhi.n	800ee1c <HAL_TIM_OC_ConfigChannel+0xd8>
 800ed6c:	a201      	add	r2, pc, #4	; (adr r2, 800ed74 <HAL_TIM_OC_ConfigChannel+0x30>)
 800ed6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed72:	bf00      	nop
 800ed74:	0800edc9 	.word	0x0800edc9
 800ed78:	0800ee1d 	.word	0x0800ee1d
 800ed7c:	0800ee1d 	.word	0x0800ee1d
 800ed80:	0800ee1d 	.word	0x0800ee1d
 800ed84:	0800edd7 	.word	0x0800edd7
 800ed88:	0800ee1d 	.word	0x0800ee1d
 800ed8c:	0800ee1d 	.word	0x0800ee1d
 800ed90:	0800ee1d 	.word	0x0800ee1d
 800ed94:	0800ede5 	.word	0x0800ede5
 800ed98:	0800ee1d 	.word	0x0800ee1d
 800ed9c:	0800ee1d 	.word	0x0800ee1d
 800eda0:	0800ee1d 	.word	0x0800ee1d
 800eda4:	0800edf3 	.word	0x0800edf3
 800eda8:	0800ee1d 	.word	0x0800ee1d
 800edac:	0800ee1d 	.word	0x0800ee1d
 800edb0:	0800ee1d 	.word	0x0800ee1d
 800edb4:	0800ee01 	.word	0x0800ee01
 800edb8:	0800ee1d 	.word	0x0800ee1d
 800edbc:	0800ee1d 	.word	0x0800ee1d
 800edc0:	0800ee1d 	.word	0x0800ee1d
 800edc4:	0800ee0f 	.word	0x0800ee0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	68b9      	ldr	r1, [r7, #8]
 800edce:	4618      	mov	r0, r3
 800edd0:	f000 f8c8 	bl	800ef64 <TIM_OC1_SetConfig>
      break;
 800edd4:	e023      	b.n	800ee1e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	68b9      	ldr	r1, [r7, #8]
 800eddc:	4618      	mov	r0, r3
 800edde:	f000 f951 	bl	800f084 <TIM_OC2_SetConfig>
      break;
 800ede2:	e01c      	b.n	800ee1e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	68b9      	ldr	r1, [r7, #8]
 800edea:	4618      	mov	r0, r3
 800edec:	f000 f9d4 	bl	800f198 <TIM_OC3_SetConfig>
      break;
 800edf0:	e015      	b.n	800ee1e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	68b9      	ldr	r1, [r7, #8]
 800edf8:	4618      	mov	r0, r3
 800edfa:	f000 fa53 	bl	800f2a4 <TIM_OC4_SetConfig>
      break;
 800edfe:	e00e      	b.n	800ee1e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	68b9      	ldr	r1, [r7, #8]
 800ee06:	4618      	mov	r0, r3
 800ee08:	f000 fab4 	bl	800f374 <TIM_OC5_SetConfig>
      break;
 800ee0c:	e007      	b.n	800ee1e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	68b9      	ldr	r1, [r7, #8]
 800ee14:	4618      	mov	r0, r3
 800ee16:	f000 fb0f 	bl	800f438 <TIM_OC6_SetConfig>
      break;
 800ee1a:	e000      	b.n	800ee1e <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 800ee1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	2200      	movs	r2, #0
 800ee22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ee26:	2300      	movs	r3, #0
}
 800ee28:	4618      	mov	r0, r3
 800ee2a:	3710      	adds	r7, #16
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	bd80      	pop	{r7, pc}

0800ee30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ee30:	b480      	push	{r7}
 800ee32:	b085      	sub	sp, #20
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	6078      	str	r0, [r7, #4]
 800ee38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	4a40      	ldr	r2, [pc, #256]	; (800ef44 <TIM_Base_SetConfig+0x114>)
 800ee44:	4293      	cmp	r3, r2
 800ee46:	d013      	beq.n	800ee70 <TIM_Base_SetConfig+0x40>
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ee4e:	d00f      	beq.n	800ee70 <TIM_Base_SetConfig+0x40>
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	4a3d      	ldr	r2, [pc, #244]	; (800ef48 <TIM_Base_SetConfig+0x118>)
 800ee54:	4293      	cmp	r3, r2
 800ee56:	d00b      	beq.n	800ee70 <TIM_Base_SetConfig+0x40>
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	4a3c      	ldr	r2, [pc, #240]	; (800ef4c <TIM_Base_SetConfig+0x11c>)
 800ee5c:	4293      	cmp	r3, r2
 800ee5e:	d007      	beq.n	800ee70 <TIM_Base_SetConfig+0x40>
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	4a3b      	ldr	r2, [pc, #236]	; (800ef50 <TIM_Base_SetConfig+0x120>)
 800ee64:	4293      	cmp	r3, r2
 800ee66:	d003      	beq.n	800ee70 <TIM_Base_SetConfig+0x40>
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	4a3a      	ldr	r2, [pc, #232]	; (800ef54 <TIM_Base_SetConfig+0x124>)
 800ee6c:	4293      	cmp	r3, r2
 800ee6e:	d108      	bne.n	800ee82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ee78:	683b      	ldr	r3, [r7, #0]
 800ee7a:	685b      	ldr	r3, [r3, #4]
 800ee7c:	68fa      	ldr	r2, [r7, #12]
 800ee7e:	4313      	orrs	r3, r2
 800ee80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	4a2f      	ldr	r2, [pc, #188]	; (800ef44 <TIM_Base_SetConfig+0x114>)
 800ee86:	4293      	cmp	r3, r2
 800ee88:	d01f      	beq.n	800eeca <TIM_Base_SetConfig+0x9a>
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ee90:	d01b      	beq.n	800eeca <TIM_Base_SetConfig+0x9a>
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	4a2c      	ldr	r2, [pc, #176]	; (800ef48 <TIM_Base_SetConfig+0x118>)
 800ee96:	4293      	cmp	r3, r2
 800ee98:	d017      	beq.n	800eeca <TIM_Base_SetConfig+0x9a>
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	4a2b      	ldr	r2, [pc, #172]	; (800ef4c <TIM_Base_SetConfig+0x11c>)
 800ee9e:	4293      	cmp	r3, r2
 800eea0:	d013      	beq.n	800eeca <TIM_Base_SetConfig+0x9a>
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	4a2a      	ldr	r2, [pc, #168]	; (800ef50 <TIM_Base_SetConfig+0x120>)
 800eea6:	4293      	cmp	r3, r2
 800eea8:	d00f      	beq.n	800eeca <TIM_Base_SetConfig+0x9a>
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	4a29      	ldr	r2, [pc, #164]	; (800ef54 <TIM_Base_SetConfig+0x124>)
 800eeae:	4293      	cmp	r3, r2
 800eeb0:	d00b      	beq.n	800eeca <TIM_Base_SetConfig+0x9a>
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	4a28      	ldr	r2, [pc, #160]	; (800ef58 <TIM_Base_SetConfig+0x128>)
 800eeb6:	4293      	cmp	r3, r2
 800eeb8:	d007      	beq.n	800eeca <TIM_Base_SetConfig+0x9a>
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	4a27      	ldr	r2, [pc, #156]	; (800ef5c <TIM_Base_SetConfig+0x12c>)
 800eebe:	4293      	cmp	r3, r2
 800eec0:	d003      	beq.n	800eeca <TIM_Base_SetConfig+0x9a>
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	4a26      	ldr	r2, [pc, #152]	; (800ef60 <TIM_Base_SetConfig+0x130>)
 800eec6:	4293      	cmp	r3, r2
 800eec8:	d108      	bne.n	800eedc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800eed2:	683b      	ldr	r3, [r7, #0]
 800eed4:	68db      	ldr	r3, [r3, #12]
 800eed6:	68fa      	ldr	r2, [r7, #12]
 800eed8:	4313      	orrs	r3, r2
 800eeda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	695b      	ldr	r3, [r3, #20]
 800eee6:	4313      	orrs	r3, r2
 800eee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	68fa      	ldr	r2, [r7, #12]
 800eeee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800eef0:	683b      	ldr	r3, [r7, #0]
 800eef2:	689a      	ldr	r2, [r3, #8]
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800eef8:	683b      	ldr	r3, [r7, #0]
 800eefa:	681a      	ldr	r2, [r3, #0]
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	4a10      	ldr	r2, [pc, #64]	; (800ef44 <TIM_Base_SetConfig+0x114>)
 800ef04:	4293      	cmp	r3, r2
 800ef06:	d00f      	beq.n	800ef28 <TIM_Base_SetConfig+0xf8>
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	4a12      	ldr	r2, [pc, #72]	; (800ef54 <TIM_Base_SetConfig+0x124>)
 800ef0c:	4293      	cmp	r3, r2
 800ef0e:	d00b      	beq.n	800ef28 <TIM_Base_SetConfig+0xf8>
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	4a11      	ldr	r2, [pc, #68]	; (800ef58 <TIM_Base_SetConfig+0x128>)
 800ef14:	4293      	cmp	r3, r2
 800ef16:	d007      	beq.n	800ef28 <TIM_Base_SetConfig+0xf8>
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	4a10      	ldr	r2, [pc, #64]	; (800ef5c <TIM_Base_SetConfig+0x12c>)
 800ef1c:	4293      	cmp	r3, r2
 800ef1e:	d003      	beq.n	800ef28 <TIM_Base_SetConfig+0xf8>
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	4a0f      	ldr	r2, [pc, #60]	; (800ef60 <TIM_Base_SetConfig+0x130>)
 800ef24:	4293      	cmp	r3, r2
 800ef26:	d103      	bne.n	800ef30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	691a      	ldr	r2, [r3, #16]
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	2201      	movs	r2, #1
 800ef34:	615a      	str	r2, [r3, #20]
}
 800ef36:	bf00      	nop
 800ef38:	3714      	adds	r7, #20
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef40:	4770      	bx	lr
 800ef42:	bf00      	nop
 800ef44:	40010000 	.word	0x40010000
 800ef48:	40000400 	.word	0x40000400
 800ef4c:	40000800 	.word	0x40000800
 800ef50:	40000c00 	.word	0x40000c00
 800ef54:	40010400 	.word	0x40010400
 800ef58:	40014000 	.word	0x40014000
 800ef5c:	40014400 	.word	0x40014400
 800ef60:	40014800 	.word	0x40014800

0800ef64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ef64:	b480      	push	{r7}
 800ef66:	b087      	sub	sp, #28
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
 800ef6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	6a1b      	ldr	r3, [r3, #32]
 800ef72:	f023 0201 	bic.w	r2, r3, #1
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	6a1b      	ldr	r3, [r3, #32]
 800ef7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	685b      	ldr	r3, [r3, #4]
 800ef84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	699b      	ldr	r3, [r3, #24]
 800ef8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ef8c:	68fa      	ldr	r2, [r7, #12]
 800ef8e:	4b37      	ldr	r3, [pc, #220]	; (800f06c <TIM_OC1_SetConfig+0x108>)
 800ef90:	4013      	ands	r3, r2
 800ef92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	f023 0303 	bic.w	r3, r3, #3
 800ef9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	68fa      	ldr	r2, [r7, #12]
 800efa2:	4313      	orrs	r3, r2
 800efa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800efa6:	697b      	ldr	r3, [r7, #20]
 800efa8:	f023 0302 	bic.w	r3, r3, #2
 800efac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800efae:	683b      	ldr	r3, [r7, #0]
 800efb0:	689b      	ldr	r3, [r3, #8]
 800efb2:	697a      	ldr	r2, [r7, #20]
 800efb4:	4313      	orrs	r3, r2
 800efb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	4a2d      	ldr	r2, [pc, #180]	; (800f070 <TIM_OC1_SetConfig+0x10c>)
 800efbc:	4293      	cmp	r3, r2
 800efbe:	d00f      	beq.n	800efe0 <TIM_OC1_SetConfig+0x7c>
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	4a2c      	ldr	r2, [pc, #176]	; (800f074 <TIM_OC1_SetConfig+0x110>)
 800efc4:	4293      	cmp	r3, r2
 800efc6:	d00b      	beq.n	800efe0 <TIM_OC1_SetConfig+0x7c>
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	4a2b      	ldr	r2, [pc, #172]	; (800f078 <TIM_OC1_SetConfig+0x114>)
 800efcc:	4293      	cmp	r3, r2
 800efce:	d007      	beq.n	800efe0 <TIM_OC1_SetConfig+0x7c>
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	4a2a      	ldr	r2, [pc, #168]	; (800f07c <TIM_OC1_SetConfig+0x118>)
 800efd4:	4293      	cmp	r3, r2
 800efd6:	d003      	beq.n	800efe0 <TIM_OC1_SetConfig+0x7c>
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	4a29      	ldr	r2, [pc, #164]	; (800f080 <TIM_OC1_SetConfig+0x11c>)
 800efdc:	4293      	cmp	r3, r2
 800efde:	d10c      	bne.n	800effa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800efe0:	697b      	ldr	r3, [r7, #20]
 800efe2:	f023 0308 	bic.w	r3, r3, #8
 800efe6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800efe8:	683b      	ldr	r3, [r7, #0]
 800efea:	68db      	ldr	r3, [r3, #12]
 800efec:	697a      	ldr	r2, [r7, #20]
 800efee:	4313      	orrs	r3, r2
 800eff0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800eff2:	697b      	ldr	r3, [r7, #20]
 800eff4:	f023 0304 	bic.w	r3, r3, #4
 800eff8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	4a1c      	ldr	r2, [pc, #112]	; (800f070 <TIM_OC1_SetConfig+0x10c>)
 800effe:	4293      	cmp	r3, r2
 800f000:	d00f      	beq.n	800f022 <TIM_OC1_SetConfig+0xbe>
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	4a1b      	ldr	r2, [pc, #108]	; (800f074 <TIM_OC1_SetConfig+0x110>)
 800f006:	4293      	cmp	r3, r2
 800f008:	d00b      	beq.n	800f022 <TIM_OC1_SetConfig+0xbe>
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	4a1a      	ldr	r2, [pc, #104]	; (800f078 <TIM_OC1_SetConfig+0x114>)
 800f00e:	4293      	cmp	r3, r2
 800f010:	d007      	beq.n	800f022 <TIM_OC1_SetConfig+0xbe>
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	4a19      	ldr	r2, [pc, #100]	; (800f07c <TIM_OC1_SetConfig+0x118>)
 800f016:	4293      	cmp	r3, r2
 800f018:	d003      	beq.n	800f022 <TIM_OC1_SetConfig+0xbe>
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	4a18      	ldr	r2, [pc, #96]	; (800f080 <TIM_OC1_SetConfig+0x11c>)
 800f01e:	4293      	cmp	r3, r2
 800f020:	d111      	bne.n	800f046 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f022:	693b      	ldr	r3, [r7, #16]
 800f024:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f028:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f02a:	693b      	ldr	r3, [r7, #16]
 800f02c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f030:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f032:	683b      	ldr	r3, [r7, #0]
 800f034:	695b      	ldr	r3, [r3, #20]
 800f036:	693a      	ldr	r2, [r7, #16]
 800f038:	4313      	orrs	r3, r2
 800f03a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	699b      	ldr	r3, [r3, #24]
 800f040:	693a      	ldr	r2, [r7, #16]
 800f042:	4313      	orrs	r3, r2
 800f044:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	693a      	ldr	r2, [r7, #16]
 800f04a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	68fa      	ldr	r2, [r7, #12]
 800f050:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f052:	683b      	ldr	r3, [r7, #0]
 800f054:	685a      	ldr	r2, [r3, #4]
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	697a      	ldr	r2, [r7, #20]
 800f05e:	621a      	str	r2, [r3, #32]
}
 800f060:	bf00      	nop
 800f062:	371c      	adds	r7, #28
 800f064:	46bd      	mov	sp, r7
 800f066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06a:	4770      	bx	lr
 800f06c:	fffeff8f 	.word	0xfffeff8f
 800f070:	40010000 	.word	0x40010000
 800f074:	40010400 	.word	0x40010400
 800f078:	40014000 	.word	0x40014000
 800f07c:	40014400 	.word	0x40014400
 800f080:	40014800 	.word	0x40014800

0800f084 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f084:	b480      	push	{r7}
 800f086:	b087      	sub	sp, #28
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
 800f08c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	6a1b      	ldr	r3, [r3, #32]
 800f092:	f023 0210 	bic.w	r2, r3, #16
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	6a1b      	ldr	r3, [r3, #32]
 800f09e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	685b      	ldr	r3, [r3, #4]
 800f0a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	699b      	ldr	r3, [r3, #24]
 800f0aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f0ac:	68fa      	ldr	r2, [r7, #12]
 800f0ae:	4b34      	ldr	r3, [pc, #208]	; (800f180 <TIM_OC2_SetConfig+0xfc>)
 800f0b0:	4013      	ands	r3, r2
 800f0b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f0ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f0bc:	683b      	ldr	r3, [r7, #0]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	021b      	lsls	r3, r3, #8
 800f0c2:	68fa      	ldr	r2, [r7, #12]
 800f0c4:	4313      	orrs	r3, r2
 800f0c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f0c8:	697b      	ldr	r3, [r7, #20]
 800f0ca:	f023 0320 	bic.w	r3, r3, #32
 800f0ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f0d0:	683b      	ldr	r3, [r7, #0]
 800f0d2:	689b      	ldr	r3, [r3, #8]
 800f0d4:	011b      	lsls	r3, r3, #4
 800f0d6:	697a      	ldr	r2, [r7, #20]
 800f0d8:	4313      	orrs	r3, r2
 800f0da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	4a29      	ldr	r2, [pc, #164]	; (800f184 <TIM_OC2_SetConfig+0x100>)
 800f0e0:	4293      	cmp	r3, r2
 800f0e2:	d003      	beq.n	800f0ec <TIM_OC2_SetConfig+0x68>
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	4a28      	ldr	r2, [pc, #160]	; (800f188 <TIM_OC2_SetConfig+0x104>)
 800f0e8:	4293      	cmp	r3, r2
 800f0ea:	d10d      	bne.n	800f108 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f0ec:	697b      	ldr	r3, [r7, #20]
 800f0ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f0f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f0f4:	683b      	ldr	r3, [r7, #0]
 800f0f6:	68db      	ldr	r3, [r3, #12]
 800f0f8:	011b      	lsls	r3, r3, #4
 800f0fa:	697a      	ldr	r2, [r7, #20]
 800f0fc:	4313      	orrs	r3, r2
 800f0fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f100:	697b      	ldr	r3, [r7, #20]
 800f102:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f106:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	4a1e      	ldr	r2, [pc, #120]	; (800f184 <TIM_OC2_SetConfig+0x100>)
 800f10c:	4293      	cmp	r3, r2
 800f10e:	d00f      	beq.n	800f130 <TIM_OC2_SetConfig+0xac>
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	4a1d      	ldr	r2, [pc, #116]	; (800f188 <TIM_OC2_SetConfig+0x104>)
 800f114:	4293      	cmp	r3, r2
 800f116:	d00b      	beq.n	800f130 <TIM_OC2_SetConfig+0xac>
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	4a1c      	ldr	r2, [pc, #112]	; (800f18c <TIM_OC2_SetConfig+0x108>)
 800f11c:	4293      	cmp	r3, r2
 800f11e:	d007      	beq.n	800f130 <TIM_OC2_SetConfig+0xac>
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	4a1b      	ldr	r2, [pc, #108]	; (800f190 <TIM_OC2_SetConfig+0x10c>)
 800f124:	4293      	cmp	r3, r2
 800f126:	d003      	beq.n	800f130 <TIM_OC2_SetConfig+0xac>
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	4a1a      	ldr	r2, [pc, #104]	; (800f194 <TIM_OC2_SetConfig+0x110>)
 800f12c:	4293      	cmp	r3, r2
 800f12e:	d113      	bne.n	800f158 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f130:	693b      	ldr	r3, [r7, #16]
 800f132:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f136:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f138:	693b      	ldr	r3, [r7, #16]
 800f13a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f13e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	695b      	ldr	r3, [r3, #20]
 800f144:	009b      	lsls	r3, r3, #2
 800f146:	693a      	ldr	r2, [r7, #16]
 800f148:	4313      	orrs	r3, r2
 800f14a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f14c:	683b      	ldr	r3, [r7, #0]
 800f14e:	699b      	ldr	r3, [r3, #24]
 800f150:	009b      	lsls	r3, r3, #2
 800f152:	693a      	ldr	r2, [r7, #16]
 800f154:	4313      	orrs	r3, r2
 800f156:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	693a      	ldr	r2, [r7, #16]
 800f15c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	68fa      	ldr	r2, [r7, #12]
 800f162:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f164:	683b      	ldr	r3, [r7, #0]
 800f166:	685a      	ldr	r2, [r3, #4]
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	697a      	ldr	r2, [r7, #20]
 800f170:	621a      	str	r2, [r3, #32]
}
 800f172:	bf00      	nop
 800f174:	371c      	adds	r7, #28
 800f176:	46bd      	mov	sp, r7
 800f178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f17c:	4770      	bx	lr
 800f17e:	bf00      	nop
 800f180:	feff8fff 	.word	0xfeff8fff
 800f184:	40010000 	.word	0x40010000
 800f188:	40010400 	.word	0x40010400
 800f18c:	40014000 	.word	0x40014000
 800f190:	40014400 	.word	0x40014400
 800f194:	40014800 	.word	0x40014800

0800f198 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f198:	b480      	push	{r7}
 800f19a:	b087      	sub	sp, #28
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
 800f1a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	6a1b      	ldr	r3, [r3, #32]
 800f1a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	6a1b      	ldr	r3, [r3, #32]
 800f1b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	685b      	ldr	r3, [r3, #4]
 800f1b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	69db      	ldr	r3, [r3, #28]
 800f1be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	f023 0303 	bic.w	r3, r3, #3
 800f1ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	68fa      	ldr	r2, [r7, #12]
 800f1d6:	4313      	orrs	r3, r2
 800f1d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f1da:	697b      	ldr	r3, [r7, #20]
 800f1dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f1e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f1e2:	683b      	ldr	r3, [r7, #0]
 800f1e4:	689b      	ldr	r3, [r3, #8]
 800f1e6:	021b      	lsls	r3, r3, #8
 800f1e8:	697a      	ldr	r2, [r7, #20]
 800f1ea:	4313      	orrs	r3, r2
 800f1ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	4a27      	ldr	r2, [pc, #156]	; (800f290 <TIM_OC3_SetConfig+0xf8>)
 800f1f2:	4293      	cmp	r3, r2
 800f1f4:	d003      	beq.n	800f1fe <TIM_OC3_SetConfig+0x66>
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	4a26      	ldr	r2, [pc, #152]	; (800f294 <TIM_OC3_SetConfig+0xfc>)
 800f1fa:	4293      	cmp	r3, r2
 800f1fc:	d10d      	bne.n	800f21a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f1fe:	697b      	ldr	r3, [r7, #20]
 800f200:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f204:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	68db      	ldr	r3, [r3, #12]
 800f20a:	021b      	lsls	r3, r3, #8
 800f20c:	697a      	ldr	r2, [r7, #20]
 800f20e:	4313      	orrs	r3, r2
 800f210:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f212:	697b      	ldr	r3, [r7, #20]
 800f214:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f218:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	4a1c      	ldr	r2, [pc, #112]	; (800f290 <TIM_OC3_SetConfig+0xf8>)
 800f21e:	4293      	cmp	r3, r2
 800f220:	d00f      	beq.n	800f242 <TIM_OC3_SetConfig+0xaa>
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	4a1b      	ldr	r2, [pc, #108]	; (800f294 <TIM_OC3_SetConfig+0xfc>)
 800f226:	4293      	cmp	r3, r2
 800f228:	d00b      	beq.n	800f242 <TIM_OC3_SetConfig+0xaa>
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	4a1a      	ldr	r2, [pc, #104]	; (800f298 <TIM_OC3_SetConfig+0x100>)
 800f22e:	4293      	cmp	r3, r2
 800f230:	d007      	beq.n	800f242 <TIM_OC3_SetConfig+0xaa>
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	4a19      	ldr	r2, [pc, #100]	; (800f29c <TIM_OC3_SetConfig+0x104>)
 800f236:	4293      	cmp	r3, r2
 800f238:	d003      	beq.n	800f242 <TIM_OC3_SetConfig+0xaa>
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	4a18      	ldr	r2, [pc, #96]	; (800f2a0 <TIM_OC3_SetConfig+0x108>)
 800f23e:	4293      	cmp	r3, r2
 800f240:	d113      	bne.n	800f26a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f242:	693b      	ldr	r3, [r7, #16]
 800f244:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f248:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f24a:	693b      	ldr	r3, [r7, #16]
 800f24c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f250:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	695b      	ldr	r3, [r3, #20]
 800f256:	011b      	lsls	r3, r3, #4
 800f258:	693a      	ldr	r2, [r7, #16]
 800f25a:	4313      	orrs	r3, r2
 800f25c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	699b      	ldr	r3, [r3, #24]
 800f262:	011b      	lsls	r3, r3, #4
 800f264:	693a      	ldr	r2, [r7, #16]
 800f266:	4313      	orrs	r3, r2
 800f268:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	693a      	ldr	r2, [r7, #16]
 800f26e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	68fa      	ldr	r2, [r7, #12]
 800f274:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f276:	683b      	ldr	r3, [r7, #0]
 800f278:	685a      	ldr	r2, [r3, #4]
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	697a      	ldr	r2, [r7, #20]
 800f282:	621a      	str	r2, [r3, #32]
}
 800f284:	bf00      	nop
 800f286:	371c      	adds	r7, #28
 800f288:	46bd      	mov	sp, r7
 800f28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28e:	4770      	bx	lr
 800f290:	40010000 	.word	0x40010000
 800f294:	40010400 	.word	0x40010400
 800f298:	40014000 	.word	0x40014000
 800f29c:	40014400 	.word	0x40014400
 800f2a0:	40014800 	.word	0x40014800

0800f2a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f2a4:	b480      	push	{r7}
 800f2a6:	b087      	sub	sp, #28
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
 800f2ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	6a1b      	ldr	r3, [r3, #32]
 800f2b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	6a1b      	ldr	r3, [r3, #32]
 800f2be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	685b      	ldr	r3, [r3, #4]
 800f2c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	69db      	ldr	r3, [r3, #28]
 800f2ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f2d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f2da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f2dc:	683b      	ldr	r3, [r7, #0]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	021b      	lsls	r3, r3, #8
 800f2e2:	68fa      	ldr	r2, [r7, #12]
 800f2e4:	4313      	orrs	r3, r2
 800f2e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f2e8:	693b      	ldr	r3, [r7, #16]
 800f2ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f2ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	689b      	ldr	r3, [r3, #8]
 800f2f4:	031b      	lsls	r3, r3, #12
 800f2f6:	693a      	ldr	r2, [r7, #16]
 800f2f8:	4313      	orrs	r3, r2
 800f2fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	4a18      	ldr	r2, [pc, #96]	; (800f360 <TIM_OC4_SetConfig+0xbc>)
 800f300:	4293      	cmp	r3, r2
 800f302:	d00f      	beq.n	800f324 <TIM_OC4_SetConfig+0x80>
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	4a17      	ldr	r2, [pc, #92]	; (800f364 <TIM_OC4_SetConfig+0xc0>)
 800f308:	4293      	cmp	r3, r2
 800f30a:	d00b      	beq.n	800f324 <TIM_OC4_SetConfig+0x80>
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	4a16      	ldr	r2, [pc, #88]	; (800f368 <TIM_OC4_SetConfig+0xc4>)
 800f310:	4293      	cmp	r3, r2
 800f312:	d007      	beq.n	800f324 <TIM_OC4_SetConfig+0x80>
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	4a15      	ldr	r2, [pc, #84]	; (800f36c <TIM_OC4_SetConfig+0xc8>)
 800f318:	4293      	cmp	r3, r2
 800f31a:	d003      	beq.n	800f324 <TIM_OC4_SetConfig+0x80>
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	4a14      	ldr	r2, [pc, #80]	; (800f370 <TIM_OC4_SetConfig+0xcc>)
 800f320:	4293      	cmp	r3, r2
 800f322:	d109      	bne.n	800f338 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f324:	697b      	ldr	r3, [r7, #20]
 800f326:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f32a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	695b      	ldr	r3, [r3, #20]
 800f330:	019b      	lsls	r3, r3, #6
 800f332:	697a      	ldr	r2, [r7, #20]
 800f334:	4313      	orrs	r3, r2
 800f336:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	697a      	ldr	r2, [r7, #20]
 800f33c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	68fa      	ldr	r2, [r7, #12]
 800f342:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	685a      	ldr	r2, [r3, #4]
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	693a      	ldr	r2, [r7, #16]
 800f350:	621a      	str	r2, [r3, #32]
}
 800f352:	bf00      	nop
 800f354:	371c      	adds	r7, #28
 800f356:	46bd      	mov	sp, r7
 800f358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35c:	4770      	bx	lr
 800f35e:	bf00      	nop
 800f360:	40010000 	.word	0x40010000
 800f364:	40010400 	.word	0x40010400
 800f368:	40014000 	.word	0x40014000
 800f36c:	40014400 	.word	0x40014400
 800f370:	40014800 	.word	0x40014800

0800f374 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f374:	b480      	push	{r7}
 800f376:	b087      	sub	sp, #28
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
 800f37c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	6a1b      	ldr	r3, [r3, #32]
 800f382:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	6a1b      	ldr	r3, [r3, #32]
 800f38e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	685b      	ldr	r3, [r3, #4]
 800f394:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f39a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f3a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	68fa      	ldr	r2, [r7, #12]
 800f3aa:	4313      	orrs	r3, r2
 800f3ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f3ae:	693b      	ldr	r3, [r7, #16]
 800f3b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f3b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	689b      	ldr	r3, [r3, #8]
 800f3ba:	041b      	lsls	r3, r3, #16
 800f3bc:	693a      	ldr	r2, [r7, #16]
 800f3be:	4313      	orrs	r3, r2
 800f3c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	4a17      	ldr	r2, [pc, #92]	; (800f424 <TIM_OC5_SetConfig+0xb0>)
 800f3c6:	4293      	cmp	r3, r2
 800f3c8:	d00f      	beq.n	800f3ea <TIM_OC5_SetConfig+0x76>
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	4a16      	ldr	r2, [pc, #88]	; (800f428 <TIM_OC5_SetConfig+0xb4>)
 800f3ce:	4293      	cmp	r3, r2
 800f3d0:	d00b      	beq.n	800f3ea <TIM_OC5_SetConfig+0x76>
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	4a15      	ldr	r2, [pc, #84]	; (800f42c <TIM_OC5_SetConfig+0xb8>)
 800f3d6:	4293      	cmp	r3, r2
 800f3d8:	d007      	beq.n	800f3ea <TIM_OC5_SetConfig+0x76>
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	4a14      	ldr	r2, [pc, #80]	; (800f430 <TIM_OC5_SetConfig+0xbc>)
 800f3de:	4293      	cmp	r3, r2
 800f3e0:	d003      	beq.n	800f3ea <TIM_OC5_SetConfig+0x76>
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	4a13      	ldr	r2, [pc, #76]	; (800f434 <TIM_OC5_SetConfig+0xc0>)
 800f3e6:	4293      	cmp	r3, r2
 800f3e8:	d109      	bne.n	800f3fe <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f3ea:	697b      	ldr	r3, [r7, #20]
 800f3ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f3f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f3f2:	683b      	ldr	r3, [r7, #0]
 800f3f4:	695b      	ldr	r3, [r3, #20]
 800f3f6:	021b      	lsls	r3, r3, #8
 800f3f8:	697a      	ldr	r2, [r7, #20]
 800f3fa:	4313      	orrs	r3, r2
 800f3fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	697a      	ldr	r2, [r7, #20]
 800f402:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	68fa      	ldr	r2, [r7, #12]
 800f408:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f40a:	683b      	ldr	r3, [r7, #0]
 800f40c:	685a      	ldr	r2, [r3, #4]
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	693a      	ldr	r2, [r7, #16]
 800f416:	621a      	str	r2, [r3, #32]
}
 800f418:	bf00      	nop
 800f41a:	371c      	adds	r7, #28
 800f41c:	46bd      	mov	sp, r7
 800f41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f422:	4770      	bx	lr
 800f424:	40010000 	.word	0x40010000
 800f428:	40010400 	.word	0x40010400
 800f42c:	40014000 	.word	0x40014000
 800f430:	40014400 	.word	0x40014400
 800f434:	40014800 	.word	0x40014800

0800f438 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f438:	b480      	push	{r7}
 800f43a:	b087      	sub	sp, #28
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
 800f440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	6a1b      	ldr	r3, [r3, #32]
 800f446:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	6a1b      	ldr	r3, [r3, #32]
 800f452:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	685b      	ldr	r3, [r3, #4]
 800f458:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f45e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	021b      	lsls	r3, r3, #8
 800f46e:	68fa      	ldr	r2, [r7, #12]
 800f470:	4313      	orrs	r3, r2
 800f472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f474:	693b      	ldr	r3, [r7, #16]
 800f476:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f47a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	689b      	ldr	r3, [r3, #8]
 800f480:	051b      	lsls	r3, r3, #20
 800f482:	693a      	ldr	r2, [r7, #16]
 800f484:	4313      	orrs	r3, r2
 800f486:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	4a18      	ldr	r2, [pc, #96]	; (800f4ec <TIM_OC6_SetConfig+0xb4>)
 800f48c:	4293      	cmp	r3, r2
 800f48e:	d00f      	beq.n	800f4b0 <TIM_OC6_SetConfig+0x78>
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	4a17      	ldr	r2, [pc, #92]	; (800f4f0 <TIM_OC6_SetConfig+0xb8>)
 800f494:	4293      	cmp	r3, r2
 800f496:	d00b      	beq.n	800f4b0 <TIM_OC6_SetConfig+0x78>
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	4a16      	ldr	r2, [pc, #88]	; (800f4f4 <TIM_OC6_SetConfig+0xbc>)
 800f49c:	4293      	cmp	r3, r2
 800f49e:	d007      	beq.n	800f4b0 <TIM_OC6_SetConfig+0x78>
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	4a15      	ldr	r2, [pc, #84]	; (800f4f8 <TIM_OC6_SetConfig+0xc0>)
 800f4a4:	4293      	cmp	r3, r2
 800f4a6:	d003      	beq.n	800f4b0 <TIM_OC6_SetConfig+0x78>
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	4a14      	ldr	r2, [pc, #80]	; (800f4fc <TIM_OC6_SetConfig+0xc4>)
 800f4ac:	4293      	cmp	r3, r2
 800f4ae:	d109      	bne.n	800f4c4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f4b0:	697b      	ldr	r3, [r7, #20]
 800f4b2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f4b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f4b8:	683b      	ldr	r3, [r7, #0]
 800f4ba:	695b      	ldr	r3, [r3, #20]
 800f4bc:	029b      	lsls	r3, r3, #10
 800f4be:	697a      	ldr	r2, [r7, #20]
 800f4c0:	4313      	orrs	r3, r2
 800f4c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	697a      	ldr	r2, [r7, #20]
 800f4c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	68fa      	ldr	r2, [r7, #12]
 800f4ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	685a      	ldr	r2, [r3, #4]
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	693a      	ldr	r2, [r7, #16]
 800f4dc:	621a      	str	r2, [r3, #32]
}
 800f4de:	bf00      	nop
 800f4e0:	371c      	adds	r7, #28
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e8:	4770      	bx	lr
 800f4ea:	bf00      	nop
 800f4ec:	40010000 	.word	0x40010000
 800f4f0:	40010400 	.word	0x40010400
 800f4f4:	40014000 	.word	0x40014000
 800f4f8:	40014400 	.word	0x40014400
 800f4fc:	40014800 	.word	0x40014800

0800f500 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f500:	b480      	push	{r7}
 800f502:	b085      	sub	sp, #20
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
 800f508:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f510:	2b01      	cmp	r3, #1
 800f512:	d101      	bne.n	800f518 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f514:	2302      	movs	r3, #2
 800f516:	e068      	b.n	800f5ea <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	2201      	movs	r2, #1
 800f51c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	2202      	movs	r2, #2
 800f524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	685b      	ldr	r3, [r3, #4]
 800f52e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	689b      	ldr	r3, [r3, #8]
 800f536:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	4a2e      	ldr	r2, [pc, #184]	; (800f5f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800f53e:	4293      	cmp	r3, r2
 800f540:	d004      	beq.n	800f54c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	4a2d      	ldr	r2, [pc, #180]	; (800f5fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800f548:	4293      	cmp	r3, r2
 800f54a:	d108      	bne.n	800f55e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f552:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f554:	683b      	ldr	r3, [r7, #0]
 800f556:	685b      	ldr	r3, [r3, #4]
 800f558:	68fa      	ldr	r2, [r7, #12]
 800f55a:	4313      	orrs	r3, r2
 800f55c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f564:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f566:	683b      	ldr	r3, [r7, #0]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	68fa      	ldr	r2, [r7, #12]
 800f56c:	4313      	orrs	r3, r2
 800f56e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	68fa      	ldr	r2, [r7, #12]
 800f576:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	4a1e      	ldr	r2, [pc, #120]	; (800f5f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800f57e:	4293      	cmp	r3, r2
 800f580:	d01d      	beq.n	800f5be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f58a:	d018      	beq.n	800f5be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	4a1b      	ldr	r2, [pc, #108]	; (800f600 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f592:	4293      	cmp	r3, r2
 800f594:	d013      	beq.n	800f5be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	4a1a      	ldr	r2, [pc, #104]	; (800f604 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f59c:	4293      	cmp	r3, r2
 800f59e:	d00e      	beq.n	800f5be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	4a18      	ldr	r2, [pc, #96]	; (800f608 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f5a6:	4293      	cmp	r3, r2
 800f5a8:	d009      	beq.n	800f5be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	4a13      	ldr	r2, [pc, #76]	; (800f5fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800f5b0:	4293      	cmp	r3, r2
 800f5b2:	d004      	beq.n	800f5be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	4a14      	ldr	r2, [pc, #80]	; (800f60c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f5ba:	4293      	cmp	r3, r2
 800f5bc:	d10c      	bne.n	800f5d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f5be:	68bb      	ldr	r3, [r7, #8]
 800f5c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f5c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f5c6:	683b      	ldr	r3, [r7, #0]
 800f5c8:	689b      	ldr	r3, [r3, #8]
 800f5ca:	68ba      	ldr	r2, [r7, #8]
 800f5cc:	4313      	orrs	r3, r2
 800f5ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	68ba      	ldr	r2, [r7, #8]
 800f5d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2201      	movs	r2, #1
 800f5dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f5e8:	2300      	movs	r3, #0
}
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	3714      	adds	r7, #20
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f4:	4770      	bx	lr
 800f5f6:	bf00      	nop
 800f5f8:	40010000 	.word	0x40010000
 800f5fc:	40010400 	.word	0x40010400
 800f600:	40000400 	.word	0x40000400
 800f604:	40000800 	.word	0x40000800
 800f608:	40000c00 	.word	0x40000c00
 800f60c:	40001800 	.word	0x40001800

0800f610 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f610:	b480      	push	{r7}
 800f612:	b085      	sub	sp, #20
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
 800f618:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f61a:	2300      	movs	r3, #0
 800f61c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f624:	2b01      	cmp	r3, #1
 800f626:	d101      	bne.n	800f62c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f628:	2302      	movs	r3, #2
 800f62a:	e065      	b.n	800f6f8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	2201      	movs	r2, #1
 800f630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f63a:	683b      	ldr	r3, [r7, #0]
 800f63c:	68db      	ldr	r3, [r3, #12]
 800f63e:	4313      	orrs	r3, r2
 800f640:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	689b      	ldr	r3, [r3, #8]
 800f64c:	4313      	orrs	r3, r2
 800f64e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f656:	683b      	ldr	r3, [r7, #0]
 800f658:	685b      	ldr	r3, [r3, #4]
 800f65a:	4313      	orrs	r3, r2
 800f65c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f664:	683b      	ldr	r3, [r7, #0]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	4313      	orrs	r3, r2
 800f66a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	691b      	ldr	r3, [r3, #16]
 800f676:	4313      	orrs	r3, r2
 800f678:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f680:	683b      	ldr	r3, [r7, #0]
 800f682:	695b      	ldr	r3, [r3, #20]
 800f684:	4313      	orrs	r3, r2
 800f686:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f68e:	683b      	ldr	r3, [r7, #0]
 800f690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f692:	4313      	orrs	r3, r2
 800f694:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800f69c:	683b      	ldr	r3, [r7, #0]
 800f69e:	699b      	ldr	r3, [r3, #24]
 800f6a0:	041b      	lsls	r3, r3, #16
 800f6a2:	4313      	orrs	r3, r2
 800f6a4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	4a16      	ldr	r2, [pc, #88]	; (800f704 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800f6ac:	4293      	cmp	r3, r2
 800f6ae:	d004      	beq.n	800f6ba <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	4a14      	ldr	r2, [pc, #80]	; (800f708 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800f6b6:	4293      	cmp	r3, r2
 800f6b8:	d115      	bne.n	800f6e6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800f6c0:	683b      	ldr	r3, [r7, #0]
 800f6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6c4:	051b      	lsls	r3, r3, #20
 800f6c6:	4313      	orrs	r3, r2
 800f6c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800f6d0:	683b      	ldr	r3, [r7, #0]
 800f6d2:	69db      	ldr	r3, [r3, #28]
 800f6d4:	4313      	orrs	r3, r2
 800f6d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800f6de:	683b      	ldr	r3, [r7, #0]
 800f6e0:	6a1b      	ldr	r3, [r3, #32]
 800f6e2:	4313      	orrs	r3, r2
 800f6e4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	68fa      	ldr	r2, [r7, #12]
 800f6ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f6f6:	2300      	movs	r3, #0
}
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	3714      	adds	r7, #20
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f702:	4770      	bx	lr
 800f704:	40010000 	.word	0x40010000
 800f708:	40010400 	.word	0x40010400

0800f70c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b082      	sub	sp, #8
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d101      	bne.n	800f71e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f71a:	2301      	movs	r3, #1
 800f71c:	e042      	b.n	800f7a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f724:	2b00      	cmp	r3, #0
 800f726:	d106      	bne.n	800f736 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	2200      	movs	r2, #0
 800f72c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f730:	6878      	ldr	r0, [r7, #4]
 800f732:	f7f4 f9ad 	bl	8003a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	2224      	movs	r2, #36	; 0x24
 800f73a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	681a      	ldr	r2, [r3, #0]
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	f022 0201 	bic.w	r2, r2, #1
 800f74c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f74e:	6878      	ldr	r0, [r7, #4]
 800f750:	f000 f82c 	bl	800f7ac <UART_SetConfig>
 800f754:	4603      	mov	r3, r0
 800f756:	2b01      	cmp	r3, #1
 800f758:	d101      	bne.n	800f75e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800f75a:	2301      	movs	r3, #1
 800f75c:	e022      	b.n	800f7a4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f762:	2b00      	cmp	r3, #0
 800f764:	d002      	beq.n	800f76c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800f766:	6878      	ldr	r0, [r7, #4]
 800f768:	f000 fd80 	bl	801026c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	685a      	ldr	r2, [r3, #4]
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f77a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	689a      	ldr	r2, [r3, #8]
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f78a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	681a      	ldr	r2, [r3, #0]
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	f042 0201 	orr.w	r2, r2, #1
 800f79a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f79c:	6878      	ldr	r0, [r7, #4]
 800f79e:	f000 fe07 	bl	80103b0 <UART_CheckIdleState>
 800f7a2:	4603      	mov	r3, r0
}
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	3708      	adds	r7, #8
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	bd80      	pop	{r7, pc}

0800f7ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f7ac:	b5b0      	push	{r4, r5, r7, lr}
 800f7ae:	b08e      	sub	sp, #56	; 0x38
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	689a      	ldr	r2, [r3, #8]
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	691b      	ldr	r3, [r3, #16]
 800f7c2:	431a      	orrs	r2, r3
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	695b      	ldr	r3, [r3, #20]
 800f7c8:	431a      	orrs	r2, r3
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	69db      	ldr	r3, [r3, #28]
 800f7ce:	4313      	orrs	r3, r2
 800f7d0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	681a      	ldr	r2, [r3, #0]
 800f7d8:	4bbf      	ldr	r3, [pc, #764]	; (800fad8 <UART_SetConfig+0x32c>)
 800f7da:	4013      	ands	r3, r2
 800f7dc:	687a      	ldr	r2, [r7, #4]
 800f7de:	6812      	ldr	r2, [r2, #0]
 800f7e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f7e2:	430b      	orrs	r3, r1
 800f7e4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	685b      	ldr	r3, [r3, #4]
 800f7ec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	68da      	ldr	r2, [r3, #12]
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	430a      	orrs	r2, r1
 800f7fa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	699b      	ldr	r3, [r3, #24]
 800f800:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	4ab5      	ldr	r2, [pc, #724]	; (800fadc <UART_SetConfig+0x330>)
 800f808:	4293      	cmp	r3, r2
 800f80a:	d004      	beq.n	800f816 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	6a1b      	ldr	r3, [r3, #32]
 800f810:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f812:	4313      	orrs	r3, r2
 800f814:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	689a      	ldr	r2, [r3, #8]
 800f81c:	4bb0      	ldr	r3, [pc, #704]	; (800fae0 <UART_SetConfig+0x334>)
 800f81e:	4013      	ands	r3, r2
 800f820:	687a      	ldr	r2, [r7, #4]
 800f822:	6812      	ldr	r2, [r2, #0]
 800f824:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f826:	430b      	orrs	r3, r1
 800f828:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f830:	f023 010f 	bic.w	r1, r3, #15
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	430a      	orrs	r2, r1
 800f83e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	4aa7      	ldr	r2, [pc, #668]	; (800fae4 <UART_SetConfig+0x338>)
 800f846:	4293      	cmp	r3, r2
 800f848:	d176      	bne.n	800f938 <UART_SetConfig+0x18c>
 800f84a:	4ba7      	ldr	r3, [pc, #668]	; (800fae8 <UART_SetConfig+0x33c>)
 800f84c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f84e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f852:	2b28      	cmp	r3, #40	; 0x28
 800f854:	d86c      	bhi.n	800f930 <UART_SetConfig+0x184>
 800f856:	a201      	add	r2, pc, #4	; (adr r2, 800f85c <UART_SetConfig+0xb0>)
 800f858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f85c:	0800f901 	.word	0x0800f901
 800f860:	0800f931 	.word	0x0800f931
 800f864:	0800f931 	.word	0x0800f931
 800f868:	0800f931 	.word	0x0800f931
 800f86c:	0800f931 	.word	0x0800f931
 800f870:	0800f931 	.word	0x0800f931
 800f874:	0800f931 	.word	0x0800f931
 800f878:	0800f931 	.word	0x0800f931
 800f87c:	0800f909 	.word	0x0800f909
 800f880:	0800f931 	.word	0x0800f931
 800f884:	0800f931 	.word	0x0800f931
 800f888:	0800f931 	.word	0x0800f931
 800f88c:	0800f931 	.word	0x0800f931
 800f890:	0800f931 	.word	0x0800f931
 800f894:	0800f931 	.word	0x0800f931
 800f898:	0800f931 	.word	0x0800f931
 800f89c:	0800f911 	.word	0x0800f911
 800f8a0:	0800f931 	.word	0x0800f931
 800f8a4:	0800f931 	.word	0x0800f931
 800f8a8:	0800f931 	.word	0x0800f931
 800f8ac:	0800f931 	.word	0x0800f931
 800f8b0:	0800f931 	.word	0x0800f931
 800f8b4:	0800f931 	.word	0x0800f931
 800f8b8:	0800f931 	.word	0x0800f931
 800f8bc:	0800f919 	.word	0x0800f919
 800f8c0:	0800f931 	.word	0x0800f931
 800f8c4:	0800f931 	.word	0x0800f931
 800f8c8:	0800f931 	.word	0x0800f931
 800f8cc:	0800f931 	.word	0x0800f931
 800f8d0:	0800f931 	.word	0x0800f931
 800f8d4:	0800f931 	.word	0x0800f931
 800f8d8:	0800f931 	.word	0x0800f931
 800f8dc:	0800f921 	.word	0x0800f921
 800f8e0:	0800f931 	.word	0x0800f931
 800f8e4:	0800f931 	.word	0x0800f931
 800f8e8:	0800f931 	.word	0x0800f931
 800f8ec:	0800f931 	.word	0x0800f931
 800f8f0:	0800f931 	.word	0x0800f931
 800f8f4:	0800f931 	.word	0x0800f931
 800f8f8:	0800f931 	.word	0x0800f931
 800f8fc:	0800f929 	.word	0x0800f929
 800f900:	2301      	movs	r3, #1
 800f902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f906:	e222      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800f908:	2304      	movs	r3, #4
 800f90a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f90e:	e21e      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800f910:	2308      	movs	r3, #8
 800f912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f916:	e21a      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800f918:	2310      	movs	r3, #16
 800f91a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f91e:	e216      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800f920:	2320      	movs	r3, #32
 800f922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f926:	e212      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800f928:	2340      	movs	r3, #64	; 0x40
 800f92a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f92e:	e20e      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800f930:	2380      	movs	r3, #128	; 0x80
 800f932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f936:	e20a      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	4a6b      	ldr	r2, [pc, #428]	; (800faec <UART_SetConfig+0x340>)
 800f93e:	4293      	cmp	r3, r2
 800f940:	d130      	bne.n	800f9a4 <UART_SetConfig+0x1f8>
 800f942:	4b69      	ldr	r3, [pc, #420]	; (800fae8 <UART_SetConfig+0x33c>)
 800f944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f946:	f003 0307 	and.w	r3, r3, #7
 800f94a:	2b05      	cmp	r3, #5
 800f94c:	d826      	bhi.n	800f99c <UART_SetConfig+0x1f0>
 800f94e:	a201      	add	r2, pc, #4	; (adr r2, 800f954 <UART_SetConfig+0x1a8>)
 800f950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f954:	0800f96d 	.word	0x0800f96d
 800f958:	0800f975 	.word	0x0800f975
 800f95c:	0800f97d 	.word	0x0800f97d
 800f960:	0800f985 	.word	0x0800f985
 800f964:	0800f98d 	.word	0x0800f98d
 800f968:	0800f995 	.word	0x0800f995
 800f96c:	2300      	movs	r3, #0
 800f96e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f972:	e1ec      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800f974:	2304      	movs	r3, #4
 800f976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f97a:	e1e8      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800f97c:	2308      	movs	r3, #8
 800f97e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f982:	e1e4      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800f984:	2310      	movs	r3, #16
 800f986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f98a:	e1e0      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800f98c:	2320      	movs	r3, #32
 800f98e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f992:	e1dc      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800f994:	2340      	movs	r3, #64	; 0x40
 800f996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f99a:	e1d8      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800f99c:	2380      	movs	r3, #128	; 0x80
 800f99e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f9a2:	e1d4      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	4a51      	ldr	r2, [pc, #324]	; (800faf0 <UART_SetConfig+0x344>)
 800f9aa:	4293      	cmp	r3, r2
 800f9ac:	d130      	bne.n	800fa10 <UART_SetConfig+0x264>
 800f9ae:	4b4e      	ldr	r3, [pc, #312]	; (800fae8 <UART_SetConfig+0x33c>)
 800f9b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9b2:	f003 0307 	and.w	r3, r3, #7
 800f9b6:	2b05      	cmp	r3, #5
 800f9b8:	d826      	bhi.n	800fa08 <UART_SetConfig+0x25c>
 800f9ba:	a201      	add	r2, pc, #4	; (adr r2, 800f9c0 <UART_SetConfig+0x214>)
 800f9bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9c0:	0800f9d9 	.word	0x0800f9d9
 800f9c4:	0800f9e1 	.word	0x0800f9e1
 800f9c8:	0800f9e9 	.word	0x0800f9e9
 800f9cc:	0800f9f1 	.word	0x0800f9f1
 800f9d0:	0800f9f9 	.word	0x0800f9f9
 800f9d4:	0800fa01 	.word	0x0800fa01
 800f9d8:	2300      	movs	r3, #0
 800f9da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f9de:	e1b6      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800f9e0:	2304      	movs	r3, #4
 800f9e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f9e6:	e1b2      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800f9e8:	2308      	movs	r3, #8
 800f9ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f9ee:	e1ae      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800f9f0:	2310      	movs	r3, #16
 800f9f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f9f6:	e1aa      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800f9f8:	2320      	movs	r3, #32
 800f9fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f9fe:	e1a6      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fa00:	2340      	movs	r3, #64	; 0x40
 800fa02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fa06:	e1a2      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fa08:	2380      	movs	r3, #128	; 0x80
 800fa0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fa0e:	e19e      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	4a37      	ldr	r2, [pc, #220]	; (800faf4 <UART_SetConfig+0x348>)
 800fa16:	4293      	cmp	r3, r2
 800fa18:	d130      	bne.n	800fa7c <UART_SetConfig+0x2d0>
 800fa1a:	4b33      	ldr	r3, [pc, #204]	; (800fae8 <UART_SetConfig+0x33c>)
 800fa1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa1e:	f003 0307 	and.w	r3, r3, #7
 800fa22:	2b05      	cmp	r3, #5
 800fa24:	d826      	bhi.n	800fa74 <UART_SetConfig+0x2c8>
 800fa26:	a201      	add	r2, pc, #4	; (adr r2, 800fa2c <UART_SetConfig+0x280>)
 800fa28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa2c:	0800fa45 	.word	0x0800fa45
 800fa30:	0800fa4d 	.word	0x0800fa4d
 800fa34:	0800fa55 	.word	0x0800fa55
 800fa38:	0800fa5d 	.word	0x0800fa5d
 800fa3c:	0800fa65 	.word	0x0800fa65
 800fa40:	0800fa6d 	.word	0x0800fa6d
 800fa44:	2300      	movs	r3, #0
 800fa46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fa4a:	e180      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fa4c:	2304      	movs	r3, #4
 800fa4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fa52:	e17c      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fa54:	2308      	movs	r3, #8
 800fa56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fa5a:	e178      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fa5c:	2310      	movs	r3, #16
 800fa5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fa62:	e174      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fa64:	2320      	movs	r3, #32
 800fa66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fa6a:	e170      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fa6c:	2340      	movs	r3, #64	; 0x40
 800fa6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fa72:	e16c      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fa74:	2380      	movs	r3, #128	; 0x80
 800fa76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fa7a:	e168      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	4a1d      	ldr	r2, [pc, #116]	; (800faf8 <UART_SetConfig+0x34c>)
 800fa82:	4293      	cmp	r3, r2
 800fa84:	d142      	bne.n	800fb0c <UART_SetConfig+0x360>
 800fa86:	4b18      	ldr	r3, [pc, #96]	; (800fae8 <UART_SetConfig+0x33c>)
 800fa88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa8a:	f003 0307 	and.w	r3, r3, #7
 800fa8e:	2b05      	cmp	r3, #5
 800fa90:	d838      	bhi.n	800fb04 <UART_SetConfig+0x358>
 800fa92:	a201      	add	r2, pc, #4	; (adr r2, 800fa98 <UART_SetConfig+0x2ec>)
 800fa94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa98:	0800fab1 	.word	0x0800fab1
 800fa9c:	0800fab9 	.word	0x0800fab9
 800faa0:	0800fac1 	.word	0x0800fac1
 800faa4:	0800fac9 	.word	0x0800fac9
 800faa8:	0800fad1 	.word	0x0800fad1
 800faac:	0800fafd 	.word	0x0800fafd
 800fab0:	2300      	movs	r3, #0
 800fab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fab6:	e14a      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fab8:	2304      	movs	r3, #4
 800faba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fabe:	e146      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fac0:	2308      	movs	r3, #8
 800fac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fac6:	e142      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fac8:	2310      	movs	r3, #16
 800faca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800face:	e13e      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fad0:	2320      	movs	r3, #32
 800fad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fad6:	e13a      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fad8:	cfff69f3 	.word	0xcfff69f3
 800fadc:	58000c00 	.word	0x58000c00
 800fae0:	11fff4ff 	.word	0x11fff4ff
 800fae4:	40011000 	.word	0x40011000
 800fae8:	58024400 	.word	0x58024400
 800faec:	40004400 	.word	0x40004400
 800faf0:	40004800 	.word	0x40004800
 800faf4:	40004c00 	.word	0x40004c00
 800faf8:	40005000 	.word	0x40005000
 800fafc:	2340      	movs	r3, #64	; 0x40
 800fafe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb02:	e124      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fb04:	2380      	movs	r3, #128	; 0x80
 800fb06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb0a:	e120      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	4acc      	ldr	r2, [pc, #816]	; (800fe44 <UART_SetConfig+0x698>)
 800fb12:	4293      	cmp	r3, r2
 800fb14:	d176      	bne.n	800fc04 <UART_SetConfig+0x458>
 800fb16:	4bcc      	ldr	r3, [pc, #816]	; (800fe48 <UART_SetConfig+0x69c>)
 800fb18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fb1e:	2b28      	cmp	r3, #40	; 0x28
 800fb20:	d86c      	bhi.n	800fbfc <UART_SetConfig+0x450>
 800fb22:	a201      	add	r2, pc, #4	; (adr r2, 800fb28 <UART_SetConfig+0x37c>)
 800fb24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb28:	0800fbcd 	.word	0x0800fbcd
 800fb2c:	0800fbfd 	.word	0x0800fbfd
 800fb30:	0800fbfd 	.word	0x0800fbfd
 800fb34:	0800fbfd 	.word	0x0800fbfd
 800fb38:	0800fbfd 	.word	0x0800fbfd
 800fb3c:	0800fbfd 	.word	0x0800fbfd
 800fb40:	0800fbfd 	.word	0x0800fbfd
 800fb44:	0800fbfd 	.word	0x0800fbfd
 800fb48:	0800fbd5 	.word	0x0800fbd5
 800fb4c:	0800fbfd 	.word	0x0800fbfd
 800fb50:	0800fbfd 	.word	0x0800fbfd
 800fb54:	0800fbfd 	.word	0x0800fbfd
 800fb58:	0800fbfd 	.word	0x0800fbfd
 800fb5c:	0800fbfd 	.word	0x0800fbfd
 800fb60:	0800fbfd 	.word	0x0800fbfd
 800fb64:	0800fbfd 	.word	0x0800fbfd
 800fb68:	0800fbdd 	.word	0x0800fbdd
 800fb6c:	0800fbfd 	.word	0x0800fbfd
 800fb70:	0800fbfd 	.word	0x0800fbfd
 800fb74:	0800fbfd 	.word	0x0800fbfd
 800fb78:	0800fbfd 	.word	0x0800fbfd
 800fb7c:	0800fbfd 	.word	0x0800fbfd
 800fb80:	0800fbfd 	.word	0x0800fbfd
 800fb84:	0800fbfd 	.word	0x0800fbfd
 800fb88:	0800fbe5 	.word	0x0800fbe5
 800fb8c:	0800fbfd 	.word	0x0800fbfd
 800fb90:	0800fbfd 	.word	0x0800fbfd
 800fb94:	0800fbfd 	.word	0x0800fbfd
 800fb98:	0800fbfd 	.word	0x0800fbfd
 800fb9c:	0800fbfd 	.word	0x0800fbfd
 800fba0:	0800fbfd 	.word	0x0800fbfd
 800fba4:	0800fbfd 	.word	0x0800fbfd
 800fba8:	0800fbed 	.word	0x0800fbed
 800fbac:	0800fbfd 	.word	0x0800fbfd
 800fbb0:	0800fbfd 	.word	0x0800fbfd
 800fbb4:	0800fbfd 	.word	0x0800fbfd
 800fbb8:	0800fbfd 	.word	0x0800fbfd
 800fbbc:	0800fbfd 	.word	0x0800fbfd
 800fbc0:	0800fbfd 	.word	0x0800fbfd
 800fbc4:	0800fbfd 	.word	0x0800fbfd
 800fbc8:	0800fbf5 	.word	0x0800fbf5
 800fbcc:	2301      	movs	r3, #1
 800fbce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fbd2:	e0bc      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fbd4:	2304      	movs	r3, #4
 800fbd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fbda:	e0b8      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fbdc:	2308      	movs	r3, #8
 800fbde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fbe2:	e0b4      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fbe4:	2310      	movs	r3, #16
 800fbe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fbea:	e0b0      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fbec:	2320      	movs	r3, #32
 800fbee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fbf2:	e0ac      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fbf4:	2340      	movs	r3, #64	; 0x40
 800fbf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fbfa:	e0a8      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fbfc:	2380      	movs	r3, #128	; 0x80
 800fbfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc02:	e0a4      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	4a90      	ldr	r2, [pc, #576]	; (800fe4c <UART_SetConfig+0x6a0>)
 800fc0a:	4293      	cmp	r3, r2
 800fc0c:	d130      	bne.n	800fc70 <UART_SetConfig+0x4c4>
 800fc0e:	4b8e      	ldr	r3, [pc, #568]	; (800fe48 <UART_SetConfig+0x69c>)
 800fc10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc12:	f003 0307 	and.w	r3, r3, #7
 800fc16:	2b05      	cmp	r3, #5
 800fc18:	d826      	bhi.n	800fc68 <UART_SetConfig+0x4bc>
 800fc1a:	a201      	add	r2, pc, #4	; (adr r2, 800fc20 <UART_SetConfig+0x474>)
 800fc1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc20:	0800fc39 	.word	0x0800fc39
 800fc24:	0800fc41 	.word	0x0800fc41
 800fc28:	0800fc49 	.word	0x0800fc49
 800fc2c:	0800fc51 	.word	0x0800fc51
 800fc30:	0800fc59 	.word	0x0800fc59
 800fc34:	0800fc61 	.word	0x0800fc61
 800fc38:	2300      	movs	r3, #0
 800fc3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc3e:	e086      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fc40:	2304      	movs	r3, #4
 800fc42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc46:	e082      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fc48:	2308      	movs	r3, #8
 800fc4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc4e:	e07e      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fc50:	2310      	movs	r3, #16
 800fc52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc56:	e07a      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fc58:	2320      	movs	r3, #32
 800fc5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc5e:	e076      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fc60:	2340      	movs	r3, #64	; 0x40
 800fc62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc66:	e072      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fc68:	2380      	movs	r3, #128	; 0x80
 800fc6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc6e:	e06e      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	4a76      	ldr	r2, [pc, #472]	; (800fe50 <UART_SetConfig+0x6a4>)
 800fc76:	4293      	cmp	r3, r2
 800fc78:	d130      	bne.n	800fcdc <UART_SetConfig+0x530>
 800fc7a:	4b73      	ldr	r3, [pc, #460]	; (800fe48 <UART_SetConfig+0x69c>)
 800fc7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc7e:	f003 0307 	and.w	r3, r3, #7
 800fc82:	2b05      	cmp	r3, #5
 800fc84:	d826      	bhi.n	800fcd4 <UART_SetConfig+0x528>
 800fc86:	a201      	add	r2, pc, #4	; (adr r2, 800fc8c <UART_SetConfig+0x4e0>)
 800fc88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc8c:	0800fca5 	.word	0x0800fca5
 800fc90:	0800fcad 	.word	0x0800fcad
 800fc94:	0800fcb5 	.word	0x0800fcb5
 800fc98:	0800fcbd 	.word	0x0800fcbd
 800fc9c:	0800fcc5 	.word	0x0800fcc5
 800fca0:	0800fccd 	.word	0x0800fccd
 800fca4:	2300      	movs	r3, #0
 800fca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fcaa:	e050      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fcac:	2304      	movs	r3, #4
 800fcae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fcb2:	e04c      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fcb4:	2308      	movs	r3, #8
 800fcb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fcba:	e048      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fcbc:	2310      	movs	r3, #16
 800fcbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fcc2:	e044      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fcc4:	2320      	movs	r3, #32
 800fcc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fcca:	e040      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fccc:	2340      	movs	r3, #64	; 0x40
 800fcce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fcd2:	e03c      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fcd4:	2380      	movs	r3, #128	; 0x80
 800fcd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fcda:	e038      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	4a5c      	ldr	r2, [pc, #368]	; (800fe54 <UART_SetConfig+0x6a8>)
 800fce2:	4293      	cmp	r3, r2
 800fce4:	d130      	bne.n	800fd48 <UART_SetConfig+0x59c>
 800fce6:	4b58      	ldr	r3, [pc, #352]	; (800fe48 <UART_SetConfig+0x69c>)
 800fce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fcea:	f003 0307 	and.w	r3, r3, #7
 800fcee:	2b05      	cmp	r3, #5
 800fcf0:	d826      	bhi.n	800fd40 <UART_SetConfig+0x594>
 800fcf2:	a201      	add	r2, pc, #4	; (adr r2, 800fcf8 <UART_SetConfig+0x54c>)
 800fcf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcf8:	0800fd11 	.word	0x0800fd11
 800fcfc:	0800fd19 	.word	0x0800fd19
 800fd00:	0800fd21 	.word	0x0800fd21
 800fd04:	0800fd29 	.word	0x0800fd29
 800fd08:	0800fd31 	.word	0x0800fd31
 800fd0c:	0800fd39 	.word	0x0800fd39
 800fd10:	2302      	movs	r3, #2
 800fd12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd16:	e01a      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fd18:	2304      	movs	r3, #4
 800fd1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd1e:	e016      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fd20:	2308      	movs	r3, #8
 800fd22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd26:	e012      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fd28:	2310      	movs	r3, #16
 800fd2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd2e:	e00e      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fd30:	2320      	movs	r3, #32
 800fd32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd36:	e00a      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fd38:	2340      	movs	r3, #64	; 0x40
 800fd3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd3e:	e006      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fd40:	2380      	movs	r3, #128	; 0x80
 800fd42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd46:	e002      	b.n	800fd4e <UART_SetConfig+0x5a2>
 800fd48:	2380      	movs	r3, #128	; 0x80
 800fd4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	4a40      	ldr	r2, [pc, #256]	; (800fe54 <UART_SetConfig+0x6a8>)
 800fd54:	4293      	cmp	r3, r2
 800fd56:	f040 80ef 	bne.w	800ff38 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fd5a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800fd5e:	2b20      	cmp	r3, #32
 800fd60:	dc46      	bgt.n	800fdf0 <UART_SetConfig+0x644>
 800fd62:	2b02      	cmp	r3, #2
 800fd64:	f2c0 8081 	blt.w	800fe6a <UART_SetConfig+0x6be>
 800fd68:	3b02      	subs	r3, #2
 800fd6a:	2b1e      	cmp	r3, #30
 800fd6c:	d87d      	bhi.n	800fe6a <UART_SetConfig+0x6be>
 800fd6e:	a201      	add	r2, pc, #4	; (adr r2, 800fd74 <UART_SetConfig+0x5c8>)
 800fd70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd74:	0800fdf7 	.word	0x0800fdf7
 800fd78:	0800fe6b 	.word	0x0800fe6b
 800fd7c:	0800fdff 	.word	0x0800fdff
 800fd80:	0800fe6b 	.word	0x0800fe6b
 800fd84:	0800fe6b 	.word	0x0800fe6b
 800fd88:	0800fe6b 	.word	0x0800fe6b
 800fd8c:	0800fe0f 	.word	0x0800fe0f
 800fd90:	0800fe6b 	.word	0x0800fe6b
 800fd94:	0800fe6b 	.word	0x0800fe6b
 800fd98:	0800fe6b 	.word	0x0800fe6b
 800fd9c:	0800fe6b 	.word	0x0800fe6b
 800fda0:	0800fe6b 	.word	0x0800fe6b
 800fda4:	0800fe6b 	.word	0x0800fe6b
 800fda8:	0800fe6b 	.word	0x0800fe6b
 800fdac:	0800fe1f 	.word	0x0800fe1f
 800fdb0:	0800fe6b 	.word	0x0800fe6b
 800fdb4:	0800fe6b 	.word	0x0800fe6b
 800fdb8:	0800fe6b 	.word	0x0800fe6b
 800fdbc:	0800fe6b 	.word	0x0800fe6b
 800fdc0:	0800fe6b 	.word	0x0800fe6b
 800fdc4:	0800fe6b 	.word	0x0800fe6b
 800fdc8:	0800fe6b 	.word	0x0800fe6b
 800fdcc:	0800fe6b 	.word	0x0800fe6b
 800fdd0:	0800fe6b 	.word	0x0800fe6b
 800fdd4:	0800fe6b 	.word	0x0800fe6b
 800fdd8:	0800fe6b 	.word	0x0800fe6b
 800fddc:	0800fe6b 	.word	0x0800fe6b
 800fde0:	0800fe6b 	.word	0x0800fe6b
 800fde4:	0800fe6b 	.word	0x0800fe6b
 800fde8:	0800fe6b 	.word	0x0800fe6b
 800fdec:	0800fe5d 	.word	0x0800fe5d
 800fdf0:	2b40      	cmp	r3, #64	; 0x40
 800fdf2:	d036      	beq.n	800fe62 <UART_SetConfig+0x6b6>
 800fdf4:	e039      	b.n	800fe6a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800fdf6:	f7fc fa2b 	bl	800c250 <HAL_RCCEx_GetD3PCLK1Freq>
 800fdfa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800fdfc:	e03b      	b.n	800fe76 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fdfe:	f107 0314 	add.w	r3, r7, #20
 800fe02:	4618      	mov	r0, r3
 800fe04:	f7fc fa3a 	bl	800c27c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fe08:	69bb      	ldr	r3, [r7, #24]
 800fe0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fe0c:	e033      	b.n	800fe76 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fe0e:	f107 0308 	add.w	r3, r7, #8
 800fe12:	4618      	mov	r0, r3
 800fe14:	f7fc fb86 	bl	800c524 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fe1c:	e02b      	b.n	800fe76 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fe1e:	4b0a      	ldr	r3, [pc, #40]	; (800fe48 <UART_SetConfig+0x69c>)
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	f003 0320 	and.w	r3, r3, #32
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d009      	beq.n	800fe3e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fe2a:	4b07      	ldr	r3, [pc, #28]	; (800fe48 <UART_SetConfig+0x69c>)
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	08db      	lsrs	r3, r3, #3
 800fe30:	f003 0303 	and.w	r3, r3, #3
 800fe34:	4a08      	ldr	r2, [pc, #32]	; (800fe58 <UART_SetConfig+0x6ac>)
 800fe36:	fa22 f303 	lsr.w	r3, r2, r3
 800fe3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fe3c:	e01b      	b.n	800fe76 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800fe3e:	4b06      	ldr	r3, [pc, #24]	; (800fe58 <UART_SetConfig+0x6ac>)
 800fe40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fe42:	e018      	b.n	800fe76 <UART_SetConfig+0x6ca>
 800fe44:	40011400 	.word	0x40011400
 800fe48:	58024400 	.word	0x58024400
 800fe4c:	40007800 	.word	0x40007800
 800fe50:	40007c00 	.word	0x40007c00
 800fe54:	58000c00 	.word	0x58000c00
 800fe58:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fe5c:	4bc4      	ldr	r3, [pc, #784]	; (8010170 <UART_SetConfig+0x9c4>)
 800fe5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fe60:	e009      	b.n	800fe76 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fe62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fe66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fe68:	e005      	b.n	800fe76 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800fe6e:	2301      	movs	r3, #1
 800fe70:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800fe74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fe76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	f000 81da 	beq.w	8010232 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe82:	4abc      	ldr	r2, [pc, #752]	; (8010174 <UART_SetConfig+0x9c8>)
 800fe84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fe88:	461a      	mov	r2, r3
 800fe8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe8c:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe90:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	685a      	ldr	r2, [r3, #4]
 800fe96:	4613      	mov	r3, r2
 800fe98:	005b      	lsls	r3, r3, #1
 800fe9a:	4413      	add	r3, r2
 800fe9c:	6a3a      	ldr	r2, [r7, #32]
 800fe9e:	429a      	cmp	r2, r3
 800fea0:	d305      	bcc.n	800feae <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	685b      	ldr	r3, [r3, #4]
 800fea6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fea8:	6a3a      	ldr	r2, [r7, #32]
 800feaa:	429a      	cmp	r2, r3
 800feac:	d903      	bls.n	800feb6 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800feae:	2301      	movs	r3, #1
 800feb0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800feb4:	e1bd      	b.n	8010232 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800feb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feb8:	4618      	mov	r0, r3
 800feba:	f04f 0100 	mov.w	r1, #0
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fec2:	4aac      	ldr	r2, [pc, #688]	; (8010174 <UART_SetConfig+0x9c8>)
 800fec4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fec8:	b29a      	uxth	r2, r3
 800feca:	f04f 0300 	mov.w	r3, #0
 800fece:	f7f0 fc1b 	bl	8000708 <__aeabi_uldivmod>
 800fed2:	4602      	mov	r2, r0
 800fed4:	460b      	mov	r3, r1
 800fed6:	4610      	mov	r0, r2
 800fed8:	4619      	mov	r1, r3
 800feda:	f04f 0200 	mov.w	r2, #0
 800fede:	f04f 0300 	mov.w	r3, #0
 800fee2:	020b      	lsls	r3, r1, #8
 800fee4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fee8:	0202      	lsls	r2, r0, #8
 800feea:	6879      	ldr	r1, [r7, #4]
 800feec:	6849      	ldr	r1, [r1, #4]
 800feee:	0849      	lsrs	r1, r1, #1
 800fef0:	4608      	mov	r0, r1
 800fef2:	f04f 0100 	mov.w	r1, #0
 800fef6:	1814      	adds	r4, r2, r0
 800fef8:	eb43 0501 	adc.w	r5, r3, r1
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	685b      	ldr	r3, [r3, #4]
 800ff00:	461a      	mov	r2, r3
 800ff02:	f04f 0300 	mov.w	r3, #0
 800ff06:	4620      	mov	r0, r4
 800ff08:	4629      	mov	r1, r5
 800ff0a:	f7f0 fbfd 	bl	8000708 <__aeabi_uldivmod>
 800ff0e:	4602      	mov	r2, r0
 800ff10:	460b      	mov	r3, r1
 800ff12:	4613      	mov	r3, r2
 800ff14:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ff16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ff1c:	d308      	bcc.n	800ff30 <UART_SetConfig+0x784>
 800ff1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ff24:	d204      	bcs.n	800ff30 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff2c:	60da      	str	r2, [r3, #12]
 800ff2e:	e180      	b.n	8010232 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800ff30:	2301      	movs	r3, #1
 800ff32:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ff36:	e17c      	b.n	8010232 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	69db      	ldr	r3, [r3, #28]
 800ff3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ff40:	f040 80bf 	bne.w	80100c2 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800ff44:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ff48:	2b20      	cmp	r3, #32
 800ff4a:	dc49      	bgt.n	800ffe0 <UART_SetConfig+0x834>
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	db7c      	blt.n	801004a <UART_SetConfig+0x89e>
 800ff50:	2b20      	cmp	r3, #32
 800ff52:	d87a      	bhi.n	801004a <UART_SetConfig+0x89e>
 800ff54:	a201      	add	r2, pc, #4	; (adr r2, 800ff5c <UART_SetConfig+0x7b0>)
 800ff56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff5a:	bf00      	nop
 800ff5c:	0800ffe7 	.word	0x0800ffe7
 800ff60:	0800ffef 	.word	0x0800ffef
 800ff64:	0801004b 	.word	0x0801004b
 800ff68:	0801004b 	.word	0x0801004b
 800ff6c:	0800fff7 	.word	0x0800fff7
 800ff70:	0801004b 	.word	0x0801004b
 800ff74:	0801004b 	.word	0x0801004b
 800ff78:	0801004b 	.word	0x0801004b
 800ff7c:	08010007 	.word	0x08010007
 800ff80:	0801004b 	.word	0x0801004b
 800ff84:	0801004b 	.word	0x0801004b
 800ff88:	0801004b 	.word	0x0801004b
 800ff8c:	0801004b 	.word	0x0801004b
 800ff90:	0801004b 	.word	0x0801004b
 800ff94:	0801004b 	.word	0x0801004b
 800ff98:	0801004b 	.word	0x0801004b
 800ff9c:	08010017 	.word	0x08010017
 800ffa0:	0801004b 	.word	0x0801004b
 800ffa4:	0801004b 	.word	0x0801004b
 800ffa8:	0801004b 	.word	0x0801004b
 800ffac:	0801004b 	.word	0x0801004b
 800ffb0:	0801004b 	.word	0x0801004b
 800ffb4:	0801004b 	.word	0x0801004b
 800ffb8:	0801004b 	.word	0x0801004b
 800ffbc:	0801004b 	.word	0x0801004b
 800ffc0:	0801004b 	.word	0x0801004b
 800ffc4:	0801004b 	.word	0x0801004b
 800ffc8:	0801004b 	.word	0x0801004b
 800ffcc:	0801004b 	.word	0x0801004b
 800ffd0:	0801004b 	.word	0x0801004b
 800ffd4:	0801004b 	.word	0x0801004b
 800ffd8:	0801004b 	.word	0x0801004b
 800ffdc:	0801003d 	.word	0x0801003d
 800ffe0:	2b40      	cmp	r3, #64	; 0x40
 800ffe2:	d02e      	beq.n	8010042 <UART_SetConfig+0x896>
 800ffe4:	e031      	b.n	801004a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ffe6:	f7fa fcf5 	bl	800a9d4 <HAL_RCC_GetPCLK1Freq>
 800ffea:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ffec:	e033      	b.n	8010056 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ffee:	f7fa fd07 	bl	800aa00 <HAL_RCC_GetPCLK2Freq>
 800fff2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800fff4:	e02f      	b.n	8010056 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fff6:	f107 0314 	add.w	r3, r7, #20
 800fffa:	4618      	mov	r0, r3
 800fffc:	f7fc f93e 	bl	800c27c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010000:	69bb      	ldr	r3, [r7, #24]
 8010002:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010004:	e027      	b.n	8010056 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010006:	f107 0308 	add.w	r3, r7, #8
 801000a:	4618      	mov	r0, r3
 801000c:	f7fc fa8a 	bl	800c524 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010014:	e01f      	b.n	8010056 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010016:	4b58      	ldr	r3, [pc, #352]	; (8010178 <UART_SetConfig+0x9cc>)
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	f003 0320 	and.w	r3, r3, #32
 801001e:	2b00      	cmp	r3, #0
 8010020:	d009      	beq.n	8010036 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010022:	4b55      	ldr	r3, [pc, #340]	; (8010178 <UART_SetConfig+0x9cc>)
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	08db      	lsrs	r3, r3, #3
 8010028:	f003 0303 	and.w	r3, r3, #3
 801002c:	4a53      	ldr	r2, [pc, #332]	; (801017c <UART_SetConfig+0x9d0>)
 801002e:	fa22 f303 	lsr.w	r3, r2, r3
 8010032:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010034:	e00f      	b.n	8010056 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8010036:	4b51      	ldr	r3, [pc, #324]	; (801017c <UART_SetConfig+0x9d0>)
 8010038:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801003a:	e00c      	b.n	8010056 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801003c:	4b4c      	ldr	r3, [pc, #304]	; (8010170 <UART_SetConfig+0x9c4>)
 801003e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010040:	e009      	b.n	8010056 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010042:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010046:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010048:	e005      	b.n	8010056 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 801004a:	2300      	movs	r3, #0
 801004c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 801004e:	2301      	movs	r3, #1
 8010050:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8010054:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010058:	2b00      	cmp	r3, #0
 801005a:	f000 80ea 	beq.w	8010232 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010062:	4a44      	ldr	r2, [pc, #272]	; (8010174 <UART_SetConfig+0x9c8>)
 8010064:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010068:	461a      	mov	r2, r3
 801006a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801006c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010070:	005a      	lsls	r2, r3, #1
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	685b      	ldr	r3, [r3, #4]
 8010076:	085b      	lsrs	r3, r3, #1
 8010078:	441a      	add	r2, r3
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	685b      	ldr	r3, [r3, #4]
 801007e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010082:	b29b      	uxth	r3, r3
 8010084:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010088:	2b0f      	cmp	r3, #15
 801008a:	d916      	bls.n	80100ba <UART_SetConfig+0x90e>
 801008c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801008e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010092:	d212      	bcs.n	80100ba <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010096:	b29b      	uxth	r3, r3
 8010098:	f023 030f 	bic.w	r3, r3, #15
 801009c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801009e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100a0:	085b      	lsrs	r3, r3, #1
 80100a2:	b29b      	uxth	r3, r3
 80100a4:	f003 0307 	and.w	r3, r3, #7
 80100a8:	b29a      	uxth	r2, r3
 80100aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80100ac:	4313      	orrs	r3, r2
 80100ae:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80100b6:	60da      	str	r2, [r3, #12]
 80100b8:	e0bb      	b.n	8010232 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80100ba:	2301      	movs	r3, #1
 80100bc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80100c0:	e0b7      	b.n	8010232 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80100c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80100c6:	2b20      	cmp	r3, #32
 80100c8:	dc4a      	bgt.n	8010160 <UART_SetConfig+0x9b4>
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	f2c0 8086 	blt.w	80101dc <UART_SetConfig+0xa30>
 80100d0:	2b20      	cmp	r3, #32
 80100d2:	f200 8083 	bhi.w	80101dc <UART_SetConfig+0xa30>
 80100d6:	a201      	add	r2, pc, #4	; (adr r2, 80100dc <UART_SetConfig+0x930>)
 80100d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100dc:	08010167 	.word	0x08010167
 80100e0:	08010181 	.word	0x08010181
 80100e4:	080101dd 	.word	0x080101dd
 80100e8:	080101dd 	.word	0x080101dd
 80100ec:	08010189 	.word	0x08010189
 80100f0:	080101dd 	.word	0x080101dd
 80100f4:	080101dd 	.word	0x080101dd
 80100f8:	080101dd 	.word	0x080101dd
 80100fc:	08010199 	.word	0x08010199
 8010100:	080101dd 	.word	0x080101dd
 8010104:	080101dd 	.word	0x080101dd
 8010108:	080101dd 	.word	0x080101dd
 801010c:	080101dd 	.word	0x080101dd
 8010110:	080101dd 	.word	0x080101dd
 8010114:	080101dd 	.word	0x080101dd
 8010118:	080101dd 	.word	0x080101dd
 801011c:	080101a9 	.word	0x080101a9
 8010120:	080101dd 	.word	0x080101dd
 8010124:	080101dd 	.word	0x080101dd
 8010128:	080101dd 	.word	0x080101dd
 801012c:	080101dd 	.word	0x080101dd
 8010130:	080101dd 	.word	0x080101dd
 8010134:	080101dd 	.word	0x080101dd
 8010138:	080101dd 	.word	0x080101dd
 801013c:	080101dd 	.word	0x080101dd
 8010140:	080101dd 	.word	0x080101dd
 8010144:	080101dd 	.word	0x080101dd
 8010148:	080101dd 	.word	0x080101dd
 801014c:	080101dd 	.word	0x080101dd
 8010150:	080101dd 	.word	0x080101dd
 8010154:	080101dd 	.word	0x080101dd
 8010158:	080101dd 	.word	0x080101dd
 801015c:	080101cf 	.word	0x080101cf
 8010160:	2b40      	cmp	r3, #64	; 0x40
 8010162:	d037      	beq.n	80101d4 <UART_SetConfig+0xa28>
 8010164:	e03a      	b.n	80101dc <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010166:	f7fa fc35 	bl	800a9d4 <HAL_RCC_GetPCLK1Freq>
 801016a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 801016c:	e03c      	b.n	80101e8 <UART_SetConfig+0xa3c>
 801016e:	bf00      	nop
 8010170:	003d0900 	.word	0x003d0900
 8010174:	08029134 	.word	0x08029134
 8010178:	58024400 	.word	0x58024400
 801017c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010180:	f7fa fc3e 	bl	800aa00 <HAL_RCC_GetPCLK2Freq>
 8010184:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010186:	e02f      	b.n	80101e8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010188:	f107 0314 	add.w	r3, r7, #20
 801018c:	4618      	mov	r0, r3
 801018e:	f7fc f875 	bl	800c27c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010192:	69bb      	ldr	r3, [r7, #24]
 8010194:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010196:	e027      	b.n	80101e8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010198:	f107 0308 	add.w	r3, r7, #8
 801019c:	4618      	mov	r0, r3
 801019e:	f7fc f9c1 	bl	800c524 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80101a6:	e01f      	b.n	80101e8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80101a8:	4b2c      	ldr	r3, [pc, #176]	; (801025c <UART_SetConfig+0xab0>)
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	f003 0320 	and.w	r3, r3, #32
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d009      	beq.n	80101c8 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80101b4:	4b29      	ldr	r3, [pc, #164]	; (801025c <UART_SetConfig+0xab0>)
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	08db      	lsrs	r3, r3, #3
 80101ba:	f003 0303 	and.w	r3, r3, #3
 80101be:	4a28      	ldr	r2, [pc, #160]	; (8010260 <UART_SetConfig+0xab4>)
 80101c0:	fa22 f303 	lsr.w	r3, r2, r3
 80101c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80101c6:	e00f      	b.n	80101e8 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80101c8:	4b25      	ldr	r3, [pc, #148]	; (8010260 <UART_SetConfig+0xab4>)
 80101ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80101cc:	e00c      	b.n	80101e8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80101ce:	4b25      	ldr	r3, [pc, #148]	; (8010264 <UART_SetConfig+0xab8>)
 80101d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80101d2:	e009      	b.n	80101e8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80101d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80101d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80101da:	e005      	b.n	80101e8 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 80101dc:	2300      	movs	r3, #0
 80101de:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80101e0:	2301      	movs	r3, #1
 80101e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80101e6:	bf00      	nop
    }

    if (pclk != 0U)
 80101e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d021      	beq.n	8010232 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101f2:	4a1d      	ldr	r2, [pc, #116]	; (8010268 <UART_SetConfig+0xabc>)
 80101f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80101f8:	461a      	mov	r2, r3
 80101fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101fc:	fbb3 f2f2 	udiv	r2, r3, r2
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	685b      	ldr	r3, [r3, #4]
 8010204:	085b      	lsrs	r3, r3, #1
 8010206:	441a      	add	r2, r3
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	685b      	ldr	r3, [r3, #4]
 801020c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010210:	b29b      	uxth	r3, r3
 8010212:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010216:	2b0f      	cmp	r3, #15
 8010218:	d908      	bls.n	801022c <UART_SetConfig+0xa80>
 801021a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801021c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010220:	d204      	bcs.n	801022c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010228:	60da      	str	r2, [r3, #12]
 801022a:	e002      	b.n	8010232 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 801022c:	2301      	movs	r3, #1
 801022e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	2201      	movs	r2, #1
 8010236:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	2201      	movs	r2, #1
 801023e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	2200      	movs	r2, #0
 8010246:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	2200      	movs	r2, #0
 801024c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 801024e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8010252:	4618      	mov	r0, r3
 8010254:	3738      	adds	r7, #56	; 0x38
 8010256:	46bd      	mov	sp, r7
 8010258:	bdb0      	pop	{r4, r5, r7, pc}
 801025a:	bf00      	nop
 801025c:	58024400 	.word	0x58024400
 8010260:	03d09000 	.word	0x03d09000
 8010264:	003d0900 	.word	0x003d0900
 8010268:	08029134 	.word	0x08029134

0801026c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801026c:	b480      	push	{r7}
 801026e:	b083      	sub	sp, #12
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010278:	f003 0301 	and.w	r3, r3, #1
 801027c:	2b00      	cmp	r3, #0
 801027e:	d00a      	beq.n	8010296 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	685b      	ldr	r3, [r3, #4]
 8010286:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	430a      	orrs	r2, r1
 8010294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801029a:	f003 0302 	and.w	r3, r3, #2
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d00a      	beq.n	80102b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	685b      	ldr	r3, [r3, #4]
 80102a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	430a      	orrs	r2, r1
 80102b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102bc:	f003 0304 	and.w	r3, r3, #4
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d00a      	beq.n	80102da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	685b      	ldr	r3, [r3, #4]
 80102ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	430a      	orrs	r2, r1
 80102d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102de:	f003 0308 	and.w	r3, r3, #8
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d00a      	beq.n	80102fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	685b      	ldr	r3, [r3, #4]
 80102ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	430a      	orrs	r2, r1
 80102fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010300:	f003 0310 	and.w	r3, r3, #16
 8010304:	2b00      	cmp	r3, #0
 8010306:	d00a      	beq.n	801031e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	689b      	ldr	r3, [r3, #8]
 801030e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	430a      	orrs	r2, r1
 801031c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010322:	f003 0320 	and.w	r3, r3, #32
 8010326:	2b00      	cmp	r3, #0
 8010328:	d00a      	beq.n	8010340 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	689b      	ldr	r3, [r3, #8]
 8010330:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	430a      	orrs	r2, r1
 801033e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010348:	2b00      	cmp	r3, #0
 801034a:	d01a      	beq.n	8010382 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	685b      	ldr	r3, [r3, #4]
 8010352:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	430a      	orrs	r2, r1
 8010360:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010366:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801036a:	d10a      	bne.n	8010382 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	685b      	ldr	r3, [r3, #4]
 8010372:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	430a      	orrs	r2, r1
 8010380:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801038a:	2b00      	cmp	r3, #0
 801038c:	d00a      	beq.n	80103a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	685b      	ldr	r3, [r3, #4]
 8010394:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	430a      	orrs	r2, r1
 80103a2:	605a      	str	r2, [r3, #4]
  }
}
 80103a4:	bf00      	nop
 80103a6:	370c      	adds	r7, #12
 80103a8:	46bd      	mov	sp, r7
 80103aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ae:	4770      	bx	lr

080103b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80103b0:	b580      	push	{r7, lr}
 80103b2:	b086      	sub	sp, #24
 80103b4:	af02      	add	r7, sp, #8
 80103b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	2200      	movs	r2, #0
 80103bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80103c0:	f7f3 fe1e 	bl	8004000 <HAL_GetTick>
 80103c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	f003 0308 	and.w	r3, r3, #8
 80103d0:	2b08      	cmp	r3, #8
 80103d2:	d10e      	bne.n	80103f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80103d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80103d8:	9300      	str	r3, [sp, #0]
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	2200      	movs	r2, #0
 80103de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80103e2:	6878      	ldr	r0, [r7, #4]
 80103e4:	f000 f82f 	bl	8010446 <UART_WaitOnFlagUntilTimeout>
 80103e8:	4603      	mov	r3, r0
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d001      	beq.n	80103f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80103ee:	2303      	movs	r3, #3
 80103f0:	e025      	b.n	801043e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	f003 0304 	and.w	r3, r3, #4
 80103fc:	2b04      	cmp	r3, #4
 80103fe:	d10e      	bne.n	801041e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010400:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010404:	9300      	str	r3, [sp, #0]
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	2200      	movs	r2, #0
 801040a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801040e:	6878      	ldr	r0, [r7, #4]
 8010410:	f000 f819 	bl	8010446 <UART_WaitOnFlagUntilTimeout>
 8010414:	4603      	mov	r3, r0
 8010416:	2b00      	cmp	r3, #0
 8010418:	d001      	beq.n	801041e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801041a:	2303      	movs	r3, #3
 801041c:	e00f      	b.n	801043e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	2220      	movs	r2, #32
 8010422:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	2220      	movs	r2, #32
 801042a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	2200      	movs	r2, #0
 8010432:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	2200      	movs	r2, #0
 8010438:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801043c:	2300      	movs	r3, #0
}
 801043e:	4618      	mov	r0, r3
 8010440:	3710      	adds	r7, #16
 8010442:	46bd      	mov	sp, r7
 8010444:	bd80      	pop	{r7, pc}

08010446 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010446:	b580      	push	{r7, lr}
 8010448:	b084      	sub	sp, #16
 801044a:	af00      	add	r7, sp, #0
 801044c:	60f8      	str	r0, [r7, #12]
 801044e:	60b9      	str	r1, [r7, #8]
 8010450:	603b      	str	r3, [r7, #0]
 8010452:	4613      	mov	r3, r2
 8010454:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010456:	e062      	b.n	801051e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010458:	69bb      	ldr	r3, [r7, #24]
 801045a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801045e:	d05e      	beq.n	801051e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010460:	f7f3 fdce 	bl	8004000 <HAL_GetTick>
 8010464:	4602      	mov	r2, r0
 8010466:	683b      	ldr	r3, [r7, #0]
 8010468:	1ad3      	subs	r3, r2, r3
 801046a:	69ba      	ldr	r2, [r7, #24]
 801046c:	429a      	cmp	r2, r3
 801046e:	d302      	bcc.n	8010476 <UART_WaitOnFlagUntilTimeout+0x30>
 8010470:	69bb      	ldr	r3, [r7, #24]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d11d      	bne.n	80104b2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	681a      	ldr	r2, [r3, #0]
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010484:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	689a      	ldr	r2, [r3, #8]
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	f022 0201 	bic.w	r2, r2, #1
 8010494:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	2220      	movs	r2, #32
 801049a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	2220      	movs	r2, #32
 80104a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	2200      	movs	r2, #0
 80104aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80104ae:	2303      	movs	r3, #3
 80104b0:	e045      	b.n	801053e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	f003 0304 	and.w	r3, r3, #4
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d02e      	beq.n	801051e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	69db      	ldr	r3, [r3, #28]
 80104c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80104ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80104ce:	d126      	bne.n	801051e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80104d8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	681a      	ldr	r2, [r3, #0]
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80104e8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	689a      	ldr	r2, [r3, #8]
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	f022 0201 	bic.w	r2, r2, #1
 80104f8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	2220      	movs	r2, #32
 80104fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	2220      	movs	r2, #32
 8010506:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	2220      	movs	r2, #32
 801050e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	2200      	movs	r2, #0
 8010516:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 801051a:	2303      	movs	r3, #3
 801051c:	e00f      	b.n	801053e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	69da      	ldr	r2, [r3, #28]
 8010524:	68bb      	ldr	r3, [r7, #8]
 8010526:	4013      	ands	r3, r2
 8010528:	68ba      	ldr	r2, [r7, #8]
 801052a:	429a      	cmp	r2, r3
 801052c:	bf0c      	ite	eq
 801052e:	2301      	moveq	r3, #1
 8010530:	2300      	movne	r3, #0
 8010532:	b2db      	uxtb	r3, r3
 8010534:	461a      	mov	r2, r3
 8010536:	79fb      	ldrb	r3, [r7, #7]
 8010538:	429a      	cmp	r2, r3
 801053a:	d08d      	beq.n	8010458 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801053c:	2300      	movs	r3, #0
}
 801053e:	4618      	mov	r0, r3
 8010540:	3710      	adds	r7, #16
 8010542:	46bd      	mov	sp, r7
 8010544:	bd80      	pop	{r7, pc}

08010546 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010546:	b480      	push	{r7}
 8010548:	b085      	sub	sp, #20
 801054a:	af00      	add	r7, sp, #0
 801054c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010554:	2b01      	cmp	r3, #1
 8010556:	d101      	bne.n	801055c <HAL_UARTEx_DisableFifoMode+0x16>
 8010558:	2302      	movs	r3, #2
 801055a:	e027      	b.n	80105ac <HAL_UARTEx_DisableFifoMode+0x66>
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	2201      	movs	r2, #1
 8010560:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	2224      	movs	r2, #36	; 0x24
 8010568:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	681a      	ldr	r2, [r3, #0]
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	f022 0201 	bic.w	r2, r2, #1
 8010582:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801058a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	2200      	movs	r2, #0
 8010590:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	68fa      	ldr	r2, [r7, #12]
 8010598:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	2220      	movs	r2, #32
 801059e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	2200      	movs	r2, #0
 80105a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80105aa:	2300      	movs	r3, #0
}
 80105ac:	4618      	mov	r0, r3
 80105ae:	3714      	adds	r7, #20
 80105b0:	46bd      	mov	sp, r7
 80105b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b6:	4770      	bx	lr

080105b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b084      	sub	sp, #16
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]
 80105c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80105c8:	2b01      	cmp	r3, #1
 80105ca:	d101      	bne.n	80105d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80105cc:	2302      	movs	r3, #2
 80105ce:	e02d      	b.n	801062c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	2201      	movs	r2, #1
 80105d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	2224      	movs	r2, #36	; 0x24
 80105dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	681a      	ldr	r2, [r3, #0]
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	f022 0201 	bic.w	r2, r2, #1
 80105f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	689b      	ldr	r3, [r3, #8]
 80105fe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	683a      	ldr	r2, [r7, #0]
 8010608:	430a      	orrs	r2, r1
 801060a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801060c:	6878      	ldr	r0, [r7, #4]
 801060e:	f000 f84f 	bl	80106b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	68fa      	ldr	r2, [r7, #12]
 8010618:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	2220      	movs	r2, #32
 801061e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	2200      	movs	r2, #0
 8010626:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801062a:	2300      	movs	r3, #0
}
 801062c:	4618      	mov	r0, r3
 801062e:	3710      	adds	r7, #16
 8010630:	46bd      	mov	sp, r7
 8010632:	bd80      	pop	{r7, pc}

08010634 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010634:	b580      	push	{r7, lr}
 8010636:	b084      	sub	sp, #16
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
 801063c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010644:	2b01      	cmp	r3, #1
 8010646:	d101      	bne.n	801064c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010648:	2302      	movs	r3, #2
 801064a:	e02d      	b.n	80106a8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	2201      	movs	r2, #1
 8010650:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	2224      	movs	r2, #36	; 0x24
 8010658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	681a      	ldr	r2, [r3, #0]
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	f022 0201 	bic.w	r2, r2, #1
 8010672:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	689b      	ldr	r3, [r3, #8]
 801067a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	683a      	ldr	r2, [r7, #0]
 8010684:	430a      	orrs	r2, r1
 8010686:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010688:	6878      	ldr	r0, [r7, #4]
 801068a:	f000 f811 	bl	80106b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	68fa      	ldr	r2, [r7, #12]
 8010694:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	2220      	movs	r2, #32
 801069a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	2200      	movs	r2, #0
 80106a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80106a6:	2300      	movs	r3, #0
}
 80106a8:	4618      	mov	r0, r3
 80106aa:	3710      	adds	r7, #16
 80106ac:	46bd      	mov	sp, r7
 80106ae:	bd80      	pop	{r7, pc}

080106b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80106b0:	b480      	push	{r7}
 80106b2:	b085      	sub	sp, #20
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d108      	bne.n	80106d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	2201      	movs	r2, #1
 80106c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	2201      	movs	r2, #1
 80106cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80106d0:	e031      	b.n	8010736 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80106d2:	2310      	movs	r3, #16
 80106d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80106d6:	2310      	movs	r3, #16
 80106d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	689b      	ldr	r3, [r3, #8]
 80106e0:	0e5b      	lsrs	r3, r3, #25
 80106e2:	b2db      	uxtb	r3, r3
 80106e4:	f003 0307 	and.w	r3, r3, #7
 80106e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	689b      	ldr	r3, [r3, #8]
 80106f0:	0f5b      	lsrs	r3, r3, #29
 80106f2:	b2db      	uxtb	r3, r3
 80106f4:	f003 0307 	and.w	r3, r3, #7
 80106f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80106fa:	7bbb      	ldrb	r3, [r7, #14]
 80106fc:	7b3a      	ldrb	r2, [r7, #12]
 80106fe:	4911      	ldr	r1, [pc, #68]	; (8010744 <UARTEx_SetNbDataToProcess+0x94>)
 8010700:	5c8a      	ldrb	r2, [r1, r2]
 8010702:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010706:	7b3a      	ldrb	r2, [r7, #12]
 8010708:	490f      	ldr	r1, [pc, #60]	; (8010748 <UARTEx_SetNbDataToProcess+0x98>)
 801070a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801070c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010710:	b29a      	uxth	r2, r3
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010718:	7bfb      	ldrb	r3, [r7, #15]
 801071a:	7b7a      	ldrb	r2, [r7, #13]
 801071c:	4909      	ldr	r1, [pc, #36]	; (8010744 <UARTEx_SetNbDataToProcess+0x94>)
 801071e:	5c8a      	ldrb	r2, [r1, r2]
 8010720:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010724:	7b7a      	ldrb	r2, [r7, #13]
 8010726:	4908      	ldr	r1, [pc, #32]	; (8010748 <UARTEx_SetNbDataToProcess+0x98>)
 8010728:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801072a:	fb93 f3f2 	sdiv	r3, r3, r2
 801072e:	b29a      	uxth	r2, r3
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010736:	bf00      	nop
 8010738:	3714      	adds	r7, #20
 801073a:	46bd      	mov	sp, r7
 801073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010740:	4770      	bx	lr
 8010742:	bf00      	nop
 8010744:	0802914c 	.word	0x0802914c
 8010748:	08029154 	.word	0x08029154

0801074c <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 801074c:	b480      	push	{r7}
 801074e:	b087      	sub	sp, #28
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
 8010754:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8010756:	683b      	ldr	r3, [r7, #0]
 8010758:	681a      	ldr	r2, [r3, #0]
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010760:	683a      	ldr	r2, [r7, #0]
 8010762:	6812      	ldr	r2, [r2, #0]
 8010764:	f023 0101 	bic.w	r1, r3, #1
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 801076e:	683b      	ldr	r3, [r7, #0]
 8010770:	689b      	ldr	r3, [r3, #8]
 8010772:	2b08      	cmp	r3, #8
 8010774:	d102      	bne.n	801077c <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8010776:	2340      	movs	r3, #64	; 0x40
 8010778:	617b      	str	r3, [r7, #20]
 801077a:	e001      	b.n	8010780 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 801077c:	2300      	movs	r3, #0
 801077e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8010780:	683b      	ldr	r3, [r7, #0]
 8010782:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8010784:	697b      	ldr	r3, [r7, #20]
 8010786:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8010788:	683b      	ldr	r3, [r7, #0]
 801078a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 801078c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 801078e:	683b      	ldr	r3, [r7, #0]
 8010790:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8010792:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8010794:	683b      	ldr	r3, [r7, #0]
 8010796:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8010798:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 801079a:	683b      	ldr	r3, [r7, #0]
 801079c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 801079e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80107a0:	683b      	ldr	r3, [r7, #0]
 80107a2:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 80107a4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80107a6:	683b      	ldr	r3, [r7, #0]
 80107a8:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 80107aa:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80107ac:	683b      	ldr	r3, [r7, #0]
 80107ae:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 80107b0:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80107b2:	683b      	ldr	r3, [r7, #0]
 80107b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 80107b6:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80107b8:	683b      	ldr	r3, [r7, #0]
 80107ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 80107bc:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80107be:	683b      	ldr	r3, [r7, #0]
 80107c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 80107c2:	4313      	orrs	r3, r2
 80107c4:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 80107c6:	683b      	ldr	r3, [r7, #0]
 80107c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107ca:	693a      	ldr	r2, [r7, #16]
 80107cc:	4313      	orrs	r3, r2
 80107ce:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 80107d0:	683b      	ldr	r3, [r7, #0]
 80107d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107d4:	693a      	ldr	r2, [r7, #16]
 80107d6:	4313      	orrs	r3, r2
 80107d8:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80107da:	683b      	ldr	r3, [r7, #0]
 80107dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107de:	693a      	ldr	r2, [r7, #16]
 80107e0:	4313      	orrs	r3, r2
 80107e2:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 80107e4:	4b20      	ldr	r3, [pc, #128]	; (8010868 <FMC_NORSRAM_Init+0x11c>)
 80107e6:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80107ee:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80107f6:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80107fe:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8010800:	683b      	ldr	r3, [r7, #0]
 8010802:	681a      	ldr	r2, [r3, #0]
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	43db      	mvns	r3, r3
 801080e:	ea02 0103 	and.w	r1, r2, r3
 8010812:	683b      	ldr	r3, [r7, #0]
 8010814:	681a      	ldr	r2, [r3, #0]
 8010816:	693b      	ldr	r3, [r7, #16]
 8010818:	4319      	orrs	r1, r3
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8010820:	683b      	ldr	r3, [r7, #0]
 8010822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010824:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010828:	d10c      	bne.n	8010844 <FMC_NORSRAM_Init+0xf8>
 801082a:	683b      	ldr	r3, [r7, #0]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d008      	beq.n	8010844 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801083a:	683b      	ldr	r3, [r7, #0]
 801083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801083e:	431a      	orrs	r2, r3
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8010844:	683b      	ldr	r3, [r7, #0]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d006      	beq.n	801085a <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681a      	ldr	r2, [r3, #0]
 8010850:	683b      	ldr	r3, [r7, #0]
 8010852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010854:	431a      	orrs	r2, r3
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801085a:	2300      	movs	r3, #0
}
 801085c:	4618      	mov	r0, r3
 801085e:	371c      	adds	r7, #28
 8010860:	46bd      	mov	sp, r7
 8010862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010866:	4770      	bx	lr
 8010868:	0008fb7f 	.word	0x0008fb7f

0801086c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 801086c:	b480      	push	{r7}
 801086e:	b087      	sub	sp, #28
 8010870:	af00      	add	r7, sp, #0
 8010872:	60f8      	str	r0, [r7, #12]
 8010874:	60b9      	str	r1, [r7, #8]
 8010876:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	1c5a      	adds	r2, r3, #1
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010882:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8010886:	68bb      	ldr	r3, [r7, #8]
 8010888:	681a      	ldr	r2, [r3, #0]
 801088a:	68bb      	ldr	r3, [r7, #8]
 801088c:	685b      	ldr	r3, [r3, #4]
 801088e:	011b      	lsls	r3, r3, #4
 8010890:	431a      	orrs	r2, r3
 8010892:	68bb      	ldr	r3, [r7, #8]
 8010894:	689b      	ldr	r3, [r3, #8]
 8010896:	021b      	lsls	r3, r3, #8
 8010898:	431a      	orrs	r2, r3
 801089a:	68bb      	ldr	r3, [r7, #8]
 801089c:	68db      	ldr	r3, [r3, #12]
 801089e:	041b      	lsls	r3, r3, #16
 80108a0:	431a      	orrs	r2, r3
 80108a2:	68bb      	ldr	r3, [r7, #8]
 80108a4:	691b      	ldr	r3, [r3, #16]
 80108a6:	3b01      	subs	r3, #1
 80108a8:	051b      	lsls	r3, r3, #20
 80108aa:	431a      	orrs	r2, r3
 80108ac:	68bb      	ldr	r3, [r7, #8]
 80108ae:	695b      	ldr	r3, [r3, #20]
 80108b0:	3b02      	subs	r3, #2
 80108b2:	061b      	lsls	r3, r3, #24
 80108b4:	431a      	orrs	r2, r3
 80108b6:	68bb      	ldr	r3, [r7, #8]
 80108b8:	699b      	ldr	r3, [r3, #24]
 80108ba:	4313      	orrs	r3, r2
 80108bc:	687a      	ldr	r2, [r7, #4]
 80108be:	3201      	adds	r2, #1
 80108c0:	4319      	orrs	r1, r3
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80108d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80108d4:	d113      	bne.n	80108fe <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	685b      	ldr	r3, [r3, #4]
 80108da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80108de:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 80108e0:	68bb      	ldr	r3, [r7, #8]
 80108e2:	691b      	ldr	r3, [r3, #16]
 80108e4:	3b01      	subs	r3, #1
 80108e6:	051b      	lsls	r3, r3, #20
 80108e8:	697a      	ldr	r2, [r7, #20]
 80108ea:	4313      	orrs	r3, r2
 80108ec:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	685b      	ldr	r3, [r3, #4]
 80108f2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80108f6:	697b      	ldr	r3, [r7, #20]
 80108f8:	431a      	orrs	r2, r3
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80108fe:	2300      	movs	r3, #0
}
 8010900:	4618      	mov	r0, r3
 8010902:	371c      	adds	r7, #28
 8010904:	46bd      	mov	sp, r7
 8010906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801090a:	4770      	bx	lr

0801090c <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 801090c:	b480      	push	{r7}
 801090e:	b085      	sub	sp, #20
 8010910:	af00      	add	r7, sp, #0
 8010912:	60f8      	str	r0, [r7, #12]
 8010914:	60b9      	str	r1, [r7, #8]
 8010916:	607a      	str	r2, [r7, #4]
 8010918:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 801091a:	683b      	ldr	r3, [r7, #0]
 801091c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010920:	d11d      	bne.n	801095e <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	687a      	ldr	r2, [r7, #4]
 8010926:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801092a:	4b13      	ldr	r3, [pc, #76]	; (8010978 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 801092c:	4013      	ands	r3, r2
 801092e:	68ba      	ldr	r2, [r7, #8]
 8010930:	6811      	ldr	r1, [r2, #0]
 8010932:	68ba      	ldr	r2, [r7, #8]
 8010934:	6852      	ldr	r2, [r2, #4]
 8010936:	0112      	lsls	r2, r2, #4
 8010938:	4311      	orrs	r1, r2
 801093a:	68ba      	ldr	r2, [r7, #8]
 801093c:	6892      	ldr	r2, [r2, #8]
 801093e:	0212      	lsls	r2, r2, #8
 8010940:	4311      	orrs	r1, r2
 8010942:	68ba      	ldr	r2, [r7, #8]
 8010944:	6992      	ldr	r2, [r2, #24]
 8010946:	4311      	orrs	r1, r2
 8010948:	68ba      	ldr	r2, [r7, #8]
 801094a:	68d2      	ldr	r2, [r2, #12]
 801094c:	0412      	lsls	r2, r2, #16
 801094e:	430a      	orrs	r2, r1
 8010950:	ea43 0102 	orr.w	r1, r3, r2
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	687a      	ldr	r2, [r7, #4]
 8010958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801095c:	e005      	b.n	801096a <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	687a      	ldr	r2, [r7, #4]
 8010962:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8010966:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 801096a:	2300      	movs	r3, #0
}
 801096c:	4618      	mov	r0, r3
 801096e:	3714      	adds	r7, #20
 8010970:	46bd      	mov	sp, r7
 8010972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010976:	4770      	bx	lr
 8010978:	cff00000 	.word	0xcff00000

0801097c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 801097c:	b580      	push	{r7, lr}
 801097e:	b084      	sub	sp, #16
 8010980:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8010982:	4b8d      	ldr	r3, [pc, #564]	; (8010bb8 <MX_LWIP_Init+0x23c>)
 8010984:	22c0      	movs	r2, #192	; 0xc0
 8010986:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8010988:	4b8b      	ldr	r3, [pc, #556]	; (8010bb8 <MX_LWIP_Init+0x23c>)
 801098a:	22a8      	movs	r2, #168	; 0xa8
 801098c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 801098e:	4b8a      	ldr	r3, [pc, #552]	; (8010bb8 <MX_LWIP_Init+0x23c>)
 8010990:	2201      	movs	r2, #1
 8010992:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 1;
 8010994:	4b88      	ldr	r3, [pc, #544]	; (8010bb8 <MX_LWIP_Init+0x23c>)
 8010996:	2201      	movs	r2, #1
 8010998:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 801099a:	4b88      	ldr	r3, [pc, #544]	; (8010bbc <MX_LWIP_Init+0x240>)
 801099c:	22ff      	movs	r2, #255	; 0xff
 801099e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80109a0:	4b86      	ldr	r3, [pc, #536]	; (8010bbc <MX_LWIP_Init+0x240>)
 80109a2:	22ff      	movs	r2, #255	; 0xff
 80109a4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80109a6:	4b85      	ldr	r3, [pc, #532]	; (8010bbc <MX_LWIP_Init+0x240>)
 80109a8:	22ff      	movs	r2, #255	; 0xff
 80109aa:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80109ac:	4b83      	ldr	r3, [pc, #524]	; (8010bbc <MX_LWIP_Init+0x240>)
 80109ae:	2200      	movs	r2, #0
 80109b0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 80109b2:	4b83      	ldr	r3, [pc, #524]	; (8010bc0 <MX_LWIP_Init+0x244>)
 80109b4:	2200      	movs	r2, #0
 80109b6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 80109b8:	4b81      	ldr	r3, [pc, #516]	; (8010bc0 <MX_LWIP_Init+0x244>)
 80109ba:	2200      	movs	r2, #0
 80109bc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80109be:	4b80      	ldr	r3, [pc, #512]	; (8010bc0 <MX_LWIP_Init+0x244>)
 80109c0:	2200      	movs	r2, #0
 80109c2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 80109c4:	4b7e      	ldr	r3, [pc, #504]	; (8010bc0 <MX_LWIP_Init+0x244>)
 80109c6:	2200      	movs	r2, #0
 80109c8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80109ca:	f002 fc81 	bl	80132d0 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80109ce:	4b7a      	ldr	r3, [pc, #488]	; (8010bb8 <MX_LWIP_Init+0x23c>)
 80109d0:	781b      	ldrb	r3, [r3, #0]
 80109d2:	061a      	lsls	r2, r3, #24
 80109d4:	4b78      	ldr	r3, [pc, #480]	; (8010bb8 <MX_LWIP_Init+0x23c>)
 80109d6:	785b      	ldrb	r3, [r3, #1]
 80109d8:	041b      	lsls	r3, r3, #16
 80109da:	431a      	orrs	r2, r3
 80109dc:	4b76      	ldr	r3, [pc, #472]	; (8010bb8 <MX_LWIP_Init+0x23c>)
 80109de:	789b      	ldrb	r3, [r3, #2]
 80109e0:	021b      	lsls	r3, r3, #8
 80109e2:	4313      	orrs	r3, r2
 80109e4:	4a74      	ldr	r2, [pc, #464]	; (8010bb8 <MX_LWIP_Init+0x23c>)
 80109e6:	78d2      	ldrb	r2, [r2, #3]
 80109e8:	4313      	orrs	r3, r2
 80109ea:	061a      	lsls	r2, r3, #24
 80109ec:	4b72      	ldr	r3, [pc, #456]	; (8010bb8 <MX_LWIP_Init+0x23c>)
 80109ee:	781b      	ldrb	r3, [r3, #0]
 80109f0:	0619      	lsls	r1, r3, #24
 80109f2:	4b71      	ldr	r3, [pc, #452]	; (8010bb8 <MX_LWIP_Init+0x23c>)
 80109f4:	785b      	ldrb	r3, [r3, #1]
 80109f6:	041b      	lsls	r3, r3, #16
 80109f8:	4319      	orrs	r1, r3
 80109fa:	4b6f      	ldr	r3, [pc, #444]	; (8010bb8 <MX_LWIP_Init+0x23c>)
 80109fc:	789b      	ldrb	r3, [r3, #2]
 80109fe:	021b      	lsls	r3, r3, #8
 8010a00:	430b      	orrs	r3, r1
 8010a02:	496d      	ldr	r1, [pc, #436]	; (8010bb8 <MX_LWIP_Init+0x23c>)
 8010a04:	78c9      	ldrb	r1, [r1, #3]
 8010a06:	430b      	orrs	r3, r1
 8010a08:	021b      	lsls	r3, r3, #8
 8010a0a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010a0e:	431a      	orrs	r2, r3
 8010a10:	4b69      	ldr	r3, [pc, #420]	; (8010bb8 <MX_LWIP_Init+0x23c>)
 8010a12:	781b      	ldrb	r3, [r3, #0]
 8010a14:	0619      	lsls	r1, r3, #24
 8010a16:	4b68      	ldr	r3, [pc, #416]	; (8010bb8 <MX_LWIP_Init+0x23c>)
 8010a18:	785b      	ldrb	r3, [r3, #1]
 8010a1a:	041b      	lsls	r3, r3, #16
 8010a1c:	4319      	orrs	r1, r3
 8010a1e:	4b66      	ldr	r3, [pc, #408]	; (8010bb8 <MX_LWIP_Init+0x23c>)
 8010a20:	789b      	ldrb	r3, [r3, #2]
 8010a22:	021b      	lsls	r3, r3, #8
 8010a24:	430b      	orrs	r3, r1
 8010a26:	4964      	ldr	r1, [pc, #400]	; (8010bb8 <MX_LWIP_Init+0x23c>)
 8010a28:	78c9      	ldrb	r1, [r1, #3]
 8010a2a:	430b      	orrs	r3, r1
 8010a2c:	0a1b      	lsrs	r3, r3, #8
 8010a2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010a32:	431a      	orrs	r2, r3
 8010a34:	4b60      	ldr	r3, [pc, #384]	; (8010bb8 <MX_LWIP_Init+0x23c>)
 8010a36:	781b      	ldrb	r3, [r3, #0]
 8010a38:	0619      	lsls	r1, r3, #24
 8010a3a:	4b5f      	ldr	r3, [pc, #380]	; (8010bb8 <MX_LWIP_Init+0x23c>)
 8010a3c:	785b      	ldrb	r3, [r3, #1]
 8010a3e:	041b      	lsls	r3, r3, #16
 8010a40:	4319      	orrs	r1, r3
 8010a42:	4b5d      	ldr	r3, [pc, #372]	; (8010bb8 <MX_LWIP_Init+0x23c>)
 8010a44:	789b      	ldrb	r3, [r3, #2]
 8010a46:	021b      	lsls	r3, r3, #8
 8010a48:	430b      	orrs	r3, r1
 8010a4a:	495b      	ldr	r1, [pc, #364]	; (8010bb8 <MX_LWIP_Init+0x23c>)
 8010a4c:	78c9      	ldrb	r1, [r1, #3]
 8010a4e:	430b      	orrs	r3, r1
 8010a50:	0e1b      	lsrs	r3, r3, #24
 8010a52:	4313      	orrs	r3, r2
 8010a54:	4a5b      	ldr	r2, [pc, #364]	; (8010bc4 <MX_LWIP_Init+0x248>)
 8010a56:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8010a58:	4b58      	ldr	r3, [pc, #352]	; (8010bbc <MX_LWIP_Init+0x240>)
 8010a5a:	781b      	ldrb	r3, [r3, #0]
 8010a5c:	061a      	lsls	r2, r3, #24
 8010a5e:	4b57      	ldr	r3, [pc, #348]	; (8010bbc <MX_LWIP_Init+0x240>)
 8010a60:	785b      	ldrb	r3, [r3, #1]
 8010a62:	041b      	lsls	r3, r3, #16
 8010a64:	431a      	orrs	r2, r3
 8010a66:	4b55      	ldr	r3, [pc, #340]	; (8010bbc <MX_LWIP_Init+0x240>)
 8010a68:	789b      	ldrb	r3, [r3, #2]
 8010a6a:	021b      	lsls	r3, r3, #8
 8010a6c:	4313      	orrs	r3, r2
 8010a6e:	4a53      	ldr	r2, [pc, #332]	; (8010bbc <MX_LWIP_Init+0x240>)
 8010a70:	78d2      	ldrb	r2, [r2, #3]
 8010a72:	4313      	orrs	r3, r2
 8010a74:	061a      	lsls	r2, r3, #24
 8010a76:	4b51      	ldr	r3, [pc, #324]	; (8010bbc <MX_LWIP_Init+0x240>)
 8010a78:	781b      	ldrb	r3, [r3, #0]
 8010a7a:	0619      	lsls	r1, r3, #24
 8010a7c:	4b4f      	ldr	r3, [pc, #316]	; (8010bbc <MX_LWIP_Init+0x240>)
 8010a7e:	785b      	ldrb	r3, [r3, #1]
 8010a80:	041b      	lsls	r3, r3, #16
 8010a82:	4319      	orrs	r1, r3
 8010a84:	4b4d      	ldr	r3, [pc, #308]	; (8010bbc <MX_LWIP_Init+0x240>)
 8010a86:	789b      	ldrb	r3, [r3, #2]
 8010a88:	021b      	lsls	r3, r3, #8
 8010a8a:	430b      	orrs	r3, r1
 8010a8c:	494b      	ldr	r1, [pc, #300]	; (8010bbc <MX_LWIP_Init+0x240>)
 8010a8e:	78c9      	ldrb	r1, [r1, #3]
 8010a90:	430b      	orrs	r3, r1
 8010a92:	021b      	lsls	r3, r3, #8
 8010a94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010a98:	431a      	orrs	r2, r3
 8010a9a:	4b48      	ldr	r3, [pc, #288]	; (8010bbc <MX_LWIP_Init+0x240>)
 8010a9c:	781b      	ldrb	r3, [r3, #0]
 8010a9e:	0619      	lsls	r1, r3, #24
 8010aa0:	4b46      	ldr	r3, [pc, #280]	; (8010bbc <MX_LWIP_Init+0x240>)
 8010aa2:	785b      	ldrb	r3, [r3, #1]
 8010aa4:	041b      	lsls	r3, r3, #16
 8010aa6:	4319      	orrs	r1, r3
 8010aa8:	4b44      	ldr	r3, [pc, #272]	; (8010bbc <MX_LWIP_Init+0x240>)
 8010aaa:	789b      	ldrb	r3, [r3, #2]
 8010aac:	021b      	lsls	r3, r3, #8
 8010aae:	430b      	orrs	r3, r1
 8010ab0:	4942      	ldr	r1, [pc, #264]	; (8010bbc <MX_LWIP_Init+0x240>)
 8010ab2:	78c9      	ldrb	r1, [r1, #3]
 8010ab4:	430b      	orrs	r3, r1
 8010ab6:	0a1b      	lsrs	r3, r3, #8
 8010ab8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010abc:	431a      	orrs	r2, r3
 8010abe:	4b3f      	ldr	r3, [pc, #252]	; (8010bbc <MX_LWIP_Init+0x240>)
 8010ac0:	781b      	ldrb	r3, [r3, #0]
 8010ac2:	0619      	lsls	r1, r3, #24
 8010ac4:	4b3d      	ldr	r3, [pc, #244]	; (8010bbc <MX_LWIP_Init+0x240>)
 8010ac6:	785b      	ldrb	r3, [r3, #1]
 8010ac8:	041b      	lsls	r3, r3, #16
 8010aca:	4319      	orrs	r1, r3
 8010acc:	4b3b      	ldr	r3, [pc, #236]	; (8010bbc <MX_LWIP_Init+0x240>)
 8010ace:	789b      	ldrb	r3, [r3, #2]
 8010ad0:	021b      	lsls	r3, r3, #8
 8010ad2:	430b      	orrs	r3, r1
 8010ad4:	4939      	ldr	r1, [pc, #228]	; (8010bbc <MX_LWIP_Init+0x240>)
 8010ad6:	78c9      	ldrb	r1, [r1, #3]
 8010ad8:	430b      	orrs	r3, r1
 8010ada:	0e1b      	lsrs	r3, r3, #24
 8010adc:	4313      	orrs	r3, r2
 8010ade:	4a3a      	ldr	r2, [pc, #232]	; (8010bc8 <MX_LWIP_Init+0x24c>)
 8010ae0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8010ae2:	4b37      	ldr	r3, [pc, #220]	; (8010bc0 <MX_LWIP_Init+0x244>)
 8010ae4:	781b      	ldrb	r3, [r3, #0]
 8010ae6:	061a      	lsls	r2, r3, #24
 8010ae8:	4b35      	ldr	r3, [pc, #212]	; (8010bc0 <MX_LWIP_Init+0x244>)
 8010aea:	785b      	ldrb	r3, [r3, #1]
 8010aec:	041b      	lsls	r3, r3, #16
 8010aee:	431a      	orrs	r2, r3
 8010af0:	4b33      	ldr	r3, [pc, #204]	; (8010bc0 <MX_LWIP_Init+0x244>)
 8010af2:	789b      	ldrb	r3, [r3, #2]
 8010af4:	021b      	lsls	r3, r3, #8
 8010af6:	4313      	orrs	r3, r2
 8010af8:	4a31      	ldr	r2, [pc, #196]	; (8010bc0 <MX_LWIP_Init+0x244>)
 8010afa:	78d2      	ldrb	r2, [r2, #3]
 8010afc:	4313      	orrs	r3, r2
 8010afe:	061a      	lsls	r2, r3, #24
 8010b00:	4b2f      	ldr	r3, [pc, #188]	; (8010bc0 <MX_LWIP_Init+0x244>)
 8010b02:	781b      	ldrb	r3, [r3, #0]
 8010b04:	0619      	lsls	r1, r3, #24
 8010b06:	4b2e      	ldr	r3, [pc, #184]	; (8010bc0 <MX_LWIP_Init+0x244>)
 8010b08:	785b      	ldrb	r3, [r3, #1]
 8010b0a:	041b      	lsls	r3, r3, #16
 8010b0c:	4319      	orrs	r1, r3
 8010b0e:	4b2c      	ldr	r3, [pc, #176]	; (8010bc0 <MX_LWIP_Init+0x244>)
 8010b10:	789b      	ldrb	r3, [r3, #2]
 8010b12:	021b      	lsls	r3, r3, #8
 8010b14:	430b      	orrs	r3, r1
 8010b16:	492a      	ldr	r1, [pc, #168]	; (8010bc0 <MX_LWIP_Init+0x244>)
 8010b18:	78c9      	ldrb	r1, [r1, #3]
 8010b1a:	430b      	orrs	r3, r1
 8010b1c:	021b      	lsls	r3, r3, #8
 8010b1e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010b22:	431a      	orrs	r2, r3
 8010b24:	4b26      	ldr	r3, [pc, #152]	; (8010bc0 <MX_LWIP_Init+0x244>)
 8010b26:	781b      	ldrb	r3, [r3, #0]
 8010b28:	0619      	lsls	r1, r3, #24
 8010b2a:	4b25      	ldr	r3, [pc, #148]	; (8010bc0 <MX_LWIP_Init+0x244>)
 8010b2c:	785b      	ldrb	r3, [r3, #1]
 8010b2e:	041b      	lsls	r3, r3, #16
 8010b30:	4319      	orrs	r1, r3
 8010b32:	4b23      	ldr	r3, [pc, #140]	; (8010bc0 <MX_LWIP_Init+0x244>)
 8010b34:	789b      	ldrb	r3, [r3, #2]
 8010b36:	021b      	lsls	r3, r3, #8
 8010b38:	430b      	orrs	r3, r1
 8010b3a:	4921      	ldr	r1, [pc, #132]	; (8010bc0 <MX_LWIP_Init+0x244>)
 8010b3c:	78c9      	ldrb	r1, [r1, #3]
 8010b3e:	430b      	orrs	r3, r1
 8010b40:	0a1b      	lsrs	r3, r3, #8
 8010b42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010b46:	431a      	orrs	r2, r3
 8010b48:	4b1d      	ldr	r3, [pc, #116]	; (8010bc0 <MX_LWIP_Init+0x244>)
 8010b4a:	781b      	ldrb	r3, [r3, #0]
 8010b4c:	0619      	lsls	r1, r3, #24
 8010b4e:	4b1c      	ldr	r3, [pc, #112]	; (8010bc0 <MX_LWIP_Init+0x244>)
 8010b50:	785b      	ldrb	r3, [r3, #1]
 8010b52:	041b      	lsls	r3, r3, #16
 8010b54:	4319      	orrs	r1, r3
 8010b56:	4b1a      	ldr	r3, [pc, #104]	; (8010bc0 <MX_LWIP_Init+0x244>)
 8010b58:	789b      	ldrb	r3, [r3, #2]
 8010b5a:	021b      	lsls	r3, r3, #8
 8010b5c:	430b      	orrs	r3, r1
 8010b5e:	4918      	ldr	r1, [pc, #96]	; (8010bc0 <MX_LWIP_Init+0x244>)
 8010b60:	78c9      	ldrb	r1, [r1, #3]
 8010b62:	430b      	orrs	r3, r1
 8010b64:	0e1b      	lsrs	r3, r3, #24
 8010b66:	4313      	orrs	r3, r2
 8010b68:	4a18      	ldr	r2, [pc, #96]	; (8010bcc <MX_LWIP_Init+0x250>)
 8010b6a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8010b6c:	4b18      	ldr	r3, [pc, #96]	; (8010bd0 <MX_LWIP_Init+0x254>)
 8010b6e:	9302      	str	r3, [sp, #8]
 8010b70:	4b18      	ldr	r3, [pc, #96]	; (8010bd4 <MX_LWIP_Init+0x258>)
 8010b72:	9301      	str	r3, [sp, #4]
 8010b74:	2300      	movs	r3, #0
 8010b76:	9300      	str	r3, [sp, #0]
 8010b78:	4b14      	ldr	r3, [pc, #80]	; (8010bcc <MX_LWIP_Init+0x250>)
 8010b7a:	4a13      	ldr	r2, [pc, #76]	; (8010bc8 <MX_LWIP_Init+0x24c>)
 8010b7c:	4911      	ldr	r1, [pc, #68]	; (8010bc4 <MX_LWIP_Init+0x248>)
 8010b7e:	4816      	ldr	r0, [pc, #88]	; (8010bd8 <MX_LWIP_Init+0x25c>)
 8010b80:	f004 f99e 	bl	8014ec0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8010b84:	4814      	ldr	r0, [pc, #80]	; (8010bd8 <MX_LWIP_Init+0x25c>)
 8010b86:	f004 fb4d 	bl	8015224 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8010b8a:	4b13      	ldr	r3, [pc, #76]	; (8010bd8 <MX_LWIP_Init+0x25c>)
 8010b8c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010b90:	089b      	lsrs	r3, r3, #2
 8010b92:	f003 0301 	and.w	r3, r3, #1
 8010b96:	b2db      	uxtb	r3, r3
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d003      	beq.n	8010ba4 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8010b9c:	480e      	ldr	r0, [pc, #56]	; (8010bd8 <MX_LWIP_Init+0x25c>)
 8010b9e:	f004 fb51 	bl	8015244 <netif_set_up>
 8010ba2:	e002      	b.n	8010baa <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8010ba4:	480c      	ldr	r0, [pc, #48]	; (8010bd8 <MX_LWIP_Init+0x25c>)
 8010ba6:	f004 fbb9 	bl	801531c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8010baa:	490c      	ldr	r1, [pc, #48]	; (8010bdc <MX_LWIP_Init+0x260>)
 8010bac:	480a      	ldr	r0, [pc, #40]	; (8010bd8 <MX_LWIP_Init+0x25c>)
 8010bae:	f004 fc4b 	bl	8015448 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8010bb2:	bf00      	nop
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	bd80      	pop	{r7, pc}
 8010bb8:	24005d90 	.word	0x24005d90
 8010bbc:	24005d8c 	.word	0x24005d8c
 8010bc0:	24005d4c 	.word	0x24005d4c
 8010bc4:	24005d84 	.word	0x24005d84
 8010bc8:	24005d94 	.word	0x24005d94
 8010bcc:	24005d98 	.word	0x24005d98
 8010bd0:	08012c45 	.word	0x08012c45
 8010bd4:	08011159 	.word	0x08011159
 8010bd8:	24005d50 	.word	0x24005d50
 8010bdc:	08010c31 	.word	0x08010c31

08010be0 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b082      	sub	sp, #8
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8010be8:	f7f3 fa0a 	bl	8004000 <HAL_GetTick>
 8010bec:	4602      	mov	r2, r0
 8010bee:	4b08      	ldr	r3, [pc, #32]	; (8010c10 <Ethernet_Link_Periodic_Handle+0x30>)
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	1ad3      	subs	r3, r2, r3
 8010bf4:	2b63      	cmp	r3, #99	; 0x63
 8010bf6:	d907      	bls.n	8010c08 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8010bf8:	f7f3 fa02 	bl	8004000 <HAL_GetTick>
 8010bfc:	4603      	mov	r3, r0
 8010bfe:	4a04      	ldr	r2, [pc, #16]	; (8010c10 <Ethernet_Link_Periodic_Handle+0x30>)
 8010c00:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8010c02:	6878      	ldr	r0, [r7, #4]
 8010c04:	f000 fb3c 	bl	8011280 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8010c08:	bf00      	nop
 8010c0a:	3708      	adds	r7, #8
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	bd80      	pop	{r7, pc}
 8010c10:	24005d88 	.word	0x24005d88

08010c14 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8010c14:	b580      	push	{r7, lr}
 8010c16:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8010c18:	4804      	ldr	r0, [pc, #16]	; (8010c2c <MX_LWIP_Process+0x18>)
 8010c1a:	f000 fa7d 	bl	8011118 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8010c1e:	f00b fd31 	bl	801c684 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8010c22:	4802      	ldr	r0, [pc, #8]	; (8010c2c <MX_LWIP_Process+0x18>)
 8010c24:	f7ff ffdc 	bl	8010be0 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8010c28:	bf00      	nop
 8010c2a:	bd80      	pop	{r7, pc}
 8010c2c:	24005d50 	.word	0x24005d50

08010c30 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8010c30:	b480      	push	{r7}
 8010c32:	b083      	sub	sp, #12
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8010c38:	bf00      	nop
 8010c3a:	370c      	adds	r7, #12
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c42:	4770      	bx	lr

08010c44 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b08e      	sub	sp, #56	; 0x38
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010c50:	2200      	movs	r2, #0
 8010c52:	601a      	str	r2, [r3, #0]
 8010c54:	605a      	str	r2, [r3, #4]
 8010c56:	609a      	str	r2, [r3, #8]
 8010c58:	60da      	str	r2, [r3, #12]
 8010c5a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	4a4d      	ldr	r2, [pc, #308]	; (8010d98 <HAL_ETH_MspInit+0x154>)
 8010c62:	4293      	cmp	r3, r2
 8010c64:	f040 8093 	bne.w	8010d8e <HAL_ETH_MspInit+0x14a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8010c68:	4b4c      	ldr	r3, [pc, #304]	; (8010d9c <HAL_ETH_MspInit+0x158>)
 8010c6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010c6e:	4a4b      	ldr	r2, [pc, #300]	; (8010d9c <HAL_ETH_MspInit+0x158>)
 8010c70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010c74:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8010c78:	4b48      	ldr	r3, [pc, #288]	; (8010d9c <HAL_ETH_MspInit+0x158>)
 8010c7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010c7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010c82:	623b      	str	r3, [r7, #32]
 8010c84:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8010c86:	4b45      	ldr	r3, [pc, #276]	; (8010d9c <HAL_ETH_MspInit+0x158>)
 8010c88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010c8c:	4a43      	ldr	r2, [pc, #268]	; (8010d9c <HAL_ETH_MspInit+0x158>)
 8010c8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010c92:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8010c96:	4b41      	ldr	r3, [pc, #260]	; (8010d9c <HAL_ETH_MspInit+0x158>)
 8010c98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010ca0:	61fb      	str	r3, [r7, #28]
 8010ca2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8010ca4:	4b3d      	ldr	r3, [pc, #244]	; (8010d9c <HAL_ETH_MspInit+0x158>)
 8010ca6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010caa:	4a3c      	ldr	r2, [pc, #240]	; (8010d9c <HAL_ETH_MspInit+0x158>)
 8010cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010cb0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8010cb4:	4b39      	ldr	r3, [pc, #228]	; (8010d9c <HAL_ETH_MspInit+0x158>)
 8010cb6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010cbe:	61bb      	str	r3, [r7, #24]
 8010cc0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8010cc2:	4b36      	ldr	r3, [pc, #216]	; (8010d9c <HAL_ETH_MspInit+0x158>)
 8010cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010cc8:	4a34      	ldr	r2, [pc, #208]	; (8010d9c <HAL_ETH_MspInit+0x158>)
 8010cca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010cce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010cd2:	4b32      	ldr	r3, [pc, #200]	; (8010d9c <HAL_ETH_MspInit+0x158>)
 8010cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010cdc:	617b      	str	r3, [r7, #20]
 8010cde:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010ce0:	4b2e      	ldr	r3, [pc, #184]	; (8010d9c <HAL_ETH_MspInit+0x158>)
 8010ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010ce6:	4a2d      	ldr	r2, [pc, #180]	; (8010d9c <HAL_ETH_MspInit+0x158>)
 8010ce8:	f043 0304 	orr.w	r3, r3, #4
 8010cec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010cf0:	4b2a      	ldr	r3, [pc, #168]	; (8010d9c <HAL_ETH_MspInit+0x158>)
 8010cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010cf6:	f003 0304 	and.w	r3, r3, #4
 8010cfa:	613b      	str	r3, [r7, #16]
 8010cfc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010cfe:	4b27      	ldr	r3, [pc, #156]	; (8010d9c <HAL_ETH_MspInit+0x158>)
 8010d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010d04:	4a25      	ldr	r2, [pc, #148]	; (8010d9c <HAL_ETH_MspInit+0x158>)
 8010d06:	f043 0301 	orr.w	r3, r3, #1
 8010d0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010d0e:	4b23      	ldr	r3, [pc, #140]	; (8010d9c <HAL_ETH_MspInit+0x158>)
 8010d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010d14:	f003 0301 	and.w	r3, r3, #1
 8010d18:	60fb      	str	r3, [r7, #12]
 8010d1a:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> ETH_CRS_DV
    PA1     ------> ETH_REF_CLK
    PA2     ------> ETH_MDIO
    PC4     ------> ETH_RXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8010d1c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8010d20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010d22:	2302      	movs	r3, #2
 8010d24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d26:	2300      	movs	r3, #0
 8010d28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010d2a:	2303      	movs	r3, #3
 8010d2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8010d2e:	230b      	movs	r3, #11
 8010d30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8010d32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010d36:	4619      	mov	r1, r3
 8010d38:	4819      	ldr	r0, [pc, #100]	; (8010da0 <HAL_ETH_MspInit+0x15c>)
 8010d3a:	f7f8 fc4b 	bl	80095d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_4;
 8010d3e:	2332      	movs	r3, #50	; 0x32
 8010d40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010d42:	2302      	movs	r3, #2
 8010d44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d46:	2300      	movs	r3, #0
 8010d48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010d4a:	2303      	movs	r3, #3
 8010d4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8010d4e:	230b      	movs	r3, #11
 8010d50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010d52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010d56:	4619      	mov	r1, r3
 8010d58:	4812      	ldr	r0, [pc, #72]	; (8010da4 <HAL_ETH_MspInit+0x160>)
 8010d5a:	f7f8 fc3b 	bl	80095d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1|GPIO_PIN_2;
 8010d5e:	2386      	movs	r3, #134	; 0x86
 8010d60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010d62:	2302      	movs	r3, #2
 8010d64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d66:	2300      	movs	r3, #0
 8010d68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010d6a:	2303      	movs	r3, #3
 8010d6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8010d6e:	230b      	movs	r3, #11
 8010d70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010d76:	4619      	mov	r1, r3
 8010d78:	480b      	ldr	r0, [pc, #44]	; (8010da8 <HAL_ETH_MspInit+0x164>)
 8010d7a:	f7f8 fc2b 	bl	80095d4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 1, 0);
 8010d7e:	2200      	movs	r2, #0
 8010d80:	2101      	movs	r1, #1
 8010d82:	203d      	movs	r0, #61	; 0x3d
 8010d84:	f7f4 fb1b 	bl	80053be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8010d88:	203d      	movs	r0, #61	; 0x3d
 8010d8a:	f7f4 fb32 	bl	80053f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8010d8e:	bf00      	nop
 8010d90:	3738      	adds	r7, #56	; 0x38
 8010d92:	46bd      	mov	sp, r7
 8010d94:	bd80      	pop	{r7, pc}
 8010d96:	bf00      	nop
 8010d98:	40028000 	.word	0x40028000
 8010d9c:	58024400 	.word	0x58024400
 8010da0:	58021800 	.word	0x58021800
 8010da4:	58020800 	.word	0x58020800
 8010da8:	58020000 	.word	0x58020000

08010dac <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b086      	sub	sp, #24
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8010db4:	2300      	movs	r3, #0
 8010db6:	74fb      	strb	r3, [r7, #19]
  uint32_t idx = 0;
 8010db8:	2300      	movs	r3, #0
 8010dba:	617b      	str	r3, [r7, #20]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8010dbc:	4b4a      	ldr	r3, [pc, #296]	; (8010ee8 <low_level_init+0x13c>)
 8010dbe:	4a4b      	ldr	r2, [pc, #300]	; (8010eec <low_level_init+0x140>)
 8010dc0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8010dc2:	2300      	movs	r3, #0
 8010dc4:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8010dc6:	2380      	movs	r3, #128	; 0x80
 8010dc8:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 8010dca:	23e1      	movs	r3, #225	; 0xe1
 8010dcc:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 8010dce:	2300      	movs	r3, #0
 8010dd0:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8010dda:	4a43      	ldr	r2, [pc, #268]	; (8010ee8 <low_level_init+0x13c>)
 8010ddc:	f107 030c 	add.w	r3, r7, #12
 8010de0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8010de2:	4b41      	ldr	r3, [pc, #260]	; (8010ee8 <low_level_init+0x13c>)
 8010de4:	2201      	movs	r2, #1
 8010de6:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8010de8:	4b3f      	ldr	r3, [pc, #252]	; (8010ee8 <low_level_init+0x13c>)
 8010dea:	4a41      	ldr	r2, [pc, #260]	; (8010ef0 <low_level_init+0x144>)
 8010dec:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8010dee:	4b3e      	ldr	r3, [pc, #248]	; (8010ee8 <low_level_init+0x13c>)
 8010df0:	4a40      	ldr	r2, [pc, #256]	; (8010ef4 <low_level_init+0x148>)
 8010df2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8010df4:	4b3c      	ldr	r3, [pc, #240]	; (8010ee8 <low_level_init+0x13c>)
 8010df6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8010dfa:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8010dfc:	483a      	ldr	r0, [pc, #232]	; (8010ee8 <low_level_init+0x13c>)
 8010dfe:	f7f6 fd71 	bl	80078e4 <HAL_ETH_Init>
 8010e02:	4603      	mov	r3, r0
 8010e04:	74fb      	strb	r3, [r7, #19]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8010e06:	2234      	movs	r2, #52	; 0x34
 8010e08:	2100      	movs	r1, #0
 8010e0a:	483b      	ldr	r0, [pc, #236]	; (8010ef8 <low_level_init+0x14c>)
 8010e0c:	f00e ffb4 	bl	801fd78 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8010e10:	4b39      	ldr	r3, [pc, #228]	; (8010ef8 <low_level_init+0x14c>)
 8010e12:	2221      	movs	r2, #33	; 0x21
 8010e14:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8010e16:	4b38      	ldr	r3, [pc, #224]	; (8010ef8 <low_level_init+0x14c>)
 8010e18:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8010e1c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8010e1e:	4b36      	ldr	r3, [pc, #216]	; (8010ef8 <low_level_init+0x14c>)
 8010e20:	2200      	movs	r2, #0
 8010e22:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8010e24:	4835      	ldr	r0, [pc, #212]	; (8010efc <low_level_init+0x150>)
 8010e26:	f003 ff13 	bl	8014c50 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	2206      	movs	r2, #6
 8010e2e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8010e32:	4b2d      	ldr	r3, [pc, #180]	; (8010ee8 <low_level_init+0x13c>)
 8010e34:	685b      	ldr	r3, [r3, #4]
 8010e36:	781a      	ldrb	r2, [r3, #0]
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8010e3e:	4b2a      	ldr	r3, [pc, #168]	; (8010ee8 <low_level_init+0x13c>)
 8010e40:	685b      	ldr	r3, [r3, #4]
 8010e42:	785a      	ldrb	r2, [r3, #1]
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8010e4a:	4b27      	ldr	r3, [pc, #156]	; (8010ee8 <low_level_init+0x13c>)
 8010e4c:	685b      	ldr	r3, [r3, #4]
 8010e4e:	789a      	ldrb	r2, [r3, #2]
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8010e56:	4b24      	ldr	r3, [pc, #144]	; (8010ee8 <low_level_init+0x13c>)
 8010e58:	685b      	ldr	r3, [r3, #4]
 8010e5a:	78da      	ldrb	r2, [r3, #3]
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8010e62:	4b21      	ldr	r3, [pc, #132]	; (8010ee8 <low_level_init+0x13c>)
 8010e64:	685b      	ldr	r3, [r3, #4]
 8010e66:	791a      	ldrb	r2, [r3, #4]
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8010e6e:	4b1e      	ldr	r3, [pc, #120]	; (8010ee8 <low_level_init+0x13c>)
 8010e70:	685b      	ldr	r3, [r3, #4]
 8010e72:	795a      	ldrb	r2, [r3, #5]
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8010e80:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010e88:	f043 030a 	orr.w	r3, r3, #10
 8010e8c:	b2da      	uxtb	r2, r3
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8010e94:	2300      	movs	r3, #0
 8010e96:	617b      	str	r3, [r7, #20]
 8010e98:	e00e      	b.n	8010eb8 <low_level_init+0x10c>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 8010e9a:	697b      	ldr	r3, [r7, #20]
 8010e9c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8010ea0:	fb02 f303 	mul.w	r3, r2, r3
 8010ea4:	4a16      	ldr	r2, [pc, #88]	; (8010f00 <low_level_init+0x154>)
 8010ea6:	441a      	add	r2, r3
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	6979      	ldr	r1, [r7, #20]
 8010eac:	480e      	ldr	r0, [pc, #56]	; (8010ee8 <low_level_init+0x13c>)
 8010eae:	f7f6 fdf3 	bl	8007a98 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8010eb2:	697b      	ldr	r3, [r7, #20]
 8010eb4:	3301      	adds	r3, #1
 8010eb6:	617b      	str	r3, [r7, #20]
 8010eb8:	697b      	ldr	r3, [r7, #20]
 8010eba:	2b03      	cmp	r3, #3
 8010ebc:	d9ed      	bls.n	8010e9a <low_level_init+0xee>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8010ebe:	4911      	ldr	r1, [pc, #68]	; (8010f04 <low_level_init+0x158>)
 8010ec0:	4811      	ldr	r0, [pc, #68]	; (8010f08 <low_level_init+0x15c>)
 8010ec2:	f7f2 feb5 	bl	8003c30 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8010ec6:	4810      	ldr	r0, [pc, #64]	; (8010f08 <low_level_init+0x15c>)
 8010ec8:	f7f2 fee4 	bl	8003c94 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8010ecc:	7cfb      	ldrb	r3, [r7, #19]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d103      	bne.n	8010eda <low_level_init+0x12e>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8010ed2:	6878      	ldr	r0, [r7, #4]
 8010ed4:	f000 f9d4 	bl	8011280 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8010ed8:	e001      	b.n	8010ede <low_level_init+0x132>
    Error_Handler();
 8010eda:	f7f1 feab 	bl	8002c34 <Error_Handler>
}
 8010ede:	bf00      	nop
 8010ee0:	3718      	adds	r7, #24
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	bd80      	pop	{r7, pc}
 8010ee6:	bf00      	nop
 8010ee8:	24005e88 	.word	0x24005e88
 8010eec:	40028000 	.word	0x40028000
 8010ef0:	30040060 	.word	0x30040060
 8010ef4:	30040000 	.word	0x30040000
 8010ef8:	24005f10 	.word	0x24005f10
 8010efc:	0802915c 	.word	0x0802915c
 8010f00:	30040200 	.word	0x30040200
 8010f04:	24000410 	.word	0x24000410
 8010f08:	24005e68 	.word	0x24005e68

08010f0c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8010f0c:	b580      	push	{r7, lr}
 8010f0e:	b092      	sub	sp, #72	; 0x48
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	6078      	str	r0, [r7, #4]
 8010f14:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 8010f16:	2300      	movs	r3, #0
 8010f18:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8010f20:	f107 030c 	add.w	r3, r7, #12
 8010f24:	2230      	movs	r2, #48	; 0x30
 8010f26:	2100      	movs	r1, #0
 8010f28:	4618      	mov	r0, r3
 8010f2a:	f00e ff25 	bl	801fd78 <memset>

  for(q = p; q != NULL; q = q->next)
 8010f2e:	683b      	ldr	r3, [r7, #0]
 8010f30:	643b      	str	r3, [r7, #64]	; 0x40
 8010f32:	e049      	b.n	8010fc8 <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 8010f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f36:	2b03      	cmp	r3, #3
 8010f38:	d902      	bls.n	8010f40 <low_level_output+0x34>
      return ERR_IF;
 8010f3a:	f06f 030b 	mvn.w	r3, #11
 8010f3e:	e056      	b.n	8010fee <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 8010f40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f42:	6859      	ldr	r1, [r3, #4]
 8010f44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010f46:	4613      	mov	r3, r2
 8010f48:	005b      	lsls	r3, r3, #1
 8010f4a:	4413      	add	r3, r2
 8010f4c:	009b      	lsls	r3, r3, #2
 8010f4e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8010f52:	4413      	add	r3, r2
 8010f54:	3b3c      	subs	r3, #60	; 0x3c
 8010f56:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8010f58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f5a:	895b      	ldrh	r3, [r3, #10]
 8010f5c:	4619      	mov	r1, r3
 8010f5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010f60:	4613      	mov	r3, r2
 8010f62:	005b      	lsls	r3, r3, #1
 8010f64:	4413      	add	r3, r2
 8010f66:	009b      	lsls	r3, r3, #2
 8010f68:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8010f6c:	4413      	add	r3, r2
 8010f6e:	3b38      	subs	r3, #56	; 0x38
 8010f70:	6019      	str	r1, [r3, #0]

    if(i>0)
 8010f72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d012      	beq.n	8010f9e <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8010f78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f7a:	1e5a      	subs	r2, r3, #1
 8010f7c:	f107 000c 	add.w	r0, r7, #12
 8010f80:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010f82:	460b      	mov	r3, r1
 8010f84:	005b      	lsls	r3, r3, #1
 8010f86:	440b      	add	r3, r1
 8010f88:	009b      	lsls	r3, r3, #2
 8010f8a:	18c1      	adds	r1, r0, r3
 8010f8c:	4613      	mov	r3, r2
 8010f8e:	005b      	lsls	r3, r3, #1
 8010f90:	4413      	add	r3, r2
 8010f92:	009b      	lsls	r3, r3, #2
 8010f94:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8010f98:	4413      	add	r3, r2
 8010f9a:	3b34      	subs	r3, #52	; 0x34
 8010f9c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8010f9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d10a      	bne.n	8010fbc <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 8010fa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010fa8:	4613      	mov	r3, r2
 8010faa:	005b      	lsls	r3, r3, #1
 8010fac:	4413      	add	r3, r2
 8010fae:	009b      	lsls	r3, r3, #2
 8010fb0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8010fb4:	4413      	add	r3, r2
 8010fb6:	3b34      	subs	r3, #52	; 0x34
 8010fb8:	2200      	movs	r2, #0
 8010fba:	601a      	str	r2, [r3, #0]
    }

    i++;
 8010fbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010fbe:	3301      	adds	r3, #1
 8010fc0:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8010fc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	643b      	str	r3, [r7, #64]	; 0x40
 8010fc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d1b2      	bne.n	8010f34 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 8010fce:	683b      	ldr	r3, [r7, #0]
 8010fd0:	891b      	ldrh	r3, [r3, #8]
 8010fd2:	461a      	mov	r2, r3
 8010fd4:	4b08      	ldr	r3, [pc, #32]	; (8010ff8 <low_level_output+0xec>)
 8010fd6:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8010fd8:	4a07      	ldr	r2, [pc, #28]	; (8010ff8 <low_level_output+0xec>)
 8010fda:	f107 030c 	add.w	r3, r7, #12
 8010fde:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8010fe0:	2214      	movs	r2, #20
 8010fe2:	4905      	ldr	r1, [pc, #20]	; (8010ff8 <low_level_output+0xec>)
 8010fe4:	4805      	ldr	r0, [pc, #20]	; (8010ffc <low_level_output+0xf0>)
 8010fe6:	f7f6 fe44 	bl	8007c72 <HAL_ETH_Transmit>

  return errval;
 8010fea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8010fee:	4618      	mov	r0, r3
 8010ff0:	3748      	adds	r7, #72	; 0x48
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	bd80      	pop	{r7, pc}
 8010ff6:	bf00      	nop
 8010ff8:	24005f10 	.word	0x24005f10
 8010ffc:	24005e88 	.word	0x24005e88

08011000 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8011000:	b580      	push	{r7, lr}
 8011002:	b098      	sub	sp, #96	; 0x60
 8011004:	af02      	add	r7, sp, #8
 8011006:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8011008:	2300      	movs	r3, #0
 801100a:	653b      	str	r3, [r7, #80]	; 0x50
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 801100c:	2300      	movs	r3, #0
 801100e:	60bb      	str	r3, [r7, #8]
 8011010:	2300      	movs	r3, #0
 8011012:	657b      	str	r3, [r7, #84]	; 0x54
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8011014:	f107 030c 	add.w	r3, r7, #12
 8011018:	2230      	movs	r2, #48	; 0x30
 801101a:	2100      	movs	r1, #0
 801101c:	4618      	mov	r0, r3
 801101e:	f00e feab 	bl	801fd78 <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 8011022:	2300      	movs	r3, #0
 8011024:	657b      	str	r3, [r7, #84]	; 0x54
 8011026:	e015      	b.n	8011054 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 8011028:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801102a:	1c5a      	adds	r2, r3, #1
 801102c:	f107 010c 	add.w	r1, r7, #12
 8011030:	4613      	mov	r3, r2
 8011032:	005b      	lsls	r3, r3, #1
 8011034:	4413      	add	r3, r2
 8011036:	009b      	lsls	r3, r3, #2
 8011038:	4419      	add	r1, r3
 801103a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801103c:	4613      	mov	r3, r2
 801103e:	005b      	lsls	r3, r3, #1
 8011040:	4413      	add	r3, r2
 8011042:	009b      	lsls	r3, r3, #2
 8011044:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011048:	4413      	add	r3, r2
 801104a:	3b44      	subs	r3, #68	; 0x44
 801104c:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 801104e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011050:	3301      	adds	r3, #1
 8011052:	657b      	str	r3, [r7, #84]	; 0x54
 8011054:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011056:	2b02      	cmp	r3, #2
 8011058:	d9e6      	bls.n	8011028 <low_level_input+0x28>
  }

  if (HAL_ETH_IsRxDataAvailable(&heth))
 801105a:	482b      	ldr	r0, [pc, #172]	; (8011108 <low_level_input+0x108>)
 801105c:	f7f6 fe92 	bl	8007d84 <HAL_ETH_IsRxDataAvailable>
 8011060:	4603      	mov	r3, r0
 8011062:	2b00      	cmp	r3, #0
 8011064:	d04a      	beq.n	80110fc <low_level_input+0xfc>
  {
    HAL_ETH_GetRxDataBuffer(&heth, RxBuff);
 8011066:	f107 030c 	add.w	r3, r7, #12
 801106a:	4619      	mov	r1, r3
 801106c:	4826      	ldr	r0, [pc, #152]	; (8011108 <low_level_input+0x108>)
 801106e:	f7f6 ff79 	bl	8007f64 <HAL_ETH_GetRxDataBuffer>
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 8011072:	f107 0308 	add.w	r3, r7, #8
 8011076:	4619      	mov	r1, r3
 8011078:	4823      	ldr	r0, [pc, #140]	; (8011108 <low_level_input+0x108>)
 801107a:	f7f7 f811 	bl	80080a0 <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 801107e:	4822      	ldr	r0, [pc, #136]	; (8011108 <low_level_input+0x108>)
 8011080:	f7f7 f841 	bl	8008106 <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	68ba      	ldr	r2, [r7, #8]
 8011088:	64bb      	str	r3, [r7, #72]	; 0x48
 801108a:	647a      	str	r2, [r7, #68]	; 0x44
    if ( dsize > 0 ) { 
 801108c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801108e:	2b00      	cmp	r3, #0
 8011090:	dd1d      	ble.n	80110ce <low_level_input+0xce>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8011092:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011094:	f003 021f 	and.w	r2, r3, #31
 8011098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801109a:	4413      	add	r3, r2
 801109c:	643b      	str	r3, [r7, #64]	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 801109e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80110a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 80110a2:	f3bf 8f4f 	dsb	sy
}
 80110a6:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80110a8:	4a18      	ldr	r2, [pc, #96]	; (801110c <low_level_input+0x10c>)
 80110aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110ac:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80110b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110b2:	3320      	adds	r3, #32
 80110b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80110b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110b8:	3b20      	subs	r3, #32
 80110ba:	643b      	str	r3, [r7, #64]	; 0x40
      } while ( op_size > 0 );
 80110bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110be:	2b00      	cmp	r3, #0
 80110c0:	dcf2      	bgt.n	80110a8 <low_level_input+0xa8>
  __ASM volatile ("dsb 0xF":::"memory");
 80110c2:	f3bf 8f4f 	dsb	sy
}
 80110c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80110c8:	f3bf 8f6f 	isb	sy
}
 80110cc:	bf00      	nop
}
 80110ce:	bf00      	nop
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 80110d0:	480f      	ldr	r0, [pc, #60]	; (8011110 <low_level_input+0x110>)
 80110d2:	f003 fe31 	bl	8014d38 <memp_malloc_pool>
 80110d6:	64f8      	str	r0, [r7, #76]	; 0x4c
    custom_pbuf->custom_free_function = pbuf_free_custom;
 80110d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110da:	4a0e      	ldr	r2, [pc, #56]	; (8011114 <low_level_input+0x114>)
 80110dc:	611a      	str	r2, [r3, #16]

    p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 80110de:	68bb      	ldr	r3, [r7, #8]
 80110e0:	b299      	uxth	r1, r3
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	68ba      	ldr	r2, [r7, #8]
 80110e6:	b292      	uxth	r2, r2
 80110e8:	9201      	str	r2, [sp, #4]
 80110ea:	9300      	str	r3, [sp, #0]
 80110ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110ee:	2241      	movs	r2, #65	; 0x41
 80110f0:	2000      	movs	r0, #0
 80110f2:	f004 fb6f 	bl	80157d4 <pbuf_alloced_custom>
 80110f6:	6538      	str	r0, [r7, #80]	; 0x50

    return p;
 80110f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110fa:	e000      	b.n	80110fe <low_level_input+0xfe>
  }
  else
  {
    return NULL;
 80110fc:	2300      	movs	r3, #0
  }
}
 80110fe:	4618      	mov	r0, r3
 8011100:	3758      	adds	r7, #88	; 0x58
 8011102:	46bd      	mov	sp, r7
 8011104:	bd80      	pop	{r7, pc}
 8011106:	bf00      	nop
 8011108:	24005e88 	.word	0x24005e88
 801110c:	e000ed00 	.word	0xe000ed00
 8011110:	0802915c 	.word	0x0802915c
 8011114:	080111b5 	.word	0x080111b5

08011118 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8011118:	b580      	push	{r7, lr}
 801111a:	b084      	sub	sp, #16
 801111c:	af00      	add	r7, sp, #0
 801111e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8011120:	6878      	ldr	r0, [r7, #4]
 8011122:	f7ff ff6d 	bl	8011000 <low_level_input>
 8011126:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d010      	beq.n	8011150 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	691b      	ldr	r3, [r3, #16]
 8011132:	6879      	ldr	r1, [r7, #4]
 8011134:	68f8      	ldr	r0, [r7, #12]
 8011136:	4798      	blx	r3
 8011138:	4603      	mov	r3, r0
 801113a:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 801113c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d006      	beq.n	8011152 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8011144:	68f8      	ldr	r0, [r7, #12]
 8011146:	f004 fcff 	bl	8015b48 <pbuf_free>
    p = NULL;
 801114a:	2300      	movs	r3, #0
 801114c:	60fb      	str	r3, [r7, #12]
 801114e:	e000      	b.n	8011152 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8011150:	bf00      	nop
  }

}
 8011152:	3710      	adds	r7, #16
 8011154:	46bd      	mov	sp, r7
 8011156:	bd80      	pop	{r7, pc}

08011158 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8011158:	b580      	push	{r7, lr}
 801115a:	b082      	sub	sp, #8
 801115c:	af00      	add	r7, sp, #0
 801115e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d106      	bne.n	8011174 <ethernetif_init+0x1c>
 8011166:	4b0e      	ldr	r3, [pc, #56]	; (80111a0 <ethernetif_init+0x48>)
 8011168:	f240 12f3 	movw	r2, #499	; 0x1f3
 801116c:	490d      	ldr	r1, [pc, #52]	; (80111a4 <ethernetif_init+0x4c>)
 801116e:	480e      	ldr	r0, [pc, #56]	; (80111a8 <ethernetif_init+0x50>)
 8011170:	f00f fcfc 	bl	8020b6c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	2273      	movs	r2, #115	; 0x73
 8011178:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	2274      	movs	r2, #116	; 0x74
 8011180:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	4a09      	ldr	r2, [pc, #36]	; (80111ac <ethernetif_init+0x54>)
 8011188:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	4a08      	ldr	r2, [pc, #32]	; (80111b0 <ethernetif_init+0x58>)
 801118e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8011190:	6878      	ldr	r0, [r7, #4]
 8011192:	f7ff fe0b 	bl	8010dac <low_level_init>

  return ERR_OK;
 8011196:	2300      	movs	r3, #0
}
 8011198:	4618      	mov	r0, r3
 801119a:	3708      	adds	r7, #8
 801119c:	46bd      	mov	sp, r7
 801119e:	bd80      	pop	{r7, pc}
 80111a0:	08025e10 	.word	0x08025e10
 80111a4:	08025e2c 	.word	0x08025e2c
 80111a8:	08025e3c 	.word	0x08025e3c
 80111ac:	08012645 	.word	0x08012645
 80111b0:	08010f0d 	.word	0x08010f0d

080111b4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b084      	sub	sp, #16
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80111c0:	68f9      	ldr	r1, [r7, #12]
 80111c2:	4803      	ldr	r0, [pc, #12]	; (80111d0 <pbuf_free_custom+0x1c>)
 80111c4:	f003 fe26 	bl	8014e14 <memp_free_pool>
}
 80111c8:	bf00      	nop
 80111ca:	3710      	adds	r7, #16
 80111cc:	46bd      	mov	sp, r7
 80111ce:	bd80      	pop	{r7, pc}
 80111d0:	0802915c 	.word	0x0802915c

080111d4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80111d8:	f7f2 ff12 	bl	8004000 <HAL_GetTick>
 80111dc:	4603      	mov	r3, r0
}
 80111de:	4618      	mov	r0, r3
 80111e0:	bd80      	pop	{r7, pc}
	...

080111e4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80111e4:	b580      	push	{r7, lr}
 80111e6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80111e8:	4802      	ldr	r0, [pc, #8]	; (80111f4 <ETH_PHY_IO_Init+0x10>)
 80111ea:	f7f7 fbe1 	bl	80089b0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80111ee:	2300      	movs	r3, #0
}
 80111f0:	4618      	mov	r0, r3
 80111f2:	bd80      	pop	{r7, pc}
 80111f4:	24005e88 	.word	0x24005e88

080111f8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80111f8:	b480      	push	{r7}
 80111fa:	af00      	add	r7, sp, #0
  return 0;
 80111fc:	2300      	movs	r3, #0
}
 80111fe:	4618      	mov	r0, r3
 8011200:	46bd      	mov	sp, r7
 8011202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011206:	4770      	bx	lr

08011208 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8011208:	b580      	push	{r7, lr}
 801120a:	b084      	sub	sp, #16
 801120c:	af00      	add	r7, sp, #0
 801120e:	60f8      	str	r0, [r7, #12]
 8011210:	60b9      	str	r1, [r7, #8]
 8011212:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	68ba      	ldr	r2, [r7, #8]
 8011218:	68f9      	ldr	r1, [r7, #12]
 801121a:	4807      	ldr	r0, [pc, #28]	; (8011238 <ETH_PHY_IO_ReadReg+0x30>)
 801121c:	f7f7 f932 	bl	8008484 <HAL_ETH_ReadPHYRegister>
 8011220:	4603      	mov	r3, r0
 8011222:	2b00      	cmp	r3, #0
 8011224:	d002      	beq.n	801122c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8011226:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801122a:	e000      	b.n	801122e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 801122c:	2300      	movs	r3, #0
}
 801122e:	4618      	mov	r0, r3
 8011230:	3710      	adds	r7, #16
 8011232:	46bd      	mov	sp, r7
 8011234:	bd80      	pop	{r7, pc}
 8011236:	bf00      	nop
 8011238:	24005e88 	.word	0x24005e88

0801123c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 801123c:	b580      	push	{r7, lr}
 801123e:	b084      	sub	sp, #16
 8011240:	af00      	add	r7, sp, #0
 8011242:	60f8      	str	r0, [r7, #12]
 8011244:	60b9      	str	r1, [r7, #8]
 8011246:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	68ba      	ldr	r2, [r7, #8]
 801124c:	68f9      	ldr	r1, [r7, #12]
 801124e:	4807      	ldr	r0, [pc, #28]	; (801126c <ETH_PHY_IO_WriteReg+0x30>)
 8011250:	f7f7 f96c 	bl	800852c <HAL_ETH_WritePHYRegister>
 8011254:	4603      	mov	r3, r0
 8011256:	2b00      	cmp	r3, #0
 8011258:	d002      	beq.n	8011260 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 801125a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801125e:	e000      	b.n	8011262 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8011260:	2300      	movs	r3, #0
}
 8011262:	4618      	mov	r0, r3
 8011264:	3710      	adds	r7, #16
 8011266:	46bd      	mov	sp, r7
 8011268:	bd80      	pop	{r7, pc}
 801126a:	bf00      	nop
 801126c:	24005e88 	.word	0x24005e88

08011270 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8011270:	b580      	push	{r7, lr}
 8011272:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8011274:	f7f2 fec4 	bl	8004000 <HAL_GetTick>
 8011278:	4603      	mov	r3, r0
}
 801127a:	4618      	mov	r0, r3
 801127c:	bd80      	pop	{r7, pc}
	...

08011280 <ethernet_link_check_state>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8011280:	b580      	push	{r7, lr}
 8011282:	b0a0      	sub	sp, #128	; 0x80
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 8011288:	2300      	movs	r3, #0
 801128a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801128c:	2300      	movs	r3, #0
 801128e:	67bb      	str	r3, [r7, #120]	; 0x78
 8011290:	2300      	movs	r3, #0
 8011292:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8011294:	483a      	ldr	r0, [pc, #232]	; (8011380 <ethernet_link_check_state+0x100>)
 8011296:	f7f2 fda5 	bl	8003de4 <LAN8742_GetLinkState>
 801129a:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80112a2:	089b      	lsrs	r3, r3, #2
 80112a4:	f003 0301 	and.w	r3, r3, #1
 80112a8:	b2db      	uxtb	r3, r3
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d00c      	beq.n	80112c8 <ethernet_link_check_state+0x48>
 80112ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80112b0:	2b01      	cmp	r3, #1
 80112b2:	dc09      	bgt.n	80112c8 <ethernet_link_check_state+0x48>
  {
    HAL_ETH_Stop(&heth);
 80112b4:	4833      	ldr	r0, [pc, #204]	; (8011384 <ethernet_link_check_state+0x104>)
 80112b6:	f7f6 fc8c 	bl	8007bd2 <HAL_ETH_Stop>
    netif_set_down(netif);
 80112ba:	6878      	ldr	r0, [r7, #4]
 80112bc:	f004 f82e 	bl	801531c <netif_set_down>
    netif_set_link_down(netif);
 80112c0:	6878      	ldr	r0, [r7, #4]
 80112c2:	f004 f891 	bl	80153e8 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80112c6:	e056      	b.n	8011376 <ethernet_link_check_state+0xf6>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80112ce:	f003 0304 	and.w	r3, r3, #4
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d14f      	bne.n	8011376 <ethernet_link_check_state+0xf6>
 80112d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80112d8:	2b01      	cmp	r3, #1
 80112da:	dd4c      	ble.n	8011376 <ethernet_link_check_state+0xf6>
 80112dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80112de:	3b02      	subs	r3, #2
 80112e0:	2b03      	cmp	r3, #3
 80112e2:	d82b      	bhi.n	801133c <ethernet_link_check_state+0xbc>
 80112e4:	a201      	add	r2, pc, #4	; (adr r2, 80112ec <ethernet_link_check_state+0x6c>)
 80112e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112ea:	bf00      	nop
 80112ec:	080112fd 	.word	0x080112fd
 80112f0:	0801130f 	.word	0x0801130f
 80112f4:	0801131f 	.word	0x0801131f
 80112f8:	0801132f 	.word	0x0801132f
      duplex = ETH_FULLDUPLEX_MODE;
 80112fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011300:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8011302:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011306:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8011308:	2301      	movs	r3, #1
 801130a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801130c:	e017      	b.n	801133e <ethernet_link_check_state+0xbe>
      duplex = ETH_HALFDUPLEX_MODE;
 801130e:	2300      	movs	r3, #0
 8011310:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8011312:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011316:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8011318:	2301      	movs	r3, #1
 801131a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801131c:	e00f      	b.n	801133e <ethernet_link_check_state+0xbe>
      duplex = ETH_FULLDUPLEX_MODE;
 801131e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011322:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8011324:	2300      	movs	r3, #0
 8011326:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8011328:	2301      	movs	r3, #1
 801132a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801132c:	e007      	b.n	801133e <ethernet_link_check_state+0xbe>
      duplex = ETH_HALFDUPLEX_MODE;
 801132e:	2300      	movs	r3, #0
 8011330:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8011332:	2300      	movs	r3, #0
 8011334:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8011336:	2301      	movs	r3, #1
 8011338:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801133a:	e000      	b.n	801133e <ethernet_link_check_state+0xbe>
      break;
 801133c:	bf00      	nop
    if(linkchanged)
 801133e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011340:	2b00      	cmp	r3, #0
 8011342:	d018      	beq.n	8011376 <ethernet_link_check_state+0xf6>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8011344:	f107 030c 	add.w	r3, r7, #12
 8011348:	4619      	mov	r1, r3
 801134a:	480e      	ldr	r0, [pc, #56]	; (8011384 <ethernet_link_check_state+0x104>)
 801134c:	f7f7 f942 	bl	80085d4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8011350:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011352:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8011354:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011356:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8011358:	f107 030c 	add.w	r3, r7, #12
 801135c:	4619      	mov	r1, r3
 801135e:	4809      	ldr	r0, [pc, #36]	; (8011384 <ethernet_link_check_state+0x104>)
 8011360:	f7f7 fb0c 	bl	800897c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8011364:	4807      	ldr	r0, [pc, #28]	; (8011384 <ethernet_link_check_state+0x104>)
 8011366:	f7f6 fbd8 	bl	8007b1a <HAL_ETH_Start>
      netif_set_up(netif);
 801136a:	6878      	ldr	r0, [r7, #4]
 801136c:	f003 ff6a 	bl	8015244 <netif_set_up>
      netif_set_link_up(netif);
 8011370:	6878      	ldr	r0, [r7, #4]
 8011372:	f004 f805 	bl	8015380 <netif_set_link_up>
}
 8011376:	bf00      	nop
 8011378:	3780      	adds	r7, #128	; 0x80
 801137a:	46bd      	mov	sp, r7
 801137c:	bd80      	pop	{r7, pc}
 801137e:	bf00      	nop
 8011380:	24005e68 	.word	0x24005e68
 8011384:	24005e88 	.word	0x24005e88

08011388 <synth_IfftInit>:
 * @brief  synth ifft init.
 * @param
 * @retval Error
 */
int32_t synth_IfftInit(void)
{
 8011388:	b590      	push	{r4, r7, lr}
 801138a:	ed2d 8b02 	vpush	{d8}
 801138e:	b0c7      	sub	sp, #284	; 0x11c
 8011390:	af02      	add	r7, sp, #8
	int32_t buffer_len = 0;
 8011392:	2300      	movs	r3, #0
 8011394:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	uint32_t aRandom32bit = 0;
 8011398:	2300      	movs	r3, #0
 801139a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	uint8_t FreqStr[256] = {0};
 801139e:	1d3b      	adds	r3, r7, #4
 80113a0:	2200      	movs	r2, #0
 80113a2:	601a      	str	r2, [r3, #0]
 80113a4:	3304      	adds	r3, #4
 80113a6:	22fc      	movs	r2, #252	; 0xfc
 80113a8:	2100      	movs	r1, #0
 80113aa:	4618      	mov	r0, r3
 80113ac:	f00e fce4 	bl	801fd78 <memset>

	//allocate the contiguous memory area for storage image data
	imageData = malloc(cis_GetEffectivePixelNb() * sizeof(uint16_t*));
 80113b0:	f00b fd3a 	bl	801ce28 <cis_GetEffectivePixelNb>
 80113b4:	4603      	mov	r3, r0
 80113b6:	009b      	lsls	r3, r3, #2
 80113b8:	4618      	mov	r0, r3
 80113ba:	f00e fc9f 	bl	801fcfc <malloc>
 80113be:	4603      	mov	r3, r0
 80113c0:	461a      	mov	r2, r3
 80113c2:	4b6f      	ldr	r3, [pc, #444]	; (8011580 <synth_IfftInit+0x1f8>)
 80113c4:	601a      	str	r2, [r3, #0]
	if (imageData == NULL)
 80113c6:	4b6e      	ldr	r3, [pc, #440]	; (8011580 <synth_IfftInit+0x1f8>)
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d101      	bne.n	80113d2 <synth_IfftInit+0x4a>
	{
		Error_Handler();
 80113ce:	f7f1 fc31 	bl	8002c34 <Error_Handler>
	}

	memset(imageData, 0, cis_GetEffectivePixelNb() * sizeof(uint16_t*));
 80113d2:	4b6b      	ldr	r3, [pc, #428]	; (8011580 <synth_IfftInit+0x1f8>)
 80113d4:	681c      	ldr	r4, [r3, #0]
 80113d6:	f00b fd27 	bl	801ce28 <cis_GetEffectivePixelNb>
 80113da:	4603      	mov	r3, r0
 80113dc:	009b      	lsls	r3, r3, #2
 80113de:	461a      	mov	r2, r3
 80113e0:	2100      	movs	r1, #0
 80113e2:	4620      	mov	r0, r4
 80113e4:	f00e fcc8 	bl	801fd78 <memset>

	buffer_len = init_waves(&unitary_waveform, waves);
 80113e8:	4966      	ldr	r1, [pc, #408]	; (8011584 <synth_IfftInit+0x1fc>)
 80113ea:	4867      	ldr	r0, [pc, #412]	; (8011588 <synth_IfftInit+0x200>)
 80113ec:	f000 fb94 	bl	8011b18 <init_waves>
 80113f0:	4603      	mov	r3, r0
 80113f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	// start with random index
	for (uint32_t i = 0; i < NUMBER_OF_NOTES; i++)
 80113f6:	2300      	movs	r3, #0
 80113f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80113fc:	e037      	b.n	801146e <synth_IfftInit+0xe6>
	{
		if (HAL_RNG_GenerateRandomNumber(&hrng, &aRandom32bit) != HAL_OK)
 80113fe:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8011402:	4619      	mov	r1, r3
 8011404:	4861      	ldr	r0, [pc, #388]	; (801158c <synth_IfftInit+0x204>)
 8011406:	f7fb fcf2 	bl	800cdee <HAL_RNG_GenerateRandomNumber>
 801140a:	4603      	mov	r3, r0
 801140c:	2b00      	cmp	r3, #0
 801140e:	d001      	beq.n	8011414 <synth_IfftInit+0x8c>
		{
			/* Random number generation error */
			Error_Handler();
 8011410:	f7f1 fc10 	bl	8002c34 <Error_Handler>
		}
		waves[i].current_idx = aRandom32bit % waves[i].aera_size;
 8011414:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8011418:	485a      	ldr	r0, [pc, #360]	; (8011584 <synth_IfftInit+0x1fc>)
 801141a:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 801141e:	460b      	mov	r3, r1
 8011420:	009b      	lsls	r3, r3, #2
 8011422:	440b      	add	r3, r1
 8011424:	009b      	lsls	r3, r3, #2
 8011426:	4403      	add	r3, r0
 8011428:	3306      	adds	r3, #6
 801142a:	881b      	ldrh	r3, [r3, #0]
 801142c:	fbb2 f1f3 	udiv	r1, r2, r3
 8011430:	fb03 f301 	mul.w	r3, r3, r1
 8011434:	1ad3      	subs	r3, r2, r3
 8011436:	b298      	uxth	r0, r3
 8011438:	4952      	ldr	r1, [pc, #328]	; (8011584 <synth_IfftInit+0x1fc>)
 801143a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801143e:	4613      	mov	r3, r2
 8011440:	009b      	lsls	r3, r3, #2
 8011442:	4413      	add	r3, r2
 8011444:	009b      	lsls	r3, r3, #2
 8011446:	440b      	add	r3, r1
 8011448:	3304      	adds	r3, #4
 801144a:	4602      	mov	r2, r0
 801144c:	801a      	strh	r2, [r3, #0]
		waves[i].current_volume = 0;
 801144e:	494d      	ldr	r1, [pc, #308]	; (8011584 <synth_IfftInit+0x1fc>)
 8011450:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8011454:	4613      	mov	r3, r2
 8011456:	009b      	lsls	r3, r3, #2
 8011458:	4413      	add	r3, r2
 801145a:	009b      	lsls	r3, r3, #2
 801145c:	440b      	add	r3, r1
 801145e:	330c      	adds	r3, #12
 8011460:	2200      	movs	r2, #0
 8011462:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < NUMBER_OF_NOTES; i++)
 8011464:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8011468:	3301      	adds	r3, #1
 801146a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801146e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8011472:	2b98      	cmp	r3, #152	; 0x98
 8011474:	d9c3      	bls.n	80113fe <synth_IfftInit+0x76>
	}

	if (buffer_len < 0)
 8011476:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801147a:	2b00      	cmp	r3, #0
 801147c:	da05      	bge.n	801148a <synth_IfftInit+0x102>
	{
		printf("RAM overflow");
 801147e:	4844      	ldr	r0, [pc, #272]	; (8011590 <synth_IfftInit+0x208>)
 8011480:	f00f fb74 	bl	8020b6c <iprintf>
		return -1;
 8011484:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011488:	e073      	b.n	8011572 <synth_IfftInit+0x1ea>
	}

	printf("Buffer lengh = %d\n", (int)buffer_len);
 801148a:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 801148e:	4841      	ldr	r0, [pc, #260]	; (8011594 <synth_IfftInit+0x20c>)
 8011490:	f00f fb6c 	bl	8020b6c <iprintf>

#ifdef PRINT_FREQUENCY
	ssd1362_drawRect(0, 57, 256, 64, 5, false);
 8011494:	2300      	movs	r3, #0
 8011496:	9301      	str	r3, [sp, #4]
 8011498:	2305      	movs	r3, #5
 801149a:	9300      	str	r3, [sp, #0]
 801149c:	2340      	movs	r3, #64	; 0x40
 801149e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80114a2:	2139      	movs	r1, #57	; 0x39
 80114a4:	2000      	movs	r0, #0
 80114a6:	f00c fa79 	bl	801d99c <ssd1362_drawRect>
	sprintf((char *)FreqStr, "%dHz Sz%d Oc%d", (int)waves[0].frequency, (int)waves[0].aera_size, (int)waves[0].octave_coeff);
 80114aa:	4b36      	ldr	r3, [pc, #216]	; (8011584 <synth_IfftInit+0x1fc>)
 80114ac:	edd3 7a04 	vldr	s15, [r3, #16]
 80114b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80114b4:	4b33      	ldr	r3, [pc, #204]	; (8011584 <synth_IfftInit+0x1fc>)
 80114b6:	88db      	ldrh	r3, [r3, #6]
 80114b8:	461a      	mov	r2, r3
 80114ba:	4b32      	ldr	r3, [pc, #200]	; (8011584 <synth_IfftInit+0x1fc>)
 80114bc:	891b      	ldrh	r3, [r3, #8]
 80114be:	1d38      	adds	r0, r7, #4
 80114c0:	9300      	str	r3, [sp, #0]
 80114c2:	4613      	mov	r3, r2
 80114c4:	ee17 2a90 	vmov	r2, s15
 80114c8:	4933      	ldr	r1, [pc, #204]	; (8011598 <synth_IfftInit+0x210>)
 80114ca:	f00f fc33 	bl	8020d34 <siprintf>
	ssd1362_drawString(0, 57, (int8_t*)FreqStr, 0, 8);
 80114ce:	1d3a      	adds	r2, r7, #4
 80114d0:	2308      	movs	r3, #8
 80114d2:	9300      	str	r3, [sp, #0]
 80114d4:	2300      	movs	r3, #0
 80114d6:	2139      	movs	r1, #57	; 0x39
 80114d8:	2000      	movs	r0, #0
 80114da:	f00c fbc2 	bl	801dc62 <ssd1362_drawString>
	sprintf((char *)FreqStr, "%dHz Sz%d Oc%d", (int)waves[NUMBER_OF_NOTES - 1].frequency, (int)waves[NUMBER_OF_NOTES - 1].aera_size / (int)sqrt(waves[NUMBER_OF_NOTES - 1].octave_coeff), (int)sqrt(waves[NUMBER_OF_NOTES - 1].octave_coeff));
 80114de:	4b29      	ldr	r3, [pc, #164]	; (8011584 <synth_IfftInit+0x1fc>)
 80114e0:	f503 633f 	add.w	r3, r3, #3056	; 0xbf0
 80114e4:	edd3 7a00 	vldr	s15, [r3]
 80114e8:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 80114ec:	4b25      	ldr	r3, [pc, #148]	; (8011584 <synth_IfftInit+0x1fc>)
 80114ee:	f8b3 3be6 	ldrh.w	r3, [r3, #3046]	; 0xbe6
 80114f2:	461c      	mov	r4, r3
 80114f4:	4b23      	ldr	r3, [pc, #140]	; (8011584 <synth_IfftInit+0x1fc>)
 80114f6:	f8b3 3be8 	ldrh.w	r3, [r3, #3048]	; 0xbe8
 80114fa:	ee07 3a90 	vmov	s15, r3
 80114fe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011502:	eeb0 0b47 	vmov.f64	d0, d7
 8011506:	f013 fcf3 	bl	8024ef0 <sqrt>
 801150a:	eeb0 7b40 	vmov.f64	d7, d0
 801150e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8011512:	ee17 3a90 	vmov	r3, s15
 8011516:	fb94 f4f3 	sdiv	r4, r4, r3
 801151a:	4b1a      	ldr	r3, [pc, #104]	; (8011584 <synth_IfftInit+0x1fc>)
 801151c:	f8b3 3be8 	ldrh.w	r3, [r3, #3048]	; 0xbe8
 8011520:	ee07 3a90 	vmov	s15, r3
 8011524:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011528:	eeb0 0b47 	vmov.f64	d0, d7
 801152c:	f013 fce0 	bl	8024ef0 <sqrt>
 8011530:	eeb0 7b40 	vmov.f64	d7, d0
 8011534:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8011538:	ee17 3a90 	vmov	r3, s15
 801153c:	1d38      	adds	r0, r7, #4
 801153e:	9300      	str	r3, [sp, #0]
 8011540:	4623      	mov	r3, r4
 8011542:	ee18 2a10 	vmov	r2, s16
 8011546:	4914      	ldr	r1, [pc, #80]	; (8011598 <synth_IfftInit+0x210>)
 8011548:	f00f fbf4 	bl	8020d34 <siprintf>
	ssd1362_drawString(128, 57, (int8_t*)FreqStr, 0, 8);
 801154c:	1d3a      	adds	r2, r7, #4
 801154e:	2308      	movs	r3, #8
 8011550:	9300      	str	r3, [sp, #0]
 8011552:	2300      	movs	r3, #0
 8011554:	2139      	movs	r1, #57	; 0x39
 8011556:	2080      	movs	r0, #128	; 0x80
 8011558:	f00c fb83 	bl	801dc62 <ssd1362_drawString>
	ssd1362_writeFullBuffer();
 801155c:	f00c fc50 	bl	801de00 <ssd1362_writeFullBuffer>
	//		//				HAL_Delay(1);
	//	}
	//	printf("---- END ----");
#endif

	if (synth_AudioInit() == 0)
 8011560:	f000 f81c 	bl	801159c <synth_AudioInit>
 8011564:	4603      	mov	r3, r0
 8011566:	2b00      	cmp	r3, #0
 8011568:	d101      	bne.n	801156e <synth_IfftInit+0x1e6>
		return 0;
 801156a:	2300      	movs	r3, #0
 801156c:	e001      	b.n	8011572 <synth_IfftInit+0x1ea>
	else
		return -1;
 801156e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8011572:	4618      	mov	r0, r3
 8011574:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8011578:	46bd      	mov	sp, r7
 801157a:	ecbd 8b02 	vpop	{d8}
 801157e:	bd90      	pop	{r4, r7, pc}
 8011580:	24004654 	.word	0x24004654
 8011584:	24003a5c 	.word	0x24003a5c
 8011588:	24003a58 	.word	0x24003a58
 801158c:	24005990 	.word	0x24005990
 8011590:	08025e64 	.word	0x08025e64
 8011594:	08025e74 	.word	0x08025e74
 8011598:	08025e88 	.word	0x08025e88

0801159c <synth_AudioInit>:

int32_t synth_AudioInit(void)
{
 801159c:	b580      	push	{r7, lr}
 801159e:	af00      	add	r7, sp, #0
	bufferAudioState = AUDIO_BUFFER_OFFSET_NONE;
 80115a0:	4b06      	ldr	r3, [pc, #24]	; (80115bc <synth_AudioInit+0x20>)
 80115a2:	2200      	movs	r2, #0
 80115a4:	701a      	strb	r2, [r3, #0]
	HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t *)&audioBuff[0], AUDIO_BUFFER_SIZE);
 80115a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80115aa:	4905      	ldr	r1, [pc, #20]	; (80115c0 <synth_AudioInit+0x24>)
 80115ac:	4805      	ldr	r0, [pc, #20]	; (80115c4 <synth_AudioInit+0x28>)
 80115ae:	f7fb ff3f 	bl	800d430 <HAL_SAI_Transmit_DMA>

	return -1;
 80115b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80115b6:	4618      	mov	r0, r3
 80115b8:	bd80      	pop	{r7, pc}
 80115ba:	bf00      	nop
 80115bc:	24005f44 	.word	0x24005f44
 80115c0:	24004658 	.word	0x24004658
 80115c4:	24005a1c 	.word	0x24005a1c

080115c8 <synth_GetAudioData>:
 * @brief  Get RFFT buffer data
 * @param  Index
 * @retval Value
 */
int16_t synth_GetAudioData(uint32_t index)
{
 80115c8:	b480      	push	{r7}
 80115ca:	b083      	sub	sp, #12
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	6078      	str	r0, [r7, #4]
	//	if (index >= RFFT_BUFFER_SIZE)
	//		Error_Handler();
	return audioBuff[index];
 80115d0:	4a04      	ldr	r2, [pc, #16]	; (80115e4 <synth_GetAudioData+0x1c>)
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
}
 80115d8:	4618      	mov	r0, r3
 80115da:	370c      	adds	r7, #12
 80115dc:	46bd      	mov	sp, r7
 80115de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e2:	4770      	bx	lr
 80115e4:	24004658 	.word	0x24004658

080115e8 <synth_SetImageData>:
 * @brief  Set Image buffer data
 * @param  Index
 * @retval Value
 */
int32_t synth_SetImageData(uint32_t index, uint16_t value)
{
 80115e8:	b480      	push	{r7}
 80115ea:	b083      	sub	sp, #12
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	6078      	str	r0, [r7, #4]
 80115f0:	460b      	mov	r3, r1
 80115f2:	807b      	strh	r3, [r7, #2]
	//	if (index >= RFFT_BUFFER_SIZE)
	//		Error_Handler();
	imageData[index] = value;
 80115f4:	4b06      	ldr	r3, [pc, #24]	; (8011610 <synth_SetImageData+0x28>)
 80115f6:	681a      	ldr	r2, [r3, #0]
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	005b      	lsls	r3, r3, #1
 80115fc:	4413      	add	r3, r2
 80115fe:	887a      	ldrh	r2, [r7, #2]
 8011600:	801a      	strh	r2, [r3, #0]
	return 0;
 8011602:	2300      	movs	r3, #0
}
 8011604:	4618      	mov	r0, r3
 8011606:	370c      	adds	r7, #12
 8011608:	46bd      	mov	sp, r7
 801160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801160e:	4770      	bx	lr
 8011610:	24004654 	.word	0x24004654

08011614 <synth_IfftMode>:
 * @retval None
 */
#pragma GCC push_options
#pragma GCC optimize ("unroll-loops")
void synth_IfftMode(uint16_t *imageData, int16_t *audioData, uint32_t NbrOfData)
{
 8011614:	b480      	push	{r7}
 8011616:	b087      	sub	sp, #28
 8011618:	af00      	add	r7, sp, #0
 801161a:	60f8      	str	r0, [r7, #12]
 801161c:	60b9      	str	r1, [r7, #8]
 801161e:	607a      	str	r2, [r7, #4]
	static uint16_t new_idx;
	static uint32_t write_data_nbr;
	static int32_t max_volume;
	static int32_t current_image_data;

	write_data_nbr = 0;
 8011620:	4b50      	ldr	r3, [pc, #320]	; (8011764 <synth_IfftMode+0x150>)
 8011622:	2200      	movs	r2, #0
 8011624:	601a      	str	r2, [r3, #0]

	while(write_data_nbr < NbrOfData)
 8011626:	e164      	b.n	80118f2 <synth_IfftMode+0x2de>
	{
		signal_summation = 0;
 8011628:	4b4f      	ldr	r3, [pc, #316]	; (8011768 <synth_IfftMode+0x154>)
 801162a:	2200      	movs	r2, #0
 801162c:	601a      	str	r2, [r3, #0]
		signal_power_summation = 0;
 801162e:	4b4f      	ldr	r3, [pc, #316]	; (801176c <synth_IfftMode+0x158>)
 8011630:	2200      	movs	r2, #0
 8011632:	601a      	str	r2, [r3, #0]
		max_volume = 0;
 8011634:	4b4e      	ldr	r3, [pc, #312]	; (8011770 <synth_IfftMode+0x15c>)
 8011636:	2200      	movs	r2, #0
 8011638:	601a      	str	r2, [r3, #0]

		//Summation for all pixel
		for (int32_t note = NUMBER_OF_NOTES; --note >= 1;)
 801163a:	2399      	movs	r3, #153	; 0x99
 801163c:	617b      	str	r3, [r7, #20]
 801163e:	e11e      	b.n	801187e <synth_IfftMode+0x26a>
		{
			//octave_coeff jump current pointer into the fundamental waveform, for example : the 3th octave increment the current pointer 8 per 8 (2^3)
			//example for 17 cell waveform and 3th octave : [X][Y][Z][X][Y][Z][X][Y][Z][X][Y][[Z][X][Y][[Z][X][Y], X for the first pass, Y for second etc...
			new_idx = (waves[note].current_idx + waves[note].octave_coeff);
 8011640:	494c      	ldr	r1, [pc, #304]	; (8011774 <synth_IfftMode+0x160>)
 8011642:	697a      	ldr	r2, [r7, #20]
 8011644:	4613      	mov	r3, r2
 8011646:	009b      	lsls	r3, r3, #2
 8011648:	4413      	add	r3, r2
 801164a:	009b      	lsls	r3, r3, #2
 801164c:	440b      	add	r3, r1
 801164e:	3304      	adds	r3, #4
 8011650:	8819      	ldrh	r1, [r3, #0]
 8011652:	4848      	ldr	r0, [pc, #288]	; (8011774 <synth_IfftMode+0x160>)
 8011654:	697a      	ldr	r2, [r7, #20]
 8011656:	4613      	mov	r3, r2
 8011658:	009b      	lsls	r3, r3, #2
 801165a:	4413      	add	r3, r2
 801165c:	009b      	lsls	r3, r3, #2
 801165e:	4403      	add	r3, r0
 8011660:	3308      	adds	r3, #8
 8011662:	881b      	ldrh	r3, [r3, #0]
 8011664:	440b      	add	r3, r1
 8011666:	b29a      	uxth	r2, r3
 8011668:	4b43      	ldr	r3, [pc, #268]	; (8011778 <synth_IfftMode+0x164>)
 801166a:	801a      	strh	r2, [r3, #0]
			if (new_idx >= waves[note].aera_size)
 801166c:	4941      	ldr	r1, [pc, #260]	; (8011774 <synth_IfftMode+0x160>)
 801166e:	697a      	ldr	r2, [r7, #20]
 8011670:	4613      	mov	r3, r2
 8011672:	009b      	lsls	r3, r3, #2
 8011674:	4413      	add	r3, r2
 8011676:	009b      	lsls	r3, r3, #2
 8011678:	440b      	add	r3, r1
 801167a:	3306      	adds	r3, #6
 801167c:	881a      	ldrh	r2, [r3, #0]
 801167e:	4b3e      	ldr	r3, [pc, #248]	; (8011778 <synth_IfftMode+0x164>)
 8011680:	881b      	ldrh	r3, [r3, #0]
 8011682:	429a      	cmp	r2, r3
 8011684:	d80e      	bhi.n	80116a4 <synth_IfftMode+0x90>
				new_idx -= waves[note].aera_size;
 8011686:	4b3c      	ldr	r3, [pc, #240]	; (8011778 <synth_IfftMode+0x164>)
 8011688:	8819      	ldrh	r1, [r3, #0]
 801168a:	483a      	ldr	r0, [pc, #232]	; (8011774 <synth_IfftMode+0x160>)
 801168c:	697a      	ldr	r2, [r7, #20]
 801168e:	4613      	mov	r3, r2
 8011690:	009b      	lsls	r3, r3, #2
 8011692:	4413      	add	r3, r2
 8011694:	009b      	lsls	r3, r3, #2
 8011696:	4403      	add	r3, r0
 8011698:	3306      	adds	r3, #6
 801169a:	881b      	ldrh	r3, [r3, #0]
 801169c:	1acb      	subs	r3, r1, r3
 801169e:	b29a      	uxth	r2, r3
 80116a0:	4b35      	ldr	r3, [pc, #212]	; (8011778 <synth_IfftMode+0x164>)
 80116a2:	801a      	strh	r2, [r3, #0]

			if (imageData[note - 1] - imageData[note] > 0)
 80116a4:	697a      	ldr	r2, [r7, #20]
 80116a6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80116aa:	4413      	add	r3, r2
 80116ac:	005b      	lsls	r3, r3, #1
 80116ae:	68fa      	ldr	r2, [r7, #12]
 80116b0:	4413      	add	r3, r2
 80116b2:	881b      	ldrh	r3, [r3, #0]
 80116b4:	4619      	mov	r1, r3
 80116b6:	697b      	ldr	r3, [r7, #20]
 80116b8:	005b      	lsls	r3, r3, #1
 80116ba:	68fa      	ldr	r2, [r7, #12]
 80116bc:	4413      	add	r3, r2
 80116be:	881b      	ldrh	r3, [r3, #0]
 80116c0:	1acb      	subs	r3, r1, r3
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	dd11      	ble.n	80116ea <synth_IfftMode+0xd6>
				current_image_data = imageData[note - 1] - imageData[note];
 80116c6:	697a      	ldr	r2, [r7, #20]
 80116c8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80116cc:	4413      	add	r3, r2
 80116ce:	005b      	lsls	r3, r3, #1
 80116d0:	68fa      	ldr	r2, [r7, #12]
 80116d2:	4413      	add	r3, r2
 80116d4:	881b      	ldrh	r3, [r3, #0]
 80116d6:	4619      	mov	r1, r3
 80116d8:	697b      	ldr	r3, [r7, #20]
 80116da:	005b      	lsls	r3, r3, #1
 80116dc:	68fa      	ldr	r2, [r7, #12]
 80116de:	4413      	add	r3, r2
 80116e0:	881b      	ldrh	r3, [r3, #0]
 80116e2:	1acb      	subs	r3, r1, r3
 80116e4:	4a25      	ldr	r2, [pc, #148]	; (801177c <synth_IfftMode+0x168>)
 80116e6:	6013      	str	r3, [r2, #0]
 80116e8:	e002      	b.n	80116f0 <synth_IfftMode+0xdc>
			else
				current_image_data = 0;//imageData[note] - imageData[note - 1];
 80116ea:	4b24      	ldr	r3, [pc, #144]	; (801177c <synth_IfftMode+0x168>)
 80116ec:	2200      	movs	r2, #0
 80116ee:	601a      	str	r2, [r3, #0]

			if (waves[note].current_volume < current_image_data)
 80116f0:	4920      	ldr	r1, [pc, #128]	; (8011774 <synth_IfftMode+0x160>)
 80116f2:	697a      	ldr	r2, [r7, #20]
 80116f4:	4613      	mov	r3, r2
 80116f6:	009b      	lsls	r3, r3, #2
 80116f8:	4413      	add	r3, r2
 80116fa:	009b      	lsls	r3, r3, #2
 80116fc:	440b      	add	r3, r1
 80116fe:	330c      	adds	r3, #12
 8011700:	681a      	ldr	r2, [r3, #0]
 8011702:	4b1e      	ldr	r3, [pc, #120]	; (801177c <synth_IfftMode+0x168>)
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	429a      	cmp	r2, r3
 8011708:	da3a      	bge.n	8011780 <synth_IfftMode+0x16c>
			{
				waves[note].current_volume += IFFT_GAP_PER_MS / (SAMPLING_FREQUENCY / 1000);
 801170a:	491a      	ldr	r1, [pc, #104]	; (8011774 <synth_IfftMode+0x160>)
 801170c:	697a      	ldr	r2, [r7, #20]
 801170e:	4613      	mov	r3, r2
 8011710:	009b      	lsls	r3, r3, #2
 8011712:	4413      	add	r3, r2
 8011714:	009b      	lsls	r3, r3, #2
 8011716:	440b      	add	r3, r1
 8011718:	330c      	adds	r3, #12
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	f103 0129 	add.w	r1, r3, #41	; 0x29
 8011720:	4814      	ldr	r0, [pc, #80]	; (8011774 <synth_IfftMode+0x160>)
 8011722:	697a      	ldr	r2, [r7, #20]
 8011724:	4613      	mov	r3, r2
 8011726:	009b      	lsls	r3, r3, #2
 8011728:	4413      	add	r3, r2
 801172a:	009b      	lsls	r3, r3, #2
 801172c:	4403      	add	r3, r0
 801172e:	330c      	adds	r3, #12
 8011730:	6019      	str	r1, [r3, #0]
				if (waves[note].current_volume > current_image_data)
 8011732:	4910      	ldr	r1, [pc, #64]	; (8011774 <synth_IfftMode+0x160>)
 8011734:	697a      	ldr	r2, [r7, #20]
 8011736:	4613      	mov	r3, r2
 8011738:	009b      	lsls	r3, r3, #2
 801173a:	4413      	add	r3, r2
 801173c:	009b      	lsls	r3, r3, #2
 801173e:	440b      	add	r3, r1
 8011740:	330c      	adds	r3, #12
 8011742:	681a      	ldr	r2, [r3, #0]
 8011744:	4b0d      	ldr	r3, [pc, #52]	; (801177c <synth_IfftMode+0x168>)
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	429a      	cmp	r2, r3
 801174a:	dd45      	ble.n	80117d8 <synth_IfftMode+0x1c4>
					waves[note].current_volume = current_image_data;
 801174c:	4b0b      	ldr	r3, [pc, #44]	; (801177c <synth_IfftMode+0x168>)
 801174e:	6819      	ldr	r1, [r3, #0]
 8011750:	4808      	ldr	r0, [pc, #32]	; (8011774 <synth_IfftMode+0x160>)
 8011752:	697a      	ldr	r2, [r7, #20]
 8011754:	4613      	mov	r3, r2
 8011756:	009b      	lsls	r3, r3, #2
 8011758:	4413      	add	r3, r2
 801175a:	009b      	lsls	r3, r3, #2
 801175c:	4403      	add	r3, r0
 801175e:	330c      	adds	r3, #12
 8011760:	6019      	str	r1, [r3, #0]
 8011762:	e039      	b.n	80117d8 <synth_IfftMode+0x1c4>
 8011764:	24005658 	.word	0x24005658
 8011768:	2400565c 	.word	0x2400565c
 801176c:	24005660 	.word	0x24005660
 8011770:	24005664 	.word	0x24005664
 8011774:	24003a5c 	.word	0x24003a5c
 8011778:	24005668 	.word	0x24005668
 801177c:	2400566c 	.word	0x2400566c
			}
			else
			{
				waves[note].current_volume -= IFFT_GAP_PER_MS / (SAMPLING_FREQUENCY / 1000);
 8011780:	4965      	ldr	r1, [pc, #404]	; (8011918 <synth_IfftMode+0x304>)
 8011782:	697a      	ldr	r2, [r7, #20]
 8011784:	4613      	mov	r3, r2
 8011786:	009b      	lsls	r3, r3, #2
 8011788:	4413      	add	r3, r2
 801178a:	009b      	lsls	r3, r3, #2
 801178c:	440b      	add	r3, r1
 801178e:	330c      	adds	r3, #12
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	f1a3 0129 	sub.w	r1, r3, #41	; 0x29
 8011796:	4860      	ldr	r0, [pc, #384]	; (8011918 <synth_IfftMode+0x304>)
 8011798:	697a      	ldr	r2, [r7, #20]
 801179a:	4613      	mov	r3, r2
 801179c:	009b      	lsls	r3, r3, #2
 801179e:	4413      	add	r3, r2
 80117a0:	009b      	lsls	r3, r3, #2
 80117a2:	4403      	add	r3, r0
 80117a4:	330c      	adds	r3, #12
 80117a6:	6019      	str	r1, [r3, #0]
				if (waves[note].current_volume < current_image_data)
 80117a8:	495b      	ldr	r1, [pc, #364]	; (8011918 <synth_IfftMode+0x304>)
 80117aa:	697a      	ldr	r2, [r7, #20]
 80117ac:	4613      	mov	r3, r2
 80117ae:	009b      	lsls	r3, r3, #2
 80117b0:	4413      	add	r3, r2
 80117b2:	009b      	lsls	r3, r3, #2
 80117b4:	440b      	add	r3, r1
 80117b6:	330c      	adds	r3, #12
 80117b8:	681a      	ldr	r2, [r3, #0]
 80117ba:	4b58      	ldr	r3, [pc, #352]	; (801191c <synth_IfftMode+0x308>)
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	429a      	cmp	r2, r3
 80117c0:	da0a      	bge.n	80117d8 <synth_IfftMode+0x1c4>
					waves[note].current_volume = current_image_data;
 80117c2:	4b56      	ldr	r3, [pc, #344]	; (801191c <synth_IfftMode+0x308>)
 80117c4:	6819      	ldr	r1, [r3, #0]
 80117c6:	4854      	ldr	r0, [pc, #336]	; (8011918 <synth_IfftMode+0x304>)
 80117c8:	697a      	ldr	r2, [r7, #20]
 80117ca:	4613      	mov	r3, r2
 80117cc:	009b      	lsls	r3, r3, #2
 80117ce:	4413      	add	r3, r2
 80117d0:	009b      	lsls	r3, r3, #2
 80117d2:	4403      	add	r3, r0
 80117d4:	330c      	adds	r3, #12
 80117d6:	6019      	str	r1, [r3, #0]
			}

			if (waves[note].current_volume > max_volume)
 80117d8:	494f      	ldr	r1, [pc, #316]	; (8011918 <synth_IfftMode+0x304>)
 80117da:	697a      	ldr	r2, [r7, #20]
 80117dc:	4613      	mov	r3, r2
 80117de:	009b      	lsls	r3, r3, #2
 80117e0:	4413      	add	r3, r2
 80117e2:	009b      	lsls	r3, r3, #2
 80117e4:	440b      	add	r3, r1
 80117e6:	330c      	adds	r3, #12
 80117e8:	681a      	ldr	r2, [r3, #0]
 80117ea:	4b4d      	ldr	r3, [pc, #308]	; (8011920 <synth_IfftMode+0x30c>)
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	429a      	cmp	r2, r3
 80117f0:	dd0a      	ble.n	8011808 <synth_IfftMode+0x1f4>
				max_volume = waves[note].current_volume;
 80117f2:	4949      	ldr	r1, [pc, #292]	; (8011918 <synth_IfftMode+0x304>)
 80117f4:	697a      	ldr	r2, [r7, #20]
 80117f6:	4613      	mov	r3, r2
 80117f8:	009b      	lsls	r3, r3, #2
 80117fa:	4413      	add	r3, r2
 80117fc:	009b      	lsls	r3, r3, #2
 80117fe:	440b      	add	r3, r1
 8011800:	330c      	adds	r3, #12
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	4a46      	ldr	r2, [pc, #280]	; (8011920 <synth_IfftMode+0x30c>)
 8011806:	6013      	str	r3, [r2, #0]

			//current audio point summation
			signal_summation += ((*(waves[note].start_ptr + new_idx)) * waves[note].current_volume) >> 16;
 8011808:	4943      	ldr	r1, [pc, #268]	; (8011918 <synth_IfftMode+0x304>)
 801180a:	697a      	ldr	r2, [r7, #20]
 801180c:	4613      	mov	r3, r2
 801180e:	009b      	lsls	r3, r3, #2
 8011810:	4413      	add	r3, r2
 8011812:	009b      	lsls	r3, r3, #2
 8011814:	440b      	add	r3, r1
 8011816:	681a      	ldr	r2, [r3, #0]
 8011818:	4b42      	ldr	r3, [pc, #264]	; (8011924 <synth_IfftMode+0x310>)
 801181a:	881b      	ldrh	r3, [r3, #0]
 801181c:	005b      	lsls	r3, r3, #1
 801181e:	4413      	add	r3, r2
 8011820:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011824:	4618      	mov	r0, r3
 8011826:	493c      	ldr	r1, [pc, #240]	; (8011918 <synth_IfftMode+0x304>)
 8011828:	697a      	ldr	r2, [r7, #20]
 801182a:	4613      	mov	r3, r2
 801182c:	009b      	lsls	r3, r3, #2
 801182e:	4413      	add	r3, r2
 8011830:	009b      	lsls	r3, r3, #2
 8011832:	440b      	add	r3, r1
 8011834:	330c      	adds	r3, #12
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	fb03 f300 	mul.w	r3, r3, r0
 801183c:	141a      	asrs	r2, r3, #16
 801183e:	4b3a      	ldr	r3, [pc, #232]	; (8011928 <synth_IfftMode+0x314>)
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	4413      	add	r3, r2
 8011844:	4a38      	ldr	r2, [pc, #224]	; (8011928 <synth_IfftMode+0x314>)
 8011846:	6013      	str	r3, [r2, #0]

			//read equivalent power of current pixel
			signal_power_summation += waves[note].current_volume;
 8011848:	4933      	ldr	r1, [pc, #204]	; (8011918 <synth_IfftMode+0x304>)
 801184a:	697a      	ldr	r2, [r7, #20]
 801184c:	4613      	mov	r3, r2
 801184e:	009b      	lsls	r3, r3, #2
 8011850:	4413      	add	r3, r2
 8011852:	009b      	lsls	r3, r3, #2
 8011854:	440b      	add	r3, r1
 8011856:	330c      	adds	r3, #12
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	461a      	mov	r2, r3
 801185c:	4b33      	ldr	r3, [pc, #204]	; (801192c <synth_IfftMode+0x318>)
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	4413      	add	r3, r2
 8011862:	4a32      	ldr	r2, [pc, #200]	; (801192c <synth_IfftMode+0x318>)
 8011864:	6013      	str	r3, [r2, #0]

			waves[note].current_idx = new_idx;
 8011866:	4b2f      	ldr	r3, [pc, #188]	; (8011924 <synth_IfftMode+0x310>)
 8011868:	8818      	ldrh	r0, [r3, #0]
 801186a:	492b      	ldr	r1, [pc, #172]	; (8011918 <synth_IfftMode+0x304>)
 801186c:	697a      	ldr	r2, [r7, #20]
 801186e:	4613      	mov	r3, r2
 8011870:	009b      	lsls	r3, r3, #2
 8011872:	4413      	add	r3, r2
 8011874:	009b      	lsls	r3, r3, #2
 8011876:	440b      	add	r3, r1
 8011878:	3304      	adds	r3, #4
 801187a:	4602      	mov	r2, r0
 801187c:	801a      	strh	r2, [r3, #0]
		for (int32_t note = NUMBER_OF_NOTES; --note >= 1;)
 801187e:	697b      	ldr	r3, [r7, #20]
 8011880:	3b01      	subs	r3, #1
 8011882:	617b      	str	r3, [r7, #20]
 8011884:	697b      	ldr	r3, [r7, #20]
 8011886:	2b00      	cmp	r3, #0
 8011888:	f73f aeda 	bgt.w	8011640 <synth_IfftMode+0x2c>
		}

		rfft = (signal_summation * ((double)max_volume) / (double)signal_power_summation);
 801188c:	4b26      	ldr	r3, [pc, #152]	; (8011928 <synth_IfftMode+0x314>)
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	ee07 3a90 	vmov	s15, r3
 8011894:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8011898:	4b21      	ldr	r3, [pc, #132]	; (8011920 <synth_IfftMode+0x30c>)
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	ee07 3a90 	vmov	s15, r3
 80118a0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80118a4:	ee26 5b07 	vmul.f64	d5, d6, d7
 80118a8:	4b20      	ldr	r3, [pc, #128]	; (801192c <synth_IfftMode+0x318>)
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	ee07 3a90 	vmov	s15, r3
 80118b0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80118b4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80118b8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80118bc:	ee17 3a90 	vmov	r3, s15
 80118c0:	b21a      	sxth	r2, r3
 80118c2:	4b1b      	ldr	r3, [pc, #108]	; (8011930 <synth_IfftMode+0x31c>)
 80118c4:	801a      	strh	r2, [r3, #0]

		audioData[write_data_nbr] = 0;		//L
 80118c6:	4b1b      	ldr	r3, [pc, #108]	; (8011934 <synth_IfftMode+0x320>)
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	005b      	lsls	r3, r3, #1
 80118cc:	68ba      	ldr	r2, [r7, #8]
 80118ce:	4413      	add	r3, r2
 80118d0:	2200      	movs	r2, #0
 80118d2:	801a      	strh	r2, [r3, #0]
		audioData[write_data_nbr + 1] = rfft;	//R
 80118d4:	4b17      	ldr	r3, [pc, #92]	; (8011934 <synth_IfftMode+0x320>)
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	3301      	adds	r3, #1
 80118da:	005b      	lsls	r3, r3, #1
 80118dc:	68ba      	ldr	r2, [r7, #8]
 80118de:	4413      	add	r3, r2
 80118e0:	4a13      	ldr	r2, [pc, #76]	; (8011930 <synth_IfftMode+0x31c>)
 80118e2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80118e6:	801a      	strh	r2, [r3, #0]
		write_data_nbr += 2;
 80118e8:	4b12      	ldr	r3, [pc, #72]	; (8011934 <synth_IfftMode+0x320>)
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	3302      	adds	r3, #2
 80118ee:	4a11      	ldr	r2, [pc, #68]	; (8011934 <synth_IfftMode+0x320>)
 80118f0:	6013      	str	r3, [r2, #0]
	while(write_data_nbr < NbrOfData)
 80118f2:	4b10      	ldr	r3, [pc, #64]	; (8011934 <synth_IfftMode+0x320>)
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	687a      	ldr	r2, [r7, #4]
 80118f8:	429a      	cmp	r2, r3
 80118fa:	f63f ae95 	bhi.w	8011628 <synth_IfftMode+0x14>
	}

	synth_process_cnt += NbrOfData;
 80118fe:	4b0e      	ldr	r3, [pc, #56]	; (8011938 <synth_IfftMode+0x324>)
 8011900:	681a      	ldr	r2, [r3, #0]
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	4413      	add	r3, r2
 8011906:	4a0c      	ldr	r2, [pc, #48]	; (8011938 <synth_IfftMode+0x324>)
 8011908:	6013      	str	r3, [r2, #0]
}
 801190a:	bf00      	nop
 801190c:	371c      	adds	r7, #28
 801190e:	46bd      	mov	sp, r7
 8011910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011914:	4770      	bx	lr
 8011916:	bf00      	nop
 8011918:	24003a5c 	.word	0x24003a5c
 801191c:	2400566c 	.word	0x2400566c
 8011920:	24005664 	.word	0x24005664
 8011924:	24005668 	.word	0x24005668
 8011928:	2400565c 	.word	0x2400565c
 801192c:	24005660 	.word	0x24005660
 8011930:	24005670 	.word	0x24005670
 8011934:	24005658 	.word	0x24005658
 8011938:	24004650 	.word	0x24004650

0801193c <synth_AudioProcess>:
 *                                                                                 ^
 *                                                                                FULL
 *                                                                              COMPLETE
 */
void synth_AudioProcess(synthModeTypeDef mode)
{
 801193c:	b580      	push	{r7, lr}
 801193e:	b08a      	sub	sp, #40	; 0x28
 8011940:	af00      	add	r7, sp, #0
 8011942:	4603      	mov	r3, r0
 8011944:	71fb      	strb	r3, [r7, #7]
	/* 1st half buffer played; so fill it and continue playing from bottom*/
	if(bufferAudioState == AUDIO_BUFFER_OFFSET_HALF)
 8011946:	4b40      	ldr	r3, [pc, #256]	; (8011a48 <synth_AudioProcess+0x10c>)
 8011948:	781b      	ldrb	r3, [r3, #0]
 801194a:	2b01      	cmp	r3, #1
 801194c:	d139      	bne.n	80119c2 <synth_AudioProcess+0x86>
	{
		bufferAudioState = AUDIO_BUFFER_OFFSET_NONE;
 801194e:	4b3e      	ldr	r3, [pc, #248]	; (8011a48 <synth_AudioProcess+0x10c>)
 8011950:	2200      	movs	r2, #0
 8011952:	701a      	strb	r2, [r3, #0]
		cis_ImageProcessBW(imageData);
 8011954:	4b3d      	ldr	r3, [pc, #244]	; (8011a4c <synth_AudioProcess+0x110>)
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	4618      	mov	r0, r3
 801195a:	f00b fa89 	bl	801ce70 <cis_ImageProcessBW>
		if (mode == IFFT_MODE)
 801195e:	79fb      	ldrb	r3, [r7, #7]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d107      	bne.n	8011974 <synth_AudioProcess+0x38>
			synth_IfftMode(imageData, &audioBuff[0], AUDIO_BUFFER_SIZE / 2);
 8011964:	4b39      	ldr	r3, [pc, #228]	; (8011a4c <synth_AudioProcess+0x110>)
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801196c:	4938      	ldr	r1, [pc, #224]	; (8011a50 <synth_AudioProcess+0x114>)
 801196e:	4618      	mov	r0, r3
 8011970:	f7ff fe50 	bl	8011614 <synth_IfftMode>
 8011974:	4b36      	ldr	r3, [pc, #216]	; (8011a50 <synth_AudioProcess+0x114>)
 8011976:	627b      	str	r3, [r7, #36]	; 0x24
 8011978:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801197c:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 801197e:	6a3b      	ldr	r3, [r7, #32]
 8011980:	2b00      	cmp	r3, #0
 8011982:	dd1d      	ble.n	80119c0 <synth_AudioProcess+0x84>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8011984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011986:	f003 021f 	and.w	r2, r3, #31
 801198a:	6a3b      	ldr	r3, [r7, #32]
 801198c:	4413      	add	r3, r2
 801198e:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8011990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011992:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8011994:	f3bf 8f4f 	dsb	sy
}
 8011998:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 801199a:	4a2e      	ldr	r2, [pc, #184]	; (8011a54 <synth_AudioProcess+0x118>)
 801199c:	69bb      	ldr	r3, [r7, #24]
 801199e:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80119a2:	69bb      	ldr	r3, [r7, #24]
 80119a4:	3320      	adds	r3, #32
 80119a6:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80119a8:	69fb      	ldr	r3, [r7, #28]
 80119aa:	3b20      	subs	r3, #32
 80119ac:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 80119ae:	69fb      	ldr	r3, [r7, #28]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	dcf2      	bgt.n	801199a <synth_AudioProcess+0x5e>
  __ASM volatile ("dsb 0xF":::"memory");
 80119b4:	f3bf 8f4f 	dsb	sy
}
 80119b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80119ba:	f3bf 8f6f 	isb	sy
}
 80119be:	bf00      	nop
}
 80119c0:	bf00      	nop
		/* Clean Data Cache to update the content of the SRAM */
		SCB_CleanDCache_by_Addr((uint32_t *)&audioBuff[0], AUDIO_BUFFER_SIZE);
	}

	/* 2nd half buffer played; so fill it and continue playing from top */
	if(bufferAudioState == AUDIO_BUFFER_OFFSET_FULL)
 80119c2:	4b21      	ldr	r3, [pc, #132]	; (8011a48 <synth_AudioProcess+0x10c>)
 80119c4:	781b      	ldrb	r3, [r3, #0]
 80119c6:	2b02      	cmp	r3, #2
 80119c8:	d13a      	bne.n	8011a40 <synth_AudioProcess+0x104>
	{
		bufferAudioState = AUDIO_BUFFER_OFFSET_NONE;
 80119ca:	4b1f      	ldr	r3, [pc, #124]	; (8011a48 <synth_AudioProcess+0x10c>)
 80119cc:	2200      	movs	r2, #0
 80119ce:	701a      	strb	r2, [r3, #0]
		cis_ImageProcessBW(imageData);
 80119d0:	4b1e      	ldr	r3, [pc, #120]	; (8011a4c <synth_AudioProcess+0x110>)
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	4618      	mov	r0, r3
 80119d6:	f00b fa4b 	bl	801ce70 <cis_ImageProcessBW>
		if (mode == IFFT_MODE)
 80119da:	79fb      	ldrb	r3, [r7, #7]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d107      	bne.n	80119f0 <synth_AudioProcess+0xb4>
			synth_IfftMode(imageData, &audioBuff[AUDIO_BUFFER_SIZE / 2], AUDIO_BUFFER_SIZE / 2);
 80119e0:	4b1a      	ldr	r3, [pc, #104]	; (8011a4c <synth_AudioProcess+0x110>)
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80119e8:	491b      	ldr	r1, [pc, #108]	; (8011a58 <synth_AudioProcess+0x11c>)
 80119ea:	4618      	mov	r0, r3
 80119ec:	f7ff fe12 	bl	8011614 <synth_IfftMode>
 80119f0:	4b19      	ldr	r3, [pc, #100]	; (8011a58 <synth_AudioProcess+0x11c>)
 80119f2:	617b      	str	r3, [r7, #20]
 80119f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80119f8:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 80119fa:	693b      	ldr	r3, [r7, #16]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	dd1d      	ble.n	8011a3c <synth_AudioProcess+0x100>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8011a00:	697b      	ldr	r3, [r7, #20]
 8011a02:	f003 021f 	and.w	r2, r3, #31
 8011a06:	693b      	ldr	r3, [r7, #16]
 8011a08:	4413      	add	r3, r2
 8011a0a:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8011a0c:	697b      	ldr	r3, [r7, #20]
 8011a0e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8011a10:	f3bf 8f4f 	dsb	sy
}
 8011a14:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8011a16:	4a0f      	ldr	r2, [pc, #60]	; (8011a54 <synth_AudioProcess+0x118>)
 8011a18:	68bb      	ldr	r3, [r7, #8]
 8011a1a:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8011a1e:	68bb      	ldr	r3, [r7, #8]
 8011a20:	3320      	adds	r3, #32
 8011a22:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	3b20      	subs	r3, #32
 8011a28:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	dcf2      	bgt.n	8011a16 <synth_AudioProcess+0xda>
  __ASM volatile ("dsb 0xF":::"memory");
 8011a30:	f3bf 8f4f 	dsb	sy
}
 8011a34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011a36:	f3bf 8f6f 	isb	sy
}
 8011a3a:	bf00      	nop
}
 8011a3c:	bf00      	nop
		//			else
		//				synth_PlayMode(imageData, (int16_t*)&audioBuff[AUDIO_QUARTER_BUFFER_SIZE / 2], (AUDIO_QUARTER_BUFFER_SIZE / 2));
		/* Clean Data Cache to update the content of the SRAM */
		SCB_CleanDCache_by_Addr((uint32_t *)&audioBuff[AUDIO_BUFFER_SIZE / 2], AUDIO_BUFFER_SIZE);
	}
	return;
 8011a3e:	bf00      	nop
 8011a40:	bf00      	nop
}
 8011a42:	3728      	adds	r7, #40	; 0x28
 8011a44:	46bd      	mov	sp, r7
 8011a46:	bd80      	pop	{r7, pc}
 8011a48:	24005f44 	.word	0x24005f44
 8011a4c:	24004654 	.word	0x24004654
 8011a50:	24004658 	.word	0x24004658
 8011a54:	e000ed00 	.word	0xe000ed00
 8011a58:	24004e58 	.word	0x24004e58

08011a5c <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai_BlockA1)
{
 8011a5c:	b480      	push	{r7}
 8011a5e:	b083      	sub	sp, #12
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	6078      	str	r0, [r7, #4]
	if(hsai_BlockA1->Instance==SAI1_Block_A)
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	4a05      	ldr	r2, [pc, #20]	; (8011a80 <HAL_SAI_TxHalfCpltCallback+0x24>)
 8011a6a:	4293      	cmp	r3, r2
 8011a6c:	d102      	bne.n	8011a74 <HAL_SAI_TxHalfCpltCallback+0x18>
	{
		bufferAudioState = AUDIO_BUFFER_OFFSET_HALF;
 8011a6e:	4b05      	ldr	r3, [pc, #20]	; (8011a84 <HAL_SAI_TxHalfCpltCallback+0x28>)
 8011a70:	2201      	movs	r2, #1
 8011a72:	701a      	strb	r2, [r3, #0]
	}
}
 8011a74:	bf00      	nop
 8011a76:	370c      	adds	r7, #12
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a7e:	4770      	bx	lr
 8011a80:	40015804 	.word	0x40015804
 8011a84:	24005f44 	.word	0x24005f44

08011a88 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai_BlockA1)
{
 8011a88:	b480      	push	{r7}
 8011a8a:	b083      	sub	sp, #12
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	6078      	str	r0, [r7, #4]
	if(hsai_BlockA1->Instance==SAI1_Block_A)
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	4a05      	ldr	r2, [pc, #20]	; (8011aac <HAL_SAI_TxCpltCallback+0x24>)
 8011a96:	4293      	cmp	r3, r2
 8011a98:	d102      	bne.n	8011aa0 <HAL_SAI_TxCpltCallback+0x18>
	{
		/* allows AUDIO_Process() to refill 2nd part of the buffer  */
		bufferAudioState = AUDIO_BUFFER_OFFSET_FULL;
 8011a9a:	4b05      	ldr	r3, [pc, #20]	; (8011ab0 <HAL_SAI_TxCpltCallback+0x28>)
 8011a9c:	2202      	movs	r2, #2
 8011a9e:	701a      	strb	r2, [r3, #0]
	}
}
 8011aa0:	bf00      	nop
 8011aa2:	370c      	adds	r7, #12
 8011aa4:	46bd      	mov	sp, r7
 8011aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aaa:	4770      	bx	lr
 8011aac:	40015804 	.word	0x40015804
 8011ab0:	24005f44 	.word	0x24005f44
 8011ab4:	00000000 	.word	0x00000000

08011ab8 <calculate_frequency>:
 * @brief  calculate frequency,
 * @param  comma cnt
 * @retval frequency
 */
static float calculate_frequency(uint32_t comma_cnt)
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b084      	sub	sp, #16
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	6078      	str	r0, [r7, #4]
	float frequency = 0.0;
 8011ac0:	f04f 0300 	mov.w	r3, #0
 8011ac4:	60fb      	str	r3, [r7, #12]
	frequency = START_FREQUENCY * pow(2, (comma_cnt / (12.0 * (COMMA_PER_OCTAVE / (12.0 / (log(2)) * log((START_FREQUENCY * 2.0) / START_FREQUENCY))))));
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	ee07 3a90 	vmov	s15, r3
 8011acc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011ad0:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8011b08 <calculate_frequency+0x50>
 8011ad4:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8011ad8:	eeb0 1b46 	vmov.f64	d1, d6
 8011adc:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8011ae0:	f012 fd7e 	bl	80245e0 <pow>
 8011ae4:	eeb0 7b40 	vmov.f64	d7, d0
 8011ae8:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8011b10 <calculate_frequency+0x58>
 8011aec:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011af0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8011af4:	edc7 7a03 	vstr	s15, [r7, #12]

	return frequency;
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	ee07 3a90 	vmov	s15, r3
}
 8011afe:	eeb0 0a67 	vmov.f32	s0, s15
 8011b02:	3710      	adds	r7, #16
 8011b04:	46bd      	mov	sp, r7
 8011b06:	bd80      	pop	{r7, pc}
 8011b08:	00000000 	.word	0x00000000
 8011b0c:	40480000 	.word	0x40480000
 8011b10:	00000000 	.word	0x00000000
 8011b14:	40718000 	.word	0x40718000

08011b18 <init_waves>:
 * @param  unitary_waveform pointer,
 * @param  waves structure pointer,
 * @retval buffer length on success, negative value otherwise
 */
uint32_t init_waves(int16_t **unitary_waveform, struct wave *waves)
{
 8011b18:	b580      	push	{r7, lr}
 8011b1a:	ed2d 8b02 	vpush	{d8}
 8011b1e:	b08c      	sub	sp, #48	; 0x30
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	6078      	str	r0, [r7, #4]
 8011b24:	6039      	str	r1, [r7, #0]
	uint32_t buffer_len = 0;
 8011b26:	2300      	movs	r3, #0
 8011b28:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t current_unitary_waveform_cell = 0;
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t note = 0;
 8011b2e:	2300      	movs	r3, #0
 8011b30:	627b      	str	r3, [r7, #36]	; 0x24

	//compute cell number for storage all oscillators waveform
	for (uint32_t comma_cnt = 0; comma_cnt < COMMA_PER_OCTAVE; comma_cnt++)
 8011b32:	2300      	movs	r3, #0
 8011b34:	623b      	str	r3, [r7, #32]
 8011b36:	e014      	b.n	8011b62 <init_waves+0x4a>
	{
		//store only first octave_coeff frequencies ---- logarithmic distribution
		float frequency = calculate_frequency(comma_cnt);
 8011b38:	6a38      	ldr	r0, [r7, #32]
 8011b3a:	f7ff ffbd 	bl	8011ab8 <calculate_frequency>
 8011b3e:	ed87 0a02 	vstr	s0, [r7, #8]
		buffer_len += (uint32_t)(SAMPLING_FREQUENCY / frequency);
 8011b42:	eddf 6a81 	vldr	s13, [pc, #516]	; 8011d48 <init_waves+0x230>
 8011b46:	ed97 7a02 	vldr	s14, [r7, #8]
 8011b4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011b4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011b52:	ee17 2a90 	vmov	r2, s15
 8011b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b58:	4413      	add	r3, r2
 8011b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (uint32_t comma_cnt = 0; comma_cnt < COMMA_PER_OCTAVE; comma_cnt++)
 8011b5c:	6a3b      	ldr	r3, [r7, #32]
 8011b5e:	3301      	adds	r3, #1
 8011b60:	623b      	str	r3, [r7, #32]
 8011b62:	6a3b      	ldr	r3, [r7, #32]
 8011b64:	2b2f      	cmp	r3, #47	; 0x2f
 8011b66:	d9e7      	bls.n	8011b38 <init_waves+0x20>
	}

	//allocate the contiguous memory area for storage all waveforms for the first octave_coeff
	*unitary_waveform = malloc(buffer_len * sizeof(uint16_t*));
 8011b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b6a:	009b      	lsls	r3, r3, #2
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	f00e f8c5 	bl	801fcfc <malloc>
 8011b72:	4603      	mov	r3, r0
 8011b74:	461a      	mov	r2, r3
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	601a      	str	r2, [r3, #0]
	if (*unitary_waveform == NULL)
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d101      	bne.n	8011b86 <init_waves+0x6e>
	{
		Error_Handler();
 8011b82:	f7f1 f857 	bl	8002c34 <Error_Handler>
	}

	//compute and store the waveform into unitary_waveform only for the first octave_coeff
	for (uint32_t current_comma_first_octave = 0; current_comma_first_octave < COMMA_PER_OCTAVE; current_comma_first_octave++)
 8011b86:	2300      	movs	r3, #0
 8011b88:	61fb      	str	r3, [r7, #28]
 8011b8a:	e0be      	b.n	8011d0a <init_waves+0x1f2>
	{
		//compute frequency for each comma into the first octave_coeff
		float frequency = calculate_frequency(current_comma_first_octave);
 8011b8c:	69f8      	ldr	r0, [r7, #28]
 8011b8e:	f7ff ff93 	bl	8011ab8 <calculate_frequency>
 8011b92:	ed87 0a04 	vstr	s0, [r7, #16]

		//current aera size is the number of char cell for storage a waveform at the current frequency (one pixel per frequency oscillator)
		uint32_t current_aera_size = (uint32_t)(SAMPLING_FREQUENCY / frequency);
 8011b96:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8011d48 <init_waves+0x230>
 8011b9a:	ed97 7a04 	vldr	s14, [r7, #16]
 8011b9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011ba2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011ba6:	ee17 3a90 	vmov	r3, s15
 8011baa:	60fb      	str	r3, [r7, #12]

		//fill unitary_waveform buffer with sinusoidal waveform for each comma
		for (uint32_t x = 0; x < current_aera_size; x++)
 8011bac:	2300      	movs	r3, #0
 8011bae:	61bb      	str	r3, [r7, #24]
 8011bb0:	e030      	b.n	8011c14 <init_waves+0xfc>
		{
			//sanity check
			if (current_unitary_waveform_cell < buffer_len)
 8011bb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bb6:	429a      	cmp	r2, r3
 8011bb8:	d229      	bcs.n	8011c0e <init_waves+0xf6>
			{
				(*unitary_waveform)[current_unitary_waveform_cell] = ((sin((x * 2.00 * PI )/ (double)current_aera_size))) * (WAVE_AMP_RESOLUTION / 2.00);
 8011bba:	69bb      	ldr	r3, [r7, #24]
 8011bbc:	ee07 3a90 	vmov	s15, r3
 8011bc0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011bc4:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011bc8:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 8011d38 <init_waves+0x220>
 8011bcc:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	ee07 3a90 	vmov	s15, r3
 8011bd6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011bda:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8011bde:	eeb0 0b45 	vmov.f64	d0, d5
 8011be2:	f012 ffc1 	bl	8024b68 <sin>
 8011be6:	eeb0 7b40 	vmov.f64	d7, d0
 8011bea:	ed9f 6b55 	vldr	d6, [pc, #340]	; 8011d40 <init_waves+0x228>
 8011bee:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	681a      	ldr	r2, [r3, #0]
 8011bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bf8:	005b      	lsls	r3, r3, #1
 8011bfa:	4413      	add	r3, r2
 8011bfc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8011c00:	ee17 2a90 	vmov	r2, s15
 8011c04:	b212      	sxth	r2, r2
 8011c06:	801a      	strh	r2, [r3, #0]
				current_unitary_waveform_cell++;
 8011c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c0a:	3301      	adds	r3, #1
 8011c0c:	62bb      	str	r3, [r7, #40]	; 0x28
		for (uint32_t x = 0; x < current_aera_size; x++)
 8011c0e:	69bb      	ldr	r3, [r7, #24]
 8011c10:	3301      	adds	r3, #1
 8011c12:	61bb      	str	r3, [r7, #24]
 8011c14:	69ba      	ldr	r2, [r7, #24]
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	429a      	cmp	r2, r3
 8011c1a:	d3ca      	bcc.n	8011bb2 <init_waves+0x9a>
			}
		}

		//for each octave (only the first octave_coeff stay in RAM, for multiple octave_coeff start_ptr stay on first octave waveform but current_ptr jump cell according to multiple frequencies)
		for (uint32_t octave = 0; octave <= MAX_OCTAVE_NUMBER; octave++)
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	617b      	str	r3, [r7, #20]
 8011c20:	e06d      	b.n	8011cfe <init_waves+0x1e6>
			// *** is current pix, --- octave separation
			// *---------*---------*---------*---------*---------*---------*---------*--------- for current comma at each octave
			// ---*---------*---------*---------*---------*---------*---------*---------*------ for the second comma...
			// ------*---------*---------*---------*---------*---------*---------*---------*---
			// ---------*---------*---------*---------*---------*---------*---------*---------*
			note = current_comma_first_octave + COMMA_PER_OCTAVE * octave;
 8011c22:	697a      	ldr	r2, [r7, #20]
 8011c24:	4613      	mov	r3, r2
 8011c26:	005b      	lsls	r3, r3, #1
 8011c28:	4413      	add	r3, r2
 8011c2a:	011b      	lsls	r3, r3, #4
 8011c2c:	461a      	mov	r2, r3
 8011c2e:	69fb      	ldr	r3, [r7, #28]
 8011c30:	4413      	add	r3, r2
 8011c32:	627b      	str	r3, [r7, #36]	; 0x24
			//sanity check, if user demand is't possible
			if (note < NUMBER_OF_NOTES)
 8011c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c36:	2b98      	cmp	r3, #152	; 0x98
 8011c38:	d85e      	bhi.n	8011cf8 <init_waves+0x1e0>
			{
#ifdef PRINT_FREQUENCY
				//store frequencies
				waves[note].frequency = frequency * pow(2, octave);
 8011c3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8011c3e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8011c42:	697b      	ldr	r3, [r7, #20]
 8011c44:	ee07 3a90 	vmov	s15, r3
 8011c48:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011c4c:	eeb0 1b47 	vmov.f64	d1, d7
 8011c50:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8011c54:	f012 fcc4 	bl	80245e0 <pow>
 8011c58:	eeb0 7b40 	vmov.f64	d7, d0
 8011c5c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8011c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c62:	4613      	mov	r3, r2
 8011c64:	009b      	lsls	r3, r3, #2
 8011c66:	4413      	add	r3, r2
 8011c68:	009b      	lsls	r3, r3, #2
 8011c6a:	461a      	mov	r2, r3
 8011c6c:	683b      	ldr	r3, [r7, #0]
 8011c6e:	4413      	add	r3, r2
 8011c70:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8011c74:	edc3 7a04 	vstr	s15, [r3, #16]
#endif
				//store octave number
				waves[note].octave_coeff = pow(2, octave);
 8011c78:	697b      	ldr	r3, [r7, #20]
 8011c7a:	ee07 3a90 	vmov	s15, r3
 8011c7e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011c82:	eeb0 1b47 	vmov.f64	d1, d7
 8011c86:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8011c8a:	f012 fca9 	bl	80245e0 <pow>
 8011c8e:	eeb0 7b40 	vmov.f64	d7, d0
 8011c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c94:	4613      	mov	r3, r2
 8011c96:	009b      	lsls	r3, r3, #2
 8011c98:	4413      	add	r3, r2
 8011c9a:	009b      	lsls	r3, r3, #2
 8011c9c:	461a      	mov	r2, r3
 8011c9e:	683b      	ldr	r3, [r7, #0]
 8011ca0:	4413      	add	r3, r2
 8011ca2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8011ca6:	ee17 2a90 	vmov	r2, s15
 8011caa:	b292      	uxth	r2, r2
 8011cac:	811a      	strh	r2, [r3, #8]
				//store aera size
				waves[note].aera_size = current_aera_size;
 8011cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cb0:	4613      	mov	r3, r2
 8011cb2:	009b      	lsls	r3, r3, #2
 8011cb4:	4413      	add	r3, r2
 8011cb6:	009b      	lsls	r3, r3, #2
 8011cb8:	461a      	mov	r2, r3
 8011cba:	683b      	ldr	r3, [r7, #0]
 8011cbc:	4413      	add	r3, r2
 8011cbe:	68fa      	ldr	r2, [r7, #12]
 8011cc0:	b292      	uxth	r2, r2
 8011cc2:	80da      	strh	r2, [r3, #6]
				//store pointer address
				waves[note].start_ptr = &(*unitary_waveform)[current_unitary_waveform_cell - current_aera_size];
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	6818      	ldr	r0, [r3, #0]
 8011cc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	1ad3      	subs	r3, r2, r3
 8011cce:	0059      	lsls	r1, r3, #1
 8011cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cd2:	4613      	mov	r3, r2
 8011cd4:	009b      	lsls	r3, r3, #2
 8011cd6:	4413      	add	r3, r2
 8011cd8:	009b      	lsls	r3, r3, #2
 8011cda:	461a      	mov	r2, r3
 8011cdc:	683b      	ldr	r3, [r7, #0]
 8011cde:	4413      	add	r3, r2
 8011ce0:	1842      	adds	r2, r0, r1
 8011ce2:	601a      	str	r2, [r3, #0]
				//set current pointer at the same address
				waves[note].current_idx = 0;
 8011ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ce6:	4613      	mov	r3, r2
 8011ce8:	009b      	lsls	r3, r3, #2
 8011cea:	4413      	add	r3, r2
 8011cec:	009b      	lsls	r3, r3, #2
 8011cee:	461a      	mov	r2, r3
 8011cf0:	683b      	ldr	r3, [r7, #0]
 8011cf2:	4413      	add	r3, r2
 8011cf4:	2200      	movs	r2, #0
 8011cf6:	809a      	strh	r2, [r3, #4]
		for (uint32_t octave = 0; octave <= MAX_OCTAVE_NUMBER; octave++)
 8011cf8:	697b      	ldr	r3, [r7, #20]
 8011cfa:	3301      	adds	r3, #1
 8011cfc:	617b      	str	r3, [r7, #20]
 8011cfe:	697b      	ldr	r3, [r7, #20]
 8011d00:	2b0a      	cmp	r3, #10
 8011d02:	d98e      	bls.n	8011c22 <init_waves+0x10a>
	for (uint32_t current_comma_first_octave = 0; current_comma_first_octave < COMMA_PER_OCTAVE; current_comma_first_octave++)
 8011d04:	69fb      	ldr	r3, [r7, #28]
 8011d06:	3301      	adds	r3, #1
 8011d08:	61fb      	str	r3, [r7, #28]
 8011d0a:	69fb      	ldr	r3, [r7, #28]
 8011d0c:	2b2f      	cmp	r3, #47	; 0x2f
 8011d0e:	f67f af3d 	bls.w	8011b8c <init_waves+0x74>
			}
		}
	}

	if (note < NUMBER_OF_NOTES)
 8011d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d14:	2b98      	cmp	r3, #152	; 0x98
 8011d16:	d806      	bhi.n	8011d26 <init_waves+0x20e>
	{
		printf("Configuration fail, current pix : %d\n", (int)note);
 8011d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d1a:	4619      	mov	r1, r3
 8011d1c:	480b      	ldr	r0, [pc, #44]	; (8011d4c <init_waves+0x234>)
 8011d1e:	f00e ff25 	bl	8020b6c <iprintf>
		Error_Handler();
 8011d22:	f7f0 ff87 	bl	8002c34 <Error_Handler>
	}

	return buffer_len;
 8011d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8011d28:	4618      	mov	r0, r3
 8011d2a:	3730      	adds	r7, #48	; 0x30
 8011d2c:	46bd      	mov	sp, r7
 8011d2e:	ecbd 8b02 	vpop	{d8}
 8011d32:	bd80      	pop	{r7, pc}
 8011d34:	f3af 8000 	nop.w
 8011d38:	54442eea 	.word	0x54442eea
 8011d3c:	400921fb 	.word	0x400921fb
 8011d40:	00000000 	.word	0x00000000
 8011d44:	40dfffe0 	.word	0x40dfffe0
 8011d48:	473b8000 	.word	0x473b8000
 8011d4c:	08025e98 	.word	0x08025e98

08011d50 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8011d50:	b480      	push	{r7}
 8011d52:	b083      	sub	sp, #12
 8011d54:	af00      	add	r7, sp, #0
 8011d56:	4603      	mov	r3, r0
 8011d58:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8011d5a:	88fb      	ldrh	r3, [r7, #6]
 8011d5c:	021b      	lsls	r3, r3, #8
 8011d5e:	b21a      	sxth	r2, r3
 8011d60:	88fb      	ldrh	r3, [r7, #6]
 8011d62:	0a1b      	lsrs	r3, r3, #8
 8011d64:	b29b      	uxth	r3, r3
 8011d66:	b21b      	sxth	r3, r3
 8011d68:	4313      	orrs	r3, r2
 8011d6a:	b21b      	sxth	r3, r3
 8011d6c:	b29b      	uxth	r3, r3
}
 8011d6e:	4618      	mov	r0, r3
 8011d70:	370c      	adds	r7, #12
 8011d72:	46bd      	mov	sp, r7
 8011d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d78:	4770      	bx	lr

08011d7a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8011d7a:	b480      	push	{r7}
 8011d7c:	b083      	sub	sp, #12
 8011d7e:	af00      	add	r7, sp, #0
 8011d80:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	061a      	lsls	r2, r3, #24
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	021b      	lsls	r3, r3, #8
 8011d8a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8011d8e:	431a      	orrs	r2, r3
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	0a1b      	lsrs	r3, r3, #8
 8011d94:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8011d98:	431a      	orrs	r2, r3
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	0e1b      	lsrs	r3, r3, #24
 8011d9e:	4313      	orrs	r3, r2
}
 8011da0:	4618      	mov	r0, r3
 8011da2:	370c      	adds	r7, #12
 8011da4:	46bd      	mov	sp, r7
 8011da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011daa:	4770      	bx	lr

08011dac <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8011dac:	b580      	push	{r7, lr}
 8011dae:	b082      	sub	sp, #8
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8011db4:	4915      	ldr	r1, [pc, #84]	; (8011e0c <etharp_free_entry+0x60>)
 8011db6:	687a      	ldr	r2, [r7, #4]
 8011db8:	4613      	mov	r3, r2
 8011dba:	005b      	lsls	r3, r3, #1
 8011dbc:	4413      	add	r3, r2
 8011dbe:	00db      	lsls	r3, r3, #3
 8011dc0:	440b      	add	r3, r1
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d013      	beq.n	8011df0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8011dc8:	4910      	ldr	r1, [pc, #64]	; (8011e0c <etharp_free_entry+0x60>)
 8011dca:	687a      	ldr	r2, [r7, #4]
 8011dcc:	4613      	mov	r3, r2
 8011dce:	005b      	lsls	r3, r3, #1
 8011dd0:	4413      	add	r3, r2
 8011dd2:	00db      	lsls	r3, r3, #3
 8011dd4:	440b      	add	r3, r1
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	4618      	mov	r0, r3
 8011dda:	f003 feb5 	bl	8015b48 <pbuf_free>
    arp_table[i].q = NULL;
 8011dde:	490b      	ldr	r1, [pc, #44]	; (8011e0c <etharp_free_entry+0x60>)
 8011de0:	687a      	ldr	r2, [r7, #4]
 8011de2:	4613      	mov	r3, r2
 8011de4:	005b      	lsls	r3, r3, #1
 8011de6:	4413      	add	r3, r2
 8011de8:	00db      	lsls	r3, r3, #3
 8011dea:	440b      	add	r3, r1
 8011dec:	2200      	movs	r2, #0
 8011dee:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011df0:	4906      	ldr	r1, [pc, #24]	; (8011e0c <etharp_free_entry+0x60>)
 8011df2:	687a      	ldr	r2, [r7, #4]
 8011df4:	4613      	mov	r3, r2
 8011df6:	005b      	lsls	r3, r3, #1
 8011df8:	4413      	add	r3, r2
 8011dfa:	00db      	lsls	r3, r3, #3
 8011dfc:	440b      	add	r3, r1
 8011dfe:	3314      	adds	r3, #20
 8011e00:	2200      	movs	r2, #0
 8011e02:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8011e04:	bf00      	nop
 8011e06:	3708      	adds	r7, #8
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	bd80      	pop	{r7, pc}
 8011e0c:	24005674 	.word	0x24005674

08011e10 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8011e10:	b580      	push	{r7, lr}
 8011e12:	b082      	sub	sp, #8
 8011e14:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011e16:	2300      	movs	r3, #0
 8011e18:	607b      	str	r3, [r7, #4]
 8011e1a:	e096      	b.n	8011f4a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011e1c:	494f      	ldr	r1, [pc, #316]	; (8011f5c <etharp_tmr+0x14c>)
 8011e1e:	687a      	ldr	r2, [r7, #4]
 8011e20:	4613      	mov	r3, r2
 8011e22:	005b      	lsls	r3, r3, #1
 8011e24:	4413      	add	r3, r2
 8011e26:	00db      	lsls	r3, r3, #3
 8011e28:	440b      	add	r3, r1
 8011e2a:	3314      	adds	r3, #20
 8011e2c:	781b      	ldrb	r3, [r3, #0]
 8011e2e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8011e30:	78fb      	ldrb	r3, [r7, #3]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	f000 8086 	beq.w	8011f44 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8011e38:	4948      	ldr	r1, [pc, #288]	; (8011f5c <etharp_tmr+0x14c>)
 8011e3a:	687a      	ldr	r2, [r7, #4]
 8011e3c:	4613      	mov	r3, r2
 8011e3e:	005b      	lsls	r3, r3, #1
 8011e40:	4413      	add	r3, r2
 8011e42:	00db      	lsls	r3, r3, #3
 8011e44:	440b      	add	r3, r1
 8011e46:	3312      	adds	r3, #18
 8011e48:	881b      	ldrh	r3, [r3, #0]
 8011e4a:	3301      	adds	r3, #1
 8011e4c:	b298      	uxth	r0, r3
 8011e4e:	4943      	ldr	r1, [pc, #268]	; (8011f5c <etharp_tmr+0x14c>)
 8011e50:	687a      	ldr	r2, [r7, #4]
 8011e52:	4613      	mov	r3, r2
 8011e54:	005b      	lsls	r3, r3, #1
 8011e56:	4413      	add	r3, r2
 8011e58:	00db      	lsls	r3, r3, #3
 8011e5a:	440b      	add	r3, r1
 8011e5c:	3312      	adds	r3, #18
 8011e5e:	4602      	mov	r2, r0
 8011e60:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011e62:	493e      	ldr	r1, [pc, #248]	; (8011f5c <etharp_tmr+0x14c>)
 8011e64:	687a      	ldr	r2, [r7, #4]
 8011e66:	4613      	mov	r3, r2
 8011e68:	005b      	lsls	r3, r3, #1
 8011e6a:	4413      	add	r3, r2
 8011e6c:	00db      	lsls	r3, r3, #3
 8011e6e:	440b      	add	r3, r1
 8011e70:	3312      	adds	r3, #18
 8011e72:	881b      	ldrh	r3, [r3, #0]
 8011e74:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8011e78:	d215      	bcs.n	8011ea6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011e7a:	4938      	ldr	r1, [pc, #224]	; (8011f5c <etharp_tmr+0x14c>)
 8011e7c:	687a      	ldr	r2, [r7, #4]
 8011e7e:	4613      	mov	r3, r2
 8011e80:	005b      	lsls	r3, r3, #1
 8011e82:	4413      	add	r3, r2
 8011e84:	00db      	lsls	r3, r3, #3
 8011e86:	440b      	add	r3, r1
 8011e88:	3314      	adds	r3, #20
 8011e8a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011e8c:	2b01      	cmp	r3, #1
 8011e8e:	d10e      	bne.n	8011eae <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8011e90:	4932      	ldr	r1, [pc, #200]	; (8011f5c <etharp_tmr+0x14c>)
 8011e92:	687a      	ldr	r2, [r7, #4]
 8011e94:	4613      	mov	r3, r2
 8011e96:	005b      	lsls	r3, r3, #1
 8011e98:	4413      	add	r3, r2
 8011e9a:	00db      	lsls	r3, r3, #3
 8011e9c:	440b      	add	r3, r1
 8011e9e:	3312      	adds	r3, #18
 8011ea0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011ea2:	2b04      	cmp	r3, #4
 8011ea4:	d903      	bls.n	8011eae <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8011ea6:	6878      	ldr	r0, [r7, #4]
 8011ea8:	f7ff ff80 	bl	8011dac <etharp_free_entry>
 8011eac:	e04a      	b.n	8011f44 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8011eae:	492b      	ldr	r1, [pc, #172]	; (8011f5c <etharp_tmr+0x14c>)
 8011eb0:	687a      	ldr	r2, [r7, #4]
 8011eb2:	4613      	mov	r3, r2
 8011eb4:	005b      	lsls	r3, r3, #1
 8011eb6:	4413      	add	r3, r2
 8011eb8:	00db      	lsls	r3, r3, #3
 8011eba:	440b      	add	r3, r1
 8011ebc:	3314      	adds	r3, #20
 8011ebe:	781b      	ldrb	r3, [r3, #0]
 8011ec0:	2b03      	cmp	r3, #3
 8011ec2:	d10a      	bne.n	8011eda <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8011ec4:	4925      	ldr	r1, [pc, #148]	; (8011f5c <etharp_tmr+0x14c>)
 8011ec6:	687a      	ldr	r2, [r7, #4]
 8011ec8:	4613      	mov	r3, r2
 8011eca:	005b      	lsls	r3, r3, #1
 8011ecc:	4413      	add	r3, r2
 8011ece:	00db      	lsls	r3, r3, #3
 8011ed0:	440b      	add	r3, r1
 8011ed2:	3314      	adds	r3, #20
 8011ed4:	2204      	movs	r2, #4
 8011ed6:	701a      	strb	r2, [r3, #0]
 8011ed8:	e034      	b.n	8011f44 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8011eda:	4920      	ldr	r1, [pc, #128]	; (8011f5c <etharp_tmr+0x14c>)
 8011edc:	687a      	ldr	r2, [r7, #4]
 8011ede:	4613      	mov	r3, r2
 8011ee0:	005b      	lsls	r3, r3, #1
 8011ee2:	4413      	add	r3, r2
 8011ee4:	00db      	lsls	r3, r3, #3
 8011ee6:	440b      	add	r3, r1
 8011ee8:	3314      	adds	r3, #20
 8011eea:	781b      	ldrb	r3, [r3, #0]
 8011eec:	2b04      	cmp	r3, #4
 8011eee:	d10a      	bne.n	8011f06 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8011ef0:	491a      	ldr	r1, [pc, #104]	; (8011f5c <etharp_tmr+0x14c>)
 8011ef2:	687a      	ldr	r2, [r7, #4]
 8011ef4:	4613      	mov	r3, r2
 8011ef6:	005b      	lsls	r3, r3, #1
 8011ef8:	4413      	add	r3, r2
 8011efa:	00db      	lsls	r3, r3, #3
 8011efc:	440b      	add	r3, r1
 8011efe:	3314      	adds	r3, #20
 8011f00:	2202      	movs	r2, #2
 8011f02:	701a      	strb	r2, [r3, #0]
 8011f04:	e01e      	b.n	8011f44 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011f06:	4915      	ldr	r1, [pc, #84]	; (8011f5c <etharp_tmr+0x14c>)
 8011f08:	687a      	ldr	r2, [r7, #4]
 8011f0a:	4613      	mov	r3, r2
 8011f0c:	005b      	lsls	r3, r3, #1
 8011f0e:	4413      	add	r3, r2
 8011f10:	00db      	lsls	r3, r3, #3
 8011f12:	440b      	add	r3, r1
 8011f14:	3314      	adds	r3, #20
 8011f16:	781b      	ldrb	r3, [r3, #0]
 8011f18:	2b01      	cmp	r3, #1
 8011f1a:	d113      	bne.n	8011f44 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8011f1c:	490f      	ldr	r1, [pc, #60]	; (8011f5c <etharp_tmr+0x14c>)
 8011f1e:	687a      	ldr	r2, [r7, #4]
 8011f20:	4613      	mov	r3, r2
 8011f22:	005b      	lsls	r3, r3, #1
 8011f24:	4413      	add	r3, r2
 8011f26:	00db      	lsls	r3, r3, #3
 8011f28:	440b      	add	r3, r1
 8011f2a:	3308      	adds	r3, #8
 8011f2c:	6818      	ldr	r0, [r3, #0]
 8011f2e:	687a      	ldr	r2, [r7, #4]
 8011f30:	4613      	mov	r3, r2
 8011f32:	005b      	lsls	r3, r3, #1
 8011f34:	4413      	add	r3, r2
 8011f36:	00db      	lsls	r3, r3, #3
 8011f38:	4a08      	ldr	r2, [pc, #32]	; (8011f5c <etharp_tmr+0x14c>)
 8011f3a:	4413      	add	r3, r2
 8011f3c:	3304      	adds	r3, #4
 8011f3e:	4619      	mov	r1, r3
 8011f40:	f000 fe6e 	bl	8012c20 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	3301      	adds	r3, #1
 8011f48:	607b      	str	r3, [r7, #4]
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	2b09      	cmp	r3, #9
 8011f4e:	f77f af65 	ble.w	8011e1c <etharp_tmr+0xc>
      }
    }
  }
}
 8011f52:	bf00      	nop
 8011f54:	bf00      	nop
 8011f56:	3708      	adds	r7, #8
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	bd80      	pop	{r7, pc}
 8011f5c:	24005674 	.word	0x24005674

08011f60 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b08a      	sub	sp, #40	; 0x28
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	60f8      	str	r0, [r7, #12]
 8011f68:	460b      	mov	r3, r1
 8011f6a:	607a      	str	r2, [r7, #4]
 8011f6c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8011f6e:	230a      	movs	r3, #10
 8011f70:	84fb      	strh	r3, [r7, #38]	; 0x26
 8011f72:	230a      	movs	r3, #10
 8011f74:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8011f76:	230a      	movs	r3, #10
 8011f78:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8011f7a:	2300      	movs	r3, #0
 8011f7c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8011f7e:	230a      	movs	r3, #10
 8011f80:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8011f82:	2300      	movs	r3, #0
 8011f84:	83bb      	strh	r3, [r7, #28]
 8011f86:	2300      	movs	r3, #0
 8011f88:	837b      	strh	r3, [r7, #26]
 8011f8a:	2300      	movs	r3, #0
 8011f8c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011f8e:	2300      	movs	r3, #0
 8011f90:	843b      	strh	r3, [r7, #32]
 8011f92:	e0ae      	b.n	80120f2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8011f94:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011f98:	49a6      	ldr	r1, [pc, #664]	; (8012234 <etharp_find_entry+0x2d4>)
 8011f9a:	4613      	mov	r3, r2
 8011f9c:	005b      	lsls	r3, r3, #1
 8011f9e:	4413      	add	r3, r2
 8011fa0:	00db      	lsls	r3, r3, #3
 8011fa2:	440b      	add	r3, r1
 8011fa4:	3314      	adds	r3, #20
 8011fa6:	781b      	ldrb	r3, [r3, #0]
 8011fa8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8011faa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011fae:	2b0a      	cmp	r3, #10
 8011fb0:	d105      	bne.n	8011fbe <etharp_find_entry+0x5e>
 8011fb2:	7dfb      	ldrb	r3, [r7, #23]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d102      	bne.n	8011fbe <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8011fb8:	8c3b      	ldrh	r3, [r7, #32]
 8011fba:	847b      	strh	r3, [r7, #34]	; 0x22
 8011fbc:	e095      	b.n	80120ea <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8011fbe:	7dfb      	ldrb	r3, [r7, #23]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	f000 8092 	beq.w	80120ea <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8011fc6:	7dfb      	ldrb	r3, [r7, #23]
 8011fc8:	2b01      	cmp	r3, #1
 8011fca:	d009      	beq.n	8011fe0 <etharp_find_entry+0x80>
 8011fcc:	7dfb      	ldrb	r3, [r7, #23]
 8011fce:	2b01      	cmp	r3, #1
 8011fd0:	d806      	bhi.n	8011fe0 <etharp_find_entry+0x80>
 8011fd2:	4b99      	ldr	r3, [pc, #612]	; (8012238 <etharp_find_entry+0x2d8>)
 8011fd4:	f240 1223 	movw	r2, #291	; 0x123
 8011fd8:	4998      	ldr	r1, [pc, #608]	; (801223c <etharp_find_entry+0x2dc>)
 8011fda:	4899      	ldr	r0, [pc, #612]	; (8012240 <etharp_find_entry+0x2e0>)
 8011fdc:	f00e fdc6 	bl	8020b6c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d020      	beq.n	8012028 <etharp_find_entry+0xc8>
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	6819      	ldr	r1, [r3, #0]
 8011fea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011fee:	4891      	ldr	r0, [pc, #580]	; (8012234 <etharp_find_entry+0x2d4>)
 8011ff0:	4613      	mov	r3, r2
 8011ff2:	005b      	lsls	r3, r3, #1
 8011ff4:	4413      	add	r3, r2
 8011ff6:	00db      	lsls	r3, r3, #3
 8011ff8:	4403      	add	r3, r0
 8011ffa:	3304      	adds	r3, #4
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	4299      	cmp	r1, r3
 8012000:	d112      	bne.n	8012028 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	2b00      	cmp	r3, #0
 8012006:	d00c      	beq.n	8012022 <etharp_find_entry+0xc2>
 8012008:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801200c:	4989      	ldr	r1, [pc, #548]	; (8012234 <etharp_find_entry+0x2d4>)
 801200e:	4613      	mov	r3, r2
 8012010:	005b      	lsls	r3, r3, #1
 8012012:	4413      	add	r3, r2
 8012014:	00db      	lsls	r3, r3, #3
 8012016:	440b      	add	r3, r1
 8012018:	3308      	adds	r3, #8
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	687a      	ldr	r2, [r7, #4]
 801201e:	429a      	cmp	r2, r3
 8012020:	d102      	bne.n	8012028 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8012022:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012026:	e100      	b.n	801222a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8012028:	7dfb      	ldrb	r3, [r7, #23]
 801202a:	2b01      	cmp	r3, #1
 801202c:	d140      	bne.n	80120b0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801202e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012032:	4980      	ldr	r1, [pc, #512]	; (8012234 <etharp_find_entry+0x2d4>)
 8012034:	4613      	mov	r3, r2
 8012036:	005b      	lsls	r3, r3, #1
 8012038:	4413      	add	r3, r2
 801203a:	00db      	lsls	r3, r3, #3
 801203c:	440b      	add	r3, r1
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	2b00      	cmp	r3, #0
 8012042:	d01a      	beq.n	801207a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8012044:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012048:	497a      	ldr	r1, [pc, #488]	; (8012234 <etharp_find_entry+0x2d4>)
 801204a:	4613      	mov	r3, r2
 801204c:	005b      	lsls	r3, r3, #1
 801204e:	4413      	add	r3, r2
 8012050:	00db      	lsls	r3, r3, #3
 8012052:	440b      	add	r3, r1
 8012054:	3312      	adds	r3, #18
 8012056:	881b      	ldrh	r3, [r3, #0]
 8012058:	8bba      	ldrh	r2, [r7, #28]
 801205a:	429a      	cmp	r2, r3
 801205c:	d845      	bhi.n	80120ea <etharp_find_entry+0x18a>
            old_queue = i;
 801205e:	8c3b      	ldrh	r3, [r7, #32]
 8012060:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8012062:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012066:	4973      	ldr	r1, [pc, #460]	; (8012234 <etharp_find_entry+0x2d4>)
 8012068:	4613      	mov	r3, r2
 801206a:	005b      	lsls	r3, r3, #1
 801206c:	4413      	add	r3, r2
 801206e:	00db      	lsls	r3, r3, #3
 8012070:	440b      	add	r3, r1
 8012072:	3312      	adds	r3, #18
 8012074:	881b      	ldrh	r3, [r3, #0]
 8012076:	83bb      	strh	r3, [r7, #28]
 8012078:	e037      	b.n	80120ea <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801207a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801207e:	496d      	ldr	r1, [pc, #436]	; (8012234 <etharp_find_entry+0x2d4>)
 8012080:	4613      	mov	r3, r2
 8012082:	005b      	lsls	r3, r3, #1
 8012084:	4413      	add	r3, r2
 8012086:	00db      	lsls	r3, r3, #3
 8012088:	440b      	add	r3, r1
 801208a:	3312      	adds	r3, #18
 801208c:	881b      	ldrh	r3, [r3, #0]
 801208e:	8b7a      	ldrh	r2, [r7, #26]
 8012090:	429a      	cmp	r2, r3
 8012092:	d82a      	bhi.n	80120ea <etharp_find_entry+0x18a>
            old_pending = i;
 8012094:	8c3b      	ldrh	r3, [r7, #32]
 8012096:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8012098:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801209c:	4965      	ldr	r1, [pc, #404]	; (8012234 <etharp_find_entry+0x2d4>)
 801209e:	4613      	mov	r3, r2
 80120a0:	005b      	lsls	r3, r3, #1
 80120a2:	4413      	add	r3, r2
 80120a4:	00db      	lsls	r3, r3, #3
 80120a6:	440b      	add	r3, r1
 80120a8:	3312      	adds	r3, #18
 80120aa:	881b      	ldrh	r3, [r3, #0]
 80120ac:	837b      	strh	r3, [r7, #26]
 80120ae:	e01c      	b.n	80120ea <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80120b0:	7dfb      	ldrb	r3, [r7, #23]
 80120b2:	2b01      	cmp	r3, #1
 80120b4:	d919      	bls.n	80120ea <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80120b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80120ba:	495e      	ldr	r1, [pc, #376]	; (8012234 <etharp_find_entry+0x2d4>)
 80120bc:	4613      	mov	r3, r2
 80120be:	005b      	lsls	r3, r3, #1
 80120c0:	4413      	add	r3, r2
 80120c2:	00db      	lsls	r3, r3, #3
 80120c4:	440b      	add	r3, r1
 80120c6:	3312      	adds	r3, #18
 80120c8:	881b      	ldrh	r3, [r3, #0]
 80120ca:	8b3a      	ldrh	r2, [r7, #24]
 80120cc:	429a      	cmp	r2, r3
 80120ce:	d80c      	bhi.n	80120ea <etharp_find_entry+0x18a>
            old_stable = i;
 80120d0:	8c3b      	ldrh	r3, [r7, #32]
 80120d2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80120d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80120d8:	4956      	ldr	r1, [pc, #344]	; (8012234 <etharp_find_entry+0x2d4>)
 80120da:	4613      	mov	r3, r2
 80120dc:	005b      	lsls	r3, r3, #1
 80120de:	4413      	add	r3, r2
 80120e0:	00db      	lsls	r3, r3, #3
 80120e2:	440b      	add	r3, r1
 80120e4:	3312      	adds	r3, #18
 80120e6:	881b      	ldrh	r3, [r3, #0]
 80120e8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80120ea:	8c3b      	ldrh	r3, [r7, #32]
 80120ec:	3301      	adds	r3, #1
 80120ee:	b29b      	uxth	r3, r3
 80120f0:	843b      	strh	r3, [r7, #32]
 80120f2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80120f6:	2b09      	cmp	r3, #9
 80120f8:	f77f af4c 	ble.w	8011f94 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80120fc:	7afb      	ldrb	r3, [r7, #11]
 80120fe:	f003 0302 	and.w	r3, r3, #2
 8012102:	2b00      	cmp	r3, #0
 8012104:	d108      	bne.n	8012118 <etharp_find_entry+0x1b8>
 8012106:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801210a:	2b0a      	cmp	r3, #10
 801210c:	d107      	bne.n	801211e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801210e:	7afb      	ldrb	r3, [r7, #11]
 8012110:	f003 0301 	and.w	r3, r3, #1
 8012114:	2b00      	cmp	r3, #0
 8012116:	d102      	bne.n	801211e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8012118:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801211c:	e085      	b.n	801222a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801211e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012122:	2b09      	cmp	r3, #9
 8012124:	dc02      	bgt.n	801212c <etharp_find_entry+0x1cc>
    i = empty;
 8012126:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012128:	843b      	strh	r3, [r7, #32]
 801212a:	e039      	b.n	80121a0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801212c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8012130:	2b09      	cmp	r3, #9
 8012132:	dc14      	bgt.n	801215e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8012134:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012136:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8012138:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801213c:	493d      	ldr	r1, [pc, #244]	; (8012234 <etharp_find_entry+0x2d4>)
 801213e:	4613      	mov	r3, r2
 8012140:	005b      	lsls	r3, r3, #1
 8012142:	4413      	add	r3, r2
 8012144:	00db      	lsls	r3, r3, #3
 8012146:	440b      	add	r3, r1
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	2b00      	cmp	r3, #0
 801214c:	d018      	beq.n	8012180 <etharp_find_entry+0x220>
 801214e:	4b3a      	ldr	r3, [pc, #232]	; (8012238 <etharp_find_entry+0x2d8>)
 8012150:	f240 126d 	movw	r2, #365	; 0x16d
 8012154:	493b      	ldr	r1, [pc, #236]	; (8012244 <etharp_find_entry+0x2e4>)
 8012156:	483a      	ldr	r0, [pc, #232]	; (8012240 <etharp_find_entry+0x2e0>)
 8012158:	f00e fd08 	bl	8020b6c <iprintf>
 801215c:	e010      	b.n	8012180 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801215e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8012162:	2b09      	cmp	r3, #9
 8012164:	dc02      	bgt.n	801216c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8012166:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012168:	843b      	strh	r3, [r7, #32]
 801216a:	e009      	b.n	8012180 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801216c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012170:	2b09      	cmp	r3, #9
 8012172:	dc02      	bgt.n	801217a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8012174:	8bfb      	ldrh	r3, [r7, #30]
 8012176:	843b      	strh	r3, [r7, #32]
 8012178:	e002      	b.n	8012180 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801217a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801217e:	e054      	b.n	801222a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012180:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012184:	2b09      	cmp	r3, #9
 8012186:	dd06      	ble.n	8012196 <etharp_find_entry+0x236>
 8012188:	4b2b      	ldr	r3, [pc, #172]	; (8012238 <etharp_find_entry+0x2d8>)
 801218a:	f240 127f 	movw	r2, #383	; 0x17f
 801218e:	492e      	ldr	r1, [pc, #184]	; (8012248 <etharp_find_entry+0x2e8>)
 8012190:	482b      	ldr	r0, [pc, #172]	; (8012240 <etharp_find_entry+0x2e0>)
 8012192:	f00e fceb 	bl	8020b6c <iprintf>
    etharp_free_entry(i);
 8012196:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801219a:	4618      	mov	r0, r3
 801219c:	f7ff fe06 	bl	8011dac <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80121a0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80121a4:	2b09      	cmp	r3, #9
 80121a6:	dd06      	ble.n	80121b6 <etharp_find_entry+0x256>
 80121a8:	4b23      	ldr	r3, [pc, #140]	; (8012238 <etharp_find_entry+0x2d8>)
 80121aa:	f240 1283 	movw	r2, #387	; 0x183
 80121ae:	4926      	ldr	r1, [pc, #152]	; (8012248 <etharp_find_entry+0x2e8>)
 80121b0:	4823      	ldr	r0, [pc, #140]	; (8012240 <etharp_find_entry+0x2e0>)
 80121b2:	f00e fcdb 	bl	8020b6c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80121b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80121ba:	491e      	ldr	r1, [pc, #120]	; (8012234 <etharp_find_entry+0x2d4>)
 80121bc:	4613      	mov	r3, r2
 80121be:	005b      	lsls	r3, r3, #1
 80121c0:	4413      	add	r3, r2
 80121c2:	00db      	lsls	r3, r3, #3
 80121c4:	440b      	add	r3, r1
 80121c6:	3314      	adds	r3, #20
 80121c8:	781b      	ldrb	r3, [r3, #0]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d006      	beq.n	80121dc <etharp_find_entry+0x27c>
 80121ce:	4b1a      	ldr	r3, [pc, #104]	; (8012238 <etharp_find_entry+0x2d8>)
 80121d0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80121d4:	491d      	ldr	r1, [pc, #116]	; (801224c <etharp_find_entry+0x2ec>)
 80121d6:	481a      	ldr	r0, [pc, #104]	; (8012240 <etharp_find_entry+0x2e0>)
 80121d8:	f00e fcc8 	bl	8020b6c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d00b      	beq.n	80121fa <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80121e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	6819      	ldr	r1, [r3, #0]
 80121ea:	4812      	ldr	r0, [pc, #72]	; (8012234 <etharp_find_entry+0x2d4>)
 80121ec:	4613      	mov	r3, r2
 80121ee:	005b      	lsls	r3, r3, #1
 80121f0:	4413      	add	r3, r2
 80121f2:	00db      	lsls	r3, r3, #3
 80121f4:	4403      	add	r3, r0
 80121f6:	3304      	adds	r3, #4
 80121f8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80121fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80121fe:	490d      	ldr	r1, [pc, #52]	; (8012234 <etharp_find_entry+0x2d4>)
 8012200:	4613      	mov	r3, r2
 8012202:	005b      	lsls	r3, r3, #1
 8012204:	4413      	add	r3, r2
 8012206:	00db      	lsls	r3, r3, #3
 8012208:	440b      	add	r3, r1
 801220a:	3312      	adds	r3, #18
 801220c:	2200      	movs	r2, #0
 801220e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8012210:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012214:	4907      	ldr	r1, [pc, #28]	; (8012234 <etharp_find_entry+0x2d4>)
 8012216:	4613      	mov	r3, r2
 8012218:	005b      	lsls	r3, r3, #1
 801221a:	4413      	add	r3, r2
 801221c:	00db      	lsls	r3, r3, #3
 801221e:	440b      	add	r3, r1
 8012220:	3308      	adds	r3, #8
 8012222:	687a      	ldr	r2, [r7, #4]
 8012224:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8012226:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801222a:	4618      	mov	r0, r3
 801222c:	3728      	adds	r7, #40	; 0x28
 801222e:	46bd      	mov	sp, r7
 8012230:	bd80      	pop	{r7, pc}
 8012232:	bf00      	nop
 8012234:	24005674 	.word	0x24005674
 8012238:	08025ec0 	.word	0x08025ec0
 801223c:	08025f24 	.word	0x08025f24
 8012240:	08025f64 	.word	0x08025f64
 8012244:	08025f8c 	.word	0x08025f8c
 8012248:	08025fa4 	.word	0x08025fa4
 801224c:	08025fb8 	.word	0x08025fb8

08012250 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8012250:	b580      	push	{r7, lr}
 8012252:	b088      	sub	sp, #32
 8012254:	af02      	add	r7, sp, #8
 8012256:	60f8      	str	r0, [r7, #12]
 8012258:	60b9      	str	r1, [r7, #8]
 801225a:	607a      	str	r2, [r7, #4]
 801225c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012264:	2b06      	cmp	r3, #6
 8012266:	d006      	beq.n	8012276 <etharp_update_arp_entry+0x26>
 8012268:	4b48      	ldr	r3, [pc, #288]	; (801238c <etharp_update_arp_entry+0x13c>)
 801226a:	f240 12a9 	movw	r2, #425	; 0x1a9
 801226e:	4948      	ldr	r1, [pc, #288]	; (8012390 <etharp_update_arp_entry+0x140>)
 8012270:	4848      	ldr	r0, [pc, #288]	; (8012394 <etharp_update_arp_entry+0x144>)
 8012272:	f00e fc7b 	bl	8020b6c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8012276:	68bb      	ldr	r3, [r7, #8]
 8012278:	2b00      	cmp	r3, #0
 801227a:	d012      	beq.n	80122a2 <etharp_update_arp_entry+0x52>
 801227c:	68bb      	ldr	r3, [r7, #8]
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d00e      	beq.n	80122a2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012284:	68bb      	ldr	r3, [r7, #8]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	68f9      	ldr	r1, [r7, #12]
 801228a:	4618      	mov	r0, r3
 801228c:	f001 facc 	bl	8013828 <ip4_addr_isbroadcast_u32>
 8012290:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8012292:	2b00      	cmp	r3, #0
 8012294:	d105      	bne.n	80122a2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012296:	68bb      	ldr	r3, [r7, #8]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801229e:	2be0      	cmp	r3, #224	; 0xe0
 80122a0:	d102      	bne.n	80122a8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80122a2:	f06f 030f 	mvn.w	r3, #15
 80122a6:	e06c      	b.n	8012382 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80122a8:	78fb      	ldrb	r3, [r7, #3]
 80122aa:	68fa      	ldr	r2, [r7, #12]
 80122ac:	4619      	mov	r1, r3
 80122ae:	68b8      	ldr	r0, [r7, #8]
 80122b0:	f7ff fe56 	bl	8011f60 <etharp_find_entry>
 80122b4:	4603      	mov	r3, r0
 80122b6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80122b8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	da02      	bge.n	80122c6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80122c0:	8afb      	ldrh	r3, [r7, #22]
 80122c2:	b25b      	sxtb	r3, r3
 80122c4:	e05d      	b.n	8012382 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80122c6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80122ca:	4933      	ldr	r1, [pc, #204]	; (8012398 <etharp_update_arp_entry+0x148>)
 80122cc:	4613      	mov	r3, r2
 80122ce:	005b      	lsls	r3, r3, #1
 80122d0:	4413      	add	r3, r2
 80122d2:	00db      	lsls	r3, r3, #3
 80122d4:	440b      	add	r3, r1
 80122d6:	3314      	adds	r3, #20
 80122d8:	2202      	movs	r2, #2
 80122da:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80122dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80122e0:	492d      	ldr	r1, [pc, #180]	; (8012398 <etharp_update_arp_entry+0x148>)
 80122e2:	4613      	mov	r3, r2
 80122e4:	005b      	lsls	r3, r3, #1
 80122e6:	4413      	add	r3, r2
 80122e8:	00db      	lsls	r3, r3, #3
 80122ea:	440b      	add	r3, r1
 80122ec:	3308      	adds	r3, #8
 80122ee:	68fa      	ldr	r2, [r7, #12]
 80122f0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80122f2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80122f6:	4613      	mov	r3, r2
 80122f8:	005b      	lsls	r3, r3, #1
 80122fa:	4413      	add	r3, r2
 80122fc:	00db      	lsls	r3, r3, #3
 80122fe:	3308      	adds	r3, #8
 8012300:	4a25      	ldr	r2, [pc, #148]	; (8012398 <etharp_update_arp_entry+0x148>)
 8012302:	4413      	add	r3, r2
 8012304:	3304      	adds	r3, #4
 8012306:	2206      	movs	r2, #6
 8012308:	6879      	ldr	r1, [r7, #4]
 801230a:	4618      	mov	r0, r3
 801230c:	f00d fd0c 	bl	801fd28 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012310:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012314:	4920      	ldr	r1, [pc, #128]	; (8012398 <etharp_update_arp_entry+0x148>)
 8012316:	4613      	mov	r3, r2
 8012318:	005b      	lsls	r3, r3, #1
 801231a:	4413      	add	r3, r2
 801231c:	00db      	lsls	r3, r3, #3
 801231e:	440b      	add	r3, r1
 8012320:	3312      	adds	r3, #18
 8012322:	2200      	movs	r2, #0
 8012324:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8012326:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801232a:	491b      	ldr	r1, [pc, #108]	; (8012398 <etharp_update_arp_entry+0x148>)
 801232c:	4613      	mov	r3, r2
 801232e:	005b      	lsls	r3, r3, #1
 8012330:	4413      	add	r3, r2
 8012332:	00db      	lsls	r3, r3, #3
 8012334:	440b      	add	r3, r1
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d021      	beq.n	8012380 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801233c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012340:	4915      	ldr	r1, [pc, #84]	; (8012398 <etharp_update_arp_entry+0x148>)
 8012342:	4613      	mov	r3, r2
 8012344:	005b      	lsls	r3, r3, #1
 8012346:	4413      	add	r3, r2
 8012348:	00db      	lsls	r3, r3, #3
 801234a:	440b      	add	r3, r1
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8012350:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012354:	4910      	ldr	r1, [pc, #64]	; (8012398 <etharp_update_arp_entry+0x148>)
 8012356:	4613      	mov	r3, r2
 8012358:	005b      	lsls	r3, r3, #1
 801235a:	4413      	add	r3, r2
 801235c:	00db      	lsls	r3, r3, #3
 801235e:	440b      	add	r3, r1
 8012360:	2200      	movs	r2, #0
 8012362:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801236a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801236e:	9300      	str	r3, [sp, #0]
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	6939      	ldr	r1, [r7, #16]
 8012374:	68f8      	ldr	r0, [r7, #12]
 8012376:	f000 fcf3 	bl	8012d60 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801237a:	6938      	ldr	r0, [r7, #16]
 801237c:	f003 fbe4 	bl	8015b48 <pbuf_free>
  }
  return ERR_OK;
 8012380:	2300      	movs	r3, #0
}
 8012382:	4618      	mov	r0, r3
 8012384:	3718      	adds	r7, #24
 8012386:	46bd      	mov	sp, r7
 8012388:	bd80      	pop	{r7, pc}
 801238a:	bf00      	nop
 801238c:	08025ec0 	.word	0x08025ec0
 8012390:	08025fe4 	.word	0x08025fe4
 8012394:	08025f64 	.word	0x08025f64
 8012398:	24005674 	.word	0x24005674

0801239c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801239c:	b580      	push	{r7, lr}
 801239e:	b084      	sub	sp, #16
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80123a4:	2300      	movs	r3, #0
 80123a6:	60fb      	str	r3, [r7, #12]
 80123a8:	e01e      	b.n	80123e8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80123aa:	4913      	ldr	r1, [pc, #76]	; (80123f8 <etharp_cleanup_netif+0x5c>)
 80123ac:	68fa      	ldr	r2, [r7, #12]
 80123ae:	4613      	mov	r3, r2
 80123b0:	005b      	lsls	r3, r3, #1
 80123b2:	4413      	add	r3, r2
 80123b4:	00db      	lsls	r3, r3, #3
 80123b6:	440b      	add	r3, r1
 80123b8:	3314      	adds	r3, #20
 80123ba:	781b      	ldrb	r3, [r3, #0]
 80123bc:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80123be:	7afb      	ldrb	r3, [r7, #11]
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d00e      	beq.n	80123e2 <etharp_cleanup_netif+0x46>
 80123c4:	490c      	ldr	r1, [pc, #48]	; (80123f8 <etharp_cleanup_netif+0x5c>)
 80123c6:	68fa      	ldr	r2, [r7, #12]
 80123c8:	4613      	mov	r3, r2
 80123ca:	005b      	lsls	r3, r3, #1
 80123cc:	4413      	add	r3, r2
 80123ce:	00db      	lsls	r3, r3, #3
 80123d0:	440b      	add	r3, r1
 80123d2:	3308      	adds	r3, #8
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	687a      	ldr	r2, [r7, #4]
 80123d8:	429a      	cmp	r2, r3
 80123da:	d102      	bne.n	80123e2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80123dc:	68f8      	ldr	r0, [r7, #12]
 80123de:	f7ff fce5 	bl	8011dac <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	3301      	adds	r3, #1
 80123e6:	60fb      	str	r3, [r7, #12]
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	2b09      	cmp	r3, #9
 80123ec:	dddd      	ble.n	80123aa <etharp_cleanup_netif+0xe>
    }
  }
}
 80123ee:	bf00      	nop
 80123f0:	bf00      	nop
 80123f2:	3710      	adds	r7, #16
 80123f4:	46bd      	mov	sp, r7
 80123f6:	bd80      	pop	{r7, pc}
 80123f8:	24005674 	.word	0x24005674

080123fc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80123fc:	b5b0      	push	{r4, r5, r7, lr}
 80123fe:	b08a      	sub	sp, #40	; 0x28
 8012400:	af04      	add	r7, sp, #16
 8012402:	6078      	str	r0, [r7, #4]
 8012404:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012406:	683b      	ldr	r3, [r7, #0]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d107      	bne.n	801241c <etharp_input+0x20>
 801240c:	4b3d      	ldr	r3, [pc, #244]	; (8012504 <etharp_input+0x108>)
 801240e:	f240 228a 	movw	r2, #650	; 0x28a
 8012412:	493d      	ldr	r1, [pc, #244]	; (8012508 <etharp_input+0x10c>)
 8012414:	483d      	ldr	r0, [pc, #244]	; (801250c <etharp_input+0x110>)
 8012416:	f00e fba9 	bl	8020b6c <iprintf>
 801241a:	e06f      	b.n	80124fc <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	685b      	ldr	r3, [r3, #4]
 8012420:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012422:	693b      	ldr	r3, [r7, #16]
 8012424:	881b      	ldrh	r3, [r3, #0]
 8012426:	b29b      	uxth	r3, r3
 8012428:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801242c:	d10c      	bne.n	8012448 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801242e:	693b      	ldr	r3, [r7, #16]
 8012430:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012432:	2b06      	cmp	r3, #6
 8012434:	d108      	bne.n	8012448 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012436:	693b      	ldr	r3, [r7, #16]
 8012438:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801243a:	2b04      	cmp	r3, #4
 801243c:	d104      	bne.n	8012448 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801243e:	693b      	ldr	r3, [r7, #16]
 8012440:	885b      	ldrh	r3, [r3, #2]
 8012442:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012444:	2b08      	cmp	r3, #8
 8012446:	d003      	beq.n	8012450 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012448:	6878      	ldr	r0, [r7, #4]
 801244a:	f003 fb7d 	bl	8015b48 <pbuf_free>
    return;
 801244e:	e055      	b.n	80124fc <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8012450:	693b      	ldr	r3, [r7, #16]
 8012452:	330e      	adds	r3, #14
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8012458:	693b      	ldr	r3, [r7, #16]
 801245a:	3318      	adds	r3, #24
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012460:	683b      	ldr	r3, [r7, #0]
 8012462:	3304      	adds	r3, #4
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d102      	bne.n	8012470 <etharp_input+0x74>
    for_us = 0;
 801246a:	2300      	movs	r3, #0
 801246c:	75fb      	strb	r3, [r7, #23]
 801246e:	e009      	b.n	8012484 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012470:	68ba      	ldr	r2, [r7, #8]
 8012472:	683b      	ldr	r3, [r7, #0]
 8012474:	3304      	adds	r3, #4
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	429a      	cmp	r2, r3
 801247a:	bf0c      	ite	eq
 801247c:	2301      	moveq	r3, #1
 801247e:	2300      	movne	r3, #0
 8012480:	b2db      	uxtb	r3, r3
 8012482:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012484:	693b      	ldr	r3, [r7, #16]
 8012486:	f103 0208 	add.w	r2, r3, #8
 801248a:	7dfb      	ldrb	r3, [r7, #23]
 801248c:	2b00      	cmp	r3, #0
 801248e:	d001      	beq.n	8012494 <etharp_input+0x98>
 8012490:	2301      	movs	r3, #1
 8012492:	e000      	b.n	8012496 <etharp_input+0x9a>
 8012494:	2302      	movs	r3, #2
 8012496:	f107 010c 	add.w	r1, r7, #12
 801249a:	6838      	ldr	r0, [r7, #0]
 801249c:	f7ff fed8 	bl	8012250 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80124a0:	693b      	ldr	r3, [r7, #16]
 80124a2:	88db      	ldrh	r3, [r3, #6]
 80124a4:	b29b      	uxth	r3, r3
 80124a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80124aa:	d003      	beq.n	80124b4 <etharp_input+0xb8>
 80124ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80124b0:	d01e      	beq.n	80124f0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80124b2:	e020      	b.n	80124f6 <etharp_input+0xfa>
      if (for_us) {
 80124b4:	7dfb      	ldrb	r3, [r7, #23]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d01c      	beq.n	80124f4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80124ba:	683b      	ldr	r3, [r7, #0]
 80124bc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80124c0:	693b      	ldr	r3, [r7, #16]
 80124c2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80124c6:	683b      	ldr	r3, [r7, #0]
 80124c8:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80124cc:	683b      	ldr	r3, [r7, #0]
 80124ce:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80124d0:	693a      	ldr	r2, [r7, #16]
 80124d2:	3208      	adds	r2, #8
        etharp_raw(netif,
 80124d4:	2102      	movs	r1, #2
 80124d6:	9103      	str	r1, [sp, #12]
 80124d8:	f107 010c 	add.w	r1, r7, #12
 80124dc:	9102      	str	r1, [sp, #8]
 80124de:	9201      	str	r2, [sp, #4]
 80124e0:	9300      	str	r3, [sp, #0]
 80124e2:	462b      	mov	r3, r5
 80124e4:	4622      	mov	r2, r4
 80124e6:	4601      	mov	r1, r0
 80124e8:	6838      	ldr	r0, [r7, #0]
 80124ea:	f000 faeb 	bl	8012ac4 <etharp_raw>
      break;
 80124ee:	e001      	b.n	80124f4 <etharp_input+0xf8>
      break;
 80124f0:	bf00      	nop
 80124f2:	e000      	b.n	80124f6 <etharp_input+0xfa>
      break;
 80124f4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80124f6:	6878      	ldr	r0, [r7, #4]
 80124f8:	f003 fb26 	bl	8015b48 <pbuf_free>
}
 80124fc:	3718      	adds	r7, #24
 80124fe:	46bd      	mov	sp, r7
 8012500:	bdb0      	pop	{r4, r5, r7, pc}
 8012502:	bf00      	nop
 8012504:	08025ec0 	.word	0x08025ec0
 8012508:	0802603c 	.word	0x0802603c
 801250c:	08025f64 	.word	0x08025f64

08012510 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8012510:	b580      	push	{r7, lr}
 8012512:	b086      	sub	sp, #24
 8012514:	af02      	add	r7, sp, #8
 8012516:	60f8      	str	r0, [r7, #12]
 8012518:	60b9      	str	r1, [r7, #8]
 801251a:	4613      	mov	r3, r2
 801251c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801251e:	79fa      	ldrb	r2, [r7, #7]
 8012520:	4944      	ldr	r1, [pc, #272]	; (8012634 <etharp_output_to_arp_index+0x124>)
 8012522:	4613      	mov	r3, r2
 8012524:	005b      	lsls	r3, r3, #1
 8012526:	4413      	add	r3, r2
 8012528:	00db      	lsls	r3, r3, #3
 801252a:	440b      	add	r3, r1
 801252c:	3314      	adds	r3, #20
 801252e:	781b      	ldrb	r3, [r3, #0]
 8012530:	2b01      	cmp	r3, #1
 8012532:	d806      	bhi.n	8012542 <etharp_output_to_arp_index+0x32>
 8012534:	4b40      	ldr	r3, [pc, #256]	; (8012638 <etharp_output_to_arp_index+0x128>)
 8012536:	f240 22ee 	movw	r2, #750	; 0x2ee
 801253a:	4940      	ldr	r1, [pc, #256]	; (801263c <etharp_output_to_arp_index+0x12c>)
 801253c:	4840      	ldr	r0, [pc, #256]	; (8012640 <etharp_output_to_arp_index+0x130>)
 801253e:	f00e fb15 	bl	8020b6c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8012542:	79fa      	ldrb	r2, [r7, #7]
 8012544:	493b      	ldr	r1, [pc, #236]	; (8012634 <etharp_output_to_arp_index+0x124>)
 8012546:	4613      	mov	r3, r2
 8012548:	005b      	lsls	r3, r3, #1
 801254a:	4413      	add	r3, r2
 801254c:	00db      	lsls	r3, r3, #3
 801254e:	440b      	add	r3, r1
 8012550:	3314      	adds	r3, #20
 8012552:	781b      	ldrb	r3, [r3, #0]
 8012554:	2b02      	cmp	r3, #2
 8012556:	d153      	bne.n	8012600 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012558:	79fa      	ldrb	r2, [r7, #7]
 801255a:	4936      	ldr	r1, [pc, #216]	; (8012634 <etharp_output_to_arp_index+0x124>)
 801255c:	4613      	mov	r3, r2
 801255e:	005b      	lsls	r3, r3, #1
 8012560:	4413      	add	r3, r2
 8012562:	00db      	lsls	r3, r3, #3
 8012564:	440b      	add	r3, r1
 8012566:	3312      	adds	r3, #18
 8012568:	881b      	ldrh	r3, [r3, #0]
 801256a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801256e:	d919      	bls.n	80125a4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012570:	79fa      	ldrb	r2, [r7, #7]
 8012572:	4613      	mov	r3, r2
 8012574:	005b      	lsls	r3, r3, #1
 8012576:	4413      	add	r3, r2
 8012578:	00db      	lsls	r3, r3, #3
 801257a:	4a2e      	ldr	r2, [pc, #184]	; (8012634 <etharp_output_to_arp_index+0x124>)
 801257c:	4413      	add	r3, r2
 801257e:	3304      	adds	r3, #4
 8012580:	4619      	mov	r1, r3
 8012582:	68f8      	ldr	r0, [r7, #12]
 8012584:	f000 fb4c 	bl	8012c20 <etharp_request>
 8012588:	4603      	mov	r3, r0
 801258a:	2b00      	cmp	r3, #0
 801258c:	d138      	bne.n	8012600 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801258e:	79fa      	ldrb	r2, [r7, #7]
 8012590:	4928      	ldr	r1, [pc, #160]	; (8012634 <etharp_output_to_arp_index+0x124>)
 8012592:	4613      	mov	r3, r2
 8012594:	005b      	lsls	r3, r3, #1
 8012596:	4413      	add	r3, r2
 8012598:	00db      	lsls	r3, r3, #3
 801259a:	440b      	add	r3, r1
 801259c:	3314      	adds	r3, #20
 801259e:	2203      	movs	r2, #3
 80125a0:	701a      	strb	r2, [r3, #0]
 80125a2:	e02d      	b.n	8012600 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80125a4:	79fa      	ldrb	r2, [r7, #7]
 80125a6:	4923      	ldr	r1, [pc, #140]	; (8012634 <etharp_output_to_arp_index+0x124>)
 80125a8:	4613      	mov	r3, r2
 80125aa:	005b      	lsls	r3, r3, #1
 80125ac:	4413      	add	r3, r2
 80125ae:	00db      	lsls	r3, r3, #3
 80125b0:	440b      	add	r3, r1
 80125b2:	3312      	adds	r3, #18
 80125b4:	881b      	ldrh	r3, [r3, #0]
 80125b6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80125ba:	d321      	bcc.n	8012600 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80125bc:	79fa      	ldrb	r2, [r7, #7]
 80125be:	4613      	mov	r3, r2
 80125c0:	005b      	lsls	r3, r3, #1
 80125c2:	4413      	add	r3, r2
 80125c4:	00db      	lsls	r3, r3, #3
 80125c6:	4a1b      	ldr	r2, [pc, #108]	; (8012634 <etharp_output_to_arp_index+0x124>)
 80125c8:	4413      	add	r3, r2
 80125ca:	1d19      	adds	r1, r3, #4
 80125cc:	79fa      	ldrb	r2, [r7, #7]
 80125ce:	4613      	mov	r3, r2
 80125d0:	005b      	lsls	r3, r3, #1
 80125d2:	4413      	add	r3, r2
 80125d4:	00db      	lsls	r3, r3, #3
 80125d6:	3308      	adds	r3, #8
 80125d8:	4a16      	ldr	r2, [pc, #88]	; (8012634 <etharp_output_to_arp_index+0x124>)
 80125da:	4413      	add	r3, r2
 80125dc:	3304      	adds	r3, #4
 80125de:	461a      	mov	r2, r3
 80125e0:	68f8      	ldr	r0, [r7, #12]
 80125e2:	f000 fafb 	bl	8012bdc <etharp_request_dst>
 80125e6:	4603      	mov	r3, r0
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d109      	bne.n	8012600 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80125ec:	79fa      	ldrb	r2, [r7, #7]
 80125ee:	4911      	ldr	r1, [pc, #68]	; (8012634 <etharp_output_to_arp_index+0x124>)
 80125f0:	4613      	mov	r3, r2
 80125f2:	005b      	lsls	r3, r3, #1
 80125f4:	4413      	add	r3, r2
 80125f6:	00db      	lsls	r3, r3, #3
 80125f8:	440b      	add	r3, r1
 80125fa:	3314      	adds	r3, #20
 80125fc:	2203      	movs	r2, #3
 80125fe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8012606:	79fa      	ldrb	r2, [r7, #7]
 8012608:	4613      	mov	r3, r2
 801260a:	005b      	lsls	r3, r3, #1
 801260c:	4413      	add	r3, r2
 801260e:	00db      	lsls	r3, r3, #3
 8012610:	3308      	adds	r3, #8
 8012612:	4a08      	ldr	r2, [pc, #32]	; (8012634 <etharp_output_to_arp_index+0x124>)
 8012614:	4413      	add	r3, r2
 8012616:	3304      	adds	r3, #4
 8012618:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801261c:	9200      	str	r2, [sp, #0]
 801261e:	460a      	mov	r2, r1
 8012620:	68b9      	ldr	r1, [r7, #8]
 8012622:	68f8      	ldr	r0, [r7, #12]
 8012624:	f000 fb9c 	bl	8012d60 <ethernet_output>
 8012628:	4603      	mov	r3, r0
}
 801262a:	4618      	mov	r0, r3
 801262c:	3710      	adds	r7, #16
 801262e:	46bd      	mov	sp, r7
 8012630:	bd80      	pop	{r7, pc}
 8012632:	bf00      	nop
 8012634:	24005674 	.word	0x24005674
 8012638:	08025ec0 	.word	0x08025ec0
 801263c:	0802605c 	.word	0x0802605c
 8012640:	08025f64 	.word	0x08025f64

08012644 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8012644:	b580      	push	{r7, lr}
 8012646:	b08a      	sub	sp, #40	; 0x28
 8012648:	af02      	add	r7, sp, #8
 801264a:	60f8      	str	r0, [r7, #12]
 801264c:	60b9      	str	r1, [r7, #8]
 801264e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	2b00      	cmp	r3, #0
 8012658:	d106      	bne.n	8012668 <etharp_output+0x24>
 801265a:	4b73      	ldr	r3, [pc, #460]	; (8012828 <etharp_output+0x1e4>)
 801265c:	f240 321e 	movw	r2, #798	; 0x31e
 8012660:	4972      	ldr	r1, [pc, #456]	; (801282c <etharp_output+0x1e8>)
 8012662:	4873      	ldr	r0, [pc, #460]	; (8012830 <etharp_output+0x1ec>)
 8012664:	f00e fa82 	bl	8020b6c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012668:	68bb      	ldr	r3, [r7, #8]
 801266a:	2b00      	cmp	r3, #0
 801266c:	d106      	bne.n	801267c <etharp_output+0x38>
 801266e:	4b6e      	ldr	r3, [pc, #440]	; (8012828 <etharp_output+0x1e4>)
 8012670:	f240 321f 	movw	r2, #799	; 0x31f
 8012674:	496f      	ldr	r1, [pc, #444]	; (8012834 <etharp_output+0x1f0>)
 8012676:	486e      	ldr	r0, [pc, #440]	; (8012830 <etharp_output+0x1ec>)
 8012678:	f00e fa78 	bl	8020b6c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d106      	bne.n	8012690 <etharp_output+0x4c>
 8012682:	4b69      	ldr	r3, [pc, #420]	; (8012828 <etharp_output+0x1e4>)
 8012684:	f44f 7248 	mov.w	r2, #800	; 0x320
 8012688:	496b      	ldr	r1, [pc, #428]	; (8012838 <etharp_output+0x1f4>)
 801268a:	4869      	ldr	r0, [pc, #420]	; (8012830 <etharp_output+0x1ec>)
 801268c:	f00e fa6e 	bl	8020b6c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	68f9      	ldr	r1, [r7, #12]
 8012696:	4618      	mov	r0, r3
 8012698:	f001 f8c6 	bl	8013828 <ip4_addr_isbroadcast_u32>
 801269c:	4603      	mov	r3, r0
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d002      	beq.n	80126a8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80126a2:	4b66      	ldr	r3, [pc, #408]	; (801283c <etharp_output+0x1f8>)
 80126a4:	61fb      	str	r3, [r7, #28]
 80126a6:	e0af      	b.n	8012808 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80126b0:	2be0      	cmp	r3, #224	; 0xe0
 80126b2:	d118      	bne.n	80126e6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80126b4:	2301      	movs	r3, #1
 80126b6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80126b8:	2300      	movs	r3, #0
 80126ba:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80126bc:	235e      	movs	r3, #94	; 0x5e
 80126be:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	3301      	adds	r3, #1
 80126c4:	781b      	ldrb	r3, [r3, #0]
 80126c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80126ca:	b2db      	uxtb	r3, r3
 80126cc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	3302      	adds	r3, #2
 80126d2:	781b      	ldrb	r3, [r3, #0]
 80126d4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	3303      	adds	r3, #3
 80126da:	781b      	ldrb	r3, [r3, #0]
 80126dc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80126de:	f107 0310 	add.w	r3, r7, #16
 80126e2:	61fb      	str	r3, [r7, #28]
 80126e4:	e090      	b.n	8012808 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	681a      	ldr	r2, [r3, #0]
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	3304      	adds	r3, #4
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	405a      	eors	r2, r3
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	3308      	adds	r3, #8
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	4013      	ands	r3, r2
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d012      	beq.n	8012724 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012704:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8012708:	4293      	cmp	r3, r2
 801270a:	d00b      	beq.n	8012724 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	330c      	adds	r3, #12
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	2b00      	cmp	r3, #0
 8012714:	d003      	beq.n	801271e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	330c      	adds	r3, #12
 801271a:	61bb      	str	r3, [r7, #24]
 801271c:	e002      	b.n	8012724 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801271e:	f06f 0303 	mvn.w	r3, #3
 8012722:	e07d      	b.n	8012820 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012724:	4b46      	ldr	r3, [pc, #280]	; (8012840 <etharp_output+0x1fc>)
 8012726:	781b      	ldrb	r3, [r3, #0]
 8012728:	4619      	mov	r1, r3
 801272a:	4a46      	ldr	r2, [pc, #280]	; (8012844 <etharp_output+0x200>)
 801272c:	460b      	mov	r3, r1
 801272e:	005b      	lsls	r3, r3, #1
 8012730:	440b      	add	r3, r1
 8012732:	00db      	lsls	r3, r3, #3
 8012734:	4413      	add	r3, r2
 8012736:	3314      	adds	r3, #20
 8012738:	781b      	ldrb	r3, [r3, #0]
 801273a:	2b01      	cmp	r3, #1
 801273c:	d925      	bls.n	801278a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801273e:	4b40      	ldr	r3, [pc, #256]	; (8012840 <etharp_output+0x1fc>)
 8012740:	781b      	ldrb	r3, [r3, #0]
 8012742:	4619      	mov	r1, r3
 8012744:	4a3f      	ldr	r2, [pc, #252]	; (8012844 <etharp_output+0x200>)
 8012746:	460b      	mov	r3, r1
 8012748:	005b      	lsls	r3, r3, #1
 801274a:	440b      	add	r3, r1
 801274c:	00db      	lsls	r3, r3, #3
 801274e:	4413      	add	r3, r2
 8012750:	3308      	adds	r3, #8
 8012752:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012754:	68fa      	ldr	r2, [r7, #12]
 8012756:	429a      	cmp	r2, r3
 8012758:	d117      	bne.n	801278a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801275a:	69bb      	ldr	r3, [r7, #24]
 801275c:	681a      	ldr	r2, [r3, #0]
 801275e:	4b38      	ldr	r3, [pc, #224]	; (8012840 <etharp_output+0x1fc>)
 8012760:	781b      	ldrb	r3, [r3, #0]
 8012762:	4618      	mov	r0, r3
 8012764:	4937      	ldr	r1, [pc, #220]	; (8012844 <etharp_output+0x200>)
 8012766:	4603      	mov	r3, r0
 8012768:	005b      	lsls	r3, r3, #1
 801276a:	4403      	add	r3, r0
 801276c:	00db      	lsls	r3, r3, #3
 801276e:	440b      	add	r3, r1
 8012770:	3304      	adds	r3, #4
 8012772:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012774:	429a      	cmp	r2, r3
 8012776:	d108      	bne.n	801278a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012778:	4b31      	ldr	r3, [pc, #196]	; (8012840 <etharp_output+0x1fc>)
 801277a:	781b      	ldrb	r3, [r3, #0]
 801277c:	461a      	mov	r2, r3
 801277e:	68b9      	ldr	r1, [r7, #8]
 8012780:	68f8      	ldr	r0, [r7, #12]
 8012782:	f7ff fec5 	bl	8012510 <etharp_output_to_arp_index>
 8012786:	4603      	mov	r3, r0
 8012788:	e04a      	b.n	8012820 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801278a:	2300      	movs	r3, #0
 801278c:	75fb      	strb	r3, [r7, #23]
 801278e:	e031      	b.n	80127f4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012790:	7dfa      	ldrb	r2, [r7, #23]
 8012792:	492c      	ldr	r1, [pc, #176]	; (8012844 <etharp_output+0x200>)
 8012794:	4613      	mov	r3, r2
 8012796:	005b      	lsls	r3, r3, #1
 8012798:	4413      	add	r3, r2
 801279a:	00db      	lsls	r3, r3, #3
 801279c:	440b      	add	r3, r1
 801279e:	3314      	adds	r3, #20
 80127a0:	781b      	ldrb	r3, [r3, #0]
 80127a2:	2b01      	cmp	r3, #1
 80127a4:	d923      	bls.n	80127ee <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80127a6:	7dfa      	ldrb	r2, [r7, #23]
 80127a8:	4926      	ldr	r1, [pc, #152]	; (8012844 <etharp_output+0x200>)
 80127aa:	4613      	mov	r3, r2
 80127ac:	005b      	lsls	r3, r3, #1
 80127ae:	4413      	add	r3, r2
 80127b0:	00db      	lsls	r3, r3, #3
 80127b2:	440b      	add	r3, r1
 80127b4:	3308      	adds	r3, #8
 80127b6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80127b8:	68fa      	ldr	r2, [r7, #12]
 80127ba:	429a      	cmp	r2, r3
 80127bc:	d117      	bne.n	80127ee <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80127be:	69bb      	ldr	r3, [r7, #24]
 80127c0:	6819      	ldr	r1, [r3, #0]
 80127c2:	7dfa      	ldrb	r2, [r7, #23]
 80127c4:	481f      	ldr	r0, [pc, #124]	; (8012844 <etharp_output+0x200>)
 80127c6:	4613      	mov	r3, r2
 80127c8:	005b      	lsls	r3, r3, #1
 80127ca:	4413      	add	r3, r2
 80127cc:	00db      	lsls	r3, r3, #3
 80127ce:	4403      	add	r3, r0
 80127d0:	3304      	adds	r3, #4
 80127d2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80127d4:	4299      	cmp	r1, r3
 80127d6:	d10a      	bne.n	80127ee <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80127d8:	4a19      	ldr	r2, [pc, #100]	; (8012840 <etharp_output+0x1fc>)
 80127da:	7dfb      	ldrb	r3, [r7, #23]
 80127dc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80127de:	7dfb      	ldrb	r3, [r7, #23]
 80127e0:	461a      	mov	r2, r3
 80127e2:	68b9      	ldr	r1, [r7, #8]
 80127e4:	68f8      	ldr	r0, [r7, #12]
 80127e6:	f7ff fe93 	bl	8012510 <etharp_output_to_arp_index>
 80127ea:	4603      	mov	r3, r0
 80127ec:	e018      	b.n	8012820 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80127ee:	7dfb      	ldrb	r3, [r7, #23]
 80127f0:	3301      	adds	r3, #1
 80127f2:	75fb      	strb	r3, [r7, #23]
 80127f4:	7dfb      	ldrb	r3, [r7, #23]
 80127f6:	2b09      	cmp	r3, #9
 80127f8:	d9ca      	bls.n	8012790 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80127fa:	68ba      	ldr	r2, [r7, #8]
 80127fc:	69b9      	ldr	r1, [r7, #24]
 80127fe:	68f8      	ldr	r0, [r7, #12]
 8012800:	f000 f822 	bl	8012848 <etharp_query>
 8012804:	4603      	mov	r3, r0
 8012806:	e00b      	b.n	8012820 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801280e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012812:	9300      	str	r3, [sp, #0]
 8012814:	69fb      	ldr	r3, [r7, #28]
 8012816:	68b9      	ldr	r1, [r7, #8]
 8012818:	68f8      	ldr	r0, [r7, #12]
 801281a:	f000 faa1 	bl	8012d60 <ethernet_output>
 801281e:	4603      	mov	r3, r0
}
 8012820:	4618      	mov	r0, r3
 8012822:	3720      	adds	r7, #32
 8012824:	46bd      	mov	sp, r7
 8012826:	bd80      	pop	{r7, pc}
 8012828:	08025ec0 	.word	0x08025ec0
 801282c:	0802603c 	.word	0x0802603c
 8012830:	08025f64 	.word	0x08025f64
 8012834:	0802608c 	.word	0x0802608c
 8012838:	0802602c 	.word	0x0802602c
 801283c:	08029168 	.word	0x08029168
 8012840:	24005764 	.word	0x24005764
 8012844:	24005674 	.word	0x24005674

08012848 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8012848:	b580      	push	{r7, lr}
 801284a:	b08c      	sub	sp, #48	; 0x30
 801284c:	af02      	add	r7, sp, #8
 801284e:	60f8      	str	r0, [r7, #12]
 8012850:	60b9      	str	r1, [r7, #8]
 8012852:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	3326      	adds	r3, #38	; 0x26
 8012858:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801285a:	23ff      	movs	r3, #255	; 0xff
 801285c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8012860:	2300      	movs	r3, #0
 8012862:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012864:	68bb      	ldr	r3, [r7, #8]
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	68f9      	ldr	r1, [r7, #12]
 801286a:	4618      	mov	r0, r3
 801286c:	f000 ffdc 	bl	8013828 <ip4_addr_isbroadcast_u32>
 8012870:	4603      	mov	r3, r0
 8012872:	2b00      	cmp	r3, #0
 8012874:	d10c      	bne.n	8012890 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012876:	68bb      	ldr	r3, [r7, #8]
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801287e:	2be0      	cmp	r3, #224	; 0xe0
 8012880:	d006      	beq.n	8012890 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012882:	68bb      	ldr	r3, [r7, #8]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d003      	beq.n	8012890 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8012888:	68bb      	ldr	r3, [r7, #8]
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	2b00      	cmp	r3, #0
 801288e:	d102      	bne.n	8012896 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012890:	f06f 030f 	mvn.w	r3, #15
 8012894:	e101      	b.n	8012a9a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8012896:	68fa      	ldr	r2, [r7, #12]
 8012898:	2101      	movs	r1, #1
 801289a:	68b8      	ldr	r0, [r7, #8]
 801289c:	f7ff fb60 	bl	8011f60 <etharp_find_entry>
 80128a0:	4603      	mov	r3, r0
 80128a2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80128a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	da02      	bge.n	80128b2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80128ac:	8a7b      	ldrh	r3, [r7, #18]
 80128ae:	b25b      	sxtb	r3, r3
 80128b0:	e0f3      	b.n	8012a9a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80128b2:	8a7b      	ldrh	r3, [r7, #18]
 80128b4:	2b7e      	cmp	r3, #126	; 0x7e
 80128b6:	d906      	bls.n	80128c6 <etharp_query+0x7e>
 80128b8:	4b7a      	ldr	r3, [pc, #488]	; (8012aa4 <etharp_query+0x25c>)
 80128ba:	f240 32c1 	movw	r2, #961	; 0x3c1
 80128be:	497a      	ldr	r1, [pc, #488]	; (8012aa8 <etharp_query+0x260>)
 80128c0:	487a      	ldr	r0, [pc, #488]	; (8012aac <etharp_query+0x264>)
 80128c2:	f00e f953 	bl	8020b6c <iprintf>
  i = (netif_addr_idx_t)i_err;
 80128c6:	8a7b      	ldrh	r3, [r7, #18]
 80128c8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80128ca:	7c7a      	ldrb	r2, [r7, #17]
 80128cc:	4978      	ldr	r1, [pc, #480]	; (8012ab0 <etharp_query+0x268>)
 80128ce:	4613      	mov	r3, r2
 80128d0:	005b      	lsls	r3, r3, #1
 80128d2:	4413      	add	r3, r2
 80128d4:	00db      	lsls	r3, r3, #3
 80128d6:	440b      	add	r3, r1
 80128d8:	3314      	adds	r3, #20
 80128da:	781b      	ldrb	r3, [r3, #0]
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d115      	bne.n	801290c <etharp_query+0xc4>
    is_new_entry = 1;
 80128e0:	2301      	movs	r3, #1
 80128e2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80128e4:	7c7a      	ldrb	r2, [r7, #17]
 80128e6:	4972      	ldr	r1, [pc, #456]	; (8012ab0 <etharp_query+0x268>)
 80128e8:	4613      	mov	r3, r2
 80128ea:	005b      	lsls	r3, r3, #1
 80128ec:	4413      	add	r3, r2
 80128ee:	00db      	lsls	r3, r3, #3
 80128f0:	440b      	add	r3, r1
 80128f2:	3314      	adds	r3, #20
 80128f4:	2201      	movs	r2, #1
 80128f6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80128f8:	7c7a      	ldrb	r2, [r7, #17]
 80128fa:	496d      	ldr	r1, [pc, #436]	; (8012ab0 <etharp_query+0x268>)
 80128fc:	4613      	mov	r3, r2
 80128fe:	005b      	lsls	r3, r3, #1
 8012900:	4413      	add	r3, r2
 8012902:	00db      	lsls	r3, r3, #3
 8012904:	440b      	add	r3, r1
 8012906:	3308      	adds	r3, #8
 8012908:	68fa      	ldr	r2, [r7, #12]
 801290a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801290c:	7c7a      	ldrb	r2, [r7, #17]
 801290e:	4968      	ldr	r1, [pc, #416]	; (8012ab0 <etharp_query+0x268>)
 8012910:	4613      	mov	r3, r2
 8012912:	005b      	lsls	r3, r3, #1
 8012914:	4413      	add	r3, r2
 8012916:	00db      	lsls	r3, r3, #3
 8012918:	440b      	add	r3, r1
 801291a:	3314      	adds	r3, #20
 801291c:	781b      	ldrb	r3, [r3, #0]
 801291e:	2b01      	cmp	r3, #1
 8012920:	d011      	beq.n	8012946 <etharp_query+0xfe>
 8012922:	7c7a      	ldrb	r2, [r7, #17]
 8012924:	4962      	ldr	r1, [pc, #392]	; (8012ab0 <etharp_query+0x268>)
 8012926:	4613      	mov	r3, r2
 8012928:	005b      	lsls	r3, r3, #1
 801292a:	4413      	add	r3, r2
 801292c:	00db      	lsls	r3, r3, #3
 801292e:	440b      	add	r3, r1
 8012930:	3314      	adds	r3, #20
 8012932:	781b      	ldrb	r3, [r3, #0]
 8012934:	2b01      	cmp	r3, #1
 8012936:	d806      	bhi.n	8012946 <etharp_query+0xfe>
 8012938:	4b5a      	ldr	r3, [pc, #360]	; (8012aa4 <etharp_query+0x25c>)
 801293a:	f240 32cd 	movw	r2, #973	; 0x3cd
 801293e:	495d      	ldr	r1, [pc, #372]	; (8012ab4 <etharp_query+0x26c>)
 8012940:	485a      	ldr	r0, [pc, #360]	; (8012aac <etharp_query+0x264>)
 8012942:	f00e f913 	bl	8020b6c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8012946:	6a3b      	ldr	r3, [r7, #32]
 8012948:	2b00      	cmp	r3, #0
 801294a:	d102      	bne.n	8012952 <etharp_query+0x10a>
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	2b00      	cmp	r3, #0
 8012950:	d10c      	bne.n	801296c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8012952:	68b9      	ldr	r1, [r7, #8]
 8012954:	68f8      	ldr	r0, [r7, #12]
 8012956:	f000 f963 	bl	8012c20 <etharp_request>
 801295a:	4603      	mov	r3, r0
 801295c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	2b00      	cmp	r3, #0
 8012964:	d102      	bne.n	801296c <etharp_query+0x124>
      return result;
 8012966:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801296a:	e096      	b.n	8012a9a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d106      	bne.n	8012980 <etharp_query+0x138>
 8012972:	4b4c      	ldr	r3, [pc, #304]	; (8012aa4 <etharp_query+0x25c>)
 8012974:	f240 32e1 	movw	r2, #993	; 0x3e1
 8012978:	494f      	ldr	r1, [pc, #316]	; (8012ab8 <etharp_query+0x270>)
 801297a:	484c      	ldr	r0, [pc, #304]	; (8012aac <etharp_query+0x264>)
 801297c:	f00e f8f6 	bl	8020b6c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012980:	7c7a      	ldrb	r2, [r7, #17]
 8012982:	494b      	ldr	r1, [pc, #300]	; (8012ab0 <etharp_query+0x268>)
 8012984:	4613      	mov	r3, r2
 8012986:	005b      	lsls	r3, r3, #1
 8012988:	4413      	add	r3, r2
 801298a:	00db      	lsls	r3, r3, #3
 801298c:	440b      	add	r3, r1
 801298e:	3314      	adds	r3, #20
 8012990:	781b      	ldrb	r3, [r3, #0]
 8012992:	2b01      	cmp	r3, #1
 8012994:	d917      	bls.n	80129c6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8012996:	4a49      	ldr	r2, [pc, #292]	; (8012abc <etharp_query+0x274>)
 8012998:	7c7b      	ldrb	r3, [r7, #17]
 801299a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801299c:	7c7a      	ldrb	r2, [r7, #17]
 801299e:	4613      	mov	r3, r2
 80129a0:	005b      	lsls	r3, r3, #1
 80129a2:	4413      	add	r3, r2
 80129a4:	00db      	lsls	r3, r3, #3
 80129a6:	3308      	adds	r3, #8
 80129a8:	4a41      	ldr	r2, [pc, #260]	; (8012ab0 <etharp_query+0x268>)
 80129aa:	4413      	add	r3, r2
 80129ac:	3304      	adds	r3, #4
 80129ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80129b2:	9200      	str	r2, [sp, #0]
 80129b4:	697a      	ldr	r2, [r7, #20]
 80129b6:	6879      	ldr	r1, [r7, #4]
 80129b8:	68f8      	ldr	r0, [r7, #12]
 80129ba:	f000 f9d1 	bl	8012d60 <ethernet_output>
 80129be:	4603      	mov	r3, r0
 80129c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80129c4:	e067      	b.n	8012a96 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80129c6:	7c7a      	ldrb	r2, [r7, #17]
 80129c8:	4939      	ldr	r1, [pc, #228]	; (8012ab0 <etharp_query+0x268>)
 80129ca:	4613      	mov	r3, r2
 80129cc:	005b      	lsls	r3, r3, #1
 80129ce:	4413      	add	r3, r2
 80129d0:	00db      	lsls	r3, r3, #3
 80129d2:	440b      	add	r3, r1
 80129d4:	3314      	adds	r3, #20
 80129d6:	781b      	ldrb	r3, [r3, #0]
 80129d8:	2b01      	cmp	r3, #1
 80129da:	d15c      	bne.n	8012a96 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80129dc:	2300      	movs	r3, #0
 80129de:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80129e4:	e01c      	b.n	8012a20 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80129e6:	69fb      	ldr	r3, [r7, #28]
 80129e8:	895a      	ldrh	r2, [r3, #10]
 80129ea:	69fb      	ldr	r3, [r7, #28]
 80129ec:	891b      	ldrh	r3, [r3, #8]
 80129ee:	429a      	cmp	r2, r3
 80129f0:	d10a      	bne.n	8012a08 <etharp_query+0x1c0>
 80129f2:	69fb      	ldr	r3, [r7, #28]
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d006      	beq.n	8012a08 <etharp_query+0x1c0>
 80129fa:	4b2a      	ldr	r3, [pc, #168]	; (8012aa4 <etharp_query+0x25c>)
 80129fc:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8012a00:	492f      	ldr	r1, [pc, #188]	; (8012ac0 <etharp_query+0x278>)
 8012a02:	482a      	ldr	r0, [pc, #168]	; (8012aac <etharp_query+0x264>)
 8012a04:	f00e f8b2 	bl	8020b6c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8012a08:	69fb      	ldr	r3, [r7, #28]
 8012a0a:	7b1b      	ldrb	r3, [r3, #12]
 8012a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d002      	beq.n	8012a1a <etharp_query+0x1d2>
        copy_needed = 1;
 8012a14:	2301      	movs	r3, #1
 8012a16:	61bb      	str	r3, [r7, #24]
        break;
 8012a18:	e005      	b.n	8012a26 <etharp_query+0x1de>
      }
      p = p->next;
 8012a1a:	69fb      	ldr	r3, [r7, #28]
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012a20:	69fb      	ldr	r3, [r7, #28]
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d1df      	bne.n	80129e6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8012a26:	69bb      	ldr	r3, [r7, #24]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d007      	beq.n	8012a3c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012a2c:	687a      	ldr	r2, [r7, #4]
 8012a2e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8012a32:	200e      	movs	r0, #14
 8012a34:	f003 fb0e 	bl	8016054 <pbuf_clone>
 8012a38:	61f8      	str	r0, [r7, #28]
 8012a3a:	e004      	b.n	8012a46 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8012a40:	69f8      	ldr	r0, [r7, #28]
 8012a42:	f003 f921 	bl	8015c88 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8012a46:	69fb      	ldr	r3, [r7, #28]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d021      	beq.n	8012a90 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8012a4c:	7c7a      	ldrb	r2, [r7, #17]
 8012a4e:	4918      	ldr	r1, [pc, #96]	; (8012ab0 <etharp_query+0x268>)
 8012a50:	4613      	mov	r3, r2
 8012a52:	005b      	lsls	r3, r3, #1
 8012a54:	4413      	add	r3, r2
 8012a56:	00db      	lsls	r3, r3, #3
 8012a58:	440b      	add	r3, r1
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d00a      	beq.n	8012a76 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8012a60:	7c7a      	ldrb	r2, [r7, #17]
 8012a62:	4913      	ldr	r1, [pc, #76]	; (8012ab0 <etharp_query+0x268>)
 8012a64:	4613      	mov	r3, r2
 8012a66:	005b      	lsls	r3, r3, #1
 8012a68:	4413      	add	r3, r2
 8012a6a:	00db      	lsls	r3, r3, #3
 8012a6c:	440b      	add	r3, r1
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	4618      	mov	r0, r3
 8012a72:	f003 f869 	bl	8015b48 <pbuf_free>
      }
      arp_table[i].q = p;
 8012a76:	7c7a      	ldrb	r2, [r7, #17]
 8012a78:	490d      	ldr	r1, [pc, #52]	; (8012ab0 <etharp_query+0x268>)
 8012a7a:	4613      	mov	r3, r2
 8012a7c:	005b      	lsls	r3, r3, #1
 8012a7e:	4413      	add	r3, r2
 8012a80:	00db      	lsls	r3, r3, #3
 8012a82:	440b      	add	r3, r1
 8012a84:	69fa      	ldr	r2, [r7, #28]
 8012a86:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8012a88:	2300      	movs	r3, #0
 8012a8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012a8e:	e002      	b.n	8012a96 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8012a90:	23ff      	movs	r3, #255	; 0xff
 8012a92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8012a96:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	3728      	adds	r7, #40	; 0x28
 8012a9e:	46bd      	mov	sp, r7
 8012aa0:	bd80      	pop	{r7, pc}
 8012aa2:	bf00      	nop
 8012aa4:	08025ec0 	.word	0x08025ec0
 8012aa8:	08026098 	.word	0x08026098
 8012aac:	08025f64 	.word	0x08025f64
 8012ab0:	24005674 	.word	0x24005674
 8012ab4:	080260a8 	.word	0x080260a8
 8012ab8:	0802608c 	.word	0x0802608c
 8012abc:	24005764 	.word	0x24005764
 8012ac0:	080260d0 	.word	0x080260d0

08012ac4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012ac4:	b580      	push	{r7, lr}
 8012ac6:	b08a      	sub	sp, #40	; 0x28
 8012ac8:	af02      	add	r7, sp, #8
 8012aca:	60f8      	str	r0, [r7, #12]
 8012acc:	60b9      	str	r1, [r7, #8]
 8012ace:	607a      	str	r2, [r7, #4]
 8012ad0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d106      	bne.n	8012aea <etharp_raw+0x26>
 8012adc:	4b3a      	ldr	r3, [pc, #232]	; (8012bc8 <etharp_raw+0x104>)
 8012ade:	f240 4257 	movw	r2, #1111	; 0x457
 8012ae2:	493a      	ldr	r1, [pc, #232]	; (8012bcc <etharp_raw+0x108>)
 8012ae4:	483a      	ldr	r0, [pc, #232]	; (8012bd0 <etharp_raw+0x10c>)
 8012ae6:	f00e f841 	bl	8020b6c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012aea:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012aee:	211c      	movs	r1, #28
 8012af0:	200e      	movs	r0, #14
 8012af2:	f002 fd45 	bl	8015580 <pbuf_alloc>
 8012af6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012af8:	69bb      	ldr	r3, [r7, #24]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d102      	bne.n	8012b04 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8012afe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012b02:	e05d      	b.n	8012bc0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012b04:	69bb      	ldr	r3, [r7, #24]
 8012b06:	895b      	ldrh	r3, [r3, #10]
 8012b08:	2b1b      	cmp	r3, #27
 8012b0a:	d806      	bhi.n	8012b1a <etharp_raw+0x56>
 8012b0c:	4b2e      	ldr	r3, [pc, #184]	; (8012bc8 <etharp_raw+0x104>)
 8012b0e:	f240 4262 	movw	r2, #1122	; 0x462
 8012b12:	4930      	ldr	r1, [pc, #192]	; (8012bd4 <etharp_raw+0x110>)
 8012b14:	482e      	ldr	r0, [pc, #184]	; (8012bd0 <etharp_raw+0x10c>)
 8012b16:	f00e f829 	bl	8020b6c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012b1a:	69bb      	ldr	r3, [r7, #24]
 8012b1c:	685b      	ldr	r3, [r3, #4]
 8012b1e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8012b20:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012b22:	4618      	mov	r0, r3
 8012b24:	f7ff f914 	bl	8011d50 <lwip_htons>
 8012b28:	4603      	mov	r3, r0
 8012b2a:	461a      	mov	r2, r3
 8012b2c:	697b      	ldr	r3, [r7, #20]
 8012b2e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012b36:	2b06      	cmp	r3, #6
 8012b38:	d006      	beq.n	8012b48 <etharp_raw+0x84>
 8012b3a:	4b23      	ldr	r3, [pc, #140]	; (8012bc8 <etharp_raw+0x104>)
 8012b3c:	f240 4269 	movw	r2, #1129	; 0x469
 8012b40:	4925      	ldr	r1, [pc, #148]	; (8012bd8 <etharp_raw+0x114>)
 8012b42:	4823      	ldr	r0, [pc, #140]	; (8012bd0 <etharp_raw+0x10c>)
 8012b44:	f00e f812 	bl	8020b6c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012b48:	697b      	ldr	r3, [r7, #20]
 8012b4a:	3308      	adds	r3, #8
 8012b4c:	2206      	movs	r2, #6
 8012b4e:	6839      	ldr	r1, [r7, #0]
 8012b50:	4618      	mov	r0, r3
 8012b52:	f00d f8e9 	bl	801fd28 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8012b56:	697b      	ldr	r3, [r7, #20]
 8012b58:	3312      	adds	r3, #18
 8012b5a:	2206      	movs	r2, #6
 8012b5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012b5e:	4618      	mov	r0, r3
 8012b60:	f00d f8e2 	bl	801fd28 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8012b64:	697b      	ldr	r3, [r7, #20]
 8012b66:	330e      	adds	r3, #14
 8012b68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b6a:	6812      	ldr	r2, [r2, #0]
 8012b6c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8012b6e:	697b      	ldr	r3, [r7, #20]
 8012b70:	3318      	adds	r3, #24
 8012b72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b74:	6812      	ldr	r2, [r2, #0]
 8012b76:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012b78:	697b      	ldr	r3, [r7, #20]
 8012b7a:	2200      	movs	r2, #0
 8012b7c:	701a      	strb	r2, [r3, #0]
 8012b7e:	2200      	movs	r2, #0
 8012b80:	f042 0201 	orr.w	r2, r2, #1
 8012b84:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8012b86:	697b      	ldr	r3, [r7, #20]
 8012b88:	2200      	movs	r2, #0
 8012b8a:	f042 0208 	orr.w	r2, r2, #8
 8012b8e:	709a      	strb	r2, [r3, #2]
 8012b90:	2200      	movs	r2, #0
 8012b92:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8012b94:	697b      	ldr	r3, [r7, #20]
 8012b96:	2206      	movs	r2, #6
 8012b98:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012b9a:	697b      	ldr	r3, [r7, #20]
 8012b9c:	2204      	movs	r2, #4
 8012b9e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012ba0:	f640 0306 	movw	r3, #2054	; 0x806
 8012ba4:	9300      	str	r3, [sp, #0]
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	68ba      	ldr	r2, [r7, #8]
 8012baa:	69b9      	ldr	r1, [r7, #24]
 8012bac:	68f8      	ldr	r0, [r7, #12]
 8012bae:	f000 f8d7 	bl	8012d60 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8012bb2:	69b8      	ldr	r0, [r7, #24]
 8012bb4:	f002 ffc8 	bl	8015b48 <pbuf_free>
  p = NULL;
 8012bb8:	2300      	movs	r3, #0
 8012bba:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012bbc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	3720      	adds	r7, #32
 8012bc4:	46bd      	mov	sp, r7
 8012bc6:	bd80      	pop	{r7, pc}
 8012bc8:	08025ec0 	.word	0x08025ec0
 8012bcc:	0802603c 	.word	0x0802603c
 8012bd0:	08025f64 	.word	0x08025f64
 8012bd4:	080260ec 	.word	0x080260ec
 8012bd8:	08026120 	.word	0x08026120

08012bdc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012bdc:	b580      	push	{r7, lr}
 8012bde:	b088      	sub	sp, #32
 8012be0:	af04      	add	r7, sp, #16
 8012be2:	60f8      	str	r0, [r7, #12]
 8012be4:	60b9      	str	r1, [r7, #8]
 8012be6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012bf8:	2201      	movs	r2, #1
 8012bfa:	9203      	str	r2, [sp, #12]
 8012bfc:	68ba      	ldr	r2, [r7, #8]
 8012bfe:	9202      	str	r2, [sp, #8]
 8012c00:	4a06      	ldr	r2, [pc, #24]	; (8012c1c <etharp_request_dst+0x40>)
 8012c02:	9201      	str	r2, [sp, #4]
 8012c04:	9300      	str	r3, [sp, #0]
 8012c06:	4603      	mov	r3, r0
 8012c08:	687a      	ldr	r2, [r7, #4]
 8012c0a:	68f8      	ldr	r0, [r7, #12]
 8012c0c:	f7ff ff5a 	bl	8012ac4 <etharp_raw>
 8012c10:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8012c12:	4618      	mov	r0, r3
 8012c14:	3710      	adds	r7, #16
 8012c16:	46bd      	mov	sp, r7
 8012c18:	bd80      	pop	{r7, pc}
 8012c1a:	bf00      	nop
 8012c1c:	08029170 	.word	0x08029170

08012c20 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8012c20:	b580      	push	{r7, lr}
 8012c22:	b082      	sub	sp, #8
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	6078      	str	r0, [r7, #4]
 8012c28:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012c2a:	4a05      	ldr	r2, [pc, #20]	; (8012c40 <etharp_request+0x20>)
 8012c2c:	6839      	ldr	r1, [r7, #0]
 8012c2e:	6878      	ldr	r0, [r7, #4]
 8012c30:	f7ff ffd4 	bl	8012bdc <etharp_request_dst>
 8012c34:	4603      	mov	r3, r0
}
 8012c36:	4618      	mov	r0, r3
 8012c38:	3708      	adds	r7, #8
 8012c3a:	46bd      	mov	sp, r7
 8012c3c:	bd80      	pop	{r7, pc}
 8012c3e:	bf00      	nop
 8012c40:	08029168 	.word	0x08029168

08012c44 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012c44:	b580      	push	{r7, lr}
 8012c46:	b086      	sub	sp, #24
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	6078      	str	r0, [r7, #4]
 8012c4c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8012c4e:	230e      	movs	r3, #14
 8012c50:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	895b      	ldrh	r3, [r3, #10]
 8012c56:	2b0e      	cmp	r3, #14
 8012c58:	d96e      	bls.n	8012d38 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	7bdb      	ldrb	r3, [r3, #15]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d106      	bne.n	8012c70 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8012c62:	683b      	ldr	r3, [r7, #0]
 8012c64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012c68:	3301      	adds	r3, #1
 8012c6a:	b2da      	uxtb	r2, r3
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	685b      	ldr	r3, [r3, #4]
 8012c74:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8012c76:	693b      	ldr	r3, [r7, #16]
 8012c78:	7b1a      	ldrb	r2, [r3, #12]
 8012c7a:	7b5b      	ldrb	r3, [r3, #13]
 8012c7c:	021b      	lsls	r3, r3, #8
 8012c7e:	4313      	orrs	r3, r2
 8012c80:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8012c82:	693b      	ldr	r3, [r7, #16]
 8012c84:	781b      	ldrb	r3, [r3, #0]
 8012c86:	f003 0301 	and.w	r3, r3, #1
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d023      	beq.n	8012cd6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8012c8e:	693b      	ldr	r3, [r7, #16]
 8012c90:	781b      	ldrb	r3, [r3, #0]
 8012c92:	2b01      	cmp	r3, #1
 8012c94:	d10f      	bne.n	8012cb6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012c96:	693b      	ldr	r3, [r7, #16]
 8012c98:	785b      	ldrb	r3, [r3, #1]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d11b      	bne.n	8012cd6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8012c9e:	693b      	ldr	r3, [r7, #16]
 8012ca0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012ca2:	2b5e      	cmp	r3, #94	; 0x5e
 8012ca4:	d117      	bne.n	8012cd6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	7b5b      	ldrb	r3, [r3, #13]
 8012caa:	f043 0310 	orr.w	r3, r3, #16
 8012cae:	b2da      	uxtb	r2, r3
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	735a      	strb	r2, [r3, #13]
 8012cb4:	e00f      	b.n	8012cd6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8012cb6:	693b      	ldr	r3, [r7, #16]
 8012cb8:	2206      	movs	r2, #6
 8012cba:	4928      	ldr	r1, [pc, #160]	; (8012d5c <ethernet_input+0x118>)
 8012cbc:	4618      	mov	r0, r3
 8012cbe:	f00d f825 	bl	801fd0c <memcmp>
 8012cc2:	4603      	mov	r3, r0
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d106      	bne.n	8012cd6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	7b5b      	ldrb	r3, [r3, #13]
 8012ccc:	f043 0308 	orr.w	r3, r3, #8
 8012cd0:	b2da      	uxtb	r2, r3
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8012cd6:	89fb      	ldrh	r3, [r7, #14]
 8012cd8:	2b08      	cmp	r3, #8
 8012cda:	d003      	beq.n	8012ce4 <ethernet_input+0xa0>
 8012cdc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8012ce0:	d014      	beq.n	8012d0c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012ce2:	e032      	b.n	8012d4a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012ce4:	683b      	ldr	r3, [r7, #0]
 8012ce6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012cea:	f003 0308 	and.w	r3, r3, #8
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d024      	beq.n	8012d3c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012cf2:	8afb      	ldrh	r3, [r7, #22]
 8012cf4:	4619      	mov	r1, r3
 8012cf6:	6878      	ldr	r0, [r7, #4]
 8012cf8:	f002 fea0 	bl	8015a3c <pbuf_remove_header>
 8012cfc:	4603      	mov	r3, r0
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d11e      	bne.n	8012d40 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8012d02:	6839      	ldr	r1, [r7, #0]
 8012d04:	6878      	ldr	r0, [r7, #4]
 8012d06:	f000 fb93 	bl	8013430 <ip4_input>
      break;
 8012d0a:	e013      	b.n	8012d34 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012d0c:	683b      	ldr	r3, [r7, #0]
 8012d0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012d12:	f003 0308 	and.w	r3, r3, #8
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d014      	beq.n	8012d44 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012d1a:	8afb      	ldrh	r3, [r7, #22]
 8012d1c:	4619      	mov	r1, r3
 8012d1e:	6878      	ldr	r0, [r7, #4]
 8012d20:	f002 fe8c 	bl	8015a3c <pbuf_remove_header>
 8012d24:	4603      	mov	r3, r0
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d10e      	bne.n	8012d48 <ethernet_input+0x104>
        etharp_input(p, netif);
 8012d2a:	6839      	ldr	r1, [r7, #0]
 8012d2c:	6878      	ldr	r0, [r7, #4]
 8012d2e:	f7ff fb65 	bl	80123fc <etharp_input>
      break;
 8012d32:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012d34:	2300      	movs	r3, #0
 8012d36:	e00c      	b.n	8012d52 <ethernet_input+0x10e>
    goto free_and_return;
 8012d38:	bf00      	nop
 8012d3a:	e006      	b.n	8012d4a <ethernet_input+0x106>
        goto free_and_return;
 8012d3c:	bf00      	nop
 8012d3e:	e004      	b.n	8012d4a <ethernet_input+0x106>
        goto free_and_return;
 8012d40:	bf00      	nop
 8012d42:	e002      	b.n	8012d4a <ethernet_input+0x106>
        goto free_and_return;
 8012d44:	bf00      	nop
 8012d46:	e000      	b.n	8012d4a <ethernet_input+0x106>
        goto free_and_return;
 8012d48:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8012d4a:	6878      	ldr	r0, [r7, #4]
 8012d4c:	f002 fefc 	bl	8015b48 <pbuf_free>
  return ERR_OK;
 8012d50:	2300      	movs	r3, #0
}
 8012d52:	4618      	mov	r0, r3
 8012d54:	3718      	adds	r7, #24
 8012d56:	46bd      	mov	sp, r7
 8012d58:	bd80      	pop	{r7, pc}
 8012d5a:	bf00      	nop
 8012d5c:	08029168 	.word	0x08029168

08012d60 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b086      	sub	sp, #24
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	60f8      	str	r0, [r7, #12]
 8012d68:	60b9      	str	r1, [r7, #8]
 8012d6a:	607a      	str	r2, [r7, #4]
 8012d6c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8012d6e:	8c3b      	ldrh	r3, [r7, #32]
 8012d70:	4618      	mov	r0, r3
 8012d72:	f7fe ffed 	bl	8011d50 <lwip_htons>
 8012d76:	4603      	mov	r3, r0
 8012d78:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8012d7a:	210e      	movs	r1, #14
 8012d7c:	68b8      	ldr	r0, [r7, #8]
 8012d7e:	f002 fe4d 	bl	8015a1c <pbuf_add_header>
 8012d82:	4603      	mov	r3, r0
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d125      	bne.n	8012dd4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8012d88:	68bb      	ldr	r3, [r7, #8]
 8012d8a:	685b      	ldr	r3, [r3, #4]
 8012d8c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8012d8e:	693b      	ldr	r3, [r7, #16]
 8012d90:	8afa      	ldrh	r2, [r7, #22]
 8012d92:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8012d94:	693b      	ldr	r3, [r7, #16]
 8012d96:	2206      	movs	r2, #6
 8012d98:	6839      	ldr	r1, [r7, #0]
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	f00c ffc4 	bl	801fd28 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8012da0:	693b      	ldr	r3, [r7, #16]
 8012da2:	3306      	adds	r3, #6
 8012da4:	2206      	movs	r2, #6
 8012da6:	6879      	ldr	r1, [r7, #4]
 8012da8:	4618      	mov	r0, r3
 8012daa:	f00c ffbd 	bl	801fd28 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012db4:	2b06      	cmp	r3, #6
 8012db6:	d006      	beq.n	8012dc6 <ethernet_output+0x66>
 8012db8:	4b0a      	ldr	r3, [pc, #40]	; (8012de4 <ethernet_output+0x84>)
 8012dba:	f44f 7299 	mov.w	r2, #306	; 0x132
 8012dbe:	490a      	ldr	r1, [pc, #40]	; (8012de8 <ethernet_output+0x88>)
 8012dc0:	480a      	ldr	r0, [pc, #40]	; (8012dec <ethernet_output+0x8c>)
 8012dc2:	f00d fed3 	bl	8020b6c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	699b      	ldr	r3, [r3, #24]
 8012dca:	68b9      	ldr	r1, [r7, #8]
 8012dcc:	68f8      	ldr	r0, [r7, #12]
 8012dce:	4798      	blx	r3
 8012dd0:	4603      	mov	r3, r0
 8012dd2:	e002      	b.n	8012dda <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012dd4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8012dd6:	f06f 0301 	mvn.w	r3, #1
}
 8012dda:	4618      	mov	r0, r3
 8012ddc:	3718      	adds	r7, #24
 8012dde:	46bd      	mov	sp, r7
 8012de0:	bd80      	pop	{r7, pc}
 8012de2:	bf00      	nop
 8012de4:	08026164 	.word	0x08026164
 8012de8:	080261c4 	.word	0x080261c4
 8012dec:	080261f8 	.word	0x080261f8

08012df0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b08e      	sub	sp, #56	; 0x38
 8012df4:	af04      	add	r7, sp, #16
 8012df6:	6078      	str	r0, [r7, #4]
 8012df8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8012dfa:	4b87      	ldr	r3, [pc, #540]	; (8013018 <icmp_input+0x228>)
 8012dfc:	689b      	ldr	r3, [r3, #8]
 8012dfe:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8012e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e02:	781b      	ldrb	r3, [r3, #0]
 8012e04:	f003 030f 	and.w	r3, r3, #15
 8012e08:	b2db      	uxtb	r3, r3
 8012e0a:	009b      	lsls	r3, r3, #2
 8012e0c:	b2db      	uxtb	r3, r3
 8012e0e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8012e10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012e12:	2b13      	cmp	r3, #19
 8012e14:	f240 80e8 	bls.w	8012fe8 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	895b      	ldrh	r3, [r3, #10]
 8012e1c:	2b03      	cmp	r3, #3
 8012e1e:	f240 80e5 	bls.w	8012fec <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	685b      	ldr	r3, [r3, #4]
 8012e26:	781b      	ldrb	r3, [r3, #0]
 8012e28:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8012e2c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	f000 80d2 	beq.w	8012fda <icmp_input+0x1ea>
 8012e36:	2b08      	cmp	r3, #8
 8012e38:	f040 80d2 	bne.w	8012fe0 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8012e3c:	4b77      	ldr	r3, [pc, #476]	; (801301c <icmp_input+0x22c>)
 8012e3e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012e40:	4b75      	ldr	r3, [pc, #468]	; (8013018 <icmp_input+0x228>)
 8012e42:	695b      	ldr	r3, [r3, #20]
 8012e44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012e48:	2be0      	cmp	r3, #224	; 0xe0
 8012e4a:	f000 80d6 	beq.w	8012ffa <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8012e4e:	4b72      	ldr	r3, [pc, #456]	; (8013018 <icmp_input+0x228>)
 8012e50:	695b      	ldr	r3, [r3, #20]
 8012e52:	4a71      	ldr	r2, [pc, #452]	; (8013018 <icmp_input+0x228>)
 8012e54:	6812      	ldr	r2, [r2, #0]
 8012e56:	4611      	mov	r1, r2
 8012e58:	4618      	mov	r0, r3
 8012e5a:	f000 fce5 	bl	8013828 <ip4_addr_isbroadcast_u32>
 8012e5e:	4603      	mov	r3, r0
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	f040 80cc 	bne.w	8012ffe <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	891b      	ldrh	r3, [r3, #8]
 8012e6a:	2b07      	cmp	r3, #7
 8012e6c:	f240 80c0 	bls.w	8012ff0 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8012e70:	6878      	ldr	r0, [r7, #4]
 8012e72:	f000 f9e0 	bl	8013236 <inet_chksum_pbuf>
 8012e76:	4603      	mov	r3, r0
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d003      	beq.n	8012e84 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8012e7c:	6878      	ldr	r0, [r7, #4]
 8012e7e:	f002 fe63 	bl	8015b48 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8012e82:	e0c5      	b.n	8013010 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012e84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012e86:	330e      	adds	r3, #14
 8012e88:	4619      	mov	r1, r3
 8012e8a:	6878      	ldr	r0, [r7, #4]
 8012e8c:	f002 fdc6 	bl	8015a1c <pbuf_add_header>
 8012e90:	4603      	mov	r3, r0
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d04b      	beq.n	8012f2e <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	891a      	ldrh	r2, [r3, #8]
 8012e9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012e9c:	4413      	add	r3, r2
 8012e9e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	891b      	ldrh	r3, [r3, #8]
 8012ea4:	8b7a      	ldrh	r2, [r7, #26]
 8012ea6:	429a      	cmp	r2, r3
 8012ea8:	f0c0 80ab 	bcc.w	8013002 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8012eac:	8b7b      	ldrh	r3, [r7, #26]
 8012eae:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012eb2:	4619      	mov	r1, r3
 8012eb4:	200e      	movs	r0, #14
 8012eb6:	f002 fb63 	bl	8015580 <pbuf_alloc>
 8012eba:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8012ebc:	697b      	ldr	r3, [r7, #20]
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	f000 80a1 	beq.w	8013006 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8012ec4:	697b      	ldr	r3, [r7, #20]
 8012ec6:	895b      	ldrh	r3, [r3, #10]
 8012ec8:	461a      	mov	r2, r3
 8012eca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012ecc:	3308      	adds	r3, #8
 8012ece:	429a      	cmp	r2, r3
 8012ed0:	d203      	bcs.n	8012eda <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8012ed2:	6978      	ldr	r0, [r7, #20]
 8012ed4:	f002 fe38 	bl	8015b48 <pbuf_free>
          goto icmperr;
 8012ed8:	e096      	b.n	8013008 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8012eda:	697b      	ldr	r3, [r7, #20]
 8012edc:	685b      	ldr	r3, [r3, #4]
 8012ede:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012ee0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	f00c ff20 	bl	801fd28 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8012ee8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012eea:	4619      	mov	r1, r3
 8012eec:	6978      	ldr	r0, [r7, #20]
 8012eee:	f002 fda5 	bl	8015a3c <pbuf_remove_header>
 8012ef2:	4603      	mov	r3, r0
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d009      	beq.n	8012f0c <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012ef8:	4b49      	ldr	r3, [pc, #292]	; (8013020 <icmp_input+0x230>)
 8012efa:	22b6      	movs	r2, #182	; 0xb6
 8012efc:	4949      	ldr	r1, [pc, #292]	; (8013024 <icmp_input+0x234>)
 8012efe:	484a      	ldr	r0, [pc, #296]	; (8013028 <icmp_input+0x238>)
 8012f00:	f00d fe34 	bl	8020b6c <iprintf>
          pbuf_free(r);
 8012f04:	6978      	ldr	r0, [r7, #20]
 8012f06:	f002 fe1f 	bl	8015b48 <pbuf_free>
          goto icmperr;
 8012f0a:	e07d      	b.n	8013008 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8012f0c:	6879      	ldr	r1, [r7, #4]
 8012f0e:	6978      	ldr	r0, [r7, #20]
 8012f10:	f002 ff32 	bl	8015d78 <pbuf_copy>
 8012f14:	4603      	mov	r3, r0
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d003      	beq.n	8012f22 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8012f1a:	6978      	ldr	r0, [r7, #20]
 8012f1c:	f002 fe14 	bl	8015b48 <pbuf_free>
          goto icmperr;
 8012f20:	e072      	b.n	8013008 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8012f22:	6878      	ldr	r0, [r7, #4]
 8012f24:	f002 fe10 	bl	8015b48 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8012f28:	697b      	ldr	r3, [r7, #20]
 8012f2a:	607b      	str	r3, [r7, #4]
 8012f2c:	e00f      	b.n	8012f4e <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012f2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012f30:	330e      	adds	r3, #14
 8012f32:	4619      	mov	r1, r3
 8012f34:	6878      	ldr	r0, [r7, #4]
 8012f36:	f002 fd81 	bl	8015a3c <pbuf_remove_header>
 8012f3a:	4603      	mov	r3, r0
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d006      	beq.n	8012f4e <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8012f40:	4b37      	ldr	r3, [pc, #220]	; (8013020 <icmp_input+0x230>)
 8012f42:	22c7      	movs	r2, #199	; 0xc7
 8012f44:	4939      	ldr	r1, [pc, #228]	; (801302c <icmp_input+0x23c>)
 8012f46:	4838      	ldr	r0, [pc, #224]	; (8013028 <icmp_input+0x238>)
 8012f48:	f00d fe10 	bl	8020b6c <iprintf>
          goto icmperr;
 8012f4c:	e05c      	b.n	8013008 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	685b      	ldr	r3, [r3, #4]
 8012f52:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8012f54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012f56:	4619      	mov	r1, r3
 8012f58:	6878      	ldr	r0, [r7, #4]
 8012f5a:	f002 fd5f 	bl	8015a1c <pbuf_add_header>
 8012f5e:	4603      	mov	r3, r0
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d13c      	bne.n	8012fde <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	685b      	ldr	r3, [r3, #4]
 8012f68:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8012f6a:	69fb      	ldr	r3, [r7, #28]
 8012f6c:	681a      	ldr	r2, [r3, #0]
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8012f72:	4b29      	ldr	r3, [pc, #164]	; (8013018 <icmp_input+0x228>)
 8012f74:	691a      	ldr	r2, [r3, #16]
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8012f7a:	693b      	ldr	r3, [r7, #16]
 8012f7c:	2200      	movs	r2, #0
 8012f7e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8012f80:	693b      	ldr	r3, [r7, #16]
 8012f82:	885b      	ldrh	r3, [r3, #2]
 8012f84:	b29b      	uxth	r3, r3
 8012f86:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8012f8a:	4293      	cmp	r3, r2
 8012f8c:	d907      	bls.n	8012f9e <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8012f8e:	693b      	ldr	r3, [r7, #16]
 8012f90:	885b      	ldrh	r3, [r3, #2]
 8012f92:	b29b      	uxth	r3, r3
 8012f94:	3309      	adds	r3, #9
 8012f96:	b29a      	uxth	r2, r3
 8012f98:	693b      	ldr	r3, [r7, #16]
 8012f9a:	805a      	strh	r2, [r3, #2]
 8012f9c:	e006      	b.n	8012fac <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8012f9e:	693b      	ldr	r3, [r7, #16]
 8012fa0:	885b      	ldrh	r3, [r3, #2]
 8012fa2:	b29b      	uxth	r3, r3
 8012fa4:	3308      	adds	r3, #8
 8012fa6:	b29a      	uxth	r2, r3
 8012fa8:	693b      	ldr	r3, [r7, #16]
 8012faa:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	22ff      	movs	r2, #255	; 0xff
 8012fb0:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	2200      	movs	r2, #0
 8012fb6:	729a      	strb	r2, [r3, #10]
 8012fb8:	2200      	movs	r2, #0
 8012fba:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8012fbc:	683b      	ldr	r3, [r7, #0]
 8012fbe:	9302      	str	r3, [sp, #8]
 8012fc0:	2301      	movs	r3, #1
 8012fc2:	9301      	str	r3, [sp, #4]
 8012fc4:	2300      	movs	r3, #0
 8012fc6:	9300      	str	r3, [sp, #0]
 8012fc8:	23ff      	movs	r3, #255	; 0xff
 8012fca:	2200      	movs	r2, #0
 8012fcc:	69f9      	ldr	r1, [r7, #28]
 8012fce:	6878      	ldr	r0, [r7, #4]
 8012fd0:	f000 fb52 	bl	8013678 <ip4_output_if>
 8012fd4:	4603      	mov	r3, r0
 8012fd6:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8012fd8:	e001      	b.n	8012fde <icmp_input+0x1ee>
      break;
 8012fda:	bf00      	nop
 8012fdc:	e000      	b.n	8012fe0 <icmp_input+0x1f0>
      break;
 8012fde:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8012fe0:	6878      	ldr	r0, [r7, #4]
 8012fe2:	f002 fdb1 	bl	8015b48 <pbuf_free>
  return;
 8012fe6:	e013      	b.n	8013010 <icmp_input+0x220>
    goto lenerr;
 8012fe8:	bf00      	nop
 8012fea:	e002      	b.n	8012ff2 <icmp_input+0x202>
    goto lenerr;
 8012fec:	bf00      	nop
 8012fee:	e000      	b.n	8012ff2 <icmp_input+0x202>
        goto lenerr;
 8012ff0:	bf00      	nop
lenerr:
  pbuf_free(p);
 8012ff2:	6878      	ldr	r0, [r7, #4]
 8012ff4:	f002 fda8 	bl	8015b48 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012ff8:	e00a      	b.n	8013010 <icmp_input+0x220>
        goto icmperr;
 8012ffa:	bf00      	nop
 8012ffc:	e004      	b.n	8013008 <icmp_input+0x218>
        goto icmperr;
 8012ffe:	bf00      	nop
 8013000:	e002      	b.n	8013008 <icmp_input+0x218>
          goto icmperr;
 8013002:	bf00      	nop
 8013004:	e000      	b.n	8013008 <icmp_input+0x218>
          goto icmperr;
 8013006:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8013008:	6878      	ldr	r0, [r7, #4]
 801300a:	f002 fd9d 	bl	8015b48 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801300e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8013010:	3728      	adds	r7, #40	; 0x28
 8013012:	46bd      	mov	sp, r7
 8013014:	bd80      	pop	{r7, pc}
 8013016:	bf00      	nop
 8013018:	24005f48 	.word	0x24005f48
 801301c:	24005f5c 	.word	0x24005f5c
 8013020:	08026220 	.word	0x08026220
 8013024:	08026280 	.word	0x08026280
 8013028:	080262b8 	.word	0x080262b8
 801302c:	080262e0 	.word	0x080262e0

08013030 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8013030:	b580      	push	{r7, lr}
 8013032:	b082      	sub	sp, #8
 8013034:	af00      	add	r7, sp, #0
 8013036:	6078      	str	r0, [r7, #4]
 8013038:	460b      	mov	r3, r1
 801303a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801303c:	78fb      	ldrb	r3, [r7, #3]
 801303e:	461a      	mov	r2, r3
 8013040:	2103      	movs	r1, #3
 8013042:	6878      	ldr	r0, [r7, #4]
 8013044:	f000 f814 	bl	8013070 <icmp_send_response>
}
 8013048:	bf00      	nop
 801304a:	3708      	adds	r7, #8
 801304c:	46bd      	mov	sp, r7
 801304e:	bd80      	pop	{r7, pc}

08013050 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8013050:	b580      	push	{r7, lr}
 8013052:	b082      	sub	sp, #8
 8013054:	af00      	add	r7, sp, #0
 8013056:	6078      	str	r0, [r7, #4]
 8013058:	460b      	mov	r3, r1
 801305a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801305c:	78fb      	ldrb	r3, [r7, #3]
 801305e:	461a      	mov	r2, r3
 8013060:	210b      	movs	r1, #11
 8013062:	6878      	ldr	r0, [r7, #4]
 8013064:	f000 f804 	bl	8013070 <icmp_send_response>
}
 8013068:	bf00      	nop
 801306a:	3708      	adds	r7, #8
 801306c:	46bd      	mov	sp, r7
 801306e:	bd80      	pop	{r7, pc}

08013070 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013070:	b580      	push	{r7, lr}
 8013072:	b08c      	sub	sp, #48	; 0x30
 8013074:	af04      	add	r7, sp, #16
 8013076:	6078      	str	r0, [r7, #4]
 8013078:	460b      	mov	r3, r1
 801307a:	70fb      	strb	r3, [r7, #3]
 801307c:	4613      	mov	r3, r2
 801307e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013080:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013084:	2124      	movs	r1, #36	; 0x24
 8013086:	2022      	movs	r0, #34	; 0x22
 8013088:	f002 fa7a 	bl	8015580 <pbuf_alloc>
 801308c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801308e:	69fb      	ldr	r3, [r7, #28]
 8013090:	2b00      	cmp	r3, #0
 8013092:	d056      	beq.n	8013142 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8013094:	69fb      	ldr	r3, [r7, #28]
 8013096:	895b      	ldrh	r3, [r3, #10]
 8013098:	2b23      	cmp	r3, #35	; 0x23
 801309a:	d806      	bhi.n	80130aa <icmp_send_response+0x3a>
 801309c:	4b2b      	ldr	r3, [pc, #172]	; (801314c <icmp_send_response+0xdc>)
 801309e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80130a2:	492b      	ldr	r1, [pc, #172]	; (8013150 <icmp_send_response+0xe0>)
 80130a4:	482b      	ldr	r0, [pc, #172]	; (8013154 <icmp_send_response+0xe4>)
 80130a6:	f00d fd61 	bl	8020b6c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	685b      	ldr	r3, [r3, #4]
 80130ae:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80130b0:	69fb      	ldr	r3, [r7, #28]
 80130b2:	685b      	ldr	r3, [r3, #4]
 80130b4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80130b6:	697b      	ldr	r3, [r7, #20]
 80130b8:	78fa      	ldrb	r2, [r7, #3]
 80130ba:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80130bc:	697b      	ldr	r3, [r7, #20]
 80130be:	78ba      	ldrb	r2, [r7, #2]
 80130c0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80130c2:	697b      	ldr	r3, [r7, #20]
 80130c4:	2200      	movs	r2, #0
 80130c6:	711a      	strb	r2, [r3, #4]
 80130c8:	2200      	movs	r2, #0
 80130ca:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80130cc:	697b      	ldr	r3, [r7, #20]
 80130ce:	2200      	movs	r2, #0
 80130d0:	719a      	strb	r2, [r3, #6]
 80130d2:	2200      	movs	r2, #0
 80130d4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80130d6:	69fb      	ldr	r3, [r7, #28]
 80130d8:	685b      	ldr	r3, [r3, #4]
 80130da:	f103 0008 	add.w	r0, r3, #8
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	685b      	ldr	r3, [r3, #4]
 80130e2:	221c      	movs	r2, #28
 80130e4:	4619      	mov	r1, r3
 80130e6:	f00c fe1f 	bl	801fd28 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80130ea:	69bb      	ldr	r3, [r7, #24]
 80130ec:	68db      	ldr	r3, [r3, #12]
 80130ee:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80130f0:	f107 030c 	add.w	r3, r7, #12
 80130f4:	4618      	mov	r0, r3
 80130f6:	f000 f901 	bl	80132fc <ip4_route>
 80130fa:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80130fc:	693b      	ldr	r3, [r7, #16]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d01b      	beq.n	801313a <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8013102:	697b      	ldr	r3, [r7, #20]
 8013104:	2200      	movs	r2, #0
 8013106:	709a      	strb	r2, [r3, #2]
 8013108:	2200      	movs	r2, #0
 801310a:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801310c:	69fb      	ldr	r3, [r7, #28]
 801310e:	895b      	ldrh	r3, [r3, #10]
 8013110:	4619      	mov	r1, r3
 8013112:	6978      	ldr	r0, [r7, #20]
 8013114:	f000 f87d 	bl	8013212 <inet_chksum>
 8013118:	4603      	mov	r3, r0
 801311a:	461a      	mov	r2, r3
 801311c:	697b      	ldr	r3, [r7, #20]
 801311e:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8013120:	f107 020c 	add.w	r2, r7, #12
 8013124:	693b      	ldr	r3, [r7, #16]
 8013126:	9302      	str	r3, [sp, #8]
 8013128:	2301      	movs	r3, #1
 801312a:	9301      	str	r3, [sp, #4]
 801312c:	2300      	movs	r3, #0
 801312e:	9300      	str	r3, [sp, #0]
 8013130:	23ff      	movs	r3, #255	; 0xff
 8013132:	2100      	movs	r1, #0
 8013134:	69f8      	ldr	r0, [r7, #28]
 8013136:	f000 fa9f 	bl	8013678 <ip4_output_if>
  }
  pbuf_free(q);
 801313a:	69f8      	ldr	r0, [r7, #28]
 801313c:	f002 fd04 	bl	8015b48 <pbuf_free>
 8013140:	e000      	b.n	8013144 <icmp_send_response+0xd4>
    return;
 8013142:	bf00      	nop
}
 8013144:	3720      	adds	r7, #32
 8013146:	46bd      	mov	sp, r7
 8013148:	bd80      	pop	{r7, pc}
 801314a:	bf00      	nop
 801314c:	08026220 	.word	0x08026220
 8013150:	08026314 	.word	0x08026314
 8013154:	080262b8 	.word	0x080262b8

08013158 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8013158:	b480      	push	{r7}
 801315a:	b089      	sub	sp, #36	; 0x24
 801315c:	af00      	add	r7, sp, #0
 801315e:	6078      	str	r0, [r7, #4]
 8013160:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8013166:	2300      	movs	r3, #0
 8013168:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 801316a:	2300      	movs	r3, #0
 801316c:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 801316e:	69fb      	ldr	r3, [r7, #28]
 8013170:	f003 0301 	and.w	r3, r3, #1
 8013174:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8013176:	693b      	ldr	r3, [r7, #16]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d00d      	beq.n	8013198 <lwip_standard_chksum+0x40>
 801317c:	683b      	ldr	r3, [r7, #0]
 801317e:	2b00      	cmp	r3, #0
 8013180:	dd0a      	ble.n	8013198 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8013182:	69fa      	ldr	r2, [r7, #28]
 8013184:	1c53      	adds	r3, r2, #1
 8013186:	61fb      	str	r3, [r7, #28]
 8013188:	f107 030e 	add.w	r3, r7, #14
 801318c:	3301      	adds	r3, #1
 801318e:	7812      	ldrb	r2, [r2, #0]
 8013190:	701a      	strb	r2, [r3, #0]
    len--;
 8013192:	683b      	ldr	r3, [r7, #0]
 8013194:	3b01      	subs	r3, #1
 8013196:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8013198:	69fb      	ldr	r3, [r7, #28]
 801319a:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 801319c:	e00a      	b.n	80131b4 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 801319e:	69bb      	ldr	r3, [r7, #24]
 80131a0:	1c9a      	adds	r2, r3, #2
 80131a2:	61ba      	str	r2, [r7, #24]
 80131a4:	881b      	ldrh	r3, [r3, #0]
 80131a6:	461a      	mov	r2, r3
 80131a8:	697b      	ldr	r3, [r7, #20]
 80131aa:	4413      	add	r3, r2
 80131ac:	617b      	str	r3, [r7, #20]
    len -= 2;
 80131ae:	683b      	ldr	r3, [r7, #0]
 80131b0:	3b02      	subs	r3, #2
 80131b2:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 80131b4:	683b      	ldr	r3, [r7, #0]
 80131b6:	2b01      	cmp	r3, #1
 80131b8:	dcf1      	bgt.n	801319e <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80131ba:	683b      	ldr	r3, [r7, #0]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	dd04      	ble.n	80131ca <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80131c0:	f107 030e 	add.w	r3, r7, #14
 80131c4:	69ba      	ldr	r2, [r7, #24]
 80131c6:	7812      	ldrb	r2, [r2, #0]
 80131c8:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 80131ca:	89fb      	ldrh	r3, [r7, #14]
 80131cc:	461a      	mov	r2, r3
 80131ce:	697b      	ldr	r3, [r7, #20]
 80131d0:	4413      	add	r3, r2
 80131d2:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80131d4:	697b      	ldr	r3, [r7, #20]
 80131d6:	0c1a      	lsrs	r2, r3, #16
 80131d8:	697b      	ldr	r3, [r7, #20]
 80131da:	b29b      	uxth	r3, r3
 80131dc:	4413      	add	r3, r2
 80131de:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 80131e0:	697b      	ldr	r3, [r7, #20]
 80131e2:	0c1a      	lsrs	r2, r3, #16
 80131e4:	697b      	ldr	r3, [r7, #20]
 80131e6:	b29b      	uxth	r3, r3
 80131e8:	4413      	add	r3, r2
 80131ea:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 80131ec:	693b      	ldr	r3, [r7, #16]
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d007      	beq.n	8013202 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 80131f2:	697b      	ldr	r3, [r7, #20]
 80131f4:	021b      	lsls	r3, r3, #8
 80131f6:	b29a      	uxth	r2, r3
 80131f8:	697b      	ldr	r3, [r7, #20]
 80131fa:	0a1b      	lsrs	r3, r3, #8
 80131fc:	b2db      	uxtb	r3, r3
 80131fe:	4313      	orrs	r3, r2
 8013200:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8013202:	697b      	ldr	r3, [r7, #20]
 8013204:	b29b      	uxth	r3, r3
}
 8013206:	4618      	mov	r0, r3
 8013208:	3724      	adds	r7, #36	; 0x24
 801320a:	46bd      	mov	sp, r7
 801320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013210:	4770      	bx	lr

08013212 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8013212:	b580      	push	{r7, lr}
 8013214:	b082      	sub	sp, #8
 8013216:	af00      	add	r7, sp, #0
 8013218:	6078      	str	r0, [r7, #4]
 801321a:	460b      	mov	r3, r1
 801321c:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 801321e:	887b      	ldrh	r3, [r7, #2]
 8013220:	4619      	mov	r1, r3
 8013222:	6878      	ldr	r0, [r7, #4]
 8013224:	f7ff ff98 	bl	8013158 <lwip_standard_chksum>
 8013228:	4603      	mov	r3, r0
 801322a:	43db      	mvns	r3, r3
 801322c:	b29b      	uxth	r3, r3
}
 801322e:	4618      	mov	r0, r3
 8013230:	3708      	adds	r7, #8
 8013232:	46bd      	mov	sp, r7
 8013234:	bd80      	pop	{r7, pc}

08013236 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8013236:	b580      	push	{r7, lr}
 8013238:	b086      	sub	sp, #24
 801323a:	af00      	add	r7, sp, #0
 801323c:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 801323e:	2300      	movs	r3, #0
 8013240:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8013242:	2300      	movs	r3, #0
 8013244:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	613b      	str	r3, [r7, #16]
 801324a:	e02b      	b.n	80132a4 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 801324c:	693b      	ldr	r3, [r7, #16]
 801324e:	685a      	ldr	r2, [r3, #4]
 8013250:	693b      	ldr	r3, [r7, #16]
 8013252:	895b      	ldrh	r3, [r3, #10]
 8013254:	4619      	mov	r1, r3
 8013256:	4610      	mov	r0, r2
 8013258:	f7ff ff7e 	bl	8013158 <lwip_standard_chksum>
 801325c:	4603      	mov	r3, r0
 801325e:	461a      	mov	r2, r3
 8013260:	697b      	ldr	r3, [r7, #20]
 8013262:	4413      	add	r3, r2
 8013264:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8013266:	697b      	ldr	r3, [r7, #20]
 8013268:	0c1a      	lsrs	r2, r3, #16
 801326a:	697b      	ldr	r3, [r7, #20]
 801326c:	b29b      	uxth	r3, r3
 801326e:	4413      	add	r3, r2
 8013270:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8013272:	693b      	ldr	r3, [r7, #16]
 8013274:	895b      	ldrh	r3, [r3, #10]
 8013276:	f003 0301 	and.w	r3, r3, #1
 801327a:	b29b      	uxth	r3, r3
 801327c:	2b00      	cmp	r3, #0
 801327e:	d00e      	beq.n	801329e <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	2b00      	cmp	r3, #0
 8013284:	bf0c      	ite	eq
 8013286:	2301      	moveq	r3, #1
 8013288:	2300      	movne	r3, #0
 801328a:	b2db      	uxtb	r3, r3
 801328c:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 801328e:	697b      	ldr	r3, [r7, #20]
 8013290:	021b      	lsls	r3, r3, #8
 8013292:	b29a      	uxth	r2, r3
 8013294:	697b      	ldr	r3, [r7, #20]
 8013296:	0a1b      	lsrs	r3, r3, #8
 8013298:	b2db      	uxtb	r3, r3
 801329a:	4313      	orrs	r3, r2
 801329c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 801329e:	693b      	ldr	r3, [r7, #16]
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	613b      	str	r3, [r7, #16]
 80132a4:	693b      	ldr	r3, [r7, #16]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d1d0      	bne.n	801324c <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d007      	beq.n	80132c0 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 80132b0:	697b      	ldr	r3, [r7, #20]
 80132b2:	021b      	lsls	r3, r3, #8
 80132b4:	b29a      	uxth	r2, r3
 80132b6:	697b      	ldr	r3, [r7, #20]
 80132b8:	0a1b      	lsrs	r3, r3, #8
 80132ba:	b2db      	uxtb	r3, r3
 80132bc:	4313      	orrs	r3, r2
 80132be:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 80132c0:	697b      	ldr	r3, [r7, #20]
 80132c2:	b29b      	uxth	r3, r3
 80132c4:	43db      	mvns	r3, r3
 80132c6:	b29b      	uxth	r3, r3
}
 80132c8:	4618      	mov	r0, r3
 80132ca:	3718      	adds	r7, #24
 80132cc:	46bd      	mov	sp, r7
 80132ce:	bd80      	pop	{r7, pc}

080132d0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80132d0:	b580      	push	{r7, lr}
 80132d2:	b082      	sub	sp, #8
 80132d4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80132d6:	2300      	movs	r3, #0
 80132d8:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80132da:	f001 f9e5 	bl	80146a8 <mem_init>
  memp_init();
 80132de:	f001 fce7 	bl	8014cb0 <memp_init>
  pbuf_init();
  netif_init();
 80132e2:	f001 fde5 	bl	8014eb0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80132e6:	f009 fa0f 	bl	801c708 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80132ea:	f002 ff73 	bl	80161d4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80132ee:	f009 f981 	bl	801c5f4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80132f2:	bf00      	nop
 80132f4:	3708      	adds	r7, #8
 80132f6:	46bd      	mov	sp, r7
 80132f8:	bd80      	pop	{r7, pc}
	...

080132fc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80132fc:	b480      	push	{r7}
 80132fe:	b085      	sub	sp, #20
 8013300:	af00      	add	r7, sp, #0
 8013302:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8013304:	4b33      	ldr	r3, [pc, #204]	; (80133d4 <ip4_route+0xd8>)
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	60fb      	str	r3, [r7, #12]
 801330a:	e036      	b.n	801337a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013312:	f003 0301 	and.w	r3, r3, #1
 8013316:	b2db      	uxtb	r3, r3
 8013318:	2b00      	cmp	r3, #0
 801331a:	d02b      	beq.n	8013374 <ip4_route+0x78>
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013322:	089b      	lsrs	r3, r3, #2
 8013324:	f003 0301 	and.w	r3, r3, #1
 8013328:	b2db      	uxtb	r3, r3
 801332a:	2b00      	cmp	r3, #0
 801332c:	d022      	beq.n	8013374 <ip4_route+0x78>
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	3304      	adds	r3, #4
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	2b00      	cmp	r3, #0
 8013336:	d01d      	beq.n	8013374 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	681a      	ldr	r2, [r3, #0]
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	3304      	adds	r3, #4
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	405a      	eors	r2, r3
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	3308      	adds	r3, #8
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	4013      	ands	r3, r2
 801334c:	2b00      	cmp	r3, #0
 801334e:	d101      	bne.n	8013354 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	e038      	b.n	80133c6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801335a:	f003 0302 	and.w	r3, r3, #2
 801335e:	2b00      	cmp	r3, #0
 8013360:	d108      	bne.n	8013374 <ip4_route+0x78>
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	681a      	ldr	r2, [r3, #0]
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	330c      	adds	r3, #12
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	429a      	cmp	r2, r3
 801336e:	d101      	bne.n	8013374 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	e028      	b.n	80133c6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	60fb      	str	r3, [r7, #12]
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	2b00      	cmp	r3, #0
 801337e:	d1c5      	bne.n	801330c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013380:	4b15      	ldr	r3, [pc, #84]	; (80133d8 <ip4_route+0xdc>)
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	2b00      	cmp	r3, #0
 8013386:	d01a      	beq.n	80133be <ip4_route+0xc2>
 8013388:	4b13      	ldr	r3, [pc, #76]	; (80133d8 <ip4_route+0xdc>)
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013390:	f003 0301 	and.w	r3, r3, #1
 8013394:	2b00      	cmp	r3, #0
 8013396:	d012      	beq.n	80133be <ip4_route+0xc2>
 8013398:	4b0f      	ldr	r3, [pc, #60]	; (80133d8 <ip4_route+0xdc>)
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80133a0:	f003 0304 	and.w	r3, r3, #4
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d00a      	beq.n	80133be <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80133a8:	4b0b      	ldr	r3, [pc, #44]	; (80133d8 <ip4_route+0xdc>)
 80133aa:	681b      	ldr	r3, [r3, #0]
 80133ac:	3304      	adds	r3, #4
 80133ae:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d004      	beq.n	80133be <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	b2db      	uxtb	r3, r3
 80133ba:	2b7f      	cmp	r3, #127	; 0x7f
 80133bc:	d101      	bne.n	80133c2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80133be:	2300      	movs	r3, #0
 80133c0:	e001      	b.n	80133c6 <ip4_route+0xca>
  }

  return netif_default;
 80133c2:	4b05      	ldr	r3, [pc, #20]	; (80133d8 <ip4_route+0xdc>)
 80133c4:	681b      	ldr	r3, [r3, #0]
}
 80133c6:	4618      	mov	r0, r3
 80133c8:	3714      	adds	r7, #20
 80133ca:	46bd      	mov	sp, r7
 80133cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d0:	4770      	bx	lr
 80133d2:	bf00      	nop
 80133d4:	24008e28 	.word	0x24008e28
 80133d8:	24008e2c 	.word	0x24008e2c

080133dc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80133dc:	b580      	push	{r7, lr}
 80133de:	b082      	sub	sp, #8
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80133ea:	f003 0301 	and.w	r3, r3, #1
 80133ee:	b2db      	uxtb	r3, r3
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d016      	beq.n	8013422 <ip4_input_accept+0x46>
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	3304      	adds	r3, #4
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d011      	beq.n	8013422 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80133fe:	4b0b      	ldr	r3, [pc, #44]	; (801342c <ip4_input_accept+0x50>)
 8013400:	695a      	ldr	r2, [r3, #20]
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	3304      	adds	r3, #4
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	429a      	cmp	r2, r3
 801340a:	d008      	beq.n	801341e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801340c:	4b07      	ldr	r3, [pc, #28]	; (801342c <ip4_input_accept+0x50>)
 801340e:	695b      	ldr	r3, [r3, #20]
 8013410:	6879      	ldr	r1, [r7, #4]
 8013412:	4618      	mov	r0, r3
 8013414:	f000 fa08 	bl	8013828 <ip4_addr_isbroadcast_u32>
 8013418:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801341a:	2b00      	cmp	r3, #0
 801341c:	d001      	beq.n	8013422 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801341e:	2301      	movs	r3, #1
 8013420:	e000      	b.n	8013424 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8013422:	2300      	movs	r3, #0
}
 8013424:	4618      	mov	r0, r3
 8013426:	3708      	adds	r7, #8
 8013428:	46bd      	mov	sp, r7
 801342a:	bd80      	pop	{r7, pc}
 801342c:	24005f48 	.word	0x24005f48

08013430 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8013430:	b580      	push	{r7, lr}
 8013432:	b086      	sub	sp, #24
 8013434:	af00      	add	r7, sp, #0
 8013436:	6078      	str	r0, [r7, #4]
 8013438:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	685b      	ldr	r3, [r3, #4]
 801343e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8013440:	697b      	ldr	r3, [r7, #20]
 8013442:	781b      	ldrb	r3, [r3, #0]
 8013444:	091b      	lsrs	r3, r3, #4
 8013446:	b2db      	uxtb	r3, r3
 8013448:	2b04      	cmp	r3, #4
 801344a:	d004      	beq.n	8013456 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801344c:	6878      	ldr	r0, [r7, #4]
 801344e:	f002 fb7b 	bl	8015b48 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8013452:	2300      	movs	r3, #0
 8013454:	e107      	b.n	8013666 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8013456:	697b      	ldr	r3, [r7, #20]
 8013458:	781b      	ldrb	r3, [r3, #0]
 801345a:	f003 030f 	and.w	r3, r3, #15
 801345e:	b2db      	uxtb	r3, r3
 8013460:	009b      	lsls	r3, r3, #2
 8013462:	b2db      	uxtb	r3, r3
 8013464:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8013466:	697b      	ldr	r3, [r7, #20]
 8013468:	885b      	ldrh	r3, [r3, #2]
 801346a:	b29b      	uxth	r3, r3
 801346c:	4618      	mov	r0, r3
 801346e:	f7fe fc6f 	bl	8011d50 <lwip_htons>
 8013472:	4603      	mov	r3, r0
 8013474:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	891b      	ldrh	r3, [r3, #8]
 801347a:	89ba      	ldrh	r2, [r7, #12]
 801347c:	429a      	cmp	r2, r3
 801347e:	d204      	bcs.n	801348a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8013480:	89bb      	ldrh	r3, [r7, #12]
 8013482:	4619      	mov	r1, r3
 8013484:	6878      	ldr	r0, [r7, #4]
 8013486:	f002 f9d9 	bl	801583c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	895b      	ldrh	r3, [r3, #10]
 801348e:	89fa      	ldrh	r2, [r7, #14]
 8013490:	429a      	cmp	r2, r3
 8013492:	d807      	bhi.n	80134a4 <ip4_input+0x74>
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	891b      	ldrh	r3, [r3, #8]
 8013498:	89ba      	ldrh	r2, [r7, #12]
 801349a:	429a      	cmp	r2, r3
 801349c:	d802      	bhi.n	80134a4 <ip4_input+0x74>
 801349e:	89fb      	ldrh	r3, [r7, #14]
 80134a0:	2b13      	cmp	r3, #19
 80134a2:	d804      	bhi.n	80134ae <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80134a4:	6878      	ldr	r0, [r7, #4]
 80134a6:	f002 fb4f 	bl	8015b48 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80134aa:	2300      	movs	r3, #0
 80134ac:	e0db      	b.n	8013666 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80134ae:	697b      	ldr	r3, [r7, #20]
 80134b0:	691b      	ldr	r3, [r3, #16]
 80134b2:	4a6f      	ldr	r2, [pc, #444]	; (8013670 <ip4_input+0x240>)
 80134b4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80134b6:	697b      	ldr	r3, [r7, #20]
 80134b8:	68db      	ldr	r3, [r3, #12]
 80134ba:	4a6d      	ldr	r2, [pc, #436]	; (8013670 <ip4_input+0x240>)
 80134bc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80134be:	4b6c      	ldr	r3, [pc, #432]	; (8013670 <ip4_input+0x240>)
 80134c0:	695b      	ldr	r3, [r3, #20]
 80134c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80134c6:	2be0      	cmp	r3, #224	; 0xe0
 80134c8:	d112      	bne.n	80134f0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80134ca:	683b      	ldr	r3, [r7, #0]
 80134cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80134d0:	f003 0301 	and.w	r3, r3, #1
 80134d4:	b2db      	uxtb	r3, r3
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d007      	beq.n	80134ea <ip4_input+0xba>
 80134da:	683b      	ldr	r3, [r7, #0]
 80134dc:	3304      	adds	r3, #4
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d002      	beq.n	80134ea <ip4_input+0xba>
      netif = inp;
 80134e4:	683b      	ldr	r3, [r7, #0]
 80134e6:	613b      	str	r3, [r7, #16]
 80134e8:	e02a      	b.n	8013540 <ip4_input+0x110>
    } else {
      netif = NULL;
 80134ea:	2300      	movs	r3, #0
 80134ec:	613b      	str	r3, [r7, #16]
 80134ee:	e027      	b.n	8013540 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80134f0:	6838      	ldr	r0, [r7, #0]
 80134f2:	f7ff ff73 	bl	80133dc <ip4_input_accept>
 80134f6:	4603      	mov	r3, r0
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d002      	beq.n	8013502 <ip4_input+0xd2>
      netif = inp;
 80134fc:	683b      	ldr	r3, [r7, #0]
 80134fe:	613b      	str	r3, [r7, #16]
 8013500:	e01e      	b.n	8013540 <ip4_input+0x110>
    } else {
      netif = NULL;
 8013502:	2300      	movs	r3, #0
 8013504:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8013506:	4b5a      	ldr	r3, [pc, #360]	; (8013670 <ip4_input+0x240>)
 8013508:	695b      	ldr	r3, [r3, #20]
 801350a:	b2db      	uxtb	r3, r3
 801350c:	2b7f      	cmp	r3, #127	; 0x7f
 801350e:	d017      	beq.n	8013540 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8013510:	4b58      	ldr	r3, [pc, #352]	; (8013674 <ip4_input+0x244>)
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	613b      	str	r3, [r7, #16]
 8013516:	e00e      	b.n	8013536 <ip4_input+0x106>
          if (netif == inp) {
 8013518:	693a      	ldr	r2, [r7, #16]
 801351a:	683b      	ldr	r3, [r7, #0]
 801351c:	429a      	cmp	r2, r3
 801351e:	d006      	beq.n	801352e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8013520:	6938      	ldr	r0, [r7, #16]
 8013522:	f7ff ff5b 	bl	80133dc <ip4_input_accept>
 8013526:	4603      	mov	r3, r0
 8013528:	2b00      	cmp	r3, #0
 801352a:	d108      	bne.n	801353e <ip4_input+0x10e>
 801352c:	e000      	b.n	8013530 <ip4_input+0x100>
            continue;
 801352e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8013530:	693b      	ldr	r3, [r7, #16]
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	613b      	str	r3, [r7, #16]
 8013536:	693b      	ldr	r3, [r7, #16]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d1ed      	bne.n	8013518 <ip4_input+0xe8>
 801353c:	e000      	b.n	8013540 <ip4_input+0x110>
            break;
 801353e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013540:	4b4b      	ldr	r3, [pc, #300]	; (8013670 <ip4_input+0x240>)
 8013542:	691b      	ldr	r3, [r3, #16]
 8013544:	6839      	ldr	r1, [r7, #0]
 8013546:	4618      	mov	r0, r3
 8013548:	f000 f96e 	bl	8013828 <ip4_addr_isbroadcast_u32>
 801354c:	4603      	mov	r3, r0
 801354e:	2b00      	cmp	r3, #0
 8013550:	d105      	bne.n	801355e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8013552:	4b47      	ldr	r3, [pc, #284]	; (8013670 <ip4_input+0x240>)
 8013554:	691b      	ldr	r3, [r3, #16]
 8013556:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801355a:	2be0      	cmp	r3, #224	; 0xe0
 801355c:	d104      	bne.n	8013568 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801355e:	6878      	ldr	r0, [r7, #4]
 8013560:	f002 faf2 	bl	8015b48 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8013564:	2300      	movs	r3, #0
 8013566:	e07e      	b.n	8013666 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8013568:	693b      	ldr	r3, [r7, #16]
 801356a:	2b00      	cmp	r3, #0
 801356c:	d104      	bne.n	8013578 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801356e:	6878      	ldr	r0, [r7, #4]
 8013570:	f002 faea 	bl	8015b48 <pbuf_free>
    return ERR_OK;
 8013574:	2300      	movs	r3, #0
 8013576:	e076      	b.n	8013666 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8013578:	697b      	ldr	r3, [r7, #20]
 801357a:	88db      	ldrh	r3, [r3, #6]
 801357c:	b29b      	uxth	r3, r3
 801357e:	461a      	mov	r2, r3
 8013580:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8013584:	4013      	ands	r3, r2
 8013586:	2b00      	cmp	r3, #0
 8013588:	d00b      	beq.n	80135a2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801358a:	6878      	ldr	r0, [r7, #4]
 801358c:	f000 fc92 	bl	8013eb4 <ip4_reass>
 8013590:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	2b00      	cmp	r3, #0
 8013596:	d101      	bne.n	801359c <ip4_input+0x16c>
      return ERR_OK;
 8013598:	2300      	movs	r3, #0
 801359a:	e064      	b.n	8013666 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	685b      	ldr	r3, [r3, #4]
 80135a0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80135a2:	4a33      	ldr	r2, [pc, #204]	; (8013670 <ip4_input+0x240>)
 80135a4:	693b      	ldr	r3, [r7, #16]
 80135a6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80135a8:	4a31      	ldr	r2, [pc, #196]	; (8013670 <ip4_input+0x240>)
 80135aa:	683b      	ldr	r3, [r7, #0]
 80135ac:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80135ae:	4a30      	ldr	r2, [pc, #192]	; (8013670 <ip4_input+0x240>)
 80135b0:	697b      	ldr	r3, [r7, #20]
 80135b2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80135b4:	697b      	ldr	r3, [r7, #20]
 80135b6:	781b      	ldrb	r3, [r3, #0]
 80135b8:	f003 030f 	and.w	r3, r3, #15
 80135bc:	b2db      	uxtb	r3, r3
 80135be:	009b      	lsls	r3, r3, #2
 80135c0:	b2db      	uxtb	r3, r3
 80135c2:	b29a      	uxth	r2, r3
 80135c4:	4b2a      	ldr	r3, [pc, #168]	; (8013670 <ip4_input+0x240>)
 80135c6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80135c8:	89fb      	ldrh	r3, [r7, #14]
 80135ca:	4619      	mov	r1, r3
 80135cc:	6878      	ldr	r0, [r7, #4]
 80135ce:	f002 fa35 	bl	8015a3c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80135d2:	697b      	ldr	r3, [r7, #20]
 80135d4:	7a5b      	ldrb	r3, [r3, #9]
 80135d6:	2b11      	cmp	r3, #17
 80135d8:	d006      	beq.n	80135e8 <ip4_input+0x1b8>
 80135da:	2b11      	cmp	r3, #17
 80135dc:	dc13      	bgt.n	8013606 <ip4_input+0x1d6>
 80135de:	2b01      	cmp	r3, #1
 80135e0:	d00c      	beq.n	80135fc <ip4_input+0x1cc>
 80135e2:	2b06      	cmp	r3, #6
 80135e4:	d005      	beq.n	80135f2 <ip4_input+0x1c2>
 80135e6:	e00e      	b.n	8013606 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80135e8:	6839      	ldr	r1, [r7, #0]
 80135ea:	6878      	ldr	r0, [r7, #4]
 80135ec:	f009 f93a 	bl	801c864 <udp_input>
        break;
 80135f0:	e026      	b.n	8013640 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80135f2:	6839      	ldr	r1, [r7, #0]
 80135f4:	6878      	ldr	r0, [r7, #4]
 80135f6:	f004 fd27 	bl	8018048 <tcp_input>
        break;
 80135fa:	e021      	b.n	8013640 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80135fc:	6839      	ldr	r1, [r7, #0]
 80135fe:	6878      	ldr	r0, [r7, #4]
 8013600:	f7ff fbf6 	bl	8012df0 <icmp_input>
        break;
 8013604:	e01c      	b.n	8013640 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013606:	4b1a      	ldr	r3, [pc, #104]	; (8013670 <ip4_input+0x240>)
 8013608:	695b      	ldr	r3, [r3, #20]
 801360a:	6939      	ldr	r1, [r7, #16]
 801360c:	4618      	mov	r0, r3
 801360e:	f000 f90b 	bl	8013828 <ip4_addr_isbroadcast_u32>
 8013612:	4603      	mov	r3, r0
 8013614:	2b00      	cmp	r3, #0
 8013616:	d10f      	bne.n	8013638 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013618:	4b15      	ldr	r3, [pc, #84]	; (8013670 <ip4_input+0x240>)
 801361a:	695b      	ldr	r3, [r3, #20]
 801361c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013620:	2be0      	cmp	r3, #224	; 0xe0
 8013622:	d009      	beq.n	8013638 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8013624:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013628:	4619      	mov	r1, r3
 801362a:	6878      	ldr	r0, [r7, #4]
 801362c:	f002 fa79 	bl	8015b22 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013630:	2102      	movs	r1, #2
 8013632:	6878      	ldr	r0, [r7, #4]
 8013634:	f7ff fcfc 	bl	8013030 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8013638:	6878      	ldr	r0, [r7, #4]
 801363a:	f002 fa85 	bl	8015b48 <pbuf_free>
        break;
 801363e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8013640:	4b0b      	ldr	r3, [pc, #44]	; (8013670 <ip4_input+0x240>)
 8013642:	2200      	movs	r2, #0
 8013644:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8013646:	4b0a      	ldr	r3, [pc, #40]	; (8013670 <ip4_input+0x240>)
 8013648:	2200      	movs	r2, #0
 801364a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801364c:	4b08      	ldr	r3, [pc, #32]	; (8013670 <ip4_input+0x240>)
 801364e:	2200      	movs	r2, #0
 8013650:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8013652:	4b07      	ldr	r3, [pc, #28]	; (8013670 <ip4_input+0x240>)
 8013654:	2200      	movs	r2, #0
 8013656:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013658:	4b05      	ldr	r3, [pc, #20]	; (8013670 <ip4_input+0x240>)
 801365a:	2200      	movs	r2, #0
 801365c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801365e:	4b04      	ldr	r3, [pc, #16]	; (8013670 <ip4_input+0x240>)
 8013660:	2200      	movs	r2, #0
 8013662:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013664:	2300      	movs	r3, #0
}
 8013666:	4618      	mov	r0, r3
 8013668:	3718      	adds	r7, #24
 801366a:	46bd      	mov	sp, r7
 801366c:	bd80      	pop	{r7, pc}
 801366e:	bf00      	nop
 8013670:	24005f48 	.word	0x24005f48
 8013674:	24008e28 	.word	0x24008e28

08013678 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013678:	b580      	push	{r7, lr}
 801367a:	b08a      	sub	sp, #40	; 0x28
 801367c:	af04      	add	r7, sp, #16
 801367e:	60f8      	str	r0, [r7, #12]
 8013680:	60b9      	str	r1, [r7, #8]
 8013682:	607a      	str	r2, [r7, #4]
 8013684:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8013686:	68bb      	ldr	r3, [r7, #8]
 8013688:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	2b00      	cmp	r3, #0
 801368e:	d009      	beq.n	80136a4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013690:	68bb      	ldr	r3, [r7, #8]
 8013692:	2b00      	cmp	r3, #0
 8013694:	d003      	beq.n	801369e <ip4_output_if+0x26>
 8013696:	68bb      	ldr	r3, [r7, #8]
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d102      	bne.n	80136a4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801369e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136a0:	3304      	adds	r3, #4
 80136a2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80136a4:	78fa      	ldrb	r2, [r7, #3]
 80136a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136a8:	9302      	str	r3, [sp, #8]
 80136aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80136ae:	9301      	str	r3, [sp, #4]
 80136b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80136b4:	9300      	str	r3, [sp, #0]
 80136b6:	4613      	mov	r3, r2
 80136b8:	687a      	ldr	r2, [r7, #4]
 80136ba:	6979      	ldr	r1, [r7, #20]
 80136bc:	68f8      	ldr	r0, [r7, #12]
 80136be:	f000 f805 	bl	80136cc <ip4_output_if_src>
 80136c2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80136c4:	4618      	mov	r0, r3
 80136c6:	3718      	adds	r7, #24
 80136c8:	46bd      	mov	sp, r7
 80136ca:	bd80      	pop	{r7, pc}

080136cc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80136cc:	b580      	push	{r7, lr}
 80136ce:	b088      	sub	sp, #32
 80136d0:	af00      	add	r7, sp, #0
 80136d2:	60f8      	str	r0, [r7, #12]
 80136d4:	60b9      	str	r1, [r7, #8]
 80136d6:	607a      	str	r2, [r7, #4]
 80136d8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80136da:	68fb      	ldr	r3, [r7, #12]
 80136dc:	7b9b      	ldrb	r3, [r3, #14]
 80136de:	2b01      	cmp	r3, #1
 80136e0:	d006      	beq.n	80136f0 <ip4_output_if_src+0x24>
 80136e2:	4b4b      	ldr	r3, [pc, #300]	; (8013810 <ip4_output_if_src+0x144>)
 80136e4:	f44f 7255 	mov.w	r2, #852	; 0x354
 80136e8:	494a      	ldr	r1, [pc, #296]	; (8013814 <ip4_output_if_src+0x148>)
 80136ea:	484b      	ldr	r0, [pc, #300]	; (8013818 <ip4_output_if_src+0x14c>)
 80136ec:	f00d fa3e 	bl	8020b6c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d060      	beq.n	80137b8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80136f6:	2314      	movs	r3, #20
 80136f8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80136fa:	2114      	movs	r1, #20
 80136fc:	68f8      	ldr	r0, [r7, #12]
 80136fe:	f002 f98d 	bl	8015a1c <pbuf_add_header>
 8013702:	4603      	mov	r3, r0
 8013704:	2b00      	cmp	r3, #0
 8013706:	d002      	beq.n	801370e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013708:	f06f 0301 	mvn.w	r3, #1
 801370c:	e07c      	b.n	8013808 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	685b      	ldr	r3, [r3, #4]
 8013712:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	895b      	ldrh	r3, [r3, #10]
 8013718:	2b13      	cmp	r3, #19
 801371a:	d806      	bhi.n	801372a <ip4_output_if_src+0x5e>
 801371c:	4b3c      	ldr	r3, [pc, #240]	; (8013810 <ip4_output_if_src+0x144>)
 801371e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8013722:	493e      	ldr	r1, [pc, #248]	; (801381c <ip4_output_if_src+0x150>)
 8013724:	483c      	ldr	r0, [pc, #240]	; (8013818 <ip4_output_if_src+0x14c>)
 8013726:	f00d fa21 	bl	8020b6c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801372a:	69fb      	ldr	r3, [r7, #28]
 801372c:	78fa      	ldrb	r2, [r7, #3]
 801372e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013730:	69fb      	ldr	r3, [r7, #28]
 8013732:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8013736:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	681a      	ldr	r2, [r3, #0]
 801373c:	69fb      	ldr	r3, [r7, #28]
 801373e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8013740:	8b7b      	ldrh	r3, [r7, #26]
 8013742:	089b      	lsrs	r3, r3, #2
 8013744:	b29b      	uxth	r3, r3
 8013746:	b2db      	uxtb	r3, r3
 8013748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801374c:	b2da      	uxtb	r2, r3
 801374e:	69fb      	ldr	r3, [r7, #28]
 8013750:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013752:	69fb      	ldr	r3, [r7, #28]
 8013754:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013758:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	891b      	ldrh	r3, [r3, #8]
 801375e:	4618      	mov	r0, r3
 8013760:	f7fe faf6 	bl	8011d50 <lwip_htons>
 8013764:	4603      	mov	r3, r0
 8013766:	461a      	mov	r2, r3
 8013768:	69fb      	ldr	r3, [r7, #28]
 801376a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801376c:	69fb      	ldr	r3, [r7, #28]
 801376e:	2200      	movs	r2, #0
 8013770:	719a      	strb	r2, [r3, #6]
 8013772:	2200      	movs	r2, #0
 8013774:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013776:	4b2a      	ldr	r3, [pc, #168]	; (8013820 <ip4_output_if_src+0x154>)
 8013778:	881b      	ldrh	r3, [r3, #0]
 801377a:	4618      	mov	r0, r3
 801377c:	f7fe fae8 	bl	8011d50 <lwip_htons>
 8013780:	4603      	mov	r3, r0
 8013782:	461a      	mov	r2, r3
 8013784:	69fb      	ldr	r3, [r7, #28]
 8013786:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013788:	4b25      	ldr	r3, [pc, #148]	; (8013820 <ip4_output_if_src+0x154>)
 801378a:	881b      	ldrh	r3, [r3, #0]
 801378c:	3301      	adds	r3, #1
 801378e:	b29a      	uxth	r2, r3
 8013790:	4b23      	ldr	r3, [pc, #140]	; (8013820 <ip4_output_if_src+0x154>)
 8013792:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013794:	68bb      	ldr	r3, [r7, #8]
 8013796:	2b00      	cmp	r3, #0
 8013798:	d104      	bne.n	80137a4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801379a:	4b22      	ldr	r3, [pc, #136]	; (8013824 <ip4_output_if_src+0x158>)
 801379c:	681a      	ldr	r2, [r3, #0]
 801379e:	69fb      	ldr	r3, [r7, #28]
 80137a0:	60da      	str	r2, [r3, #12]
 80137a2:	e003      	b.n	80137ac <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80137a4:	68bb      	ldr	r3, [r7, #8]
 80137a6:	681a      	ldr	r2, [r3, #0]
 80137a8:	69fb      	ldr	r3, [r7, #28]
 80137aa:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80137ac:	69fb      	ldr	r3, [r7, #28]
 80137ae:	2200      	movs	r2, #0
 80137b0:	729a      	strb	r2, [r3, #10]
 80137b2:	2200      	movs	r2, #0
 80137b4:	72da      	strb	r2, [r3, #11]
 80137b6:	e00f      	b.n	80137d8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	895b      	ldrh	r3, [r3, #10]
 80137bc:	2b13      	cmp	r3, #19
 80137be:	d802      	bhi.n	80137c6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80137c0:	f06f 0301 	mvn.w	r3, #1
 80137c4:	e020      	b.n	8013808 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	685b      	ldr	r3, [r3, #4]
 80137ca:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80137cc:	69fb      	ldr	r3, [r7, #28]
 80137ce:	691b      	ldr	r3, [r3, #16]
 80137d0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80137d2:	f107 0314 	add.w	r3, r7, #20
 80137d6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80137d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d00c      	beq.n	80137fa <ip4_output_if_src+0x12e>
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	891a      	ldrh	r2, [r3, #8]
 80137e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80137e8:	429a      	cmp	r2, r3
 80137ea:	d906      	bls.n	80137fa <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80137ec:	687a      	ldr	r2, [r7, #4]
 80137ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80137f0:	68f8      	ldr	r0, [r7, #12]
 80137f2:	f000 fd4d 	bl	8014290 <ip4_frag>
 80137f6:	4603      	mov	r3, r0
 80137f8:	e006      	b.n	8013808 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80137fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137fc:	695b      	ldr	r3, [r3, #20]
 80137fe:	687a      	ldr	r2, [r7, #4]
 8013800:	68f9      	ldr	r1, [r7, #12]
 8013802:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013804:	4798      	blx	r3
 8013806:	4603      	mov	r3, r0
}
 8013808:	4618      	mov	r0, r3
 801380a:	3720      	adds	r7, #32
 801380c:	46bd      	mov	sp, r7
 801380e:	bd80      	pop	{r7, pc}
 8013810:	08026340 	.word	0x08026340
 8013814:	080263a0 	.word	0x080263a0
 8013818:	080263ac 	.word	0x080263ac
 801381c:	080263d4 	.word	0x080263d4
 8013820:	24005766 	.word	0x24005766
 8013824:	08029178 	.word	0x08029178

08013828 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013828:	b480      	push	{r7}
 801382a:	b085      	sub	sp, #20
 801382c:	af00      	add	r7, sp, #0
 801382e:	6078      	str	r0, [r7, #4]
 8013830:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801383c:	d002      	beq.n	8013844 <ip4_addr_isbroadcast_u32+0x1c>
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d101      	bne.n	8013848 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013844:	2301      	movs	r3, #1
 8013846:	e02a      	b.n	801389e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013848:	683b      	ldr	r3, [r7, #0]
 801384a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801384e:	f003 0302 	and.w	r3, r3, #2
 8013852:	2b00      	cmp	r3, #0
 8013854:	d101      	bne.n	801385a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8013856:	2300      	movs	r3, #0
 8013858:	e021      	b.n	801389e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801385a:	683b      	ldr	r3, [r7, #0]
 801385c:	3304      	adds	r3, #4
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	687a      	ldr	r2, [r7, #4]
 8013862:	429a      	cmp	r2, r3
 8013864:	d101      	bne.n	801386a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013866:	2300      	movs	r3, #0
 8013868:	e019      	b.n	801389e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801386a:	68fa      	ldr	r2, [r7, #12]
 801386c:	683b      	ldr	r3, [r7, #0]
 801386e:	3304      	adds	r3, #4
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	405a      	eors	r2, r3
 8013874:	683b      	ldr	r3, [r7, #0]
 8013876:	3308      	adds	r3, #8
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	4013      	ands	r3, r2
 801387c:	2b00      	cmp	r3, #0
 801387e:	d10d      	bne.n	801389c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013880:	683b      	ldr	r3, [r7, #0]
 8013882:	3308      	adds	r3, #8
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	43da      	mvns	r2, r3
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801388c:	683b      	ldr	r3, [r7, #0]
 801388e:	3308      	adds	r3, #8
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013894:	429a      	cmp	r2, r3
 8013896:	d101      	bne.n	801389c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013898:	2301      	movs	r3, #1
 801389a:	e000      	b.n	801389e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801389c:	2300      	movs	r3, #0
  }
}
 801389e:	4618      	mov	r0, r3
 80138a0:	3714      	adds	r7, #20
 80138a2:	46bd      	mov	sp, r7
 80138a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a8:	4770      	bx	lr
	...

080138ac <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80138ac:	b580      	push	{r7, lr}
 80138ae:	b084      	sub	sp, #16
 80138b0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80138b2:	2300      	movs	r3, #0
 80138b4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80138b6:	4b12      	ldr	r3, [pc, #72]	; (8013900 <ip_reass_tmr+0x54>)
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80138bc:	e018      	b.n	80138f0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	7fdb      	ldrb	r3, [r3, #31]
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d00b      	beq.n	80138de <ip_reass_tmr+0x32>
      r->timer--;
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	7fdb      	ldrb	r3, [r3, #31]
 80138ca:	3b01      	subs	r3, #1
 80138cc:	b2da      	uxtb	r2, r3
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	681b      	ldr	r3, [r3, #0]
 80138da:	60fb      	str	r3, [r7, #12]
 80138dc:	e008      	b.n	80138f0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80138e8:	68b9      	ldr	r1, [r7, #8]
 80138ea:	6878      	ldr	r0, [r7, #4]
 80138ec:	f000 f80a 	bl	8013904 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d1e3      	bne.n	80138be <ip_reass_tmr+0x12>
    }
  }
}
 80138f6:	bf00      	nop
 80138f8:	bf00      	nop
 80138fa:	3710      	adds	r7, #16
 80138fc:	46bd      	mov	sp, r7
 80138fe:	bd80      	pop	{r7, pc}
 8013900:	24005768 	.word	0x24005768

08013904 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013904:	b580      	push	{r7, lr}
 8013906:	b088      	sub	sp, #32
 8013908:	af00      	add	r7, sp, #0
 801390a:	6078      	str	r0, [r7, #4]
 801390c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801390e:	2300      	movs	r3, #0
 8013910:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8013912:	683a      	ldr	r2, [r7, #0]
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	429a      	cmp	r2, r3
 8013918:	d105      	bne.n	8013926 <ip_reass_free_complete_datagram+0x22>
 801391a:	4b45      	ldr	r3, [pc, #276]	; (8013a30 <ip_reass_free_complete_datagram+0x12c>)
 801391c:	22ab      	movs	r2, #171	; 0xab
 801391e:	4945      	ldr	r1, [pc, #276]	; (8013a34 <ip_reass_free_complete_datagram+0x130>)
 8013920:	4845      	ldr	r0, [pc, #276]	; (8013a38 <ip_reass_free_complete_datagram+0x134>)
 8013922:	f00d f923 	bl	8020b6c <iprintf>
  if (prev != NULL) {
 8013926:	683b      	ldr	r3, [r7, #0]
 8013928:	2b00      	cmp	r3, #0
 801392a:	d00a      	beq.n	8013942 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801392c:	683b      	ldr	r3, [r7, #0]
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	687a      	ldr	r2, [r7, #4]
 8013932:	429a      	cmp	r2, r3
 8013934:	d005      	beq.n	8013942 <ip_reass_free_complete_datagram+0x3e>
 8013936:	4b3e      	ldr	r3, [pc, #248]	; (8013a30 <ip_reass_free_complete_datagram+0x12c>)
 8013938:	22ad      	movs	r2, #173	; 0xad
 801393a:	4940      	ldr	r1, [pc, #256]	; (8013a3c <ip_reass_free_complete_datagram+0x138>)
 801393c:	483e      	ldr	r0, [pc, #248]	; (8013a38 <ip_reass_free_complete_datagram+0x134>)
 801393e:	f00d f915 	bl	8020b6c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	685b      	ldr	r3, [r3, #4]
 8013946:	685b      	ldr	r3, [r3, #4]
 8013948:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801394a:	697b      	ldr	r3, [r7, #20]
 801394c:	889b      	ldrh	r3, [r3, #4]
 801394e:	b29b      	uxth	r3, r3
 8013950:	2b00      	cmp	r3, #0
 8013952:	d12a      	bne.n	80139aa <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	685b      	ldr	r3, [r3, #4]
 8013958:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801395a:	697b      	ldr	r3, [r7, #20]
 801395c:	681a      	ldr	r2, [r3, #0]
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013962:	69bb      	ldr	r3, [r7, #24]
 8013964:	6858      	ldr	r0, [r3, #4]
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	3308      	adds	r3, #8
 801396a:	2214      	movs	r2, #20
 801396c:	4619      	mov	r1, r3
 801396e:	f00c f9db 	bl	801fd28 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013972:	2101      	movs	r1, #1
 8013974:	69b8      	ldr	r0, [r7, #24]
 8013976:	f7ff fb6b 	bl	8013050 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801397a:	69b8      	ldr	r0, [r7, #24]
 801397c:	f002 f96c 	bl	8015c58 <pbuf_clen>
 8013980:	4603      	mov	r3, r0
 8013982:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013984:	8bfa      	ldrh	r2, [r7, #30]
 8013986:	8a7b      	ldrh	r3, [r7, #18]
 8013988:	4413      	add	r3, r2
 801398a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801398e:	db05      	blt.n	801399c <ip_reass_free_complete_datagram+0x98>
 8013990:	4b27      	ldr	r3, [pc, #156]	; (8013a30 <ip_reass_free_complete_datagram+0x12c>)
 8013992:	22bc      	movs	r2, #188	; 0xbc
 8013994:	492a      	ldr	r1, [pc, #168]	; (8013a40 <ip_reass_free_complete_datagram+0x13c>)
 8013996:	4828      	ldr	r0, [pc, #160]	; (8013a38 <ip_reass_free_complete_datagram+0x134>)
 8013998:	f00d f8e8 	bl	8020b6c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801399c:	8bfa      	ldrh	r2, [r7, #30]
 801399e:	8a7b      	ldrh	r3, [r7, #18]
 80139a0:	4413      	add	r3, r2
 80139a2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80139a4:	69b8      	ldr	r0, [r7, #24]
 80139a6:	f002 f8cf 	bl	8015b48 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	685b      	ldr	r3, [r3, #4]
 80139ae:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80139b0:	e01f      	b.n	80139f2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80139b2:	69bb      	ldr	r3, [r7, #24]
 80139b4:	685b      	ldr	r3, [r3, #4]
 80139b6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80139b8:	69bb      	ldr	r3, [r7, #24]
 80139ba:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80139bc:	697b      	ldr	r3, [r7, #20]
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80139c2:	68f8      	ldr	r0, [r7, #12]
 80139c4:	f002 f948 	bl	8015c58 <pbuf_clen>
 80139c8:	4603      	mov	r3, r0
 80139ca:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80139cc:	8bfa      	ldrh	r2, [r7, #30]
 80139ce:	8a7b      	ldrh	r3, [r7, #18]
 80139d0:	4413      	add	r3, r2
 80139d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80139d6:	db05      	blt.n	80139e4 <ip_reass_free_complete_datagram+0xe0>
 80139d8:	4b15      	ldr	r3, [pc, #84]	; (8013a30 <ip_reass_free_complete_datagram+0x12c>)
 80139da:	22cc      	movs	r2, #204	; 0xcc
 80139dc:	4918      	ldr	r1, [pc, #96]	; (8013a40 <ip_reass_free_complete_datagram+0x13c>)
 80139de:	4816      	ldr	r0, [pc, #88]	; (8013a38 <ip_reass_free_complete_datagram+0x134>)
 80139e0:	f00d f8c4 	bl	8020b6c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80139e4:	8bfa      	ldrh	r2, [r7, #30]
 80139e6:	8a7b      	ldrh	r3, [r7, #18]
 80139e8:	4413      	add	r3, r2
 80139ea:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80139ec:	68f8      	ldr	r0, [r7, #12]
 80139ee:	f002 f8ab 	bl	8015b48 <pbuf_free>
  while (p != NULL) {
 80139f2:	69bb      	ldr	r3, [r7, #24]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d1dc      	bne.n	80139b2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80139f8:	6839      	ldr	r1, [r7, #0]
 80139fa:	6878      	ldr	r0, [r7, #4]
 80139fc:	f000 f8c2 	bl	8013b84 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8013a00:	4b10      	ldr	r3, [pc, #64]	; (8013a44 <ip_reass_free_complete_datagram+0x140>)
 8013a02:	881b      	ldrh	r3, [r3, #0]
 8013a04:	8bfa      	ldrh	r2, [r7, #30]
 8013a06:	429a      	cmp	r2, r3
 8013a08:	d905      	bls.n	8013a16 <ip_reass_free_complete_datagram+0x112>
 8013a0a:	4b09      	ldr	r3, [pc, #36]	; (8013a30 <ip_reass_free_complete_datagram+0x12c>)
 8013a0c:	22d2      	movs	r2, #210	; 0xd2
 8013a0e:	490e      	ldr	r1, [pc, #56]	; (8013a48 <ip_reass_free_complete_datagram+0x144>)
 8013a10:	4809      	ldr	r0, [pc, #36]	; (8013a38 <ip_reass_free_complete_datagram+0x134>)
 8013a12:	f00d f8ab 	bl	8020b6c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8013a16:	4b0b      	ldr	r3, [pc, #44]	; (8013a44 <ip_reass_free_complete_datagram+0x140>)
 8013a18:	881a      	ldrh	r2, [r3, #0]
 8013a1a:	8bfb      	ldrh	r3, [r7, #30]
 8013a1c:	1ad3      	subs	r3, r2, r3
 8013a1e:	b29a      	uxth	r2, r3
 8013a20:	4b08      	ldr	r3, [pc, #32]	; (8013a44 <ip_reass_free_complete_datagram+0x140>)
 8013a22:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8013a24:	8bfb      	ldrh	r3, [r7, #30]
}
 8013a26:	4618      	mov	r0, r3
 8013a28:	3720      	adds	r7, #32
 8013a2a:	46bd      	mov	sp, r7
 8013a2c:	bd80      	pop	{r7, pc}
 8013a2e:	bf00      	nop
 8013a30:	08026404 	.word	0x08026404
 8013a34:	08026468 	.word	0x08026468
 8013a38:	08026474 	.word	0x08026474
 8013a3c:	0802649c 	.word	0x0802649c
 8013a40:	080264b0 	.word	0x080264b0
 8013a44:	2400576c 	.word	0x2400576c
 8013a48:	080264d0 	.word	0x080264d0

08013a4c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8013a4c:	b580      	push	{r7, lr}
 8013a4e:	b08a      	sub	sp, #40	; 0x28
 8013a50:	af00      	add	r7, sp, #0
 8013a52:	6078      	str	r0, [r7, #4]
 8013a54:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8013a56:	2300      	movs	r3, #0
 8013a58:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8013a5e:	2300      	movs	r3, #0
 8013a60:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013a62:	2300      	movs	r3, #0
 8013a64:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8013a66:	2300      	movs	r3, #0
 8013a68:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8013a6a:	4b28      	ldr	r3, [pc, #160]	; (8013b0c <ip_reass_remove_oldest_datagram+0xc0>)
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013a70:	e030      	b.n	8013ad4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a74:	695a      	ldr	r2, [r3, #20]
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	68db      	ldr	r3, [r3, #12]
 8013a7a:	429a      	cmp	r2, r3
 8013a7c:	d10c      	bne.n	8013a98 <ip_reass_remove_oldest_datagram+0x4c>
 8013a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a80:	699a      	ldr	r2, [r3, #24]
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	691b      	ldr	r3, [r3, #16]
 8013a86:	429a      	cmp	r2, r3
 8013a88:	d106      	bne.n	8013a98 <ip_reass_remove_oldest_datagram+0x4c>
 8013a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a8c:	899a      	ldrh	r2, [r3, #12]
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	889b      	ldrh	r3, [r3, #4]
 8013a92:	b29b      	uxth	r3, r3
 8013a94:	429a      	cmp	r2, r3
 8013a96:	d014      	beq.n	8013ac2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013a98:	693b      	ldr	r3, [r7, #16]
 8013a9a:	3301      	adds	r3, #1
 8013a9c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8013a9e:	6a3b      	ldr	r3, [r7, #32]
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d104      	bne.n	8013aae <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aa6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013aa8:	69fb      	ldr	r3, [r7, #28]
 8013aaa:	61bb      	str	r3, [r7, #24]
 8013aac:	e009      	b.n	8013ac2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8013aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ab0:	7fda      	ldrb	r2, [r3, #31]
 8013ab2:	6a3b      	ldr	r3, [r7, #32]
 8013ab4:	7fdb      	ldrb	r3, [r3, #31]
 8013ab6:	429a      	cmp	r2, r3
 8013ab8:	d803      	bhi.n	8013ac2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8013aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013abc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013abe:	69fb      	ldr	r3, [r7, #28]
 8013ac0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8013ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d001      	beq.n	8013ace <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8013aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013acc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8013ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d1cb      	bne.n	8013a72 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8013ada:	6a3b      	ldr	r3, [r7, #32]
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d008      	beq.n	8013af2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013ae0:	69b9      	ldr	r1, [r7, #24]
 8013ae2:	6a38      	ldr	r0, [r7, #32]
 8013ae4:	f7ff ff0e 	bl	8013904 <ip_reass_free_complete_datagram>
 8013ae8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8013aea:	697a      	ldr	r2, [r7, #20]
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	4413      	add	r3, r2
 8013af0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8013af2:	697a      	ldr	r2, [r7, #20]
 8013af4:	683b      	ldr	r3, [r7, #0]
 8013af6:	429a      	cmp	r2, r3
 8013af8:	da02      	bge.n	8013b00 <ip_reass_remove_oldest_datagram+0xb4>
 8013afa:	693b      	ldr	r3, [r7, #16]
 8013afc:	2b01      	cmp	r3, #1
 8013afe:	dcac      	bgt.n	8013a5a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8013b00:	697b      	ldr	r3, [r7, #20]
}
 8013b02:	4618      	mov	r0, r3
 8013b04:	3728      	adds	r7, #40	; 0x28
 8013b06:	46bd      	mov	sp, r7
 8013b08:	bd80      	pop	{r7, pc}
 8013b0a:	bf00      	nop
 8013b0c:	24005768 	.word	0x24005768

08013b10 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8013b10:	b580      	push	{r7, lr}
 8013b12:	b084      	sub	sp, #16
 8013b14:	af00      	add	r7, sp, #0
 8013b16:	6078      	str	r0, [r7, #4]
 8013b18:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013b1a:	2004      	movs	r0, #4
 8013b1c:	f001 f92e 	bl	8014d7c <memp_malloc>
 8013b20:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d110      	bne.n	8013b4a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8013b28:	6839      	ldr	r1, [r7, #0]
 8013b2a:	6878      	ldr	r0, [r7, #4]
 8013b2c:	f7ff ff8e 	bl	8013a4c <ip_reass_remove_oldest_datagram>
 8013b30:	4602      	mov	r2, r0
 8013b32:	683b      	ldr	r3, [r7, #0]
 8013b34:	4293      	cmp	r3, r2
 8013b36:	dc03      	bgt.n	8013b40 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013b38:	2004      	movs	r0, #4
 8013b3a:	f001 f91f 	bl	8014d7c <memp_malloc>
 8013b3e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d101      	bne.n	8013b4a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8013b46:	2300      	movs	r3, #0
 8013b48:	e016      	b.n	8013b78 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8013b4a:	2220      	movs	r2, #32
 8013b4c:	2100      	movs	r1, #0
 8013b4e:	68f8      	ldr	r0, [r7, #12]
 8013b50:	f00c f912 	bl	801fd78 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	220f      	movs	r2, #15
 8013b58:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8013b5a:	4b09      	ldr	r3, [pc, #36]	; (8013b80 <ip_reass_enqueue_new_datagram+0x70>)
 8013b5c:	681a      	ldr	r2, [r3, #0]
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8013b62:	4a07      	ldr	r2, [pc, #28]	; (8013b80 <ip_reass_enqueue_new_datagram+0x70>)
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	3308      	adds	r3, #8
 8013b6c:	2214      	movs	r2, #20
 8013b6e:	6879      	ldr	r1, [r7, #4]
 8013b70:	4618      	mov	r0, r3
 8013b72:	f00c f8d9 	bl	801fd28 <memcpy>
  return ipr;
 8013b76:	68fb      	ldr	r3, [r7, #12]
}
 8013b78:	4618      	mov	r0, r3
 8013b7a:	3710      	adds	r7, #16
 8013b7c:	46bd      	mov	sp, r7
 8013b7e:	bd80      	pop	{r7, pc}
 8013b80:	24005768 	.word	0x24005768

08013b84 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013b84:	b580      	push	{r7, lr}
 8013b86:	b082      	sub	sp, #8
 8013b88:	af00      	add	r7, sp, #0
 8013b8a:	6078      	str	r0, [r7, #4]
 8013b8c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8013b8e:	4b10      	ldr	r3, [pc, #64]	; (8013bd0 <ip_reass_dequeue_datagram+0x4c>)
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	687a      	ldr	r2, [r7, #4]
 8013b94:	429a      	cmp	r2, r3
 8013b96:	d104      	bne.n	8013ba2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	4a0c      	ldr	r2, [pc, #48]	; (8013bd0 <ip_reass_dequeue_datagram+0x4c>)
 8013b9e:	6013      	str	r3, [r2, #0]
 8013ba0:	e00d      	b.n	8013bbe <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013ba2:	683b      	ldr	r3, [r7, #0]
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d106      	bne.n	8013bb6 <ip_reass_dequeue_datagram+0x32>
 8013ba8:	4b0a      	ldr	r3, [pc, #40]	; (8013bd4 <ip_reass_dequeue_datagram+0x50>)
 8013baa:	f240 1245 	movw	r2, #325	; 0x145
 8013bae:	490a      	ldr	r1, [pc, #40]	; (8013bd8 <ip_reass_dequeue_datagram+0x54>)
 8013bb0:	480a      	ldr	r0, [pc, #40]	; (8013bdc <ip_reass_dequeue_datagram+0x58>)
 8013bb2:	f00c ffdb 	bl	8020b6c <iprintf>
    prev->next = ipr->next;
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	681a      	ldr	r2, [r3, #0]
 8013bba:	683b      	ldr	r3, [r7, #0]
 8013bbc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8013bbe:	6879      	ldr	r1, [r7, #4]
 8013bc0:	2004      	movs	r0, #4
 8013bc2:	f001 f94b 	bl	8014e5c <memp_free>
}
 8013bc6:	bf00      	nop
 8013bc8:	3708      	adds	r7, #8
 8013bca:	46bd      	mov	sp, r7
 8013bcc:	bd80      	pop	{r7, pc}
 8013bce:	bf00      	nop
 8013bd0:	24005768 	.word	0x24005768
 8013bd4:	08026404 	.word	0x08026404
 8013bd8:	080264f4 	.word	0x080264f4
 8013bdc:	08026474 	.word	0x08026474

08013be0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013be0:	b580      	push	{r7, lr}
 8013be2:	b08c      	sub	sp, #48	; 0x30
 8013be4:	af00      	add	r7, sp, #0
 8013be6:	60f8      	str	r0, [r7, #12]
 8013be8:	60b9      	str	r1, [r7, #8]
 8013bea:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8013bec:	2300      	movs	r3, #0
 8013bee:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8013bf0:	2301      	movs	r3, #1
 8013bf2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8013bf4:	68bb      	ldr	r3, [r7, #8]
 8013bf6:	685b      	ldr	r3, [r3, #4]
 8013bf8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013bfa:	69fb      	ldr	r3, [r7, #28]
 8013bfc:	885b      	ldrh	r3, [r3, #2]
 8013bfe:	b29b      	uxth	r3, r3
 8013c00:	4618      	mov	r0, r3
 8013c02:	f7fe f8a5 	bl	8011d50 <lwip_htons>
 8013c06:	4603      	mov	r3, r0
 8013c08:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8013c0a:	69fb      	ldr	r3, [r7, #28]
 8013c0c:	781b      	ldrb	r3, [r3, #0]
 8013c0e:	f003 030f 	and.w	r3, r3, #15
 8013c12:	b2db      	uxtb	r3, r3
 8013c14:	009b      	lsls	r3, r3, #2
 8013c16:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8013c18:	7e7b      	ldrb	r3, [r7, #25]
 8013c1a:	b29b      	uxth	r3, r3
 8013c1c:	8b7a      	ldrh	r2, [r7, #26]
 8013c1e:	429a      	cmp	r2, r3
 8013c20:	d202      	bcs.n	8013c28 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013c22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013c26:	e135      	b.n	8013e94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8013c28:	7e7b      	ldrb	r3, [r7, #25]
 8013c2a:	b29b      	uxth	r3, r3
 8013c2c:	8b7a      	ldrh	r2, [r7, #26]
 8013c2e:	1ad3      	subs	r3, r2, r3
 8013c30:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8013c32:	69fb      	ldr	r3, [r7, #28]
 8013c34:	88db      	ldrh	r3, [r3, #6]
 8013c36:	b29b      	uxth	r3, r3
 8013c38:	4618      	mov	r0, r3
 8013c3a:	f7fe f889 	bl	8011d50 <lwip_htons>
 8013c3e:	4603      	mov	r3, r0
 8013c40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013c44:	b29b      	uxth	r3, r3
 8013c46:	00db      	lsls	r3, r3, #3
 8013c48:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8013c4a:	68bb      	ldr	r3, [r7, #8]
 8013c4c:	685b      	ldr	r3, [r3, #4]
 8013c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8013c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c52:	2200      	movs	r2, #0
 8013c54:	701a      	strb	r2, [r3, #0]
 8013c56:	2200      	movs	r2, #0
 8013c58:	705a      	strb	r2, [r3, #1]
 8013c5a:	2200      	movs	r2, #0
 8013c5c:	709a      	strb	r2, [r3, #2]
 8013c5e:	2200      	movs	r2, #0
 8013c60:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c64:	8afa      	ldrh	r2, [r7, #22]
 8013c66:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013c68:	8afa      	ldrh	r2, [r7, #22]
 8013c6a:	8b7b      	ldrh	r3, [r7, #26]
 8013c6c:	4413      	add	r3, r2
 8013c6e:	b29a      	uxth	r2, r3
 8013c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c72:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c76:	88db      	ldrh	r3, [r3, #6]
 8013c78:	b29b      	uxth	r3, r3
 8013c7a:	8afa      	ldrh	r2, [r7, #22]
 8013c7c:	429a      	cmp	r2, r3
 8013c7e:	d902      	bls.n	8013c86 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013c80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013c84:	e106      	b.n	8013e94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	685b      	ldr	r3, [r3, #4]
 8013c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8013c8c:	e068      	b.n	8013d60 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8013c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c90:	685b      	ldr	r3, [r3, #4]
 8013c92:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c96:	889b      	ldrh	r3, [r3, #4]
 8013c98:	b29a      	uxth	r2, r3
 8013c9a:	693b      	ldr	r3, [r7, #16]
 8013c9c:	889b      	ldrh	r3, [r3, #4]
 8013c9e:	b29b      	uxth	r3, r3
 8013ca0:	429a      	cmp	r2, r3
 8013ca2:	d235      	bcs.n	8013d10 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ca8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8013caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d020      	beq.n	8013cf2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cb2:	889b      	ldrh	r3, [r3, #4]
 8013cb4:	b29a      	uxth	r2, r3
 8013cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cb8:	88db      	ldrh	r3, [r3, #6]
 8013cba:	b29b      	uxth	r3, r3
 8013cbc:	429a      	cmp	r2, r3
 8013cbe:	d307      	bcc.n	8013cd0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8013cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cc2:	88db      	ldrh	r3, [r3, #6]
 8013cc4:	b29a      	uxth	r2, r3
 8013cc6:	693b      	ldr	r3, [r7, #16]
 8013cc8:	889b      	ldrh	r3, [r3, #4]
 8013cca:	b29b      	uxth	r3, r3
 8013ccc:	429a      	cmp	r2, r3
 8013cce:	d902      	bls.n	8013cd6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013cd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013cd4:	e0de      	b.n	8013e94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8013cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cd8:	68ba      	ldr	r2, [r7, #8]
 8013cda:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8013cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cde:	88db      	ldrh	r3, [r3, #6]
 8013ce0:	b29a      	uxth	r2, r3
 8013ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ce4:	889b      	ldrh	r3, [r3, #4]
 8013ce6:	b29b      	uxth	r3, r3
 8013ce8:	429a      	cmp	r2, r3
 8013cea:	d03d      	beq.n	8013d68 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013cec:	2300      	movs	r3, #0
 8013cee:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8013cf0:	e03a      	b.n	8013d68 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8013cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cf4:	88db      	ldrh	r3, [r3, #6]
 8013cf6:	b29a      	uxth	r2, r3
 8013cf8:	693b      	ldr	r3, [r7, #16]
 8013cfa:	889b      	ldrh	r3, [r3, #4]
 8013cfc:	b29b      	uxth	r3, r3
 8013cfe:	429a      	cmp	r2, r3
 8013d00:	d902      	bls.n	8013d08 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013d02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013d06:	e0c5      	b.n	8013e94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	68ba      	ldr	r2, [r7, #8]
 8013d0c:	605a      	str	r2, [r3, #4]
      break;
 8013d0e:	e02b      	b.n	8013d68 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8013d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d12:	889b      	ldrh	r3, [r3, #4]
 8013d14:	b29a      	uxth	r2, r3
 8013d16:	693b      	ldr	r3, [r7, #16]
 8013d18:	889b      	ldrh	r3, [r3, #4]
 8013d1a:	b29b      	uxth	r3, r3
 8013d1c:	429a      	cmp	r2, r3
 8013d1e:	d102      	bne.n	8013d26 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013d20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013d24:	e0b6      	b.n	8013e94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8013d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d28:	889b      	ldrh	r3, [r3, #4]
 8013d2a:	b29a      	uxth	r2, r3
 8013d2c:	693b      	ldr	r3, [r7, #16]
 8013d2e:	88db      	ldrh	r3, [r3, #6]
 8013d30:	b29b      	uxth	r3, r3
 8013d32:	429a      	cmp	r2, r3
 8013d34:	d202      	bcs.n	8013d3c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013d36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013d3a:	e0ab      	b.n	8013e94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8013d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d009      	beq.n	8013d56 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8013d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d44:	88db      	ldrh	r3, [r3, #6]
 8013d46:	b29a      	uxth	r2, r3
 8013d48:	693b      	ldr	r3, [r7, #16]
 8013d4a:	889b      	ldrh	r3, [r3, #4]
 8013d4c:	b29b      	uxth	r3, r3
 8013d4e:	429a      	cmp	r2, r3
 8013d50:	d001      	beq.n	8013d56 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013d52:	2300      	movs	r3, #0
 8013d54:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8013d56:	693b      	ldr	r3, [r7, #16]
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8013d5c:	693b      	ldr	r3, [r7, #16]
 8013d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8013d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d193      	bne.n	8013c8e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8013d66:	e000      	b.n	8013d6a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8013d68:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8013d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d12d      	bne.n	8013dcc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8013d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d01c      	beq.n	8013db0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8013d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d78:	88db      	ldrh	r3, [r3, #6]
 8013d7a:	b29a      	uxth	r2, r3
 8013d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d7e:	889b      	ldrh	r3, [r3, #4]
 8013d80:	b29b      	uxth	r3, r3
 8013d82:	429a      	cmp	r2, r3
 8013d84:	d906      	bls.n	8013d94 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8013d86:	4b45      	ldr	r3, [pc, #276]	; (8013e9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013d88:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8013d8c:	4944      	ldr	r1, [pc, #272]	; (8013ea0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013d8e:	4845      	ldr	r0, [pc, #276]	; (8013ea4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013d90:	f00c feec 	bl	8020b6c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d96:	68ba      	ldr	r2, [r7, #8]
 8013d98:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8013d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d9c:	88db      	ldrh	r3, [r3, #6]
 8013d9e:	b29a      	uxth	r2, r3
 8013da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013da2:	889b      	ldrh	r3, [r3, #4]
 8013da4:	b29b      	uxth	r3, r3
 8013da6:	429a      	cmp	r2, r3
 8013da8:	d010      	beq.n	8013dcc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8013daa:	2300      	movs	r3, #0
 8013dac:	623b      	str	r3, [r7, #32]
 8013dae:	e00d      	b.n	8013dcc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	685b      	ldr	r3, [r3, #4]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d006      	beq.n	8013dc6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8013db8:	4b38      	ldr	r3, [pc, #224]	; (8013e9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013dba:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8013dbe:	493a      	ldr	r1, [pc, #232]	; (8013ea8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8013dc0:	4838      	ldr	r0, [pc, #224]	; (8013ea4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013dc2:	f00c fed3 	bl	8020b6c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	68ba      	ldr	r2, [r7, #8]
 8013dca:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d105      	bne.n	8013dde <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	7f9b      	ldrb	r3, [r3, #30]
 8013dd6:	f003 0301 	and.w	r3, r3, #1
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d059      	beq.n	8013e92 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8013dde:	6a3b      	ldr	r3, [r7, #32]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d04f      	beq.n	8013e84 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	685b      	ldr	r3, [r3, #4]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d006      	beq.n	8013dfa <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	685b      	ldr	r3, [r3, #4]
 8013df0:	685b      	ldr	r3, [r3, #4]
 8013df2:	889b      	ldrh	r3, [r3, #4]
 8013df4:	b29b      	uxth	r3, r3
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d002      	beq.n	8013e00 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8013dfa:	2300      	movs	r3, #0
 8013dfc:	623b      	str	r3, [r7, #32]
 8013dfe:	e041      	b.n	8013e84 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8013e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e02:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8013e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013e0a:	e012      	b.n	8013e32 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8013e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e0e:	685b      	ldr	r3, [r3, #4]
 8013e10:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8013e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e14:	88db      	ldrh	r3, [r3, #6]
 8013e16:	b29a      	uxth	r2, r3
 8013e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e1a:	889b      	ldrh	r3, [r3, #4]
 8013e1c:	b29b      	uxth	r3, r3
 8013e1e:	429a      	cmp	r2, r3
 8013e20:	d002      	beq.n	8013e28 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8013e22:	2300      	movs	r3, #0
 8013e24:	623b      	str	r3, [r7, #32]
            break;
 8013e26:	e007      	b.n	8013e38 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8013e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e2a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8013e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d1e9      	bne.n	8013e0c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8013e38:	6a3b      	ldr	r3, [r7, #32]
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d022      	beq.n	8013e84 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8013e3e:	68fb      	ldr	r3, [r7, #12]
 8013e40:	685b      	ldr	r3, [r3, #4]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d106      	bne.n	8013e54 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8013e46:	4b15      	ldr	r3, [pc, #84]	; (8013e9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013e48:	f240 12df 	movw	r2, #479	; 0x1df
 8013e4c:	4917      	ldr	r1, [pc, #92]	; (8013eac <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013e4e:	4815      	ldr	r0, [pc, #84]	; (8013ea4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013e50:	f00c fe8c 	bl	8020b6c <iprintf>
          LWIP_ASSERT("sanity check",
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	685b      	ldr	r3, [r3, #4]
 8013e58:	685b      	ldr	r3, [r3, #4]
 8013e5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013e5c:	429a      	cmp	r2, r3
 8013e5e:	d106      	bne.n	8013e6e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8013e60:	4b0e      	ldr	r3, [pc, #56]	; (8013e9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013e62:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8013e66:	4911      	ldr	r1, [pc, #68]	; (8013eac <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013e68:	480e      	ldr	r0, [pc, #56]	; (8013ea4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013e6a:	f00c fe7f 	bl	8020b6c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8013e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d006      	beq.n	8013e84 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8013e76:	4b09      	ldr	r3, [pc, #36]	; (8013e9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013e78:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8013e7c:	490c      	ldr	r1, [pc, #48]	; (8013eb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8013e7e:	4809      	ldr	r0, [pc, #36]	; (8013ea4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013e80:	f00c fe74 	bl	8020b6c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013e84:	6a3b      	ldr	r3, [r7, #32]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	bf14      	ite	ne
 8013e8a:	2301      	movne	r3, #1
 8013e8c:	2300      	moveq	r3, #0
 8013e8e:	b2db      	uxtb	r3, r3
 8013e90:	e000      	b.n	8013e94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8013e92:	2300      	movs	r3, #0
}
 8013e94:	4618      	mov	r0, r3
 8013e96:	3730      	adds	r7, #48	; 0x30
 8013e98:	46bd      	mov	sp, r7
 8013e9a:	bd80      	pop	{r7, pc}
 8013e9c:	08026404 	.word	0x08026404
 8013ea0:	08026510 	.word	0x08026510
 8013ea4:	08026474 	.word	0x08026474
 8013ea8:	08026530 	.word	0x08026530
 8013eac:	08026568 	.word	0x08026568
 8013eb0:	08026578 	.word	0x08026578

08013eb4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8013eb4:	b580      	push	{r7, lr}
 8013eb6:	b08e      	sub	sp, #56	; 0x38
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	685b      	ldr	r3, [r3, #4]
 8013ec0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8013ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ec4:	781b      	ldrb	r3, [r3, #0]
 8013ec6:	f003 030f 	and.w	r3, r3, #15
 8013eca:	b2db      	uxtb	r3, r3
 8013ecc:	009b      	lsls	r3, r3, #2
 8013ece:	b2db      	uxtb	r3, r3
 8013ed0:	2b14      	cmp	r3, #20
 8013ed2:	f040 8167 	bne.w	80141a4 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8013ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ed8:	88db      	ldrh	r3, [r3, #6]
 8013eda:	b29b      	uxth	r3, r3
 8013edc:	4618      	mov	r0, r3
 8013ede:	f7fd ff37 	bl	8011d50 <lwip_htons>
 8013ee2:	4603      	mov	r3, r0
 8013ee4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013ee8:	b29b      	uxth	r3, r3
 8013eea:	00db      	lsls	r3, r3, #3
 8013eec:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ef0:	885b      	ldrh	r3, [r3, #2]
 8013ef2:	b29b      	uxth	r3, r3
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	f7fd ff2b 	bl	8011d50 <lwip_htons>
 8013efa:	4603      	mov	r3, r0
 8013efc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8013efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f00:	781b      	ldrb	r3, [r3, #0]
 8013f02:	f003 030f 	and.w	r3, r3, #15
 8013f06:	b2db      	uxtb	r3, r3
 8013f08:	009b      	lsls	r3, r3, #2
 8013f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8013f0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013f12:	b29b      	uxth	r3, r3
 8013f14:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013f16:	429a      	cmp	r2, r3
 8013f18:	f0c0 8146 	bcc.w	80141a8 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8013f1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013f20:	b29b      	uxth	r3, r3
 8013f22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013f24:	1ad3      	subs	r3, r2, r3
 8013f26:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8013f28:	6878      	ldr	r0, [r7, #4]
 8013f2a:	f001 fe95 	bl	8015c58 <pbuf_clen>
 8013f2e:	4603      	mov	r3, r0
 8013f30:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8013f32:	4b9f      	ldr	r3, [pc, #636]	; (80141b0 <ip4_reass+0x2fc>)
 8013f34:	881b      	ldrh	r3, [r3, #0]
 8013f36:	461a      	mov	r2, r3
 8013f38:	8c3b      	ldrh	r3, [r7, #32]
 8013f3a:	4413      	add	r3, r2
 8013f3c:	2b0a      	cmp	r3, #10
 8013f3e:	dd10      	ble.n	8013f62 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013f40:	8c3b      	ldrh	r3, [r7, #32]
 8013f42:	4619      	mov	r1, r3
 8013f44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013f46:	f7ff fd81 	bl	8013a4c <ip_reass_remove_oldest_datagram>
 8013f4a:	4603      	mov	r3, r0
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	f000 812d 	beq.w	80141ac <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8013f52:	4b97      	ldr	r3, [pc, #604]	; (80141b0 <ip4_reass+0x2fc>)
 8013f54:	881b      	ldrh	r3, [r3, #0]
 8013f56:	461a      	mov	r2, r3
 8013f58:	8c3b      	ldrh	r3, [r7, #32]
 8013f5a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013f5c:	2b0a      	cmp	r3, #10
 8013f5e:	f300 8125 	bgt.w	80141ac <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013f62:	4b94      	ldr	r3, [pc, #592]	; (80141b4 <ip4_reass+0x300>)
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	633b      	str	r3, [r7, #48]	; 0x30
 8013f68:	e015      	b.n	8013f96 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8013f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f6c:	695a      	ldr	r2, [r3, #20]
 8013f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f70:	68db      	ldr	r3, [r3, #12]
 8013f72:	429a      	cmp	r2, r3
 8013f74:	d10c      	bne.n	8013f90 <ip4_reass+0xdc>
 8013f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f78:	699a      	ldr	r2, [r3, #24]
 8013f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f7c:	691b      	ldr	r3, [r3, #16]
 8013f7e:	429a      	cmp	r2, r3
 8013f80:	d106      	bne.n	8013f90 <ip4_reass+0xdc>
 8013f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f84:	899a      	ldrh	r2, [r3, #12]
 8013f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f88:	889b      	ldrh	r3, [r3, #4]
 8013f8a:	b29b      	uxth	r3, r3
 8013f8c:	429a      	cmp	r2, r3
 8013f8e:	d006      	beq.n	8013f9e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	633b      	str	r3, [r7, #48]	; 0x30
 8013f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d1e6      	bne.n	8013f6a <ip4_reass+0xb6>
 8013f9c:	e000      	b.n	8013fa0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8013f9e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8013fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d109      	bne.n	8013fba <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8013fa6:	8c3b      	ldrh	r3, [r7, #32]
 8013fa8:	4619      	mov	r1, r3
 8013faa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013fac:	f7ff fdb0 	bl	8013b10 <ip_reass_enqueue_new_datagram>
 8013fb0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8013fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d11c      	bne.n	8013ff2 <ip4_reass+0x13e>
      goto nullreturn;
 8013fb8:	e109      	b.n	80141ce <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fbc:	88db      	ldrh	r3, [r3, #6]
 8013fbe:	b29b      	uxth	r3, r3
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	f7fd fec5 	bl	8011d50 <lwip_htons>
 8013fc6:	4603      	mov	r3, r0
 8013fc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d110      	bne.n	8013ff2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8013fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fd2:	89db      	ldrh	r3, [r3, #14]
 8013fd4:	4618      	mov	r0, r3
 8013fd6:	f7fd febb 	bl	8011d50 <lwip_htons>
 8013fda:	4603      	mov	r3, r0
 8013fdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d006      	beq.n	8013ff2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8013fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fe6:	3308      	adds	r3, #8
 8013fe8:	2214      	movs	r2, #20
 8013fea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013fec:	4618      	mov	r0, r3
 8013fee:	f00b fe9b 	bl	801fd28 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8013ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ff4:	88db      	ldrh	r3, [r3, #6]
 8013ff6:	b29b      	uxth	r3, r3
 8013ff8:	f003 0320 	and.w	r3, r3, #32
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	bf0c      	ite	eq
 8014000:	2301      	moveq	r3, #1
 8014002:	2300      	movne	r3, #0
 8014004:	b2db      	uxtb	r3, r3
 8014006:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8014008:	69fb      	ldr	r3, [r7, #28]
 801400a:	2b00      	cmp	r3, #0
 801400c:	d00e      	beq.n	801402c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801400e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014010:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014012:	4413      	add	r3, r2
 8014014:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8014016:	8b7a      	ldrh	r2, [r7, #26]
 8014018:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801401a:	429a      	cmp	r2, r3
 801401c:	f0c0 80a0 	bcc.w	8014160 <ip4_reass+0x2ac>
 8014020:	8b7b      	ldrh	r3, [r7, #26]
 8014022:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8014026:	4293      	cmp	r3, r2
 8014028:	f200 809a 	bhi.w	8014160 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801402c:	69fa      	ldr	r2, [r7, #28]
 801402e:	6879      	ldr	r1, [r7, #4]
 8014030:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014032:	f7ff fdd5 	bl	8013be0 <ip_reass_chain_frag_into_datagram_and_validate>
 8014036:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8014038:	697b      	ldr	r3, [r7, #20]
 801403a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801403e:	f000 8091 	beq.w	8014164 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8014042:	4b5b      	ldr	r3, [pc, #364]	; (80141b0 <ip4_reass+0x2fc>)
 8014044:	881a      	ldrh	r2, [r3, #0]
 8014046:	8c3b      	ldrh	r3, [r7, #32]
 8014048:	4413      	add	r3, r2
 801404a:	b29a      	uxth	r2, r3
 801404c:	4b58      	ldr	r3, [pc, #352]	; (80141b0 <ip4_reass+0x2fc>)
 801404e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8014050:	69fb      	ldr	r3, [r7, #28]
 8014052:	2b00      	cmp	r3, #0
 8014054:	d00d      	beq.n	8014072 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8014056:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014058:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801405a:	4413      	add	r3, r2
 801405c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801405e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014060:	8a7a      	ldrh	r2, [r7, #18]
 8014062:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8014064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014066:	7f9b      	ldrb	r3, [r3, #30]
 8014068:	f043 0301 	orr.w	r3, r3, #1
 801406c:	b2da      	uxtb	r2, r3
 801406e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014070:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8014072:	697b      	ldr	r3, [r7, #20]
 8014074:	2b01      	cmp	r3, #1
 8014076:	d171      	bne.n	801415c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8014078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801407a:	8b9b      	ldrh	r3, [r3, #28]
 801407c:	3314      	adds	r3, #20
 801407e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8014080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014082:	685b      	ldr	r3, [r3, #4]
 8014084:	685b      	ldr	r3, [r3, #4]
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801408a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801408c:	685b      	ldr	r3, [r3, #4]
 801408e:	685b      	ldr	r3, [r3, #4]
 8014090:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8014092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014094:	3308      	adds	r3, #8
 8014096:	2214      	movs	r2, #20
 8014098:	4619      	mov	r1, r3
 801409a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801409c:	f00b fe44 	bl	801fd28 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80140a0:	8a3b      	ldrh	r3, [r7, #16]
 80140a2:	4618      	mov	r0, r3
 80140a4:	f7fd fe54 	bl	8011d50 <lwip_htons>
 80140a8:	4603      	mov	r3, r0
 80140aa:	461a      	mov	r2, r3
 80140ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140ae:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80140b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140b2:	2200      	movs	r2, #0
 80140b4:	719a      	strb	r2, [r3, #6]
 80140b6:	2200      	movs	r2, #0
 80140b8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80140ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140bc:	2200      	movs	r2, #0
 80140be:	729a      	strb	r2, [r3, #10]
 80140c0:	2200      	movs	r2, #0
 80140c2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80140c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140c6:	685b      	ldr	r3, [r3, #4]
 80140c8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80140ca:	e00d      	b.n	80140e8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80140cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140ce:	685b      	ldr	r3, [r3, #4]
 80140d0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80140d2:	2114      	movs	r1, #20
 80140d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80140d6:	f001 fcb1 	bl	8015a3c <pbuf_remove_header>
      pbuf_cat(p, r);
 80140da:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80140dc:	6878      	ldr	r0, [r7, #4]
 80140de:	f001 fdf5 	bl	8015ccc <pbuf_cat>
      r = iprh->next_pbuf;
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80140e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d1ee      	bne.n	80140cc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80140ee:	4b31      	ldr	r3, [pc, #196]	; (80141b4 <ip4_reass+0x300>)
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80140f4:	429a      	cmp	r2, r3
 80140f6:	d102      	bne.n	80140fe <ip4_reass+0x24a>
      ipr_prev = NULL;
 80140f8:	2300      	movs	r3, #0
 80140fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80140fc:	e010      	b.n	8014120 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80140fe:	4b2d      	ldr	r3, [pc, #180]	; (80141b4 <ip4_reass+0x300>)
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014104:	e007      	b.n	8014116 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8014106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801410c:	429a      	cmp	r2, r3
 801410e:	d006      	beq.n	801411e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014118:	2b00      	cmp	r3, #0
 801411a:	d1f4      	bne.n	8014106 <ip4_reass+0x252>
 801411c:	e000      	b.n	8014120 <ip4_reass+0x26c>
          break;
 801411e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8014120:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014122:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014124:	f7ff fd2e 	bl	8013b84 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8014128:	6878      	ldr	r0, [r7, #4]
 801412a:	f001 fd95 	bl	8015c58 <pbuf_clen>
 801412e:	4603      	mov	r3, r0
 8014130:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8014132:	4b1f      	ldr	r3, [pc, #124]	; (80141b0 <ip4_reass+0x2fc>)
 8014134:	881b      	ldrh	r3, [r3, #0]
 8014136:	8c3a      	ldrh	r2, [r7, #32]
 8014138:	429a      	cmp	r2, r3
 801413a:	d906      	bls.n	801414a <ip4_reass+0x296>
 801413c:	4b1e      	ldr	r3, [pc, #120]	; (80141b8 <ip4_reass+0x304>)
 801413e:	f240 229b 	movw	r2, #667	; 0x29b
 8014142:	491e      	ldr	r1, [pc, #120]	; (80141bc <ip4_reass+0x308>)
 8014144:	481e      	ldr	r0, [pc, #120]	; (80141c0 <ip4_reass+0x30c>)
 8014146:	f00c fd11 	bl	8020b6c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801414a:	4b19      	ldr	r3, [pc, #100]	; (80141b0 <ip4_reass+0x2fc>)
 801414c:	881a      	ldrh	r2, [r3, #0]
 801414e:	8c3b      	ldrh	r3, [r7, #32]
 8014150:	1ad3      	subs	r3, r2, r3
 8014152:	b29a      	uxth	r2, r3
 8014154:	4b16      	ldr	r3, [pc, #88]	; (80141b0 <ip4_reass+0x2fc>)
 8014156:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	e03c      	b.n	80141d6 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801415c:	2300      	movs	r3, #0
 801415e:	e03a      	b.n	80141d6 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8014160:	bf00      	nop
 8014162:	e000      	b.n	8014166 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8014164:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8014166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014168:	2b00      	cmp	r3, #0
 801416a:	d106      	bne.n	801417a <ip4_reass+0x2c6>
 801416c:	4b12      	ldr	r3, [pc, #72]	; (80141b8 <ip4_reass+0x304>)
 801416e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8014172:	4914      	ldr	r1, [pc, #80]	; (80141c4 <ip4_reass+0x310>)
 8014174:	4812      	ldr	r0, [pc, #72]	; (80141c0 <ip4_reass+0x30c>)
 8014176:	f00c fcf9 	bl	8020b6c <iprintf>
  if (ipr->p == NULL) {
 801417a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801417c:	685b      	ldr	r3, [r3, #4]
 801417e:	2b00      	cmp	r3, #0
 8014180:	d124      	bne.n	80141cc <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8014182:	4b0c      	ldr	r3, [pc, #48]	; (80141b4 <ip4_reass+0x300>)
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014188:	429a      	cmp	r2, r3
 801418a:	d006      	beq.n	801419a <ip4_reass+0x2e6>
 801418c:	4b0a      	ldr	r3, [pc, #40]	; (80141b8 <ip4_reass+0x304>)
 801418e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8014192:	490d      	ldr	r1, [pc, #52]	; (80141c8 <ip4_reass+0x314>)
 8014194:	480a      	ldr	r0, [pc, #40]	; (80141c0 <ip4_reass+0x30c>)
 8014196:	f00c fce9 	bl	8020b6c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801419a:	2100      	movs	r1, #0
 801419c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801419e:	f7ff fcf1 	bl	8013b84 <ip_reass_dequeue_datagram>
 80141a2:	e014      	b.n	80141ce <ip4_reass+0x31a>
    goto nullreturn;
 80141a4:	bf00      	nop
 80141a6:	e012      	b.n	80141ce <ip4_reass+0x31a>
    goto nullreturn;
 80141a8:	bf00      	nop
 80141aa:	e010      	b.n	80141ce <ip4_reass+0x31a>
      goto nullreturn;
 80141ac:	bf00      	nop
 80141ae:	e00e      	b.n	80141ce <ip4_reass+0x31a>
 80141b0:	2400576c 	.word	0x2400576c
 80141b4:	24005768 	.word	0x24005768
 80141b8:	08026404 	.word	0x08026404
 80141bc:	0802659c 	.word	0x0802659c
 80141c0:	08026474 	.word	0x08026474
 80141c4:	080265b8 	.word	0x080265b8
 80141c8:	080265c4 	.word	0x080265c4
  }

nullreturn:
 80141cc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80141ce:	6878      	ldr	r0, [r7, #4]
 80141d0:	f001 fcba 	bl	8015b48 <pbuf_free>
  return NULL;
 80141d4:	2300      	movs	r3, #0
}
 80141d6:	4618      	mov	r0, r3
 80141d8:	3738      	adds	r7, #56	; 0x38
 80141da:	46bd      	mov	sp, r7
 80141dc:	bd80      	pop	{r7, pc}
 80141de:	bf00      	nop

080141e0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80141e0:	b580      	push	{r7, lr}
 80141e2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80141e4:	2005      	movs	r0, #5
 80141e6:	f000 fdc9 	bl	8014d7c <memp_malloc>
 80141ea:	4603      	mov	r3, r0
}
 80141ec:	4618      	mov	r0, r3
 80141ee:	bd80      	pop	{r7, pc}

080141f0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80141f0:	b580      	push	{r7, lr}
 80141f2:	b082      	sub	sp, #8
 80141f4:	af00      	add	r7, sp, #0
 80141f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d106      	bne.n	801420c <ip_frag_free_pbuf_custom_ref+0x1c>
 80141fe:	4b07      	ldr	r3, [pc, #28]	; (801421c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8014200:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8014204:	4906      	ldr	r1, [pc, #24]	; (8014220 <ip_frag_free_pbuf_custom_ref+0x30>)
 8014206:	4807      	ldr	r0, [pc, #28]	; (8014224 <ip_frag_free_pbuf_custom_ref+0x34>)
 8014208:	f00c fcb0 	bl	8020b6c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801420c:	6879      	ldr	r1, [r7, #4]
 801420e:	2005      	movs	r0, #5
 8014210:	f000 fe24 	bl	8014e5c <memp_free>
}
 8014214:	bf00      	nop
 8014216:	3708      	adds	r7, #8
 8014218:	46bd      	mov	sp, r7
 801421a:	bd80      	pop	{r7, pc}
 801421c:	08026404 	.word	0x08026404
 8014220:	080265e4 	.word	0x080265e4
 8014224:	08026474 	.word	0x08026474

08014228 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014228:	b580      	push	{r7, lr}
 801422a:	b084      	sub	sp, #16
 801422c:	af00      	add	r7, sp, #0
 801422e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	2b00      	cmp	r3, #0
 8014238:	d106      	bne.n	8014248 <ipfrag_free_pbuf_custom+0x20>
 801423a:	4b11      	ldr	r3, [pc, #68]	; (8014280 <ipfrag_free_pbuf_custom+0x58>)
 801423c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8014240:	4910      	ldr	r1, [pc, #64]	; (8014284 <ipfrag_free_pbuf_custom+0x5c>)
 8014242:	4811      	ldr	r0, [pc, #68]	; (8014288 <ipfrag_free_pbuf_custom+0x60>)
 8014244:	f00c fc92 	bl	8020b6c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014248:	68fa      	ldr	r2, [r7, #12]
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	429a      	cmp	r2, r3
 801424e:	d006      	beq.n	801425e <ipfrag_free_pbuf_custom+0x36>
 8014250:	4b0b      	ldr	r3, [pc, #44]	; (8014280 <ipfrag_free_pbuf_custom+0x58>)
 8014252:	f240 22cf 	movw	r2, #719	; 0x2cf
 8014256:	490d      	ldr	r1, [pc, #52]	; (801428c <ipfrag_free_pbuf_custom+0x64>)
 8014258:	480b      	ldr	r0, [pc, #44]	; (8014288 <ipfrag_free_pbuf_custom+0x60>)
 801425a:	f00c fc87 	bl	8020b6c <iprintf>
  if (pcr->original != NULL) {
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	695b      	ldr	r3, [r3, #20]
 8014262:	2b00      	cmp	r3, #0
 8014264:	d004      	beq.n	8014270 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	695b      	ldr	r3, [r3, #20]
 801426a:	4618      	mov	r0, r3
 801426c:	f001 fc6c 	bl	8015b48 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8014270:	68f8      	ldr	r0, [r7, #12]
 8014272:	f7ff ffbd 	bl	80141f0 <ip_frag_free_pbuf_custom_ref>
}
 8014276:	bf00      	nop
 8014278:	3710      	adds	r7, #16
 801427a:	46bd      	mov	sp, r7
 801427c:	bd80      	pop	{r7, pc}
 801427e:	bf00      	nop
 8014280:	08026404 	.word	0x08026404
 8014284:	080265f0 	.word	0x080265f0
 8014288:	08026474 	.word	0x08026474
 801428c:	080265fc 	.word	0x080265fc

08014290 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8014290:	b580      	push	{r7, lr}
 8014292:	b094      	sub	sp, #80	; 0x50
 8014294:	af02      	add	r7, sp, #8
 8014296:	60f8      	str	r0, [r7, #12]
 8014298:	60b9      	str	r1, [r7, #8]
 801429a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801429c:	2300      	movs	r3, #0
 801429e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80142a2:	68bb      	ldr	r3, [r7, #8]
 80142a4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80142a6:	3b14      	subs	r3, #20
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	da00      	bge.n	80142ae <ip4_frag+0x1e>
 80142ac:	3307      	adds	r3, #7
 80142ae:	10db      	asrs	r3, r3, #3
 80142b0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80142b2:	2314      	movs	r3, #20
 80142b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80142b6:	68fb      	ldr	r3, [r7, #12]
 80142b8:	685b      	ldr	r3, [r3, #4]
 80142ba:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80142bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142be:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80142c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142c2:	781b      	ldrb	r3, [r3, #0]
 80142c4:	f003 030f 	and.w	r3, r3, #15
 80142c8:	b2db      	uxtb	r3, r3
 80142ca:	009b      	lsls	r3, r3, #2
 80142cc:	b2db      	uxtb	r3, r3
 80142ce:	2b14      	cmp	r3, #20
 80142d0:	d002      	beq.n	80142d8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80142d2:	f06f 0305 	mvn.w	r3, #5
 80142d6:	e110      	b.n	80144fa <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	895b      	ldrh	r3, [r3, #10]
 80142dc:	2b13      	cmp	r3, #19
 80142de:	d809      	bhi.n	80142f4 <ip4_frag+0x64>
 80142e0:	4b88      	ldr	r3, [pc, #544]	; (8014504 <ip4_frag+0x274>)
 80142e2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80142e6:	4988      	ldr	r1, [pc, #544]	; (8014508 <ip4_frag+0x278>)
 80142e8:	4888      	ldr	r0, [pc, #544]	; (801450c <ip4_frag+0x27c>)
 80142ea:	f00c fc3f 	bl	8020b6c <iprintf>
 80142ee:	f06f 0305 	mvn.w	r3, #5
 80142f2:	e102      	b.n	80144fa <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80142f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142f6:	88db      	ldrh	r3, [r3, #6]
 80142f8:	b29b      	uxth	r3, r3
 80142fa:	4618      	mov	r0, r3
 80142fc:	f7fd fd28 	bl	8011d50 <lwip_htons>
 8014300:	4603      	mov	r3, r0
 8014302:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8014304:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014306:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801430a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801430e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014310:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014314:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8014316:	68fb      	ldr	r3, [r7, #12]
 8014318:	891b      	ldrh	r3, [r3, #8]
 801431a:	3b14      	subs	r3, #20
 801431c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8014320:	e0e1      	b.n	80144e6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8014322:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014324:	00db      	lsls	r3, r3, #3
 8014326:	b29b      	uxth	r3, r3
 8014328:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801432c:	4293      	cmp	r3, r2
 801432e:	bf28      	it	cs
 8014330:	4613      	movcs	r3, r2
 8014332:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8014334:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014338:	2114      	movs	r1, #20
 801433a:	200e      	movs	r0, #14
 801433c:	f001 f920 	bl	8015580 <pbuf_alloc>
 8014340:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8014342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014344:	2b00      	cmp	r3, #0
 8014346:	f000 80d5 	beq.w	80144f4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801434a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801434c:	895b      	ldrh	r3, [r3, #10]
 801434e:	2b13      	cmp	r3, #19
 8014350:	d806      	bhi.n	8014360 <ip4_frag+0xd0>
 8014352:	4b6c      	ldr	r3, [pc, #432]	; (8014504 <ip4_frag+0x274>)
 8014354:	f44f 7249 	mov.w	r2, #804	; 0x324
 8014358:	496d      	ldr	r1, [pc, #436]	; (8014510 <ip4_frag+0x280>)
 801435a:	486c      	ldr	r0, [pc, #432]	; (801450c <ip4_frag+0x27c>)
 801435c:	f00c fc06 	bl	8020b6c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8014360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014362:	685b      	ldr	r3, [r3, #4]
 8014364:	2214      	movs	r2, #20
 8014366:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014368:	4618      	mov	r0, r3
 801436a:	f00b fcdd 	bl	801fd28 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014370:	685b      	ldr	r3, [r3, #4]
 8014372:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8014374:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014376:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801437a:	e064      	b.n	8014446 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801437c:	68fb      	ldr	r3, [r7, #12]
 801437e:	895a      	ldrh	r2, [r3, #10]
 8014380:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014382:	1ad3      	subs	r3, r2, r3
 8014384:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	895b      	ldrh	r3, [r3, #10]
 801438a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801438c:	429a      	cmp	r2, r3
 801438e:	d906      	bls.n	801439e <ip4_frag+0x10e>
 8014390:	4b5c      	ldr	r3, [pc, #368]	; (8014504 <ip4_frag+0x274>)
 8014392:	f240 322d 	movw	r2, #813	; 0x32d
 8014396:	495f      	ldr	r1, [pc, #380]	; (8014514 <ip4_frag+0x284>)
 8014398:	485c      	ldr	r0, [pc, #368]	; (801450c <ip4_frag+0x27c>)
 801439a:	f00c fbe7 	bl	8020b6c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801439e:	8bfa      	ldrh	r2, [r7, #30]
 80143a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80143a4:	4293      	cmp	r3, r2
 80143a6:	bf28      	it	cs
 80143a8:	4613      	movcs	r3, r2
 80143aa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80143ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d105      	bne.n	80143c2 <ip4_frag+0x132>
        poff = 0;
 80143b6:	2300      	movs	r3, #0
 80143b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	60fb      	str	r3, [r7, #12]
        continue;
 80143c0:	e041      	b.n	8014446 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80143c2:	f7ff ff0d 	bl	80141e0 <ip_frag_alloc_pbuf_custom_ref>
 80143c6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80143c8:	69bb      	ldr	r3, [r7, #24]
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d103      	bne.n	80143d6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80143ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80143d0:	f001 fbba 	bl	8015b48 <pbuf_free>
        goto memerr;
 80143d4:	e08f      	b.n	80144f6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80143d6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80143dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80143de:	4413      	add	r3, r2
 80143e0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80143e4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80143e8:	9201      	str	r2, [sp, #4]
 80143ea:	9300      	str	r3, [sp, #0]
 80143ec:	4603      	mov	r3, r0
 80143ee:	2241      	movs	r2, #65	; 0x41
 80143f0:	2000      	movs	r0, #0
 80143f2:	f001 f9ef 	bl	80157d4 <pbuf_alloced_custom>
 80143f6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80143f8:	697b      	ldr	r3, [r7, #20]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d106      	bne.n	801440c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80143fe:	69b8      	ldr	r0, [r7, #24]
 8014400:	f7ff fef6 	bl	80141f0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8014404:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014406:	f001 fb9f 	bl	8015b48 <pbuf_free>
        goto memerr;
 801440a:	e074      	b.n	80144f6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801440c:	68f8      	ldr	r0, [r7, #12]
 801440e:	f001 fc3b 	bl	8015c88 <pbuf_ref>
      pcr->original = p;
 8014412:	69bb      	ldr	r3, [r7, #24]
 8014414:	68fa      	ldr	r2, [r7, #12]
 8014416:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8014418:	69bb      	ldr	r3, [r7, #24]
 801441a:	4a3f      	ldr	r2, [pc, #252]	; (8014518 <ip4_frag+0x288>)
 801441c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801441e:	6979      	ldr	r1, [r7, #20]
 8014420:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014422:	f001 fc53 	bl	8015ccc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8014426:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801442a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801442e:	1ad3      	subs	r3, r2, r3
 8014430:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8014434:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014438:	2b00      	cmp	r3, #0
 801443a:	d004      	beq.n	8014446 <ip4_frag+0x1b6>
        poff = 0;
 801443c:	2300      	movs	r3, #0
 801443e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8014446:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801444a:	2b00      	cmp	r3, #0
 801444c:	d196      	bne.n	801437c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801444e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014450:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014454:	4413      	add	r3, r2
 8014456:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014458:	68bb      	ldr	r3, [r7, #8]
 801445a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801445c:	f1a3 0213 	sub.w	r2, r3, #19
 8014460:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014464:	429a      	cmp	r2, r3
 8014466:	bfcc      	ite	gt
 8014468:	2301      	movgt	r3, #1
 801446a:	2300      	movle	r3, #0
 801446c:	b2db      	uxtb	r3, r3
 801446e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8014470:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014474:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014478:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801447a:	6a3b      	ldr	r3, [r7, #32]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d002      	beq.n	8014486 <ip4_frag+0x1f6>
 8014480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014482:	2b00      	cmp	r3, #0
 8014484:	d003      	beq.n	801448e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8014486:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014488:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801448c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801448e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014490:	4618      	mov	r0, r3
 8014492:	f7fd fc5d 	bl	8011d50 <lwip_htons>
 8014496:	4603      	mov	r3, r0
 8014498:	461a      	mov	r2, r3
 801449a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801449c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801449e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80144a0:	3314      	adds	r3, #20
 80144a2:	b29b      	uxth	r3, r3
 80144a4:	4618      	mov	r0, r3
 80144a6:	f7fd fc53 	bl	8011d50 <lwip_htons>
 80144aa:	4603      	mov	r3, r0
 80144ac:	461a      	mov	r2, r3
 80144ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144b0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80144b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144b4:	2200      	movs	r2, #0
 80144b6:	729a      	strb	r2, [r3, #10]
 80144b8:	2200      	movs	r2, #0
 80144ba:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80144bc:	68bb      	ldr	r3, [r7, #8]
 80144be:	695b      	ldr	r3, [r3, #20]
 80144c0:	687a      	ldr	r2, [r7, #4]
 80144c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80144c4:	68b8      	ldr	r0, [r7, #8]
 80144c6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80144c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80144ca:	f001 fb3d 	bl	8015b48 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80144ce:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80144d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80144d4:	1ad3      	subs	r3, r2, r3
 80144d6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80144da:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80144de:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80144e0:	4413      	add	r3, r2
 80144e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80144e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	f47f af19 	bne.w	8014322 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80144f0:	2300      	movs	r3, #0
 80144f2:	e002      	b.n	80144fa <ip4_frag+0x26a>
      goto memerr;
 80144f4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80144f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80144fa:	4618      	mov	r0, r3
 80144fc:	3748      	adds	r7, #72	; 0x48
 80144fe:	46bd      	mov	sp, r7
 8014500:	bd80      	pop	{r7, pc}
 8014502:	bf00      	nop
 8014504:	08026404 	.word	0x08026404
 8014508:	08026608 	.word	0x08026608
 801450c:	08026474 	.word	0x08026474
 8014510:	08026624 	.word	0x08026624
 8014514:	08026644 	.word	0x08026644
 8014518:	08014229 	.word	0x08014229

0801451c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 801451c:	b480      	push	{r7}
 801451e:	b083      	sub	sp, #12
 8014520:	af00      	add	r7, sp, #0
 8014522:	4603      	mov	r3, r0
 8014524:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8014526:	4b05      	ldr	r3, [pc, #20]	; (801453c <ptr_to_mem+0x20>)
 8014528:	681a      	ldr	r2, [r3, #0]
 801452a:	88fb      	ldrh	r3, [r7, #6]
 801452c:	4413      	add	r3, r2
}
 801452e:	4618      	mov	r0, r3
 8014530:	370c      	adds	r7, #12
 8014532:	46bd      	mov	sp, r7
 8014534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014538:	4770      	bx	lr
 801453a:	bf00      	nop
 801453c:	24005770 	.word	0x24005770

08014540 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8014540:	b480      	push	{r7}
 8014542:	b083      	sub	sp, #12
 8014544:	af00      	add	r7, sp, #0
 8014546:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8014548:	4b05      	ldr	r3, [pc, #20]	; (8014560 <mem_to_ptr+0x20>)
 801454a:	681b      	ldr	r3, [r3, #0]
 801454c:	687a      	ldr	r2, [r7, #4]
 801454e:	1ad3      	subs	r3, r2, r3
 8014550:	b29b      	uxth	r3, r3
}
 8014552:	4618      	mov	r0, r3
 8014554:	370c      	adds	r7, #12
 8014556:	46bd      	mov	sp, r7
 8014558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801455c:	4770      	bx	lr
 801455e:	bf00      	nop
 8014560:	24005770 	.word	0x24005770

08014564 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8014564:	b590      	push	{r4, r7, lr}
 8014566:	b085      	sub	sp, #20
 8014568:	af00      	add	r7, sp, #0
 801456a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801456c:	4b45      	ldr	r3, [pc, #276]	; (8014684 <plug_holes+0x120>)
 801456e:	681b      	ldr	r3, [r3, #0]
 8014570:	687a      	ldr	r2, [r7, #4]
 8014572:	429a      	cmp	r2, r3
 8014574:	d206      	bcs.n	8014584 <plug_holes+0x20>
 8014576:	4b44      	ldr	r3, [pc, #272]	; (8014688 <plug_holes+0x124>)
 8014578:	f240 12df 	movw	r2, #479	; 0x1df
 801457c:	4943      	ldr	r1, [pc, #268]	; (801468c <plug_holes+0x128>)
 801457e:	4844      	ldr	r0, [pc, #272]	; (8014690 <plug_holes+0x12c>)
 8014580:	f00c faf4 	bl	8020b6c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8014584:	4b43      	ldr	r3, [pc, #268]	; (8014694 <plug_holes+0x130>)
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	687a      	ldr	r2, [r7, #4]
 801458a:	429a      	cmp	r2, r3
 801458c:	d306      	bcc.n	801459c <plug_holes+0x38>
 801458e:	4b3e      	ldr	r3, [pc, #248]	; (8014688 <plug_holes+0x124>)
 8014590:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8014594:	4940      	ldr	r1, [pc, #256]	; (8014698 <plug_holes+0x134>)
 8014596:	483e      	ldr	r0, [pc, #248]	; (8014690 <plug_holes+0x12c>)
 8014598:	f00c fae8 	bl	8020b6c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	791b      	ldrb	r3, [r3, #4]
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d006      	beq.n	80145b2 <plug_holes+0x4e>
 80145a4:	4b38      	ldr	r3, [pc, #224]	; (8014688 <plug_holes+0x124>)
 80145a6:	f240 12e1 	movw	r2, #481	; 0x1e1
 80145aa:	493c      	ldr	r1, [pc, #240]	; (801469c <plug_holes+0x138>)
 80145ac:	4838      	ldr	r0, [pc, #224]	; (8014690 <plug_holes+0x12c>)
 80145ae:	f00c fadd 	bl	8020b6c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	881b      	ldrh	r3, [r3, #0]
 80145b6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80145ba:	d906      	bls.n	80145ca <plug_holes+0x66>
 80145bc:	4b32      	ldr	r3, [pc, #200]	; (8014688 <plug_holes+0x124>)
 80145be:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80145c2:	4937      	ldr	r1, [pc, #220]	; (80146a0 <plug_holes+0x13c>)
 80145c4:	4832      	ldr	r0, [pc, #200]	; (8014690 <plug_holes+0x12c>)
 80145c6:	f00c fad1 	bl	8020b6c <iprintf>

  nmem = ptr_to_mem(mem->next);
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	881b      	ldrh	r3, [r3, #0]
 80145ce:	4618      	mov	r0, r3
 80145d0:	f7ff ffa4 	bl	801451c <ptr_to_mem>
 80145d4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80145d6:	687a      	ldr	r2, [r7, #4]
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	429a      	cmp	r2, r3
 80145dc:	d024      	beq.n	8014628 <plug_holes+0xc4>
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	791b      	ldrb	r3, [r3, #4]
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d120      	bne.n	8014628 <plug_holes+0xc4>
 80145e6:	4b2b      	ldr	r3, [pc, #172]	; (8014694 <plug_holes+0x130>)
 80145e8:	681b      	ldr	r3, [r3, #0]
 80145ea:	68fa      	ldr	r2, [r7, #12]
 80145ec:	429a      	cmp	r2, r3
 80145ee:	d01b      	beq.n	8014628 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80145f0:	4b2c      	ldr	r3, [pc, #176]	; (80146a4 <plug_holes+0x140>)
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	68fa      	ldr	r2, [r7, #12]
 80145f6:	429a      	cmp	r2, r3
 80145f8:	d102      	bne.n	8014600 <plug_holes+0x9c>
      lfree = mem;
 80145fa:	4a2a      	ldr	r2, [pc, #168]	; (80146a4 <plug_holes+0x140>)
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8014600:	68fb      	ldr	r3, [r7, #12]
 8014602:	881a      	ldrh	r2, [r3, #0]
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8014608:	68fb      	ldr	r3, [r7, #12]
 801460a:	881b      	ldrh	r3, [r3, #0]
 801460c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014610:	d00a      	beq.n	8014628 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	881b      	ldrh	r3, [r3, #0]
 8014616:	4618      	mov	r0, r3
 8014618:	f7ff ff80 	bl	801451c <ptr_to_mem>
 801461c:	4604      	mov	r4, r0
 801461e:	6878      	ldr	r0, [r7, #4]
 8014620:	f7ff ff8e 	bl	8014540 <mem_to_ptr>
 8014624:	4603      	mov	r3, r0
 8014626:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	885b      	ldrh	r3, [r3, #2]
 801462c:	4618      	mov	r0, r3
 801462e:	f7ff ff75 	bl	801451c <ptr_to_mem>
 8014632:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8014634:	68ba      	ldr	r2, [r7, #8]
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	429a      	cmp	r2, r3
 801463a:	d01f      	beq.n	801467c <plug_holes+0x118>
 801463c:	68bb      	ldr	r3, [r7, #8]
 801463e:	791b      	ldrb	r3, [r3, #4]
 8014640:	2b00      	cmp	r3, #0
 8014642:	d11b      	bne.n	801467c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8014644:	4b17      	ldr	r3, [pc, #92]	; (80146a4 <plug_holes+0x140>)
 8014646:	681b      	ldr	r3, [r3, #0]
 8014648:	687a      	ldr	r2, [r7, #4]
 801464a:	429a      	cmp	r2, r3
 801464c:	d102      	bne.n	8014654 <plug_holes+0xf0>
      lfree = pmem;
 801464e:	4a15      	ldr	r2, [pc, #84]	; (80146a4 <plug_holes+0x140>)
 8014650:	68bb      	ldr	r3, [r7, #8]
 8014652:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	881a      	ldrh	r2, [r3, #0]
 8014658:	68bb      	ldr	r3, [r7, #8]
 801465a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	881b      	ldrh	r3, [r3, #0]
 8014660:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014664:	d00a      	beq.n	801467c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	881b      	ldrh	r3, [r3, #0]
 801466a:	4618      	mov	r0, r3
 801466c:	f7ff ff56 	bl	801451c <ptr_to_mem>
 8014670:	4604      	mov	r4, r0
 8014672:	68b8      	ldr	r0, [r7, #8]
 8014674:	f7ff ff64 	bl	8014540 <mem_to_ptr>
 8014678:	4603      	mov	r3, r0
 801467a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 801467c:	bf00      	nop
 801467e:	3714      	adds	r7, #20
 8014680:	46bd      	mov	sp, r7
 8014682:	bd90      	pop	{r4, r7, pc}
 8014684:	24005770 	.word	0x24005770
 8014688:	08026654 	.word	0x08026654
 801468c:	080266b0 	.word	0x080266b0
 8014690:	080266c8 	.word	0x080266c8
 8014694:	24005774 	.word	0x24005774
 8014698:	080266f0 	.word	0x080266f0
 801469c:	0802670c 	.word	0x0802670c
 80146a0:	08026728 	.word	0x08026728
 80146a4:	24005778 	.word	0x24005778

080146a8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80146a8:	b580      	push	{r7, lr}
 80146aa:	b082      	sub	sp, #8
 80146ac:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80146ae:	4b16      	ldr	r3, [pc, #88]	; (8014708 <mem_init+0x60>)
 80146b0:	4a16      	ldr	r2, [pc, #88]	; (801470c <mem_init+0x64>)
 80146b2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80146b4:	4b14      	ldr	r3, [pc, #80]	; (8014708 <mem_init+0x60>)
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80146c0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	2200      	movs	r2, #0
 80146c6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	2200      	movs	r2, #0
 80146cc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80146ce:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80146d2:	f7ff ff23 	bl	801451c <ptr_to_mem>
 80146d6:	4603      	mov	r3, r0
 80146d8:	4a0d      	ldr	r2, [pc, #52]	; (8014710 <mem_init+0x68>)
 80146da:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80146dc:	4b0c      	ldr	r3, [pc, #48]	; (8014710 <mem_init+0x68>)
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	2201      	movs	r2, #1
 80146e2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80146e4:	4b0a      	ldr	r3, [pc, #40]	; (8014710 <mem_init+0x68>)
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80146ec:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80146ee:	4b08      	ldr	r3, [pc, #32]	; (8014710 <mem_init+0x68>)
 80146f0:	681b      	ldr	r3, [r3, #0]
 80146f2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80146f6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80146f8:	4b03      	ldr	r3, [pc, #12]	; (8014708 <mem_init+0x60>)
 80146fa:	681b      	ldr	r3, [r3, #0]
 80146fc:	4a05      	ldr	r2, [pc, #20]	; (8014714 <mem_init+0x6c>)
 80146fe:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8014700:	bf00      	nop
 8014702:	3708      	adds	r7, #8
 8014704:	46bd      	mov	sp, r7
 8014706:	bd80      	pop	{r7, pc}
 8014708:	24005770 	.word	0x24005770
 801470c:	30044000 	.word	0x30044000
 8014710:	24005774 	.word	0x24005774
 8014714:	24005778 	.word	0x24005778

08014718 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8014718:	b580      	push	{r7, lr}
 801471a:	b086      	sub	sp, #24
 801471c:	af00      	add	r7, sp, #0
 801471e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8014720:	6878      	ldr	r0, [r7, #4]
 8014722:	f7ff ff0d 	bl	8014540 <mem_to_ptr>
 8014726:	4603      	mov	r3, r0
 8014728:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	881b      	ldrh	r3, [r3, #0]
 801472e:	4618      	mov	r0, r3
 8014730:	f7ff fef4 	bl	801451c <ptr_to_mem>
 8014734:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	885b      	ldrh	r3, [r3, #2]
 801473a:	4618      	mov	r0, r3
 801473c:	f7ff feee 	bl	801451c <ptr_to_mem>
 8014740:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	881b      	ldrh	r3, [r3, #0]
 8014746:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801474a:	d818      	bhi.n	801477e <mem_link_valid+0x66>
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	885b      	ldrh	r3, [r3, #2]
 8014750:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014754:	d813      	bhi.n	801477e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801475a:	8afa      	ldrh	r2, [r7, #22]
 801475c:	429a      	cmp	r2, r3
 801475e:	d004      	beq.n	801476a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	881b      	ldrh	r3, [r3, #0]
 8014764:	8afa      	ldrh	r2, [r7, #22]
 8014766:	429a      	cmp	r2, r3
 8014768:	d109      	bne.n	801477e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801476a:	4b08      	ldr	r3, [pc, #32]	; (801478c <mem_link_valid+0x74>)
 801476c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801476e:	693a      	ldr	r2, [r7, #16]
 8014770:	429a      	cmp	r2, r3
 8014772:	d006      	beq.n	8014782 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8014774:	693b      	ldr	r3, [r7, #16]
 8014776:	885b      	ldrh	r3, [r3, #2]
 8014778:	8afa      	ldrh	r2, [r7, #22]
 801477a:	429a      	cmp	r2, r3
 801477c:	d001      	beq.n	8014782 <mem_link_valid+0x6a>
    return 0;
 801477e:	2300      	movs	r3, #0
 8014780:	e000      	b.n	8014784 <mem_link_valid+0x6c>
  }
  return 1;
 8014782:	2301      	movs	r3, #1
}
 8014784:	4618      	mov	r0, r3
 8014786:	3718      	adds	r7, #24
 8014788:	46bd      	mov	sp, r7
 801478a:	bd80      	pop	{r7, pc}
 801478c:	24005774 	.word	0x24005774

08014790 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8014790:	b580      	push	{r7, lr}
 8014792:	b084      	sub	sp, #16
 8014794:	af00      	add	r7, sp, #0
 8014796:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	2b00      	cmp	r3, #0
 801479c:	d04c      	beq.n	8014838 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	f003 0303 	and.w	r3, r3, #3
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d007      	beq.n	80147b8 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80147a8:	4b25      	ldr	r3, [pc, #148]	; (8014840 <mem_free+0xb0>)
 80147aa:	f240 2273 	movw	r2, #627	; 0x273
 80147ae:	4925      	ldr	r1, [pc, #148]	; (8014844 <mem_free+0xb4>)
 80147b0:	4825      	ldr	r0, [pc, #148]	; (8014848 <mem_free+0xb8>)
 80147b2:	f00c f9db 	bl	8020b6c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80147b6:	e040      	b.n	801483a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	3b08      	subs	r3, #8
 80147bc:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80147be:	4b23      	ldr	r3, [pc, #140]	; (801484c <mem_free+0xbc>)
 80147c0:	681b      	ldr	r3, [r3, #0]
 80147c2:	68fa      	ldr	r2, [r7, #12]
 80147c4:	429a      	cmp	r2, r3
 80147c6:	d306      	bcc.n	80147d6 <mem_free+0x46>
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	f103 020c 	add.w	r2, r3, #12
 80147ce:	4b20      	ldr	r3, [pc, #128]	; (8014850 <mem_free+0xc0>)
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	429a      	cmp	r2, r3
 80147d4:	d907      	bls.n	80147e6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80147d6:	4b1a      	ldr	r3, [pc, #104]	; (8014840 <mem_free+0xb0>)
 80147d8:	f240 227f 	movw	r2, #639	; 0x27f
 80147dc:	491d      	ldr	r1, [pc, #116]	; (8014854 <mem_free+0xc4>)
 80147de:	481a      	ldr	r0, [pc, #104]	; (8014848 <mem_free+0xb8>)
 80147e0:	f00c f9c4 	bl	8020b6c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80147e4:	e029      	b.n	801483a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	791b      	ldrb	r3, [r3, #4]
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d107      	bne.n	80147fe <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80147ee:	4b14      	ldr	r3, [pc, #80]	; (8014840 <mem_free+0xb0>)
 80147f0:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80147f4:	4918      	ldr	r1, [pc, #96]	; (8014858 <mem_free+0xc8>)
 80147f6:	4814      	ldr	r0, [pc, #80]	; (8014848 <mem_free+0xb8>)
 80147f8:	f00c f9b8 	bl	8020b6c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80147fc:	e01d      	b.n	801483a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80147fe:	68f8      	ldr	r0, [r7, #12]
 8014800:	f7ff ff8a 	bl	8014718 <mem_link_valid>
 8014804:	4603      	mov	r3, r0
 8014806:	2b00      	cmp	r3, #0
 8014808:	d107      	bne.n	801481a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801480a:	4b0d      	ldr	r3, [pc, #52]	; (8014840 <mem_free+0xb0>)
 801480c:	f240 2295 	movw	r2, #661	; 0x295
 8014810:	4912      	ldr	r1, [pc, #72]	; (801485c <mem_free+0xcc>)
 8014812:	480d      	ldr	r0, [pc, #52]	; (8014848 <mem_free+0xb8>)
 8014814:	f00c f9aa 	bl	8020b6c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8014818:	e00f      	b.n	801483a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 801481a:	68fb      	ldr	r3, [r7, #12]
 801481c:	2200      	movs	r2, #0
 801481e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8014820:	4b0f      	ldr	r3, [pc, #60]	; (8014860 <mem_free+0xd0>)
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	68fa      	ldr	r2, [r7, #12]
 8014826:	429a      	cmp	r2, r3
 8014828:	d202      	bcs.n	8014830 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 801482a:	4a0d      	ldr	r2, [pc, #52]	; (8014860 <mem_free+0xd0>)
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8014830:	68f8      	ldr	r0, [r7, #12]
 8014832:	f7ff fe97 	bl	8014564 <plug_holes>
 8014836:	e000      	b.n	801483a <mem_free+0xaa>
    return;
 8014838:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 801483a:	3710      	adds	r7, #16
 801483c:	46bd      	mov	sp, r7
 801483e:	bd80      	pop	{r7, pc}
 8014840:	08026654 	.word	0x08026654
 8014844:	08026754 	.word	0x08026754
 8014848:	080266c8 	.word	0x080266c8
 801484c:	24005770 	.word	0x24005770
 8014850:	24005774 	.word	0x24005774
 8014854:	08026778 	.word	0x08026778
 8014858:	08026794 	.word	0x08026794
 801485c:	080267bc 	.word	0x080267bc
 8014860:	24005778 	.word	0x24005778

08014864 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8014864:	b580      	push	{r7, lr}
 8014866:	b088      	sub	sp, #32
 8014868:	af00      	add	r7, sp, #0
 801486a:	6078      	str	r0, [r7, #4]
 801486c:	460b      	mov	r3, r1
 801486e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8014870:	887b      	ldrh	r3, [r7, #2]
 8014872:	3303      	adds	r3, #3
 8014874:	b29b      	uxth	r3, r3
 8014876:	f023 0303 	bic.w	r3, r3, #3
 801487a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 801487c:	8bfb      	ldrh	r3, [r7, #30]
 801487e:	2b0b      	cmp	r3, #11
 8014880:	d801      	bhi.n	8014886 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8014882:	230c      	movs	r3, #12
 8014884:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8014886:	8bfb      	ldrh	r3, [r7, #30]
 8014888:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801488c:	d803      	bhi.n	8014896 <mem_trim+0x32>
 801488e:	8bfa      	ldrh	r2, [r7, #30]
 8014890:	887b      	ldrh	r3, [r7, #2]
 8014892:	429a      	cmp	r2, r3
 8014894:	d201      	bcs.n	801489a <mem_trim+0x36>
    return NULL;
 8014896:	2300      	movs	r3, #0
 8014898:	e0cc      	b.n	8014a34 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801489a:	4b68      	ldr	r3, [pc, #416]	; (8014a3c <mem_trim+0x1d8>)
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	687a      	ldr	r2, [r7, #4]
 80148a0:	429a      	cmp	r2, r3
 80148a2:	d304      	bcc.n	80148ae <mem_trim+0x4a>
 80148a4:	4b66      	ldr	r3, [pc, #408]	; (8014a40 <mem_trim+0x1dc>)
 80148a6:	681b      	ldr	r3, [r3, #0]
 80148a8:	687a      	ldr	r2, [r7, #4]
 80148aa:	429a      	cmp	r2, r3
 80148ac:	d306      	bcc.n	80148bc <mem_trim+0x58>
 80148ae:	4b65      	ldr	r3, [pc, #404]	; (8014a44 <mem_trim+0x1e0>)
 80148b0:	f240 22d1 	movw	r2, #721	; 0x2d1
 80148b4:	4964      	ldr	r1, [pc, #400]	; (8014a48 <mem_trim+0x1e4>)
 80148b6:	4865      	ldr	r0, [pc, #404]	; (8014a4c <mem_trim+0x1e8>)
 80148b8:	f00c f958 	bl	8020b6c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80148bc:	4b5f      	ldr	r3, [pc, #380]	; (8014a3c <mem_trim+0x1d8>)
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	687a      	ldr	r2, [r7, #4]
 80148c2:	429a      	cmp	r2, r3
 80148c4:	d304      	bcc.n	80148d0 <mem_trim+0x6c>
 80148c6:	4b5e      	ldr	r3, [pc, #376]	; (8014a40 <mem_trim+0x1dc>)
 80148c8:	681b      	ldr	r3, [r3, #0]
 80148ca:	687a      	ldr	r2, [r7, #4]
 80148cc:	429a      	cmp	r2, r3
 80148ce:	d301      	bcc.n	80148d4 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	e0af      	b.n	8014a34 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	3b08      	subs	r3, #8
 80148d8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80148da:	69b8      	ldr	r0, [r7, #24]
 80148dc:	f7ff fe30 	bl	8014540 <mem_to_ptr>
 80148e0:	4603      	mov	r3, r0
 80148e2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80148e4:	69bb      	ldr	r3, [r7, #24]
 80148e6:	881a      	ldrh	r2, [r3, #0]
 80148e8:	8afb      	ldrh	r3, [r7, #22]
 80148ea:	1ad3      	subs	r3, r2, r3
 80148ec:	b29b      	uxth	r3, r3
 80148ee:	3b08      	subs	r3, #8
 80148f0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80148f2:	8bfa      	ldrh	r2, [r7, #30]
 80148f4:	8abb      	ldrh	r3, [r7, #20]
 80148f6:	429a      	cmp	r2, r3
 80148f8:	d906      	bls.n	8014908 <mem_trim+0xa4>
 80148fa:	4b52      	ldr	r3, [pc, #328]	; (8014a44 <mem_trim+0x1e0>)
 80148fc:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8014900:	4953      	ldr	r1, [pc, #332]	; (8014a50 <mem_trim+0x1ec>)
 8014902:	4852      	ldr	r0, [pc, #328]	; (8014a4c <mem_trim+0x1e8>)
 8014904:	f00c f932 	bl	8020b6c <iprintf>
  if (newsize > size) {
 8014908:	8bfa      	ldrh	r2, [r7, #30]
 801490a:	8abb      	ldrh	r3, [r7, #20]
 801490c:	429a      	cmp	r2, r3
 801490e:	d901      	bls.n	8014914 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8014910:	2300      	movs	r3, #0
 8014912:	e08f      	b.n	8014a34 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8014914:	8bfa      	ldrh	r2, [r7, #30]
 8014916:	8abb      	ldrh	r3, [r7, #20]
 8014918:	429a      	cmp	r2, r3
 801491a:	d101      	bne.n	8014920 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	e089      	b.n	8014a34 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8014920:	69bb      	ldr	r3, [r7, #24]
 8014922:	881b      	ldrh	r3, [r3, #0]
 8014924:	4618      	mov	r0, r3
 8014926:	f7ff fdf9 	bl	801451c <ptr_to_mem>
 801492a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801492c:	693b      	ldr	r3, [r7, #16]
 801492e:	791b      	ldrb	r3, [r3, #4]
 8014930:	2b00      	cmp	r3, #0
 8014932:	d13f      	bne.n	80149b4 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8014934:	69bb      	ldr	r3, [r7, #24]
 8014936:	881b      	ldrh	r3, [r3, #0]
 8014938:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801493c:	d106      	bne.n	801494c <mem_trim+0xe8>
 801493e:	4b41      	ldr	r3, [pc, #260]	; (8014a44 <mem_trim+0x1e0>)
 8014940:	f240 22f5 	movw	r2, #757	; 0x2f5
 8014944:	4943      	ldr	r1, [pc, #268]	; (8014a54 <mem_trim+0x1f0>)
 8014946:	4841      	ldr	r0, [pc, #260]	; (8014a4c <mem_trim+0x1e8>)
 8014948:	f00c f910 	bl	8020b6c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801494c:	693b      	ldr	r3, [r7, #16]
 801494e:	881b      	ldrh	r3, [r3, #0]
 8014950:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8014952:	8afa      	ldrh	r2, [r7, #22]
 8014954:	8bfb      	ldrh	r3, [r7, #30]
 8014956:	4413      	add	r3, r2
 8014958:	b29b      	uxth	r3, r3
 801495a:	3308      	adds	r3, #8
 801495c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 801495e:	4b3e      	ldr	r3, [pc, #248]	; (8014a58 <mem_trim+0x1f4>)
 8014960:	681b      	ldr	r3, [r3, #0]
 8014962:	693a      	ldr	r2, [r7, #16]
 8014964:	429a      	cmp	r2, r3
 8014966:	d106      	bne.n	8014976 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8014968:	89fb      	ldrh	r3, [r7, #14]
 801496a:	4618      	mov	r0, r3
 801496c:	f7ff fdd6 	bl	801451c <ptr_to_mem>
 8014970:	4603      	mov	r3, r0
 8014972:	4a39      	ldr	r2, [pc, #228]	; (8014a58 <mem_trim+0x1f4>)
 8014974:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8014976:	89fb      	ldrh	r3, [r7, #14]
 8014978:	4618      	mov	r0, r3
 801497a:	f7ff fdcf 	bl	801451c <ptr_to_mem>
 801497e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8014980:	693b      	ldr	r3, [r7, #16]
 8014982:	2200      	movs	r2, #0
 8014984:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8014986:	693b      	ldr	r3, [r7, #16]
 8014988:	89ba      	ldrh	r2, [r7, #12]
 801498a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801498c:	693b      	ldr	r3, [r7, #16]
 801498e:	8afa      	ldrh	r2, [r7, #22]
 8014990:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8014992:	69bb      	ldr	r3, [r7, #24]
 8014994:	89fa      	ldrh	r2, [r7, #14]
 8014996:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8014998:	693b      	ldr	r3, [r7, #16]
 801499a:	881b      	ldrh	r3, [r3, #0]
 801499c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80149a0:	d047      	beq.n	8014a32 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80149a2:	693b      	ldr	r3, [r7, #16]
 80149a4:	881b      	ldrh	r3, [r3, #0]
 80149a6:	4618      	mov	r0, r3
 80149a8:	f7ff fdb8 	bl	801451c <ptr_to_mem>
 80149ac:	4602      	mov	r2, r0
 80149ae:	89fb      	ldrh	r3, [r7, #14]
 80149b0:	8053      	strh	r3, [r2, #2]
 80149b2:	e03e      	b.n	8014a32 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80149b4:	8bfb      	ldrh	r3, [r7, #30]
 80149b6:	f103 0214 	add.w	r2, r3, #20
 80149ba:	8abb      	ldrh	r3, [r7, #20]
 80149bc:	429a      	cmp	r2, r3
 80149be:	d838      	bhi.n	8014a32 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80149c0:	8afa      	ldrh	r2, [r7, #22]
 80149c2:	8bfb      	ldrh	r3, [r7, #30]
 80149c4:	4413      	add	r3, r2
 80149c6:	b29b      	uxth	r3, r3
 80149c8:	3308      	adds	r3, #8
 80149ca:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80149cc:	69bb      	ldr	r3, [r7, #24]
 80149ce:	881b      	ldrh	r3, [r3, #0]
 80149d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80149d4:	d106      	bne.n	80149e4 <mem_trim+0x180>
 80149d6:	4b1b      	ldr	r3, [pc, #108]	; (8014a44 <mem_trim+0x1e0>)
 80149d8:	f240 3216 	movw	r2, #790	; 0x316
 80149dc:	491d      	ldr	r1, [pc, #116]	; (8014a54 <mem_trim+0x1f0>)
 80149de:	481b      	ldr	r0, [pc, #108]	; (8014a4c <mem_trim+0x1e8>)
 80149e0:	f00c f8c4 	bl	8020b6c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80149e4:	89fb      	ldrh	r3, [r7, #14]
 80149e6:	4618      	mov	r0, r3
 80149e8:	f7ff fd98 	bl	801451c <ptr_to_mem>
 80149ec:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80149ee:	4b1a      	ldr	r3, [pc, #104]	; (8014a58 <mem_trim+0x1f4>)
 80149f0:	681b      	ldr	r3, [r3, #0]
 80149f2:	693a      	ldr	r2, [r7, #16]
 80149f4:	429a      	cmp	r2, r3
 80149f6:	d202      	bcs.n	80149fe <mem_trim+0x19a>
      lfree = mem2;
 80149f8:	4a17      	ldr	r2, [pc, #92]	; (8014a58 <mem_trim+0x1f4>)
 80149fa:	693b      	ldr	r3, [r7, #16]
 80149fc:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80149fe:	693b      	ldr	r3, [r7, #16]
 8014a00:	2200      	movs	r2, #0
 8014a02:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8014a04:	69bb      	ldr	r3, [r7, #24]
 8014a06:	881a      	ldrh	r2, [r3, #0]
 8014a08:	693b      	ldr	r3, [r7, #16]
 8014a0a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8014a0c:	693b      	ldr	r3, [r7, #16]
 8014a0e:	8afa      	ldrh	r2, [r7, #22]
 8014a10:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8014a12:	69bb      	ldr	r3, [r7, #24]
 8014a14:	89fa      	ldrh	r2, [r7, #14]
 8014a16:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8014a18:	693b      	ldr	r3, [r7, #16]
 8014a1a:	881b      	ldrh	r3, [r3, #0]
 8014a1c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014a20:	d007      	beq.n	8014a32 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8014a22:	693b      	ldr	r3, [r7, #16]
 8014a24:	881b      	ldrh	r3, [r3, #0]
 8014a26:	4618      	mov	r0, r3
 8014a28:	f7ff fd78 	bl	801451c <ptr_to_mem>
 8014a2c:	4602      	mov	r2, r0
 8014a2e:	89fb      	ldrh	r3, [r7, #14]
 8014a30:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8014a32:	687b      	ldr	r3, [r7, #4]
}
 8014a34:	4618      	mov	r0, r3
 8014a36:	3720      	adds	r7, #32
 8014a38:	46bd      	mov	sp, r7
 8014a3a:	bd80      	pop	{r7, pc}
 8014a3c:	24005770 	.word	0x24005770
 8014a40:	24005774 	.word	0x24005774
 8014a44:	08026654 	.word	0x08026654
 8014a48:	080267f0 	.word	0x080267f0
 8014a4c:	080266c8 	.word	0x080266c8
 8014a50:	08026808 	.word	0x08026808
 8014a54:	08026828 	.word	0x08026828
 8014a58:	24005778 	.word	0x24005778

08014a5c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8014a5c:	b580      	push	{r7, lr}
 8014a5e:	b088      	sub	sp, #32
 8014a60:	af00      	add	r7, sp, #0
 8014a62:	4603      	mov	r3, r0
 8014a64:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8014a66:	88fb      	ldrh	r3, [r7, #6]
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d101      	bne.n	8014a70 <mem_malloc+0x14>
    return NULL;
 8014a6c:	2300      	movs	r3, #0
 8014a6e:	e0d9      	b.n	8014c24 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8014a70:	88fb      	ldrh	r3, [r7, #6]
 8014a72:	3303      	adds	r3, #3
 8014a74:	b29b      	uxth	r3, r3
 8014a76:	f023 0303 	bic.w	r3, r3, #3
 8014a7a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8014a7c:	8bbb      	ldrh	r3, [r7, #28]
 8014a7e:	2b0b      	cmp	r3, #11
 8014a80:	d801      	bhi.n	8014a86 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8014a82:	230c      	movs	r3, #12
 8014a84:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8014a86:	8bbb      	ldrh	r3, [r7, #28]
 8014a88:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014a8c:	d803      	bhi.n	8014a96 <mem_malloc+0x3a>
 8014a8e:	8bba      	ldrh	r2, [r7, #28]
 8014a90:	88fb      	ldrh	r3, [r7, #6]
 8014a92:	429a      	cmp	r2, r3
 8014a94:	d201      	bcs.n	8014a9a <mem_malloc+0x3e>
    return NULL;
 8014a96:	2300      	movs	r3, #0
 8014a98:	e0c4      	b.n	8014c24 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8014a9a:	4b64      	ldr	r3, [pc, #400]	; (8014c2c <mem_malloc+0x1d0>)
 8014a9c:	681b      	ldr	r3, [r3, #0]
 8014a9e:	4618      	mov	r0, r3
 8014aa0:	f7ff fd4e 	bl	8014540 <mem_to_ptr>
 8014aa4:	4603      	mov	r3, r0
 8014aa6:	83fb      	strh	r3, [r7, #30]
 8014aa8:	e0b4      	b.n	8014c14 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8014aaa:	8bfb      	ldrh	r3, [r7, #30]
 8014aac:	4618      	mov	r0, r3
 8014aae:	f7ff fd35 	bl	801451c <ptr_to_mem>
 8014ab2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8014ab4:	697b      	ldr	r3, [r7, #20]
 8014ab6:	791b      	ldrb	r3, [r3, #4]
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	f040 80a4 	bne.w	8014c06 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8014abe:	697b      	ldr	r3, [r7, #20]
 8014ac0:	881b      	ldrh	r3, [r3, #0]
 8014ac2:	461a      	mov	r2, r3
 8014ac4:	8bfb      	ldrh	r3, [r7, #30]
 8014ac6:	1ad3      	subs	r3, r2, r3
 8014ac8:	f1a3 0208 	sub.w	r2, r3, #8
 8014acc:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8014ace:	429a      	cmp	r2, r3
 8014ad0:	f0c0 8099 	bcc.w	8014c06 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8014ad4:	697b      	ldr	r3, [r7, #20]
 8014ad6:	881b      	ldrh	r3, [r3, #0]
 8014ad8:	461a      	mov	r2, r3
 8014ada:	8bfb      	ldrh	r3, [r7, #30]
 8014adc:	1ad3      	subs	r3, r2, r3
 8014ade:	f1a3 0208 	sub.w	r2, r3, #8
 8014ae2:	8bbb      	ldrh	r3, [r7, #28]
 8014ae4:	3314      	adds	r3, #20
 8014ae6:	429a      	cmp	r2, r3
 8014ae8:	d333      	bcc.n	8014b52 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8014aea:	8bfa      	ldrh	r2, [r7, #30]
 8014aec:	8bbb      	ldrh	r3, [r7, #28]
 8014aee:	4413      	add	r3, r2
 8014af0:	b29b      	uxth	r3, r3
 8014af2:	3308      	adds	r3, #8
 8014af4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8014af6:	8a7b      	ldrh	r3, [r7, #18]
 8014af8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014afc:	d106      	bne.n	8014b0c <mem_malloc+0xb0>
 8014afe:	4b4c      	ldr	r3, [pc, #304]	; (8014c30 <mem_malloc+0x1d4>)
 8014b00:	f240 3287 	movw	r2, #903	; 0x387
 8014b04:	494b      	ldr	r1, [pc, #300]	; (8014c34 <mem_malloc+0x1d8>)
 8014b06:	484c      	ldr	r0, [pc, #304]	; (8014c38 <mem_malloc+0x1dc>)
 8014b08:	f00c f830 	bl	8020b6c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8014b0c:	8a7b      	ldrh	r3, [r7, #18]
 8014b0e:	4618      	mov	r0, r3
 8014b10:	f7ff fd04 	bl	801451c <ptr_to_mem>
 8014b14:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	2200      	movs	r2, #0
 8014b1a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8014b1c:	697b      	ldr	r3, [r7, #20]
 8014b1e:	881a      	ldrh	r2, [r3, #0]
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	8bfa      	ldrh	r2, [r7, #30]
 8014b28:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8014b2a:	697b      	ldr	r3, [r7, #20]
 8014b2c:	8a7a      	ldrh	r2, [r7, #18]
 8014b2e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8014b30:	697b      	ldr	r3, [r7, #20]
 8014b32:	2201      	movs	r2, #1
 8014b34:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	881b      	ldrh	r3, [r3, #0]
 8014b3a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014b3e:	d00b      	beq.n	8014b58 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	881b      	ldrh	r3, [r3, #0]
 8014b44:	4618      	mov	r0, r3
 8014b46:	f7ff fce9 	bl	801451c <ptr_to_mem>
 8014b4a:	4602      	mov	r2, r0
 8014b4c:	8a7b      	ldrh	r3, [r7, #18]
 8014b4e:	8053      	strh	r3, [r2, #2]
 8014b50:	e002      	b.n	8014b58 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8014b52:	697b      	ldr	r3, [r7, #20]
 8014b54:	2201      	movs	r2, #1
 8014b56:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8014b58:	4b34      	ldr	r3, [pc, #208]	; (8014c2c <mem_malloc+0x1d0>)
 8014b5a:	681b      	ldr	r3, [r3, #0]
 8014b5c:	697a      	ldr	r2, [r7, #20]
 8014b5e:	429a      	cmp	r2, r3
 8014b60:	d127      	bne.n	8014bb2 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8014b62:	4b32      	ldr	r3, [pc, #200]	; (8014c2c <mem_malloc+0x1d0>)
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8014b68:	e005      	b.n	8014b76 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8014b6a:	69bb      	ldr	r3, [r7, #24]
 8014b6c:	881b      	ldrh	r3, [r3, #0]
 8014b6e:	4618      	mov	r0, r3
 8014b70:	f7ff fcd4 	bl	801451c <ptr_to_mem>
 8014b74:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8014b76:	69bb      	ldr	r3, [r7, #24]
 8014b78:	791b      	ldrb	r3, [r3, #4]
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d004      	beq.n	8014b88 <mem_malloc+0x12c>
 8014b7e:	4b2f      	ldr	r3, [pc, #188]	; (8014c3c <mem_malloc+0x1e0>)
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	69ba      	ldr	r2, [r7, #24]
 8014b84:	429a      	cmp	r2, r3
 8014b86:	d1f0      	bne.n	8014b6a <mem_malloc+0x10e>
          }
          lfree = cur;
 8014b88:	4a28      	ldr	r2, [pc, #160]	; (8014c2c <mem_malloc+0x1d0>)
 8014b8a:	69bb      	ldr	r3, [r7, #24]
 8014b8c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8014b8e:	4b27      	ldr	r3, [pc, #156]	; (8014c2c <mem_malloc+0x1d0>)
 8014b90:	681a      	ldr	r2, [r3, #0]
 8014b92:	4b2a      	ldr	r3, [pc, #168]	; (8014c3c <mem_malloc+0x1e0>)
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	429a      	cmp	r2, r3
 8014b98:	d00b      	beq.n	8014bb2 <mem_malloc+0x156>
 8014b9a:	4b24      	ldr	r3, [pc, #144]	; (8014c2c <mem_malloc+0x1d0>)
 8014b9c:	681b      	ldr	r3, [r3, #0]
 8014b9e:	791b      	ldrb	r3, [r3, #4]
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d006      	beq.n	8014bb2 <mem_malloc+0x156>
 8014ba4:	4b22      	ldr	r3, [pc, #136]	; (8014c30 <mem_malloc+0x1d4>)
 8014ba6:	f240 32b5 	movw	r2, #949	; 0x3b5
 8014baa:	4925      	ldr	r1, [pc, #148]	; (8014c40 <mem_malloc+0x1e4>)
 8014bac:	4822      	ldr	r0, [pc, #136]	; (8014c38 <mem_malloc+0x1dc>)
 8014bae:	f00b ffdd 	bl	8020b6c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8014bb2:	8bba      	ldrh	r2, [r7, #28]
 8014bb4:	697b      	ldr	r3, [r7, #20]
 8014bb6:	4413      	add	r3, r2
 8014bb8:	3308      	adds	r3, #8
 8014bba:	4a20      	ldr	r2, [pc, #128]	; (8014c3c <mem_malloc+0x1e0>)
 8014bbc:	6812      	ldr	r2, [r2, #0]
 8014bbe:	4293      	cmp	r3, r2
 8014bc0:	d906      	bls.n	8014bd0 <mem_malloc+0x174>
 8014bc2:	4b1b      	ldr	r3, [pc, #108]	; (8014c30 <mem_malloc+0x1d4>)
 8014bc4:	f240 32b9 	movw	r2, #953	; 0x3b9
 8014bc8:	491e      	ldr	r1, [pc, #120]	; (8014c44 <mem_malloc+0x1e8>)
 8014bca:	481b      	ldr	r0, [pc, #108]	; (8014c38 <mem_malloc+0x1dc>)
 8014bcc:	f00b ffce 	bl	8020b6c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8014bd0:	697b      	ldr	r3, [r7, #20]
 8014bd2:	f003 0303 	and.w	r3, r3, #3
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d006      	beq.n	8014be8 <mem_malloc+0x18c>
 8014bda:	4b15      	ldr	r3, [pc, #84]	; (8014c30 <mem_malloc+0x1d4>)
 8014bdc:	f240 32bb 	movw	r2, #955	; 0x3bb
 8014be0:	4919      	ldr	r1, [pc, #100]	; (8014c48 <mem_malloc+0x1ec>)
 8014be2:	4815      	ldr	r0, [pc, #84]	; (8014c38 <mem_malloc+0x1dc>)
 8014be4:	f00b ffc2 	bl	8020b6c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8014be8:	697b      	ldr	r3, [r7, #20]
 8014bea:	f003 0303 	and.w	r3, r3, #3
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d006      	beq.n	8014c00 <mem_malloc+0x1a4>
 8014bf2:	4b0f      	ldr	r3, [pc, #60]	; (8014c30 <mem_malloc+0x1d4>)
 8014bf4:	f240 32bd 	movw	r2, #957	; 0x3bd
 8014bf8:	4914      	ldr	r1, [pc, #80]	; (8014c4c <mem_malloc+0x1f0>)
 8014bfa:	480f      	ldr	r0, [pc, #60]	; (8014c38 <mem_malloc+0x1dc>)
 8014bfc:	f00b ffb6 	bl	8020b6c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8014c00:	697b      	ldr	r3, [r7, #20]
 8014c02:	3308      	adds	r3, #8
 8014c04:	e00e      	b.n	8014c24 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8014c06:	8bfb      	ldrh	r3, [r7, #30]
 8014c08:	4618      	mov	r0, r3
 8014c0a:	f7ff fc87 	bl	801451c <ptr_to_mem>
 8014c0e:	4603      	mov	r3, r0
 8014c10:	881b      	ldrh	r3, [r3, #0]
 8014c12:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8014c14:	8bfa      	ldrh	r2, [r7, #30]
 8014c16:	8bbb      	ldrh	r3, [r7, #28]
 8014c18:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8014c1c:	429a      	cmp	r2, r3
 8014c1e:	f4ff af44 	bcc.w	8014aaa <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8014c22:	2300      	movs	r3, #0
}
 8014c24:	4618      	mov	r0, r3
 8014c26:	3720      	adds	r7, #32
 8014c28:	46bd      	mov	sp, r7
 8014c2a:	bd80      	pop	{r7, pc}
 8014c2c:	24005778 	.word	0x24005778
 8014c30:	08026654 	.word	0x08026654
 8014c34:	08026828 	.word	0x08026828
 8014c38:	080266c8 	.word	0x080266c8
 8014c3c:	24005774 	.word	0x24005774
 8014c40:	0802683c 	.word	0x0802683c
 8014c44:	08026858 	.word	0x08026858
 8014c48:	08026888 	.word	0x08026888
 8014c4c:	080268b8 	.word	0x080268b8

08014c50 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8014c50:	b480      	push	{r7}
 8014c52:	b085      	sub	sp, #20
 8014c54:	af00      	add	r7, sp, #0
 8014c56:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	689b      	ldr	r3, [r3, #8]
 8014c5c:	2200      	movs	r2, #0
 8014c5e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	685b      	ldr	r3, [r3, #4]
 8014c64:	3303      	adds	r3, #3
 8014c66:	f023 0303 	bic.w	r3, r3, #3
 8014c6a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8014c6c:	2300      	movs	r3, #0
 8014c6e:	60fb      	str	r3, [r7, #12]
 8014c70:	e011      	b.n	8014c96 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	689b      	ldr	r3, [r3, #8]
 8014c76:	681a      	ldr	r2, [r3, #0]
 8014c78:	68bb      	ldr	r3, [r7, #8]
 8014c7a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	689b      	ldr	r3, [r3, #8]
 8014c80:	68ba      	ldr	r2, [r7, #8]
 8014c82:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	881b      	ldrh	r3, [r3, #0]
 8014c88:	461a      	mov	r2, r3
 8014c8a:	68bb      	ldr	r3, [r7, #8]
 8014c8c:	4413      	add	r3, r2
 8014c8e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	3301      	adds	r3, #1
 8014c94:	60fb      	str	r3, [r7, #12]
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	885b      	ldrh	r3, [r3, #2]
 8014c9a:	461a      	mov	r2, r3
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	4293      	cmp	r3, r2
 8014ca0:	dbe7      	blt.n	8014c72 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8014ca2:	bf00      	nop
 8014ca4:	bf00      	nop
 8014ca6:	3714      	adds	r7, #20
 8014ca8:	46bd      	mov	sp, r7
 8014caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cae:	4770      	bx	lr

08014cb0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8014cb0:	b580      	push	{r7, lr}
 8014cb2:	b082      	sub	sp, #8
 8014cb4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8014cb6:	2300      	movs	r3, #0
 8014cb8:	80fb      	strh	r3, [r7, #6]
 8014cba:	e009      	b.n	8014cd0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8014cbc:	88fb      	ldrh	r3, [r7, #6]
 8014cbe:	4a08      	ldr	r2, [pc, #32]	; (8014ce0 <memp_init+0x30>)
 8014cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014cc4:	4618      	mov	r0, r3
 8014cc6:	f7ff ffc3 	bl	8014c50 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8014cca:	88fb      	ldrh	r3, [r7, #6]
 8014ccc:	3301      	adds	r3, #1
 8014cce:	80fb      	strh	r3, [r7, #6]
 8014cd0:	88fb      	ldrh	r3, [r7, #6]
 8014cd2:	2b08      	cmp	r3, #8
 8014cd4:	d9f2      	bls.n	8014cbc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8014cd6:	bf00      	nop
 8014cd8:	bf00      	nop
 8014cda:	3708      	adds	r7, #8
 8014cdc:	46bd      	mov	sp, r7
 8014cde:	bd80      	pop	{r7, pc}
 8014ce0:	080291e8 	.word	0x080291e8

08014ce4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8014ce4:	b580      	push	{r7, lr}
 8014ce6:	b084      	sub	sp, #16
 8014ce8:	af00      	add	r7, sp, #0
 8014cea:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	689b      	ldr	r3, [r3, #8]
 8014cf0:	681b      	ldr	r3, [r3, #0]
 8014cf2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d012      	beq.n	8014d20 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	689b      	ldr	r3, [r3, #8]
 8014cfe:	68fa      	ldr	r2, [r7, #12]
 8014d00:	6812      	ldr	r2, [r2, #0]
 8014d02:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8014d04:	68fb      	ldr	r3, [r7, #12]
 8014d06:	f003 0303 	and.w	r3, r3, #3
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d006      	beq.n	8014d1c <do_memp_malloc_pool+0x38>
 8014d0e:	4b07      	ldr	r3, [pc, #28]	; (8014d2c <do_memp_malloc_pool+0x48>)
 8014d10:	f44f 728c 	mov.w	r2, #280	; 0x118
 8014d14:	4906      	ldr	r1, [pc, #24]	; (8014d30 <do_memp_malloc_pool+0x4c>)
 8014d16:	4807      	ldr	r0, [pc, #28]	; (8014d34 <do_memp_malloc_pool+0x50>)
 8014d18:	f00b ff28 	bl	8020b6c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	e000      	b.n	8014d22 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8014d20:	2300      	movs	r3, #0
}
 8014d22:	4618      	mov	r0, r3
 8014d24:	3710      	adds	r7, #16
 8014d26:	46bd      	mov	sp, r7
 8014d28:	bd80      	pop	{r7, pc}
 8014d2a:	bf00      	nop
 8014d2c:	080268dc 	.word	0x080268dc
 8014d30:	08026938 	.word	0x08026938
 8014d34:	0802695c 	.word	0x0802695c

08014d38 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8014d38:	b580      	push	{r7, lr}
 8014d3a:	b082      	sub	sp, #8
 8014d3c:	af00      	add	r7, sp, #0
 8014d3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d106      	bne.n	8014d54 <memp_malloc_pool+0x1c>
 8014d46:	4b0a      	ldr	r3, [pc, #40]	; (8014d70 <memp_malloc_pool+0x38>)
 8014d48:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8014d4c:	4909      	ldr	r1, [pc, #36]	; (8014d74 <memp_malloc_pool+0x3c>)
 8014d4e:	480a      	ldr	r0, [pc, #40]	; (8014d78 <memp_malloc_pool+0x40>)
 8014d50:	f00b ff0c 	bl	8020b6c <iprintf>
  if (desc == NULL) {
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d101      	bne.n	8014d5e <memp_malloc_pool+0x26>
    return NULL;
 8014d5a:	2300      	movs	r3, #0
 8014d5c:	e003      	b.n	8014d66 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8014d5e:	6878      	ldr	r0, [r7, #4]
 8014d60:	f7ff ffc0 	bl	8014ce4 <do_memp_malloc_pool>
 8014d64:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8014d66:	4618      	mov	r0, r3
 8014d68:	3708      	adds	r7, #8
 8014d6a:	46bd      	mov	sp, r7
 8014d6c:	bd80      	pop	{r7, pc}
 8014d6e:	bf00      	nop
 8014d70:	080268dc 	.word	0x080268dc
 8014d74:	08026984 	.word	0x08026984
 8014d78:	0802695c 	.word	0x0802695c

08014d7c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8014d7c:	b580      	push	{r7, lr}
 8014d7e:	b084      	sub	sp, #16
 8014d80:	af00      	add	r7, sp, #0
 8014d82:	4603      	mov	r3, r0
 8014d84:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8014d86:	79fb      	ldrb	r3, [r7, #7]
 8014d88:	2b08      	cmp	r3, #8
 8014d8a:	d908      	bls.n	8014d9e <memp_malloc+0x22>
 8014d8c:	4b0a      	ldr	r3, [pc, #40]	; (8014db8 <memp_malloc+0x3c>)
 8014d8e:	f240 1257 	movw	r2, #343	; 0x157
 8014d92:	490a      	ldr	r1, [pc, #40]	; (8014dbc <memp_malloc+0x40>)
 8014d94:	480a      	ldr	r0, [pc, #40]	; (8014dc0 <memp_malloc+0x44>)
 8014d96:	f00b fee9 	bl	8020b6c <iprintf>
 8014d9a:	2300      	movs	r3, #0
 8014d9c:	e008      	b.n	8014db0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8014d9e:	79fb      	ldrb	r3, [r7, #7]
 8014da0:	4a08      	ldr	r2, [pc, #32]	; (8014dc4 <memp_malloc+0x48>)
 8014da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014da6:	4618      	mov	r0, r3
 8014da8:	f7ff ff9c 	bl	8014ce4 <do_memp_malloc_pool>
 8014dac:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8014dae:	68fb      	ldr	r3, [r7, #12]
}
 8014db0:	4618      	mov	r0, r3
 8014db2:	3710      	adds	r7, #16
 8014db4:	46bd      	mov	sp, r7
 8014db6:	bd80      	pop	{r7, pc}
 8014db8:	080268dc 	.word	0x080268dc
 8014dbc:	08026998 	.word	0x08026998
 8014dc0:	0802695c 	.word	0x0802695c
 8014dc4:	080291e8 	.word	0x080291e8

08014dc8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8014dc8:	b580      	push	{r7, lr}
 8014dca:	b084      	sub	sp, #16
 8014dcc:	af00      	add	r7, sp, #0
 8014dce:	6078      	str	r0, [r7, #4]
 8014dd0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8014dd2:	683b      	ldr	r3, [r7, #0]
 8014dd4:	f003 0303 	and.w	r3, r3, #3
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d006      	beq.n	8014dea <do_memp_free_pool+0x22>
 8014ddc:	4b0a      	ldr	r3, [pc, #40]	; (8014e08 <do_memp_free_pool+0x40>)
 8014dde:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8014de2:	490a      	ldr	r1, [pc, #40]	; (8014e0c <do_memp_free_pool+0x44>)
 8014de4:	480a      	ldr	r0, [pc, #40]	; (8014e10 <do_memp_free_pool+0x48>)
 8014de6:	f00b fec1 	bl	8020b6c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8014dea:	683b      	ldr	r3, [r7, #0]
 8014dec:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	689b      	ldr	r3, [r3, #8]
 8014df2:	681a      	ldr	r2, [r3, #0]
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	689b      	ldr	r3, [r3, #8]
 8014dfc:	68fa      	ldr	r2, [r7, #12]
 8014dfe:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8014e00:	bf00      	nop
 8014e02:	3710      	adds	r7, #16
 8014e04:	46bd      	mov	sp, r7
 8014e06:	bd80      	pop	{r7, pc}
 8014e08:	080268dc 	.word	0x080268dc
 8014e0c:	080269b8 	.word	0x080269b8
 8014e10:	0802695c 	.word	0x0802695c

08014e14 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8014e14:	b580      	push	{r7, lr}
 8014e16:	b082      	sub	sp, #8
 8014e18:	af00      	add	r7, sp, #0
 8014e1a:	6078      	str	r0, [r7, #4]
 8014e1c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d106      	bne.n	8014e32 <memp_free_pool+0x1e>
 8014e24:	4b0a      	ldr	r3, [pc, #40]	; (8014e50 <memp_free_pool+0x3c>)
 8014e26:	f240 1295 	movw	r2, #405	; 0x195
 8014e2a:	490a      	ldr	r1, [pc, #40]	; (8014e54 <memp_free_pool+0x40>)
 8014e2c:	480a      	ldr	r0, [pc, #40]	; (8014e58 <memp_free_pool+0x44>)
 8014e2e:	f00b fe9d 	bl	8020b6c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d007      	beq.n	8014e48 <memp_free_pool+0x34>
 8014e38:	683b      	ldr	r3, [r7, #0]
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d004      	beq.n	8014e48 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8014e3e:	6839      	ldr	r1, [r7, #0]
 8014e40:	6878      	ldr	r0, [r7, #4]
 8014e42:	f7ff ffc1 	bl	8014dc8 <do_memp_free_pool>
 8014e46:	e000      	b.n	8014e4a <memp_free_pool+0x36>
    return;
 8014e48:	bf00      	nop
}
 8014e4a:	3708      	adds	r7, #8
 8014e4c:	46bd      	mov	sp, r7
 8014e4e:	bd80      	pop	{r7, pc}
 8014e50:	080268dc 	.word	0x080268dc
 8014e54:	08026984 	.word	0x08026984
 8014e58:	0802695c 	.word	0x0802695c

08014e5c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8014e5c:	b580      	push	{r7, lr}
 8014e5e:	b082      	sub	sp, #8
 8014e60:	af00      	add	r7, sp, #0
 8014e62:	4603      	mov	r3, r0
 8014e64:	6039      	str	r1, [r7, #0]
 8014e66:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8014e68:	79fb      	ldrb	r3, [r7, #7]
 8014e6a:	2b08      	cmp	r3, #8
 8014e6c:	d907      	bls.n	8014e7e <memp_free+0x22>
 8014e6e:	4b0c      	ldr	r3, [pc, #48]	; (8014ea0 <memp_free+0x44>)
 8014e70:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8014e74:	490b      	ldr	r1, [pc, #44]	; (8014ea4 <memp_free+0x48>)
 8014e76:	480c      	ldr	r0, [pc, #48]	; (8014ea8 <memp_free+0x4c>)
 8014e78:	f00b fe78 	bl	8020b6c <iprintf>
 8014e7c:	e00c      	b.n	8014e98 <memp_free+0x3c>

  if (mem == NULL) {
 8014e7e:	683b      	ldr	r3, [r7, #0]
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d008      	beq.n	8014e96 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8014e84:	79fb      	ldrb	r3, [r7, #7]
 8014e86:	4a09      	ldr	r2, [pc, #36]	; (8014eac <memp_free+0x50>)
 8014e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014e8c:	6839      	ldr	r1, [r7, #0]
 8014e8e:	4618      	mov	r0, r3
 8014e90:	f7ff ff9a 	bl	8014dc8 <do_memp_free_pool>
 8014e94:	e000      	b.n	8014e98 <memp_free+0x3c>
    return;
 8014e96:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8014e98:	3708      	adds	r7, #8
 8014e9a:	46bd      	mov	sp, r7
 8014e9c:	bd80      	pop	{r7, pc}
 8014e9e:	bf00      	nop
 8014ea0:	080268dc 	.word	0x080268dc
 8014ea4:	080269d8 	.word	0x080269d8
 8014ea8:	0802695c 	.word	0x0802695c
 8014eac:	080291e8 	.word	0x080291e8

08014eb0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8014eb0:	b480      	push	{r7}
 8014eb2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8014eb4:	bf00      	nop
 8014eb6:	46bd      	mov	sp, r7
 8014eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ebc:	4770      	bx	lr
	...

08014ec0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8014ec0:	b580      	push	{r7, lr}
 8014ec2:	b086      	sub	sp, #24
 8014ec4:	af00      	add	r7, sp, #0
 8014ec6:	60f8      	str	r0, [r7, #12]
 8014ec8:	60b9      	str	r1, [r7, #8]
 8014eca:	607a      	str	r2, [r7, #4]
 8014ecc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8014ece:	68fb      	ldr	r3, [r7, #12]
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d108      	bne.n	8014ee6 <netif_add+0x26>
 8014ed4:	4b57      	ldr	r3, [pc, #348]	; (8015034 <netif_add+0x174>)
 8014ed6:	f240 1227 	movw	r2, #295	; 0x127
 8014eda:	4957      	ldr	r1, [pc, #348]	; (8015038 <netif_add+0x178>)
 8014edc:	4857      	ldr	r0, [pc, #348]	; (801503c <netif_add+0x17c>)
 8014ede:	f00b fe45 	bl	8020b6c <iprintf>
 8014ee2:	2300      	movs	r3, #0
 8014ee4:	e0a2      	b.n	801502c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8014ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d108      	bne.n	8014efe <netif_add+0x3e>
 8014eec:	4b51      	ldr	r3, [pc, #324]	; (8015034 <netif_add+0x174>)
 8014eee:	f44f 7294 	mov.w	r2, #296	; 0x128
 8014ef2:	4953      	ldr	r1, [pc, #332]	; (8015040 <netif_add+0x180>)
 8014ef4:	4851      	ldr	r0, [pc, #324]	; (801503c <netif_add+0x17c>)
 8014ef6:	f00b fe39 	bl	8020b6c <iprintf>
 8014efa:	2300      	movs	r3, #0
 8014efc:	e096      	b.n	801502c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8014efe:	68bb      	ldr	r3, [r7, #8]
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d101      	bne.n	8014f08 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8014f04:	4b4f      	ldr	r3, [pc, #316]	; (8015044 <netif_add+0x184>)
 8014f06:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d101      	bne.n	8014f12 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8014f0e:	4b4d      	ldr	r3, [pc, #308]	; (8015044 <netif_add+0x184>)
 8014f10:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8014f12:	683b      	ldr	r3, [r7, #0]
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d101      	bne.n	8014f1c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8014f18:	4b4a      	ldr	r3, [pc, #296]	; (8015044 <netif_add+0x184>)
 8014f1a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	2200      	movs	r2, #0
 8014f20:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8014f22:	68fb      	ldr	r3, [r7, #12]
 8014f24:	2200      	movs	r2, #0
 8014f26:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	2200      	movs	r2, #0
 8014f2c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	4a45      	ldr	r2, [pc, #276]	; (8015048 <netif_add+0x188>)
 8014f32:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	2200      	movs	r2, #0
 8014f38:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	2200      	movs	r2, #0
 8014f3e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	2200      	movs	r2, #0
 8014f46:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8014f48:	68fb      	ldr	r3, [r7, #12]
 8014f4a:	6a3a      	ldr	r2, [r7, #32]
 8014f4c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8014f4e:	4b3f      	ldr	r3, [pc, #252]	; (801504c <netif_add+0x18c>)
 8014f50:	781a      	ldrb	r2, [r3, #0]
 8014f52:	68fb      	ldr	r3, [r7, #12]
 8014f54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8014f58:	68fb      	ldr	r3, [r7, #12]
 8014f5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014f5c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8014f5e:	683b      	ldr	r3, [r7, #0]
 8014f60:	687a      	ldr	r2, [r7, #4]
 8014f62:	68b9      	ldr	r1, [r7, #8]
 8014f64:	68f8      	ldr	r0, [r7, #12]
 8014f66:	f000 f913 	bl	8015190 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8014f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f6c:	68f8      	ldr	r0, [r7, #12]
 8014f6e:	4798      	blx	r3
 8014f70:	4603      	mov	r3, r0
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d001      	beq.n	8014f7a <netif_add+0xba>
    return NULL;
 8014f76:	2300      	movs	r3, #0
 8014f78:	e058      	b.n	801502c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014f80:	2bff      	cmp	r3, #255	; 0xff
 8014f82:	d103      	bne.n	8014f8c <netif_add+0xcc>
        netif->num = 0;
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	2200      	movs	r2, #0
 8014f88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8014f8c:	2300      	movs	r3, #0
 8014f8e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8014f90:	4b2f      	ldr	r3, [pc, #188]	; (8015050 <netif_add+0x190>)
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	617b      	str	r3, [r7, #20]
 8014f96:	e02b      	b.n	8014ff0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8014f98:	697a      	ldr	r2, [r7, #20]
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	429a      	cmp	r2, r3
 8014f9e:	d106      	bne.n	8014fae <netif_add+0xee>
 8014fa0:	4b24      	ldr	r3, [pc, #144]	; (8015034 <netif_add+0x174>)
 8014fa2:	f240 128b 	movw	r2, #395	; 0x18b
 8014fa6:	492b      	ldr	r1, [pc, #172]	; (8015054 <netif_add+0x194>)
 8014fa8:	4824      	ldr	r0, [pc, #144]	; (801503c <netif_add+0x17c>)
 8014faa:	f00b fddf 	bl	8020b6c <iprintf>
        num_netifs++;
 8014fae:	693b      	ldr	r3, [r7, #16]
 8014fb0:	3301      	adds	r3, #1
 8014fb2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8014fb4:	693b      	ldr	r3, [r7, #16]
 8014fb6:	2bff      	cmp	r3, #255	; 0xff
 8014fb8:	dd06      	ble.n	8014fc8 <netif_add+0x108>
 8014fba:	4b1e      	ldr	r3, [pc, #120]	; (8015034 <netif_add+0x174>)
 8014fbc:	f240 128d 	movw	r2, #397	; 0x18d
 8014fc0:	4925      	ldr	r1, [pc, #148]	; (8015058 <netif_add+0x198>)
 8014fc2:	481e      	ldr	r0, [pc, #120]	; (801503c <netif_add+0x17c>)
 8014fc4:	f00b fdd2 	bl	8020b6c <iprintf>
        if (netif2->num == netif->num) {
 8014fc8:	697b      	ldr	r3, [r7, #20]
 8014fca:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014fd4:	429a      	cmp	r2, r3
 8014fd6:	d108      	bne.n	8014fea <netif_add+0x12a>
          netif->num++;
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014fde:	3301      	adds	r3, #1
 8014fe0:	b2da      	uxtb	r2, r3
 8014fe2:	68fb      	ldr	r3, [r7, #12]
 8014fe4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8014fe8:	e005      	b.n	8014ff6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8014fea:	697b      	ldr	r3, [r7, #20]
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	617b      	str	r3, [r7, #20]
 8014ff0:	697b      	ldr	r3, [r7, #20]
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	d1d0      	bne.n	8014f98 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8014ff6:	697b      	ldr	r3, [r7, #20]
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d1be      	bne.n	8014f7a <netif_add+0xba>
  }
  if (netif->num == 254) {
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015002:	2bfe      	cmp	r3, #254	; 0xfe
 8015004:	d103      	bne.n	801500e <netif_add+0x14e>
    netif_num = 0;
 8015006:	4b11      	ldr	r3, [pc, #68]	; (801504c <netif_add+0x18c>)
 8015008:	2200      	movs	r2, #0
 801500a:	701a      	strb	r2, [r3, #0]
 801500c:	e006      	b.n	801501c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015014:	3301      	adds	r3, #1
 8015016:	b2da      	uxtb	r2, r3
 8015018:	4b0c      	ldr	r3, [pc, #48]	; (801504c <netif_add+0x18c>)
 801501a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801501c:	4b0c      	ldr	r3, [pc, #48]	; (8015050 <netif_add+0x190>)
 801501e:	681a      	ldr	r2, [r3, #0]
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8015024:	4a0a      	ldr	r2, [pc, #40]	; (8015050 <netif_add+0x190>)
 8015026:	68fb      	ldr	r3, [r7, #12]
 8015028:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801502a:	68fb      	ldr	r3, [r7, #12]
}
 801502c:	4618      	mov	r0, r3
 801502e:	3718      	adds	r7, #24
 8015030:	46bd      	mov	sp, r7
 8015032:	bd80      	pop	{r7, pc}
 8015034:	080269f4 	.word	0x080269f4
 8015038:	08026ab0 	.word	0x08026ab0
 801503c:	08026a6c 	.word	0x08026a6c
 8015040:	08026acc 	.word	0x08026acc
 8015044:	08029178 	.word	0x08029178
 8015048:	0801546b 	.word	0x0801546b
 801504c:	240057a0 	.word	0x240057a0
 8015050:	24008e28 	.word	0x24008e28
 8015054:	08026af0 	.word	0x08026af0
 8015058:	08026b04 	.word	0x08026b04

0801505c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801505c:	b580      	push	{r7, lr}
 801505e:	b082      	sub	sp, #8
 8015060:	af00      	add	r7, sp, #0
 8015062:	6078      	str	r0, [r7, #4]
 8015064:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8015066:	6839      	ldr	r1, [r7, #0]
 8015068:	6878      	ldr	r0, [r7, #4]
 801506a:	f002 ff9b 	bl	8017fa4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801506e:	6839      	ldr	r1, [r7, #0]
 8015070:	6878      	ldr	r0, [r7, #4]
 8015072:	f007 fe19 	bl	801cca8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8015076:	bf00      	nop
 8015078:	3708      	adds	r7, #8
 801507a:	46bd      	mov	sp, r7
 801507c:	bd80      	pop	{r7, pc}
	...

08015080 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8015080:	b580      	push	{r7, lr}
 8015082:	b086      	sub	sp, #24
 8015084:	af00      	add	r7, sp, #0
 8015086:	60f8      	str	r0, [r7, #12]
 8015088:	60b9      	str	r1, [r7, #8]
 801508a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801508c:	68bb      	ldr	r3, [r7, #8]
 801508e:	2b00      	cmp	r3, #0
 8015090:	d106      	bne.n	80150a0 <netif_do_set_ipaddr+0x20>
 8015092:	4b1d      	ldr	r3, [pc, #116]	; (8015108 <netif_do_set_ipaddr+0x88>)
 8015094:	f240 12cb 	movw	r2, #459	; 0x1cb
 8015098:	491c      	ldr	r1, [pc, #112]	; (801510c <netif_do_set_ipaddr+0x8c>)
 801509a:	481d      	ldr	r0, [pc, #116]	; (8015110 <netif_do_set_ipaddr+0x90>)
 801509c:	f00b fd66 	bl	8020b6c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d106      	bne.n	80150b4 <netif_do_set_ipaddr+0x34>
 80150a6:	4b18      	ldr	r3, [pc, #96]	; (8015108 <netif_do_set_ipaddr+0x88>)
 80150a8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80150ac:	4917      	ldr	r1, [pc, #92]	; (801510c <netif_do_set_ipaddr+0x8c>)
 80150ae:	4818      	ldr	r0, [pc, #96]	; (8015110 <netif_do_set_ipaddr+0x90>)
 80150b0:	f00b fd5c 	bl	8020b6c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80150b4:	68bb      	ldr	r3, [r7, #8]
 80150b6:	681a      	ldr	r2, [r3, #0]
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	3304      	adds	r3, #4
 80150bc:	681b      	ldr	r3, [r3, #0]
 80150be:	429a      	cmp	r2, r3
 80150c0:	d01c      	beq.n	80150fc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80150c2:	68bb      	ldr	r3, [r7, #8]
 80150c4:	681b      	ldr	r3, [r3, #0]
 80150c6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	3304      	adds	r3, #4
 80150cc:	681a      	ldr	r2, [r3, #0]
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80150d2:	f107 0314 	add.w	r3, r7, #20
 80150d6:	4619      	mov	r1, r3
 80150d8:	6878      	ldr	r0, [r7, #4]
 80150da:	f7ff ffbf 	bl	801505c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80150de:	68bb      	ldr	r3, [r7, #8]
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d002      	beq.n	80150ea <netif_do_set_ipaddr+0x6a>
 80150e4:	68bb      	ldr	r3, [r7, #8]
 80150e6:	681b      	ldr	r3, [r3, #0]
 80150e8:	e000      	b.n	80150ec <netif_do_set_ipaddr+0x6c>
 80150ea:	2300      	movs	r3, #0
 80150ec:	68fa      	ldr	r2, [r7, #12]
 80150ee:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80150f0:	2101      	movs	r1, #1
 80150f2:	68f8      	ldr	r0, [r7, #12]
 80150f4:	f000 f8d2 	bl	801529c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80150f8:	2301      	movs	r3, #1
 80150fa:	e000      	b.n	80150fe <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80150fc:	2300      	movs	r3, #0
}
 80150fe:	4618      	mov	r0, r3
 8015100:	3718      	adds	r7, #24
 8015102:	46bd      	mov	sp, r7
 8015104:	bd80      	pop	{r7, pc}
 8015106:	bf00      	nop
 8015108:	080269f4 	.word	0x080269f4
 801510c:	08026b34 	.word	0x08026b34
 8015110:	08026a6c 	.word	0x08026a6c

08015114 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8015114:	b480      	push	{r7}
 8015116:	b085      	sub	sp, #20
 8015118:	af00      	add	r7, sp, #0
 801511a:	60f8      	str	r0, [r7, #12]
 801511c:	60b9      	str	r1, [r7, #8]
 801511e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8015120:	68bb      	ldr	r3, [r7, #8]
 8015122:	681a      	ldr	r2, [r3, #0]
 8015124:	68fb      	ldr	r3, [r7, #12]
 8015126:	3308      	adds	r3, #8
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	429a      	cmp	r2, r3
 801512c:	d00a      	beq.n	8015144 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801512e:	68bb      	ldr	r3, [r7, #8]
 8015130:	2b00      	cmp	r3, #0
 8015132:	d002      	beq.n	801513a <netif_do_set_netmask+0x26>
 8015134:	68bb      	ldr	r3, [r7, #8]
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	e000      	b.n	801513c <netif_do_set_netmask+0x28>
 801513a:	2300      	movs	r3, #0
 801513c:	68fa      	ldr	r2, [r7, #12]
 801513e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8015140:	2301      	movs	r3, #1
 8015142:	e000      	b.n	8015146 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8015144:	2300      	movs	r3, #0
}
 8015146:	4618      	mov	r0, r3
 8015148:	3714      	adds	r7, #20
 801514a:	46bd      	mov	sp, r7
 801514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015150:	4770      	bx	lr

08015152 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8015152:	b480      	push	{r7}
 8015154:	b085      	sub	sp, #20
 8015156:	af00      	add	r7, sp, #0
 8015158:	60f8      	str	r0, [r7, #12]
 801515a:	60b9      	str	r1, [r7, #8]
 801515c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801515e:	68bb      	ldr	r3, [r7, #8]
 8015160:	681a      	ldr	r2, [r3, #0]
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	330c      	adds	r3, #12
 8015166:	681b      	ldr	r3, [r3, #0]
 8015168:	429a      	cmp	r2, r3
 801516a:	d00a      	beq.n	8015182 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801516c:	68bb      	ldr	r3, [r7, #8]
 801516e:	2b00      	cmp	r3, #0
 8015170:	d002      	beq.n	8015178 <netif_do_set_gw+0x26>
 8015172:	68bb      	ldr	r3, [r7, #8]
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	e000      	b.n	801517a <netif_do_set_gw+0x28>
 8015178:	2300      	movs	r3, #0
 801517a:	68fa      	ldr	r2, [r7, #12]
 801517c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801517e:	2301      	movs	r3, #1
 8015180:	e000      	b.n	8015184 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8015182:	2300      	movs	r3, #0
}
 8015184:	4618      	mov	r0, r3
 8015186:	3714      	adds	r7, #20
 8015188:	46bd      	mov	sp, r7
 801518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801518e:	4770      	bx	lr

08015190 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8015190:	b580      	push	{r7, lr}
 8015192:	b088      	sub	sp, #32
 8015194:	af00      	add	r7, sp, #0
 8015196:	60f8      	str	r0, [r7, #12]
 8015198:	60b9      	str	r1, [r7, #8]
 801519a:	607a      	str	r2, [r7, #4]
 801519c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801519e:	2300      	movs	r3, #0
 80151a0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80151a2:	2300      	movs	r3, #0
 80151a4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80151a6:	68bb      	ldr	r3, [r7, #8]
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d101      	bne.n	80151b0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80151ac:	4b1c      	ldr	r3, [pc, #112]	; (8015220 <netif_set_addr+0x90>)
 80151ae:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d101      	bne.n	80151ba <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80151b6:	4b1a      	ldr	r3, [pc, #104]	; (8015220 <netif_set_addr+0x90>)
 80151b8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80151ba:	683b      	ldr	r3, [r7, #0]
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d101      	bne.n	80151c4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80151c0:	4b17      	ldr	r3, [pc, #92]	; (8015220 <netif_set_addr+0x90>)
 80151c2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80151c4:	68bb      	ldr	r3, [r7, #8]
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d003      	beq.n	80151d2 <netif_set_addr+0x42>
 80151ca:	68bb      	ldr	r3, [r7, #8]
 80151cc:	681b      	ldr	r3, [r3, #0]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d101      	bne.n	80151d6 <netif_set_addr+0x46>
 80151d2:	2301      	movs	r3, #1
 80151d4:	e000      	b.n	80151d8 <netif_set_addr+0x48>
 80151d6:	2300      	movs	r3, #0
 80151d8:	617b      	str	r3, [r7, #20]
  if (remove) {
 80151da:	697b      	ldr	r3, [r7, #20]
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d006      	beq.n	80151ee <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80151e0:	f107 0310 	add.w	r3, r7, #16
 80151e4:	461a      	mov	r2, r3
 80151e6:	68b9      	ldr	r1, [r7, #8]
 80151e8:	68f8      	ldr	r0, [r7, #12]
 80151ea:	f7ff ff49 	bl	8015080 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80151ee:	69fa      	ldr	r2, [r7, #28]
 80151f0:	6879      	ldr	r1, [r7, #4]
 80151f2:	68f8      	ldr	r0, [r7, #12]
 80151f4:	f7ff ff8e 	bl	8015114 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80151f8:	69ba      	ldr	r2, [r7, #24]
 80151fa:	6839      	ldr	r1, [r7, #0]
 80151fc:	68f8      	ldr	r0, [r7, #12]
 80151fe:	f7ff ffa8 	bl	8015152 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8015202:	697b      	ldr	r3, [r7, #20]
 8015204:	2b00      	cmp	r3, #0
 8015206:	d106      	bne.n	8015216 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8015208:	f107 0310 	add.w	r3, r7, #16
 801520c:	461a      	mov	r2, r3
 801520e:	68b9      	ldr	r1, [r7, #8]
 8015210:	68f8      	ldr	r0, [r7, #12]
 8015212:	f7ff ff35 	bl	8015080 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8015216:	bf00      	nop
 8015218:	3720      	adds	r7, #32
 801521a:	46bd      	mov	sp, r7
 801521c:	bd80      	pop	{r7, pc}
 801521e:	bf00      	nop
 8015220:	08029178 	.word	0x08029178

08015224 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8015224:	b480      	push	{r7}
 8015226:	b083      	sub	sp, #12
 8015228:	af00      	add	r7, sp, #0
 801522a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 801522c:	4a04      	ldr	r2, [pc, #16]	; (8015240 <netif_set_default+0x1c>)
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8015232:	bf00      	nop
 8015234:	370c      	adds	r7, #12
 8015236:	46bd      	mov	sp, r7
 8015238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801523c:	4770      	bx	lr
 801523e:	bf00      	nop
 8015240:	24008e2c 	.word	0x24008e2c

08015244 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8015244:	b580      	push	{r7, lr}
 8015246:	b082      	sub	sp, #8
 8015248:	af00      	add	r7, sp, #0
 801524a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	2b00      	cmp	r3, #0
 8015250:	d107      	bne.n	8015262 <netif_set_up+0x1e>
 8015252:	4b0f      	ldr	r3, [pc, #60]	; (8015290 <netif_set_up+0x4c>)
 8015254:	f44f 7254 	mov.w	r2, #848	; 0x350
 8015258:	490e      	ldr	r1, [pc, #56]	; (8015294 <netif_set_up+0x50>)
 801525a:	480f      	ldr	r0, [pc, #60]	; (8015298 <netif_set_up+0x54>)
 801525c:	f00b fc86 	bl	8020b6c <iprintf>
 8015260:	e013      	b.n	801528a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015268:	f003 0301 	and.w	r3, r3, #1
 801526c:	2b00      	cmp	r3, #0
 801526e:	d10c      	bne.n	801528a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015276:	f043 0301 	orr.w	r3, r3, #1
 801527a:	b2da      	uxtb	r2, r3
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8015282:	2103      	movs	r1, #3
 8015284:	6878      	ldr	r0, [r7, #4]
 8015286:	f000 f809 	bl	801529c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801528a:	3708      	adds	r7, #8
 801528c:	46bd      	mov	sp, r7
 801528e:	bd80      	pop	{r7, pc}
 8015290:	080269f4 	.word	0x080269f4
 8015294:	08026ba4 	.word	0x08026ba4
 8015298:	08026a6c 	.word	0x08026a6c

0801529c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 801529c:	b580      	push	{r7, lr}
 801529e:	b082      	sub	sp, #8
 80152a0:	af00      	add	r7, sp, #0
 80152a2:	6078      	str	r0, [r7, #4]
 80152a4:	460b      	mov	r3, r1
 80152a6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d106      	bne.n	80152bc <netif_issue_reports+0x20>
 80152ae:	4b18      	ldr	r3, [pc, #96]	; (8015310 <netif_issue_reports+0x74>)
 80152b0:	f240 326d 	movw	r2, #877	; 0x36d
 80152b4:	4917      	ldr	r1, [pc, #92]	; (8015314 <netif_issue_reports+0x78>)
 80152b6:	4818      	ldr	r0, [pc, #96]	; (8015318 <netif_issue_reports+0x7c>)
 80152b8:	f00b fc58 	bl	8020b6c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80152c2:	f003 0304 	and.w	r3, r3, #4
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d01e      	beq.n	8015308 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80152d0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d017      	beq.n	8015308 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80152d8:	78fb      	ldrb	r3, [r7, #3]
 80152da:	f003 0301 	and.w	r3, r3, #1
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d013      	beq.n	801530a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	3304      	adds	r3, #4
 80152e6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d00e      	beq.n	801530a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80152f2:	f003 0308 	and.w	r3, r3, #8
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d007      	beq.n	801530a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	3304      	adds	r3, #4
 80152fe:	4619      	mov	r1, r3
 8015300:	6878      	ldr	r0, [r7, #4]
 8015302:	f7fd fc8d 	bl	8012c20 <etharp_request>
 8015306:	e000      	b.n	801530a <netif_issue_reports+0x6e>
    return;
 8015308:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801530a:	3708      	adds	r7, #8
 801530c:	46bd      	mov	sp, r7
 801530e:	bd80      	pop	{r7, pc}
 8015310:	080269f4 	.word	0x080269f4
 8015314:	08026bc0 	.word	0x08026bc0
 8015318:	08026a6c 	.word	0x08026a6c

0801531c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801531c:	b580      	push	{r7, lr}
 801531e:	b082      	sub	sp, #8
 8015320:	af00      	add	r7, sp, #0
 8015322:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	2b00      	cmp	r3, #0
 8015328:	d107      	bne.n	801533a <netif_set_down+0x1e>
 801532a:	4b12      	ldr	r3, [pc, #72]	; (8015374 <netif_set_down+0x58>)
 801532c:	f240 329b 	movw	r2, #923	; 0x39b
 8015330:	4911      	ldr	r1, [pc, #68]	; (8015378 <netif_set_down+0x5c>)
 8015332:	4812      	ldr	r0, [pc, #72]	; (801537c <netif_set_down+0x60>)
 8015334:	f00b fc1a 	bl	8020b6c <iprintf>
 8015338:	e019      	b.n	801536e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015340:	f003 0301 	and.w	r3, r3, #1
 8015344:	2b00      	cmp	r3, #0
 8015346:	d012      	beq.n	801536e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801534e:	f023 0301 	bic.w	r3, r3, #1
 8015352:	b2da      	uxtb	r2, r3
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015360:	f003 0308 	and.w	r3, r3, #8
 8015364:	2b00      	cmp	r3, #0
 8015366:	d002      	beq.n	801536e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8015368:	6878      	ldr	r0, [r7, #4]
 801536a:	f7fd f817 	bl	801239c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801536e:	3708      	adds	r7, #8
 8015370:	46bd      	mov	sp, r7
 8015372:	bd80      	pop	{r7, pc}
 8015374:	080269f4 	.word	0x080269f4
 8015378:	08026be4 	.word	0x08026be4
 801537c:	08026a6c 	.word	0x08026a6c

08015380 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8015380:	b580      	push	{r7, lr}
 8015382:	b082      	sub	sp, #8
 8015384:	af00      	add	r7, sp, #0
 8015386:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	2b00      	cmp	r3, #0
 801538c:	d107      	bne.n	801539e <netif_set_link_up+0x1e>
 801538e:	4b13      	ldr	r3, [pc, #76]	; (80153dc <netif_set_link_up+0x5c>)
 8015390:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8015394:	4912      	ldr	r1, [pc, #72]	; (80153e0 <netif_set_link_up+0x60>)
 8015396:	4813      	ldr	r0, [pc, #76]	; (80153e4 <netif_set_link_up+0x64>)
 8015398:	f00b fbe8 	bl	8020b6c <iprintf>
 801539c:	e01b      	b.n	80153d6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80153a4:	f003 0304 	and.w	r3, r3, #4
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d114      	bne.n	80153d6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80153b2:	f043 0304 	orr.w	r3, r3, #4
 80153b6:	b2da      	uxtb	r2, r3
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80153be:	2103      	movs	r1, #3
 80153c0:	6878      	ldr	r0, [r7, #4]
 80153c2:	f7ff ff6b 	bl	801529c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	69db      	ldr	r3, [r3, #28]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d003      	beq.n	80153d6 <netif_set_link_up+0x56>
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	69db      	ldr	r3, [r3, #28]
 80153d2:	6878      	ldr	r0, [r7, #4]
 80153d4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80153d6:	3708      	adds	r7, #8
 80153d8:	46bd      	mov	sp, r7
 80153da:	bd80      	pop	{r7, pc}
 80153dc:	080269f4 	.word	0x080269f4
 80153e0:	08026c04 	.word	0x08026c04
 80153e4:	08026a6c 	.word	0x08026a6c

080153e8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80153e8:	b580      	push	{r7, lr}
 80153ea:	b082      	sub	sp, #8
 80153ec:	af00      	add	r7, sp, #0
 80153ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d107      	bne.n	8015406 <netif_set_link_down+0x1e>
 80153f6:	4b11      	ldr	r3, [pc, #68]	; (801543c <netif_set_link_down+0x54>)
 80153f8:	f240 4206 	movw	r2, #1030	; 0x406
 80153fc:	4910      	ldr	r1, [pc, #64]	; (8015440 <netif_set_link_down+0x58>)
 80153fe:	4811      	ldr	r0, [pc, #68]	; (8015444 <netif_set_link_down+0x5c>)
 8015400:	f00b fbb4 	bl	8020b6c <iprintf>
 8015404:	e017      	b.n	8015436 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801540c:	f003 0304 	and.w	r3, r3, #4
 8015410:	2b00      	cmp	r3, #0
 8015412:	d010      	beq.n	8015436 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801541a:	f023 0304 	bic.w	r3, r3, #4
 801541e:	b2da      	uxtb	r2, r3
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	69db      	ldr	r3, [r3, #28]
 801542a:	2b00      	cmp	r3, #0
 801542c:	d003      	beq.n	8015436 <netif_set_link_down+0x4e>
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	69db      	ldr	r3, [r3, #28]
 8015432:	6878      	ldr	r0, [r7, #4]
 8015434:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8015436:	3708      	adds	r7, #8
 8015438:	46bd      	mov	sp, r7
 801543a:	bd80      	pop	{r7, pc}
 801543c:	080269f4 	.word	0x080269f4
 8015440:	08026c28 	.word	0x08026c28
 8015444:	08026a6c 	.word	0x08026a6c

08015448 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8015448:	b480      	push	{r7}
 801544a:	b083      	sub	sp, #12
 801544c:	af00      	add	r7, sp, #0
 801544e:	6078      	str	r0, [r7, #4]
 8015450:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	2b00      	cmp	r3, #0
 8015456:	d002      	beq.n	801545e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	683a      	ldr	r2, [r7, #0]
 801545c:	61da      	str	r2, [r3, #28]
  }
}
 801545e:	bf00      	nop
 8015460:	370c      	adds	r7, #12
 8015462:	46bd      	mov	sp, r7
 8015464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015468:	4770      	bx	lr

0801546a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801546a:	b480      	push	{r7}
 801546c:	b085      	sub	sp, #20
 801546e:	af00      	add	r7, sp, #0
 8015470:	60f8      	str	r0, [r7, #12]
 8015472:	60b9      	str	r1, [r7, #8]
 8015474:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8015476:	f06f 030b 	mvn.w	r3, #11
}
 801547a:	4618      	mov	r0, r3
 801547c:	3714      	adds	r7, #20
 801547e:	46bd      	mov	sp, r7
 8015480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015484:	4770      	bx	lr
	...

08015488 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8015488:	b480      	push	{r7}
 801548a:	b085      	sub	sp, #20
 801548c:	af00      	add	r7, sp, #0
 801548e:	4603      	mov	r3, r0
 8015490:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8015492:	79fb      	ldrb	r3, [r7, #7]
 8015494:	2b00      	cmp	r3, #0
 8015496:	d013      	beq.n	80154c0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8015498:	4b0d      	ldr	r3, [pc, #52]	; (80154d0 <netif_get_by_index+0x48>)
 801549a:	681b      	ldr	r3, [r3, #0]
 801549c:	60fb      	str	r3, [r7, #12]
 801549e:	e00c      	b.n	80154ba <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80154a6:	3301      	adds	r3, #1
 80154a8:	b2db      	uxtb	r3, r3
 80154aa:	79fa      	ldrb	r2, [r7, #7]
 80154ac:	429a      	cmp	r2, r3
 80154ae:	d101      	bne.n	80154b4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80154b0:	68fb      	ldr	r3, [r7, #12]
 80154b2:	e006      	b.n	80154c2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80154b4:	68fb      	ldr	r3, [r7, #12]
 80154b6:	681b      	ldr	r3, [r3, #0]
 80154b8:	60fb      	str	r3, [r7, #12]
 80154ba:	68fb      	ldr	r3, [r7, #12]
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d1ef      	bne.n	80154a0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80154c0:	2300      	movs	r3, #0
}
 80154c2:	4618      	mov	r0, r3
 80154c4:	3714      	adds	r7, #20
 80154c6:	46bd      	mov	sp, r7
 80154c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154cc:	4770      	bx	lr
 80154ce:	bf00      	nop
 80154d0:	24008e28 	.word	0x24008e28

080154d4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80154d4:	b580      	push	{r7, lr}
 80154d6:	b082      	sub	sp, #8
 80154d8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80154da:	4b0c      	ldr	r3, [pc, #48]	; (801550c <pbuf_free_ooseq+0x38>)
 80154dc:	2200      	movs	r2, #0
 80154de:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80154e0:	4b0b      	ldr	r3, [pc, #44]	; (8015510 <pbuf_free_ooseq+0x3c>)
 80154e2:	681b      	ldr	r3, [r3, #0]
 80154e4:	607b      	str	r3, [r7, #4]
 80154e6:	e00a      	b.n	80154fe <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d003      	beq.n	80154f8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80154f0:	6878      	ldr	r0, [r7, #4]
 80154f2:	f002 fd95 	bl	8018020 <tcp_free_ooseq>
      return;
 80154f6:	e005      	b.n	8015504 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	68db      	ldr	r3, [r3, #12]
 80154fc:	607b      	str	r3, [r7, #4]
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	2b00      	cmp	r3, #0
 8015502:	d1f1      	bne.n	80154e8 <pbuf_free_ooseq+0x14>
    }
  }
}
 8015504:	3708      	adds	r7, #8
 8015506:	46bd      	mov	sp, r7
 8015508:	bd80      	pop	{r7, pc}
 801550a:	bf00      	nop
 801550c:	24008e30 	.word	0x24008e30
 8015510:	24008e38 	.word	0x24008e38

08015514 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8015514:	b480      	push	{r7}
 8015516:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8015518:	4b03      	ldr	r3, [pc, #12]	; (8015528 <pbuf_pool_is_empty+0x14>)
 801551a:	2201      	movs	r2, #1
 801551c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801551e:	bf00      	nop
 8015520:	46bd      	mov	sp, r7
 8015522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015526:	4770      	bx	lr
 8015528:	24008e30 	.word	0x24008e30

0801552c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801552c:	b480      	push	{r7}
 801552e:	b085      	sub	sp, #20
 8015530:	af00      	add	r7, sp, #0
 8015532:	60f8      	str	r0, [r7, #12]
 8015534:	60b9      	str	r1, [r7, #8]
 8015536:	4611      	mov	r1, r2
 8015538:	461a      	mov	r2, r3
 801553a:	460b      	mov	r3, r1
 801553c:	80fb      	strh	r3, [r7, #6]
 801553e:	4613      	mov	r3, r2
 8015540:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8015542:	68fb      	ldr	r3, [r7, #12]
 8015544:	2200      	movs	r2, #0
 8015546:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8015548:	68fb      	ldr	r3, [r7, #12]
 801554a:	68ba      	ldr	r2, [r7, #8]
 801554c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801554e:	68fb      	ldr	r3, [r7, #12]
 8015550:	88fa      	ldrh	r2, [r7, #6]
 8015552:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8015554:	68fb      	ldr	r3, [r7, #12]
 8015556:	88ba      	ldrh	r2, [r7, #4]
 8015558:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801555a:	8b3b      	ldrh	r3, [r7, #24]
 801555c:	b2da      	uxtb	r2, r3
 801555e:	68fb      	ldr	r3, [r7, #12]
 8015560:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8015562:	68fb      	ldr	r3, [r7, #12]
 8015564:	7f3a      	ldrb	r2, [r7, #28]
 8015566:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8015568:	68fb      	ldr	r3, [r7, #12]
 801556a:	2201      	movs	r2, #1
 801556c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	2200      	movs	r2, #0
 8015572:	73da      	strb	r2, [r3, #15]
}
 8015574:	bf00      	nop
 8015576:	3714      	adds	r7, #20
 8015578:	46bd      	mov	sp, r7
 801557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801557e:	4770      	bx	lr

08015580 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8015580:	b580      	push	{r7, lr}
 8015582:	b08c      	sub	sp, #48	; 0x30
 8015584:	af02      	add	r7, sp, #8
 8015586:	4603      	mov	r3, r0
 8015588:	71fb      	strb	r3, [r7, #7]
 801558a:	460b      	mov	r3, r1
 801558c:	80bb      	strh	r3, [r7, #4]
 801558e:	4613      	mov	r3, r2
 8015590:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8015592:	79fb      	ldrb	r3, [r7, #7]
 8015594:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8015596:	887b      	ldrh	r3, [r7, #2]
 8015598:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801559c:	d07f      	beq.n	801569e <pbuf_alloc+0x11e>
 801559e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80155a2:	f300 80c8 	bgt.w	8015736 <pbuf_alloc+0x1b6>
 80155a6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80155aa:	d010      	beq.n	80155ce <pbuf_alloc+0x4e>
 80155ac:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80155b0:	f300 80c1 	bgt.w	8015736 <pbuf_alloc+0x1b6>
 80155b4:	2b01      	cmp	r3, #1
 80155b6:	d002      	beq.n	80155be <pbuf_alloc+0x3e>
 80155b8:	2b41      	cmp	r3, #65	; 0x41
 80155ba:	f040 80bc 	bne.w	8015736 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80155be:	887a      	ldrh	r2, [r7, #2]
 80155c0:	88bb      	ldrh	r3, [r7, #4]
 80155c2:	4619      	mov	r1, r3
 80155c4:	2000      	movs	r0, #0
 80155c6:	f000 f8d1 	bl	801576c <pbuf_alloc_reference>
 80155ca:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80155cc:	e0bd      	b.n	801574a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80155ce:	2300      	movs	r3, #0
 80155d0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80155d2:	2300      	movs	r3, #0
 80155d4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80155d6:	88bb      	ldrh	r3, [r7, #4]
 80155d8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80155da:	2008      	movs	r0, #8
 80155dc:	f7ff fbce 	bl	8014d7c <memp_malloc>
 80155e0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80155e2:	693b      	ldr	r3, [r7, #16]
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d109      	bne.n	80155fc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80155e8:	f7ff ff94 	bl	8015514 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80155ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d002      	beq.n	80155f8 <pbuf_alloc+0x78>
            pbuf_free(p);
 80155f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80155f4:	f000 faa8 	bl	8015b48 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80155f8:	2300      	movs	r3, #0
 80155fa:	e0a7      	b.n	801574c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80155fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80155fe:	3303      	adds	r3, #3
 8015600:	b29b      	uxth	r3, r3
 8015602:	f023 0303 	bic.w	r3, r3, #3
 8015606:	b29b      	uxth	r3, r3
 8015608:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 801560c:	b29b      	uxth	r3, r3
 801560e:	8b7a      	ldrh	r2, [r7, #26]
 8015610:	4293      	cmp	r3, r2
 8015612:	bf28      	it	cs
 8015614:	4613      	movcs	r3, r2
 8015616:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8015618:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801561a:	3310      	adds	r3, #16
 801561c:	693a      	ldr	r2, [r7, #16]
 801561e:	4413      	add	r3, r2
 8015620:	3303      	adds	r3, #3
 8015622:	f023 0303 	bic.w	r3, r3, #3
 8015626:	4618      	mov	r0, r3
 8015628:	89f9      	ldrh	r1, [r7, #14]
 801562a:	8b7a      	ldrh	r2, [r7, #26]
 801562c:	2300      	movs	r3, #0
 801562e:	9301      	str	r3, [sp, #4]
 8015630:	887b      	ldrh	r3, [r7, #2]
 8015632:	9300      	str	r3, [sp, #0]
 8015634:	460b      	mov	r3, r1
 8015636:	4601      	mov	r1, r0
 8015638:	6938      	ldr	r0, [r7, #16]
 801563a:	f7ff ff77 	bl	801552c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801563e:	693b      	ldr	r3, [r7, #16]
 8015640:	685b      	ldr	r3, [r3, #4]
 8015642:	f003 0303 	and.w	r3, r3, #3
 8015646:	2b00      	cmp	r3, #0
 8015648:	d006      	beq.n	8015658 <pbuf_alloc+0xd8>
 801564a:	4b42      	ldr	r3, [pc, #264]	; (8015754 <pbuf_alloc+0x1d4>)
 801564c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015650:	4941      	ldr	r1, [pc, #260]	; (8015758 <pbuf_alloc+0x1d8>)
 8015652:	4842      	ldr	r0, [pc, #264]	; (801575c <pbuf_alloc+0x1dc>)
 8015654:	f00b fa8a 	bl	8020b6c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8015658:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801565a:	3303      	adds	r3, #3
 801565c:	f023 0303 	bic.w	r3, r3, #3
 8015660:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8015664:	d106      	bne.n	8015674 <pbuf_alloc+0xf4>
 8015666:	4b3b      	ldr	r3, [pc, #236]	; (8015754 <pbuf_alloc+0x1d4>)
 8015668:	f44f 7281 	mov.w	r2, #258	; 0x102
 801566c:	493c      	ldr	r1, [pc, #240]	; (8015760 <pbuf_alloc+0x1e0>)
 801566e:	483b      	ldr	r0, [pc, #236]	; (801575c <pbuf_alloc+0x1dc>)
 8015670:	f00b fa7c 	bl	8020b6c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8015674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015676:	2b00      	cmp	r3, #0
 8015678:	d102      	bne.n	8015680 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801567a:	693b      	ldr	r3, [r7, #16]
 801567c:	627b      	str	r3, [r7, #36]	; 0x24
 801567e:	e002      	b.n	8015686 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8015680:	69fb      	ldr	r3, [r7, #28]
 8015682:	693a      	ldr	r2, [r7, #16]
 8015684:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8015686:	693b      	ldr	r3, [r7, #16]
 8015688:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801568a:	8b7a      	ldrh	r2, [r7, #26]
 801568c:	89fb      	ldrh	r3, [r7, #14]
 801568e:	1ad3      	subs	r3, r2, r3
 8015690:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8015692:	2300      	movs	r3, #0
 8015694:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8015696:	8b7b      	ldrh	r3, [r7, #26]
 8015698:	2b00      	cmp	r3, #0
 801569a:	d19e      	bne.n	80155da <pbuf_alloc+0x5a>
      break;
 801569c:	e055      	b.n	801574a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801569e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80156a0:	3303      	adds	r3, #3
 80156a2:	b29b      	uxth	r3, r3
 80156a4:	f023 0303 	bic.w	r3, r3, #3
 80156a8:	b29a      	uxth	r2, r3
 80156aa:	88bb      	ldrh	r3, [r7, #4]
 80156ac:	3303      	adds	r3, #3
 80156ae:	b29b      	uxth	r3, r3
 80156b0:	f023 0303 	bic.w	r3, r3, #3
 80156b4:	b29b      	uxth	r3, r3
 80156b6:	4413      	add	r3, r2
 80156b8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80156ba:	8b3b      	ldrh	r3, [r7, #24]
 80156bc:	3310      	adds	r3, #16
 80156be:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80156c0:	8b3a      	ldrh	r2, [r7, #24]
 80156c2:	88bb      	ldrh	r3, [r7, #4]
 80156c4:	3303      	adds	r3, #3
 80156c6:	f023 0303 	bic.w	r3, r3, #3
 80156ca:	429a      	cmp	r2, r3
 80156cc:	d306      	bcc.n	80156dc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80156ce:	8afa      	ldrh	r2, [r7, #22]
 80156d0:	88bb      	ldrh	r3, [r7, #4]
 80156d2:	3303      	adds	r3, #3
 80156d4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80156d8:	429a      	cmp	r2, r3
 80156da:	d201      	bcs.n	80156e0 <pbuf_alloc+0x160>
        return NULL;
 80156dc:	2300      	movs	r3, #0
 80156de:	e035      	b.n	801574c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80156e0:	8afb      	ldrh	r3, [r7, #22]
 80156e2:	4618      	mov	r0, r3
 80156e4:	f7ff f9ba 	bl	8014a5c <mem_malloc>
 80156e8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80156ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d101      	bne.n	80156f4 <pbuf_alloc+0x174>
        return NULL;
 80156f0:	2300      	movs	r3, #0
 80156f2:	e02b      	b.n	801574c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80156f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80156f6:	3310      	adds	r3, #16
 80156f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80156fa:	4413      	add	r3, r2
 80156fc:	3303      	adds	r3, #3
 80156fe:	f023 0303 	bic.w	r3, r3, #3
 8015702:	4618      	mov	r0, r3
 8015704:	88b9      	ldrh	r1, [r7, #4]
 8015706:	88ba      	ldrh	r2, [r7, #4]
 8015708:	2300      	movs	r3, #0
 801570a:	9301      	str	r3, [sp, #4]
 801570c:	887b      	ldrh	r3, [r7, #2]
 801570e:	9300      	str	r3, [sp, #0]
 8015710:	460b      	mov	r3, r1
 8015712:	4601      	mov	r1, r0
 8015714:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015716:	f7ff ff09 	bl	801552c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801571c:	685b      	ldr	r3, [r3, #4]
 801571e:	f003 0303 	and.w	r3, r3, #3
 8015722:	2b00      	cmp	r3, #0
 8015724:	d010      	beq.n	8015748 <pbuf_alloc+0x1c8>
 8015726:	4b0b      	ldr	r3, [pc, #44]	; (8015754 <pbuf_alloc+0x1d4>)
 8015728:	f44f 7291 	mov.w	r2, #290	; 0x122
 801572c:	490d      	ldr	r1, [pc, #52]	; (8015764 <pbuf_alloc+0x1e4>)
 801572e:	480b      	ldr	r0, [pc, #44]	; (801575c <pbuf_alloc+0x1dc>)
 8015730:	f00b fa1c 	bl	8020b6c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8015734:	e008      	b.n	8015748 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8015736:	4b07      	ldr	r3, [pc, #28]	; (8015754 <pbuf_alloc+0x1d4>)
 8015738:	f240 1227 	movw	r2, #295	; 0x127
 801573c:	490a      	ldr	r1, [pc, #40]	; (8015768 <pbuf_alloc+0x1e8>)
 801573e:	4807      	ldr	r0, [pc, #28]	; (801575c <pbuf_alloc+0x1dc>)
 8015740:	f00b fa14 	bl	8020b6c <iprintf>
      return NULL;
 8015744:	2300      	movs	r3, #0
 8015746:	e001      	b.n	801574c <pbuf_alloc+0x1cc>
      break;
 8015748:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801574c:	4618      	mov	r0, r3
 801574e:	3728      	adds	r7, #40	; 0x28
 8015750:	46bd      	mov	sp, r7
 8015752:	bd80      	pop	{r7, pc}
 8015754:	08026c4c 	.word	0x08026c4c
 8015758:	08026ca8 	.word	0x08026ca8
 801575c:	08026cd8 	.word	0x08026cd8
 8015760:	08026d00 	.word	0x08026d00
 8015764:	08026d34 	.word	0x08026d34
 8015768:	08026d60 	.word	0x08026d60

0801576c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801576c:	b580      	push	{r7, lr}
 801576e:	b086      	sub	sp, #24
 8015770:	af02      	add	r7, sp, #8
 8015772:	6078      	str	r0, [r7, #4]
 8015774:	460b      	mov	r3, r1
 8015776:	807b      	strh	r3, [r7, #2]
 8015778:	4613      	mov	r3, r2
 801577a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801577c:	883b      	ldrh	r3, [r7, #0]
 801577e:	2b41      	cmp	r3, #65	; 0x41
 8015780:	d009      	beq.n	8015796 <pbuf_alloc_reference+0x2a>
 8015782:	883b      	ldrh	r3, [r7, #0]
 8015784:	2b01      	cmp	r3, #1
 8015786:	d006      	beq.n	8015796 <pbuf_alloc_reference+0x2a>
 8015788:	4b0f      	ldr	r3, [pc, #60]	; (80157c8 <pbuf_alloc_reference+0x5c>)
 801578a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801578e:	490f      	ldr	r1, [pc, #60]	; (80157cc <pbuf_alloc_reference+0x60>)
 8015790:	480f      	ldr	r0, [pc, #60]	; (80157d0 <pbuf_alloc_reference+0x64>)
 8015792:	f00b f9eb 	bl	8020b6c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8015796:	2007      	movs	r0, #7
 8015798:	f7ff faf0 	bl	8014d7c <memp_malloc>
 801579c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d101      	bne.n	80157a8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80157a4:	2300      	movs	r3, #0
 80157a6:	e00b      	b.n	80157c0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80157a8:	8879      	ldrh	r1, [r7, #2]
 80157aa:	887a      	ldrh	r2, [r7, #2]
 80157ac:	2300      	movs	r3, #0
 80157ae:	9301      	str	r3, [sp, #4]
 80157b0:	883b      	ldrh	r3, [r7, #0]
 80157b2:	9300      	str	r3, [sp, #0]
 80157b4:	460b      	mov	r3, r1
 80157b6:	6879      	ldr	r1, [r7, #4]
 80157b8:	68f8      	ldr	r0, [r7, #12]
 80157ba:	f7ff feb7 	bl	801552c <pbuf_init_alloced_pbuf>
  return p;
 80157be:	68fb      	ldr	r3, [r7, #12]
}
 80157c0:	4618      	mov	r0, r3
 80157c2:	3710      	adds	r7, #16
 80157c4:	46bd      	mov	sp, r7
 80157c6:	bd80      	pop	{r7, pc}
 80157c8:	08026c4c 	.word	0x08026c4c
 80157cc:	08026d7c 	.word	0x08026d7c
 80157d0:	08026cd8 	.word	0x08026cd8

080157d4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80157d4:	b580      	push	{r7, lr}
 80157d6:	b088      	sub	sp, #32
 80157d8:	af02      	add	r7, sp, #8
 80157da:	607b      	str	r3, [r7, #4]
 80157dc:	4603      	mov	r3, r0
 80157de:	73fb      	strb	r3, [r7, #15]
 80157e0:	460b      	mov	r3, r1
 80157e2:	81bb      	strh	r3, [r7, #12]
 80157e4:	4613      	mov	r3, r2
 80157e6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80157e8:	7bfb      	ldrb	r3, [r7, #15]
 80157ea:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80157ec:	8a7b      	ldrh	r3, [r7, #18]
 80157ee:	3303      	adds	r3, #3
 80157f0:	f023 0203 	bic.w	r2, r3, #3
 80157f4:	89bb      	ldrh	r3, [r7, #12]
 80157f6:	441a      	add	r2, r3
 80157f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80157fa:	429a      	cmp	r2, r3
 80157fc:	d901      	bls.n	8015802 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80157fe:	2300      	movs	r3, #0
 8015800:	e018      	b.n	8015834 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8015802:	6a3b      	ldr	r3, [r7, #32]
 8015804:	2b00      	cmp	r3, #0
 8015806:	d007      	beq.n	8015818 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8015808:	8a7b      	ldrh	r3, [r7, #18]
 801580a:	3303      	adds	r3, #3
 801580c:	f023 0303 	bic.w	r3, r3, #3
 8015810:	6a3a      	ldr	r2, [r7, #32]
 8015812:	4413      	add	r3, r2
 8015814:	617b      	str	r3, [r7, #20]
 8015816:	e001      	b.n	801581c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8015818:	2300      	movs	r3, #0
 801581a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801581c:	6878      	ldr	r0, [r7, #4]
 801581e:	89b9      	ldrh	r1, [r7, #12]
 8015820:	89ba      	ldrh	r2, [r7, #12]
 8015822:	2302      	movs	r3, #2
 8015824:	9301      	str	r3, [sp, #4]
 8015826:	897b      	ldrh	r3, [r7, #10]
 8015828:	9300      	str	r3, [sp, #0]
 801582a:	460b      	mov	r3, r1
 801582c:	6979      	ldr	r1, [r7, #20]
 801582e:	f7ff fe7d 	bl	801552c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8015832:	687b      	ldr	r3, [r7, #4]
}
 8015834:	4618      	mov	r0, r3
 8015836:	3718      	adds	r7, #24
 8015838:	46bd      	mov	sp, r7
 801583a:	bd80      	pop	{r7, pc}

0801583c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801583c:	b580      	push	{r7, lr}
 801583e:	b084      	sub	sp, #16
 8015840:	af00      	add	r7, sp, #0
 8015842:	6078      	str	r0, [r7, #4]
 8015844:	460b      	mov	r3, r1
 8015846:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	2b00      	cmp	r3, #0
 801584c:	d106      	bne.n	801585c <pbuf_realloc+0x20>
 801584e:	4b3a      	ldr	r3, [pc, #232]	; (8015938 <pbuf_realloc+0xfc>)
 8015850:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8015854:	4939      	ldr	r1, [pc, #228]	; (801593c <pbuf_realloc+0x100>)
 8015856:	483a      	ldr	r0, [pc, #232]	; (8015940 <pbuf_realloc+0x104>)
 8015858:	f00b f988 	bl	8020b6c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	891b      	ldrh	r3, [r3, #8]
 8015860:	887a      	ldrh	r2, [r7, #2]
 8015862:	429a      	cmp	r2, r3
 8015864:	d263      	bcs.n	801592e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	891a      	ldrh	r2, [r3, #8]
 801586a:	887b      	ldrh	r3, [r7, #2]
 801586c:	1ad3      	subs	r3, r2, r3
 801586e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8015870:	887b      	ldrh	r3, [r7, #2]
 8015872:	817b      	strh	r3, [r7, #10]
  q = p;
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8015878:	e018      	b.n	80158ac <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	895b      	ldrh	r3, [r3, #10]
 801587e:	897a      	ldrh	r2, [r7, #10]
 8015880:	1ad3      	subs	r3, r2, r3
 8015882:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	891a      	ldrh	r2, [r3, #8]
 8015888:	893b      	ldrh	r3, [r7, #8]
 801588a:	1ad3      	subs	r3, r2, r3
 801588c:	b29a      	uxth	r2, r3
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	2b00      	cmp	r3, #0
 801589c:	d106      	bne.n	80158ac <pbuf_realloc+0x70>
 801589e:	4b26      	ldr	r3, [pc, #152]	; (8015938 <pbuf_realloc+0xfc>)
 80158a0:	f240 12af 	movw	r2, #431	; 0x1af
 80158a4:	4927      	ldr	r1, [pc, #156]	; (8015944 <pbuf_realloc+0x108>)
 80158a6:	4826      	ldr	r0, [pc, #152]	; (8015940 <pbuf_realloc+0x104>)
 80158a8:	f00b f960 	bl	8020b6c <iprintf>
  while (rem_len > q->len) {
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	895b      	ldrh	r3, [r3, #10]
 80158b0:	897a      	ldrh	r2, [r7, #10]
 80158b2:	429a      	cmp	r2, r3
 80158b4:	d8e1      	bhi.n	801587a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	7b1b      	ldrb	r3, [r3, #12]
 80158ba:	f003 030f 	and.w	r3, r3, #15
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d121      	bne.n	8015906 <pbuf_realloc+0xca>
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	895b      	ldrh	r3, [r3, #10]
 80158c6:	897a      	ldrh	r2, [r7, #10]
 80158c8:	429a      	cmp	r2, r3
 80158ca:	d01c      	beq.n	8015906 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80158cc:	68fb      	ldr	r3, [r7, #12]
 80158ce:	7b5b      	ldrb	r3, [r3, #13]
 80158d0:	f003 0302 	and.w	r3, r3, #2
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d116      	bne.n	8015906 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	685a      	ldr	r2, [r3, #4]
 80158dc:	68fb      	ldr	r3, [r7, #12]
 80158de:	1ad3      	subs	r3, r2, r3
 80158e0:	b29a      	uxth	r2, r3
 80158e2:	897b      	ldrh	r3, [r7, #10]
 80158e4:	4413      	add	r3, r2
 80158e6:	b29b      	uxth	r3, r3
 80158e8:	4619      	mov	r1, r3
 80158ea:	68f8      	ldr	r0, [r7, #12]
 80158ec:	f7fe ffba 	bl	8014864 <mem_trim>
 80158f0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80158f2:	68fb      	ldr	r3, [r7, #12]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d106      	bne.n	8015906 <pbuf_realloc+0xca>
 80158f8:	4b0f      	ldr	r3, [pc, #60]	; (8015938 <pbuf_realloc+0xfc>)
 80158fa:	f240 12bd 	movw	r2, #445	; 0x1bd
 80158fe:	4912      	ldr	r1, [pc, #72]	; (8015948 <pbuf_realloc+0x10c>)
 8015900:	480f      	ldr	r0, [pc, #60]	; (8015940 <pbuf_realloc+0x104>)
 8015902:	f00b f933 	bl	8020b6c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8015906:	68fb      	ldr	r3, [r7, #12]
 8015908:	897a      	ldrh	r2, [r7, #10]
 801590a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	895a      	ldrh	r2, [r3, #10]
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8015914:	68fb      	ldr	r3, [r7, #12]
 8015916:	681b      	ldr	r3, [r3, #0]
 8015918:	2b00      	cmp	r3, #0
 801591a:	d004      	beq.n	8015926 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801591c:	68fb      	ldr	r3, [r7, #12]
 801591e:	681b      	ldr	r3, [r3, #0]
 8015920:	4618      	mov	r0, r3
 8015922:	f000 f911 	bl	8015b48 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8015926:	68fb      	ldr	r3, [r7, #12]
 8015928:	2200      	movs	r2, #0
 801592a:	601a      	str	r2, [r3, #0]
 801592c:	e000      	b.n	8015930 <pbuf_realloc+0xf4>
    return;
 801592e:	bf00      	nop

}
 8015930:	3710      	adds	r7, #16
 8015932:	46bd      	mov	sp, r7
 8015934:	bd80      	pop	{r7, pc}
 8015936:	bf00      	nop
 8015938:	08026c4c 	.word	0x08026c4c
 801593c:	08026d90 	.word	0x08026d90
 8015940:	08026cd8 	.word	0x08026cd8
 8015944:	08026da8 	.word	0x08026da8
 8015948:	08026dc0 	.word	0x08026dc0

0801594c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801594c:	b580      	push	{r7, lr}
 801594e:	b086      	sub	sp, #24
 8015950:	af00      	add	r7, sp, #0
 8015952:	60f8      	str	r0, [r7, #12]
 8015954:	60b9      	str	r1, [r7, #8]
 8015956:	4613      	mov	r3, r2
 8015958:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801595a:	68fb      	ldr	r3, [r7, #12]
 801595c:	2b00      	cmp	r3, #0
 801595e:	d106      	bne.n	801596e <pbuf_add_header_impl+0x22>
 8015960:	4b2b      	ldr	r3, [pc, #172]	; (8015a10 <pbuf_add_header_impl+0xc4>)
 8015962:	f240 12df 	movw	r2, #479	; 0x1df
 8015966:	492b      	ldr	r1, [pc, #172]	; (8015a14 <pbuf_add_header_impl+0xc8>)
 8015968:	482b      	ldr	r0, [pc, #172]	; (8015a18 <pbuf_add_header_impl+0xcc>)
 801596a:	f00b f8ff 	bl	8020b6c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	2b00      	cmp	r3, #0
 8015972:	d003      	beq.n	801597c <pbuf_add_header_impl+0x30>
 8015974:	68bb      	ldr	r3, [r7, #8]
 8015976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801597a:	d301      	bcc.n	8015980 <pbuf_add_header_impl+0x34>
    return 1;
 801597c:	2301      	movs	r3, #1
 801597e:	e043      	b.n	8015a08 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8015980:	68bb      	ldr	r3, [r7, #8]
 8015982:	2b00      	cmp	r3, #0
 8015984:	d101      	bne.n	801598a <pbuf_add_header_impl+0x3e>
    return 0;
 8015986:	2300      	movs	r3, #0
 8015988:	e03e      	b.n	8015a08 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801598a:	68bb      	ldr	r3, [r7, #8]
 801598c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801598e:	68fb      	ldr	r3, [r7, #12]
 8015990:	891a      	ldrh	r2, [r3, #8]
 8015992:	8a7b      	ldrh	r3, [r7, #18]
 8015994:	4413      	add	r3, r2
 8015996:	b29b      	uxth	r3, r3
 8015998:	8a7a      	ldrh	r2, [r7, #18]
 801599a:	429a      	cmp	r2, r3
 801599c:	d901      	bls.n	80159a2 <pbuf_add_header_impl+0x56>
    return 1;
 801599e:	2301      	movs	r3, #1
 80159a0:	e032      	b.n	8015a08 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80159a2:	68fb      	ldr	r3, [r7, #12]
 80159a4:	7b1b      	ldrb	r3, [r3, #12]
 80159a6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80159a8:	8a3b      	ldrh	r3, [r7, #16]
 80159aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d00c      	beq.n	80159cc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80159b2:	68fb      	ldr	r3, [r7, #12]
 80159b4:	685a      	ldr	r2, [r3, #4]
 80159b6:	68bb      	ldr	r3, [r7, #8]
 80159b8:	425b      	negs	r3, r3
 80159ba:	4413      	add	r3, r2
 80159bc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	3310      	adds	r3, #16
 80159c2:	697a      	ldr	r2, [r7, #20]
 80159c4:	429a      	cmp	r2, r3
 80159c6:	d20d      	bcs.n	80159e4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80159c8:	2301      	movs	r3, #1
 80159ca:	e01d      	b.n	8015a08 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80159cc:	79fb      	ldrb	r3, [r7, #7]
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d006      	beq.n	80159e0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	685a      	ldr	r2, [r3, #4]
 80159d6:	68bb      	ldr	r3, [r7, #8]
 80159d8:	425b      	negs	r3, r3
 80159da:	4413      	add	r3, r2
 80159dc:	617b      	str	r3, [r7, #20]
 80159de:	e001      	b.n	80159e4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80159e0:	2301      	movs	r3, #1
 80159e2:	e011      	b.n	8015a08 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80159e4:	68fb      	ldr	r3, [r7, #12]
 80159e6:	697a      	ldr	r2, [r7, #20]
 80159e8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80159ea:	68fb      	ldr	r3, [r7, #12]
 80159ec:	895a      	ldrh	r2, [r3, #10]
 80159ee:	8a7b      	ldrh	r3, [r7, #18]
 80159f0:	4413      	add	r3, r2
 80159f2:	b29a      	uxth	r2, r3
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80159f8:	68fb      	ldr	r3, [r7, #12]
 80159fa:	891a      	ldrh	r2, [r3, #8]
 80159fc:	8a7b      	ldrh	r3, [r7, #18]
 80159fe:	4413      	add	r3, r2
 8015a00:	b29a      	uxth	r2, r3
 8015a02:	68fb      	ldr	r3, [r7, #12]
 8015a04:	811a      	strh	r2, [r3, #8]


  return 0;
 8015a06:	2300      	movs	r3, #0
}
 8015a08:	4618      	mov	r0, r3
 8015a0a:	3718      	adds	r7, #24
 8015a0c:	46bd      	mov	sp, r7
 8015a0e:	bd80      	pop	{r7, pc}
 8015a10:	08026c4c 	.word	0x08026c4c
 8015a14:	08026ddc 	.word	0x08026ddc
 8015a18:	08026cd8 	.word	0x08026cd8

08015a1c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8015a1c:	b580      	push	{r7, lr}
 8015a1e:	b082      	sub	sp, #8
 8015a20:	af00      	add	r7, sp, #0
 8015a22:	6078      	str	r0, [r7, #4]
 8015a24:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8015a26:	2200      	movs	r2, #0
 8015a28:	6839      	ldr	r1, [r7, #0]
 8015a2a:	6878      	ldr	r0, [r7, #4]
 8015a2c:	f7ff ff8e 	bl	801594c <pbuf_add_header_impl>
 8015a30:	4603      	mov	r3, r0
}
 8015a32:	4618      	mov	r0, r3
 8015a34:	3708      	adds	r7, #8
 8015a36:	46bd      	mov	sp, r7
 8015a38:	bd80      	pop	{r7, pc}
	...

08015a3c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8015a3c:	b580      	push	{r7, lr}
 8015a3e:	b084      	sub	sp, #16
 8015a40:	af00      	add	r7, sp, #0
 8015a42:	6078      	str	r0, [r7, #4]
 8015a44:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d106      	bne.n	8015a5a <pbuf_remove_header+0x1e>
 8015a4c:	4b20      	ldr	r3, [pc, #128]	; (8015ad0 <pbuf_remove_header+0x94>)
 8015a4e:	f240 224b 	movw	r2, #587	; 0x24b
 8015a52:	4920      	ldr	r1, [pc, #128]	; (8015ad4 <pbuf_remove_header+0x98>)
 8015a54:	4820      	ldr	r0, [pc, #128]	; (8015ad8 <pbuf_remove_header+0x9c>)
 8015a56:	f00b f889 	bl	8020b6c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d003      	beq.n	8015a68 <pbuf_remove_header+0x2c>
 8015a60:	683b      	ldr	r3, [r7, #0]
 8015a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015a66:	d301      	bcc.n	8015a6c <pbuf_remove_header+0x30>
    return 1;
 8015a68:	2301      	movs	r3, #1
 8015a6a:	e02c      	b.n	8015ac6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8015a6c:	683b      	ldr	r3, [r7, #0]
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d101      	bne.n	8015a76 <pbuf_remove_header+0x3a>
    return 0;
 8015a72:	2300      	movs	r3, #0
 8015a74:	e027      	b.n	8015ac6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8015a76:	683b      	ldr	r3, [r7, #0]
 8015a78:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	895b      	ldrh	r3, [r3, #10]
 8015a7e:	89fa      	ldrh	r2, [r7, #14]
 8015a80:	429a      	cmp	r2, r3
 8015a82:	d908      	bls.n	8015a96 <pbuf_remove_header+0x5a>
 8015a84:	4b12      	ldr	r3, [pc, #72]	; (8015ad0 <pbuf_remove_header+0x94>)
 8015a86:	f240 2255 	movw	r2, #597	; 0x255
 8015a8a:	4914      	ldr	r1, [pc, #80]	; (8015adc <pbuf_remove_header+0xa0>)
 8015a8c:	4812      	ldr	r0, [pc, #72]	; (8015ad8 <pbuf_remove_header+0x9c>)
 8015a8e:	f00b f86d 	bl	8020b6c <iprintf>
 8015a92:	2301      	movs	r3, #1
 8015a94:	e017      	b.n	8015ac6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	685b      	ldr	r3, [r3, #4]
 8015a9a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	685a      	ldr	r2, [r3, #4]
 8015aa0:	683b      	ldr	r3, [r7, #0]
 8015aa2:	441a      	add	r2, r3
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	895a      	ldrh	r2, [r3, #10]
 8015aac:	89fb      	ldrh	r3, [r7, #14]
 8015aae:	1ad3      	subs	r3, r2, r3
 8015ab0:	b29a      	uxth	r2, r3
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	891a      	ldrh	r2, [r3, #8]
 8015aba:	89fb      	ldrh	r3, [r7, #14]
 8015abc:	1ad3      	subs	r3, r2, r3
 8015abe:	b29a      	uxth	r2, r3
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8015ac4:	2300      	movs	r3, #0
}
 8015ac6:	4618      	mov	r0, r3
 8015ac8:	3710      	adds	r7, #16
 8015aca:	46bd      	mov	sp, r7
 8015acc:	bd80      	pop	{r7, pc}
 8015ace:	bf00      	nop
 8015ad0:	08026c4c 	.word	0x08026c4c
 8015ad4:	08026ddc 	.word	0x08026ddc
 8015ad8:	08026cd8 	.word	0x08026cd8
 8015adc:	08026de8 	.word	0x08026de8

08015ae0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8015ae0:	b580      	push	{r7, lr}
 8015ae2:	b082      	sub	sp, #8
 8015ae4:	af00      	add	r7, sp, #0
 8015ae6:	6078      	str	r0, [r7, #4]
 8015ae8:	460b      	mov	r3, r1
 8015aea:	807b      	strh	r3, [r7, #2]
 8015aec:	4613      	mov	r3, r2
 8015aee:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8015af0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	da08      	bge.n	8015b0a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8015af8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015afc:	425b      	negs	r3, r3
 8015afe:	4619      	mov	r1, r3
 8015b00:	6878      	ldr	r0, [r7, #4]
 8015b02:	f7ff ff9b 	bl	8015a3c <pbuf_remove_header>
 8015b06:	4603      	mov	r3, r0
 8015b08:	e007      	b.n	8015b1a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8015b0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015b0e:	787a      	ldrb	r2, [r7, #1]
 8015b10:	4619      	mov	r1, r3
 8015b12:	6878      	ldr	r0, [r7, #4]
 8015b14:	f7ff ff1a 	bl	801594c <pbuf_add_header_impl>
 8015b18:	4603      	mov	r3, r0
  }
}
 8015b1a:	4618      	mov	r0, r3
 8015b1c:	3708      	adds	r7, #8
 8015b1e:	46bd      	mov	sp, r7
 8015b20:	bd80      	pop	{r7, pc}

08015b22 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8015b22:	b580      	push	{r7, lr}
 8015b24:	b082      	sub	sp, #8
 8015b26:	af00      	add	r7, sp, #0
 8015b28:	6078      	str	r0, [r7, #4]
 8015b2a:	460b      	mov	r3, r1
 8015b2c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8015b2e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015b32:	2201      	movs	r2, #1
 8015b34:	4619      	mov	r1, r3
 8015b36:	6878      	ldr	r0, [r7, #4]
 8015b38:	f7ff ffd2 	bl	8015ae0 <pbuf_header_impl>
 8015b3c:	4603      	mov	r3, r0
}
 8015b3e:	4618      	mov	r0, r3
 8015b40:	3708      	adds	r7, #8
 8015b42:	46bd      	mov	sp, r7
 8015b44:	bd80      	pop	{r7, pc}
	...

08015b48 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8015b48:	b580      	push	{r7, lr}
 8015b4a:	b086      	sub	sp, #24
 8015b4c:	af00      	add	r7, sp, #0
 8015b4e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d10b      	bne.n	8015b6e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d106      	bne.n	8015b6a <pbuf_free+0x22>
 8015b5c:	4b38      	ldr	r3, [pc, #224]	; (8015c40 <pbuf_free+0xf8>)
 8015b5e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8015b62:	4938      	ldr	r1, [pc, #224]	; (8015c44 <pbuf_free+0xfc>)
 8015b64:	4838      	ldr	r0, [pc, #224]	; (8015c48 <pbuf_free+0x100>)
 8015b66:	f00b f801 	bl	8020b6c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8015b6a:	2300      	movs	r3, #0
 8015b6c:	e063      	b.n	8015c36 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8015b6e:	2300      	movs	r3, #0
 8015b70:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8015b72:	e05c      	b.n	8015c2e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	7b9b      	ldrb	r3, [r3, #14]
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d106      	bne.n	8015b8a <pbuf_free+0x42>
 8015b7c:	4b30      	ldr	r3, [pc, #192]	; (8015c40 <pbuf_free+0xf8>)
 8015b7e:	f240 22f1 	movw	r2, #753	; 0x2f1
 8015b82:	4932      	ldr	r1, [pc, #200]	; (8015c4c <pbuf_free+0x104>)
 8015b84:	4830      	ldr	r0, [pc, #192]	; (8015c48 <pbuf_free+0x100>)
 8015b86:	f00a fff1 	bl	8020b6c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	7b9b      	ldrb	r3, [r3, #14]
 8015b8e:	3b01      	subs	r3, #1
 8015b90:	b2da      	uxtb	r2, r3
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	739a      	strb	r2, [r3, #14]
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	7b9b      	ldrb	r3, [r3, #14]
 8015b9a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8015b9c:	7dbb      	ldrb	r3, [r7, #22]
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d143      	bne.n	8015c2a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	681b      	ldr	r3, [r3, #0]
 8015ba6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	7b1b      	ldrb	r3, [r3, #12]
 8015bac:	f003 030f 	and.w	r3, r3, #15
 8015bb0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	7b5b      	ldrb	r3, [r3, #13]
 8015bb6:	f003 0302 	and.w	r3, r3, #2
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d011      	beq.n	8015be2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8015bc2:	68bb      	ldr	r3, [r7, #8]
 8015bc4:	691b      	ldr	r3, [r3, #16]
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d106      	bne.n	8015bd8 <pbuf_free+0x90>
 8015bca:	4b1d      	ldr	r3, [pc, #116]	; (8015c40 <pbuf_free+0xf8>)
 8015bcc:	f240 22ff 	movw	r2, #767	; 0x2ff
 8015bd0:	491f      	ldr	r1, [pc, #124]	; (8015c50 <pbuf_free+0x108>)
 8015bd2:	481d      	ldr	r0, [pc, #116]	; (8015c48 <pbuf_free+0x100>)
 8015bd4:	f00a ffca 	bl	8020b6c <iprintf>
        pc->custom_free_function(p);
 8015bd8:	68bb      	ldr	r3, [r7, #8]
 8015bda:	691b      	ldr	r3, [r3, #16]
 8015bdc:	6878      	ldr	r0, [r7, #4]
 8015bde:	4798      	blx	r3
 8015be0:	e01d      	b.n	8015c1e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8015be2:	7bfb      	ldrb	r3, [r7, #15]
 8015be4:	2b02      	cmp	r3, #2
 8015be6:	d104      	bne.n	8015bf2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8015be8:	6879      	ldr	r1, [r7, #4]
 8015bea:	2008      	movs	r0, #8
 8015bec:	f7ff f936 	bl	8014e5c <memp_free>
 8015bf0:	e015      	b.n	8015c1e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8015bf2:	7bfb      	ldrb	r3, [r7, #15]
 8015bf4:	2b01      	cmp	r3, #1
 8015bf6:	d104      	bne.n	8015c02 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8015bf8:	6879      	ldr	r1, [r7, #4]
 8015bfa:	2007      	movs	r0, #7
 8015bfc:	f7ff f92e 	bl	8014e5c <memp_free>
 8015c00:	e00d      	b.n	8015c1e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8015c02:	7bfb      	ldrb	r3, [r7, #15]
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d103      	bne.n	8015c10 <pbuf_free+0xc8>
          mem_free(p);
 8015c08:	6878      	ldr	r0, [r7, #4]
 8015c0a:	f7fe fdc1 	bl	8014790 <mem_free>
 8015c0e:	e006      	b.n	8015c1e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8015c10:	4b0b      	ldr	r3, [pc, #44]	; (8015c40 <pbuf_free+0xf8>)
 8015c12:	f240 320f 	movw	r2, #783	; 0x30f
 8015c16:	490f      	ldr	r1, [pc, #60]	; (8015c54 <pbuf_free+0x10c>)
 8015c18:	480b      	ldr	r0, [pc, #44]	; (8015c48 <pbuf_free+0x100>)
 8015c1a:	f00a ffa7 	bl	8020b6c <iprintf>
        }
      }
      count++;
 8015c1e:	7dfb      	ldrb	r3, [r7, #23]
 8015c20:	3301      	adds	r3, #1
 8015c22:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8015c24:	693b      	ldr	r3, [r7, #16]
 8015c26:	607b      	str	r3, [r7, #4]
 8015c28:	e001      	b.n	8015c2e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8015c2a:	2300      	movs	r3, #0
 8015c2c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d19f      	bne.n	8015b74 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8015c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8015c36:	4618      	mov	r0, r3
 8015c38:	3718      	adds	r7, #24
 8015c3a:	46bd      	mov	sp, r7
 8015c3c:	bd80      	pop	{r7, pc}
 8015c3e:	bf00      	nop
 8015c40:	08026c4c 	.word	0x08026c4c
 8015c44:	08026ddc 	.word	0x08026ddc
 8015c48:	08026cd8 	.word	0x08026cd8
 8015c4c:	08026e08 	.word	0x08026e08
 8015c50:	08026e20 	.word	0x08026e20
 8015c54:	08026e44 	.word	0x08026e44

08015c58 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8015c58:	b480      	push	{r7}
 8015c5a:	b085      	sub	sp, #20
 8015c5c:	af00      	add	r7, sp, #0
 8015c5e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8015c60:	2300      	movs	r3, #0
 8015c62:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8015c64:	e005      	b.n	8015c72 <pbuf_clen+0x1a>
    ++len;
 8015c66:	89fb      	ldrh	r3, [r7, #14]
 8015c68:	3301      	adds	r3, #1
 8015c6a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	681b      	ldr	r3, [r3, #0]
 8015c70:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d1f6      	bne.n	8015c66 <pbuf_clen+0xe>
  }
  return len;
 8015c78:	89fb      	ldrh	r3, [r7, #14]
}
 8015c7a:	4618      	mov	r0, r3
 8015c7c:	3714      	adds	r7, #20
 8015c7e:	46bd      	mov	sp, r7
 8015c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c84:	4770      	bx	lr
	...

08015c88 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8015c88:	b580      	push	{r7, lr}
 8015c8a:	b082      	sub	sp, #8
 8015c8c:	af00      	add	r7, sp, #0
 8015c8e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d010      	beq.n	8015cb8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	7b9b      	ldrb	r3, [r3, #14]
 8015c9a:	3301      	adds	r3, #1
 8015c9c:	b2da      	uxtb	r2, r3
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	7b9b      	ldrb	r3, [r3, #14]
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d106      	bne.n	8015cb8 <pbuf_ref+0x30>
 8015caa:	4b05      	ldr	r3, [pc, #20]	; (8015cc0 <pbuf_ref+0x38>)
 8015cac:	f240 3242 	movw	r2, #834	; 0x342
 8015cb0:	4904      	ldr	r1, [pc, #16]	; (8015cc4 <pbuf_ref+0x3c>)
 8015cb2:	4805      	ldr	r0, [pc, #20]	; (8015cc8 <pbuf_ref+0x40>)
 8015cb4:	f00a ff5a 	bl	8020b6c <iprintf>
  }
}
 8015cb8:	bf00      	nop
 8015cba:	3708      	adds	r7, #8
 8015cbc:	46bd      	mov	sp, r7
 8015cbe:	bd80      	pop	{r7, pc}
 8015cc0:	08026c4c 	.word	0x08026c4c
 8015cc4:	08026e58 	.word	0x08026e58
 8015cc8:	08026cd8 	.word	0x08026cd8

08015ccc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8015ccc:	b580      	push	{r7, lr}
 8015cce:	b084      	sub	sp, #16
 8015cd0:	af00      	add	r7, sp, #0
 8015cd2:	6078      	str	r0, [r7, #4]
 8015cd4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d002      	beq.n	8015ce2 <pbuf_cat+0x16>
 8015cdc:	683b      	ldr	r3, [r7, #0]
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d107      	bne.n	8015cf2 <pbuf_cat+0x26>
 8015ce2:	4b20      	ldr	r3, [pc, #128]	; (8015d64 <pbuf_cat+0x98>)
 8015ce4:	f240 3259 	movw	r2, #857	; 0x359
 8015ce8:	491f      	ldr	r1, [pc, #124]	; (8015d68 <pbuf_cat+0x9c>)
 8015cea:	4820      	ldr	r0, [pc, #128]	; (8015d6c <pbuf_cat+0xa0>)
 8015cec:	f00a ff3e 	bl	8020b6c <iprintf>
 8015cf0:	e034      	b.n	8015d5c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	60fb      	str	r3, [r7, #12]
 8015cf6:	e00a      	b.n	8015d0e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	891a      	ldrh	r2, [r3, #8]
 8015cfc:	683b      	ldr	r3, [r7, #0]
 8015cfe:	891b      	ldrh	r3, [r3, #8]
 8015d00:	4413      	add	r3, r2
 8015d02:	b29a      	uxth	r2, r3
 8015d04:	68fb      	ldr	r3, [r7, #12]
 8015d06:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8015d08:	68fb      	ldr	r3, [r7, #12]
 8015d0a:	681b      	ldr	r3, [r3, #0]
 8015d0c:	60fb      	str	r3, [r7, #12]
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	681b      	ldr	r3, [r3, #0]
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	d1f0      	bne.n	8015cf8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8015d16:	68fb      	ldr	r3, [r7, #12]
 8015d18:	891a      	ldrh	r2, [r3, #8]
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	895b      	ldrh	r3, [r3, #10]
 8015d1e:	429a      	cmp	r2, r3
 8015d20:	d006      	beq.n	8015d30 <pbuf_cat+0x64>
 8015d22:	4b10      	ldr	r3, [pc, #64]	; (8015d64 <pbuf_cat+0x98>)
 8015d24:	f240 3262 	movw	r2, #866	; 0x362
 8015d28:	4911      	ldr	r1, [pc, #68]	; (8015d70 <pbuf_cat+0xa4>)
 8015d2a:	4810      	ldr	r0, [pc, #64]	; (8015d6c <pbuf_cat+0xa0>)
 8015d2c:	f00a ff1e 	bl	8020b6c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8015d30:	68fb      	ldr	r3, [r7, #12]
 8015d32:	681b      	ldr	r3, [r3, #0]
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d006      	beq.n	8015d46 <pbuf_cat+0x7a>
 8015d38:	4b0a      	ldr	r3, [pc, #40]	; (8015d64 <pbuf_cat+0x98>)
 8015d3a:	f240 3263 	movw	r2, #867	; 0x363
 8015d3e:	490d      	ldr	r1, [pc, #52]	; (8015d74 <pbuf_cat+0xa8>)
 8015d40:	480a      	ldr	r0, [pc, #40]	; (8015d6c <pbuf_cat+0xa0>)
 8015d42:	f00a ff13 	bl	8020b6c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8015d46:	68fb      	ldr	r3, [r7, #12]
 8015d48:	891a      	ldrh	r2, [r3, #8]
 8015d4a:	683b      	ldr	r3, [r7, #0]
 8015d4c:	891b      	ldrh	r3, [r3, #8]
 8015d4e:	4413      	add	r3, r2
 8015d50:	b29a      	uxth	r2, r3
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8015d56:	68fb      	ldr	r3, [r7, #12]
 8015d58:	683a      	ldr	r2, [r7, #0]
 8015d5a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8015d5c:	3710      	adds	r7, #16
 8015d5e:	46bd      	mov	sp, r7
 8015d60:	bd80      	pop	{r7, pc}
 8015d62:	bf00      	nop
 8015d64:	08026c4c 	.word	0x08026c4c
 8015d68:	08026e6c 	.word	0x08026e6c
 8015d6c:	08026cd8 	.word	0x08026cd8
 8015d70:	08026ea4 	.word	0x08026ea4
 8015d74:	08026ed4 	.word	0x08026ed4

08015d78 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8015d78:	b580      	push	{r7, lr}
 8015d7a:	b086      	sub	sp, #24
 8015d7c:	af00      	add	r7, sp, #0
 8015d7e:	6078      	str	r0, [r7, #4]
 8015d80:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8015d82:	2300      	movs	r3, #0
 8015d84:	617b      	str	r3, [r7, #20]
 8015d86:	2300      	movs	r3, #0
 8015d88:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d008      	beq.n	8015da2 <pbuf_copy+0x2a>
 8015d90:	683b      	ldr	r3, [r7, #0]
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	d005      	beq.n	8015da2 <pbuf_copy+0x2a>
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	891a      	ldrh	r2, [r3, #8]
 8015d9a:	683b      	ldr	r3, [r7, #0]
 8015d9c:	891b      	ldrh	r3, [r3, #8]
 8015d9e:	429a      	cmp	r2, r3
 8015da0:	d209      	bcs.n	8015db6 <pbuf_copy+0x3e>
 8015da2:	4b57      	ldr	r3, [pc, #348]	; (8015f00 <pbuf_copy+0x188>)
 8015da4:	f240 32c9 	movw	r2, #969	; 0x3c9
 8015da8:	4956      	ldr	r1, [pc, #344]	; (8015f04 <pbuf_copy+0x18c>)
 8015daa:	4857      	ldr	r0, [pc, #348]	; (8015f08 <pbuf_copy+0x190>)
 8015dac:	f00a fede 	bl	8020b6c <iprintf>
 8015db0:	f06f 030f 	mvn.w	r3, #15
 8015db4:	e09f      	b.n	8015ef6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	895b      	ldrh	r3, [r3, #10]
 8015dba:	461a      	mov	r2, r3
 8015dbc:	697b      	ldr	r3, [r7, #20]
 8015dbe:	1ad2      	subs	r2, r2, r3
 8015dc0:	683b      	ldr	r3, [r7, #0]
 8015dc2:	895b      	ldrh	r3, [r3, #10]
 8015dc4:	4619      	mov	r1, r3
 8015dc6:	693b      	ldr	r3, [r7, #16]
 8015dc8:	1acb      	subs	r3, r1, r3
 8015dca:	429a      	cmp	r2, r3
 8015dcc:	d306      	bcc.n	8015ddc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8015dce:	683b      	ldr	r3, [r7, #0]
 8015dd0:	895b      	ldrh	r3, [r3, #10]
 8015dd2:	461a      	mov	r2, r3
 8015dd4:	693b      	ldr	r3, [r7, #16]
 8015dd6:	1ad3      	subs	r3, r2, r3
 8015dd8:	60fb      	str	r3, [r7, #12]
 8015dda:	e005      	b.n	8015de8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	895b      	ldrh	r3, [r3, #10]
 8015de0:	461a      	mov	r2, r3
 8015de2:	697b      	ldr	r3, [r7, #20]
 8015de4:	1ad3      	subs	r3, r2, r3
 8015de6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	685a      	ldr	r2, [r3, #4]
 8015dec:	697b      	ldr	r3, [r7, #20]
 8015dee:	18d0      	adds	r0, r2, r3
 8015df0:	683b      	ldr	r3, [r7, #0]
 8015df2:	685a      	ldr	r2, [r3, #4]
 8015df4:	693b      	ldr	r3, [r7, #16]
 8015df6:	4413      	add	r3, r2
 8015df8:	68fa      	ldr	r2, [r7, #12]
 8015dfa:	4619      	mov	r1, r3
 8015dfc:	f009 ff94 	bl	801fd28 <memcpy>
    offset_to += len;
 8015e00:	697a      	ldr	r2, [r7, #20]
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	4413      	add	r3, r2
 8015e06:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8015e08:	693a      	ldr	r2, [r7, #16]
 8015e0a:	68fb      	ldr	r3, [r7, #12]
 8015e0c:	4413      	add	r3, r2
 8015e0e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	895b      	ldrh	r3, [r3, #10]
 8015e14:	461a      	mov	r2, r3
 8015e16:	697b      	ldr	r3, [r7, #20]
 8015e18:	4293      	cmp	r3, r2
 8015e1a:	d906      	bls.n	8015e2a <pbuf_copy+0xb2>
 8015e1c:	4b38      	ldr	r3, [pc, #224]	; (8015f00 <pbuf_copy+0x188>)
 8015e1e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8015e22:	493a      	ldr	r1, [pc, #232]	; (8015f0c <pbuf_copy+0x194>)
 8015e24:	4838      	ldr	r0, [pc, #224]	; (8015f08 <pbuf_copy+0x190>)
 8015e26:	f00a fea1 	bl	8020b6c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8015e2a:	683b      	ldr	r3, [r7, #0]
 8015e2c:	895b      	ldrh	r3, [r3, #10]
 8015e2e:	461a      	mov	r2, r3
 8015e30:	693b      	ldr	r3, [r7, #16]
 8015e32:	4293      	cmp	r3, r2
 8015e34:	d906      	bls.n	8015e44 <pbuf_copy+0xcc>
 8015e36:	4b32      	ldr	r3, [pc, #200]	; (8015f00 <pbuf_copy+0x188>)
 8015e38:	f240 32da 	movw	r2, #986	; 0x3da
 8015e3c:	4934      	ldr	r1, [pc, #208]	; (8015f10 <pbuf_copy+0x198>)
 8015e3e:	4832      	ldr	r0, [pc, #200]	; (8015f08 <pbuf_copy+0x190>)
 8015e40:	f00a fe94 	bl	8020b6c <iprintf>
    if (offset_from >= p_from->len) {
 8015e44:	683b      	ldr	r3, [r7, #0]
 8015e46:	895b      	ldrh	r3, [r3, #10]
 8015e48:	461a      	mov	r2, r3
 8015e4a:	693b      	ldr	r3, [r7, #16]
 8015e4c:	4293      	cmp	r3, r2
 8015e4e:	d304      	bcc.n	8015e5a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8015e50:	2300      	movs	r3, #0
 8015e52:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8015e54:	683b      	ldr	r3, [r7, #0]
 8015e56:	681b      	ldr	r3, [r3, #0]
 8015e58:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	895b      	ldrh	r3, [r3, #10]
 8015e5e:	461a      	mov	r2, r3
 8015e60:	697b      	ldr	r3, [r7, #20]
 8015e62:	4293      	cmp	r3, r2
 8015e64:	d114      	bne.n	8015e90 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8015e66:	2300      	movs	r3, #0
 8015e68:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	681b      	ldr	r3, [r3, #0]
 8015e6e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d10c      	bne.n	8015e90 <pbuf_copy+0x118>
 8015e76:	683b      	ldr	r3, [r7, #0]
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	d009      	beq.n	8015e90 <pbuf_copy+0x118>
 8015e7c:	4b20      	ldr	r3, [pc, #128]	; (8015f00 <pbuf_copy+0x188>)
 8015e7e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8015e82:	4924      	ldr	r1, [pc, #144]	; (8015f14 <pbuf_copy+0x19c>)
 8015e84:	4820      	ldr	r0, [pc, #128]	; (8015f08 <pbuf_copy+0x190>)
 8015e86:	f00a fe71 	bl	8020b6c <iprintf>
 8015e8a:	f06f 030f 	mvn.w	r3, #15
 8015e8e:	e032      	b.n	8015ef6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8015e90:	683b      	ldr	r3, [r7, #0]
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d013      	beq.n	8015ebe <pbuf_copy+0x146>
 8015e96:	683b      	ldr	r3, [r7, #0]
 8015e98:	895a      	ldrh	r2, [r3, #10]
 8015e9a:	683b      	ldr	r3, [r7, #0]
 8015e9c:	891b      	ldrh	r3, [r3, #8]
 8015e9e:	429a      	cmp	r2, r3
 8015ea0:	d10d      	bne.n	8015ebe <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8015ea2:	683b      	ldr	r3, [r7, #0]
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d009      	beq.n	8015ebe <pbuf_copy+0x146>
 8015eaa:	4b15      	ldr	r3, [pc, #84]	; (8015f00 <pbuf_copy+0x188>)
 8015eac:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8015eb0:	4919      	ldr	r1, [pc, #100]	; (8015f18 <pbuf_copy+0x1a0>)
 8015eb2:	4815      	ldr	r0, [pc, #84]	; (8015f08 <pbuf_copy+0x190>)
 8015eb4:	f00a fe5a 	bl	8020b6c <iprintf>
 8015eb8:	f06f 0305 	mvn.w	r3, #5
 8015ebc:	e01b      	b.n	8015ef6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d013      	beq.n	8015eec <pbuf_copy+0x174>
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	895a      	ldrh	r2, [r3, #10]
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	891b      	ldrh	r3, [r3, #8]
 8015ecc:	429a      	cmp	r2, r3
 8015ece:	d10d      	bne.n	8015eec <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d009      	beq.n	8015eec <pbuf_copy+0x174>
 8015ed8:	4b09      	ldr	r3, [pc, #36]	; (8015f00 <pbuf_copy+0x188>)
 8015eda:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8015ede:	490e      	ldr	r1, [pc, #56]	; (8015f18 <pbuf_copy+0x1a0>)
 8015ee0:	4809      	ldr	r0, [pc, #36]	; (8015f08 <pbuf_copy+0x190>)
 8015ee2:	f00a fe43 	bl	8020b6c <iprintf>
 8015ee6:	f06f 0305 	mvn.w	r3, #5
 8015eea:	e004      	b.n	8015ef6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8015eec:	683b      	ldr	r3, [r7, #0]
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	f47f af61 	bne.w	8015db6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8015ef4:	2300      	movs	r3, #0
}
 8015ef6:	4618      	mov	r0, r3
 8015ef8:	3718      	adds	r7, #24
 8015efa:	46bd      	mov	sp, r7
 8015efc:	bd80      	pop	{r7, pc}
 8015efe:	bf00      	nop
 8015f00:	08026c4c 	.word	0x08026c4c
 8015f04:	08026f20 	.word	0x08026f20
 8015f08:	08026cd8 	.word	0x08026cd8
 8015f0c:	08026f50 	.word	0x08026f50
 8015f10:	08026f68 	.word	0x08026f68
 8015f14:	08026f84 	.word	0x08026f84
 8015f18:	08026f94 	.word	0x08026f94

08015f1c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8015f1c:	b580      	push	{r7, lr}
 8015f1e:	b088      	sub	sp, #32
 8015f20:	af00      	add	r7, sp, #0
 8015f22:	60f8      	str	r0, [r7, #12]
 8015f24:	60b9      	str	r1, [r7, #8]
 8015f26:	4611      	mov	r1, r2
 8015f28:	461a      	mov	r2, r3
 8015f2a:	460b      	mov	r3, r1
 8015f2c:	80fb      	strh	r3, [r7, #6]
 8015f2e:	4613      	mov	r3, r2
 8015f30:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8015f32:	2300      	movs	r3, #0
 8015f34:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8015f36:	2300      	movs	r3, #0
 8015f38:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8015f3a:	68fb      	ldr	r3, [r7, #12]
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d108      	bne.n	8015f52 <pbuf_copy_partial+0x36>
 8015f40:	4b2b      	ldr	r3, [pc, #172]	; (8015ff0 <pbuf_copy_partial+0xd4>)
 8015f42:	f240 420a 	movw	r2, #1034	; 0x40a
 8015f46:	492b      	ldr	r1, [pc, #172]	; (8015ff4 <pbuf_copy_partial+0xd8>)
 8015f48:	482b      	ldr	r0, [pc, #172]	; (8015ff8 <pbuf_copy_partial+0xdc>)
 8015f4a:	f00a fe0f 	bl	8020b6c <iprintf>
 8015f4e:	2300      	movs	r3, #0
 8015f50:	e04a      	b.n	8015fe8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8015f52:	68bb      	ldr	r3, [r7, #8]
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d108      	bne.n	8015f6a <pbuf_copy_partial+0x4e>
 8015f58:	4b25      	ldr	r3, [pc, #148]	; (8015ff0 <pbuf_copy_partial+0xd4>)
 8015f5a:	f240 420b 	movw	r2, #1035	; 0x40b
 8015f5e:	4927      	ldr	r1, [pc, #156]	; (8015ffc <pbuf_copy_partial+0xe0>)
 8015f60:	4825      	ldr	r0, [pc, #148]	; (8015ff8 <pbuf_copy_partial+0xdc>)
 8015f62:	f00a fe03 	bl	8020b6c <iprintf>
 8015f66:	2300      	movs	r3, #0
 8015f68:	e03e      	b.n	8015fe8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8015f6a:	68fb      	ldr	r3, [r7, #12]
 8015f6c:	61fb      	str	r3, [r7, #28]
 8015f6e:	e034      	b.n	8015fda <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8015f70:	88bb      	ldrh	r3, [r7, #4]
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d00a      	beq.n	8015f8c <pbuf_copy_partial+0x70>
 8015f76:	69fb      	ldr	r3, [r7, #28]
 8015f78:	895b      	ldrh	r3, [r3, #10]
 8015f7a:	88ba      	ldrh	r2, [r7, #4]
 8015f7c:	429a      	cmp	r2, r3
 8015f7e:	d305      	bcc.n	8015f8c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8015f80:	69fb      	ldr	r3, [r7, #28]
 8015f82:	895b      	ldrh	r3, [r3, #10]
 8015f84:	88ba      	ldrh	r2, [r7, #4]
 8015f86:	1ad3      	subs	r3, r2, r3
 8015f88:	80bb      	strh	r3, [r7, #4]
 8015f8a:	e023      	b.n	8015fd4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8015f8c:	69fb      	ldr	r3, [r7, #28]
 8015f8e:	895a      	ldrh	r2, [r3, #10]
 8015f90:	88bb      	ldrh	r3, [r7, #4]
 8015f92:	1ad3      	subs	r3, r2, r3
 8015f94:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8015f96:	8b3a      	ldrh	r2, [r7, #24]
 8015f98:	88fb      	ldrh	r3, [r7, #6]
 8015f9a:	429a      	cmp	r2, r3
 8015f9c:	d901      	bls.n	8015fa2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8015f9e:	88fb      	ldrh	r3, [r7, #6]
 8015fa0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8015fa2:	8b7b      	ldrh	r3, [r7, #26]
 8015fa4:	68ba      	ldr	r2, [r7, #8]
 8015fa6:	18d0      	adds	r0, r2, r3
 8015fa8:	69fb      	ldr	r3, [r7, #28]
 8015faa:	685a      	ldr	r2, [r3, #4]
 8015fac:	88bb      	ldrh	r3, [r7, #4]
 8015fae:	4413      	add	r3, r2
 8015fb0:	8b3a      	ldrh	r2, [r7, #24]
 8015fb2:	4619      	mov	r1, r3
 8015fb4:	f009 feb8 	bl	801fd28 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8015fb8:	8afa      	ldrh	r2, [r7, #22]
 8015fba:	8b3b      	ldrh	r3, [r7, #24]
 8015fbc:	4413      	add	r3, r2
 8015fbe:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8015fc0:	8b7a      	ldrh	r2, [r7, #26]
 8015fc2:	8b3b      	ldrh	r3, [r7, #24]
 8015fc4:	4413      	add	r3, r2
 8015fc6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8015fc8:	88fa      	ldrh	r2, [r7, #6]
 8015fca:	8b3b      	ldrh	r3, [r7, #24]
 8015fcc:	1ad3      	subs	r3, r2, r3
 8015fce:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8015fd0:	2300      	movs	r3, #0
 8015fd2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8015fd4:	69fb      	ldr	r3, [r7, #28]
 8015fd6:	681b      	ldr	r3, [r3, #0]
 8015fd8:	61fb      	str	r3, [r7, #28]
 8015fda:	88fb      	ldrh	r3, [r7, #6]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d002      	beq.n	8015fe6 <pbuf_copy_partial+0xca>
 8015fe0:	69fb      	ldr	r3, [r7, #28]
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d1c4      	bne.n	8015f70 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8015fe6:	8afb      	ldrh	r3, [r7, #22]
}
 8015fe8:	4618      	mov	r0, r3
 8015fea:	3720      	adds	r7, #32
 8015fec:	46bd      	mov	sp, r7
 8015fee:	bd80      	pop	{r7, pc}
 8015ff0:	08026c4c 	.word	0x08026c4c
 8015ff4:	08026fc0 	.word	0x08026fc0
 8015ff8:	08026cd8 	.word	0x08026cd8
 8015ffc:	08026fe0 	.word	0x08026fe0

08016000 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8016000:	b480      	push	{r7}
 8016002:	b087      	sub	sp, #28
 8016004:	af00      	add	r7, sp, #0
 8016006:	60f8      	str	r0, [r7, #12]
 8016008:	460b      	mov	r3, r1
 801600a:	607a      	str	r2, [r7, #4]
 801600c:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 801600e:	897b      	ldrh	r3, [r7, #10]
 8016010:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8016016:	e007      	b.n	8016028 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8016018:	693b      	ldr	r3, [r7, #16]
 801601a:	895b      	ldrh	r3, [r3, #10]
 801601c:	8afa      	ldrh	r2, [r7, #22]
 801601e:	1ad3      	subs	r3, r2, r3
 8016020:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8016022:	693b      	ldr	r3, [r7, #16]
 8016024:	681b      	ldr	r3, [r3, #0]
 8016026:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8016028:	693b      	ldr	r3, [r7, #16]
 801602a:	2b00      	cmp	r3, #0
 801602c:	d004      	beq.n	8016038 <pbuf_skip_const+0x38>
 801602e:	693b      	ldr	r3, [r7, #16]
 8016030:	895b      	ldrh	r3, [r3, #10]
 8016032:	8afa      	ldrh	r2, [r7, #22]
 8016034:	429a      	cmp	r2, r3
 8016036:	d2ef      	bcs.n	8016018 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	2b00      	cmp	r3, #0
 801603c:	d002      	beq.n	8016044 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	8afa      	ldrh	r2, [r7, #22]
 8016042:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8016044:	693b      	ldr	r3, [r7, #16]
}
 8016046:	4618      	mov	r0, r3
 8016048:	371c      	adds	r7, #28
 801604a:	46bd      	mov	sp, r7
 801604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016050:	4770      	bx	lr
	...

08016054 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8016054:	b580      	push	{r7, lr}
 8016056:	b084      	sub	sp, #16
 8016058:	af00      	add	r7, sp, #0
 801605a:	4603      	mov	r3, r0
 801605c:	603a      	str	r2, [r7, #0]
 801605e:	71fb      	strb	r3, [r7, #7]
 8016060:	460b      	mov	r3, r1
 8016062:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8016064:	683b      	ldr	r3, [r7, #0]
 8016066:	8919      	ldrh	r1, [r3, #8]
 8016068:	88ba      	ldrh	r2, [r7, #4]
 801606a:	79fb      	ldrb	r3, [r7, #7]
 801606c:	4618      	mov	r0, r3
 801606e:	f7ff fa87 	bl	8015580 <pbuf_alloc>
 8016072:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	2b00      	cmp	r3, #0
 8016078:	d101      	bne.n	801607e <pbuf_clone+0x2a>
    return NULL;
 801607a:	2300      	movs	r3, #0
 801607c:	e011      	b.n	80160a2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801607e:	6839      	ldr	r1, [r7, #0]
 8016080:	68f8      	ldr	r0, [r7, #12]
 8016082:	f7ff fe79 	bl	8015d78 <pbuf_copy>
 8016086:	4603      	mov	r3, r0
 8016088:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801608a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801608e:	2b00      	cmp	r3, #0
 8016090:	d006      	beq.n	80160a0 <pbuf_clone+0x4c>
 8016092:	4b06      	ldr	r3, [pc, #24]	; (80160ac <pbuf_clone+0x58>)
 8016094:	f240 5224 	movw	r2, #1316	; 0x524
 8016098:	4905      	ldr	r1, [pc, #20]	; (80160b0 <pbuf_clone+0x5c>)
 801609a:	4806      	ldr	r0, [pc, #24]	; (80160b4 <pbuf_clone+0x60>)
 801609c:	f00a fd66 	bl	8020b6c <iprintf>
  return q;
 80160a0:	68fb      	ldr	r3, [r7, #12]
}
 80160a2:	4618      	mov	r0, r3
 80160a4:	3710      	adds	r7, #16
 80160a6:	46bd      	mov	sp, r7
 80160a8:	bd80      	pop	{r7, pc}
 80160aa:	bf00      	nop
 80160ac:	08026c4c 	.word	0x08026c4c
 80160b0:	080270ec 	.word	0x080270ec
 80160b4:	08026cd8 	.word	0x08026cd8

080160b8 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 80160b8:	b580      	push	{r7, lr}
 80160ba:	b084      	sub	sp, #16
 80160bc:	af00      	add	r7, sp, #0
 80160be:	6078      	str	r0, [r7, #4]
 80160c0:	460b      	mov	r3, r1
 80160c2:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 80160c4:	887b      	ldrh	r3, [r7, #2]
 80160c6:	4619      	mov	r1, r3
 80160c8:	6878      	ldr	r0, [r7, #4]
 80160ca:	f000 f80c 	bl	80160e6 <pbuf_try_get_at>
 80160ce:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	db02      	blt.n	80160dc <pbuf_get_at+0x24>
    return (u8_t)ret;
 80160d6:	68fb      	ldr	r3, [r7, #12]
 80160d8:	b2db      	uxtb	r3, r3
 80160da:	e000      	b.n	80160de <pbuf_get_at+0x26>
  }
  return 0;
 80160dc:	2300      	movs	r3, #0
}
 80160de:	4618      	mov	r0, r3
 80160e0:	3710      	adds	r7, #16
 80160e2:	46bd      	mov	sp, r7
 80160e4:	bd80      	pop	{r7, pc}

080160e6 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 80160e6:	b580      	push	{r7, lr}
 80160e8:	b084      	sub	sp, #16
 80160ea:	af00      	add	r7, sp, #0
 80160ec:	6078      	str	r0, [r7, #4]
 80160ee:	460b      	mov	r3, r1
 80160f0:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 80160f2:	f107 020a 	add.w	r2, r7, #10
 80160f6:	887b      	ldrh	r3, [r7, #2]
 80160f8:	4619      	mov	r1, r3
 80160fa:	6878      	ldr	r0, [r7, #4]
 80160fc:	f7ff ff80 	bl	8016000 <pbuf_skip_const>
 8016100:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8016102:	68fb      	ldr	r3, [r7, #12]
 8016104:	2b00      	cmp	r3, #0
 8016106:	d00a      	beq.n	801611e <pbuf_try_get_at+0x38>
 8016108:	68fb      	ldr	r3, [r7, #12]
 801610a:	895a      	ldrh	r2, [r3, #10]
 801610c:	897b      	ldrh	r3, [r7, #10]
 801610e:	429a      	cmp	r2, r3
 8016110:	d905      	bls.n	801611e <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 8016112:	68fb      	ldr	r3, [r7, #12]
 8016114:	685b      	ldr	r3, [r3, #4]
 8016116:	897a      	ldrh	r2, [r7, #10]
 8016118:	4413      	add	r3, r2
 801611a:	781b      	ldrb	r3, [r3, #0]
 801611c:	e001      	b.n	8016122 <pbuf_try_get_at+0x3c>
  }
  return -1;
 801611e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8016122:	4618      	mov	r0, r3
 8016124:	3710      	adds	r7, #16
 8016126:	46bd      	mov	sp, r7
 8016128:	bd80      	pop	{r7, pc}

0801612a <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 801612a:	b580      	push	{r7, lr}
 801612c:	b088      	sub	sp, #32
 801612e:	af00      	add	r7, sp, #0
 8016130:	60f8      	str	r0, [r7, #12]
 8016132:	607a      	str	r2, [r7, #4]
 8016134:	461a      	mov	r2, r3
 8016136:	460b      	mov	r3, r1
 8016138:	817b      	strh	r3, [r7, #10]
 801613a:	4613      	mov	r3, r2
 801613c:	813b      	strh	r3, [r7, #8]
  u16_t start = offset;
 801613e:	897b      	ldrh	r3, [r7, #10]
 8016140:	83fb      	strh	r3, [r7, #30]
  const struct pbuf *q = p;
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	61bb      	str	r3, [r7, #24]
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 8016146:	68fb      	ldr	r3, [r7, #12]
 8016148:	891b      	ldrh	r3, [r3, #8]
 801614a:	4619      	mov	r1, r3
 801614c:	897a      	ldrh	r2, [r7, #10]
 801614e:	893b      	ldrh	r3, [r7, #8]
 8016150:	4413      	add	r3, r2
 8016152:	4299      	cmp	r1, r3
 8016154:	da0a      	bge.n	801616c <pbuf_memcmp+0x42>
    return 0xffff;
 8016156:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801615a:	e037      	b.n	80161cc <pbuf_memcmp+0xa2>
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
    start = (u16_t)(start - q->len);
 801615c:	69bb      	ldr	r3, [r7, #24]
 801615e:	895b      	ldrh	r3, [r3, #10]
 8016160:	8bfa      	ldrh	r2, [r7, #30]
 8016162:	1ad3      	subs	r3, r2, r3
 8016164:	83fb      	strh	r3, [r7, #30]
    q = q->next;
 8016166:	69bb      	ldr	r3, [r7, #24]
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	61bb      	str	r3, [r7, #24]
  while ((q != NULL) && (q->len <= start)) {
 801616c:	69bb      	ldr	r3, [r7, #24]
 801616e:	2b00      	cmp	r3, #0
 8016170:	d004      	beq.n	801617c <pbuf_memcmp+0x52>
 8016172:	69bb      	ldr	r3, [r7, #24]
 8016174:	895b      	ldrh	r3, [r3, #10]
 8016176:	8bfa      	ldrh	r2, [r7, #30]
 8016178:	429a      	cmp	r2, r3
 801617a:	d2ef      	bcs.n	801615c <pbuf_memcmp+0x32>
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 801617c:	2300      	movs	r3, #0
 801617e:	82fb      	strh	r3, [r7, #22]
 8016180:	e01f      	b.n	80161c2 <pbuf_memcmp+0x98>
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 8016182:	8bfa      	ldrh	r2, [r7, #30]
 8016184:	8afb      	ldrh	r3, [r7, #22]
 8016186:	4413      	add	r3, r2
 8016188:	b29b      	uxth	r3, r3
 801618a:	4619      	mov	r1, r3
 801618c:	69b8      	ldr	r0, [r7, #24]
 801618e:	f7ff ff93 	bl	80160b8 <pbuf_get_at>
 8016192:	4603      	mov	r3, r0
 8016194:	757b      	strb	r3, [r7, #21]
    u8_t b = ((const u8_t *)s2)[i];
 8016196:	8afb      	ldrh	r3, [r7, #22]
 8016198:	687a      	ldr	r2, [r7, #4]
 801619a:	4413      	add	r3, r2
 801619c:	781b      	ldrb	r3, [r3, #0]
 801619e:	753b      	strb	r3, [r7, #20]
    if (a != b) {
 80161a0:	7d7a      	ldrb	r2, [r7, #21]
 80161a2:	7d3b      	ldrb	r3, [r7, #20]
 80161a4:	429a      	cmp	r2, r3
 80161a6:	d009      	beq.n	80161bc <pbuf_memcmp+0x92>
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 80161a8:	8afb      	ldrh	r3, [r7, #22]
 80161aa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80161ae:	4293      	cmp	r3, r2
 80161b0:	bf28      	it	cs
 80161b2:	4613      	movcs	r3, r2
 80161b4:	b29b      	uxth	r3, r3
 80161b6:	3301      	adds	r3, #1
 80161b8:	b29b      	uxth	r3, r3
 80161ba:	e007      	b.n	80161cc <pbuf_memcmp+0xa2>
  for (i = 0; i < n; i++) {
 80161bc:	8afb      	ldrh	r3, [r7, #22]
 80161be:	3301      	adds	r3, #1
 80161c0:	82fb      	strh	r3, [r7, #22]
 80161c2:	8afa      	ldrh	r2, [r7, #22]
 80161c4:	893b      	ldrh	r3, [r7, #8]
 80161c6:	429a      	cmp	r2, r3
 80161c8:	d3db      	bcc.n	8016182 <pbuf_memcmp+0x58>
    }
  }
  return 0;
 80161ca:	2300      	movs	r3, #0
}
 80161cc:	4618      	mov	r0, r3
 80161ce:	3720      	adds	r7, #32
 80161d0:	46bd      	mov	sp, r7
 80161d2:	bd80      	pop	{r7, pc}

080161d4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80161d4:	b580      	push	{r7, lr}
 80161d6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80161d8:	f00a fd56 	bl	8020c88 <rand>
 80161dc:	4603      	mov	r3, r0
 80161de:	b29b      	uxth	r3, r3
 80161e0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80161e4:	b29b      	uxth	r3, r3
 80161e6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80161ea:	b29a      	uxth	r2, r3
 80161ec:	4b01      	ldr	r3, [pc, #4]	; (80161f4 <tcp_init+0x20>)
 80161ee:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80161f0:	bf00      	nop
 80161f2:	bd80      	pop	{r7, pc}
 80161f4:	24000424 	.word	0x24000424

080161f8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80161f8:	b580      	push	{r7, lr}
 80161fa:	b082      	sub	sp, #8
 80161fc:	af00      	add	r7, sp, #0
 80161fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	7d1b      	ldrb	r3, [r3, #20]
 8016204:	2b01      	cmp	r3, #1
 8016206:	d105      	bne.n	8016214 <tcp_free+0x1c>
 8016208:	4b06      	ldr	r3, [pc, #24]	; (8016224 <tcp_free+0x2c>)
 801620a:	22d4      	movs	r2, #212	; 0xd4
 801620c:	4906      	ldr	r1, [pc, #24]	; (8016228 <tcp_free+0x30>)
 801620e:	4807      	ldr	r0, [pc, #28]	; (801622c <tcp_free+0x34>)
 8016210:	f00a fcac 	bl	8020b6c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8016214:	6879      	ldr	r1, [r7, #4]
 8016216:	2001      	movs	r0, #1
 8016218:	f7fe fe20 	bl	8014e5c <memp_free>
}
 801621c:	bf00      	nop
 801621e:	3708      	adds	r7, #8
 8016220:	46bd      	mov	sp, r7
 8016222:	bd80      	pop	{r7, pc}
 8016224:	08027178 	.word	0x08027178
 8016228:	080271d4 	.word	0x080271d4
 801622c:	080271e8 	.word	0x080271e8

08016230 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8016230:	b580      	push	{r7, lr}
 8016232:	b082      	sub	sp, #8
 8016234:	af00      	add	r7, sp, #0
 8016236:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	7d1b      	ldrb	r3, [r3, #20]
 801623c:	2b01      	cmp	r3, #1
 801623e:	d105      	bne.n	801624c <tcp_free_listen+0x1c>
 8016240:	4b06      	ldr	r3, [pc, #24]	; (801625c <tcp_free_listen+0x2c>)
 8016242:	22df      	movs	r2, #223	; 0xdf
 8016244:	4906      	ldr	r1, [pc, #24]	; (8016260 <tcp_free_listen+0x30>)
 8016246:	4807      	ldr	r0, [pc, #28]	; (8016264 <tcp_free_listen+0x34>)
 8016248:	f00a fc90 	bl	8020b6c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801624c:	6879      	ldr	r1, [r7, #4]
 801624e:	2002      	movs	r0, #2
 8016250:	f7fe fe04 	bl	8014e5c <memp_free>
}
 8016254:	bf00      	nop
 8016256:	3708      	adds	r7, #8
 8016258:	46bd      	mov	sp, r7
 801625a:	bd80      	pop	{r7, pc}
 801625c:	08027178 	.word	0x08027178
 8016260:	08027210 	.word	0x08027210
 8016264:	080271e8 	.word	0x080271e8

08016268 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8016268:	b580      	push	{r7, lr}
 801626a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801626c:	f001 f974 	bl	8017558 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8016270:	4b07      	ldr	r3, [pc, #28]	; (8016290 <tcp_tmr+0x28>)
 8016272:	781b      	ldrb	r3, [r3, #0]
 8016274:	3301      	adds	r3, #1
 8016276:	b2da      	uxtb	r2, r3
 8016278:	4b05      	ldr	r3, [pc, #20]	; (8016290 <tcp_tmr+0x28>)
 801627a:	701a      	strb	r2, [r3, #0]
 801627c:	4b04      	ldr	r3, [pc, #16]	; (8016290 <tcp_tmr+0x28>)
 801627e:	781b      	ldrb	r3, [r3, #0]
 8016280:	f003 0301 	and.w	r3, r3, #1
 8016284:	2b00      	cmp	r3, #0
 8016286:	d001      	beq.n	801628c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8016288:	f000 fe26 	bl	8016ed8 <tcp_slowtmr>
  }
}
 801628c:	bf00      	nop
 801628e:	bd80      	pop	{r7, pc}
 8016290:	240057a1 	.word	0x240057a1

08016294 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8016294:	b580      	push	{r7, lr}
 8016296:	b084      	sub	sp, #16
 8016298:	af00      	add	r7, sp, #0
 801629a:	6078      	str	r0, [r7, #4]
 801629c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801629e:	683b      	ldr	r3, [r7, #0]
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d105      	bne.n	80162b0 <tcp_remove_listener+0x1c>
 80162a4:	4b0d      	ldr	r3, [pc, #52]	; (80162dc <tcp_remove_listener+0x48>)
 80162a6:	22ff      	movs	r2, #255	; 0xff
 80162a8:	490d      	ldr	r1, [pc, #52]	; (80162e0 <tcp_remove_listener+0x4c>)
 80162aa:	480e      	ldr	r0, [pc, #56]	; (80162e4 <tcp_remove_listener+0x50>)
 80162ac:	f00a fc5e 	bl	8020b6c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	60fb      	str	r3, [r7, #12]
 80162b4:	e00a      	b.n	80162cc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80162b6:	68fb      	ldr	r3, [r7, #12]
 80162b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80162ba:	683a      	ldr	r2, [r7, #0]
 80162bc:	429a      	cmp	r2, r3
 80162be:	d102      	bne.n	80162c6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80162c0:	68fb      	ldr	r3, [r7, #12]
 80162c2:	2200      	movs	r2, #0
 80162c4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80162c6:	68fb      	ldr	r3, [r7, #12]
 80162c8:	68db      	ldr	r3, [r3, #12]
 80162ca:	60fb      	str	r3, [r7, #12]
 80162cc:	68fb      	ldr	r3, [r7, #12]
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d1f1      	bne.n	80162b6 <tcp_remove_listener+0x22>
    }
  }
}
 80162d2:	bf00      	nop
 80162d4:	bf00      	nop
 80162d6:	3710      	adds	r7, #16
 80162d8:	46bd      	mov	sp, r7
 80162da:	bd80      	pop	{r7, pc}
 80162dc:	08027178 	.word	0x08027178
 80162e0:	0802722c 	.word	0x0802722c
 80162e4:	080271e8 	.word	0x080271e8

080162e8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80162e8:	b580      	push	{r7, lr}
 80162ea:	b084      	sub	sp, #16
 80162ec:	af00      	add	r7, sp, #0
 80162ee:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d106      	bne.n	8016304 <tcp_listen_closed+0x1c>
 80162f6:	4b14      	ldr	r3, [pc, #80]	; (8016348 <tcp_listen_closed+0x60>)
 80162f8:	f240 1211 	movw	r2, #273	; 0x111
 80162fc:	4913      	ldr	r1, [pc, #76]	; (801634c <tcp_listen_closed+0x64>)
 80162fe:	4814      	ldr	r0, [pc, #80]	; (8016350 <tcp_listen_closed+0x68>)
 8016300:	f00a fc34 	bl	8020b6c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	7d1b      	ldrb	r3, [r3, #20]
 8016308:	2b01      	cmp	r3, #1
 801630a:	d006      	beq.n	801631a <tcp_listen_closed+0x32>
 801630c:	4b0e      	ldr	r3, [pc, #56]	; (8016348 <tcp_listen_closed+0x60>)
 801630e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8016312:	4910      	ldr	r1, [pc, #64]	; (8016354 <tcp_listen_closed+0x6c>)
 8016314:	480e      	ldr	r0, [pc, #56]	; (8016350 <tcp_listen_closed+0x68>)
 8016316:	f00a fc29 	bl	8020b6c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801631a:	2301      	movs	r3, #1
 801631c:	60fb      	str	r3, [r7, #12]
 801631e:	e00b      	b.n	8016338 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8016320:	4a0d      	ldr	r2, [pc, #52]	; (8016358 <tcp_listen_closed+0x70>)
 8016322:	68fb      	ldr	r3, [r7, #12]
 8016324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016328:	681b      	ldr	r3, [r3, #0]
 801632a:	6879      	ldr	r1, [r7, #4]
 801632c:	4618      	mov	r0, r3
 801632e:	f7ff ffb1 	bl	8016294 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8016332:	68fb      	ldr	r3, [r7, #12]
 8016334:	3301      	adds	r3, #1
 8016336:	60fb      	str	r3, [r7, #12]
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	2b03      	cmp	r3, #3
 801633c:	d9f0      	bls.n	8016320 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801633e:	bf00      	nop
 8016340:	bf00      	nop
 8016342:	3710      	adds	r7, #16
 8016344:	46bd      	mov	sp, r7
 8016346:	bd80      	pop	{r7, pc}
 8016348:	08027178 	.word	0x08027178
 801634c:	08027254 	.word	0x08027254
 8016350:	080271e8 	.word	0x080271e8
 8016354:	08027260 	.word	0x08027260
 8016358:	08029224 	.word	0x08029224

0801635c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801635c:	b5b0      	push	{r4, r5, r7, lr}
 801635e:	b088      	sub	sp, #32
 8016360:	af04      	add	r7, sp, #16
 8016362:	6078      	str	r0, [r7, #4]
 8016364:	460b      	mov	r3, r1
 8016366:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	2b00      	cmp	r3, #0
 801636c:	d106      	bne.n	801637c <tcp_close_shutdown+0x20>
 801636e:	4b63      	ldr	r3, [pc, #396]	; (80164fc <tcp_close_shutdown+0x1a0>)
 8016370:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8016374:	4962      	ldr	r1, [pc, #392]	; (8016500 <tcp_close_shutdown+0x1a4>)
 8016376:	4863      	ldr	r0, [pc, #396]	; (8016504 <tcp_close_shutdown+0x1a8>)
 8016378:	f00a fbf8 	bl	8020b6c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801637c:	78fb      	ldrb	r3, [r7, #3]
 801637e:	2b00      	cmp	r3, #0
 8016380:	d066      	beq.n	8016450 <tcp_close_shutdown+0xf4>
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	7d1b      	ldrb	r3, [r3, #20]
 8016386:	2b04      	cmp	r3, #4
 8016388:	d003      	beq.n	8016392 <tcp_close_shutdown+0x36>
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	7d1b      	ldrb	r3, [r3, #20]
 801638e:	2b07      	cmp	r3, #7
 8016390:	d15e      	bne.n	8016450 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016396:	2b00      	cmp	r3, #0
 8016398:	d104      	bne.n	80163a4 <tcp_close_shutdown+0x48>
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801639e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80163a2:	d055      	beq.n	8016450 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	8b5b      	ldrh	r3, [r3, #26]
 80163a8:	f003 0310 	and.w	r3, r3, #16
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d106      	bne.n	80163be <tcp_close_shutdown+0x62>
 80163b0:	4b52      	ldr	r3, [pc, #328]	; (80164fc <tcp_close_shutdown+0x1a0>)
 80163b2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80163b6:	4954      	ldr	r1, [pc, #336]	; (8016508 <tcp_close_shutdown+0x1ac>)
 80163b8:	4852      	ldr	r0, [pc, #328]	; (8016504 <tcp_close_shutdown+0x1a8>)
 80163ba:	f00a fbd7 	bl	8020b6c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80163c6:	687d      	ldr	r5, [r7, #4]
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	3304      	adds	r3, #4
 80163cc:	687a      	ldr	r2, [r7, #4]
 80163ce:	8ad2      	ldrh	r2, [r2, #22]
 80163d0:	6879      	ldr	r1, [r7, #4]
 80163d2:	8b09      	ldrh	r1, [r1, #24]
 80163d4:	9102      	str	r1, [sp, #8]
 80163d6:	9201      	str	r2, [sp, #4]
 80163d8:	9300      	str	r3, [sp, #0]
 80163da:	462b      	mov	r3, r5
 80163dc:	4622      	mov	r2, r4
 80163de:	4601      	mov	r1, r0
 80163e0:	6878      	ldr	r0, [r7, #4]
 80163e2:	f005 fe85 	bl	801c0f0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80163e6:	6878      	ldr	r0, [r7, #4]
 80163e8:	f001 fc66 	bl	8017cb8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80163ec:	4b47      	ldr	r3, [pc, #284]	; (801650c <tcp_close_shutdown+0x1b0>)
 80163ee:	681b      	ldr	r3, [r3, #0]
 80163f0:	687a      	ldr	r2, [r7, #4]
 80163f2:	429a      	cmp	r2, r3
 80163f4:	d105      	bne.n	8016402 <tcp_close_shutdown+0xa6>
 80163f6:	4b45      	ldr	r3, [pc, #276]	; (801650c <tcp_close_shutdown+0x1b0>)
 80163f8:	681b      	ldr	r3, [r3, #0]
 80163fa:	68db      	ldr	r3, [r3, #12]
 80163fc:	4a43      	ldr	r2, [pc, #268]	; (801650c <tcp_close_shutdown+0x1b0>)
 80163fe:	6013      	str	r3, [r2, #0]
 8016400:	e013      	b.n	801642a <tcp_close_shutdown+0xce>
 8016402:	4b42      	ldr	r3, [pc, #264]	; (801650c <tcp_close_shutdown+0x1b0>)
 8016404:	681b      	ldr	r3, [r3, #0]
 8016406:	60fb      	str	r3, [r7, #12]
 8016408:	e00c      	b.n	8016424 <tcp_close_shutdown+0xc8>
 801640a:	68fb      	ldr	r3, [r7, #12]
 801640c:	68db      	ldr	r3, [r3, #12]
 801640e:	687a      	ldr	r2, [r7, #4]
 8016410:	429a      	cmp	r2, r3
 8016412:	d104      	bne.n	801641e <tcp_close_shutdown+0xc2>
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	68da      	ldr	r2, [r3, #12]
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	60da      	str	r2, [r3, #12]
 801641c:	e005      	b.n	801642a <tcp_close_shutdown+0xce>
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	68db      	ldr	r3, [r3, #12]
 8016422:	60fb      	str	r3, [r7, #12]
 8016424:	68fb      	ldr	r3, [r7, #12]
 8016426:	2b00      	cmp	r3, #0
 8016428:	d1ef      	bne.n	801640a <tcp_close_shutdown+0xae>
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	2200      	movs	r2, #0
 801642e:	60da      	str	r2, [r3, #12]
 8016430:	4b37      	ldr	r3, [pc, #220]	; (8016510 <tcp_close_shutdown+0x1b4>)
 8016432:	2201      	movs	r2, #1
 8016434:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8016436:	4b37      	ldr	r3, [pc, #220]	; (8016514 <tcp_close_shutdown+0x1b8>)
 8016438:	681b      	ldr	r3, [r3, #0]
 801643a:	687a      	ldr	r2, [r7, #4]
 801643c:	429a      	cmp	r2, r3
 801643e:	d102      	bne.n	8016446 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8016440:	f004 f8fa 	bl	801a638 <tcp_trigger_input_pcb_close>
 8016444:	e002      	b.n	801644c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8016446:	6878      	ldr	r0, [r7, #4]
 8016448:	f7ff fed6 	bl	80161f8 <tcp_free>
      }
      return ERR_OK;
 801644c:	2300      	movs	r3, #0
 801644e:	e050      	b.n	80164f2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	7d1b      	ldrb	r3, [r3, #20]
 8016454:	2b02      	cmp	r3, #2
 8016456:	d03b      	beq.n	80164d0 <tcp_close_shutdown+0x174>
 8016458:	2b02      	cmp	r3, #2
 801645a:	dc44      	bgt.n	80164e6 <tcp_close_shutdown+0x18a>
 801645c:	2b00      	cmp	r3, #0
 801645e:	d002      	beq.n	8016466 <tcp_close_shutdown+0x10a>
 8016460:	2b01      	cmp	r3, #1
 8016462:	d02a      	beq.n	80164ba <tcp_close_shutdown+0x15e>
 8016464:	e03f      	b.n	80164e6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	8adb      	ldrh	r3, [r3, #22]
 801646a:	2b00      	cmp	r3, #0
 801646c:	d021      	beq.n	80164b2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801646e:	4b2a      	ldr	r3, [pc, #168]	; (8016518 <tcp_close_shutdown+0x1bc>)
 8016470:	681b      	ldr	r3, [r3, #0]
 8016472:	687a      	ldr	r2, [r7, #4]
 8016474:	429a      	cmp	r2, r3
 8016476:	d105      	bne.n	8016484 <tcp_close_shutdown+0x128>
 8016478:	4b27      	ldr	r3, [pc, #156]	; (8016518 <tcp_close_shutdown+0x1bc>)
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	68db      	ldr	r3, [r3, #12]
 801647e:	4a26      	ldr	r2, [pc, #152]	; (8016518 <tcp_close_shutdown+0x1bc>)
 8016480:	6013      	str	r3, [r2, #0]
 8016482:	e013      	b.n	80164ac <tcp_close_shutdown+0x150>
 8016484:	4b24      	ldr	r3, [pc, #144]	; (8016518 <tcp_close_shutdown+0x1bc>)
 8016486:	681b      	ldr	r3, [r3, #0]
 8016488:	60bb      	str	r3, [r7, #8]
 801648a:	e00c      	b.n	80164a6 <tcp_close_shutdown+0x14a>
 801648c:	68bb      	ldr	r3, [r7, #8]
 801648e:	68db      	ldr	r3, [r3, #12]
 8016490:	687a      	ldr	r2, [r7, #4]
 8016492:	429a      	cmp	r2, r3
 8016494:	d104      	bne.n	80164a0 <tcp_close_shutdown+0x144>
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	68da      	ldr	r2, [r3, #12]
 801649a:	68bb      	ldr	r3, [r7, #8]
 801649c:	60da      	str	r2, [r3, #12]
 801649e:	e005      	b.n	80164ac <tcp_close_shutdown+0x150>
 80164a0:	68bb      	ldr	r3, [r7, #8]
 80164a2:	68db      	ldr	r3, [r3, #12]
 80164a4:	60bb      	str	r3, [r7, #8]
 80164a6:	68bb      	ldr	r3, [r7, #8]
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d1ef      	bne.n	801648c <tcp_close_shutdown+0x130>
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	2200      	movs	r2, #0
 80164b0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80164b2:	6878      	ldr	r0, [r7, #4]
 80164b4:	f7ff fea0 	bl	80161f8 <tcp_free>
      break;
 80164b8:	e01a      	b.n	80164f0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80164ba:	6878      	ldr	r0, [r7, #4]
 80164bc:	f7ff ff14 	bl	80162e8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80164c0:	6879      	ldr	r1, [r7, #4]
 80164c2:	4816      	ldr	r0, [pc, #88]	; (801651c <tcp_close_shutdown+0x1c0>)
 80164c4:	f001 fc48 	bl	8017d58 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80164c8:	6878      	ldr	r0, [r7, #4]
 80164ca:	f7ff feb1 	bl	8016230 <tcp_free_listen>
      break;
 80164ce:	e00f      	b.n	80164f0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80164d0:	6879      	ldr	r1, [r7, #4]
 80164d2:	480e      	ldr	r0, [pc, #56]	; (801650c <tcp_close_shutdown+0x1b0>)
 80164d4:	f001 fc40 	bl	8017d58 <tcp_pcb_remove>
 80164d8:	4b0d      	ldr	r3, [pc, #52]	; (8016510 <tcp_close_shutdown+0x1b4>)
 80164da:	2201      	movs	r2, #1
 80164dc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80164de:	6878      	ldr	r0, [r7, #4]
 80164e0:	f7ff fe8a 	bl	80161f8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80164e4:	e004      	b.n	80164f0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80164e6:	6878      	ldr	r0, [r7, #4]
 80164e8:	f000 f81a 	bl	8016520 <tcp_close_shutdown_fin>
 80164ec:	4603      	mov	r3, r0
 80164ee:	e000      	b.n	80164f2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80164f0:	2300      	movs	r3, #0
}
 80164f2:	4618      	mov	r0, r3
 80164f4:	3710      	adds	r7, #16
 80164f6:	46bd      	mov	sp, r7
 80164f8:	bdb0      	pop	{r4, r5, r7, pc}
 80164fa:	bf00      	nop
 80164fc:	08027178 	.word	0x08027178
 8016500:	08027278 	.word	0x08027278
 8016504:	080271e8 	.word	0x080271e8
 8016508:	08027298 	.word	0x08027298
 801650c:	24008e38 	.word	0x24008e38
 8016510:	24008e34 	.word	0x24008e34
 8016514:	24008e4c 	.word	0x24008e4c
 8016518:	24008e44 	.word	0x24008e44
 801651c:	24008e40 	.word	0x24008e40

08016520 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8016520:	b580      	push	{r7, lr}
 8016522:	b084      	sub	sp, #16
 8016524:	af00      	add	r7, sp, #0
 8016526:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	2b00      	cmp	r3, #0
 801652c:	d106      	bne.n	801653c <tcp_close_shutdown_fin+0x1c>
 801652e:	4b2e      	ldr	r3, [pc, #184]	; (80165e8 <tcp_close_shutdown_fin+0xc8>)
 8016530:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8016534:	492d      	ldr	r1, [pc, #180]	; (80165ec <tcp_close_shutdown_fin+0xcc>)
 8016536:	482e      	ldr	r0, [pc, #184]	; (80165f0 <tcp_close_shutdown_fin+0xd0>)
 8016538:	f00a fb18 	bl	8020b6c <iprintf>

  switch (pcb->state) {
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	7d1b      	ldrb	r3, [r3, #20]
 8016540:	2b07      	cmp	r3, #7
 8016542:	d020      	beq.n	8016586 <tcp_close_shutdown_fin+0x66>
 8016544:	2b07      	cmp	r3, #7
 8016546:	dc2b      	bgt.n	80165a0 <tcp_close_shutdown_fin+0x80>
 8016548:	2b03      	cmp	r3, #3
 801654a:	d002      	beq.n	8016552 <tcp_close_shutdown_fin+0x32>
 801654c:	2b04      	cmp	r3, #4
 801654e:	d00d      	beq.n	801656c <tcp_close_shutdown_fin+0x4c>
 8016550:	e026      	b.n	80165a0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8016552:	6878      	ldr	r0, [r7, #4]
 8016554:	f004 feda 	bl	801b30c <tcp_send_fin>
 8016558:	4603      	mov	r3, r0
 801655a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801655c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016560:	2b00      	cmp	r3, #0
 8016562:	d11f      	bne.n	80165a4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	2205      	movs	r2, #5
 8016568:	751a      	strb	r2, [r3, #20]
      }
      break;
 801656a:	e01b      	b.n	80165a4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801656c:	6878      	ldr	r0, [r7, #4]
 801656e:	f004 fecd 	bl	801b30c <tcp_send_fin>
 8016572:	4603      	mov	r3, r0
 8016574:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8016576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801657a:	2b00      	cmp	r3, #0
 801657c:	d114      	bne.n	80165a8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	2205      	movs	r2, #5
 8016582:	751a      	strb	r2, [r3, #20]
      }
      break;
 8016584:	e010      	b.n	80165a8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8016586:	6878      	ldr	r0, [r7, #4]
 8016588:	f004 fec0 	bl	801b30c <tcp_send_fin>
 801658c:	4603      	mov	r3, r0
 801658e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8016590:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016594:	2b00      	cmp	r3, #0
 8016596:	d109      	bne.n	80165ac <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	2209      	movs	r2, #9
 801659c:	751a      	strb	r2, [r3, #20]
      }
      break;
 801659e:	e005      	b.n	80165ac <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80165a0:	2300      	movs	r3, #0
 80165a2:	e01c      	b.n	80165de <tcp_close_shutdown_fin+0xbe>
      break;
 80165a4:	bf00      	nop
 80165a6:	e002      	b.n	80165ae <tcp_close_shutdown_fin+0x8e>
      break;
 80165a8:	bf00      	nop
 80165aa:	e000      	b.n	80165ae <tcp_close_shutdown_fin+0x8e>
      break;
 80165ac:	bf00      	nop
  }

  if (err == ERR_OK) {
 80165ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d103      	bne.n	80165be <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80165b6:	6878      	ldr	r0, [r7, #4]
 80165b8:	f004 ffe6 	bl	801b588 <tcp_output>
 80165bc:	e00d      	b.n	80165da <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80165be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80165c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80165c6:	d108      	bne.n	80165da <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	8b5b      	ldrh	r3, [r3, #26]
 80165cc:	f043 0308 	orr.w	r3, r3, #8
 80165d0:	b29a      	uxth	r2, r3
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80165d6:	2300      	movs	r3, #0
 80165d8:	e001      	b.n	80165de <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80165da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80165de:	4618      	mov	r0, r3
 80165e0:	3710      	adds	r7, #16
 80165e2:	46bd      	mov	sp, r7
 80165e4:	bd80      	pop	{r7, pc}
 80165e6:	bf00      	nop
 80165e8:	08027178 	.word	0x08027178
 80165ec:	08027254 	.word	0x08027254
 80165f0:	080271e8 	.word	0x080271e8

080165f4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80165f4:	b580      	push	{r7, lr}
 80165f6:	b082      	sub	sp, #8
 80165f8:	af00      	add	r7, sp, #0
 80165fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d109      	bne.n	8016616 <tcp_close+0x22>
 8016602:	4b0f      	ldr	r3, [pc, #60]	; (8016640 <tcp_close+0x4c>)
 8016604:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8016608:	490e      	ldr	r1, [pc, #56]	; (8016644 <tcp_close+0x50>)
 801660a:	480f      	ldr	r0, [pc, #60]	; (8016648 <tcp_close+0x54>)
 801660c:	f00a faae 	bl	8020b6c <iprintf>
 8016610:	f06f 030f 	mvn.w	r3, #15
 8016614:	e00f      	b.n	8016636 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	7d1b      	ldrb	r3, [r3, #20]
 801661a:	2b01      	cmp	r3, #1
 801661c:	d006      	beq.n	801662c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	8b5b      	ldrh	r3, [r3, #26]
 8016622:	f043 0310 	orr.w	r3, r3, #16
 8016626:	b29a      	uxth	r2, r3
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801662c:	2101      	movs	r1, #1
 801662e:	6878      	ldr	r0, [r7, #4]
 8016630:	f7ff fe94 	bl	801635c <tcp_close_shutdown>
 8016634:	4603      	mov	r3, r0
}
 8016636:	4618      	mov	r0, r3
 8016638:	3708      	adds	r7, #8
 801663a:	46bd      	mov	sp, r7
 801663c:	bd80      	pop	{r7, pc}
 801663e:	bf00      	nop
 8016640:	08027178 	.word	0x08027178
 8016644:	080272b4 	.word	0x080272b4
 8016648:	080271e8 	.word	0x080271e8

0801664c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801664c:	b580      	push	{r7, lr}
 801664e:	b08e      	sub	sp, #56	; 0x38
 8016650:	af04      	add	r7, sp, #16
 8016652:	6078      	str	r0, [r7, #4]
 8016654:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	2b00      	cmp	r3, #0
 801665a:	d107      	bne.n	801666c <tcp_abandon+0x20>
 801665c:	4b52      	ldr	r3, [pc, #328]	; (80167a8 <tcp_abandon+0x15c>)
 801665e:	f240 223d 	movw	r2, #573	; 0x23d
 8016662:	4952      	ldr	r1, [pc, #328]	; (80167ac <tcp_abandon+0x160>)
 8016664:	4852      	ldr	r0, [pc, #328]	; (80167b0 <tcp_abandon+0x164>)
 8016666:	f00a fa81 	bl	8020b6c <iprintf>
 801666a:	e099      	b.n	80167a0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	7d1b      	ldrb	r3, [r3, #20]
 8016670:	2b01      	cmp	r3, #1
 8016672:	d106      	bne.n	8016682 <tcp_abandon+0x36>
 8016674:	4b4c      	ldr	r3, [pc, #304]	; (80167a8 <tcp_abandon+0x15c>)
 8016676:	f44f 7210 	mov.w	r2, #576	; 0x240
 801667a:	494e      	ldr	r1, [pc, #312]	; (80167b4 <tcp_abandon+0x168>)
 801667c:	484c      	ldr	r0, [pc, #304]	; (80167b0 <tcp_abandon+0x164>)
 801667e:	f00a fa75 	bl	8020b6c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	7d1b      	ldrb	r3, [r3, #20]
 8016686:	2b0a      	cmp	r3, #10
 8016688:	d107      	bne.n	801669a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801668a:	6879      	ldr	r1, [r7, #4]
 801668c:	484a      	ldr	r0, [pc, #296]	; (80167b8 <tcp_abandon+0x16c>)
 801668e:	f001 fb63 	bl	8017d58 <tcp_pcb_remove>
    tcp_free(pcb);
 8016692:	6878      	ldr	r0, [r7, #4]
 8016694:	f7ff fdb0 	bl	80161f8 <tcp_free>
 8016698:	e082      	b.n	80167a0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801669a:	2300      	movs	r3, #0
 801669c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801669e:	2300      	movs	r3, #0
 80166a0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80166a6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80166ac:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80166b4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	691b      	ldr	r3, [r3, #16]
 80166ba:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	7d1b      	ldrb	r3, [r3, #20]
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	d126      	bne.n	8016712 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	8adb      	ldrh	r3, [r3, #22]
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	d02e      	beq.n	801672a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80166cc:	4b3b      	ldr	r3, [pc, #236]	; (80167bc <tcp_abandon+0x170>)
 80166ce:	681b      	ldr	r3, [r3, #0]
 80166d0:	687a      	ldr	r2, [r7, #4]
 80166d2:	429a      	cmp	r2, r3
 80166d4:	d105      	bne.n	80166e2 <tcp_abandon+0x96>
 80166d6:	4b39      	ldr	r3, [pc, #228]	; (80167bc <tcp_abandon+0x170>)
 80166d8:	681b      	ldr	r3, [r3, #0]
 80166da:	68db      	ldr	r3, [r3, #12]
 80166dc:	4a37      	ldr	r2, [pc, #220]	; (80167bc <tcp_abandon+0x170>)
 80166de:	6013      	str	r3, [r2, #0]
 80166e0:	e013      	b.n	801670a <tcp_abandon+0xbe>
 80166e2:	4b36      	ldr	r3, [pc, #216]	; (80167bc <tcp_abandon+0x170>)
 80166e4:	681b      	ldr	r3, [r3, #0]
 80166e6:	61fb      	str	r3, [r7, #28]
 80166e8:	e00c      	b.n	8016704 <tcp_abandon+0xb8>
 80166ea:	69fb      	ldr	r3, [r7, #28]
 80166ec:	68db      	ldr	r3, [r3, #12]
 80166ee:	687a      	ldr	r2, [r7, #4]
 80166f0:	429a      	cmp	r2, r3
 80166f2:	d104      	bne.n	80166fe <tcp_abandon+0xb2>
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	68da      	ldr	r2, [r3, #12]
 80166f8:	69fb      	ldr	r3, [r7, #28]
 80166fa:	60da      	str	r2, [r3, #12]
 80166fc:	e005      	b.n	801670a <tcp_abandon+0xbe>
 80166fe:	69fb      	ldr	r3, [r7, #28]
 8016700:	68db      	ldr	r3, [r3, #12]
 8016702:	61fb      	str	r3, [r7, #28]
 8016704:	69fb      	ldr	r3, [r7, #28]
 8016706:	2b00      	cmp	r3, #0
 8016708:	d1ef      	bne.n	80166ea <tcp_abandon+0x9e>
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	2200      	movs	r2, #0
 801670e:	60da      	str	r2, [r3, #12]
 8016710:	e00b      	b.n	801672a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8016712:	683b      	ldr	r3, [r7, #0]
 8016714:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	8adb      	ldrh	r3, [r3, #22]
 801671a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801671c:	6879      	ldr	r1, [r7, #4]
 801671e:	4828      	ldr	r0, [pc, #160]	; (80167c0 <tcp_abandon+0x174>)
 8016720:	f001 fb1a 	bl	8017d58 <tcp_pcb_remove>
 8016724:	4b27      	ldr	r3, [pc, #156]	; (80167c4 <tcp_abandon+0x178>)
 8016726:	2201      	movs	r2, #1
 8016728:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801672e:	2b00      	cmp	r3, #0
 8016730:	d004      	beq.n	801673c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016736:	4618      	mov	r0, r3
 8016738:	f000 ffee 	bl	8017718 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016740:	2b00      	cmp	r3, #0
 8016742:	d004      	beq.n	801674e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016748:	4618      	mov	r0, r3
 801674a:	f000 ffe5 	bl	8017718 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016752:	2b00      	cmp	r3, #0
 8016754:	d004      	beq.n	8016760 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801675a:	4618      	mov	r0, r3
 801675c:	f000 ffdc 	bl	8017718 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8016760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016762:	2b00      	cmp	r3, #0
 8016764:	d00e      	beq.n	8016784 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8016766:	6879      	ldr	r1, [r7, #4]
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	3304      	adds	r3, #4
 801676c:	687a      	ldr	r2, [r7, #4]
 801676e:	8b12      	ldrh	r2, [r2, #24]
 8016770:	9202      	str	r2, [sp, #8]
 8016772:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016774:	9201      	str	r2, [sp, #4]
 8016776:	9300      	str	r3, [sp, #0]
 8016778:	460b      	mov	r3, r1
 801677a:	697a      	ldr	r2, [r7, #20]
 801677c:	69b9      	ldr	r1, [r7, #24]
 801677e:	6878      	ldr	r0, [r7, #4]
 8016780:	f005 fcb6 	bl	801c0f0 <tcp_rst>
    }
    last_state = pcb->state;
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	7d1b      	ldrb	r3, [r3, #20]
 8016788:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801678a:	6878      	ldr	r0, [r7, #4]
 801678c:	f7ff fd34 	bl	80161f8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8016790:	693b      	ldr	r3, [r7, #16]
 8016792:	2b00      	cmp	r3, #0
 8016794:	d004      	beq.n	80167a0 <tcp_abandon+0x154>
 8016796:	693b      	ldr	r3, [r7, #16]
 8016798:	f06f 010c 	mvn.w	r1, #12
 801679c:	68f8      	ldr	r0, [r7, #12]
 801679e:	4798      	blx	r3
  }
}
 80167a0:	3728      	adds	r7, #40	; 0x28
 80167a2:	46bd      	mov	sp, r7
 80167a4:	bd80      	pop	{r7, pc}
 80167a6:	bf00      	nop
 80167a8:	08027178 	.word	0x08027178
 80167ac:	080272e8 	.word	0x080272e8
 80167b0:	080271e8 	.word	0x080271e8
 80167b4:	08027304 	.word	0x08027304
 80167b8:	24008e48 	.word	0x24008e48
 80167bc:	24008e44 	.word	0x24008e44
 80167c0:	24008e38 	.word	0x24008e38
 80167c4:	24008e34 	.word	0x24008e34

080167c8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80167c8:	b580      	push	{r7, lr}
 80167ca:	b082      	sub	sp, #8
 80167cc:	af00      	add	r7, sp, #0
 80167ce:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80167d0:	2101      	movs	r1, #1
 80167d2:	6878      	ldr	r0, [r7, #4]
 80167d4:	f7ff ff3a 	bl	801664c <tcp_abandon>
}
 80167d8:	bf00      	nop
 80167da:	3708      	adds	r7, #8
 80167dc:	46bd      	mov	sp, r7
 80167de:	bd80      	pop	{r7, pc}

080167e0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80167e0:	b580      	push	{r7, lr}
 80167e2:	b088      	sub	sp, #32
 80167e4:	af00      	add	r7, sp, #0
 80167e6:	60f8      	str	r0, [r7, #12]
 80167e8:	60b9      	str	r1, [r7, #8]
 80167ea:	4613      	mov	r3, r2
 80167ec:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80167ee:	2304      	movs	r3, #4
 80167f0:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80167f2:	68bb      	ldr	r3, [r7, #8]
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d101      	bne.n	80167fc <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80167f8:	4b3e      	ldr	r3, [pc, #248]	; (80168f4 <tcp_bind+0x114>)
 80167fa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80167fc:	68fb      	ldr	r3, [r7, #12]
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d109      	bne.n	8016816 <tcp_bind+0x36>
 8016802:	4b3d      	ldr	r3, [pc, #244]	; (80168f8 <tcp_bind+0x118>)
 8016804:	f240 22a9 	movw	r2, #681	; 0x2a9
 8016808:	493c      	ldr	r1, [pc, #240]	; (80168fc <tcp_bind+0x11c>)
 801680a:	483d      	ldr	r0, [pc, #244]	; (8016900 <tcp_bind+0x120>)
 801680c:	f00a f9ae 	bl	8020b6c <iprintf>
 8016810:	f06f 030f 	mvn.w	r3, #15
 8016814:	e06a      	b.n	80168ec <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8016816:	68fb      	ldr	r3, [r7, #12]
 8016818:	7d1b      	ldrb	r3, [r3, #20]
 801681a:	2b00      	cmp	r3, #0
 801681c:	d009      	beq.n	8016832 <tcp_bind+0x52>
 801681e:	4b36      	ldr	r3, [pc, #216]	; (80168f8 <tcp_bind+0x118>)
 8016820:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016824:	4937      	ldr	r1, [pc, #220]	; (8016904 <tcp_bind+0x124>)
 8016826:	4836      	ldr	r0, [pc, #216]	; (8016900 <tcp_bind+0x120>)
 8016828:	f00a f9a0 	bl	8020b6c <iprintf>
 801682c:	f06f 0305 	mvn.w	r3, #5
 8016830:	e05c      	b.n	80168ec <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8016832:	88fb      	ldrh	r3, [r7, #6]
 8016834:	2b00      	cmp	r3, #0
 8016836:	d109      	bne.n	801684c <tcp_bind+0x6c>
    port = tcp_new_port();
 8016838:	f000 f9f0 	bl	8016c1c <tcp_new_port>
 801683c:	4603      	mov	r3, r0
 801683e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8016840:	88fb      	ldrh	r3, [r7, #6]
 8016842:	2b00      	cmp	r3, #0
 8016844:	d135      	bne.n	80168b2 <tcp_bind+0xd2>
      return ERR_BUF;
 8016846:	f06f 0301 	mvn.w	r3, #1
 801684a:	e04f      	b.n	80168ec <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 801684c:	2300      	movs	r3, #0
 801684e:	61fb      	str	r3, [r7, #28]
 8016850:	e02b      	b.n	80168aa <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8016852:	4a2d      	ldr	r2, [pc, #180]	; (8016908 <tcp_bind+0x128>)
 8016854:	69fb      	ldr	r3, [r7, #28]
 8016856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801685a:	681b      	ldr	r3, [r3, #0]
 801685c:	61bb      	str	r3, [r7, #24]
 801685e:	e01e      	b.n	801689e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8016860:	69bb      	ldr	r3, [r7, #24]
 8016862:	8adb      	ldrh	r3, [r3, #22]
 8016864:	88fa      	ldrh	r2, [r7, #6]
 8016866:	429a      	cmp	r2, r3
 8016868:	d116      	bne.n	8016898 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801686a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801686c:	2b00      	cmp	r3, #0
 801686e:	d010      	beq.n	8016892 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8016870:	69bb      	ldr	r3, [r7, #24]
 8016872:	681b      	ldr	r3, [r3, #0]
 8016874:	2b00      	cmp	r3, #0
 8016876:	d00c      	beq.n	8016892 <tcp_bind+0xb2>
 8016878:	68bb      	ldr	r3, [r7, #8]
 801687a:	2b00      	cmp	r3, #0
 801687c:	d009      	beq.n	8016892 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 801687e:	68bb      	ldr	r3, [r7, #8]
 8016880:	681b      	ldr	r3, [r3, #0]
 8016882:	2b00      	cmp	r3, #0
 8016884:	d005      	beq.n	8016892 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8016886:	69bb      	ldr	r3, [r7, #24]
 8016888:	681a      	ldr	r2, [r3, #0]
 801688a:	68bb      	ldr	r3, [r7, #8]
 801688c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801688e:	429a      	cmp	r2, r3
 8016890:	d102      	bne.n	8016898 <tcp_bind+0xb8>
              return ERR_USE;
 8016892:	f06f 0307 	mvn.w	r3, #7
 8016896:	e029      	b.n	80168ec <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8016898:	69bb      	ldr	r3, [r7, #24]
 801689a:	68db      	ldr	r3, [r3, #12]
 801689c:	61bb      	str	r3, [r7, #24]
 801689e:	69bb      	ldr	r3, [r7, #24]
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	d1dd      	bne.n	8016860 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 80168a4:	69fb      	ldr	r3, [r7, #28]
 80168a6:	3301      	adds	r3, #1
 80168a8:	61fb      	str	r3, [r7, #28]
 80168aa:	69fa      	ldr	r2, [r7, #28]
 80168ac:	697b      	ldr	r3, [r7, #20]
 80168ae:	429a      	cmp	r2, r3
 80168b0:	dbcf      	blt.n	8016852 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80168b2:	68bb      	ldr	r3, [r7, #8]
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d00c      	beq.n	80168d2 <tcp_bind+0xf2>
 80168b8:	68bb      	ldr	r3, [r7, #8]
 80168ba:	681b      	ldr	r3, [r3, #0]
 80168bc:	2b00      	cmp	r3, #0
 80168be:	d008      	beq.n	80168d2 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80168c0:	68bb      	ldr	r3, [r7, #8]
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	d002      	beq.n	80168cc <tcp_bind+0xec>
 80168c6:	68bb      	ldr	r3, [r7, #8]
 80168c8:	681b      	ldr	r3, [r3, #0]
 80168ca:	e000      	b.n	80168ce <tcp_bind+0xee>
 80168cc:	2300      	movs	r3, #0
 80168ce:	68fa      	ldr	r2, [r7, #12]
 80168d0:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80168d2:	68fb      	ldr	r3, [r7, #12]
 80168d4:	88fa      	ldrh	r2, [r7, #6]
 80168d6:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80168d8:	4b0c      	ldr	r3, [pc, #48]	; (801690c <tcp_bind+0x12c>)
 80168da:	681a      	ldr	r2, [r3, #0]
 80168dc:	68fb      	ldr	r3, [r7, #12]
 80168de:	60da      	str	r2, [r3, #12]
 80168e0:	4a0a      	ldr	r2, [pc, #40]	; (801690c <tcp_bind+0x12c>)
 80168e2:	68fb      	ldr	r3, [r7, #12]
 80168e4:	6013      	str	r3, [r2, #0]
 80168e6:	f005 fdc5 	bl	801c474 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80168ea:	2300      	movs	r3, #0
}
 80168ec:	4618      	mov	r0, r3
 80168ee:	3720      	adds	r7, #32
 80168f0:	46bd      	mov	sp, r7
 80168f2:	bd80      	pop	{r7, pc}
 80168f4:	08029178 	.word	0x08029178
 80168f8:	08027178 	.word	0x08027178
 80168fc:	08027338 	.word	0x08027338
 8016900:	080271e8 	.word	0x080271e8
 8016904:	08027350 	.word	0x08027350
 8016908:	08029224 	.word	0x08029224
 801690c:	24008e44 	.word	0x24008e44

08016910 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8016910:	b580      	push	{r7, lr}
 8016912:	b084      	sub	sp, #16
 8016914:	af00      	add	r7, sp, #0
 8016916:	60f8      	str	r0, [r7, #12]
 8016918:	60b9      	str	r1, [r7, #8]
 801691a:	4613      	mov	r3, r2
 801691c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801691e:	68bb      	ldr	r3, [r7, #8]
 8016920:	2b00      	cmp	r3, #0
 8016922:	d106      	bne.n	8016932 <tcp_accept_null+0x22>
 8016924:	4b07      	ldr	r3, [pc, #28]	; (8016944 <tcp_accept_null+0x34>)
 8016926:	f240 320f 	movw	r2, #783	; 0x30f
 801692a:	4907      	ldr	r1, [pc, #28]	; (8016948 <tcp_accept_null+0x38>)
 801692c:	4807      	ldr	r0, [pc, #28]	; (801694c <tcp_accept_null+0x3c>)
 801692e:	f00a f91d 	bl	8020b6c <iprintf>

  tcp_abort(pcb);
 8016932:	68b8      	ldr	r0, [r7, #8]
 8016934:	f7ff ff48 	bl	80167c8 <tcp_abort>

  return ERR_ABRT;
 8016938:	f06f 030c 	mvn.w	r3, #12
}
 801693c:	4618      	mov	r0, r3
 801693e:	3710      	adds	r7, #16
 8016940:	46bd      	mov	sp, r7
 8016942:	bd80      	pop	{r7, pc}
 8016944:	08027178 	.word	0x08027178
 8016948:	08027378 	.word	0x08027378
 801694c:	080271e8 	.word	0x080271e8

08016950 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8016950:	b580      	push	{r7, lr}
 8016952:	b082      	sub	sp, #8
 8016954:	af00      	add	r7, sp, #0
 8016956:	6078      	str	r0, [r7, #4]
 8016958:	460b      	mov	r3, r1
 801695a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 801695c:	78fb      	ldrb	r3, [r7, #3]
 801695e:	2200      	movs	r2, #0
 8016960:	4619      	mov	r1, r3
 8016962:	6878      	ldr	r0, [r7, #4]
 8016964:	f000 f806 	bl	8016974 <tcp_listen_with_backlog_and_err>
 8016968:	4603      	mov	r3, r0
}
 801696a:	4618      	mov	r0, r3
 801696c:	3708      	adds	r7, #8
 801696e:	46bd      	mov	sp, r7
 8016970:	bd80      	pop	{r7, pc}
	...

08016974 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8016974:	b580      	push	{r7, lr}
 8016976:	b088      	sub	sp, #32
 8016978:	af00      	add	r7, sp, #0
 801697a:	60f8      	str	r0, [r7, #12]
 801697c:	460b      	mov	r3, r1
 801697e:	607a      	str	r2, [r7, #4]
 8016980:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8016982:	2300      	movs	r3, #0
 8016984:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	2b00      	cmp	r3, #0
 801698a:	d109      	bne.n	80169a0 <tcp_listen_with_backlog_and_err+0x2c>
 801698c:	4b47      	ldr	r3, [pc, #284]	; (8016aac <tcp_listen_with_backlog_and_err+0x138>)
 801698e:	f240 3259 	movw	r2, #857	; 0x359
 8016992:	4947      	ldr	r1, [pc, #284]	; (8016ab0 <tcp_listen_with_backlog_and_err+0x13c>)
 8016994:	4847      	ldr	r0, [pc, #284]	; (8016ab4 <tcp_listen_with_backlog_and_err+0x140>)
 8016996:	f00a f8e9 	bl	8020b6c <iprintf>
 801699a:	23f0      	movs	r3, #240	; 0xf0
 801699c:	76fb      	strb	r3, [r7, #27]
 801699e:	e079      	b.n	8016a94 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80169a0:	68fb      	ldr	r3, [r7, #12]
 80169a2:	7d1b      	ldrb	r3, [r3, #20]
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d009      	beq.n	80169bc <tcp_listen_with_backlog_and_err+0x48>
 80169a8:	4b40      	ldr	r3, [pc, #256]	; (8016aac <tcp_listen_with_backlog_and_err+0x138>)
 80169aa:	f240 325a 	movw	r2, #858	; 0x35a
 80169ae:	4942      	ldr	r1, [pc, #264]	; (8016ab8 <tcp_listen_with_backlog_and_err+0x144>)
 80169b0:	4840      	ldr	r0, [pc, #256]	; (8016ab4 <tcp_listen_with_backlog_and_err+0x140>)
 80169b2:	f00a f8db 	bl	8020b6c <iprintf>
 80169b6:	23f1      	movs	r3, #241	; 0xf1
 80169b8:	76fb      	strb	r3, [r7, #27]
 80169ba:	e06b      	b.n	8016a94 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80169bc:	68fb      	ldr	r3, [r7, #12]
 80169be:	7d1b      	ldrb	r3, [r3, #20]
 80169c0:	2b01      	cmp	r3, #1
 80169c2:	d104      	bne.n	80169ce <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80169c8:	23f7      	movs	r3, #247	; 0xf7
 80169ca:	76fb      	strb	r3, [r7, #27]
    goto done;
 80169cc:	e062      	b.n	8016a94 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80169ce:	2002      	movs	r0, #2
 80169d0:	f7fe f9d4 	bl	8014d7c <memp_malloc>
 80169d4:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80169d6:	69fb      	ldr	r3, [r7, #28]
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d102      	bne.n	80169e2 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 80169dc:	23ff      	movs	r3, #255	; 0xff
 80169de:	76fb      	strb	r3, [r7, #27]
    goto done;
 80169e0:	e058      	b.n	8016a94 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80169e2:	68fb      	ldr	r3, [r7, #12]
 80169e4:	691a      	ldr	r2, [r3, #16]
 80169e6:	69fb      	ldr	r3, [r7, #28]
 80169e8:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80169ea:	68fb      	ldr	r3, [r7, #12]
 80169ec:	8ada      	ldrh	r2, [r3, #22]
 80169ee:	69fb      	ldr	r3, [r7, #28]
 80169f0:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80169f2:	69fb      	ldr	r3, [r7, #28]
 80169f4:	2201      	movs	r2, #1
 80169f6:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80169f8:	68fb      	ldr	r3, [r7, #12]
 80169fa:	7d5a      	ldrb	r2, [r3, #21]
 80169fc:	69fb      	ldr	r3, [r7, #28]
 80169fe:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8016a00:	68fb      	ldr	r3, [r7, #12]
 8016a02:	7a5a      	ldrb	r2, [r3, #9]
 8016a04:	69fb      	ldr	r3, [r7, #28]
 8016a06:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8016a08:	69fb      	ldr	r3, [r7, #28]
 8016a0a:	2200      	movs	r2, #0
 8016a0c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8016a0e:	68fb      	ldr	r3, [r7, #12]
 8016a10:	7ada      	ldrb	r2, [r3, #11]
 8016a12:	69fb      	ldr	r3, [r7, #28]
 8016a14:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8016a16:	68fb      	ldr	r3, [r7, #12]
 8016a18:	7a9a      	ldrb	r2, [r3, #10]
 8016a1a:	69fb      	ldr	r3, [r7, #28]
 8016a1c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8016a1e:	68fb      	ldr	r3, [r7, #12]
 8016a20:	681a      	ldr	r2, [r3, #0]
 8016a22:	69fb      	ldr	r3, [r7, #28]
 8016a24:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8016a26:	68fb      	ldr	r3, [r7, #12]
 8016a28:	8adb      	ldrh	r3, [r3, #22]
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	d021      	beq.n	8016a72 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8016a2e:	4b23      	ldr	r3, [pc, #140]	; (8016abc <tcp_listen_with_backlog_and_err+0x148>)
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	68fa      	ldr	r2, [r7, #12]
 8016a34:	429a      	cmp	r2, r3
 8016a36:	d105      	bne.n	8016a44 <tcp_listen_with_backlog_and_err+0xd0>
 8016a38:	4b20      	ldr	r3, [pc, #128]	; (8016abc <tcp_listen_with_backlog_and_err+0x148>)
 8016a3a:	681b      	ldr	r3, [r3, #0]
 8016a3c:	68db      	ldr	r3, [r3, #12]
 8016a3e:	4a1f      	ldr	r2, [pc, #124]	; (8016abc <tcp_listen_with_backlog_and_err+0x148>)
 8016a40:	6013      	str	r3, [r2, #0]
 8016a42:	e013      	b.n	8016a6c <tcp_listen_with_backlog_and_err+0xf8>
 8016a44:	4b1d      	ldr	r3, [pc, #116]	; (8016abc <tcp_listen_with_backlog_and_err+0x148>)
 8016a46:	681b      	ldr	r3, [r3, #0]
 8016a48:	617b      	str	r3, [r7, #20]
 8016a4a:	e00c      	b.n	8016a66 <tcp_listen_with_backlog_and_err+0xf2>
 8016a4c:	697b      	ldr	r3, [r7, #20]
 8016a4e:	68db      	ldr	r3, [r3, #12]
 8016a50:	68fa      	ldr	r2, [r7, #12]
 8016a52:	429a      	cmp	r2, r3
 8016a54:	d104      	bne.n	8016a60 <tcp_listen_with_backlog_and_err+0xec>
 8016a56:	68fb      	ldr	r3, [r7, #12]
 8016a58:	68da      	ldr	r2, [r3, #12]
 8016a5a:	697b      	ldr	r3, [r7, #20]
 8016a5c:	60da      	str	r2, [r3, #12]
 8016a5e:	e005      	b.n	8016a6c <tcp_listen_with_backlog_and_err+0xf8>
 8016a60:	697b      	ldr	r3, [r7, #20]
 8016a62:	68db      	ldr	r3, [r3, #12]
 8016a64:	617b      	str	r3, [r7, #20]
 8016a66:	697b      	ldr	r3, [r7, #20]
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	d1ef      	bne.n	8016a4c <tcp_listen_with_backlog_and_err+0xd8>
 8016a6c:	68fb      	ldr	r3, [r7, #12]
 8016a6e:	2200      	movs	r2, #0
 8016a70:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8016a72:	68f8      	ldr	r0, [r7, #12]
 8016a74:	f7ff fbc0 	bl	80161f8 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8016a78:	69fb      	ldr	r3, [r7, #28]
 8016a7a:	4a11      	ldr	r2, [pc, #68]	; (8016ac0 <tcp_listen_with_backlog_and_err+0x14c>)
 8016a7c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8016a7e:	4b11      	ldr	r3, [pc, #68]	; (8016ac4 <tcp_listen_with_backlog_and_err+0x150>)
 8016a80:	681a      	ldr	r2, [r3, #0]
 8016a82:	69fb      	ldr	r3, [r7, #28]
 8016a84:	60da      	str	r2, [r3, #12]
 8016a86:	4a0f      	ldr	r2, [pc, #60]	; (8016ac4 <tcp_listen_with_backlog_and_err+0x150>)
 8016a88:	69fb      	ldr	r3, [r7, #28]
 8016a8a:	6013      	str	r3, [r2, #0]
 8016a8c:	f005 fcf2 	bl	801c474 <tcp_timer_needed>
  res = ERR_OK;
 8016a90:	2300      	movs	r3, #0
 8016a92:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d002      	beq.n	8016aa0 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	7efa      	ldrb	r2, [r7, #27]
 8016a9e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8016aa0:	69fb      	ldr	r3, [r7, #28]
}
 8016aa2:	4618      	mov	r0, r3
 8016aa4:	3720      	adds	r7, #32
 8016aa6:	46bd      	mov	sp, r7
 8016aa8:	bd80      	pop	{r7, pc}
 8016aaa:	bf00      	nop
 8016aac:	08027178 	.word	0x08027178
 8016ab0:	08027398 	.word	0x08027398
 8016ab4:	080271e8 	.word	0x080271e8
 8016ab8:	080273c8 	.word	0x080273c8
 8016abc:	24008e44 	.word	0x24008e44
 8016ac0:	08016911 	.word	0x08016911
 8016ac4:	24008e40 	.word	0x24008e40

08016ac8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8016ac8:	b580      	push	{r7, lr}
 8016aca:	b084      	sub	sp, #16
 8016acc:	af00      	add	r7, sp, #0
 8016ace:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d106      	bne.n	8016ae4 <tcp_update_rcv_ann_wnd+0x1c>
 8016ad6:	4b25      	ldr	r3, [pc, #148]	; (8016b6c <tcp_update_rcv_ann_wnd+0xa4>)
 8016ad8:	f240 32a6 	movw	r2, #934	; 0x3a6
 8016adc:	4924      	ldr	r1, [pc, #144]	; (8016b70 <tcp_update_rcv_ann_wnd+0xa8>)
 8016ade:	4825      	ldr	r0, [pc, #148]	; (8016b74 <tcp_update_rcv_ann_wnd+0xac>)
 8016ae0:	f00a f844 	bl	8020b6c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ae8:	687a      	ldr	r2, [r7, #4]
 8016aea:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8016aec:	4413      	add	r3, r2
 8016aee:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016af4:	687a      	ldr	r2, [r7, #4]
 8016af6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8016af8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8016afc:	bf28      	it	cs
 8016afe:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8016b02:	b292      	uxth	r2, r2
 8016b04:	4413      	add	r3, r2
 8016b06:	68fa      	ldr	r2, [r7, #12]
 8016b08:	1ad3      	subs	r3, r2, r3
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	db08      	blt.n	8016b20 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b1a:	68fa      	ldr	r2, [r7, #12]
 8016b1c:	1ad3      	subs	r3, r2, r3
 8016b1e:	e020      	b.n	8016b62 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b28:	1ad3      	subs	r3, r2, r3
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	dd03      	ble.n	8016b36 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	2200      	movs	r2, #0
 8016b32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016b34:	e014      	b.n	8016b60 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b3e:	1ad3      	subs	r3, r2, r3
 8016b40:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8016b42:	68bb      	ldr	r3, [r7, #8]
 8016b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016b48:	d306      	bcc.n	8016b58 <tcp_update_rcv_ann_wnd+0x90>
 8016b4a:	4b08      	ldr	r3, [pc, #32]	; (8016b6c <tcp_update_rcv_ann_wnd+0xa4>)
 8016b4c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8016b50:	4909      	ldr	r1, [pc, #36]	; (8016b78 <tcp_update_rcv_ann_wnd+0xb0>)
 8016b52:	4808      	ldr	r0, [pc, #32]	; (8016b74 <tcp_update_rcv_ann_wnd+0xac>)
 8016b54:	f00a f80a 	bl	8020b6c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8016b58:	68bb      	ldr	r3, [r7, #8]
 8016b5a:	b29a      	uxth	r2, r3
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8016b60:	2300      	movs	r3, #0
  }
}
 8016b62:	4618      	mov	r0, r3
 8016b64:	3710      	adds	r7, #16
 8016b66:	46bd      	mov	sp, r7
 8016b68:	bd80      	pop	{r7, pc}
 8016b6a:	bf00      	nop
 8016b6c:	08027178 	.word	0x08027178
 8016b70:	08027400 	.word	0x08027400
 8016b74:	080271e8 	.word	0x080271e8
 8016b78:	08027424 	.word	0x08027424

08016b7c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8016b7c:	b580      	push	{r7, lr}
 8016b7e:	b084      	sub	sp, #16
 8016b80:	af00      	add	r7, sp, #0
 8016b82:	6078      	str	r0, [r7, #4]
 8016b84:	460b      	mov	r3, r1
 8016b86:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	d107      	bne.n	8016b9e <tcp_recved+0x22>
 8016b8e:	4b1f      	ldr	r3, [pc, #124]	; (8016c0c <tcp_recved+0x90>)
 8016b90:	f240 32cf 	movw	r2, #975	; 0x3cf
 8016b94:	491e      	ldr	r1, [pc, #120]	; (8016c10 <tcp_recved+0x94>)
 8016b96:	481f      	ldr	r0, [pc, #124]	; (8016c14 <tcp_recved+0x98>)
 8016b98:	f009 ffe8 	bl	8020b6c <iprintf>
 8016b9c:	e032      	b.n	8016c04 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	7d1b      	ldrb	r3, [r3, #20]
 8016ba2:	2b01      	cmp	r3, #1
 8016ba4:	d106      	bne.n	8016bb4 <tcp_recved+0x38>
 8016ba6:	4b19      	ldr	r3, [pc, #100]	; (8016c0c <tcp_recved+0x90>)
 8016ba8:	f240 32d2 	movw	r2, #978	; 0x3d2
 8016bac:	491a      	ldr	r1, [pc, #104]	; (8016c18 <tcp_recved+0x9c>)
 8016bae:	4819      	ldr	r0, [pc, #100]	; (8016c14 <tcp_recved+0x98>)
 8016bb0:	f009 ffdc 	bl	8020b6c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016bb8:	887b      	ldrh	r3, [r7, #2]
 8016bba:	4413      	add	r3, r2
 8016bbc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8016bbe:	89fb      	ldrh	r3, [r7, #14]
 8016bc0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8016bc4:	d804      	bhi.n	8016bd0 <tcp_recved+0x54>
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016bca:	89fa      	ldrh	r2, [r7, #14]
 8016bcc:	429a      	cmp	r2, r3
 8016bce:	d204      	bcs.n	8016bda <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8016bd6:	851a      	strh	r2, [r3, #40]	; 0x28
 8016bd8:	e002      	b.n	8016be0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	89fa      	ldrh	r2, [r7, #14]
 8016bde:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8016be0:	6878      	ldr	r0, [r7, #4]
 8016be2:	f7ff ff71 	bl	8016ac8 <tcp_update_rcv_ann_wnd>
 8016be6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8016be8:	68bb      	ldr	r3, [r7, #8]
 8016bea:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8016bee:	d309      	bcc.n	8016c04 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	8b5b      	ldrh	r3, [r3, #26]
 8016bf4:	f043 0302 	orr.w	r3, r3, #2
 8016bf8:	b29a      	uxth	r2, r3
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016bfe:	6878      	ldr	r0, [r7, #4]
 8016c00:	f004 fcc2 	bl	801b588 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8016c04:	3710      	adds	r7, #16
 8016c06:	46bd      	mov	sp, r7
 8016c08:	bd80      	pop	{r7, pc}
 8016c0a:	bf00      	nop
 8016c0c:	08027178 	.word	0x08027178
 8016c10:	08027440 	.word	0x08027440
 8016c14:	080271e8 	.word	0x080271e8
 8016c18:	08027458 	.word	0x08027458

08016c1c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8016c1c:	b480      	push	{r7}
 8016c1e:	b083      	sub	sp, #12
 8016c20:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8016c22:	2300      	movs	r3, #0
 8016c24:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8016c26:	4b1e      	ldr	r3, [pc, #120]	; (8016ca0 <tcp_new_port+0x84>)
 8016c28:	881b      	ldrh	r3, [r3, #0]
 8016c2a:	3301      	adds	r3, #1
 8016c2c:	b29a      	uxth	r2, r3
 8016c2e:	4b1c      	ldr	r3, [pc, #112]	; (8016ca0 <tcp_new_port+0x84>)
 8016c30:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8016c32:	4b1b      	ldr	r3, [pc, #108]	; (8016ca0 <tcp_new_port+0x84>)
 8016c34:	881b      	ldrh	r3, [r3, #0]
 8016c36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016c3a:	4293      	cmp	r3, r2
 8016c3c:	d103      	bne.n	8016c46 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8016c3e:	4b18      	ldr	r3, [pc, #96]	; (8016ca0 <tcp_new_port+0x84>)
 8016c40:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8016c44:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8016c46:	2300      	movs	r3, #0
 8016c48:	71fb      	strb	r3, [r7, #7]
 8016c4a:	e01e      	b.n	8016c8a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8016c4c:	79fb      	ldrb	r3, [r7, #7]
 8016c4e:	4a15      	ldr	r2, [pc, #84]	; (8016ca4 <tcp_new_port+0x88>)
 8016c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016c54:	681b      	ldr	r3, [r3, #0]
 8016c56:	603b      	str	r3, [r7, #0]
 8016c58:	e011      	b.n	8016c7e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8016c5a:	683b      	ldr	r3, [r7, #0]
 8016c5c:	8ada      	ldrh	r2, [r3, #22]
 8016c5e:	4b10      	ldr	r3, [pc, #64]	; (8016ca0 <tcp_new_port+0x84>)
 8016c60:	881b      	ldrh	r3, [r3, #0]
 8016c62:	429a      	cmp	r2, r3
 8016c64:	d108      	bne.n	8016c78 <tcp_new_port+0x5c>
        n++;
 8016c66:	88bb      	ldrh	r3, [r7, #4]
 8016c68:	3301      	adds	r3, #1
 8016c6a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8016c6c:	88bb      	ldrh	r3, [r7, #4]
 8016c6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016c72:	d3d8      	bcc.n	8016c26 <tcp_new_port+0xa>
          return 0;
 8016c74:	2300      	movs	r3, #0
 8016c76:	e00d      	b.n	8016c94 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8016c78:	683b      	ldr	r3, [r7, #0]
 8016c7a:	68db      	ldr	r3, [r3, #12]
 8016c7c:	603b      	str	r3, [r7, #0]
 8016c7e:	683b      	ldr	r3, [r7, #0]
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d1ea      	bne.n	8016c5a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8016c84:	79fb      	ldrb	r3, [r7, #7]
 8016c86:	3301      	adds	r3, #1
 8016c88:	71fb      	strb	r3, [r7, #7]
 8016c8a:	79fb      	ldrb	r3, [r7, #7]
 8016c8c:	2b03      	cmp	r3, #3
 8016c8e:	d9dd      	bls.n	8016c4c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8016c90:	4b03      	ldr	r3, [pc, #12]	; (8016ca0 <tcp_new_port+0x84>)
 8016c92:	881b      	ldrh	r3, [r3, #0]
}
 8016c94:	4618      	mov	r0, r3
 8016c96:	370c      	adds	r7, #12
 8016c98:	46bd      	mov	sp, r7
 8016c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c9e:	4770      	bx	lr
 8016ca0:	24000424 	.word	0x24000424
 8016ca4:	08029224 	.word	0x08029224

08016ca8 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8016ca8:	b580      	push	{r7, lr}
 8016caa:	b08a      	sub	sp, #40	; 0x28
 8016cac:	af00      	add	r7, sp, #0
 8016cae:	60f8      	str	r0, [r7, #12]
 8016cb0:	60b9      	str	r1, [r7, #8]
 8016cb2:	603b      	str	r3, [r7, #0]
 8016cb4:	4613      	mov	r3, r2
 8016cb6:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8016cb8:	2300      	movs	r3, #0
 8016cba:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8016cbc:	68fb      	ldr	r3, [r7, #12]
 8016cbe:	2b00      	cmp	r3, #0
 8016cc0:	d109      	bne.n	8016cd6 <tcp_connect+0x2e>
 8016cc2:	4b7d      	ldr	r3, [pc, #500]	; (8016eb8 <tcp_connect+0x210>)
 8016cc4:	f240 4235 	movw	r2, #1077	; 0x435
 8016cc8:	497c      	ldr	r1, [pc, #496]	; (8016ebc <tcp_connect+0x214>)
 8016cca:	487d      	ldr	r0, [pc, #500]	; (8016ec0 <tcp_connect+0x218>)
 8016ccc:	f009 ff4e 	bl	8020b6c <iprintf>
 8016cd0:	f06f 030f 	mvn.w	r3, #15
 8016cd4:	e0ec      	b.n	8016eb0 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8016cd6:	68bb      	ldr	r3, [r7, #8]
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d109      	bne.n	8016cf0 <tcp_connect+0x48>
 8016cdc:	4b76      	ldr	r3, [pc, #472]	; (8016eb8 <tcp_connect+0x210>)
 8016cde:	f240 4236 	movw	r2, #1078	; 0x436
 8016ce2:	4978      	ldr	r1, [pc, #480]	; (8016ec4 <tcp_connect+0x21c>)
 8016ce4:	4876      	ldr	r0, [pc, #472]	; (8016ec0 <tcp_connect+0x218>)
 8016ce6:	f009 ff41 	bl	8020b6c <iprintf>
 8016cea:	f06f 030f 	mvn.w	r3, #15
 8016cee:	e0df      	b.n	8016eb0 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8016cf0:	68fb      	ldr	r3, [r7, #12]
 8016cf2:	7d1b      	ldrb	r3, [r3, #20]
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	d009      	beq.n	8016d0c <tcp_connect+0x64>
 8016cf8:	4b6f      	ldr	r3, [pc, #444]	; (8016eb8 <tcp_connect+0x210>)
 8016cfa:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8016cfe:	4972      	ldr	r1, [pc, #456]	; (8016ec8 <tcp_connect+0x220>)
 8016d00:	486f      	ldr	r0, [pc, #444]	; (8016ec0 <tcp_connect+0x218>)
 8016d02:	f009 ff33 	bl	8020b6c <iprintf>
 8016d06:	f06f 0309 	mvn.w	r3, #9
 8016d0a:	e0d1      	b.n	8016eb0 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8016d0c:	68bb      	ldr	r3, [r7, #8]
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d002      	beq.n	8016d18 <tcp_connect+0x70>
 8016d12:	68bb      	ldr	r3, [r7, #8]
 8016d14:	681b      	ldr	r3, [r3, #0]
 8016d16:	e000      	b.n	8016d1a <tcp_connect+0x72>
 8016d18:	2300      	movs	r3, #0
 8016d1a:	68fa      	ldr	r2, [r7, #12]
 8016d1c:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8016d1e:	68fb      	ldr	r3, [r7, #12]
 8016d20:	88fa      	ldrh	r2, [r7, #6]
 8016d22:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8016d24:	68fb      	ldr	r3, [r7, #12]
 8016d26:	7a1b      	ldrb	r3, [r3, #8]
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	d006      	beq.n	8016d3a <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8016d2c:	68fb      	ldr	r3, [r7, #12]
 8016d2e:	7a1b      	ldrb	r3, [r3, #8]
 8016d30:	4618      	mov	r0, r3
 8016d32:	f7fe fba9 	bl	8015488 <netif_get_by_index>
 8016d36:	6278      	str	r0, [r7, #36]	; 0x24
 8016d38:	e005      	b.n	8016d46 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8016d3a:	68fb      	ldr	r3, [r7, #12]
 8016d3c:	3304      	adds	r3, #4
 8016d3e:	4618      	mov	r0, r3
 8016d40:	f7fc fadc 	bl	80132fc <ip4_route>
 8016d44:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 8016d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d48:	2b00      	cmp	r3, #0
 8016d4a:	d102      	bne.n	8016d52 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8016d4c:	f06f 0303 	mvn.w	r3, #3
 8016d50:	e0ae      	b.n	8016eb0 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8016d52:	68fb      	ldr	r3, [r7, #12]
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d003      	beq.n	8016d60 <tcp_connect+0xb8>
 8016d58:	68fb      	ldr	r3, [r7, #12]
 8016d5a:	681b      	ldr	r3, [r3, #0]
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	d111      	bne.n	8016d84 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8016d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	d002      	beq.n	8016d6c <tcp_connect+0xc4>
 8016d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d68:	3304      	adds	r3, #4
 8016d6a:	e000      	b.n	8016d6e <tcp_connect+0xc6>
 8016d6c:	2300      	movs	r3, #0
 8016d6e:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8016d70:	69fb      	ldr	r3, [r7, #28]
 8016d72:	2b00      	cmp	r3, #0
 8016d74:	d102      	bne.n	8016d7c <tcp_connect+0xd4>
      return ERR_RTE;
 8016d76:	f06f 0303 	mvn.w	r3, #3
 8016d7a:	e099      	b.n	8016eb0 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016d7c:	69fb      	ldr	r3, [r7, #28]
 8016d7e:	681a      	ldr	r2, [r3, #0]
 8016d80:	68fb      	ldr	r3, [r7, #12]
 8016d82:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8016d84:	68fb      	ldr	r3, [r7, #12]
 8016d86:	8adb      	ldrh	r3, [r3, #22]
 8016d88:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8016d8a:	68fb      	ldr	r3, [r7, #12]
 8016d8c:	8adb      	ldrh	r3, [r3, #22]
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d10c      	bne.n	8016dac <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8016d92:	f7ff ff43 	bl	8016c1c <tcp_new_port>
 8016d96:	4603      	mov	r3, r0
 8016d98:	461a      	mov	r2, r3
 8016d9a:	68fb      	ldr	r3, [r7, #12]
 8016d9c:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8016d9e:	68fb      	ldr	r3, [r7, #12]
 8016da0:	8adb      	ldrh	r3, [r3, #22]
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	d102      	bne.n	8016dac <tcp_connect+0x104>
      return ERR_BUF;
 8016da6:	f06f 0301 	mvn.w	r3, #1
 8016daa:	e081      	b.n	8016eb0 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8016dac:	68f8      	ldr	r0, [r7, #12]
 8016dae:	f001 f867 	bl	8017e80 <tcp_next_iss>
 8016db2:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8016db4:	68fb      	ldr	r3, [r7, #12]
 8016db6:	2200      	movs	r2, #0
 8016db8:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8016dba:	68fb      	ldr	r3, [r7, #12]
 8016dbc:	697a      	ldr	r2, [r7, #20]
 8016dbe:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 8016dc0:	697b      	ldr	r3, [r7, #20]
 8016dc2:	1e5a      	subs	r2, r3, #1
 8016dc4:	68fb      	ldr	r3, [r7, #12]
 8016dc6:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8016dc8:	697b      	ldr	r3, [r7, #20]
 8016dca:	1e5a      	subs	r2, r3, #1
 8016dcc:	68fb      	ldr	r3, [r7, #12]
 8016dce:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8016dd0:	697b      	ldr	r3, [r7, #20]
 8016dd2:	1e5a      	subs	r2, r3, #1
 8016dd4:	68fb      	ldr	r3, [r7, #12]
 8016dd6:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8016dde:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016de0:	68fb      	ldr	r3, [r7, #12]
 8016de2:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8016de4:	68fb      	ldr	r3, [r7, #12]
 8016de6:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8016de8:	68fb      	ldr	r3, [r7, #12]
 8016dea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016dec:	68fb      	ldr	r3, [r7, #12]
 8016dee:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8016df0:	68fb      	ldr	r3, [r7, #12]
 8016df2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8016df6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8016dfa:	68fb      	ldr	r3, [r7, #12]
 8016dfc:	f44f 7206 	mov.w	r2, #536	; 0x218
 8016e00:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8016e02:	68fb      	ldr	r3, [r7, #12]
 8016e04:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 8016e06:	68fb      	ldr	r3, [r7, #12]
 8016e08:	3304      	adds	r3, #4
 8016e0a:	461a      	mov	r2, r3
 8016e0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016e0e:	f001 f85d 	bl	8017ecc <tcp_eff_send_mss_netif>
 8016e12:	4603      	mov	r3, r0
 8016e14:	461a      	mov	r2, r3
 8016e16:	68fb      	ldr	r3, [r7, #12]
 8016e18:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8016e1a:	68fb      	ldr	r3, [r7, #12]
 8016e1c:	2201      	movs	r2, #1
 8016e1e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8016e22:	68fb      	ldr	r3, [r7, #12]
 8016e24:	683a      	ldr	r2, [r7, #0]
 8016e26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8016e2a:	2102      	movs	r1, #2
 8016e2c:	68f8      	ldr	r0, [r7, #12]
 8016e2e:	f004 fabd 	bl	801b3ac <tcp_enqueue_flags>
 8016e32:	4603      	mov	r3, r0
 8016e34:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8016e36:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d136      	bne.n	8016eac <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8016e3e:	68fb      	ldr	r3, [r7, #12]
 8016e40:	2202      	movs	r2, #2
 8016e42:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8016e44:	8b7b      	ldrh	r3, [r7, #26]
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d021      	beq.n	8016e8e <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8016e4a:	4b20      	ldr	r3, [pc, #128]	; (8016ecc <tcp_connect+0x224>)
 8016e4c:	681b      	ldr	r3, [r3, #0]
 8016e4e:	68fa      	ldr	r2, [r7, #12]
 8016e50:	429a      	cmp	r2, r3
 8016e52:	d105      	bne.n	8016e60 <tcp_connect+0x1b8>
 8016e54:	4b1d      	ldr	r3, [pc, #116]	; (8016ecc <tcp_connect+0x224>)
 8016e56:	681b      	ldr	r3, [r3, #0]
 8016e58:	68db      	ldr	r3, [r3, #12]
 8016e5a:	4a1c      	ldr	r2, [pc, #112]	; (8016ecc <tcp_connect+0x224>)
 8016e5c:	6013      	str	r3, [r2, #0]
 8016e5e:	e013      	b.n	8016e88 <tcp_connect+0x1e0>
 8016e60:	4b1a      	ldr	r3, [pc, #104]	; (8016ecc <tcp_connect+0x224>)
 8016e62:	681b      	ldr	r3, [r3, #0]
 8016e64:	623b      	str	r3, [r7, #32]
 8016e66:	e00c      	b.n	8016e82 <tcp_connect+0x1da>
 8016e68:	6a3b      	ldr	r3, [r7, #32]
 8016e6a:	68db      	ldr	r3, [r3, #12]
 8016e6c:	68fa      	ldr	r2, [r7, #12]
 8016e6e:	429a      	cmp	r2, r3
 8016e70:	d104      	bne.n	8016e7c <tcp_connect+0x1d4>
 8016e72:	68fb      	ldr	r3, [r7, #12]
 8016e74:	68da      	ldr	r2, [r3, #12]
 8016e76:	6a3b      	ldr	r3, [r7, #32]
 8016e78:	60da      	str	r2, [r3, #12]
 8016e7a:	e005      	b.n	8016e88 <tcp_connect+0x1e0>
 8016e7c:	6a3b      	ldr	r3, [r7, #32]
 8016e7e:	68db      	ldr	r3, [r3, #12]
 8016e80:	623b      	str	r3, [r7, #32]
 8016e82:	6a3b      	ldr	r3, [r7, #32]
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d1ef      	bne.n	8016e68 <tcp_connect+0x1c0>
 8016e88:	68fb      	ldr	r3, [r7, #12]
 8016e8a:	2200      	movs	r2, #0
 8016e8c:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8016e8e:	4b10      	ldr	r3, [pc, #64]	; (8016ed0 <tcp_connect+0x228>)
 8016e90:	681a      	ldr	r2, [r3, #0]
 8016e92:	68fb      	ldr	r3, [r7, #12]
 8016e94:	60da      	str	r2, [r3, #12]
 8016e96:	4a0e      	ldr	r2, [pc, #56]	; (8016ed0 <tcp_connect+0x228>)
 8016e98:	68fb      	ldr	r3, [r7, #12]
 8016e9a:	6013      	str	r3, [r2, #0]
 8016e9c:	f005 faea 	bl	801c474 <tcp_timer_needed>
 8016ea0:	4b0c      	ldr	r3, [pc, #48]	; (8016ed4 <tcp_connect+0x22c>)
 8016ea2:	2201      	movs	r2, #1
 8016ea4:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8016ea6:	68f8      	ldr	r0, [r7, #12]
 8016ea8:	f004 fb6e 	bl	801b588 <tcp_output>
  }
  return ret;
 8016eac:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8016eb0:	4618      	mov	r0, r3
 8016eb2:	3728      	adds	r7, #40	; 0x28
 8016eb4:	46bd      	mov	sp, r7
 8016eb6:	bd80      	pop	{r7, pc}
 8016eb8:	08027178 	.word	0x08027178
 8016ebc:	08027480 	.word	0x08027480
 8016ec0:	080271e8 	.word	0x080271e8
 8016ec4:	0802749c 	.word	0x0802749c
 8016ec8:	080274b8 	.word	0x080274b8
 8016ecc:	24008e44 	.word	0x24008e44
 8016ed0:	24008e38 	.word	0x24008e38
 8016ed4:	24008e34 	.word	0x24008e34

08016ed8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8016ed8:	b5b0      	push	{r4, r5, r7, lr}
 8016eda:	b090      	sub	sp, #64	; 0x40
 8016edc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8016ede:	2300      	movs	r3, #0
 8016ee0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8016ee4:	4b94      	ldr	r3, [pc, #592]	; (8017138 <tcp_slowtmr+0x260>)
 8016ee6:	681b      	ldr	r3, [r3, #0]
 8016ee8:	3301      	adds	r3, #1
 8016eea:	4a93      	ldr	r2, [pc, #588]	; (8017138 <tcp_slowtmr+0x260>)
 8016eec:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8016eee:	4b93      	ldr	r3, [pc, #588]	; (801713c <tcp_slowtmr+0x264>)
 8016ef0:	781b      	ldrb	r3, [r3, #0]
 8016ef2:	3301      	adds	r3, #1
 8016ef4:	b2da      	uxtb	r2, r3
 8016ef6:	4b91      	ldr	r3, [pc, #580]	; (801713c <tcp_slowtmr+0x264>)
 8016ef8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8016efa:	2300      	movs	r3, #0
 8016efc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8016efe:	4b90      	ldr	r3, [pc, #576]	; (8017140 <tcp_slowtmr+0x268>)
 8016f00:	681b      	ldr	r3, [r3, #0]
 8016f02:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8016f04:	e29d      	b.n	8017442 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8016f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f08:	7d1b      	ldrb	r3, [r3, #20]
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d106      	bne.n	8016f1c <tcp_slowtmr+0x44>
 8016f0e:	4b8d      	ldr	r3, [pc, #564]	; (8017144 <tcp_slowtmr+0x26c>)
 8016f10:	f240 42be 	movw	r2, #1214	; 0x4be
 8016f14:	498c      	ldr	r1, [pc, #560]	; (8017148 <tcp_slowtmr+0x270>)
 8016f16:	488d      	ldr	r0, [pc, #564]	; (801714c <tcp_slowtmr+0x274>)
 8016f18:	f009 fe28 	bl	8020b6c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8016f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f1e:	7d1b      	ldrb	r3, [r3, #20]
 8016f20:	2b01      	cmp	r3, #1
 8016f22:	d106      	bne.n	8016f32 <tcp_slowtmr+0x5a>
 8016f24:	4b87      	ldr	r3, [pc, #540]	; (8017144 <tcp_slowtmr+0x26c>)
 8016f26:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8016f2a:	4989      	ldr	r1, [pc, #548]	; (8017150 <tcp_slowtmr+0x278>)
 8016f2c:	4887      	ldr	r0, [pc, #540]	; (801714c <tcp_slowtmr+0x274>)
 8016f2e:	f009 fe1d 	bl	8020b6c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8016f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f34:	7d1b      	ldrb	r3, [r3, #20]
 8016f36:	2b0a      	cmp	r3, #10
 8016f38:	d106      	bne.n	8016f48 <tcp_slowtmr+0x70>
 8016f3a:	4b82      	ldr	r3, [pc, #520]	; (8017144 <tcp_slowtmr+0x26c>)
 8016f3c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8016f40:	4984      	ldr	r1, [pc, #528]	; (8017154 <tcp_slowtmr+0x27c>)
 8016f42:	4882      	ldr	r0, [pc, #520]	; (801714c <tcp_slowtmr+0x274>)
 8016f44:	f009 fe12 	bl	8020b6c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8016f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f4a:	7f9a      	ldrb	r2, [r3, #30]
 8016f4c:	4b7b      	ldr	r3, [pc, #492]	; (801713c <tcp_slowtmr+0x264>)
 8016f4e:	781b      	ldrb	r3, [r3, #0]
 8016f50:	429a      	cmp	r2, r3
 8016f52:	d105      	bne.n	8016f60 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8016f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f56:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8016f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f5a:	68db      	ldr	r3, [r3, #12]
 8016f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8016f5e:	e270      	b.n	8017442 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8016f60:	4b76      	ldr	r3, [pc, #472]	; (801713c <tcp_slowtmr+0x264>)
 8016f62:	781a      	ldrb	r2, [r3, #0]
 8016f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f66:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8016f68:	2300      	movs	r3, #0
 8016f6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8016f6e:	2300      	movs	r3, #0
 8016f70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8016f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f76:	7d1b      	ldrb	r3, [r3, #20]
 8016f78:	2b02      	cmp	r3, #2
 8016f7a:	d10a      	bne.n	8016f92 <tcp_slowtmr+0xba>
 8016f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016f82:	2b05      	cmp	r3, #5
 8016f84:	d905      	bls.n	8016f92 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8016f86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016f8a:	3301      	adds	r3, #1
 8016f8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016f90:	e11e      	b.n	80171d0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8016f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016f98:	2b0b      	cmp	r3, #11
 8016f9a:	d905      	bls.n	8016fa8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8016f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016fa0:	3301      	adds	r3, #1
 8016fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016fa6:	e113      	b.n	80171d0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8016fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016faa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d075      	beq.n	801709e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8016fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d006      	beq.n	8016fc8 <tcp_slowtmr+0xf0>
 8016fba:	4b62      	ldr	r3, [pc, #392]	; (8017144 <tcp_slowtmr+0x26c>)
 8016fbc:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8016fc0:	4965      	ldr	r1, [pc, #404]	; (8017158 <tcp_slowtmr+0x280>)
 8016fc2:	4862      	ldr	r0, [pc, #392]	; (801714c <tcp_slowtmr+0x274>)
 8016fc4:	f009 fdd2 	bl	8020b6c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8016fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016fcc:	2b00      	cmp	r3, #0
 8016fce:	d106      	bne.n	8016fde <tcp_slowtmr+0x106>
 8016fd0:	4b5c      	ldr	r3, [pc, #368]	; (8017144 <tcp_slowtmr+0x26c>)
 8016fd2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8016fd6:	4961      	ldr	r1, [pc, #388]	; (801715c <tcp_slowtmr+0x284>)
 8016fd8:	485c      	ldr	r0, [pc, #368]	; (801714c <tcp_slowtmr+0x274>)
 8016fda:	f009 fdc7 	bl	8020b6c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8016fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fe0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016fe4:	2b0b      	cmp	r3, #11
 8016fe6:	d905      	bls.n	8016ff4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8016fe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016fec:	3301      	adds	r3, #1
 8016fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016ff2:	e0ed      	b.n	80171d0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8016ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ff6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016ffa:	3b01      	subs	r3, #1
 8016ffc:	4a58      	ldr	r2, [pc, #352]	; (8017160 <tcp_slowtmr+0x288>)
 8016ffe:	5cd3      	ldrb	r3, [r2, r3]
 8017000:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8017002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017004:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8017008:	7c7a      	ldrb	r2, [r7, #17]
 801700a:	429a      	cmp	r2, r3
 801700c:	d907      	bls.n	801701e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801700e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017010:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8017014:	3301      	adds	r3, #1
 8017016:	b2da      	uxtb	r2, r3
 8017018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801701a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801701e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017020:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8017024:	7c7a      	ldrb	r2, [r7, #17]
 8017026:	429a      	cmp	r2, r3
 8017028:	f200 80d2 	bhi.w	80171d0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 801702c:	2301      	movs	r3, #1
 801702e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8017030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017032:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017036:	2b00      	cmp	r3, #0
 8017038:	d108      	bne.n	801704c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801703a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801703c:	f005 f94c 	bl	801c2d8 <tcp_zero_window_probe>
 8017040:	4603      	mov	r3, r0
 8017042:	2b00      	cmp	r3, #0
 8017044:	d014      	beq.n	8017070 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8017046:	2300      	movs	r3, #0
 8017048:	623b      	str	r3, [r7, #32]
 801704a:	e011      	b.n	8017070 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801704c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801704e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017052:	4619      	mov	r1, r3
 8017054:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017056:	f004 f811 	bl	801b07c <tcp_split_unsent_seg>
 801705a:	4603      	mov	r3, r0
 801705c:	2b00      	cmp	r3, #0
 801705e:	d107      	bne.n	8017070 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8017060:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017062:	f004 fa91 	bl	801b588 <tcp_output>
 8017066:	4603      	mov	r3, r0
 8017068:	2b00      	cmp	r3, #0
 801706a:	d101      	bne.n	8017070 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 801706c:	2300      	movs	r3, #0
 801706e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8017070:	6a3b      	ldr	r3, [r7, #32]
 8017072:	2b00      	cmp	r3, #0
 8017074:	f000 80ac 	beq.w	80171d0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8017078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801707a:	2200      	movs	r2, #0
 801707c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8017080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017082:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8017086:	2b06      	cmp	r3, #6
 8017088:	f200 80a2 	bhi.w	80171d0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 801708c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801708e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8017092:	3301      	adds	r3, #1
 8017094:	b2da      	uxtb	r2, r3
 8017096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017098:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 801709c:	e098      	b.n	80171d0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801709e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170a0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	db0f      	blt.n	80170c8 <tcp_slowtmr+0x1f0>
 80170a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170aa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80170ae:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80170b2:	4293      	cmp	r3, r2
 80170b4:	d008      	beq.n	80170c8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80170b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80170bc:	b29b      	uxth	r3, r3
 80170be:	3301      	adds	r3, #1
 80170c0:	b29b      	uxth	r3, r3
 80170c2:	b21a      	sxth	r2, r3
 80170c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170c6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80170c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170ca:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80170ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170d0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80170d4:	429a      	cmp	r2, r3
 80170d6:	db7b      	blt.n	80171d0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80170d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80170da:	f004 fd47 	bl	801bb6c <tcp_rexmit_rto_prepare>
 80170de:	4603      	mov	r3, r0
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	d007      	beq.n	80170f4 <tcp_slowtmr+0x21c>
 80170e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	d171      	bne.n	80171d0 <tcp_slowtmr+0x2f8>
 80170ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d06d      	beq.n	80171d0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80170f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170f6:	7d1b      	ldrb	r3, [r3, #20]
 80170f8:	2b02      	cmp	r3, #2
 80170fa:	d03a      	beq.n	8017172 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80170fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017102:	2b0c      	cmp	r3, #12
 8017104:	bf28      	it	cs
 8017106:	230c      	movcs	r3, #12
 8017108:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801710a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801710c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8017110:	10db      	asrs	r3, r3, #3
 8017112:	b21b      	sxth	r3, r3
 8017114:	461a      	mov	r2, r3
 8017116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017118:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801711c:	4413      	add	r3, r2
 801711e:	7efa      	ldrb	r2, [r7, #27]
 8017120:	4910      	ldr	r1, [pc, #64]	; (8017164 <tcp_slowtmr+0x28c>)
 8017122:	5c8a      	ldrb	r2, [r1, r2]
 8017124:	4093      	lsls	r3, r2
 8017126:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8017128:	697b      	ldr	r3, [r7, #20]
 801712a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801712e:	4293      	cmp	r3, r2
 8017130:	dc1a      	bgt.n	8017168 <tcp_slowtmr+0x290>
 8017132:	697b      	ldr	r3, [r7, #20]
 8017134:	b21a      	sxth	r2, r3
 8017136:	e019      	b.n	801716c <tcp_slowtmr+0x294>
 8017138:	24008e3c 	.word	0x24008e3c
 801713c:	240057a2 	.word	0x240057a2
 8017140:	24008e38 	.word	0x24008e38
 8017144:	08027178 	.word	0x08027178
 8017148:	080274e8 	.word	0x080274e8
 801714c:	080271e8 	.word	0x080271e8
 8017150:	08027514 	.word	0x08027514
 8017154:	08027540 	.word	0x08027540
 8017158:	08027570 	.word	0x08027570
 801715c:	080275a4 	.word	0x080275a4
 8017160:	0802921c 	.word	0x0802921c
 8017164:	0802920c 	.word	0x0802920c
 8017168:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801716c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801716e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8017172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017174:	2200      	movs	r2, #0
 8017176:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8017178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801717a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801717e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017180:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017184:	4293      	cmp	r3, r2
 8017186:	bf28      	it	cs
 8017188:	4613      	movcs	r3, r2
 801718a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801718c:	8a7b      	ldrh	r3, [r7, #18]
 801718e:	085b      	lsrs	r3, r3, #1
 8017190:	b29a      	uxth	r2, r3
 8017192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017194:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8017198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801719a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801719e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80171a2:	005b      	lsls	r3, r3, #1
 80171a4:	b29b      	uxth	r3, r3
 80171a6:	429a      	cmp	r2, r3
 80171a8:	d206      	bcs.n	80171b8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80171aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80171ae:	005b      	lsls	r3, r3, #1
 80171b0:	b29a      	uxth	r2, r3
 80171b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171b4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80171b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171ba:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80171bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80171c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171c4:	2200      	movs	r2, #0
 80171c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80171ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80171cc:	f004 fd3e 	bl	801bc4c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80171d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171d2:	7d1b      	ldrb	r3, [r3, #20]
 80171d4:	2b06      	cmp	r3, #6
 80171d6:	d111      	bne.n	80171fc <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80171d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171da:	8b5b      	ldrh	r3, [r3, #26]
 80171dc:	f003 0310 	and.w	r3, r3, #16
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d00b      	beq.n	80171fc <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80171e4:	4b9c      	ldr	r3, [pc, #624]	; (8017458 <tcp_slowtmr+0x580>)
 80171e6:	681a      	ldr	r2, [r3, #0]
 80171e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171ea:	6a1b      	ldr	r3, [r3, #32]
 80171ec:	1ad3      	subs	r3, r2, r3
 80171ee:	2b28      	cmp	r3, #40	; 0x28
 80171f0:	d904      	bls.n	80171fc <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80171f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80171f6:	3301      	adds	r3, #1
 80171f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80171fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171fe:	7a5b      	ldrb	r3, [r3, #9]
 8017200:	f003 0308 	and.w	r3, r3, #8
 8017204:	2b00      	cmp	r3, #0
 8017206:	d04a      	beq.n	801729e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8017208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801720a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801720c:	2b04      	cmp	r3, #4
 801720e:	d003      	beq.n	8017218 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8017210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017212:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8017214:	2b07      	cmp	r3, #7
 8017216:	d142      	bne.n	801729e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017218:	4b8f      	ldr	r3, [pc, #572]	; (8017458 <tcp_slowtmr+0x580>)
 801721a:	681a      	ldr	r2, [r3, #0]
 801721c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801721e:	6a1b      	ldr	r3, [r3, #32]
 8017220:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8017222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017224:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8017228:	4b8c      	ldr	r3, [pc, #560]	; (801745c <tcp_slowtmr+0x584>)
 801722a:	440b      	add	r3, r1
 801722c:	498c      	ldr	r1, [pc, #560]	; (8017460 <tcp_slowtmr+0x588>)
 801722e:	fba1 1303 	umull	r1, r3, r1, r3
 8017232:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017234:	429a      	cmp	r2, r3
 8017236:	d90a      	bls.n	801724e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8017238:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801723c:	3301      	adds	r3, #1
 801723e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8017242:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017246:	3301      	adds	r3, #1
 8017248:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801724c:	e027      	b.n	801729e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801724e:	4b82      	ldr	r3, [pc, #520]	; (8017458 <tcp_slowtmr+0x580>)
 8017250:	681a      	ldr	r2, [r3, #0]
 8017252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017254:	6a1b      	ldr	r3, [r3, #32]
 8017256:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8017258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801725a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801725e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017260:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8017264:	4618      	mov	r0, r3
 8017266:	4b7f      	ldr	r3, [pc, #508]	; (8017464 <tcp_slowtmr+0x58c>)
 8017268:	fb03 f300 	mul.w	r3, r3, r0
 801726c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801726e:	497c      	ldr	r1, [pc, #496]	; (8017460 <tcp_slowtmr+0x588>)
 8017270:	fba1 1303 	umull	r1, r3, r1, r3
 8017274:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017276:	429a      	cmp	r2, r3
 8017278:	d911      	bls.n	801729e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 801727a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801727c:	f004 ffec 	bl	801c258 <tcp_keepalive>
 8017280:	4603      	mov	r3, r0
 8017282:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8017286:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801728a:	2b00      	cmp	r3, #0
 801728c:	d107      	bne.n	801729e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 801728e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017290:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8017294:	3301      	adds	r3, #1
 8017296:	b2da      	uxtb	r2, r3
 8017298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801729a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801729e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80172a2:	2b00      	cmp	r3, #0
 80172a4:	d011      	beq.n	80172ca <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80172a6:	4b6c      	ldr	r3, [pc, #432]	; (8017458 <tcp_slowtmr+0x580>)
 80172a8:	681a      	ldr	r2, [r3, #0]
 80172aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172ac:	6a1b      	ldr	r3, [r3, #32]
 80172ae:	1ad2      	subs	r2, r2, r3
 80172b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172b2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80172b6:	4619      	mov	r1, r3
 80172b8:	460b      	mov	r3, r1
 80172ba:	005b      	lsls	r3, r3, #1
 80172bc:	440b      	add	r3, r1
 80172be:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80172c0:	429a      	cmp	r2, r3
 80172c2:	d302      	bcc.n	80172ca <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80172c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80172c6:	f000 feab 	bl	8018020 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80172ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172cc:	7d1b      	ldrb	r3, [r3, #20]
 80172ce:	2b03      	cmp	r3, #3
 80172d0:	d10b      	bne.n	80172ea <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80172d2:	4b61      	ldr	r3, [pc, #388]	; (8017458 <tcp_slowtmr+0x580>)
 80172d4:	681a      	ldr	r2, [r3, #0]
 80172d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172d8:	6a1b      	ldr	r3, [r3, #32]
 80172da:	1ad3      	subs	r3, r2, r3
 80172dc:	2b28      	cmp	r3, #40	; 0x28
 80172de:	d904      	bls.n	80172ea <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80172e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80172e4:	3301      	adds	r3, #1
 80172e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80172ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172ec:	7d1b      	ldrb	r3, [r3, #20]
 80172ee:	2b09      	cmp	r3, #9
 80172f0:	d10b      	bne.n	801730a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80172f2:	4b59      	ldr	r3, [pc, #356]	; (8017458 <tcp_slowtmr+0x580>)
 80172f4:	681a      	ldr	r2, [r3, #0]
 80172f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172f8:	6a1b      	ldr	r3, [r3, #32]
 80172fa:	1ad3      	subs	r3, r2, r3
 80172fc:	2bf0      	cmp	r3, #240	; 0xf0
 80172fe:	d904      	bls.n	801730a <tcp_slowtmr+0x432>
        ++pcb_remove;
 8017300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017304:	3301      	adds	r3, #1
 8017306:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801730a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801730e:	2b00      	cmp	r3, #0
 8017310:	d060      	beq.n	80173d4 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8017312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017318:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801731a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801731c:	f000 fccc 	bl	8017cb8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8017320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017322:	2b00      	cmp	r3, #0
 8017324:	d010      	beq.n	8017348 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8017326:	4b50      	ldr	r3, [pc, #320]	; (8017468 <tcp_slowtmr+0x590>)
 8017328:	681b      	ldr	r3, [r3, #0]
 801732a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801732c:	429a      	cmp	r2, r3
 801732e:	d106      	bne.n	801733e <tcp_slowtmr+0x466>
 8017330:	4b4e      	ldr	r3, [pc, #312]	; (801746c <tcp_slowtmr+0x594>)
 8017332:	f240 526d 	movw	r2, #1389	; 0x56d
 8017336:	494e      	ldr	r1, [pc, #312]	; (8017470 <tcp_slowtmr+0x598>)
 8017338:	484e      	ldr	r0, [pc, #312]	; (8017474 <tcp_slowtmr+0x59c>)
 801733a:	f009 fc17 	bl	8020b6c <iprintf>
        prev->next = pcb->next;
 801733e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017340:	68da      	ldr	r2, [r3, #12]
 8017342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017344:	60da      	str	r2, [r3, #12]
 8017346:	e00f      	b.n	8017368 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8017348:	4b47      	ldr	r3, [pc, #284]	; (8017468 <tcp_slowtmr+0x590>)
 801734a:	681b      	ldr	r3, [r3, #0]
 801734c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801734e:	429a      	cmp	r2, r3
 8017350:	d006      	beq.n	8017360 <tcp_slowtmr+0x488>
 8017352:	4b46      	ldr	r3, [pc, #280]	; (801746c <tcp_slowtmr+0x594>)
 8017354:	f240 5271 	movw	r2, #1393	; 0x571
 8017358:	4947      	ldr	r1, [pc, #284]	; (8017478 <tcp_slowtmr+0x5a0>)
 801735a:	4846      	ldr	r0, [pc, #280]	; (8017474 <tcp_slowtmr+0x59c>)
 801735c:	f009 fc06 	bl	8020b6c <iprintf>
        tcp_active_pcbs = pcb->next;
 8017360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017362:	68db      	ldr	r3, [r3, #12]
 8017364:	4a40      	ldr	r2, [pc, #256]	; (8017468 <tcp_slowtmr+0x590>)
 8017366:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8017368:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801736c:	2b00      	cmp	r3, #0
 801736e:	d013      	beq.n	8017398 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8017370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017372:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8017374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017376:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8017378:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801737a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801737c:	3304      	adds	r3, #4
 801737e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017380:	8ad2      	ldrh	r2, [r2, #22]
 8017382:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017384:	8b09      	ldrh	r1, [r1, #24]
 8017386:	9102      	str	r1, [sp, #8]
 8017388:	9201      	str	r2, [sp, #4]
 801738a:	9300      	str	r3, [sp, #0]
 801738c:	462b      	mov	r3, r5
 801738e:	4622      	mov	r2, r4
 8017390:	4601      	mov	r1, r0
 8017392:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017394:	f004 feac 	bl	801c0f0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8017398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801739a:	691b      	ldr	r3, [r3, #16]
 801739c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801739e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173a0:	7d1b      	ldrb	r3, [r3, #20]
 80173a2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80173a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173a6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80173a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173aa:	68db      	ldr	r3, [r3, #12]
 80173ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80173ae:	6838      	ldr	r0, [r7, #0]
 80173b0:	f7fe ff22 	bl	80161f8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80173b4:	4b31      	ldr	r3, [pc, #196]	; (801747c <tcp_slowtmr+0x5a4>)
 80173b6:	2200      	movs	r2, #0
 80173b8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80173ba:	68fb      	ldr	r3, [r7, #12]
 80173bc:	2b00      	cmp	r3, #0
 80173be:	d004      	beq.n	80173ca <tcp_slowtmr+0x4f2>
 80173c0:	68fb      	ldr	r3, [r7, #12]
 80173c2:	f06f 010c 	mvn.w	r1, #12
 80173c6:	68b8      	ldr	r0, [r7, #8]
 80173c8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80173ca:	4b2c      	ldr	r3, [pc, #176]	; (801747c <tcp_slowtmr+0x5a4>)
 80173cc:	781b      	ldrb	r3, [r3, #0]
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d037      	beq.n	8017442 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 80173d2:	e592      	b.n	8016efa <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80173d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173d6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80173d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173da:	68db      	ldr	r3, [r3, #12]
 80173dc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80173de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173e0:	7f1b      	ldrb	r3, [r3, #28]
 80173e2:	3301      	adds	r3, #1
 80173e4:	b2da      	uxtb	r2, r3
 80173e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173e8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80173ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173ec:	7f1a      	ldrb	r2, [r3, #28]
 80173ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173f0:	7f5b      	ldrb	r3, [r3, #29]
 80173f2:	429a      	cmp	r2, r3
 80173f4:	d325      	bcc.n	8017442 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80173f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173f8:	2200      	movs	r2, #0
 80173fa:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80173fc:	4b1f      	ldr	r3, [pc, #124]	; (801747c <tcp_slowtmr+0x5a4>)
 80173fe:	2200      	movs	r2, #0
 8017400:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8017402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017408:	2b00      	cmp	r3, #0
 801740a:	d00b      	beq.n	8017424 <tcp_slowtmr+0x54c>
 801740c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801740e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017414:	6912      	ldr	r2, [r2, #16]
 8017416:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017418:	4610      	mov	r0, r2
 801741a:	4798      	blx	r3
 801741c:	4603      	mov	r3, r0
 801741e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8017422:	e002      	b.n	801742a <tcp_slowtmr+0x552>
 8017424:	2300      	movs	r3, #0
 8017426:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801742a:	4b14      	ldr	r3, [pc, #80]	; (801747c <tcp_slowtmr+0x5a4>)
 801742c:	781b      	ldrb	r3, [r3, #0]
 801742e:	2b00      	cmp	r3, #0
 8017430:	d000      	beq.n	8017434 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8017432:	e562      	b.n	8016efa <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8017434:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8017438:	2b00      	cmp	r3, #0
 801743a:	d102      	bne.n	8017442 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 801743c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801743e:	f004 f8a3 	bl	801b588 <tcp_output>
  while (pcb != NULL) {
 8017442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017444:	2b00      	cmp	r3, #0
 8017446:	f47f ad5e 	bne.w	8016f06 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801744a:	2300      	movs	r3, #0
 801744c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801744e:	4b0c      	ldr	r3, [pc, #48]	; (8017480 <tcp_slowtmr+0x5a8>)
 8017450:	681b      	ldr	r3, [r3, #0]
 8017452:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8017454:	e069      	b.n	801752a <tcp_slowtmr+0x652>
 8017456:	bf00      	nop
 8017458:	24008e3c 	.word	0x24008e3c
 801745c:	000a4cb8 	.word	0x000a4cb8
 8017460:	10624dd3 	.word	0x10624dd3
 8017464:	000124f8 	.word	0x000124f8
 8017468:	24008e38 	.word	0x24008e38
 801746c:	08027178 	.word	0x08027178
 8017470:	080275dc 	.word	0x080275dc
 8017474:	080271e8 	.word	0x080271e8
 8017478:	08027608 	.word	0x08027608
 801747c:	24008e34 	.word	0x24008e34
 8017480:	24008e48 	.word	0x24008e48
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8017484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017486:	7d1b      	ldrb	r3, [r3, #20]
 8017488:	2b0a      	cmp	r3, #10
 801748a:	d006      	beq.n	801749a <tcp_slowtmr+0x5c2>
 801748c:	4b2b      	ldr	r3, [pc, #172]	; (801753c <tcp_slowtmr+0x664>)
 801748e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8017492:	492b      	ldr	r1, [pc, #172]	; (8017540 <tcp_slowtmr+0x668>)
 8017494:	482b      	ldr	r0, [pc, #172]	; (8017544 <tcp_slowtmr+0x66c>)
 8017496:	f009 fb69 	bl	8020b6c <iprintf>
    pcb_remove = 0;
 801749a:	2300      	movs	r3, #0
 801749c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80174a0:	4b29      	ldr	r3, [pc, #164]	; (8017548 <tcp_slowtmr+0x670>)
 80174a2:	681a      	ldr	r2, [r3, #0]
 80174a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174a6:	6a1b      	ldr	r3, [r3, #32]
 80174a8:	1ad3      	subs	r3, r2, r3
 80174aa:	2bf0      	cmp	r3, #240	; 0xf0
 80174ac:	d904      	bls.n	80174b8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80174ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80174b2:	3301      	adds	r3, #1
 80174b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80174b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d02f      	beq.n	8017520 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80174c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80174c2:	f000 fbf9 	bl	8017cb8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80174c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	d010      	beq.n	80174ee <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80174cc:	4b1f      	ldr	r3, [pc, #124]	; (801754c <tcp_slowtmr+0x674>)
 80174ce:	681b      	ldr	r3, [r3, #0]
 80174d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80174d2:	429a      	cmp	r2, r3
 80174d4:	d106      	bne.n	80174e4 <tcp_slowtmr+0x60c>
 80174d6:	4b19      	ldr	r3, [pc, #100]	; (801753c <tcp_slowtmr+0x664>)
 80174d8:	f240 52af 	movw	r2, #1455	; 0x5af
 80174dc:	491c      	ldr	r1, [pc, #112]	; (8017550 <tcp_slowtmr+0x678>)
 80174de:	4819      	ldr	r0, [pc, #100]	; (8017544 <tcp_slowtmr+0x66c>)
 80174e0:	f009 fb44 	bl	8020b6c <iprintf>
        prev->next = pcb->next;
 80174e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174e6:	68da      	ldr	r2, [r3, #12]
 80174e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174ea:	60da      	str	r2, [r3, #12]
 80174ec:	e00f      	b.n	801750e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80174ee:	4b17      	ldr	r3, [pc, #92]	; (801754c <tcp_slowtmr+0x674>)
 80174f0:	681b      	ldr	r3, [r3, #0]
 80174f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80174f4:	429a      	cmp	r2, r3
 80174f6:	d006      	beq.n	8017506 <tcp_slowtmr+0x62e>
 80174f8:	4b10      	ldr	r3, [pc, #64]	; (801753c <tcp_slowtmr+0x664>)
 80174fa:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80174fe:	4915      	ldr	r1, [pc, #84]	; (8017554 <tcp_slowtmr+0x67c>)
 8017500:	4810      	ldr	r0, [pc, #64]	; (8017544 <tcp_slowtmr+0x66c>)
 8017502:	f009 fb33 	bl	8020b6c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8017506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017508:	68db      	ldr	r3, [r3, #12]
 801750a:	4a10      	ldr	r2, [pc, #64]	; (801754c <tcp_slowtmr+0x674>)
 801750c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801750e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017510:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8017512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017514:	68db      	ldr	r3, [r3, #12]
 8017516:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8017518:	69f8      	ldr	r0, [r7, #28]
 801751a:	f7fe fe6d 	bl	80161f8 <tcp_free>
 801751e:	e004      	b.n	801752a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8017520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017522:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8017524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017526:	68db      	ldr	r3, [r3, #12]
 8017528:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801752a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801752c:	2b00      	cmp	r3, #0
 801752e:	d1a9      	bne.n	8017484 <tcp_slowtmr+0x5ac>
    }
  }
}
 8017530:	bf00      	nop
 8017532:	bf00      	nop
 8017534:	3730      	adds	r7, #48	; 0x30
 8017536:	46bd      	mov	sp, r7
 8017538:	bdb0      	pop	{r4, r5, r7, pc}
 801753a:	bf00      	nop
 801753c:	08027178 	.word	0x08027178
 8017540:	08027634 	.word	0x08027634
 8017544:	080271e8 	.word	0x080271e8
 8017548:	24008e3c 	.word	0x24008e3c
 801754c:	24008e48 	.word	0x24008e48
 8017550:	08027664 	.word	0x08027664
 8017554:	0802768c 	.word	0x0802768c

08017558 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8017558:	b580      	push	{r7, lr}
 801755a:	b082      	sub	sp, #8
 801755c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801755e:	4b2d      	ldr	r3, [pc, #180]	; (8017614 <tcp_fasttmr+0xbc>)
 8017560:	781b      	ldrb	r3, [r3, #0]
 8017562:	3301      	adds	r3, #1
 8017564:	b2da      	uxtb	r2, r3
 8017566:	4b2b      	ldr	r3, [pc, #172]	; (8017614 <tcp_fasttmr+0xbc>)
 8017568:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801756a:	4b2b      	ldr	r3, [pc, #172]	; (8017618 <tcp_fasttmr+0xc0>)
 801756c:	681b      	ldr	r3, [r3, #0]
 801756e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8017570:	e048      	b.n	8017604 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	7f9a      	ldrb	r2, [r3, #30]
 8017576:	4b27      	ldr	r3, [pc, #156]	; (8017614 <tcp_fasttmr+0xbc>)
 8017578:	781b      	ldrb	r3, [r3, #0]
 801757a:	429a      	cmp	r2, r3
 801757c:	d03f      	beq.n	80175fe <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801757e:	4b25      	ldr	r3, [pc, #148]	; (8017614 <tcp_fasttmr+0xbc>)
 8017580:	781a      	ldrb	r2, [r3, #0]
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	8b5b      	ldrh	r3, [r3, #26]
 801758a:	f003 0301 	and.w	r3, r3, #1
 801758e:	2b00      	cmp	r3, #0
 8017590:	d010      	beq.n	80175b4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	8b5b      	ldrh	r3, [r3, #26]
 8017596:	f043 0302 	orr.w	r3, r3, #2
 801759a:	b29a      	uxth	r2, r3
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80175a0:	6878      	ldr	r0, [r7, #4]
 80175a2:	f003 fff1 	bl	801b588 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	8b5b      	ldrh	r3, [r3, #26]
 80175aa:	f023 0303 	bic.w	r3, r3, #3
 80175ae:	b29a      	uxth	r2, r3
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	8b5b      	ldrh	r3, [r3, #26]
 80175b8:	f003 0308 	and.w	r3, r3, #8
 80175bc:	2b00      	cmp	r3, #0
 80175be:	d009      	beq.n	80175d4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	8b5b      	ldrh	r3, [r3, #26]
 80175c4:	f023 0308 	bic.w	r3, r3, #8
 80175c8:	b29a      	uxth	r2, r3
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80175ce:	6878      	ldr	r0, [r7, #4]
 80175d0:	f7fe ffa6 	bl	8016520 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	68db      	ldr	r3, [r3, #12]
 80175d8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d00a      	beq.n	80175f8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80175e2:	4b0e      	ldr	r3, [pc, #56]	; (801761c <tcp_fasttmr+0xc4>)
 80175e4:	2200      	movs	r2, #0
 80175e6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80175e8:	6878      	ldr	r0, [r7, #4]
 80175ea:	f000 f819 	bl	8017620 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80175ee:	4b0b      	ldr	r3, [pc, #44]	; (801761c <tcp_fasttmr+0xc4>)
 80175f0:	781b      	ldrb	r3, [r3, #0]
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d000      	beq.n	80175f8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80175f6:	e7b8      	b.n	801756a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80175f8:	683b      	ldr	r3, [r7, #0]
 80175fa:	607b      	str	r3, [r7, #4]
 80175fc:	e002      	b.n	8017604 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	68db      	ldr	r3, [r3, #12]
 8017602:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	2b00      	cmp	r3, #0
 8017608:	d1b3      	bne.n	8017572 <tcp_fasttmr+0x1a>
    }
  }
}
 801760a:	bf00      	nop
 801760c:	bf00      	nop
 801760e:	3708      	adds	r7, #8
 8017610:	46bd      	mov	sp, r7
 8017612:	bd80      	pop	{r7, pc}
 8017614:	240057a2 	.word	0x240057a2
 8017618:	24008e38 	.word	0x24008e38
 801761c:	24008e34 	.word	0x24008e34

08017620 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8017620:	b590      	push	{r4, r7, lr}
 8017622:	b085      	sub	sp, #20
 8017624:	af00      	add	r7, sp, #0
 8017626:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	2b00      	cmp	r3, #0
 801762c:	d109      	bne.n	8017642 <tcp_process_refused_data+0x22>
 801762e:	4b37      	ldr	r3, [pc, #220]	; (801770c <tcp_process_refused_data+0xec>)
 8017630:	f240 6209 	movw	r2, #1545	; 0x609
 8017634:	4936      	ldr	r1, [pc, #216]	; (8017710 <tcp_process_refused_data+0xf0>)
 8017636:	4837      	ldr	r0, [pc, #220]	; (8017714 <tcp_process_refused_data+0xf4>)
 8017638:	f009 fa98 	bl	8020b6c <iprintf>
 801763c:	f06f 030f 	mvn.w	r3, #15
 8017640:	e060      	b.n	8017704 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017646:	7b5b      	ldrb	r3, [r3, #13]
 8017648:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801764e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	2200      	movs	r2, #0
 8017654:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801765c:	2b00      	cmp	r3, #0
 801765e:	d00b      	beq.n	8017678 <tcp_process_refused_data+0x58>
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8017666:	687b      	ldr	r3, [r7, #4]
 8017668:	6918      	ldr	r0, [r3, #16]
 801766a:	2300      	movs	r3, #0
 801766c:	68ba      	ldr	r2, [r7, #8]
 801766e:	6879      	ldr	r1, [r7, #4]
 8017670:	47a0      	blx	r4
 8017672:	4603      	mov	r3, r0
 8017674:	73fb      	strb	r3, [r7, #15]
 8017676:	e007      	b.n	8017688 <tcp_process_refused_data+0x68>
 8017678:	2300      	movs	r3, #0
 801767a:	68ba      	ldr	r2, [r7, #8]
 801767c:	6879      	ldr	r1, [r7, #4]
 801767e:	2000      	movs	r0, #0
 8017680:	f000 f8a4 	bl	80177cc <tcp_recv_null>
 8017684:	4603      	mov	r3, r0
 8017686:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8017688:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801768c:	2b00      	cmp	r3, #0
 801768e:	d12a      	bne.n	80176e6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8017690:	7bbb      	ldrb	r3, [r7, #14]
 8017692:	f003 0320 	and.w	r3, r3, #32
 8017696:	2b00      	cmp	r3, #0
 8017698:	d033      	beq.n	8017702 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801769e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80176a2:	d005      	beq.n	80176b0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80176a8:	3301      	adds	r3, #1
 80176aa:	b29a      	uxth	r2, r3
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d00b      	beq.n	80176d2 <tcp_process_refused_data+0xb2>
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	6918      	ldr	r0, [r3, #16]
 80176c4:	2300      	movs	r3, #0
 80176c6:	2200      	movs	r2, #0
 80176c8:	6879      	ldr	r1, [r7, #4]
 80176ca:	47a0      	blx	r4
 80176cc:	4603      	mov	r3, r0
 80176ce:	73fb      	strb	r3, [r7, #15]
 80176d0:	e001      	b.n	80176d6 <tcp_process_refused_data+0xb6>
 80176d2:	2300      	movs	r3, #0
 80176d4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80176d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80176da:	f113 0f0d 	cmn.w	r3, #13
 80176de:	d110      	bne.n	8017702 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80176e0:	f06f 030c 	mvn.w	r3, #12
 80176e4:	e00e      	b.n	8017704 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80176e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80176ea:	f113 0f0d 	cmn.w	r3, #13
 80176ee:	d102      	bne.n	80176f6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80176f0:	f06f 030c 	mvn.w	r3, #12
 80176f4:	e006      	b.n	8017704 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	68ba      	ldr	r2, [r7, #8]
 80176fa:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80176fc:	f06f 0304 	mvn.w	r3, #4
 8017700:	e000      	b.n	8017704 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8017702:	2300      	movs	r3, #0
}
 8017704:	4618      	mov	r0, r3
 8017706:	3714      	adds	r7, #20
 8017708:	46bd      	mov	sp, r7
 801770a:	bd90      	pop	{r4, r7, pc}
 801770c:	08027178 	.word	0x08027178
 8017710:	080276b4 	.word	0x080276b4
 8017714:	080271e8 	.word	0x080271e8

08017718 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8017718:	b580      	push	{r7, lr}
 801771a:	b084      	sub	sp, #16
 801771c:	af00      	add	r7, sp, #0
 801771e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8017720:	e007      	b.n	8017732 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	681b      	ldr	r3, [r3, #0]
 8017726:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8017728:	6878      	ldr	r0, [r7, #4]
 801772a:	f000 f80a 	bl	8017742 <tcp_seg_free>
    seg = next;
 801772e:	68fb      	ldr	r3, [r7, #12]
 8017730:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	2b00      	cmp	r3, #0
 8017736:	d1f4      	bne.n	8017722 <tcp_segs_free+0xa>
  }
}
 8017738:	bf00      	nop
 801773a:	bf00      	nop
 801773c:	3710      	adds	r7, #16
 801773e:	46bd      	mov	sp, r7
 8017740:	bd80      	pop	{r7, pc}

08017742 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8017742:	b580      	push	{r7, lr}
 8017744:	b082      	sub	sp, #8
 8017746:	af00      	add	r7, sp, #0
 8017748:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	2b00      	cmp	r3, #0
 801774e:	d00c      	beq.n	801776a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	685b      	ldr	r3, [r3, #4]
 8017754:	2b00      	cmp	r3, #0
 8017756:	d004      	beq.n	8017762 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	685b      	ldr	r3, [r3, #4]
 801775c:	4618      	mov	r0, r3
 801775e:	f7fe f9f3 	bl	8015b48 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8017762:	6879      	ldr	r1, [r7, #4]
 8017764:	2003      	movs	r0, #3
 8017766:	f7fd fb79 	bl	8014e5c <memp_free>
  }
}
 801776a:	bf00      	nop
 801776c:	3708      	adds	r7, #8
 801776e:	46bd      	mov	sp, r7
 8017770:	bd80      	pop	{r7, pc}
	...

08017774 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8017774:	b580      	push	{r7, lr}
 8017776:	b084      	sub	sp, #16
 8017778:	af00      	add	r7, sp, #0
 801777a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	2b00      	cmp	r3, #0
 8017780:	d106      	bne.n	8017790 <tcp_seg_copy+0x1c>
 8017782:	4b0f      	ldr	r3, [pc, #60]	; (80177c0 <tcp_seg_copy+0x4c>)
 8017784:	f240 6282 	movw	r2, #1666	; 0x682
 8017788:	490e      	ldr	r1, [pc, #56]	; (80177c4 <tcp_seg_copy+0x50>)
 801778a:	480f      	ldr	r0, [pc, #60]	; (80177c8 <tcp_seg_copy+0x54>)
 801778c:	f009 f9ee 	bl	8020b6c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8017790:	2003      	movs	r0, #3
 8017792:	f7fd faf3 	bl	8014d7c <memp_malloc>
 8017796:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8017798:	68fb      	ldr	r3, [r7, #12]
 801779a:	2b00      	cmp	r3, #0
 801779c:	d101      	bne.n	80177a2 <tcp_seg_copy+0x2e>
    return NULL;
 801779e:	2300      	movs	r3, #0
 80177a0:	e00a      	b.n	80177b8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80177a2:	2210      	movs	r2, #16
 80177a4:	6879      	ldr	r1, [r7, #4]
 80177a6:	68f8      	ldr	r0, [r7, #12]
 80177a8:	f008 fabe 	bl	801fd28 <memcpy>
  pbuf_ref(cseg->p);
 80177ac:	68fb      	ldr	r3, [r7, #12]
 80177ae:	685b      	ldr	r3, [r3, #4]
 80177b0:	4618      	mov	r0, r3
 80177b2:	f7fe fa69 	bl	8015c88 <pbuf_ref>
  return cseg;
 80177b6:	68fb      	ldr	r3, [r7, #12]
}
 80177b8:	4618      	mov	r0, r3
 80177ba:	3710      	adds	r7, #16
 80177bc:	46bd      	mov	sp, r7
 80177be:	bd80      	pop	{r7, pc}
 80177c0:	08027178 	.word	0x08027178
 80177c4:	080276f8 	.word	0x080276f8
 80177c8:	080271e8 	.word	0x080271e8

080177cc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80177cc:	b580      	push	{r7, lr}
 80177ce:	b084      	sub	sp, #16
 80177d0:	af00      	add	r7, sp, #0
 80177d2:	60f8      	str	r0, [r7, #12]
 80177d4:	60b9      	str	r1, [r7, #8]
 80177d6:	607a      	str	r2, [r7, #4]
 80177d8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80177da:	68bb      	ldr	r3, [r7, #8]
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d109      	bne.n	80177f4 <tcp_recv_null+0x28>
 80177e0:	4b12      	ldr	r3, [pc, #72]	; (801782c <tcp_recv_null+0x60>)
 80177e2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80177e6:	4912      	ldr	r1, [pc, #72]	; (8017830 <tcp_recv_null+0x64>)
 80177e8:	4812      	ldr	r0, [pc, #72]	; (8017834 <tcp_recv_null+0x68>)
 80177ea:	f009 f9bf 	bl	8020b6c <iprintf>
 80177ee:	f06f 030f 	mvn.w	r3, #15
 80177f2:	e016      	b.n	8017822 <tcp_recv_null+0x56>

  if (p != NULL) {
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	d009      	beq.n	801780e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	891b      	ldrh	r3, [r3, #8]
 80177fe:	4619      	mov	r1, r3
 8017800:	68b8      	ldr	r0, [r7, #8]
 8017802:	f7ff f9bb 	bl	8016b7c <tcp_recved>
    pbuf_free(p);
 8017806:	6878      	ldr	r0, [r7, #4]
 8017808:	f7fe f99e 	bl	8015b48 <pbuf_free>
 801780c:	e008      	b.n	8017820 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801780e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017812:	2b00      	cmp	r3, #0
 8017814:	d104      	bne.n	8017820 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8017816:	68b8      	ldr	r0, [r7, #8]
 8017818:	f7fe feec 	bl	80165f4 <tcp_close>
 801781c:	4603      	mov	r3, r0
 801781e:	e000      	b.n	8017822 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8017820:	2300      	movs	r3, #0
}
 8017822:	4618      	mov	r0, r3
 8017824:	3710      	adds	r7, #16
 8017826:	46bd      	mov	sp, r7
 8017828:	bd80      	pop	{r7, pc}
 801782a:	bf00      	nop
 801782c:	08027178 	.word	0x08027178
 8017830:	08027714 	.word	0x08027714
 8017834:	080271e8 	.word	0x080271e8

08017838 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8017838:	b580      	push	{r7, lr}
 801783a:	b086      	sub	sp, #24
 801783c:	af00      	add	r7, sp, #0
 801783e:	4603      	mov	r3, r0
 8017840:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8017842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017846:	2b00      	cmp	r3, #0
 8017848:	db01      	blt.n	801784e <tcp_kill_prio+0x16>
 801784a:	79fb      	ldrb	r3, [r7, #7]
 801784c:	e000      	b.n	8017850 <tcp_kill_prio+0x18>
 801784e:	237f      	movs	r3, #127	; 0x7f
 8017850:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8017852:	7afb      	ldrb	r3, [r7, #11]
 8017854:	2b00      	cmp	r3, #0
 8017856:	d034      	beq.n	80178c2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8017858:	7afb      	ldrb	r3, [r7, #11]
 801785a:	3b01      	subs	r3, #1
 801785c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801785e:	2300      	movs	r3, #0
 8017860:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8017862:	2300      	movs	r3, #0
 8017864:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017866:	4b19      	ldr	r3, [pc, #100]	; (80178cc <tcp_kill_prio+0x94>)
 8017868:	681b      	ldr	r3, [r3, #0]
 801786a:	617b      	str	r3, [r7, #20]
 801786c:	e01f      	b.n	80178ae <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801786e:	697b      	ldr	r3, [r7, #20]
 8017870:	7d5b      	ldrb	r3, [r3, #21]
 8017872:	7afa      	ldrb	r2, [r7, #11]
 8017874:	429a      	cmp	r2, r3
 8017876:	d80c      	bhi.n	8017892 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8017878:	697b      	ldr	r3, [r7, #20]
 801787a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801787c:	7afa      	ldrb	r2, [r7, #11]
 801787e:	429a      	cmp	r2, r3
 8017880:	d112      	bne.n	80178a8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8017882:	4b13      	ldr	r3, [pc, #76]	; (80178d0 <tcp_kill_prio+0x98>)
 8017884:	681a      	ldr	r2, [r3, #0]
 8017886:	697b      	ldr	r3, [r7, #20]
 8017888:	6a1b      	ldr	r3, [r3, #32]
 801788a:	1ad3      	subs	r3, r2, r3
 801788c:	68fa      	ldr	r2, [r7, #12]
 801788e:	429a      	cmp	r2, r3
 8017890:	d80a      	bhi.n	80178a8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8017892:	4b0f      	ldr	r3, [pc, #60]	; (80178d0 <tcp_kill_prio+0x98>)
 8017894:	681a      	ldr	r2, [r3, #0]
 8017896:	697b      	ldr	r3, [r7, #20]
 8017898:	6a1b      	ldr	r3, [r3, #32]
 801789a:	1ad3      	subs	r3, r2, r3
 801789c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801789e:	697b      	ldr	r3, [r7, #20]
 80178a0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80178a2:	697b      	ldr	r3, [r7, #20]
 80178a4:	7d5b      	ldrb	r3, [r3, #21]
 80178a6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80178a8:	697b      	ldr	r3, [r7, #20]
 80178aa:	68db      	ldr	r3, [r3, #12]
 80178ac:	617b      	str	r3, [r7, #20]
 80178ae:	697b      	ldr	r3, [r7, #20]
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	d1dc      	bne.n	801786e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80178b4:	693b      	ldr	r3, [r7, #16]
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	d004      	beq.n	80178c4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80178ba:	6938      	ldr	r0, [r7, #16]
 80178bc:	f7fe ff84 	bl	80167c8 <tcp_abort>
 80178c0:	e000      	b.n	80178c4 <tcp_kill_prio+0x8c>
    return;
 80178c2:	bf00      	nop
  }
}
 80178c4:	3718      	adds	r7, #24
 80178c6:	46bd      	mov	sp, r7
 80178c8:	bd80      	pop	{r7, pc}
 80178ca:	bf00      	nop
 80178cc:	24008e38 	.word	0x24008e38
 80178d0:	24008e3c 	.word	0x24008e3c

080178d4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80178d4:	b580      	push	{r7, lr}
 80178d6:	b086      	sub	sp, #24
 80178d8:	af00      	add	r7, sp, #0
 80178da:	4603      	mov	r3, r0
 80178dc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80178de:	79fb      	ldrb	r3, [r7, #7]
 80178e0:	2b08      	cmp	r3, #8
 80178e2:	d009      	beq.n	80178f8 <tcp_kill_state+0x24>
 80178e4:	79fb      	ldrb	r3, [r7, #7]
 80178e6:	2b09      	cmp	r3, #9
 80178e8:	d006      	beq.n	80178f8 <tcp_kill_state+0x24>
 80178ea:	4b1a      	ldr	r3, [pc, #104]	; (8017954 <tcp_kill_state+0x80>)
 80178ec:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80178f0:	4919      	ldr	r1, [pc, #100]	; (8017958 <tcp_kill_state+0x84>)
 80178f2:	481a      	ldr	r0, [pc, #104]	; (801795c <tcp_kill_state+0x88>)
 80178f4:	f009 f93a 	bl	8020b6c <iprintf>

  inactivity = 0;
 80178f8:	2300      	movs	r3, #0
 80178fa:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80178fc:	2300      	movs	r3, #0
 80178fe:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017900:	4b17      	ldr	r3, [pc, #92]	; (8017960 <tcp_kill_state+0x8c>)
 8017902:	681b      	ldr	r3, [r3, #0]
 8017904:	617b      	str	r3, [r7, #20]
 8017906:	e017      	b.n	8017938 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8017908:	697b      	ldr	r3, [r7, #20]
 801790a:	7d1b      	ldrb	r3, [r3, #20]
 801790c:	79fa      	ldrb	r2, [r7, #7]
 801790e:	429a      	cmp	r2, r3
 8017910:	d10f      	bne.n	8017932 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017912:	4b14      	ldr	r3, [pc, #80]	; (8017964 <tcp_kill_state+0x90>)
 8017914:	681a      	ldr	r2, [r3, #0]
 8017916:	697b      	ldr	r3, [r7, #20]
 8017918:	6a1b      	ldr	r3, [r3, #32]
 801791a:	1ad3      	subs	r3, r2, r3
 801791c:	68fa      	ldr	r2, [r7, #12]
 801791e:	429a      	cmp	r2, r3
 8017920:	d807      	bhi.n	8017932 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8017922:	4b10      	ldr	r3, [pc, #64]	; (8017964 <tcp_kill_state+0x90>)
 8017924:	681a      	ldr	r2, [r3, #0]
 8017926:	697b      	ldr	r3, [r7, #20]
 8017928:	6a1b      	ldr	r3, [r3, #32]
 801792a:	1ad3      	subs	r3, r2, r3
 801792c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801792e:	697b      	ldr	r3, [r7, #20]
 8017930:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017932:	697b      	ldr	r3, [r7, #20]
 8017934:	68db      	ldr	r3, [r3, #12]
 8017936:	617b      	str	r3, [r7, #20]
 8017938:	697b      	ldr	r3, [r7, #20]
 801793a:	2b00      	cmp	r3, #0
 801793c:	d1e4      	bne.n	8017908 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801793e:	693b      	ldr	r3, [r7, #16]
 8017940:	2b00      	cmp	r3, #0
 8017942:	d003      	beq.n	801794c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8017944:	2100      	movs	r1, #0
 8017946:	6938      	ldr	r0, [r7, #16]
 8017948:	f7fe fe80 	bl	801664c <tcp_abandon>
  }
}
 801794c:	bf00      	nop
 801794e:	3718      	adds	r7, #24
 8017950:	46bd      	mov	sp, r7
 8017952:	bd80      	pop	{r7, pc}
 8017954:	08027178 	.word	0x08027178
 8017958:	08027730 	.word	0x08027730
 801795c:	080271e8 	.word	0x080271e8
 8017960:	24008e38 	.word	0x24008e38
 8017964:	24008e3c 	.word	0x24008e3c

08017968 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8017968:	b580      	push	{r7, lr}
 801796a:	b084      	sub	sp, #16
 801796c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801796e:	2300      	movs	r3, #0
 8017970:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8017972:	2300      	movs	r3, #0
 8017974:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017976:	4b12      	ldr	r3, [pc, #72]	; (80179c0 <tcp_kill_timewait+0x58>)
 8017978:	681b      	ldr	r3, [r3, #0]
 801797a:	60fb      	str	r3, [r7, #12]
 801797c:	e012      	b.n	80179a4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801797e:	4b11      	ldr	r3, [pc, #68]	; (80179c4 <tcp_kill_timewait+0x5c>)
 8017980:	681a      	ldr	r2, [r3, #0]
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	6a1b      	ldr	r3, [r3, #32]
 8017986:	1ad3      	subs	r3, r2, r3
 8017988:	687a      	ldr	r2, [r7, #4]
 801798a:	429a      	cmp	r2, r3
 801798c:	d807      	bhi.n	801799e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801798e:	4b0d      	ldr	r3, [pc, #52]	; (80179c4 <tcp_kill_timewait+0x5c>)
 8017990:	681a      	ldr	r2, [r3, #0]
 8017992:	68fb      	ldr	r3, [r7, #12]
 8017994:	6a1b      	ldr	r3, [r3, #32]
 8017996:	1ad3      	subs	r3, r2, r3
 8017998:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801799a:	68fb      	ldr	r3, [r7, #12]
 801799c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801799e:	68fb      	ldr	r3, [r7, #12]
 80179a0:	68db      	ldr	r3, [r3, #12]
 80179a2:	60fb      	str	r3, [r7, #12]
 80179a4:	68fb      	ldr	r3, [r7, #12]
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	d1e9      	bne.n	801797e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80179aa:	68bb      	ldr	r3, [r7, #8]
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	d002      	beq.n	80179b6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80179b0:	68b8      	ldr	r0, [r7, #8]
 80179b2:	f7fe ff09 	bl	80167c8 <tcp_abort>
  }
}
 80179b6:	bf00      	nop
 80179b8:	3710      	adds	r7, #16
 80179ba:	46bd      	mov	sp, r7
 80179bc:	bd80      	pop	{r7, pc}
 80179be:	bf00      	nop
 80179c0:	24008e48 	.word	0x24008e48
 80179c4:	24008e3c 	.word	0x24008e3c

080179c8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80179c8:	b580      	push	{r7, lr}
 80179ca:	b082      	sub	sp, #8
 80179cc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80179ce:	4b10      	ldr	r3, [pc, #64]	; (8017a10 <tcp_handle_closepend+0x48>)
 80179d0:	681b      	ldr	r3, [r3, #0]
 80179d2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80179d4:	e014      	b.n	8017a00 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	68db      	ldr	r3, [r3, #12]
 80179da:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	8b5b      	ldrh	r3, [r3, #26]
 80179e0:	f003 0308 	and.w	r3, r3, #8
 80179e4:	2b00      	cmp	r3, #0
 80179e6:	d009      	beq.n	80179fc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	8b5b      	ldrh	r3, [r3, #26]
 80179ec:	f023 0308 	bic.w	r3, r3, #8
 80179f0:	b29a      	uxth	r2, r3
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80179f6:	6878      	ldr	r0, [r7, #4]
 80179f8:	f7fe fd92 	bl	8016520 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80179fc:	683b      	ldr	r3, [r7, #0]
 80179fe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	2b00      	cmp	r3, #0
 8017a04:	d1e7      	bne.n	80179d6 <tcp_handle_closepend+0xe>
  }
}
 8017a06:	bf00      	nop
 8017a08:	bf00      	nop
 8017a0a:	3708      	adds	r7, #8
 8017a0c:	46bd      	mov	sp, r7
 8017a0e:	bd80      	pop	{r7, pc}
 8017a10:	24008e38 	.word	0x24008e38

08017a14 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8017a14:	b580      	push	{r7, lr}
 8017a16:	b084      	sub	sp, #16
 8017a18:	af00      	add	r7, sp, #0
 8017a1a:	4603      	mov	r3, r0
 8017a1c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017a1e:	2001      	movs	r0, #1
 8017a20:	f7fd f9ac 	bl	8014d7c <memp_malloc>
 8017a24:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8017a26:	68fb      	ldr	r3, [r7, #12]
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	d126      	bne.n	8017a7a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8017a2c:	f7ff ffcc 	bl	80179c8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8017a30:	f7ff ff9a 	bl	8017968 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017a34:	2001      	movs	r0, #1
 8017a36:	f7fd f9a1 	bl	8014d7c <memp_malloc>
 8017a3a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8017a3c:	68fb      	ldr	r3, [r7, #12]
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	d11b      	bne.n	8017a7a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8017a42:	2009      	movs	r0, #9
 8017a44:	f7ff ff46 	bl	80178d4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017a48:	2001      	movs	r0, #1
 8017a4a:	f7fd f997 	bl	8014d7c <memp_malloc>
 8017a4e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8017a50:	68fb      	ldr	r3, [r7, #12]
 8017a52:	2b00      	cmp	r3, #0
 8017a54:	d111      	bne.n	8017a7a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8017a56:	2008      	movs	r0, #8
 8017a58:	f7ff ff3c 	bl	80178d4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017a5c:	2001      	movs	r0, #1
 8017a5e:	f7fd f98d 	bl	8014d7c <memp_malloc>
 8017a62:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8017a64:	68fb      	ldr	r3, [r7, #12]
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	d107      	bne.n	8017a7a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8017a6a:	79fb      	ldrb	r3, [r7, #7]
 8017a6c:	4618      	mov	r0, r3
 8017a6e:	f7ff fee3 	bl	8017838 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017a72:	2001      	movs	r0, #1
 8017a74:	f7fd f982 	bl	8014d7c <memp_malloc>
 8017a78:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8017a7a:	68fb      	ldr	r3, [r7, #12]
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d03f      	beq.n	8017b00 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8017a80:	229c      	movs	r2, #156	; 0x9c
 8017a82:	2100      	movs	r1, #0
 8017a84:	68f8      	ldr	r0, [r7, #12]
 8017a86:	f008 f977 	bl	801fd78 <memset>
    pcb->prio = prio;
 8017a8a:	68fb      	ldr	r3, [r7, #12]
 8017a8c:	79fa      	ldrb	r2, [r7, #7]
 8017a8e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8017a90:	68fb      	ldr	r3, [r7, #12]
 8017a92:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8017a96:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8017a9a:	68fb      	ldr	r3, [r7, #12]
 8017a9c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8017aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8017aa2:	68fb      	ldr	r3, [r7, #12]
 8017aa4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8017aa6:	68fb      	ldr	r3, [r7, #12]
 8017aa8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8017aaa:	68fb      	ldr	r3, [r7, #12]
 8017aac:	22ff      	movs	r2, #255	; 0xff
 8017aae:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8017ab0:	68fb      	ldr	r3, [r7, #12]
 8017ab2:	f44f 7206 	mov.w	r2, #536	; 0x218
 8017ab6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8017ab8:	68fb      	ldr	r3, [r7, #12]
 8017aba:	2206      	movs	r2, #6
 8017abc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8017ac0:	68fb      	ldr	r3, [r7, #12]
 8017ac2:	2206      	movs	r2, #6
 8017ac4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8017ac6:	68fb      	ldr	r3, [r7, #12]
 8017ac8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017acc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8017ace:	68fb      	ldr	r3, [r7, #12]
 8017ad0:	2201      	movs	r2, #1
 8017ad2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8017ad6:	4b0d      	ldr	r3, [pc, #52]	; (8017b0c <tcp_alloc+0xf8>)
 8017ad8:	681a      	ldr	r2, [r3, #0]
 8017ada:	68fb      	ldr	r3, [r7, #12]
 8017adc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8017ade:	4b0c      	ldr	r3, [pc, #48]	; (8017b10 <tcp_alloc+0xfc>)
 8017ae0:	781a      	ldrb	r2, [r3, #0]
 8017ae2:	68fb      	ldr	r3, [r7, #12]
 8017ae4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8017ae6:	68fb      	ldr	r3, [r7, #12]
 8017ae8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8017aec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8017af0:	68fb      	ldr	r3, [r7, #12]
 8017af2:	4a08      	ldr	r2, [pc, #32]	; (8017b14 <tcp_alloc+0x100>)
 8017af4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8017af8:	68fb      	ldr	r3, [r7, #12]
 8017afa:	4a07      	ldr	r2, [pc, #28]	; (8017b18 <tcp_alloc+0x104>)
 8017afc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8017b00:	68fb      	ldr	r3, [r7, #12]
}
 8017b02:	4618      	mov	r0, r3
 8017b04:	3710      	adds	r7, #16
 8017b06:	46bd      	mov	sp, r7
 8017b08:	bd80      	pop	{r7, pc}
 8017b0a:	bf00      	nop
 8017b0c:	24008e3c 	.word	0x24008e3c
 8017b10:	240057a2 	.word	0x240057a2
 8017b14:	080177cd 	.word	0x080177cd
 8017b18:	006ddd00 	.word	0x006ddd00

08017b1c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8017b1c:	b580      	push	{r7, lr}
 8017b1e:	b084      	sub	sp, #16
 8017b20:	af00      	add	r7, sp, #0
 8017b22:	4603      	mov	r3, r0
 8017b24:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8017b26:	2040      	movs	r0, #64	; 0x40
 8017b28:	f7ff ff74 	bl	8017a14 <tcp_alloc>
 8017b2c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8017b2e:	68fb      	ldr	r3, [r7, #12]
}
 8017b30:	4618      	mov	r0, r3
 8017b32:	3710      	adds	r7, #16
 8017b34:	46bd      	mov	sp, r7
 8017b36:	bd80      	pop	{r7, pc}

08017b38 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8017b38:	b480      	push	{r7}
 8017b3a:	b083      	sub	sp, #12
 8017b3c:	af00      	add	r7, sp, #0
 8017b3e:	6078      	str	r0, [r7, #4]
 8017b40:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8017b42:	687b      	ldr	r3, [r7, #4]
 8017b44:	2b00      	cmp	r3, #0
 8017b46:	d002      	beq.n	8017b4e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	683a      	ldr	r2, [r7, #0]
 8017b4c:	611a      	str	r2, [r3, #16]
  }
}
 8017b4e:	bf00      	nop
 8017b50:	370c      	adds	r7, #12
 8017b52:	46bd      	mov	sp, r7
 8017b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b58:	4770      	bx	lr
	...

08017b5c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8017b5c:	b580      	push	{r7, lr}
 8017b5e:	b082      	sub	sp, #8
 8017b60:	af00      	add	r7, sp, #0
 8017b62:	6078      	str	r0, [r7, #4]
 8017b64:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8017b66:	687b      	ldr	r3, [r7, #4]
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d00e      	beq.n	8017b8a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	7d1b      	ldrb	r3, [r3, #20]
 8017b70:	2b01      	cmp	r3, #1
 8017b72:	d106      	bne.n	8017b82 <tcp_recv+0x26>
 8017b74:	4b07      	ldr	r3, [pc, #28]	; (8017b94 <tcp_recv+0x38>)
 8017b76:	f240 72df 	movw	r2, #2015	; 0x7df
 8017b7a:	4907      	ldr	r1, [pc, #28]	; (8017b98 <tcp_recv+0x3c>)
 8017b7c:	4807      	ldr	r0, [pc, #28]	; (8017b9c <tcp_recv+0x40>)
 8017b7e:	f008 fff5 	bl	8020b6c <iprintf>
    pcb->recv = recv;
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	683a      	ldr	r2, [r7, #0]
 8017b86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8017b8a:	bf00      	nop
 8017b8c:	3708      	adds	r7, #8
 8017b8e:	46bd      	mov	sp, r7
 8017b90:	bd80      	pop	{r7, pc}
 8017b92:	bf00      	nop
 8017b94:	08027178 	.word	0x08027178
 8017b98:	08027740 	.word	0x08027740
 8017b9c:	080271e8 	.word	0x080271e8

08017ba0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8017ba0:	b580      	push	{r7, lr}
 8017ba2:	b082      	sub	sp, #8
 8017ba4:	af00      	add	r7, sp, #0
 8017ba6:	6078      	str	r0, [r7, #4]
 8017ba8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	2b00      	cmp	r3, #0
 8017bae:	d00e      	beq.n	8017bce <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	7d1b      	ldrb	r3, [r3, #20]
 8017bb4:	2b01      	cmp	r3, #1
 8017bb6:	d106      	bne.n	8017bc6 <tcp_sent+0x26>
 8017bb8:	4b07      	ldr	r3, [pc, #28]	; (8017bd8 <tcp_sent+0x38>)
 8017bba:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8017bbe:	4907      	ldr	r1, [pc, #28]	; (8017bdc <tcp_sent+0x3c>)
 8017bc0:	4807      	ldr	r0, [pc, #28]	; (8017be0 <tcp_sent+0x40>)
 8017bc2:	f008 ffd3 	bl	8020b6c <iprintf>
    pcb->sent = sent;
 8017bc6:	687b      	ldr	r3, [r7, #4]
 8017bc8:	683a      	ldr	r2, [r7, #0]
 8017bca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8017bce:	bf00      	nop
 8017bd0:	3708      	adds	r7, #8
 8017bd2:	46bd      	mov	sp, r7
 8017bd4:	bd80      	pop	{r7, pc}
 8017bd6:	bf00      	nop
 8017bd8:	08027178 	.word	0x08027178
 8017bdc:	08027768 	.word	0x08027768
 8017be0:	080271e8 	.word	0x080271e8

08017be4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8017be4:	b580      	push	{r7, lr}
 8017be6:	b082      	sub	sp, #8
 8017be8:	af00      	add	r7, sp, #0
 8017bea:	6078      	str	r0, [r7, #4]
 8017bec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8017bee:	687b      	ldr	r3, [r7, #4]
 8017bf0:	2b00      	cmp	r3, #0
 8017bf2:	d00e      	beq.n	8017c12 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	7d1b      	ldrb	r3, [r3, #20]
 8017bf8:	2b01      	cmp	r3, #1
 8017bfa:	d106      	bne.n	8017c0a <tcp_err+0x26>
 8017bfc:	4b07      	ldr	r3, [pc, #28]	; (8017c1c <tcp_err+0x38>)
 8017bfe:	f640 020d 	movw	r2, #2061	; 0x80d
 8017c02:	4907      	ldr	r1, [pc, #28]	; (8017c20 <tcp_err+0x3c>)
 8017c04:	4807      	ldr	r0, [pc, #28]	; (8017c24 <tcp_err+0x40>)
 8017c06:	f008 ffb1 	bl	8020b6c <iprintf>
    pcb->errf = err;
 8017c0a:	687b      	ldr	r3, [r7, #4]
 8017c0c:	683a      	ldr	r2, [r7, #0]
 8017c0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8017c12:	bf00      	nop
 8017c14:	3708      	adds	r7, #8
 8017c16:	46bd      	mov	sp, r7
 8017c18:	bd80      	pop	{r7, pc}
 8017c1a:	bf00      	nop
 8017c1c:	08027178 	.word	0x08027178
 8017c20:	08027790 	.word	0x08027790
 8017c24:	080271e8 	.word	0x080271e8

08017c28 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8017c28:	b480      	push	{r7}
 8017c2a:	b085      	sub	sp, #20
 8017c2c:	af00      	add	r7, sp, #0
 8017c2e:	6078      	str	r0, [r7, #4]
 8017c30:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	d008      	beq.n	8017c4a <tcp_accept+0x22>
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	7d1b      	ldrb	r3, [r3, #20]
 8017c3c:	2b01      	cmp	r3, #1
 8017c3e:	d104      	bne.n	8017c4a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8017c44:	68fb      	ldr	r3, [r7, #12]
 8017c46:	683a      	ldr	r2, [r7, #0]
 8017c48:	619a      	str	r2, [r3, #24]
  }
}
 8017c4a:	bf00      	nop
 8017c4c:	3714      	adds	r7, #20
 8017c4e:	46bd      	mov	sp, r7
 8017c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c54:	4770      	bx	lr
	...

08017c58 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8017c58:	b580      	push	{r7, lr}
 8017c5a:	b084      	sub	sp, #16
 8017c5c:	af00      	add	r7, sp, #0
 8017c5e:	60f8      	str	r0, [r7, #12]
 8017c60:	60b9      	str	r1, [r7, #8]
 8017c62:	4613      	mov	r3, r2
 8017c64:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8017c66:	68fb      	ldr	r3, [r7, #12]
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	d107      	bne.n	8017c7c <tcp_poll+0x24>
 8017c6c:	4b0e      	ldr	r3, [pc, #56]	; (8017ca8 <tcp_poll+0x50>)
 8017c6e:	f640 023d 	movw	r2, #2109	; 0x83d
 8017c72:	490e      	ldr	r1, [pc, #56]	; (8017cac <tcp_poll+0x54>)
 8017c74:	480e      	ldr	r0, [pc, #56]	; (8017cb0 <tcp_poll+0x58>)
 8017c76:	f008 ff79 	bl	8020b6c <iprintf>
 8017c7a:	e011      	b.n	8017ca0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8017c7c:	68fb      	ldr	r3, [r7, #12]
 8017c7e:	7d1b      	ldrb	r3, [r3, #20]
 8017c80:	2b01      	cmp	r3, #1
 8017c82:	d106      	bne.n	8017c92 <tcp_poll+0x3a>
 8017c84:	4b08      	ldr	r3, [pc, #32]	; (8017ca8 <tcp_poll+0x50>)
 8017c86:	f640 023e 	movw	r2, #2110	; 0x83e
 8017c8a:	490a      	ldr	r1, [pc, #40]	; (8017cb4 <tcp_poll+0x5c>)
 8017c8c:	4808      	ldr	r0, [pc, #32]	; (8017cb0 <tcp_poll+0x58>)
 8017c8e:	f008 ff6d 	bl	8020b6c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8017c92:	68fb      	ldr	r3, [r7, #12]
 8017c94:	68ba      	ldr	r2, [r7, #8]
 8017c96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8017c9a:	68fb      	ldr	r3, [r7, #12]
 8017c9c:	79fa      	ldrb	r2, [r7, #7]
 8017c9e:	775a      	strb	r2, [r3, #29]
}
 8017ca0:	3710      	adds	r7, #16
 8017ca2:	46bd      	mov	sp, r7
 8017ca4:	bd80      	pop	{r7, pc}
 8017ca6:	bf00      	nop
 8017ca8:	08027178 	.word	0x08027178
 8017cac:	080277b8 	.word	0x080277b8
 8017cb0:	080271e8 	.word	0x080271e8
 8017cb4:	080277d0 	.word	0x080277d0

08017cb8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8017cb8:	b580      	push	{r7, lr}
 8017cba:	b082      	sub	sp, #8
 8017cbc:	af00      	add	r7, sp, #0
 8017cbe:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	d107      	bne.n	8017cd6 <tcp_pcb_purge+0x1e>
 8017cc6:	4b21      	ldr	r3, [pc, #132]	; (8017d4c <tcp_pcb_purge+0x94>)
 8017cc8:	f640 0251 	movw	r2, #2129	; 0x851
 8017ccc:	4920      	ldr	r1, [pc, #128]	; (8017d50 <tcp_pcb_purge+0x98>)
 8017cce:	4821      	ldr	r0, [pc, #132]	; (8017d54 <tcp_pcb_purge+0x9c>)
 8017cd0:	f008 ff4c 	bl	8020b6c <iprintf>
 8017cd4:	e037      	b.n	8017d46 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	7d1b      	ldrb	r3, [r3, #20]
 8017cda:	2b00      	cmp	r3, #0
 8017cdc:	d033      	beq.n	8017d46 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8017ce2:	2b0a      	cmp	r3, #10
 8017ce4:	d02f      	beq.n	8017d46 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8017cea:	2b01      	cmp	r3, #1
 8017cec:	d02b      	beq.n	8017d46 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017cf2:	2b00      	cmp	r3, #0
 8017cf4:	d007      	beq.n	8017d06 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017cfa:	4618      	mov	r0, r3
 8017cfc:	f7fd ff24 	bl	8015b48 <pbuf_free>
      pcb->refused_data = NULL;
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	2200      	movs	r2, #0
 8017d04:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017d0a:	2b00      	cmp	r3, #0
 8017d0c:	d002      	beq.n	8017d14 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8017d0e:	6878      	ldr	r0, [r7, #4]
 8017d10:	f000 f986 	bl	8018020 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017d1a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017d20:	4618      	mov	r0, r3
 8017d22:	f7ff fcf9 	bl	8017718 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8017d26:	687b      	ldr	r3, [r7, #4]
 8017d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017d2a:	4618      	mov	r0, r3
 8017d2c:	f7ff fcf4 	bl	8017718 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	2200      	movs	r2, #0
 8017d34:	66da      	str	r2, [r3, #108]	; 0x6c
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8017d3e:	687b      	ldr	r3, [r7, #4]
 8017d40:	2200      	movs	r2, #0
 8017d42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8017d46:	3708      	adds	r7, #8
 8017d48:	46bd      	mov	sp, r7
 8017d4a:	bd80      	pop	{r7, pc}
 8017d4c:	08027178 	.word	0x08027178
 8017d50:	080277f0 	.word	0x080277f0
 8017d54:	080271e8 	.word	0x080271e8

08017d58 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8017d58:	b580      	push	{r7, lr}
 8017d5a:	b084      	sub	sp, #16
 8017d5c:	af00      	add	r7, sp, #0
 8017d5e:	6078      	str	r0, [r7, #4]
 8017d60:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8017d62:	683b      	ldr	r3, [r7, #0]
 8017d64:	2b00      	cmp	r3, #0
 8017d66:	d106      	bne.n	8017d76 <tcp_pcb_remove+0x1e>
 8017d68:	4b3e      	ldr	r3, [pc, #248]	; (8017e64 <tcp_pcb_remove+0x10c>)
 8017d6a:	f640 0283 	movw	r2, #2179	; 0x883
 8017d6e:	493e      	ldr	r1, [pc, #248]	; (8017e68 <tcp_pcb_remove+0x110>)
 8017d70:	483e      	ldr	r0, [pc, #248]	; (8017e6c <tcp_pcb_remove+0x114>)
 8017d72:	f008 fefb 	bl	8020b6c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	d106      	bne.n	8017d8a <tcp_pcb_remove+0x32>
 8017d7c:	4b39      	ldr	r3, [pc, #228]	; (8017e64 <tcp_pcb_remove+0x10c>)
 8017d7e:	f640 0284 	movw	r2, #2180	; 0x884
 8017d82:	493b      	ldr	r1, [pc, #236]	; (8017e70 <tcp_pcb_remove+0x118>)
 8017d84:	4839      	ldr	r0, [pc, #228]	; (8017e6c <tcp_pcb_remove+0x114>)
 8017d86:	f008 fef1 	bl	8020b6c <iprintf>

  TCP_RMV(pcblist, pcb);
 8017d8a:	687b      	ldr	r3, [r7, #4]
 8017d8c:	681b      	ldr	r3, [r3, #0]
 8017d8e:	683a      	ldr	r2, [r7, #0]
 8017d90:	429a      	cmp	r2, r3
 8017d92:	d105      	bne.n	8017da0 <tcp_pcb_remove+0x48>
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	681b      	ldr	r3, [r3, #0]
 8017d98:	68da      	ldr	r2, [r3, #12]
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	601a      	str	r2, [r3, #0]
 8017d9e:	e013      	b.n	8017dc8 <tcp_pcb_remove+0x70>
 8017da0:	687b      	ldr	r3, [r7, #4]
 8017da2:	681b      	ldr	r3, [r3, #0]
 8017da4:	60fb      	str	r3, [r7, #12]
 8017da6:	e00c      	b.n	8017dc2 <tcp_pcb_remove+0x6a>
 8017da8:	68fb      	ldr	r3, [r7, #12]
 8017daa:	68db      	ldr	r3, [r3, #12]
 8017dac:	683a      	ldr	r2, [r7, #0]
 8017dae:	429a      	cmp	r2, r3
 8017db0:	d104      	bne.n	8017dbc <tcp_pcb_remove+0x64>
 8017db2:	683b      	ldr	r3, [r7, #0]
 8017db4:	68da      	ldr	r2, [r3, #12]
 8017db6:	68fb      	ldr	r3, [r7, #12]
 8017db8:	60da      	str	r2, [r3, #12]
 8017dba:	e005      	b.n	8017dc8 <tcp_pcb_remove+0x70>
 8017dbc:	68fb      	ldr	r3, [r7, #12]
 8017dbe:	68db      	ldr	r3, [r3, #12]
 8017dc0:	60fb      	str	r3, [r7, #12]
 8017dc2:	68fb      	ldr	r3, [r7, #12]
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	d1ef      	bne.n	8017da8 <tcp_pcb_remove+0x50>
 8017dc8:	683b      	ldr	r3, [r7, #0]
 8017dca:	2200      	movs	r2, #0
 8017dcc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8017dce:	6838      	ldr	r0, [r7, #0]
 8017dd0:	f7ff ff72 	bl	8017cb8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8017dd4:	683b      	ldr	r3, [r7, #0]
 8017dd6:	7d1b      	ldrb	r3, [r3, #20]
 8017dd8:	2b0a      	cmp	r3, #10
 8017dda:	d013      	beq.n	8017e04 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8017ddc:	683b      	ldr	r3, [r7, #0]
 8017dde:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8017de0:	2b01      	cmp	r3, #1
 8017de2:	d00f      	beq.n	8017e04 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8017de4:	683b      	ldr	r3, [r7, #0]
 8017de6:	8b5b      	ldrh	r3, [r3, #26]
 8017de8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8017dec:	2b00      	cmp	r3, #0
 8017dee:	d009      	beq.n	8017e04 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8017df0:	683b      	ldr	r3, [r7, #0]
 8017df2:	8b5b      	ldrh	r3, [r3, #26]
 8017df4:	f043 0302 	orr.w	r3, r3, #2
 8017df8:	b29a      	uxth	r2, r3
 8017dfa:	683b      	ldr	r3, [r7, #0]
 8017dfc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8017dfe:	6838      	ldr	r0, [r7, #0]
 8017e00:	f003 fbc2 	bl	801b588 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8017e04:	683b      	ldr	r3, [r7, #0]
 8017e06:	7d1b      	ldrb	r3, [r3, #20]
 8017e08:	2b01      	cmp	r3, #1
 8017e0a:	d020      	beq.n	8017e4e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8017e0c:	683b      	ldr	r3, [r7, #0]
 8017e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	d006      	beq.n	8017e22 <tcp_pcb_remove+0xca>
 8017e14:	4b13      	ldr	r3, [pc, #76]	; (8017e64 <tcp_pcb_remove+0x10c>)
 8017e16:	f640 0293 	movw	r2, #2195	; 0x893
 8017e1a:	4916      	ldr	r1, [pc, #88]	; (8017e74 <tcp_pcb_remove+0x11c>)
 8017e1c:	4813      	ldr	r0, [pc, #76]	; (8017e6c <tcp_pcb_remove+0x114>)
 8017e1e:	f008 fea5 	bl	8020b6c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8017e22:	683b      	ldr	r3, [r7, #0]
 8017e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	d006      	beq.n	8017e38 <tcp_pcb_remove+0xe0>
 8017e2a:	4b0e      	ldr	r3, [pc, #56]	; (8017e64 <tcp_pcb_remove+0x10c>)
 8017e2c:	f640 0294 	movw	r2, #2196	; 0x894
 8017e30:	4911      	ldr	r1, [pc, #68]	; (8017e78 <tcp_pcb_remove+0x120>)
 8017e32:	480e      	ldr	r0, [pc, #56]	; (8017e6c <tcp_pcb_remove+0x114>)
 8017e34:	f008 fe9a 	bl	8020b6c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8017e38:	683b      	ldr	r3, [r7, #0]
 8017e3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d006      	beq.n	8017e4e <tcp_pcb_remove+0xf6>
 8017e40:	4b08      	ldr	r3, [pc, #32]	; (8017e64 <tcp_pcb_remove+0x10c>)
 8017e42:	f640 0296 	movw	r2, #2198	; 0x896
 8017e46:	490d      	ldr	r1, [pc, #52]	; (8017e7c <tcp_pcb_remove+0x124>)
 8017e48:	4808      	ldr	r0, [pc, #32]	; (8017e6c <tcp_pcb_remove+0x114>)
 8017e4a:	f008 fe8f 	bl	8020b6c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8017e4e:	683b      	ldr	r3, [r7, #0]
 8017e50:	2200      	movs	r2, #0
 8017e52:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8017e54:	683b      	ldr	r3, [r7, #0]
 8017e56:	2200      	movs	r2, #0
 8017e58:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8017e5a:	bf00      	nop
 8017e5c:	3710      	adds	r7, #16
 8017e5e:	46bd      	mov	sp, r7
 8017e60:	bd80      	pop	{r7, pc}
 8017e62:	bf00      	nop
 8017e64:	08027178 	.word	0x08027178
 8017e68:	0802780c 	.word	0x0802780c
 8017e6c:	080271e8 	.word	0x080271e8
 8017e70:	08027828 	.word	0x08027828
 8017e74:	08027848 	.word	0x08027848
 8017e78:	08027860 	.word	0x08027860
 8017e7c:	0802787c 	.word	0x0802787c

08017e80 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8017e80:	b580      	push	{r7, lr}
 8017e82:	b082      	sub	sp, #8
 8017e84:	af00      	add	r7, sp, #0
 8017e86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d106      	bne.n	8017e9c <tcp_next_iss+0x1c>
 8017e8e:	4b0a      	ldr	r3, [pc, #40]	; (8017eb8 <tcp_next_iss+0x38>)
 8017e90:	f640 02af 	movw	r2, #2223	; 0x8af
 8017e94:	4909      	ldr	r1, [pc, #36]	; (8017ebc <tcp_next_iss+0x3c>)
 8017e96:	480a      	ldr	r0, [pc, #40]	; (8017ec0 <tcp_next_iss+0x40>)
 8017e98:	f008 fe68 	bl	8020b6c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8017e9c:	4b09      	ldr	r3, [pc, #36]	; (8017ec4 <tcp_next_iss+0x44>)
 8017e9e:	681a      	ldr	r2, [r3, #0]
 8017ea0:	4b09      	ldr	r3, [pc, #36]	; (8017ec8 <tcp_next_iss+0x48>)
 8017ea2:	681b      	ldr	r3, [r3, #0]
 8017ea4:	4413      	add	r3, r2
 8017ea6:	4a07      	ldr	r2, [pc, #28]	; (8017ec4 <tcp_next_iss+0x44>)
 8017ea8:	6013      	str	r3, [r2, #0]
  return iss;
 8017eaa:	4b06      	ldr	r3, [pc, #24]	; (8017ec4 <tcp_next_iss+0x44>)
 8017eac:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8017eae:	4618      	mov	r0, r3
 8017eb0:	3708      	adds	r7, #8
 8017eb2:	46bd      	mov	sp, r7
 8017eb4:	bd80      	pop	{r7, pc}
 8017eb6:	bf00      	nop
 8017eb8:	08027178 	.word	0x08027178
 8017ebc:	08027894 	.word	0x08027894
 8017ec0:	080271e8 	.word	0x080271e8
 8017ec4:	24000428 	.word	0x24000428
 8017ec8:	24008e3c 	.word	0x24008e3c

08017ecc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8017ecc:	b580      	push	{r7, lr}
 8017ece:	b086      	sub	sp, #24
 8017ed0:	af00      	add	r7, sp, #0
 8017ed2:	4603      	mov	r3, r0
 8017ed4:	60b9      	str	r1, [r7, #8]
 8017ed6:	607a      	str	r2, [r7, #4]
 8017ed8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8017eda:	687b      	ldr	r3, [r7, #4]
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	d106      	bne.n	8017eee <tcp_eff_send_mss_netif+0x22>
 8017ee0:	4b14      	ldr	r3, [pc, #80]	; (8017f34 <tcp_eff_send_mss_netif+0x68>)
 8017ee2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8017ee6:	4914      	ldr	r1, [pc, #80]	; (8017f38 <tcp_eff_send_mss_netif+0x6c>)
 8017ee8:	4814      	ldr	r0, [pc, #80]	; (8017f3c <tcp_eff_send_mss_netif+0x70>)
 8017eea:	f008 fe3f 	bl	8020b6c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8017eee:	68bb      	ldr	r3, [r7, #8]
 8017ef0:	2b00      	cmp	r3, #0
 8017ef2:	d101      	bne.n	8017ef8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8017ef4:	89fb      	ldrh	r3, [r7, #14]
 8017ef6:	e019      	b.n	8017f2c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8017ef8:	68bb      	ldr	r3, [r7, #8]
 8017efa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017efc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8017efe:	8afb      	ldrh	r3, [r7, #22]
 8017f00:	2b00      	cmp	r3, #0
 8017f02:	d012      	beq.n	8017f2a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8017f04:	2328      	movs	r3, #40	; 0x28
 8017f06:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8017f08:	8afa      	ldrh	r2, [r7, #22]
 8017f0a:	8abb      	ldrh	r3, [r7, #20]
 8017f0c:	429a      	cmp	r2, r3
 8017f0e:	d904      	bls.n	8017f1a <tcp_eff_send_mss_netif+0x4e>
 8017f10:	8afa      	ldrh	r2, [r7, #22]
 8017f12:	8abb      	ldrh	r3, [r7, #20]
 8017f14:	1ad3      	subs	r3, r2, r3
 8017f16:	b29b      	uxth	r3, r3
 8017f18:	e000      	b.n	8017f1c <tcp_eff_send_mss_netif+0x50>
 8017f1a:	2300      	movs	r3, #0
 8017f1c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8017f1e:	8a7a      	ldrh	r2, [r7, #18]
 8017f20:	89fb      	ldrh	r3, [r7, #14]
 8017f22:	4293      	cmp	r3, r2
 8017f24:	bf28      	it	cs
 8017f26:	4613      	movcs	r3, r2
 8017f28:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8017f2a:	89fb      	ldrh	r3, [r7, #14]
}
 8017f2c:	4618      	mov	r0, r3
 8017f2e:	3718      	adds	r7, #24
 8017f30:	46bd      	mov	sp, r7
 8017f32:	bd80      	pop	{r7, pc}
 8017f34:	08027178 	.word	0x08027178
 8017f38:	080278b0 	.word	0x080278b0
 8017f3c:	080271e8 	.word	0x080271e8

08017f40 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8017f40:	b580      	push	{r7, lr}
 8017f42:	b084      	sub	sp, #16
 8017f44:	af00      	add	r7, sp, #0
 8017f46:	6078      	str	r0, [r7, #4]
 8017f48:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8017f4a:	683b      	ldr	r3, [r7, #0]
 8017f4c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8017f4e:	687b      	ldr	r3, [r7, #4]
 8017f50:	2b00      	cmp	r3, #0
 8017f52:	d119      	bne.n	8017f88 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8017f54:	4b10      	ldr	r3, [pc, #64]	; (8017f98 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8017f56:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8017f5a:	4910      	ldr	r1, [pc, #64]	; (8017f9c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8017f5c:	4810      	ldr	r0, [pc, #64]	; (8017fa0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8017f5e:	f008 fe05 	bl	8020b6c <iprintf>

  while (pcb != NULL) {
 8017f62:	e011      	b.n	8017f88 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8017f64:	68fb      	ldr	r3, [r7, #12]
 8017f66:	681a      	ldr	r2, [r3, #0]
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	681b      	ldr	r3, [r3, #0]
 8017f6c:	429a      	cmp	r2, r3
 8017f6e:	d108      	bne.n	8017f82 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8017f70:	68fb      	ldr	r3, [r7, #12]
 8017f72:	68db      	ldr	r3, [r3, #12]
 8017f74:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8017f76:	68f8      	ldr	r0, [r7, #12]
 8017f78:	f7fe fc26 	bl	80167c8 <tcp_abort>
      pcb = next;
 8017f7c:	68bb      	ldr	r3, [r7, #8]
 8017f7e:	60fb      	str	r3, [r7, #12]
 8017f80:	e002      	b.n	8017f88 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8017f82:	68fb      	ldr	r3, [r7, #12]
 8017f84:	68db      	ldr	r3, [r3, #12]
 8017f86:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8017f88:	68fb      	ldr	r3, [r7, #12]
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d1ea      	bne.n	8017f64 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8017f8e:	bf00      	nop
 8017f90:	bf00      	nop
 8017f92:	3710      	adds	r7, #16
 8017f94:	46bd      	mov	sp, r7
 8017f96:	bd80      	pop	{r7, pc}
 8017f98:	08027178 	.word	0x08027178
 8017f9c:	080278d8 	.word	0x080278d8
 8017fa0:	080271e8 	.word	0x080271e8

08017fa4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8017fa4:	b580      	push	{r7, lr}
 8017fa6:	b084      	sub	sp, #16
 8017fa8:	af00      	add	r7, sp, #0
 8017faa:	6078      	str	r0, [r7, #4]
 8017fac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8017fae:	687b      	ldr	r3, [r7, #4]
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	d02a      	beq.n	801800a <tcp_netif_ip_addr_changed+0x66>
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	681b      	ldr	r3, [r3, #0]
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	d026      	beq.n	801800a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8017fbc:	4b15      	ldr	r3, [pc, #84]	; (8018014 <tcp_netif_ip_addr_changed+0x70>)
 8017fbe:	681b      	ldr	r3, [r3, #0]
 8017fc0:	4619      	mov	r1, r3
 8017fc2:	6878      	ldr	r0, [r7, #4]
 8017fc4:	f7ff ffbc 	bl	8017f40 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8017fc8:	4b13      	ldr	r3, [pc, #76]	; (8018018 <tcp_netif_ip_addr_changed+0x74>)
 8017fca:	681b      	ldr	r3, [r3, #0]
 8017fcc:	4619      	mov	r1, r3
 8017fce:	6878      	ldr	r0, [r7, #4]
 8017fd0:	f7ff ffb6 	bl	8017f40 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8017fd4:	683b      	ldr	r3, [r7, #0]
 8017fd6:	2b00      	cmp	r3, #0
 8017fd8:	d017      	beq.n	801800a <tcp_netif_ip_addr_changed+0x66>
 8017fda:	683b      	ldr	r3, [r7, #0]
 8017fdc:	681b      	ldr	r3, [r3, #0]
 8017fde:	2b00      	cmp	r3, #0
 8017fe0:	d013      	beq.n	801800a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017fe2:	4b0e      	ldr	r3, [pc, #56]	; (801801c <tcp_netif_ip_addr_changed+0x78>)
 8017fe4:	681b      	ldr	r3, [r3, #0]
 8017fe6:	60fb      	str	r3, [r7, #12]
 8017fe8:	e00c      	b.n	8018004 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8017fea:	68fb      	ldr	r3, [r7, #12]
 8017fec:	681a      	ldr	r2, [r3, #0]
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	681b      	ldr	r3, [r3, #0]
 8017ff2:	429a      	cmp	r2, r3
 8017ff4:	d103      	bne.n	8017ffe <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8017ff6:	683b      	ldr	r3, [r7, #0]
 8017ff8:	681a      	ldr	r2, [r3, #0]
 8017ffa:	68fb      	ldr	r3, [r7, #12]
 8017ffc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017ffe:	68fb      	ldr	r3, [r7, #12]
 8018000:	68db      	ldr	r3, [r3, #12]
 8018002:	60fb      	str	r3, [r7, #12]
 8018004:	68fb      	ldr	r3, [r7, #12]
 8018006:	2b00      	cmp	r3, #0
 8018008:	d1ef      	bne.n	8017fea <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801800a:	bf00      	nop
 801800c:	3710      	adds	r7, #16
 801800e:	46bd      	mov	sp, r7
 8018010:	bd80      	pop	{r7, pc}
 8018012:	bf00      	nop
 8018014:	24008e38 	.word	0x24008e38
 8018018:	24008e44 	.word	0x24008e44
 801801c:	24008e40 	.word	0x24008e40

08018020 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8018020:	b580      	push	{r7, lr}
 8018022:	b082      	sub	sp, #8
 8018024:	af00      	add	r7, sp, #0
 8018026:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801802c:	2b00      	cmp	r3, #0
 801802e:	d007      	beq.n	8018040 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018034:	4618      	mov	r0, r3
 8018036:	f7ff fb6f 	bl	8017718 <tcp_segs_free>
    pcb->ooseq = NULL;
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	2200      	movs	r2, #0
 801803e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8018040:	bf00      	nop
 8018042:	3708      	adds	r7, #8
 8018044:	46bd      	mov	sp, r7
 8018046:	bd80      	pop	{r7, pc}

08018048 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8018048:	b590      	push	{r4, r7, lr}
 801804a:	b08d      	sub	sp, #52	; 0x34
 801804c:	af04      	add	r7, sp, #16
 801804e:	6078      	str	r0, [r7, #4]
 8018050:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8018052:	687b      	ldr	r3, [r7, #4]
 8018054:	2b00      	cmp	r3, #0
 8018056:	d105      	bne.n	8018064 <tcp_input+0x1c>
 8018058:	4b9b      	ldr	r3, [pc, #620]	; (80182c8 <tcp_input+0x280>)
 801805a:	2283      	movs	r2, #131	; 0x83
 801805c:	499b      	ldr	r1, [pc, #620]	; (80182cc <tcp_input+0x284>)
 801805e:	489c      	ldr	r0, [pc, #624]	; (80182d0 <tcp_input+0x288>)
 8018060:	f008 fd84 	bl	8020b6c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	685b      	ldr	r3, [r3, #4]
 8018068:	4a9a      	ldr	r2, [pc, #616]	; (80182d4 <tcp_input+0x28c>)
 801806a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801806c:	687b      	ldr	r3, [r7, #4]
 801806e:	895b      	ldrh	r3, [r3, #10]
 8018070:	2b13      	cmp	r3, #19
 8018072:	f240 83c4 	bls.w	80187fe <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8018076:	4b98      	ldr	r3, [pc, #608]	; (80182d8 <tcp_input+0x290>)
 8018078:	695b      	ldr	r3, [r3, #20]
 801807a:	4a97      	ldr	r2, [pc, #604]	; (80182d8 <tcp_input+0x290>)
 801807c:	6812      	ldr	r2, [r2, #0]
 801807e:	4611      	mov	r1, r2
 8018080:	4618      	mov	r0, r3
 8018082:	f7fb fbd1 	bl	8013828 <ip4_addr_isbroadcast_u32>
 8018086:	4603      	mov	r3, r0
 8018088:	2b00      	cmp	r3, #0
 801808a:	f040 83ba 	bne.w	8018802 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801808e:	4b92      	ldr	r3, [pc, #584]	; (80182d8 <tcp_input+0x290>)
 8018090:	695b      	ldr	r3, [r3, #20]
 8018092:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8018096:	2be0      	cmp	r3, #224	; 0xe0
 8018098:	f000 83b3 	beq.w	8018802 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801809c:	4b8d      	ldr	r3, [pc, #564]	; (80182d4 <tcp_input+0x28c>)
 801809e:	681b      	ldr	r3, [r3, #0]
 80180a0:	899b      	ldrh	r3, [r3, #12]
 80180a2:	b29b      	uxth	r3, r3
 80180a4:	4618      	mov	r0, r3
 80180a6:	f7f9 fe53 	bl	8011d50 <lwip_htons>
 80180aa:	4603      	mov	r3, r0
 80180ac:	0b1b      	lsrs	r3, r3, #12
 80180ae:	b29b      	uxth	r3, r3
 80180b0:	b2db      	uxtb	r3, r3
 80180b2:	009b      	lsls	r3, r3, #2
 80180b4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80180b6:	7cbb      	ldrb	r3, [r7, #18]
 80180b8:	2b13      	cmp	r3, #19
 80180ba:	f240 83a4 	bls.w	8018806 <tcp_input+0x7be>
 80180be:	7cbb      	ldrb	r3, [r7, #18]
 80180c0:	b29a      	uxth	r2, r3
 80180c2:	687b      	ldr	r3, [r7, #4]
 80180c4:	891b      	ldrh	r3, [r3, #8]
 80180c6:	429a      	cmp	r2, r3
 80180c8:	f200 839d 	bhi.w	8018806 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80180cc:	7cbb      	ldrb	r3, [r7, #18]
 80180ce:	b29b      	uxth	r3, r3
 80180d0:	3b14      	subs	r3, #20
 80180d2:	b29a      	uxth	r2, r3
 80180d4:	4b81      	ldr	r3, [pc, #516]	; (80182dc <tcp_input+0x294>)
 80180d6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80180d8:	4b81      	ldr	r3, [pc, #516]	; (80182e0 <tcp_input+0x298>)
 80180da:	2200      	movs	r2, #0
 80180dc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	895a      	ldrh	r2, [r3, #10]
 80180e2:	7cbb      	ldrb	r3, [r7, #18]
 80180e4:	b29b      	uxth	r3, r3
 80180e6:	429a      	cmp	r2, r3
 80180e8:	d309      	bcc.n	80180fe <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80180ea:	4b7c      	ldr	r3, [pc, #496]	; (80182dc <tcp_input+0x294>)
 80180ec:	881a      	ldrh	r2, [r3, #0]
 80180ee:	4b7d      	ldr	r3, [pc, #500]	; (80182e4 <tcp_input+0x29c>)
 80180f0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80180f2:	7cbb      	ldrb	r3, [r7, #18]
 80180f4:	4619      	mov	r1, r3
 80180f6:	6878      	ldr	r0, [r7, #4]
 80180f8:	f7fd fca0 	bl	8015a3c <pbuf_remove_header>
 80180fc:	e04e      	b.n	801819c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	681b      	ldr	r3, [r3, #0]
 8018102:	2b00      	cmp	r3, #0
 8018104:	d105      	bne.n	8018112 <tcp_input+0xca>
 8018106:	4b70      	ldr	r3, [pc, #448]	; (80182c8 <tcp_input+0x280>)
 8018108:	22c2      	movs	r2, #194	; 0xc2
 801810a:	4977      	ldr	r1, [pc, #476]	; (80182e8 <tcp_input+0x2a0>)
 801810c:	4870      	ldr	r0, [pc, #448]	; (80182d0 <tcp_input+0x288>)
 801810e:	f008 fd2d 	bl	8020b6c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8018112:	2114      	movs	r1, #20
 8018114:	6878      	ldr	r0, [r7, #4]
 8018116:	f7fd fc91 	bl	8015a3c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	895a      	ldrh	r2, [r3, #10]
 801811e:	4b71      	ldr	r3, [pc, #452]	; (80182e4 <tcp_input+0x29c>)
 8018120:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8018122:	4b6e      	ldr	r3, [pc, #440]	; (80182dc <tcp_input+0x294>)
 8018124:	881a      	ldrh	r2, [r3, #0]
 8018126:	4b6f      	ldr	r3, [pc, #444]	; (80182e4 <tcp_input+0x29c>)
 8018128:	881b      	ldrh	r3, [r3, #0]
 801812a:	1ad3      	subs	r3, r2, r3
 801812c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801812e:	4b6d      	ldr	r3, [pc, #436]	; (80182e4 <tcp_input+0x29c>)
 8018130:	881b      	ldrh	r3, [r3, #0]
 8018132:	4619      	mov	r1, r3
 8018134:	6878      	ldr	r0, [r7, #4]
 8018136:	f7fd fc81 	bl	8015a3c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801813a:	687b      	ldr	r3, [r7, #4]
 801813c:	681b      	ldr	r3, [r3, #0]
 801813e:	895b      	ldrh	r3, [r3, #10]
 8018140:	8a3a      	ldrh	r2, [r7, #16]
 8018142:	429a      	cmp	r2, r3
 8018144:	f200 8361 	bhi.w	801880a <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	681b      	ldr	r3, [r3, #0]
 801814c:	685b      	ldr	r3, [r3, #4]
 801814e:	4a64      	ldr	r2, [pc, #400]	; (80182e0 <tcp_input+0x298>)
 8018150:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	681b      	ldr	r3, [r3, #0]
 8018156:	8a3a      	ldrh	r2, [r7, #16]
 8018158:	4611      	mov	r1, r2
 801815a:	4618      	mov	r0, r3
 801815c:	f7fd fc6e 	bl	8015a3c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	891a      	ldrh	r2, [r3, #8]
 8018164:	8a3b      	ldrh	r3, [r7, #16]
 8018166:	1ad3      	subs	r3, r2, r3
 8018168:	b29a      	uxth	r2, r3
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	895b      	ldrh	r3, [r3, #10]
 8018172:	2b00      	cmp	r3, #0
 8018174:	d005      	beq.n	8018182 <tcp_input+0x13a>
 8018176:	4b54      	ldr	r3, [pc, #336]	; (80182c8 <tcp_input+0x280>)
 8018178:	22df      	movs	r2, #223	; 0xdf
 801817a:	495c      	ldr	r1, [pc, #368]	; (80182ec <tcp_input+0x2a4>)
 801817c:	4854      	ldr	r0, [pc, #336]	; (80182d0 <tcp_input+0x288>)
 801817e:	f008 fcf5 	bl	8020b6c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	891a      	ldrh	r2, [r3, #8]
 8018186:	687b      	ldr	r3, [r7, #4]
 8018188:	681b      	ldr	r3, [r3, #0]
 801818a:	891b      	ldrh	r3, [r3, #8]
 801818c:	429a      	cmp	r2, r3
 801818e:	d005      	beq.n	801819c <tcp_input+0x154>
 8018190:	4b4d      	ldr	r3, [pc, #308]	; (80182c8 <tcp_input+0x280>)
 8018192:	22e0      	movs	r2, #224	; 0xe0
 8018194:	4956      	ldr	r1, [pc, #344]	; (80182f0 <tcp_input+0x2a8>)
 8018196:	484e      	ldr	r0, [pc, #312]	; (80182d0 <tcp_input+0x288>)
 8018198:	f008 fce8 	bl	8020b6c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801819c:	4b4d      	ldr	r3, [pc, #308]	; (80182d4 <tcp_input+0x28c>)
 801819e:	681b      	ldr	r3, [r3, #0]
 80181a0:	881b      	ldrh	r3, [r3, #0]
 80181a2:	b29b      	uxth	r3, r3
 80181a4:	4a4b      	ldr	r2, [pc, #300]	; (80182d4 <tcp_input+0x28c>)
 80181a6:	6814      	ldr	r4, [r2, #0]
 80181a8:	4618      	mov	r0, r3
 80181aa:	f7f9 fdd1 	bl	8011d50 <lwip_htons>
 80181ae:	4603      	mov	r3, r0
 80181b0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80181b2:	4b48      	ldr	r3, [pc, #288]	; (80182d4 <tcp_input+0x28c>)
 80181b4:	681b      	ldr	r3, [r3, #0]
 80181b6:	885b      	ldrh	r3, [r3, #2]
 80181b8:	b29b      	uxth	r3, r3
 80181ba:	4a46      	ldr	r2, [pc, #280]	; (80182d4 <tcp_input+0x28c>)
 80181bc:	6814      	ldr	r4, [r2, #0]
 80181be:	4618      	mov	r0, r3
 80181c0:	f7f9 fdc6 	bl	8011d50 <lwip_htons>
 80181c4:	4603      	mov	r3, r0
 80181c6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80181c8:	4b42      	ldr	r3, [pc, #264]	; (80182d4 <tcp_input+0x28c>)
 80181ca:	681b      	ldr	r3, [r3, #0]
 80181cc:	685b      	ldr	r3, [r3, #4]
 80181ce:	4a41      	ldr	r2, [pc, #260]	; (80182d4 <tcp_input+0x28c>)
 80181d0:	6814      	ldr	r4, [r2, #0]
 80181d2:	4618      	mov	r0, r3
 80181d4:	f7f9 fdd1 	bl	8011d7a <lwip_htonl>
 80181d8:	4603      	mov	r3, r0
 80181da:	6063      	str	r3, [r4, #4]
 80181dc:	6863      	ldr	r3, [r4, #4]
 80181de:	4a45      	ldr	r2, [pc, #276]	; (80182f4 <tcp_input+0x2ac>)
 80181e0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80181e2:	4b3c      	ldr	r3, [pc, #240]	; (80182d4 <tcp_input+0x28c>)
 80181e4:	681b      	ldr	r3, [r3, #0]
 80181e6:	689b      	ldr	r3, [r3, #8]
 80181e8:	4a3a      	ldr	r2, [pc, #232]	; (80182d4 <tcp_input+0x28c>)
 80181ea:	6814      	ldr	r4, [r2, #0]
 80181ec:	4618      	mov	r0, r3
 80181ee:	f7f9 fdc4 	bl	8011d7a <lwip_htonl>
 80181f2:	4603      	mov	r3, r0
 80181f4:	60a3      	str	r3, [r4, #8]
 80181f6:	68a3      	ldr	r3, [r4, #8]
 80181f8:	4a3f      	ldr	r2, [pc, #252]	; (80182f8 <tcp_input+0x2b0>)
 80181fa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80181fc:	4b35      	ldr	r3, [pc, #212]	; (80182d4 <tcp_input+0x28c>)
 80181fe:	681b      	ldr	r3, [r3, #0]
 8018200:	89db      	ldrh	r3, [r3, #14]
 8018202:	b29b      	uxth	r3, r3
 8018204:	4a33      	ldr	r2, [pc, #204]	; (80182d4 <tcp_input+0x28c>)
 8018206:	6814      	ldr	r4, [r2, #0]
 8018208:	4618      	mov	r0, r3
 801820a:	f7f9 fda1 	bl	8011d50 <lwip_htons>
 801820e:	4603      	mov	r3, r0
 8018210:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8018212:	4b30      	ldr	r3, [pc, #192]	; (80182d4 <tcp_input+0x28c>)
 8018214:	681b      	ldr	r3, [r3, #0]
 8018216:	899b      	ldrh	r3, [r3, #12]
 8018218:	b29b      	uxth	r3, r3
 801821a:	4618      	mov	r0, r3
 801821c:	f7f9 fd98 	bl	8011d50 <lwip_htons>
 8018220:	4603      	mov	r3, r0
 8018222:	b2db      	uxtb	r3, r3
 8018224:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018228:	b2da      	uxtb	r2, r3
 801822a:	4b34      	ldr	r3, [pc, #208]	; (80182fc <tcp_input+0x2b4>)
 801822c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801822e:	687b      	ldr	r3, [r7, #4]
 8018230:	891a      	ldrh	r2, [r3, #8]
 8018232:	4b33      	ldr	r3, [pc, #204]	; (8018300 <tcp_input+0x2b8>)
 8018234:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8018236:	4b31      	ldr	r3, [pc, #196]	; (80182fc <tcp_input+0x2b4>)
 8018238:	781b      	ldrb	r3, [r3, #0]
 801823a:	f003 0303 	and.w	r3, r3, #3
 801823e:	2b00      	cmp	r3, #0
 8018240:	d00c      	beq.n	801825c <tcp_input+0x214>
    tcplen++;
 8018242:	4b2f      	ldr	r3, [pc, #188]	; (8018300 <tcp_input+0x2b8>)
 8018244:	881b      	ldrh	r3, [r3, #0]
 8018246:	3301      	adds	r3, #1
 8018248:	b29a      	uxth	r2, r3
 801824a:	4b2d      	ldr	r3, [pc, #180]	; (8018300 <tcp_input+0x2b8>)
 801824c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	891a      	ldrh	r2, [r3, #8]
 8018252:	4b2b      	ldr	r3, [pc, #172]	; (8018300 <tcp_input+0x2b8>)
 8018254:	881b      	ldrh	r3, [r3, #0]
 8018256:	429a      	cmp	r2, r3
 8018258:	f200 82d9 	bhi.w	801880e <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801825c:	2300      	movs	r3, #0
 801825e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018260:	4b28      	ldr	r3, [pc, #160]	; (8018304 <tcp_input+0x2bc>)
 8018262:	681b      	ldr	r3, [r3, #0]
 8018264:	61fb      	str	r3, [r7, #28]
 8018266:	e09d      	b.n	80183a4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8018268:	69fb      	ldr	r3, [r7, #28]
 801826a:	7d1b      	ldrb	r3, [r3, #20]
 801826c:	2b00      	cmp	r3, #0
 801826e:	d105      	bne.n	801827c <tcp_input+0x234>
 8018270:	4b15      	ldr	r3, [pc, #84]	; (80182c8 <tcp_input+0x280>)
 8018272:	22fb      	movs	r2, #251	; 0xfb
 8018274:	4924      	ldr	r1, [pc, #144]	; (8018308 <tcp_input+0x2c0>)
 8018276:	4816      	ldr	r0, [pc, #88]	; (80182d0 <tcp_input+0x288>)
 8018278:	f008 fc78 	bl	8020b6c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801827c:	69fb      	ldr	r3, [r7, #28]
 801827e:	7d1b      	ldrb	r3, [r3, #20]
 8018280:	2b0a      	cmp	r3, #10
 8018282:	d105      	bne.n	8018290 <tcp_input+0x248>
 8018284:	4b10      	ldr	r3, [pc, #64]	; (80182c8 <tcp_input+0x280>)
 8018286:	22fc      	movs	r2, #252	; 0xfc
 8018288:	4920      	ldr	r1, [pc, #128]	; (801830c <tcp_input+0x2c4>)
 801828a:	4811      	ldr	r0, [pc, #68]	; (80182d0 <tcp_input+0x288>)
 801828c:	f008 fc6e 	bl	8020b6c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8018290:	69fb      	ldr	r3, [r7, #28]
 8018292:	7d1b      	ldrb	r3, [r3, #20]
 8018294:	2b01      	cmp	r3, #1
 8018296:	d105      	bne.n	80182a4 <tcp_input+0x25c>
 8018298:	4b0b      	ldr	r3, [pc, #44]	; (80182c8 <tcp_input+0x280>)
 801829a:	22fd      	movs	r2, #253	; 0xfd
 801829c:	491c      	ldr	r1, [pc, #112]	; (8018310 <tcp_input+0x2c8>)
 801829e:	480c      	ldr	r0, [pc, #48]	; (80182d0 <tcp_input+0x288>)
 80182a0:	f008 fc64 	bl	8020b6c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80182a4:	69fb      	ldr	r3, [r7, #28]
 80182a6:	7a1b      	ldrb	r3, [r3, #8]
 80182a8:	2b00      	cmp	r3, #0
 80182aa:	d033      	beq.n	8018314 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80182ac:	69fb      	ldr	r3, [r7, #28]
 80182ae:	7a1a      	ldrb	r2, [r3, #8]
 80182b0:	4b09      	ldr	r3, [pc, #36]	; (80182d8 <tcp_input+0x290>)
 80182b2:	685b      	ldr	r3, [r3, #4]
 80182b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80182b8:	3301      	adds	r3, #1
 80182ba:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80182bc:	429a      	cmp	r2, r3
 80182be:	d029      	beq.n	8018314 <tcp_input+0x2cc>
      prev = pcb;
 80182c0:	69fb      	ldr	r3, [r7, #28]
 80182c2:	61bb      	str	r3, [r7, #24]
      continue;
 80182c4:	e06b      	b.n	801839e <tcp_input+0x356>
 80182c6:	bf00      	nop
 80182c8:	0802790c 	.word	0x0802790c
 80182cc:	0802796c 	.word	0x0802796c
 80182d0:	08027984 	.word	0x08027984
 80182d4:	240057b4 	.word	0x240057b4
 80182d8:	24005f48 	.word	0x24005f48
 80182dc:	240057b8 	.word	0x240057b8
 80182e0:	240057bc 	.word	0x240057bc
 80182e4:	240057ba 	.word	0x240057ba
 80182e8:	080279ac 	.word	0x080279ac
 80182ec:	080279bc 	.word	0x080279bc
 80182f0:	080279c8 	.word	0x080279c8
 80182f4:	240057c4 	.word	0x240057c4
 80182f8:	240057c8 	.word	0x240057c8
 80182fc:	240057d0 	.word	0x240057d0
 8018300:	240057ce 	.word	0x240057ce
 8018304:	24008e38 	.word	0x24008e38
 8018308:	080279e8 	.word	0x080279e8
 801830c:	08027a10 	.word	0x08027a10
 8018310:	08027a3c 	.word	0x08027a3c
    }

    if (pcb->remote_port == tcphdr->src &&
 8018314:	69fb      	ldr	r3, [r7, #28]
 8018316:	8b1a      	ldrh	r2, [r3, #24]
 8018318:	4b94      	ldr	r3, [pc, #592]	; (801856c <tcp_input+0x524>)
 801831a:	681b      	ldr	r3, [r3, #0]
 801831c:	881b      	ldrh	r3, [r3, #0]
 801831e:	b29b      	uxth	r3, r3
 8018320:	429a      	cmp	r2, r3
 8018322:	d13a      	bne.n	801839a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8018324:	69fb      	ldr	r3, [r7, #28]
 8018326:	8ada      	ldrh	r2, [r3, #22]
 8018328:	4b90      	ldr	r3, [pc, #576]	; (801856c <tcp_input+0x524>)
 801832a:	681b      	ldr	r3, [r3, #0]
 801832c:	885b      	ldrh	r3, [r3, #2]
 801832e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8018330:	429a      	cmp	r2, r3
 8018332:	d132      	bne.n	801839a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8018334:	69fb      	ldr	r3, [r7, #28]
 8018336:	685a      	ldr	r2, [r3, #4]
 8018338:	4b8d      	ldr	r3, [pc, #564]	; (8018570 <tcp_input+0x528>)
 801833a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801833c:	429a      	cmp	r2, r3
 801833e:	d12c      	bne.n	801839a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8018340:	69fb      	ldr	r3, [r7, #28]
 8018342:	681a      	ldr	r2, [r3, #0]
 8018344:	4b8a      	ldr	r3, [pc, #552]	; (8018570 <tcp_input+0x528>)
 8018346:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8018348:	429a      	cmp	r2, r3
 801834a:	d126      	bne.n	801839a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801834c:	69fb      	ldr	r3, [r7, #28]
 801834e:	68db      	ldr	r3, [r3, #12]
 8018350:	69fa      	ldr	r2, [r7, #28]
 8018352:	429a      	cmp	r2, r3
 8018354:	d106      	bne.n	8018364 <tcp_input+0x31c>
 8018356:	4b87      	ldr	r3, [pc, #540]	; (8018574 <tcp_input+0x52c>)
 8018358:	f240 120d 	movw	r2, #269	; 0x10d
 801835c:	4986      	ldr	r1, [pc, #536]	; (8018578 <tcp_input+0x530>)
 801835e:	4887      	ldr	r0, [pc, #540]	; (801857c <tcp_input+0x534>)
 8018360:	f008 fc04 	bl	8020b6c <iprintf>
      if (prev != NULL) {
 8018364:	69bb      	ldr	r3, [r7, #24]
 8018366:	2b00      	cmp	r3, #0
 8018368:	d00a      	beq.n	8018380 <tcp_input+0x338>
        prev->next = pcb->next;
 801836a:	69fb      	ldr	r3, [r7, #28]
 801836c:	68da      	ldr	r2, [r3, #12]
 801836e:	69bb      	ldr	r3, [r7, #24]
 8018370:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8018372:	4b83      	ldr	r3, [pc, #524]	; (8018580 <tcp_input+0x538>)
 8018374:	681a      	ldr	r2, [r3, #0]
 8018376:	69fb      	ldr	r3, [r7, #28]
 8018378:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801837a:	4a81      	ldr	r2, [pc, #516]	; (8018580 <tcp_input+0x538>)
 801837c:	69fb      	ldr	r3, [r7, #28]
 801837e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8018380:	69fb      	ldr	r3, [r7, #28]
 8018382:	68db      	ldr	r3, [r3, #12]
 8018384:	69fa      	ldr	r2, [r7, #28]
 8018386:	429a      	cmp	r2, r3
 8018388:	d111      	bne.n	80183ae <tcp_input+0x366>
 801838a:	4b7a      	ldr	r3, [pc, #488]	; (8018574 <tcp_input+0x52c>)
 801838c:	f240 1215 	movw	r2, #277	; 0x115
 8018390:	497c      	ldr	r1, [pc, #496]	; (8018584 <tcp_input+0x53c>)
 8018392:	487a      	ldr	r0, [pc, #488]	; (801857c <tcp_input+0x534>)
 8018394:	f008 fbea 	bl	8020b6c <iprintf>
      break;
 8018398:	e009      	b.n	80183ae <tcp_input+0x366>
    }
    prev = pcb;
 801839a:	69fb      	ldr	r3, [r7, #28]
 801839c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801839e:	69fb      	ldr	r3, [r7, #28]
 80183a0:	68db      	ldr	r3, [r3, #12]
 80183a2:	61fb      	str	r3, [r7, #28]
 80183a4:	69fb      	ldr	r3, [r7, #28]
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	f47f af5e 	bne.w	8018268 <tcp_input+0x220>
 80183ac:	e000      	b.n	80183b0 <tcp_input+0x368>
      break;
 80183ae:	bf00      	nop
  }

  if (pcb == NULL) {
 80183b0:	69fb      	ldr	r3, [r7, #28]
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	f040 8095 	bne.w	80184e2 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80183b8:	4b73      	ldr	r3, [pc, #460]	; (8018588 <tcp_input+0x540>)
 80183ba:	681b      	ldr	r3, [r3, #0]
 80183bc:	61fb      	str	r3, [r7, #28]
 80183be:	e03f      	b.n	8018440 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80183c0:	69fb      	ldr	r3, [r7, #28]
 80183c2:	7d1b      	ldrb	r3, [r3, #20]
 80183c4:	2b0a      	cmp	r3, #10
 80183c6:	d006      	beq.n	80183d6 <tcp_input+0x38e>
 80183c8:	4b6a      	ldr	r3, [pc, #424]	; (8018574 <tcp_input+0x52c>)
 80183ca:	f240 121f 	movw	r2, #287	; 0x11f
 80183ce:	496f      	ldr	r1, [pc, #444]	; (801858c <tcp_input+0x544>)
 80183d0:	486a      	ldr	r0, [pc, #424]	; (801857c <tcp_input+0x534>)
 80183d2:	f008 fbcb 	bl	8020b6c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80183d6:	69fb      	ldr	r3, [r7, #28]
 80183d8:	7a1b      	ldrb	r3, [r3, #8]
 80183da:	2b00      	cmp	r3, #0
 80183dc:	d009      	beq.n	80183f2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80183de:	69fb      	ldr	r3, [r7, #28]
 80183e0:	7a1a      	ldrb	r2, [r3, #8]
 80183e2:	4b63      	ldr	r3, [pc, #396]	; (8018570 <tcp_input+0x528>)
 80183e4:	685b      	ldr	r3, [r3, #4]
 80183e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80183ea:	3301      	adds	r3, #1
 80183ec:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80183ee:	429a      	cmp	r2, r3
 80183f0:	d122      	bne.n	8018438 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80183f2:	69fb      	ldr	r3, [r7, #28]
 80183f4:	8b1a      	ldrh	r2, [r3, #24]
 80183f6:	4b5d      	ldr	r3, [pc, #372]	; (801856c <tcp_input+0x524>)
 80183f8:	681b      	ldr	r3, [r3, #0]
 80183fa:	881b      	ldrh	r3, [r3, #0]
 80183fc:	b29b      	uxth	r3, r3
 80183fe:	429a      	cmp	r2, r3
 8018400:	d11b      	bne.n	801843a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8018402:	69fb      	ldr	r3, [r7, #28]
 8018404:	8ada      	ldrh	r2, [r3, #22]
 8018406:	4b59      	ldr	r3, [pc, #356]	; (801856c <tcp_input+0x524>)
 8018408:	681b      	ldr	r3, [r3, #0]
 801840a:	885b      	ldrh	r3, [r3, #2]
 801840c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801840e:	429a      	cmp	r2, r3
 8018410:	d113      	bne.n	801843a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8018412:	69fb      	ldr	r3, [r7, #28]
 8018414:	685a      	ldr	r2, [r3, #4]
 8018416:	4b56      	ldr	r3, [pc, #344]	; (8018570 <tcp_input+0x528>)
 8018418:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801841a:	429a      	cmp	r2, r3
 801841c:	d10d      	bne.n	801843a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801841e:	69fb      	ldr	r3, [r7, #28]
 8018420:	681a      	ldr	r2, [r3, #0]
 8018422:	4b53      	ldr	r3, [pc, #332]	; (8018570 <tcp_input+0x528>)
 8018424:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8018426:	429a      	cmp	r2, r3
 8018428:	d107      	bne.n	801843a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801842a:	69f8      	ldr	r0, [r7, #28]
 801842c:	f000 fb54 	bl	8018ad8 <tcp_timewait_input>
        }
        pbuf_free(p);
 8018430:	6878      	ldr	r0, [r7, #4]
 8018432:	f7fd fb89 	bl	8015b48 <pbuf_free>
        return;
 8018436:	e1f0      	b.n	801881a <tcp_input+0x7d2>
        continue;
 8018438:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801843a:	69fb      	ldr	r3, [r7, #28]
 801843c:	68db      	ldr	r3, [r3, #12]
 801843e:	61fb      	str	r3, [r7, #28]
 8018440:	69fb      	ldr	r3, [r7, #28]
 8018442:	2b00      	cmp	r3, #0
 8018444:	d1bc      	bne.n	80183c0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8018446:	2300      	movs	r3, #0
 8018448:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801844a:	4b51      	ldr	r3, [pc, #324]	; (8018590 <tcp_input+0x548>)
 801844c:	681b      	ldr	r3, [r3, #0]
 801844e:	617b      	str	r3, [r7, #20]
 8018450:	e02a      	b.n	80184a8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8018452:	697b      	ldr	r3, [r7, #20]
 8018454:	7a1b      	ldrb	r3, [r3, #8]
 8018456:	2b00      	cmp	r3, #0
 8018458:	d00c      	beq.n	8018474 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801845a:	697b      	ldr	r3, [r7, #20]
 801845c:	7a1a      	ldrb	r2, [r3, #8]
 801845e:	4b44      	ldr	r3, [pc, #272]	; (8018570 <tcp_input+0x528>)
 8018460:	685b      	ldr	r3, [r3, #4]
 8018462:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018466:	3301      	adds	r3, #1
 8018468:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801846a:	429a      	cmp	r2, r3
 801846c:	d002      	beq.n	8018474 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801846e:	697b      	ldr	r3, [r7, #20]
 8018470:	61bb      	str	r3, [r7, #24]
        continue;
 8018472:	e016      	b.n	80184a2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8018474:	697b      	ldr	r3, [r7, #20]
 8018476:	8ada      	ldrh	r2, [r3, #22]
 8018478:	4b3c      	ldr	r3, [pc, #240]	; (801856c <tcp_input+0x524>)
 801847a:	681b      	ldr	r3, [r3, #0]
 801847c:	885b      	ldrh	r3, [r3, #2]
 801847e:	b29b      	uxth	r3, r3
 8018480:	429a      	cmp	r2, r3
 8018482:	d10c      	bne.n	801849e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8018484:	697b      	ldr	r3, [r7, #20]
 8018486:	681a      	ldr	r2, [r3, #0]
 8018488:	4b39      	ldr	r3, [pc, #228]	; (8018570 <tcp_input+0x528>)
 801848a:	695b      	ldr	r3, [r3, #20]
 801848c:	429a      	cmp	r2, r3
 801848e:	d00f      	beq.n	80184b0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8018490:	697b      	ldr	r3, [r7, #20]
 8018492:	2b00      	cmp	r3, #0
 8018494:	d00d      	beq.n	80184b2 <tcp_input+0x46a>
 8018496:	697b      	ldr	r3, [r7, #20]
 8018498:	681b      	ldr	r3, [r3, #0]
 801849a:	2b00      	cmp	r3, #0
 801849c:	d009      	beq.n	80184b2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801849e:	697b      	ldr	r3, [r7, #20]
 80184a0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80184a2:	697b      	ldr	r3, [r7, #20]
 80184a4:	68db      	ldr	r3, [r3, #12]
 80184a6:	617b      	str	r3, [r7, #20]
 80184a8:	697b      	ldr	r3, [r7, #20]
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d1d1      	bne.n	8018452 <tcp_input+0x40a>
 80184ae:	e000      	b.n	80184b2 <tcp_input+0x46a>
            break;
 80184b0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80184b2:	697b      	ldr	r3, [r7, #20]
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	d014      	beq.n	80184e2 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80184b8:	69bb      	ldr	r3, [r7, #24]
 80184ba:	2b00      	cmp	r3, #0
 80184bc:	d00a      	beq.n	80184d4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80184be:	697b      	ldr	r3, [r7, #20]
 80184c0:	68da      	ldr	r2, [r3, #12]
 80184c2:	69bb      	ldr	r3, [r7, #24]
 80184c4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80184c6:	4b32      	ldr	r3, [pc, #200]	; (8018590 <tcp_input+0x548>)
 80184c8:	681a      	ldr	r2, [r3, #0]
 80184ca:	697b      	ldr	r3, [r7, #20]
 80184cc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80184ce:	4a30      	ldr	r2, [pc, #192]	; (8018590 <tcp_input+0x548>)
 80184d0:	697b      	ldr	r3, [r7, #20]
 80184d2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80184d4:	6978      	ldr	r0, [r7, #20]
 80184d6:	f000 fa01 	bl	80188dc <tcp_listen_input>
      }
      pbuf_free(p);
 80184da:	6878      	ldr	r0, [r7, #4]
 80184dc:	f7fd fb34 	bl	8015b48 <pbuf_free>
      return;
 80184e0:	e19b      	b.n	801881a <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80184e2:	69fb      	ldr	r3, [r7, #28]
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	f000 8160 	beq.w	80187aa <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80184ea:	4b2a      	ldr	r3, [pc, #168]	; (8018594 <tcp_input+0x54c>)
 80184ec:	2200      	movs	r2, #0
 80184ee:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	891a      	ldrh	r2, [r3, #8]
 80184f4:	4b27      	ldr	r3, [pc, #156]	; (8018594 <tcp_input+0x54c>)
 80184f6:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80184f8:	4a26      	ldr	r2, [pc, #152]	; (8018594 <tcp_input+0x54c>)
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80184fe:	4b1b      	ldr	r3, [pc, #108]	; (801856c <tcp_input+0x524>)
 8018500:	681b      	ldr	r3, [r3, #0]
 8018502:	4a24      	ldr	r2, [pc, #144]	; (8018594 <tcp_input+0x54c>)
 8018504:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8018506:	4b24      	ldr	r3, [pc, #144]	; (8018598 <tcp_input+0x550>)
 8018508:	2200      	movs	r2, #0
 801850a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801850c:	4b23      	ldr	r3, [pc, #140]	; (801859c <tcp_input+0x554>)
 801850e:	2200      	movs	r2, #0
 8018510:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8018512:	4b23      	ldr	r3, [pc, #140]	; (80185a0 <tcp_input+0x558>)
 8018514:	2200      	movs	r2, #0
 8018516:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8018518:	4b22      	ldr	r3, [pc, #136]	; (80185a4 <tcp_input+0x55c>)
 801851a:	781b      	ldrb	r3, [r3, #0]
 801851c:	f003 0308 	and.w	r3, r3, #8
 8018520:	2b00      	cmp	r3, #0
 8018522:	d006      	beq.n	8018532 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	7b5b      	ldrb	r3, [r3, #13]
 8018528:	f043 0301 	orr.w	r3, r3, #1
 801852c:	b2da      	uxtb	r2, r3
 801852e:	687b      	ldr	r3, [r7, #4]
 8018530:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8018532:	69fb      	ldr	r3, [r7, #28]
 8018534:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018536:	2b00      	cmp	r3, #0
 8018538:	d038      	beq.n	80185ac <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801853a:	69f8      	ldr	r0, [r7, #28]
 801853c:	f7ff f870 	bl	8017620 <tcp_process_refused_data>
 8018540:	4603      	mov	r3, r0
 8018542:	f113 0f0d 	cmn.w	r3, #13
 8018546:	d007      	beq.n	8018558 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8018548:	69fb      	ldr	r3, [r7, #28]
 801854a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801854c:	2b00      	cmp	r3, #0
 801854e:	d02d      	beq.n	80185ac <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8018550:	4b15      	ldr	r3, [pc, #84]	; (80185a8 <tcp_input+0x560>)
 8018552:	881b      	ldrh	r3, [r3, #0]
 8018554:	2b00      	cmp	r3, #0
 8018556:	d029      	beq.n	80185ac <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8018558:	69fb      	ldr	r3, [r7, #28]
 801855a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801855c:	2b00      	cmp	r3, #0
 801855e:	f040 8104 	bne.w	801876a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8018562:	69f8      	ldr	r0, [r7, #28]
 8018564:	f003 fe16 	bl	801c194 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8018568:	e0ff      	b.n	801876a <tcp_input+0x722>
 801856a:	bf00      	nop
 801856c:	240057b4 	.word	0x240057b4
 8018570:	24005f48 	.word	0x24005f48
 8018574:	0802790c 	.word	0x0802790c
 8018578:	08027a64 	.word	0x08027a64
 801857c:	08027984 	.word	0x08027984
 8018580:	24008e38 	.word	0x24008e38
 8018584:	08027a90 	.word	0x08027a90
 8018588:	24008e48 	.word	0x24008e48
 801858c:	08027abc 	.word	0x08027abc
 8018590:	24008e40 	.word	0x24008e40
 8018594:	240057a4 	.word	0x240057a4
 8018598:	240057d4 	.word	0x240057d4
 801859c:	240057d1 	.word	0x240057d1
 80185a0:	240057cc 	.word	0x240057cc
 80185a4:	240057d0 	.word	0x240057d0
 80185a8:	240057ce 	.word	0x240057ce
      }
    }
    tcp_input_pcb = pcb;
 80185ac:	4a9c      	ldr	r2, [pc, #624]	; (8018820 <tcp_input+0x7d8>)
 80185ae:	69fb      	ldr	r3, [r7, #28]
 80185b0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80185b2:	69f8      	ldr	r0, [r7, #28]
 80185b4:	f000 fb0a 	bl	8018bcc <tcp_process>
 80185b8:	4603      	mov	r3, r0
 80185ba:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80185bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80185c0:	f113 0f0d 	cmn.w	r3, #13
 80185c4:	f000 80d3 	beq.w	801876e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 80185c8:	4b96      	ldr	r3, [pc, #600]	; (8018824 <tcp_input+0x7dc>)
 80185ca:	781b      	ldrb	r3, [r3, #0]
 80185cc:	f003 0308 	and.w	r3, r3, #8
 80185d0:	2b00      	cmp	r3, #0
 80185d2:	d015      	beq.n	8018600 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80185d4:	69fb      	ldr	r3, [r7, #28]
 80185d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80185da:	2b00      	cmp	r3, #0
 80185dc:	d008      	beq.n	80185f0 <tcp_input+0x5a8>
 80185de:	69fb      	ldr	r3, [r7, #28]
 80185e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80185e4:	69fa      	ldr	r2, [r7, #28]
 80185e6:	6912      	ldr	r2, [r2, #16]
 80185e8:	f06f 010d 	mvn.w	r1, #13
 80185ec:	4610      	mov	r0, r2
 80185ee:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80185f0:	69f9      	ldr	r1, [r7, #28]
 80185f2:	488d      	ldr	r0, [pc, #564]	; (8018828 <tcp_input+0x7e0>)
 80185f4:	f7ff fbb0 	bl	8017d58 <tcp_pcb_remove>
        tcp_free(pcb);
 80185f8:	69f8      	ldr	r0, [r7, #28]
 80185fa:	f7fd fdfd 	bl	80161f8 <tcp_free>
 80185fe:	e0c1      	b.n	8018784 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8018600:	2300      	movs	r3, #0
 8018602:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8018604:	4b89      	ldr	r3, [pc, #548]	; (801882c <tcp_input+0x7e4>)
 8018606:	881b      	ldrh	r3, [r3, #0]
 8018608:	2b00      	cmp	r3, #0
 801860a:	d01d      	beq.n	8018648 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801860c:	4b87      	ldr	r3, [pc, #540]	; (801882c <tcp_input+0x7e4>)
 801860e:	881b      	ldrh	r3, [r3, #0]
 8018610:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8018612:	69fb      	ldr	r3, [r7, #28]
 8018614:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018618:	2b00      	cmp	r3, #0
 801861a:	d00a      	beq.n	8018632 <tcp_input+0x5ea>
 801861c:	69fb      	ldr	r3, [r7, #28]
 801861e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018622:	69fa      	ldr	r2, [r7, #28]
 8018624:	6910      	ldr	r0, [r2, #16]
 8018626:	89fa      	ldrh	r2, [r7, #14]
 8018628:	69f9      	ldr	r1, [r7, #28]
 801862a:	4798      	blx	r3
 801862c:	4603      	mov	r3, r0
 801862e:	74fb      	strb	r3, [r7, #19]
 8018630:	e001      	b.n	8018636 <tcp_input+0x5ee>
 8018632:	2300      	movs	r3, #0
 8018634:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8018636:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801863a:	f113 0f0d 	cmn.w	r3, #13
 801863e:	f000 8098 	beq.w	8018772 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8018642:	4b7a      	ldr	r3, [pc, #488]	; (801882c <tcp_input+0x7e4>)
 8018644:	2200      	movs	r2, #0
 8018646:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8018648:	69f8      	ldr	r0, [r7, #28]
 801864a:	f000 f907 	bl	801885c <tcp_input_delayed_close>
 801864e:	4603      	mov	r3, r0
 8018650:	2b00      	cmp	r3, #0
 8018652:	f040 8090 	bne.w	8018776 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8018656:	4b76      	ldr	r3, [pc, #472]	; (8018830 <tcp_input+0x7e8>)
 8018658:	681b      	ldr	r3, [r3, #0]
 801865a:	2b00      	cmp	r3, #0
 801865c:	d041      	beq.n	80186e2 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801865e:	69fb      	ldr	r3, [r7, #28]
 8018660:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018662:	2b00      	cmp	r3, #0
 8018664:	d006      	beq.n	8018674 <tcp_input+0x62c>
 8018666:	4b73      	ldr	r3, [pc, #460]	; (8018834 <tcp_input+0x7ec>)
 8018668:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801866c:	4972      	ldr	r1, [pc, #456]	; (8018838 <tcp_input+0x7f0>)
 801866e:	4873      	ldr	r0, [pc, #460]	; (801883c <tcp_input+0x7f4>)
 8018670:	f008 fa7c 	bl	8020b6c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8018674:	69fb      	ldr	r3, [r7, #28]
 8018676:	8b5b      	ldrh	r3, [r3, #26]
 8018678:	f003 0310 	and.w	r3, r3, #16
 801867c:	2b00      	cmp	r3, #0
 801867e:	d008      	beq.n	8018692 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8018680:	4b6b      	ldr	r3, [pc, #428]	; (8018830 <tcp_input+0x7e8>)
 8018682:	681b      	ldr	r3, [r3, #0]
 8018684:	4618      	mov	r0, r3
 8018686:	f7fd fa5f 	bl	8015b48 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801868a:	69f8      	ldr	r0, [r7, #28]
 801868c:	f7fe f89c 	bl	80167c8 <tcp_abort>
            goto aborted;
 8018690:	e078      	b.n	8018784 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8018692:	69fb      	ldr	r3, [r7, #28]
 8018694:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018698:	2b00      	cmp	r3, #0
 801869a:	d00c      	beq.n	80186b6 <tcp_input+0x66e>
 801869c:	69fb      	ldr	r3, [r7, #28]
 801869e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80186a2:	69fb      	ldr	r3, [r7, #28]
 80186a4:	6918      	ldr	r0, [r3, #16]
 80186a6:	4b62      	ldr	r3, [pc, #392]	; (8018830 <tcp_input+0x7e8>)
 80186a8:	681a      	ldr	r2, [r3, #0]
 80186aa:	2300      	movs	r3, #0
 80186ac:	69f9      	ldr	r1, [r7, #28]
 80186ae:	47a0      	blx	r4
 80186b0:	4603      	mov	r3, r0
 80186b2:	74fb      	strb	r3, [r7, #19]
 80186b4:	e008      	b.n	80186c8 <tcp_input+0x680>
 80186b6:	4b5e      	ldr	r3, [pc, #376]	; (8018830 <tcp_input+0x7e8>)
 80186b8:	681a      	ldr	r2, [r3, #0]
 80186ba:	2300      	movs	r3, #0
 80186bc:	69f9      	ldr	r1, [r7, #28]
 80186be:	2000      	movs	r0, #0
 80186c0:	f7ff f884 	bl	80177cc <tcp_recv_null>
 80186c4:	4603      	mov	r3, r0
 80186c6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80186c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80186cc:	f113 0f0d 	cmn.w	r3, #13
 80186d0:	d053      	beq.n	801877a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80186d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80186d6:	2b00      	cmp	r3, #0
 80186d8:	d003      	beq.n	80186e2 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80186da:	4b55      	ldr	r3, [pc, #340]	; (8018830 <tcp_input+0x7e8>)
 80186dc:	681a      	ldr	r2, [r3, #0]
 80186de:	69fb      	ldr	r3, [r7, #28]
 80186e0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80186e2:	4b50      	ldr	r3, [pc, #320]	; (8018824 <tcp_input+0x7dc>)
 80186e4:	781b      	ldrb	r3, [r3, #0]
 80186e6:	f003 0320 	and.w	r3, r3, #32
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	d030      	beq.n	8018750 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80186ee:	69fb      	ldr	r3, [r7, #28]
 80186f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80186f2:	2b00      	cmp	r3, #0
 80186f4:	d009      	beq.n	801870a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80186f6:	69fb      	ldr	r3, [r7, #28]
 80186f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80186fa:	7b5a      	ldrb	r2, [r3, #13]
 80186fc:	69fb      	ldr	r3, [r7, #28]
 80186fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018700:	f042 0220 	orr.w	r2, r2, #32
 8018704:	b2d2      	uxtb	r2, r2
 8018706:	735a      	strb	r2, [r3, #13]
 8018708:	e022      	b.n	8018750 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801870a:	69fb      	ldr	r3, [r7, #28]
 801870c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801870e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8018712:	d005      	beq.n	8018720 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8018714:	69fb      	ldr	r3, [r7, #28]
 8018716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018718:	3301      	adds	r3, #1
 801871a:	b29a      	uxth	r2, r3
 801871c:	69fb      	ldr	r3, [r7, #28]
 801871e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8018720:	69fb      	ldr	r3, [r7, #28]
 8018722:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018726:	2b00      	cmp	r3, #0
 8018728:	d00b      	beq.n	8018742 <tcp_input+0x6fa>
 801872a:	69fb      	ldr	r3, [r7, #28]
 801872c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8018730:	69fb      	ldr	r3, [r7, #28]
 8018732:	6918      	ldr	r0, [r3, #16]
 8018734:	2300      	movs	r3, #0
 8018736:	2200      	movs	r2, #0
 8018738:	69f9      	ldr	r1, [r7, #28]
 801873a:	47a0      	blx	r4
 801873c:	4603      	mov	r3, r0
 801873e:	74fb      	strb	r3, [r7, #19]
 8018740:	e001      	b.n	8018746 <tcp_input+0x6fe>
 8018742:	2300      	movs	r3, #0
 8018744:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8018746:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801874a:	f113 0f0d 	cmn.w	r3, #13
 801874e:	d016      	beq.n	801877e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8018750:	4b33      	ldr	r3, [pc, #204]	; (8018820 <tcp_input+0x7d8>)
 8018752:	2200      	movs	r2, #0
 8018754:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8018756:	69f8      	ldr	r0, [r7, #28]
 8018758:	f000 f880 	bl	801885c <tcp_input_delayed_close>
 801875c:	4603      	mov	r3, r0
 801875e:	2b00      	cmp	r3, #0
 8018760:	d10f      	bne.n	8018782 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8018762:	69f8      	ldr	r0, [r7, #28]
 8018764:	f002 ff10 	bl	801b588 <tcp_output>
 8018768:	e00c      	b.n	8018784 <tcp_input+0x73c>
        goto aborted;
 801876a:	bf00      	nop
 801876c:	e00a      	b.n	8018784 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801876e:	bf00      	nop
 8018770:	e008      	b.n	8018784 <tcp_input+0x73c>
              goto aborted;
 8018772:	bf00      	nop
 8018774:	e006      	b.n	8018784 <tcp_input+0x73c>
          goto aborted;
 8018776:	bf00      	nop
 8018778:	e004      	b.n	8018784 <tcp_input+0x73c>
            goto aborted;
 801877a:	bf00      	nop
 801877c:	e002      	b.n	8018784 <tcp_input+0x73c>
              goto aborted;
 801877e:	bf00      	nop
 8018780:	e000      	b.n	8018784 <tcp_input+0x73c>
          goto aborted;
 8018782:	bf00      	nop
    tcp_input_pcb = NULL;
 8018784:	4b26      	ldr	r3, [pc, #152]	; (8018820 <tcp_input+0x7d8>)
 8018786:	2200      	movs	r2, #0
 8018788:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801878a:	4b29      	ldr	r3, [pc, #164]	; (8018830 <tcp_input+0x7e8>)
 801878c:	2200      	movs	r2, #0
 801878e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8018790:	4b2b      	ldr	r3, [pc, #172]	; (8018840 <tcp_input+0x7f8>)
 8018792:	685b      	ldr	r3, [r3, #4]
 8018794:	2b00      	cmp	r3, #0
 8018796:	d03f      	beq.n	8018818 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8018798:	4b29      	ldr	r3, [pc, #164]	; (8018840 <tcp_input+0x7f8>)
 801879a:	685b      	ldr	r3, [r3, #4]
 801879c:	4618      	mov	r0, r3
 801879e:	f7fd f9d3 	bl	8015b48 <pbuf_free>
      inseg.p = NULL;
 80187a2:	4b27      	ldr	r3, [pc, #156]	; (8018840 <tcp_input+0x7f8>)
 80187a4:	2200      	movs	r2, #0
 80187a6:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80187a8:	e036      	b.n	8018818 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80187aa:	4b26      	ldr	r3, [pc, #152]	; (8018844 <tcp_input+0x7fc>)
 80187ac:	681b      	ldr	r3, [r3, #0]
 80187ae:	899b      	ldrh	r3, [r3, #12]
 80187b0:	b29b      	uxth	r3, r3
 80187b2:	4618      	mov	r0, r3
 80187b4:	f7f9 facc 	bl	8011d50 <lwip_htons>
 80187b8:	4603      	mov	r3, r0
 80187ba:	b2db      	uxtb	r3, r3
 80187bc:	f003 0304 	and.w	r3, r3, #4
 80187c0:	2b00      	cmp	r3, #0
 80187c2:	d118      	bne.n	80187f6 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80187c4:	4b20      	ldr	r3, [pc, #128]	; (8018848 <tcp_input+0x800>)
 80187c6:	6819      	ldr	r1, [r3, #0]
 80187c8:	4b20      	ldr	r3, [pc, #128]	; (801884c <tcp_input+0x804>)
 80187ca:	881b      	ldrh	r3, [r3, #0]
 80187cc:	461a      	mov	r2, r3
 80187ce:	4b20      	ldr	r3, [pc, #128]	; (8018850 <tcp_input+0x808>)
 80187d0:	681b      	ldr	r3, [r3, #0]
 80187d2:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80187d4:	4b1b      	ldr	r3, [pc, #108]	; (8018844 <tcp_input+0x7fc>)
 80187d6:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80187d8:	885b      	ldrh	r3, [r3, #2]
 80187da:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80187dc:	4a19      	ldr	r2, [pc, #100]	; (8018844 <tcp_input+0x7fc>)
 80187de:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80187e0:	8812      	ldrh	r2, [r2, #0]
 80187e2:	b292      	uxth	r2, r2
 80187e4:	9202      	str	r2, [sp, #8]
 80187e6:	9301      	str	r3, [sp, #4]
 80187e8:	4b1a      	ldr	r3, [pc, #104]	; (8018854 <tcp_input+0x80c>)
 80187ea:	9300      	str	r3, [sp, #0]
 80187ec:	4b1a      	ldr	r3, [pc, #104]	; (8018858 <tcp_input+0x810>)
 80187ee:	4602      	mov	r2, r0
 80187f0:	2000      	movs	r0, #0
 80187f2:	f003 fc7d 	bl	801c0f0 <tcp_rst>
    pbuf_free(p);
 80187f6:	6878      	ldr	r0, [r7, #4]
 80187f8:	f7fd f9a6 	bl	8015b48 <pbuf_free>
  return;
 80187fc:	e00c      	b.n	8018818 <tcp_input+0x7d0>
    goto dropped;
 80187fe:	bf00      	nop
 8018800:	e006      	b.n	8018810 <tcp_input+0x7c8>
    goto dropped;
 8018802:	bf00      	nop
 8018804:	e004      	b.n	8018810 <tcp_input+0x7c8>
    goto dropped;
 8018806:	bf00      	nop
 8018808:	e002      	b.n	8018810 <tcp_input+0x7c8>
      goto dropped;
 801880a:	bf00      	nop
 801880c:	e000      	b.n	8018810 <tcp_input+0x7c8>
      goto dropped;
 801880e:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8018810:	6878      	ldr	r0, [r7, #4]
 8018812:	f7fd f999 	bl	8015b48 <pbuf_free>
 8018816:	e000      	b.n	801881a <tcp_input+0x7d2>
  return;
 8018818:	bf00      	nop
}
 801881a:	3724      	adds	r7, #36	; 0x24
 801881c:	46bd      	mov	sp, r7
 801881e:	bd90      	pop	{r4, r7, pc}
 8018820:	24008e4c 	.word	0x24008e4c
 8018824:	240057d1 	.word	0x240057d1
 8018828:	24008e38 	.word	0x24008e38
 801882c:	240057cc 	.word	0x240057cc
 8018830:	240057d4 	.word	0x240057d4
 8018834:	0802790c 	.word	0x0802790c
 8018838:	08027aec 	.word	0x08027aec
 801883c:	08027984 	.word	0x08027984
 8018840:	240057a4 	.word	0x240057a4
 8018844:	240057b4 	.word	0x240057b4
 8018848:	240057c8 	.word	0x240057c8
 801884c:	240057ce 	.word	0x240057ce
 8018850:	240057c4 	.word	0x240057c4
 8018854:	24005f58 	.word	0x24005f58
 8018858:	24005f5c 	.word	0x24005f5c

0801885c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801885c:	b580      	push	{r7, lr}
 801885e:	b082      	sub	sp, #8
 8018860:	af00      	add	r7, sp, #0
 8018862:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	2b00      	cmp	r3, #0
 8018868:	d106      	bne.n	8018878 <tcp_input_delayed_close+0x1c>
 801886a:	4b17      	ldr	r3, [pc, #92]	; (80188c8 <tcp_input_delayed_close+0x6c>)
 801886c:	f240 225a 	movw	r2, #602	; 0x25a
 8018870:	4916      	ldr	r1, [pc, #88]	; (80188cc <tcp_input_delayed_close+0x70>)
 8018872:	4817      	ldr	r0, [pc, #92]	; (80188d0 <tcp_input_delayed_close+0x74>)
 8018874:	f008 f97a 	bl	8020b6c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8018878:	4b16      	ldr	r3, [pc, #88]	; (80188d4 <tcp_input_delayed_close+0x78>)
 801887a:	781b      	ldrb	r3, [r3, #0]
 801887c:	f003 0310 	and.w	r3, r3, #16
 8018880:	2b00      	cmp	r3, #0
 8018882:	d01c      	beq.n	80188be <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	8b5b      	ldrh	r3, [r3, #26]
 8018888:	f003 0310 	and.w	r3, r3, #16
 801888c:	2b00      	cmp	r3, #0
 801888e:	d10d      	bne.n	80188ac <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018896:	2b00      	cmp	r3, #0
 8018898:	d008      	beq.n	80188ac <tcp_input_delayed_close+0x50>
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80188a0:	687a      	ldr	r2, [r7, #4]
 80188a2:	6912      	ldr	r2, [r2, #16]
 80188a4:	f06f 010e 	mvn.w	r1, #14
 80188a8:	4610      	mov	r0, r2
 80188aa:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80188ac:	6879      	ldr	r1, [r7, #4]
 80188ae:	480a      	ldr	r0, [pc, #40]	; (80188d8 <tcp_input_delayed_close+0x7c>)
 80188b0:	f7ff fa52 	bl	8017d58 <tcp_pcb_remove>
    tcp_free(pcb);
 80188b4:	6878      	ldr	r0, [r7, #4]
 80188b6:	f7fd fc9f 	bl	80161f8 <tcp_free>
    return 1;
 80188ba:	2301      	movs	r3, #1
 80188bc:	e000      	b.n	80188c0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80188be:	2300      	movs	r3, #0
}
 80188c0:	4618      	mov	r0, r3
 80188c2:	3708      	adds	r7, #8
 80188c4:	46bd      	mov	sp, r7
 80188c6:	bd80      	pop	{r7, pc}
 80188c8:	0802790c 	.word	0x0802790c
 80188cc:	08027b08 	.word	0x08027b08
 80188d0:	08027984 	.word	0x08027984
 80188d4:	240057d1 	.word	0x240057d1
 80188d8:	24008e38 	.word	0x24008e38

080188dc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80188dc:	b590      	push	{r4, r7, lr}
 80188de:	b08b      	sub	sp, #44	; 0x2c
 80188e0:	af04      	add	r7, sp, #16
 80188e2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80188e4:	4b6f      	ldr	r3, [pc, #444]	; (8018aa4 <tcp_listen_input+0x1c8>)
 80188e6:	781b      	ldrb	r3, [r3, #0]
 80188e8:	f003 0304 	and.w	r3, r3, #4
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	f040 80d2 	bne.w	8018a96 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80188f2:	687b      	ldr	r3, [r7, #4]
 80188f4:	2b00      	cmp	r3, #0
 80188f6:	d106      	bne.n	8018906 <tcp_listen_input+0x2a>
 80188f8:	4b6b      	ldr	r3, [pc, #428]	; (8018aa8 <tcp_listen_input+0x1cc>)
 80188fa:	f240 2281 	movw	r2, #641	; 0x281
 80188fe:	496b      	ldr	r1, [pc, #428]	; (8018aac <tcp_listen_input+0x1d0>)
 8018900:	486b      	ldr	r0, [pc, #428]	; (8018ab0 <tcp_listen_input+0x1d4>)
 8018902:	f008 f933 	bl	8020b6c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8018906:	4b67      	ldr	r3, [pc, #412]	; (8018aa4 <tcp_listen_input+0x1c8>)
 8018908:	781b      	ldrb	r3, [r3, #0]
 801890a:	f003 0310 	and.w	r3, r3, #16
 801890e:	2b00      	cmp	r3, #0
 8018910:	d019      	beq.n	8018946 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018912:	4b68      	ldr	r3, [pc, #416]	; (8018ab4 <tcp_listen_input+0x1d8>)
 8018914:	6819      	ldr	r1, [r3, #0]
 8018916:	4b68      	ldr	r3, [pc, #416]	; (8018ab8 <tcp_listen_input+0x1dc>)
 8018918:	881b      	ldrh	r3, [r3, #0]
 801891a:	461a      	mov	r2, r3
 801891c:	4b67      	ldr	r3, [pc, #412]	; (8018abc <tcp_listen_input+0x1e0>)
 801891e:	681b      	ldr	r3, [r3, #0]
 8018920:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018922:	4b67      	ldr	r3, [pc, #412]	; (8018ac0 <tcp_listen_input+0x1e4>)
 8018924:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018926:	885b      	ldrh	r3, [r3, #2]
 8018928:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801892a:	4a65      	ldr	r2, [pc, #404]	; (8018ac0 <tcp_listen_input+0x1e4>)
 801892c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801892e:	8812      	ldrh	r2, [r2, #0]
 8018930:	b292      	uxth	r2, r2
 8018932:	9202      	str	r2, [sp, #8]
 8018934:	9301      	str	r3, [sp, #4]
 8018936:	4b63      	ldr	r3, [pc, #396]	; (8018ac4 <tcp_listen_input+0x1e8>)
 8018938:	9300      	str	r3, [sp, #0]
 801893a:	4b63      	ldr	r3, [pc, #396]	; (8018ac8 <tcp_listen_input+0x1ec>)
 801893c:	4602      	mov	r2, r0
 801893e:	6878      	ldr	r0, [r7, #4]
 8018940:	f003 fbd6 	bl	801c0f0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8018944:	e0a9      	b.n	8018a9a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8018946:	4b57      	ldr	r3, [pc, #348]	; (8018aa4 <tcp_listen_input+0x1c8>)
 8018948:	781b      	ldrb	r3, [r3, #0]
 801894a:	f003 0302 	and.w	r3, r3, #2
 801894e:	2b00      	cmp	r3, #0
 8018950:	f000 80a3 	beq.w	8018a9a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	7d5b      	ldrb	r3, [r3, #21]
 8018958:	4618      	mov	r0, r3
 801895a:	f7ff f85b 	bl	8017a14 <tcp_alloc>
 801895e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8018960:	697b      	ldr	r3, [r7, #20]
 8018962:	2b00      	cmp	r3, #0
 8018964:	d111      	bne.n	801898a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	699b      	ldr	r3, [r3, #24]
 801896a:	2b00      	cmp	r3, #0
 801896c:	d00a      	beq.n	8018984 <tcp_listen_input+0xa8>
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	699b      	ldr	r3, [r3, #24]
 8018972:	687a      	ldr	r2, [r7, #4]
 8018974:	6910      	ldr	r0, [r2, #16]
 8018976:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801897a:	2100      	movs	r1, #0
 801897c:	4798      	blx	r3
 801897e:	4603      	mov	r3, r0
 8018980:	73bb      	strb	r3, [r7, #14]
      return;
 8018982:	e08b      	b.n	8018a9c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8018984:	23f0      	movs	r3, #240	; 0xf0
 8018986:	73bb      	strb	r3, [r7, #14]
      return;
 8018988:	e088      	b.n	8018a9c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801898a:	4b50      	ldr	r3, [pc, #320]	; (8018acc <tcp_listen_input+0x1f0>)
 801898c:	695a      	ldr	r2, [r3, #20]
 801898e:	697b      	ldr	r3, [r7, #20]
 8018990:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8018992:	4b4e      	ldr	r3, [pc, #312]	; (8018acc <tcp_listen_input+0x1f0>)
 8018994:	691a      	ldr	r2, [r3, #16]
 8018996:	697b      	ldr	r3, [r7, #20]
 8018998:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801899a:	687b      	ldr	r3, [r7, #4]
 801899c:	8ada      	ldrh	r2, [r3, #22]
 801899e:	697b      	ldr	r3, [r7, #20]
 80189a0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80189a2:	4b47      	ldr	r3, [pc, #284]	; (8018ac0 <tcp_listen_input+0x1e4>)
 80189a4:	681b      	ldr	r3, [r3, #0]
 80189a6:	881b      	ldrh	r3, [r3, #0]
 80189a8:	b29a      	uxth	r2, r3
 80189aa:	697b      	ldr	r3, [r7, #20]
 80189ac:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80189ae:	697b      	ldr	r3, [r7, #20]
 80189b0:	2203      	movs	r2, #3
 80189b2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80189b4:	4b41      	ldr	r3, [pc, #260]	; (8018abc <tcp_listen_input+0x1e0>)
 80189b6:	681b      	ldr	r3, [r3, #0]
 80189b8:	1c5a      	adds	r2, r3, #1
 80189ba:	697b      	ldr	r3, [r7, #20]
 80189bc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80189be:	697b      	ldr	r3, [r7, #20]
 80189c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80189c2:	697b      	ldr	r3, [r7, #20]
 80189c4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80189c6:	6978      	ldr	r0, [r7, #20]
 80189c8:	f7ff fa5a 	bl	8017e80 <tcp_next_iss>
 80189cc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80189ce:	697b      	ldr	r3, [r7, #20]
 80189d0:	693a      	ldr	r2, [r7, #16]
 80189d2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80189d4:	697b      	ldr	r3, [r7, #20]
 80189d6:	693a      	ldr	r2, [r7, #16]
 80189d8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80189da:	697b      	ldr	r3, [r7, #20]
 80189dc:	693a      	ldr	r2, [r7, #16]
 80189de:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80189e0:	697b      	ldr	r3, [r7, #20]
 80189e2:	693a      	ldr	r2, [r7, #16]
 80189e4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80189e6:	4b35      	ldr	r3, [pc, #212]	; (8018abc <tcp_listen_input+0x1e0>)
 80189e8:	681b      	ldr	r3, [r3, #0]
 80189ea:	1e5a      	subs	r2, r3, #1
 80189ec:	697b      	ldr	r3, [r7, #20]
 80189ee:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	691a      	ldr	r2, [r3, #16]
 80189f4:	697b      	ldr	r3, [r7, #20]
 80189f6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80189f8:	697b      	ldr	r3, [r7, #20]
 80189fa:	687a      	ldr	r2, [r7, #4]
 80189fc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80189fe:	687b      	ldr	r3, [r7, #4]
 8018a00:	7a5b      	ldrb	r3, [r3, #9]
 8018a02:	f003 030c 	and.w	r3, r3, #12
 8018a06:	b2da      	uxtb	r2, r3
 8018a08:	697b      	ldr	r3, [r7, #20]
 8018a0a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	7a1a      	ldrb	r2, [r3, #8]
 8018a10:	697b      	ldr	r3, [r7, #20]
 8018a12:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8018a14:	4b2e      	ldr	r3, [pc, #184]	; (8018ad0 <tcp_listen_input+0x1f4>)
 8018a16:	681a      	ldr	r2, [r3, #0]
 8018a18:	697b      	ldr	r3, [r7, #20]
 8018a1a:	60da      	str	r2, [r3, #12]
 8018a1c:	4a2c      	ldr	r2, [pc, #176]	; (8018ad0 <tcp_listen_input+0x1f4>)
 8018a1e:	697b      	ldr	r3, [r7, #20]
 8018a20:	6013      	str	r3, [r2, #0]
 8018a22:	f003 fd27 	bl	801c474 <tcp_timer_needed>
 8018a26:	4b2b      	ldr	r3, [pc, #172]	; (8018ad4 <tcp_listen_input+0x1f8>)
 8018a28:	2201      	movs	r2, #1
 8018a2a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8018a2c:	6978      	ldr	r0, [r7, #20]
 8018a2e:	f001 fd8d 	bl	801a54c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8018a32:	4b23      	ldr	r3, [pc, #140]	; (8018ac0 <tcp_listen_input+0x1e4>)
 8018a34:	681b      	ldr	r3, [r3, #0]
 8018a36:	89db      	ldrh	r3, [r3, #14]
 8018a38:	b29a      	uxth	r2, r3
 8018a3a:	697b      	ldr	r3, [r7, #20]
 8018a3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8018a40:	697b      	ldr	r3, [r7, #20]
 8018a42:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018a46:	697b      	ldr	r3, [r7, #20]
 8018a48:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8018a4c:	697b      	ldr	r3, [r7, #20]
 8018a4e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8018a50:	697b      	ldr	r3, [r7, #20]
 8018a52:	3304      	adds	r3, #4
 8018a54:	4618      	mov	r0, r3
 8018a56:	f7fa fc51 	bl	80132fc <ip4_route>
 8018a5a:	4601      	mov	r1, r0
 8018a5c:	697b      	ldr	r3, [r7, #20]
 8018a5e:	3304      	adds	r3, #4
 8018a60:	461a      	mov	r2, r3
 8018a62:	4620      	mov	r0, r4
 8018a64:	f7ff fa32 	bl	8017ecc <tcp_eff_send_mss_netif>
 8018a68:	4603      	mov	r3, r0
 8018a6a:	461a      	mov	r2, r3
 8018a6c:	697b      	ldr	r3, [r7, #20]
 8018a6e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8018a70:	2112      	movs	r1, #18
 8018a72:	6978      	ldr	r0, [r7, #20]
 8018a74:	f002 fc9a 	bl	801b3ac <tcp_enqueue_flags>
 8018a78:	4603      	mov	r3, r0
 8018a7a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8018a7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	d004      	beq.n	8018a8e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8018a84:	2100      	movs	r1, #0
 8018a86:	6978      	ldr	r0, [r7, #20]
 8018a88:	f7fd fde0 	bl	801664c <tcp_abandon>
      return;
 8018a8c:	e006      	b.n	8018a9c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8018a8e:	6978      	ldr	r0, [r7, #20]
 8018a90:	f002 fd7a 	bl	801b588 <tcp_output>
  return;
 8018a94:	e001      	b.n	8018a9a <tcp_listen_input+0x1be>
    return;
 8018a96:	bf00      	nop
 8018a98:	e000      	b.n	8018a9c <tcp_listen_input+0x1c0>
  return;
 8018a9a:	bf00      	nop
}
 8018a9c:	371c      	adds	r7, #28
 8018a9e:	46bd      	mov	sp, r7
 8018aa0:	bd90      	pop	{r4, r7, pc}
 8018aa2:	bf00      	nop
 8018aa4:	240057d0 	.word	0x240057d0
 8018aa8:	0802790c 	.word	0x0802790c
 8018aac:	08027b30 	.word	0x08027b30
 8018ab0:	08027984 	.word	0x08027984
 8018ab4:	240057c8 	.word	0x240057c8
 8018ab8:	240057ce 	.word	0x240057ce
 8018abc:	240057c4 	.word	0x240057c4
 8018ac0:	240057b4 	.word	0x240057b4
 8018ac4:	24005f58 	.word	0x24005f58
 8018ac8:	24005f5c 	.word	0x24005f5c
 8018acc:	24005f48 	.word	0x24005f48
 8018ad0:	24008e38 	.word	0x24008e38
 8018ad4:	24008e34 	.word	0x24008e34

08018ad8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8018ad8:	b580      	push	{r7, lr}
 8018ada:	b086      	sub	sp, #24
 8018adc:	af04      	add	r7, sp, #16
 8018ade:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8018ae0:	4b2f      	ldr	r3, [pc, #188]	; (8018ba0 <tcp_timewait_input+0xc8>)
 8018ae2:	781b      	ldrb	r3, [r3, #0]
 8018ae4:	f003 0304 	and.w	r3, r3, #4
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	d153      	bne.n	8018b94 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	d106      	bne.n	8018b00 <tcp_timewait_input+0x28>
 8018af2:	4b2c      	ldr	r3, [pc, #176]	; (8018ba4 <tcp_timewait_input+0xcc>)
 8018af4:	f240 22ee 	movw	r2, #750	; 0x2ee
 8018af8:	492b      	ldr	r1, [pc, #172]	; (8018ba8 <tcp_timewait_input+0xd0>)
 8018afa:	482c      	ldr	r0, [pc, #176]	; (8018bac <tcp_timewait_input+0xd4>)
 8018afc:	f008 f836 	bl	8020b6c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8018b00:	4b27      	ldr	r3, [pc, #156]	; (8018ba0 <tcp_timewait_input+0xc8>)
 8018b02:	781b      	ldrb	r3, [r3, #0]
 8018b04:	f003 0302 	and.w	r3, r3, #2
 8018b08:	2b00      	cmp	r3, #0
 8018b0a:	d02a      	beq.n	8018b62 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8018b0c:	4b28      	ldr	r3, [pc, #160]	; (8018bb0 <tcp_timewait_input+0xd8>)
 8018b0e:	681a      	ldr	r2, [r3, #0]
 8018b10:	687b      	ldr	r3, [r7, #4]
 8018b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b14:	1ad3      	subs	r3, r2, r3
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	db2d      	blt.n	8018b76 <tcp_timewait_input+0x9e>
 8018b1a:	4b25      	ldr	r3, [pc, #148]	; (8018bb0 <tcp_timewait_input+0xd8>)
 8018b1c:	681a      	ldr	r2, [r3, #0]
 8018b1e:	687b      	ldr	r3, [r7, #4]
 8018b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b22:	6879      	ldr	r1, [r7, #4]
 8018b24:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018b26:	440b      	add	r3, r1
 8018b28:	1ad3      	subs	r3, r2, r3
 8018b2a:	2b00      	cmp	r3, #0
 8018b2c:	dc23      	bgt.n	8018b76 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018b2e:	4b21      	ldr	r3, [pc, #132]	; (8018bb4 <tcp_timewait_input+0xdc>)
 8018b30:	6819      	ldr	r1, [r3, #0]
 8018b32:	4b21      	ldr	r3, [pc, #132]	; (8018bb8 <tcp_timewait_input+0xe0>)
 8018b34:	881b      	ldrh	r3, [r3, #0]
 8018b36:	461a      	mov	r2, r3
 8018b38:	4b1d      	ldr	r3, [pc, #116]	; (8018bb0 <tcp_timewait_input+0xd8>)
 8018b3a:	681b      	ldr	r3, [r3, #0]
 8018b3c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018b3e:	4b1f      	ldr	r3, [pc, #124]	; (8018bbc <tcp_timewait_input+0xe4>)
 8018b40:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018b42:	885b      	ldrh	r3, [r3, #2]
 8018b44:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018b46:	4a1d      	ldr	r2, [pc, #116]	; (8018bbc <tcp_timewait_input+0xe4>)
 8018b48:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018b4a:	8812      	ldrh	r2, [r2, #0]
 8018b4c:	b292      	uxth	r2, r2
 8018b4e:	9202      	str	r2, [sp, #8]
 8018b50:	9301      	str	r3, [sp, #4]
 8018b52:	4b1b      	ldr	r3, [pc, #108]	; (8018bc0 <tcp_timewait_input+0xe8>)
 8018b54:	9300      	str	r3, [sp, #0]
 8018b56:	4b1b      	ldr	r3, [pc, #108]	; (8018bc4 <tcp_timewait_input+0xec>)
 8018b58:	4602      	mov	r2, r0
 8018b5a:	6878      	ldr	r0, [r7, #4]
 8018b5c:	f003 fac8 	bl	801c0f0 <tcp_rst>
      return;
 8018b60:	e01b      	b.n	8018b9a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8018b62:	4b0f      	ldr	r3, [pc, #60]	; (8018ba0 <tcp_timewait_input+0xc8>)
 8018b64:	781b      	ldrb	r3, [r3, #0]
 8018b66:	f003 0301 	and.w	r3, r3, #1
 8018b6a:	2b00      	cmp	r3, #0
 8018b6c:	d003      	beq.n	8018b76 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8018b6e:	4b16      	ldr	r3, [pc, #88]	; (8018bc8 <tcp_timewait_input+0xf0>)
 8018b70:	681a      	ldr	r2, [r3, #0]
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8018b76:	4b10      	ldr	r3, [pc, #64]	; (8018bb8 <tcp_timewait_input+0xe0>)
 8018b78:	881b      	ldrh	r3, [r3, #0]
 8018b7a:	2b00      	cmp	r3, #0
 8018b7c:	d00c      	beq.n	8018b98 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	8b5b      	ldrh	r3, [r3, #26]
 8018b82:	f043 0302 	orr.w	r3, r3, #2
 8018b86:	b29a      	uxth	r2, r3
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8018b8c:	6878      	ldr	r0, [r7, #4]
 8018b8e:	f002 fcfb 	bl	801b588 <tcp_output>
  }
  return;
 8018b92:	e001      	b.n	8018b98 <tcp_timewait_input+0xc0>
    return;
 8018b94:	bf00      	nop
 8018b96:	e000      	b.n	8018b9a <tcp_timewait_input+0xc2>
  return;
 8018b98:	bf00      	nop
}
 8018b9a:	3708      	adds	r7, #8
 8018b9c:	46bd      	mov	sp, r7
 8018b9e:	bd80      	pop	{r7, pc}
 8018ba0:	240057d0 	.word	0x240057d0
 8018ba4:	0802790c 	.word	0x0802790c
 8018ba8:	08027b50 	.word	0x08027b50
 8018bac:	08027984 	.word	0x08027984
 8018bb0:	240057c4 	.word	0x240057c4
 8018bb4:	240057c8 	.word	0x240057c8
 8018bb8:	240057ce 	.word	0x240057ce
 8018bbc:	240057b4 	.word	0x240057b4
 8018bc0:	24005f58 	.word	0x24005f58
 8018bc4:	24005f5c 	.word	0x24005f5c
 8018bc8:	24008e3c 	.word	0x24008e3c

08018bcc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8018bcc:	b590      	push	{r4, r7, lr}
 8018bce:	b08d      	sub	sp, #52	; 0x34
 8018bd0:	af04      	add	r7, sp, #16
 8018bd2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8018bd4:	2300      	movs	r3, #0
 8018bd6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8018bd8:	2300      	movs	r3, #0
 8018bda:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	d106      	bne.n	8018bf0 <tcp_process+0x24>
 8018be2:	4ba5      	ldr	r3, [pc, #660]	; (8018e78 <tcp_process+0x2ac>)
 8018be4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8018be8:	49a4      	ldr	r1, [pc, #656]	; (8018e7c <tcp_process+0x2b0>)
 8018bea:	48a5      	ldr	r0, [pc, #660]	; (8018e80 <tcp_process+0x2b4>)
 8018bec:	f007 ffbe 	bl	8020b6c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8018bf0:	4ba4      	ldr	r3, [pc, #656]	; (8018e84 <tcp_process+0x2b8>)
 8018bf2:	781b      	ldrb	r3, [r3, #0]
 8018bf4:	f003 0304 	and.w	r3, r3, #4
 8018bf8:	2b00      	cmp	r3, #0
 8018bfa:	d04e      	beq.n	8018c9a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	7d1b      	ldrb	r3, [r3, #20]
 8018c00:	2b02      	cmp	r3, #2
 8018c02:	d108      	bne.n	8018c16 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018c08:	4b9f      	ldr	r3, [pc, #636]	; (8018e88 <tcp_process+0x2bc>)
 8018c0a:	681b      	ldr	r3, [r3, #0]
 8018c0c:	429a      	cmp	r2, r3
 8018c0e:	d123      	bne.n	8018c58 <tcp_process+0x8c>
        acceptable = 1;
 8018c10:	2301      	movs	r3, #1
 8018c12:	76fb      	strb	r3, [r7, #27]
 8018c14:	e020      	b.n	8018c58 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8018c16:	687b      	ldr	r3, [r7, #4]
 8018c18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018c1a:	4b9c      	ldr	r3, [pc, #624]	; (8018e8c <tcp_process+0x2c0>)
 8018c1c:	681b      	ldr	r3, [r3, #0]
 8018c1e:	429a      	cmp	r2, r3
 8018c20:	d102      	bne.n	8018c28 <tcp_process+0x5c>
        acceptable = 1;
 8018c22:	2301      	movs	r3, #1
 8018c24:	76fb      	strb	r3, [r7, #27]
 8018c26:	e017      	b.n	8018c58 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018c28:	4b98      	ldr	r3, [pc, #608]	; (8018e8c <tcp_process+0x2c0>)
 8018c2a:	681a      	ldr	r2, [r3, #0]
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c30:	1ad3      	subs	r3, r2, r3
 8018c32:	2b00      	cmp	r3, #0
 8018c34:	db10      	blt.n	8018c58 <tcp_process+0x8c>
 8018c36:	4b95      	ldr	r3, [pc, #596]	; (8018e8c <tcp_process+0x2c0>)
 8018c38:	681a      	ldr	r2, [r3, #0]
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c3e:	6879      	ldr	r1, [r7, #4]
 8018c40:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018c42:	440b      	add	r3, r1
 8018c44:	1ad3      	subs	r3, r2, r3
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	dc06      	bgt.n	8018c58 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	8b5b      	ldrh	r3, [r3, #26]
 8018c4e:	f043 0302 	orr.w	r3, r3, #2
 8018c52:	b29a      	uxth	r2, r3
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8018c58:	7efb      	ldrb	r3, [r7, #27]
 8018c5a:	2b00      	cmp	r3, #0
 8018c5c:	d01b      	beq.n	8018c96 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	7d1b      	ldrb	r3, [r3, #20]
 8018c62:	2b00      	cmp	r3, #0
 8018c64:	d106      	bne.n	8018c74 <tcp_process+0xa8>
 8018c66:	4b84      	ldr	r3, [pc, #528]	; (8018e78 <tcp_process+0x2ac>)
 8018c68:	f44f 724e 	mov.w	r2, #824	; 0x338
 8018c6c:	4988      	ldr	r1, [pc, #544]	; (8018e90 <tcp_process+0x2c4>)
 8018c6e:	4884      	ldr	r0, [pc, #528]	; (8018e80 <tcp_process+0x2b4>)
 8018c70:	f007 ff7c 	bl	8020b6c <iprintf>
      recv_flags |= TF_RESET;
 8018c74:	4b87      	ldr	r3, [pc, #540]	; (8018e94 <tcp_process+0x2c8>)
 8018c76:	781b      	ldrb	r3, [r3, #0]
 8018c78:	f043 0308 	orr.w	r3, r3, #8
 8018c7c:	b2da      	uxtb	r2, r3
 8018c7e:	4b85      	ldr	r3, [pc, #532]	; (8018e94 <tcp_process+0x2c8>)
 8018c80:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	8b5b      	ldrh	r3, [r3, #26]
 8018c86:	f023 0301 	bic.w	r3, r3, #1
 8018c8a:	b29a      	uxth	r2, r3
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8018c90:	f06f 030d 	mvn.w	r3, #13
 8018c94:	e37a      	b.n	801938c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8018c96:	2300      	movs	r3, #0
 8018c98:	e378      	b.n	801938c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8018c9a:	4b7a      	ldr	r3, [pc, #488]	; (8018e84 <tcp_process+0x2b8>)
 8018c9c:	781b      	ldrb	r3, [r3, #0]
 8018c9e:	f003 0302 	and.w	r3, r3, #2
 8018ca2:	2b00      	cmp	r3, #0
 8018ca4:	d010      	beq.n	8018cc8 <tcp_process+0xfc>
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	7d1b      	ldrb	r3, [r3, #20]
 8018caa:	2b02      	cmp	r3, #2
 8018cac:	d00c      	beq.n	8018cc8 <tcp_process+0xfc>
 8018cae:	687b      	ldr	r3, [r7, #4]
 8018cb0:	7d1b      	ldrb	r3, [r3, #20]
 8018cb2:	2b03      	cmp	r3, #3
 8018cb4:	d008      	beq.n	8018cc8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	8b5b      	ldrh	r3, [r3, #26]
 8018cba:	f043 0302 	orr.w	r3, r3, #2
 8018cbe:	b29a      	uxth	r2, r3
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8018cc4:	2300      	movs	r3, #0
 8018cc6:	e361      	b.n	801938c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	8b5b      	ldrh	r3, [r3, #26]
 8018ccc:	f003 0310 	and.w	r3, r3, #16
 8018cd0:	2b00      	cmp	r3, #0
 8018cd2:	d103      	bne.n	8018cdc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8018cd4:	4b70      	ldr	r3, [pc, #448]	; (8018e98 <tcp_process+0x2cc>)
 8018cd6:	681a      	ldr	r2, [r3, #0]
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	2200      	movs	r2, #0
 8018ce0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	2200      	movs	r2, #0
 8018ce8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8018cec:	6878      	ldr	r0, [r7, #4]
 8018cee:	f001 fc2d 	bl	801a54c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	7d1b      	ldrb	r3, [r3, #20]
 8018cf6:	3b02      	subs	r3, #2
 8018cf8:	2b07      	cmp	r3, #7
 8018cfa:	f200 8337 	bhi.w	801936c <tcp_process+0x7a0>
 8018cfe:	a201      	add	r2, pc, #4	; (adr r2, 8018d04 <tcp_process+0x138>)
 8018d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018d04:	08018d25 	.word	0x08018d25
 8018d08:	08018f55 	.word	0x08018f55
 8018d0c:	080190cd 	.word	0x080190cd
 8018d10:	080190f7 	.word	0x080190f7
 8018d14:	0801921b 	.word	0x0801921b
 8018d18:	080190cd 	.word	0x080190cd
 8018d1c:	080192a7 	.word	0x080192a7
 8018d20:	08019337 	.word	0x08019337
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8018d24:	4b57      	ldr	r3, [pc, #348]	; (8018e84 <tcp_process+0x2b8>)
 8018d26:	781b      	ldrb	r3, [r3, #0]
 8018d28:	f003 0310 	and.w	r3, r3, #16
 8018d2c:	2b00      	cmp	r3, #0
 8018d2e:	f000 80e4 	beq.w	8018efa <tcp_process+0x32e>
 8018d32:	4b54      	ldr	r3, [pc, #336]	; (8018e84 <tcp_process+0x2b8>)
 8018d34:	781b      	ldrb	r3, [r3, #0]
 8018d36:	f003 0302 	and.w	r3, r3, #2
 8018d3a:	2b00      	cmp	r3, #0
 8018d3c:	f000 80dd 	beq.w	8018efa <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018d44:	1c5a      	adds	r2, r3, #1
 8018d46:	4b50      	ldr	r3, [pc, #320]	; (8018e88 <tcp_process+0x2bc>)
 8018d48:	681b      	ldr	r3, [r3, #0]
 8018d4a:	429a      	cmp	r2, r3
 8018d4c:	f040 80d5 	bne.w	8018efa <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8018d50:	4b4e      	ldr	r3, [pc, #312]	; (8018e8c <tcp_process+0x2c0>)
 8018d52:	681b      	ldr	r3, [r3, #0]
 8018d54:	1c5a      	adds	r2, r3, #1
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8018d62:	4b49      	ldr	r3, [pc, #292]	; (8018e88 <tcp_process+0x2bc>)
 8018d64:	681a      	ldr	r2, [r3, #0]
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8018d6a:	4b4c      	ldr	r3, [pc, #304]	; (8018e9c <tcp_process+0x2d0>)
 8018d6c:	681b      	ldr	r3, [r3, #0]
 8018d6e:	89db      	ldrh	r3, [r3, #14]
 8018d70:	b29a      	uxth	r2, r3
 8018d72:	687b      	ldr	r3, [r7, #4]
 8018d74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8018d84:	4b41      	ldr	r3, [pc, #260]	; (8018e8c <tcp_process+0x2c0>)
 8018d86:	681b      	ldr	r3, [r3, #0]
 8018d88:	1e5a      	subs	r2, r3, #1
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	2204      	movs	r2, #4
 8018d92:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8018d94:	687b      	ldr	r3, [r7, #4]
 8018d96:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	3304      	adds	r3, #4
 8018d9c:	4618      	mov	r0, r3
 8018d9e:	f7fa faad 	bl	80132fc <ip4_route>
 8018da2:	4601      	mov	r1, r0
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	3304      	adds	r3, #4
 8018da8:	461a      	mov	r2, r3
 8018daa:	4620      	mov	r0, r4
 8018dac:	f7ff f88e 	bl	8017ecc <tcp_eff_send_mss_netif>
 8018db0:	4603      	mov	r3, r0
 8018db2:	461a      	mov	r2, r3
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018dbc:	009a      	lsls	r2, r3, #2
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018dc2:	005b      	lsls	r3, r3, #1
 8018dc4:	f241 111c 	movw	r1, #4380	; 0x111c
 8018dc8:	428b      	cmp	r3, r1
 8018dca:	bf38      	it	cc
 8018dcc:	460b      	movcc	r3, r1
 8018dce:	429a      	cmp	r2, r3
 8018dd0:	d204      	bcs.n	8018ddc <tcp_process+0x210>
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018dd6:	009b      	lsls	r3, r3, #2
 8018dd8:	b29b      	uxth	r3, r3
 8018dda:	e00d      	b.n	8018df8 <tcp_process+0x22c>
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018de0:	005b      	lsls	r3, r3, #1
 8018de2:	f241 121c 	movw	r2, #4380	; 0x111c
 8018de6:	4293      	cmp	r3, r2
 8018de8:	d904      	bls.n	8018df4 <tcp_process+0x228>
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018dee:	005b      	lsls	r3, r3, #1
 8018df0:	b29b      	uxth	r3, r3
 8018df2:	e001      	b.n	8018df8 <tcp_process+0x22c>
 8018df4:	f241 131c 	movw	r3, #4380	; 0x111c
 8018df8:	687a      	ldr	r2, [r7, #4]
 8018dfa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018e04:	2b00      	cmp	r3, #0
 8018e06:	d106      	bne.n	8018e16 <tcp_process+0x24a>
 8018e08:	4b1b      	ldr	r3, [pc, #108]	; (8018e78 <tcp_process+0x2ac>)
 8018e0a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8018e0e:	4924      	ldr	r1, [pc, #144]	; (8018ea0 <tcp_process+0x2d4>)
 8018e10:	481b      	ldr	r0, [pc, #108]	; (8018e80 <tcp_process+0x2b4>)
 8018e12:	f007 feab 	bl	8020b6c <iprintf>
        --pcb->snd_queuelen;
 8018e16:	687b      	ldr	r3, [r7, #4]
 8018e18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018e1c:	3b01      	subs	r3, #1
 8018e1e:	b29a      	uxth	r2, r3
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018e2a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8018e2c:	69fb      	ldr	r3, [r7, #28]
 8018e2e:	2b00      	cmp	r3, #0
 8018e30:	d111      	bne.n	8018e56 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018e36:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8018e38:	69fb      	ldr	r3, [r7, #28]
 8018e3a:	2b00      	cmp	r3, #0
 8018e3c:	d106      	bne.n	8018e4c <tcp_process+0x280>
 8018e3e:	4b0e      	ldr	r3, [pc, #56]	; (8018e78 <tcp_process+0x2ac>)
 8018e40:	f44f 725d 	mov.w	r2, #884	; 0x374
 8018e44:	4917      	ldr	r1, [pc, #92]	; (8018ea4 <tcp_process+0x2d8>)
 8018e46:	480e      	ldr	r0, [pc, #56]	; (8018e80 <tcp_process+0x2b4>)
 8018e48:	f007 fe90 	bl	8020b6c <iprintf>
          pcb->unsent = rseg->next;
 8018e4c:	69fb      	ldr	r3, [r7, #28]
 8018e4e:	681a      	ldr	r2, [r3, #0]
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	66da      	str	r2, [r3, #108]	; 0x6c
 8018e54:	e003      	b.n	8018e5e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8018e56:	69fb      	ldr	r3, [r7, #28]
 8018e58:	681a      	ldr	r2, [r3, #0]
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8018e5e:	69f8      	ldr	r0, [r7, #28]
 8018e60:	f7fe fc6f 	bl	8017742 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018e68:	2b00      	cmp	r3, #0
 8018e6a:	d11d      	bne.n	8018ea8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8018e6c:	687b      	ldr	r3, [r7, #4]
 8018e6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018e72:	861a      	strh	r2, [r3, #48]	; 0x30
 8018e74:	e01f      	b.n	8018eb6 <tcp_process+0x2ea>
 8018e76:	bf00      	nop
 8018e78:	0802790c 	.word	0x0802790c
 8018e7c:	08027b70 	.word	0x08027b70
 8018e80:	08027984 	.word	0x08027984
 8018e84:	240057d0 	.word	0x240057d0
 8018e88:	240057c8 	.word	0x240057c8
 8018e8c:	240057c4 	.word	0x240057c4
 8018e90:	08027b8c 	.word	0x08027b8c
 8018e94:	240057d1 	.word	0x240057d1
 8018e98:	24008e3c 	.word	0x24008e3c
 8018e9c:	240057b4 	.word	0x240057b4
 8018ea0:	08027bac 	.word	0x08027bac
 8018ea4:	08027bc4 	.word	0x08027bc4
        } else {
          pcb->rtime = 0;
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	2200      	movs	r2, #0
 8018eac:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	2200      	movs	r2, #0
 8018eb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8018eb6:	687b      	ldr	r3, [r7, #4]
 8018eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018ebc:	2b00      	cmp	r3, #0
 8018ebe:	d00a      	beq.n	8018ed6 <tcp_process+0x30a>
 8018ec0:	687b      	ldr	r3, [r7, #4]
 8018ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018ec6:	687a      	ldr	r2, [r7, #4]
 8018ec8:	6910      	ldr	r0, [r2, #16]
 8018eca:	2200      	movs	r2, #0
 8018ecc:	6879      	ldr	r1, [r7, #4]
 8018ece:	4798      	blx	r3
 8018ed0:	4603      	mov	r3, r0
 8018ed2:	76bb      	strb	r3, [r7, #26]
 8018ed4:	e001      	b.n	8018eda <tcp_process+0x30e>
 8018ed6:	2300      	movs	r3, #0
 8018ed8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8018eda:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8018ede:	f113 0f0d 	cmn.w	r3, #13
 8018ee2:	d102      	bne.n	8018eea <tcp_process+0x31e>
          return ERR_ABRT;
 8018ee4:	f06f 030c 	mvn.w	r3, #12
 8018ee8:	e250      	b.n	801938c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8018eea:	687b      	ldr	r3, [r7, #4]
 8018eec:	8b5b      	ldrh	r3, [r3, #26]
 8018eee:	f043 0302 	orr.w	r3, r3, #2
 8018ef2:	b29a      	uxth	r2, r3
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8018ef8:	e23a      	b.n	8019370 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8018efa:	4b9d      	ldr	r3, [pc, #628]	; (8019170 <tcp_process+0x5a4>)
 8018efc:	781b      	ldrb	r3, [r3, #0]
 8018efe:	f003 0310 	and.w	r3, r3, #16
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	f000 8234 	beq.w	8019370 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018f08:	4b9a      	ldr	r3, [pc, #616]	; (8019174 <tcp_process+0x5a8>)
 8018f0a:	6819      	ldr	r1, [r3, #0]
 8018f0c:	4b9a      	ldr	r3, [pc, #616]	; (8019178 <tcp_process+0x5ac>)
 8018f0e:	881b      	ldrh	r3, [r3, #0]
 8018f10:	461a      	mov	r2, r3
 8018f12:	4b9a      	ldr	r3, [pc, #616]	; (801917c <tcp_process+0x5b0>)
 8018f14:	681b      	ldr	r3, [r3, #0]
 8018f16:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018f18:	4b99      	ldr	r3, [pc, #612]	; (8019180 <tcp_process+0x5b4>)
 8018f1a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018f1c:	885b      	ldrh	r3, [r3, #2]
 8018f1e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018f20:	4a97      	ldr	r2, [pc, #604]	; (8019180 <tcp_process+0x5b4>)
 8018f22:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018f24:	8812      	ldrh	r2, [r2, #0]
 8018f26:	b292      	uxth	r2, r2
 8018f28:	9202      	str	r2, [sp, #8]
 8018f2a:	9301      	str	r3, [sp, #4]
 8018f2c:	4b95      	ldr	r3, [pc, #596]	; (8019184 <tcp_process+0x5b8>)
 8018f2e:	9300      	str	r3, [sp, #0]
 8018f30:	4b95      	ldr	r3, [pc, #596]	; (8019188 <tcp_process+0x5bc>)
 8018f32:	4602      	mov	r2, r0
 8018f34:	6878      	ldr	r0, [r7, #4]
 8018f36:	f003 f8db 	bl	801c0f0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018f40:	2b05      	cmp	r3, #5
 8018f42:	f200 8215 	bhi.w	8019370 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8018f46:	687b      	ldr	r3, [r7, #4]
 8018f48:	2200      	movs	r2, #0
 8018f4a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8018f4c:	6878      	ldr	r0, [r7, #4]
 8018f4e:	f002 fea5 	bl	801bc9c <tcp_rexmit_rto>
      break;
 8018f52:	e20d      	b.n	8019370 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8018f54:	4b86      	ldr	r3, [pc, #536]	; (8019170 <tcp_process+0x5a4>)
 8018f56:	781b      	ldrb	r3, [r3, #0]
 8018f58:	f003 0310 	and.w	r3, r3, #16
 8018f5c:	2b00      	cmp	r3, #0
 8018f5e:	f000 80a1 	beq.w	80190a4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018f62:	4b84      	ldr	r3, [pc, #528]	; (8019174 <tcp_process+0x5a8>)
 8018f64:	681a      	ldr	r2, [r3, #0]
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018f6a:	1ad3      	subs	r3, r2, r3
 8018f6c:	3b01      	subs	r3, #1
 8018f6e:	2b00      	cmp	r3, #0
 8018f70:	db7e      	blt.n	8019070 <tcp_process+0x4a4>
 8018f72:	4b80      	ldr	r3, [pc, #512]	; (8019174 <tcp_process+0x5a8>)
 8018f74:	681a      	ldr	r2, [r3, #0]
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018f7a:	1ad3      	subs	r3, r2, r3
 8018f7c:	2b00      	cmp	r3, #0
 8018f7e:	dc77      	bgt.n	8019070 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	2204      	movs	r2, #4
 8018f84:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8018f86:	687b      	ldr	r3, [r7, #4]
 8018f88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018f8a:	2b00      	cmp	r3, #0
 8018f8c:	d102      	bne.n	8018f94 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8018f8e:	23fa      	movs	r3, #250	; 0xfa
 8018f90:	76bb      	strb	r3, [r7, #26]
 8018f92:	e01d      	b.n	8018fd0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8018f94:	687b      	ldr	r3, [r7, #4]
 8018f96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018f98:	699b      	ldr	r3, [r3, #24]
 8018f9a:	2b00      	cmp	r3, #0
 8018f9c:	d106      	bne.n	8018fac <tcp_process+0x3e0>
 8018f9e:	4b7b      	ldr	r3, [pc, #492]	; (801918c <tcp_process+0x5c0>)
 8018fa0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8018fa4:	497a      	ldr	r1, [pc, #488]	; (8019190 <tcp_process+0x5c4>)
 8018fa6:	487b      	ldr	r0, [pc, #492]	; (8019194 <tcp_process+0x5c8>)
 8018fa8:	f007 fde0 	bl	8020b6c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018fb0:	699b      	ldr	r3, [r3, #24]
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	d00a      	beq.n	8018fcc <tcp_process+0x400>
 8018fb6:	687b      	ldr	r3, [r7, #4]
 8018fb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018fba:	699b      	ldr	r3, [r3, #24]
 8018fbc:	687a      	ldr	r2, [r7, #4]
 8018fbe:	6910      	ldr	r0, [r2, #16]
 8018fc0:	2200      	movs	r2, #0
 8018fc2:	6879      	ldr	r1, [r7, #4]
 8018fc4:	4798      	blx	r3
 8018fc6:	4603      	mov	r3, r0
 8018fc8:	76bb      	strb	r3, [r7, #26]
 8018fca:	e001      	b.n	8018fd0 <tcp_process+0x404>
 8018fcc:	23f0      	movs	r3, #240	; 0xf0
 8018fce:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8018fd0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8018fd4:	2b00      	cmp	r3, #0
 8018fd6:	d00a      	beq.n	8018fee <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8018fd8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8018fdc:	f113 0f0d 	cmn.w	r3, #13
 8018fe0:	d002      	beq.n	8018fe8 <tcp_process+0x41c>
              tcp_abort(pcb);
 8018fe2:	6878      	ldr	r0, [r7, #4]
 8018fe4:	f7fd fbf0 	bl	80167c8 <tcp_abort>
            }
            return ERR_ABRT;
 8018fe8:	f06f 030c 	mvn.w	r3, #12
 8018fec:	e1ce      	b.n	801938c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8018fee:	6878      	ldr	r0, [r7, #4]
 8018ff0:	f000 fae0 	bl	80195b4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8018ff4:	4b68      	ldr	r3, [pc, #416]	; (8019198 <tcp_process+0x5cc>)
 8018ff6:	881b      	ldrh	r3, [r3, #0]
 8018ff8:	2b00      	cmp	r3, #0
 8018ffa:	d005      	beq.n	8019008 <tcp_process+0x43c>
            recv_acked--;
 8018ffc:	4b66      	ldr	r3, [pc, #408]	; (8019198 <tcp_process+0x5cc>)
 8018ffe:	881b      	ldrh	r3, [r3, #0]
 8019000:	3b01      	subs	r3, #1
 8019002:	b29a      	uxth	r2, r3
 8019004:	4b64      	ldr	r3, [pc, #400]	; (8019198 <tcp_process+0x5cc>)
 8019006:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801900c:	009a      	lsls	r2, r3, #2
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019012:	005b      	lsls	r3, r3, #1
 8019014:	f241 111c 	movw	r1, #4380	; 0x111c
 8019018:	428b      	cmp	r3, r1
 801901a:	bf38      	it	cc
 801901c:	460b      	movcc	r3, r1
 801901e:	429a      	cmp	r2, r3
 8019020:	d204      	bcs.n	801902c <tcp_process+0x460>
 8019022:	687b      	ldr	r3, [r7, #4]
 8019024:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019026:	009b      	lsls	r3, r3, #2
 8019028:	b29b      	uxth	r3, r3
 801902a:	e00d      	b.n	8019048 <tcp_process+0x47c>
 801902c:	687b      	ldr	r3, [r7, #4]
 801902e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019030:	005b      	lsls	r3, r3, #1
 8019032:	f241 121c 	movw	r2, #4380	; 0x111c
 8019036:	4293      	cmp	r3, r2
 8019038:	d904      	bls.n	8019044 <tcp_process+0x478>
 801903a:	687b      	ldr	r3, [r7, #4]
 801903c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801903e:	005b      	lsls	r3, r3, #1
 8019040:	b29b      	uxth	r3, r3
 8019042:	e001      	b.n	8019048 <tcp_process+0x47c>
 8019044:	f241 131c 	movw	r3, #4380	; 0x111c
 8019048:	687a      	ldr	r2, [r7, #4]
 801904a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801904e:	4b53      	ldr	r3, [pc, #332]	; (801919c <tcp_process+0x5d0>)
 8019050:	781b      	ldrb	r3, [r3, #0]
 8019052:	f003 0320 	and.w	r3, r3, #32
 8019056:	2b00      	cmp	r3, #0
 8019058:	d037      	beq.n	80190ca <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801905a:	687b      	ldr	r3, [r7, #4]
 801905c:	8b5b      	ldrh	r3, [r3, #26]
 801905e:	f043 0302 	orr.w	r3, r3, #2
 8019062:	b29a      	uxth	r2, r3
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	2207      	movs	r2, #7
 801906c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801906e:	e02c      	b.n	80190ca <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019070:	4b40      	ldr	r3, [pc, #256]	; (8019174 <tcp_process+0x5a8>)
 8019072:	6819      	ldr	r1, [r3, #0]
 8019074:	4b40      	ldr	r3, [pc, #256]	; (8019178 <tcp_process+0x5ac>)
 8019076:	881b      	ldrh	r3, [r3, #0]
 8019078:	461a      	mov	r2, r3
 801907a:	4b40      	ldr	r3, [pc, #256]	; (801917c <tcp_process+0x5b0>)
 801907c:	681b      	ldr	r3, [r3, #0]
 801907e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019080:	4b3f      	ldr	r3, [pc, #252]	; (8019180 <tcp_process+0x5b4>)
 8019082:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019084:	885b      	ldrh	r3, [r3, #2]
 8019086:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019088:	4a3d      	ldr	r2, [pc, #244]	; (8019180 <tcp_process+0x5b4>)
 801908a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801908c:	8812      	ldrh	r2, [r2, #0]
 801908e:	b292      	uxth	r2, r2
 8019090:	9202      	str	r2, [sp, #8]
 8019092:	9301      	str	r3, [sp, #4]
 8019094:	4b3b      	ldr	r3, [pc, #236]	; (8019184 <tcp_process+0x5b8>)
 8019096:	9300      	str	r3, [sp, #0]
 8019098:	4b3b      	ldr	r3, [pc, #236]	; (8019188 <tcp_process+0x5bc>)
 801909a:	4602      	mov	r2, r0
 801909c:	6878      	ldr	r0, [r7, #4]
 801909e:	f003 f827 	bl	801c0f0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80190a2:	e167      	b.n	8019374 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80190a4:	4b32      	ldr	r3, [pc, #200]	; (8019170 <tcp_process+0x5a4>)
 80190a6:	781b      	ldrb	r3, [r3, #0]
 80190a8:	f003 0302 	and.w	r3, r3, #2
 80190ac:	2b00      	cmp	r3, #0
 80190ae:	f000 8161 	beq.w	8019374 <tcp_process+0x7a8>
 80190b2:	687b      	ldr	r3, [r7, #4]
 80190b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190b6:	1e5a      	subs	r2, r3, #1
 80190b8:	4b30      	ldr	r3, [pc, #192]	; (801917c <tcp_process+0x5b0>)
 80190ba:	681b      	ldr	r3, [r3, #0]
 80190bc:	429a      	cmp	r2, r3
 80190be:	f040 8159 	bne.w	8019374 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80190c2:	6878      	ldr	r0, [r7, #4]
 80190c4:	f002 fe0c 	bl	801bce0 <tcp_rexmit>
      break;
 80190c8:	e154      	b.n	8019374 <tcp_process+0x7a8>
 80190ca:	e153      	b.n	8019374 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80190cc:	6878      	ldr	r0, [r7, #4]
 80190ce:	f000 fa71 	bl	80195b4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80190d2:	4b32      	ldr	r3, [pc, #200]	; (801919c <tcp_process+0x5d0>)
 80190d4:	781b      	ldrb	r3, [r3, #0]
 80190d6:	f003 0320 	and.w	r3, r3, #32
 80190da:	2b00      	cmp	r3, #0
 80190dc:	f000 814c 	beq.w	8019378 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	8b5b      	ldrh	r3, [r3, #26]
 80190e4:	f043 0302 	orr.w	r3, r3, #2
 80190e8:	b29a      	uxth	r2, r3
 80190ea:	687b      	ldr	r3, [r7, #4]
 80190ec:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80190ee:	687b      	ldr	r3, [r7, #4]
 80190f0:	2207      	movs	r2, #7
 80190f2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80190f4:	e140      	b.n	8019378 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80190f6:	6878      	ldr	r0, [r7, #4]
 80190f8:	f000 fa5c 	bl	80195b4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80190fc:	4b27      	ldr	r3, [pc, #156]	; (801919c <tcp_process+0x5d0>)
 80190fe:	781b      	ldrb	r3, [r3, #0]
 8019100:	f003 0320 	and.w	r3, r3, #32
 8019104:	2b00      	cmp	r3, #0
 8019106:	d071      	beq.n	80191ec <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8019108:	4b19      	ldr	r3, [pc, #100]	; (8019170 <tcp_process+0x5a4>)
 801910a:	781b      	ldrb	r3, [r3, #0]
 801910c:	f003 0310 	and.w	r3, r3, #16
 8019110:	2b00      	cmp	r3, #0
 8019112:	d060      	beq.n	80191d6 <tcp_process+0x60a>
 8019114:	687b      	ldr	r3, [r7, #4]
 8019116:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019118:	4b16      	ldr	r3, [pc, #88]	; (8019174 <tcp_process+0x5a8>)
 801911a:	681b      	ldr	r3, [r3, #0]
 801911c:	429a      	cmp	r2, r3
 801911e:	d15a      	bne.n	80191d6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8019120:	687b      	ldr	r3, [r7, #4]
 8019122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8019124:	2b00      	cmp	r3, #0
 8019126:	d156      	bne.n	80191d6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	8b5b      	ldrh	r3, [r3, #26]
 801912c:	f043 0302 	orr.w	r3, r3, #2
 8019130:	b29a      	uxth	r2, r3
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8019136:	6878      	ldr	r0, [r7, #4]
 8019138:	f7fe fdbe 	bl	8017cb8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801913c:	4b18      	ldr	r3, [pc, #96]	; (80191a0 <tcp_process+0x5d4>)
 801913e:	681b      	ldr	r3, [r3, #0]
 8019140:	687a      	ldr	r2, [r7, #4]
 8019142:	429a      	cmp	r2, r3
 8019144:	d105      	bne.n	8019152 <tcp_process+0x586>
 8019146:	4b16      	ldr	r3, [pc, #88]	; (80191a0 <tcp_process+0x5d4>)
 8019148:	681b      	ldr	r3, [r3, #0]
 801914a:	68db      	ldr	r3, [r3, #12]
 801914c:	4a14      	ldr	r2, [pc, #80]	; (80191a0 <tcp_process+0x5d4>)
 801914e:	6013      	str	r3, [r2, #0]
 8019150:	e02e      	b.n	80191b0 <tcp_process+0x5e4>
 8019152:	4b13      	ldr	r3, [pc, #76]	; (80191a0 <tcp_process+0x5d4>)
 8019154:	681b      	ldr	r3, [r3, #0]
 8019156:	617b      	str	r3, [r7, #20]
 8019158:	e027      	b.n	80191aa <tcp_process+0x5de>
 801915a:	697b      	ldr	r3, [r7, #20]
 801915c:	68db      	ldr	r3, [r3, #12]
 801915e:	687a      	ldr	r2, [r7, #4]
 8019160:	429a      	cmp	r2, r3
 8019162:	d11f      	bne.n	80191a4 <tcp_process+0x5d8>
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	68da      	ldr	r2, [r3, #12]
 8019168:	697b      	ldr	r3, [r7, #20]
 801916a:	60da      	str	r2, [r3, #12]
 801916c:	e020      	b.n	80191b0 <tcp_process+0x5e4>
 801916e:	bf00      	nop
 8019170:	240057d0 	.word	0x240057d0
 8019174:	240057c8 	.word	0x240057c8
 8019178:	240057ce 	.word	0x240057ce
 801917c:	240057c4 	.word	0x240057c4
 8019180:	240057b4 	.word	0x240057b4
 8019184:	24005f58 	.word	0x24005f58
 8019188:	24005f5c 	.word	0x24005f5c
 801918c:	0802790c 	.word	0x0802790c
 8019190:	08027bd8 	.word	0x08027bd8
 8019194:	08027984 	.word	0x08027984
 8019198:	240057cc 	.word	0x240057cc
 801919c:	240057d1 	.word	0x240057d1
 80191a0:	24008e38 	.word	0x24008e38
 80191a4:	697b      	ldr	r3, [r7, #20]
 80191a6:	68db      	ldr	r3, [r3, #12]
 80191a8:	617b      	str	r3, [r7, #20]
 80191aa:	697b      	ldr	r3, [r7, #20]
 80191ac:	2b00      	cmp	r3, #0
 80191ae:	d1d4      	bne.n	801915a <tcp_process+0x58e>
 80191b0:	687b      	ldr	r3, [r7, #4]
 80191b2:	2200      	movs	r2, #0
 80191b4:	60da      	str	r2, [r3, #12]
 80191b6:	4b77      	ldr	r3, [pc, #476]	; (8019394 <tcp_process+0x7c8>)
 80191b8:	2201      	movs	r2, #1
 80191ba:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80191bc:	687b      	ldr	r3, [r7, #4]
 80191be:	220a      	movs	r2, #10
 80191c0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80191c2:	4b75      	ldr	r3, [pc, #468]	; (8019398 <tcp_process+0x7cc>)
 80191c4:	681a      	ldr	r2, [r3, #0]
 80191c6:	687b      	ldr	r3, [r7, #4]
 80191c8:	60da      	str	r2, [r3, #12]
 80191ca:	4a73      	ldr	r2, [pc, #460]	; (8019398 <tcp_process+0x7cc>)
 80191cc:	687b      	ldr	r3, [r7, #4]
 80191ce:	6013      	str	r3, [r2, #0]
 80191d0:	f003 f950 	bl	801c474 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80191d4:	e0d2      	b.n	801937c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80191d6:	687b      	ldr	r3, [r7, #4]
 80191d8:	8b5b      	ldrh	r3, [r3, #26]
 80191da:	f043 0302 	orr.w	r3, r3, #2
 80191de:	b29a      	uxth	r2, r3
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80191e4:	687b      	ldr	r3, [r7, #4]
 80191e6:	2208      	movs	r2, #8
 80191e8:	751a      	strb	r2, [r3, #20]
      break;
 80191ea:	e0c7      	b.n	801937c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80191ec:	4b6b      	ldr	r3, [pc, #428]	; (801939c <tcp_process+0x7d0>)
 80191ee:	781b      	ldrb	r3, [r3, #0]
 80191f0:	f003 0310 	and.w	r3, r3, #16
 80191f4:	2b00      	cmp	r3, #0
 80191f6:	f000 80c1 	beq.w	801937c <tcp_process+0x7b0>
 80191fa:	687b      	ldr	r3, [r7, #4]
 80191fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80191fe:	4b68      	ldr	r3, [pc, #416]	; (80193a0 <tcp_process+0x7d4>)
 8019200:	681b      	ldr	r3, [r3, #0]
 8019202:	429a      	cmp	r2, r3
 8019204:	f040 80ba 	bne.w	801937c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801920c:	2b00      	cmp	r3, #0
 801920e:	f040 80b5 	bne.w	801937c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8019212:	687b      	ldr	r3, [r7, #4]
 8019214:	2206      	movs	r2, #6
 8019216:	751a      	strb	r2, [r3, #20]
      break;
 8019218:	e0b0      	b.n	801937c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801921a:	6878      	ldr	r0, [r7, #4]
 801921c:	f000 f9ca 	bl	80195b4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8019220:	4b60      	ldr	r3, [pc, #384]	; (80193a4 <tcp_process+0x7d8>)
 8019222:	781b      	ldrb	r3, [r3, #0]
 8019224:	f003 0320 	and.w	r3, r3, #32
 8019228:	2b00      	cmp	r3, #0
 801922a:	f000 80a9 	beq.w	8019380 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	8b5b      	ldrh	r3, [r3, #26]
 8019232:	f043 0302 	orr.w	r3, r3, #2
 8019236:	b29a      	uxth	r2, r3
 8019238:	687b      	ldr	r3, [r7, #4]
 801923a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801923c:	6878      	ldr	r0, [r7, #4]
 801923e:	f7fe fd3b 	bl	8017cb8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8019242:	4b59      	ldr	r3, [pc, #356]	; (80193a8 <tcp_process+0x7dc>)
 8019244:	681b      	ldr	r3, [r3, #0]
 8019246:	687a      	ldr	r2, [r7, #4]
 8019248:	429a      	cmp	r2, r3
 801924a:	d105      	bne.n	8019258 <tcp_process+0x68c>
 801924c:	4b56      	ldr	r3, [pc, #344]	; (80193a8 <tcp_process+0x7dc>)
 801924e:	681b      	ldr	r3, [r3, #0]
 8019250:	68db      	ldr	r3, [r3, #12]
 8019252:	4a55      	ldr	r2, [pc, #340]	; (80193a8 <tcp_process+0x7dc>)
 8019254:	6013      	str	r3, [r2, #0]
 8019256:	e013      	b.n	8019280 <tcp_process+0x6b4>
 8019258:	4b53      	ldr	r3, [pc, #332]	; (80193a8 <tcp_process+0x7dc>)
 801925a:	681b      	ldr	r3, [r3, #0]
 801925c:	613b      	str	r3, [r7, #16]
 801925e:	e00c      	b.n	801927a <tcp_process+0x6ae>
 8019260:	693b      	ldr	r3, [r7, #16]
 8019262:	68db      	ldr	r3, [r3, #12]
 8019264:	687a      	ldr	r2, [r7, #4]
 8019266:	429a      	cmp	r2, r3
 8019268:	d104      	bne.n	8019274 <tcp_process+0x6a8>
 801926a:	687b      	ldr	r3, [r7, #4]
 801926c:	68da      	ldr	r2, [r3, #12]
 801926e:	693b      	ldr	r3, [r7, #16]
 8019270:	60da      	str	r2, [r3, #12]
 8019272:	e005      	b.n	8019280 <tcp_process+0x6b4>
 8019274:	693b      	ldr	r3, [r7, #16]
 8019276:	68db      	ldr	r3, [r3, #12]
 8019278:	613b      	str	r3, [r7, #16]
 801927a:	693b      	ldr	r3, [r7, #16]
 801927c:	2b00      	cmp	r3, #0
 801927e:	d1ef      	bne.n	8019260 <tcp_process+0x694>
 8019280:	687b      	ldr	r3, [r7, #4]
 8019282:	2200      	movs	r2, #0
 8019284:	60da      	str	r2, [r3, #12]
 8019286:	4b43      	ldr	r3, [pc, #268]	; (8019394 <tcp_process+0x7c8>)
 8019288:	2201      	movs	r2, #1
 801928a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	220a      	movs	r2, #10
 8019290:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8019292:	4b41      	ldr	r3, [pc, #260]	; (8019398 <tcp_process+0x7cc>)
 8019294:	681a      	ldr	r2, [r3, #0]
 8019296:	687b      	ldr	r3, [r7, #4]
 8019298:	60da      	str	r2, [r3, #12]
 801929a:	4a3f      	ldr	r2, [pc, #252]	; (8019398 <tcp_process+0x7cc>)
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	6013      	str	r3, [r2, #0]
 80192a0:	f003 f8e8 	bl	801c474 <tcp_timer_needed>
      }
      break;
 80192a4:	e06c      	b.n	8019380 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80192a6:	6878      	ldr	r0, [r7, #4]
 80192a8:	f000 f984 	bl	80195b4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80192ac:	4b3b      	ldr	r3, [pc, #236]	; (801939c <tcp_process+0x7d0>)
 80192ae:	781b      	ldrb	r3, [r3, #0]
 80192b0:	f003 0310 	and.w	r3, r3, #16
 80192b4:	2b00      	cmp	r3, #0
 80192b6:	d065      	beq.n	8019384 <tcp_process+0x7b8>
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80192bc:	4b38      	ldr	r3, [pc, #224]	; (80193a0 <tcp_process+0x7d4>)
 80192be:	681b      	ldr	r3, [r3, #0]
 80192c0:	429a      	cmp	r2, r3
 80192c2:	d15f      	bne.n	8019384 <tcp_process+0x7b8>
 80192c4:	687b      	ldr	r3, [r7, #4]
 80192c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80192c8:	2b00      	cmp	r3, #0
 80192ca:	d15b      	bne.n	8019384 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80192cc:	6878      	ldr	r0, [r7, #4]
 80192ce:	f7fe fcf3 	bl	8017cb8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80192d2:	4b35      	ldr	r3, [pc, #212]	; (80193a8 <tcp_process+0x7dc>)
 80192d4:	681b      	ldr	r3, [r3, #0]
 80192d6:	687a      	ldr	r2, [r7, #4]
 80192d8:	429a      	cmp	r2, r3
 80192da:	d105      	bne.n	80192e8 <tcp_process+0x71c>
 80192dc:	4b32      	ldr	r3, [pc, #200]	; (80193a8 <tcp_process+0x7dc>)
 80192de:	681b      	ldr	r3, [r3, #0]
 80192e0:	68db      	ldr	r3, [r3, #12]
 80192e2:	4a31      	ldr	r2, [pc, #196]	; (80193a8 <tcp_process+0x7dc>)
 80192e4:	6013      	str	r3, [r2, #0]
 80192e6:	e013      	b.n	8019310 <tcp_process+0x744>
 80192e8:	4b2f      	ldr	r3, [pc, #188]	; (80193a8 <tcp_process+0x7dc>)
 80192ea:	681b      	ldr	r3, [r3, #0]
 80192ec:	60fb      	str	r3, [r7, #12]
 80192ee:	e00c      	b.n	801930a <tcp_process+0x73e>
 80192f0:	68fb      	ldr	r3, [r7, #12]
 80192f2:	68db      	ldr	r3, [r3, #12]
 80192f4:	687a      	ldr	r2, [r7, #4]
 80192f6:	429a      	cmp	r2, r3
 80192f8:	d104      	bne.n	8019304 <tcp_process+0x738>
 80192fa:	687b      	ldr	r3, [r7, #4]
 80192fc:	68da      	ldr	r2, [r3, #12]
 80192fe:	68fb      	ldr	r3, [r7, #12]
 8019300:	60da      	str	r2, [r3, #12]
 8019302:	e005      	b.n	8019310 <tcp_process+0x744>
 8019304:	68fb      	ldr	r3, [r7, #12]
 8019306:	68db      	ldr	r3, [r3, #12]
 8019308:	60fb      	str	r3, [r7, #12]
 801930a:	68fb      	ldr	r3, [r7, #12]
 801930c:	2b00      	cmp	r3, #0
 801930e:	d1ef      	bne.n	80192f0 <tcp_process+0x724>
 8019310:	687b      	ldr	r3, [r7, #4]
 8019312:	2200      	movs	r2, #0
 8019314:	60da      	str	r2, [r3, #12]
 8019316:	4b1f      	ldr	r3, [pc, #124]	; (8019394 <tcp_process+0x7c8>)
 8019318:	2201      	movs	r2, #1
 801931a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801931c:	687b      	ldr	r3, [r7, #4]
 801931e:	220a      	movs	r2, #10
 8019320:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8019322:	4b1d      	ldr	r3, [pc, #116]	; (8019398 <tcp_process+0x7cc>)
 8019324:	681a      	ldr	r2, [r3, #0]
 8019326:	687b      	ldr	r3, [r7, #4]
 8019328:	60da      	str	r2, [r3, #12]
 801932a:	4a1b      	ldr	r2, [pc, #108]	; (8019398 <tcp_process+0x7cc>)
 801932c:	687b      	ldr	r3, [r7, #4]
 801932e:	6013      	str	r3, [r2, #0]
 8019330:	f003 f8a0 	bl	801c474 <tcp_timer_needed>
      }
      break;
 8019334:	e026      	b.n	8019384 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8019336:	6878      	ldr	r0, [r7, #4]
 8019338:	f000 f93c 	bl	80195b4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801933c:	4b17      	ldr	r3, [pc, #92]	; (801939c <tcp_process+0x7d0>)
 801933e:	781b      	ldrb	r3, [r3, #0]
 8019340:	f003 0310 	and.w	r3, r3, #16
 8019344:	2b00      	cmp	r3, #0
 8019346:	d01f      	beq.n	8019388 <tcp_process+0x7bc>
 8019348:	687b      	ldr	r3, [r7, #4]
 801934a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801934c:	4b14      	ldr	r3, [pc, #80]	; (80193a0 <tcp_process+0x7d4>)
 801934e:	681b      	ldr	r3, [r3, #0]
 8019350:	429a      	cmp	r2, r3
 8019352:	d119      	bne.n	8019388 <tcp_process+0x7bc>
 8019354:	687b      	ldr	r3, [r7, #4]
 8019356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019358:	2b00      	cmp	r3, #0
 801935a:	d115      	bne.n	8019388 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801935c:	4b11      	ldr	r3, [pc, #68]	; (80193a4 <tcp_process+0x7d8>)
 801935e:	781b      	ldrb	r3, [r3, #0]
 8019360:	f043 0310 	orr.w	r3, r3, #16
 8019364:	b2da      	uxtb	r2, r3
 8019366:	4b0f      	ldr	r3, [pc, #60]	; (80193a4 <tcp_process+0x7d8>)
 8019368:	701a      	strb	r2, [r3, #0]
      }
      break;
 801936a:	e00d      	b.n	8019388 <tcp_process+0x7bc>
    default:
      break;
 801936c:	bf00      	nop
 801936e:	e00c      	b.n	801938a <tcp_process+0x7be>
      break;
 8019370:	bf00      	nop
 8019372:	e00a      	b.n	801938a <tcp_process+0x7be>
      break;
 8019374:	bf00      	nop
 8019376:	e008      	b.n	801938a <tcp_process+0x7be>
      break;
 8019378:	bf00      	nop
 801937a:	e006      	b.n	801938a <tcp_process+0x7be>
      break;
 801937c:	bf00      	nop
 801937e:	e004      	b.n	801938a <tcp_process+0x7be>
      break;
 8019380:	bf00      	nop
 8019382:	e002      	b.n	801938a <tcp_process+0x7be>
      break;
 8019384:	bf00      	nop
 8019386:	e000      	b.n	801938a <tcp_process+0x7be>
      break;
 8019388:	bf00      	nop
  }
  return ERR_OK;
 801938a:	2300      	movs	r3, #0
}
 801938c:	4618      	mov	r0, r3
 801938e:	3724      	adds	r7, #36	; 0x24
 8019390:	46bd      	mov	sp, r7
 8019392:	bd90      	pop	{r4, r7, pc}
 8019394:	24008e34 	.word	0x24008e34
 8019398:	24008e48 	.word	0x24008e48
 801939c:	240057d0 	.word	0x240057d0
 80193a0:	240057c8 	.word	0x240057c8
 80193a4:	240057d1 	.word	0x240057d1
 80193a8:	24008e38 	.word	0x24008e38

080193ac <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80193ac:	b590      	push	{r4, r7, lr}
 80193ae:	b085      	sub	sp, #20
 80193b0:	af00      	add	r7, sp, #0
 80193b2:	6078      	str	r0, [r7, #4]
 80193b4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80193b6:	687b      	ldr	r3, [r7, #4]
 80193b8:	2b00      	cmp	r3, #0
 80193ba:	d106      	bne.n	80193ca <tcp_oos_insert_segment+0x1e>
 80193bc:	4b3b      	ldr	r3, [pc, #236]	; (80194ac <tcp_oos_insert_segment+0x100>)
 80193be:	f240 421f 	movw	r2, #1055	; 0x41f
 80193c2:	493b      	ldr	r1, [pc, #236]	; (80194b0 <tcp_oos_insert_segment+0x104>)
 80193c4:	483b      	ldr	r0, [pc, #236]	; (80194b4 <tcp_oos_insert_segment+0x108>)
 80193c6:	f007 fbd1 	bl	8020b6c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80193ca:	687b      	ldr	r3, [r7, #4]
 80193cc:	68db      	ldr	r3, [r3, #12]
 80193ce:	899b      	ldrh	r3, [r3, #12]
 80193d0:	b29b      	uxth	r3, r3
 80193d2:	4618      	mov	r0, r3
 80193d4:	f7f8 fcbc 	bl	8011d50 <lwip_htons>
 80193d8:	4603      	mov	r3, r0
 80193da:	b2db      	uxtb	r3, r3
 80193dc:	f003 0301 	and.w	r3, r3, #1
 80193e0:	2b00      	cmp	r3, #0
 80193e2:	d028      	beq.n	8019436 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80193e4:	6838      	ldr	r0, [r7, #0]
 80193e6:	f7fe f997 	bl	8017718 <tcp_segs_free>
    next = NULL;
 80193ea:	2300      	movs	r3, #0
 80193ec:	603b      	str	r3, [r7, #0]
 80193ee:	e056      	b.n	801949e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80193f0:	683b      	ldr	r3, [r7, #0]
 80193f2:	68db      	ldr	r3, [r3, #12]
 80193f4:	899b      	ldrh	r3, [r3, #12]
 80193f6:	b29b      	uxth	r3, r3
 80193f8:	4618      	mov	r0, r3
 80193fa:	f7f8 fca9 	bl	8011d50 <lwip_htons>
 80193fe:	4603      	mov	r3, r0
 8019400:	b2db      	uxtb	r3, r3
 8019402:	f003 0301 	and.w	r3, r3, #1
 8019406:	2b00      	cmp	r3, #0
 8019408:	d00d      	beq.n	8019426 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801940a:	687b      	ldr	r3, [r7, #4]
 801940c:	68db      	ldr	r3, [r3, #12]
 801940e:	899b      	ldrh	r3, [r3, #12]
 8019410:	b29c      	uxth	r4, r3
 8019412:	2001      	movs	r0, #1
 8019414:	f7f8 fc9c 	bl	8011d50 <lwip_htons>
 8019418:	4603      	mov	r3, r0
 801941a:	461a      	mov	r2, r3
 801941c:	687b      	ldr	r3, [r7, #4]
 801941e:	68db      	ldr	r3, [r3, #12]
 8019420:	4322      	orrs	r2, r4
 8019422:	b292      	uxth	r2, r2
 8019424:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8019426:	683b      	ldr	r3, [r7, #0]
 8019428:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801942a:	683b      	ldr	r3, [r7, #0]
 801942c:	681b      	ldr	r3, [r3, #0]
 801942e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8019430:	68f8      	ldr	r0, [r7, #12]
 8019432:	f7fe f986 	bl	8017742 <tcp_seg_free>
    while (next &&
 8019436:	683b      	ldr	r3, [r7, #0]
 8019438:	2b00      	cmp	r3, #0
 801943a:	d00e      	beq.n	801945a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	891b      	ldrh	r3, [r3, #8]
 8019440:	461a      	mov	r2, r3
 8019442:	4b1d      	ldr	r3, [pc, #116]	; (80194b8 <tcp_oos_insert_segment+0x10c>)
 8019444:	681b      	ldr	r3, [r3, #0]
 8019446:	441a      	add	r2, r3
 8019448:	683b      	ldr	r3, [r7, #0]
 801944a:	68db      	ldr	r3, [r3, #12]
 801944c:	685b      	ldr	r3, [r3, #4]
 801944e:	6839      	ldr	r1, [r7, #0]
 8019450:	8909      	ldrh	r1, [r1, #8]
 8019452:	440b      	add	r3, r1
 8019454:	1ad3      	subs	r3, r2, r3
    while (next &&
 8019456:	2b00      	cmp	r3, #0
 8019458:	daca      	bge.n	80193f0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801945a:	683b      	ldr	r3, [r7, #0]
 801945c:	2b00      	cmp	r3, #0
 801945e:	d01e      	beq.n	801949e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8019460:	687b      	ldr	r3, [r7, #4]
 8019462:	891b      	ldrh	r3, [r3, #8]
 8019464:	461a      	mov	r2, r3
 8019466:	4b14      	ldr	r3, [pc, #80]	; (80194b8 <tcp_oos_insert_segment+0x10c>)
 8019468:	681b      	ldr	r3, [r3, #0]
 801946a:	441a      	add	r2, r3
 801946c:	683b      	ldr	r3, [r7, #0]
 801946e:	68db      	ldr	r3, [r3, #12]
 8019470:	685b      	ldr	r3, [r3, #4]
 8019472:	1ad3      	subs	r3, r2, r3
    if (next &&
 8019474:	2b00      	cmp	r3, #0
 8019476:	dd12      	ble.n	801949e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8019478:	683b      	ldr	r3, [r7, #0]
 801947a:	68db      	ldr	r3, [r3, #12]
 801947c:	685b      	ldr	r3, [r3, #4]
 801947e:	b29a      	uxth	r2, r3
 8019480:	4b0d      	ldr	r3, [pc, #52]	; (80194b8 <tcp_oos_insert_segment+0x10c>)
 8019482:	681b      	ldr	r3, [r3, #0]
 8019484:	b29b      	uxth	r3, r3
 8019486:	1ad3      	subs	r3, r2, r3
 8019488:	b29a      	uxth	r2, r3
 801948a:	687b      	ldr	r3, [r7, #4]
 801948c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801948e:	687b      	ldr	r3, [r7, #4]
 8019490:	685a      	ldr	r2, [r3, #4]
 8019492:	687b      	ldr	r3, [r7, #4]
 8019494:	891b      	ldrh	r3, [r3, #8]
 8019496:	4619      	mov	r1, r3
 8019498:	4610      	mov	r0, r2
 801949a:	f7fc f9cf 	bl	801583c <pbuf_realloc>
    }
  }
  cseg->next = next;
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	683a      	ldr	r2, [r7, #0]
 80194a2:	601a      	str	r2, [r3, #0]
}
 80194a4:	bf00      	nop
 80194a6:	3714      	adds	r7, #20
 80194a8:	46bd      	mov	sp, r7
 80194aa:	bd90      	pop	{r4, r7, pc}
 80194ac:	0802790c 	.word	0x0802790c
 80194b0:	08027bf8 	.word	0x08027bf8
 80194b4:	08027984 	.word	0x08027984
 80194b8:	240057c4 	.word	0x240057c4

080194bc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80194bc:	b5b0      	push	{r4, r5, r7, lr}
 80194be:	b086      	sub	sp, #24
 80194c0:	af00      	add	r7, sp, #0
 80194c2:	60f8      	str	r0, [r7, #12]
 80194c4:	60b9      	str	r1, [r7, #8]
 80194c6:	607a      	str	r2, [r7, #4]
 80194c8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80194ca:	e03e      	b.n	801954a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80194cc:	68bb      	ldr	r3, [r7, #8]
 80194ce:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80194d0:	68bb      	ldr	r3, [r7, #8]
 80194d2:	681b      	ldr	r3, [r3, #0]
 80194d4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80194d6:	697b      	ldr	r3, [r7, #20]
 80194d8:	685b      	ldr	r3, [r3, #4]
 80194da:	4618      	mov	r0, r3
 80194dc:	f7fc fbbc 	bl	8015c58 <pbuf_clen>
 80194e0:	4603      	mov	r3, r0
 80194e2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80194e4:	68fb      	ldr	r3, [r7, #12]
 80194e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80194ea:	8a7a      	ldrh	r2, [r7, #18]
 80194ec:	429a      	cmp	r2, r3
 80194ee:	d906      	bls.n	80194fe <tcp_free_acked_segments+0x42>
 80194f0:	4b2a      	ldr	r3, [pc, #168]	; (801959c <tcp_free_acked_segments+0xe0>)
 80194f2:	f240 4257 	movw	r2, #1111	; 0x457
 80194f6:	492a      	ldr	r1, [pc, #168]	; (80195a0 <tcp_free_acked_segments+0xe4>)
 80194f8:	482a      	ldr	r0, [pc, #168]	; (80195a4 <tcp_free_acked_segments+0xe8>)
 80194fa:	f007 fb37 	bl	8020b6c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80194fe:	68fb      	ldr	r3, [r7, #12]
 8019500:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8019504:	8a7b      	ldrh	r3, [r7, #18]
 8019506:	1ad3      	subs	r3, r2, r3
 8019508:	b29a      	uxth	r2, r3
 801950a:	68fb      	ldr	r3, [r7, #12]
 801950c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8019510:	697b      	ldr	r3, [r7, #20]
 8019512:	891a      	ldrh	r2, [r3, #8]
 8019514:	4b24      	ldr	r3, [pc, #144]	; (80195a8 <tcp_free_acked_segments+0xec>)
 8019516:	881b      	ldrh	r3, [r3, #0]
 8019518:	4413      	add	r3, r2
 801951a:	b29a      	uxth	r2, r3
 801951c:	4b22      	ldr	r3, [pc, #136]	; (80195a8 <tcp_free_acked_segments+0xec>)
 801951e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8019520:	6978      	ldr	r0, [r7, #20]
 8019522:	f7fe f90e 	bl	8017742 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8019526:	68fb      	ldr	r3, [r7, #12]
 8019528:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801952c:	2b00      	cmp	r3, #0
 801952e:	d00c      	beq.n	801954a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8019530:	68bb      	ldr	r3, [r7, #8]
 8019532:	2b00      	cmp	r3, #0
 8019534:	d109      	bne.n	801954a <tcp_free_acked_segments+0x8e>
 8019536:	683b      	ldr	r3, [r7, #0]
 8019538:	2b00      	cmp	r3, #0
 801953a:	d106      	bne.n	801954a <tcp_free_acked_segments+0x8e>
 801953c:	4b17      	ldr	r3, [pc, #92]	; (801959c <tcp_free_acked_segments+0xe0>)
 801953e:	f240 4261 	movw	r2, #1121	; 0x461
 8019542:	491a      	ldr	r1, [pc, #104]	; (80195ac <tcp_free_acked_segments+0xf0>)
 8019544:	4817      	ldr	r0, [pc, #92]	; (80195a4 <tcp_free_acked_segments+0xe8>)
 8019546:	f007 fb11 	bl	8020b6c <iprintf>
  while (seg_list != NULL &&
 801954a:	68bb      	ldr	r3, [r7, #8]
 801954c:	2b00      	cmp	r3, #0
 801954e:	d020      	beq.n	8019592 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8019550:	68bb      	ldr	r3, [r7, #8]
 8019552:	68db      	ldr	r3, [r3, #12]
 8019554:	685b      	ldr	r3, [r3, #4]
 8019556:	4618      	mov	r0, r3
 8019558:	f7f8 fc0f 	bl	8011d7a <lwip_htonl>
 801955c:	4604      	mov	r4, r0
 801955e:	68bb      	ldr	r3, [r7, #8]
 8019560:	891b      	ldrh	r3, [r3, #8]
 8019562:	461d      	mov	r5, r3
 8019564:	68bb      	ldr	r3, [r7, #8]
 8019566:	68db      	ldr	r3, [r3, #12]
 8019568:	899b      	ldrh	r3, [r3, #12]
 801956a:	b29b      	uxth	r3, r3
 801956c:	4618      	mov	r0, r3
 801956e:	f7f8 fbef 	bl	8011d50 <lwip_htons>
 8019572:	4603      	mov	r3, r0
 8019574:	b2db      	uxtb	r3, r3
 8019576:	f003 0303 	and.w	r3, r3, #3
 801957a:	2b00      	cmp	r3, #0
 801957c:	d001      	beq.n	8019582 <tcp_free_acked_segments+0xc6>
 801957e:	2301      	movs	r3, #1
 8019580:	e000      	b.n	8019584 <tcp_free_acked_segments+0xc8>
 8019582:	2300      	movs	r3, #0
 8019584:	442b      	add	r3, r5
 8019586:	18e2      	adds	r2, r4, r3
 8019588:	4b09      	ldr	r3, [pc, #36]	; (80195b0 <tcp_free_acked_segments+0xf4>)
 801958a:	681b      	ldr	r3, [r3, #0]
 801958c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801958e:	2b00      	cmp	r3, #0
 8019590:	dd9c      	ble.n	80194cc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8019592:	68bb      	ldr	r3, [r7, #8]
}
 8019594:	4618      	mov	r0, r3
 8019596:	3718      	adds	r7, #24
 8019598:	46bd      	mov	sp, r7
 801959a:	bdb0      	pop	{r4, r5, r7, pc}
 801959c:	0802790c 	.word	0x0802790c
 80195a0:	08027c20 	.word	0x08027c20
 80195a4:	08027984 	.word	0x08027984
 80195a8:	240057cc 	.word	0x240057cc
 80195ac:	08027c48 	.word	0x08027c48
 80195b0:	240057c8 	.word	0x240057c8

080195b4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80195b4:	b5b0      	push	{r4, r5, r7, lr}
 80195b6:	b094      	sub	sp, #80	; 0x50
 80195b8:	af00      	add	r7, sp, #0
 80195ba:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80195bc:	2300      	movs	r3, #0
 80195be:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	2b00      	cmp	r3, #0
 80195c4:	d106      	bne.n	80195d4 <tcp_receive+0x20>
 80195c6:	4ba6      	ldr	r3, [pc, #664]	; (8019860 <tcp_receive+0x2ac>)
 80195c8:	f240 427b 	movw	r2, #1147	; 0x47b
 80195cc:	49a5      	ldr	r1, [pc, #660]	; (8019864 <tcp_receive+0x2b0>)
 80195ce:	48a6      	ldr	r0, [pc, #664]	; (8019868 <tcp_receive+0x2b4>)
 80195d0:	f007 facc 	bl	8020b6c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80195d4:	687b      	ldr	r3, [r7, #4]
 80195d6:	7d1b      	ldrb	r3, [r3, #20]
 80195d8:	2b03      	cmp	r3, #3
 80195da:	d806      	bhi.n	80195ea <tcp_receive+0x36>
 80195dc:	4ba0      	ldr	r3, [pc, #640]	; (8019860 <tcp_receive+0x2ac>)
 80195de:	f240 427c 	movw	r2, #1148	; 0x47c
 80195e2:	49a2      	ldr	r1, [pc, #648]	; (801986c <tcp_receive+0x2b8>)
 80195e4:	48a0      	ldr	r0, [pc, #640]	; (8019868 <tcp_receive+0x2b4>)
 80195e6:	f007 fac1 	bl	8020b6c <iprintf>

  if (flags & TCP_ACK) {
 80195ea:	4ba1      	ldr	r3, [pc, #644]	; (8019870 <tcp_receive+0x2bc>)
 80195ec:	781b      	ldrb	r3, [r3, #0]
 80195ee:	f003 0310 	and.w	r3, r3, #16
 80195f2:	2b00      	cmp	r3, #0
 80195f4:	f000 8263 	beq.w	8019abe <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80195f8:	687b      	ldr	r3, [r7, #4]
 80195fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80195fe:	461a      	mov	r2, r3
 8019600:	687b      	ldr	r3, [r7, #4]
 8019602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019604:	4413      	add	r3, r2
 8019606:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8019608:	687b      	ldr	r3, [r7, #4]
 801960a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801960c:	4b99      	ldr	r3, [pc, #612]	; (8019874 <tcp_receive+0x2c0>)
 801960e:	681b      	ldr	r3, [r3, #0]
 8019610:	1ad3      	subs	r3, r2, r3
 8019612:	2b00      	cmp	r3, #0
 8019614:	db1b      	blt.n	801964e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8019616:	687b      	ldr	r3, [r7, #4]
 8019618:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801961a:	4b96      	ldr	r3, [pc, #600]	; (8019874 <tcp_receive+0x2c0>)
 801961c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801961e:	429a      	cmp	r2, r3
 8019620:	d106      	bne.n	8019630 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8019626:	4b94      	ldr	r3, [pc, #592]	; (8019878 <tcp_receive+0x2c4>)
 8019628:	681b      	ldr	r3, [r3, #0]
 801962a:	1ad3      	subs	r3, r2, r3
 801962c:	2b00      	cmp	r3, #0
 801962e:	db0e      	blt.n	801964e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8019634:	4b90      	ldr	r3, [pc, #576]	; (8019878 <tcp_receive+0x2c4>)
 8019636:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8019638:	429a      	cmp	r2, r3
 801963a:	d125      	bne.n	8019688 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801963c:	4b8f      	ldr	r3, [pc, #572]	; (801987c <tcp_receive+0x2c8>)
 801963e:	681b      	ldr	r3, [r3, #0]
 8019640:	89db      	ldrh	r3, [r3, #14]
 8019642:	b29a      	uxth	r2, r3
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801964a:	429a      	cmp	r2, r3
 801964c:	d91c      	bls.n	8019688 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801964e:	4b8b      	ldr	r3, [pc, #556]	; (801987c <tcp_receive+0x2c8>)
 8019650:	681b      	ldr	r3, [r3, #0]
 8019652:	89db      	ldrh	r3, [r3, #14]
 8019654:	b29a      	uxth	r2, r3
 8019656:	687b      	ldr	r3, [r7, #4]
 8019658:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801965c:	687b      	ldr	r3, [r7, #4]
 801965e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8019662:	687b      	ldr	r3, [r7, #4]
 8019664:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019668:	429a      	cmp	r2, r3
 801966a:	d205      	bcs.n	8019678 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8019672:	687b      	ldr	r3, [r7, #4]
 8019674:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8019678:	4b7e      	ldr	r3, [pc, #504]	; (8019874 <tcp_receive+0x2c0>)
 801967a:	681a      	ldr	r2, [r3, #0]
 801967c:	687b      	ldr	r3, [r7, #4]
 801967e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8019680:	4b7d      	ldr	r3, [pc, #500]	; (8019878 <tcp_receive+0x2c4>)
 8019682:	681a      	ldr	r2, [r3, #0]
 8019684:	687b      	ldr	r3, [r7, #4]
 8019686:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8019688:	4b7b      	ldr	r3, [pc, #492]	; (8019878 <tcp_receive+0x2c4>)
 801968a:	681a      	ldr	r2, [r3, #0]
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019690:	1ad3      	subs	r3, r2, r3
 8019692:	2b00      	cmp	r3, #0
 8019694:	dc58      	bgt.n	8019748 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8019696:	4b7a      	ldr	r3, [pc, #488]	; (8019880 <tcp_receive+0x2cc>)
 8019698:	881b      	ldrh	r3, [r3, #0]
 801969a:	2b00      	cmp	r3, #0
 801969c:	d14b      	bne.n	8019736 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801969e:	687b      	ldr	r3, [r7, #4]
 80196a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80196a2:	687a      	ldr	r2, [r7, #4]
 80196a4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80196a8:	4413      	add	r3, r2
 80196aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80196ac:	429a      	cmp	r2, r3
 80196ae:	d142      	bne.n	8019736 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80196b6:	2b00      	cmp	r3, #0
 80196b8:	db3d      	blt.n	8019736 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80196ba:	687b      	ldr	r3, [r7, #4]
 80196bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80196be:	4b6e      	ldr	r3, [pc, #440]	; (8019878 <tcp_receive+0x2c4>)
 80196c0:	681b      	ldr	r3, [r3, #0]
 80196c2:	429a      	cmp	r2, r3
 80196c4:	d137      	bne.n	8019736 <tcp_receive+0x182>
              found_dupack = 1;
 80196c6:	2301      	movs	r3, #1
 80196c8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80196ca:	687b      	ldr	r3, [r7, #4]
 80196cc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80196d0:	2bff      	cmp	r3, #255	; 0xff
 80196d2:	d007      	beq.n	80196e4 <tcp_receive+0x130>
                ++pcb->dupacks;
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80196da:	3301      	adds	r3, #1
 80196dc:	b2da      	uxtb	r2, r3
 80196de:	687b      	ldr	r3, [r7, #4]
 80196e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80196e4:	687b      	ldr	r3, [r7, #4]
 80196e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80196ea:	2b03      	cmp	r3, #3
 80196ec:	d91b      	bls.n	8019726 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80196ee:	687b      	ldr	r3, [r7, #4]
 80196f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80196f4:	687b      	ldr	r3, [r7, #4]
 80196f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80196f8:	4413      	add	r3, r2
 80196fa:	b29a      	uxth	r2, r3
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019702:	429a      	cmp	r2, r3
 8019704:	d30a      	bcc.n	801971c <tcp_receive+0x168>
 8019706:	687b      	ldr	r3, [r7, #4]
 8019708:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019710:	4413      	add	r3, r2
 8019712:	b29a      	uxth	r2, r3
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801971a:	e004      	b.n	8019726 <tcp_receive+0x172>
 801971c:	687b      	ldr	r3, [r7, #4]
 801971e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019722:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8019726:	687b      	ldr	r3, [r7, #4]
 8019728:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801972c:	2b02      	cmp	r3, #2
 801972e:	d902      	bls.n	8019736 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8019730:	6878      	ldr	r0, [r7, #4]
 8019732:	f002 fb41 	bl	801bdb8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8019736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019738:	2b00      	cmp	r3, #0
 801973a:	f040 8160 	bne.w	80199fe <tcp_receive+0x44a>
        pcb->dupacks = 0;
 801973e:	687b      	ldr	r3, [r7, #4]
 8019740:	2200      	movs	r2, #0
 8019742:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8019746:	e15a      	b.n	80199fe <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019748:	4b4b      	ldr	r3, [pc, #300]	; (8019878 <tcp_receive+0x2c4>)
 801974a:	681a      	ldr	r2, [r3, #0]
 801974c:	687b      	ldr	r3, [r7, #4]
 801974e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019750:	1ad3      	subs	r3, r2, r3
 8019752:	3b01      	subs	r3, #1
 8019754:	2b00      	cmp	r3, #0
 8019756:	f2c0 814d 	blt.w	80199f4 <tcp_receive+0x440>
 801975a:	4b47      	ldr	r3, [pc, #284]	; (8019878 <tcp_receive+0x2c4>)
 801975c:	681a      	ldr	r2, [r3, #0]
 801975e:	687b      	ldr	r3, [r7, #4]
 8019760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019762:	1ad3      	subs	r3, r2, r3
 8019764:	2b00      	cmp	r3, #0
 8019766:	f300 8145 	bgt.w	80199f4 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801976a:	687b      	ldr	r3, [r7, #4]
 801976c:	8b5b      	ldrh	r3, [r3, #26]
 801976e:	f003 0304 	and.w	r3, r3, #4
 8019772:	2b00      	cmp	r3, #0
 8019774:	d010      	beq.n	8019798 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8019776:	687b      	ldr	r3, [r7, #4]
 8019778:	8b5b      	ldrh	r3, [r3, #26]
 801977a:	f023 0304 	bic.w	r3, r3, #4
 801977e:	b29a      	uxth	r2, r3
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801978a:	687b      	ldr	r3, [r7, #4]
 801978c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8019790:	687b      	ldr	r3, [r7, #4]
 8019792:	2200      	movs	r2, #0
 8019794:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8019798:	687b      	ldr	r3, [r7, #4]
 801979a:	2200      	movs	r2, #0
 801979c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80197a0:	687b      	ldr	r3, [r7, #4]
 80197a2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80197a6:	10db      	asrs	r3, r3, #3
 80197a8:	b21b      	sxth	r3, r3
 80197aa:	b29a      	uxth	r2, r3
 80197ac:	687b      	ldr	r3, [r7, #4]
 80197ae:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80197b2:	b29b      	uxth	r3, r3
 80197b4:	4413      	add	r3, r2
 80197b6:	b29b      	uxth	r3, r3
 80197b8:	b21a      	sxth	r2, r3
 80197ba:	687b      	ldr	r3, [r7, #4]
 80197bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80197c0:	4b2d      	ldr	r3, [pc, #180]	; (8019878 <tcp_receive+0x2c4>)
 80197c2:	681b      	ldr	r3, [r3, #0]
 80197c4:	b29a      	uxth	r2, r3
 80197c6:	687b      	ldr	r3, [r7, #4]
 80197c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80197ca:	b29b      	uxth	r3, r3
 80197cc:	1ad3      	subs	r3, r2, r3
 80197ce:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	2200      	movs	r2, #0
 80197d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80197d8:	4b27      	ldr	r3, [pc, #156]	; (8019878 <tcp_receive+0x2c4>)
 80197da:	681a      	ldr	r2, [r3, #0]
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80197e0:	687b      	ldr	r3, [r7, #4]
 80197e2:	7d1b      	ldrb	r3, [r3, #20]
 80197e4:	2b03      	cmp	r3, #3
 80197e6:	f240 8096 	bls.w	8019916 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 80197ea:	687b      	ldr	r3, [r7, #4]
 80197ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80197f0:	687b      	ldr	r3, [r7, #4]
 80197f2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80197f6:	429a      	cmp	r2, r3
 80197f8:	d244      	bcs.n	8019884 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80197fa:	687b      	ldr	r3, [r7, #4]
 80197fc:	8b5b      	ldrh	r3, [r3, #26]
 80197fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019802:	2b00      	cmp	r3, #0
 8019804:	d001      	beq.n	801980a <tcp_receive+0x256>
 8019806:	2301      	movs	r3, #1
 8019808:	e000      	b.n	801980c <tcp_receive+0x258>
 801980a:	2302      	movs	r3, #2
 801980c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8019810:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8019814:	b29a      	uxth	r2, r3
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801981a:	fb12 f303 	smulbb	r3, r2, r3
 801981e:	b29b      	uxth	r3, r3
 8019820:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8019822:	4293      	cmp	r3, r2
 8019824:	bf28      	it	cs
 8019826:	4613      	movcs	r3, r2
 8019828:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801982a:	687b      	ldr	r3, [r7, #4]
 801982c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019830:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019832:	4413      	add	r3, r2
 8019834:	b29a      	uxth	r2, r3
 8019836:	687b      	ldr	r3, [r7, #4]
 8019838:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801983c:	429a      	cmp	r2, r3
 801983e:	d309      	bcc.n	8019854 <tcp_receive+0x2a0>
 8019840:	687b      	ldr	r3, [r7, #4]
 8019842:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019846:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019848:	4413      	add	r3, r2
 801984a:	b29a      	uxth	r2, r3
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8019852:	e060      	b.n	8019916 <tcp_receive+0x362>
 8019854:	687b      	ldr	r3, [r7, #4]
 8019856:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801985a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801985e:	e05a      	b.n	8019916 <tcp_receive+0x362>
 8019860:	0802790c 	.word	0x0802790c
 8019864:	08027c68 	.word	0x08027c68
 8019868:	08027984 	.word	0x08027984
 801986c:	08027c84 	.word	0x08027c84
 8019870:	240057d0 	.word	0x240057d0
 8019874:	240057c4 	.word	0x240057c4
 8019878:	240057c8 	.word	0x240057c8
 801987c:	240057b4 	.word	0x240057b4
 8019880:	240057ce 	.word	0x240057ce
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8019884:	687b      	ldr	r3, [r7, #4]
 8019886:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801988a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801988c:	4413      	add	r3, r2
 801988e:	b29a      	uxth	r2, r3
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8019896:	429a      	cmp	r2, r3
 8019898:	d309      	bcc.n	80198ae <tcp_receive+0x2fa>
 801989a:	687b      	ldr	r3, [r7, #4]
 801989c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80198a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80198a2:	4413      	add	r3, r2
 80198a4:	b29a      	uxth	r2, r3
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80198ac:	e004      	b.n	80198b8 <tcp_receive+0x304>
 80198ae:	687b      	ldr	r3, [r7, #4]
 80198b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80198b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80198b8:	687b      	ldr	r3, [r7, #4]
 80198ba:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80198be:	687b      	ldr	r3, [r7, #4]
 80198c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80198c4:	429a      	cmp	r2, r3
 80198c6:	d326      	bcc.n	8019916 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80198c8:	687b      	ldr	r3, [r7, #4]
 80198ca:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80198d4:	1ad3      	subs	r3, r2, r3
 80198d6:	b29a      	uxth	r2, r3
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80198e4:	687b      	ldr	r3, [r7, #4]
 80198e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80198e8:	4413      	add	r3, r2
 80198ea:	b29a      	uxth	r2, r3
 80198ec:	687b      	ldr	r3, [r7, #4]
 80198ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80198f2:	429a      	cmp	r2, r3
 80198f4:	d30a      	bcc.n	801990c <tcp_receive+0x358>
 80198f6:	687b      	ldr	r3, [r7, #4]
 80198f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019900:	4413      	add	r3, r2
 8019902:	b29a      	uxth	r2, r3
 8019904:	687b      	ldr	r3, [r7, #4]
 8019906:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801990a:	e004      	b.n	8019916 <tcp_receive+0x362>
 801990c:	687b      	ldr	r3, [r7, #4]
 801990e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019912:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8019916:	687b      	ldr	r3, [r7, #4]
 8019918:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801991e:	4a98      	ldr	r2, [pc, #608]	; (8019b80 <tcp_receive+0x5cc>)
 8019920:	6878      	ldr	r0, [r7, #4]
 8019922:	f7ff fdcb 	bl	80194bc <tcp_free_acked_segments>
 8019926:	4602      	mov	r2, r0
 8019928:	687b      	ldr	r3, [r7, #4]
 801992a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801992c:	687b      	ldr	r3, [r7, #4]
 801992e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8019930:	687b      	ldr	r3, [r7, #4]
 8019932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019934:	4a93      	ldr	r2, [pc, #588]	; (8019b84 <tcp_receive+0x5d0>)
 8019936:	6878      	ldr	r0, [r7, #4]
 8019938:	f7ff fdc0 	bl	80194bc <tcp_free_acked_segments>
 801993c:	4602      	mov	r2, r0
 801993e:	687b      	ldr	r3, [r7, #4]
 8019940:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8019942:	687b      	ldr	r3, [r7, #4]
 8019944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019946:	2b00      	cmp	r3, #0
 8019948:	d104      	bne.n	8019954 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801994a:	687b      	ldr	r3, [r7, #4]
 801994c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019950:	861a      	strh	r2, [r3, #48]	; 0x30
 8019952:	e002      	b.n	801995a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	2200      	movs	r2, #0
 8019958:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801995a:	687b      	ldr	r3, [r7, #4]
 801995c:	2200      	movs	r2, #0
 801995e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8019960:	687b      	ldr	r3, [r7, #4]
 8019962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019964:	2b00      	cmp	r3, #0
 8019966:	d103      	bne.n	8019970 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8019968:	687b      	ldr	r3, [r7, #4]
 801996a:	2200      	movs	r2, #0
 801996c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8019970:	687b      	ldr	r3, [r7, #4]
 8019972:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8019976:	4b84      	ldr	r3, [pc, #528]	; (8019b88 <tcp_receive+0x5d4>)
 8019978:	881b      	ldrh	r3, [r3, #0]
 801997a:	4413      	add	r3, r2
 801997c:	b29a      	uxth	r2, r3
 801997e:	687b      	ldr	r3, [r7, #4]
 8019980:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8019984:	687b      	ldr	r3, [r7, #4]
 8019986:	8b5b      	ldrh	r3, [r3, #26]
 8019988:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801998c:	2b00      	cmp	r3, #0
 801998e:	d035      	beq.n	80199fc <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8019990:	687b      	ldr	r3, [r7, #4]
 8019992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019994:	2b00      	cmp	r3, #0
 8019996:	d118      	bne.n	80199ca <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8019998:	687b      	ldr	r3, [r7, #4]
 801999a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801999c:	2b00      	cmp	r3, #0
 801999e:	d00c      	beq.n	80199ba <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80199a0:	687b      	ldr	r3, [r7, #4]
 80199a2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80199a4:	687b      	ldr	r3, [r7, #4]
 80199a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80199a8:	68db      	ldr	r3, [r3, #12]
 80199aa:	685b      	ldr	r3, [r3, #4]
 80199ac:	4618      	mov	r0, r3
 80199ae:	f7f8 f9e4 	bl	8011d7a <lwip_htonl>
 80199b2:	4603      	mov	r3, r0
 80199b4:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80199b6:	2b00      	cmp	r3, #0
 80199b8:	dc20      	bgt.n	80199fc <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80199ba:	687b      	ldr	r3, [r7, #4]
 80199bc:	8b5b      	ldrh	r3, [r3, #26]
 80199be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80199c2:	b29a      	uxth	r2, r3
 80199c4:	687b      	ldr	r3, [r7, #4]
 80199c6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80199c8:	e018      	b.n	80199fc <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80199ca:	687b      	ldr	r3, [r7, #4]
 80199cc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80199ce:	687b      	ldr	r3, [r7, #4]
 80199d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80199d2:	68db      	ldr	r3, [r3, #12]
 80199d4:	685b      	ldr	r3, [r3, #4]
 80199d6:	4618      	mov	r0, r3
 80199d8:	f7f8 f9cf 	bl	8011d7a <lwip_htonl>
 80199dc:	4603      	mov	r3, r0
 80199de:	1ae3      	subs	r3, r4, r3
 80199e0:	2b00      	cmp	r3, #0
 80199e2:	dc0b      	bgt.n	80199fc <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	8b5b      	ldrh	r3, [r3, #26]
 80199e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80199ec:	b29a      	uxth	r2, r3
 80199ee:	687b      	ldr	r3, [r7, #4]
 80199f0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80199f2:	e003      	b.n	80199fc <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80199f4:	6878      	ldr	r0, [r7, #4]
 80199f6:	f002 fbcd 	bl	801c194 <tcp_send_empty_ack>
 80199fa:	e000      	b.n	80199fe <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80199fc:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80199fe:	687b      	ldr	r3, [r7, #4]
 8019a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019a02:	2b00      	cmp	r3, #0
 8019a04:	d05b      	beq.n	8019abe <tcp_receive+0x50a>
 8019a06:	687b      	ldr	r3, [r7, #4]
 8019a08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019a0a:	4b60      	ldr	r3, [pc, #384]	; (8019b8c <tcp_receive+0x5d8>)
 8019a0c:	681b      	ldr	r3, [r3, #0]
 8019a0e:	1ad3      	subs	r3, r2, r3
 8019a10:	2b00      	cmp	r3, #0
 8019a12:	da54      	bge.n	8019abe <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8019a14:	4b5e      	ldr	r3, [pc, #376]	; (8019b90 <tcp_receive+0x5dc>)
 8019a16:	681b      	ldr	r3, [r3, #0]
 8019a18:	b29a      	uxth	r2, r3
 8019a1a:	687b      	ldr	r3, [r7, #4]
 8019a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019a1e:	b29b      	uxth	r3, r3
 8019a20:	1ad3      	subs	r3, r2, r3
 8019a22:	b29b      	uxth	r3, r3
 8019a24:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8019a28:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8019a2c:	687b      	ldr	r3, [r7, #4]
 8019a2e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019a32:	10db      	asrs	r3, r3, #3
 8019a34:	b21b      	sxth	r3, r3
 8019a36:	b29b      	uxth	r3, r3
 8019a38:	1ad3      	subs	r3, r2, r3
 8019a3a:	b29b      	uxth	r3, r3
 8019a3c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8019a40:	687b      	ldr	r3, [r7, #4]
 8019a42:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019a46:	b29a      	uxth	r2, r3
 8019a48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8019a4c:	4413      	add	r3, r2
 8019a4e:	b29b      	uxth	r3, r3
 8019a50:	b21a      	sxth	r2, r3
 8019a52:	687b      	ldr	r3, [r7, #4]
 8019a54:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8019a56:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8019a5a:	2b00      	cmp	r3, #0
 8019a5c:	da05      	bge.n	8019a6a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8019a5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8019a62:	425b      	negs	r3, r3
 8019a64:	b29b      	uxth	r3, r3
 8019a66:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8019a6a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8019a6e:	687b      	ldr	r3, [r7, #4]
 8019a70:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019a74:	109b      	asrs	r3, r3, #2
 8019a76:	b21b      	sxth	r3, r3
 8019a78:	b29b      	uxth	r3, r3
 8019a7a:	1ad3      	subs	r3, r2, r3
 8019a7c:	b29b      	uxth	r3, r3
 8019a7e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8019a82:	687b      	ldr	r3, [r7, #4]
 8019a84:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019a88:	b29a      	uxth	r2, r3
 8019a8a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8019a8e:	4413      	add	r3, r2
 8019a90:	b29b      	uxth	r3, r3
 8019a92:	b21a      	sxth	r2, r3
 8019a94:	687b      	ldr	r3, [r7, #4]
 8019a96:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8019a98:	687b      	ldr	r3, [r7, #4]
 8019a9a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019a9e:	10db      	asrs	r3, r3, #3
 8019aa0:	b21b      	sxth	r3, r3
 8019aa2:	b29a      	uxth	r2, r3
 8019aa4:	687b      	ldr	r3, [r7, #4]
 8019aa6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019aaa:	b29b      	uxth	r3, r3
 8019aac:	4413      	add	r3, r2
 8019aae:	b29b      	uxth	r3, r3
 8019ab0:	b21a      	sxth	r2, r3
 8019ab2:	687b      	ldr	r3, [r7, #4]
 8019ab4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8019ab8:	687b      	ldr	r3, [r7, #4]
 8019aba:	2200      	movs	r2, #0
 8019abc:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8019abe:	4b35      	ldr	r3, [pc, #212]	; (8019b94 <tcp_receive+0x5e0>)
 8019ac0:	881b      	ldrh	r3, [r3, #0]
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	f000 84e1 	beq.w	801a48a <tcp_receive+0xed6>
 8019ac8:	687b      	ldr	r3, [r7, #4]
 8019aca:	7d1b      	ldrb	r3, [r3, #20]
 8019acc:	2b06      	cmp	r3, #6
 8019ace:	f200 84dc 	bhi.w	801a48a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8019ad2:	687b      	ldr	r3, [r7, #4]
 8019ad4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019ad6:	4b30      	ldr	r3, [pc, #192]	; (8019b98 <tcp_receive+0x5e4>)
 8019ad8:	681b      	ldr	r3, [r3, #0]
 8019ada:	1ad3      	subs	r3, r2, r3
 8019adc:	3b01      	subs	r3, #1
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	f2c0 808e 	blt.w	8019c00 <tcp_receive+0x64c>
 8019ae4:	687b      	ldr	r3, [r7, #4]
 8019ae6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019ae8:	4b2a      	ldr	r3, [pc, #168]	; (8019b94 <tcp_receive+0x5e0>)
 8019aea:	881b      	ldrh	r3, [r3, #0]
 8019aec:	4619      	mov	r1, r3
 8019aee:	4b2a      	ldr	r3, [pc, #168]	; (8019b98 <tcp_receive+0x5e4>)
 8019af0:	681b      	ldr	r3, [r3, #0]
 8019af2:	440b      	add	r3, r1
 8019af4:	1ad3      	subs	r3, r2, r3
 8019af6:	3301      	adds	r3, #1
 8019af8:	2b00      	cmp	r3, #0
 8019afa:	f300 8081 	bgt.w	8019c00 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8019afe:	4b27      	ldr	r3, [pc, #156]	; (8019b9c <tcp_receive+0x5e8>)
 8019b00:	685b      	ldr	r3, [r3, #4]
 8019b02:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8019b04:	687b      	ldr	r3, [r7, #4]
 8019b06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019b08:	4b23      	ldr	r3, [pc, #140]	; (8019b98 <tcp_receive+0x5e4>)
 8019b0a:	681b      	ldr	r3, [r3, #0]
 8019b0c:	1ad3      	subs	r3, r2, r3
 8019b0e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8019b10:	4b22      	ldr	r3, [pc, #136]	; (8019b9c <tcp_receive+0x5e8>)
 8019b12:	685b      	ldr	r3, [r3, #4]
 8019b14:	2b00      	cmp	r3, #0
 8019b16:	d106      	bne.n	8019b26 <tcp_receive+0x572>
 8019b18:	4b21      	ldr	r3, [pc, #132]	; (8019ba0 <tcp_receive+0x5ec>)
 8019b1a:	f240 5294 	movw	r2, #1428	; 0x594
 8019b1e:	4921      	ldr	r1, [pc, #132]	; (8019ba4 <tcp_receive+0x5f0>)
 8019b20:	4821      	ldr	r0, [pc, #132]	; (8019ba8 <tcp_receive+0x5f4>)
 8019b22:	f007 f823 	bl	8020b6c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8019b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b28:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019b2c:	4293      	cmp	r3, r2
 8019b2e:	d906      	bls.n	8019b3e <tcp_receive+0x58a>
 8019b30:	4b1b      	ldr	r3, [pc, #108]	; (8019ba0 <tcp_receive+0x5ec>)
 8019b32:	f240 5295 	movw	r2, #1429	; 0x595
 8019b36:	491d      	ldr	r1, [pc, #116]	; (8019bac <tcp_receive+0x5f8>)
 8019b38:	481b      	ldr	r0, [pc, #108]	; (8019ba8 <tcp_receive+0x5f4>)
 8019b3a:	f007 f817 	bl	8020b6c <iprintf>
      off = (u16_t)off32;
 8019b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b40:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8019b44:	4b15      	ldr	r3, [pc, #84]	; (8019b9c <tcp_receive+0x5e8>)
 8019b46:	685b      	ldr	r3, [r3, #4]
 8019b48:	891b      	ldrh	r3, [r3, #8]
 8019b4a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019b4e:	429a      	cmp	r2, r3
 8019b50:	d906      	bls.n	8019b60 <tcp_receive+0x5ac>
 8019b52:	4b13      	ldr	r3, [pc, #76]	; (8019ba0 <tcp_receive+0x5ec>)
 8019b54:	f240 5297 	movw	r2, #1431	; 0x597
 8019b58:	4915      	ldr	r1, [pc, #84]	; (8019bb0 <tcp_receive+0x5fc>)
 8019b5a:	4813      	ldr	r0, [pc, #76]	; (8019ba8 <tcp_receive+0x5f4>)
 8019b5c:	f007 f806 	bl	8020b6c <iprintf>
      inseg.len -= off;
 8019b60:	4b0e      	ldr	r3, [pc, #56]	; (8019b9c <tcp_receive+0x5e8>)
 8019b62:	891a      	ldrh	r2, [r3, #8]
 8019b64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019b68:	1ad3      	subs	r3, r2, r3
 8019b6a:	b29a      	uxth	r2, r3
 8019b6c:	4b0b      	ldr	r3, [pc, #44]	; (8019b9c <tcp_receive+0x5e8>)
 8019b6e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8019b70:	4b0a      	ldr	r3, [pc, #40]	; (8019b9c <tcp_receive+0x5e8>)
 8019b72:	685b      	ldr	r3, [r3, #4]
 8019b74:	891a      	ldrh	r2, [r3, #8]
 8019b76:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019b7a:	1ad3      	subs	r3, r2, r3
 8019b7c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8019b7e:	e029      	b.n	8019bd4 <tcp_receive+0x620>
 8019b80:	08027ca0 	.word	0x08027ca0
 8019b84:	08027ca8 	.word	0x08027ca8
 8019b88:	240057cc 	.word	0x240057cc
 8019b8c:	240057c8 	.word	0x240057c8
 8019b90:	24008e3c 	.word	0x24008e3c
 8019b94:	240057ce 	.word	0x240057ce
 8019b98:	240057c4 	.word	0x240057c4
 8019b9c:	240057a4 	.word	0x240057a4
 8019ba0:	0802790c 	.word	0x0802790c
 8019ba4:	08027cb0 	.word	0x08027cb0
 8019ba8:	08027984 	.word	0x08027984
 8019bac:	08027cc0 	.word	0x08027cc0
 8019bb0:	08027cd0 	.word	0x08027cd0
        off -= p->len;
 8019bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019bb6:	895b      	ldrh	r3, [r3, #10]
 8019bb8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019bbc:	1ad3      	subs	r3, r2, r3
 8019bbe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8019bc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019bc4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8019bc6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8019bc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019bca:	2200      	movs	r2, #0
 8019bcc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8019bce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019bd0:	681b      	ldr	r3, [r3, #0]
 8019bd2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8019bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019bd6:	895b      	ldrh	r3, [r3, #10]
 8019bd8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019bdc:	429a      	cmp	r2, r3
 8019bde:	d8e9      	bhi.n	8019bb4 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8019be0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019be4:	4619      	mov	r1, r3
 8019be6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8019be8:	f7fb ff28 	bl	8015a3c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8019bec:	687b      	ldr	r3, [r7, #4]
 8019bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019bf0:	4a91      	ldr	r2, [pc, #580]	; (8019e38 <tcp_receive+0x884>)
 8019bf2:	6013      	str	r3, [r2, #0]
 8019bf4:	4b91      	ldr	r3, [pc, #580]	; (8019e3c <tcp_receive+0x888>)
 8019bf6:	68db      	ldr	r3, [r3, #12]
 8019bf8:	4a8f      	ldr	r2, [pc, #572]	; (8019e38 <tcp_receive+0x884>)
 8019bfa:	6812      	ldr	r2, [r2, #0]
 8019bfc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8019bfe:	e00d      	b.n	8019c1c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8019c00:	4b8d      	ldr	r3, [pc, #564]	; (8019e38 <tcp_receive+0x884>)
 8019c02:	681a      	ldr	r2, [r3, #0]
 8019c04:	687b      	ldr	r3, [r7, #4]
 8019c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c08:	1ad3      	subs	r3, r2, r3
 8019c0a:	2b00      	cmp	r3, #0
 8019c0c:	da06      	bge.n	8019c1c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8019c0e:	687b      	ldr	r3, [r7, #4]
 8019c10:	8b5b      	ldrh	r3, [r3, #26]
 8019c12:	f043 0302 	orr.w	r3, r3, #2
 8019c16:	b29a      	uxth	r2, r3
 8019c18:	687b      	ldr	r3, [r7, #4]
 8019c1a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8019c1c:	4b86      	ldr	r3, [pc, #536]	; (8019e38 <tcp_receive+0x884>)
 8019c1e:	681a      	ldr	r2, [r3, #0]
 8019c20:	687b      	ldr	r3, [r7, #4]
 8019c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c24:	1ad3      	subs	r3, r2, r3
 8019c26:	2b00      	cmp	r3, #0
 8019c28:	f2c0 842a 	blt.w	801a480 <tcp_receive+0xecc>
 8019c2c:	4b82      	ldr	r3, [pc, #520]	; (8019e38 <tcp_receive+0x884>)
 8019c2e:	681a      	ldr	r2, [r3, #0]
 8019c30:	687b      	ldr	r3, [r7, #4]
 8019c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c34:	6879      	ldr	r1, [r7, #4]
 8019c36:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019c38:	440b      	add	r3, r1
 8019c3a:	1ad3      	subs	r3, r2, r3
 8019c3c:	3301      	adds	r3, #1
 8019c3e:	2b00      	cmp	r3, #0
 8019c40:	f300 841e 	bgt.w	801a480 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8019c44:	687b      	ldr	r3, [r7, #4]
 8019c46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019c48:	4b7b      	ldr	r3, [pc, #492]	; (8019e38 <tcp_receive+0x884>)
 8019c4a:	681b      	ldr	r3, [r3, #0]
 8019c4c:	429a      	cmp	r2, r3
 8019c4e:	f040 829a 	bne.w	801a186 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8019c52:	4b7a      	ldr	r3, [pc, #488]	; (8019e3c <tcp_receive+0x888>)
 8019c54:	891c      	ldrh	r4, [r3, #8]
 8019c56:	4b79      	ldr	r3, [pc, #484]	; (8019e3c <tcp_receive+0x888>)
 8019c58:	68db      	ldr	r3, [r3, #12]
 8019c5a:	899b      	ldrh	r3, [r3, #12]
 8019c5c:	b29b      	uxth	r3, r3
 8019c5e:	4618      	mov	r0, r3
 8019c60:	f7f8 f876 	bl	8011d50 <lwip_htons>
 8019c64:	4603      	mov	r3, r0
 8019c66:	b2db      	uxtb	r3, r3
 8019c68:	f003 0303 	and.w	r3, r3, #3
 8019c6c:	2b00      	cmp	r3, #0
 8019c6e:	d001      	beq.n	8019c74 <tcp_receive+0x6c0>
 8019c70:	2301      	movs	r3, #1
 8019c72:	e000      	b.n	8019c76 <tcp_receive+0x6c2>
 8019c74:	2300      	movs	r3, #0
 8019c76:	4423      	add	r3, r4
 8019c78:	b29a      	uxth	r2, r3
 8019c7a:	4b71      	ldr	r3, [pc, #452]	; (8019e40 <tcp_receive+0x88c>)
 8019c7c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8019c7e:	687b      	ldr	r3, [r7, #4]
 8019c80:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019c82:	4b6f      	ldr	r3, [pc, #444]	; (8019e40 <tcp_receive+0x88c>)
 8019c84:	881b      	ldrh	r3, [r3, #0]
 8019c86:	429a      	cmp	r2, r3
 8019c88:	d275      	bcs.n	8019d76 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019c8a:	4b6c      	ldr	r3, [pc, #432]	; (8019e3c <tcp_receive+0x888>)
 8019c8c:	68db      	ldr	r3, [r3, #12]
 8019c8e:	899b      	ldrh	r3, [r3, #12]
 8019c90:	b29b      	uxth	r3, r3
 8019c92:	4618      	mov	r0, r3
 8019c94:	f7f8 f85c 	bl	8011d50 <lwip_htons>
 8019c98:	4603      	mov	r3, r0
 8019c9a:	b2db      	uxtb	r3, r3
 8019c9c:	f003 0301 	and.w	r3, r3, #1
 8019ca0:	2b00      	cmp	r3, #0
 8019ca2:	d01f      	beq.n	8019ce4 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8019ca4:	4b65      	ldr	r3, [pc, #404]	; (8019e3c <tcp_receive+0x888>)
 8019ca6:	68db      	ldr	r3, [r3, #12]
 8019ca8:	899b      	ldrh	r3, [r3, #12]
 8019caa:	b29b      	uxth	r3, r3
 8019cac:	b21b      	sxth	r3, r3
 8019cae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8019cb2:	b21c      	sxth	r4, r3
 8019cb4:	4b61      	ldr	r3, [pc, #388]	; (8019e3c <tcp_receive+0x888>)
 8019cb6:	68db      	ldr	r3, [r3, #12]
 8019cb8:	899b      	ldrh	r3, [r3, #12]
 8019cba:	b29b      	uxth	r3, r3
 8019cbc:	4618      	mov	r0, r3
 8019cbe:	f7f8 f847 	bl	8011d50 <lwip_htons>
 8019cc2:	4603      	mov	r3, r0
 8019cc4:	b2db      	uxtb	r3, r3
 8019cc6:	b29b      	uxth	r3, r3
 8019cc8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8019ccc:	b29b      	uxth	r3, r3
 8019cce:	4618      	mov	r0, r3
 8019cd0:	f7f8 f83e 	bl	8011d50 <lwip_htons>
 8019cd4:	4603      	mov	r3, r0
 8019cd6:	b21b      	sxth	r3, r3
 8019cd8:	4323      	orrs	r3, r4
 8019cda:	b21a      	sxth	r2, r3
 8019cdc:	4b57      	ldr	r3, [pc, #348]	; (8019e3c <tcp_receive+0x888>)
 8019cde:	68db      	ldr	r3, [r3, #12]
 8019ce0:	b292      	uxth	r2, r2
 8019ce2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8019ce4:	687b      	ldr	r3, [r7, #4]
 8019ce6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019ce8:	4b54      	ldr	r3, [pc, #336]	; (8019e3c <tcp_receive+0x888>)
 8019cea:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019cec:	4b53      	ldr	r3, [pc, #332]	; (8019e3c <tcp_receive+0x888>)
 8019cee:	68db      	ldr	r3, [r3, #12]
 8019cf0:	899b      	ldrh	r3, [r3, #12]
 8019cf2:	b29b      	uxth	r3, r3
 8019cf4:	4618      	mov	r0, r3
 8019cf6:	f7f8 f82b 	bl	8011d50 <lwip_htons>
 8019cfa:	4603      	mov	r3, r0
 8019cfc:	b2db      	uxtb	r3, r3
 8019cfe:	f003 0302 	and.w	r3, r3, #2
 8019d02:	2b00      	cmp	r3, #0
 8019d04:	d005      	beq.n	8019d12 <tcp_receive+0x75e>
            inseg.len -= 1;
 8019d06:	4b4d      	ldr	r3, [pc, #308]	; (8019e3c <tcp_receive+0x888>)
 8019d08:	891b      	ldrh	r3, [r3, #8]
 8019d0a:	3b01      	subs	r3, #1
 8019d0c:	b29a      	uxth	r2, r3
 8019d0e:	4b4b      	ldr	r3, [pc, #300]	; (8019e3c <tcp_receive+0x888>)
 8019d10:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8019d12:	4b4a      	ldr	r3, [pc, #296]	; (8019e3c <tcp_receive+0x888>)
 8019d14:	685b      	ldr	r3, [r3, #4]
 8019d16:	4a49      	ldr	r2, [pc, #292]	; (8019e3c <tcp_receive+0x888>)
 8019d18:	8912      	ldrh	r2, [r2, #8]
 8019d1a:	4611      	mov	r1, r2
 8019d1c:	4618      	mov	r0, r3
 8019d1e:	f7fb fd8d 	bl	801583c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8019d22:	4b46      	ldr	r3, [pc, #280]	; (8019e3c <tcp_receive+0x888>)
 8019d24:	891c      	ldrh	r4, [r3, #8]
 8019d26:	4b45      	ldr	r3, [pc, #276]	; (8019e3c <tcp_receive+0x888>)
 8019d28:	68db      	ldr	r3, [r3, #12]
 8019d2a:	899b      	ldrh	r3, [r3, #12]
 8019d2c:	b29b      	uxth	r3, r3
 8019d2e:	4618      	mov	r0, r3
 8019d30:	f7f8 f80e 	bl	8011d50 <lwip_htons>
 8019d34:	4603      	mov	r3, r0
 8019d36:	b2db      	uxtb	r3, r3
 8019d38:	f003 0303 	and.w	r3, r3, #3
 8019d3c:	2b00      	cmp	r3, #0
 8019d3e:	d001      	beq.n	8019d44 <tcp_receive+0x790>
 8019d40:	2301      	movs	r3, #1
 8019d42:	e000      	b.n	8019d46 <tcp_receive+0x792>
 8019d44:	2300      	movs	r3, #0
 8019d46:	4423      	add	r3, r4
 8019d48:	b29a      	uxth	r2, r3
 8019d4a:	4b3d      	ldr	r3, [pc, #244]	; (8019e40 <tcp_receive+0x88c>)
 8019d4c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019d4e:	4b3c      	ldr	r3, [pc, #240]	; (8019e40 <tcp_receive+0x88c>)
 8019d50:	881b      	ldrh	r3, [r3, #0]
 8019d52:	461a      	mov	r2, r3
 8019d54:	4b38      	ldr	r3, [pc, #224]	; (8019e38 <tcp_receive+0x884>)
 8019d56:	681b      	ldr	r3, [r3, #0]
 8019d58:	441a      	add	r2, r3
 8019d5a:	687b      	ldr	r3, [r7, #4]
 8019d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d5e:	6879      	ldr	r1, [r7, #4]
 8019d60:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019d62:	440b      	add	r3, r1
 8019d64:	429a      	cmp	r2, r3
 8019d66:	d006      	beq.n	8019d76 <tcp_receive+0x7c2>
 8019d68:	4b36      	ldr	r3, [pc, #216]	; (8019e44 <tcp_receive+0x890>)
 8019d6a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8019d6e:	4936      	ldr	r1, [pc, #216]	; (8019e48 <tcp_receive+0x894>)
 8019d70:	4836      	ldr	r0, [pc, #216]	; (8019e4c <tcp_receive+0x898>)
 8019d72:	f006 fefb 	bl	8020b6c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8019d76:	687b      	ldr	r3, [r7, #4]
 8019d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019d7a:	2b00      	cmp	r3, #0
 8019d7c:	f000 80e7 	beq.w	8019f4e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019d80:	4b2e      	ldr	r3, [pc, #184]	; (8019e3c <tcp_receive+0x888>)
 8019d82:	68db      	ldr	r3, [r3, #12]
 8019d84:	899b      	ldrh	r3, [r3, #12]
 8019d86:	b29b      	uxth	r3, r3
 8019d88:	4618      	mov	r0, r3
 8019d8a:	f7f7 ffe1 	bl	8011d50 <lwip_htons>
 8019d8e:	4603      	mov	r3, r0
 8019d90:	b2db      	uxtb	r3, r3
 8019d92:	f003 0301 	and.w	r3, r3, #1
 8019d96:	2b00      	cmp	r3, #0
 8019d98:	d010      	beq.n	8019dbc <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8019d9a:	e00a      	b.n	8019db2 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8019d9c:	687b      	ldr	r3, [r7, #4]
 8019d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019da0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8019da2:	687b      	ldr	r3, [r7, #4]
 8019da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019da6:	681a      	ldr	r2, [r3, #0]
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8019dac:	68f8      	ldr	r0, [r7, #12]
 8019dae:	f7fd fcc8 	bl	8017742 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8019db2:	687b      	ldr	r3, [r7, #4]
 8019db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019db6:	2b00      	cmp	r3, #0
 8019db8:	d1f0      	bne.n	8019d9c <tcp_receive+0x7e8>
 8019dba:	e0c8      	b.n	8019f4e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8019dc2:	e052      	b.n	8019e6a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8019dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019dc6:	68db      	ldr	r3, [r3, #12]
 8019dc8:	899b      	ldrh	r3, [r3, #12]
 8019dca:	b29b      	uxth	r3, r3
 8019dcc:	4618      	mov	r0, r3
 8019dce:	f7f7 ffbf 	bl	8011d50 <lwip_htons>
 8019dd2:	4603      	mov	r3, r0
 8019dd4:	b2db      	uxtb	r3, r3
 8019dd6:	f003 0301 	and.w	r3, r3, #1
 8019dda:	2b00      	cmp	r3, #0
 8019ddc:	d03d      	beq.n	8019e5a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8019dde:	4b17      	ldr	r3, [pc, #92]	; (8019e3c <tcp_receive+0x888>)
 8019de0:	68db      	ldr	r3, [r3, #12]
 8019de2:	899b      	ldrh	r3, [r3, #12]
 8019de4:	b29b      	uxth	r3, r3
 8019de6:	4618      	mov	r0, r3
 8019de8:	f7f7 ffb2 	bl	8011d50 <lwip_htons>
 8019dec:	4603      	mov	r3, r0
 8019dee:	b2db      	uxtb	r3, r3
 8019df0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8019df4:	2b00      	cmp	r3, #0
 8019df6:	d130      	bne.n	8019e5a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8019df8:	4b10      	ldr	r3, [pc, #64]	; (8019e3c <tcp_receive+0x888>)
 8019dfa:	68db      	ldr	r3, [r3, #12]
 8019dfc:	899b      	ldrh	r3, [r3, #12]
 8019dfe:	b29c      	uxth	r4, r3
 8019e00:	2001      	movs	r0, #1
 8019e02:	f7f7 ffa5 	bl	8011d50 <lwip_htons>
 8019e06:	4603      	mov	r3, r0
 8019e08:	461a      	mov	r2, r3
 8019e0a:	4b0c      	ldr	r3, [pc, #48]	; (8019e3c <tcp_receive+0x888>)
 8019e0c:	68db      	ldr	r3, [r3, #12]
 8019e0e:	4322      	orrs	r2, r4
 8019e10:	b292      	uxth	r2, r2
 8019e12:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8019e14:	4b09      	ldr	r3, [pc, #36]	; (8019e3c <tcp_receive+0x888>)
 8019e16:	891c      	ldrh	r4, [r3, #8]
 8019e18:	4b08      	ldr	r3, [pc, #32]	; (8019e3c <tcp_receive+0x888>)
 8019e1a:	68db      	ldr	r3, [r3, #12]
 8019e1c:	899b      	ldrh	r3, [r3, #12]
 8019e1e:	b29b      	uxth	r3, r3
 8019e20:	4618      	mov	r0, r3
 8019e22:	f7f7 ff95 	bl	8011d50 <lwip_htons>
 8019e26:	4603      	mov	r3, r0
 8019e28:	b2db      	uxtb	r3, r3
 8019e2a:	f003 0303 	and.w	r3, r3, #3
 8019e2e:	2b00      	cmp	r3, #0
 8019e30:	d00e      	beq.n	8019e50 <tcp_receive+0x89c>
 8019e32:	2301      	movs	r3, #1
 8019e34:	e00d      	b.n	8019e52 <tcp_receive+0x89e>
 8019e36:	bf00      	nop
 8019e38:	240057c4 	.word	0x240057c4
 8019e3c:	240057a4 	.word	0x240057a4
 8019e40:	240057ce 	.word	0x240057ce
 8019e44:	0802790c 	.word	0x0802790c
 8019e48:	08027ce0 	.word	0x08027ce0
 8019e4c:	08027984 	.word	0x08027984
 8019e50:	2300      	movs	r3, #0
 8019e52:	4423      	add	r3, r4
 8019e54:	b29a      	uxth	r2, r3
 8019e56:	4b98      	ldr	r3, [pc, #608]	; (801a0b8 <tcp_receive+0xb04>)
 8019e58:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8019e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019e5c:	613b      	str	r3, [r7, #16]
              next = next->next;
 8019e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019e60:	681b      	ldr	r3, [r3, #0]
 8019e62:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8019e64:	6938      	ldr	r0, [r7, #16]
 8019e66:	f7fd fc6c 	bl	8017742 <tcp_seg_free>
            while (next &&
 8019e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019e6c:	2b00      	cmp	r3, #0
 8019e6e:	d00e      	beq.n	8019e8e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8019e70:	4b91      	ldr	r3, [pc, #580]	; (801a0b8 <tcp_receive+0xb04>)
 8019e72:	881b      	ldrh	r3, [r3, #0]
 8019e74:	461a      	mov	r2, r3
 8019e76:	4b91      	ldr	r3, [pc, #580]	; (801a0bc <tcp_receive+0xb08>)
 8019e78:	681b      	ldr	r3, [r3, #0]
 8019e7a:	441a      	add	r2, r3
 8019e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019e7e:	68db      	ldr	r3, [r3, #12]
 8019e80:	685b      	ldr	r3, [r3, #4]
 8019e82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8019e84:	8909      	ldrh	r1, [r1, #8]
 8019e86:	440b      	add	r3, r1
 8019e88:	1ad3      	subs	r3, r2, r3
            while (next &&
 8019e8a:	2b00      	cmp	r3, #0
 8019e8c:	da9a      	bge.n	8019dc4 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8019e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019e90:	2b00      	cmp	r3, #0
 8019e92:	d059      	beq.n	8019f48 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8019e94:	4b88      	ldr	r3, [pc, #544]	; (801a0b8 <tcp_receive+0xb04>)
 8019e96:	881b      	ldrh	r3, [r3, #0]
 8019e98:	461a      	mov	r2, r3
 8019e9a:	4b88      	ldr	r3, [pc, #544]	; (801a0bc <tcp_receive+0xb08>)
 8019e9c:	681b      	ldr	r3, [r3, #0]
 8019e9e:	441a      	add	r2, r3
 8019ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019ea2:	68db      	ldr	r3, [r3, #12]
 8019ea4:	685b      	ldr	r3, [r3, #4]
 8019ea6:	1ad3      	subs	r3, r2, r3
            if (next &&
 8019ea8:	2b00      	cmp	r3, #0
 8019eaa:	dd4d      	ble.n	8019f48 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8019eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019eae:	68db      	ldr	r3, [r3, #12]
 8019eb0:	685b      	ldr	r3, [r3, #4]
 8019eb2:	b29a      	uxth	r2, r3
 8019eb4:	4b81      	ldr	r3, [pc, #516]	; (801a0bc <tcp_receive+0xb08>)
 8019eb6:	681b      	ldr	r3, [r3, #0]
 8019eb8:	b29b      	uxth	r3, r3
 8019eba:	1ad3      	subs	r3, r2, r3
 8019ebc:	b29a      	uxth	r2, r3
 8019ebe:	4b80      	ldr	r3, [pc, #512]	; (801a0c0 <tcp_receive+0xb0c>)
 8019ec0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019ec2:	4b7f      	ldr	r3, [pc, #508]	; (801a0c0 <tcp_receive+0xb0c>)
 8019ec4:	68db      	ldr	r3, [r3, #12]
 8019ec6:	899b      	ldrh	r3, [r3, #12]
 8019ec8:	b29b      	uxth	r3, r3
 8019eca:	4618      	mov	r0, r3
 8019ecc:	f7f7 ff40 	bl	8011d50 <lwip_htons>
 8019ed0:	4603      	mov	r3, r0
 8019ed2:	b2db      	uxtb	r3, r3
 8019ed4:	f003 0302 	and.w	r3, r3, #2
 8019ed8:	2b00      	cmp	r3, #0
 8019eda:	d005      	beq.n	8019ee8 <tcp_receive+0x934>
                inseg.len -= 1;
 8019edc:	4b78      	ldr	r3, [pc, #480]	; (801a0c0 <tcp_receive+0xb0c>)
 8019ede:	891b      	ldrh	r3, [r3, #8]
 8019ee0:	3b01      	subs	r3, #1
 8019ee2:	b29a      	uxth	r2, r3
 8019ee4:	4b76      	ldr	r3, [pc, #472]	; (801a0c0 <tcp_receive+0xb0c>)
 8019ee6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8019ee8:	4b75      	ldr	r3, [pc, #468]	; (801a0c0 <tcp_receive+0xb0c>)
 8019eea:	685b      	ldr	r3, [r3, #4]
 8019eec:	4a74      	ldr	r2, [pc, #464]	; (801a0c0 <tcp_receive+0xb0c>)
 8019eee:	8912      	ldrh	r2, [r2, #8]
 8019ef0:	4611      	mov	r1, r2
 8019ef2:	4618      	mov	r0, r3
 8019ef4:	f7fb fca2 	bl	801583c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8019ef8:	4b71      	ldr	r3, [pc, #452]	; (801a0c0 <tcp_receive+0xb0c>)
 8019efa:	891c      	ldrh	r4, [r3, #8]
 8019efc:	4b70      	ldr	r3, [pc, #448]	; (801a0c0 <tcp_receive+0xb0c>)
 8019efe:	68db      	ldr	r3, [r3, #12]
 8019f00:	899b      	ldrh	r3, [r3, #12]
 8019f02:	b29b      	uxth	r3, r3
 8019f04:	4618      	mov	r0, r3
 8019f06:	f7f7 ff23 	bl	8011d50 <lwip_htons>
 8019f0a:	4603      	mov	r3, r0
 8019f0c:	b2db      	uxtb	r3, r3
 8019f0e:	f003 0303 	and.w	r3, r3, #3
 8019f12:	2b00      	cmp	r3, #0
 8019f14:	d001      	beq.n	8019f1a <tcp_receive+0x966>
 8019f16:	2301      	movs	r3, #1
 8019f18:	e000      	b.n	8019f1c <tcp_receive+0x968>
 8019f1a:	2300      	movs	r3, #0
 8019f1c:	4423      	add	r3, r4
 8019f1e:	b29a      	uxth	r2, r3
 8019f20:	4b65      	ldr	r3, [pc, #404]	; (801a0b8 <tcp_receive+0xb04>)
 8019f22:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8019f24:	4b64      	ldr	r3, [pc, #400]	; (801a0b8 <tcp_receive+0xb04>)
 8019f26:	881b      	ldrh	r3, [r3, #0]
 8019f28:	461a      	mov	r2, r3
 8019f2a:	4b64      	ldr	r3, [pc, #400]	; (801a0bc <tcp_receive+0xb08>)
 8019f2c:	681b      	ldr	r3, [r3, #0]
 8019f2e:	441a      	add	r2, r3
 8019f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019f32:	68db      	ldr	r3, [r3, #12]
 8019f34:	685b      	ldr	r3, [r3, #4]
 8019f36:	429a      	cmp	r2, r3
 8019f38:	d006      	beq.n	8019f48 <tcp_receive+0x994>
 8019f3a:	4b62      	ldr	r3, [pc, #392]	; (801a0c4 <tcp_receive+0xb10>)
 8019f3c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8019f40:	4961      	ldr	r1, [pc, #388]	; (801a0c8 <tcp_receive+0xb14>)
 8019f42:	4862      	ldr	r0, [pc, #392]	; (801a0cc <tcp_receive+0xb18>)
 8019f44:	f006 fe12 	bl	8020b6c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8019f48:	687b      	ldr	r3, [r7, #4]
 8019f4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019f4c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8019f4e:	4b5a      	ldr	r3, [pc, #360]	; (801a0b8 <tcp_receive+0xb04>)
 8019f50:	881b      	ldrh	r3, [r3, #0]
 8019f52:	461a      	mov	r2, r3
 8019f54:	4b59      	ldr	r3, [pc, #356]	; (801a0bc <tcp_receive+0xb08>)
 8019f56:	681b      	ldr	r3, [r3, #0]
 8019f58:	441a      	add	r2, r3
 8019f5a:	687b      	ldr	r3, [r7, #4]
 8019f5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019f62:	4b55      	ldr	r3, [pc, #340]	; (801a0b8 <tcp_receive+0xb04>)
 8019f64:	881b      	ldrh	r3, [r3, #0]
 8019f66:	429a      	cmp	r2, r3
 8019f68:	d206      	bcs.n	8019f78 <tcp_receive+0x9c4>
 8019f6a:	4b56      	ldr	r3, [pc, #344]	; (801a0c4 <tcp_receive+0xb10>)
 8019f6c:	f240 6207 	movw	r2, #1543	; 0x607
 8019f70:	4957      	ldr	r1, [pc, #348]	; (801a0d0 <tcp_receive+0xb1c>)
 8019f72:	4856      	ldr	r0, [pc, #344]	; (801a0cc <tcp_receive+0xb18>)
 8019f74:	f006 fdfa 	bl	8020b6c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8019f78:	687b      	ldr	r3, [r7, #4]
 8019f7a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019f7c:	4b4e      	ldr	r3, [pc, #312]	; (801a0b8 <tcp_receive+0xb04>)
 8019f7e:	881b      	ldrh	r3, [r3, #0]
 8019f80:	1ad3      	subs	r3, r2, r3
 8019f82:	b29a      	uxth	r2, r3
 8019f84:	687b      	ldr	r3, [r7, #4]
 8019f86:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8019f88:	6878      	ldr	r0, [r7, #4]
 8019f8a:	f7fc fd9d 	bl	8016ac8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8019f8e:	4b4c      	ldr	r3, [pc, #304]	; (801a0c0 <tcp_receive+0xb0c>)
 8019f90:	685b      	ldr	r3, [r3, #4]
 8019f92:	891b      	ldrh	r3, [r3, #8]
 8019f94:	2b00      	cmp	r3, #0
 8019f96:	d006      	beq.n	8019fa6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8019f98:	4b49      	ldr	r3, [pc, #292]	; (801a0c0 <tcp_receive+0xb0c>)
 8019f9a:	685b      	ldr	r3, [r3, #4]
 8019f9c:	4a4d      	ldr	r2, [pc, #308]	; (801a0d4 <tcp_receive+0xb20>)
 8019f9e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8019fa0:	4b47      	ldr	r3, [pc, #284]	; (801a0c0 <tcp_receive+0xb0c>)
 8019fa2:	2200      	movs	r2, #0
 8019fa4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019fa6:	4b46      	ldr	r3, [pc, #280]	; (801a0c0 <tcp_receive+0xb0c>)
 8019fa8:	68db      	ldr	r3, [r3, #12]
 8019faa:	899b      	ldrh	r3, [r3, #12]
 8019fac:	b29b      	uxth	r3, r3
 8019fae:	4618      	mov	r0, r3
 8019fb0:	f7f7 fece 	bl	8011d50 <lwip_htons>
 8019fb4:	4603      	mov	r3, r0
 8019fb6:	b2db      	uxtb	r3, r3
 8019fb8:	f003 0301 	and.w	r3, r3, #1
 8019fbc:	2b00      	cmp	r3, #0
 8019fbe:	f000 80b8 	beq.w	801a132 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8019fc2:	4b45      	ldr	r3, [pc, #276]	; (801a0d8 <tcp_receive+0xb24>)
 8019fc4:	781b      	ldrb	r3, [r3, #0]
 8019fc6:	f043 0320 	orr.w	r3, r3, #32
 8019fca:	b2da      	uxtb	r2, r3
 8019fcc:	4b42      	ldr	r3, [pc, #264]	; (801a0d8 <tcp_receive+0xb24>)
 8019fce:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8019fd0:	e0af      	b.n	801a132 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8019fd2:	687b      	ldr	r3, [r7, #4]
 8019fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019fd6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019fdc:	68db      	ldr	r3, [r3, #12]
 8019fde:	685b      	ldr	r3, [r3, #4]
 8019fe0:	4a36      	ldr	r2, [pc, #216]	; (801a0bc <tcp_receive+0xb08>)
 8019fe2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8019fe4:	68bb      	ldr	r3, [r7, #8]
 8019fe6:	891b      	ldrh	r3, [r3, #8]
 8019fe8:	461c      	mov	r4, r3
 8019fea:	68bb      	ldr	r3, [r7, #8]
 8019fec:	68db      	ldr	r3, [r3, #12]
 8019fee:	899b      	ldrh	r3, [r3, #12]
 8019ff0:	b29b      	uxth	r3, r3
 8019ff2:	4618      	mov	r0, r3
 8019ff4:	f7f7 feac 	bl	8011d50 <lwip_htons>
 8019ff8:	4603      	mov	r3, r0
 8019ffa:	b2db      	uxtb	r3, r3
 8019ffc:	f003 0303 	and.w	r3, r3, #3
 801a000:	2b00      	cmp	r3, #0
 801a002:	d001      	beq.n	801a008 <tcp_receive+0xa54>
 801a004:	2301      	movs	r3, #1
 801a006:	e000      	b.n	801a00a <tcp_receive+0xa56>
 801a008:	2300      	movs	r3, #0
 801a00a:	191a      	adds	r2, r3, r4
 801a00c:	687b      	ldr	r3, [r7, #4]
 801a00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a010:	441a      	add	r2, r3
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a01a:	461c      	mov	r4, r3
 801a01c:	68bb      	ldr	r3, [r7, #8]
 801a01e:	891b      	ldrh	r3, [r3, #8]
 801a020:	461d      	mov	r5, r3
 801a022:	68bb      	ldr	r3, [r7, #8]
 801a024:	68db      	ldr	r3, [r3, #12]
 801a026:	899b      	ldrh	r3, [r3, #12]
 801a028:	b29b      	uxth	r3, r3
 801a02a:	4618      	mov	r0, r3
 801a02c:	f7f7 fe90 	bl	8011d50 <lwip_htons>
 801a030:	4603      	mov	r3, r0
 801a032:	b2db      	uxtb	r3, r3
 801a034:	f003 0303 	and.w	r3, r3, #3
 801a038:	2b00      	cmp	r3, #0
 801a03a:	d001      	beq.n	801a040 <tcp_receive+0xa8c>
 801a03c:	2301      	movs	r3, #1
 801a03e:	e000      	b.n	801a042 <tcp_receive+0xa8e>
 801a040:	2300      	movs	r3, #0
 801a042:	442b      	add	r3, r5
 801a044:	429c      	cmp	r4, r3
 801a046:	d206      	bcs.n	801a056 <tcp_receive+0xaa2>
 801a048:	4b1e      	ldr	r3, [pc, #120]	; (801a0c4 <tcp_receive+0xb10>)
 801a04a:	f240 622b 	movw	r2, #1579	; 0x62b
 801a04e:	4923      	ldr	r1, [pc, #140]	; (801a0dc <tcp_receive+0xb28>)
 801a050:	481e      	ldr	r0, [pc, #120]	; (801a0cc <tcp_receive+0xb18>)
 801a052:	f006 fd8b 	bl	8020b6c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801a056:	68bb      	ldr	r3, [r7, #8]
 801a058:	891b      	ldrh	r3, [r3, #8]
 801a05a:	461c      	mov	r4, r3
 801a05c:	68bb      	ldr	r3, [r7, #8]
 801a05e:	68db      	ldr	r3, [r3, #12]
 801a060:	899b      	ldrh	r3, [r3, #12]
 801a062:	b29b      	uxth	r3, r3
 801a064:	4618      	mov	r0, r3
 801a066:	f7f7 fe73 	bl	8011d50 <lwip_htons>
 801a06a:	4603      	mov	r3, r0
 801a06c:	b2db      	uxtb	r3, r3
 801a06e:	f003 0303 	and.w	r3, r3, #3
 801a072:	2b00      	cmp	r3, #0
 801a074:	d001      	beq.n	801a07a <tcp_receive+0xac6>
 801a076:	2301      	movs	r3, #1
 801a078:	e000      	b.n	801a07c <tcp_receive+0xac8>
 801a07a:	2300      	movs	r3, #0
 801a07c:	1919      	adds	r1, r3, r4
 801a07e:	687b      	ldr	r3, [r7, #4]
 801a080:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801a082:	b28b      	uxth	r3, r1
 801a084:	1ad3      	subs	r3, r2, r3
 801a086:	b29a      	uxth	r2, r3
 801a088:	687b      	ldr	r3, [r7, #4]
 801a08a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801a08c:	6878      	ldr	r0, [r7, #4]
 801a08e:	f7fc fd1b 	bl	8016ac8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801a092:	68bb      	ldr	r3, [r7, #8]
 801a094:	685b      	ldr	r3, [r3, #4]
 801a096:	891b      	ldrh	r3, [r3, #8]
 801a098:	2b00      	cmp	r3, #0
 801a09a:	d028      	beq.n	801a0ee <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801a09c:	4b0d      	ldr	r3, [pc, #52]	; (801a0d4 <tcp_receive+0xb20>)
 801a09e:	681b      	ldr	r3, [r3, #0]
 801a0a0:	2b00      	cmp	r3, #0
 801a0a2:	d01d      	beq.n	801a0e0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801a0a4:	4b0b      	ldr	r3, [pc, #44]	; (801a0d4 <tcp_receive+0xb20>)
 801a0a6:	681a      	ldr	r2, [r3, #0]
 801a0a8:	68bb      	ldr	r3, [r7, #8]
 801a0aa:	685b      	ldr	r3, [r3, #4]
 801a0ac:	4619      	mov	r1, r3
 801a0ae:	4610      	mov	r0, r2
 801a0b0:	f7fb fe0c 	bl	8015ccc <pbuf_cat>
 801a0b4:	e018      	b.n	801a0e8 <tcp_receive+0xb34>
 801a0b6:	bf00      	nop
 801a0b8:	240057ce 	.word	0x240057ce
 801a0bc:	240057c4 	.word	0x240057c4
 801a0c0:	240057a4 	.word	0x240057a4
 801a0c4:	0802790c 	.word	0x0802790c
 801a0c8:	08027d18 	.word	0x08027d18
 801a0cc:	08027984 	.word	0x08027984
 801a0d0:	08027d54 	.word	0x08027d54
 801a0d4:	240057d4 	.word	0x240057d4
 801a0d8:	240057d1 	.word	0x240057d1
 801a0dc:	08027d74 	.word	0x08027d74
            } else {
              recv_data = cseg->p;
 801a0e0:	68bb      	ldr	r3, [r7, #8]
 801a0e2:	685b      	ldr	r3, [r3, #4]
 801a0e4:	4a70      	ldr	r2, [pc, #448]	; (801a2a8 <tcp_receive+0xcf4>)
 801a0e6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801a0e8:	68bb      	ldr	r3, [r7, #8]
 801a0ea:	2200      	movs	r2, #0
 801a0ec:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801a0ee:	68bb      	ldr	r3, [r7, #8]
 801a0f0:	68db      	ldr	r3, [r3, #12]
 801a0f2:	899b      	ldrh	r3, [r3, #12]
 801a0f4:	b29b      	uxth	r3, r3
 801a0f6:	4618      	mov	r0, r3
 801a0f8:	f7f7 fe2a 	bl	8011d50 <lwip_htons>
 801a0fc:	4603      	mov	r3, r0
 801a0fe:	b2db      	uxtb	r3, r3
 801a100:	f003 0301 	and.w	r3, r3, #1
 801a104:	2b00      	cmp	r3, #0
 801a106:	d00d      	beq.n	801a124 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801a108:	4b68      	ldr	r3, [pc, #416]	; (801a2ac <tcp_receive+0xcf8>)
 801a10a:	781b      	ldrb	r3, [r3, #0]
 801a10c:	f043 0320 	orr.w	r3, r3, #32
 801a110:	b2da      	uxtb	r2, r3
 801a112:	4b66      	ldr	r3, [pc, #408]	; (801a2ac <tcp_receive+0xcf8>)
 801a114:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801a116:	687b      	ldr	r3, [r7, #4]
 801a118:	7d1b      	ldrb	r3, [r3, #20]
 801a11a:	2b04      	cmp	r3, #4
 801a11c:	d102      	bne.n	801a124 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	2207      	movs	r2, #7
 801a122:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801a124:	68bb      	ldr	r3, [r7, #8]
 801a126:	681a      	ldr	r2, [r3, #0]
 801a128:	687b      	ldr	r3, [r7, #4]
 801a12a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801a12c:	68b8      	ldr	r0, [r7, #8]
 801a12e:	f7fd fb08 	bl	8017742 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801a132:	687b      	ldr	r3, [r7, #4]
 801a134:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a136:	2b00      	cmp	r3, #0
 801a138:	d008      	beq.n	801a14c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801a13a:	687b      	ldr	r3, [r7, #4]
 801a13c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a13e:	68db      	ldr	r3, [r3, #12]
 801a140:	685a      	ldr	r2, [r3, #4]
 801a142:	687b      	ldr	r3, [r7, #4]
 801a144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801a146:	429a      	cmp	r2, r3
 801a148:	f43f af43 	beq.w	8019fd2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801a14c:	687b      	ldr	r3, [r7, #4]
 801a14e:	8b5b      	ldrh	r3, [r3, #26]
 801a150:	f003 0301 	and.w	r3, r3, #1
 801a154:	2b00      	cmp	r3, #0
 801a156:	d00e      	beq.n	801a176 <tcp_receive+0xbc2>
 801a158:	687b      	ldr	r3, [r7, #4]
 801a15a:	8b5b      	ldrh	r3, [r3, #26]
 801a15c:	f023 0301 	bic.w	r3, r3, #1
 801a160:	b29a      	uxth	r2, r3
 801a162:	687b      	ldr	r3, [r7, #4]
 801a164:	835a      	strh	r2, [r3, #26]
 801a166:	687b      	ldr	r3, [r7, #4]
 801a168:	8b5b      	ldrh	r3, [r3, #26]
 801a16a:	f043 0302 	orr.w	r3, r3, #2
 801a16e:	b29a      	uxth	r2, r3
 801a170:	687b      	ldr	r3, [r7, #4]
 801a172:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801a174:	e188      	b.n	801a488 <tcp_receive+0xed4>
        tcp_ack(pcb);
 801a176:	687b      	ldr	r3, [r7, #4]
 801a178:	8b5b      	ldrh	r3, [r3, #26]
 801a17a:	f043 0301 	orr.w	r3, r3, #1
 801a17e:	b29a      	uxth	r2, r3
 801a180:	687b      	ldr	r3, [r7, #4]
 801a182:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801a184:	e180      	b.n	801a488 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801a186:	687b      	ldr	r3, [r7, #4]
 801a188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a18a:	2b00      	cmp	r3, #0
 801a18c:	d106      	bne.n	801a19c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801a18e:	4848      	ldr	r0, [pc, #288]	; (801a2b0 <tcp_receive+0xcfc>)
 801a190:	f7fd faf0 	bl	8017774 <tcp_seg_copy>
 801a194:	4602      	mov	r2, r0
 801a196:	687b      	ldr	r3, [r7, #4]
 801a198:	675a      	str	r2, [r3, #116]	; 0x74
 801a19a:	e16d      	b.n	801a478 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801a19c:	2300      	movs	r3, #0
 801a19e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801a1a0:	687b      	ldr	r3, [r7, #4]
 801a1a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a1a4:	63bb      	str	r3, [r7, #56]	; 0x38
 801a1a6:	e157      	b.n	801a458 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 801a1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a1aa:	68db      	ldr	r3, [r3, #12]
 801a1ac:	685a      	ldr	r2, [r3, #4]
 801a1ae:	4b41      	ldr	r3, [pc, #260]	; (801a2b4 <tcp_receive+0xd00>)
 801a1b0:	681b      	ldr	r3, [r3, #0]
 801a1b2:	429a      	cmp	r2, r3
 801a1b4:	d11d      	bne.n	801a1f2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801a1b6:	4b3e      	ldr	r3, [pc, #248]	; (801a2b0 <tcp_receive+0xcfc>)
 801a1b8:	891a      	ldrh	r2, [r3, #8]
 801a1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a1bc:	891b      	ldrh	r3, [r3, #8]
 801a1be:	429a      	cmp	r2, r3
 801a1c0:	f240 814f 	bls.w	801a462 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801a1c4:	483a      	ldr	r0, [pc, #232]	; (801a2b0 <tcp_receive+0xcfc>)
 801a1c6:	f7fd fad5 	bl	8017774 <tcp_seg_copy>
 801a1ca:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801a1cc:	697b      	ldr	r3, [r7, #20]
 801a1ce:	2b00      	cmp	r3, #0
 801a1d0:	f000 8149 	beq.w	801a466 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 801a1d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a1d6:	2b00      	cmp	r3, #0
 801a1d8:	d003      	beq.n	801a1e2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801a1da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a1dc:	697a      	ldr	r2, [r7, #20]
 801a1de:	601a      	str	r2, [r3, #0]
 801a1e0:	e002      	b.n	801a1e8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801a1e2:	687b      	ldr	r3, [r7, #4]
 801a1e4:	697a      	ldr	r2, [r7, #20]
 801a1e6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801a1e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801a1ea:	6978      	ldr	r0, [r7, #20]
 801a1ec:	f7ff f8de 	bl	80193ac <tcp_oos_insert_segment>
                }
                break;
 801a1f0:	e139      	b.n	801a466 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801a1f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a1f4:	2b00      	cmp	r3, #0
 801a1f6:	d117      	bne.n	801a228 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801a1f8:	4b2e      	ldr	r3, [pc, #184]	; (801a2b4 <tcp_receive+0xd00>)
 801a1fa:	681a      	ldr	r2, [r3, #0]
 801a1fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a1fe:	68db      	ldr	r3, [r3, #12]
 801a200:	685b      	ldr	r3, [r3, #4]
 801a202:	1ad3      	subs	r3, r2, r3
 801a204:	2b00      	cmp	r3, #0
 801a206:	da57      	bge.n	801a2b8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801a208:	4829      	ldr	r0, [pc, #164]	; (801a2b0 <tcp_receive+0xcfc>)
 801a20a:	f7fd fab3 	bl	8017774 <tcp_seg_copy>
 801a20e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801a210:	69bb      	ldr	r3, [r7, #24]
 801a212:	2b00      	cmp	r3, #0
 801a214:	f000 8129 	beq.w	801a46a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 801a218:	687b      	ldr	r3, [r7, #4]
 801a21a:	69ba      	ldr	r2, [r7, #24]
 801a21c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801a21e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801a220:	69b8      	ldr	r0, [r7, #24]
 801a222:	f7ff f8c3 	bl	80193ac <tcp_oos_insert_segment>
                  }
                  break;
 801a226:	e120      	b.n	801a46a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801a228:	4b22      	ldr	r3, [pc, #136]	; (801a2b4 <tcp_receive+0xd00>)
 801a22a:	681a      	ldr	r2, [r3, #0]
 801a22c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a22e:	68db      	ldr	r3, [r3, #12]
 801a230:	685b      	ldr	r3, [r3, #4]
 801a232:	1ad3      	subs	r3, r2, r3
 801a234:	3b01      	subs	r3, #1
 801a236:	2b00      	cmp	r3, #0
 801a238:	db3e      	blt.n	801a2b8 <tcp_receive+0xd04>
 801a23a:	4b1e      	ldr	r3, [pc, #120]	; (801a2b4 <tcp_receive+0xd00>)
 801a23c:	681a      	ldr	r2, [r3, #0]
 801a23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a240:	68db      	ldr	r3, [r3, #12]
 801a242:	685b      	ldr	r3, [r3, #4]
 801a244:	1ad3      	subs	r3, r2, r3
 801a246:	3301      	adds	r3, #1
 801a248:	2b00      	cmp	r3, #0
 801a24a:	dc35      	bgt.n	801a2b8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801a24c:	4818      	ldr	r0, [pc, #96]	; (801a2b0 <tcp_receive+0xcfc>)
 801a24e:	f7fd fa91 	bl	8017774 <tcp_seg_copy>
 801a252:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801a254:	69fb      	ldr	r3, [r7, #28]
 801a256:	2b00      	cmp	r3, #0
 801a258:	f000 8109 	beq.w	801a46e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801a25c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a25e:	68db      	ldr	r3, [r3, #12]
 801a260:	685b      	ldr	r3, [r3, #4]
 801a262:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a264:	8912      	ldrh	r2, [r2, #8]
 801a266:	441a      	add	r2, r3
 801a268:	4b12      	ldr	r3, [pc, #72]	; (801a2b4 <tcp_receive+0xd00>)
 801a26a:	681b      	ldr	r3, [r3, #0]
 801a26c:	1ad3      	subs	r3, r2, r3
 801a26e:	2b00      	cmp	r3, #0
 801a270:	dd12      	ble.n	801a298 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801a272:	4b10      	ldr	r3, [pc, #64]	; (801a2b4 <tcp_receive+0xd00>)
 801a274:	681b      	ldr	r3, [r3, #0]
 801a276:	b29a      	uxth	r2, r3
 801a278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a27a:	68db      	ldr	r3, [r3, #12]
 801a27c:	685b      	ldr	r3, [r3, #4]
 801a27e:	b29b      	uxth	r3, r3
 801a280:	1ad3      	subs	r3, r2, r3
 801a282:	b29a      	uxth	r2, r3
 801a284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a286:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801a288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a28a:	685a      	ldr	r2, [r3, #4]
 801a28c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a28e:	891b      	ldrh	r3, [r3, #8]
 801a290:	4619      	mov	r1, r3
 801a292:	4610      	mov	r0, r2
 801a294:	f7fb fad2 	bl	801583c <pbuf_realloc>
                    }
                    prev->next = cseg;
 801a298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a29a:	69fa      	ldr	r2, [r7, #28]
 801a29c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801a29e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801a2a0:	69f8      	ldr	r0, [r7, #28]
 801a2a2:	f7ff f883 	bl	80193ac <tcp_oos_insert_segment>
                  }
                  break;
 801a2a6:	e0e2      	b.n	801a46e <tcp_receive+0xeba>
 801a2a8:	240057d4 	.word	0x240057d4
 801a2ac:	240057d1 	.word	0x240057d1
 801a2b0:	240057a4 	.word	0x240057a4
 801a2b4:	240057c4 	.word	0x240057c4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801a2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a2ba:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801a2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a2be:	681b      	ldr	r3, [r3, #0]
 801a2c0:	2b00      	cmp	r3, #0
 801a2c2:	f040 80c6 	bne.w	801a452 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801a2c6:	4b80      	ldr	r3, [pc, #512]	; (801a4c8 <tcp_receive+0xf14>)
 801a2c8:	681a      	ldr	r2, [r3, #0]
 801a2ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a2cc:	68db      	ldr	r3, [r3, #12]
 801a2ce:	685b      	ldr	r3, [r3, #4]
 801a2d0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801a2d2:	2b00      	cmp	r3, #0
 801a2d4:	f340 80bd 	ble.w	801a452 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801a2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a2da:	68db      	ldr	r3, [r3, #12]
 801a2dc:	899b      	ldrh	r3, [r3, #12]
 801a2de:	b29b      	uxth	r3, r3
 801a2e0:	4618      	mov	r0, r3
 801a2e2:	f7f7 fd35 	bl	8011d50 <lwip_htons>
 801a2e6:	4603      	mov	r3, r0
 801a2e8:	b2db      	uxtb	r3, r3
 801a2ea:	f003 0301 	and.w	r3, r3, #1
 801a2ee:	2b00      	cmp	r3, #0
 801a2f0:	f040 80bf 	bne.w	801a472 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801a2f4:	4875      	ldr	r0, [pc, #468]	; (801a4cc <tcp_receive+0xf18>)
 801a2f6:	f7fd fa3d 	bl	8017774 <tcp_seg_copy>
 801a2fa:	4602      	mov	r2, r0
 801a2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a2fe:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801a300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a302:	681b      	ldr	r3, [r3, #0]
 801a304:	2b00      	cmp	r3, #0
 801a306:	f000 80b6 	beq.w	801a476 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801a30a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a30c:	68db      	ldr	r3, [r3, #12]
 801a30e:	685b      	ldr	r3, [r3, #4]
 801a310:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a312:	8912      	ldrh	r2, [r2, #8]
 801a314:	441a      	add	r2, r3
 801a316:	4b6c      	ldr	r3, [pc, #432]	; (801a4c8 <tcp_receive+0xf14>)
 801a318:	681b      	ldr	r3, [r3, #0]
 801a31a:	1ad3      	subs	r3, r2, r3
 801a31c:	2b00      	cmp	r3, #0
 801a31e:	dd12      	ble.n	801a346 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801a320:	4b69      	ldr	r3, [pc, #420]	; (801a4c8 <tcp_receive+0xf14>)
 801a322:	681b      	ldr	r3, [r3, #0]
 801a324:	b29a      	uxth	r2, r3
 801a326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a328:	68db      	ldr	r3, [r3, #12]
 801a32a:	685b      	ldr	r3, [r3, #4]
 801a32c:	b29b      	uxth	r3, r3
 801a32e:	1ad3      	subs	r3, r2, r3
 801a330:	b29a      	uxth	r2, r3
 801a332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a334:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801a336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a338:	685a      	ldr	r2, [r3, #4]
 801a33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a33c:	891b      	ldrh	r3, [r3, #8]
 801a33e:	4619      	mov	r1, r3
 801a340:	4610      	mov	r0, r2
 801a342:	f7fb fa7b 	bl	801583c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801a346:	4b62      	ldr	r3, [pc, #392]	; (801a4d0 <tcp_receive+0xf1c>)
 801a348:	881b      	ldrh	r3, [r3, #0]
 801a34a:	461a      	mov	r2, r3
 801a34c:	4b5e      	ldr	r3, [pc, #376]	; (801a4c8 <tcp_receive+0xf14>)
 801a34e:	681b      	ldr	r3, [r3, #0]
 801a350:	441a      	add	r2, r3
 801a352:	687b      	ldr	r3, [r7, #4]
 801a354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a356:	6879      	ldr	r1, [r7, #4]
 801a358:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a35a:	440b      	add	r3, r1
 801a35c:	1ad3      	subs	r3, r2, r3
 801a35e:	2b00      	cmp	r3, #0
 801a360:	f340 8089 	ble.w	801a476 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801a364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a366:	681b      	ldr	r3, [r3, #0]
 801a368:	68db      	ldr	r3, [r3, #12]
 801a36a:	899b      	ldrh	r3, [r3, #12]
 801a36c:	b29b      	uxth	r3, r3
 801a36e:	4618      	mov	r0, r3
 801a370:	f7f7 fcee 	bl	8011d50 <lwip_htons>
 801a374:	4603      	mov	r3, r0
 801a376:	b2db      	uxtb	r3, r3
 801a378:	f003 0301 	and.w	r3, r3, #1
 801a37c:	2b00      	cmp	r3, #0
 801a37e:	d022      	beq.n	801a3c6 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801a380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a382:	681b      	ldr	r3, [r3, #0]
 801a384:	68db      	ldr	r3, [r3, #12]
 801a386:	899b      	ldrh	r3, [r3, #12]
 801a388:	b29b      	uxth	r3, r3
 801a38a:	b21b      	sxth	r3, r3
 801a38c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801a390:	b21c      	sxth	r4, r3
 801a392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a394:	681b      	ldr	r3, [r3, #0]
 801a396:	68db      	ldr	r3, [r3, #12]
 801a398:	899b      	ldrh	r3, [r3, #12]
 801a39a:	b29b      	uxth	r3, r3
 801a39c:	4618      	mov	r0, r3
 801a39e:	f7f7 fcd7 	bl	8011d50 <lwip_htons>
 801a3a2:	4603      	mov	r3, r0
 801a3a4:	b2db      	uxtb	r3, r3
 801a3a6:	b29b      	uxth	r3, r3
 801a3a8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801a3ac:	b29b      	uxth	r3, r3
 801a3ae:	4618      	mov	r0, r3
 801a3b0:	f7f7 fcce 	bl	8011d50 <lwip_htons>
 801a3b4:	4603      	mov	r3, r0
 801a3b6:	b21b      	sxth	r3, r3
 801a3b8:	4323      	orrs	r3, r4
 801a3ba:	b21a      	sxth	r2, r3
 801a3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a3be:	681b      	ldr	r3, [r3, #0]
 801a3c0:	68db      	ldr	r3, [r3, #12]
 801a3c2:	b292      	uxth	r2, r2
 801a3c4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801a3c6:	687b      	ldr	r3, [r7, #4]
 801a3c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a3ca:	b29a      	uxth	r2, r3
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a3d0:	4413      	add	r3, r2
 801a3d2:	b299      	uxth	r1, r3
 801a3d4:	4b3c      	ldr	r3, [pc, #240]	; (801a4c8 <tcp_receive+0xf14>)
 801a3d6:	681b      	ldr	r3, [r3, #0]
 801a3d8:	b29a      	uxth	r2, r3
 801a3da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a3dc:	681b      	ldr	r3, [r3, #0]
 801a3de:	1a8a      	subs	r2, r1, r2
 801a3e0:	b292      	uxth	r2, r2
 801a3e2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801a3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a3e6:	681b      	ldr	r3, [r3, #0]
 801a3e8:	685a      	ldr	r2, [r3, #4]
 801a3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a3ec:	681b      	ldr	r3, [r3, #0]
 801a3ee:	891b      	ldrh	r3, [r3, #8]
 801a3f0:	4619      	mov	r1, r3
 801a3f2:	4610      	mov	r0, r2
 801a3f4:	f7fb fa22 	bl	801583c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801a3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a3fa:	681b      	ldr	r3, [r3, #0]
 801a3fc:	891c      	ldrh	r4, [r3, #8]
 801a3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a400:	681b      	ldr	r3, [r3, #0]
 801a402:	68db      	ldr	r3, [r3, #12]
 801a404:	899b      	ldrh	r3, [r3, #12]
 801a406:	b29b      	uxth	r3, r3
 801a408:	4618      	mov	r0, r3
 801a40a:	f7f7 fca1 	bl	8011d50 <lwip_htons>
 801a40e:	4603      	mov	r3, r0
 801a410:	b2db      	uxtb	r3, r3
 801a412:	f003 0303 	and.w	r3, r3, #3
 801a416:	2b00      	cmp	r3, #0
 801a418:	d001      	beq.n	801a41e <tcp_receive+0xe6a>
 801a41a:	2301      	movs	r3, #1
 801a41c:	e000      	b.n	801a420 <tcp_receive+0xe6c>
 801a41e:	2300      	movs	r3, #0
 801a420:	4423      	add	r3, r4
 801a422:	b29a      	uxth	r2, r3
 801a424:	4b2a      	ldr	r3, [pc, #168]	; (801a4d0 <tcp_receive+0xf1c>)
 801a426:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801a428:	4b29      	ldr	r3, [pc, #164]	; (801a4d0 <tcp_receive+0xf1c>)
 801a42a:	881b      	ldrh	r3, [r3, #0]
 801a42c:	461a      	mov	r2, r3
 801a42e:	4b26      	ldr	r3, [pc, #152]	; (801a4c8 <tcp_receive+0xf14>)
 801a430:	681b      	ldr	r3, [r3, #0]
 801a432:	441a      	add	r2, r3
 801a434:	687b      	ldr	r3, [r7, #4]
 801a436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a438:	6879      	ldr	r1, [r7, #4]
 801a43a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a43c:	440b      	add	r3, r1
 801a43e:	429a      	cmp	r2, r3
 801a440:	d019      	beq.n	801a476 <tcp_receive+0xec2>
 801a442:	4b24      	ldr	r3, [pc, #144]	; (801a4d4 <tcp_receive+0xf20>)
 801a444:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801a448:	4923      	ldr	r1, [pc, #140]	; (801a4d8 <tcp_receive+0xf24>)
 801a44a:	4824      	ldr	r0, [pc, #144]	; (801a4dc <tcp_receive+0xf28>)
 801a44c:	f006 fb8e 	bl	8020b6c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801a450:	e011      	b.n	801a476 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801a452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a454:	681b      	ldr	r3, [r3, #0]
 801a456:	63bb      	str	r3, [r7, #56]	; 0x38
 801a458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a45a:	2b00      	cmp	r3, #0
 801a45c:	f47f aea4 	bne.w	801a1a8 <tcp_receive+0xbf4>
 801a460:	e00a      	b.n	801a478 <tcp_receive+0xec4>
                break;
 801a462:	bf00      	nop
 801a464:	e008      	b.n	801a478 <tcp_receive+0xec4>
                break;
 801a466:	bf00      	nop
 801a468:	e006      	b.n	801a478 <tcp_receive+0xec4>
                  break;
 801a46a:	bf00      	nop
 801a46c:	e004      	b.n	801a478 <tcp_receive+0xec4>
                  break;
 801a46e:	bf00      	nop
 801a470:	e002      	b.n	801a478 <tcp_receive+0xec4>
                  break;
 801a472:	bf00      	nop
 801a474:	e000      	b.n	801a478 <tcp_receive+0xec4>
                break;
 801a476:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801a478:	6878      	ldr	r0, [r7, #4]
 801a47a:	f001 fe8b 	bl	801c194 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801a47e:	e003      	b.n	801a488 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801a480:	6878      	ldr	r0, [r7, #4]
 801a482:	f001 fe87 	bl	801c194 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801a486:	e01a      	b.n	801a4be <tcp_receive+0xf0a>
 801a488:	e019      	b.n	801a4be <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801a48a:	4b0f      	ldr	r3, [pc, #60]	; (801a4c8 <tcp_receive+0xf14>)
 801a48c:	681a      	ldr	r2, [r3, #0]
 801a48e:	687b      	ldr	r3, [r7, #4]
 801a490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a492:	1ad3      	subs	r3, r2, r3
 801a494:	2b00      	cmp	r3, #0
 801a496:	db0a      	blt.n	801a4ae <tcp_receive+0xefa>
 801a498:	4b0b      	ldr	r3, [pc, #44]	; (801a4c8 <tcp_receive+0xf14>)
 801a49a:	681a      	ldr	r2, [r3, #0]
 801a49c:	687b      	ldr	r3, [r7, #4]
 801a49e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4a0:	6879      	ldr	r1, [r7, #4]
 801a4a2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a4a4:	440b      	add	r3, r1
 801a4a6:	1ad3      	subs	r3, r2, r3
 801a4a8:	3301      	adds	r3, #1
 801a4aa:	2b00      	cmp	r3, #0
 801a4ac:	dd07      	ble.n	801a4be <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801a4ae:	687b      	ldr	r3, [r7, #4]
 801a4b0:	8b5b      	ldrh	r3, [r3, #26]
 801a4b2:	f043 0302 	orr.w	r3, r3, #2
 801a4b6:	b29a      	uxth	r2, r3
 801a4b8:	687b      	ldr	r3, [r7, #4]
 801a4ba:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801a4bc:	e7ff      	b.n	801a4be <tcp_receive+0xf0a>
 801a4be:	bf00      	nop
 801a4c0:	3750      	adds	r7, #80	; 0x50
 801a4c2:	46bd      	mov	sp, r7
 801a4c4:	bdb0      	pop	{r4, r5, r7, pc}
 801a4c6:	bf00      	nop
 801a4c8:	240057c4 	.word	0x240057c4
 801a4cc:	240057a4 	.word	0x240057a4
 801a4d0:	240057ce 	.word	0x240057ce
 801a4d4:	0802790c 	.word	0x0802790c
 801a4d8:	08027ce0 	.word	0x08027ce0
 801a4dc:	08027984 	.word	0x08027984

0801a4e0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801a4e0:	b480      	push	{r7}
 801a4e2:	b083      	sub	sp, #12
 801a4e4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801a4e6:	4b15      	ldr	r3, [pc, #84]	; (801a53c <tcp_get_next_optbyte+0x5c>)
 801a4e8:	881b      	ldrh	r3, [r3, #0]
 801a4ea:	1c5a      	adds	r2, r3, #1
 801a4ec:	b291      	uxth	r1, r2
 801a4ee:	4a13      	ldr	r2, [pc, #76]	; (801a53c <tcp_get_next_optbyte+0x5c>)
 801a4f0:	8011      	strh	r1, [r2, #0]
 801a4f2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801a4f4:	4b12      	ldr	r3, [pc, #72]	; (801a540 <tcp_get_next_optbyte+0x60>)
 801a4f6:	681b      	ldr	r3, [r3, #0]
 801a4f8:	2b00      	cmp	r3, #0
 801a4fa:	d004      	beq.n	801a506 <tcp_get_next_optbyte+0x26>
 801a4fc:	4b11      	ldr	r3, [pc, #68]	; (801a544 <tcp_get_next_optbyte+0x64>)
 801a4fe:	881b      	ldrh	r3, [r3, #0]
 801a500:	88fa      	ldrh	r2, [r7, #6]
 801a502:	429a      	cmp	r2, r3
 801a504:	d208      	bcs.n	801a518 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801a506:	4b10      	ldr	r3, [pc, #64]	; (801a548 <tcp_get_next_optbyte+0x68>)
 801a508:	681b      	ldr	r3, [r3, #0]
 801a50a:	3314      	adds	r3, #20
 801a50c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801a50e:	88fb      	ldrh	r3, [r7, #6]
 801a510:	683a      	ldr	r2, [r7, #0]
 801a512:	4413      	add	r3, r2
 801a514:	781b      	ldrb	r3, [r3, #0]
 801a516:	e00b      	b.n	801a530 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801a518:	88fb      	ldrh	r3, [r7, #6]
 801a51a:	b2da      	uxtb	r2, r3
 801a51c:	4b09      	ldr	r3, [pc, #36]	; (801a544 <tcp_get_next_optbyte+0x64>)
 801a51e:	881b      	ldrh	r3, [r3, #0]
 801a520:	b2db      	uxtb	r3, r3
 801a522:	1ad3      	subs	r3, r2, r3
 801a524:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801a526:	4b06      	ldr	r3, [pc, #24]	; (801a540 <tcp_get_next_optbyte+0x60>)
 801a528:	681a      	ldr	r2, [r3, #0]
 801a52a:	797b      	ldrb	r3, [r7, #5]
 801a52c:	4413      	add	r3, r2
 801a52e:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a530:	4618      	mov	r0, r3
 801a532:	370c      	adds	r7, #12
 801a534:	46bd      	mov	sp, r7
 801a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a53a:	4770      	bx	lr
 801a53c:	240057c0 	.word	0x240057c0
 801a540:	240057bc 	.word	0x240057bc
 801a544:	240057ba 	.word	0x240057ba
 801a548:	240057b4 	.word	0x240057b4

0801a54c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801a54c:	b580      	push	{r7, lr}
 801a54e:	b084      	sub	sp, #16
 801a550:	af00      	add	r7, sp, #0
 801a552:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801a554:	687b      	ldr	r3, [r7, #4]
 801a556:	2b00      	cmp	r3, #0
 801a558:	d106      	bne.n	801a568 <tcp_parseopt+0x1c>
 801a55a:	4b32      	ldr	r3, [pc, #200]	; (801a624 <tcp_parseopt+0xd8>)
 801a55c:	f240 727d 	movw	r2, #1917	; 0x77d
 801a560:	4931      	ldr	r1, [pc, #196]	; (801a628 <tcp_parseopt+0xdc>)
 801a562:	4832      	ldr	r0, [pc, #200]	; (801a62c <tcp_parseopt+0xe0>)
 801a564:	f006 fb02 	bl	8020b6c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801a568:	4b31      	ldr	r3, [pc, #196]	; (801a630 <tcp_parseopt+0xe4>)
 801a56a:	881b      	ldrh	r3, [r3, #0]
 801a56c:	2b00      	cmp	r3, #0
 801a56e:	d055      	beq.n	801a61c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a570:	4b30      	ldr	r3, [pc, #192]	; (801a634 <tcp_parseopt+0xe8>)
 801a572:	2200      	movs	r2, #0
 801a574:	801a      	strh	r2, [r3, #0]
 801a576:	e045      	b.n	801a604 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801a578:	f7ff ffb2 	bl	801a4e0 <tcp_get_next_optbyte>
 801a57c:	4603      	mov	r3, r0
 801a57e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801a580:	7bfb      	ldrb	r3, [r7, #15]
 801a582:	2b02      	cmp	r3, #2
 801a584:	d006      	beq.n	801a594 <tcp_parseopt+0x48>
 801a586:	2b02      	cmp	r3, #2
 801a588:	dc2b      	bgt.n	801a5e2 <tcp_parseopt+0x96>
 801a58a:	2b00      	cmp	r3, #0
 801a58c:	d041      	beq.n	801a612 <tcp_parseopt+0xc6>
 801a58e:	2b01      	cmp	r3, #1
 801a590:	d127      	bne.n	801a5e2 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801a592:	e037      	b.n	801a604 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801a594:	f7ff ffa4 	bl	801a4e0 <tcp_get_next_optbyte>
 801a598:	4603      	mov	r3, r0
 801a59a:	2b04      	cmp	r3, #4
 801a59c:	d13b      	bne.n	801a616 <tcp_parseopt+0xca>
 801a59e:	4b25      	ldr	r3, [pc, #148]	; (801a634 <tcp_parseopt+0xe8>)
 801a5a0:	881b      	ldrh	r3, [r3, #0]
 801a5a2:	3301      	adds	r3, #1
 801a5a4:	4a22      	ldr	r2, [pc, #136]	; (801a630 <tcp_parseopt+0xe4>)
 801a5a6:	8812      	ldrh	r2, [r2, #0]
 801a5a8:	4293      	cmp	r3, r2
 801a5aa:	da34      	bge.n	801a616 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801a5ac:	f7ff ff98 	bl	801a4e0 <tcp_get_next_optbyte>
 801a5b0:	4603      	mov	r3, r0
 801a5b2:	b29b      	uxth	r3, r3
 801a5b4:	021b      	lsls	r3, r3, #8
 801a5b6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801a5b8:	f7ff ff92 	bl	801a4e0 <tcp_get_next_optbyte>
 801a5bc:	4603      	mov	r3, r0
 801a5be:	b29a      	uxth	r2, r3
 801a5c0:	89bb      	ldrh	r3, [r7, #12]
 801a5c2:	4313      	orrs	r3, r2
 801a5c4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801a5c6:	89bb      	ldrh	r3, [r7, #12]
 801a5c8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801a5cc:	d804      	bhi.n	801a5d8 <tcp_parseopt+0x8c>
 801a5ce:	89bb      	ldrh	r3, [r7, #12]
 801a5d0:	2b00      	cmp	r3, #0
 801a5d2:	d001      	beq.n	801a5d8 <tcp_parseopt+0x8c>
 801a5d4:	89ba      	ldrh	r2, [r7, #12]
 801a5d6:	e001      	b.n	801a5dc <tcp_parseopt+0x90>
 801a5d8:	f44f 7206 	mov.w	r2, #536	; 0x218
 801a5dc:	687b      	ldr	r3, [r7, #4]
 801a5de:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801a5e0:	e010      	b.n	801a604 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801a5e2:	f7ff ff7d 	bl	801a4e0 <tcp_get_next_optbyte>
 801a5e6:	4603      	mov	r3, r0
 801a5e8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801a5ea:	7afb      	ldrb	r3, [r7, #11]
 801a5ec:	2b01      	cmp	r3, #1
 801a5ee:	d914      	bls.n	801a61a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801a5f0:	7afb      	ldrb	r3, [r7, #11]
 801a5f2:	b29a      	uxth	r2, r3
 801a5f4:	4b0f      	ldr	r3, [pc, #60]	; (801a634 <tcp_parseopt+0xe8>)
 801a5f6:	881b      	ldrh	r3, [r3, #0]
 801a5f8:	4413      	add	r3, r2
 801a5fa:	b29b      	uxth	r3, r3
 801a5fc:	3b02      	subs	r3, #2
 801a5fe:	b29a      	uxth	r2, r3
 801a600:	4b0c      	ldr	r3, [pc, #48]	; (801a634 <tcp_parseopt+0xe8>)
 801a602:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a604:	4b0b      	ldr	r3, [pc, #44]	; (801a634 <tcp_parseopt+0xe8>)
 801a606:	881a      	ldrh	r2, [r3, #0]
 801a608:	4b09      	ldr	r3, [pc, #36]	; (801a630 <tcp_parseopt+0xe4>)
 801a60a:	881b      	ldrh	r3, [r3, #0]
 801a60c:	429a      	cmp	r2, r3
 801a60e:	d3b3      	bcc.n	801a578 <tcp_parseopt+0x2c>
 801a610:	e004      	b.n	801a61c <tcp_parseopt+0xd0>
          return;
 801a612:	bf00      	nop
 801a614:	e002      	b.n	801a61c <tcp_parseopt+0xd0>
            return;
 801a616:	bf00      	nop
 801a618:	e000      	b.n	801a61c <tcp_parseopt+0xd0>
            return;
 801a61a:	bf00      	nop
      }
    }
  }
}
 801a61c:	3710      	adds	r7, #16
 801a61e:	46bd      	mov	sp, r7
 801a620:	bd80      	pop	{r7, pc}
 801a622:	bf00      	nop
 801a624:	0802790c 	.word	0x0802790c
 801a628:	08027d9c 	.word	0x08027d9c
 801a62c:	08027984 	.word	0x08027984
 801a630:	240057b8 	.word	0x240057b8
 801a634:	240057c0 	.word	0x240057c0

0801a638 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801a638:	b480      	push	{r7}
 801a63a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801a63c:	4b05      	ldr	r3, [pc, #20]	; (801a654 <tcp_trigger_input_pcb_close+0x1c>)
 801a63e:	781b      	ldrb	r3, [r3, #0]
 801a640:	f043 0310 	orr.w	r3, r3, #16
 801a644:	b2da      	uxtb	r2, r3
 801a646:	4b03      	ldr	r3, [pc, #12]	; (801a654 <tcp_trigger_input_pcb_close+0x1c>)
 801a648:	701a      	strb	r2, [r3, #0]
}
 801a64a:	bf00      	nop
 801a64c:	46bd      	mov	sp, r7
 801a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a652:	4770      	bx	lr
 801a654:	240057d1 	.word	0x240057d1

0801a658 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801a658:	b580      	push	{r7, lr}
 801a65a:	b084      	sub	sp, #16
 801a65c:	af00      	add	r7, sp, #0
 801a65e:	60f8      	str	r0, [r7, #12]
 801a660:	60b9      	str	r1, [r7, #8]
 801a662:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801a664:	68fb      	ldr	r3, [r7, #12]
 801a666:	2b00      	cmp	r3, #0
 801a668:	d00a      	beq.n	801a680 <tcp_route+0x28>
 801a66a:	68fb      	ldr	r3, [r7, #12]
 801a66c:	7a1b      	ldrb	r3, [r3, #8]
 801a66e:	2b00      	cmp	r3, #0
 801a670:	d006      	beq.n	801a680 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801a672:	68fb      	ldr	r3, [r7, #12]
 801a674:	7a1b      	ldrb	r3, [r3, #8]
 801a676:	4618      	mov	r0, r3
 801a678:	f7fa ff06 	bl	8015488 <netif_get_by_index>
 801a67c:	4603      	mov	r3, r0
 801a67e:	e003      	b.n	801a688 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801a680:	6878      	ldr	r0, [r7, #4]
 801a682:	f7f8 fe3b 	bl	80132fc <ip4_route>
 801a686:	4603      	mov	r3, r0
  }
}
 801a688:	4618      	mov	r0, r3
 801a68a:	3710      	adds	r7, #16
 801a68c:	46bd      	mov	sp, r7
 801a68e:	bd80      	pop	{r7, pc}

0801a690 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801a690:	b590      	push	{r4, r7, lr}
 801a692:	b087      	sub	sp, #28
 801a694:	af00      	add	r7, sp, #0
 801a696:	60f8      	str	r0, [r7, #12]
 801a698:	60b9      	str	r1, [r7, #8]
 801a69a:	603b      	str	r3, [r7, #0]
 801a69c:	4613      	mov	r3, r2
 801a69e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801a6a0:	68fb      	ldr	r3, [r7, #12]
 801a6a2:	2b00      	cmp	r3, #0
 801a6a4:	d105      	bne.n	801a6b2 <tcp_create_segment+0x22>
 801a6a6:	4b44      	ldr	r3, [pc, #272]	; (801a7b8 <tcp_create_segment+0x128>)
 801a6a8:	22a3      	movs	r2, #163	; 0xa3
 801a6aa:	4944      	ldr	r1, [pc, #272]	; (801a7bc <tcp_create_segment+0x12c>)
 801a6ac:	4844      	ldr	r0, [pc, #272]	; (801a7c0 <tcp_create_segment+0x130>)
 801a6ae:	f006 fa5d 	bl	8020b6c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801a6b2:	68bb      	ldr	r3, [r7, #8]
 801a6b4:	2b00      	cmp	r3, #0
 801a6b6:	d105      	bne.n	801a6c4 <tcp_create_segment+0x34>
 801a6b8:	4b3f      	ldr	r3, [pc, #252]	; (801a7b8 <tcp_create_segment+0x128>)
 801a6ba:	22a4      	movs	r2, #164	; 0xa4
 801a6bc:	4941      	ldr	r1, [pc, #260]	; (801a7c4 <tcp_create_segment+0x134>)
 801a6be:	4840      	ldr	r0, [pc, #256]	; (801a7c0 <tcp_create_segment+0x130>)
 801a6c0:	f006 fa54 	bl	8020b6c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a6c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a6c8:	009b      	lsls	r3, r3, #2
 801a6ca:	b2db      	uxtb	r3, r3
 801a6cc:	f003 0304 	and.w	r3, r3, #4
 801a6d0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801a6d2:	2003      	movs	r0, #3
 801a6d4:	f7fa fb52 	bl	8014d7c <memp_malloc>
 801a6d8:	6138      	str	r0, [r7, #16]
 801a6da:	693b      	ldr	r3, [r7, #16]
 801a6dc:	2b00      	cmp	r3, #0
 801a6de:	d104      	bne.n	801a6ea <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801a6e0:	68b8      	ldr	r0, [r7, #8]
 801a6e2:	f7fb fa31 	bl	8015b48 <pbuf_free>
    return NULL;
 801a6e6:	2300      	movs	r3, #0
 801a6e8:	e061      	b.n	801a7ae <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801a6ea:	693b      	ldr	r3, [r7, #16]
 801a6ec:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801a6f0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801a6f2:	693b      	ldr	r3, [r7, #16]
 801a6f4:	2200      	movs	r2, #0
 801a6f6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801a6f8:	693b      	ldr	r3, [r7, #16]
 801a6fa:	68ba      	ldr	r2, [r7, #8]
 801a6fc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801a6fe:	68bb      	ldr	r3, [r7, #8]
 801a700:	891a      	ldrh	r2, [r3, #8]
 801a702:	7dfb      	ldrb	r3, [r7, #23]
 801a704:	b29b      	uxth	r3, r3
 801a706:	429a      	cmp	r2, r3
 801a708:	d205      	bcs.n	801a716 <tcp_create_segment+0x86>
 801a70a:	4b2b      	ldr	r3, [pc, #172]	; (801a7b8 <tcp_create_segment+0x128>)
 801a70c:	22b0      	movs	r2, #176	; 0xb0
 801a70e:	492e      	ldr	r1, [pc, #184]	; (801a7c8 <tcp_create_segment+0x138>)
 801a710:	482b      	ldr	r0, [pc, #172]	; (801a7c0 <tcp_create_segment+0x130>)
 801a712:	f006 fa2b 	bl	8020b6c <iprintf>
  seg->len = p->tot_len - optlen;
 801a716:	68bb      	ldr	r3, [r7, #8]
 801a718:	891a      	ldrh	r2, [r3, #8]
 801a71a:	7dfb      	ldrb	r3, [r7, #23]
 801a71c:	b29b      	uxth	r3, r3
 801a71e:	1ad3      	subs	r3, r2, r3
 801a720:	b29a      	uxth	r2, r3
 801a722:	693b      	ldr	r3, [r7, #16]
 801a724:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801a726:	2114      	movs	r1, #20
 801a728:	68b8      	ldr	r0, [r7, #8]
 801a72a:	f7fb f977 	bl	8015a1c <pbuf_add_header>
 801a72e:	4603      	mov	r3, r0
 801a730:	2b00      	cmp	r3, #0
 801a732:	d004      	beq.n	801a73e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801a734:	6938      	ldr	r0, [r7, #16]
 801a736:	f7fd f804 	bl	8017742 <tcp_seg_free>
    return NULL;
 801a73a:	2300      	movs	r3, #0
 801a73c:	e037      	b.n	801a7ae <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801a73e:	693b      	ldr	r3, [r7, #16]
 801a740:	685b      	ldr	r3, [r3, #4]
 801a742:	685a      	ldr	r2, [r3, #4]
 801a744:	693b      	ldr	r3, [r7, #16]
 801a746:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801a748:	68fb      	ldr	r3, [r7, #12]
 801a74a:	8ada      	ldrh	r2, [r3, #22]
 801a74c:	693b      	ldr	r3, [r7, #16]
 801a74e:	68dc      	ldr	r4, [r3, #12]
 801a750:	4610      	mov	r0, r2
 801a752:	f7f7 fafd 	bl	8011d50 <lwip_htons>
 801a756:	4603      	mov	r3, r0
 801a758:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801a75a:	68fb      	ldr	r3, [r7, #12]
 801a75c:	8b1a      	ldrh	r2, [r3, #24]
 801a75e:	693b      	ldr	r3, [r7, #16]
 801a760:	68dc      	ldr	r4, [r3, #12]
 801a762:	4610      	mov	r0, r2
 801a764:	f7f7 faf4 	bl	8011d50 <lwip_htons>
 801a768:	4603      	mov	r3, r0
 801a76a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801a76c:	693b      	ldr	r3, [r7, #16]
 801a76e:	68dc      	ldr	r4, [r3, #12]
 801a770:	6838      	ldr	r0, [r7, #0]
 801a772:	f7f7 fb02 	bl	8011d7a <lwip_htonl>
 801a776:	4603      	mov	r3, r0
 801a778:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801a77a:	7dfb      	ldrb	r3, [r7, #23]
 801a77c:	089b      	lsrs	r3, r3, #2
 801a77e:	b2db      	uxtb	r3, r3
 801a780:	b29b      	uxth	r3, r3
 801a782:	3305      	adds	r3, #5
 801a784:	b29b      	uxth	r3, r3
 801a786:	031b      	lsls	r3, r3, #12
 801a788:	b29a      	uxth	r2, r3
 801a78a:	79fb      	ldrb	r3, [r7, #7]
 801a78c:	b29b      	uxth	r3, r3
 801a78e:	4313      	orrs	r3, r2
 801a790:	b29a      	uxth	r2, r3
 801a792:	693b      	ldr	r3, [r7, #16]
 801a794:	68dc      	ldr	r4, [r3, #12]
 801a796:	4610      	mov	r0, r2
 801a798:	f7f7 fada 	bl	8011d50 <lwip_htons>
 801a79c:	4603      	mov	r3, r0
 801a79e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801a7a0:	693b      	ldr	r3, [r7, #16]
 801a7a2:	68db      	ldr	r3, [r3, #12]
 801a7a4:	2200      	movs	r2, #0
 801a7a6:	749a      	strb	r2, [r3, #18]
 801a7a8:	2200      	movs	r2, #0
 801a7aa:	74da      	strb	r2, [r3, #19]
  return seg;
 801a7ac:	693b      	ldr	r3, [r7, #16]
}
 801a7ae:	4618      	mov	r0, r3
 801a7b0:	371c      	adds	r7, #28
 801a7b2:	46bd      	mov	sp, r7
 801a7b4:	bd90      	pop	{r4, r7, pc}
 801a7b6:	bf00      	nop
 801a7b8:	08027db8 	.word	0x08027db8
 801a7bc:	08027e18 	.word	0x08027e18
 801a7c0:	08027e38 	.word	0x08027e38
 801a7c4:	08027e60 	.word	0x08027e60
 801a7c8:	08027e84 	.word	0x08027e84

0801a7cc <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801a7cc:	b580      	push	{r7, lr}
 801a7ce:	b086      	sub	sp, #24
 801a7d0:	af00      	add	r7, sp, #0
 801a7d2:	607b      	str	r3, [r7, #4]
 801a7d4:	4603      	mov	r3, r0
 801a7d6:	73fb      	strb	r3, [r7, #15]
 801a7d8:	460b      	mov	r3, r1
 801a7da:	81bb      	strh	r3, [r7, #12]
 801a7dc:	4613      	mov	r3, r2
 801a7de:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801a7e0:	89bb      	ldrh	r3, [r7, #12]
 801a7e2:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801a7e4:	687b      	ldr	r3, [r7, #4]
 801a7e6:	2b00      	cmp	r3, #0
 801a7e8:	d105      	bne.n	801a7f6 <tcp_pbuf_prealloc+0x2a>
 801a7ea:	4b30      	ldr	r3, [pc, #192]	; (801a8ac <tcp_pbuf_prealloc+0xe0>)
 801a7ec:	22e8      	movs	r2, #232	; 0xe8
 801a7ee:	4930      	ldr	r1, [pc, #192]	; (801a8b0 <tcp_pbuf_prealloc+0xe4>)
 801a7f0:	4830      	ldr	r0, [pc, #192]	; (801a8b4 <tcp_pbuf_prealloc+0xe8>)
 801a7f2:	f006 f9bb 	bl	8020b6c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801a7f6:	6a3b      	ldr	r3, [r7, #32]
 801a7f8:	2b00      	cmp	r3, #0
 801a7fa:	d105      	bne.n	801a808 <tcp_pbuf_prealloc+0x3c>
 801a7fc:	4b2b      	ldr	r3, [pc, #172]	; (801a8ac <tcp_pbuf_prealloc+0xe0>)
 801a7fe:	22e9      	movs	r2, #233	; 0xe9
 801a800:	492d      	ldr	r1, [pc, #180]	; (801a8b8 <tcp_pbuf_prealloc+0xec>)
 801a802:	482c      	ldr	r0, [pc, #176]	; (801a8b4 <tcp_pbuf_prealloc+0xe8>)
 801a804:	f006 f9b2 	bl	8020b6c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801a808:	89ba      	ldrh	r2, [r7, #12]
 801a80a:	897b      	ldrh	r3, [r7, #10]
 801a80c:	429a      	cmp	r2, r3
 801a80e:	d221      	bcs.n	801a854 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801a810:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a814:	f003 0302 	and.w	r3, r3, #2
 801a818:	2b00      	cmp	r3, #0
 801a81a:	d111      	bne.n	801a840 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801a81c:	6a3b      	ldr	r3, [r7, #32]
 801a81e:	8b5b      	ldrh	r3, [r3, #26]
 801a820:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801a824:	2b00      	cmp	r3, #0
 801a826:	d115      	bne.n	801a854 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801a828:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a82c:	2b00      	cmp	r3, #0
 801a82e:	d007      	beq.n	801a840 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801a830:	6a3b      	ldr	r3, [r7, #32]
 801a832:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801a834:	2b00      	cmp	r3, #0
 801a836:	d103      	bne.n	801a840 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801a838:	6a3b      	ldr	r3, [r7, #32]
 801a83a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801a83c:	2b00      	cmp	r3, #0
 801a83e:	d009      	beq.n	801a854 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801a840:	89bb      	ldrh	r3, [r7, #12]
 801a842:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801a846:	f023 0203 	bic.w	r2, r3, #3
 801a84a:	897b      	ldrh	r3, [r7, #10]
 801a84c:	4293      	cmp	r3, r2
 801a84e:	bf28      	it	cs
 801a850:	4613      	movcs	r3, r2
 801a852:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801a854:	8af9      	ldrh	r1, [r7, #22]
 801a856:	7bfb      	ldrb	r3, [r7, #15]
 801a858:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a85c:	4618      	mov	r0, r3
 801a85e:	f7fa fe8f 	bl	8015580 <pbuf_alloc>
 801a862:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a864:	693b      	ldr	r3, [r7, #16]
 801a866:	2b00      	cmp	r3, #0
 801a868:	d101      	bne.n	801a86e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801a86a:	2300      	movs	r3, #0
 801a86c:	e019      	b.n	801a8a2 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801a86e:	693b      	ldr	r3, [r7, #16]
 801a870:	681b      	ldr	r3, [r3, #0]
 801a872:	2b00      	cmp	r3, #0
 801a874:	d006      	beq.n	801a884 <tcp_pbuf_prealloc+0xb8>
 801a876:	4b0d      	ldr	r3, [pc, #52]	; (801a8ac <tcp_pbuf_prealloc+0xe0>)
 801a878:	f240 120b 	movw	r2, #267	; 0x10b
 801a87c:	490f      	ldr	r1, [pc, #60]	; (801a8bc <tcp_pbuf_prealloc+0xf0>)
 801a87e:	480d      	ldr	r0, [pc, #52]	; (801a8b4 <tcp_pbuf_prealloc+0xe8>)
 801a880:	f006 f974 	bl	8020b6c <iprintf>
  *oversize = p->len - length;
 801a884:	693b      	ldr	r3, [r7, #16]
 801a886:	895a      	ldrh	r2, [r3, #10]
 801a888:	89bb      	ldrh	r3, [r7, #12]
 801a88a:	1ad3      	subs	r3, r2, r3
 801a88c:	b29a      	uxth	r2, r3
 801a88e:	687b      	ldr	r3, [r7, #4]
 801a890:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801a892:	693b      	ldr	r3, [r7, #16]
 801a894:	89ba      	ldrh	r2, [r7, #12]
 801a896:	811a      	strh	r2, [r3, #8]
 801a898:	693b      	ldr	r3, [r7, #16]
 801a89a:	891a      	ldrh	r2, [r3, #8]
 801a89c:	693b      	ldr	r3, [r7, #16]
 801a89e:	815a      	strh	r2, [r3, #10]
  return p;
 801a8a0:	693b      	ldr	r3, [r7, #16]
}
 801a8a2:	4618      	mov	r0, r3
 801a8a4:	3718      	adds	r7, #24
 801a8a6:	46bd      	mov	sp, r7
 801a8a8:	bd80      	pop	{r7, pc}
 801a8aa:	bf00      	nop
 801a8ac:	08027db8 	.word	0x08027db8
 801a8b0:	08027e9c 	.word	0x08027e9c
 801a8b4:	08027e38 	.word	0x08027e38
 801a8b8:	08027ec0 	.word	0x08027ec0
 801a8bc:	08027ee0 	.word	0x08027ee0

0801a8c0 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801a8c0:	b580      	push	{r7, lr}
 801a8c2:	b082      	sub	sp, #8
 801a8c4:	af00      	add	r7, sp, #0
 801a8c6:	6078      	str	r0, [r7, #4]
 801a8c8:	460b      	mov	r3, r1
 801a8ca:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801a8cc:	687b      	ldr	r3, [r7, #4]
 801a8ce:	2b00      	cmp	r3, #0
 801a8d0:	d106      	bne.n	801a8e0 <tcp_write_checks+0x20>
 801a8d2:	4b33      	ldr	r3, [pc, #204]	; (801a9a0 <tcp_write_checks+0xe0>)
 801a8d4:	f240 1233 	movw	r2, #307	; 0x133
 801a8d8:	4932      	ldr	r1, [pc, #200]	; (801a9a4 <tcp_write_checks+0xe4>)
 801a8da:	4833      	ldr	r0, [pc, #204]	; (801a9a8 <tcp_write_checks+0xe8>)
 801a8dc:	f006 f946 	bl	8020b6c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801a8e0:	687b      	ldr	r3, [r7, #4]
 801a8e2:	7d1b      	ldrb	r3, [r3, #20]
 801a8e4:	2b04      	cmp	r3, #4
 801a8e6:	d00e      	beq.n	801a906 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801a8e8:	687b      	ldr	r3, [r7, #4]
 801a8ea:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801a8ec:	2b07      	cmp	r3, #7
 801a8ee:	d00a      	beq.n	801a906 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801a8f0:	687b      	ldr	r3, [r7, #4]
 801a8f2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801a8f4:	2b02      	cmp	r3, #2
 801a8f6:	d006      	beq.n	801a906 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801a8f8:	687b      	ldr	r3, [r7, #4]
 801a8fa:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801a8fc:	2b03      	cmp	r3, #3
 801a8fe:	d002      	beq.n	801a906 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801a900:	f06f 030a 	mvn.w	r3, #10
 801a904:	e048      	b.n	801a998 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801a906:	887b      	ldrh	r3, [r7, #2]
 801a908:	2b00      	cmp	r3, #0
 801a90a:	d101      	bne.n	801a910 <tcp_write_checks+0x50>
    return ERR_OK;
 801a90c:	2300      	movs	r3, #0
 801a90e:	e043      	b.n	801a998 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801a910:	687b      	ldr	r3, [r7, #4]
 801a912:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801a916:	887a      	ldrh	r2, [r7, #2]
 801a918:	429a      	cmp	r2, r3
 801a91a:	d909      	bls.n	801a930 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a91c:	687b      	ldr	r3, [r7, #4]
 801a91e:	8b5b      	ldrh	r3, [r3, #26]
 801a920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a924:	b29a      	uxth	r2, r3
 801a926:	687b      	ldr	r3, [r7, #4]
 801a928:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801a92a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a92e:	e033      	b.n	801a998 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801a930:	687b      	ldr	r3, [r7, #4]
 801a932:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a936:	2b08      	cmp	r3, #8
 801a938:	d909      	bls.n	801a94e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a93a:	687b      	ldr	r3, [r7, #4]
 801a93c:	8b5b      	ldrh	r3, [r3, #26]
 801a93e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a942:	b29a      	uxth	r2, r3
 801a944:	687b      	ldr	r3, [r7, #4]
 801a946:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801a948:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a94c:	e024      	b.n	801a998 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801a94e:	687b      	ldr	r3, [r7, #4]
 801a950:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a954:	2b00      	cmp	r3, #0
 801a956:	d00f      	beq.n	801a978 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801a958:	687b      	ldr	r3, [r7, #4]
 801a95a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a95c:	2b00      	cmp	r3, #0
 801a95e:	d11a      	bne.n	801a996 <tcp_write_checks+0xd6>
 801a960:	687b      	ldr	r3, [r7, #4]
 801a962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a964:	2b00      	cmp	r3, #0
 801a966:	d116      	bne.n	801a996 <tcp_write_checks+0xd6>
 801a968:	4b0d      	ldr	r3, [pc, #52]	; (801a9a0 <tcp_write_checks+0xe0>)
 801a96a:	f240 1255 	movw	r2, #341	; 0x155
 801a96e:	490f      	ldr	r1, [pc, #60]	; (801a9ac <tcp_write_checks+0xec>)
 801a970:	480d      	ldr	r0, [pc, #52]	; (801a9a8 <tcp_write_checks+0xe8>)
 801a972:	f006 f8fb 	bl	8020b6c <iprintf>
 801a976:	e00e      	b.n	801a996 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a97c:	2b00      	cmp	r3, #0
 801a97e:	d103      	bne.n	801a988 <tcp_write_checks+0xc8>
 801a980:	687b      	ldr	r3, [r7, #4]
 801a982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a984:	2b00      	cmp	r3, #0
 801a986:	d006      	beq.n	801a996 <tcp_write_checks+0xd6>
 801a988:	4b05      	ldr	r3, [pc, #20]	; (801a9a0 <tcp_write_checks+0xe0>)
 801a98a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801a98e:	4908      	ldr	r1, [pc, #32]	; (801a9b0 <tcp_write_checks+0xf0>)
 801a990:	4805      	ldr	r0, [pc, #20]	; (801a9a8 <tcp_write_checks+0xe8>)
 801a992:	f006 f8eb 	bl	8020b6c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801a996:	2300      	movs	r3, #0
}
 801a998:	4618      	mov	r0, r3
 801a99a:	3708      	adds	r7, #8
 801a99c:	46bd      	mov	sp, r7
 801a99e:	bd80      	pop	{r7, pc}
 801a9a0:	08027db8 	.word	0x08027db8
 801a9a4:	08027ef4 	.word	0x08027ef4
 801a9a8:	08027e38 	.word	0x08027e38
 801a9ac:	08027f14 	.word	0x08027f14
 801a9b0:	08027f50 	.word	0x08027f50

0801a9b4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801a9b4:	b590      	push	{r4, r7, lr}
 801a9b6:	b09b      	sub	sp, #108	; 0x6c
 801a9b8:	af04      	add	r7, sp, #16
 801a9ba:	60f8      	str	r0, [r7, #12]
 801a9bc:	60b9      	str	r1, [r7, #8]
 801a9be:	4611      	mov	r1, r2
 801a9c0:	461a      	mov	r2, r3
 801a9c2:	460b      	mov	r3, r1
 801a9c4:	80fb      	strh	r3, [r7, #6]
 801a9c6:	4613      	mov	r3, r2
 801a9c8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801a9ca:	2300      	movs	r3, #0
 801a9cc:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801a9ce:	2300      	movs	r3, #0
 801a9d0:	653b      	str	r3, [r7, #80]	; 0x50
 801a9d2:	2300      	movs	r3, #0
 801a9d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a9d6:	2300      	movs	r3, #0
 801a9d8:	64bb      	str	r3, [r7, #72]	; 0x48
 801a9da:	2300      	movs	r3, #0
 801a9dc:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801a9de:	2300      	movs	r3, #0
 801a9e0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801a9e4:	2300      	movs	r3, #0
 801a9e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801a9ea:	2300      	movs	r3, #0
 801a9ec:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801a9ee:	2300      	movs	r3, #0
 801a9f0:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801a9f2:	2300      	movs	r3, #0
 801a9f4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801a9f6:	68fb      	ldr	r3, [r7, #12]
 801a9f8:	2b00      	cmp	r3, #0
 801a9fa:	d109      	bne.n	801aa10 <tcp_write+0x5c>
 801a9fc:	4ba4      	ldr	r3, [pc, #656]	; (801ac90 <tcp_write+0x2dc>)
 801a9fe:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801aa02:	49a4      	ldr	r1, [pc, #656]	; (801ac94 <tcp_write+0x2e0>)
 801aa04:	48a4      	ldr	r0, [pc, #656]	; (801ac98 <tcp_write+0x2e4>)
 801aa06:	f006 f8b1 	bl	8020b6c <iprintf>
 801aa0a:	f06f 030f 	mvn.w	r3, #15
 801aa0e:	e32a      	b.n	801b066 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801aa10:	68fb      	ldr	r3, [r7, #12]
 801aa12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801aa16:	085b      	lsrs	r3, r3, #1
 801aa18:	b29a      	uxth	r2, r3
 801aa1a:	68fb      	ldr	r3, [r7, #12]
 801aa1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801aa1e:	4293      	cmp	r3, r2
 801aa20:	bf28      	it	cs
 801aa22:	4613      	movcs	r3, r2
 801aa24:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801aa26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801aa28:	2b00      	cmp	r3, #0
 801aa2a:	d102      	bne.n	801aa32 <tcp_write+0x7e>
 801aa2c:	68fb      	ldr	r3, [r7, #12]
 801aa2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801aa30:	e000      	b.n	801aa34 <tcp_write+0x80>
 801aa32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801aa34:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801aa36:	68bb      	ldr	r3, [r7, #8]
 801aa38:	2b00      	cmp	r3, #0
 801aa3a:	d109      	bne.n	801aa50 <tcp_write+0x9c>
 801aa3c:	4b94      	ldr	r3, [pc, #592]	; (801ac90 <tcp_write+0x2dc>)
 801aa3e:	f240 12ad 	movw	r2, #429	; 0x1ad
 801aa42:	4996      	ldr	r1, [pc, #600]	; (801ac9c <tcp_write+0x2e8>)
 801aa44:	4894      	ldr	r0, [pc, #592]	; (801ac98 <tcp_write+0x2e4>)
 801aa46:	f006 f891 	bl	8020b6c <iprintf>
 801aa4a:	f06f 030f 	mvn.w	r3, #15
 801aa4e:	e30a      	b.n	801b066 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801aa50:	88fb      	ldrh	r3, [r7, #6]
 801aa52:	4619      	mov	r1, r3
 801aa54:	68f8      	ldr	r0, [r7, #12]
 801aa56:	f7ff ff33 	bl	801a8c0 <tcp_write_checks>
 801aa5a:	4603      	mov	r3, r0
 801aa5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801aa60:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801aa64:	2b00      	cmp	r3, #0
 801aa66:	d002      	beq.n	801aa6e <tcp_write+0xba>
    return err;
 801aa68:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801aa6c:	e2fb      	b.n	801b066 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801aa6e:	68fb      	ldr	r3, [r7, #12]
 801aa70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801aa74:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801aa78:	2300      	movs	r3, #0
 801aa7a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801aa7e:	68fb      	ldr	r3, [r7, #12]
 801aa80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aa82:	2b00      	cmp	r3, #0
 801aa84:	f000 80f6 	beq.w	801ac74 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801aa88:	68fb      	ldr	r3, [r7, #12]
 801aa8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aa8c:	653b      	str	r3, [r7, #80]	; 0x50
 801aa8e:	e002      	b.n	801aa96 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801aa90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aa92:	681b      	ldr	r3, [r3, #0]
 801aa94:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801aa96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aa98:	681b      	ldr	r3, [r3, #0]
 801aa9a:	2b00      	cmp	r3, #0
 801aa9c:	d1f8      	bne.n	801aa90 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801aa9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aaa0:	7a9b      	ldrb	r3, [r3, #10]
 801aaa2:	009b      	lsls	r3, r3, #2
 801aaa4:	b29b      	uxth	r3, r3
 801aaa6:	f003 0304 	and.w	r3, r3, #4
 801aaaa:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801aaac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801aaae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aab0:	891b      	ldrh	r3, [r3, #8]
 801aab2:	4619      	mov	r1, r3
 801aab4:	8c3b      	ldrh	r3, [r7, #32]
 801aab6:	440b      	add	r3, r1
 801aab8:	429a      	cmp	r2, r3
 801aaba:	da06      	bge.n	801aaca <tcp_write+0x116>
 801aabc:	4b74      	ldr	r3, [pc, #464]	; (801ac90 <tcp_write+0x2dc>)
 801aabe:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801aac2:	4977      	ldr	r1, [pc, #476]	; (801aca0 <tcp_write+0x2ec>)
 801aac4:	4874      	ldr	r0, [pc, #464]	; (801ac98 <tcp_write+0x2e4>)
 801aac6:	f006 f851 	bl	8020b6c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801aaca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aacc:	891a      	ldrh	r2, [r3, #8]
 801aace:	8c3b      	ldrh	r3, [r7, #32]
 801aad0:	4413      	add	r3, r2
 801aad2:	b29b      	uxth	r3, r3
 801aad4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801aad6:	1ad3      	subs	r3, r2, r3
 801aad8:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801aada:	68fb      	ldr	r3, [r7, #12]
 801aadc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801aae0:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801aae2:	8a7b      	ldrh	r3, [r7, #18]
 801aae4:	2b00      	cmp	r3, #0
 801aae6:	d026      	beq.n	801ab36 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801aae8:	8a7b      	ldrh	r3, [r7, #18]
 801aaea:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801aaec:	429a      	cmp	r2, r3
 801aaee:	d206      	bcs.n	801aafe <tcp_write+0x14a>
 801aaf0:	4b67      	ldr	r3, [pc, #412]	; (801ac90 <tcp_write+0x2dc>)
 801aaf2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801aaf6:	496b      	ldr	r1, [pc, #428]	; (801aca4 <tcp_write+0x2f0>)
 801aaf8:	4867      	ldr	r0, [pc, #412]	; (801ac98 <tcp_write+0x2e4>)
 801aafa:	f006 f837 	bl	8020b6c <iprintf>
      seg = last_unsent;
 801aafe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ab00:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801ab02:	8a7b      	ldrh	r3, [r7, #18]
 801ab04:	88fa      	ldrh	r2, [r7, #6]
 801ab06:	4293      	cmp	r3, r2
 801ab08:	bf28      	it	cs
 801ab0a:	4613      	movcs	r3, r2
 801ab0c:	b29b      	uxth	r3, r3
 801ab0e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ab10:	4293      	cmp	r3, r2
 801ab12:	bf28      	it	cs
 801ab14:	4613      	movcs	r3, r2
 801ab16:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801ab18:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ab1c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ab1e:	4413      	add	r3, r2
 801ab20:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801ab24:	8a7a      	ldrh	r2, [r7, #18]
 801ab26:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ab28:	1ad3      	subs	r3, r2, r3
 801ab2a:	b29b      	uxth	r3, r3
 801ab2c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801ab2e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ab30:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ab32:	1ad3      	subs	r3, r2, r3
 801ab34:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801ab36:	8a7b      	ldrh	r3, [r7, #18]
 801ab38:	2b00      	cmp	r3, #0
 801ab3a:	d00b      	beq.n	801ab54 <tcp_write+0x1a0>
 801ab3c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ab40:	88fb      	ldrh	r3, [r7, #6]
 801ab42:	429a      	cmp	r2, r3
 801ab44:	d006      	beq.n	801ab54 <tcp_write+0x1a0>
 801ab46:	4b52      	ldr	r3, [pc, #328]	; (801ac90 <tcp_write+0x2dc>)
 801ab48:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ab4c:	4956      	ldr	r1, [pc, #344]	; (801aca8 <tcp_write+0x2f4>)
 801ab4e:	4852      	ldr	r0, [pc, #328]	; (801ac98 <tcp_write+0x2e4>)
 801ab50:	f006 f80c 	bl	8020b6c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801ab54:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ab58:	88fb      	ldrh	r3, [r7, #6]
 801ab5a:	429a      	cmp	r2, r3
 801ab5c:	f080 8167 	bcs.w	801ae2e <tcp_write+0x47a>
 801ab60:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ab62:	2b00      	cmp	r3, #0
 801ab64:	f000 8163 	beq.w	801ae2e <tcp_write+0x47a>
 801ab68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ab6a:	891b      	ldrh	r3, [r3, #8]
 801ab6c:	2b00      	cmp	r3, #0
 801ab6e:	f000 815e 	beq.w	801ae2e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801ab72:	88fa      	ldrh	r2, [r7, #6]
 801ab74:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ab78:	1ad2      	subs	r2, r2, r3
 801ab7a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ab7c:	4293      	cmp	r3, r2
 801ab7e:	bfa8      	it	ge
 801ab80:	4613      	movge	r3, r2
 801ab82:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801ab84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ab86:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801ab88:	797b      	ldrb	r3, [r7, #5]
 801ab8a:	f003 0301 	and.w	r3, r3, #1
 801ab8e:	2b00      	cmp	r3, #0
 801ab90:	d027      	beq.n	801abe2 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801ab92:	f107 0012 	add.w	r0, r7, #18
 801ab96:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ab98:	8bf9      	ldrh	r1, [r7, #30]
 801ab9a:	2301      	movs	r3, #1
 801ab9c:	9302      	str	r3, [sp, #8]
 801ab9e:	797b      	ldrb	r3, [r7, #5]
 801aba0:	9301      	str	r3, [sp, #4]
 801aba2:	68fb      	ldr	r3, [r7, #12]
 801aba4:	9300      	str	r3, [sp, #0]
 801aba6:	4603      	mov	r3, r0
 801aba8:	2000      	movs	r0, #0
 801abaa:	f7ff fe0f 	bl	801a7cc <tcp_pbuf_prealloc>
 801abae:	6578      	str	r0, [r7, #84]	; 0x54
 801abb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801abb2:	2b00      	cmp	r3, #0
 801abb4:	f000 8225 	beq.w	801b002 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801abb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801abba:	6858      	ldr	r0, [r3, #4]
 801abbc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801abc0:	68ba      	ldr	r2, [r7, #8]
 801abc2:	4413      	add	r3, r2
 801abc4:	8bfa      	ldrh	r2, [r7, #30]
 801abc6:	4619      	mov	r1, r3
 801abc8:	f005 f8ae 	bl	801fd28 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801abcc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801abce:	f7fb f843 	bl	8015c58 <pbuf_clen>
 801abd2:	4603      	mov	r3, r0
 801abd4:	461a      	mov	r2, r3
 801abd6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801abda:	4413      	add	r3, r2
 801abdc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801abe0:	e041      	b.n	801ac66 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801abe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801abe4:	685b      	ldr	r3, [r3, #4]
 801abe6:	637b      	str	r3, [r7, #52]	; 0x34
 801abe8:	e002      	b.n	801abf0 <tcp_write+0x23c>
 801abea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801abec:	681b      	ldr	r3, [r3, #0]
 801abee:	637b      	str	r3, [r7, #52]	; 0x34
 801abf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801abf2:	681b      	ldr	r3, [r3, #0]
 801abf4:	2b00      	cmp	r3, #0
 801abf6:	d1f8      	bne.n	801abea <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801abf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801abfa:	7b1b      	ldrb	r3, [r3, #12]
 801abfc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801ac00:	2b00      	cmp	r3, #0
 801ac02:	d115      	bne.n	801ac30 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801ac04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ac06:	685b      	ldr	r3, [r3, #4]
 801ac08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ac0a:	8952      	ldrh	r2, [r2, #10]
 801ac0c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801ac0e:	68ba      	ldr	r2, [r7, #8]
 801ac10:	429a      	cmp	r2, r3
 801ac12:	d10d      	bne.n	801ac30 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801ac14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ac18:	2b00      	cmp	r3, #0
 801ac1a:	d006      	beq.n	801ac2a <tcp_write+0x276>
 801ac1c:	4b1c      	ldr	r3, [pc, #112]	; (801ac90 <tcp_write+0x2dc>)
 801ac1e:	f240 2231 	movw	r2, #561	; 0x231
 801ac22:	4922      	ldr	r1, [pc, #136]	; (801acac <tcp_write+0x2f8>)
 801ac24:	481c      	ldr	r0, [pc, #112]	; (801ac98 <tcp_write+0x2e4>)
 801ac26:	f005 ffa1 	bl	8020b6c <iprintf>
          extendlen = seglen;
 801ac2a:	8bfb      	ldrh	r3, [r7, #30]
 801ac2c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801ac2e:	e01a      	b.n	801ac66 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801ac30:	8bfb      	ldrh	r3, [r7, #30]
 801ac32:	2201      	movs	r2, #1
 801ac34:	4619      	mov	r1, r3
 801ac36:	2000      	movs	r0, #0
 801ac38:	f7fa fca2 	bl	8015580 <pbuf_alloc>
 801ac3c:	6578      	str	r0, [r7, #84]	; 0x54
 801ac3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ac40:	2b00      	cmp	r3, #0
 801ac42:	f000 81e0 	beq.w	801b006 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801ac46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ac4a:	68ba      	ldr	r2, [r7, #8]
 801ac4c:	441a      	add	r2, r3
 801ac4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ac50:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801ac52:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801ac54:	f7fb f800 	bl	8015c58 <pbuf_clen>
 801ac58:	4603      	mov	r3, r0
 801ac5a:	461a      	mov	r2, r3
 801ac5c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801ac60:	4413      	add	r3, r2
 801ac62:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801ac66:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ac6a:	8bfb      	ldrh	r3, [r7, #30]
 801ac6c:	4413      	add	r3, r2
 801ac6e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801ac72:	e0dc      	b.n	801ae2e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801ac74:	68fb      	ldr	r3, [r7, #12]
 801ac76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801ac7a:	2b00      	cmp	r3, #0
 801ac7c:	f000 80d7 	beq.w	801ae2e <tcp_write+0x47a>
 801ac80:	4b03      	ldr	r3, [pc, #12]	; (801ac90 <tcp_write+0x2dc>)
 801ac82:	f240 224a 	movw	r2, #586	; 0x24a
 801ac86:	490a      	ldr	r1, [pc, #40]	; (801acb0 <tcp_write+0x2fc>)
 801ac88:	4803      	ldr	r0, [pc, #12]	; (801ac98 <tcp_write+0x2e4>)
 801ac8a:	f005 ff6f 	bl	8020b6c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801ac8e:	e0ce      	b.n	801ae2e <tcp_write+0x47a>
 801ac90:	08027db8 	.word	0x08027db8
 801ac94:	08027f84 	.word	0x08027f84
 801ac98:	08027e38 	.word	0x08027e38
 801ac9c:	08027f9c 	.word	0x08027f9c
 801aca0:	08027fd0 	.word	0x08027fd0
 801aca4:	08027fe8 	.word	0x08027fe8
 801aca8:	08028008 	.word	0x08028008
 801acac:	08028028 	.word	0x08028028
 801acb0:	08028054 	.word	0x08028054
    struct pbuf *p;
    u16_t left = len - pos;
 801acb4:	88fa      	ldrh	r2, [r7, #6]
 801acb6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801acba:	1ad3      	subs	r3, r2, r3
 801acbc:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801acbe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801acc2:	b29b      	uxth	r3, r3
 801acc4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801acc6:	1ad3      	subs	r3, r2, r3
 801acc8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801acca:	8b7a      	ldrh	r2, [r7, #26]
 801accc:	8bbb      	ldrh	r3, [r7, #28]
 801acce:	4293      	cmp	r3, r2
 801acd0:	bf28      	it	cs
 801acd2:	4613      	movcs	r3, r2
 801acd4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801acd6:	797b      	ldrb	r3, [r7, #5]
 801acd8:	f003 0301 	and.w	r3, r3, #1
 801acdc:	2b00      	cmp	r3, #0
 801acde:	d036      	beq.n	801ad4e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801ace0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ace4:	b29a      	uxth	r2, r3
 801ace6:	8b3b      	ldrh	r3, [r7, #24]
 801ace8:	4413      	add	r3, r2
 801acea:	b299      	uxth	r1, r3
 801acec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801acee:	2b00      	cmp	r3, #0
 801acf0:	bf0c      	ite	eq
 801acf2:	2301      	moveq	r3, #1
 801acf4:	2300      	movne	r3, #0
 801acf6:	b2db      	uxtb	r3, r3
 801acf8:	f107 0012 	add.w	r0, r7, #18
 801acfc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801acfe:	9302      	str	r3, [sp, #8]
 801ad00:	797b      	ldrb	r3, [r7, #5]
 801ad02:	9301      	str	r3, [sp, #4]
 801ad04:	68fb      	ldr	r3, [r7, #12]
 801ad06:	9300      	str	r3, [sp, #0]
 801ad08:	4603      	mov	r3, r0
 801ad0a:	2036      	movs	r0, #54	; 0x36
 801ad0c:	f7ff fd5e 	bl	801a7cc <tcp_pbuf_prealloc>
 801ad10:	6338      	str	r0, [r7, #48]	; 0x30
 801ad12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad14:	2b00      	cmp	r3, #0
 801ad16:	f000 8178 	beq.w	801b00a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801ad1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad1c:	895b      	ldrh	r3, [r3, #10]
 801ad1e:	8b3a      	ldrh	r2, [r7, #24]
 801ad20:	429a      	cmp	r2, r3
 801ad22:	d906      	bls.n	801ad32 <tcp_write+0x37e>
 801ad24:	4b8c      	ldr	r3, [pc, #560]	; (801af58 <tcp_write+0x5a4>)
 801ad26:	f240 2266 	movw	r2, #614	; 0x266
 801ad2a:	498c      	ldr	r1, [pc, #560]	; (801af5c <tcp_write+0x5a8>)
 801ad2c:	488c      	ldr	r0, [pc, #560]	; (801af60 <tcp_write+0x5ac>)
 801ad2e:	f005 ff1d 	bl	8020b6c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801ad32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad34:	685a      	ldr	r2, [r3, #4]
 801ad36:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ad3a:	18d0      	adds	r0, r2, r3
 801ad3c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ad40:	68ba      	ldr	r2, [r7, #8]
 801ad42:	4413      	add	r3, r2
 801ad44:	8b3a      	ldrh	r2, [r7, #24]
 801ad46:	4619      	mov	r1, r3
 801ad48:	f004 ffee 	bl	801fd28 <memcpy>
 801ad4c:	e02f      	b.n	801adae <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801ad4e:	8a7b      	ldrh	r3, [r7, #18]
 801ad50:	2b00      	cmp	r3, #0
 801ad52:	d006      	beq.n	801ad62 <tcp_write+0x3ae>
 801ad54:	4b80      	ldr	r3, [pc, #512]	; (801af58 <tcp_write+0x5a4>)
 801ad56:	f240 2271 	movw	r2, #625	; 0x271
 801ad5a:	4982      	ldr	r1, [pc, #520]	; (801af64 <tcp_write+0x5b0>)
 801ad5c:	4880      	ldr	r0, [pc, #512]	; (801af60 <tcp_write+0x5ac>)
 801ad5e:	f005 ff05 	bl	8020b6c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801ad62:	8b3b      	ldrh	r3, [r7, #24]
 801ad64:	2201      	movs	r2, #1
 801ad66:	4619      	mov	r1, r3
 801ad68:	2036      	movs	r0, #54	; 0x36
 801ad6a:	f7fa fc09 	bl	8015580 <pbuf_alloc>
 801ad6e:	6178      	str	r0, [r7, #20]
 801ad70:	697b      	ldr	r3, [r7, #20]
 801ad72:	2b00      	cmp	r3, #0
 801ad74:	f000 814b 	beq.w	801b00e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801ad78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ad7c:	68ba      	ldr	r2, [r7, #8]
 801ad7e:	441a      	add	r2, r3
 801ad80:	697b      	ldr	r3, [r7, #20]
 801ad82:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801ad84:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ad88:	b29b      	uxth	r3, r3
 801ad8a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ad8e:	4619      	mov	r1, r3
 801ad90:	2036      	movs	r0, #54	; 0x36
 801ad92:	f7fa fbf5 	bl	8015580 <pbuf_alloc>
 801ad96:	6338      	str	r0, [r7, #48]	; 0x30
 801ad98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad9a:	2b00      	cmp	r3, #0
 801ad9c:	d103      	bne.n	801ada6 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801ad9e:	6978      	ldr	r0, [r7, #20]
 801ada0:	f7fa fed2 	bl	8015b48 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801ada4:	e136      	b.n	801b014 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801ada6:	6979      	ldr	r1, [r7, #20]
 801ada8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801adaa:	f7fa ff8f 	bl	8015ccc <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801adae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801adb0:	f7fa ff52 	bl	8015c58 <pbuf_clen>
 801adb4:	4603      	mov	r3, r0
 801adb6:	461a      	mov	r2, r3
 801adb8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801adbc:	4413      	add	r3, r2
 801adbe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801adc2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801adc6:	2b09      	cmp	r3, #9
 801adc8:	d903      	bls.n	801add2 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801adca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801adcc:	f7fa febc 	bl	8015b48 <pbuf_free>
      goto memerr;
 801add0:	e120      	b.n	801b014 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801add2:	68fb      	ldr	r3, [r7, #12]
 801add4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801add6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801adda:	441a      	add	r2, r3
 801addc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ade0:	9300      	str	r3, [sp, #0]
 801ade2:	4613      	mov	r3, r2
 801ade4:	2200      	movs	r2, #0
 801ade6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801ade8:	68f8      	ldr	r0, [r7, #12]
 801adea:	f7ff fc51 	bl	801a690 <tcp_create_segment>
 801adee:	64f8      	str	r0, [r7, #76]	; 0x4c
 801adf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801adf2:	2b00      	cmp	r3, #0
 801adf4:	f000 810d 	beq.w	801b012 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801adf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801adfa:	2b00      	cmp	r3, #0
 801adfc:	d102      	bne.n	801ae04 <tcp_write+0x450>
      queue = seg;
 801adfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ae00:	647b      	str	r3, [r7, #68]	; 0x44
 801ae02:	e00c      	b.n	801ae1e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801ae04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ae06:	2b00      	cmp	r3, #0
 801ae08:	d106      	bne.n	801ae18 <tcp_write+0x464>
 801ae0a:	4b53      	ldr	r3, [pc, #332]	; (801af58 <tcp_write+0x5a4>)
 801ae0c:	f240 22ab 	movw	r2, #683	; 0x2ab
 801ae10:	4955      	ldr	r1, [pc, #340]	; (801af68 <tcp_write+0x5b4>)
 801ae12:	4853      	ldr	r0, [pc, #332]	; (801af60 <tcp_write+0x5ac>)
 801ae14:	f005 feaa 	bl	8020b6c <iprintf>
      prev_seg->next = seg;
 801ae18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ae1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801ae1c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801ae1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ae20:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801ae22:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ae26:	8b3b      	ldrh	r3, [r7, #24]
 801ae28:	4413      	add	r3, r2
 801ae2a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801ae2e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ae32:	88fb      	ldrh	r3, [r7, #6]
 801ae34:	429a      	cmp	r2, r3
 801ae36:	f4ff af3d 	bcc.w	801acb4 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801ae3a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ae3c:	2b00      	cmp	r3, #0
 801ae3e:	d02c      	beq.n	801ae9a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801ae40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ae42:	685b      	ldr	r3, [r3, #4]
 801ae44:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ae46:	e01e      	b.n	801ae86 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801ae48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae4a:	891a      	ldrh	r2, [r3, #8]
 801ae4c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ae4e:	4413      	add	r3, r2
 801ae50:	b29a      	uxth	r2, r3
 801ae52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae54:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801ae56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae58:	681b      	ldr	r3, [r3, #0]
 801ae5a:	2b00      	cmp	r3, #0
 801ae5c:	d110      	bne.n	801ae80 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801ae5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae60:	685b      	ldr	r3, [r3, #4]
 801ae62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ae64:	8952      	ldrh	r2, [r2, #10]
 801ae66:	4413      	add	r3, r2
 801ae68:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801ae6a:	68b9      	ldr	r1, [r7, #8]
 801ae6c:	4618      	mov	r0, r3
 801ae6e:	f004 ff5b 	bl	801fd28 <memcpy>
        p->len += oversize_used;
 801ae72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae74:	895a      	ldrh	r2, [r3, #10]
 801ae76:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ae78:	4413      	add	r3, r2
 801ae7a:	b29a      	uxth	r2, r3
 801ae7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae7e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801ae80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae82:	681b      	ldr	r3, [r3, #0]
 801ae84:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ae86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae88:	2b00      	cmp	r3, #0
 801ae8a:	d1dd      	bne.n	801ae48 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801ae8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ae8e:	891a      	ldrh	r2, [r3, #8]
 801ae90:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ae92:	4413      	add	r3, r2
 801ae94:	b29a      	uxth	r2, r3
 801ae96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ae98:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801ae9a:	8a7a      	ldrh	r2, [r7, #18]
 801ae9c:	68fb      	ldr	r3, [r7, #12]
 801ae9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801aea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801aea4:	2b00      	cmp	r3, #0
 801aea6:	d018      	beq.n	801aeda <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801aea8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aeaa:	2b00      	cmp	r3, #0
 801aeac:	d106      	bne.n	801aebc <tcp_write+0x508>
 801aeae:	4b2a      	ldr	r3, [pc, #168]	; (801af58 <tcp_write+0x5a4>)
 801aeb0:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801aeb4:	492d      	ldr	r1, [pc, #180]	; (801af6c <tcp_write+0x5b8>)
 801aeb6:	482a      	ldr	r0, [pc, #168]	; (801af60 <tcp_write+0x5ac>)
 801aeb8:	f005 fe58 	bl	8020b6c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801aebc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aebe:	685b      	ldr	r3, [r3, #4]
 801aec0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801aec2:	4618      	mov	r0, r3
 801aec4:	f7fa ff02 	bl	8015ccc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801aec8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aeca:	891a      	ldrh	r2, [r3, #8]
 801aecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801aece:	891b      	ldrh	r3, [r3, #8]
 801aed0:	4413      	add	r3, r2
 801aed2:	b29a      	uxth	r2, r3
 801aed4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aed6:	811a      	strh	r2, [r3, #8]
 801aed8:	e037      	b.n	801af4a <tcp_write+0x596>
  } else if (extendlen > 0) {
 801aeda:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801aedc:	2b00      	cmp	r3, #0
 801aede:	d034      	beq.n	801af4a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801aee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aee2:	2b00      	cmp	r3, #0
 801aee4:	d003      	beq.n	801aeee <tcp_write+0x53a>
 801aee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aee8:	685b      	ldr	r3, [r3, #4]
 801aeea:	2b00      	cmp	r3, #0
 801aeec:	d106      	bne.n	801aefc <tcp_write+0x548>
 801aeee:	4b1a      	ldr	r3, [pc, #104]	; (801af58 <tcp_write+0x5a4>)
 801aef0:	f240 22e6 	movw	r2, #742	; 0x2e6
 801aef4:	491e      	ldr	r1, [pc, #120]	; (801af70 <tcp_write+0x5bc>)
 801aef6:	481a      	ldr	r0, [pc, #104]	; (801af60 <tcp_write+0x5ac>)
 801aef8:	f005 fe38 	bl	8020b6c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801aefc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aefe:	685b      	ldr	r3, [r3, #4]
 801af00:	62bb      	str	r3, [r7, #40]	; 0x28
 801af02:	e009      	b.n	801af18 <tcp_write+0x564>
      p->tot_len += extendlen;
 801af04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af06:	891a      	ldrh	r2, [r3, #8]
 801af08:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801af0a:	4413      	add	r3, r2
 801af0c:	b29a      	uxth	r2, r3
 801af0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af10:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801af12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af14:	681b      	ldr	r3, [r3, #0]
 801af16:	62bb      	str	r3, [r7, #40]	; 0x28
 801af18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af1a:	681b      	ldr	r3, [r3, #0]
 801af1c:	2b00      	cmp	r3, #0
 801af1e:	d1f1      	bne.n	801af04 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801af20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af22:	891a      	ldrh	r2, [r3, #8]
 801af24:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801af26:	4413      	add	r3, r2
 801af28:	b29a      	uxth	r2, r3
 801af2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af2c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801af2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af30:	895a      	ldrh	r2, [r3, #10]
 801af32:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801af34:	4413      	add	r3, r2
 801af36:	b29a      	uxth	r2, r3
 801af38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af3a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801af3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801af3e:	891a      	ldrh	r2, [r3, #8]
 801af40:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801af42:	4413      	add	r3, r2
 801af44:	b29a      	uxth	r2, r3
 801af46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801af48:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801af4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801af4c:	2b00      	cmp	r3, #0
 801af4e:	d111      	bne.n	801af74 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801af50:	68fb      	ldr	r3, [r7, #12]
 801af52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801af54:	66da      	str	r2, [r3, #108]	; 0x6c
 801af56:	e010      	b.n	801af7a <tcp_write+0x5c6>
 801af58:	08027db8 	.word	0x08027db8
 801af5c:	08028084 	.word	0x08028084
 801af60:	08027e38 	.word	0x08027e38
 801af64:	080280c4 	.word	0x080280c4
 801af68:	080280d4 	.word	0x080280d4
 801af6c:	080280e8 	.word	0x080280e8
 801af70:	08028120 	.word	0x08028120
  } else {
    last_unsent->next = queue;
 801af74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801af76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801af78:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801af7a:	68fb      	ldr	r3, [r7, #12]
 801af7c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801af7e:	88fb      	ldrh	r3, [r7, #6]
 801af80:	441a      	add	r2, r3
 801af82:	68fb      	ldr	r3, [r7, #12]
 801af84:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801af86:	68fb      	ldr	r3, [r7, #12]
 801af88:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801af8c:	88fb      	ldrh	r3, [r7, #6]
 801af8e:	1ad3      	subs	r3, r2, r3
 801af90:	b29a      	uxth	r2, r3
 801af92:	68fb      	ldr	r3, [r7, #12]
 801af94:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801af98:	68fb      	ldr	r3, [r7, #12]
 801af9a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801af9e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801afa2:	68fb      	ldr	r3, [r7, #12]
 801afa4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801afa8:	2b00      	cmp	r3, #0
 801afaa:	d00e      	beq.n	801afca <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801afac:	68fb      	ldr	r3, [r7, #12]
 801afae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801afb0:	2b00      	cmp	r3, #0
 801afb2:	d10a      	bne.n	801afca <tcp_write+0x616>
 801afb4:	68fb      	ldr	r3, [r7, #12]
 801afb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801afb8:	2b00      	cmp	r3, #0
 801afba:	d106      	bne.n	801afca <tcp_write+0x616>
 801afbc:	4b2c      	ldr	r3, [pc, #176]	; (801b070 <tcp_write+0x6bc>)
 801afbe:	f240 3212 	movw	r2, #786	; 0x312
 801afc2:	492c      	ldr	r1, [pc, #176]	; (801b074 <tcp_write+0x6c0>)
 801afc4:	482c      	ldr	r0, [pc, #176]	; (801b078 <tcp_write+0x6c4>)
 801afc6:	f005 fdd1 	bl	8020b6c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801afca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801afcc:	2b00      	cmp	r3, #0
 801afce:	d016      	beq.n	801affe <tcp_write+0x64a>
 801afd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801afd2:	68db      	ldr	r3, [r3, #12]
 801afd4:	2b00      	cmp	r3, #0
 801afd6:	d012      	beq.n	801affe <tcp_write+0x64a>
 801afd8:	797b      	ldrb	r3, [r7, #5]
 801afda:	f003 0302 	and.w	r3, r3, #2
 801afde:	2b00      	cmp	r3, #0
 801afe0:	d10d      	bne.n	801affe <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801afe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801afe4:	68db      	ldr	r3, [r3, #12]
 801afe6:	899b      	ldrh	r3, [r3, #12]
 801afe8:	b29c      	uxth	r4, r3
 801afea:	2008      	movs	r0, #8
 801afec:	f7f6 feb0 	bl	8011d50 <lwip_htons>
 801aff0:	4603      	mov	r3, r0
 801aff2:	461a      	mov	r2, r3
 801aff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801aff6:	68db      	ldr	r3, [r3, #12]
 801aff8:	4322      	orrs	r2, r4
 801affa:	b292      	uxth	r2, r2
 801affc:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801affe:	2300      	movs	r3, #0
 801b000:	e031      	b.n	801b066 <tcp_write+0x6b2>
          goto memerr;
 801b002:	bf00      	nop
 801b004:	e006      	b.n	801b014 <tcp_write+0x660>
            goto memerr;
 801b006:	bf00      	nop
 801b008:	e004      	b.n	801b014 <tcp_write+0x660>
        goto memerr;
 801b00a:	bf00      	nop
 801b00c:	e002      	b.n	801b014 <tcp_write+0x660>
        goto memerr;
 801b00e:	bf00      	nop
 801b010:	e000      	b.n	801b014 <tcp_write+0x660>
      goto memerr;
 801b012:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b014:	68fb      	ldr	r3, [r7, #12]
 801b016:	8b5b      	ldrh	r3, [r3, #26]
 801b018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b01c:	b29a      	uxth	r2, r3
 801b01e:	68fb      	ldr	r3, [r7, #12]
 801b020:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801b022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b024:	2b00      	cmp	r3, #0
 801b026:	d002      	beq.n	801b02e <tcp_write+0x67a>
    pbuf_free(concat_p);
 801b028:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801b02a:	f7fa fd8d 	bl	8015b48 <pbuf_free>
  }
  if (queue != NULL) {
 801b02e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b030:	2b00      	cmp	r3, #0
 801b032:	d002      	beq.n	801b03a <tcp_write+0x686>
    tcp_segs_free(queue);
 801b034:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801b036:	f7fc fb6f 	bl	8017718 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801b03a:	68fb      	ldr	r3, [r7, #12]
 801b03c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b040:	2b00      	cmp	r3, #0
 801b042:	d00e      	beq.n	801b062 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801b044:	68fb      	ldr	r3, [r7, #12]
 801b046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b048:	2b00      	cmp	r3, #0
 801b04a:	d10a      	bne.n	801b062 <tcp_write+0x6ae>
 801b04c:	68fb      	ldr	r3, [r7, #12]
 801b04e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b050:	2b00      	cmp	r3, #0
 801b052:	d106      	bne.n	801b062 <tcp_write+0x6ae>
 801b054:	4b06      	ldr	r3, [pc, #24]	; (801b070 <tcp_write+0x6bc>)
 801b056:	f240 3227 	movw	r2, #807	; 0x327
 801b05a:	4906      	ldr	r1, [pc, #24]	; (801b074 <tcp_write+0x6c0>)
 801b05c:	4806      	ldr	r0, [pc, #24]	; (801b078 <tcp_write+0x6c4>)
 801b05e:	f005 fd85 	bl	8020b6c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801b062:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801b066:	4618      	mov	r0, r3
 801b068:	375c      	adds	r7, #92	; 0x5c
 801b06a:	46bd      	mov	sp, r7
 801b06c:	bd90      	pop	{r4, r7, pc}
 801b06e:	bf00      	nop
 801b070:	08027db8 	.word	0x08027db8
 801b074:	08028158 	.word	0x08028158
 801b078:	08027e38 	.word	0x08027e38

0801b07c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801b07c:	b590      	push	{r4, r7, lr}
 801b07e:	b08b      	sub	sp, #44	; 0x2c
 801b080:	af02      	add	r7, sp, #8
 801b082:	6078      	str	r0, [r7, #4]
 801b084:	460b      	mov	r3, r1
 801b086:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801b088:	2300      	movs	r3, #0
 801b08a:	61fb      	str	r3, [r7, #28]
 801b08c:	2300      	movs	r3, #0
 801b08e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801b090:	2300      	movs	r3, #0
 801b092:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801b094:	687b      	ldr	r3, [r7, #4]
 801b096:	2b00      	cmp	r3, #0
 801b098:	d106      	bne.n	801b0a8 <tcp_split_unsent_seg+0x2c>
 801b09a:	4b95      	ldr	r3, [pc, #596]	; (801b2f0 <tcp_split_unsent_seg+0x274>)
 801b09c:	f240 324b 	movw	r2, #843	; 0x34b
 801b0a0:	4994      	ldr	r1, [pc, #592]	; (801b2f4 <tcp_split_unsent_seg+0x278>)
 801b0a2:	4895      	ldr	r0, [pc, #596]	; (801b2f8 <tcp_split_unsent_seg+0x27c>)
 801b0a4:	f005 fd62 	bl	8020b6c <iprintf>

  useg = pcb->unsent;
 801b0a8:	687b      	ldr	r3, [r7, #4]
 801b0aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b0ac:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801b0ae:	697b      	ldr	r3, [r7, #20]
 801b0b0:	2b00      	cmp	r3, #0
 801b0b2:	d102      	bne.n	801b0ba <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801b0b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b0b8:	e116      	b.n	801b2e8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801b0ba:	887b      	ldrh	r3, [r7, #2]
 801b0bc:	2b00      	cmp	r3, #0
 801b0be:	d109      	bne.n	801b0d4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801b0c0:	4b8b      	ldr	r3, [pc, #556]	; (801b2f0 <tcp_split_unsent_seg+0x274>)
 801b0c2:	f240 3253 	movw	r2, #851	; 0x353
 801b0c6:	498d      	ldr	r1, [pc, #564]	; (801b2fc <tcp_split_unsent_seg+0x280>)
 801b0c8:	488b      	ldr	r0, [pc, #556]	; (801b2f8 <tcp_split_unsent_seg+0x27c>)
 801b0ca:	f005 fd4f 	bl	8020b6c <iprintf>
    return ERR_VAL;
 801b0ce:	f06f 0305 	mvn.w	r3, #5
 801b0d2:	e109      	b.n	801b2e8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801b0d4:	697b      	ldr	r3, [r7, #20]
 801b0d6:	891b      	ldrh	r3, [r3, #8]
 801b0d8:	887a      	ldrh	r2, [r7, #2]
 801b0da:	429a      	cmp	r2, r3
 801b0dc:	d301      	bcc.n	801b0e2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801b0de:	2300      	movs	r3, #0
 801b0e0:	e102      	b.n	801b2e8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801b0e2:	687b      	ldr	r3, [r7, #4]
 801b0e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b0e6:	887a      	ldrh	r2, [r7, #2]
 801b0e8:	429a      	cmp	r2, r3
 801b0ea:	d906      	bls.n	801b0fa <tcp_split_unsent_seg+0x7e>
 801b0ec:	4b80      	ldr	r3, [pc, #512]	; (801b2f0 <tcp_split_unsent_seg+0x274>)
 801b0ee:	f240 325b 	movw	r2, #859	; 0x35b
 801b0f2:	4983      	ldr	r1, [pc, #524]	; (801b300 <tcp_split_unsent_seg+0x284>)
 801b0f4:	4880      	ldr	r0, [pc, #512]	; (801b2f8 <tcp_split_unsent_seg+0x27c>)
 801b0f6:	f005 fd39 	bl	8020b6c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801b0fa:	697b      	ldr	r3, [r7, #20]
 801b0fc:	891b      	ldrh	r3, [r3, #8]
 801b0fe:	2b00      	cmp	r3, #0
 801b100:	d106      	bne.n	801b110 <tcp_split_unsent_seg+0x94>
 801b102:	4b7b      	ldr	r3, [pc, #492]	; (801b2f0 <tcp_split_unsent_seg+0x274>)
 801b104:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801b108:	497e      	ldr	r1, [pc, #504]	; (801b304 <tcp_split_unsent_seg+0x288>)
 801b10a:	487b      	ldr	r0, [pc, #492]	; (801b2f8 <tcp_split_unsent_seg+0x27c>)
 801b10c:	f005 fd2e 	bl	8020b6c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801b110:	697b      	ldr	r3, [r7, #20]
 801b112:	7a9b      	ldrb	r3, [r3, #10]
 801b114:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801b116:	7bfb      	ldrb	r3, [r7, #15]
 801b118:	009b      	lsls	r3, r3, #2
 801b11a:	b2db      	uxtb	r3, r3
 801b11c:	f003 0304 	and.w	r3, r3, #4
 801b120:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801b122:	697b      	ldr	r3, [r7, #20]
 801b124:	891a      	ldrh	r2, [r3, #8]
 801b126:	887b      	ldrh	r3, [r7, #2]
 801b128:	1ad3      	subs	r3, r2, r3
 801b12a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801b12c:	7bbb      	ldrb	r3, [r7, #14]
 801b12e:	b29a      	uxth	r2, r3
 801b130:	89bb      	ldrh	r3, [r7, #12]
 801b132:	4413      	add	r3, r2
 801b134:	b29b      	uxth	r3, r3
 801b136:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b13a:	4619      	mov	r1, r3
 801b13c:	2036      	movs	r0, #54	; 0x36
 801b13e:	f7fa fa1f 	bl	8015580 <pbuf_alloc>
 801b142:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b144:	693b      	ldr	r3, [r7, #16]
 801b146:	2b00      	cmp	r3, #0
 801b148:	f000 80b7 	beq.w	801b2ba <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801b14c:	697b      	ldr	r3, [r7, #20]
 801b14e:	685b      	ldr	r3, [r3, #4]
 801b150:	891a      	ldrh	r2, [r3, #8]
 801b152:	697b      	ldr	r3, [r7, #20]
 801b154:	891b      	ldrh	r3, [r3, #8]
 801b156:	1ad3      	subs	r3, r2, r3
 801b158:	b29a      	uxth	r2, r3
 801b15a:	887b      	ldrh	r3, [r7, #2]
 801b15c:	4413      	add	r3, r2
 801b15e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801b160:	697b      	ldr	r3, [r7, #20]
 801b162:	6858      	ldr	r0, [r3, #4]
 801b164:	693b      	ldr	r3, [r7, #16]
 801b166:	685a      	ldr	r2, [r3, #4]
 801b168:	7bbb      	ldrb	r3, [r7, #14]
 801b16a:	18d1      	adds	r1, r2, r3
 801b16c:	897b      	ldrh	r3, [r7, #10]
 801b16e:	89ba      	ldrh	r2, [r7, #12]
 801b170:	f7fa fed4 	bl	8015f1c <pbuf_copy_partial>
 801b174:	4603      	mov	r3, r0
 801b176:	461a      	mov	r2, r3
 801b178:	89bb      	ldrh	r3, [r7, #12]
 801b17a:	4293      	cmp	r3, r2
 801b17c:	f040 809f 	bne.w	801b2be <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801b180:	697b      	ldr	r3, [r7, #20]
 801b182:	68db      	ldr	r3, [r3, #12]
 801b184:	899b      	ldrh	r3, [r3, #12]
 801b186:	b29b      	uxth	r3, r3
 801b188:	4618      	mov	r0, r3
 801b18a:	f7f6 fde1 	bl	8011d50 <lwip_htons>
 801b18e:	4603      	mov	r3, r0
 801b190:	b2db      	uxtb	r3, r3
 801b192:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b196:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801b198:	2300      	movs	r3, #0
 801b19a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801b19c:	7efb      	ldrb	r3, [r7, #27]
 801b19e:	f003 0308 	and.w	r3, r3, #8
 801b1a2:	2b00      	cmp	r3, #0
 801b1a4:	d007      	beq.n	801b1b6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801b1a6:	7efb      	ldrb	r3, [r7, #27]
 801b1a8:	f023 0308 	bic.w	r3, r3, #8
 801b1ac:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801b1ae:	7ebb      	ldrb	r3, [r7, #26]
 801b1b0:	f043 0308 	orr.w	r3, r3, #8
 801b1b4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801b1b6:	7efb      	ldrb	r3, [r7, #27]
 801b1b8:	f003 0301 	and.w	r3, r3, #1
 801b1bc:	2b00      	cmp	r3, #0
 801b1be:	d007      	beq.n	801b1d0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801b1c0:	7efb      	ldrb	r3, [r7, #27]
 801b1c2:	f023 0301 	bic.w	r3, r3, #1
 801b1c6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801b1c8:	7ebb      	ldrb	r3, [r7, #26]
 801b1ca:	f043 0301 	orr.w	r3, r3, #1
 801b1ce:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801b1d0:	697b      	ldr	r3, [r7, #20]
 801b1d2:	68db      	ldr	r3, [r3, #12]
 801b1d4:	685b      	ldr	r3, [r3, #4]
 801b1d6:	4618      	mov	r0, r3
 801b1d8:	f7f6 fdcf 	bl	8011d7a <lwip_htonl>
 801b1dc:	4602      	mov	r2, r0
 801b1de:	887b      	ldrh	r3, [r7, #2]
 801b1e0:	18d1      	adds	r1, r2, r3
 801b1e2:	7eba      	ldrb	r2, [r7, #26]
 801b1e4:	7bfb      	ldrb	r3, [r7, #15]
 801b1e6:	9300      	str	r3, [sp, #0]
 801b1e8:	460b      	mov	r3, r1
 801b1ea:	6939      	ldr	r1, [r7, #16]
 801b1ec:	6878      	ldr	r0, [r7, #4]
 801b1ee:	f7ff fa4f 	bl	801a690 <tcp_create_segment>
 801b1f2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801b1f4:	69fb      	ldr	r3, [r7, #28]
 801b1f6:	2b00      	cmp	r3, #0
 801b1f8:	d063      	beq.n	801b2c2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801b1fa:	697b      	ldr	r3, [r7, #20]
 801b1fc:	685b      	ldr	r3, [r3, #4]
 801b1fe:	4618      	mov	r0, r3
 801b200:	f7fa fd2a 	bl	8015c58 <pbuf_clen>
 801b204:	4603      	mov	r3, r0
 801b206:	461a      	mov	r2, r3
 801b208:	687b      	ldr	r3, [r7, #4]
 801b20a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b20e:	1a9b      	subs	r3, r3, r2
 801b210:	b29a      	uxth	r2, r3
 801b212:	687b      	ldr	r3, [r7, #4]
 801b214:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801b218:	697b      	ldr	r3, [r7, #20]
 801b21a:	6858      	ldr	r0, [r3, #4]
 801b21c:	697b      	ldr	r3, [r7, #20]
 801b21e:	685b      	ldr	r3, [r3, #4]
 801b220:	891a      	ldrh	r2, [r3, #8]
 801b222:	89bb      	ldrh	r3, [r7, #12]
 801b224:	1ad3      	subs	r3, r2, r3
 801b226:	b29b      	uxth	r3, r3
 801b228:	4619      	mov	r1, r3
 801b22a:	f7fa fb07 	bl	801583c <pbuf_realloc>
  useg->len -= remainder;
 801b22e:	697b      	ldr	r3, [r7, #20]
 801b230:	891a      	ldrh	r2, [r3, #8]
 801b232:	89bb      	ldrh	r3, [r7, #12]
 801b234:	1ad3      	subs	r3, r2, r3
 801b236:	b29a      	uxth	r2, r3
 801b238:	697b      	ldr	r3, [r7, #20]
 801b23a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801b23c:	697b      	ldr	r3, [r7, #20]
 801b23e:	68db      	ldr	r3, [r3, #12]
 801b240:	899b      	ldrh	r3, [r3, #12]
 801b242:	b29c      	uxth	r4, r3
 801b244:	7efb      	ldrb	r3, [r7, #27]
 801b246:	b29b      	uxth	r3, r3
 801b248:	4618      	mov	r0, r3
 801b24a:	f7f6 fd81 	bl	8011d50 <lwip_htons>
 801b24e:	4603      	mov	r3, r0
 801b250:	461a      	mov	r2, r3
 801b252:	697b      	ldr	r3, [r7, #20]
 801b254:	68db      	ldr	r3, [r3, #12]
 801b256:	4322      	orrs	r2, r4
 801b258:	b292      	uxth	r2, r2
 801b25a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801b25c:	697b      	ldr	r3, [r7, #20]
 801b25e:	685b      	ldr	r3, [r3, #4]
 801b260:	4618      	mov	r0, r3
 801b262:	f7fa fcf9 	bl	8015c58 <pbuf_clen>
 801b266:	4603      	mov	r3, r0
 801b268:	461a      	mov	r2, r3
 801b26a:	687b      	ldr	r3, [r7, #4]
 801b26c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b270:	4413      	add	r3, r2
 801b272:	b29a      	uxth	r2, r3
 801b274:	687b      	ldr	r3, [r7, #4]
 801b276:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801b27a:	69fb      	ldr	r3, [r7, #28]
 801b27c:	685b      	ldr	r3, [r3, #4]
 801b27e:	4618      	mov	r0, r3
 801b280:	f7fa fcea 	bl	8015c58 <pbuf_clen>
 801b284:	4603      	mov	r3, r0
 801b286:	461a      	mov	r2, r3
 801b288:	687b      	ldr	r3, [r7, #4]
 801b28a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b28e:	4413      	add	r3, r2
 801b290:	b29a      	uxth	r2, r3
 801b292:	687b      	ldr	r3, [r7, #4]
 801b294:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801b298:	697b      	ldr	r3, [r7, #20]
 801b29a:	681a      	ldr	r2, [r3, #0]
 801b29c:	69fb      	ldr	r3, [r7, #28]
 801b29e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801b2a0:	697b      	ldr	r3, [r7, #20]
 801b2a2:	69fa      	ldr	r2, [r7, #28]
 801b2a4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801b2a6:	69fb      	ldr	r3, [r7, #28]
 801b2a8:	681b      	ldr	r3, [r3, #0]
 801b2aa:	2b00      	cmp	r3, #0
 801b2ac:	d103      	bne.n	801b2b6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801b2ae:	687b      	ldr	r3, [r7, #4]
 801b2b0:	2200      	movs	r2, #0
 801b2b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801b2b6:	2300      	movs	r3, #0
 801b2b8:	e016      	b.n	801b2e8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801b2ba:	bf00      	nop
 801b2bc:	e002      	b.n	801b2c4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801b2be:	bf00      	nop
 801b2c0:	e000      	b.n	801b2c4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801b2c2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801b2c4:	69fb      	ldr	r3, [r7, #28]
 801b2c6:	2b00      	cmp	r3, #0
 801b2c8:	d006      	beq.n	801b2d8 <tcp_split_unsent_seg+0x25c>
 801b2ca:	4b09      	ldr	r3, [pc, #36]	; (801b2f0 <tcp_split_unsent_seg+0x274>)
 801b2cc:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801b2d0:	490d      	ldr	r1, [pc, #52]	; (801b308 <tcp_split_unsent_seg+0x28c>)
 801b2d2:	4809      	ldr	r0, [pc, #36]	; (801b2f8 <tcp_split_unsent_seg+0x27c>)
 801b2d4:	f005 fc4a 	bl	8020b6c <iprintf>
  if (p != NULL) {
 801b2d8:	693b      	ldr	r3, [r7, #16]
 801b2da:	2b00      	cmp	r3, #0
 801b2dc:	d002      	beq.n	801b2e4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801b2de:	6938      	ldr	r0, [r7, #16]
 801b2e0:	f7fa fc32 	bl	8015b48 <pbuf_free>
  }

  return ERR_MEM;
 801b2e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801b2e8:	4618      	mov	r0, r3
 801b2ea:	3724      	adds	r7, #36	; 0x24
 801b2ec:	46bd      	mov	sp, r7
 801b2ee:	bd90      	pop	{r4, r7, pc}
 801b2f0:	08027db8 	.word	0x08027db8
 801b2f4:	08028178 	.word	0x08028178
 801b2f8:	08027e38 	.word	0x08027e38
 801b2fc:	0802819c 	.word	0x0802819c
 801b300:	080281c0 	.word	0x080281c0
 801b304:	080281d0 	.word	0x080281d0
 801b308:	080281e0 	.word	0x080281e0

0801b30c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801b30c:	b590      	push	{r4, r7, lr}
 801b30e:	b085      	sub	sp, #20
 801b310:	af00      	add	r7, sp, #0
 801b312:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801b314:	687b      	ldr	r3, [r7, #4]
 801b316:	2b00      	cmp	r3, #0
 801b318:	d106      	bne.n	801b328 <tcp_send_fin+0x1c>
 801b31a:	4b21      	ldr	r3, [pc, #132]	; (801b3a0 <tcp_send_fin+0x94>)
 801b31c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801b320:	4920      	ldr	r1, [pc, #128]	; (801b3a4 <tcp_send_fin+0x98>)
 801b322:	4821      	ldr	r0, [pc, #132]	; (801b3a8 <tcp_send_fin+0x9c>)
 801b324:	f005 fc22 	bl	8020b6c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801b328:	687b      	ldr	r3, [r7, #4]
 801b32a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b32c:	2b00      	cmp	r3, #0
 801b32e:	d02e      	beq.n	801b38e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801b330:	687b      	ldr	r3, [r7, #4]
 801b332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b334:	60fb      	str	r3, [r7, #12]
 801b336:	e002      	b.n	801b33e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801b338:	68fb      	ldr	r3, [r7, #12]
 801b33a:	681b      	ldr	r3, [r3, #0]
 801b33c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801b33e:	68fb      	ldr	r3, [r7, #12]
 801b340:	681b      	ldr	r3, [r3, #0]
 801b342:	2b00      	cmp	r3, #0
 801b344:	d1f8      	bne.n	801b338 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801b346:	68fb      	ldr	r3, [r7, #12]
 801b348:	68db      	ldr	r3, [r3, #12]
 801b34a:	899b      	ldrh	r3, [r3, #12]
 801b34c:	b29b      	uxth	r3, r3
 801b34e:	4618      	mov	r0, r3
 801b350:	f7f6 fcfe 	bl	8011d50 <lwip_htons>
 801b354:	4603      	mov	r3, r0
 801b356:	b2db      	uxtb	r3, r3
 801b358:	f003 0307 	and.w	r3, r3, #7
 801b35c:	2b00      	cmp	r3, #0
 801b35e:	d116      	bne.n	801b38e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801b360:	68fb      	ldr	r3, [r7, #12]
 801b362:	68db      	ldr	r3, [r3, #12]
 801b364:	899b      	ldrh	r3, [r3, #12]
 801b366:	b29c      	uxth	r4, r3
 801b368:	2001      	movs	r0, #1
 801b36a:	f7f6 fcf1 	bl	8011d50 <lwip_htons>
 801b36e:	4603      	mov	r3, r0
 801b370:	461a      	mov	r2, r3
 801b372:	68fb      	ldr	r3, [r7, #12]
 801b374:	68db      	ldr	r3, [r3, #12]
 801b376:	4322      	orrs	r2, r4
 801b378:	b292      	uxth	r2, r2
 801b37a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801b37c:	687b      	ldr	r3, [r7, #4]
 801b37e:	8b5b      	ldrh	r3, [r3, #26]
 801b380:	f043 0320 	orr.w	r3, r3, #32
 801b384:	b29a      	uxth	r2, r3
 801b386:	687b      	ldr	r3, [r7, #4]
 801b388:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801b38a:	2300      	movs	r3, #0
 801b38c:	e004      	b.n	801b398 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801b38e:	2101      	movs	r1, #1
 801b390:	6878      	ldr	r0, [r7, #4]
 801b392:	f000 f80b 	bl	801b3ac <tcp_enqueue_flags>
 801b396:	4603      	mov	r3, r0
}
 801b398:	4618      	mov	r0, r3
 801b39a:	3714      	adds	r7, #20
 801b39c:	46bd      	mov	sp, r7
 801b39e:	bd90      	pop	{r4, r7, pc}
 801b3a0:	08027db8 	.word	0x08027db8
 801b3a4:	080281ec 	.word	0x080281ec
 801b3a8:	08027e38 	.word	0x08027e38

0801b3ac <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801b3ac:	b580      	push	{r7, lr}
 801b3ae:	b08a      	sub	sp, #40	; 0x28
 801b3b0:	af02      	add	r7, sp, #8
 801b3b2:	6078      	str	r0, [r7, #4]
 801b3b4:	460b      	mov	r3, r1
 801b3b6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801b3b8:	2300      	movs	r3, #0
 801b3ba:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801b3bc:	2300      	movs	r3, #0
 801b3be:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801b3c0:	78fb      	ldrb	r3, [r7, #3]
 801b3c2:	f003 0303 	and.w	r3, r3, #3
 801b3c6:	2b00      	cmp	r3, #0
 801b3c8:	d106      	bne.n	801b3d8 <tcp_enqueue_flags+0x2c>
 801b3ca:	4b67      	ldr	r3, [pc, #412]	; (801b568 <tcp_enqueue_flags+0x1bc>)
 801b3cc:	f240 4211 	movw	r2, #1041	; 0x411
 801b3d0:	4966      	ldr	r1, [pc, #408]	; (801b56c <tcp_enqueue_flags+0x1c0>)
 801b3d2:	4867      	ldr	r0, [pc, #412]	; (801b570 <tcp_enqueue_flags+0x1c4>)
 801b3d4:	f005 fbca 	bl	8020b6c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801b3d8:	687b      	ldr	r3, [r7, #4]
 801b3da:	2b00      	cmp	r3, #0
 801b3dc:	d106      	bne.n	801b3ec <tcp_enqueue_flags+0x40>
 801b3de:	4b62      	ldr	r3, [pc, #392]	; (801b568 <tcp_enqueue_flags+0x1bc>)
 801b3e0:	f240 4213 	movw	r2, #1043	; 0x413
 801b3e4:	4963      	ldr	r1, [pc, #396]	; (801b574 <tcp_enqueue_flags+0x1c8>)
 801b3e6:	4862      	ldr	r0, [pc, #392]	; (801b570 <tcp_enqueue_flags+0x1c4>)
 801b3e8:	f005 fbc0 	bl	8020b6c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801b3ec:	78fb      	ldrb	r3, [r7, #3]
 801b3ee:	f003 0302 	and.w	r3, r3, #2
 801b3f2:	2b00      	cmp	r3, #0
 801b3f4:	d001      	beq.n	801b3fa <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801b3f6:	2301      	movs	r3, #1
 801b3f8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801b3fa:	7ffb      	ldrb	r3, [r7, #31]
 801b3fc:	009b      	lsls	r3, r3, #2
 801b3fe:	b2db      	uxtb	r3, r3
 801b400:	f003 0304 	and.w	r3, r3, #4
 801b404:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801b406:	7dfb      	ldrb	r3, [r7, #23]
 801b408:	b29b      	uxth	r3, r3
 801b40a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b40e:	4619      	mov	r1, r3
 801b410:	2036      	movs	r0, #54	; 0x36
 801b412:	f7fa f8b5 	bl	8015580 <pbuf_alloc>
 801b416:	6138      	str	r0, [r7, #16]
 801b418:	693b      	ldr	r3, [r7, #16]
 801b41a:	2b00      	cmp	r3, #0
 801b41c:	d109      	bne.n	801b432 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b41e:	687b      	ldr	r3, [r7, #4]
 801b420:	8b5b      	ldrh	r3, [r3, #26]
 801b422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b426:	b29a      	uxth	r2, r3
 801b428:	687b      	ldr	r3, [r7, #4]
 801b42a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801b42c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b430:	e095      	b.n	801b55e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801b432:	693b      	ldr	r3, [r7, #16]
 801b434:	895a      	ldrh	r2, [r3, #10]
 801b436:	7dfb      	ldrb	r3, [r7, #23]
 801b438:	b29b      	uxth	r3, r3
 801b43a:	429a      	cmp	r2, r3
 801b43c:	d206      	bcs.n	801b44c <tcp_enqueue_flags+0xa0>
 801b43e:	4b4a      	ldr	r3, [pc, #296]	; (801b568 <tcp_enqueue_flags+0x1bc>)
 801b440:	f240 4239 	movw	r2, #1081	; 0x439
 801b444:	494c      	ldr	r1, [pc, #304]	; (801b578 <tcp_enqueue_flags+0x1cc>)
 801b446:	484a      	ldr	r0, [pc, #296]	; (801b570 <tcp_enqueue_flags+0x1c4>)
 801b448:	f005 fb90 	bl	8020b6c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801b44c:	687b      	ldr	r3, [r7, #4]
 801b44e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801b450:	78fa      	ldrb	r2, [r7, #3]
 801b452:	7ffb      	ldrb	r3, [r7, #31]
 801b454:	9300      	str	r3, [sp, #0]
 801b456:	460b      	mov	r3, r1
 801b458:	6939      	ldr	r1, [r7, #16]
 801b45a:	6878      	ldr	r0, [r7, #4]
 801b45c:	f7ff f918 	bl	801a690 <tcp_create_segment>
 801b460:	60f8      	str	r0, [r7, #12]
 801b462:	68fb      	ldr	r3, [r7, #12]
 801b464:	2b00      	cmp	r3, #0
 801b466:	d109      	bne.n	801b47c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b468:	687b      	ldr	r3, [r7, #4]
 801b46a:	8b5b      	ldrh	r3, [r3, #26]
 801b46c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b470:	b29a      	uxth	r2, r3
 801b472:	687b      	ldr	r3, [r7, #4]
 801b474:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801b476:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b47a:	e070      	b.n	801b55e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801b47c:	68fb      	ldr	r3, [r7, #12]
 801b47e:	68db      	ldr	r3, [r3, #12]
 801b480:	f003 0303 	and.w	r3, r3, #3
 801b484:	2b00      	cmp	r3, #0
 801b486:	d006      	beq.n	801b496 <tcp_enqueue_flags+0xea>
 801b488:	4b37      	ldr	r3, [pc, #220]	; (801b568 <tcp_enqueue_flags+0x1bc>)
 801b48a:	f240 4242 	movw	r2, #1090	; 0x442
 801b48e:	493b      	ldr	r1, [pc, #236]	; (801b57c <tcp_enqueue_flags+0x1d0>)
 801b490:	4837      	ldr	r0, [pc, #220]	; (801b570 <tcp_enqueue_flags+0x1c4>)
 801b492:	f005 fb6b 	bl	8020b6c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801b496:	68fb      	ldr	r3, [r7, #12]
 801b498:	891b      	ldrh	r3, [r3, #8]
 801b49a:	2b00      	cmp	r3, #0
 801b49c:	d006      	beq.n	801b4ac <tcp_enqueue_flags+0x100>
 801b49e:	4b32      	ldr	r3, [pc, #200]	; (801b568 <tcp_enqueue_flags+0x1bc>)
 801b4a0:	f240 4243 	movw	r2, #1091	; 0x443
 801b4a4:	4936      	ldr	r1, [pc, #216]	; (801b580 <tcp_enqueue_flags+0x1d4>)
 801b4a6:	4832      	ldr	r0, [pc, #200]	; (801b570 <tcp_enqueue_flags+0x1c4>)
 801b4a8:	f005 fb60 	bl	8020b6c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801b4ac:	687b      	ldr	r3, [r7, #4]
 801b4ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b4b0:	2b00      	cmp	r3, #0
 801b4b2:	d103      	bne.n	801b4bc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801b4b4:	687b      	ldr	r3, [r7, #4]
 801b4b6:	68fa      	ldr	r2, [r7, #12]
 801b4b8:	66da      	str	r2, [r3, #108]	; 0x6c
 801b4ba:	e00d      	b.n	801b4d8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801b4bc:	687b      	ldr	r3, [r7, #4]
 801b4be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b4c0:	61bb      	str	r3, [r7, #24]
 801b4c2:	e002      	b.n	801b4ca <tcp_enqueue_flags+0x11e>
 801b4c4:	69bb      	ldr	r3, [r7, #24]
 801b4c6:	681b      	ldr	r3, [r3, #0]
 801b4c8:	61bb      	str	r3, [r7, #24]
 801b4ca:	69bb      	ldr	r3, [r7, #24]
 801b4cc:	681b      	ldr	r3, [r3, #0]
 801b4ce:	2b00      	cmp	r3, #0
 801b4d0:	d1f8      	bne.n	801b4c4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801b4d2:	69bb      	ldr	r3, [r7, #24]
 801b4d4:	68fa      	ldr	r2, [r7, #12]
 801b4d6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801b4d8:	687b      	ldr	r3, [r7, #4]
 801b4da:	2200      	movs	r2, #0
 801b4dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801b4e0:	78fb      	ldrb	r3, [r7, #3]
 801b4e2:	f003 0302 	and.w	r3, r3, #2
 801b4e6:	2b00      	cmp	r3, #0
 801b4e8:	d104      	bne.n	801b4f4 <tcp_enqueue_flags+0x148>
 801b4ea:	78fb      	ldrb	r3, [r7, #3]
 801b4ec:	f003 0301 	and.w	r3, r3, #1
 801b4f0:	2b00      	cmp	r3, #0
 801b4f2:	d004      	beq.n	801b4fe <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801b4f4:	687b      	ldr	r3, [r7, #4]
 801b4f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b4f8:	1c5a      	adds	r2, r3, #1
 801b4fa:	687b      	ldr	r3, [r7, #4]
 801b4fc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801b4fe:	78fb      	ldrb	r3, [r7, #3]
 801b500:	f003 0301 	and.w	r3, r3, #1
 801b504:	2b00      	cmp	r3, #0
 801b506:	d006      	beq.n	801b516 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801b508:	687b      	ldr	r3, [r7, #4]
 801b50a:	8b5b      	ldrh	r3, [r3, #26]
 801b50c:	f043 0320 	orr.w	r3, r3, #32
 801b510:	b29a      	uxth	r2, r3
 801b512:	687b      	ldr	r3, [r7, #4]
 801b514:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801b516:	68fb      	ldr	r3, [r7, #12]
 801b518:	685b      	ldr	r3, [r3, #4]
 801b51a:	4618      	mov	r0, r3
 801b51c:	f7fa fb9c 	bl	8015c58 <pbuf_clen>
 801b520:	4603      	mov	r3, r0
 801b522:	461a      	mov	r2, r3
 801b524:	687b      	ldr	r3, [r7, #4]
 801b526:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b52a:	4413      	add	r3, r2
 801b52c:	b29a      	uxth	r2, r3
 801b52e:	687b      	ldr	r3, [r7, #4]
 801b530:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801b534:	687b      	ldr	r3, [r7, #4]
 801b536:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b53a:	2b00      	cmp	r3, #0
 801b53c:	d00e      	beq.n	801b55c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801b53e:	687b      	ldr	r3, [r7, #4]
 801b540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b542:	2b00      	cmp	r3, #0
 801b544:	d10a      	bne.n	801b55c <tcp_enqueue_flags+0x1b0>
 801b546:	687b      	ldr	r3, [r7, #4]
 801b548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b54a:	2b00      	cmp	r3, #0
 801b54c:	d106      	bne.n	801b55c <tcp_enqueue_flags+0x1b0>
 801b54e:	4b06      	ldr	r3, [pc, #24]	; (801b568 <tcp_enqueue_flags+0x1bc>)
 801b550:	f240 4265 	movw	r2, #1125	; 0x465
 801b554:	490b      	ldr	r1, [pc, #44]	; (801b584 <tcp_enqueue_flags+0x1d8>)
 801b556:	4806      	ldr	r0, [pc, #24]	; (801b570 <tcp_enqueue_flags+0x1c4>)
 801b558:	f005 fb08 	bl	8020b6c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801b55c:	2300      	movs	r3, #0
}
 801b55e:	4618      	mov	r0, r3
 801b560:	3720      	adds	r7, #32
 801b562:	46bd      	mov	sp, r7
 801b564:	bd80      	pop	{r7, pc}
 801b566:	bf00      	nop
 801b568:	08027db8 	.word	0x08027db8
 801b56c:	08028208 	.word	0x08028208
 801b570:	08027e38 	.word	0x08027e38
 801b574:	08028260 	.word	0x08028260
 801b578:	08028280 	.word	0x08028280
 801b57c:	080282bc 	.word	0x080282bc
 801b580:	080282d4 	.word	0x080282d4
 801b584:	08028300 	.word	0x08028300

0801b588 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801b588:	b5b0      	push	{r4, r5, r7, lr}
 801b58a:	b08a      	sub	sp, #40	; 0x28
 801b58c:	af00      	add	r7, sp, #0
 801b58e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801b590:	687b      	ldr	r3, [r7, #4]
 801b592:	2b00      	cmp	r3, #0
 801b594:	d106      	bne.n	801b5a4 <tcp_output+0x1c>
 801b596:	4b9e      	ldr	r3, [pc, #632]	; (801b810 <tcp_output+0x288>)
 801b598:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801b59c:	499d      	ldr	r1, [pc, #628]	; (801b814 <tcp_output+0x28c>)
 801b59e:	489e      	ldr	r0, [pc, #632]	; (801b818 <tcp_output+0x290>)
 801b5a0:	f005 fae4 	bl	8020b6c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801b5a4:	687b      	ldr	r3, [r7, #4]
 801b5a6:	7d1b      	ldrb	r3, [r3, #20]
 801b5a8:	2b01      	cmp	r3, #1
 801b5aa:	d106      	bne.n	801b5ba <tcp_output+0x32>
 801b5ac:	4b98      	ldr	r3, [pc, #608]	; (801b810 <tcp_output+0x288>)
 801b5ae:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801b5b2:	499a      	ldr	r1, [pc, #616]	; (801b81c <tcp_output+0x294>)
 801b5b4:	4898      	ldr	r0, [pc, #608]	; (801b818 <tcp_output+0x290>)
 801b5b6:	f005 fad9 	bl	8020b6c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801b5ba:	4b99      	ldr	r3, [pc, #612]	; (801b820 <tcp_output+0x298>)
 801b5bc:	681b      	ldr	r3, [r3, #0]
 801b5be:	687a      	ldr	r2, [r7, #4]
 801b5c0:	429a      	cmp	r2, r3
 801b5c2:	d101      	bne.n	801b5c8 <tcp_output+0x40>
    return ERR_OK;
 801b5c4:	2300      	movs	r3, #0
 801b5c6:	e1ce      	b.n	801b966 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801b5c8:	687b      	ldr	r3, [r7, #4]
 801b5ca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b5ce:	687b      	ldr	r3, [r7, #4]
 801b5d0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b5d4:	4293      	cmp	r3, r2
 801b5d6:	bf28      	it	cs
 801b5d8:	4613      	movcs	r3, r2
 801b5da:	b29b      	uxth	r3, r3
 801b5dc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801b5de:	687b      	ldr	r3, [r7, #4]
 801b5e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b5e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801b5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b5e6:	2b00      	cmp	r3, #0
 801b5e8:	d10b      	bne.n	801b602 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801b5ea:	687b      	ldr	r3, [r7, #4]
 801b5ec:	8b5b      	ldrh	r3, [r3, #26]
 801b5ee:	f003 0302 	and.w	r3, r3, #2
 801b5f2:	2b00      	cmp	r3, #0
 801b5f4:	f000 81aa 	beq.w	801b94c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801b5f8:	6878      	ldr	r0, [r7, #4]
 801b5fa:	f000 fdcb 	bl	801c194 <tcp_send_empty_ack>
 801b5fe:	4603      	mov	r3, r0
 801b600:	e1b1      	b.n	801b966 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801b602:	6879      	ldr	r1, [r7, #4]
 801b604:	687b      	ldr	r3, [r7, #4]
 801b606:	3304      	adds	r3, #4
 801b608:	461a      	mov	r2, r3
 801b60a:	6878      	ldr	r0, [r7, #4]
 801b60c:	f7ff f824 	bl	801a658 <tcp_route>
 801b610:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801b612:	697b      	ldr	r3, [r7, #20]
 801b614:	2b00      	cmp	r3, #0
 801b616:	d102      	bne.n	801b61e <tcp_output+0x96>
    return ERR_RTE;
 801b618:	f06f 0303 	mvn.w	r3, #3
 801b61c:	e1a3      	b.n	801b966 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801b61e:	687b      	ldr	r3, [r7, #4]
 801b620:	2b00      	cmp	r3, #0
 801b622:	d003      	beq.n	801b62c <tcp_output+0xa4>
 801b624:	687b      	ldr	r3, [r7, #4]
 801b626:	681b      	ldr	r3, [r3, #0]
 801b628:	2b00      	cmp	r3, #0
 801b62a:	d111      	bne.n	801b650 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801b62c:	697b      	ldr	r3, [r7, #20]
 801b62e:	2b00      	cmp	r3, #0
 801b630:	d002      	beq.n	801b638 <tcp_output+0xb0>
 801b632:	697b      	ldr	r3, [r7, #20]
 801b634:	3304      	adds	r3, #4
 801b636:	e000      	b.n	801b63a <tcp_output+0xb2>
 801b638:	2300      	movs	r3, #0
 801b63a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801b63c:	693b      	ldr	r3, [r7, #16]
 801b63e:	2b00      	cmp	r3, #0
 801b640:	d102      	bne.n	801b648 <tcp_output+0xc0>
      return ERR_RTE;
 801b642:	f06f 0303 	mvn.w	r3, #3
 801b646:	e18e      	b.n	801b966 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801b648:	693b      	ldr	r3, [r7, #16]
 801b64a:	681a      	ldr	r2, [r3, #0]
 801b64c:	687b      	ldr	r3, [r7, #4]
 801b64e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801b650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b652:	68db      	ldr	r3, [r3, #12]
 801b654:	685b      	ldr	r3, [r3, #4]
 801b656:	4618      	mov	r0, r3
 801b658:	f7f6 fb8f 	bl	8011d7a <lwip_htonl>
 801b65c:	4602      	mov	r2, r0
 801b65e:	687b      	ldr	r3, [r7, #4]
 801b660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b662:	1ad3      	subs	r3, r2, r3
 801b664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b666:	8912      	ldrh	r2, [r2, #8]
 801b668:	4413      	add	r3, r2
 801b66a:	69ba      	ldr	r2, [r7, #24]
 801b66c:	429a      	cmp	r2, r3
 801b66e:	d227      	bcs.n	801b6c0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801b670:	687b      	ldr	r3, [r7, #4]
 801b672:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b676:	461a      	mov	r2, r3
 801b678:	69bb      	ldr	r3, [r7, #24]
 801b67a:	4293      	cmp	r3, r2
 801b67c:	d114      	bne.n	801b6a8 <tcp_output+0x120>
 801b67e:	687b      	ldr	r3, [r7, #4]
 801b680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b682:	2b00      	cmp	r3, #0
 801b684:	d110      	bne.n	801b6a8 <tcp_output+0x120>
 801b686:	687b      	ldr	r3, [r7, #4]
 801b688:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801b68c:	2b00      	cmp	r3, #0
 801b68e:	d10b      	bne.n	801b6a8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801b690:	687b      	ldr	r3, [r7, #4]
 801b692:	2200      	movs	r2, #0
 801b694:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801b698:	687b      	ldr	r3, [r7, #4]
 801b69a:	2201      	movs	r2, #1
 801b69c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801b6a0:	687b      	ldr	r3, [r7, #4]
 801b6a2:	2200      	movs	r2, #0
 801b6a4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801b6a8:	687b      	ldr	r3, [r7, #4]
 801b6aa:	8b5b      	ldrh	r3, [r3, #26]
 801b6ac:	f003 0302 	and.w	r3, r3, #2
 801b6b0:	2b00      	cmp	r3, #0
 801b6b2:	f000 814d 	beq.w	801b950 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801b6b6:	6878      	ldr	r0, [r7, #4]
 801b6b8:	f000 fd6c 	bl	801c194 <tcp_send_empty_ack>
 801b6bc:	4603      	mov	r3, r0
 801b6be:	e152      	b.n	801b966 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801b6c0:	687b      	ldr	r3, [r7, #4]
 801b6c2:	2200      	movs	r2, #0
 801b6c4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801b6c8:	687b      	ldr	r3, [r7, #4]
 801b6ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b6cc:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801b6ce:	6a3b      	ldr	r3, [r7, #32]
 801b6d0:	2b00      	cmp	r3, #0
 801b6d2:	f000 811c 	beq.w	801b90e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801b6d6:	e002      	b.n	801b6de <tcp_output+0x156>
 801b6d8:	6a3b      	ldr	r3, [r7, #32]
 801b6da:	681b      	ldr	r3, [r3, #0]
 801b6dc:	623b      	str	r3, [r7, #32]
 801b6de:	6a3b      	ldr	r3, [r7, #32]
 801b6e0:	681b      	ldr	r3, [r3, #0]
 801b6e2:	2b00      	cmp	r3, #0
 801b6e4:	d1f8      	bne.n	801b6d8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801b6e6:	e112      	b.n	801b90e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801b6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6ea:	68db      	ldr	r3, [r3, #12]
 801b6ec:	899b      	ldrh	r3, [r3, #12]
 801b6ee:	b29b      	uxth	r3, r3
 801b6f0:	4618      	mov	r0, r3
 801b6f2:	f7f6 fb2d 	bl	8011d50 <lwip_htons>
 801b6f6:	4603      	mov	r3, r0
 801b6f8:	b2db      	uxtb	r3, r3
 801b6fa:	f003 0304 	and.w	r3, r3, #4
 801b6fe:	2b00      	cmp	r3, #0
 801b700:	d006      	beq.n	801b710 <tcp_output+0x188>
 801b702:	4b43      	ldr	r3, [pc, #268]	; (801b810 <tcp_output+0x288>)
 801b704:	f240 5236 	movw	r2, #1334	; 0x536
 801b708:	4946      	ldr	r1, [pc, #280]	; (801b824 <tcp_output+0x29c>)
 801b70a:	4843      	ldr	r0, [pc, #268]	; (801b818 <tcp_output+0x290>)
 801b70c:	f005 fa2e 	bl	8020b6c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801b710:	687b      	ldr	r3, [r7, #4]
 801b712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b714:	2b00      	cmp	r3, #0
 801b716:	d01f      	beq.n	801b758 <tcp_output+0x1d0>
 801b718:	687b      	ldr	r3, [r7, #4]
 801b71a:	8b5b      	ldrh	r3, [r3, #26]
 801b71c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801b720:	2b00      	cmp	r3, #0
 801b722:	d119      	bne.n	801b758 <tcp_output+0x1d0>
 801b724:	687b      	ldr	r3, [r7, #4]
 801b726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b728:	2b00      	cmp	r3, #0
 801b72a:	d00b      	beq.n	801b744 <tcp_output+0x1bc>
 801b72c:	687b      	ldr	r3, [r7, #4]
 801b72e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b730:	681b      	ldr	r3, [r3, #0]
 801b732:	2b00      	cmp	r3, #0
 801b734:	d110      	bne.n	801b758 <tcp_output+0x1d0>
 801b736:	687b      	ldr	r3, [r7, #4]
 801b738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b73a:	891a      	ldrh	r2, [r3, #8]
 801b73c:	687b      	ldr	r3, [r7, #4]
 801b73e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b740:	429a      	cmp	r2, r3
 801b742:	d209      	bcs.n	801b758 <tcp_output+0x1d0>
 801b744:	687b      	ldr	r3, [r7, #4]
 801b746:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801b74a:	2b00      	cmp	r3, #0
 801b74c:	d004      	beq.n	801b758 <tcp_output+0x1d0>
 801b74e:	687b      	ldr	r3, [r7, #4]
 801b750:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b754:	2b08      	cmp	r3, #8
 801b756:	d901      	bls.n	801b75c <tcp_output+0x1d4>
 801b758:	2301      	movs	r3, #1
 801b75a:	e000      	b.n	801b75e <tcp_output+0x1d6>
 801b75c:	2300      	movs	r3, #0
 801b75e:	2b00      	cmp	r3, #0
 801b760:	d106      	bne.n	801b770 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801b762:	687b      	ldr	r3, [r7, #4]
 801b764:	8b5b      	ldrh	r3, [r3, #26]
 801b766:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801b76a:	2b00      	cmp	r3, #0
 801b76c:	f000 80e4 	beq.w	801b938 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801b770:	687b      	ldr	r3, [r7, #4]
 801b772:	7d1b      	ldrb	r3, [r3, #20]
 801b774:	2b02      	cmp	r3, #2
 801b776:	d00d      	beq.n	801b794 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801b778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b77a:	68db      	ldr	r3, [r3, #12]
 801b77c:	899b      	ldrh	r3, [r3, #12]
 801b77e:	b29c      	uxth	r4, r3
 801b780:	2010      	movs	r0, #16
 801b782:	f7f6 fae5 	bl	8011d50 <lwip_htons>
 801b786:	4603      	mov	r3, r0
 801b788:	461a      	mov	r2, r3
 801b78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b78c:	68db      	ldr	r3, [r3, #12]
 801b78e:	4322      	orrs	r2, r4
 801b790:	b292      	uxth	r2, r2
 801b792:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801b794:	697a      	ldr	r2, [r7, #20]
 801b796:	6879      	ldr	r1, [r7, #4]
 801b798:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b79a:	f000 f909 	bl	801b9b0 <tcp_output_segment>
 801b79e:	4603      	mov	r3, r0
 801b7a0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801b7a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b7a6:	2b00      	cmp	r3, #0
 801b7a8:	d009      	beq.n	801b7be <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b7aa:	687b      	ldr	r3, [r7, #4]
 801b7ac:	8b5b      	ldrh	r3, [r3, #26]
 801b7ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b7b2:	b29a      	uxth	r2, r3
 801b7b4:	687b      	ldr	r3, [r7, #4]
 801b7b6:	835a      	strh	r2, [r3, #26]
      return err;
 801b7b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b7bc:	e0d3      	b.n	801b966 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801b7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7c0:	681a      	ldr	r2, [r3, #0]
 801b7c2:	687b      	ldr	r3, [r7, #4]
 801b7c4:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801b7c6:	687b      	ldr	r3, [r7, #4]
 801b7c8:	7d1b      	ldrb	r3, [r3, #20]
 801b7ca:	2b02      	cmp	r3, #2
 801b7cc:	d006      	beq.n	801b7dc <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b7ce:	687b      	ldr	r3, [r7, #4]
 801b7d0:	8b5b      	ldrh	r3, [r3, #26]
 801b7d2:	f023 0303 	bic.w	r3, r3, #3
 801b7d6:	b29a      	uxth	r2, r3
 801b7d8:	687b      	ldr	r3, [r7, #4]
 801b7da:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801b7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7de:	68db      	ldr	r3, [r3, #12]
 801b7e0:	685b      	ldr	r3, [r3, #4]
 801b7e2:	4618      	mov	r0, r3
 801b7e4:	f7f6 fac9 	bl	8011d7a <lwip_htonl>
 801b7e8:	4604      	mov	r4, r0
 801b7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7ec:	891b      	ldrh	r3, [r3, #8]
 801b7ee:	461d      	mov	r5, r3
 801b7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7f2:	68db      	ldr	r3, [r3, #12]
 801b7f4:	899b      	ldrh	r3, [r3, #12]
 801b7f6:	b29b      	uxth	r3, r3
 801b7f8:	4618      	mov	r0, r3
 801b7fa:	f7f6 faa9 	bl	8011d50 <lwip_htons>
 801b7fe:	4603      	mov	r3, r0
 801b800:	b2db      	uxtb	r3, r3
 801b802:	f003 0303 	and.w	r3, r3, #3
 801b806:	2b00      	cmp	r3, #0
 801b808:	d00e      	beq.n	801b828 <tcp_output+0x2a0>
 801b80a:	2301      	movs	r3, #1
 801b80c:	e00d      	b.n	801b82a <tcp_output+0x2a2>
 801b80e:	bf00      	nop
 801b810:	08027db8 	.word	0x08027db8
 801b814:	08028328 	.word	0x08028328
 801b818:	08027e38 	.word	0x08027e38
 801b81c:	08028340 	.word	0x08028340
 801b820:	24008e4c 	.word	0x24008e4c
 801b824:	08028368 	.word	0x08028368
 801b828:	2300      	movs	r3, #0
 801b82a:	442b      	add	r3, r5
 801b82c:	4423      	add	r3, r4
 801b82e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b830:	687b      	ldr	r3, [r7, #4]
 801b832:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b834:	68bb      	ldr	r3, [r7, #8]
 801b836:	1ad3      	subs	r3, r2, r3
 801b838:	2b00      	cmp	r3, #0
 801b83a:	da02      	bge.n	801b842 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801b83c:	687b      	ldr	r3, [r7, #4]
 801b83e:	68ba      	ldr	r2, [r7, #8]
 801b840:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801b842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b844:	891b      	ldrh	r3, [r3, #8]
 801b846:	461c      	mov	r4, r3
 801b848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b84a:	68db      	ldr	r3, [r3, #12]
 801b84c:	899b      	ldrh	r3, [r3, #12]
 801b84e:	b29b      	uxth	r3, r3
 801b850:	4618      	mov	r0, r3
 801b852:	f7f6 fa7d 	bl	8011d50 <lwip_htons>
 801b856:	4603      	mov	r3, r0
 801b858:	b2db      	uxtb	r3, r3
 801b85a:	f003 0303 	and.w	r3, r3, #3
 801b85e:	2b00      	cmp	r3, #0
 801b860:	d001      	beq.n	801b866 <tcp_output+0x2de>
 801b862:	2301      	movs	r3, #1
 801b864:	e000      	b.n	801b868 <tcp_output+0x2e0>
 801b866:	2300      	movs	r3, #0
 801b868:	4423      	add	r3, r4
 801b86a:	2b00      	cmp	r3, #0
 801b86c:	d049      	beq.n	801b902 <tcp_output+0x37a>
      seg->next = NULL;
 801b86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b870:	2200      	movs	r2, #0
 801b872:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801b874:	687b      	ldr	r3, [r7, #4]
 801b876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b878:	2b00      	cmp	r3, #0
 801b87a:	d105      	bne.n	801b888 <tcp_output+0x300>
        pcb->unacked = seg;
 801b87c:	687b      	ldr	r3, [r7, #4]
 801b87e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b880:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801b882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b884:	623b      	str	r3, [r7, #32]
 801b886:	e03f      	b.n	801b908 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801b888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b88a:	68db      	ldr	r3, [r3, #12]
 801b88c:	685b      	ldr	r3, [r3, #4]
 801b88e:	4618      	mov	r0, r3
 801b890:	f7f6 fa73 	bl	8011d7a <lwip_htonl>
 801b894:	4604      	mov	r4, r0
 801b896:	6a3b      	ldr	r3, [r7, #32]
 801b898:	68db      	ldr	r3, [r3, #12]
 801b89a:	685b      	ldr	r3, [r3, #4]
 801b89c:	4618      	mov	r0, r3
 801b89e:	f7f6 fa6c 	bl	8011d7a <lwip_htonl>
 801b8a2:	4603      	mov	r3, r0
 801b8a4:	1ae3      	subs	r3, r4, r3
 801b8a6:	2b00      	cmp	r3, #0
 801b8a8:	da24      	bge.n	801b8f4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801b8aa:	687b      	ldr	r3, [r7, #4]
 801b8ac:	3370      	adds	r3, #112	; 0x70
 801b8ae:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801b8b0:	e002      	b.n	801b8b8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801b8b2:	69fb      	ldr	r3, [r7, #28]
 801b8b4:	681b      	ldr	r3, [r3, #0]
 801b8b6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801b8b8:	69fb      	ldr	r3, [r7, #28]
 801b8ba:	681b      	ldr	r3, [r3, #0]
 801b8bc:	2b00      	cmp	r3, #0
 801b8be:	d011      	beq.n	801b8e4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801b8c0:	69fb      	ldr	r3, [r7, #28]
 801b8c2:	681b      	ldr	r3, [r3, #0]
 801b8c4:	68db      	ldr	r3, [r3, #12]
 801b8c6:	685b      	ldr	r3, [r3, #4]
 801b8c8:	4618      	mov	r0, r3
 801b8ca:	f7f6 fa56 	bl	8011d7a <lwip_htonl>
 801b8ce:	4604      	mov	r4, r0
 801b8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8d2:	68db      	ldr	r3, [r3, #12]
 801b8d4:	685b      	ldr	r3, [r3, #4]
 801b8d6:	4618      	mov	r0, r3
 801b8d8:	f7f6 fa4f 	bl	8011d7a <lwip_htonl>
 801b8dc:	4603      	mov	r3, r0
 801b8de:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801b8e0:	2b00      	cmp	r3, #0
 801b8e2:	dbe6      	blt.n	801b8b2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801b8e4:	69fb      	ldr	r3, [r7, #28]
 801b8e6:	681a      	ldr	r2, [r3, #0]
 801b8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8ea:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801b8ec:	69fb      	ldr	r3, [r7, #28]
 801b8ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b8f0:	601a      	str	r2, [r3, #0]
 801b8f2:	e009      	b.n	801b908 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801b8f4:	6a3b      	ldr	r3, [r7, #32]
 801b8f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b8f8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801b8fa:	6a3b      	ldr	r3, [r7, #32]
 801b8fc:	681b      	ldr	r3, [r3, #0]
 801b8fe:	623b      	str	r3, [r7, #32]
 801b900:	e002      	b.n	801b908 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801b902:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b904:	f7fb ff1d 	bl	8017742 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801b908:	687b      	ldr	r3, [r7, #4]
 801b90a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b90c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801b90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b910:	2b00      	cmp	r3, #0
 801b912:	d012      	beq.n	801b93a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801b914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b916:	68db      	ldr	r3, [r3, #12]
 801b918:	685b      	ldr	r3, [r3, #4]
 801b91a:	4618      	mov	r0, r3
 801b91c:	f7f6 fa2d 	bl	8011d7a <lwip_htonl>
 801b920:	4602      	mov	r2, r0
 801b922:	687b      	ldr	r3, [r7, #4]
 801b924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b926:	1ad3      	subs	r3, r2, r3
 801b928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b92a:	8912      	ldrh	r2, [r2, #8]
 801b92c:	4413      	add	r3, r2
  while (seg != NULL &&
 801b92e:	69ba      	ldr	r2, [r7, #24]
 801b930:	429a      	cmp	r2, r3
 801b932:	f4bf aed9 	bcs.w	801b6e8 <tcp_output+0x160>
 801b936:	e000      	b.n	801b93a <tcp_output+0x3b2>
      break;
 801b938:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801b93a:	687b      	ldr	r3, [r7, #4]
 801b93c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b93e:	2b00      	cmp	r3, #0
 801b940:	d108      	bne.n	801b954 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801b942:	687b      	ldr	r3, [r7, #4]
 801b944:	2200      	movs	r2, #0
 801b946:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801b94a:	e004      	b.n	801b956 <tcp_output+0x3ce>
    goto output_done;
 801b94c:	bf00      	nop
 801b94e:	e002      	b.n	801b956 <tcp_output+0x3ce>
    goto output_done;
 801b950:	bf00      	nop
 801b952:	e000      	b.n	801b956 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801b954:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801b956:	687b      	ldr	r3, [r7, #4]
 801b958:	8b5b      	ldrh	r3, [r3, #26]
 801b95a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b95e:	b29a      	uxth	r2, r3
 801b960:	687b      	ldr	r3, [r7, #4]
 801b962:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801b964:	2300      	movs	r3, #0
}
 801b966:	4618      	mov	r0, r3
 801b968:	3728      	adds	r7, #40	; 0x28
 801b96a:	46bd      	mov	sp, r7
 801b96c:	bdb0      	pop	{r4, r5, r7, pc}
 801b96e:	bf00      	nop

0801b970 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801b970:	b580      	push	{r7, lr}
 801b972:	b082      	sub	sp, #8
 801b974:	af00      	add	r7, sp, #0
 801b976:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801b978:	687b      	ldr	r3, [r7, #4]
 801b97a:	2b00      	cmp	r3, #0
 801b97c:	d106      	bne.n	801b98c <tcp_output_segment_busy+0x1c>
 801b97e:	4b09      	ldr	r3, [pc, #36]	; (801b9a4 <tcp_output_segment_busy+0x34>)
 801b980:	f240 529a 	movw	r2, #1434	; 0x59a
 801b984:	4908      	ldr	r1, [pc, #32]	; (801b9a8 <tcp_output_segment_busy+0x38>)
 801b986:	4809      	ldr	r0, [pc, #36]	; (801b9ac <tcp_output_segment_busy+0x3c>)
 801b988:	f005 f8f0 	bl	8020b6c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801b98c:	687b      	ldr	r3, [r7, #4]
 801b98e:	685b      	ldr	r3, [r3, #4]
 801b990:	7b9b      	ldrb	r3, [r3, #14]
 801b992:	2b01      	cmp	r3, #1
 801b994:	d001      	beq.n	801b99a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801b996:	2301      	movs	r3, #1
 801b998:	e000      	b.n	801b99c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801b99a:	2300      	movs	r3, #0
}
 801b99c:	4618      	mov	r0, r3
 801b99e:	3708      	adds	r7, #8
 801b9a0:	46bd      	mov	sp, r7
 801b9a2:	bd80      	pop	{r7, pc}
 801b9a4:	08027db8 	.word	0x08027db8
 801b9a8:	08028380 	.word	0x08028380
 801b9ac:	08027e38 	.word	0x08027e38

0801b9b0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801b9b0:	b5b0      	push	{r4, r5, r7, lr}
 801b9b2:	b08c      	sub	sp, #48	; 0x30
 801b9b4:	af04      	add	r7, sp, #16
 801b9b6:	60f8      	str	r0, [r7, #12]
 801b9b8:	60b9      	str	r1, [r7, #8]
 801b9ba:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801b9bc:	68fb      	ldr	r3, [r7, #12]
 801b9be:	2b00      	cmp	r3, #0
 801b9c0:	d106      	bne.n	801b9d0 <tcp_output_segment+0x20>
 801b9c2:	4b63      	ldr	r3, [pc, #396]	; (801bb50 <tcp_output_segment+0x1a0>)
 801b9c4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801b9c8:	4962      	ldr	r1, [pc, #392]	; (801bb54 <tcp_output_segment+0x1a4>)
 801b9ca:	4863      	ldr	r0, [pc, #396]	; (801bb58 <tcp_output_segment+0x1a8>)
 801b9cc:	f005 f8ce 	bl	8020b6c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801b9d0:	68bb      	ldr	r3, [r7, #8]
 801b9d2:	2b00      	cmp	r3, #0
 801b9d4:	d106      	bne.n	801b9e4 <tcp_output_segment+0x34>
 801b9d6:	4b5e      	ldr	r3, [pc, #376]	; (801bb50 <tcp_output_segment+0x1a0>)
 801b9d8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801b9dc:	495f      	ldr	r1, [pc, #380]	; (801bb5c <tcp_output_segment+0x1ac>)
 801b9de:	485e      	ldr	r0, [pc, #376]	; (801bb58 <tcp_output_segment+0x1a8>)
 801b9e0:	f005 f8c4 	bl	8020b6c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801b9e4:	687b      	ldr	r3, [r7, #4]
 801b9e6:	2b00      	cmp	r3, #0
 801b9e8:	d106      	bne.n	801b9f8 <tcp_output_segment+0x48>
 801b9ea:	4b59      	ldr	r3, [pc, #356]	; (801bb50 <tcp_output_segment+0x1a0>)
 801b9ec:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801b9f0:	495b      	ldr	r1, [pc, #364]	; (801bb60 <tcp_output_segment+0x1b0>)
 801b9f2:	4859      	ldr	r0, [pc, #356]	; (801bb58 <tcp_output_segment+0x1a8>)
 801b9f4:	f005 f8ba 	bl	8020b6c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801b9f8:	68f8      	ldr	r0, [r7, #12]
 801b9fa:	f7ff ffb9 	bl	801b970 <tcp_output_segment_busy>
 801b9fe:	4603      	mov	r3, r0
 801ba00:	2b00      	cmp	r3, #0
 801ba02:	d001      	beq.n	801ba08 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801ba04:	2300      	movs	r3, #0
 801ba06:	e09f      	b.n	801bb48 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801ba08:	68bb      	ldr	r3, [r7, #8]
 801ba0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801ba0c:	68fb      	ldr	r3, [r7, #12]
 801ba0e:	68dc      	ldr	r4, [r3, #12]
 801ba10:	4610      	mov	r0, r2
 801ba12:	f7f6 f9b2 	bl	8011d7a <lwip_htonl>
 801ba16:	4603      	mov	r3, r0
 801ba18:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801ba1a:	68bb      	ldr	r3, [r7, #8]
 801ba1c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801ba1e:	68fb      	ldr	r3, [r7, #12]
 801ba20:	68dc      	ldr	r4, [r3, #12]
 801ba22:	4610      	mov	r0, r2
 801ba24:	f7f6 f994 	bl	8011d50 <lwip_htons>
 801ba28:	4603      	mov	r3, r0
 801ba2a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801ba2c:	68bb      	ldr	r3, [r7, #8]
 801ba2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ba30:	68ba      	ldr	r2, [r7, #8]
 801ba32:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801ba34:	441a      	add	r2, r3
 801ba36:	68bb      	ldr	r3, [r7, #8]
 801ba38:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801ba3a:	68fb      	ldr	r3, [r7, #12]
 801ba3c:	68db      	ldr	r3, [r3, #12]
 801ba3e:	3314      	adds	r3, #20
 801ba40:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801ba42:	68fb      	ldr	r3, [r7, #12]
 801ba44:	7a9b      	ldrb	r3, [r3, #10]
 801ba46:	f003 0301 	and.w	r3, r3, #1
 801ba4a:	2b00      	cmp	r3, #0
 801ba4c:	d015      	beq.n	801ba7a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801ba4e:	68bb      	ldr	r3, [r7, #8]
 801ba50:	3304      	adds	r3, #4
 801ba52:	461a      	mov	r2, r3
 801ba54:	6879      	ldr	r1, [r7, #4]
 801ba56:	f44f 7006 	mov.w	r0, #536	; 0x218
 801ba5a:	f7fc fa37 	bl	8017ecc <tcp_eff_send_mss_netif>
 801ba5e:	4603      	mov	r3, r0
 801ba60:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801ba62:	8b7b      	ldrh	r3, [r7, #26]
 801ba64:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801ba68:	4618      	mov	r0, r3
 801ba6a:	f7f6 f986 	bl	8011d7a <lwip_htonl>
 801ba6e:	4602      	mov	r2, r0
 801ba70:	69fb      	ldr	r3, [r7, #28]
 801ba72:	601a      	str	r2, [r3, #0]
    opts += 1;
 801ba74:	69fb      	ldr	r3, [r7, #28]
 801ba76:	3304      	adds	r3, #4
 801ba78:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801ba7a:	68bb      	ldr	r3, [r7, #8]
 801ba7c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801ba80:	2b00      	cmp	r3, #0
 801ba82:	da02      	bge.n	801ba8a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801ba84:	68bb      	ldr	r3, [r7, #8]
 801ba86:	2200      	movs	r2, #0
 801ba88:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801ba8a:	68bb      	ldr	r3, [r7, #8]
 801ba8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ba8e:	2b00      	cmp	r3, #0
 801ba90:	d10c      	bne.n	801baac <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801ba92:	4b34      	ldr	r3, [pc, #208]	; (801bb64 <tcp_output_segment+0x1b4>)
 801ba94:	681a      	ldr	r2, [r3, #0]
 801ba96:	68bb      	ldr	r3, [r7, #8]
 801ba98:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801ba9a:	68fb      	ldr	r3, [r7, #12]
 801ba9c:	68db      	ldr	r3, [r3, #12]
 801ba9e:	685b      	ldr	r3, [r3, #4]
 801baa0:	4618      	mov	r0, r3
 801baa2:	f7f6 f96a 	bl	8011d7a <lwip_htonl>
 801baa6:	4602      	mov	r2, r0
 801baa8:	68bb      	ldr	r3, [r7, #8]
 801baaa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801baac:	68fb      	ldr	r3, [r7, #12]
 801baae:	68da      	ldr	r2, [r3, #12]
 801bab0:	68fb      	ldr	r3, [r7, #12]
 801bab2:	685b      	ldr	r3, [r3, #4]
 801bab4:	685b      	ldr	r3, [r3, #4]
 801bab6:	1ad3      	subs	r3, r2, r3
 801bab8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801baba:	68fb      	ldr	r3, [r7, #12]
 801babc:	685b      	ldr	r3, [r3, #4]
 801babe:	8959      	ldrh	r1, [r3, #10]
 801bac0:	68fb      	ldr	r3, [r7, #12]
 801bac2:	685b      	ldr	r3, [r3, #4]
 801bac4:	8b3a      	ldrh	r2, [r7, #24]
 801bac6:	1a8a      	subs	r2, r1, r2
 801bac8:	b292      	uxth	r2, r2
 801baca:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801bacc:	68fb      	ldr	r3, [r7, #12]
 801bace:	685b      	ldr	r3, [r3, #4]
 801bad0:	8919      	ldrh	r1, [r3, #8]
 801bad2:	68fb      	ldr	r3, [r7, #12]
 801bad4:	685b      	ldr	r3, [r3, #4]
 801bad6:	8b3a      	ldrh	r2, [r7, #24]
 801bad8:	1a8a      	subs	r2, r1, r2
 801bada:	b292      	uxth	r2, r2
 801badc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801bade:	68fb      	ldr	r3, [r7, #12]
 801bae0:	685b      	ldr	r3, [r3, #4]
 801bae2:	68fa      	ldr	r2, [r7, #12]
 801bae4:	68d2      	ldr	r2, [r2, #12]
 801bae6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801bae8:	68fb      	ldr	r3, [r7, #12]
 801baea:	68db      	ldr	r3, [r3, #12]
 801baec:	2200      	movs	r2, #0
 801baee:	741a      	strb	r2, [r3, #16]
 801baf0:	2200      	movs	r2, #0
 801baf2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801baf4:	68fb      	ldr	r3, [r7, #12]
 801baf6:	68db      	ldr	r3, [r3, #12]
 801baf8:	f103 0214 	add.w	r2, r3, #20
 801bafc:	68fb      	ldr	r3, [r7, #12]
 801bafe:	7a9b      	ldrb	r3, [r3, #10]
 801bb00:	009b      	lsls	r3, r3, #2
 801bb02:	f003 0304 	and.w	r3, r3, #4
 801bb06:	4413      	add	r3, r2
 801bb08:	69fa      	ldr	r2, [r7, #28]
 801bb0a:	429a      	cmp	r2, r3
 801bb0c:	d006      	beq.n	801bb1c <tcp_output_segment+0x16c>
 801bb0e:	4b10      	ldr	r3, [pc, #64]	; (801bb50 <tcp_output_segment+0x1a0>)
 801bb10:	f240 621c 	movw	r2, #1564	; 0x61c
 801bb14:	4914      	ldr	r1, [pc, #80]	; (801bb68 <tcp_output_segment+0x1b8>)
 801bb16:	4810      	ldr	r0, [pc, #64]	; (801bb58 <tcp_output_segment+0x1a8>)
 801bb18:	f005 f828 	bl	8020b6c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801bb1c:	68fb      	ldr	r3, [r7, #12]
 801bb1e:	6858      	ldr	r0, [r3, #4]
 801bb20:	68b9      	ldr	r1, [r7, #8]
 801bb22:	68bb      	ldr	r3, [r7, #8]
 801bb24:	1d1c      	adds	r4, r3, #4
 801bb26:	68bb      	ldr	r3, [r7, #8]
 801bb28:	7add      	ldrb	r5, [r3, #11]
 801bb2a:	68bb      	ldr	r3, [r7, #8]
 801bb2c:	7a9b      	ldrb	r3, [r3, #10]
 801bb2e:	687a      	ldr	r2, [r7, #4]
 801bb30:	9202      	str	r2, [sp, #8]
 801bb32:	2206      	movs	r2, #6
 801bb34:	9201      	str	r2, [sp, #4]
 801bb36:	9300      	str	r3, [sp, #0]
 801bb38:	462b      	mov	r3, r5
 801bb3a:	4622      	mov	r2, r4
 801bb3c:	f7f7 fd9c 	bl	8013678 <ip4_output_if>
 801bb40:	4603      	mov	r3, r0
 801bb42:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801bb44:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801bb48:	4618      	mov	r0, r3
 801bb4a:	3720      	adds	r7, #32
 801bb4c:	46bd      	mov	sp, r7
 801bb4e:	bdb0      	pop	{r4, r5, r7, pc}
 801bb50:	08027db8 	.word	0x08027db8
 801bb54:	080283a8 	.word	0x080283a8
 801bb58:	08027e38 	.word	0x08027e38
 801bb5c:	080283c8 	.word	0x080283c8
 801bb60:	080283e8 	.word	0x080283e8
 801bb64:	24008e3c 	.word	0x24008e3c
 801bb68:	0802840c 	.word	0x0802840c

0801bb6c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801bb6c:	b5b0      	push	{r4, r5, r7, lr}
 801bb6e:	b084      	sub	sp, #16
 801bb70:	af00      	add	r7, sp, #0
 801bb72:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801bb74:	687b      	ldr	r3, [r7, #4]
 801bb76:	2b00      	cmp	r3, #0
 801bb78:	d106      	bne.n	801bb88 <tcp_rexmit_rto_prepare+0x1c>
 801bb7a:	4b31      	ldr	r3, [pc, #196]	; (801bc40 <tcp_rexmit_rto_prepare+0xd4>)
 801bb7c:	f240 6263 	movw	r2, #1635	; 0x663
 801bb80:	4930      	ldr	r1, [pc, #192]	; (801bc44 <tcp_rexmit_rto_prepare+0xd8>)
 801bb82:	4831      	ldr	r0, [pc, #196]	; (801bc48 <tcp_rexmit_rto_prepare+0xdc>)
 801bb84:	f004 fff2 	bl	8020b6c <iprintf>

  if (pcb->unacked == NULL) {
 801bb88:	687b      	ldr	r3, [r7, #4]
 801bb8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bb8c:	2b00      	cmp	r3, #0
 801bb8e:	d102      	bne.n	801bb96 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801bb90:	f06f 0305 	mvn.w	r3, #5
 801bb94:	e050      	b.n	801bc38 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801bb96:	687b      	ldr	r3, [r7, #4]
 801bb98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bb9a:	60fb      	str	r3, [r7, #12]
 801bb9c:	e00b      	b.n	801bbb6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801bb9e:	68f8      	ldr	r0, [r7, #12]
 801bba0:	f7ff fee6 	bl	801b970 <tcp_output_segment_busy>
 801bba4:	4603      	mov	r3, r0
 801bba6:	2b00      	cmp	r3, #0
 801bba8:	d002      	beq.n	801bbb0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801bbaa:	f06f 0305 	mvn.w	r3, #5
 801bbae:	e043      	b.n	801bc38 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801bbb0:	68fb      	ldr	r3, [r7, #12]
 801bbb2:	681b      	ldr	r3, [r3, #0]
 801bbb4:	60fb      	str	r3, [r7, #12]
 801bbb6:	68fb      	ldr	r3, [r7, #12]
 801bbb8:	681b      	ldr	r3, [r3, #0]
 801bbba:	2b00      	cmp	r3, #0
 801bbbc:	d1ef      	bne.n	801bb9e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801bbbe:	68f8      	ldr	r0, [r7, #12]
 801bbc0:	f7ff fed6 	bl	801b970 <tcp_output_segment_busy>
 801bbc4:	4603      	mov	r3, r0
 801bbc6:	2b00      	cmp	r3, #0
 801bbc8:	d002      	beq.n	801bbd0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801bbca:	f06f 0305 	mvn.w	r3, #5
 801bbce:	e033      	b.n	801bc38 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801bbd0:	687b      	ldr	r3, [r7, #4]
 801bbd2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801bbd4:	68fb      	ldr	r3, [r7, #12]
 801bbd6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801bbd8:	687b      	ldr	r3, [r7, #4]
 801bbda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801bbdc:	687b      	ldr	r3, [r7, #4]
 801bbde:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801bbe0:	687b      	ldr	r3, [r7, #4]
 801bbe2:	2200      	movs	r2, #0
 801bbe4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801bbe6:	687b      	ldr	r3, [r7, #4]
 801bbe8:	8b5b      	ldrh	r3, [r3, #26]
 801bbea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801bbee:	b29a      	uxth	r2, r3
 801bbf0:	687b      	ldr	r3, [r7, #4]
 801bbf2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801bbf4:	68fb      	ldr	r3, [r7, #12]
 801bbf6:	68db      	ldr	r3, [r3, #12]
 801bbf8:	685b      	ldr	r3, [r3, #4]
 801bbfa:	4618      	mov	r0, r3
 801bbfc:	f7f6 f8bd 	bl	8011d7a <lwip_htonl>
 801bc00:	4604      	mov	r4, r0
 801bc02:	68fb      	ldr	r3, [r7, #12]
 801bc04:	891b      	ldrh	r3, [r3, #8]
 801bc06:	461d      	mov	r5, r3
 801bc08:	68fb      	ldr	r3, [r7, #12]
 801bc0a:	68db      	ldr	r3, [r3, #12]
 801bc0c:	899b      	ldrh	r3, [r3, #12]
 801bc0e:	b29b      	uxth	r3, r3
 801bc10:	4618      	mov	r0, r3
 801bc12:	f7f6 f89d 	bl	8011d50 <lwip_htons>
 801bc16:	4603      	mov	r3, r0
 801bc18:	b2db      	uxtb	r3, r3
 801bc1a:	f003 0303 	and.w	r3, r3, #3
 801bc1e:	2b00      	cmp	r3, #0
 801bc20:	d001      	beq.n	801bc26 <tcp_rexmit_rto_prepare+0xba>
 801bc22:	2301      	movs	r3, #1
 801bc24:	e000      	b.n	801bc28 <tcp_rexmit_rto_prepare+0xbc>
 801bc26:	2300      	movs	r3, #0
 801bc28:	442b      	add	r3, r5
 801bc2a:	18e2      	adds	r2, r4, r3
 801bc2c:	687b      	ldr	r3, [r7, #4]
 801bc2e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801bc30:	687b      	ldr	r3, [r7, #4]
 801bc32:	2200      	movs	r2, #0
 801bc34:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801bc36:	2300      	movs	r3, #0
}
 801bc38:	4618      	mov	r0, r3
 801bc3a:	3710      	adds	r7, #16
 801bc3c:	46bd      	mov	sp, r7
 801bc3e:	bdb0      	pop	{r4, r5, r7, pc}
 801bc40:	08027db8 	.word	0x08027db8
 801bc44:	08028420 	.word	0x08028420
 801bc48:	08027e38 	.word	0x08027e38

0801bc4c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801bc4c:	b580      	push	{r7, lr}
 801bc4e:	b082      	sub	sp, #8
 801bc50:	af00      	add	r7, sp, #0
 801bc52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801bc54:	687b      	ldr	r3, [r7, #4]
 801bc56:	2b00      	cmp	r3, #0
 801bc58:	d106      	bne.n	801bc68 <tcp_rexmit_rto_commit+0x1c>
 801bc5a:	4b0d      	ldr	r3, [pc, #52]	; (801bc90 <tcp_rexmit_rto_commit+0x44>)
 801bc5c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801bc60:	490c      	ldr	r1, [pc, #48]	; (801bc94 <tcp_rexmit_rto_commit+0x48>)
 801bc62:	480d      	ldr	r0, [pc, #52]	; (801bc98 <tcp_rexmit_rto_commit+0x4c>)
 801bc64:	f004 ff82 	bl	8020b6c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801bc68:	687b      	ldr	r3, [r7, #4]
 801bc6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801bc6e:	2bff      	cmp	r3, #255	; 0xff
 801bc70:	d007      	beq.n	801bc82 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801bc72:	687b      	ldr	r3, [r7, #4]
 801bc74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801bc78:	3301      	adds	r3, #1
 801bc7a:	b2da      	uxtb	r2, r3
 801bc7c:	687b      	ldr	r3, [r7, #4]
 801bc7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801bc82:	6878      	ldr	r0, [r7, #4]
 801bc84:	f7ff fc80 	bl	801b588 <tcp_output>
}
 801bc88:	bf00      	nop
 801bc8a:	3708      	adds	r7, #8
 801bc8c:	46bd      	mov	sp, r7
 801bc8e:	bd80      	pop	{r7, pc}
 801bc90:	08027db8 	.word	0x08027db8
 801bc94:	08028444 	.word	0x08028444
 801bc98:	08027e38 	.word	0x08027e38

0801bc9c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801bc9c:	b580      	push	{r7, lr}
 801bc9e:	b082      	sub	sp, #8
 801bca0:	af00      	add	r7, sp, #0
 801bca2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801bca4:	687b      	ldr	r3, [r7, #4]
 801bca6:	2b00      	cmp	r3, #0
 801bca8:	d106      	bne.n	801bcb8 <tcp_rexmit_rto+0x1c>
 801bcaa:	4b0a      	ldr	r3, [pc, #40]	; (801bcd4 <tcp_rexmit_rto+0x38>)
 801bcac:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801bcb0:	4909      	ldr	r1, [pc, #36]	; (801bcd8 <tcp_rexmit_rto+0x3c>)
 801bcb2:	480a      	ldr	r0, [pc, #40]	; (801bcdc <tcp_rexmit_rto+0x40>)
 801bcb4:	f004 ff5a 	bl	8020b6c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801bcb8:	6878      	ldr	r0, [r7, #4]
 801bcba:	f7ff ff57 	bl	801bb6c <tcp_rexmit_rto_prepare>
 801bcbe:	4603      	mov	r3, r0
 801bcc0:	2b00      	cmp	r3, #0
 801bcc2:	d102      	bne.n	801bcca <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801bcc4:	6878      	ldr	r0, [r7, #4]
 801bcc6:	f7ff ffc1 	bl	801bc4c <tcp_rexmit_rto_commit>
  }
}
 801bcca:	bf00      	nop
 801bccc:	3708      	adds	r7, #8
 801bcce:	46bd      	mov	sp, r7
 801bcd0:	bd80      	pop	{r7, pc}
 801bcd2:	bf00      	nop
 801bcd4:	08027db8 	.word	0x08027db8
 801bcd8:	08028468 	.word	0x08028468
 801bcdc:	08027e38 	.word	0x08027e38

0801bce0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801bce0:	b590      	push	{r4, r7, lr}
 801bce2:	b085      	sub	sp, #20
 801bce4:	af00      	add	r7, sp, #0
 801bce6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801bce8:	687b      	ldr	r3, [r7, #4]
 801bcea:	2b00      	cmp	r3, #0
 801bcec:	d106      	bne.n	801bcfc <tcp_rexmit+0x1c>
 801bcee:	4b2f      	ldr	r3, [pc, #188]	; (801bdac <tcp_rexmit+0xcc>)
 801bcf0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801bcf4:	492e      	ldr	r1, [pc, #184]	; (801bdb0 <tcp_rexmit+0xd0>)
 801bcf6:	482f      	ldr	r0, [pc, #188]	; (801bdb4 <tcp_rexmit+0xd4>)
 801bcf8:	f004 ff38 	bl	8020b6c <iprintf>

  if (pcb->unacked == NULL) {
 801bcfc:	687b      	ldr	r3, [r7, #4]
 801bcfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bd00:	2b00      	cmp	r3, #0
 801bd02:	d102      	bne.n	801bd0a <tcp_rexmit+0x2a>
    return ERR_VAL;
 801bd04:	f06f 0305 	mvn.w	r3, #5
 801bd08:	e04c      	b.n	801bda4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801bd0a:	687b      	ldr	r3, [r7, #4]
 801bd0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bd0e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801bd10:	68b8      	ldr	r0, [r7, #8]
 801bd12:	f7ff fe2d 	bl	801b970 <tcp_output_segment_busy>
 801bd16:	4603      	mov	r3, r0
 801bd18:	2b00      	cmp	r3, #0
 801bd1a:	d002      	beq.n	801bd22 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801bd1c:	f06f 0305 	mvn.w	r3, #5
 801bd20:	e040      	b.n	801bda4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801bd22:	68bb      	ldr	r3, [r7, #8]
 801bd24:	681a      	ldr	r2, [r3, #0]
 801bd26:	687b      	ldr	r3, [r7, #4]
 801bd28:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801bd2a:	687b      	ldr	r3, [r7, #4]
 801bd2c:	336c      	adds	r3, #108	; 0x6c
 801bd2e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801bd30:	e002      	b.n	801bd38 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801bd32:	68fb      	ldr	r3, [r7, #12]
 801bd34:	681b      	ldr	r3, [r3, #0]
 801bd36:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801bd38:	68fb      	ldr	r3, [r7, #12]
 801bd3a:	681b      	ldr	r3, [r3, #0]
 801bd3c:	2b00      	cmp	r3, #0
 801bd3e:	d011      	beq.n	801bd64 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801bd40:	68fb      	ldr	r3, [r7, #12]
 801bd42:	681b      	ldr	r3, [r3, #0]
 801bd44:	68db      	ldr	r3, [r3, #12]
 801bd46:	685b      	ldr	r3, [r3, #4]
 801bd48:	4618      	mov	r0, r3
 801bd4a:	f7f6 f816 	bl	8011d7a <lwip_htonl>
 801bd4e:	4604      	mov	r4, r0
 801bd50:	68bb      	ldr	r3, [r7, #8]
 801bd52:	68db      	ldr	r3, [r3, #12]
 801bd54:	685b      	ldr	r3, [r3, #4]
 801bd56:	4618      	mov	r0, r3
 801bd58:	f7f6 f80f 	bl	8011d7a <lwip_htonl>
 801bd5c:	4603      	mov	r3, r0
 801bd5e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801bd60:	2b00      	cmp	r3, #0
 801bd62:	dbe6      	blt.n	801bd32 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801bd64:	68fb      	ldr	r3, [r7, #12]
 801bd66:	681a      	ldr	r2, [r3, #0]
 801bd68:	68bb      	ldr	r3, [r7, #8]
 801bd6a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801bd6c:	68fb      	ldr	r3, [r7, #12]
 801bd6e:	68ba      	ldr	r2, [r7, #8]
 801bd70:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801bd72:	68bb      	ldr	r3, [r7, #8]
 801bd74:	681b      	ldr	r3, [r3, #0]
 801bd76:	2b00      	cmp	r3, #0
 801bd78:	d103      	bne.n	801bd82 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801bd7a:	687b      	ldr	r3, [r7, #4]
 801bd7c:	2200      	movs	r2, #0
 801bd7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801bd82:	687b      	ldr	r3, [r7, #4]
 801bd84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801bd88:	2bff      	cmp	r3, #255	; 0xff
 801bd8a:	d007      	beq.n	801bd9c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801bd8c:	687b      	ldr	r3, [r7, #4]
 801bd8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801bd92:	3301      	adds	r3, #1
 801bd94:	b2da      	uxtb	r2, r3
 801bd96:	687b      	ldr	r3, [r7, #4]
 801bd98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801bd9c:	687b      	ldr	r3, [r7, #4]
 801bd9e:	2200      	movs	r2, #0
 801bda0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801bda2:	2300      	movs	r3, #0
}
 801bda4:	4618      	mov	r0, r3
 801bda6:	3714      	adds	r7, #20
 801bda8:	46bd      	mov	sp, r7
 801bdaa:	bd90      	pop	{r4, r7, pc}
 801bdac:	08027db8 	.word	0x08027db8
 801bdb0:	08028484 	.word	0x08028484
 801bdb4:	08027e38 	.word	0x08027e38

0801bdb8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801bdb8:	b580      	push	{r7, lr}
 801bdba:	b082      	sub	sp, #8
 801bdbc:	af00      	add	r7, sp, #0
 801bdbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801bdc0:	687b      	ldr	r3, [r7, #4]
 801bdc2:	2b00      	cmp	r3, #0
 801bdc4:	d106      	bne.n	801bdd4 <tcp_rexmit_fast+0x1c>
 801bdc6:	4b2a      	ldr	r3, [pc, #168]	; (801be70 <tcp_rexmit_fast+0xb8>)
 801bdc8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801bdcc:	4929      	ldr	r1, [pc, #164]	; (801be74 <tcp_rexmit_fast+0xbc>)
 801bdce:	482a      	ldr	r0, [pc, #168]	; (801be78 <tcp_rexmit_fast+0xc0>)
 801bdd0:	f004 fecc 	bl	8020b6c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801bdd4:	687b      	ldr	r3, [r7, #4]
 801bdd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bdd8:	2b00      	cmp	r3, #0
 801bdda:	d045      	beq.n	801be68 <tcp_rexmit_fast+0xb0>
 801bddc:	687b      	ldr	r3, [r7, #4]
 801bdde:	8b5b      	ldrh	r3, [r3, #26]
 801bde0:	f003 0304 	and.w	r3, r3, #4
 801bde4:	2b00      	cmp	r3, #0
 801bde6:	d13f      	bne.n	801be68 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801bde8:	6878      	ldr	r0, [r7, #4]
 801bdea:	f7ff ff79 	bl	801bce0 <tcp_rexmit>
 801bdee:	4603      	mov	r3, r0
 801bdf0:	2b00      	cmp	r3, #0
 801bdf2:	d139      	bne.n	801be68 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801bdf4:	687b      	ldr	r3, [r7, #4]
 801bdf6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801bdfa:	687b      	ldr	r3, [r7, #4]
 801bdfc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801be00:	4293      	cmp	r3, r2
 801be02:	bf28      	it	cs
 801be04:	4613      	movcs	r3, r2
 801be06:	b29b      	uxth	r3, r3
 801be08:	2b00      	cmp	r3, #0
 801be0a:	da00      	bge.n	801be0e <tcp_rexmit_fast+0x56>
 801be0c:	3301      	adds	r3, #1
 801be0e:	105b      	asrs	r3, r3, #1
 801be10:	b29a      	uxth	r2, r3
 801be12:	687b      	ldr	r3, [r7, #4]
 801be14:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801be18:	687b      	ldr	r3, [r7, #4]
 801be1a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801be1e:	461a      	mov	r2, r3
 801be20:	687b      	ldr	r3, [r7, #4]
 801be22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801be24:	005b      	lsls	r3, r3, #1
 801be26:	429a      	cmp	r2, r3
 801be28:	d206      	bcs.n	801be38 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801be2a:	687b      	ldr	r3, [r7, #4]
 801be2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801be2e:	005b      	lsls	r3, r3, #1
 801be30:	b29a      	uxth	r2, r3
 801be32:	687b      	ldr	r3, [r7, #4]
 801be34:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801be38:	687b      	ldr	r3, [r7, #4]
 801be3a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801be3e:	687b      	ldr	r3, [r7, #4]
 801be40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801be42:	4619      	mov	r1, r3
 801be44:	0049      	lsls	r1, r1, #1
 801be46:	440b      	add	r3, r1
 801be48:	b29b      	uxth	r3, r3
 801be4a:	4413      	add	r3, r2
 801be4c:	b29a      	uxth	r2, r3
 801be4e:	687b      	ldr	r3, [r7, #4]
 801be50:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801be54:	687b      	ldr	r3, [r7, #4]
 801be56:	8b5b      	ldrh	r3, [r3, #26]
 801be58:	f043 0304 	orr.w	r3, r3, #4
 801be5c:	b29a      	uxth	r2, r3
 801be5e:	687b      	ldr	r3, [r7, #4]
 801be60:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801be62:	687b      	ldr	r3, [r7, #4]
 801be64:	2200      	movs	r2, #0
 801be66:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801be68:	bf00      	nop
 801be6a:	3708      	adds	r7, #8
 801be6c:	46bd      	mov	sp, r7
 801be6e:	bd80      	pop	{r7, pc}
 801be70:	08027db8 	.word	0x08027db8
 801be74:	0802849c 	.word	0x0802849c
 801be78:	08027e38 	.word	0x08027e38

0801be7c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801be7c:	b580      	push	{r7, lr}
 801be7e:	b086      	sub	sp, #24
 801be80:	af00      	add	r7, sp, #0
 801be82:	60f8      	str	r0, [r7, #12]
 801be84:	607b      	str	r3, [r7, #4]
 801be86:	460b      	mov	r3, r1
 801be88:	817b      	strh	r3, [r7, #10]
 801be8a:	4613      	mov	r3, r2
 801be8c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801be8e:	897a      	ldrh	r2, [r7, #10]
 801be90:	893b      	ldrh	r3, [r7, #8]
 801be92:	4413      	add	r3, r2
 801be94:	b29b      	uxth	r3, r3
 801be96:	3314      	adds	r3, #20
 801be98:	b29b      	uxth	r3, r3
 801be9a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801be9e:	4619      	mov	r1, r3
 801bea0:	2022      	movs	r0, #34	; 0x22
 801bea2:	f7f9 fb6d 	bl	8015580 <pbuf_alloc>
 801bea6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801bea8:	697b      	ldr	r3, [r7, #20]
 801beaa:	2b00      	cmp	r3, #0
 801beac:	d04d      	beq.n	801bf4a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801beae:	897b      	ldrh	r3, [r7, #10]
 801beb0:	3313      	adds	r3, #19
 801beb2:	697a      	ldr	r2, [r7, #20]
 801beb4:	8952      	ldrh	r2, [r2, #10]
 801beb6:	4293      	cmp	r3, r2
 801beb8:	db06      	blt.n	801bec8 <tcp_output_alloc_header_common+0x4c>
 801beba:	4b26      	ldr	r3, [pc, #152]	; (801bf54 <tcp_output_alloc_header_common+0xd8>)
 801bebc:	f240 7223 	movw	r2, #1827	; 0x723
 801bec0:	4925      	ldr	r1, [pc, #148]	; (801bf58 <tcp_output_alloc_header_common+0xdc>)
 801bec2:	4826      	ldr	r0, [pc, #152]	; (801bf5c <tcp_output_alloc_header_common+0xe0>)
 801bec4:	f004 fe52 	bl	8020b6c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801bec8:	697b      	ldr	r3, [r7, #20]
 801beca:	685b      	ldr	r3, [r3, #4]
 801becc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801bece:	8c3b      	ldrh	r3, [r7, #32]
 801bed0:	4618      	mov	r0, r3
 801bed2:	f7f5 ff3d 	bl	8011d50 <lwip_htons>
 801bed6:	4603      	mov	r3, r0
 801bed8:	461a      	mov	r2, r3
 801beda:	693b      	ldr	r3, [r7, #16]
 801bedc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801bede:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bee0:	4618      	mov	r0, r3
 801bee2:	f7f5 ff35 	bl	8011d50 <lwip_htons>
 801bee6:	4603      	mov	r3, r0
 801bee8:	461a      	mov	r2, r3
 801beea:	693b      	ldr	r3, [r7, #16]
 801beec:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801beee:	693b      	ldr	r3, [r7, #16]
 801bef0:	687a      	ldr	r2, [r7, #4]
 801bef2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801bef4:	68f8      	ldr	r0, [r7, #12]
 801bef6:	f7f5 ff40 	bl	8011d7a <lwip_htonl>
 801befa:	4602      	mov	r2, r0
 801befc:	693b      	ldr	r3, [r7, #16]
 801befe:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801bf00:	897b      	ldrh	r3, [r7, #10]
 801bf02:	089b      	lsrs	r3, r3, #2
 801bf04:	b29b      	uxth	r3, r3
 801bf06:	3305      	adds	r3, #5
 801bf08:	b29b      	uxth	r3, r3
 801bf0a:	031b      	lsls	r3, r3, #12
 801bf0c:	b29a      	uxth	r2, r3
 801bf0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801bf12:	b29b      	uxth	r3, r3
 801bf14:	4313      	orrs	r3, r2
 801bf16:	b29b      	uxth	r3, r3
 801bf18:	4618      	mov	r0, r3
 801bf1a:	f7f5 ff19 	bl	8011d50 <lwip_htons>
 801bf1e:	4603      	mov	r3, r0
 801bf20:	461a      	mov	r2, r3
 801bf22:	693b      	ldr	r3, [r7, #16]
 801bf24:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801bf26:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801bf28:	4618      	mov	r0, r3
 801bf2a:	f7f5 ff11 	bl	8011d50 <lwip_htons>
 801bf2e:	4603      	mov	r3, r0
 801bf30:	461a      	mov	r2, r3
 801bf32:	693b      	ldr	r3, [r7, #16]
 801bf34:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801bf36:	693b      	ldr	r3, [r7, #16]
 801bf38:	2200      	movs	r2, #0
 801bf3a:	741a      	strb	r2, [r3, #16]
 801bf3c:	2200      	movs	r2, #0
 801bf3e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801bf40:	693b      	ldr	r3, [r7, #16]
 801bf42:	2200      	movs	r2, #0
 801bf44:	749a      	strb	r2, [r3, #18]
 801bf46:	2200      	movs	r2, #0
 801bf48:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801bf4a:	697b      	ldr	r3, [r7, #20]
}
 801bf4c:	4618      	mov	r0, r3
 801bf4e:	3718      	adds	r7, #24
 801bf50:	46bd      	mov	sp, r7
 801bf52:	bd80      	pop	{r7, pc}
 801bf54:	08027db8 	.word	0x08027db8
 801bf58:	080284bc 	.word	0x080284bc
 801bf5c:	08027e38 	.word	0x08027e38

0801bf60 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801bf60:	b5b0      	push	{r4, r5, r7, lr}
 801bf62:	b08a      	sub	sp, #40	; 0x28
 801bf64:	af04      	add	r7, sp, #16
 801bf66:	60f8      	str	r0, [r7, #12]
 801bf68:	607b      	str	r3, [r7, #4]
 801bf6a:	460b      	mov	r3, r1
 801bf6c:	817b      	strh	r3, [r7, #10]
 801bf6e:	4613      	mov	r3, r2
 801bf70:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801bf72:	68fb      	ldr	r3, [r7, #12]
 801bf74:	2b00      	cmp	r3, #0
 801bf76:	d106      	bne.n	801bf86 <tcp_output_alloc_header+0x26>
 801bf78:	4b15      	ldr	r3, [pc, #84]	; (801bfd0 <tcp_output_alloc_header+0x70>)
 801bf7a:	f240 7242 	movw	r2, #1858	; 0x742
 801bf7e:	4915      	ldr	r1, [pc, #84]	; (801bfd4 <tcp_output_alloc_header+0x74>)
 801bf80:	4815      	ldr	r0, [pc, #84]	; (801bfd8 <tcp_output_alloc_header+0x78>)
 801bf82:	f004 fdf3 	bl	8020b6c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801bf86:	68fb      	ldr	r3, [r7, #12]
 801bf88:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801bf8a:	68fb      	ldr	r3, [r7, #12]
 801bf8c:	8adb      	ldrh	r3, [r3, #22]
 801bf8e:	68fa      	ldr	r2, [r7, #12]
 801bf90:	8b12      	ldrh	r2, [r2, #24]
 801bf92:	68f9      	ldr	r1, [r7, #12]
 801bf94:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801bf96:	893d      	ldrh	r5, [r7, #8]
 801bf98:	897c      	ldrh	r4, [r7, #10]
 801bf9a:	9103      	str	r1, [sp, #12]
 801bf9c:	2110      	movs	r1, #16
 801bf9e:	9102      	str	r1, [sp, #8]
 801bfa0:	9201      	str	r2, [sp, #4]
 801bfa2:	9300      	str	r3, [sp, #0]
 801bfa4:	687b      	ldr	r3, [r7, #4]
 801bfa6:	462a      	mov	r2, r5
 801bfa8:	4621      	mov	r1, r4
 801bfaa:	f7ff ff67 	bl	801be7c <tcp_output_alloc_header_common>
 801bfae:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801bfb0:	697b      	ldr	r3, [r7, #20]
 801bfb2:	2b00      	cmp	r3, #0
 801bfb4:	d006      	beq.n	801bfc4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801bfb6:	68fb      	ldr	r3, [r7, #12]
 801bfb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bfba:	68fa      	ldr	r2, [r7, #12]
 801bfbc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801bfbe:	441a      	add	r2, r3
 801bfc0:	68fb      	ldr	r3, [r7, #12]
 801bfc2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801bfc4:	697b      	ldr	r3, [r7, #20]
}
 801bfc6:	4618      	mov	r0, r3
 801bfc8:	3718      	adds	r7, #24
 801bfca:	46bd      	mov	sp, r7
 801bfcc:	bdb0      	pop	{r4, r5, r7, pc}
 801bfce:	bf00      	nop
 801bfd0:	08027db8 	.word	0x08027db8
 801bfd4:	080284ec 	.word	0x080284ec
 801bfd8:	08027e38 	.word	0x08027e38

0801bfdc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801bfdc:	b580      	push	{r7, lr}
 801bfde:	b088      	sub	sp, #32
 801bfe0:	af00      	add	r7, sp, #0
 801bfe2:	60f8      	str	r0, [r7, #12]
 801bfe4:	60b9      	str	r1, [r7, #8]
 801bfe6:	4611      	mov	r1, r2
 801bfe8:	461a      	mov	r2, r3
 801bfea:	460b      	mov	r3, r1
 801bfec:	71fb      	strb	r3, [r7, #7]
 801bfee:	4613      	mov	r3, r2
 801bff0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801bff2:	2300      	movs	r3, #0
 801bff4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801bff6:	68bb      	ldr	r3, [r7, #8]
 801bff8:	2b00      	cmp	r3, #0
 801bffa:	d106      	bne.n	801c00a <tcp_output_fill_options+0x2e>
 801bffc:	4b13      	ldr	r3, [pc, #76]	; (801c04c <tcp_output_fill_options+0x70>)
 801bffe:	f240 7256 	movw	r2, #1878	; 0x756
 801c002:	4913      	ldr	r1, [pc, #76]	; (801c050 <tcp_output_fill_options+0x74>)
 801c004:	4813      	ldr	r0, [pc, #76]	; (801c054 <tcp_output_fill_options+0x78>)
 801c006:	f004 fdb1 	bl	8020b6c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801c00a:	68bb      	ldr	r3, [r7, #8]
 801c00c:	685b      	ldr	r3, [r3, #4]
 801c00e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801c010:	69bb      	ldr	r3, [r7, #24]
 801c012:	3314      	adds	r3, #20
 801c014:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801c016:	69bb      	ldr	r3, [r7, #24]
 801c018:	f103 0214 	add.w	r2, r3, #20
 801c01c:	8bfb      	ldrh	r3, [r7, #30]
 801c01e:	009b      	lsls	r3, r3, #2
 801c020:	4619      	mov	r1, r3
 801c022:	79fb      	ldrb	r3, [r7, #7]
 801c024:	009b      	lsls	r3, r3, #2
 801c026:	f003 0304 	and.w	r3, r3, #4
 801c02a:	440b      	add	r3, r1
 801c02c:	4413      	add	r3, r2
 801c02e:	697a      	ldr	r2, [r7, #20]
 801c030:	429a      	cmp	r2, r3
 801c032:	d006      	beq.n	801c042 <tcp_output_fill_options+0x66>
 801c034:	4b05      	ldr	r3, [pc, #20]	; (801c04c <tcp_output_fill_options+0x70>)
 801c036:	f240 7275 	movw	r2, #1909	; 0x775
 801c03a:	4907      	ldr	r1, [pc, #28]	; (801c058 <tcp_output_fill_options+0x7c>)
 801c03c:	4805      	ldr	r0, [pc, #20]	; (801c054 <tcp_output_fill_options+0x78>)
 801c03e:	f004 fd95 	bl	8020b6c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801c042:	bf00      	nop
 801c044:	3720      	adds	r7, #32
 801c046:	46bd      	mov	sp, r7
 801c048:	bd80      	pop	{r7, pc}
 801c04a:	bf00      	nop
 801c04c:	08027db8 	.word	0x08027db8
 801c050:	08028514 	.word	0x08028514
 801c054:	08027e38 	.word	0x08027e38
 801c058:	0802840c 	.word	0x0802840c

0801c05c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801c05c:	b580      	push	{r7, lr}
 801c05e:	b08a      	sub	sp, #40	; 0x28
 801c060:	af04      	add	r7, sp, #16
 801c062:	60f8      	str	r0, [r7, #12]
 801c064:	60b9      	str	r1, [r7, #8]
 801c066:	607a      	str	r2, [r7, #4]
 801c068:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801c06a:	68bb      	ldr	r3, [r7, #8]
 801c06c:	2b00      	cmp	r3, #0
 801c06e:	d106      	bne.n	801c07e <tcp_output_control_segment+0x22>
 801c070:	4b1c      	ldr	r3, [pc, #112]	; (801c0e4 <tcp_output_control_segment+0x88>)
 801c072:	f240 7287 	movw	r2, #1927	; 0x787
 801c076:	491c      	ldr	r1, [pc, #112]	; (801c0e8 <tcp_output_control_segment+0x8c>)
 801c078:	481c      	ldr	r0, [pc, #112]	; (801c0ec <tcp_output_control_segment+0x90>)
 801c07a:	f004 fd77 	bl	8020b6c <iprintf>

  netif = tcp_route(pcb, src, dst);
 801c07e:	683a      	ldr	r2, [r7, #0]
 801c080:	6879      	ldr	r1, [r7, #4]
 801c082:	68f8      	ldr	r0, [r7, #12]
 801c084:	f7fe fae8 	bl	801a658 <tcp_route>
 801c088:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801c08a:	693b      	ldr	r3, [r7, #16]
 801c08c:	2b00      	cmp	r3, #0
 801c08e:	d102      	bne.n	801c096 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801c090:	23fc      	movs	r3, #252	; 0xfc
 801c092:	75fb      	strb	r3, [r7, #23]
 801c094:	e01c      	b.n	801c0d0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801c096:	68fb      	ldr	r3, [r7, #12]
 801c098:	2b00      	cmp	r3, #0
 801c09a:	d006      	beq.n	801c0aa <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801c09c:	68fb      	ldr	r3, [r7, #12]
 801c09e:	7adb      	ldrb	r3, [r3, #11]
 801c0a0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801c0a2:	68fb      	ldr	r3, [r7, #12]
 801c0a4:	7a9b      	ldrb	r3, [r3, #10]
 801c0a6:	757b      	strb	r3, [r7, #21]
 801c0a8:	e003      	b.n	801c0b2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801c0aa:	23ff      	movs	r3, #255	; 0xff
 801c0ac:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801c0ae:	2300      	movs	r3, #0
 801c0b0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801c0b2:	7dba      	ldrb	r2, [r7, #22]
 801c0b4:	693b      	ldr	r3, [r7, #16]
 801c0b6:	9302      	str	r3, [sp, #8]
 801c0b8:	2306      	movs	r3, #6
 801c0ba:	9301      	str	r3, [sp, #4]
 801c0bc:	7d7b      	ldrb	r3, [r7, #21]
 801c0be:	9300      	str	r3, [sp, #0]
 801c0c0:	4613      	mov	r3, r2
 801c0c2:	683a      	ldr	r2, [r7, #0]
 801c0c4:	6879      	ldr	r1, [r7, #4]
 801c0c6:	68b8      	ldr	r0, [r7, #8]
 801c0c8:	f7f7 fad6 	bl	8013678 <ip4_output_if>
 801c0cc:	4603      	mov	r3, r0
 801c0ce:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801c0d0:	68b8      	ldr	r0, [r7, #8]
 801c0d2:	f7f9 fd39 	bl	8015b48 <pbuf_free>
  return err;
 801c0d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801c0da:	4618      	mov	r0, r3
 801c0dc:	3718      	adds	r7, #24
 801c0de:	46bd      	mov	sp, r7
 801c0e0:	bd80      	pop	{r7, pc}
 801c0e2:	bf00      	nop
 801c0e4:	08027db8 	.word	0x08027db8
 801c0e8:	0802853c 	.word	0x0802853c
 801c0ec:	08027e38 	.word	0x08027e38

0801c0f0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801c0f0:	b590      	push	{r4, r7, lr}
 801c0f2:	b08b      	sub	sp, #44	; 0x2c
 801c0f4:	af04      	add	r7, sp, #16
 801c0f6:	60f8      	str	r0, [r7, #12]
 801c0f8:	60b9      	str	r1, [r7, #8]
 801c0fa:	607a      	str	r2, [r7, #4]
 801c0fc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801c0fe:	683b      	ldr	r3, [r7, #0]
 801c100:	2b00      	cmp	r3, #0
 801c102:	d106      	bne.n	801c112 <tcp_rst+0x22>
 801c104:	4b1f      	ldr	r3, [pc, #124]	; (801c184 <tcp_rst+0x94>)
 801c106:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801c10a:	491f      	ldr	r1, [pc, #124]	; (801c188 <tcp_rst+0x98>)
 801c10c:	481f      	ldr	r0, [pc, #124]	; (801c18c <tcp_rst+0x9c>)
 801c10e:	f004 fd2d 	bl	8020b6c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801c112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c114:	2b00      	cmp	r3, #0
 801c116:	d106      	bne.n	801c126 <tcp_rst+0x36>
 801c118:	4b1a      	ldr	r3, [pc, #104]	; (801c184 <tcp_rst+0x94>)
 801c11a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801c11e:	491c      	ldr	r1, [pc, #112]	; (801c190 <tcp_rst+0xa0>)
 801c120:	481a      	ldr	r0, [pc, #104]	; (801c18c <tcp_rst+0x9c>)
 801c122:	f004 fd23 	bl	8020b6c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801c126:	2300      	movs	r3, #0
 801c128:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801c12a:	f246 0308 	movw	r3, #24584	; 0x6008
 801c12e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801c130:	7dfb      	ldrb	r3, [r7, #23]
 801c132:	b29c      	uxth	r4, r3
 801c134:	68b8      	ldr	r0, [r7, #8]
 801c136:	f7f5 fe20 	bl	8011d7a <lwip_htonl>
 801c13a:	4602      	mov	r2, r0
 801c13c:	8abb      	ldrh	r3, [r7, #20]
 801c13e:	9303      	str	r3, [sp, #12]
 801c140:	2314      	movs	r3, #20
 801c142:	9302      	str	r3, [sp, #8]
 801c144:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801c146:	9301      	str	r3, [sp, #4]
 801c148:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801c14a:	9300      	str	r3, [sp, #0]
 801c14c:	4613      	mov	r3, r2
 801c14e:	2200      	movs	r2, #0
 801c150:	4621      	mov	r1, r4
 801c152:	6878      	ldr	r0, [r7, #4]
 801c154:	f7ff fe92 	bl	801be7c <tcp_output_alloc_header_common>
 801c158:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801c15a:	693b      	ldr	r3, [r7, #16]
 801c15c:	2b00      	cmp	r3, #0
 801c15e:	d00c      	beq.n	801c17a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801c160:	7dfb      	ldrb	r3, [r7, #23]
 801c162:	2200      	movs	r2, #0
 801c164:	6939      	ldr	r1, [r7, #16]
 801c166:	68f8      	ldr	r0, [r7, #12]
 801c168:	f7ff ff38 	bl	801bfdc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801c16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c16e:	683a      	ldr	r2, [r7, #0]
 801c170:	6939      	ldr	r1, [r7, #16]
 801c172:	68f8      	ldr	r0, [r7, #12]
 801c174:	f7ff ff72 	bl	801c05c <tcp_output_control_segment>
 801c178:	e000      	b.n	801c17c <tcp_rst+0x8c>
    return;
 801c17a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801c17c:	371c      	adds	r7, #28
 801c17e:	46bd      	mov	sp, r7
 801c180:	bd90      	pop	{r4, r7, pc}
 801c182:	bf00      	nop
 801c184:	08027db8 	.word	0x08027db8
 801c188:	08028568 	.word	0x08028568
 801c18c:	08027e38 	.word	0x08027e38
 801c190:	08028584 	.word	0x08028584

0801c194 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801c194:	b590      	push	{r4, r7, lr}
 801c196:	b087      	sub	sp, #28
 801c198:	af00      	add	r7, sp, #0
 801c19a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801c19c:	2300      	movs	r3, #0
 801c19e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801c1a0:	2300      	movs	r3, #0
 801c1a2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801c1a4:	687b      	ldr	r3, [r7, #4]
 801c1a6:	2b00      	cmp	r3, #0
 801c1a8:	d106      	bne.n	801c1b8 <tcp_send_empty_ack+0x24>
 801c1aa:	4b28      	ldr	r3, [pc, #160]	; (801c24c <tcp_send_empty_ack+0xb8>)
 801c1ac:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801c1b0:	4927      	ldr	r1, [pc, #156]	; (801c250 <tcp_send_empty_ack+0xbc>)
 801c1b2:	4828      	ldr	r0, [pc, #160]	; (801c254 <tcp_send_empty_ack+0xc0>)
 801c1b4:	f004 fcda 	bl	8020b6c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801c1b8:	7dfb      	ldrb	r3, [r7, #23]
 801c1ba:	009b      	lsls	r3, r3, #2
 801c1bc:	b2db      	uxtb	r3, r3
 801c1be:	f003 0304 	and.w	r3, r3, #4
 801c1c2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801c1c4:	7d7b      	ldrb	r3, [r7, #21]
 801c1c6:	b29c      	uxth	r4, r3
 801c1c8:	687b      	ldr	r3, [r7, #4]
 801c1ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c1cc:	4618      	mov	r0, r3
 801c1ce:	f7f5 fdd4 	bl	8011d7a <lwip_htonl>
 801c1d2:	4603      	mov	r3, r0
 801c1d4:	2200      	movs	r2, #0
 801c1d6:	4621      	mov	r1, r4
 801c1d8:	6878      	ldr	r0, [r7, #4]
 801c1da:	f7ff fec1 	bl	801bf60 <tcp_output_alloc_header>
 801c1de:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801c1e0:	693b      	ldr	r3, [r7, #16]
 801c1e2:	2b00      	cmp	r3, #0
 801c1e4:	d109      	bne.n	801c1fa <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c1e6:	687b      	ldr	r3, [r7, #4]
 801c1e8:	8b5b      	ldrh	r3, [r3, #26]
 801c1ea:	f043 0303 	orr.w	r3, r3, #3
 801c1ee:	b29a      	uxth	r2, r3
 801c1f0:	687b      	ldr	r3, [r7, #4]
 801c1f2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801c1f4:	f06f 0301 	mvn.w	r3, #1
 801c1f8:	e023      	b.n	801c242 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801c1fa:	7dbb      	ldrb	r3, [r7, #22]
 801c1fc:	7dfa      	ldrb	r2, [r7, #23]
 801c1fe:	6939      	ldr	r1, [r7, #16]
 801c200:	6878      	ldr	r0, [r7, #4]
 801c202:	f7ff feeb 	bl	801bfdc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801c206:	687a      	ldr	r2, [r7, #4]
 801c208:	687b      	ldr	r3, [r7, #4]
 801c20a:	3304      	adds	r3, #4
 801c20c:	6939      	ldr	r1, [r7, #16]
 801c20e:	6878      	ldr	r0, [r7, #4]
 801c210:	f7ff ff24 	bl	801c05c <tcp_output_control_segment>
 801c214:	4603      	mov	r3, r0
 801c216:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801c218:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c21c:	2b00      	cmp	r3, #0
 801c21e:	d007      	beq.n	801c230 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c220:	687b      	ldr	r3, [r7, #4]
 801c222:	8b5b      	ldrh	r3, [r3, #26]
 801c224:	f043 0303 	orr.w	r3, r3, #3
 801c228:	b29a      	uxth	r2, r3
 801c22a:	687b      	ldr	r3, [r7, #4]
 801c22c:	835a      	strh	r2, [r3, #26]
 801c22e:	e006      	b.n	801c23e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c230:	687b      	ldr	r3, [r7, #4]
 801c232:	8b5b      	ldrh	r3, [r3, #26]
 801c234:	f023 0303 	bic.w	r3, r3, #3
 801c238:	b29a      	uxth	r2, r3
 801c23a:	687b      	ldr	r3, [r7, #4]
 801c23c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801c23e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c242:	4618      	mov	r0, r3
 801c244:	371c      	adds	r7, #28
 801c246:	46bd      	mov	sp, r7
 801c248:	bd90      	pop	{r4, r7, pc}
 801c24a:	bf00      	nop
 801c24c:	08027db8 	.word	0x08027db8
 801c250:	080285a0 	.word	0x080285a0
 801c254:	08027e38 	.word	0x08027e38

0801c258 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801c258:	b590      	push	{r4, r7, lr}
 801c25a:	b087      	sub	sp, #28
 801c25c:	af00      	add	r7, sp, #0
 801c25e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801c260:	2300      	movs	r3, #0
 801c262:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801c264:	687b      	ldr	r3, [r7, #4]
 801c266:	2b00      	cmp	r3, #0
 801c268:	d106      	bne.n	801c278 <tcp_keepalive+0x20>
 801c26a:	4b18      	ldr	r3, [pc, #96]	; (801c2cc <tcp_keepalive+0x74>)
 801c26c:	f640 0224 	movw	r2, #2084	; 0x824
 801c270:	4917      	ldr	r1, [pc, #92]	; (801c2d0 <tcp_keepalive+0x78>)
 801c272:	4818      	ldr	r0, [pc, #96]	; (801c2d4 <tcp_keepalive+0x7c>)
 801c274:	f004 fc7a 	bl	8020b6c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801c278:	7dfb      	ldrb	r3, [r7, #23]
 801c27a:	b29c      	uxth	r4, r3
 801c27c:	687b      	ldr	r3, [r7, #4]
 801c27e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c280:	3b01      	subs	r3, #1
 801c282:	4618      	mov	r0, r3
 801c284:	f7f5 fd79 	bl	8011d7a <lwip_htonl>
 801c288:	4603      	mov	r3, r0
 801c28a:	2200      	movs	r2, #0
 801c28c:	4621      	mov	r1, r4
 801c28e:	6878      	ldr	r0, [r7, #4]
 801c290:	f7ff fe66 	bl	801bf60 <tcp_output_alloc_header>
 801c294:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801c296:	693b      	ldr	r3, [r7, #16]
 801c298:	2b00      	cmp	r3, #0
 801c29a:	d102      	bne.n	801c2a2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801c29c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c2a0:	e010      	b.n	801c2c4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801c2a2:	7dfb      	ldrb	r3, [r7, #23]
 801c2a4:	2200      	movs	r2, #0
 801c2a6:	6939      	ldr	r1, [r7, #16]
 801c2a8:	6878      	ldr	r0, [r7, #4]
 801c2aa:	f7ff fe97 	bl	801bfdc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801c2ae:	687a      	ldr	r2, [r7, #4]
 801c2b0:	687b      	ldr	r3, [r7, #4]
 801c2b2:	3304      	adds	r3, #4
 801c2b4:	6939      	ldr	r1, [r7, #16]
 801c2b6:	6878      	ldr	r0, [r7, #4]
 801c2b8:	f7ff fed0 	bl	801c05c <tcp_output_control_segment>
 801c2bc:	4603      	mov	r3, r0
 801c2be:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801c2c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c2c4:	4618      	mov	r0, r3
 801c2c6:	371c      	adds	r7, #28
 801c2c8:	46bd      	mov	sp, r7
 801c2ca:	bd90      	pop	{r4, r7, pc}
 801c2cc:	08027db8 	.word	0x08027db8
 801c2d0:	080285c0 	.word	0x080285c0
 801c2d4:	08027e38 	.word	0x08027e38

0801c2d8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801c2d8:	b590      	push	{r4, r7, lr}
 801c2da:	b08b      	sub	sp, #44	; 0x2c
 801c2dc:	af00      	add	r7, sp, #0
 801c2de:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801c2e0:	2300      	movs	r3, #0
 801c2e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801c2e6:	687b      	ldr	r3, [r7, #4]
 801c2e8:	2b00      	cmp	r3, #0
 801c2ea:	d106      	bne.n	801c2fa <tcp_zero_window_probe+0x22>
 801c2ec:	4b4c      	ldr	r3, [pc, #304]	; (801c420 <tcp_zero_window_probe+0x148>)
 801c2ee:	f640 024f 	movw	r2, #2127	; 0x84f
 801c2f2:	494c      	ldr	r1, [pc, #304]	; (801c424 <tcp_zero_window_probe+0x14c>)
 801c2f4:	484c      	ldr	r0, [pc, #304]	; (801c428 <tcp_zero_window_probe+0x150>)
 801c2f6:	f004 fc39 	bl	8020b6c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801c2fa:	687b      	ldr	r3, [r7, #4]
 801c2fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c2fe:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801c300:	6a3b      	ldr	r3, [r7, #32]
 801c302:	2b00      	cmp	r3, #0
 801c304:	d101      	bne.n	801c30a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801c306:	2300      	movs	r3, #0
 801c308:	e086      	b.n	801c418 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801c30a:	687b      	ldr	r3, [r7, #4]
 801c30c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801c310:	2bff      	cmp	r3, #255	; 0xff
 801c312:	d007      	beq.n	801c324 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801c314:	687b      	ldr	r3, [r7, #4]
 801c316:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801c31a:	3301      	adds	r3, #1
 801c31c:	b2da      	uxtb	r2, r3
 801c31e:	687b      	ldr	r3, [r7, #4]
 801c320:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801c324:	6a3b      	ldr	r3, [r7, #32]
 801c326:	68db      	ldr	r3, [r3, #12]
 801c328:	899b      	ldrh	r3, [r3, #12]
 801c32a:	b29b      	uxth	r3, r3
 801c32c:	4618      	mov	r0, r3
 801c32e:	f7f5 fd0f 	bl	8011d50 <lwip_htons>
 801c332:	4603      	mov	r3, r0
 801c334:	b2db      	uxtb	r3, r3
 801c336:	f003 0301 	and.w	r3, r3, #1
 801c33a:	2b00      	cmp	r3, #0
 801c33c:	d005      	beq.n	801c34a <tcp_zero_window_probe+0x72>
 801c33e:	6a3b      	ldr	r3, [r7, #32]
 801c340:	891b      	ldrh	r3, [r3, #8]
 801c342:	2b00      	cmp	r3, #0
 801c344:	d101      	bne.n	801c34a <tcp_zero_window_probe+0x72>
 801c346:	2301      	movs	r3, #1
 801c348:	e000      	b.n	801c34c <tcp_zero_window_probe+0x74>
 801c34a:	2300      	movs	r3, #0
 801c34c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801c34e:	7ffb      	ldrb	r3, [r7, #31]
 801c350:	2b00      	cmp	r3, #0
 801c352:	bf0c      	ite	eq
 801c354:	2301      	moveq	r3, #1
 801c356:	2300      	movne	r3, #0
 801c358:	b2db      	uxtb	r3, r3
 801c35a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801c35c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c360:	b299      	uxth	r1, r3
 801c362:	6a3b      	ldr	r3, [r7, #32]
 801c364:	68db      	ldr	r3, [r3, #12]
 801c366:	685b      	ldr	r3, [r3, #4]
 801c368:	8bba      	ldrh	r2, [r7, #28]
 801c36a:	6878      	ldr	r0, [r7, #4]
 801c36c:	f7ff fdf8 	bl	801bf60 <tcp_output_alloc_header>
 801c370:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801c372:	69bb      	ldr	r3, [r7, #24]
 801c374:	2b00      	cmp	r3, #0
 801c376:	d102      	bne.n	801c37e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801c378:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c37c:	e04c      	b.n	801c418 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801c37e:	69bb      	ldr	r3, [r7, #24]
 801c380:	685b      	ldr	r3, [r3, #4]
 801c382:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801c384:	7ffb      	ldrb	r3, [r7, #31]
 801c386:	2b00      	cmp	r3, #0
 801c388:	d011      	beq.n	801c3ae <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801c38a:	697b      	ldr	r3, [r7, #20]
 801c38c:	899b      	ldrh	r3, [r3, #12]
 801c38e:	b29b      	uxth	r3, r3
 801c390:	b21b      	sxth	r3, r3
 801c392:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801c396:	b21c      	sxth	r4, r3
 801c398:	2011      	movs	r0, #17
 801c39a:	f7f5 fcd9 	bl	8011d50 <lwip_htons>
 801c39e:	4603      	mov	r3, r0
 801c3a0:	b21b      	sxth	r3, r3
 801c3a2:	4323      	orrs	r3, r4
 801c3a4:	b21b      	sxth	r3, r3
 801c3a6:	b29a      	uxth	r2, r3
 801c3a8:	697b      	ldr	r3, [r7, #20]
 801c3aa:	819a      	strh	r2, [r3, #12]
 801c3ac:	e010      	b.n	801c3d0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801c3ae:	69bb      	ldr	r3, [r7, #24]
 801c3b0:	685b      	ldr	r3, [r3, #4]
 801c3b2:	3314      	adds	r3, #20
 801c3b4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801c3b6:	6a3b      	ldr	r3, [r7, #32]
 801c3b8:	6858      	ldr	r0, [r3, #4]
 801c3ba:	6a3b      	ldr	r3, [r7, #32]
 801c3bc:	685b      	ldr	r3, [r3, #4]
 801c3be:	891a      	ldrh	r2, [r3, #8]
 801c3c0:	6a3b      	ldr	r3, [r7, #32]
 801c3c2:	891b      	ldrh	r3, [r3, #8]
 801c3c4:	1ad3      	subs	r3, r2, r3
 801c3c6:	b29b      	uxth	r3, r3
 801c3c8:	2201      	movs	r2, #1
 801c3ca:	6939      	ldr	r1, [r7, #16]
 801c3cc:	f7f9 fda6 	bl	8015f1c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801c3d0:	6a3b      	ldr	r3, [r7, #32]
 801c3d2:	68db      	ldr	r3, [r3, #12]
 801c3d4:	685b      	ldr	r3, [r3, #4]
 801c3d6:	4618      	mov	r0, r3
 801c3d8:	f7f5 fccf 	bl	8011d7a <lwip_htonl>
 801c3dc:	4603      	mov	r3, r0
 801c3de:	3301      	adds	r3, #1
 801c3e0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801c3e2:	687b      	ldr	r3, [r7, #4]
 801c3e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c3e6:	68fb      	ldr	r3, [r7, #12]
 801c3e8:	1ad3      	subs	r3, r2, r3
 801c3ea:	2b00      	cmp	r3, #0
 801c3ec:	da02      	bge.n	801c3f4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801c3ee:	687b      	ldr	r3, [r7, #4]
 801c3f0:	68fa      	ldr	r2, [r7, #12]
 801c3f2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801c3f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c3f8:	2200      	movs	r2, #0
 801c3fa:	69b9      	ldr	r1, [r7, #24]
 801c3fc:	6878      	ldr	r0, [r7, #4]
 801c3fe:	f7ff fded 	bl	801bfdc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801c402:	687a      	ldr	r2, [r7, #4]
 801c404:	687b      	ldr	r3, [r7, #4]
 801c406:	3304      	adds	r3, #4
 801c408:	69b9      	ldr	r1, [r7, #24]
 801c40a:	6878      	ldr	r0, [r7, #4]
 801c40c:	f7ff fe26 	bl	801c05c <tcp_output_control_segment>
 801c410:	4603      	mov	r3, r0
 801c412:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801c414:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801c418:	4618      	mov	r0, r3
 801c41a:	372c      	adds	r7, #44	; 0x2c
 801c41c:	46bd      	mov	sp, r7
 801c41e:	bd90      	pop	{r4, r7, pc}
 801c420:	08027db8 	.word	0x08027db8
 801c424:	080285dc 	.word	0x080285dc
 801c428:	08027e38 	.word	0x08027e38

0801c42c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801c42c:	b580      	push	{r7, lr}
 801c42e:	b082      	sub	sp, #8
 801c430:	af00      	add	r7, sp, #0
 801c432:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801c434:	f7f9 ff18 	bl	8016268 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801c438:	4b0a      	ldr	r3, [pc, #40]	; (801c464 <tcpip_tcp_timer+0x38>)
 801c43a:	681b      	ldr	r3, [r3, #0]
 801c43c:	2b00      	cmp	r3, #0
 801c43e:	d103      	bne.n	801c448 <tcpip_tcp_timer+0x1c>
 801c440:	4b09      	ldr	r3, [pc, #36]	; (801c468 <tcpip_tcp_timer+0x3c>)
 801c442:	681b      	ldr	r3, [r3, #0]
 801c444:	2b00      	cmp	r3, #0
 801c446:	d005      	beq.n	801c454 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801c448:	2200      	movs	r2, #0
 801c44a:	4908      	ldr	r1, [pc, #32]	; (801c46c <tcpip_tcp_timer+0x40>)
 801c44c:	20fa      	movs	r0, #250	; 0xfa
 801c44e:	f000 f8f3 	bl	801c638 <sys_timeout>
 801c452:	e003      	b.n	801c45c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801c454:	4b06      	ldr	r3, [pc, #24]	; (801c470 <tcpip_tcp_timer+0x44>)
 801c456:	2200      	movs	r2, #0
 801c458:	601a      	str	r2, [r3, #0]
  }
}
 801c45a:	bf00      	nop
 801c45c:	bf00      	nop
 801c45e:	3708      	adds	r7, #8
 801c460:	46bd      	mov	sp, r7
 801c462:	bd80      	pop	{r7, pc}
 801c464:	24008e38 	.word	0x24008e38
 801c468:	24008e48 	.word	0x24008e48
 801c46c:	0801c42d 	.word	0x0801c42d
 801c470:	240057e0 	.word	0x240057e0

0801c474 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801c474:	b580      	push	{r7, lr}
 801c476:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801c478:	4b0a      	ldr	r3, [pc, #40]	; (801c4a4 <tcp_timer_needed+0x30>)
 801c47a:	681b      	ldr	r3, [r3, #0]
 801c47c:	2b00      	cmp	r3, #0
 801c47e:	d10f      	bne.n	801c4a0 <tcp_timer_needed+0x2c>
 801c480:	4b09      	ldr	r3, [pc, #36]	; (801c4a8 <tcp_timer_needed+0x34>)
 801c482:	681b      	ldr	r3, [r3, #0]
 801c484:	2b00      	cmp	r3, #0
 801c486:	d103      	bne.n	801c490 <tcp_timer_needed+0x1c>
 801c488:	4b08      	ldr	r3, [pc, #32]	; (801c4ac <tcp_timer_needed+0x38>)
 801c48a:	681b      	ldr	r3, [r3, #0]
 801c48c:	2b00      	cmp	r3, #0
 801c48e:	d007      	beq.n	801c4a0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801c490:	4b04      	ldr	r3, [pc, #16]	; (801c4a4 <tcp_timer_needed+0x30>)
 801c492:	2201      	movs	r2, #1
 801c494:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801c496:	2200      	movs	r2, #0
 801c498:	4905      	ldr	r1, [pc, #20]	; (801c4b0 <tcp_timer_needed+0x3c>)
 801c49a:	20fa      	movs	r0, #250	; 0xfa
 801c49c:	f000 f8cc 	bl	801c638 <sys_timeout>
  }
}
 801c4a0:	bf00      	nop
 801c4a2:	bd80      	pop	{r7, pc}
 801c4a4:	240057e0 	.word	0x240057e0
 801c4a8:	24008e38 	.word	0x24008e38
 801c4ac:	24008e48 	.word	0x24008e48
 801c4b0:	0801c42d 	.word	0x0801c42d

0801c4b4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801c4b4:	b580      	push	{r7, lr}
 801c4b6:	b086      	sub	sp, #24
 801c4b8:	af00      	add	r7, sp, #0
 801c4ba:	60f8      	str	r0, [r7, #12]
 801c4bc:	60b9      	str	r1, [r7, #8]
 801c4be:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801c4c0:	2006      	movs	r0, #6
 801c4c2:	f7f8 fc5b 	bl	8014d7c <memp_malloc>
 801c4c6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801c4c8:	693b      	ldr	r3, [r7, #16]
 801c4ca:	2b00      	cmp	r3, #0
 801c4cc:	d109      	bne.n	801c4e2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801c4ce:	693b      	ldr	r3, [r7, #16]
 801c4d0:	2b00      	cmp	r3, #0
 801c4d2:	d151      	bne.n	801c578 <sys_timeout_abs+0xc4>
 801c4d4:	4b2a      	ldr	r3, [pc, #168]	; (801c580 <sys_timeout_abs+0xcc>)
 801c4d6:	22be      	movs	r2, #190	; 0xbe
 801c4d8:	492a      	ldr	r1, [pc, #168]	; (801c584 <sys_timeout_abs+0xd0>)
 801c4da:	482b      	ldr	r0, [pc, #172]	; (801c588 <sys_timeout_abs+0xd4>)
 801c4dc:	f004 fb46 	bl	8020b6c <iprintf>
    return;
 801c4e0:	e04a      	b.n	801c578 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801c4e2:	693b      	ldr	r3, [r7, #16]
 801c4e4:	2200      	movs	r2, #0
 801c4e6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801c4e8:	693b      	ldr	r3, [r7, #16]
 801c4ea:	68ba      	ldr	r2, [r7, #8]
 801c4ec:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801c4ee:	693b      	ldr	r3, [r7, #16]
 801c4f0:	687a      	ldr	r2, [r7, #4]
 801c4f2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801c4f4:	693b      	ldr	r3, [r7, #16]
 801c4f6:	68fa      	ldr	r2, [r7, #12]
 801c4f8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801c4fa:	4b24      	ldr	r3, [pc, #144]	; (801c58c <sys_timeout_abs+0xd8>)
 801c4fc:	681b      	ldr	r3, [r3, #0]
 801c4fe:	2b00      	cmp	r3, #0
 801c500:	d103      	bne.n	801c50a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801c502:	4a22      	ldr	r2, [pc, #136]	; (801c58c <sys_timeout_abs+0xd8>)
 801c504:	693b      	ldr	r3, [r7, #16]
 801c506:	6013      	str	r3, [r2, #0]
    return;
 801c508:	e037      	b.n	801c57a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801c50a:	693b      	ldr	r3, [r7, #16]
 801c50c:	685a      	ldr	r2, [r3, #4]
 801c50e:	4b1f      	ldr	r3, [pc, #124]	; (801c58c <sys_timeout_abs+0xd8>)
 801c510:	681b      	ldr	r3, [r3, #0]
 801c512:	685b      	ldr	r3, [r3, #4]
 801c514:	1ad3      	subs	r3, r2, r3
 801c516:	0fdb      	lsrs	r3, r3, #31
 801c518:	f003 0301 	and.w	r3, r3, #1
 801c51c:	b2db      	uxtb	r3, r3
 801c51e:	2b00      	cmp	r3, #0
 801c520:	d007      	beq.n	801c532 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801c522:	4b1a      	ldr	r3, [pc, #104]	; (801c58c <sys_timeout_abs+0xd8>)
 801c524:	681a      	ldr	r2, [r3, #0]
 801c526:	693b      	ldr	r3, [r7, #16]
 801c528:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801c52a:	4a18      	ldr	r2, [pc, #96]	; (801c58c <sys_timeout_abs+0xd8>)
 801c52c:	693b      	ldr	r3, [r7, #16]
 801c52e:	6013      	str	r3, [r2, #0]
 801c530:	e023      	b.n	801c57a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801c532:	4b16      	ldr	r3, [pc, #88]	; (801c58c <sys_timeout_abs+0xd8>)
 801c534:	681b      	ldr	r3, [r3, #0]
 801c536:	617b      	str	r3, [r7, #20]
 801c538:	e01a      	b.n	801c570 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801c53a:	697b      	ldr	r3, [r7, #20]
 801c53c:	681b      	ldr	r3, [r3, #0]
 801c53e:	2b00      	cmp	r3, #0
 801c540:	d00b      	beq.n	801c55a <sys_timeout_abs+0xa6>
 801c542:	693b      	ldr	r3, [r7, #16]
 801c544:	685a      	ldr	r2, [r3, #4]
 801c546:	697b      	ldr	r3, [r7, #20]
 801c548:	681b      	ldr	r3, [r3, #0]
 801c54a:	685b      	ldr	r3, [r3, #4]
 801c54c:	1ad3      	subs	r3, r2, r3
 801c54e:	0fdb      	lsrs	r3, r3, #31
 801c550:	f003 0301 	and.w	r3, r3, #1
 801c554:	b2db      	uxtb	r3, r3
 801c556:	2b00      	cmp	r3, #0
 801c558:	d007      	beq.n	801c56a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801c55a:	697b      	ldr	r3, [r7, #20]
 801c55c:	681a      	ldr	r2, [r3, #0]
 801c55e:	693b      	ldr	r3, [r7, #16]
 801c560:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801c562:	697b      	ldr	r3, [r7, #20]
 801c564:	693a      	ldr	r2, [r7, #16]
 801c566:	601a      	str	r2, [r3, #0]
        break;
 801c568:	e007      	b.n	801c57a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801c56a:	697b      	ldr	r3, [r7, #20]
 801c56c:	681b      	ldr	r3, [r3, #0]
 801c56e:	617b      	str	r3, [r7, #20]
 801c570:	697b      	ldr	r3, [r7, #20]
 801c572:	2b00      	cmp	r3, #0
 801c574:	d1e1      	bne.n	801c53a <sys_timeout_abs+0x86>
 801c576:	e000      	b.n	801c57a <sys_timeout_abs+0xc6>
    return;
 801c578:	bf00      	nop
      }
    }
  }
}
 801c57a:	3718      	adds	r7, #24
 801c57c:	46bd      	mov	sp, r7
 801c57e:	bd80      	pop	{r7, pc}
 801c580:	08028600 	.word	0x08028600
 801c584:	08028660 	.word	0x08028660
 801c588:	080286a0 	.word	0x080286a0
 801c58c:	240057d8 	.word	0x240057d8

0801c590 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801c590:	b580      	push	{r7, lr}
 801c592:	b086      	sub	sp, #24
 801c594:	af00      	add	r7, sp, #0
 801c596:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801c598:	687b      	ldr	r3, [r7, #4]
 801c59a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801c59c:	697b      	ldr	r3, [r7, #20]
 801c59e:	685b      	ldr	r3, [r3, #4]
 801c5a0:	4798      	blx	r3

  now = sys_now();
 801c5a2:	f7f4 fe17 	bl	80111d4 <sys_now>
 801c5a6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801c5a8:	697b      	ldr	r3, [r7, #20]
 801c5aa:	681a      	ldr	r2, [r3, #0]
 801c5ac:	4b0f      	ldr	r3, [pc, #60]	; (801c5ec <lwip_cyclic_timer+0x5c>)
 801c5ae:	681b      	ldr	r3, [r3, #0]
 801c5b0:	4413      	add	r3, r2
 801c5b2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801c5b4:	68fa      	ldr	r2, [r7, #12]
 801c5b6:	693b      	ldr	r3, [r7, #16]
 801c5b8:	1ad3      	subs	r3, r2, r3
 801c5ba:	0fdb      	lsrs	r3, r3, #31
 801c5bc:	f003 0301 	and.w	r3, r3, #1
 801c5c0:	b2db      	uxtb	r3, r3
 801c5c2:	2b00      	cmp	r3, #0
 801c5c4:	d009      	beq.n	801c5da <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801c5c6:	697b      	ldr	r3, [r7, #20]
 801c5c8:	681a      	ldr	r2, [r3, #0]
 801c5ca:	693b      	ldr	r3, [r7, #16]
 801c5cc:	4413      	add	r3, r2
 801c5ce:	687a      	ldr	r2, [r7, #4]
 801c5d0:	4907      	ldr	r1, [pc, #28]	; (801c5f0 <lwip_cyclic_timer+0x60>)
 801c5d2:	4618      	mov	r0, r3
 801c5d4:	f7ff ff6e 	bl	801c4b4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801c5d8:	e004      	b.n	801c5e4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801c5da:	687a      	ldr	r2, [r7, #4]
 801c5dc:	4904      	ldr	r1, [pc, #16]	; (801c5f0 <lwip_cyclic_timer+0x60>)
 801c5de:	68f8      	ldr	r0, [r7, #12]
 801c5e0:	f7ff ff68 	bl	801c4b4 <sys_timeout_abs>
}
 801c5e4:	bf00      	nop
 801c5e6:	3718      	adds	r7, #24
 801c5e8:	46bd      	mov	sp, r7
 801c5ea:	bd80      	pop	{r7, pc}
 801c5ec:	240057dc 	.word	0x240057dc
 801c5f0:	0801c591 	.word	0x0801c591

0801c5f4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801c5f4:	b580      	push	{r7, lr}
 801c5f6:	b082      	sub	sp, #8
 801c5f8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801c5fa:	2301      	movs	r3, #1
 801c5fc:	607b      	str	r3, [r7, #4]
 801c5fe:	e00e      	b.n	801c61e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801c600:	4a0b      	ldr	r2, [pc, #44]	; (801c630 <sys_timeouts_init+0x3c>)
 801c602:	687b      	ldr	r3, [r7, #4]
 801c604:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801c608:	687b      	ldr	r3, [r7, #4]
 801c60a:	00db      	lsls	r3, r3, #3
 801c60c:	4a08      	ldr	r2, [pc, #32]	; (801c630 <sys_timeouts_init+0x3c>)
 801c60e:	4413      	add	r3, r2
 801c610:	461a      	mov	r2, r3
 801c612:	4908      	ldr	r1, [pc, #32]	; (801c634 <sys_timeouts_init+0x40>)
 801c614:	f000 f810 	bl	801c638 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801c618:	687b      	ldr	r3, [r7, #4]
 801c61a:	3301      	adds	r3, #1
 801c61c:	607b      	str	r3, [r7, #4]
 801c61e:	687b      	ldr	r3, [r7, #4]
 801c620:	2b02      	cmp	r3, #2
 801c622:	d9ed      	bls.n	801c600 <sys_timeouts_init+0xc>
  }
}
 801c624:	bf00      	nop
 801c626:	bf00      	nop
 801c628:	3708      	adds	r7, #8
 801c62a:	46bd      	mov	sp, r7
 801c62c:	bd80      	pop	{r7, pc}
 801c62e:	bf00      	nop
 801c630:	08029234 	.word	0x08029234
 801c634:	0801c591 	.word	0x0801c591

0801c638 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801c638:	b580      	push	{r7, lr}
 801c63a:	b086      	sub	sp, #24
 801c63c:	af00      	add	r7, sp, #0
 801c63e:	60f8      	str	r0, [r7, #12]
 801c640:	60b9      	str	r1, [r7, #8]
 801c642:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801c644:	68fb      	ldr	r3, [r7, #12]
 801c646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c64a:	d306      	bcc.n	801c65a <sys_timeout+0x22>
 801c64c:	4b0a      	ldr	r3, [pc, #40]	; (801c678 <sys_timeout+0x40>)
 801c64e:	f240 1229 	movw	r2, #297	; 0x129
 801c652:	490a      	ldr	r1, [pc, #40]	; (801c67c <sys_timeout+0x44>)
 801c654:	480a      	ldr	r0, [pc, #40]	; (801c680 <sys_timeout+0x48>)
 801c656:	f004 fa89 	bl	8020b6c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801c65a:	f7f4 fdbb 	bl	80111d4 <sys_now>
 801c65e:	4602      	mov	r2, r0
 801c660:	68fb      	ldr	r3, [r7, #12]
 801c662:	4413      	add	r3, r2
 801c664:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801c666:	687a      	ldr	r2, [r7, #4]
 801c668:	68b9      	ldr	r1, [r7, #8]
 801c66a:	6978      	ldr	r0, [r7, #20]
 801c66c:	f7ff ff22 	bl	801c4b4 <sys_timeout_abs>
#endif
}
 801c670:	bf00      	nop
 801c672:	3718      	adds	r7, #24
 801c674:	46bd      	mov	sp, r7
 801c676:	bd80      	pop	{r7, pc}
 801c678:	08028600 	.word	0x08028600
 801c67c:	080286c8 	.word	0x080286c8
 801c680:	080286a0 	.word	0x080286a0

0801c684 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801c684:	b580      	push	{r7, lr}
 801c686:	b084      	sub	sp, #16
 801c688:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801c68a:	f7f4 fda3 	bl	80111d4 <sys_now>
 801c68e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 801c690:	4b1a      	ldr	r3, [pc, #104]	; (801c6fc <sys_check_timeouts+0x78>)
 801c692:	781b      	ldrb	r3, [r3, #0]
 801c694:	b2db      	uxtb	r3, r3
 801c696:	2b00      	cmp	r3, #0
 801c698:	d001      	beq.n	801c69e <sys_check_timeouts+0x1a>
 801c69a:	f7f8 ff1b 	bl	80154d4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 801c69e:	4b18      	ldr	r3, [pc, #96]	; (801c700 <sys_check_timeouts+0x7c>)
 801c6a0:	681b      	ldr	r3, [r3, #0]
 801c6a2:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801c6a4:	68bb      	ldr	r3, [r7, #8]
 801c6a6:	2b00      	cmp	r3, #0
 801c6a8:	d022      	beq.n	801c6f0 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801c6aa:	68bb      	ldr	r3, [r7, #8]
 801c6ac:	685b      	ldr	r3, [r3, #4]
 801c6ae:	68fa      	ldr	r2, [r7, #12]
 801c6b0:	1ad3      	subs	r3, r2, r3
 801c6b2:	0fdb      	lsrs	r3, r3, #31
 801c6b4:	f003 0301 	and.w	r3, r3, #1
 801c6b8:	b2db      	uxtb	r3, r3
 801c6ba:	2b00      	cmp	r3, #0
 801c6bc:	d11a      	bne.n	801c6f4 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801c6be:	68bb      	ldr	r3, [r7, #8]
 801c6c0:	681b      	ldr	r3, [r3, #0]
 801c6c2:	4a0f      	ldr	r2, [pc, #60]	; (801c700 <sys_check_timeouts+0x7c>)
 801c6c4:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801c6c6:	68bb      	ldr	r3, [r7, #8]
 801c6c8:	689b      	ldr	r3, [r3, #8]
 801c6ca:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801c6cc:	68bb      	ldr	r3, [r7, #8]
 801c6ce:	68db      	ldr	r3, [r3, #12]
 801c6d0:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801c6d2:	68bb      	ldr	r3, [r7, #8]
 801c6d4:	685b      	ldr	r3, [r3, #4]
 801c6d6:	4a0b      	ldr	r2, [pc, #44]	; (801c704 <sys_check_timeouts+0x80>)
 801c6d8:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801c6da:	68b9      	ldr	r1, [r7, #8]
 801c6dc:	2006      	movs	r0, #6
 801c6de:	f7f8 fbbd 	bl	8014e5c <memp_free>
    if (handler != NULL) {
 801c6e2:	687b      	ldr	r3, [r7, #4]
 801c6e4:	2b00      	cmp	r3, #0
 801c6e6:	d0d3      	beq.n	801c690 <sys_check_timeouts+0xc>
      handler(arg);
 801c6e8:	687b      	ldr	r3, [r7, #4]
 801c6ea:	6838      	ldr	r0, [r7, #0]
 801c6ec:	4798      	blx	r3
  do {
 801c6ee:	e7cf      	b.n	801c690 <sys_check_timeouts+0xc>
      return;
 801c6f0:	bf00      	nop
 801c6f2:	e000      	b.n	801c6f6 <sys_check_timeouts+0x72>
      return;
 801c6f4:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801c6f6:	3710      	adds	r7, #16
 801c6f8:	46bd      	mov	sp, r7
 801c6fa:	bd80      	pop	{r7, pc}
 801c6fc:	24008e30 	.word	0x24008e30
 801c700:	240057d8 	.word	0x240057d8
 801c704:	240057dc 	.word	0x240057dc

0801c708 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801c708:	b580      	push	{r7, lr}
 801c70a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801c70c:	f004 fabc 	bl	8020c88 <rand>
 801c710:	4603      	mov	r3, r0
 801c712:	b29b      	uxth	r3, r3
 801c714:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801c718:	b29b      	uxth	r3, r3
 801c71a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801c71e:	b29a      	uxth	r2, r3
 801c720:	4b01      	ldr	r3, [pc, #4]	; (801c728 <udp_init+0x20>)
 801c722:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801c724:	bf00      	nop
 801c726:	bd80      	pop	{r7, pc}
 801c728:	2400042c 	.word	0x2400042c

0801c72c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801c72c:	b480      	push	{r7}
 801c72e:	b083      	sub	sp, #12
 801c730:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801c732:	2300      	movs	r3, #0
 801c734:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801c736:	4b17      	ldr	r3, [pc, #92]	; (801c794 <udp_new_port+0x68>)
 801c738:	881b      	ldrh	r3, [r3, #0]
 801c73a:	1c5a      	adds	r2, r3, #1
 801c73c:	b291      	uxth	r1, r2
 801c73e:	4a15      	ldr	r2, [pc, #84]	; (801c794 <udp_new_port+0x68>)
 801c740:	8011      	strh	r1, [r2, #0]
 801c742:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c746:	4293      	cmp	r3, r2
 801c748:	d103      	bne.n	801c752 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801c74a:	4b12      	ldr	r3, [pc, #72]	; (801c794 <udp_new_port+0x68>)
 801c74c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801c750:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c752:	4b11      	ldr	r3, [pc, #68]	; (801c798 <udp_new_port+0x6c>)
 801c754:	681b      	ldr	r3, [r3, #0]
 801c756:	603b      	str	r3, [r7, #0]
 801c758:	e011      	b.n	801c77e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801c75a:	683b      	ldr	r3, [r7, #0]
 801c75c:	8a5a      	ldrh	r2, [r3, #18]
 801c75e:	4b0d      	ldr	r3, [pc, #52]	; (801c794 <udp_new_port+0x68>)
 801c760:	881b      	ldrh	r3, [r3, #0]
 801c762:	429a      	cmp	r2, r3
 801c764:	d108      	bne.n	801c778 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801c766:	88fb      	ldrh	r3, [r7, #6]
 801c768:	3301      	adds	r3, #1
 801c76a:	80fb      	strh	r3, [r7, #6]
 801c76c:	88fb      	ldrh	r3, [r7, #6]
 801c76e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801c772:	d3e0      	bcc.n	801c736 <udp_new_port+0xa>
        return 0;
 801c774:	2300      	movs	r3, #0
 801c776:	e007      	b.n	801c788 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c778:	683b      	ldr	r3, [r7, #0]
 801c77a:	68db      	ldr	r3, [r3, #12]
 801c77c:	603b      	str	r3, [r7, #0]
 801c77e:	683b      	ldr	r3, [r7, #0]
 801c780:	2b00      	cmp	r3, #0
 801c782:	d1ea      	bne.n	801c75a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801c784:	4b03      	ldr	r3, [pc, #12]	; (801c794 <udp_new_port+0x68>)
 801c786:	881b      	ldrh	r3, [r3, #0]
}
 801c788:	4618      	mov	r0, r3
 801c78a:	370c      	adds	r7, #12
 801c78c:	46bd      	mov	sp, r7
 801c78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c792:	4770      	bx	lr
 801c794:	2400042c 	.word	0x2400042c
 801c798:	24008e50 	.word	0x24008e50

0801c79c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801c79c:	b580      	push	{r7, lr}
 801c79e:	b084      	sub	sp, #16
 801c7a0:	af00      	add	r7, sp, #0
 801c7a2:	60f8      	str	r0, [r7, #12]
 801c7a4:	60b9      	str	r1, [r7, #8]
 801c7a6:	4613      	mov	r3, r2
 801c7a8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801c7aa:	68fb      	ldr	r3, [r7, #12]
 801c7ac:	2b00      	cmp	r3, #0
 801c7ae:	d105      	bne.n	801c7bc <udp_input_local_match+0x20>
 801c7b0:	4b27      	ldr	r3, [pc, #156]	; (801c850 <udp_input_local_match+0xb4>)
 801c7b2:	2287      	movs	r2, #135	; 0x87
 801c7b4:	4927      	ldr	r1, [pc, #156]	; (801c854 <udp_input_local_match+0xb8>)
 801c7b6:	4828      	ldr	r0, [pc, #160]	; (801c858 <udp_input_local_match+0xbc>)
 801c7b8:	f004 f9d8 	bl	8020b6c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801c7bc:	68bb      	ldr	r3, [r7, #8]
 801c7be:	2b00      	cmp	r3, #0
 801c7c0:	d105      	bne.n	801c7ce <udp_input_local_match+0x32>
 801c7c2:	4b23      	ldr	r3, [pc, #140]	; (801c850 <udp_input_local_match+0xb4>)
 801c7c4:	2288      	movs	r2, #136	; 0x88
 801c7c6:	4925      	ldr	r1, [pc, #148]	; (801c85c <udp_input_local_match+0xc0>)
 801c7c8:	4823      	ldr	r0, [pc, #140]	; (801c858 <udp_input_local_match+0xbc>)
 801c7ca:	f004 f9cf 	bl	8020b6c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c7ce:	68fb      	ldr	r3, [r7, #12]
 801c7d0:	7a1b      	ldrb	r3, [r3, #8]
 801c7d2:	2b00      	cmp	r3, #0
 801c7d4:	d00b      	beq.n	801c7ee <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801c7d6:	68fb      	ldr	r3, [r7, #12]
 801c7d8:	7a1a      	ldrb	r2, [r3, #8]
 801c7da:	4b21      	ldr	r3, [pc, #132]	; (801c860 <udp_input_local_match+0xc4>)
 801c7dc:	685b      	ldr	r3, [r3, #4]
 801c7de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801c7e2:	3301      	adds	r3, #1
 801c7e4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c7e6:	429a      	cmp	r2, r3
 801c7e8:	d001      	beq.n	801c7ee <udp_input_local_match+0x52>
    return 0;
 801c7ea:	2300      	movs	r3, #0
 801c7ec:	e02b      	b.n	801c846 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801c7ee:	79fb      	ldrb	r3, [r7, #7]
 801c7f0:	2b00      	cmp	r3, #0
 801c7f2:	d018      	beq.n	801c826 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c7f4:	68fb      	ldr	r3, [r7, #12]
 801c7f6:	2b00      	cmp	r3, #0
 801c7f8:	d013      	beq.n	801c822 <udp_input_local_match+0x86>
 801c7fa:	68fb      	ldr	r3, [r7, #12]
 801c7fc:	681b      	ldr	r3, [r3, #0]
 801c7fe:	2b00      	cmp	r3, #0
 801c800:	d00f      	beq.n	801c822 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801c802:	4b17      	ldr	r3, [pc, #92]	; (801c860 <udp_input_local_match+0xc4>)
 801c804:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c806:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c80a:	d00a      	beq.n	801c822 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801c80c:	68fb      	ldr	r3, [r7, #12]
 801c80e:	681a      	ldr	r2, [r3, #0]
 801c810:	4b13      	ldr	r3, [pc, #76]	; (801c860 <udp_input_local_match+0xc4>)
 801c812:	695b      	ldr	r3, [r3, #20]
 801c814:	405a      	eors	r2, r3
 801c816:	68bb      	ldr	r3, [r7, #8]
 801c818:	3308      	adds	r3, #8
 801c81a:	681b      	ldr	r3, [r3, #0]
 801c81c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801c81e:	2b00      	cmp	r3, #0
 801c820:	d110      	bne.n	801c844 <udp_input_local_match+0xa8>
          return 1;
 801c822:	2301      	movs	r3, #1
 801c824:	e00f      	b.n	801c846 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801c826:	68fb      	ldr	r3, [r7, #12]
 801c828:	2b00      	cmp	r3, #0
 801c82a:	d009      	beq.n	801c840 <udp_input_local_match+0xa4>
 801c82c:	68fb      	ldr	r3, [r7, #12]
 801c82e:	681b      	ldr	r3, [r3, #0]
 801c830:	2b00      	cmp	r3, #0
 801c832:	d005      	beq.n	801c840 <udp_input_local_match+0xa4>
 801c834:	68fb      	ldr	r3, [r7, #12]
 801c836:	681a      	ldr	r2, [r3, #0]
 801c838:	4b09      	ldr	r3, [pc, #36]	; (801c860 <udp_input_local_match+0xc4>)
 801c83a:	695b      	ldr	r3, [r3, #20]
 801c83c:	429a      	cmp	r2, r3
 801c83e:	d101      	bne.n	801c844 <udp_input_local_match+0xa8>
        return 1;
 801c840:	2301      	movs	r3, #1
 801c842:	e000      	b.n	801c846 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801c844:	2300      	movs	r3, #0
}
 801c846:	4618      	mov	r0, r3
 801c848:	3710      	adds	r7, #16
 801c84a:	46bd      	mov	sp, r7
 801c84c:	bd80      	pop	{r7, pc}
 801c84e:	bf00      	nop
 801c850:	08028714 	.word	0x08028714
 801c854:	08028770 	.word	0x08028770
 801c858:	08028794 	.word	0x08028794
 801c85c:	080287bc 	.word	0x080287bc
 801c860:	24005f48 	.word	0x24005f48

0801c864 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801c864:	b590      	push	{r4, r7, lr}
 801c866:	b08d      	sub	sp, #52	; 0x34
 801c868:	af02      	add	r7, sp, #8
 801c86a:	6078      	str	r0, [r7, #4]
 801c86c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801c86e:	2300      	movs	r3, #0
 801c870:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801c872:	687b      	ldr	r3, [r7, #4]
 801c874:	2b00      	cmp	r3, #0
 801c876:	d105      	bne.n	801c884 <udp_input+0x20>
 801c878:	4b7c      	ldr	r3, [pc, #496]	; (801ca6c <udp_input+0x208>)
 801c87a:	22cf      	movs	r2, #207	; 0xcf
 801c87c:	497c      	ldr	r1, [pc, #496]	; (801ca70 <udp_input+0x20c>)
 801c87e:	487d      	ldr	r0, [pc, #500]	; (801ca74 <udp_input+0x210>)
 801c880:	f004 f974 	bl	8020b6c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801c884:	683b      	ldr	r3, [r7, #0]
 801c886:	2b00      	cmp	r3, #0
 801c888:	d105      	bne.n	801c896 <udp_input+0x32>
 801c88a:	4b78      	ldr	r3, [pc, #480]	; (801ca6c <udp_input+0x208>)
 801c88c:	22d0      	movs	r2, #208	; 0xd0
 801c88e:	497a      	ldr	r1, [pc, #488]	; (801ca78 <udp_input+0x214>)
 801c890:	4878      	ldr	r0, [pc, #480]	; (801ca74 <udp_input+0x210>)
 801c892:	f004 f96b 	bl	8020b6c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801c896:	687b      	ldr	r3, [r7, #4]
 801c898:	895b      	ldrh	r3, [r3, #10]
 801c89a:	2b07      	cmp	r3, #7
 801c89c:	d803      	bhi.n	801c8a6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801c89e:	6878      	ldr	r0, [r7, #4]
 801c8a0:	f7f9 f952 	bl	8015b48 <pbuf_free>
    goto end;
 801c8a4:	e0de      	b.n	801ca64 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801c8a6:	687b      	ldr	r3, [r7, #4]
 801c8a8:	685b      	ldr	r3, [r3, #4]
 801c8aa:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801c8ac:	4b73      	ldr	r3, [pc, #460]	; (801ca7c <udp_input+0x218>)
 801c8ae:	695b      	ldr	r3, [r3, #20]
 801c8b0:	4a72      	ldr	r2, [pc, #456]	; (801ca7c <udp_input+0x218>)
 801c8b2:	6812      	ldr	r2, [r2, #0]
 801c8b4:	4611      	mov	r1, r2
 801c8b6:	4618      	mov	r0, r3
 801c8b8:	f7f6 ffb6 	bl	8013828 <ip4_addr_isbroadcast_u32>
 801c8bc:	4603      	mov	r3, r0
 801c8be:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801c8c0:	697b      	ldr	r3, [r7, #20]
 801c8c2:	881b      	ldrh	r3, [r3, #0]
 801c8c4:	b29b      	uxth	r3, r3
 801c8c6:	4618      	mov	r0, r3
 801c8c8:	f7f5 fa42 	bl	8011d50 <lwip_htons>
 801c8cc:	4603      	mov	r3, r0
 801c8ce:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801c8d0:	697b      	ldr	r3, [r7, #20]
 801c8d2:	885b      	ldrh	r3, [r3, #2]
 801c8d4:	b29b      	uxth	r3, r3
 801c8d6:	4618      	mov	r0, r3
 801c8d8:	f7f5 fa3a 	bl	8011d50 <lwip_htons>
 801c8dc:	4603      	mov	r3, r0
 801c8de:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801c8e0:	2300      	movs	r3, #0
 801c8e2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801c8e4:	2300      	movs	r3, #0
 801c8e6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801c8e8:	2300      	movs	r3, #0
 801c8ea:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c8ec:	4b64      	ldr	r3, [pc, #400]	; (801ca80 <udp_input+0x21c>)
 801c8ee:	681b      	ldr	r3, [r3, #0]
 801c8f0:	627b      	str	r3, [r7, #36]	; 0x24
 801c8f2:	e054      	b.n	801c99e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801c8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c8f6:	8a5b      	ldrh	r3, [r3, #18]
 801c8f8:	89fa      	ldrh	r2, [r7, #14]
 801c8fa:	429a      	cmp	r2, r3
 801c8fc:	d14a      	bne.n	801c994 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801c8fe:	7cfb      	ldrb	r3, [r7, #19]
 801c900:	461a      	mov	r2, r3
 801c902:	6839      	ldr	r1, [r7, #0]
 801c904:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c906:	f7ff ff49 	bl	801c79c <udp_input_local_match>
 801c90a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801c90c:	2b00      	cmp	r3, #0
 801c90e:	d041      	beq.n	801c994 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801c910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c912:	7c1b      	ldrb	r3, [r3, #16]
 801c914:	f003 0304 	and.w	r3, r3, #4
 801c918:	2b00      	cmp	r3, #0
 801c91a:	d11d      	bne.n	801c958 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801c91c:	69fb      	ldr	r3, [r7, #28]
 801c91e:	2b00      	cmp	r3, #0
 801c920:	d102      	bne.n	801c928 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801c922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c924:	61fb      	str	r3, [r7, #28]
 801c926:	e017      	b.n	801c958 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801c928:	7cfb      	ldrb	r3, [r7, #19]
 801c92a:	2b00      	cmp	r3, #0
 801c92c:	d014      	beq.n	801c958 <udp_input+0xf4>
 801c92e:	4b53      	ldr	r3, [pc, #332]	; (801ca7c <udp_input+0x218>)
 801c930:	695b      	ldr	r3, [r3, #20]
 801c932:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c936:	d10f      	bne.n	801c958 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801c938:	69fb      	ldr	r3, [r7, #28]
 801c93a:	681a      	ldr	r2, [r3, #0]
 801c93c:	683b      	ldr	r3, [r7, #0]
 801c93e:	3304      	adds	r3, #4
 801c940:	681b      	ldr	r3, [r3, #0]
 801c942:	429a      	cmp	r2, r3
 801c944:	d008      	beq.n	801c958 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801c946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c948:	681a      	ldr	r2, [r3, #0]
 801c94a:	683b      	ldr	r3, [r7, #0]
 801c94c:	3304      	adds	r3, #4
 801c94e:	681b      	ldr	r3, [r3, #0]
 801c950:	429a      	cmp	r2, r3
 801c952:	d101      	bne.n	801c958 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801c954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c956:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801c958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c95a:	8a9b      	ldrh	r3, [r3, #20]
 801c95c:	8a3a      	ldrh	r2, [r7, #16]
 801c95e:	429a      	cmp	r2, r3
 801c960:	d118      	bne.n	801c994 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801c962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c964:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801c966:	2b00      	cmp	r3, #0
 801c968:	d005      	beq.n	801c976 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801c96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c96c:	685a      	ldr	r2, [r3, #4]
 801c96e:	4b43      	ldr	r3, [pc, #268]	; (801ca7c <udp_input+0x218>)
 801c970:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801c972:	429a      	cmp	r2, r3
 801c974:	d10e      	bne.n	801c994 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801c976:	6a3b      	ldr	r3, [r7, #32]
 801c978:	2b00      	cmp	r3, #0
 801c97a:	d014      	beq.n	801c9a6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801c97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c97e:	68da      	ldr	r2, [r3, #12]
 801c980:	6a3b      	ldr	r3, [r7, #32]
 801c982:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801c984:	4b3e      	ldr	r3, [pc, #248]	; (801ca80 <udp_input+0x21c>)
 801c986:	681a      	ldr	r2, [r3, #0]
 801c988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c98a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801c98c:	4a3c      	ldr	r2, [pc, #240]	; (801ca80 <udp_input+0x21c>)
 801c98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c990:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801c992:	e008      	b.n	801c9a6 <udp_input+0x142>
      }
    }

    prev = pcb;
 801c994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c996:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c99a:	68db      	ldr	r3, [r3, #12]
 801c99c:	627b      	str	r3, [r7, #36]	; 0x24
 801c99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9a0:	2b00      	cmp	r3, #0
 801c9a2:	d1a7      	bne.n	801c8f4 <udp_input+0x90>
 801c9a4:	e000      	b.n	801c9a8 <udp_input+0x144>
        break;
 801c9a6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801c9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9aa:	2b00      	cmp	r3, #0
 801c9ac:	d101      	bne.n	801c9b2 <udp_input+0x14e>
    pcb = uncon_pcb;
 801c9ae:	69fb      	ldr	r3, [r7, #28]
 801c9b0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801c9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9b4:	2b00      	cmp	r3, #0
 801c9b6:	d002      	beq.n	801c9be <udp_input+0x15a>
    for_us = 1;
 801c9b8:	2301      	movs	r3, #1
 801c9ba:	76fb      	strb	r3, [r7, #27]
 801c9bc:	e00a      	b.n	801c9d4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801c9be:	683b      	ldr	r3, [r7, #0]
 801c9c0:	3304      	adds	r3, #4
 801c9c2:	681a      	ldr	r2, [r3, #0]
 801c9c4:	4b2d      	ldr	r3, [pc, #180]	; (801ca7c <udp_input+0x218>)
 801c9c6:	695b      	ldr	r3, [r3, #20]
 801c9c8:	429a      	cmp	r2, r3
 801c9ca:	bf0c      	ite	eq
 801c9cc:	2301      	moveq	r3, #1
 801c9ce:	2300      	movne	r3, #0
 801c9d0:	b2db      	uxtb	r3, r3
 801c9d2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801c9d4:	7efb      	ldrb	r3, [r7, #27]
 801c9d6:	2b00      	cmp	r3, #0
 801c9d8:	d041      	beq.n	801ca5e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801c9da:	2108      	movs	r1, #8
 801c9dc:	6878      	ldr	r0, [r7, #4]
 801c9de:	f7f9 f82d 	bl	8015a3c <pbuf_remove_header>
 801c9e2:	4603      	mov	r3, r0
 801c9e4:	2b00      	cmp	r3, #0
 801c9e6:	d00a      	beq.n	801c9fe <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801c9e8:	4b20      	ldr	r3, [pc, #128]	; (801ca6c <udp_input+0x208>)
 801c9ea:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801c9ee:	4925      	ldr	r1, [pc, #148]	; (801ca84 <udp_input+0x220>)
 801c9f0:	4820      	ldr	r0, [pc, #128]	; (801ca74 <udp_input+0x210>)
 801c9f2:	f004 f8bb 	bl	8020b6c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801c9f6:	6878      	ldr	r0, [r7, #4]
 801c9f8:	f7f9 f8a6 	bl	8015b48 <pbuf_free>
      goto end;
 801c9fc:	e032      	b.n	801ca64 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801c9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca00:	2b00      	cmp	r3, #0
 801ca02:	d012      	beq.n	801ca2a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801ca04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca06:	699b      	ldr	r3, [r3, #24]
 801ca08:	2b00      	cmp	r3, #0
 801ca0a:	d00a      	beq.n	801ca22 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801ca0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca0e:	699c      	ldr	r4, [r3, #24]
 801ca10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca12:	69d8      	ldr	r0, [r3, #28]
 801ca14:	8a3b      	ldrh	r3, [r7, #16]
 801ca16:	9300      	str	r3, [sp, #0]
 801ca18:	4b1b      	ldr	r3, [pc, #108]	; (801ca88 <udp_input+0x224>)
 801ca1a:	687a      	ldr	r2, [r7, #4]
 801ca1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ca1e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801ca20:	e021      	b.n	801ca66 <udp_input+0x202>
        pbuf_free(p);
 801ca22:	6878      	ldr	r0, [r7, #4]
 801ca24:	f7f9 f890 	bl	8015b48 <pbuf_free>
        goto end;
 801ca28:	e01c      	b.n	801ca64 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801ca2a:	7cfb      	ldrb	r3, [r7, #19]
 801ca2c:	2b00      	cmp	r3, #0
 801ca2e:	d112      	bne.n	801ca56 <udp_input+0x1f2>
 801ca30:	4b12      	ldr	r3, [pc, #72]	; (801ca7c <udp_input+0x218>)
 801ca32:	695b      	ldr	r3, [r3, #20]
 801ca34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801ca38:	2be0      	cmp	r3, #224	; 0xe0
 801ca3a:	d00c      	beq.n	801ca56 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801ca3c:	4b0f      	ldr	r3, [pc, #60]	; (801ca7c <udp_input+0x218>)
 801ca3e:	899b      	ldrh	r3, [r3, #12]
 801ca40:	3308      	adds	r3, #8
 801ca42:	b29b      	uxth	r3, r3
 801ca44:	b21b      	sxth	r3, r3
 801ca46:	4619      	mov	r1, r3
 801ca48:	6878      	ldr	r0, [r7, #4]
 801ca4a:	f7f9 f86a 	bl	8015b22 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801ca4e:	2103      	movs	r1, #3
 801ca50:	6878      	ldr	r0, [r7, #4]
 801ca52:	f7f6 faed 	bl	8013030 <icmp_dest_unreach>
      pbuf_free(p);
 801ca56:	6878      	ldr	r0, [r7, #4]
 801ca58:	f7f9 f876 	bl	8015b48 <pbuf_free>
  return;
 801ca5c:	e003      	b.n	801ca66 <udp_input+0x202>
    pbuf_free(p);
 801ca5e:	6878      	ldr	r0, [r7, #4]
 801ca60:	f7f9 f872 	bl	8015b48 <pbuf_free>
  return;
 801ca64:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801ca66:	372c      	adds	r7, #44	; 0x2c
 801ca68:	46bd      	mov	sp, r7
 801ca6a:	bd90      	pop	{r4, r7, pc}
 801ca6c:	08028714 	.word	0x08028714
 801ca70:	080287e4 	.word	0x080287e4
 801ca74:	08028794 	.word	0x08028794
 801ca78:	080287fc 	.word	0x080287fc
 801ca7c:	24005f48 	.word	0x24005f48
 801ca80:	24008e50 	.word	0x24008e50
 801ca84:	08028818 	.word	0x08028818
 801ca88:	24005f58 	.word	0x24005f58

0801ca8c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801ca8c:	b580      	push	{r7, lr}
 801ca8e:	b086      	sub	sp, #24
 801ca90:	af00      	add	r7, sp, #0
 801ca92:	60f8      	str	r0, [r7, #12]
 801ca94:	60b9      	str	r1, [r7, #8]
 801ca96:	4613      	mov	r3, r2
 801ca98:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801ca9a:	68bb      	ldr	r3, [r7, #8]
 801ca9c:	2b00      	cmp	r3, #0
 801ca9e:	d101      	bne.n	801caa4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801caa0:	4b39      	ldr	r3, [pc, #228]	; (801cb88 <udp_bind+0xfc>)
 801caa2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801caa4:	68fb      	ldr	r3, [r7, #12]
 801caa6:	2b00      	cmp	r3, #0
 801caa8:	d109      	bne.n	801cabe <udp_bind+0x32>
 801caaa:	4b38      	ldr	r3, [pc, #224]	; (801cb8c <udp_bind+0x100>)
 801caac:	f240 32b7 	movw	r2, #951	; 0x3b7
 801cab0:	4937      	ldr	r1, [pc, #220]	; (801cb90 <udp_bind+0x104>)
 801cab2:	4838      	ldr	r0, [pc, #224]	; (801cb94 <udp_bind+0x108>)
 801cab4:	f004 f85a 	bl	8020b6c <iprintf>
 801cab8:	f06f 030f 	mvn.w	r3, #15
 801cabc:	e060      	b.n	801cb80 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801cabe:	2300      	movs	r3, #0
 801cac0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801cac2:	4b35      	ldr	r3, [pc, #212]	; (801cb98 <udp_bind+0x10c>)
 801cac4:	681b      	ldr	r3, [r3, #0]
 801cac6:	617b      	str	r3, [r7, #20]
 801cac8:	e009      	b.n	801cade <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801caca:	68fa      	ldr	r2, [r7, #12]
 801cacc:	697b      	ldr	r3, [r7, #20]
 801cace:	429a      	cmp	r2, r3
 801cad0:	d102      	bne.n	801cad8 <udp_bind+0x4c>
      rebind = 1;
 801cad2:	2301      	movs	r3, #1
 801cad4:	74fb      	strb	r3, [r7, #19]
      break;
 801cad6:	e005      	b.n	801cae4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801cad8:	697b      	ldr	r3, [r7, #20]
 801cada:	68db      	ldr	r3, [r3, #12]
 801cadc:	617b      	str	r3, [r7, #20]
 801cade:	697b      	ldr	r3, [r7, #20]
 801cae0:	2b00      	cmp	r3, #0
 801cae2:	d1f2      	bne.n	801caca <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801cae4:	88fb      	ldrh	r3, [r7, #6]
 801cae6:	2b00      	cmp	r3, #0
 801cae8:	d109      	bne.n	801cafe <udp_bind+0x72>
    port = udp_new_port();
 801caea:	f7ff fe1f 	bl	801c72c <udp_new_port>
 801caee:	4603      	mov	r3, r0
 801caf0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801caf2:	88fb      	ldrh	r3, [r7, #6]
 801caf4:	2b00      	cmp	r3, #0
 801caf6:	d12c      	bne.n	801cb52 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801caf8:	f06f 0307 	mvn.w	r3, #7
 801cafc:	e040      	b.n	801cb80 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801cafe:	4b26      	ldr	r3, [pc, #152]	; (801cb98 <udp_bind+0x10c>)
 801cb00:	681b      	ldr	r3, [r3, #0]
 801cb02:	617b      	str	r3, [r7, #20]
 801cb04:	e022      	b.n	801cb4c <udp_bind+0xc0>
      if (pcb != ipcb) {
 801cb06:	68fa      	ldr	r2, [r7, #12]
 801cb08:	697b      	ldr	r3, [r7, #20]
 801cb0a:	429a      	cmp	r2, r3
 801cb0c:	d01b      	beq.n	801cb46 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801cb0e:	697b      	ldr	r3, [r7, #20]
 801cb10:	8a5b      	ldrh	r3, [r3, #18]
 801cb12:	88fa      	ldrh	r2, [r7, #6]
 801cb14:	429a      	cmp	r2, r3
 801cb16:	d116      	bne.n	801cb46 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801cb18:	697b      	ldr	r3, [r7, #20]
 801cb1a:	681a      	ldr	r2, [r3, #0]
 801cb1c:	68bb      	ldr	r3, [r7, #8]
 801cb1e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801cb20:	429a      	cmp	r2, r3
 801cb22:	d00d      	beq.n	801cb40 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801cb24:	68bb      	ldr	r3, [r7, #8]
 801cb26:	2b00      	cmp	r3, #0
 801cb28:	d00a      	beq.n	801cb40 <udp_bind+0xb4>
 801cb2a:	68bb      	ldr	r3, [r7, #8]
 801cb2c:	681b      	ldr	r3, [r3, #0]
 801cb2e:	2b00      	cmp	r3, #0
 801cb30:	d006      	beq.n	801cb40 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801cb32:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801cb34:	2b00      	cmp	r3, #0
 801cb36:	d003      	beq.n	801cb40 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801cb38:	697b      	ldr	r3, [r7, #20]
 801cb3a:	681b      	ldr	r3, [r3, #0]
 801cb3c:	2b00      	cmp	r3, #0
 801cb3e:	d102      	bne.n	801cb46 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801cb40:	f06f 0307 	mvn.w	r3, #7
 801cb44:	e01c      	b.n	801cb80 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801cb46:	697b      	ldr	r3, [r7, #20]
 801cb48:	68db      	ldr	r3, [r3, #12]
 801cb4a:	617b      	str	r3, [r7, #20]
 801cb4c:	697b      	ldr	r3, [r7, #20]
 801cb4e:	2b00      	cmp	r3, #0
 801cb50:	d1d9      	bne.n	801cb06 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801cb52:	68bb      	ldr	r3, [r7, #8]
 801cb54:	2b00      	cmp	r3, #0
 801cb56:	d002      	beq.n	801cb5e <udp_bind+0xd2>
 801cb58:	68bb      	ldr	r3, [r7, #8]
 801cb5a:	681b      	ldr	r3, [r3, #0]
 801cb5c:	e000      	b.n	801cb60 <udp_bind+0xd4>
 801cb5e:	2300      	movs	r3, #0
 801cb60:	68fa      	ldr	r2, [r7, #12]
 801cb62:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801cb64:	68fb      	ldr	r3, [r7, #12]
 801cb66:	88fa      	ldrh	r2, [r7, #6]
 801cb68:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801cb6a:	7cfb      	ldrb	r3, [r7, #19]
 801cb6c:	2b00      	cmp	r3, #0
 801cb6e:	d106      	bne.n	801cb7e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801cb70:	4b09      	ldr	r3, [pc, #36]	; (801cb98 <udp_bind+0x10c>)
 801cb72:	681a      	ldr	r2, [r3, #0]
 801cb74:	68fb      	ldr	r3, [r7, #12]
 801cb76:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801cb78:	4a07      	ldr	r2, [pc, #28]	; (801cb98 <udp_bind+0x10c>)
 801cb7a:	68fb      	ldr	r3, [r7, #12]
 801cb7c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801cb7e:	2300      	movs	r3, #0
}
 801cb80:	4618      	mov	r0, r3
 801cb82:	3718      	adds	r7, #24
 801cb84:	46bd      	mov	sp, r7
 801cb86:	bd80      	pop	{r7, pc}
 801cb88:	08029178 	.word	0x08029178
 801cb8c:	08028714 	.word	0x08028714
 801cb90:	08028a08 	.word	0x08028a08
 801cb94:	08028794 	.word	0x08028794
 801cb98:	24008e50 	.word	0x24008e50

0801cb9c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801cb9c:	b580      	push	{r7, lr}
 801cb9e:	b086      	sub	sp, #24
 801cba0:	af00      	add	r7, sp, #0
 801cba2:	60f8      	str	r0, [r7, #12]
 801cba4:	60b9      	str	r1, [r7, #8]
 801cba6:	4613      	mov	r3, r2
 801cba8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801cbaa:	68fb      	ldr	r3, [r7, #12]
 801cbac:	2b00      	cmp	r3, #0
 801cbae:	d109      	bne.n	801cbc4 <udp_connect+0x28>
 801cbb0:	4b2c      	ldr	r3, [pc, #176]	; (801cc64 <udp_connect+0xc8>)
 801cbb2:	f240 4235 	movw	r2, #1077	; 0x435
 801cbb6:	492c      	ldr	r1, [pc, #176]	; (801cc68 <udp_connect+0xcc>)
 801cbb8:	482c      	ldr	r0, [pc, #176]	; (801cc6c <udp_connect+0xd0>)
 801cbba:	f003 ffd7 	bl	8020b6c <iprintf>
 801cbbe:	f06f 030f 	mvn.w	r3, #15
 801cbc2:	e04b      	b.n	801cc5c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801cbc4:	68bb      	ldr	r3, [r7, #8]
 801cbc6:	2b00      	cmp	r3, #0
 801cbc8:	d109      	bne.n	801cbde <udp_connect+0x42>
 801cbca:	4b26      	ldr	r3, [pc, #152]	; (801cc64 <udp_connect+0xc8>)
 801cbcc:	f240 4236 	movw	r2, #1078	; 0x436
 801cbd0:	4927      	ldr	r1, [pc, #156]	; (801cc70 <udp_connect+0xd4>)
 801cbd2:	4826      	ldr	r0, [pc, #152]	; (801cc6c <udp_connect+0xd0>)
 801cbd4:	f003 ffca 	bl	8020b6c <iprintf>
 801cbd8:	f06f 030f 	mvn.w	r3, #15
 801cbdc:	e03e      	b.n	801cc5c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801cbde:	68fb      	ldr	r3, [r7, #12]
 801cbe0:	8a5b      	ldrh	r3, [r3, #18]
 801cbe2:	2b00      	cmp	r3, #0
 801cbe4:	d10f      	bne.n	801cc06 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801cbe6:	68f9      	ldr	r1, [r7, #12]
 801cbe8:	68fb      	ldr	r3, [r7, #12]
 801cbea:	8a5b      	ldrh	r3, [r3, #18]
 801cbec:	461a      	mov	r2, r3
 801cbee:	68f8      	ldr	r0, [r7, #12]
 801cbf0:	f7ff ff4c 	bl	801ca8c <udp_bind>
 801cbf4:	4603      	mov	r3, r0
 801cbf6:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801cbf8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801cbfc:	2b00      	cmp	r3, #0
 801cbfe:	d002      	beq.n	801cc06 <udp_connect+0x6a>
      return err;
 801cc00:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801cc04:	e02a      	b.n	801cc5c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801cc06:	68bb      	ldr	r3, [r7, #8]
 801cc08:	2b00      	cmp	r3, #0
 801cc0a:	d002      	beq.n	801cc12 <udp_connect+0x76>
 801cc0c:	68bb      	ldr	r3, [r7, #8]
 801cc0e:	681b      	ldr	r3, [r3, #0]
 801cc10:	e000      	b.n	801cc14 <udp_connect+0x78>
 801cc12:	2300      	movs	r3, #0
 801cc14:	68fa      	ldr	r2, [r7, #12]
 801cc16:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801cc18:	68fb      	ldr	r3, [r7, #12]
 801cc1a:	88fa      	ldrh	r2, [r7, #6]
 801cc1c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801cc1e:	68fb      	ldr	r3, [r7, #12]
 801cc20:	7c1b      	ldrb	r3, [r3, #16]
 801cc22:	f043 0304 	orr.w	r3, r3, #4
 801cc26:	b2da      	uxtb	r2, r3
 801cc28:	68fb      	ldr	r3, [r7, #12]
 801cc2a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801cc2c:	4b11      	ldr	r3, [pc, #68]	; (801cc74 <udp_connect+0xd8>)
 801cc2e:	681b      	ldr	r3, [r3, #0]
 801cc30:	617b      	str	r3, [r7, #20]
 801cc32:	e008      	b.n	801cc46 <udp_connect+0xaa>
    if (pcb == ipcb) {
 801cc34:	68fa      	ldr	r2, [r7, #12]
 801cc36:	697b      	ldr	r3, [r7, #20]
 801cc38:	429a      	cmp	r2, r3
 801cc3a:	d101      	bne.n	801cc40 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801cc3c:	2300      	movs	r3, #0
 801cc3e:	e00d      	b.n	801cc5c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801cc40:	697b      	ldr	r3, [r7, #20]
 801cc42:	68db      	ldr	r3, [r3, #12]
 801cc44:	617b      	str	r3, [r7, #20]
 801cc46:	697b      	ldr	r3, [r7, #20]
 801cc48:	2b00      	cmp	r3, #0
 801cc4a:	d1f3      	bne.n	801cc34 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801cc4c:	4b09      	ldr	r3, [pc, #36]	; (801cc74 <udp_connect+0xd8>)
 801cc4e:	681a      	ldr	r2, [r3, #0]
 801cc50:	68fb      	ldr	r3, [r7, #12]
 801cc52:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801cc54:	4a07      	ldr	r2, [pc, #28]	; (801cc74 <udp_connect+0xd8>)
 801cc56:	68fb      	ldr	r3, [r7, #12]
 801cc58:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801cc5a:	2300      	movs	r3, #0
}
 801cc5c:	4618      	mov	r0, r3
 801cc5e:	3718      	adds	r7, #24
 801cc60:	46bd      	mov	sp, r7
 801cc62:	bd80      	pop	{r7, pc}
 801cc64:	08028714 	.word	0x08028714
 801cc68:	08028a20 	.word	0x08028a20
 801cc6c:	08028794 	.word	0x08028794
 801cc70:	08028a3c 	.word	0x08028a3c
 801cc74:	24008e50 	.word	0x24008e50

0801cc78 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801cc78:	b580      	push	{r7, lr}
 801cc7a:	b082      	sub	sp, #8
 801cc7c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801cc7e:	2000      	movs	r0, #0
 801cc80:	f7f8 f87c 	bl	8014d7c <memp_malloc>
 801cc84:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801cc86:	687b      	ldr	r3, [r7, #4]
 801cc88:	2b00      	cmp	r3, #0
 801cc8a:	d007      	beq.n	801cc9c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801cc8c:	2220      	movs	r2, #32
 801cc8e:	2100      	movs	r1, #0
 801cc90:	6878      	ldr	r0, [r7, #4]
 801cc92:	f003 f871 	bl	801fd78 <memset>
    pcb->ttl = UDP_TTL;
 801cc96:	687b      	ldr	r3, [r7, #4]
 801cc98:	22ff      	movs	r2, #255	; 0xff
 801cc9a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801cc9c:	687b      	ldr	r3, [r7, #4]
}
 801cc9e:	4618      	mov	r0, r3
 801cca0:	3708      	adds	r7, #8
 801cca2:	46bd      	mov	sp, r7
 801cca4:	bd80      	pop	{r7, pc}
	...

0801cca8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801cca8:	b480      	push	{r7}
 801ccaa:	b085      	sub	sp, #20
 801ccac:	af00      	add	r7, sp, #0
 801ccae:	6078      	str	r0, [r7, #4]
 801ccb0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801ccb2:	687b      	ldr	r3, [r7, #4]
 801ccb4:	2b00      	cmp	r3, #0
 801ccb6:	d01e      	beq.n	801ccf6 <udp_netif_ip_addr_changed+0x4e>
 801ccb8:	687b      	ldr	r3, [r7, #4]
 801ccba:	681b      	ldr	r3, [r3, #0]
 801ccbc:	2b00      	cmp	r3, #0
 801ccbe:	d01a      	beq.n	801ccf6 <udp_netif_ip_addr_changed+0x4e>
 801ccc0:	683b      	ldr	r3, [r7, #0]
 801ccc2:	2b00      	cmp	r3, #0
 801ccc4:	d017      	beq.n	801ccf6 <udp_netif_ip_addr_changed+0x4e>
 801ccc6:	683b      	ldr	r3, [r7, #0]
 801ccc8:	681b      	ldr	r3, [r3, #0]
 801ccca:	2b00      	cmp	r3, #0
 801cccc:	d013      	beq.n	801ccf6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801ccce:	4b0d      	ldr	r3, [pc, #52]	; (801cd04 <udp_netif_ip_addr_changed+0x5c>)
 801ccd0:	681b      	ldr	r3, [r3, #0]
 801ccd2:	60fb      	str	r3, [r7, #12]
 801ccd4:	e00c      	b.n	801ccf0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801ccd6:	68fb      	ldr	r3, [r7, #12]
 801ccd8:	681a      	ldr	r2, [r3, #0]
 801ccda:	687b      	ldr	r3, [r7, #4]
 801ccdc:	681b      	ldr	r3, [r3, #0]
 801ccde:	429a      	cmp	r2, r3
 801cce0:	d103      	bne.n	801ccea <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801cce2:	683b      	ldr	r3, [r7, #0]
 801cce4:	681a      	ldr	r2, [r3, #0]
 801cce6:	68fb      	ldr	r3, [r7, #12]
 801cce8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801ccea:	68fb      	ldr	r3, [r7, #12]
 801ccec:	68db      	ldr	r3, [r3, #12]
 801ccee:	60fb      	str	r3, [r7, #12]
 801ccf0:	68fb      	ldr	r3, [r7, #12]
 801ccf2:	2b00      	cmp	r3, #0
 801ccf4:	d1ef      	bne.n	801ccd6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801ccf6:	bf00      	nop
 801ccf8:	3714      	adds	r7, #20
 801ccfa:	46bd      	mov	sp, r7
 801ccfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd00:	4770      	bx	lr
 801cd02:	bf00      	nop
 801cd04:	24008e50 	.word	0x24008e50

0801cd08 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 801cd08:	b580      	push	{r7, lr}
 801cd0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 801cd0c:	4b10      	ldr	r3, [pc, #64]	; (801cd50 <MX_PDM2PCM_Init+0x48>)
 801cd0e:	2200      	movs	r2, #0
 801cd10:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 801cd12:	4b0f      	ldr	r3, [pc, #60]	; (801cd50 <MX_PDM2PCM_Init+0x48>)
 801cd14:	2201      	movs	r2, #1
 801cd16:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 801cd18:	4b0d      	ldr	r3, [pc, #52]	; (801cd50 <MX_PDM2PCM_Init+0x48>)
 801cd1a:	4a0e      	ldr	r2, [pc, #56]	; (801cd54 <MX_PDM2PCM_Init+0x4c>)
 801cd1c:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 2;
 801cd1e:	4b0c      	ldr	r3, [pc, #48]	; (801cd50 <MX_PDM2PCM_Init+0x48>)
 801cd20:	2202      	movs	r2, #2
 801cd22:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 2;
 801cd24:	4b0a      	ldr	r3, [pc, #40]	; (801cd50 <MX_PDM2PCM_Init+0x48>)
 801cd26:	2202      	movs	r2, #2
 801cd28:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 801cd2a:	4809      	ldr	r0, [pc, #36]	; (801cd50 <MX_PDM2PCM_Init+0x48>)
 801cd2c:	f002 fdf8 	bl	801f920 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 801cd30:	4b09      	ldr	r3, [pc, #36]	; (801cd58 <MX_PDM2PCM_Init+0x50>)
 801cd32:	2202      	movs	r2, #2
 801cd34:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 801cd36:	4b08      	ldr	r3, [pc, #32]	; (801cd58 <MX_PDM2PCM_Init+0x50>)
 801cd38:	2210      	movs	r2, #16
 801cd3a:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 801cd3c:	4b06      	ldr	r3, [pc, #24]	; (801cd58 <MX_PDM2PCM_Init+0x50>)
 801cd3e:	2200      	movs	r2, #0
 801cd40:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 801cd42:	4905      	ldr	r1, [pc, #20]	; (801cd58 <MX_PDM2PCM_Init+0x50>)
 801cd44:	4802      	ldr	r0, [pc, #8]	; (801cd50 <MX_PDM2PCM_Init+0x48>)
 801cd46:	f002 febb 	bl	801fac0 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 801cd4a:	bf00      	nop
 801cd4c:	bd80      	pop	{r7, pc}
 801cd4e:	bf00      	nop
 801cd50:	24008e5c 	.word	0x24008e5c
 801cd54:	7d70a3d6 	.word	0x7d70a3d6
 801cd58:	24008e54 	.word	0x24008e54

0801cd5c <cis_Init>:
 * @brief  CIS init
 * @param  Void
 * @retval None
 */
void cis_Init(synthModeTypeDef mode)
{
 801cd5c:	b580      	push	{r7, lr}
 801cd5e:	b082      	sub	sp, #8
 801cd60:	af00      	add	r7, sp, #0
 801cd62:	4603      	mov	r3, r0
 801cd64:	71fb      	strb	r3, [r7, #7]
	if (mode == IFFT_MODE)
 801cd66:	79fb      	ldrb	r3, [r7, #7]
 801cd68:	2b00      	cmp	r3, #0
 801cd6a:	d10c      	bne.n	801cd86 <cis_Init+0x2a>
	{
		CIS_EFFECTIVE_PIXELS_NB			=	(CIS_PIXEX_AERA_STOP - CIS_PIXEX_AERA_START) / CIS_IFFT_OVERSAMPLING_RATIO;	//5530 / CIS_OVERSAMPLING_RATIO active pixels
 801cd6c:	4b25      	ldr	r3, [pc, #148]	; (801ce04 <cis_Init+0xa8>)
 801cd6e:	2299      	movs	r2, #153	; 0x99
 801cd70:	801a      	strh	r2, [r3, #0]
		CIS_ADC_BUFF_PIXEL_AERA_START	=	CIS_PIXEX_AERA_START / (CIS_IFFT_OVERSAMPLING_RATIO);
 801cd72:	4b25      	ldr	r3, [pc, #148]	; (801ce08 <cis_Init+0xac>)
 801cd74:	2207      	movs	r2, #7
 801cd76:	801a      	strh	r2, [r3, #0]
		CIS_ADC_BUFF_PIXEL_AERA_STOP	=	CIS_PIXEX_AERA_STOP / (CIS_IFFT_OVERSAMPLING_RATIO);
 801cd78:	4b24      	ldr	r3, [pc, #144]	; (801ce0c <cis_Init+0xb0>)
 801cd7a:	22a0      	movs	r2, #160	; 0xa0
 801cd7c:	801a      	strh	r2, [r3, #0]
		CIS_ADC_BUFF_END_CAPTURE 		=	CIS_END_CAPTURE / (CIS_IFFT_OVERSAMPLING_RATIO);
 801cd7e:	4b24      	ldr	r3, [pc, #144]	; (801ce10 <cis_Init+0xb4>)
 801cd80:	22b0      	movs	r2, #176	; 0xb0
 801cd82:	801a      	strh	r2, [r3, #0]
 801cd84:	e00b      	b.n	801cd9e <cis_Init+0x42>
	}
	else
	{
		CIS_EFFECTIVE_PIXELS_NB			=	(CIS_PIXEX_AERA_STOP - CIS_PIXEX_AERA_START) / CIS_IMGPLY_OVERSAMPLING_RATIO;	//5530 / CIS_OVERSAMPLING_RATIO active pixels
 801cd86:	4b1f      	ldr	r3, [pc, #124]	; (801ce04 <cis_Init+0xa8>)
 801cd88:	2299      	movs	r2, #153	; 0x99
 801cd8a:	801a      	strh	r2, [r3, #0]
		CIS_ADC_BUFF_PIXEL_AERA_START	=	CIS_PIXEX_AERA_START / CIS_IMGPLY_OVERSAMPLING_RATIO;
 801cd8c:	4b1e      	ldr	r3, [pc, #120]	; (801ce08 <cis_Init+0xac>)
 801cd8e:	2207      	movs	r2, #7
 801cd90:	801a      	strh	r2, [r3, #0]
		CIS_ADC_BUFF_PIXEL_AERA_STOP	=	CIS_PIXEX_AERA_STOP / CIS_IMGPLY_OVERSAMPLING_RATIO;
 801cd92:	4b1e      	ldr	r3, [pc, #120]	; (801ce0c <cis_Init+0xb0>)
 801cd94:	22a0      	movs	r2, #160	; 0xa0
 801cd96:	801a      	strh	r2, [r3, #0]
		CIS_ADC_BUFF_END_CAPTURE 		=	CIS_END_CAPTURE / CIS_IMGPLY_OVERSAMPLING_RATIO;
 801cd98:	4b1d      	ldr	r3, [pc, #116]	; (801ce10 <cis_Init+0xb4>)
 801cd9a:	22b0      	movs	r2, #176	; 0xb0
 801cd9c:	801a      	strh	r2, [r3, #0]
	}

	ADC_CONVERTED_DATA_BUFFER_SIZE 	=	CIS_ADC_BUFF_END_CAPTURE * 2;
 801cd9e:	4b1c      	ldr	r3, [pc, #112]	; (801ce10 <cis_Init+0xb4>)
 801cda0:	881b      	ldrh	r3, [r3, #0]
 801cda2:	005b      	lsls	r3, r3, #1
 801cda4:	b29a      	uxth	r2, r3
 801cda6:	4b1b      	ldr	r3, [pc, #108]	; (801ce14 <cis_Init+0xb8>)
 801cda8:	801a      	strh	r2, [r3, #0]

	//allocate the contiguous memory area for storage cis data
	cisData = malloc(CIS_ADC_BUFF_END_CAPTURE * 2 * sizeof(uint16_t*));
 801cdaa:	4b19      	ldr	r3, [pc, #100]	; (801ce10 <cis_Init+0xb4>)
 801cdac:	881b      	ldrh	r3, [r3, #0]
 801cdae:	00db      	lsls	r3, r3, #3
 801cdb0:	4618      	mov	r0, r3
 801cdb2:	f002 ffa3 	bl	801fcfc <malloc>
 801cdb6:	4603      	mov	r3, r0
 801cdb8:	461a      	mov	r2, r3
 801cdba:	4b17      	ldr	r3, [pc, #92]	; (801ce18 <cis_Init+0xbc>)
 801cdbc:	601a      	str	r2, [r3, #0]
	if (cisData == NULL)
 801cdbe:	4b16      	ldr	r3, [pc, #88]	; (801ce18 <cis_Init+0xbc>)
 801cdc0:	681b      	ldr	r3, [r3, #0]
 801cdc2:	2b00      	cmp	r3, #0
 801cdc4:	d101      	bne.n	801cdca <cis_Init+0x6e>
	{
		Error_Handler();
 801cdc6:	f7e5 ff35 	bl	8002c34 <Error_Handler>
	}

	memset(cisData, 0, CIS_ADC_BUFF_END_CAPTURE * 2 * sizeof(uint16_t*)); //clear image
 801cdca:	4b13      	ldr	r3, [pc, #76]	; (801ce18 <cis_Init+0xbc>)
 801cdcc:	681b      	ldr	r3, [r3, #0]
 801cdce:	4a10      	ldr	r2, [pc, #64]	; (801ce10 <cis_Init+0xb4>)
 801cdd0:	8812      	ldrh	r2, [r2, #0]
 801cdd2:	00d2      	lsls	r2, r2, #3
 801cdd4:	2100      	movs	r1, #0
 801cdd6:	4618      	mov	r0, r3
 801cdd8:	f002 ffce 	bl	801fd78 <memset>
	// Reset SP counter
//	__HAL_TIM_SET_COUNTER(&htim15, 0);

#ifdef CIS_BW
	//Set BW phase shift
	__HAL_TIM_SET_COUNTER(&htim8, (CIS_END_CAPTURE) - CIS_LED_ON);			//B
 801cddc:	4b0f      	ldr	r3, [pc, #60]	; (801ce1c <cis_Init+0xc0>)
 801cdde:	681b      	ldr	r3, [r3, #0]
 801cde0:	f241 52b1 	movw	r2, #5553	; 0x15b1
 801cde4:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim4, (CIS_END_CAPTURE) - CIS_LED_ON);			//G
 801cde6:	4b0e      	ldr	r3, [pc, #56]	; (801ce20 <cis_Init+0xc4>)
 801cde8:	681b      	ldr	r3, [r3, #0]
 801cdea:	f241 52b1 	movw	r2, #5553	; 0x15b1
 801cdee:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, (CIS_END_CAPTURE) - CIS_LED_ON);			//R
 801cdf0:	4b0c      	ldr	r3, [pc, #48]	; (801ce24 <cis_Init+0xc8>)
 801cdf2:	681b      	ldr	r3, [r3, #0]
 801cdf4:	f241 52b1 	movw	r2, #5553	; 0x15b1
 801cdf8:	625a      	str	r2, [r3, #36]	; 0x24
	//Set RGB phase shift
	__HAL_TIM_SET_COUNTER(&htim8, (CIS_END_CAPTURE * 2) - CIS_LED_ON);		//B
	__HAL_TIM_SET_COUNTER(&htim4, (CIS_END_CAPTURE * 3) - CIS_LED_ON);		//G
	__HAL_TIM_SET_COUNTER(&htim3, (CIS_END_CAPTURE) - CIS_LED_ON);			//R
#endif
}
 801cdfa:	bf00      	nop
 801cdfc:	3708      	adds	r7, #8
 801cdfe:	46bd      	mov	sp, r7
 801ce00:	bd80      	pop	{r7, pc}
 801ce02:	bf00      	nop
 801ce04:	2400042e 	.word	0x2400042e
 801ce08:	24000430 	.word	0x24000430
 801ce0c:	24000432 	.word	0x24000432
 801ce10:	24000434 	.word	0x24000434
 801ce14:	24000436 	.word	0x24000436
 801ce18:	240057e4 	.word	0x240057e4
 801ce1c:	24005b3c 	.word	0x24005b3c
 801ce20:	24005b88 	.word	0x24005b88
 801ce24:	24005c20 	.word	0x24005c20

0801ce28 <cis_GetEffectivePixelNb>:
 * @brief  GetEffectivePixelNb
 * @param  Void
 * @retval Nuber of effective pixels
 */
__inline uint16_t cis_GetEffectivePixelNb(void)
{
 801ce28:	b480      	push	{r7}
 801ce2a:	af00      	add	r7, sp, #0
	return CIS_EFFECTIVE_PIXELS_NB;
 801ce2c:	4b03      	ldr	r3, [pc, #12]	; (801ce3c <cis_GetEffectivePixelNb+0x14>)
 801ce2e:	881b      	ldrh	r3, [r3, #0]
}
 801ce30:	4618      	mov	r0, r3
 801ce32:	46bd      	mov	sp, r7
 801ce34:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce38:	4770      	bx	lr
 801ce3a:	bf00      	nop
 801ce3c:	2400042e 	.word	0x2400042e

0801ce40 <cis_GetBuffData>:
 * @brief  Return buffer data
 * @param  index
 * @retval value
 */
uint16_t cis_GetBuffData(uint32_t index)
{
 801ce40:	b480      	push	{r7}
 801ce42:	b083      	sub	sp, #12
 801ce44:	af00      	add	r7, sp, #0
 801ce46:	6078      	str	r0, [r7, #4]
	//	if (index >= ADC_CONVERTED_DATA_BUFFER_SIZE)
	//		Error_Handler();
	return cisData[index + CIS_ADC_BUFF_PIXEL_AERA_START];
 801ce48:	4b07      	ldr	r3, [pc, #28]	; (801ce68 <cis_GetBuffData+0x28>)
 801ce4a:	681a      	ldr	r2, [r3, #0]
 801ce4c:	4b07      	ldr	r3, [pc, #28]	; (801ce6c <cis_GetBuffData+0x2c>)
 801ce4e:	881b      	ldrh	r3, [r3, #0]
 801ce50:	4619      	mov	r1, r3
 801ce52:	687b      	ldr	r3, [r7, #4]
 801ce54:	440b      	add	r3, r1
 801ce56:	005b      	lsls	r3, r3, #1
 801ce58:	4413      	add	r3, r2
 801ce5a:	881b      	ldrh	r3, [r3, #0]
}
 801ce5c:	4618      	mov	r0, r3
 801ce5e:	370c      	adds	r7, #12
 801ce60:	46bd      	mov	sp, r7
 801ce62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce66:	4770      	bx	lr
 801ce68:	240057e4 	.word	0x240057e4
 801ce6c:	24000430 	.word	0x24000430

0801ce70 <cis_ImageProcessBW>:
 * @brief  Manages Image process.
 * @param  None
 * @retval Image error
 */
void cis_ImageProcessBW(uint16_t *cis_buff)
{
 801ce70:	b580      	push	{r7, lr}
 801ce72:	b08a      	sub	sp, #40	; 0x28
 801ce74:	af00      	add	r7, sp, #0
 801ce76:	6078      	str	r0, [r7, #4]
	/* 1st half buffer played; so fill it and continue playing from bottom*/
	if(cisBufferState == CIS_BUFFER_OFFSET_HALF)
 801ce78:	4b42      	ldr	r3, [pc, #264]	; (801cf84 <cis_ImageProcessBW+0x114>)
 801ce7a:	781b      	ldrb	r3, [r3, #0]
 801ce7c:	2b01      	cmp	r3, #1
 801ce7e:	d139      	bne.n	801cef4 <cis_ImageProcessBW+0x84>
	{
		cisBufferState = CIS_BUFFER_OFFSET_NONE;
 801ce80:	4b40      	ldr	r3, [pc, #256]	; (801cf84 <cis_ImageProcessBW+0x114>)
 801ce82:	2200      	movs	r2, #0
 801ce84:	701a      	strb	r2, [r3, #0]
		/* Invalidate Data Cache to get the updated content of the SRAM on the first half of the ADC converted data buffer */
		SCB_InvalidateDCache_by_Addr((uint32_t *) &cisData[0], CIS_END_CAPTURE / 2);
 801ce86:	4b40      	ldr	r3, [pc, #256]	; (801cf88 <cis_ImageProcessBW+0x118>)
 801ce88:	681b      	ldr	r3, [r3, #0]
 801ce8a:	627b      	str	r3, [r7, #36]	; 0x24
 801ce8c:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 801ce90:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 801ce92:	6a3b      	ldr	r3, [r7, #32]
 801ce94:	2b00      	cmp	r3, #0
 801ce96:	dd1d      	ble.n	801ced4 <cis_ImageProcessBW+0x64>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 801ce98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce9a:	f003 021f 	and.w	r2, r3, #31
 801ce9e:	6a3b      	ldr	r3, [r7, #32]
 801cea0:	4413      	add	r3, r2
 801cea2:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 801cea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cea6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 801cea8:	f3bf 8f4f 	dsb	sy
}
 801ceac:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 801ceae:	4a37      	ldr	r2, [pc, #220]	; (801cf8c <cis_ImageProcessBW+0x11c>)
 801ceb0:	69bb      	ldr	r3, [r7, #24]
 801ceb2:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 801ceb6:	69bb      	ldr	r3, [r7, #24]
 801ceb8:	3320      	adds	r3, #32
 801ceba:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 801cebc:	69fb      	ldr	r3, [r7, #28]
 801cebe:	3b20      	subs	r3, #32
 801cec0:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 801cec2:	69fb      	ldr	r3, [r7, #28]
 801cec4:	2b00      	cmp	r3, #0
 801cec6:	dcf2      	bgt.n	801ceae <cis_ImageProcessBW+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 801cec8:	f3bf 8f4f 	dsb	sy
}
 801cecc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801cece:	f3bf 8f6f 	isb	sy
}
 801ced2:	bf00      	nop
}
 801ced4:	bf00      	nop
		arm_copy_q15((int16_t*)&cisData[CIS_ADC_BUFF_PIXEL_AERA_START], (int16_t*)cis_buff, CIS_EFFECTIVE_PIXELS_NB);
 801ced6:	4b2c      	ldr	r3, [pc, #176]	; (801cf88 <cis_ImageProcessBW+0x118>)
 801ced8:	681a      	ldr	r2, [r3, #0]
 801ceda:	4b2d      	ldr	r3, [pc, #180]	; (801cf90 <cis_ImageProcessBW+0x120>)
 801cedc:	881b      	ldrh	r3, [r3, #0]
 801cede:	005b      	lsls	r3, r3, #1
 801cee0:	4413      	add	r3, r2
 801cee2:	4a2c      	ldr	r2, [pc, #176]	; (801cf94 <cis_ImageProcessBW+0x124>)
 801cee4:	8812      	ldrh	r2, [r2, #0]
 801cee6:	6879      	ldr	r1, [r7, #4]
 801cee8:	4618      	mov	r0, r3
 801ceea:	f7e6 fe5e 	bl	8003baa <arm_copy_q15>

		cis_ImageFilterBW(cis_buff);
 801ceee:	6878      	ldr	r0, [r7, #4]
 801cef0:	f000 f856 	bl	801cfa0 <cis_ImageFilterBW>
	}

	/* 2nd half buffer played; so fill it and continue playing from top */
	if(cisBufferState == CIS_BUFFER_OFFSET_FULL)
 801cef4:	4b23      	ldr	r3, [pc, #140]	; (801cf84 <cis_ImageProcessBW+0x114>)
 801cef6:	781b      	ldrb	r3, [r3, #0]
 801cef8:	2b02      	cmp	r3, #2
 801cefa:	d13f      	bne.n	801cf7c <cis_ImageProcessBW+0x10c>
	{
		cisBufferState = CIS_BUFFER_OFFSET_NONE;
 801cefc:	4b21      	ldr	r3, [pc, #132]	; (801cf84 <cis_ImageProcessBW+0x114>)
 801cefe:	2200      	movs	r2, #0
 801cf00:	701a      	strb	r2, [r3, #0]
		/* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer */
		SCB_InvalidateDCache_by_Addr((uint32_t *) &cisData[CIS_END_CAPTURE / 4], CIS_END_CAPTURE / 2);
 801cf02:	4b21      	ldr	r3, [pc, #132]	; (801cf88 <cis_ImageProcessBW+0x118>)
 801cf04:	681b      	ldr	r3, [r3, #0]
 801cf06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801cf0a:	617b      	str	r3, [r7, #20]
 801cf0c:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 801cf10:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 801cf12:	693b      	ldr	r3, [r7, #16]
 801cf14:	2b00      	cmp	r3, #0
 801cf16:	dd1d      	ble.n	801cf54 <cis_ImageProcessBW+0xe4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 801cf18:	697b      	ldr	r3, [r7, #20]
 801cf1a:	f003 021f 	and.w	r2, r3, #31
 801cf1e:	693b      	ldr	r3, [r7, #16]
 801cf20:	4413      	add	r3, r2
 801cf22:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 801cf24:	697b      	ldr	r3, [r7, #20]
 801cf26:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 801cf28:	f3bf 8f4f 	dsb	sy
}
 801cf2c:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 801cf2e:	4a17      	ldr	r2, [pc, #92]	; (801cf8c <cis_ImageProcessBW+0x11c>)
 801cf30:	68bb      	ldr	r3, [r7, #8]
 801cf32:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 801cf36:	68bb      	ldr	r3, [r7, #8]
 801cf38:	3320      	adds	r3, #32
 801cf3a:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 801cf3c:	68fb      	ldr	r3, [r7, #12]
 801cf3e:	3b20      	subs	r3, #32
 801cf40:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 801cf42:	68fb      	ldr	r3, [r7, #12]
 801cf44:	2b00      	cmp	r3, #0
 801cf46:	dcf2      	bgt.n	801cf2e <cis_ImageProcessBW+0xbe>
  __ASM volatile ("dsb 0xF":::"memory");
 801cf48:	f3bf 8f4f 	dsb	sy
}
 801cf4c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801cf4e:	f3bf 8f6f 	isb	sy
}
 801cf52:	bf00      	nop
}
 801cf54:	bf00      	nop
		arm_copy_q15((int16_t*)&cisData[CIS_ADC_BUFF_END_CAPTURE + CIS_ADC_BUFF_PIXEL_AERA_START], (int16_t*)cis_buff, CIS_EFFECTIVE_PIXELS_NB);
 801cf56:	4b0c      	ldr	r3, [pc, #48]	; (801cf88 <cis_ImageProcessBW+0x118>)
 801cf58:	681a      	ldr	r2, [r3, #0]
 801cf5a:	4b0f      	ldr	r3, [pc, #60]	; (801cf98 <cis_ImageProcessBW+0x128>)
 801cf5c:	881b      	ldrh	r3, [r3, #0]
 801cf5e:	4619      	mov	r1, r3
 801cf60:	4b0b      	ldr	r3, [pc, #44]	; (801cf90 <cis_ImageProcessBW+0x120>)
 801cf62:	881b      	ldrh	r3, [r3, #0]
 801cf64:	440b      	add	r3, r1
 801cf66:	005b      	lsls	r3, r3, #1
 801cf68:	4413      	add	r3, r2
 801cf6a:	4a0a      	ldr	r2, [pc, #40]	; (801cf94 <cis_ImageProcessBW+0x124>)
 801cf6c:	8812      	ldrh	r2, [r2, #0]
 801cf6e:	6879      	ldr	r1, [r7, #4]
 801cf70:	4618      	mov	r0, r3
 801cf72:	f7e6 fe1a 	bl	8003baa <arm_copy_q15>

		cis_ImageFilterBW(cis_buff);
 801cf76:	6878      	ldr	r0, [r7, #4]
 801cf78:	f000 f812 	bl	801cfa0 <cis_ImageFilterBW>
	}
}
 801cf7c:	bf00      	nop
 801cf7e:	3728      	adds	r7, #40	; 0x28
 801cf80:	46bd      	mov	sp, r7
 801cf82:	bd80      	pop	{r7, pc}
 801cf84:	240057e8 	.word	0x240057e8
 801cf88:	240057e4 	.word	0x240057e4
 801cf8c:	e000ed00 	.word	0xe000ed00
 801cf90:	24000430 	.word	0x24000430
 801cf94:	2400042e 	.word	0x2400042e
 801cf98:	24000434 	.word	0x24000434
 801cf9c:	00000000 	.word	0x00000000

0801cfa0 <cis_ImageFilterBW>:
 * @brief  Image filtering
 * @param  Audio buffer
 * @retval None
 */
void cis_ImageFilterBW(uint16_t *cis_buff)
{
 801cfa0:	b580      	push	{r7, lr}
 801cfa2:	ed2d 8b02 	vpush	{d8}
 801cfa6:	b084      	sub	sp, #16
 801cfa8:	af00      	add	r7, sp, #0
 801cfaa:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < CIS_EFFECTIVE_PIXELS_NB; i++)
 801cfac:	2300      	movs	r3, #0
 801cfae:	60fb      	str	r3, [r7, #12]
 801cfb0:	e038      	b.n	801d024 <cis_ImageFilterBW+0x84>
	{
#ifdef CIS_INVERT_COLOR
		cis_buff[i] = (double)(65535 - cis_buff[i]) * (pow(10.00, ((double)(65535 - cis_buff[i]) / 65535.00)) / 10.00); //sensibility filer generate some glitchs
 801cfb2:	68fb      	ldr	r3, [r7, #12]
 801cfb4:	005b      	lsls	r3, r3, #1
 801cfb6:	687a      	ldr	r2, [r7, #4]
 801cfb8:	4413      	add	r3, r2
 801cfba:	881b      	ldrh	r3, [r3, #0]
 801cfbc:	461a      	mov	r2, r3
 801cfbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cfc2:	1a9b      	subs	r3, r3, r2
 801cfc4:	ee07 3a90 	vmov	s15, r3
 801cfc8:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 801cfcc:	68fb      	ldr	r3, [r7, #12]
 801cfce:	005b      	lsls	r3, r3, #1
 801cfd0:	687a      	ldr	r2, [r7, #4]
 801cfd2:	4413      	add	r3, r2
 801cfd4:	881b      	ldrh	r3, [r3, #0]
 801cfd6:	461a      	mov	r2, r3
 801cfd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cfdc:	1a9b      	subs	r3, r3, r2
 801cfde:	ee07 3a90 	vmov	s15, r3
 801cfe2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801cfe6:	ed9f 5b16 	vldr	d5, [pc, #88]	; 801d040 <cis_ImageFilterBW+0xa0>
 801cfea:	ee87 6b05 	vdiv.f64	d6, d7, d5
 801cfee:	eeb0 1b46 	vmov.f64	d1, d6
 801cff2:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 801cff6:	f007 faf3 	bl	80245e0 <pow>
 801cffa:	eeb0 6b40 	vmov.f64	d6, d0
 801cffe:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 801d002:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801d006:	ee28 7b07 	vmul.f64	d7, d8, d7
 801d00a:	68fb      	ldr	r3, [r7, #12]
 801d00c:	005b      	lsls	r3, r3, #1
 801d00e:	687a      	ldr	r2, [r7, #4]
 801d010:	4413      	add	r3, r2
 801d012:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 801d016:	ee17 2a90 	vmov	r2, s15
 801d01a:	b292      	uxth	r2, r2
 801d01c:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i < CIS_EFFECTIVE_PIXELS_NB; i++)
 801d01e:	68fb      	ldr	r3, [r7, #12]
 801d020:	3301      	adds	r3, #1
 801d022:	60fb      	str	r3, [r7, #12]
 801d024:	4b08      	ldr	r3, [pc, #32]	; (801d048 <cis_ImageFilterBW+0xa8>)
 801d026:	881b      	ldrh	r3, [r3, #0]
 801d028:	461a      	mov	r2, r3
 801d02a:	68fb      	ldr	r3, [r7, #12]
 801d02c:	4293      	cmp	r3, r2
 801d02e:	d3c0      	bcc.n	801cfb2 <cis_ImageFilterBW+0x12>

#else
		cis_buff[i] = (double)(cis_buff[i]) * (pow(10.00, ((double)(cis_buff[i]) / 65535.00)) / 10.00);
#endif
	}
}
 801d030:	bf00      	nop
 801d032:	bf00      	nop
 801d034:	3710      	adds	r7, #16
 801d036:	46bd      	mov	sp, r7
 801d038:	ecbd 8b02 	vpop	{d8}
 801d03c:	bd80      	pop	{r7, pc}
 801d03e:	bf00      	nop
 801d040:	00000000 	.word	0x00000000
 801d044:	40efffe0 	.word	0x40efffe0
 801d048:	2400042e 	.word	0x2400042e

0801d04c <icm20602_write>:

/* Private user code ---------------------------------------------------------*/

//Writes a register byte to the driver
uint8_t icm20602_write(uint8_t reg, uint8_t *data, uint16_t len)
{
 801d04c:	b580      	push	{r7, lr}
 801d04e:	b084      	sub	sp, #16
 801d050:	af00      	add	r7, sp, #0
 801d052:	4603      	mov	r3, r0
 801d054:	6039      	str	r1, [r7, #0]
 801d056:	71fb      	strb	r3, [r7, #7]
 801d058:	4613      	mov	r3, r2
 801d05a:	80bb      	strh	r3, [r7, #4]
	int rv = 0;
 801d05c:	2300      	movs	r3, #0
 801d05e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(MEMS_CS_GPIO_Port, MEMS_CS_Pin, GPIO_PIN_RESET);
 801d060:	2200      	movs	r2, #0
 801d062:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d066:	4819      	ldr	r0, [pc, #100]	; (801d0cc <icm20602_write+0x80>)
 801d068:	f7ec fc64 	bl	8009934 <HAL_GPIO_WritePin>
	while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 801d06c:	bf00      	nop
 801d06e:	4818      	ldr	r0, [pc, #96]	; (801d0d0 <icm20602_write+0x84>)
 801d070:	f7f1 fc84 	bl	800e97c <HAL_SPI_GetState>
 801d074:	4603      	mov	r3, r0
 801d076:	2b01      	cmp	r3, #1
 801d078:	d1f9      	bne.n	801d06e <icm20602_write+0x22>
	rv = HAL_SPI_Transmit(&hspi2, &reg, 1, 1000);
 801d07a:	1df9      	adds	r1, r7, #7
 801d07c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801d080:	2201      	movs	r2, #1
 801d082:	4813      	ldr	r0, [pc, #76]	; (801d0d0 <icm20602_write+0x84>)
 801d084:	f7f0 fdaa 	bl	800dbdc <HAL_SPI_Transmit>
 801d088:	4603      	mov	r3, r0
 801d08a:	60fb      	str	r3, [r7, #12]
	while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 801d08c:	bf00      	nop
 801d08e:	4810      	ldr	r0, [pc, #64]	; (801d0d0 <icm20602_write+0x84>)
 801d090:	f7f1 fc74 	bl	800e97c <HAL_SPI_GetState>
 801d094:	4603      	mov	r3, r0
 801d096:	2b01      	cmp	r3, #1
 801d098:	d1f9      	bne.n	801d08e <icm20602_write+0x42>
	rv += HAL_SPI_Transmit(&hspi2, data, len, 1000);
 801d09a:	88ba      	ldrh	r2, [r7, #4]
 801d09c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801d0a0:	6839      	ldr	r1, [r7, #0]
 801d0a2:	480b      	ldr	r0, [pc, #44]	; (801d0d0 <icm20602_write+0x84>)
 801d0a4:	f7f0 fd9a 	bl	800dbdc <HAL_SPI_Transmit>
 801d0a8:	4603      	mov	r3, r0
 801d0aa:	461a      	mov	r2, r3
 801d0ac:	68fb      	ldr	r3, [r7, #12]
 801d0ae:	4413      	add	r3, r2
 801d0b0:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(MEMS_CS_GPIO_Port, MEMS_CS_Pin, GPIO_PIN_SET);
 801d0b2:	2201      	movs	r2, #1
 801d0b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d0b8:	4804      	ldr	r0, [pc, #16]	; (801d0cc <icm20602_write+0x80>)
 801d0ba:	f7ec fc3b 	bl	8009934 <HAL_GPIO_WritePin>
	return rv;
 801d0be:	68fb      	ldr	r3, [r7, #12]
 801d0c0:	b2db      	uxtb	r3, r3
}
 801d0c2:	4618      	mov	r0, r3
 801d0c4:	3710      	adds	r7, #16
 801d0c6:	46bd      	mov	sp, r7
 801d0c8:	bd80      	pop	{r7, pc}
 801d0ca:	bf00      	nop
 801d0cc:	58020400 	.word	0x58020400
 801d0d0:	24005ab4 	.word	0x24005ab4

0801d0d4 <icm20602_read>:

//Read a register byte to the driver
uint8_t icm20602_read(uint8_t reg, uint8_t *data, uint16_t len)
{
 801d0d4:	b580      	push	{r7, lr}
 801d0d6:	b084      	sub	sp, #16
 801d0d8:	af00      	add	r7, sp, #0
 801d0da:	4603      	mov	r3, r0
 801d0dc:	6039      	str	r1, [r7, #0]
 801d0de:	71fb      	strb	r3, [r7, #7]
 801d0e0:	4613      	mov	r3, r2
 801d0e2:	80bb      	strh	r3, [r7, #4]
	int rv = 0;
 801d0e4:	2300      	movs	r3, #0
 801d0e6:	60fb      	str	r3, [r7, #12]
	reg |= 0b10000000;
 801d0e8:	79fb      	ldrb	r3, [r7, #7]
 801d0ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801d0ee:	b2db      	uxtb	r3, r3
 801d0f0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(MEMS_CS_GPIO_Port, MEMS_CS_Pin, GPIO_PIN_RESET);
 801d0f2:	2200      	movs	r2, #0
 801d0f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d0f8:	4818      	ldr	r0, [pc, #96]	; (801d15c <icm20602_read+0x88>)
 801d0fa:	f7ec fc1b 	bl	8009934 <HAL_GPIO_WritePin>
	while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 801d0fe:	bf00      	nop
 801d100:	4817      	ldr	r0, [pc, #92]	; (801d160 <icm20602_read+0x8c>)
 801d102:	f7f1 fc3b 	bl	800e97c <HAL_SPI_GetState>
 801d106:	4603      	mov	r3, r0
 801d108:	2b01      	cmp	r3, #1
 801d10a:	d1f9      	bne.n	801d100 <icm20602_read+0x2c>
	rv = HAL_SPI_Transmit(&hspi2, &reg, 1, 1000);
 801d10c:	1df9      	adds	r1, r7, #7
 801d10e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801d112:	2201      	movs	r2, #1
 801d114:	4812      	ldr	r0, [pc, #72]	; (801d160 <icm20602_read+0x8c>)
 801d116:	f7f0 fd61 	bl	800dbdc <HAL_SPI_Transmit>
 801d11a:	4603      	mov	r3, r0
 801d11c:	60fb      	str	r3, [r7, #12]
	while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 801d11e:	bf00      	nop
 801d120:	480f      	ldr	r0, [pc, #60]	; (801d160 <icm20602_read+0x8c>)
 801d122:	f7f1 fc2b 	bl	800e97c <HAL_SPI_GetState>
 801d126:	4603      	mov	r3, r0
 801d128:	2b01      	cmp	r3, #1
 801d12a:	d1f9      	bne.n	801d120 <icm20602_read+0x4c>
	rv += HAL_SPI_Receive(&hspi2, data, len, 1000);
 801d12c:	88ba      	ldrh	r2, [r7, #4]
 801d12e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801d132:	6839      	ldr	r1, [r7, #0]
 801d134:	480a      	ldr	r0, [pc, #40]	; (801d160 <icm20602_read+0x8c>)
 801d136:	f7f0 ff43 	bl	800dfc0 <HAL_SPI_Receive>
 801d13a:	4603      	mov	r3, r0
 801d13c:	461a      	mov	r2, r3
 801d13e:	68fb      	ldr	r3, [r7, #12]
 801d140:	4413      	add	r3, r2
 801d142:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(MEMS_CS_GPIO_Port, MEMS_CS_Pin, GPIO_PIN_SET);
 801d144:	2201      	movs	r2, #1
 801d146:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d14a:	4804      	ldr	r0, [pc, #16]	; (801d15c <icm20602_read+0x88>)
 801d14c:	f7ec fbf2 	bl	8009934 <HAL_GPIO_WritePin>
	return rv;
 801d150:	68fb      	ldr	r3, [r7, #12]
 801d152:	b2db      	uxtb	r3, r3
}
 801d154:	4618      	mov	r0, r3
 801d156:	3710      	adds	r7, #16
 801d158:	46bd      	mov	sp, r7
 801d15a:	bd80      	pop	{r7, pc}
 801d15c:	58020400 	.word	0x58020400
 801d160:	24005ab4 	.word	0x24005ab4

0801d164 <icm20602_init>:
}

/***** Global Functions *****/

int8_t icm20602_init(void)
{
 801d164:	b580      	push	{r7, lr}
 801d166:	b082      	sub	sp, #8
 801d168:	af00      	add	r7, sp, #0
	uint8_t tmp = 0;
 801d16a:	2300      	movs	r3, #0
 801d16c:	71bb      	strb	r3, [r7, #6]
	int8_t r = 0;
 801d16e:	2300      	movs	r3, #0
 801d170:	71fb      	strb	r3, [r7, #7]
	//  4. disable fifo
	//  5. configure chip
	//  6. enable accelerometer and gyroscope

	// full reset of chip
	tmp = 0x80;
 801d172:	2380      	movs	r3, #128	; 0x80
 801d174:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_PWR_MGMT_1, &tmp, 1);
 801d176:	1dbb      	adds	r3, r7, #6
 801d178:	2201      	movs	r2, #1
 801d17a:	4619      	mov	r1, r3
 801d17c:	206b      	movs	r0, #107	; 0x6b
 801d17e:	f7ff ff65 	bl	801d04c <icm20602_write>
 801d182:	4603      	mov	r3, r0
 801d184:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801d186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d18a:	2b00      	cmp	r3, #0
 801d18c:	f040 818e 	bne.w	801d4ac <icm20602_init+0x348>

	HAL_Delay(1000);
 801d190:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801d194:	f7e6 ff40 	bl	8004018 <HAL_Delay>

	// verify we are able to read from the chip
	r = icm20602_read(REG_WHO_AM_I, &tmp, 1);
 801d198:	1dbb      	adds	r3, r7, #6
 801d19a:	2201      	movs	r2, #1
 801d19c:	4619      	mov	r1, r3
 801d19e:	2075      	movs	r0, #117	; 0x75
 801d1a0:	f7ff ff98 	bl	801d0d4 <icm20602_read>
 801d1a4:	4603      	mov	r3, r0
 801d1a6:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801d1a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d1ac:	2b00      	cmp	r3, #0
 801d1ae:	f040 817f 	bne.w	801d4b0 <icm20602_init+0x34c>
	if (REG_WHO_AM_I_CONST != tmp) {
 801d1b2:	79bb      	ldrb	r3, [r7, #6]
 801d1b4:	2b12      	cmp	r3, #18
 801d1b6:	d006      	beq.n	801d1c6 <icm20602_init+0x62>
		r = -1;
 801d1b8:	23ff      	movs	r3, #255	; 0xff
 801d1ba:	71fb      	strb	r3, [r7, #7]
		ON_ERROR_GOTO((0 == r), return_err);
 801d1bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d1c0:	2b00      	cmp	r3, #0
 801d1c2:	f040 8177 	bne.w	801d4b4 <icm20602_init+0x350>
	}

	/*Reset path*/
	tmp = 0x03;
 801d1c6:	2303      	movs	r3, #3
 801d1c8:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_SIGNAL_PATH_RESET, &tmp, 1);
 801d1ca:	1dbb      	adds	r3, r7, #6
 801d1cc:	2201      	movs	r2, #1
 801d1ce:	4619      	mov	r1, r3
 801d1d0:	2068      	movs	r0, #104	; 0x68
 801d1d2:	f7ff ff3b 	bl	801d04c <icm20602_write>
 801d1d6:	4603      	mov	r3, r0
 801d1d8:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801d1da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d1de:	2b00      	cmp	r3, #0
 801d1e0:	f040 816a 	bne.w	801d4b8 <icm20602_init+0x354>

	// set clock to internal PLL
	tmp = 0x01;
 801d1e4:	2301      	movs	r3, #1
 801d1e6:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_PWR_MGMT_1, &tmp, 1);
 801d1e8:	1dbb      	adds	r3, r7, #6
 801d1ea:	2201      	movs	r2, #1
 801d1ec:	4619      	mov	r1, r3
 801d1ee:	206b      	movs	r0, #107	; 0x6b
 801d1f0:	f7ff ff2c 	bl	801d04c <icm20602_write>
 801d1f4:	4603      	mov	r3, r0
 801d1f6:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801d1f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d1fc:	2b00      	cmp	r3, #0
 801d1fe:	f040 815d 	bne.w	801d4bc <icm20602_init+0x358>

	// place accel and gyro on standby
	tmp = 0x3F;
 801d202:	233f      	movs	r3, #63	; 0x3f
 801d204:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_PWR_MGMT_2, &tmp, 1);
 801d206:	1dbb      	adds	r3, r7, #6
 801d208:	2201      	movs	r2, #1
 801d20a:	4619      	mov	r1, r3
 801d20c:	206c      	movs	r0, #108	; 0x6c
 801d20e:	f7ff ff1d 	bl	801d04c <icm20602_write>
 801d212:	4603      	mov	r3, r0
 801d214:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801d216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d21a:	2b00      	cmp	r3, #0
 801d21c:	f040 8150 	bne.w	801d4c0 <icm20602_init+0x35c>

	// disable fifo
	tmp = 0x01;
 801d220:	2301      	movs	r3, #1
 801d222:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_USER_CTRL, &tmp, 1);
 801d224:	1dbb      	adds	r3, r7, #6
 801d226:	2201      	movs	r2, #1
 801d228:	4619      	mov	r1, r3
 801d22a:	206a      	movs	r0, #106	; 0x6a
 801d22c:	f7ff ff0e 	bl	801d04c <icm20602_write>
 801d230:	4603      	mov	r3, r0
 801d232:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801d234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d238:	2b00      	cmp	r3, #0
 801d23a:	f040 8143 	bne.w	801d4c4 <icm20602_init+0x360>

	// disable chip I2C communications
	tmp = 0x40;
 801d23e:	2340      	movs	r3, #64	; 0x40
 801d240:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_I2C_IF, &tmp, 1);
 801d242:	1dbb      	adds	r3, r7, #6
 801d244:	2201      	movs	r2, #1
 801d246:	4619      	mov	r1, r3
 801d248:	2070      	movs	r0, #112	; 0x70
 801d24a:	f7ff feff 	bl	801d04c <icm20602_write>
 801d24e:	4603      	mov	r3, r0
 801d250:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801d252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d256:	2b00      	cmp	r3, #0
 801d258:	f040 8136 	bne.w	801d4c8 <icm20602_init+0x364>

	if (dev.use_accel) {
 801d25c:	4ba7      	ldr	r3, [pc, #668]	; (801d4fc <icm20602_init+0x398>)
 801d25e:	781b      	ldrb	r3, [r3, #0]
 801d260:	2b00      	cmp	r3, #0
 801d262:	d034      	beq.n	801d2ce <icm20602_init+0x16a>
		if (ICM20602_ACCEL_DLPF_BYPASS_1046_HZ == dev.accel_dlpf) {
 801d264:	4ba5      	ldr	r3, [pc, #660]	; (801d4fc <icm20602_init+0x398>)
 801d266:	789b      	ldrb	r3, [r3, #2]
 801d268:	2b08      	cmp	r3, #8
 801d26a:	d10e      	bne.n	801d28a <icm20602_init+0x126>
			tmp = (1 << 3);
 801d26c:	2308      	movs	r3, #8
 801d26e:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_ACCEL_CONFIG_2, &tmp, 1);
 801d270:	1dbb      	adds	r3, r7, #6
 801d272:	2201      	movs	r2, #1
 801d274:	4619      	mov	r1, r3
 801d276:	201d      	movs	r0, #29
 801d278:	f7ff fee8 	bl	801d04c <icm20602_write>
 801d27c:	4603      	mov	r3, r0
 801d27e:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801d280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d284:	2b00      	cmp	r3, #0
 801d286:	d010      	beq.n	801d2aa <icm20602_init+0x146>
 801d288:	e131      	b.n	801d4ee <icm20602_init+0x38a>
		}
		else {
			tmp = dev.accel_dlpf;
 801d28a:	4b9c      	ldr	r3, [pc, #624]	; (801d4fc <icm20602_init+0x398>)
 801d28c:	789b      	ldrb	r3, [r3, #2]
 801d28e:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_ACCEL_CONFIG_2, &tmp, 1);
 801d290:	1dbb      	adds	r3, r7, #6
 801d292:	2201      	movs	r2, #1
 801d294:	4619      	mov	r1, r3
 801d296:	201d      	movs	r0, #29
 801d298:	f7ff fed8 	bl	801d04c <icm20602_write>
 801d29c:	4603      	mov	r3, r0
 801d29e:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801d2a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d2a4:	2b00      	cmp	r3, #0
 801d2a6:	f040 8111 	bne.w	801d4cc <icm20602_init+0x368>
		}

		tmp = (dev.accel_g) << 2;
 801d2aa:	4b94      	ldr	r3, [pc, #592]	; (801d4fc <icm20602_init+0x398>)
 801d2ac:	78db      	ldrb	r3, [r3, #3]
 801d2ae:	009b      	lsls	r3, r3, #2
 801d2b0:	b2db      	uxtb	r3, r3
 801d2b2:	71bb      	strb	r3, [r7, #6]
		r =  icm20602_write(REG_ACCEL_CONFIG, &tmp, 1);
 801d2b4:	1dbb      	adds	r3, r7, #6
 801d2b6:	2201      	movs	r2, #1
 801d2b8:	4619      	mov	r1, r3
 801d2ba:	201c      	movs	r0, #28
 801d2bc:	f7ff fec6 	bl	801d04c <icm20602_write>
 801d2c0:	4603      	mov	r3, r0
 801d2c2:	71fb      	strb	r3, [r7, #7]
		ON_ERROR_GOTO((0 == r), return_err);
 801d2c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d2c8:	2b00      	cmp	r3, #0
 801d2ca:	f040 8101 	bne.w	801d4d0 <icm20602_init+0x36c>
	}

	if (dev.use_gyro) {
 801d2ce:	4b8b      	ldr	r3, [pc, #556]	; (801d4fc <icm20602_init+0x398>)
 801d2d0:	791b      	ldrb	r3, [r3, #4]
 801d2d2:	2b00      	cmp	r3, #0
 801d2d4:	d073      	beq.n	801d3be <icm20602_init+0x25a>
		if (ICM20602_GYRO_DLPF_BYPASS_3281_HZ == dev.gyro_dlpf) {
 801d2d6:	4b89      	ldr	r3, [pc, #548]	; (801d4fc <icm20602_init+0x398>)
 801d2d8:	799b      	ldrb	r3, [r3, #6]
 801d2da:	2b08      	cmp	r3, #8
 801d2dc:	d124      	bne.n	801d328 <icm20602_init+0x1c4>
			// bypass dpf and set dps
			tmp = 0x00;
 801d2de:	2300      	movs	r3, #0
 801d2e0:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_CONFIG, &tmp, 1);
 801d2e2:	1dbb      	adds	r3, r7, #6
 801d2e4:	2201      	movs	r2, #1
 801d2e6:	4619      	mov	r1, r3
 801d2e8:	201a      	movs	r0, #26
 801d2ea:	f7ff feaf 	bl	801d04c <icm20602_write>
 801d2ee:	4603      	mov	r3, r0
 801d2f0:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801d2f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d2f6:	2b00      	cmp	r3, #0
 801d2f8:	f040 80ec 	bne.w	801d4d4 <icm20602_init+0x370>

			tmp = (dev.gyro_dps << 3) | 0x02; // see table page 37 of datasheet
 801d2fc:	4b7f      	ldr	r3, [pc, #508]	; (801d4fc <icm20602_init+0x398>)
 801d2fe:	79db      	ldrb	r3, [r3, #7]
 801d300:	00db      	lsls	r3, r3, #3
 801d302:	b25b      	sxtb	r3, r3
 801d304:	f043 0302 	orr.w	r3, r3, #2
 801d308:	b25b      	sxtb	r3, r3
 801d30a:	b2db      	uxtb	r3, r3
 801d30c:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_GYRO_CONFIG, &tmp, 1);
 801d30e:	1dbb      	adds	r3, r7, #6
 801d310:	2201      	movs	r2, #1
 801d312:	4619      	mov	r1, r3
 801d314:	201b      	movs	r0, #27
 801d316:	f7ff fe99 	bl	801d04c <icm20602_write>
 801d31a:	4603      	mov	r3, r0
 801d31c:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801d31e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d322:	2b00      	cmp	r3, #0
 801d324:	d04b      	beq.n	801d3be <icm20602_init+0x25a>
 801d326:	e0e2      	b.n	801d4ee <icm20602_init+0x38a>
		}
		else if (ICM20602_GYRO_DLPF_BYPASS_8173_HZ == dev.gyro_dlpf) {
 801d328:	4b74      	ldr	r3, [pc, #464]	; (801d4fc <icm20602_init+0x398>)
 801d32a:	799b      	ldrb	r3, [r3, #6]
 801d32c:	2b09      	cmp	r3, #9
 801d32e:	d124      	bne.n	801d37a <icm20602_init+0x216>
			// bypass dpf and set dps
			tmp = 0x00;
 801d330:	2300      	movs	r3, #0
 801d332:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_CONFIG, &tmp, 1);
 801d334:	1dbb      	adds	r3, r7, #6
 801d336:	2201      	movs	r2, #1
 801d338:	4619      	mov	r1, r3
 801d33a:	201a      	movs	r0, #26
 801d33c:	f7ff fe86 	bl	801d04c <icm20602_write>
 801d340:	4603      	mov	r3, r0
 801d342:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801d344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d348:	2b00      	cmp	r3, #0
 801d34a:	f040 80c5 	bne.w	801d4d8 <icm20602_init+0x374>

			tmp = (dev.gyro_dps << 3) | 0x01; // see table page 37 of datasheet
 801d34e:	4b6b      	ldr	r3, [pc, #428]	; (801d4fc <icm20602_init+0x398>)
 801d350:	79db      	ldrb	r3, [r3, #7]
 801d352:	00db      	lsls	r3, r3, #3
 801d354:	b25b      	sxtb	r3, r3
 801d356:	f043 0301 	orr.w	r3, r3, #1
 801d35a:	b25b      	sxtb	r3, r3
 801d35c:	b2db      	uxtb	r3, r3
 801d35e:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_GYRO_CONFIG, &tmp, 1);
 801d360:	1dbb      	adds	r3, r7, #6
 801d362:	2201      	movs	r2, #1
 801d364:	4619      	mov	r1, r3
 801d366:	201b      	movs	r0, #27
 801d368:	f7ff fe70 	bl	801d04c <icm20602_write>
 801d36c:	4603      	mov	r3, r0
 801d36e:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801d370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d374:	2b00      	cmp	r3, #0
 801d376:	d022      	beq.n	801d3be <icm20602_init+0x25a>
 801d378:	e0b9      	b.n	801d4ee <icm20602_init+0x38a>
		}
		else {
			// configure dpf and set dps
			tmp = dev.gyro_dlpf;
 801d37a:	4b60      	ldr	r3, [pc, #384]	; (801d4fc <icm20602_init+0x398>)
 801d37c:	799b      	ldrb	r3, [r3, #6]
 801d37e:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_CONFIG, &tmp, 1);
 801d380:	1dbb      	adds	r3, r7, #6
 801d382:	2201      	movs	r2, #1
 801d384:	4619      	mov	r1, r3
 801d386:	201a      	movs	r0, #26
 801d388:	f7ff fe60 	bl	801d04c <icm20602_write>
 801d38c:	4603      	mov	r3, r0
 801d38e:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801d390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d394:	2b00      	cmp	r3, #0
 801d396:	f040 80a1 	bne.w	801d4dc <icm20602_init+0x378>

			tmp = dev.gyro_dps << 3;
 801d39a:	4b58      	ldr	r3, [pc, #352]	; (801d4fc <icm20602_init+0x398>)
 801d39c:	79db      	ldrb	r3, [r3, #7]
 801d39e:	00db      	lsls	r3, r3, #3
 801d3a0:	b2db      	uxtb	r3, r3
 801d3a2:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_GYRO_CONFIG, &tmp, 1);
 801d3a4:	1dbb      	adds	r3, r7, #6
 801d3a6:	2201      	movs	r2, #1
 801d3a8:	4619      	mov	r1, r3
 801d3aa:	201b      	movs	r0, #27
 801d3ac:	f7ff fe4e 	bl	801d04c <icm20602_write>
 801d3b0:	4603      	mov	r3, r0
 801d3b2:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801d3b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d3b8:	2b00      	cmp	r3, #0
 801d3ba:	f040 8091 	bne.w	801d4e0 <icm20602_init+0x37c>
		}
	}

	/*Disale low power mode*/
	tmp = 0x00;
 801d3be:	2300      	movs	r3, #0
 801d3c0:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_LP_MODE_CFG, &tmp, 1);
 801d3c2:	1dbb      	adds	r3, r7, #6
 801d3c4:	2201      	movs	r2, #1
 801d3c6:	4619      	mov	r1, r3
 801d3c8:	201e      	movs	r0, #30
 801d3ca:	f7ff fe3f 	bl	801d04c <icm20602_write>
 801d3ce:	4603      	mov	r3, r0
 801d3d0:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801d3d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d3d6:	2b00      	cmp	r3, #0
 801d3d8:	f040 8084 	bne.w	801d4e4 <icm20602_init+0x380>

	// enable FIFO if requested
	tmp = ((dev.use_accel) && (dev.accel_fifo)) ? 0x08 : 0x00;
 801d3dc:	4b47      	ldr	r3, [pc, #284]	; (801d4fc <icm20602_init+0x398>)
 801d3de:	781b      	ldrb	r3, [r3, #0]
 801d3e0:	2b00      	cmp	r3, #0
 801d3e2:	d005      	beq.n	801d3f0 <icm20602_init+0x28c>
 801d3e4:	4b45      	ldr	r3, [pc, #276]	; (801d4fc <icm20602_init+0x398>)
 801d3e6:	785b      	ldrb	r3, [r3, #1]
 801d3e8:	2b00      	cmp	r3, #0
 801d3ea:	d001      	beq.n	801d3f0 <icm20602_init+0x28c>
 801d3ec:	2308      	movs	r3, #8
 801d3ee:	e000      	b.n	801d3f2 <icm20602_init+0x28e>
 801d3f0:	2300      	movs	r3, #0
 801d3f2:	71bb      	strb	r3, [r7, #6]
	tmp |= ((dev.use_gyro) && (dev.gyro_fifo)) ? 0x10 : 0x00;
 801d3f4:	4b41      	ldr	r3, [pc, #260]	; (801d4fc <icm20602_init+0x398>)
 801d3f6:	791b      	ldrb	r3, [r3, #4]
 801d3f8:	2b00      	cmp	r3, #0
 801d3fa:	d005      	beq.n	801d408 <icm20602_init+0x2a4>
 801d3fc:	4b3f      	ldr	r3, [pc, #252]	; (801d4fc <icm20602_init+0x398>)
 801d3fe:	795b      	ldrb	r3, [r3, #5]
 801d400:	2b00      	cmp	r3, #0
 801d402:	d001      	beq.n	801d408 <icm20602_init+0x2a4>
 801d404:	2210      	movs	r2, #16
 801d406:	e000      	b.n	801d40a <icm20602_init+0x2a6>
 801d408:	2200      	movs	r2, #0
 801d40a:	79bb      	ldrb	r3, [r7, #6]
 801d40c:	b25b      	sxtb	r3, r3
 801d40e:	4313      	orrs	r3, r2
 801d410:	b25b      	sxtb	r3, r3
 801d412:	b2db      	uxtb	r3, r3
 801d414:	71bb      	strb	r3, [r7, #6]
	r =  icm20602_write(REG_FIFO_EN, &tmp, 1);
 801d416:	1dbb      	adds	r3, r7, #6
 801d418:	2201      	movs	r2, #1
 801d41a:	4619      	mov	r1, r3
 801d41c:	2023      	movs	r0, #35	; 0x23
 801d41e:	f7ff fe15 	bl	801d04c <icm20602_write>
 801d422:	4603      	mov	r3, r0
 801d424:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801d426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d42a:	2b00      	cmp	r3, #0
 801d42c:	d15c      	bne.n	801d4e8 <icm20602_init+0x384>

	// configure sample rate divider (TODO: is this gyro only?)
	// note: SAMPLE_RATE = INTERNAL_SAMPLE_RATE / (1 + SMPLRT_DIV)
	tmp = (0 != dev.sample_rate_div) ? dev.sample_rate_div - 1 : 1;
 801d42e:	4b33      	ldr	r3, [pc, #204]	; (801d4fc <icm20602_init+0x398>)
 801d430:	7a1b      	ldrb	r3, [r3, #8]
 801d432:	2b00      	cmp	r3, #0
 801d434:	d004      	beq.n	801d440 <icm20602_init+0x2dc>
 801d436:	4b31      	ldr	r3, [pc, #196]	; (801d4fc <icm20602_init+0x398>)
 801d438:	7a1b      	ldrb	r3, [r3, #8]
 801d43a:	3b01      	subs	r3, #1
 801d43c:	b2db      	uxtb	r3, r3
 801d43e:	e000      	b.n	801d442 <icm20602_init+0x2de>
 801d440:	2301      	movs	r3, #1
 801d442:	71bb      	strb	r3, [r7, #6]
	r =  icm20602_write(REG_SMPLRT_DIV, &tmp, 1);
 801d444:	1dbb      	adds	r3, r7, #6
 801d446:	2201      	movs	r2, #1
 801d448:	4619      	mov	r1, r3
 801d44a:	2019      	movs	r0, #25
 801d44c:	f7ff fdfe 	bl	801d04c <icm20602_write>
 801d450:	4603      	mov	r3, r0
 801d452:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801d454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d458:	2b00      	cmp	r3, #0
 801d45a:	d147      	bne.n	801d4ec <icm20602_init+0x388>

	tmp = 0;
 801d45c:	2300      	movs	r3, #0
 801d45e:	71bb      	strb	r3, [r7, #6]
	tmp |= (dev.use_gyro) ? 0 : 0x07; // 0 - on, 1 - disabled
 801d460:	4b26      	ldr	r3, [pc, #152]	; (801d4fc <icm20602_init+0x398>)
 801d462:	791b      	ldrb	r3, [r3, #4]
 801d464:	2b00      	cmp	r3, #0
 801d466:	d001      	beq.n	801d46c <icm20602_init+0x308>
 801d468:	2200      	movs	r2, #0
 801d46a:	e000      	b.n	801d46e <icm20602_init+0x30a>
 801d46c:	2207      	movs	r2, #7
 801d46e:	79bb      	ldrb	r3, [r7, #6]
 801d470:	b25b      	sxtb	r3, r3
 801d472:	4313      	orrs	r3, r2
 801d474:	b25b      	sxtb	r3, r3
 801d476:	b2db      	uxtb	r3, r3
 801d478:	71bb      	strb	r3, [r7, #6]
	tmp |= (dev.use_accel) ? 0 : 0x38; // 0 - on, 1 - disabled
 801d47a:	4b20      	ldr	r3, [pc, #128]	; (801d4fc <icm20602_init+0x398>)
 801d47c:	781b      	ldrb	r3, [r3, #0]
 801d47e:	2b00      	cmp	r3, #0
 801d480:	d001      	beq.n	801d486 <icm20602_init+0x322>
 801d482:	2200      	movs	r2, #0
 801d484:	e000      	b.n	801d488 <icm20602_init+0x324>
 801d486:	2238      	movs	r2, #56	; 0x38
 801d488:	79bb      	ldrb	r3, [r7, #6]
 801d48a:	b25b      	sxtb	r3, r3
 801d48c:	4313      	orrs	r3, r2
 801d48e:	b25b      	sxtb	r3, r3
 801d490:	b2db      	uxtb	r3, r3
 801d492:	71bb      	strb	r3, [r7, #6]
	r =  icm20602_write(REG_PWR_MGMT_2, &tmp, 1);
 801d494:	1dbb      	adds	r3, r7, #6
 801d496:	2201      	movs	r2, #1
 801d498:	4619      	mov	r1, r3
 801d49a:	206c      	movs	r0, #108	; 0x6c
 801d49c:	f7ff fdd6 	bl	801d04c <icm20602_write>
 801d4a0:	4603      	mov	r3, r0
 801d4a2:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801d4a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d4a8:	2b00      	cmp	r3, #0

	return_err:
 801d4aa:	e020      	b.n	801d4ee <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801d4ac:	bf00      	nop
 801d4ae:	e01e      	b.n	801d4ee <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801d4b0:	bf00      	nop
 801d4b2:	e01c      	b.n	801d4ee <icm20602_init+0x38a>
		ON_ERROR_GOTO((0 == r), return_err);
 801d4b4:	bf00      	nop
 801d4b6:	e01a      	b.n	801d4ee <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801d4b8:	bf00      	nop
 801d4ba:	e018      	b.n	801d4ee <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801d4bc:	bf00      	nop
 801d4be:	e016      	b.n	801d4ee <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801d4c0:	bf00      	nop
 801d4c2:	e014      	b.n	801d4ee <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801d4c4:	bf00      	nop
 801d4c6:	e012      	b.n	801d4ee <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801d4c8:	bf00      	nop
 801d4ca:	e010      	b.n	801d4ee <icm20602_init+0x38a>
			ON_ERROR_GOTO((0 == r), return_err);
 801d4cc:	bf00      	nop
 801d4ce:	e00e      	b.n	801d4ee <icm20602_init+0x38a>
		ON_ERROR_GOTO((0 == r), return_err);
 801d4d0:	bf00      	nop
 801d4d2:	e00c      	b.n	801d4ee <icm20602_init+0x38a>
			ON_ERROR_GOTO((0 == r), return_err);
 801d4d4:	bf00      	nop
 801d4d6:	e00a      	b.n	801d4ee <icm20602_init+0x38a>
			ON_ERROR_GOTO((0 == r), return_err);
 801d4d8:	bf00      	nop
 801d4da:	e008      	b.n	801d4ee <icm20602_init+0x38a>
			ON_ERROR_GOTO((0 == r), return_err);
 801d4dc:	bf00      	nop
 801d4de:	e006      	b.n	801d4ee <icm20602_init+0x38a>
			ON_ERROR_GOTO((0 == r), return_err);
 801d4e0:	bf00      	nop
 801d4e2:	e004      	b.n	801d4ee <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801d4e4:	bf00      	nop
 801d4e6:	e002      	b.n	801d4ee <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801d4e8:	bf00      	nop
 801d4ea:	e000      	b.n	801d4ee <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801d4ec:	bf00      	nop

	return r;
 801d4ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801d4f2:	4618      	mov	r0, r3
 801d4f4:	3708      	adds	r7, #8
 801d4f6:	46bd      	mov	sp, r7
 801d4f8:	bd80      	pop	{r7, pc}
 801d4fa:	bf00      	nop
 801d4fc:	24000438 	.word	0x24000438

0801d500 <icm20602_read_data_raw>:
}

int8_t icm20602_read_data_raw(int16_t * p_ax,
		int16_t * p_ay, int16_t * p_az, int16_t * p_gx, int16_t * p_gy,
		int16_t * p_gz, int16_t * p_t)
{
 801d500:	b580      	push	{r7, lr}
 801d502:	b088      	sub	sp, #32
 801d504:	af00      	add	r7, sp, #0
 801d506:	60f8      	str	r0, [r7, #12]
 801d508:	60b9      	str	r1, [r7, #8]
 801d50a:	607a      	str	r2, [r7, #4]
 801d50c:	603b      	str	r3, [r7, #0]
	uint8_t buf[14] = {0};
 801d50e:	2300      	movs	r3, #0
 801d510:	613b      	str	r3, [r7, #16]
 801d512:	f107 0314 	add.w	r3, r7, #20
 801d516:	2200      	movs	r2, #0
 801d518:	601a      	str	r2, [r3, #0]
 801d51a:	605a      	str	r2, [r3, #4]
 801d51c:	811a      	strh	r2, [r3, #8]
	int8_t r = 0;
 801d51e:	2300      	movs	r3, #0
 801d520:	77fb      	strb	r3, [r7, #31]

	r = icm20602_read(REG_ACCEL_XOUT_H, buf, 14);
 801d522:	f107 0310 	add.w	r3, r7, #16
 801d526:	220e      	movs	r2, #14
 801d528:	4619      	mov	r1, r3
 801d52a:	203b      	movs	r0, #59	; 0x3b
 801d52c:	f7ff fdd2 	bl	801d0d4 <icm20602_read>
 801d530:	4603      	mov	r3, r0
 801d532:	77fb      	strb	r3, [r7, #31]
	if (0 == r) {
 801d534:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801d538:	2b00      	cmp	r3, #0
 801d53a:	f040 808c 	bne.w	801d656 <icm20602_read_data_raw+0x156>
		UINT8_TO_INT16(*p_ax, buf[0], buf[1]);
 801d53e:	7c3b      	ldrb	r3, [r7, #16]
 801d540:	b21a      	sxth	r2, r3
 801d542:	68fb      	ldr	r3, [r7, #12]
 801d544:	801a      	strh	r2, [r3, #0]
 801d546:	68fb      	ldr	r3, [r7, #12]
 801d548:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d54c:	021b      	lsls	r3, r3, #8
 801d54e:	b21a      	sxth	r2, r3
 801d550:	68fb      	ldr	r3, [r7, #12]
 801d552:	801a      	strh	r2, [r3, #0]
 801d554:	68fb      	ldr	r3, [r7, #12]
 801d556:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d55a:	7c7b      	ldrb	r3, [r7, #17]
 801d55c:	b21b      	sxth	r3, r3
 801d55e:	4313      	orrs	r3, r2
 801d560:	b21a      	sxth	r2, r3
 801d562:	68fb      	ldr	r3, [r7, #12]
 801d564:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(*p_ay, buf[2], buf[3]);
 801d566:	7cbb      	ldrb	r3, [r7, #18]
 801d568:	b21a      	sxth	r2, r3
 801d56a:	68bb      	ldr	r3, [r7, #8]
 801d56c:	801a      	strh	r2, [r3, #0]
 801d56e:	68bb      	ldr	r3, [r7, #8]
 801d570:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d574:	021b      	lsls	r3, r3, #8
 801d576:	b21a      	sxth	r2, r3
 801d578:	68bb      	ldr	r3, [r7, #8]
 801d57a:	801a      	strh	r2, [r3, #0]
 801d57c:	68bb      	ldr	r3, [r7, #8]
 801d57e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d582:	7cfb      	ldrb	r3, [r7, #19]
 801d584:	b21b      	sxth	r3, r3
 801d586:	4313      	orrs	r3, r2
 801d588:	b21a      	sxth	r2, r3
 801d58a:	68bb      	ldr	r3, [r7, #8]
 801d58c:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(*p_az, buf[4], buf[5]);
 801d58e:	7d3b      	ldrb	r3, [r7, #20]
 801d590:	b21a      	sxth	r2, r3
 801d592:	687b      	ldr	r3, [r7, #4]
 801d594:	801a      	strh	r2, [r3, #0]
 801d596:	687b      	ldr	r3, [r7, #4]
 801d598:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d59c:	021b      	lsls	r3, r3, #8
 801d59e:	b21a      	sxth	r2, r3
 801d5a0:	687b      	ldr	r3, [r7, #4]
 801d5a2:	801a      	strh	r2, [r3, #0]
 801d5a4:	687b      	ldr	r3, [r7, #4]
 801d5a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d5aa:	7d7b      	ldrb	r3, [r7, #21]
 801d5ac:	b21b      	sxth	r3, r3
 801d5ae:	4313      	orrs	r3, r2
 801d5b0:	b21a      	sxth	r2, r3
 801d5b2:	687b      	ldr	r3, [r7, #4]
 801d5b4:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(*p_t, buf[6], buf[7]);
 801d5b6:	7dbb      	ldrb	r3, [r7, #22]
 801d5b8:	b21a      	sxth	r2, r3
 801d5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5bc:	801a      	strh	r2, [r3, #0]
 801d5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d5c4:	021b      	lsls	r3, r3, #8
 801d5c6:	b21a      	sxth	r2, r3
 801d5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5ca:	801a      	strh	r2, [r3, #0]
 801d5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d5d2:	7dfb      	ldrb	r3, [r7, #23]
 801d5d4:	b21b      	sxth	r3, r3
 801d5d6:	4313      	orrs	r3, r2
 801d5d8:	b21a      	sxth	r2, r3
 801d5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5dc:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(*p_gx, buf[8], buf[9]);
 801d5de:	7e3b      	ldrb	r3, [r7, #24]
 801d5e0:	b21a      	sxth	r2, r3
 801d5e2:	683b      	ldr	r3, [r7, #0]
 801d5e4:	801a      	strh	r2, [r3, #0]
 801d5e6:	683b      	ldr	r3, [r7, #0]
 801d5e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d5ec:	021b      	lsls	r3, r3, #8
 801d5ee:	b21a      	sxth	r2, r3
 801d5f0:	683b      	ldr	r3, [r7, #0]
 801d5f2:	801a      	strh	r2, [r3, #0]
 801d5f4:	683b      	ldr	r3, [r7, #0]
 801d5f6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d5fa:	7e7b      	ldrb	r3, [r7, #25]
 801d5fc:	b21b      	sxth	r3, r3
 801d5fe:	4313      	orrs	r3, r2
 801d600:	b21a      	sxth	r2, r3
 801d602:	683b      	ldr	r3, [r7, #0]
 801d604:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(*p_gy, buf[10], buf[11]);
 801d606:	7ebb      	ldrb	r3, [r7, #26]
 801d608:	b21a      	sxth	r2, r3
 801d60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d60c:	801a      	strh	r2, [r3, #0]
 801d60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d610:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d614:	021b      	lsls	r3, r3, #8
 801d616:	b21a      	sxth	r2, r3
 801d618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d61a:	801a      	strh	r2, [r3, #0]
 801d61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d61e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d622:	7efb      	ldrb	r3, [r7, #27]
 801d624:	b21b      	sxth	r3, r3
 801d626:	4313      	orrs	r3, r2
 801d628:	b21a      	sxth	r2, r3
 801d62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d62c:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(*p_gz, buf[12], buf[13]);
 801d62e:	7f3b      	ldrb	r3, [r7, #28]
 801d630:	b21a      	sxth	r2, r3
 801d632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d634:	801a      	strh	r2, [r3, #0]
 801d636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d638:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d63c:	021b      	lsls	r3, r3, #8
 801d63e:	b21a      	sxth	r2, r3
 801d640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d642:	801a      	strh	r2, [r3, #0]
 801d644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d646:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d64a:	7f7b      	ldrb	r3, [r7, #29]
 801d64c:	b21b      	sxth	r3, r3
 801d64e:	4313      	orrs	r3, r2
 801d650:	b21a      	sxth	r2, r3
 801d652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d654:	801a      	strh	r2, [r3, #0]
	}

	return r;
 801d656:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d65a:	4618      	mov	r0, r3
 801d65c:	3720      	adds	r7, #32
 801d65e:	46bd      	mov	sp, r7
 801d660:	bd80      	pop	{r7, pc}
	...

0801d664 <pcm5102_Init>:
/* Private function prototypes -----------------------------------------------*/

/* Private user code ---------------------------------------------------------*/

void pcm5102_Init(void)
{
 801d664:	b580      	push	{r7, lr}
 801d666:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DAC_FLT_GPIO_Port, DAC_FLT_Pin, GPIO_PIN_SET); //Filterselect: Normallatency(Low) / Lowlatency(High)
 801d668:	2201      	movs	r2, #1
 801d66a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801d66e:	480a      	ldr	r0, [pc, #40]	; (801d698 <pcm5102_Init+0x34>)
 801d670:	f7ec f960 	bl	8009934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DAC_DEMP_GPIO_Port, DAC_DEMP_Pin, GPIO_PIN_RESET); //De-emphasiscontrol for 44.1kHz sampling rate: Off(Low) / On(High)
 801d674:	2200      	movs	r2, #0
 801d676:	2108      	movs	r1, #8
 801d678:	4808      	ldr	r0, [pc, #32]	; (801d69c <pcm5102_Init+0x38>)
 801d67a:	f7ec f95b 	bl	8009934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DAC_XSMT_GPIO_Port, DAC_XSMT_Pin, GPIO_PIN_SET); //Soft mute control: Softmute(Low) / soft un-mute(High)
 801d67e:	2201      	movs	r2, #1
 801d680:	2104      	movs	r1, #4
 801d682:	4805      	ldr	r0, [pc, #20]	; (801d698 <pcm5102_Init+0x34>)
 801d684:	f7ec f956 	bl	8009934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DAC_FMT_GPIO_Port, DAC_FMT_Pin, GPIO_PIN_RESET); //Audio format selection: I2S(Low)/ Left justified(High)
 801d688:	2200      	movs	r2, #0
 801d68a:	2140      	movs	r1, #64	; 0x40
 801d68c:	4804      	ldr	r0, [pc, #16]	; (801d6a0 <pcm5102_Init+0x3c>)
 801d68e:	f7ec f951 	bl	8009934 <HAL_GPIO_WritePin>
}
 801d692:	bf00      	nop
 801d694:	bd80      	pop	{r7, pc}
 801d696:	bf00      	nop
 801d698:	58020800 	.word	0x58020800
 801d69c:	58021c00 	.word	0x58021c00
 801d6a0:	58021400 	.word	0x58021400

0801d6a4 <Audio_Player_Play>:

void Audio_Player_Play(uint8_t* pBuffer, uint32_t Size)
{
 801d6a4:	b580      	push	{r7, lr}
 801d6a6:	b082      	sub	sp, #8
 801d6a8:	af00      	add	r7, sp, #0
 801d6aa:	6078      	str	r0, [r7, #4]
 801d6ac:	6039      	str	r1, [r7, #0]
	if(Size > 0xFFFF) {
 801d6ae:	683b      	ldr	r3, [r7, #0]
 801d6b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d6b4:	d306      	bcc.n	801d6c4 <Audio_Player_Play+0x20>
		Size = 0xFFFF;
 801d6b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d6ba:	603b      	str	r3, [r7, #0]
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 801d6bc:	2140      	movs	r1, #64	; 0x40
 801d6be:	4807      	ldr	r0, [pc, #28]	; (801d6dc <Audio_Player_Play+0x38>)
 801d6c0:	f7ec f951 	bl	8009966 <HAL_GPIO_TogglePin>
	}
	HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t*)pBuffer, Size);
 801d6c4:	683b      	ldr	r3, [r7, #0]
 801d6c6:	b29b      	uxth	r3, r3
 801d6c8:	461a      	mov	r2, r3
 801d6ca:	6879      	ldr	r1, [r7, #4]
 801d6cc:	4804      	ldr	r0, [pc, #16]	; (801d6e0 <Audio_Player_Play+0x3c>)
 801d6ce:	f7ef feaf 	bl	800d430 <HAL_SAI_Transmit_DMA>

//	HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t*)pBuffer, DMA_MAX(Size/AUDIODATA_SIZE));
}
 801d6d2:	bf00      	nop
 801d6d4:	3708      	adds	r7, #8
 801d6d6:	46bd      	mov	sp, r7
 801d6d8:	bd80      	pop	{r7, pc}
 801d6da:	bf00      	nop
 801d6dc:	58021c00 	.word	0x58021c00
 801d6e0:	24005a1c 	.word	0x24005a1c

0801d6e4 <ssd1362_Reset>:
void ssd1362_writeCmd(uint8_t reg);
void ssd1362_writeData(uint8_t data);

/* Private user code ---------------------------------------------------------*/

void ssd1362_Reset(void) {
 801d6e4:	b580      	push	{r7, lr}
 801d6e6:	af00      	add	r7, sp, #0
    // Reset the OLED
    HAL_GPIO_WritePin(SSD1362_Reset_Port, SSD1362_Reset_Pin, GPIO_PIN_RESET);
 801d6e8:	2200      	movs	r2, #0
 801d6ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 801d6ee:	4808      	ldr	r0, [pc, #32]	; (801d710 <ssd1362_Reset+0x2c>)
 801d6f0:	f7ec f920 	bl	8009934 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 801d6f4:	200a      	movs	r0, #10
 801d6f6:	f7e6 fc8f 	bl	8004018 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1362_Reset_Port, SSD1362_Reset_Pin, GPIO_PIN_SET);
 801d6fa:	2201      	movs	r2, #1
 801d6fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 801d700:	4803      	ldr	r0, [pc, #12]	; (801d710 <ssd1362_Reset+0x2c>)
 801d702:	f7ec f917 	bl	8009934 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 801d706:	200a      	movs	r0, #10
 801d708:	f7e6 fc86 	bl	8004018 <HAL_Delay>
}
 801d70c:	bf00      	nop
 801d70e:	bd80      	pop	{r7, pc}
 801d710:	58020400 	.word	0x58020400

0801d714 <ssd1362_writeCmd>:

//Writes a command byte to the driver
void ssd1362_writeCmd(uint8_t reg)
{
 801d714:	b580      	push	{r7, lr}
 801d716:	b082      	sub	sp, #8
 801d718:	af00      	add	r7, sp, #0
 801d71a:	4603      	mov	r3, r0
 801d71c:	71fb      	strb	r3, [r7, #7]
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)LCD_REG, (uint8_t *)&reg, 1);
 801d71e:	1dfa      	adds	r2, r7, #7
 801d720:	2301      	movs	r3, #1
 801d722:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 801d726:	4803      	ldr	r0, [pc, #12]	; (801d734 <ssd1362_writeCmd+0x20>)
 801d728:	f7f1 fa70 	bl	800ec0c <HAL_SRAM_Write_8b>
}
 801d72c:	bf00      	nop
 801d72e:	3708      	adds	r7, #8
 801d730:	46bd      	mov	sp, r7
 801d732:	bd80      	pop	{r7, pc}
 801d734:	24005944 	.word	0x24005944

0801d738 <ssd1362_writeData>:

//Writes 1 byte to the display's memory
void ssd1362_writeData(uint8_t data)
{
 801d738:	b580      	push	{r7, lr}
 801d73a:	b082      	sub	sp, #8
 801d73c:	af00      	add	r7, sp, #0
 801d73e:	4603      	mov	r3, r0
 801d740:	71fb      	strb	r3, [r7, #7]
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)LCD_RAM, (uint8_t *)&data, 1);
 801d742:	1dfa      	adds	r2, r7, #7
 801d744:	2301      	movs	r3, #1
 801d746:	4904      	ldr	r1, [pc, #16]	; (801d758 <ssd1362_writeData+0x20>)
 801d748:	4804      	ldr	r0, [pc, #16]	; (801d75c <ssd1362_writeData+0x24>)
 801d74a:	f7f1 fa5f 	bl	800ec0c <HAL_SRAM_Write_8b>
}
 801d74e:	bf00      	nop
 801d750:	3708      	adds	r7, #8
 801d752:	46bd      	mov	sp, r7
 801d754:	bd80      	pop	{r7, pc}
 801d756:	bf00      	nop
 801d758:	c0000001 	.word	0xc0000001
 801d75c:	24005944 	.word	0x24005944

0801d760 <bitWrite>:

void bitWrite(uint8_t *x, uint8_t n, uint8_t value) {
 801d760:	b480      	push	{r7}
 801d762:	b083      	sub	sp, #12
 801d764:	af00      	add	r7, sp, #0
 801d766:	6078      	str	r0, [r7, #4]
 801d768:	460b      	mov	r3, r1
 801d76a:	70fb      	strb	r3, [r7, #3]
 801d76c:	4613      	mov	r3, r2
 801d76e:	70bb      	strb	r3, [r7, #2]
   if (value)
 801d770:	78bb      	ldrb	r3, [r7, #2]
 801d772:	2b00      	cmp	r3, #0
 801d774:	d00d      	beq.n	801d792 <bitWrite+0x32>
      *x |= (1 << n);
 801d776:	687b      	ldr	r3, [r7, #4]
 801d778:	781b      	ldrb	r3, [r3, #0]
 801d77a:	b25a      	sxtb	r2, r3
 801d77c:	78fb      	ldrb	r3, [r7, #3]
 801d77e:	2101      	movs	r1, #1
 801d780:	fa01 f303 	lsl.w	r3, r1, r3
 801d784:	b25b      	sxtb	r3, r3
 801d786:	4313      	orrs	r3, r2
 801d788:	b25b      	sxtb	r3, r3
 801d78a:	b2da      	uxtb	r2, r3
 801d78c:	687b      	ldr	r3, [r7, #4]
 801d78e:	701a      	strb	r2, [r3, #0]
   else
      *x &= ~(1 << n);
}
 801d790:	e00e      	b.n	801d7b0 <bitWrite+0x50>
      *x &= ~(1 << n);
 801d792:	687b      	ldr	r3, [r7, #4]
 801d794:	781b      	ldrb	r3, [r3, #0]
 801d796:	b25a      	sxtb	r2, r3
 801d798:	78fb      	ldrb	r3, [r7, #3]
 801d79a:	2101      	movs	r1, #1
 801d79c:	fa01 f303 	lsl.w	r3, r1, r3
 801d7a0:	b25b      	sxtb	r3, r3
 801d7a2:	43db      	mvns	r3, r3
 801d7a4:	b25b      	sxtb	r3, r3
 801d7a6:	4013      	ands	r3, r2
 801d7a8:	b25b      	sxtb	r3, r3
 801d7aa:	b2da      	uxtb	r2, r3
 801d7ac:	687b      	ldr	r3, [r7, #4]
 801d7ae:	701a      	strb	r2, [r3, #0]
}
 801d7b0:	bf00      	nop
 801d7b2:	370c      	adds	r7, #12
 801d7b4:	46bd      	mov	sp, r7
 801d7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7ba:	4770      	bx	lr

0801d7bc <bitRead>:

char bitRead(uint8_t *x, uint8_t n) {
 801d7bc:	b480      	push	{r7}
 801d7be:	b083      	sub	sp, #12
 801d7c0:	af00      	add	r7, sp, #0
 801d7c2:	6078      	str	r0, [r7, #4]
 801d7c4:	460b      	mov	r3, r1
 801d7c6:	70fb      	strb	r3, [r7, #3]
   return (*x & (1 << n)) ? 1 : 0;
 801d7c8:	687b      	ldr	r3, [r7, #4]
 801d7ca:	781b      	ldrb	r3, [r3, #0]
 801d7cc:	461a      	mov	r2, r3
 801d7ce:	78fb      	ldrb	r3, [r7, #3]
 801d7d0:	fa42 f303 	asr.w	r3, r2, r3
 801d7d4:	b2db      	uxtb	r3, r3
 801d7d6:	f003 0301 	and.w	r3, r3, #1
 801d7da:	b2db      	uxtb	r3, r3
}
 801d7dc:	4618      	mov	r0, r3
 801d7de:	370c      	adds	r7, #12
 801d7e0:	46bd      	mov	sp, r7
 801d7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7e6:	4770      	bx	lr

0801d7e8 <ssd1362_setWriteZone>:

//defines a rectangular area of memory which the driver will itterate through. This function takes memory locations, meaning a 64x256 space
void ssd1362_setWriteZone(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 801d7e8:	b590      	push	{r4, r7, lr}
 801d7ea:	b083      	sub	sp, #12
 801d7ec:	af00      	add	r7, sp, #0
 801d7ee:	4604      	mov	r4, r0
 801d7f0:	4608      	mov	r0, r1
 801d7f2:	4611      	mov	r1, r2
 801d7f4:	461a      	mov	r2, r3
 801d7f6:	4623      	mov	r3, r4
 801d7f8:	80fb      	strh	r3, [r7, #6]
 801d7fa:	4603      	mov	r3, r0
 801d7fc:	80bb      	strh	r3, [r7, #4]
 801d7fe:	460b      	mov	r3, r1
 801d800:	807b      	strh	r3, [r7, #2]
 801d802:	4613      	mov	r3, r2
 801d804:	803b      	strh	r3, [r7, #0]
	ssd1362_writeCmd(0x15); //Set Column Address
 801d806:	2015      	movs	r0, #21
 801d808:	f7ff ff84 	bl	801d714 <ssd1362_writeCmd>
	ssd1362_writeCmd(x1); //Beginning. Note that you must divide the column by 2, since 1 byte in memory is 2 pixels
 801d80c:	88fb      	ldrh	r3, [r7, #6]
 801d80e:	b2db      	uxtb	r3, r3
 801d810:	4618      	mov	r0, r3
 801d812:	f7ff ff7f 	bl	801d714 <ssd1362_writeCmd>
	ssd1362_writeCmd(x2); //End
 801d816:	887b      	ldrh	r3, [r7, #2]
 801d818:	b2db      	uxtb	r3, r3
 801d81a:	4618      	mov	r0, r3
 801d81c:	f7ff ff7a 	bl	801d714 <ssd1362_writeCmd>

	ssd1362_writeCmd(0x75); //Set Row Address
 801d820:	2075      	movs	r0, #117	; 0x75
 801d822:	f7ff ff77 	bl	801d714 <ssd1362_writeCmd>
	ssd1362_writeCmd(y1); //Beginning
 801d826:	88bb      	ldrh	r3, [r7, #4]
 801d828:	b2db      	uxtb	r3, r3
 801d82a:	4618      	mov	r0, r3
 801d82c:	f7ff ff72 	bl	801d714 <ssd1362_writeCmd>
	ssd1362_writeCmd(y2); //End
 801d830:	883b      	ldrh	r3, [r7, #0]
 801d832:	b2db      	uxtb	r3, r3
 801d834:	4618      	mov	r0, r3
 801d836:	f7ff ff6d 	bl	801d714 <ssd1362_writeCmd>
}
 801d83a:	bf00      	nop
 801d83c:	370c      	adds	r7, #12
 801d83e:	46bd      	mov	sp, r7
 801d840:	bd90      	pop	{r4, r7, pc}

0801d842 <ssd1362_coordsToAddress>:

//Converts a pixel location to a linear memory address
uint16_t ssd1362_coordsToAddress(uint16_t x, uint16_t y)
{
 801d842:	b480      	push	{r7}
 801d844:	b083      	sub	sp, #12
 801d846:	af00      	add	r7, sp, #0
 801d848:	4603      	mov	r3, r0
 801d84a:	460a      	mov	r2, r1
 801d84c:	80fb      	strh	r3, [r7, #6]
 801d84e:	4613      	mov	r3, r2
 801d850:	80bb      	strh	r3, [r7, #4]
	return (x/2)+(y*128);
 801d852:	88fb      	ldrh	r3, [r7, #6]
 801d854:	085b      	lsrs	r3, r3, #1
 801d856:	b29a      	uxth	r2, r3
 801d858:	88bb      	ldrh	r3, [r7, #4]
 801d85a:	01db      	lsls	r3, r3, #7
 801d85c:	b29b      	uxth	r3, r3
 801d85e:	4413      	add	r3, r2
 801d860:	b29b      	uxth	r3, r3
}
 801d862:	4618      	mov	r0, r3
 801d864:	370c      	adds	r7, #12
 801d866:	46bd      	mov	sp, r7
 801d868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d86c:	4770      	bx	lr
	...

0801d870 <ssd1362_setPixelChanged>:

void ssd1362_setPixelChanged(uint16_t x, uint16_t y, bool changed)
{
 801d870:	b590      	push	{r4, r7, lr}
 801d872:	b085      	sub	sp, #20
 801d874:	af00      	add	r7, sp, #0
 801d876:	4603      	mov	r3, r0
 801d878:	80fb      	strh	r3, [r7, #6]
 801d87a:	460b      	mov	r3, r1
 801d87c:	80bb      	strh	r3, [r7, #4]
 801d87e:	4613      	mov	r3, r2
 801d880:	70fb      	strb	r3, [r7, #3]
	uint16_t targetByte = ssd1362_coordsToAddress(x, y)/8;
 801d882:	88ba      	ldrh	r2, [r7, #4]
 801d884:	88fb      	ldrh	r3, [r7, #6]
 801d886:	4611      	mov	r1, r2
 801d888:	4618      	mov	r0, r3
 801d88a:	f7ff ffda 	bl	801d842 <ssd1362_coordsToAddress>
 801d88e:	4603      	mov	r3, r0
 801d890:	08db      	lsrs	r3, r3, #3
 801d892:	81fb      	strh	r3, [r7, #14]
	bitWrite(&changedPixels[targetByte], ssd1362_coordsToAddress(x, y) % 8, changed);
 801d894:	89fb      	ldrh	r3, [r7, #14]
 801d896:	4a0b      	ldr	r2, [pc, #44]	; (801d8c4 <ssd1362_setPixelChanged+0x54>)
 801d898:	189c      	adds	r4, r3, r2
 801d89a:	88ba      	ldrh	r2, [r7, #4]
 801d89c:	88fb      	ldrh	r3, [r7, #6]
 801d89e:	4611      	mov	r1, r2
 801d8a0:	4618      	mov	r0, r3
 801d8a2:	f7ff ffce 	bl	801d842 <ssd1362_coordsToAddress>
 801d8a6:	4603      	mov	r3, r0
 801d8a8:	b2db      	uxtb	r3, r3
 801d8aa:	f003 0307 	and.w	r3, r3, #7
 801d8ae:	b2db      	uxtb	r3, r3
 801d8b0:	78fa      	ldrb	r2, [r7, #3]
 801d8b2:	4619      	mov	r1, r3
 801d8b4:	4620      	mov	r0, r4
 801d8b6:	f7ff ff53 	bl	801d760 <bitWrite>
}
 801d8ba:	bf00      	nop
 801d8bc:	3714      	adds	r7, #20
 801d8be:	46bd      	mov	sp, r7
 801d8c0:	bd90      	pop	{r4, r7, pc}
 801d8c2:	bf00      	nop
 801d8c4:	24008ea8 	.word	0x24008ea8

0801d8c8 <ssd1362_drawPixel>:

//pixel xy coordinates 0-255, color 0-15, and whether to immediately output it to the display or buffer it
void ssd1362_drawPixel(uint16_t x, uint16_t y, uint8_t color, bool display)
{
 801d8c8:	b590      	push	{r4, r7, lr}
 801d8ca:	b085      	sub	sp, #20
 801d8cc:	af00      	add	r7, sp, #0
 801d8ce:	4604      	mov	r4, r0
 801d8d0:	4608      	mov	r0, r1
 801d8d2:	4611      	mov	r1, r2
 801d8d4:	461a      	mov	r2, r3
 801d8d6:	4623      	mov	r3, r4
 801d8d8:	80fb      	strh	r3, [r7, #6]
 801d8da:	4603      	mov	r3, r0
 801d8dc:	80bb      	strh	r3, [r7, #4]
 801d8de:	460b      	mov	r3, r1
 801d8e0:	70fb      	strb	r3, [r7, #3]
 801d8e2:	4613      	mov	r3, r2
 801d8e4:	70bb      	strb	r3, [r7, #2]
	uint32_t address = ssd1362_coordsToAddress(x,y);
 801d8e6:	88ba      	ldrh	r2, [r7, #4]
 801d8e8:	88fb      	ldrh	r3, [r7, #6]
 801d8ea:	4611      	mov	r1, r2
 801d8ec:	4618      	mov	r0, r3
 801d8ee:	f7ff ffa8 	bl	801d842 <ssd1362_coordsToAddress>
 801d8f2:	4603      	mov	r3, r0
 801d8f4:	60fb      	str	r3, [r7, #12]
	if((x%2) == 0)
 801d8f6:	88fb      	ldrh	r3, [r7, #6]
 801d8f8:	f003 0301 	and.w	r3, r3, #1
 801d8fc:	b29b      	uxth	r3, r3
 801d8fe:	2b00      	cmp	r3, #0
 801d900:	d113      	bne.n	801d92a <ssd1362_drawPixel+0x62>
	{//If this is an even pixel, and therefore needs shifting to the more significant nibble
		frameBuffer[address] = (frameBuffer[address] & 0x0f) | (color<<4);
 801d902:	4a25      	ldr	r2, [pc, #148]	; (801d998 <ssd1362_drawPixel+0xd0>)
 801d904:	68fb      	ldr	r3, [r7, #12]
 801d906:	4413      	add	r3, r2
 801d908:	781b      	ldrb	r3, [r3, #0]
 801d90a:	b25b      	sxtb	r3, r3
 801d90c:	f003 030f 	and.w	r3, r3, #15
 801d910:	b25a      	sxtb	r2, r3
 801d912:	78fb      	ldrb	r3, [r7, #3]
 801d914:	011b      	lsls	r3, r3, #4
 801d916:	b25b      	sxtb	r3, r3
 801d918:	4313      	orrs	r3, r2
 801d91a:	b25b      	sxtb	r3, r3
 801d91c:	b2d9      	uxtb	r1, r3
 801d91e:	4a1e      	ldr	r2, [pc, #120]	; (801d998 <ssd1362_drawPixel+0xd0>)
 801d920:	68fb      	ldr	r3, [r7, #12]
 801d922:	4413      	add	r3, r2
 801d924:	460a      	mov	r2, r1
 801d926:	701a      	strb	r2, [r3, #0]
 801d928:	e011      	b.n	801d94e <ssd1362_drawPixel+0x86>
	} else {
		frameBuffer[address] = (frameBuffer[address] & 0xf0) | (color);
 801d92a:	4a1b      	ldr	r2, [pc, #108]	; (801d998 <ssd1362_drawPixel+0xd0>)
 801d92c:	68fb      	ldr	r3, [r7, #12]
 801d92e:	4413      	add	r3, r2
 801d930:	781b      	ldrb	r3, [r3, #0]
 801d932:	b25b      	sxtb	r3, r3
 801d934:	f023 030f 	bic.w	r3, r3, #15
 801d938:	b25a      	sxtb	r2, r3
 801d93a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801d93e:	4313      	orrs	r3, r2
 801d940:	b25b      	sxtb	r3, r3
 801d942:	b2d9      	uxtb	r1, r3
 801d944:	4a14      	ldr	r2, [pc, #80]	; (801d998 <ssd1362_drawPixel+0xd0>)
 801d946:	68fb      	ldr	r3, [r7, #12]
 801d948:	4413      	add	r3, r2
 801d94a:	460a      	mov	r2, r1
 801d94c:	701a      	strb	r2, [r3, #0]
	}

	if(display)
 801d94e:	78bb      	ldrb	r3, [r7, #2]
 801d950:	2b00      	cmp	r3, #0
 801d952:	d017      	beq.n	801d984 <ssd1362_drawPixel+0xbc>
	{
		ssd1362_setWriteZone(x/2,y,x/2,y);
 801d954:	88fb      	ldrh	r3, [r7, #6]
 801d956:	085b      	lsrs	r3, r3, #1
 801d958:	b298      	uxth	r0, r3
 801d95a:	88fb      	ldrh	r3, [r7, #6]
 801d95c:	085b      	lsrs	r3, r3, #1
 801d95e:	b29a      	uxth	r2, r3
 801d960:	88bb      	ldrh	r3, [r7, #4]
 801d962:	88b9      	ldrh	r1, [r7, #4]
 801d964:	f7ff ff40 	bl	801d7e8 <ssd1362_setWriteZone>
		ssd1362_writeData(frameBuffer[address]);
 801d968:	4a0b      	ldr	r2, [pc, #44]	; (801d998 <ssd1362_drawPixel+0xd0>)
 801d96a:	68fb      	ldr	r3, [r7, #12]
 801d96c:	4413      	add	r3, r2
 801d96e:	781b      	ldrb	r3, [r3, #0]
 801d970:	4618      	mov	r0, r3
 801d972:	f7ff fee1 	bl	801d738 <ssd1362_writeData>
		ssd1362_setPixelChanged(x, y, false); // We've now synced the display with this byte of the buffer, no need to write it again
 801d976:	88b9      	ldrh	r1, [r7, #4]
 801d978:	88fb      	ldrh	r3, [r7, #6]
 801d97a:	2200      	movs	r2, #0
 801d97c:	4618      	mov	r0, r3
 801d97e:	f7ff ff77 	bl	801d870 <ssd1362_setPixelChanged>
	} else {
		ssd1362_setPixelChanged(x, y, true); // This pixel is due for an update next refresh
	}
}
 801d982:	e005      	b.n	801d990 <ssd1362_drawPixel+0xc8>
		ssd1362_setPixelChanged(x, y, true); // This pixel is due for an update next refresh
 801d984:	88b9      	ldrh	r1, [r7, #4]
 801d986:	88fb      	ldrh	r3, [r7, #6]
 801d988:	2201      	movs	r2, #1
 801d98a:	4618      	mov	r0, r3
 801d98c:	f7ff ff70 	bl	801d870 <ssd1362_setPixelChanged>
}
 801d990:	bf00      	nop
 801d992:	3714      	adds	r7, #20
 801d994:	46bd      	mov	sp, r7
 801d996:	bd90      	pop	{r4, r7, pc}
 801d998:	240096a8 	.word	0x240096a8

0801d99c <ssd1362_drawRect>:

//Draws a rectangle from x1,y1 to x2,y2.
void ssd1362_drawRect(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t color, bool display)
{
 801d99c:	b590      	push	{r4, r7, lr}
 801d99e:	b087      	sub	sp, #28
 801d9a0:	af00      	add	r7, sp, #0
 801d9a2:	4604      	mov	r4, r0
 801d9a4:	4608      	mov	r0, r1
 801d9a6:	4611      	mov	r1, r2
 801d9a8:	461a      	mov	r2, r3
 801d9aa:	4623      	mov	r3, r4
 801d9ac:	80fb      	strh	r3, [r7, #6]
 801d9ae:	4603      	mov	r3, r0
 801d9b0:	80bb      	strh	r3, [r7, #4]
 801d9b2:	460b      	mov	r3, r1
 801d9b4:	807b      	strh	r3, [r7, #2]
 801d9b6:	4613      	mov	r3, r2
 801d9b8:	803b      	strh	r3, [r7, #0]
	uint16_t xMin = MIN(x1, x2); // TODO: double performance by writing whole bytes at a time
 801d9ba:	887a      	ldrh	r2, [r7, #2]
 801d9bc:	88fb      	ldrh	r3, [r7, #6]
 801d9be:	4293      	cmp	r3, r2
 801d9c0:	bf28      	it	cs
 801d9c2:	4613      	movcs	r3, r2
 801d9c4:	827b      	strh	r3, [r7, #18]
	uint16_t xMax = MAX(x1, x2);
 801d9c6:	887a      	ldrh	r2, [r7, #2]
 801d9c8:	88fb      	ldrh	r3, [r7, #6]
 801d9ca:	4293      	cmp	r3, r2
 801d9cc:	bf38      	it	cc
 801d9ce:	4613      	movcc	r3, r2
 801d9d0:	823b      	strh	r3, [r7, #16]
	uint16_t yMin = MIN(y1, y2);
 801d9d2:	883a      	ldrh	r2, [r7, #0]
 801d9d4:	88bb      	ldrh	r3, [r7, #4]
 801d9d6:	4293      	cmp	r3, r2
 801d9d8:	bf28      	it	cs
 801d9da:	4613      	movcs	r3, r2
 801d9dc:	81fb      	strh	r3, [r7, #14]
	uint16_t yMax = MAX(y1, y2);
 801d9de:	883a      	ldrh	r2, [r7, #0]
 801d9e0:	88bb      	ldrh	r3, [r7, #4]
 801d9e2:	4293      	cmp	r3, r2
 801d9e4:	bf38      	it	cc
 801d9e6:	4613      	movcc	r3, r2
 801d9e8:	81bb      	strh	r3, [r7, #12]
	for (uint16_t x = xMin; x < xMax; x++)
 801d9ea:	8a7b      	ldrh	r3, [r7, #18]
 801d9ec:	82fb      	strh	r3, [r7, #22]
 801d9ee:	e014      	b.n	801da1a <ssd1362_drawRect+0x7e>
	{
		for (uint16_t y = yMin; y < yMax; y++)
 801d9f0:	89fb      	ldrh	r3, [r7, #14]
 801d9f2:	82bb      	strh	r3, [r7, #20]
 801d9f4:	e00a      	b.n	801da0c <ssd1362_drawRect+0x70>
		{
			ssd1362_drawPixel(x, y, color, display);
 801d9f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801d9fa:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801d9fe:	8ab9      	ldrh	r1, [r7, #20]
 801da00:	8af8      	ldrh	r0, [r7, #22]
 801da02:	f7ff ff61 	bl	801d8c8 <ssd1362_drawPixel>
		for (uint16_t y = yMin; y < yMax; y++)
 801da06:	8abb      	ldrh	r3, [r7, #20]
 801da08:	3301      	adds	r3, #1
 801da0a:	82bb      	strh	r3, [r7, #20]
 801da0c:	8aba      	ldrh	r2, [r7, #20]
 801da0e:	89bb      	ldrh	r3, [r7, #12]
 801da10:	429a      	cmp	r2, r3
 801da12:	d3f0      	bcc.n	801d9f6 <ssd1362_drawRect+0x5a>
	for (uint16_t x = xMin; x < xMax; x++)
 801da14:	8afb      	ldrh	r3, [r7, #22]
 801da16:	3301      	adds	r3, #1
 801da18:	82fb      	strh	r3, [r7, #22]
 801da1a:	8afa      	ldrh	r2, [r7, #22]
 801da1c:	8a3b      	ldrh	r3, [r7, #16]
 801da1e:	429a      	cmp	r2, r3
 801da20:	d3e6      	bcc.n	801d9f0 <ssd1362_drawRect+0x54>
		}
	}
}
 801da22:	bf00      	nop
 801da24:	bf00      	nop
 801da26:	371c      	adds	r7, #28
 801da28:	46bd      	mov	sp, r7
 801da2a:	bd90      	pop	{r4, r7, pc}

0801da2c <ssd1362_drawHLine>:

void ssd1362_drawHLine(uint16_t x, uint16_t y, uint16_t length, uint8_t color, bool display)
	{
 801da2c:	b590      	push	{r4, r7, lr}
 801da2e:	b085      	sub	sp, #20
 801da30:	af00      	add	r7, sp, #0
 801da32:	4604      	mov	r4, r0
 801da34:	4608      	mov	r0, r1
 801da36:	4611      	mov	r1, r2
 801da38:	461a      	mov	r2, r3
 801da3a:	4623      	mov	r3, r4
 801da3c:	80fb      	strh	r3, [r7, #6]
 801da3e:	4603      	mov	r3, r0
 801da40:	80bb      	strh	r3, [r7, #4]
 801da42:	460b      	mov	r3, r1
 801da44:	807b      	strh	r3, [r7, #2]
 801da46:	4613      	mov	r3, r2
 801da48:	707b      	strb	r3, [r7, #1]
	for (uint32_t i = x; i < x+length; i++)
 801da4a:	88fb      	ldrh	r3, [r7, #6]
 801da4c:	60fb      	str	r3, [r7, #12]
 801da4e:	e00a      	b.n	801da66 <ssd1362_drawHLine+0x3a>
	{
		ssd1362_drawPixel(i, y, color, display);
 801da50:	68fb      	ldr	r3, [r7, #12]
 801da52:	b298      	uxth	r0, r3
 801da54:	f897 3020 	ldrb.w	r3, [r7, #32]
 801da58:	787a      	ldrb	r2, [r7, #1]
 801da5a:	88b9      	ldrh	r1, [r7, #4]
 801da5c:	f7ff ff34 	bl	801d8c8 <ssd1362_drawPixel>
	for (uint32_t i = x; i < x+length; i++)
 801da60:	68fb      	ldr	r3, [r7, #12]
 801da62:	3301      	adds	r3, #1
 801da64:	60fb      	str	r3, [r7, #12]
 801da66:	88fa      	ldrh	r2, [r7, #6]
 801da68:	887b      	ldrh	r3, [r7, #2]
 801da6a:	4413      	add	r3, r2
 801da6c:	461a      	mov	r2, r3
 801da6e:	68fb      	ldr	r3, [r7, #12]
 801da70:	4293      	cmp	r3, r2
 801da72:	d3ed      	bcc.n	801da50 <ssd1362_drawHLine+0x24>
	}
}
 801da74:	bf00      	nop
 801da76:	bf00      	nop
 801da78:	3714      	adds	r7, #20
 801da7a:	46bd      	mov	sp, r7
 801da7c:	bd90      	pop	{r4, r7, pc}

0801da7e <ssd1362_drawVLine>:

void ssd1362_drawVLine(uint16_t x, uint16_t y, uint16_t length, uint8_t color, bool display)
{
 801da7e:	b590      	push	{r4, r7, lr}
 801da80:	b085      	sub	sp, #20
 801da82:	af00      	add	r7, sp, #0
 801da84:	4604      	mov	r4, r0
 801da86:	4608      	mov	r0, r1
 801da88:	4611      	mov	r1, r2
 801da8a:	461a      	mov	r2, r3
 801da8c:	4623      	mov	r3, r4
 801da8e:	80fb      	strh	r3, [r7, #6]
 801da90:	4603      	mov	r3, r0
 801da92:	80bb      	strh	r3, [r7, #4]
 801da94:	460b      	mov	r3, r1
 801da96:	807b      	strh	r3, [r7, #2]
 801da98:	4613      	mov	r3, r2
 801da9a:	707b      	strb	r3, [r7, #1]
	for (uint32_t i = y; i < y+length; i++)
 801da9c:	88bb      	ldrh	r3, [r7, #4]
 801da9e:	60fb      	str	r3, [r7, #12]
 801daa0:	e00a      	b.n	801dab8 <ssd1362_drawVLine+0x3a>
	{
		ssd1362_drawPixel(x, i, color, display);
 801daa2:	68fb      	ldr	r3, [r7, #12]
 801daa4:	b299      	uxth	r1, r3
 801daa6:	f897 3020 	ldrb.w	r3, [r7, #32]
 801daaa:	787a      	ldrb	r2, [r7, #1]
 801daac:	88f8      	ldrh	r0, [r7, #6]
 801daae:	f7ff ff0b 	bl	801d8c8 <ssd1362_drawPixel>
	for (uint32_t i = y; i < y+length; i++)
 801dab2:	68fb      	ldr	r3, [r7, #12]
 801dab4:	3301      	adds	r3, #1
 801dab6:	60fb      	str	r3, [r7, #12]
 801dab8:	88ba      	ldrh	r2, [r7, #4]
 801daba:	887b      	ldrh	r3, [r7, #2]
 801dabc:	4413      	add	r3, r2
 801dabe:	461a      	mov	r2, r3
 801dac0:	68fb      	ldr	r3, [r7, #12]
 801dac2:	4293      	cmp	r3, r2
 801dac4:	d3ed      	bcc.n	801daa2 <ssd1362_drawVLine+0x24>
	}
}
 801dac6:	bf00      	nop
 801dac8:	bf00      	nop
 801daca:	3714      	adds	r7, #20
 801dacc:	46bd      	mov	sp, r7
 801dace:	bd90      	pop	{r4, r7, pc}

0801dad0 <ssd1362_drawByteAsRow>:
	}
}

//Draws a byte as an 8 pixel row
void ssd1362_drawByteAsRow(uint16_t x, uint16_t y, uint8_t byte, uint8_t color)
{
 801dad0:	b590      	push	{r4, r7, lr}
 801dad2:	b085      	sub	sp, #20
 801dad4:	af00      	add	r7, sp, #0
 801dad6:	4604      	mov	r4, r0
 801dad8:	4608      	mov	r0, r1
 801dada:	4611      	mov	r1, r2
 801dadc:	461a      	mov	r2, r3
 801dade:	4623      	mov	r3, r4
 801dae0:	80fb      	strh	r3, [r7, #6]
 801dae2:	4603      	mov	r3, r0
 801dae4:	80bb      	strh	r3, [r7, #4]
 801dae6:	460b      	mov	r3, r1
 801dae8:	70fb      	strb	r3, [r7, #3]
 801daea:	4613      	mov	r3, r2
 801daec:	70bb      	strb	r3, [r7, #2]
	for (uint32_t i = 0; i < 8; i++)
 801daee:	2300      	movs	r3, #0
 801daf0:	60fb      	str	r3, [r7, #12]
 801daf2:	e016      	b.n	801db22 <ssd1362_drawByteAsRow+0x52>
	{
		if(bitRead(&byte, i))
 801daf4:	68fb      	ldr	r3, [r7, #12]
 801daf6:	b2da      	uxtb	r2, r3
 801daf8:	1cfb      	adds	r3, r7, #3
 801dafa:	4611      	mov	r1, r2
 801dafc:	4618      	mov	r0, r3
 801dafe:	f7ff fe5d 	bl	801d7bc <bitRead>
 801db02:	4603      	mov	r3, r0
 801db04:	2b00      	cmp	r3, #0
 801db06:	d009      	beq.n	801db1c <ssd1362_drawByteAsRow+0x4c>
	{
			ssd1362_drawPixel(x+i, y, color, false);
 801db08:	68fb      	ldr	r3, [r7, #12]
 801db0a:	b29a      	uxth	r2, r3
 801db0c:	88fb      	ldrh	r3, [r7, #6]
 801db0e:	4413      	add	r3, r2
 801db10:	b298      	uxth	r0, r3
 801db12:	78ba      	ldrb	r2, [r7, #2]
 801db14:	88b9      	ldrh	r1, [r7, #4]
 801db16:	2300      	movs	r3, #0
 801db18:	f7ff fed6 	bl	801d8c8 <ssd1362_drawPixel>
	for (uint32_t i = 0; i < 8; i++)
 801db1c:	68fb      	ldr	r3, [r7, #12]
 801db1e:	3301      	adds	r3, #1
 801db20:	60fb      	str	r3, [r7, #12]
 801db22:	68fb      	ldr	r3, [r7, #12]
 801db24:	2b07      	cmp	r3, #7
 801db26:	d9e5      	bls.n	801daf4 <ssd1362_drawByteAsRow+0x24>
		}
	}
}
 801db28:	bf00      	nop
 801db2a:	bf00      	nop
 801db2c:	3714      	adds	r7, #20
 801db2e:	46bd      	mov	sp, r7
 801db30:	bd90      	pop	{r4, r7, pc}
	...

0801db34 <ssd1362_drawChar>:

void ssd1362_drawChar(uint16_t x, uint16_t y, uint8_t thisChar, uint8_t color)
{
 801db34:	b590      	push	{r4, r7, lr}
 801db36:	b085      	sub	sp, #20
 801db38:	af00      	add	r7, sp, #0
 801db3a:	4604      	mov	r4, r0
 801db3c:	4608      	mov	r0, r1
 801db3e:	4611      	mov	r1, r2
 801db40:	461a      	mov	r2, r3
 801db42:	4623      	mov	r3, r4
 801db44:	80fb      	strh	r3, [r7, #6]
 801db46:	4603      	mov	r3, r0
 801db48:	80bb      	strh	r3, [r7, #4]
 801db4a:	460b      	mov	r3, r1
 801db4c:	70fb      	strb	r3, [r7, #3]
 801db4e:	4613      	mov	r3, r2
 801db50:	70bb      	strb	r3, [r7, #2]
	for (size_t i = 0; i < 8; i++)
 801db52:	2300      	movs	r3, #0
 801db54:	60fb      	str	r3, [r7, #12]
 801db56:	e012      	b.n	801db7e <ssd1362_drawChar+0x4a>
	{
		ssd1362_drawByteAsRow(x, y+i, font8x8_basic[(unsigned char)thisChar][i], color);
 801db58:	68fb      	ldr	r3, [r7, #12]
 801db5a:	b29a      	uxth	r2, r3
 801db5c:	88bb      	ldrh	r3, [r7, #4]
 801db5e:	4413      	add	r3, r2
 801db60:	b299      	uxth	r1, r3
 801db62:	78fb      	ldrb	r3, [r7, #3]
 801db64:	4a0a      	ldr	r2, [pc, #40]	; (801db90 <ssd1362_drawChar+0x5c>)
 801db66:	00db      	lsls	r3, r3, #3
 801db68:	441a      	add	r2, r3
 801db6a:	68fb      	ldr	r3, [r7, #12]
 801db6c:	4413      	add	r3, r2
 801db6e:	781a      	ldrb	r2, [r3, #0]
 801db70:	78bb      	ldrb	r3, [r7, #2]
 801db72:	88f8      	ldrh	r0, [r7, #6]
 801db74:	f7ff ffac 	bl	801dad0 <ssd1362_drawByteAsRow>
	for (size_t i = 0; i < 8; i++)
 801db78:	68fb      	ldr	r3, [r7, #12]
 801db7a:	3301      	adds	r3, #1
 801db7c:	60fb      	str	r3, [r7, #12]
 801db7e:	68fb      	ldr	r3, [r7, #12]
 801db80:	2b07      	cmp	r3, #7
 801db82:	d9e9      	bls.n	801db58 <ssd1362_drawChar+0x24>
	}
}
 801db84:	bf00      	nop
 801db86:	bf00      	nop
 801db88:	3714      	adds	r7, #20
 801db8a:	46bd      	mov	sp, r7
 801db8c:	bd90      	pop	{r4, r7, pc}
 801db8e:	bf00      	nop
 801db90:	24003444 	.word	0x24003444

0801db94 <ssd1362_drawCharArray>:

void ssd1362_drawCharArray(uint16_t x, uint16_t y, int8_t text[], uint8_t color, uint32_t size)
{
 801db94:	b580      	push	{r7, lr}
 801db96:	b086      	sub	sp, #24
 801db98:	af00      	add	r7, sp, #0
 801db9a:	60ba      	str	r2, [r7, #8]
 801db9c:	461a      	mov	r2, r3
 801db9e:	4603      	mov	r3, r0
 801dba0:	81fb      	strh	r3, [r7, #14]
 801dba2:	460b      	mov	r3, r1
 801dba4:	81bb      	strh	r3, [r7, #12]
 801dba6:	4613      	mov	r3, r2
 801dba8:	71fb      	strb	r3, [r7, #7]
	const int8_t* thisChar;
	uint16_t xOffset = 0;
 801dbaa:	2300      	movs	r3, #0
 801dbac:	827b      	strh	r3, [r7, #18]
	if(size==16)
 801dbae:	6a3b      	ldr	r3, [r7, #32]
 801dbb0:	2b10      	cmp	r3, #16
 801dbb2:	d11a      	bne.n	801dbea <ssd1362_drawCharArray+0x56>
	{
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 801dbb4:	68bb      	ldr	r3, [r7, #8]
 801dbb6:	617b      	str	r3, [r7, #20]
 801dbb8:	e011      	b.n	801dbde <ssd1362_drawCharArray+0x4a>
		{
			ssd1362_drawChar16(x+xOffset, y, *thisChar, color);
 801dbba:	89fa      	ldrh	r2, [r7, #14]
 801dbbc:	8a7b      	ldrh	r3, [r7, #18]
 801dbbe:	4413      	add	r3, r2
 801dbc0:	b298      	uxth	r0, r3
 801dbc2:	697b      	ldr	r3, [r7, #20]
 801dbc4:	f993 3000 	ldrsb.w	r3, [r3]
 801dbc8:	b2da      	uxtb	r2, r3
 801dbca:	79fb      	ldrb	r3, [r7, #7]
 801dbcc:	89b9      	ldrh	r1, [r7, #12]
 801dbce:	f000 f861 	bl	801dc94 <ssd1362_drawChar16>
			xOffset += 8;
 801dbd2:	8a7b      	ldrh	r3, [r7, #18]
 801dbd4:	3308      	adds	r3, #8
 801dbd6:	827b      	strh	r3, [r7, #18]
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 801dbd8:	697b      	ldr	r3, [r7, #20]
 801dbda:	3301      	adds	r3, #1
 801dbdc:	617b      	str	r3, [r7, #20]
 801dbde:	697b      	ldr	r3, [r7, #20]
 801dbe0:	f993 3000 	ldrsb.w	r3, [r3]
 801dbe4:	2b00      	cmp	r3, #0
 801dbe6:	d1e8      	bne.n	801dbba <ssd1362_drawCharArray+0x26>
		{
			ssd1362_drawChar(x+xOffset, y, *thisChar, color);
			xOffset += 8;
		}
	}
}
 801dbe8:	e037      	b.n	801dc5a <ssd1362_drawCharArray+0xc6>
	} else if(size==32)
 801dbea:	6a3b      	ldr	r3, [r7, #32]
 801dbec:	2b20      	cmp	r3, #32
 801dbee:	d11a      	bne.n	801dc26 <ssd1362_drawCharArray+0x92>
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 801dbf0:	68bb      	ldr	r3, [r7, #8]
 801dbf2:	617b      	str	r3, [r7, #20]
 801dbf4:	e011      	b.n	801dc1a <ssd1362_drawCharArray+0x86>
			ssd1362_drawChar32(x+xOffset, y, *thisChar, color);
 801dbf6:	89fa      	ldrh	r2, [r7, #14]
 801dbf8:	8a7b      	ldrh	r3, [r7, #18]
 801dbfa:	4413      	add	r3, r2
 801dbfc:	b298      	uxth	r0, r3
 801dbfe:	697b      	ldr	r3, [r7, #20]
 801dc00:	f993 3000 	ldrsb.w	r3, [r3]
 801dc04:	b2da      	uxtb	r2, r3
 801dc06:	79fb      	ldrb	r3, [r7, #7]
 801dc08:	89b9      	ldrh	r1, [r7, #12]
 801dc0a:	f000 f887 	bl	801dd1c <ssd1362_drawChar32>
			xOffset += 16;
 801dc0e:	8a7b      	ldrh	r3, [r7, #18]
 801dc10:	3310      	adds	r3, #16
 801dc12:	827b      	strh	r3, [r7, #18]
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 801dc14:	697b      	ldr	r3, [r7, #20]
 801dc16:	3301      	adds	r3, #1
 801dc18:	617b      	str	r3, [r7, #20]
 801dc1a:	697b      	ldr	r3, [r7, #20]
 801dc1c:	f993 3000 	ldrsb.w	r3, [r3]
 801dc20:	2b00      	cmp	r3, #0
 801dc22:	d1e8      	bne.n	801dbf6 <ssd1362_drawCharArray+0x62>
}
 801dc24:	e019      	b.n	801dc5a <ssd1362_drawCharArray+0xc6>
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 801dc26:	68bb      	ldr	r3, [r7, #8]
 801dc28:	617b      	str	r3, [r7, #20]
 801dc2a:	e011      	b.n	801dc50 <ssd1362_drawCharArray+0xbc>
			ssd1362_drawChar(x+xOffset, y, *thisChar, color);
 801dc2c:	89fa      	ldrh	r2, [r7, #14]
 801dc2e:	8a7b      	ldrh	r3, [r7, #18]
 801dc30:	4413      	add	r3, r2
 801dc32:	b298      	uxth	r0, r3
 801dc34:	697b      	ldr	r3, [r7, #20]
 801dc36:	f993 3000 	ldrsb.w	r3, [r3]
 801dc3a:	b2da      	uxtb	r2, r3
 801dc3c:	79fb      	ldrb	r3, [r7, #7]
 801dc3e:	89b9      	ldrh	r1, [r7, #12]
 801dc40:	f7ff ff78 	bl	801db34 <ssd1362_drawChar>
			xOffset += 8;
 801dc44:	8a7b      	ldrh	r3, [r7, #18]
 801dc46:	3308      	adds	r3, #8
 801dc48:	827b      	strh	r3, [r7, #18]
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 801dc4a:	697b      	ldr	r3, [r7, #20]
 801dc4c:	3301      	adds	r3, #1
 801dc4e:	617b      	str	r3, [r7, #20]
 801dc50:	697b      	ldr	r3, [r7, #20]
 801dc52:	f993 3000 	ldrsb.w	r3, [r3]
 801dc56:	2b00      	cmp	r3, #0
 801dc58:	d1e8      	bne.n	801dc2c <ssd1362_drawCharArray+0x98>
}
 801dc5a:	bf00      	nop
 801dc5c:	3718      	adds	r7, #24
 801dc5e:	46bd      	mov	sp, r7
 801dc60:	bd80      	pop	{r7, pc}

0801dc62 <ssd1362_drawString>:

void ssd1362_drawString(uint16_t x, uint16_t y, int8_t textString[], uint8_t color, uint32_t size)
{
 801dc62:	b580      	push	{r7, lr}
 801dc64:	b086      	sub	sp, #24
 801dc66:	af02      	add	r7, sp, #8
 801dc68:	60ba      	str	r2, [r7, #8]
 801dc6a:	461a      	mov	r2, r3
 801dc6c:	4603      	mov	r3, r0
 801dc6e:	81fb      	strh	r3, [r7, #14]
 801dc70:	460b      	mov	r3, r1
 801dc72:	81bb      	strh	r3, [r7, #12]
 801dc74:	4613      	mov	r3, r2
 801dc76:	71fb      	strb	r3, [r7, #7]
//	uint8_t text[64];
//	textString.toCharArray(text, 64);
	ssd1362_drawCharArray(x,y, textString, color, size);
 801dc78:	79fa      	ldrb	r2, [r7, #7]
 801dc7a:	89b9      	ldrh	r1, [r7, #12]
 801dc7c:	89f8      	ldrh	r0, [r7, #14]
 801dc7e:	69bb      	ldr	r3, [r7, #24]
 801dc80:	9300      	str	r3, [sp, #0]
 801dc82:	4613      	mov	r3, r2
 801dc84:	68ba      	ldr	r2, [r7, #8]
 801dc86:	f7ff ff85 	bl	801db94 <ssd1362_drawCharArray>
}
 801dc8a:	bf00      	nop
 801dc8c:	3710      	adds	r7, #16
 801dc8e:	46bd      	mov	sp, r7
 801dc90:	bd80      	pop	{r7, pc}
	...

0801dc94 <ssd1362_drawChar16>:

void ssd1362_drawChar16(uint16_t x, uint16_t y, uint8_t thisChar, uint8_t color)
{
 801dc94:	b590      	push	{r4, r7, lr}
 801dc96:	b085      	sub	sp, #20
 801dc98:	af00      	add	r7, sp, #0
 801dc9a:	4604      	mov	r4, r0
 801dc9c:	4608      	mov	r0, r1
 801dc9e:	4611      	mov	r1, r2
 801dca0:	461a      	mov	r2, r3
 801dca2:	4623      	mov	r3, r4
 801dca4:	80fb      	strh	r3, [r7, #6]
 801dca6:	4603      	mov	r3, r0
 801dca8:	80bb      	strh	r3, [r7, #4]
 801dcaa:	460b      	mov	r3, r1
 801dcac:	70fb      	strb	r3, [r7, #3]
 801dcae:	4613      	mov	r3, r2
 801dcb0:	70bb      	strb	r3, [r7, #2]
	for (size_t row = 0; row < 16; row++) {
 801dcb2:	2300      	movs	r3, #0
 801dcb4:	60fb      	str	r3, [r7, #12]
 801dcb6:	e027      	b.n	801dd08 <ssd1362_drawChar16+0x74>
		ssd1362_drawByteAsRow(x, y+row, font16x16[(unsigned char)thisChar][row*2], color);
 801dcb8:	68fb      	ldr	r3, [r7, #12]
 801dcba:	b29a      	uxth	r2, r3
 801dcbc:	88bb      	ldrh	r3, [r7, #4]
 801dcbe:	4413      	add	r3, r2
 801dcc0:	b299      	uxth	r1, r3
 801dcc2:	78fa      	ldrb	r2, [r7, #3]
 801dcc4:	68fb      	ldr	r3, [r7, #12]
 801dcc6:	005b      	lsls	r3, r3, #1
 801dcc8:	4813      	ldr	r0, [pc, #76]	; (801dd18 <ssd1362_drawChar16+0x84>)
 801dcca:	0152      	lsls	r2, r2, #5
 801dccc:	4402      	add	r2, r0
 801dcce:	4413      	add	r3, r2
 801dcd0:	781a      	ldrb	r2, [r3, #0]
 801dcd2:	78bb      	ldrb	r3, [r7, #2]
 801dcd4:	88f8      	ldrh	r0, [r7, #6]
 801dcd6:	f7ff fefb 	bl	801dad0 <ssd1362_drawByteAsRow>
		ssd1362_drawByteAsRow(x+8, y+row, font16x16[(unsigned char)thisChar][(row*2)+1], color);
 801dcda:	88fb      	ldrh	r3, [r7, #6]
 801dcdc:	3308      	adds	r3, #8
 801dcde:	b298      	uxth	r0, r3
 801dce0:	68fb      	ldr	r3, [r7, #12]
 801dce2:	b29a      	uxth	r2, r3
 801dce4:	88bb      	ldrh	r3, [r7, #4]
 801dce6:	4413      	add	r3, r2
 801dce8:	b299      	uxth	r1, r3
 801dcea:	78fa      	ldrb	r2, [r7, #3]
 801dcec:	68fb      	ldr	r3, [r7, #12]
 801dcee:	005b      	lsls	r3, r3, #1
 801dcf0:	3301      	adds	r3, #1
 801dcf2:	4c09      	ldr	r4, [pc, #36]	; (801dd18 <ssd1362_drawChar16+0x84>)
 801dcf4:	0152      	lsls	r2, r2, #5
 801dcf6:	4422      	add	r2, r4
 801dcf8:	4413      	add	r3, r2
 801dcfa:	781a      	ldrb	r2, [r3, #0]
 801dcfc:	78bb      	ldrb	r3, [r7, #2]
 801dcfe:	f7ff fee7 	bl	801dad0 <ssd1362_drawByteAsRow>
	for (size_t row = 0; row < 16; row++) {
 801dd02:	68fb      	ldr	r3, [r7, #12]
 801dd04:	3301      	adds	r3, #1
 801dd06:	60fb      	str	r3, [r7, #12]
 801dd08:	68fb      	ldr	r3, [r7, #12]
 801dd0a:	2b0f      	cmp	r3, #15
 801dd0c:	d9d4      	bls.n	801dcb8 <ssd1362_drawChar16+0x24>
	}
}
 801dd0e:	bf00      	nop
 801dd10:	bf00      	nop
 801dd12:	3714      	adds	r7, #20
 801dd14:	46bd      	mov	sp, r7
 801dd16:	bd90      	pop	{r4, r7, pc}
 801dd18:	24000444 	.word	0x24000444

0801dd1c <ssd1362_drawChar32>:

void ssd1362_drawChar32(uint16_t x, uint16_t y, uint8_t thisChar, uint8_t color)
{
 801dd1c:	b590      	push	{r4, r7, lr}
 801dd1e:	b085      	sub	sp, #20
 801dd20:	af00      	add	r7, sp, #0
 801dd22:	4604      	mov	r4, r0
 801dd24:	4608      	mov	r0, r1
 801dd26:	4611      	mov	r1, r2
 801dd28:	461a      	mov	r2, r3
 801dd2a:	4623      	mov	r3, r4
 801dd2c:	80fb      	strh	r3, [r7, #6]
 801dd2e:	4603      	mov	r3, r0
 801dd30:	80bb      	strh	r3, [r7, #4]
 801dd32:	460b      	mov	r3, r1
 801dd34:	70fb      	strb	r3, [r7, #3]
 801dd36:	4613      	mov	r3, r2
 801dd38:	70bb      	strb	r3, [r7, #2]
	for (size_t row = 0; row < 32; row++) {
 801dd3a:	2300      	movs	r3, #0
 801dd3c:	60fb      	str	r3, [r7, #12]
 801dd3e:	e027      	b.n	801dd90 <ssd1362_drawChar32+0x74>
		ssd1362_drawByteAsRow(x, y+row, font16x32[(unsigned char)thisChar][row*2], color);
 801dd40:	68fb      	ldr	r3, [r7, #12]
 801dd42:	b29a      	uxth	r2, r3
 801dd44:	88bb      	ldrh	r3, [r7, #4]
 801dd46:	4413      	add	r3, r2
 801dd48:	b299      	uxth	r1, r3
 801dd4a:	78fa      	ldrb	r2, [r7, #3]
 801dd4c:	68fb      	ldr	r3, [r7, #12]
 801dd4e:	005b      	lsls	r3, r3, #1
 801dd50:	4813      	ldr	r0, [pc, #76]	; (801dda0 <ssd1362_drawChar32+0x84>)
 801dd52:	0192      	lsls	r2, r2, #6
 801dd54:	4402      	add	r2, r0
 801dd56:	4413      	add	r3, r2
 801dd58:	781a      	ldrb	r2, [r3, #0]
 801dd5a:	78bb      	ldrb	r3, [r7, #2]
 801dd5c:	88f8      	ldrh	r0, [r7, #6]
 801dd5e:	f7ff feb7 	bl	801dad0 <ssd1362_drawByteAsRow>
		ssd1362_drawByteAsRow(x+8, y+row, font16x32[(unsigned char)thisChar][(row*2)+1], color);
 801dd62:	88fb      	ldrh	r3, [r7, #6]
 801dd64:	3308      	adds	r3, #8
 801dd66:	b298      	uxth	r0, r3
 801dd68:	68fb      	ldr	r3, [r7, #12]
 801dd6a:	b29a      	uxth	r2, r3
 801dd6c:	88bb      	ldrh	r3, [r7, #4]
 801dd6e:	4413      	add	r3, r2
 801dd70:	b299      	uxth	r1, r3
 801dd72:	78fa      	ldrb	r2, [r7, #3]
 801dd74:	68fb      	ldr	r3, [r7, #12]
 801dd76:	005b      	lsls	r3, r3, #1
 801dd78:	3301      	adds	r3, #1
 801dd7a:	4c09      	ldr	r4, [pc, #36]	; (801dda0 <ssd1362_drawChar32+0x84>)
 801dd7c:	0192      	lsls	r2, r2, #6
 801dd7e:	4422      	add	r2, r4
 801dd80:	4413      	add	r3, r2
 801dd82:	781a      	ldrb	r2, [r3, #0]
 801dd84:	78bb      	ldrb	r3, [r7, #2]
 801dd86:	f7ff fea3 	bl	801dad0 <ssd1362_drawByteAsRow>
	for (size_t row = 0; row < 32; row++) {
 801dd8a:	68fb      	ldr	r3, [r7, #12]
 801dd8c:	3301      	adds	r3, #1
 801dd8e:	60fb      	str	r3, [r7, #12]
 801dd90:	68fb      	ldr	r3, [r7, #12]
 801dd92:	2b1f      	cmp	r3, #31
 801dd94:	d9d4      	bls.n	801dd40 <ssd1362_drawChar32+0x24>
	}
}
 801dd96:	bf00      	nop
 801dd98:	bf00      	nop
 801dd9a:	3714      	adds	r7, #20
 801dd9c:	46bd      	mov	sp, r7
 801dd9e:	bd90      	pop	{r4, r7, pc}
 801dda0:	24001444 	.word	0x24001444

0801dda4 <ssd1362_clearBuffer>:
	HAL_Delay(15);
	ssd1362_stopScrolling();
}

void ssd1362_clearBuffer()
{
 801dda4:	b580      	push	{r7, lr}
 801dda6:	b082      	sub	sp, #8
 801dda8:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < ((SSD1362_HEIGHT * SSD1362_WIDTH) / 2); i++)
 801ddaa:	2300      	movs	r3, #0
 801ddac:	607b      	str	r3, [r7, #4]
 801ddae:	e01a      	b.n	801dde6 <ssd1362_clearBuffer+0x42>
	{
		// If there is a non-zero (non-black) byte here, make sure it gets updated
		if (frameBuffer[i])
 801ddb0:	4a11      	ldr	r2, [pc, #68]	; (801ddf8 <ssd1362_clearBuffer+0x54>)
 801ddb2:	687b      	ldr	r3, [r7, #4]
 801ddb4:	4413      	add	r3, r2
 801ddb6:	781b      	ldrb	r3, [r3, #0]
 801ddb8:	2b00      	cmp	r3, #0
 801ddba:	d011      	beq.n	801dde0 <ssd1362_clearBuffer+0x3c>
		{
			frameBuffer[i] = 0;
 801ddbc:	4a0e      	ldr	r2, [pc, #56]	; (801ddf8 <ssd1362_clearBuffer+0x54>)
 801ddbe:	687b      	ldr	r3, [r7, #4]
 801ddc0:	4413      	add	r3, r2
 801ddc2:	2200      	movs	r2, #0
 801ddc4:	701a      	strb	r2, [r3, #0]
			bitWrite(&changedPixels[i/8], i%8, 1); // Mark this pixel as needing an update
 801ddc6:	687b      	ldr	r3, [r7, #4]
 801ddc8:	08db      	lsrs	r3, r3, #3
 801ddca:	4a0c      	ldr	r2, [pc, #48]	; (801ddfc <ssd1362_clearBuffer+0x58>)
 801ddcc:	1898      	adds	r0, r3, r2
 801ddce:	687b      	ldr	r3, [r7, #4]
 801ddd0:	b2db      	uxtb	r3, r3
 801ddd2:	f003 0307 	and.w	r3, r3, #7
 801ddd6:	b2db      	uxtb	r3, r3
 801ddd8:	2201      	movs	r2, #1
 801ddda:	4619      	mov	r1, r3
 801dddc:	f7ff fcc0 	bl	801d760 <bitWrite>
	for (uint32_t i = 0; i < ((SSD1362_HEIGHT * SSD1362_WIDTH) / 2); i++)
 801dde0:	687b      	ldr	r3, [r7, #4]
 801dde2:	3301      	adds	r3, #1
 801dde4:	607b      	str	r3, [r7, #4]
 801dde6:	687b      	ldr	r3, [r7, #4]
 801dde8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801ddec:	d3e0      	bcc.n	801ddb0 <ssd1362_clearBuffer+0xc>
		}
	}
}
 801ddee:	bf00      	nop
 801ddf0:	bf00      	nop
 801ddf2:	3708      	adds	r7, #8
 801ddf4:	46bd      	mov	sp, r7
 801ddf6:	bd80      	pop	{r7, pc}
 801ddf8:	240096a8 	.word	0x240096a8
 801ddfc:	24008ea8 	.word	0x24008ea8

0801de00 <ssd1362_writeFullBuffer>:

//Outputs the full framebuffer to the display
void ssd1362_writeFullBuffer()
{
 801de00:	b580      	push	{r7, lr}
 801de02:	b082      	sub	sp, #8
 801de04:	af00      	add	r7, sp, #0
	ssd1362_setWriteZone(0, 0, (SSD1362_WIDTH / 2) - 1, SSD1362_HEIGHT - 1); //Full display
 801de06:	233f      	movs	r3, #63	; 0x3f
 801de08:	227f      	movs	r2, #127	; 0x7f
 801de0a:	2100      	movs	r1, #0
 801de0c:	2000      	movs	r0, #0
 801de0e:	f7ff fceb 	bl	801d7e8 <ssd1362_setWriteZone>
	for(uint32_t i = 0; i < ((SSD1362_HEIGHT * SSD1362_WIDTH) / 2); i++)
 801de12:	2300      	movs	r3, #0
 801de14:	607b      	str	r3, [r7, #4]
 801de16:	e009      	b.n	801de2c <ssd1362_writeFullBuffer+0x2c>
	{
		ssd1362_writeData(frameBuffer[i]);
 801de18:	4a10      	ldr	r2, [pc, #64]	; (801de5c <ssd1362_writeFullBuffer+0x5c>)
 801de1a:	687b      	ldr	r3, [r7, #4]
 801de1c:	4413      	add	r3, r2
 801de1e:	781b      	ldrb	r3, [r3, #0]
 801de20:	4618      	mov	r0, r3
 801de22:	f7ff fc89 	bl	801d738 <ssd1362_writeData>
	for(uint32_t i = 0; i < ((SSD1362_HEIGHT * SSD1362_WIDTH) / 2); i++)
 801de26:	687b      	ldr	r3, [r7, #4]
 801de28:	3301      	adds	r3, #1
 801de2a:	607b      	str	r3, [r7, #4]
 801de2c:	687b      	ldr	r3, [r7, #4]
 801de2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801de32:	d3f1      	bcc.n	801de18 <ssd1362_writeFullBuffer+0x18>
	}
	for (uint32_t i = 0; i < 1024; i++)
 801de34:	2300      	movs	r3, #0
 801de36:	603b      	str	r3, [r7, #0]
 801de38:	e007      	b.n	801de4a <ssd1362_writeFullBuffer+0x4a>
	{
		changedPixels[i] = 0; // Set all pixels as up to date.
 801de3a:	4a09      	ldr	r2, [pc, #36]	; (801de60 <ssd1362_writeFullBuffer+0x60>)
 801de3c:	683b      	ldr	r3, [r7, #0]
 801de3e:	4413      	add	r3, r2
 801de40:	2200      	movs	r2, #0
 801de42:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < 1024; i++)
 801de44:	683b      	ldr	r3, [r7, #0]
 801de46:	3301      	adds	r3, #1
 801de48:	603b      	str	r3, [r7, #0]
 801de4a:	683b      	ldr	r3, [r7, #0]
 801de4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801de50:	d3f3      	bcc.n	801de3a <ssd1362_writeFullBuffer+0x3a>
	}
}
 801de52:	bf00      	nop
 801de54:	bf00      	nop
 801de56:	3708      	adds	r7, #8
 801de58:	46bd      	mov	sp, r7
 801de5a:	bd80      	pop	{r7, pc}
 801de5c:	240096a8 	.word	0x240096a8
 801de60:	24008ea8 	.word	0x24008ea8

0801de64 <ssd1362_init>:
	ssd1362_writeCmd(contrast);  //Contrast byte
}

//Sends all the boilerplate startup and config commands to the driver
void ssd1362_init()
{
 801de64:	b580      	push	{r7, lr}
 801de66:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1362_Reset();
 801de68:	f7ff fc3c 	bl	801d6e4 <ssd1362_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 801de6c:	2064      	movs	r0, #100	; 0x64
 801de6e:	f7e6 f8d3 	bl	8004018 <HAL_Delay>

    // Init OLED
    ssd1362_writeCmd(0XFD); //Set Command Lock
 801de72:	20fd      	movs	r0, #253	; 0xfd
 801de74:	f7ff fc4e 	bl	801d714 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X12); //(12H=Unlock,16H=Lock)
 801de78:	2012      	movs	r0, #18
 801de7a:	f7ff fc4b 	bl	801d714 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XAE); //Display OFF(Sleep Mode)
 801de7e:	20ae      	movs	r0, #174	; 0xae
 801de80:	f7ff fc48 	bl	801d714 <ssd1362_writeCmd>

    ssd1362_writeCmd(0X15); //Set column Address
 801de84:	2015      	movs	r0, #21
 801de86:	f7ff fc45 	bl	801d714 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X00); //Start column Address
 801de8a:	2000      	movs	r0, #0
 801de8c:	f7ff fc42 	bl	801d714 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X7F); //End column Address
 801de90:	207f      	movs	r0, #127	; 0x7f
 801de92:	f7ff fc3f 	bl	801d714 <ssd1362_writeCmd>

    ssd1362_writeCmd(0X75); //Set Row Address
 801de96:	2075      	movs	r0, #117	; 0x75
 801de98:	f7ff fc3c 	bl	801d714 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X00); //Start Row Address
 801de9c:	2000      	movs	r0, #0
 801de9e:	f7ff fc39 	bl	801d714 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X3F); //End Row Address
 801dea2:	203f      	movs	r0, #63	; 0x3f
 801dea4:	f7ff fc36 	bl	801d714 <ssd1362_writeCmd>

    ssd1362_writeCmd(0X81); //Set contrast
 801dea8:	2081      	movs	r0, #129	; 0x81
 801deaa:	f7ff fc33 	bl	801d714 <ssd1362_writeCmd>
    ssd1362_writeCmd(0x2f);
 801deae:	202f      	movs	r0, #47	; 0x2f
 801deb0:	f7ff fc30 	bl	801d714 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA0); //Set Remap
 801deb4:	20a0      	movs	r0, #160	; 0xa0
 801deb6:	f7ff fc2d 	bl	801d714 <ssd1362_writeCmd>
    ssd1362_writeCmd(0XC3);
 801deba:	20c3      	movs	r0, #195	; 0xc3
 801debc:	f7ff fc2a 	bl	801d714 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA1); //Set Display Start Line
 801dec0:	20a1      	movs	r0, #161	; 0xa1
 801dec2:	f7ff fc27 	bl	801d714 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X00);
 801dec6:	2000      	movs	r0, #0
 801dec8:	f7ff fc24 	bl	801d714 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA2); //Set Display Offset
 801decc:	20a2      	movs	r0, #162	; 0xa2
 801dece:	f7ff fc21 	bl	801d714 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X00);
 801ded2:	2000      	movs	r0, #0
 801ded4:	f7ff fc1e 	bl	801d714 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA4); //Normal Display
 801ded8:	20a4      	movs	r0, #164	; 0xa4
 801deda:	f7ff fc1b 	bl	801d714 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA8); //Set Multiplex Ratio
 801dede:	20a8      	movs	r0, #168	; 0xa8
 801dee0:	f7ff fc18 	bl	801d714 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X3F);
 801dee4:	203f      	movs	r0, #63	; 0x3f
 801dee6:	f7ff fc15 	bl	801d714 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XAB); //Set VDD regulator
 801deea:	20ab      	movs	r0, #171	; 0xab
 801deec:	f7ff fc12 	bl	801d714 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X01); //Regulator Enable
 801def0:	2001      	movs	r0, #1
 801def2:	f7ff fc0f 	bl	801d714 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XAD); //External /Internal IREF Selection
 801def6:	20ad      	movs	r0, #173	; 0xad
 801def8:	f7ff fc0c 	bl	801d714 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X8E);
 801defc:	208e      	movs	r0, #142	; 0x8e
 801defe:	f7ff fc09 	bl	801d714 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XB1); //Set Phase Length
 801df02:	20b1      	movs	r0, #177	; 0xb1
 801df04:	f7ff fc06 	bl	801d714 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X22);
 801df08:	2022      	movs	r0, #34	; 0x22
 801df0a:	f7ff fc03 	bl	801d714 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XB3); //Display clock Divider
 801df0e:	20b3      	movs	r0, #179	; 0xb3
 801df10:	f7ff fc00 	bl	801d714 <ssd1362_writeCmd>
    ssd1362_writeCmd(0XA0);
 801df14:	20a0      	movs	r0, #160	; 0xa0
 801df16:	f7ff fbfd 	bl	801d714 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XB6); //Set Second pre-charge Period
 801df1a:	20b6      	movs	r0, #182	; 0xb6
 801df1c:	f7ff fbfa 	bl	801d714 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X04);
 801df20:	2004      	movs	r0, #4
 801df22:	f7ff fbf7 	bl	801d714 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XB9); //Set Linear LUT
 801df26:	20b9      	movs	r0, #185	; 0xb9
 801df28:	f7ff fbf4 	bl	801d714 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XBc); //Set pre-charge voltage level
 801df2c:	20bc      	movs	r0, #188	; 0xbc
 801df2e:	f7ff fbf1 	bl	801d714 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X10); //0.5*Vcc
 801df32:	2010      	movs	r0, #16
 801df34:	f7ff fbee 	bl	801d714 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XBD); //Pre-charge voltage capacitor Selection
 801df38:	20bd      	movs	r0, #189	; 0xbd
 801df3a:	f7ff fbeb 	bl	801d714 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X01);
 801df3e:	2001      	movs	r0, #1
 801df40:	f7ff fbe8 	bl	801d714 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XBE); //Set COM deselect voltage level
 801df44:	20be      	movs	r0, #190	; 0xbe
 801df46:	f7ff fbe5 	bl	801d714 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X07); //0.82*Vcc
 801df4a:	2007      	movs	r0, #7
 801df4c:	f7ff fbe2 	bl	801d714 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XAF); //Display ON
 801df50:	20af      	movs	r0, #175	; 0xaf
 801df52:	f7ff fbdf 	bl	801d714 <ssd1362_writeCmd>
}
 801df56:	bf00      	nop
 801df58:	bd80      	pop	{r7, pc}
	...

0801df5c <D16_GENERIC>:
 801df5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df60:	b089      	sub	sp, #36	; 0x24
 801df62:	6993      	ldr	r3, [r2, #24]
 801df64:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 801df66:	9103      	str	r1, [sp, #12]
 801df68:	9307      	str	r3, [sp, #28]
 801df6a:	69d3      	ldr	r3, [r2, #28]
 801df6c:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 801df70:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 801df74:	9106      	str	r1, [sp, #24]
 801df76:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	; 0x30
 801df7a:	2d00      	cmp	r5, #0
 801df7c:	d063      	beq.n	801e046 <D16_GENERIC+0xea>
 801df7e:	f001 0520 	and.w	r5, r1, #32
 801df82:	f001 0110 	and.w	r1, r1, #16
 801df86:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 801e068 <D16_GENERIC+0x10c>
 801df8a:	46c1      	mov	r9, r8
 801df8c:	9104      	str	r1, [sp, #16]
 801df8e:	2100      	movs	r1, #0
 801df90:	9505      	str	r5, [sp, #20]
 801df92:	e04d      	b.n	801e030 <D16_GENERIC+0xd4>
 801df94:	5d87      	ldrb	r7, [r0, r6]
 801df96:	7805      	ldrb	r5, [r0, #0]
 801df98:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 801df9c:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 801dfa0:	b2fe      	uxtb	r6, r7
 801dfa2:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801dfa6:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 801dfaa:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 801dfae:	441d      	add	r5, r3
 801dfb0:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 801dfb4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801dfb8:	f3c3 0609 	ubfx	r6, r3, #0, #10
 801dfbc:	0a9b      	lsrs	r3, r3, #10
 801dfbe:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 801dfc2:	4d27      	ldr	r5, [pc, #156]	; (801e060 <D16_GENERIC+0x104>)
 801dfc4:	fb26 c505 	smlad	r5, r6, r5, ip
 801dfc8:	4f26      	ldr	r7, [pc, #152]	; (801e064 <D16_GENERIC+0x108>)
 801dfca:	fb26 fc07 	smuad	ip, r6, r7
 801dfce:	9e04      	ldr	r6, [sp, #16]
 801dfd0:	f101 0801 	add.w	r8, r1, #1
 801dfd4:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 801dfd8:	b1ae      	cbz	r6, 801e006 <D16_GENERIC+0xaa>
 801dfda:	442c      	add	r4, r5
 801dfdc:	f8d2 b020 	ldr.w	fp, [r2, #32]
 801dfe0:	eba4 040a 	sub.w	r4, r4, sl
 801dfe4:	46aa      	mov	sl, r5
 801dfe6:	17e7      	asrs	r7, r4, #31
 801dfe8:	fba4 450b 	umull	r4, r5, r4, fp
 801dfec:	e9cd 4500 	strd	r4, r5, [sp]
 801dff0:	fb0b 5407 	mla	r4, fp, r7, r5
 801dff4:	9401      	str	r4, [sp, #4]
 801dff6:	e9dd 4500 	ldrd	r4, r5, [sp]
 801dffa:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 801dffe:	f145 0500 	adc.w	r5, r5, #0
 801e002:	006c      	lsls	r4, r5, #1
 801e004:	4625      	mov	r5, r4
 801e006:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 801e00a:	042d      	lsls	r5, r5, #16
 801e00c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801e010:	2700      	movs	r7, #0
 801e012:	fb01 fb0b 	mul.w	fp, r1, fp
 801e016:	fa1f f188 	uxth.w	r1, r8
 801e01a:	fbc9 6705 	smlal	r6, r7, r9, r5
 801e01e:	9e03      	ldr	r6, [sp, #12]
 801e020:	10bd      	asrs	r5, r7, #2
 801e022:	f305 050f 	ssat	r5, #16, r5
 801e026:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 801e02a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 801e02c:	428d      	cmp	r5, r1
 801e02e:	d90a      	bls.n	801e046 <D16_GENERIC+0xea>
 801e030:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 801e032:	2d01      	cmp	r5, #1
 801e034:	b2ee      	uxtb	r6, r5
 801e036:	d1ad      	bne.n	801df94 <D16_GENERIC+0x38>
 801e038:	9d05      	ldr	r5, [sp, #20]
 801e03a:	f850 7b02 	ldr.w	r7, [r0], #2
 801e03e:	2d00      	cmp	r5, #0
 801e040:	d0ae      	beq.n	801dfa0 <D16_GENERIC+0x44>
 801e042:	ba7f      	rev16	r7, r7
 801e044:	e7ac      	b.n	801dfa0 <D16_GENERIC+0x44>
 801e046:	2000      	movs	r0, #0
 801e048:	9906      	ldr	r1, [sp, #24]
 801e04a:	61d3      	str	r3, [r2, #28]
 801e04c:	9b07      	ldr	r3, [sp, #28]
 801e04e:	f8c2 c008 	str.w	ip, [r2, #8]
 801e052:	60d1      	str	r1, [r2, #12]
 801e054:	6193      	str	r3, [r2, #24]
 801e056:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 801e05a:	b009      	add	sp, #36	; 0x24
 801e05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e060:	00030001 	.word	0x00030001
 801e064:	00010003 	.word	0x00010003
 801e068:	24000000 	.word	0x24000000

0801e06c <D24_GENERIC>:
 801e06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e070:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 801e074:	b089      	sub	sp, #36	; 0x24
 801e076:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 801e078:	9303      	str	r3, [sp, #12]
 801e07a:	6993      	ldr	r3, [r2, #24]
 801e07c:	9104      	str	r1, [sp, #16]
 801e07e:	9307      	str	r3, [sp, #28]
 801e080:	69d1      	ldr	r1, [r2, #28]
 801e082:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 801e086:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	; 0x30
 801e08a:	2e00      	cmp	r6, #0
 801e08c:	f000 8088 	beq.w	801e1a0 <D24_GENERIC+0x134>
 801e090:	f005 0620 	and.w	r6, r5, #32
 801e094:	f005 0510 	and.w	r5, r5, #16
 801e098:	f04f 0c00 	mov.w	ip, #0
 801e09c:	f8df e140 	ldr.w	lr, [pc, #320]	; 801e1e0 <D24_GENERIC+0x174>
 801e0a0:	9606      	str	r6, [sp, #24]
 801e0a2:	9505      	str	r5, [sp, #20]
 801e0a4:	e064      	b.n	801e170 <D24_GENERIC+0x104>
 801e0a6:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 801e0aa:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801e0ae:	f810 b007 	ldrb.w	fp, [r0, r7]
 801e0b2:	042d      	lsls	r5, r5, #16
 801e0b4:	19f0      	adds	r0, r6, r7
 801e0b6:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 801e0ba:	44a9      	add	r9, r5
 801e0bc:	fa5f f689 	uxtb.w	r6, r9
 801e0c0:	f3c9 2707 	ubfx	r7, r9, #8, #8
 801e0c4:	ea4f 4919 	mov.w	r9, r9, lsr #16
 801e0c8:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 801e0cc:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 801e0d0:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 801e0d4:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 801e0d8:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 801e0dc:	f3c6 0609 	ubfx	r6, r6, #0, #10
 801e0e0:	f3c7 0509 	ubfx	r5, r7, #0, #10
 801e0e4:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 801e0e8:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 801e0ec:	4d3a      	ldr	r5, [pc, #232]	; (801e1d8 <D24_GENERIC+0x16c>)
 801e0ee:	fb26 8705 	smlad	r7, r6, r5, r8
 801e0f2:	4d3a      	ldr	r5, [pc, #232]	; (801e1dc <D24_GENERIC+0x170>)
 801e0f4:	fb26 3805 	smlad	r8, r6, r5, r3
 801e0f8:	f3c1 0309 	ubfx	r3, r1, #0, #10
 801e0fc:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 801e100:	2301      	movs	r3, #1
 801e102:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 801e106:	fb26 f603 	smuad	r6, r6, r3
 801e10a:	eb0c 0903 	add.w	r9, ip, r3
 801e10e:	eb0b 0306 	add.w	r3, fp, r6
 801e112:	9e05      	ldr	r6, [sp, #20]
 801e114:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 801e118:	b1ae      	cbz	r6, 801e146 <D24_GENERIC+0xda>
 801e11a:	442c      	add	r4, r5
 801e11c:	9e03      	ldr	r6, [sp, #12]
 801e11e:	f8d2 b020 	ldr.w	fp, [r2, #32]
 801e122:	1ba4      	subs	r4, r4, r6
 801e124:	9503      	str	r5, [sp, #12]
 801e126:	17e7      	asrs	r7, r4, #31
 801e128:	fba4 450b 	umull	r4, r5, r4, fp
 801e12c:	e9cd 4500 	strd	r4, r5, [sp]
 801e130:	fb0b 5407 	mla	r4, fp, r7, r5
 801e134:	9401      	str	r4, [sp, #4]
 801e136:	e9dd 4500 	ldrd	r4, r5, [sp]
 801e13a:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 801e13e:	f145 0500 	adc.w	r5, r5, #0
 801e142:	006c      	lsls	r4, r5, #1
 801e144:	4625      	mov	r5, r4
 801e146:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 801e14a:	03ad      	lsls	r5, r5, #14
 801e14c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801e150:	2700      	movs	r7, #0
 801e152:	fb0c fb0b 	mul.w	fp, ip, fp
 801e156:	fa1f fc89 	uxth.w	ip, r9
 801e15a:	fbca 6705 	smlal	r6, r7, sl, r5
 801e15e:	9e04      	ldr	r6, [sp, #16]
 801e160:	10bd      	asrs	r5, r7, #2
 801e162:	f305 050f 	ssat	r5, #16, r5
 801e166:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 801e16a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 801e16c:	4565      	cmp	r5, ip
 801e16e:	d917      	bls.n	801e1a0 <D24_GENERIC+0x134>
 801e170:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 801e172:	f890 9000 	ldrb.w	r9, [r0]
 801e176:	b2ef      	uxtb	r7, r5
 801e178:	2d01      	cmp	r5, #1
 801e17a:	b23e      	sxth	r6, r7
 801e17c:	d193      	bne.n	801e0a6 <D24_GENERIC+0x3a>
 801e17e:	9d06      	ldr	r5, [sp, #24]
 801e180:	b1dd      	cbz	r5, 801e1ba <D24_GENERIC+0x14e>
 801e182:	78c7      	ldrb	r7, [r0, #3]
 801e184:	ea4f 2609 	mov.w	r6, r9, lsl #8
 801e188:	f01c 0f01 	tst.w	ip, #1
 801e18c:	ea4f 2507 	mov.w	r5, r7, lsl #8
 801e190:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 801e194:	d11a      	bne.n	801e1cc <D24_GENERIC+0x160>
 801e196:	f890 9001 	ldrb.w	r9, [r0, #1]
 801e19a:	3002      	adds	r0, #2
 801e19c:	44b1      	add	r9, r6
 801e19e:	e78d      	b.n	801e0bc <D24_GENERIC+0x50>
 801e1a0:	6093      	str	r3, [r2, #8]
 801e1a2:	2000      	movs	r0, #0
 801e1a4:	9b03      	ldr	r3, [sp, #12]
 801e1a6:	f8c2 800c 	str.w	r8, [r2, #12]
 801e1aa:	6153      	str	r3, [r2, #20]
 801e1ac:	9b07      	ldr	r3, [sp, #28]
 801e1ae:	61d1      	str	r1, [r2, #28]
 801e1b0:	6114      	str	r4, [r2, #16]
 801e1b2:	6193      	str	r3, [r2, #24]
 801e1b4:	b009      	add	sp, #36	; 0x24
 801e1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e1ba:	7845      	ldrb	r5, [r0, #1]
 801e1bc:	3003      	adds	r0, #3
 801e1be:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 801e1c2:	022d      	lsls	r5, r5, #8
 801e1c4:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 801e1c8:	44a9      	add	r9, r5
 801e1ca:	e777      	b.n	801e0bc <D24_GENERIC+0x50>
 801e1cc:	7886      	ldrb	r6, [r0, #2]
 801e1ce:	3004      	adds	r0, #4
 801e1d0:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 801e1d4:	44a9      	add	r9, r5
 801e1d6:	e771      	b.n	801e0bc <D24_GENERIC+0x50>
 801e1d8:	00030001 	.word	0x00030001
 801e1dc:	00060007 	.word	0x00060007
 801e1e0:	24000000 	.word	0x24000000

0801e1e4 <D32_GENERIC>:
 801e1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1e8:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 801e1ec:	b089      	sub	sp, #36	; 0x24
 801e1ee:	6b15      	ldr	r5, [r2, #48]	; 0x30
 801e1f0:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 801e1f2:	9302      	str	r3, [sp, #8]
 801e1f4:	6993      	ldr	r3, [r2, #24]
 801e1f6:	9104      	str	r1, [sp, #16]
 801e1f8:	9307      	str	r3, [sp, #28]
 801e1fa:	9503      	str	r5, [sp, #12]
 801e1fc:	69d1      	ldr	r1, [r2, #28]
 801e1fe:	6b55      	ldr	r5, [r2, #52]	; 0x34
 801e200:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 801e204:	2e00      	cmp	r6, #0
 801e206:	f000 8097 	beq.w	801e338 <D32_GENERIC+0x154>
 801e20a:	f005 0620 	and.w	r6, r5, #32
 801e20e:	f005 0510 	and.w	r5, r5, #16
 801e212:	f04f 0e00 	mov.w	lr, #0
 801e216:	f8df c150 	ldr.w	ip, [pc, #336]	; 801e368 <D32_GENERIC+0x184>
 801e21a:	9606      	str	r6, [sp, #24]
 801e21c:	9505      	str	r5, [sp, #20]
 801e21e:	e079      	b.n	801e314 <D32_GENERIC+0x130>
 801e220:	783d      	ldrb	r5, [r7, #0]
 801e222:	f810 b009 	ldrb.w	fp, [r0, r9]
 801e226:	042d      	lsls	r5, r5, #16
 801e228:	f810 a006 	ldrb.w	sl, [r0, r6]
 801e22c:	f890 9000 	ldrb.w	r9, [r0]
 801e230:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 801e234:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 801e238:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 801e23c:	44a9      	add	r9, r5
 801e23e:	fa5f f789 	uxtb.w	r7, r9
 801e242:	f3c9 2507 	ubfx	r5, r9, #8, #8
 801e246:	f3c9 4607 	ubfx	r6, r9, #16, #8
 801e24a:	ea4f 6919 	mov.w	r9, r9, lsr #24
 801e24e:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 801e252:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 801e256:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 801e25a:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 801e25e:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 801e262:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 801e266:	f3c1 0909 	ubfx	r9, r1, #0, #10
 801e26a:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 801e26e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801e272:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 801e276:	f3c6 0609 	ubfx	r6, r6, #0, #10
 801e27a:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 801e27e:	f3c1 0509 	ubfx	r5, r1, #0, #10
 801e282:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 801e286:	4d34      	ldr	r5, [pc, #208]	; (801e358 <D32_GENERIC+0x174>)
 801e288:	fb29 8805 	smlad	r8, r9, r5, r8
 801e28c:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 801e290:	fb26 8705 	smlad	r7, r6, r5, r8
 801e294:	4d31      	ldr	r5, [pc, #196]	; (801e35c <D32_GENERIC+0x178>)
 801e296:	fb29 3305 	smlad	r3, r9, r5, r3
 801e29a:	4d31      	ldr	r5, [pc, #196]	; (801e360 <D32_GENERIC+0x17c>)
 801e29c:	fb26 3805 	smlad	r8, r6, r5, r3
 801e2a0:	2301      	movs	r3, #1
 801e2a2:	fb29 f903 	smuad	r9, r9, r3
 801e2a6:	4b2f      	ldr	r3, [pc, #188]	; (801e364 <D32_GENERIC+0x180>)
 801e2a8:	fb26 9303 	smlad	r3, r6, r3, r9
 801e2ac:	9e05      	ldr	r6, [sp, #20]
 801e2ae:	f10e 0901 	add.w	r9, lr, #1
 801e2b2:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 801e2b6:	b1ae      	cbz	r6, 801e2e4 <D32_GENERIC+0x100>
 801e2b8:	442c      	add	r4, r5
 801e2ba:	9e02      	ldr	r6, [sp, #8]
 801e2bc:	f8d2 a020 	ldr.w	sl, [r2, #32]
 801e2c0:	1ba4      	subs	r4, r4, r6
 801e2c2:	9502      	str	r5, [sp, #8]
 801e2c4:	17e7      	asrs	r7, r4, #31
 801e2c6:	fba4 450a 	umull	r4, r5, r4, sl
 801e2ca:	e9cd 4500 	strd	r4, r5, [sp]
 801e2ce:	fb0a 5407 	mla	r4, sl, r7, r5
 801e2d2:	9401      	str	r4, [sp, #4]
 801e2d4:	e9dd 4500 	ldrd	r4, r5, [sp]
 801e2d8:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 801e2dc:	f145 0500 	adc.w	r5, r5, #0
 801e2e0:	006c      	lsls	r4, r5, #1
 801e2e2:	4625      	mov	r5, r4
 801e2e4:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 801e2e8:	036d      	lsls	r5, r5, #13
 801e2ea:	9f03      	ldr	r7, [sp, #12]
 801e2ec:	fb0e fb0a 	mul.w	fp, lr, sl
 801e2f0:	fa1f fe89 	uxth.w	lr, r9
 801e2f4:	f04f 0a00 	mov.w	sl, #0
 801e2f8:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 801e2fc:	9e04      	ldr	r6, [sp, #16]
 801e2fe:	fbc7 9a05 	smlal	r9, sl, r7, r5
 801e302:	4657      	mov	r7, sl
 801e304:	10bd      	asrs	r5, r7, #2
 801e306:	f305 050f 	ssat	r5, #16, r5
 801e30a:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 801e30e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 801e310:	4575      	cmp	r5, lr
 801e312:	d911      	bls.n	801e338 <D32_GENERIC+0x154>
 801e314:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 801e316:	b2ee      	uxtb	r6, r5
 801e318:	2d01      	cmp	r5, #1
 801e31a:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 801e31e:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 801e322:	f47f af7d 	bne.w	801e220 <D32_GENERIC+0x3c>
 801e326:	1d05      	adds	r5, r0, #4
 801e328:	f8d0 9000 	ldr.w	r9, [r0]
 801e32c:	9806      	ldr	r0, [sp, #24]
 801e32e:	b180      	cbz	r0, 801e352 <D32_GENERIC+0x16e>
 801e330:	fa99 f999 	rev16.w	r9, r9
 801e334:	4628      	mov	r0, r5
 801e336:	e782      	b.n	801e23e <D32_GENERIC+0x5a>
 801e338:	6093      	str	r3, [r2, #8]
 801e33a:	2000      	movs	r0, #0
 801e33c:	9b02      	ldr	r3, [sp, #8]
 801e33e:	f8c2 800c 	str.w	r8, [r2, #12]
 801e342:	6153      	str	r3, [r2, #20]
 801e344:	9b07      	ldr	r3, [sp, #28]
 801e346:	61d1      	str	r1, [r2, #28]
 801e348:	6114      	str	r4, [r2, #16]
 801e34a:	6193      	str	r3, [r2, #24]
 801e34c:	b009      	add	sp, #36	; 0x24
 801e34e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e352:	4628      	mov	r0, r5
 801e354:	e773      	b.n	801e23e <D32_GENERIC+0x5a>
 801e356:	bf00      	nop
 801e358:	00060003 	.word	0x00060003
 801e35c:	000a000c 	.word	0x000a000c
 801e360:	000c000a 	.word	0x000c000a
 801e364:	00030006 	.word	0x00030006
 801e368:	24000000 	.word	0x24000000

0801e36c <D48_GENERIC>:
 801e36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e370:	6913      	ldr	r3, [r2, #16]
 801e372:	b089      	sub	sp, #36	; 0x24
 801e374:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 801e376:	9301      	str	r3, [sp, #4]
 801e378:	6953      	ldr	r3, [r2, #20]
 801e37a:	9104      	str	r1, [sp, #16]
 801e37c:	9302      	str	r3, [sp, #8]
 801e37e:	6993      	ldr	r3, [r2, #24]
 801e380:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 801e384:	9307      	str	r3, [sp, #28]
 801e386:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 801e38a:	9100      	str	r1, [sp, #0]
 801e38c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 801e38e:	9103      	str	r1, [sp, #12]
 801e390:	6b51      	ldr	r1, [r2, #52]	; 0x34
 801e392:	2c00      	cmp	r4, #0
 801e394:	f000 80be 	beq.w	801e514 <D48_GENERIC+0x1a8>
 801e398:	f001 0420 	and.w	r4, r1, #32
 801e39c:	f001 0110 	and.w	r1, r1, #16
 801e3a0:	f04f 0e00 	mov.w	lr, #0
 801e3a4:	9105      	str	r1, [sp, #20]
 801e3a6:	9406      	str	r4, [sp, #24]
 801e3a8:	4962      	ldr	r1, [pc, #392]	; (801e534 <D48_GENERIC+0x1c8>)
 801e3aa:	e0a0      	b.n	801e4ee <D48_GENERIC+0x182>
 801e3ac:	eb00 0608 	add.w	r6, r0, r8
 801e3b0:	f810 a008 	ldrb.w	sl, [r0, r8]
 801e3b4:	f810 9005 	ldrb.w	r9, [r0, r5]
 801e3b8:	5df4      	ldrb	r4, [r6, r7]
 801e3ba:	443e      	add	r6, r7
 801e3bc:	f890 b000 	ldrb.w	fp, [r0]
 801e3c0:	0420      	lsls	r0, r4, #16
 801e3c2:	eb06 0408 	add.w	r4, r6, r8
 801e3c6:	f816 6008 	ldrb.w	r6, [r6, r8]
 801e3ca:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 801e3ce:	f814 8007 	ldrb.w	r8, [r4, r7]
 801e3d2:	4427      	add	r7, r4
 801e3d4:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 801e3d8:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 801e3dc:	eb0a 040b 	add.w	r4, sl, fp
 801e3e0:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 801e3e4:	f3c6 2807 	ubfx	r8, r6, #8, #8
 801e3e8:	b2f7      	uxtb	r7, r6
 801e3ea:	b2e6      	uxtb	r6, r4
 801e3ec:	f3c4 2507 	ubfx	r5, r4, #8, #8
 801e3f0:	f3c4 4907 	ubfx	r9, r4, #16, #8
 801e3f4:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 801e3f8:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801e3fc:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 801e400:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 801e404:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 801e408:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 801e40c:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 801e410:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 801e414:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 801e418:	f3c6 0609 	ubfx	r6, r6, #0, #10
 801e41c:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 801e420:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801e424:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 801e428:	f3c9 0909 	ubfx	r9, r9, #0, #10
 801e42c:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 801e430:	9d00      	ldr	r5, [sp, #0]
 801e432:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 801e436:	f3c4 0409 	ubfx	r4, r4, #0, #10
 801e43a:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 801e43e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 801e442:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 801e446:	f3cc 0409 	ubfx	r4, ip, #0, #10
 801e44a:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 801e44e:	4c3a      	ldr	r4, [pc, #232]	; (801e538 <D48_GENERIC+0x1cc>)
 801e450:	fb26 5a04 	smlad	sl, r6, r4, r5
 801e454:	4c39      	ldr	r4, [pc, #228]	; (801e53c <D48_GENERIC+0x1d0>)
 801e456:	fb29 aa04 	smlad	sl, r9, r4, sl
 801e45a:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 801e45e:	fb27 aa04 	smlad	sl, r7, r4, sl
 801e462:	4c37      	ldr	r4, [pc, #220]	; (801e540 <D48_GENERIC+0x1d4>)
 801e464:	fb26 3304 	smlad	r3, r6, r4, r3
 801e468:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 801e46c:	fb29 3304 	smlad	r3, r9, r4, r3
 801e470:	4c34      	ldr	r4, [pc, #208]	; (801e544 <D48_GENERIC+0x1d8>)
 801e472:	fb27 3304 	smlad	r3, r7, r4, r3
 801e476:	2501      	movs	r5, #1
 801e478:	9300      	str	r3, [sp, #0]
 801e47a:	fb26 f605 	smuad	r6, r6, r5
 801e47e:	4b32      	ldr	r3, [pc, #200]	; (801e548 <D48_GENERIC+0x1dc>)
 801e480:	fb29 6903 	smlad	r9, r9, r3, r6
 801e484:	4b31      	ldr	r3, [pc, #196]	; (801e54c <D48_GENERIC+0x1e0>)
 801e486:	fb27 9303 	smlad	r3, r7, r3, r9
 801e48a:	9c05      	ldr	r4, [sp, #20]
 801e48c:	eb0e 0805 	add.w	r8, lr, r5
 801e490:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 801e494:	b19c      	cbz	r4, 801e4be <D48_GENERIC+0x152>
 801e496:	9c01      	ldr	r4, [sp, #4]
 801e498:	9d02      	ldr	r5, [sp, #8]
 801e49a:	4454      	add	r4, sl
 801e49c:	f8d2 9020 	ldr.w	r9, [r2, #32]
 801e4a0:	f8cd a008 	str.w	sl, [sp, #8]
 801e4a4:	1b64      	subs	r4, r4, r5
 801e4a6:	fba4 ab09 	umull	sl, fp, r4, r9
 801e4aa:	17e7      	asrs	r7, r4, #31
 801e4ac:	f11a 4400 	adds.w	r4, sl, #2147483648	; 0x80000000
 801e4b0:	fb09 bb07 	mla	fp, r9, r7, fp
 801e4b4:	f14b 0500 	adc.w	r5, fp, #0
 801e4b8:	006c      	lsls	r4, r5, #1
 801e4ba:	46a2      	mov	sl, r4
 801e4bc:	9401      	str	r4, [sp, #4]
 801e4be:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 801e4c0:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 801e4c4:	9d03      	ldr	r5, [sp, #12]
 801e4c6:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 801e4ca:	fb0e f606 	mul.w	r6, lr, r6
 801e4ce:	fa1f fe88 	uxth.w	lr, r8
 801e4d2:	f04f 0800 	mov.w	r8, #0
 801e4d6:	fbc5 780a 	smlal	r7, r8, r5, sl
 801e4da:	4645      	mov	r5, r8
 801e4dc:	10ac      	asrs	r4, r5, #2
 801e4de:	9d04      	ldr	r5, [sp, #16]
 801e4e0:	f304 040f 	ssat	r4, #16, r4
 801e4e4:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 801e4e8:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 801e4ea:	4574      	cmp	r4, lr
 801e4ec:	d912      	bls.n	801e514 <D48_GENERIC+0x1a8>
 801e4ee:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 801e4f0:	b2e5      	uxtb	r5, r4
 801e4f2:	2c01      	cmp	r4, #1
 801e4f4:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 801e4f8:	f1c5 0700 	rsb	r7, r5, #0
 801e4fc:	f47f af56 	bne.w	801e3ac <D48_GENERIC+0x40>
 801e500:	9d06      	ldr	r5, [sp, #24]
 801e502:	e9d0 4600 	ldrd	r4, r6, [r0]
 801e506:	3006      	adds	r0, #6
 801e508:	2d00      	cmp	r5, #0
 801e50a:	f43f af6b 	beq.w	801e3e4 <D48_GENERIC+0x78>
 801e50e:	ba64      	rev16	r4, r4
 801e510:	ba76      	rev16	r6, r6
 801e512:	e767      	b.n	801e3e4 <D48_GENERIC+0x78>
 801e514:	6093      	str	r3, [r2, #8]
 801e516:	2000      	movs	r0, #0
 801e518:	9b00      	ldr	r3, [sp, #0]
 801e51a:	f8c2 c01c 	str.w	ip, [r2, #28]
 801e51e:	60d3      	str	r3, [r2, #12]
 801e520:	9b01      	ldr	r3, [sp, #4]
 801e522:	6113      	str	r3, [r2, #16]
 801e524:	9b02      	ldr	r3, [sp, #8]
 801e526:	6153      	str	r3, [r2, #20]
 801e528:	9b07      	ldr	r3, [sp, #28]
 801e52a:	6193      	str	r3, [r2, #24]
 801e52c:	b009      	add	sp, #36	; 0x24
 801e52e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e532:	bf00      	nop
 801e534:	24000000 	.word	0x24000000
 801e538:	000f000a 	.word	0x000f000a
 801e53c:	00060003 	.word	0x00060003
 801e540:	00150019 	.word	0x00150019
 801e544:	00190015 	.word	0x00190015
 801e548:	00030006 	.word	0x00030006
 801e54c:	000a000f 	.word	0x000a000f

0801e550 <D64_GENERIC>:
 801e550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e554:	6913      	ldr	r3, [r2, #16]
 801e556:	b089      	sub	sp, #36	; 0x24
 801e558:	6b15      	ldr	r5, [r2, #48]	; 0x30
 801e55a:	9300      	str	r3, [sp, #0]
 801e55c:	6953      	ldr	r3, [r2, #20]
 801e55e:	9105      	str	r1, [sp, #20]
 801e560:	9303      	str	r3, [sp, #12]
 801e562:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 801e564:	6993      	ldr	r3, [r2, #24]
 801e566:	69d4      	ldr	r4, [r2, #28]
 801e568:	9307      	str	r3, [sp, #28]
 801e56a:	9504      	str	r5, [sp, #16]
 801e56c:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 801e570:	2900      	cmp	r1, #0
 801e572:	f000 80e8 	beq.w	801e746 <D64_GENERIC+0x1f6>
 801e576:	6a11      	ldr	r1, [r2, #32]
 801e578:	2500      	movs	r5, #0
 801e57a:	46b3      	mov	fp, r6
 801e57c:	9302      	str	r3, [sp, #8]
 801e57e:	9106      	str	r1, [sp, #24]
 801e580:	4978      	ldr	r1, [pc, #480]	; (801e764 <D64_GENERIC+0x214>)
 801e582:	e0cc      	b.n	801e71e <D64_GENERIC+0x1ce>
 801e584:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 801e588:	f1ce 0c00 	rsb	ip, lr, #0
 801e58c:	f890 9000 	ldrb.w	r9, [r0]
 801e590:	eb00 0708 	add.w	r7, r0, r8
 801e594:	f810 6008 	ldrb.w	r6, [r0, r8]
 801e598:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 801e59c:	f817 000c 	ldrb.w	r0, [r7, ip]
 801e5a0:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 801e5a4:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 801e5a8:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 801e5ac:	ea4f 4800 	mov.w	r8, r0, lsl #16
 801e5b0:	f817 000c 	ldrb.w	r0, [r7, ip]
 801e5b4:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 801e5b8:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 801e5bc:	0400      	lsls	r0, r0, #16
 801e5be:	4467      	add	r7, ip
 801e5c0:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 801e5c4:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 801e5c8:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 801e5cc:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 801e5d0:	444e      	add	r6, r9
 801e5d2:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 801e5d6:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 801e5da:	44c2      	add	sl, r8
 801e5dc:	b2f7      	uxtb	r7, r6
 801e5de:	f3c6 2807 	ubfx	r8, r6, #8, #8
 801e5e2:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801e5e6:	0e36      	lsrs	r6, r6, #24
 801e5e8:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 801e5ec:	fa5f fc8a 	uxtb.w	ip, sl
 801e5f0:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 801e5f4:	f3ca 2907 	ubfx	r9, sl, #8, #8
 801e5f8:	443c      	add	r4, r7
 801e5fa:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 801e5fe:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801e602:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 801e606:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 801e60a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 801e60e:	4b56      	ldr	r3, [pc, #344]	; (801e768 <D64_GENERIC+0x218>)
 801e610:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 801e614:	f3c8 0809 	ubfx	r8, r8, #0, #10
 801e618:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 801e61c:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 801e620:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 801e624:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 801e628:	f3ca 4407 	ubfx	r4, sl, #16, #8
 801e62c:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 801e630:	f3c6 0609 	ubfx	r6, r6, #0, #10
 801e634:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 801e638:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 801e63c:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 801e640:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 801e644:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 801e648:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 801e64c:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 801e650:	f3c7 0709 	ubfx	r7, r7, #0, #10
 801e654:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 801e658:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 801e65c:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 801e660:	f3c9 0709 	ubfx	r7, r9, #0, #10
 801e664:	ea4f 2499 	mov.w	r4, r9, lsr #10
 801e668:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 801e66c:	fb28 b903 	smlad	r9, r8, r3, fp
 801e670:	4b3e      	ldr	r3, [pc, #248]	; (801e76c <D64_GENERIC+0x21c>)
 801e672:	fb26 9903 	smlad	r9, r6, r3, r9
 801e676:	4b3e      	ldr	r3, [pc, #248]	; (801e770 <D64_GENERIC+0x220>)
 801e678:	fb2c 9703 	smlad	r7, ip, r3, r9
 801e67c:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 801e680:	fb2a 7909 	smlad	r9, sl, r9, r7
 801e684:	4f3b      	ldr	r7, [pc, #236]	; (801e774 <D64_GENERIC+0x224>)
 801e686:	9b02      	ldr	r3, [sp, #8]
 801e688:	fb28 3307 	smlad	r3, r8, r7, r3
 801e68c:	fb2a 3317 	smladx	r3, sl, r7, r3
 801e690:	4f39      	ldr	r7, [pc, #228]	; (801e778 <D64_GENERIC+0x228>)
 801e692:	fb26 3307 	smlad	r3, r6, r7, r3
 801e696:	fb2c 3b17 	smladx	fp, ip, r7, r3
 801e69a:	f04f 0e01 	mov.w	lr, #1
 801e69e:	fb28 f80e 	smuad	r8, r8, lr
 801e6a2:	4b36      	ldr	r3, [pc, #216]	; (801e77c <D64_GENERIC+0x22c>)
 801e6a4:	fb26 8603 	smlad	r6, r6, r3, r8
 801e6a8:	4b35      	ldr	r3, [pc, #212]	; (801e780 <D64_GENERIC+0x230>)
 801e6aa:	fb2c 6c03 	smlad	ip, ip, r3, r6
 801e6ae:	4b35      	ldr	r3, [pc, #212]	; (801e784 <D64_GENERIC+0x234>)
 801e6b0:	fb2a c303 	smlad	r3, sl, r3, ip
 801e6b4:	9f06      	ldr	r7, [sp, #24]
 801e6b6:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 801e6ba:	9302      	str	r3, [sp, #8]
 801e6bc:	b1cf      	cbz	r7, 801e6f2 <D64_GENERIC+0x1a2>
 801e6be:	9b00      	ldr	r3, [sp, #0]
 801e6c0:	444b      	add	r3, r9
 801e6c2:	461e      	mov	r6, r3
 801e6c4:	9b03      	ldr	r3, [sp, #12]
 801e6c6:	f8cd 900c 	str.w	r9, [sp, #12]
 801e6ca:	1af6      	subs	r6, r6, r3
 801e6cc:	46b0      	mov	r8, r6
 801e6ce:	ea4f 79e6 	mov.w	r9, r6, asr #31
 801e6d2:	e9cd 8900 	strd	r8, r9, [sp]
 801e6d6:	fba6 8907 	umull	r8, r9, r6, r7
 801e6da:	9e01      	ldr	r6, [sp, #4]
 801e6dc:	fb07 9306 	mla	r3, r7, r6, r9
 801e6e0:	4646      	mov	r6, r8
 801e6e2:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 801e6e6:	f143 0700 	adc.w	r7, r3, #0
 801e6ea:	fa07 f30e 	lsl.w	r3, r7, lr
 801e6ee:	4699      	mov	r9, r3
 801e6f0:	9300      	str	r3, [sp, #0]
 801e6f2:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 801e6f6:	ea4f 2989 	mov.w	r9, r9, lsl #10
 801e6fa:	9b04      	ldr	r3, [sp, #16]
 801e6fc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801e700:	2700      	movs	r7, #0
 801e702:	fb05 fc0c 	mul.w	ip, r5, ip
 801e706:	3501      	adds	r5, #1
 801e708:	fbc3 6709 	smlal	r6, r7, r3, r9
 801e70c:	9b05      	ldr	r3, [sp, #20]
 801e70e:	10be      	asrs	r6, r7, #2
 801e710:	f306 060f 	ssat	r6, #16, r6
 801e714:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 801e718:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 801e71a:	42ae      	cmp	r6, r5
 801e71c:	dd11      	ble.n	801e742 <D64_GENERIC+0x1f2>
 801e71e:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	; 0x2a
 801e722:	f1be 0f01 	cmp.w	lr, #1
 801e726:	f47f af2d 	bne.w	801e584 <D64_GENERIC+0x34>
 801e72a:	6b57      	ldr	r7, [r2, #52]	; 0x34
 801e72c:	f100 0c08 	add.w	ip, r0, #8
 801e730:	06bb      	lsls	r3, r7, #26
 801e732:	e9d0 6a00 	ldrd	r6, sl, [r0]
 801e736:	d513      	bpl.n	801e760 <D64_GENERIC+0x210>
 801e738:	ba76      	rev16	r6, r6
 801e73a:	fa9a fa9a 	rev16.w	sl, sl
 801e73e:	4660      	mov	r0, ip
 801e740:	e74c      	b.n	801e5dc <D64_GENERIC+0x8c>
 801e742:	465e      	mov	r6, fp
 801e744:	9b02      	ldr	r3, [sp, #8]
 801e746:	6093      	str	r3, [r2, #8]
 801e748:	2000      	movs	r0, #0
 801e74a:	9b00      	ldr	r3, [sp, #0]
 801e74c:	60d6      	str	r6, [r2, #12]
 801e74e:	6113      	str	r3, [r2, #16]
 801e750:	9b03      	ldr	r3, [sp, #12]
 801e752:	61d4      	str	r4, [r2, #28]
 801e754:	6153      	str	r3, [r2, #20]
 801e756:	9b07      	ldr	r3, [sp, #28]
 801e758:	6193      	str	r3, [r2, #24]
 801e75a:	b009      	add	sp, #36	; 0x24
 801e75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e760:	4660      	mov	r0, ip
 801e762:	e73b      	b.n	801e5dc <D64_GENERIC+0x8c>
 801e764:	24000000 	.word	0x24000000
 801e768:	001c0015 	.word	0x001c0015
 801e76c:	000f000a 	.word	0x000f000a
 801e770:	00060003 	.word	0x00060003
 801e774:	0024002a 	.word	0x0024002a
 801e778:	002e0030 	.word	0x002e0030
 801e77c:	00030006 	.word	0x00030006
 801e780:	000a000f 	.word	0x000a000f
 801e784:	0015001c 	.word	0x0015001c

0801e788 <D80_GENERIC>:
 801e788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e78c:	b08b      	sub	sp, #44	; 0x2c
 801e78e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 801e790:	9107      	str	r1, [sp, #28]
 801e792:	6911      	ldr	r1, [r2, #16]
 801e794:	9104      	str	r1, [sp, #16]
 801e796:	6951      	ldr	r1, [r2, #20]
 801e798:	9105      	str	r1, [sp, #20]
 801e79a:	6991      	ldr	r1, [r2, #24]
 801e79c:	9109      	str	r1, [sp, #36]	; 0x24
 801e79e:	69d1      	ldr	r1, [r2, #28]
 801e7a0:	9102      	str	r1, [sp, #8]
 801e7a2:	6891      	ldr	r1, [r2, #8]
 801e7a4:	9103      	str	r1, [sp, #12]
 801e7a6:	68d1      	ldr	r1, [r2, #12]
 801e7a8:	9101      	str	r1, [sp, #4]
 801e7aa:	6b11      	ldr	r1, [r2, #48]	; 0x30
 801e7ac:	9106      	str	r1, [sp, #24]
 801e7ae:	2b00      	cmp	r3, #0
 801e7b0:	f000 810b 	beq.w	801e9ca <D80_GENERIC+0x242>
 801e7b4:	6a13      	ldr	r3, [r2, #32]
 801e7b6:	f04f 0800 	mov.w	r8, #0
 801e7ba:	f8df c260 	ldr.w	ip, [pc, #608]	; 801ea1c <D80_GENERIC+0x294>
 801e7be:	9308      	str	r3, [sp, #32]
 801e7c0:	9200      	str	r2, [sp, #0]
 801e7c2:	e0ee      	b.n	801e9a2 <D80_GENERIC+0x21a>
 801e7c4:	b2db      	uxtb	r3, r3
 801e7c6:	f890 e000 	ldrb.w	lr, [r0]
 801e7ca:	b219      	sxth	r1, r3
 801e7cc:	425c      	negs	r4, r3
 801e7ce:	f810 9003 	ldrb.w	r9, [r0, r3]
 801e7d2:	004e      	lsls	r6, r1, #1
 801e7d4:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 801e7d8:	4431      	add	r1, r6
 801e7da:	1843      	adds	r3, r0, r1
 801e7dc:	f810 b001 	ldrb.w	fp, [r0, r1]
 801e7e0:	1919      	adds	r1, r3, r4
 801e7e2:	5d1b      	ldrb	r3, [r3, r4]
 801e7e4:	1948      	adds	r0, r1, r5
 801e7e6:	f811 a005 	ldrb.w	sl, [r1, r5]
 801e7ea:	041b      	lsls	r3, r3, #16
 801e7ec:	1907      	adds	r7, r0, r4
 801e7ee:	5d01      	ldrb	r1, [r0, r4]
 801e7f0:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 801e7f4:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 801e7f8:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 801e7fc:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 801e800:	0409      	lsls	r1, r1, #16
 801e802:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 801e806:	eb0b 0905 	add.w	r9, fp, r5
 801e80a:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 801e80e:	f81b 5005 	ldrb.w	r5, [fp, r5]
 801e812:	eb09 0b04 	add.w	fp, r9, r4
 801e816:	f819 4004 	ldrb.w	r4, [r9, r4]
 801e81a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 801e81e:	4473      	add	r3, lr
 801e820:	eb0b 0006 	add.w	r0, fp, r6
 801e824:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 801e828:	4439      	add	r1, r7
 801e82a:	f3c3 2407 	ubfx	r4, r3, #8, #8
 801e82e:	b2df      	uxtb	r7, r3
 801e830:	f3c3 4607 	ubfx	r6, r3, #16, #8
 801e834:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801e838:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 801e83c:	fa5f fa81 	uxtb.w	sl, r1
 801e840:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 801e844:	9c02      	ldr	r4, [sp, #8]
 801e846:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 801e84a:	441c      	add	r4, r3
 801e84c:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 801e850:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 801e854:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801e858:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 801e85c:	f3c4 0309 	ubfx	r3, r4, #0, #10
 801e860:	f3c1 2407 	ubfx	r4, r1, #8, #8
 801e864:	b2ed      	uxtb	r5, r5
 801e866:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 801e86a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 801e86e:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 801e872:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 801e876:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 801e87a:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 801e87e:	f3c1 4707 	ubfx	r7, r1, #16, #8
 801e882:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 801e886:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 801e88a:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 801e88e:	0e09      	lsrs	r1, r1, #24
 801e890:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 801e894:	f3c9 0909 	ubfx	r9, r9, #0, #10
 801e898:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 801e89c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 801e8a0:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 801e8a4:	f3c6 0609 	ubfx	r6, r6, #0, #10
 801e8a8:	f3c4 0409 	ubfx	r4, r4, #0, #10
 801e8ac:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 801e8b0:	f3c7 0709 	ubfx	r7, r7, #0, #10
 801e8b4:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 801e8b8:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 801e8bc:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801e8c0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 801e8c4:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 801e8c8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801e8cc:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 801e8d0:	ea4f 229a 	mov.w	r2, sl, lsr #10
 801e8d4:	f3ca 0709 	ubfx	r7, sl, #0, #10
 801e8d8:	9202      	str	r2, [sp, #8]
 801e8da:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 801e8de:	4a43      	ldr	r2, [pc, #268]	; (801e9ec <D80_GENERIC+0x264>)
 801e8e0:	9f01      	ldr	r7, [sp, #4]
 801e8e2:	fb23 7a02 	smlad	sl, r3, r2, r7
 801e8e6:	4a42      	ldr	r2, [pc, #264]	; (801e9f0 <D80_GENERIC+0x268>)
 801e8e8:	fb26 aa02 	smlad	sl, r6, r2, sl
 801e8ec:	4a41      	ldr	r2, [pc, #260]	; (801e9f4 <D80_GENERIC+0x26c>)
 801e8ee:	fb24 aa02 	smlad	sl, r4, r2, sl
 801e8f2:	4a41      	ldr	r2, [pc, #260]	; (801e9f8 <D80_GENERIC+0x270>)
 801e8f4:	fb21 a702 	smlad	r7, r1, r2, sl
 801e8f8:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 801e8fc:	fb25 7a0a 	smlad	sl, r5, sl, r7
 801e900:	4a3e      	ldr	r2, [pc, #248]	; (801e9fc <D80_GENERIC+0x274>)
 801e902:	9f03      	ldr	r7, [sp, #12]
 801e904:	fb23 7e02 	smlad	lr, r3, r2, r7
 801e908:	4a3d      	ldr	r2, [pc, #244]	; (801ea00 <D80_GENERIC+0x278>)
 801e90a:	fb26 ee02 	smlad	lr, r6, r2, lr
 801e90e:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 801e912:	fb24 e707 	smlad	r7, r4, r7, lr
 801e916:	4a3b      	ldr	r2, [pc, #236]	; (801ea04 <D80_GENERIC+0x27c>)
 801e918:	fb21 7702 	smlad	r7, r1, r2, r7
 801e91c:	4a3a      	ldr	r2, [pc, #232]	; (801ea08 <D80_GENERIC+0x280>)
 801e91e:	fb25 7202 	smlad	r2, r5, r2, r7
 801e922:	f04f 0901 	mov.w	r9, #1
 801e926:	9201      	str	r2, [sp, #4]
 801e928:	fb23 f909 	smuad	r9, r3, r9
 801e92c:	4b37      	ldr	r3, [pc, #220]	; (801ea0c <D80_GENERIC+0x284>)
 801e92e:	fb26 9603 	smlad	r6, r6, r3, r9
 801e932:	4f37      	ldr	r7, [pc, #220]	; (801ea10 <D80_GENERIC+0x288>)
 801e934:	fb24 6407 	smlad	r4, r4, r7, r6
 801e938:	4f36      	ldr	r7, [pc, #216]	; (801ea14 <D80_GENERIC+0x28c>)
 801e93a:	fb21 4707 	smlad	r7, r1, r7, r4
 801e93e:	4936      	ldr	r1, [pc, #216]	; (801ea18 <D80_GENERIC+0x290>)
 801e940:	fb25 7301 	smlad	r3, r5, r1, r7
 801e944:	9303      	str	r3, [sp, #12]
 801e946:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 801e94a:	9b08      	ldr	r3, [sp, #32]
 801e94c:	b193      	cbz	r3, 801e974 <D80_GENERIC+0x1ec>
 801e94e:	9a04      	ldr	r2, [sp, #16]
 801e950:	4452      	add	r2, sl
 801e952:	4614      	mov	r4, r2
 801e954:	9a05      	ldr	r2, [sp, #20]
 801e956:	f8cd a014 	str.w	sl, [sp, #20]
 801e95a:	1aa4      	subs	r4, r4, r2
 801e95c:	fba4 1203 	umull	r1, r2, r4, r3
 801e960:	17e7      	asrs	r7, r4, #31
 801e962:	f111 4400 	adds.w	r4, r1, #2147483648	; 0x80000000
 801e966:	fb03 2207 	mla	r2, r3, r7, r2
 801e96a:	f142 0500 	adc.w	r5, r2, #0
 801e96e:	006b      	lsls	r3, r5, #1
 801e970:	469a      	mov	sl, r3
 801e972:	9304      	str	r3, [sp, #16]
 801e974:	9e00      	ldr	r6, [sp, #0]
 801e976:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 801e97a:	9a06      	ldr	r2, [sp, #24]
 801e97c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801e980:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 801e982:	2500      	movs	r5, #0
 801e984:	fb08 f303 	mul.w	r3, r8, r3
 801e988:	fbc2 450a 	smlal	r4, r5, r2, sl
 801e98c:	9a07      	ldr	r2, [sp, #28]
 801e98e:	f108 0801 	add.w	r8, r8, #1
 801e992:	10a9      	asrs	r1, r5, #2
 801e994:	f301 010f 	ssat	r1, #16, r1
 801e998:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801e99c:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 801e99e:	4543      	cmp	r3, r8
 801e9a0:	dd12      	ble.n	801e9c8 <D80_GENERIC+0x240>
 801e9a2:	9b00      	ldr	r3, [sp, #0]
 801e9a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e9a6:	2b01      	cmp	r3, #1
 801e9a8:	f47f af0c 	bne.w	801e7c4 <D80_GENERIC+0x3c>
 801e9ac:	9b00      	ldr	r3, [sp, #0]
 801e9ae:	6885      	ldr	r5, [r0, #8]
 801e9b0:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 801e9b2:	06b2      	lsls	r2, r6, #26
 801e9b4:	e9d0 3100 	ldrd	r3, r1, [r0]
 801e9b8:	f100 000a 	add.w	r0, r0, #10
 801e9bc:	f57f af35 	bpl.w	801e82a <D80_GENERIC+0xa2>
 801e9c0:	ba5b      	rev16	r3, r3
 801e9c2:	ba49      	rev16	r1, r1
 801e9c4:	ba6d      	rev16	r5, r5
 801e9c6:	e730      	b.n	801e82a <D80_GENERIC+0xa2>
 801e9c8:	4632      	mov	r2, r6
 801e9ca:	9b03      	ldr	r3, [sp, #12]
 801e9cc:	2000      	movs	r0, #0
 801e9ce:	6093      	str	r3, [r2, #8]
 801e9d0:	9b01      	ldr	r3, [sp, #4]
 801e9d2:	60d3      	str	r3, [r2, #12]
 801e9d4:	9b02      	ldr	r3, [sp, #8]
 801e9d6:	61d3      	str	r3, [r2, #28]
 801e9d8:	9b04      	ldr	r3, [sp, #16]
 801e9da:	6113      	str	r3, [r2, #16]
 801e9dc:	9b05      	ldr	r3, [sp, #20]
 801e9de:	6153      	str	r3, [r2, #20]
 801e9e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e9e2:	6193      	str	r3, [r2, #24]
 801e9e4:	b00b      	add	sp, #44	; 0x2c
 801e9e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e9ea:	bf00      	nop
 801e9ec:	002d0024 	.word	0x002d0024
 801e9f0:	001c0015 	.word	0x001c0015
 801e9f4:	000f000a 	.word	0x000f000a
 801e9f8:	00060003 	.word	0x00060003
 801e9fc:	0037003f 	.word	0x0037003f
 801ea00:	00450049 	.word	0x00450049
 801ea04:	00490045 	.word	0x00490045
 801ea08:	003f0037 	.word	0x003f0037
 801ea0c:	00030006 	.word	0x00030006
 801ea10:	000a000f 	.word	0x000a000f
 801ea14:	0015001c 	.word	0x0015001c
 801ea18:	0024002d 	.word	0x0024002d
 801ea1c:	24000000 	.word	0x24000000

0801ea20 <D128_GENERIC>:
 801ea20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea24:	b08d      	sub	sp, #52	; 0x34
 801ea26:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 801ea28:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 801ea2c:	9109      	str	r1, [sp, #36]	; 0x24
 801ea2e:	6911      	ldr	r1, [r2, #16]
 801ea30:	9201      	str	r2, [sp, #4]
 801ea32:	9106      	str	r1, [sp, #24]
 801ea34:	6951      	ldr	r1, [r2, #20]
 801ea36:	9107      	str	r1, [sp, #28]
 801ea38:	6991      	ldr	r1, [r2, #24]
 801ea3a:	910b      	str	r1, [sp, #44]	; 0x2c
 801ea3c:	6891      	ldr	r1, [r2, #8]
 801ea3e:	9103      	str	r1, [sp, #12]
 801ea40:	68d1      	ldr	r1, [r2, #12]
 801ea42:	9102      	str	r1, [sp, #8]
 801ea44:	6b11      	ldr	r1, [r2, #48]	; 0x30
 801ea46:	9108      	str	r1, [sp, #32]
 801ea48:	2b00      	cmp	r3, #0
 801ea4a:	f000 8183 	beq.w	801ed54 <D128_GENERIC+0x334>
 801ea4e:	2300      	movs	r3, #0
 801ea50:	6a12      	ldr	r2, [r2, #32]
 801ea52:	4681      	mov	r9, r0
 801ea54:	920a      	str	r2, [sp, #40]	; 0x28
 801ea56:	e9cd a304 	strd	sl, r3, [sp, #16]
 801ea5a:	e165      	b.n	801ed28 <D128_GENERIC+0x308>
 801ea5c:	b2d2      	uxtb	r2, r2
 801ea5e:	f899 b000 	ldrb.w	fp, [r9]
 801ea62:	b213      	sxth	r3, r2
 801ea64:	4255      	negs	r5, r2
 801ea66:	f819 0002 	ldrb.w	r0, [r9, r2]
 801ea6a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801ea6e:	009f      	lsls	r7, r3, #2
 801ea70:	eb09 0402 	add.w	r4, r9, r2
 801ea74:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 801ea78:	f819 8002 	ldrb.w	r8, [r9, r2]
 801ea7c:	443b      	add	r3, r7
 801ea7e:	1962      	adds	r2, r4, r5
 801ea80:	5d64      	ldrb	r4, [r4, r5]
 801ea82:	eb02 0c03 	add.w	ip, r2, r3
 801ea86:	0424      	lsls	r4, r4, #16
 801ea88:	5cd3      	ldrb	r3, [r2, r3]
 801ea8a:	eb0c 0e05 	add.w	lr, ip, r5
 801ea8e:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 801ea92:	f81c 2005 	ldrb.w	r2, [ip, r5]
 801ea96:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 801ea9a:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 801ea9e:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 801eaa2:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 801eaa6:	eb0c 0e06 	add.w	lr, ip, r6
 801eaaa:	f81c a006 	ldrb.w	sl, [ip, r6]
 801eaae:	0412      	lsls	r2, r2, #16
 801eab0:	445c      	add	r4, fp
 801eab2:	eb0e 0c05 	add.w	ip, lr, r5
 801eab6:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 801eaba:	f81e 3005 	ldrb.w	r3, [lr, r5]
 801eabe:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 801eac2:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 801eac6:	041b      	lsls	r3, r3, #16
 801eac8:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 801eacc:	eb00 0b06 	add.w	fp, r0, r6
 801ead0:	5d80      	ldrb	r0, [r0, r6]
 801ead2:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 801ead6:	f81b 6005 	ldrb.w	r6, [fp, r5]
 801eada:	eb0b 0a05 	add.w	sl, fp, r5
 801eade:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 801eae2:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 801eae6:	0436      	lsls	r6, r6, #16
 801eae8:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 801eaec:	4442      	add	r2, r8
 801eaee:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 801eaf2:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 801eaf6:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 801eafa:	44b9      	add	r9, r7
 801eafc:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 801eb00:	4463      	add	r3, ip
 801eb02:	eb06 0508 	add.w	r5, r6, r8
 801eb06:	b2e7      	uxtb	r7, r4
 801eb08:	f3c4 2607 	ubfx	r6, r4, #8, #8
 801eb0c:	499b      	ldr	r1, [pc, #620]	; (801ed7c <D128_GENERIC+0x35c>)
 801eb0e:	f3c4 4007 	ubfx	r0, r4, #16, #8
 801eb12:	0e24      	lsrs	r4, r4, #24
 801eb14:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 801eb18:	b2d7      	uxtb	r7, r2
 801eb1a:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 801eb1e:	f3c2 2607 	ubfx	r6, r2, #8, #8
 801eb22:	9904      	ldr	r1, [sp, #16]
 801eb24:	4461      	add	r1, ip
 801eb26:	468c      	mov	ip, r1
 801eb28:	4994      	ldr	r1, [pc, #592]	; (801ed7c <D128_GENERIC+0x35c>)
 801eb2a:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 801eb2e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 801eb32:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 801eb36:	f3c2 4407 	ubfx	r4, r2, #16, #8
 801eb3a:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 801eb3e:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 801eb42:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 801eb46:	0e12      	lsrs	r2, r2, #24
 801eb48:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 801eb4c:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 801eb50:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801eb54:	f3c0 0009 	ubfx	r0, r0, #0, #10
 801eb58:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 801eb5c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 801eb60:	b2da      	uxtb	r2, r3
 801eb62:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 801eb66:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 801eb6a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 801eb6e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801eb72:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 801eb76:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 801eb7a:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801eb7e:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 801eb82:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 801eb86:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 801eb8a:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 801eb8e:	f3c3 4007 	ubfx	r0, r3, #16, #8
 801eb92:	f3c7 0709 	ubfx	r7, r7, #0, #10
 801eb96:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 801eb9a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 801eb9e:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 801eba2:	0e1b      	lsrs	r3, r3, #24
 801eba4:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 801eba8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 801ebac:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 801ebb0:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 801ebb4:	b2eb      	uxtb	r3, r5
 801ebb6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801ebba:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 801ebbe:	f3cc 0409 	ubfx	r4, ip, #0, #10
 801ebc2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801ebc6:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 801ebca:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 801ebce:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ebd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801ebd6:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 801ebda:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 801ebde:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 801ebe2:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801ebe6:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 801ebea:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 801ebee:	f3c0 0009 	ubfx	r0, r0, #0, #10
 801ebf2:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 801ebf6:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 801ebfa:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 801ebfe:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 801ec02:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 801ec06:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801ec0a:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 801ec0e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801ec12:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 801ec16:	ea4f 219e 	mov.w	r1, lr, lsr #10
 801ec1a:	f3ce 0209 	ubfx	r2, lr, #0, #10
 801ec1e:	9104      	str	r1, [sp, #16]
 801ec20:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 801ec24:	9902      	ldr	r1, [sp, #8]
 801ec26:	4a56      	ldr	r2, [pc, #344]	; (801ed80 <D128_GENERIC+0x360>)
 801ec28:	fb2b 1202 	smlad	r2, fp, r2, r1
 801ec2c:	4955      	ldr	r1, [pc, #340]	; (801ed84 <D128_GENERIC+0x364>)
 801ec2e:	fb28 2201 	smlad	r2, r8, r1, r2
 801ec32:	4955      	ldr	r1, [pc, #340]	; (801ed88 <D128_GENERIC+0x368>)
 801ec34:	fb27 2201 	smlad	r2, r7, r1, r2
 801ec38:	4954      	ldr	r1, [pc, #336]	; (801ed8c <D128_GENERIC+0x36c>)
 801ec3a:	fb26 2201 	smlad	r2, r6, r1, r2
 801ec3e:	4954      	ldr	r1, [pc, #336]	; (801ed90 <D128_GENERIC+0x370>)
 801ec40:	fb24 2201 	smlad	r2, r4, r1, r2
 801ec44:	4953      	ldr	r1, [pc, #332]	; (801ed94 <D128_GENERIC+0x374>)
 801ec46:	fb20 2201 	smlad	r2, r0, r1, r2
 801ec4a:	4953      	ldr	r1, [pc, #332]	; (801ed98 <D128_GENERIC+0x378>)
 801ec4c:	fb23 2201 	smlad	r2, r3, r1, r2
 801ec50:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 801ec54:	fb25 2a0c 	smlad	sl, r5, ip, r2
 801ec58:	4950      	ldr	r1, [pc, #320]	; (801ed9c <D128_GENERIC+0x37c>)
 801ec5a:	9a03      	ldr	r2, [sp, #12]
 801ec5c:	fb2b 2c01 	smlad	ip, fp, r1, r2
 801ec60:	4a4f      	ldr	r2, [pc, #316]	; (801eda0 <D128_GENERIC+0x380>)
 801ec62:	fb28 ce02 	smlad	lr, r8, r2, ip
 801ec66:	f8df c150 	ldr.w	ip, [pc, #336]	; 801edb8 <D128_GENERIC+0x398>
 801ec6a:	fb27 ec0c 	smlad	ip, r7, ip, lr
 801ec6e:	f8df e14c 	ldr.w	lr, [pc, #332]	; 801edbc <D128_GENERIC+0x39c>
 801ec72:	fb26 cc0e 	smlad	ip, r6, lr, ip
 801ec76:	f8df e148 	ldr.w	lr, [pc, #328]	; 801edc0 <D128_GENERIC+0x3a0>
 801ec7a:	fb24 ce0e 	smlad	lr, r4, lr, ip
 801ec7e:	f8df c144 	ldr.w	ip, [pc, #324]	; 801edc4 <D128_GENERIC+0x3a4>
 801ec82:	fb20 ee0c 	smlad	lr, r0, ip, lr
 801ec86:	f8df c140 	ldr.w	ip, [pc, #320]	; 801edc8 <D128_GENERIC+0x3a8>
 801ec8a:	fb23 ec0c 	smlad	ip, r3, ip, lr
 801ec8e:	f8df e13c 	ldr.w	lr, [pc, #316]	; 801edcc <D128_GENERIC+0x3ac>
 801ec92:	fb25 c20e 	smlad	r2, r5, lr, ip
 801ec96:	f04f 0c01 	mov.w	ip, #1
 801ec9a:	9202      	str	r2, [sp, #8]
 801ec9c:	fb2b fb0c 	smuad	fp, fp, ip
 801eca0:	f8df c12c 	ldr.w	ip, [pc, #300]	; 801edd0 <D128_GENERIC+0x3b0>
 801eca4:	fb28 bb0c 	smlad	fp, r8, ip, fp
 801eca8:	f8df c128 	ldr.w	ip, [pc, #296]	; 801edd4 <D128_GENERIC+0x3b4>
 801ecac:	fb27 bb0c 	smlad	fp, r7, ip, fp
 801ecb0:	4f3c      	ldr	r7, [pc, #240]	; (801eda4 <D128_GENERIC+0x384>)
 801ecb2:	fb26 bb07 	smlad	fp, r6, r7, fp
 801ecb6:	4f3c      	ldr	r7, [pc, #240]	; (801eda8 <D128_GENERIC+0x388>)
 801ecb8:	fb24 bb07 	smlad	fp, r4, r7, fp
 801ecbc:	4f3b      	ldr	r7, [pc, #236]	; (801edac <D128_GENERIC+0x38c>)
 801ecbe:	fb20 bb07 	smlad	fp, r0, r7, fp
 801ecc2:	4f3b      	ldr	r7, [pc, #236]	; (801edb0 <D128_GENERIC+0x390>)
 801ecc4:	fb23 bb07 	smlad	fp, r3, r7, fp
 801ecc8:	4b3a      	ldr	r3, [pc, #232]	; (801edb4 <D128_GENERIC+0x394>)
 801ecca:	fb25 b303 	smlad	r3, r5, r3, fp
 801ecce:	9303      	str	r3, [sp, #12]
 801ecd0:	f5aa 1480 	sub.w	r4, sl, #1048576	; 0x100000
 801ecd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ecd6:	b183      	cbz	r3, 801ecfa <D128_GENERIC+0x2da>
 801ecd8:	9a06      	ldr	r2, [sp, #24]
 801ecda:	9907      	ldr	r1, [sp, #28]
 801ecdc:	4422      	add	r2, r4
 801ecde:	9407      	str	r4, [sp, #28]
 801ece0:	1a52      	subs	r2, r2, r1
 801ece2:	fba2 0103 	umull	r0, r1, r2, r3
 801ece6:	17d5      	asrs	r5, r2, #31
 801ece8:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
 801ecec:	fb03 1105 	mla	r1, r3, r5, r1
 801ecf0:	f141 0300 	adc.w	r3, r1, #0
 801ecf4:	005b      	lsls	r3, r3, #1
 801ecf6:	461c      	mov	r4, r3
 801ecf8:	9306      	str	r3, [sp, #24]
 801ecfa:	9d01      	ldr	r5, [sp, #4]
 801ecfc:	01e4      	lsls	r4, r4, #7
 801ecfe:	9e05      	ldr	r6, [sp, #20]
 801ed00:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801ed04:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 801ed06:	2300      	movs	r3, #0
 801ed08:	9908      	ldr	r1, [sp, #32]
 801ed0a:	fb06 f000 	mul.w	r0, r6, r0
 801ed0e:	3601      	adds	r6, #1
 801ed10:	fbc1 2304 	smlal	r2, r3, r1, r4
 801ed14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ed16:	109b      	asrs	r3, r3, #2
 801ed18:	9605      	str	r6, [sp, #20]
 801ed1a:	f303 030f 	ssat	r3, #16, r3
 801ed1e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 801ed22:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 801ed24:	42b3      	cmp	r3, r6
 801ed26:	dd13      	ble.n	801ed50 <D128_GENERIC+0x330>
 801ed28:	9b01      	ldr	r3, [sp, #4]
 801ed2a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801ed2c:	2a01      	cmp	r2, #1
 801ed2e:	f47f ae95 	bne.w	801ea5c <D128_GENERIC+0x3c>
 801ed32:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801ed34:	f109 0610 	add.w	r6, r9, #16
 801ed38:	0681      	lsls	r1, r0, #26
 801ed3a:	e9d9 4200 	ldrd	r4, r2, [r9]
 801ed3e:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 801ed42:	d518      	bpl.n	801ed76 <D128_GENERIC+0x356>
 801ed44:	ba64      	rev16	r4, r4
 801ed46:	ba52      	rev16	r2, r2
 801ed48:	ba5b      	rev16	r3, r3
 801ed4a:	ba6d      	rev16	r5, r5
 801ed4c:	46b1      	mov	r9, r6
 801ed4e:	e6da      	b.n	801eb06 <D128_GENERIC+0xe6>
 801ed50:	f8dd a010 	ldr.w	sl, [sp, #16]
 801ed54:	9b01      	ldr	r3, [sp, #4]
 801ed56:	2000      	movs	r0, #0
 801ed58:	9903      	ldr	r1, [sp, #12]
 801ed5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ed5c:	6099      	str	r1, [r3, #8]
 801ed5e:	9902      	ldr	r1, [sp, #8]
 801ed60:	f8c3 a01c 	str.w	sl, [r3, #28]
 801ed64:	60d9      	str	r1, [r3, #12]
 801ed66:	9906      	ldr	r1, [sp, #24]
 801ed68:	619a      	str	r2, [r3, #24]
 801ed6a:	6119      	str	r1, [r3, #16]
 801ed6c:	9907      	ldr	r1, [sp, #28]
 801ed6e:	6159      	str	r1, [r3, #20]
 801ed70:	b00d      	add	sp, #52	; 0x34
 801ed72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed76:	46b1      	mov	r9, r6
 801ed78:	e6c5      	b.n	801eb06 <D128_GENERIC+0xe6>
 801ed7a:	bf00      	nop
 801ed7c:	24000000 	.word	0x24000000
 801ed80:	00780069 	.word	0x00780069
 801ed84:	005b004e 	.word	0x005b004e
 801ed88:	00420037 	.word	0x00420037
 801ed8c:	002d0024 	.word	0x002d0024
 801ed90:	001c0015 	.word	0x001c0015
 801ed94:	000f000a 	.word	0x000f000a
 801ed98:	00060003 	.word	0x00060003
 801ed9c:	00880096 	.word	0x00880096
 801eda0:	00a200ac 	.word	0x00a200ac
 801eda4:	0015001c 	.word	0x0015001c
 801eda8:	0024002d 	.word	0x0024002d
 801edac:	00370042 	.word	0x00370042
 801edb0:	004e005b 	.word	0x004e005b
 801edb4:	00690078 	.word	0x00690078
 801edb8:	00b400ba 	.word	0x00b400ba
 801edbc:	00be00c0 	.word	0x00be00c0
 801edc0:	00c000be 	.word	0x00c000be
 801edc4:	00ba00b4 	.word	0x00ba00b4
 801edc8:	00ac00a2 	.word	0x00ac00a2
 801edcc:	00960088 	.word	0x00960088
 801edd0:	00030006 	.word	0x00030006
 801edd4:	000a000f 	.word	0x000a000f

0801edd8 <D16_1CH_HTONS_VOL_HP>:
 801edd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eddc:	6993      	ldr	r3, [r2, #24]
 801edde:	b087      	sub	sp, #28
 801ede0:	4682      	mov	sl, r0
 801ede2:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 801ede4:	9304      	str	r3, [sp, #16]
 801ede6:	f8d2 b030 	ldr.w	fp, [r2, #48]	; 0x30
 801edea:	69d3      	ldr	r3, [r2, #28]
 801edec:	f8d2 e020 	ldr.w	lr, [r2, #32]
 801edf0:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 801edf4:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 801edf8:	9403      	str	r4, [sp, #12]
 801edfa:	2800      	cmp	r0, #0
 801edfc:	d054      	beq.n	801eea8 <D16_1CH_HTONS_VOL_HP+0xd0>
 801edfe:	f1a1 0902 	sub.w	r9, r1, #2
 801ee02:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 801ee06:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 801eeb4 <D16_1CH_HTONS_VOL_HP+0xdc>
 801ee0a:	4650      	mov	r0, sl
 801ee0c:	9101      	str	r1, [sp, #4]
 801ee0e:	4619      	mov	r1, r3
 801ee10:	f8cd b008 	str.w	fp, [sp, #8]
 801ee14:	9205      	str	r2, [sp, #20]
 801ee16:	f850 3b02 	ldr.w	r3, [r0], #2
 801ee1a:	ba5b      	rev16	r3, r3
 801ee1c:	b2dc      	uxtb	r4, r3
 801ee1e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801ee22:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801ee26:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 801ee2a:	4419      	add	r1, r3
 801ee2c:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 801ee30:	f3c1 0309 	ubfx	r3, r1, #0, #10
 801ee34:	f3c4 0209 	ubfx	r2, r4, #0, #10
 801ee38:	0aa1      	lsrs	r1, r4, #10
 801ee3a:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 801ee3e:	4a1b      	ldr	r2, [pc, #108]	; (801eeac <D16_1CH_HTONS_VOL_HP+0xd4>)
 801ee40:	fb23 5402 	smlad	r4, r3, r2, r5
 801ee44:	4a1a      	ldr	r2, [pc, #104]	; (801eeb0 <D16_1CH_HTONS_VOL_HP+0xd8>)
 801ee46:	fb23 f502 	smuad	r5, r3, r2
 801ee4a:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 801ee4e:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 801ee52:	f04f 0b00 	mov.w	fp, #0
 801ee56:	19a2      	adds	r2, r4, r6
 801ee58:	eba2 020c 	sub.w	r2, r2, ip
 801ee5c:	46a4      	mov	ip, r4
 801ee5e:	17d7      	asrs	r7, r2, #31
 801ee60:	fba2 230e 	umull	r2, r3, r2, lr
 801ee64:	f112 4600 	adds.w	r6, r2, #2147483648	; 0x80000000
 801ee68:	fb0e 3307 	mla	r3, lr, r7, r3
 801ee6c:	f143 0700 	adc.w	r7, r3, #0
 801ee70:	9b02      	ldr	r3, [sp, #8]
 801ee72:	047a      	lsls	r2, r7, #17
 801ee74:	007e      	lsls	r6, r7, #1
 801ee76:	fbc3 ab02 	smlal	sl, fp, r3, r2
 801ee7a:	ea4f 03ab 	mov.w	r3, fp, asr #2
 801ee7e:	f303 030f 	ssat	r3, #16, r3
 801ee82:	f829 3f02 	strh.w	r3, [r9, #2]!
 801ee86:	9b01      	ldr	r3, [sp, #4]
 801ee88:	4298      	cmp	r0, r3
 801ee8a:	d1c4      	bne.n	801ee16 <D16_1CH_HTONS_VOL_HP+0x3e>
 801ee8c:	460b      	mov	r3, r1
 801ee8e:	9a05      	ldr	r2, [sp, #20]
 801ee90:	2000      	movs	r0, #0
 801ee92:	9903      	ldr	r1, [sp, #12]
 801ee94:	61d3      	str	r3, [r2, #28]
 801ee96:	9b04      	ldr	r3, [sp, #16]
 801ee98:	6095      	str	r5, [r2, #8]
 801ee9a:	60d1      	str	r1, [r2, #12]
 801ee9c:	6193      	str	r3, [r2, #24]
 801ee9e:	e9c2 6404 	strd	r6, r4, [r2, #16]
 801eea2:	b007      	add	sp, #28
 801eea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eea8:	4664      	mov	r4, ip
 801eeaa:	e7f1      	b.n	801ee90 <D16_1CH_HTONS_VOL_HP+0xb8>
 801eeac:	00030001 	.word	0x00030001
 801eeb0:	00010003 	.word	0x00010003
 801eeb4:	24000000 	.word	0x24000000

0801eeb8 <D24_1CH_HTONS_VOL_HP>:
 801eeb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eebc:	6b16      	ldr	r6, [r2, #48]	; 0x30
 801eebe:	b089      	sub	sp, #36	; 0x24
 801eec0:	6993      	ldr	r3, [r2, #24]
 801eec2:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 801eec4:	9604      	str	r6, [sp, #16]
 801eec6:	6a16      	ldr	r6, [r2, #32]
 801eec8:	9306      	str	r3, [sp, #24]
 801eeca:	9505      	str	r5, [sp, #20]
 801eecc:	69d3      	ldr	r3, [r2, #28]
 801eece:	9600      	str	r6, [sp, #0]
 801eed0:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 801eed4:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 801eed8:	2d00      	cmp	r5, #0
 801eeda:	f000 8083 	beq.w	801efe4 <D24_1CH_HTONS_VOL_HP+0x12c>
 801eede:	9207      	str	r2, [sp, #28]
 801eee0:	2600      	movs	r6, #0
 801eee2:	4622      	mov	r2, r4
 801eee4:	f1a1 0b02 	sub.w	fp, r1, #2
 801eee8:	4f3f      	ldr	r7, [pc, #252]	; (801efe8 <D24_1CH_HTONS_VOL_HP+0x130>)
 801eeea:	461d      	mov	r5, r3
 801eeec:	f8cd a00c 	str.w	sl, [sp, #12]
 801eef0:	9c00      	ldr	r4, [sp, #0]
 801eef2:	e056      	b.n	801efa2 <D24_1CH_HTONS_VOL_HP+0xea>
 801eef4:	7841      	ldrb	r1, [r0, #1]
 801eef6:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 801eefa:	3002      	adds	r0, #2
 801eefc:	4488      	add	r8, r1
 801eefe:	fa5f f388 	uxtb.w	r3, r8
 801ef02:	f3c8 2907 	ubfx	r9, r8, #8, #8
 801ef06:	ea4f 4818 	mov.w	r8, r8, lsr #16
 801ef0a:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 801ef0e:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 801ef12:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 801ef16:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 801ef1a:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 801ef1e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801ef22:	f3c8 0309 	ubfx	r3, r8, #0, #10
 801ef26:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 801ef2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801ef2e:	492f      	ldr	r1, [pc, #188]	; (801efec <D24_1CH_HTONS_VOL_HP+0x134>)
 801ef30:	fb23 e901 	smlad	r9, r3, r1, lr
 801ef34:	492e      	ldr	r1, [pc, #184]	; (801eff0 <D24_1CH_HTONS_VOL_HP+0x138>)
 801ef36:	fb23 ce01 	smlad	lr, r3, r1, ip
 801ef3a:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 801ef3e:	2101      	movs	r1, #1
 801ef40:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 801ef44:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 801ef48:	fb23 f301 	smuad	r3, r3, r1
 801ef4c:	f5a9 51d8 	sub.w	r1, r9, #6912	; 0x1b00
 801ef50:	eb08 0c03 	add.w	ip, r8, r3
 801ef54:	9b03      	ldr	r3, [sp, #12]
 801ef56:	f04f 0a00 	mov.w	sl, #0
 801ef5a:	440a      	add	r2, r1
 801ef5c:	3601      	adds	r6, #1
 801ef5e:	9103      	str	r1, [sp, #12]
 801ef60:	1ad2      	subs	r2, r2, r3
 801ef62:	ea4f 79e2 	mov.w	r9, r2, asr #31
 801ef66:	fba2 2304 	umull	r2, r3, r2, r4
 801ef6a:	e9cd 2300 	strd	r2, r3, [sp]
 801ef6e:	fb04 3309 	mla	r3, r4, r9, r3
 801ef72:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 801ef76:	9301      	str	r3, [sp, #4]
 801ef78:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ef7c:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 801ef80:	f143 0300 	adc.w	r3, r3, #0
 801ef84:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 801ef88:	005a      	lsls	r2, r3, #1
 801ef8a:	9b04      	ldr	r3, [sp, #16]
 801ef8c:	fbc3 9a08 	smlal	r9, sl, r3, r8
 801ef90:	ea4f 03aa 	mov.w	r3, sl, asr #2
 801ef94:	f303 030f 	ssat	r3, #16, r3
 801ef98:	f82b 3f02 	strh.w	r3, [fp, #2]!
 801ef9c:	9b05      	ldr	r3, [sp, #20]
 801ef9e:	429e      	cmp	r6, r3
 801efa0:	d010      	beq.n	801efc4 <D24_1CH_HTONS_VOL_HP+0x10c>
 801efa2:	f890 9003 	ldrb.w	r9, [r0, #3]
 801efa6:	f016 0f01 	tst.w	r6, #1
 801efaa:	7801      	ldrb	r1, [r0, #0]
 801efac:	ea4f 2309 	mov.w	r3, r9, lsl #8
 801efb0:	ea4f 2801 	mov.w	r8, r1, lsl #8
 801efb4:	d09e      	beq.n	801eef4 <D24_1CH_HTONS_VOL_HP+0x3c>
 801efb6:	f890 8002 	ldrb.w	r8, [r0, #2]
 801efba:	3004      	adds	r0, #4
 801efbc:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 801efc0:	4488      	add	r8, r1
 801efc2:	e79c      	b.n	801eefe <D24_1CH_HTONS_VOL_HP+0x46>
 801efc4:	4614      	mov	r4, r2
 801efc6:	462b      	mov	r3, r5
 801efc8:	9a07      	ldr	r2, [sp, #28]
 801efca:	2000      	movs	r0, #0
 801efcc:	61d3      	str	r3, [r2, #28]
 801efce:	9b06      	ldr	r3, [sp, #24]
 801efd0:	f8c2 c008 	str.w	ip, [r2, #8]
 801efd4:	f8c2 e00c 	str.w	lr, [r2, #12]
 801efd8:	6193      	str	r3, [r2, #24]
 801efda:	e9c2 4104 	strd	r4, r1, [r2, #16]
 801efde:	b009      	add	sp, #36	; 0x24
 801efe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801efe4:	4651      	mov	r1, sl
 801efe6:	e7f0      	b.n	801efca <D24_1CH_HTONS_VOL_HP+0x112>
 801efe8:	24000000 	.word	0x24000000
 801efec:	00030001 	.word	0x00030001
 801eff0:	00060007 	.word	0x00060007

0801eff4 <D32_1CH_HTONS_VOL_HP>:
 801eff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eff8:	6993      	ldr	r3, [r2, #24]
 801effa:	b087      	sub	sp, #28
 801effc:	4683      	mov	fp, r0
 801effe:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 801f000:	9304      	str	r3, [sp, #16]
 801f002:	69d5      	ldr	r5, [r2, #28]
 801f004:	6b14      	ldr	r4, [r2, #48]	; 0x30
 801f006:	f8d2 a020 	ldr.w	sl, [r2, #32]
 801f00a:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 801f00e:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 801f012:	2800      	cmp	r0, #0
 801f014:	d077      	beq.n	801f106 <D32_1CH_HTONS_VOL_HP+0x112>
 801f016:	460f      	mov	r7, r1
 801f018:	46f1      	mov	r9, lr
 801f01a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 801f01e:	f8cd 8000 	str.w	r8, [sp]
 801f022:	4e3a      	ldr	r6, [pc, #232]	; (801f10c <D32_1CH_HTONS_VOL_HP+0x118>)
 801f024:	469e      	mov	lr, r3
 801f026:	46a0      	mov	r8, r4
 801f028:	9103      	str	r1, [sp, #12]
 801f02a:	9205      	str	r2, [sp, #20]
 801f02c:	f85b 4b04 	ldr.w	r4, [fp], #4
 801f030:	ba64      	rev16	r4, r4
 801f032:	b2e0      	uxtb	r0, r4
 801f034:	f3c4 2307 	ubfx	r3, r4, #8, #8
 801f038:	f3c4 4107 	ubfx	r1, r4, #16, #8
 801f03c:	0e24      	lsrs	r4, r4, #24
 801f03e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801f042:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801f046:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 801f04a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f04e:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 801f052:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 801f056:	f3c0 0009 	ubfx	r0, r0, #0, #10
 801f05a:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 801f05e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801f062:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 801f066:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801f06a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801f06e:	f3c5 0009 	ubfx	r0, r5, #0, #10
 801f072:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 801f076:	4826      	ldr	r0, [pc, #152]	; (801f110 <D32_1CH_HTONS_VOL_HP+0x11c>)
 801f078:	fb23 c400 	smlad	r4, r3, r0, ip
 801f07c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801f080:	fb21 4402 	smlad	r4, r1, r2, r4
 801f084:	4823      	ldr	r0, [pc, #140]	; (801f114 <D32_1CH_HTONS_VOL_HP+0x120>)
 801f086:	fb23 ec00 	smlad	ip, r3, r0, lr
 801f08a:	4823      	ldr	r0, [pc, #140]	; (801f118 <D32_1CH_HTONS_VOL_HP+0x124>)
 801f08c:	fb21 cc00 	smlad	ip, r1, r0, ip
 801f090:	2201      	movs	r2, #1
 801f092:	fb23 f302 	smuad	r3, r3, r2
 801f096:	4821      	ldr	r0, [pc, #132]	; (801f11c <D32_1CH_HTONS_VOL_HP+0x128>)
 801f098:	fb21 3e00 	smlad	lr, r1, r0, r3
 801f09c:	9b00      	ldr	r3, [sp, #0]
 801f09e:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
 801f0a2:	4423      	add	r3, r4
 801f0a4:	eba3 0209 	sub.w	r2, r3, r9
 801f0a8:	46a1      	mov	r9, r4
 801f0aa:	17d1      	asrs	r1, r2, #31
 801f0ac:	fba2 230a 	umull	r2, r3, r2, sl
 801f0b0:	e9cd 2300 	strd	r2, r3, [sp]
 801f0b4:	fb0a 3301 	mla	r3, sl, r1, r3
 801f0b8:	9301      	str	r3, [sp, #4]
 801f0ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f0be:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 801f0c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801f0c6:	f143 0300 	adc.w	r3, r3, #0
 801f0ca:	0399      	lsls	r1, r3, #14
 801f0cc:	005b      	lsls	r3, r3, #1
 801f0ce:	9300      	str	r3, [sp, #0]
 801f0d0:	2300      	movs	r3, #0
 801f0d2:	fbc8 2301 	smlal	r2, r3, r8, r1
 801f0d6:	109b      	asrs	r3, r3, #2
 801f0d8:	f303 030f 	ssat	r3, #16, r3
 801f0dc:	f827 3b02 	strh.w	r3, [r7], #2
 801f0e0:	9b03      	ldr	r3, [sp, #12]
 801f0e2:	429f      	cmp	r7, r3
 801f0e4:	d1a2      	bne.n	801f02c <D32_1CH_HTONS_VOL_HP+0x38>
 801f0e6:	4673      	mov	r3, lr
 801f0e8:	f8dd 8000 	ldr.w	r8, [sp]
 801f0ec:	9a05      	ldr	r2, [sp, #20]
 801f0ee:	6093      	str	r3, [r2, #8]
 801f0f0:	2000      	movs	r0, #0
 801f0f2:	9b04      	ldr	r3, [sp, #16]
 801f0f4:	f8c2 c00c 	str.w	ip, [r2, #12]
 801f0f8:	61d5      	str	r5, [r2, #28]
 801f0fa:	6193      	str	r3, [r2, #24]
 801f0fc:	e9c2 8404 	strd	r8, r4, [r2, #16]
 801f100:	b007      	add	sp, #28
 801f102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f106:	4674      	mov	r4, lr
 801f108:	e7f1      	b.n	801f0ee <D32_1CH_HTONS_VOL_HP+0xfa>
 801f10a:	bf00      	nop
 801f10c:	24000000 	.word	0x24000000
 801f110:	00060003 	.word	0x00060003
 801f114:	000a000c 	.word	0x000a000c
 801f118:	000c000a 	.word	0x000c000a
 801f11c:	00030006 	.word	0x00030006

0801f120 <D48_1CH_HTONS_VOL_HP>:
 801f120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f124:	6b17      	ldr	r7, [r2, #48]	; 0x30
 801f126:	b087      	sub	sp, #28
 801f128:	6993      	ldr	r3, [r2, #24]
 801f12a:	9701      	str	r7, [sp, #4]
 801f12c:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 801f12e:	6a17      	ldr	r7, [r2, #32]
 801f130:	9304      	str	r3, [sp, #16]
 801f132:	69d6      	ldr	r6, [r2, #28]
 801f134:	9702      	str	r7, [sp, #8]
 801f136:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 801f13a:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 801f13e:	2d00      	cmp	r5, #0
 801f140:	f000 8093 	beq.w	801f26a <D48_1CH_HTONS_VOL_HP+0x14a>
 801f144:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f148:	f1a1 0b02 	sub.w	fp, r1, #2
 801f14c:	46f2      	mov	sl, lr
 801f14e:	4f48      	ldr	r7, [pc, #288]	; (801f270 <D48_1CH_HTONS_VOL_HP+0x150>)
 801f150:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 801f154:	469e      	mov	lr, r3
 801f156:	9205      	str	r2, [sp, #20]
 801f158:	9103      	str	r1, [sp, #12]
 801f15a:	e9d0 3200 	ldrd	r3, r2, [r0]
 801f15e:	3006      	adds	r0, #6
 801f160:	ba5b      	rev16	r3, r3
 801f162:	fa92 f992 	rev16.w	r9, r2
 801f166:	b2dd      	uxtb	r5, r3
 801f168:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801f16c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801f170:	0e1b      	lsrs	r3, r3, #24
 801f172:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801f176:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 801f17a:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 801f17e:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 801f182:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801f186:	fa5f f289 	uxtb.w	r2, r9
 801f18a:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 801f18e:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801f192:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801f196:	f3c6 0809 	ubfx	r8, r6, #0, #10
 801f19a:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 801f19e:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 801f1a2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801f1a6:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 801f1aa:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801f1ae:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 801f1b2:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 801f1b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801f1ba:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 801f1be:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801f1c2:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 801f1c6:	f3c6 0309 	ubfx	r3, r6, #0, #10
 801f1ca:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 801f1ce:	4b29      	ldr	r3, [pc, #164]	; (801f274 <D48_1CH_HTONS_VOL_HP+0x154>)
 801f1d0:	fb28 c103 	smlad	r1, r8, r3, ip
 801f1d4:	4b28      	ldr	r3, [pc, #160]	; (801f278 <D48_1CH_HTONS_VOL_HP+0x158>)
 801f1d6:	fb25 1103 	smlad	r1, r5, r3, r1
 801f1da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801f1de:	fb22 1903 	smlad	r9, r2, r3, r1
 801f1e2:	4b26      	ldr	r3, [pc, #152]	; (801f27c <D48_1CH_HTONS_VOL_HP+0x15c>)
 801f1e4:	fb28 ec03 	smlad	ip, r8, r3, lr
 801f1e8:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 801f1ec:	fb25 cc03 	smlad	ip, r5, r3, ip
 801f1f0:	4b23      	ldr	r3, [pc, #140]	; (801f280 <D48_1CH_HTONS_VOL_HP+0x160>)
 801f1f2:	fb22 cc03 	smlad	ip, r2, r3, ip
 801f1f6:	2101      	movs	r1, #1
 801f1f8:	fb28 f801 	smuad	r8, r8, r1
 801f1fc:	4b21      	ldr	r3, [pc, #132]	; (801f284 <D48_1CH_HTONS_VOL_HP+0x164>)
 801f1fe:	fb25 8503 	smlad	r5, r5, r3, r8
 801f202:	4b21      	ldr	r3, [pc, #132]	; (801f288 <D48_1CH_HTONS_VOL_HP+0x168>)
 801f204:	fb22 5e03 	smlad	lr, r2, r3, r5
 801f208:	f5a9 4158 	sub.w	r1, r9, #55296	; 0xd800
 801f20c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 801f210:	190a      	adds	r2, r1, r4
 801f212:	9c02      	ldr	r4, [sp, #8]
 801f214:	eba2 020a 	sub.w	r2, r2, sl
 801f218:	468a      	mov	sl, r1
 801f21a:	ea4f 79e2 	mov.w	r9, r2, asr #31
 801f21e:	fba2 2304 	umull	r2, r3, r2, r4
 801f222:	fb04 3309 	mla	r3, r4, r9, r3
 801f226:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 801f22a:	f04f 0900 	mov.w	r9, #0
 801f22e:	f143 0500 	adc.w	r5, r3, #0
 801f232:	9b01      	ldr	r3, [sp, #4]
 801f234:	032a      	lsls	r2, r5, #12
 801f236:	006c      	lsls	r4, r5, #1
 801f238:	fbc3 8902 	smlal	r8, r9, r3, r2
 801f23c:	ea4f 03a9 	mov.w	r3, r9, asr #2
 801f240:	f303 030f 	ssat	r3, #16, r3
 801f244:	f82b 3f02 	strh.w	r3, [fp, #2]!
 801f248:	9b03      	ldr	r3, [sp, #12]
 801f24a:	4283      	cmp	r3, r0
 801f24c:	d185      	bne.n	801f15a <D48_1CH_HTONS_VOL_HP+0x3a>
 801f24e:	4673      	mov	r3, lr
 801f250:	9a05      	ldr	r2, [sp, #20]
 801f252:	6093      	str	r3, [r2, #8]
 801f254:	2000      	movs	r0, #0
 801f256:	9b04      	ldr	r3, [sp, #16]
 801f258:	f8c2 c00c 	str.w	ip, [r2, #12]
 801f25c:	61d6      	str	r6, [r2, #28]
 801f25e:	6193      	str	r3, [r2, #24]
 801f260:	e9c2 4104 	strd	r4, r1, [r2, #16]
 801f264:	b007      	add	sp, #28
 801f266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f26a:	4671      	mov	r1, lr
 801f26c:	e7f1      	b.n	801f252 <D48_1CH_HTONS_VOL_HP+0x132>
 801f26e:	bf00      	nop
 801f270:	24000000 	.word	0x24000000
 801f274:	000f000a 	.word	0x000f000a
 801f278:	00060003 	.word	0x00060003
 801f27c:	00150019 	.word	0x00150019
 801f280:	00190015 	.word	0x00190015
 801f284:	00030006 	.word	0x00030006
 801f288:	000a000f 	.word	0x000a000f

0801f28c <D64_1CH_HTONS_VOL_HP>:
 801f28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f290:	6b15      	ldr	r5, [r2, #48]	; 0x30
 801f292:	b089      	sub	sp, #36	; 0x24
 801f294:	6993      	ldr	r3, [r2, #24]
 801f296:	4686      	mov	lr, r0
 801f298:	9503      	str	r5, [sp, #12]
 801f29a:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 801f29c:	6a15      	ldr	r5, [r2, #32]
 801f29e:	9306      	str	r3, [sp, #24]
 801f2a0:	69d6      	ldr	r6, [r2, #28]
 801f2a2:	9504      	str	r5, [sp, #16]
 801f2a4:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 801f2a8:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 801f2ac:	2800      	cmp	r0, #0
 801f2ae:	f000 80a4 	beq.w	801f3fa <D64_1CH_HTONS_VOL_HP+0x16e>
 801f2b2:	460f      	mov	r7, r1
 801f2b4:	46f1      	mov	r9, lr
 801f2b6:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 801f2ba:	4d56      	ldr	r5, [pc, #344]	; (801f414 <D64_1CH_HTONS_VOL_HP+0x188>)
 801f2bc:	46a2      	mov	sl, r4
 801f2be:	469e      	mov	lr, r3
 801f2c0:	9105      	str	r1, [sp, #20]
 801f2c2:	9207      	str	r2, [sp, #28]
 801f2c4:	f859 1b08 	ldr.w	r1, [r9], #8
 801f2c8:	f859 3c04 	ldr.w	r3, [r9, #-4]
 801f2cc:	ba49      	rev16	r1, r1
 801f2ce:	fa93 fb93 	rev16.w	fp, r3
 801f2d2:	b2cb      	uxtb	r3, r1
 801f2d4:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801f2d8:	f3c1 4007 	ubfx	r0, r1, #16, #8
 801f2dc:	0e09      	lsrs	r1, r1, #24
 801f2de:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 801f2e2:	fa5f f38b 	uxtb.w	r3, fp
 801f2e6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801f2ea:	4426      	add	r6, r4
 801f2ec:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 801f2f0:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801f2f4:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 801f2f8:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801f2fc:	f3c6 0609 	ubfx	r6, r6, #0, #10
 801f300:	f3cb 2307 	ubfx	r3, fp, #8, #8
 801f304:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 801f308:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801f30c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801f310:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 801f314:	f3c4 0409 	ubfx	r4, r4, #0, #10
 801f318:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 801f31c:	f3cb 4607 	ubfx	r6, fp, #16, #8
 801f320:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 801f324:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801f328:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801f32c:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 801f330:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 801f334:	f3c0 0009 	ubfx	r0, r0, #0, #10
 801f338:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 801f33c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801f340:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 801f344:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801f348:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 801f34c:	f3c6 0409 	ubfx	r4, r6, #0, #10
 801f350:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801f354:	f3cb 0009 	ubfx	r0, fp, #0, #10
 801f358:	ea4f 269b 	mov.w	r6, fp, lsr #10
 801f35c:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 801f360:	482d      	ldr	r0, [pc, #180]	; (801f418 <D64_1CH_HTONS_VOL_HP+0x18c>)
 801f362:	fb22 cc00 	smlad	ip, r2, r0, ip
 801f366:	482d      	ldr	r0, [pc, #180]	; (801f41c <D64_1CH_HTONS_VOL_HP+0x190>)
 801f368:	fb21 cc00 	smlad	ip, r1, r0, ip
 801f36c:	482c      	ldr	r0, [pc, #176]	; (801f420 <D64_1CH_HTONS_VOL_HP+0x194>)
 801f36e:	fb23 cc00 	smlad	ip, r3, r0, ip
 801f372:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 801f376:	fb2b c404 	smlad	r4, fp, r4, ip
 801f37a:	482a      	ldr	r0, [pc, #168]	; (801f424 <D64_1CH_HTONS_VOL_HP+0x198>)
 801f37c:	fb22 ec00 	smlad	ip, r2, r0, lr
 801f380:	fb2b cc10 	smladx	ip, fp, r0, ip
 801f384:	4828      	ldr	r0, [pc, #160]	; (801f428 <D64_1CH_HTONS_VOL_HP+0x19c>)
 801f386:	fb21 cc00 	smlad	ip, r1, r0, ip
 801f38a:	fb23 cc10 	smladx	ip, r3, r0, ip
 801f38e:	f04f 0e01 	mov.w	lr, #1
 801f392:	fb22 f20e 	smuad	r2, r2, lr
 801f396:	4825      	ldr	r0, [pc, #148]	; (801f42c <D64_1CH_HTONS_VOL_HP+0x1a0>)
 801f398:	fb21 2100 	smlad	r1, r1, r0, r2
 801f39c:	4a24      	ldr	r2, [pc, #144]	; (801f430 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 801f39e:	fb23 1302 	smlad	r3, r3, r2, r1
 801f3a2:	4a24      	ldr	r2, [pc, #144]	; (801f434 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 801f3a4:	fb2b 3e02 	smlad	lr, fp, r2, r3
 801f3a8:	f5a4 3400 	sub.w	r4, r4, #131072	; 0x20000
 801f3ac:	eb04 0208 	add.w	r2, r4, r8
 801f3b0:	eba2 020a 	sub.w	r2, r2, sl
 801f3b4:	46a2      	mov	sl, r4
 801f3b6:	4610      	mov	r0, r2
 801f3b8:	17d1      	asrs	r1, r2, #31
 801f3ba:	e9cd 0100 	strd	r0, r1, [sp]
 801f3be:	9904      	ldr	r1, [sp, #16]
 801f3c0:	9801      	ldr	r0, [sp, #4]
 801f3c2:	fba2 2301 	umull	r2, r3, r2, r1
 801f3c6:	fb01 3300 	mla	r3, r1, r0, r3
 801f3ca:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 801f3ce:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 801f3d2:	f143 0100 	adc.w	r1, r3, #0
 801f3d6:	9b03      	ldr	r3, [sp, #12]
 801f3d8:	02ca      	lsls	r2, r1, #11
 801f3da:	ea4f 0841 	mov.w	r8, r1, lsl #1
 801f3de:	2100      	movs	r1, #0
 801f3e0:	fbc3 0102 	smlal	r0, r1, r3, r2
 801f3e4:	108b      	asrs	r3, r1, #2
 801f3e6:	f303 030f 	ssat	r3, #16, r3
 801f3ea:	f827 3b02 	strh.w	r3, [r7], #2
 801f3ee:	9b05      	ldr	r3, [sp, #20]
 801f3f0:	429f      	cmp	r7, r3
 801f3f2:	f47f af67 	bne.w	801f2c4 <D64_1CH_HTONS_VOL_HP+0x38>
 801f3f6:	4673      	mov	r3, lr
 801f3f8:	9a07      	ldr	r2, [sp, #28]
 801f3fa:	6093      	str	r3, [r2, #8]
 801f3fc:	2000      	movs	r0, #0
 801f3fe:	9b06      	ldr	r3, [sp, #24]
 801f400:	f8c2 c00c 	str.w	ip, [r2, #12]
 801f404:	61d6      	str	r6, [r2, #28]
 801f406:	6193      	str	r3, [r2, #24]
 801f408:	e9c2 8404 	strd	r8, r4, [r2, #16]
 801f40c:	b009      	add	sp, #36	; 0x24
 801f40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f412:	bf00      	nop
 801f414:	24000000 	.word	0x24000000
 801f418:	001c0015 	.word	0x001c0015
 801f41c:	000f000a 	.word	0x000f000a
 801f420:	00060003 	.word	0x00060003
 801f424:	0024002a 	.word	0x0024002a
 801f428:	002e0030 	.word	0x002e0030
 801f42c:	00030006 	.word	0x00030006
 801f430:	000a000f 	.word	0x000a000f
 801f434:	0015001c 	.word	0x0015001c

0801f438 <D80_1CH_HTONS_VOL_HP>:
 801f438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f43c:	6913      	ldr	r3, [r2, #16]
 801f43e:	b089      	sub	sp, #36	; 0x24
 801f440:	6b16      	ldr	r6, [r2, #48]	; 0x30
 801f442:	9301      	str	r3, [sp, #4]
 801f444:	9603      	str	r6, [sp, #12]
 801f446:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 801f448:	6a16      	ldr	r6, [r2, #32]
 801f44a:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 801f44e:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 801f452:	9306      	str	r3, [sp, #24]
 801f454:	9604      	str	r6, [sp, #16]
 801f456:	69d3      	ldr	r3, [r2, #28]
 801f458:	2c00      	cmp	r4, #0
 801f45a:	f000 80ce 	beq.w	801f5fa <D80_1CH_HTONS_VOL_HP+0x1c2>
 801f45e:	3902      	subs	r1, #2
 801f460:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801f464:	4e66      	ldr	r6, [pc, #408]	; (801f600 <D80_1CH_HTONS_VOL_HP+0x1c8>)
 801f466:	469e      	mov	lr, r3
 801f468:	9102      	str	r1, [sp, #8]
 801f46a:	46aa      	mov	sl, r5
 801f46c:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 801f470:	9207      	str	r2, [sp, #28]
 801f472:	9105      	str	r1, [sp, #20]
 801f474:	6883      	ldr	r3, [r0, #8]
 801f476:	e9d0 4200 	ldrd	r4, r2, [r0]
 801f47a:	300a      	adds	r0, #10
 801f47c:	ba64      	rev16	r4, r4
 801f47e:	ba52      	rev16	r2, r2
 801f480:	fa93 fb93 	rev16.w	fp, r3
 801f484:	b2e5      	uxtb	r5, r4
 801f486:	f3c4 2307 	ubfx	r3, r4, #8, #8
 801f48a:	f3c4 4107 	ubfx	r1, r4, #16, #8
 801f48e:	0e24      	lsrs	r4, r4, #24
 801f490:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 801f494:	b2d5      	uxtb	r5, r2
 801f496:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801f49a:	44c6      	add	lr, r8
 801f49c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f4a0:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 801f4a4:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 801f4a8:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 801f4ac:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 801f4b0:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 801f4b4:	f3c2 2107 	ubfx	r1, r2, #8, #8
 801f4b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801f4bc:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 801f4c0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f4c4:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 801f4c8:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 801f4cc:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 801f4d0:	f3c2 4507 	ubfx	r5, r2, #16, #8
 801f4d4:	0e12      	lsrs	r2, r2, #24
 801f4d6:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 801f4da:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 801f4de:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 801f4e2:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 801f4e6:	fa5f fb8b 	uxtb.w	fp, fp
 801f4ea:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 801f4ee:	f3c8 0809 	ubfx	r8, r8, #0, #10
 801f4f2:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 801f4f6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801f4fa:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 801f4fe:	f3c9 0909 	ubfx	r9, r9, #0, #10
 801f502:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801f506:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 801f50a:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 801f50e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 801f512:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801f516:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 801f51a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 801f51e:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 801f522:	f3ce 0109 	ubfx	r1, lr, #0, #10
 801f526:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 801f52a:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 801f52e:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 801f532:	4934      	ldr	r1, [pc, #208]	; (801f604 <D80_1CH_HTONS_VOL_HP+0x1cc>)
 801f534:	fb23 cc01 	smlad	ip, r3, r1, ip
 801f538:	4933      	ldr	r1, [pc, #204]	; (801f608 <D80_1CH_HTONS_VOL_HP+0x1d0>)
 801f53a:	fb24 cc01 	smlad	ip, r4, r1, ip
 801f53e:	4933      	ldr	r1, [pc, #204]	; (801f60c <D80_1CH_HTONS_VOL_HP+0x1d4>)
 801f540:	fb28 cc01 	smlad	ip, r8, r1, ip
 801f544:	4932      	ldr	r1, [pc, #200]	; (801f610 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 801f546:	fb22 cc01 	smlad	ip, r2, r1, ip
 801f54a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 801f54e:	fb2b c901 	smlad	r9, fp, r1, ip
 801f552:	4930      	ldr	r1, [pc, #192]	; (801f614 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 801f554:	fb23 7701 	smlad	r7, r3, r1, r7
 801f558:	492f      	ldr	r1, [pc, #188]	; (801f618 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 801f55a:	fb24 7701 	smlad	r7, r4, r1, r7
 801f55e:	f04f 1c4b 	mov.w	ip, #4915275	; 0x4b004b
 801f562:	fb28 7c0c 	smlad	ip, r8, ip, r7
 801f566:	492d      	ldr	r1, [pc, #180]	; (801f61c <D80_1CH_HTONS_VOL_HP+0x1e4>)
 801f568:	fb22 cc01 	smlad	ip, r2, r1, ip
 801f56c:	492c      	ldr	r1, [pc, #176]	; (801f620 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 801f56e:	fb2b cc01 	smlad	ip, fp, r1, ip
 801f572:	2101      	movs	r1, #1
 801f574:	fb23 f301 	smuad	r3, r3, r1
 801f578:	492a      	ldr	r1, [pc, #168]	; (801f624 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 801f57a:	fb24 3401 	smlad	r4, r4, r1, r3
 801f57e:	492a      	ldr	r1, [pc, #168]	; (801f628 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 801f580:	fb28 4101 	smlad	r1, r8, r1, r4
 801f584:	4f29      	ldr	r7, [pc, #164]	; (801f62c <D80_1CH_HTONS_VOL_HP+0x1f4>)
 801f586:	fb22 1207 	smlad	r2, r2, r7, r1
 801f58a:	4f29      	ldr	r7, [pc, #164]	; (801f630 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 801f58c:	fb2b 2707 	smlad	r7, fp, r7, r2
 801f590:	f5a9 317a 	sub.w	r1, r9, #256000	; 0x3e800
 801f594:	9b01      	ldr	r3, [sp, #4]
 801f596:	9c04      	ldr	r4, [sp, #16]
 801f598:	440b      	add	r3, r1
 801f59a:	eba3 020a 	sub.w	r2, r3, sl
 801f59e:	468a      	mov	sl, r1
 801f5a0:	ea4f 79e2 	mov.w	r9, r2, asr #31
 801f5a4:	fba2 2304 	umull	r2, r3, r2, r4
 801f5a8:	fb04 3309 	mla	r3, r4, r9, r3
 801f5ac:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 801f5b0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801f5b4:	f143 0500 	adc.w	r5, r3, #0
 801f5b8:	006b      	lsls	r3, r5, #1
 801f5ba:	02aa      	lsls	r2, r5, #10
 801f5bc:	2500      	movs	r5, #0
 801f5be:	9301      	str	r3, [sp, #4]
 801f5c0:	9b03      	ldr	r3, [sp, #12]
 801f5c2:	fbc3 4502 	smlal	r4, r5, r3, r2
 801f5c6:	9a02      	ldr	r2, [sp, #8]
 801f5c8:	10ab      	asrs	r3, r5, #2
 801f5ca:	f303 030f 	ssat	r3, #16, r3
 801f5ce:	f822 3f02 	strh.w	r3, [r2, #2]!
 801f5d2:	9b05      	ldr	r3, [sp, #20]
 801f5d4:	9202      	str	r2, [sp, #8]
 801f5d6:	4298      	cmp	r0, r3
 801f5d8:	f47f af4c 	bne.w	801f474 <D80_1CH_HTONS_VOL_HP+0x3c>
 801f5dc:	4673      	mov	r3, lr
 801f5de:	9a07      	ldr	r2, [sp, #28]
 801f5e0:	61d3      	str	r3, [r2, #28]
 801f5e2:	2000      	movs	r0, #0
 801f5e4:	9b01      	ldr	r3, [sp, #4]
 801f5e6:	6097      	str	r7, [r2, #8]
 801f5e8:	f8c2 c00c 	str.w	ip, [r2, #12]
 801f5ec:	e9c2 3104 	strd	r3, r1, [r2, #16]
 801f5f0:	9b06      	ldr	r3, [sp, #24]
 801f5f2:	6193      	str	r3, [r2, #24]
 801f5f4:	b009      	add	sp, #36	; 0x24
 801f5f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f5fa:	4629      	mov	r1, r5
 801f5fc:	e7f0      	b.n	801f5e0 <D80_1CH_HTONS_VOL_HP+0x1a8>
 801f5fe:	bf00      	nop
 801f600:	24000000 	.word	0x24000000
 801f604:	002d0024 	.word	0x002d0024
 801f608:	001c0015 	.word	0x001c0015
 801f60c:	000f000a 	.word	0x000f000a
 801f610:	00060003 	.word	0x00060003
 801f614:	0037003f 	.word	0x0037003f
 801f618:	00450049 	.word	0x00450049
 801f61c:	00490045 	.word	0x00490045
 801f620:	003f0037 	.word	0x003f0037
 801f624:	00030006 	.word	0x00030006
 801f628:	000a000f 	.word	0x000a000f
 801f62c:	0015001c 	.word	0x0015001c
 801f630:	0024002d 	.word	0x0024002d

0801f634 <D128_1CH_HTONS_VOL_HP>:
 801f634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f638:	6914      	ldr	r4, [r2, #16]
 801f63a:	b08d      	sub	sp, #52	; 0x34
 801f63c:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 801f63e:	9404      	str	r4, [sp, #16]
 801f640:	6954      	ldr	r4, [r2, #20]
 801f642:	920b      	str	r2, [sp, #44]	; 0x2c
 801f644:	9405      	str	r4, [sp, #20]
 801f646:	6994      	ldr	r4, [r2, #24]
 801f648:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 801f64c:	940a      	str	r4, [sp, #40]	; 0x28
 801f64e:	6894      	ldr	r4, [r2, #8]
 801f650:	9403      	str	r4, [sp, #12]
 801f652:	68d4      	ldr	r4, [r2, #12]
 801f654:	9402      	str	r4, [sp, #8]
 801f656:	6b14      	ldr	r4, [r2, #48]	; 0x30
 801f658:	6a12      	ldr	r2, [r2, #32]
 801f65a:	9407      	str	r4, [sp, #28]
 801f65c:	9208      	str	r2, [sp, #32]
 801f65e:	2b00      	cmp	r3, #0
 801f660:	f000 812e 	beq.w	801f8c0 <D128_1CH_HTONS_VOL_HP+0x28c>
 801f664:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801f668:	f100 0b10 	add.w	fp, r0, #16
 801f66c:	f8df 9290 	ldr.w	r9, [pc, #656]	; 801f900 <D128_1CH_HTONS_VOL_HP+0x2cc>
 801f670:	9106      	str	r1, [sp, #24]
 801f672:	9309      	str	r3, [sp, #36]	; 0x24
 801f674:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 801f678:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 801f67c:	ba40      	rev16	r0, r0
 801f67e:	ba52      	rev16	r2, r2
 801f680:	ba5b      	rev16	r3, r3
 801f682:	ba76      	rev16	r6, r6
 801f684:	b2c5      	uxtb	r5, r0
 801f686:	f3c0 2407 	ubfx	r4, r0, #8, #8
 801f68a:	f3c0 4107 	ubfx	r1, r0, #16, #8
 801f68e:	0e00      	lsrs	r0, r0, #24
 801f690:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 801f694:	b2d5      	uxtb	r5, r2
 801f696:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 801f69a:	f3c2 2407 	ubfx	r4, r2, #8, #8
 801f69e:	44bc      	add	ip, r7
 801f6a0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801f6a4:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 801f6a8:	f3c2 4007 	ubfx	r0, r2, #16, #8
 801f6ac:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 801f6b0:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 801f6b4:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 801f6b8:	0e12      	lsrs	r2, r2, #24
 801f6ba:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 801f6be:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 801f6c2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 801f6c6:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 801f6ca:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 801f6ce:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 801f6d2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801f6d6:	b2da      	uxtb	r2, r3
 801f6d8:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 801f6dc:	f3c7 0709 	ubfx	r7, r7, #0, #10
 801f6e0:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 801f6e4:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 801f6e8:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 801f6ec:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 801f6f0:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 801f6f4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801f6f8:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 801f6fc:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801f700:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 801f704:	f3c3 4107 	ubfx	r1, r3, #16, #8
 801f708:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 801f70c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 801f710:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 801f714:	0e1b      	lsrs	r3, r3, #24
 801f716:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 801f71a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 801f71e:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 801f722:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 801f726:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 801f72a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801f72e:	b2f3      	uxtb	r3, r6
 801f730:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 801f734:	f3c8 0009 	ubfx	r0, r8, #0, #10
 801f738:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801f73c:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 801f740:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 801f744:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 801f748:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801f74c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 801f750:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 801f754:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 801f758:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 801f75c:	0e36      	lsrs	r6, r6, #24
 801f75e:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 801f762:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801f766:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 801f76a:	f3c8 0809 	ubfx	r8, r8, #0, #10
 801f76e:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 801f772:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801f776:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 801f77a:	f3c2 0309 	ubfx	r3, r2, #0, #10
 801f77e:	9101      	str	r1, [sp, #4]
 801f780:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 801f784:	9b02      	ldr	r3, [sp, #8]
 801f786:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 801f78a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 801f78e:	4611      	mov	r1, r2
 801f790:	f3cc 0209 	ubfx	r2, ip, #0, #10
 801f794:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 801f798:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 801f79c:	4a49      	ldr	r2, [pc, #292]	; (801f8c4 <D128_1CH_HTONS_VOL_HP+0x290>)
 801f79e:	fb2e 3202 	smlad	r2, lr, r2, r3
 801f7a2:	4b49      	ldr	r3, [pc, #292]	; (801f8c8 <D128_1CH_HTONS_VOL_HP+0x294>)
 801f7a4:	fb27 2203 	smlad	r2, r7, r3, r2
 801f7a8:	4b48      	ldr	r3, [pc, #288]	; (801f8cc <D128_1CH_HTONS_VOL_HP+0x298>)
 801f7aa:	fb25 2203 	smlad	r2, r5, r3, r2
 801f7ae:	4b48      	ldr	r3, [pc, #288]	; (801f8d0 <D128_1CH_HTONS_VOL_HP+0x29c>)
 801f7b0:	fb24 2203 	smlad	r2, r4, r3, r2
 801f7b4:	4b47      	ldr	r3, [pc, #284]	; (801f8d4 <D128_1CH_HTONS_VOL_HP+0x2a0>)
 801f7b6:	fb20 2803 	smlad	r8, r0, r3, r2
 801f7ba:	4b47      	ldr	r3, [pc, #284]	; (801f8d8 <D128_1CH_HTONS_VOL_HP+0x2a4>)
 801f7bc:	9a01      	ldr	r2, [sp, #4]
 801f7be:	fb22 8203 	smlad	r2, r2, r3, r8
 801f7c2:	4b46      	ldr	r3, [pc, #280]	; (801f8dc <D128_1CH_HTONS_VOL_HP+0x2a8>)
 801f7c4:	9102      	str	r1, [sp, #8]
 801f7c6:	fb21 2203 	smlad	r2, r1, r3, r2
 801f7ca:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 801f7ce:	fb26 2308 	smlad	r3, r6, r8, r2
 801f7d2:	4619      	mov	r1, r3
 801f7d4:	9a03      	ldr	r2, [sp, #12]
 801f7d6:	4b42      	ldr	r3, [pc, #264]	; (801f8e0 <D128_1CH_HTONS_VOL_HP+0x2ac>)
 801f7d8:	fb2e 2803 	smlad	r8, lr, r3, r2
 801f7dc:	4b41      	ldr	r3, [pc, #260]	; (801f8e4 <D128_1CH_HTONS_VOL_HP+0x2b0>)
 801f7de:	fb27 8a03 	smlad	sl, r7, r3, r8
 801f7e2:	f8df 8120 	ldr.w	r8, [pc, #288]	; 801f904 <D128_1CH_HTONS_VOL_HP+0x2d0>
 801f7e6:	fb25 a808 	smlad	r8, r5, r8, sl
 801f7ea:	f8df a11c 	ldr.w	sl, [pc, #284]	; 801f908 <D128_1CH_HTONS_VOL_HP+0x2d4>
 801f7ee:	fb24 880a 	smlad	r8, r4, sl, r8
 801f7f2:	f8df a118 	ldr.w	sl, [pc, #280]	; 801f90c <D128_1CH_HTONS_VOL_HP+0x2d8>
 801f7f6:	fb20 8a0a 	smlad	sl, r0, sl, r8
 801f7fa:	f8df 8114 	ldr.w	r8, [pc, #276]	; 801f910 <D128_1CH_HTONS_VOL_HP+0x2dc>
 801f7fe:	9b01      	ldr	r3, [sp, #4]
 801f800:	fb23 aa08 	smlad	sl, r3, r8, sl
 801f804:	f8df 810c 	ldr.w	r8, [pc, #268]	; 801f914 <D128_1CH_HTONS_VOL_HP+0x2e0>
 801f808:	9a02      	ldr	r2, [sp, #8]
 801f80a:	fb22 a808 	smlad	r8, r2, r8, sl
 801f80e:	f8df a108 	ldr.w	sl, [pc, #264]	; 801f918 <D128_1CH_HTONS_VOL_HP+0x2e4>
 801f812:	fb26 830a 	smlad	r3, r6, sl, r8
 801f816:	f04f 0801 	mov.w	r8, #1
 801f81a:	9302      	str	r3, [sp, #8]
 801f81c:	fb2e fe08 	smuad	lr, lr, r8
 801f820:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 801f91c <D128_1CH_HTONS_VOL_HP+0x2e8>
 801f824:	fb27 ee08 	smlad	lr, r7, r8, lr
 801f828:	4f2f      	ldr	r7, [pc, #188]	; (801f8e8 <D128_1CH_HTONS_VOL_HP+0x2b4>)
 801f82a:	fb25 ee07 	smlad	lr, r5, r7, lr
 801f82e:	4f2f      	ldr	r7, [pc, #188]	; (801f8ec <D128_1CH_HTONS_VOL_HP+0x2b8>)
 801f830:	fb24 ee07 	smlad	lr, r4, r7, lr
 801f834:	4f2e      	ldr	r7, [pc, #184]	; (801f8f0 <D128_1CH_HTONS_VOL_HP+0x2bc>)
 801f836:	fb20 ee07 	smlad	lr, r0, r7, lr
 801f83a:	4f2e      	ldr	r7, [pc, #184]	; (801f8f4 <D128_1CH_HTONS_VOL_HP+0x2c0>)
 801f83c:	9b01      	ldr	r3, [sp, #4]
 801f83e:	fb23 ee07 	smlad	lr, r3, r7, lr
 801f842:	4f2d      	ldr	r7, [pc, #180]	; (801f8f8 <D128_1CH_HTONS_VOL_HP+0x2c4>)
 801f844:	fb22 e707 	smlad	r7, r2, r7, lr
 801f848:	4b2c      	ldr	r3, [pc, #176]	; (801f8fc <D128_1CH_HTONS_VOL_HP+0x2c8>)
 801f84a:	fb26 7303 	smlad	r3, r6, r3, r7
 801f84e:	f5a1 1680 	sub.w	r6, r1, #1048576	; 0x100000
 801f852:	9303      	str	r3, [sp, #12]
 801f854:	9b04      	ldr	r3, [sp, #16]
 801f856:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 801f85a:	9f08      	ldr	r7, [sp, #32]
 801f85c:	2100      	movs	r1, #0
 801f85e:	4433      	add	r3, r6
 801f860:	f10b 0b10 	add.w	fp, fp, #16
 801f864:	461a      	mov	r2, r3
 801f866:	9b05      	ldr	r3, [sp, #20]
 801f868:	9605      	str	r6, [sp, #20]
 801f86a:	1ad2      	subs	r2, r2, r3
 801f86c:	17d5      	asrs	r5, r2, #31
 801f86e:	fba2 2307 	umull	r2, r3, r2, r7
 801f872:	1814      	adds	r4, r2, r0
 801f874:	fb07 3305 	mla	r3, r7, r5, r3
 801f878:	eb43 0501 	adc.w	r5, r3, r1
 801f87c:	006b      	lsls	r3, r5, #1
 801f87e:	022a      	lsls	r2, r5, #8
 801f880:	9304      	str	r3, [sp, #16]
 801f882:	9b07      	ldr	r3, [sp, #28]
 801f884:	fbc3 0102 	smlal	r0, r1, r3, r2
 801f888:	9a06      	ldr	r2, [sp, #24]
 801f88a:	108b      	asrs	r3, r1, #2
 801f88c:	f303 030f 	ssat	r3, #16, r3
 801f890:	f822 3b02 	strh.w	r3, [r2], #2
 801f894:	4613      	mov	r3, r2
 801f896:	9206      	str	r2, [sp, #24]
 801f898:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f89a:	4293      	cmp	r3, r2
 801f89c:	f47f aeea 	bne.w	801f674 <D128_1CH_HTONS_VOL_HP+0x40>
 801f8a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f8a2:	2000      	movs	r0, #0
 801f8a4:	9903      	ldr	r1, [sp, #12]
 801f8a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f8a8:	6099      	str	r1, [r3, #8]
 801f8aa:	9902      	ldr	r1, [sp, #8]
 801f8ac:	f8c3 c01c 	str.w	ip, [r3, #28]
 801f8b0:	60d9      	str	r1, [r3, #12]
 801f8b2:	9904      	ldr	r1, [sp, #16]
 801f8b4:	619a      	str	r2, [r3, #24]
 801f8b6:	e9c3 1604 	strd	r1, r6, [r3, #16]
 801f8ba:	b00d      	add	sp, #52	; 0x34
 801f8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f8c0:	9e05      	ldr	r6, [sp, #20]
 801f8c2:	e7ed      	b.n	801f8a0 <D128_1CH_HTONS_VOL_HP+0x26c>
 801f8c4:	00780069 	.word	0x00780069
 801f8c8:	005b004e 	.word	0x005b004e
 801f8cc:	00420037 	.word	0x00420037
 801f8d0:	002d0024 	.word	0x002d0024
 801f8d4:	001c0015 	.word	0x001c0015
 801f8d8:	000f000a 	.word	0x000f000a
 801f8dc:	00060003 	.word	0x00060003
 801f8e0:	00880096 	.word	0x00880096
 801f8e4:	00a200ac 	.word	0x00a200ac
 801f8e8:	000a000f 	.word	0x000a000f
 801f8ec:	0015001c 	.word	0x0015001c
 801f8f0:	0024002d 	.word	0x0024002d
 801f8f4:	00370042 	.word	0x00370042
 801f8f8:	004e005b 	.word	0x004e005b
 801f8fc:	00690078 	.word	0x00690078
 801f900:	24000000 	.word	0x24000000
 801f904:	00b400ba 	.word	0x00b400ba
 801f908:	00be00c0 	.word	0x00be00c0
 801f90c:	00c000be 	.word	0x00c000be
 801f910:	00ba00b4 	.word	0x00ba00b4
 801f914:	00ac00a2 	.word	0x00ac00a2
 801f918:	00960088 	.word	0x00960088
 801f91c:	00030006 	.word	0x00030006

0801f920 <PDM_Filter_Init>:
 801f920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f922:	2240      	movs	r2, #64	; 0x40
 801f924:	2100      	movs	r1, #0
 801f926:	4604      	mov	r4, r0
 801f928:	300c      	adds	r0, #12
 801f92a:	f000 fa25 	bl	801fd78 <memset>
 801f92e:	4a56      	ldr	r2, [pc, #344]	; (801fa88 <PDM_Filter_Init+0x168>)
 801f930:	4856      	ldr	r0, [pc, #344]	; (801fa8c <PDM_Filter_Init+0x16c>)
 801f932:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 801f936:	6813      	ldr	r3, [r2, #0]
 801f938:	f24c 2540 	movw	r5, #49728	; 0xc240
 801f93c:	f023 0301 	bic.w	r3, r3, #1
 801f940:	6013      	str	r3, [r2, #0]
 801f942:	6803      	ldr	r3, [r0, #0]
 801f944:	400b      	ands	r3, r1
 801f946:	42ab      	cmp	r3, r5
 801f948:	d040      	beq.n	801f9cc <PDM_Filter_Init+0xac>
 801f94a:	6803      	ldr	r3, [r0, #0]
 801f94c:	f24c 2270 	movw	r2, #49776	; 0xc270
 801f950:	4019      	ands	r1, r3
 801f952:	4291      	cmp	r1, r2
 801f954:	d03a      	beq.n	801f9cc <PDM_Filter_Init+0xac>
 801f956:	4b4e      	ldr	r3, [pc, #312]	; (801fa90 <PDM_Filter_Init+0x170>)
 801f958:	2101      	movs	r1, #1
 801f95a:	461a      	mov	r2, r3
 801f95c:	6019      	str	r1, [r3, #0]
 801f95e:	6813      	ldr	r3, [r2, #0]
 801f960:	2b00      	cmp	r3, #0
 801f962:	d1fc      	bne.n	801f95e <PDM_Filter_Init+0x3e>
 801f964:	4b4b      	ldr	r3, [pc, #300]	; (801fa94 <PDM_Filter_Init+0x174>)
 801f966:	494c      	ldr	r1, [pc, #304]	; (801fa98 <PDM_Filter_Init+0x178>)
 801f968:	4a4c      	ldr	r2, [pc, #304]	; (801fa9c <PDM_Filter_Init+0x17c>)
 801f96a:	6019      	str	r1, [r3, #0]
 801f96c:	681b      	ldr	r3, [r3, #0]
 801f96e:	8820      	ldrh	r0, [r4, #0]
 801f970:	4293      	cmp	r3, r2
 801f972:	8961      	ldrh	r1, [r4, #10]
 801f974:	f04f 0300 	mov.w	r3, #0
 801f978:	8922      	ldrh	r2, [r4, #8]
 801f97a:	bf14      	ite	ne
 801f97c:	2500      	movne	r5, #0
 801f97e:	4d47      	ldreq	r5, [pc, #284]	; (801fa9c <PDM_Filter_Init+0x17c>)
 801f980:	2801      	cmp	r0, #1
 801f982:	61a3      	str	r3, [r4, #24]
 801f984:	6465      	str	r5, [r4, #68]	; 0x44
 801f986:	60e3      	str	r3, [r4, #12]
 801f988:	6263      	str	r3, [r4, #36]	; 0x24
 801f98a:	6423      	str	r3, [r4, #64]	; 0x40
 801f98c:	86a1      	strh	r1, [r4, #52]	; 0x34
 801f98e:	86e2      	strh	r2, [r4, #54]	; 0x36
 801f990:	e9c4 3304 	strd	r3, r3, [r4, #16]
 801f994:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801f998:	d936      	bls.n	801fa08 <PDM_Filter_Init+0xe8>
 801f99a:	2003      	movs	r0, #3
 801f99c:	2302      	movs	r3, #2
 801f99e:	8862      	ldrh	r2, [r4, #2]
 801f9a0:	2a01      	cmp	r2, #1
 801f9a2:	d92e      	bls.n	801fa02 <PDM_Filter_Init+0xe2>
 801f9a4:	2140      	movs	r1, #64	; 0x40
 801f9a6:	2300      	movs	r3, #0
 801f9a8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801f9aa:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 801f9ae:	d101      	bne.n	801f9b4 <PDM_Filter_Init+0x94>
 801f9b0:	460b      	mov	r3, r1
 801f9b2:	6421      	str	r1, [r4, #64]	; 0x40
 801f9b4:	6862      	ldr	r2, [r4, #4]
 801f9b6:	b11a      	cbz	r2, 801f9c0 <PDM_Filter_Init+0xa0>
 801f9b8:	f043 0310 	orr.w	r3, r3, #16
 801f9bc:	62e2      	str	r2, [r4, #44]	; 0x2c
 801f9be:	6423      	str	r3, [r4, #64]	; 0x40
 801f9c0:	2200      	movs	r2, #0
 801f9c2:	8722      	strh	r2, [r4, #56]	; 0x38
 801f9c4:	b908      	cbnz	r0, 801f9ca <PDM_Filter_Init+0xaa>
 801f9c6:	3380      	adds	r3, #128	; 0x80
 801f9c8:	6423      	str	r3, [r4, #64]	; 0x40
 801f9ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f9cc:	4b34      	ldr	r3, [pc, #208]	; (801faa0 <PDM_Filter_Init+0x180>)
 801f9ce:	681b      	ldr	r3, [r3, #0]
 801f9d0:	2b00      	cmp	r3, #0
 801f9d2:	d1c0      	bne.n	801f956 <PDM_Filter_Init+0x36>
 801f9d4:	4a33      	ldr	r2, [pc, #204]	; (801faa4 <PDM_Filter_Init+0x184>)
 801f9d6:	6813      	ldr	r3, [r2, #0]
 801f9d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801f9dc:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801f9e0:	d006      	beq.n	801f9f0 <PDM_Filter_Init+0xd0>
 801f9e2:	6813      	ldr	r3, [r2, #0]
 801f9e4:	f240 4283 	movw	r2, #1155	; 0x483
 801f9e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801f9ec:	4293      	cmp	r3, r2
 801f9ee:	d1b2      	bne.n	801f956 <PDM_Filter_Init+0x36>
 801f9f0:	4b2d      	ldr	r3, [pc, #180]	; (801faa8 <PDM_Filter_Init+0x188>)
 801f9f2:	2101      	movs	r1, #1
 801f9f4:	461a      	mov	r2, r3
 801f9f6:	6019      	str	r1, [r3, #0]
 801f9f8:	6813      	ldr	r3, [r2, #0]
 801f9fa:	2b00      	cmp	r3, #0
 801f9fc:	d1fc      	bne.n	801f9f8 <PDM_Filter_Init+0xd8>
 801f9fe:	4b2b      	ldr	r3, [pc, #172]	; (801faac <PDM_Filter_Init+0x18c>)
 801fa00:	e7b1      	b.n	801f966 <PDM_Filter_Init+0x46>
 801fa02:	d03a      	beq.n	801fa7a <PDM_Filter_Init+0x15a>
 801fa04:	4618      	mov	r0, r3
 801fa06:	e7cd      	b.n	801f9a4 <PDM_Filter_Init+0x84>
 801fa08:	4d29      	ldr	r5, [pc, #164]	; (801fab0 <PDM_Filter_Init+0x190>)
 801fa0a:	782a      	ldrb	r2, [r5, #0]
 801fa0c:	d01b      	beq.n	801fa46 <PDM_Filter_Init+0x126>
 801fa0e:	2a01      	cmp	r2, #1
 801fa10:	d001      	beq.n	801fa16 <PDM_Filter_Init+0xf6>
 801fa12:	2001      	movs	r0, #1
 801fa14:	e7c3      	b.n	801f99e <PDM_Filter_Init+0x7e>
 801fa16:	4927      	ldr	r1, [pc, #156]	; (801fab4 <PDM_Filter_Init+0x194>)
 801fa18:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 801fabc <PDM_Filter_Init+0x19c>
 801fa1c:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 801fa20:	4e25      	ldr	r6, [pc, #148]	; (801fab8 <PDM_Filter_Init+0x198>)
 801fa22:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801fa26:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 801fa2a:	ea02 0006 	and.w	r0, r2, r6
 801fa2e:	f3c2 5209 	ubfx	r2, r2, #20, #10
 801fa32:	428f      	cmp	r7, r1
 801fa34:	ea43 0300 	orr.w	r3, r3, r0
 801fa38:	4413      	add	r3, r2
 801fa3a:	600b      	str	r3, [r1, #0]
 801fa3c:	d1f1      	bne.n	801fa22 <PDM_Filter_Init+0x102>
 801fa3e:	2300      	movs	r3, #0
 801fa40:	2001      	movs	r0, #1
 801fa42:	702b      	strb	r3, [r5, #0]
 801fa44:	e7ab      	b.n	801f99e <PDM_Filter_Init+0x7e>
 801fa46:	2a00      	cmp	r2, #0
 801fa48:	d1a9      	bne.n	801f99e <PDM_Filter_Init+0x7e>
 801fa4a:	491a      	ldr	r1, [pc, #104]	; (801fab4 <PDM_Filter_Init+0x194>)
 801fa4c:	f8df c06c 	ldr.w	ip, [pc, #108]	; 801fabc <PDM_Filter_Init+0x19c>
 801fa50:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 801fa54:	4e18      	ldr	r6, [pc, #96]	; (801fab8 <PDM_Filter_Init+0x198>)
 801fa56:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801fa5a:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 801fa5e:	ea02 0006 	and.w	r0, r2, r6
 801fa62:	f3c2 5209 	ubfx	r2, r2, #20, #10
 801fa66:	428f      	cmp	r7, r1
 801fa68:	ea43 0300 	orr.w	r3, r3, r0
 801fa6c:	4413      	add	r3, r2
 801fa6e:	600b      	str	r3, [r1, #0]
 801fa70:	d1f1      	bne.n	801fa56 <PDM_Filter_Init+0x136>
 801fa72:	2001      	movs	r0, #1
 801fa74:	2300      	movs	r3, #0
 801fa76:	7028      	strb	r0, [r5, #0]
 801fa78:	e791      	b.n	801f99e <PDM_Filter_Init+0x7e>
 801fa7a:	2220      	movs	r2, #32
 801fa7c:	4618      	mov	r0, r3
 801fa7e:	2160      	movs	r1, #96	; 0x60
 801fa80:	6422      	str	r2, [r4, #64]	; 0x40
 801fa82:	4613      	mov	r3, r2
 801fa84:	e790      	b.n	801f9a8 <PDM_Filter_Init+0x88>
 801fa86:	bf00      	nop
 801fa88:	e0002000 	.word	0xe0002000
 801fa8c:	e000ed00 	.word	0xe000ed00
 801fa90:	40023008 	.word	0x40023008
 801fa94:	40023000 	.word	0x40023000
 801fa98:	f407a5c2 	.word	0xf407a5c2
 801fa9c:	b5e8b5cd 	.word	0xb5e8b5cd
 801faa0:	e0042000 	.word	0xe0042000
 801faa4:	5c001000 	.word	0x5c001000
 801faa8:	58024c08 	.word	0x58024c08
 801faac:	58024c00 	.word	0x58024c00
 801fab0:	24003a38 	.word	0x24003a38
 801fab4:	23fffffc 	.word	0x23fffffc
 801fab8:	000ffc00 	.word	0x000ffc00
 801fabc:	3ff00000 	.word	0x3ff00000

0801fac0 <PDM_Filter_setConfig>:
 801fac0:	4b67      	ldr	r3, [pc, #412]	; (801fc60 <PDM_Filter_setConfig+0x1a0>)
 801fac2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801fac4:	429a      	cmp	r2, r3
 801fac6:	d128      	bne.n	801fb1a <PDM_Filter_setConfig+0x5a>
 801fac8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 801faca:	b5f0      	push	{r4, r5, r6, r7, lr}
 801facc:	880e      	ldrh	r6, [r1, #0]
 801face:	460d      	mov	r5, r1
 801fad0:	4604      	mov	r4, r0
 801fad2:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 801fad6:	1e73      	subs	r3, r6, #1
 801fad8:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 801fadc:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 801fae0:	2b06      	cmp	r3, #6
 801fae2:	ed2d 8b02 	vpush	{d8}
 801fae6:	6421      	str	r1, [r4, #64]	; 0x40
 801fae8:	b083      	sub	sp, #12
 801faea:	d820      	bhi.n	801fb2e <PDM_Filter_setConfig+0x6e>
 801faec:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801faee:	42b3      	cmp	r3, r6
 801faf0:	d03d      	beq.n	801fb6e <PDM_Filter_setConfig+0xae>
 801faf2:	4b5c      	ldr	r3, [pc, #368]	; (801fc64 <PDM_Filter_setConfig+0x1a4>)
 801faf4:	4013      	ands	r3, r2
 801faf6:	4333      	orrs	r3, r6
 801faf8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 801fafc:	6423      	str	r3, [r4, #64]	; 0x40
 801fafe:	f003 030f 	and.w	r3, r3, #15
 801fb02:	2a70      	cmp	r2, #112	; 0x70
 801fb04:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801fb08:	d009      	beq.n	801fb1e <PDM_Filter_setConfig+0x5e>
 801fb0a:	2b06      	cmp	r3, #6
 801fb0c:	d824      	bhi.n	801fb58 <PDM_Filter_setConfig+0x98>
 801fb0e:	e8df f003 	tbb	[pc, r3]
 801fb12:	878a      	.short	0x878a
 801fb14:	7b7e8184 	.word	0x7b7e8184
 801fb18:	78          	.byte	0x78
 801fb19:	00          	.byte	0x00
 801fb1a:	2004      	movs	r0, #4
 801fb1c:	4770      	bx	lr
 801fb1e:	2b06      	cmp	r3, #6
 801fb20:	d81a      	bhi.n	801fb58 <PDM_Filter_setConfig+0x98>
 801fb22:	e8df f003 	tbb	[pc, r3]
 801fb26:	8f92      	.short	0x8f92
 801fb28:	8617898c 	.word	0x8617898c
 801fb2c:	83          	.byte	0x83
 801fb2d:	00          	.byte	0x00
 801fb2e:	4287      	cmp	r7, r0
 801fb30:	f000 808e 	beq.w	801fc50 <PDM_Filter_setConfig+0x190>
 801fb34:	f117 0f0c 	cmn.w	r7, #12
 801fb38:	f04f 0008 	mov.w	r0, #8
 801fb3c:	da11      	bge.n	801fb62 <PDM_Filter_setConfig+0xa2>
 801fb3e:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 801fb42:	3040      	adds	r0, #64	; 0x40
 801fb44:	80ab      	strh	r3, [r5, #4]
 801fb46:	886b      	ldrh	r3, [r5, #2]
 801fb48:	8626      	strh	r6, [r4, #48]	; 0x30
 801fb4a:	8663      	strh	r3, [r4, #50]	; 0x32
 801fb4c:	b003      	add	sp, #12
 801fb4e:	ecbd 8b02 	vpop	{d8}
 801fb52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fb54:	4b44      	ldr	r3, [pc, #272]	; (801fc68 <PDM_Filter_setConfig+0x1a8>)
 801fb56:	64a3      	str	r3, [r4, #72]	; 0x48
 801fb58:	f117 0f0c 	cmn.w	r7, #12
 801fb5c:	f04f 0000 	mov.w	r0, #0
 801fb60:	dbed      	blt.n	801fb3e <PDM_Filter_setConfig+0x7e>
 801fb62:	2f33      	cmp	r7, #51	; 0x33
 801fb64:	dd10      	ble.n	801fb88 <PDM_Filter_setConfig+0xc8>
 801fb66:	2333      	movs	r3, #51	; 0x33
 801fb68:	3040      	adds	r0, #64	; 0x40
 801fb6a:	80ab      	strh	r3, [r5, #4]
 801fb6c:	e7eb      	b.n	801fb46 <PDM_Filter_setConfig+0x86>
 801fb6e:	4287      	cmp	r7, r0
 801fb70:	d1f2      	bne.n	801fb58 <PDM_Filter_setConfig+0x98>
 801fb72:	886b      	ldrh	r3, [r5, #2]
 801fb74:	8663      	strh	r3, [r4, #50]	; 0x32
 801fb76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801fb78:	2000      	movs	r0, #0
 801fb7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801fb7e:	6423      	str	r3, [r4, #64]	; 0x40
 801fb80:	b003      	add	sp, #12
 801fb82:	ecbd 8b02 	vpop	{d8}
 801fb86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fb88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801fb8a:	f003 030f 	and.w	r3, r3, #15
 801fb8e:	3b01      	subs	r3, #1
 801fb90:	2b06      	cmp	r3, #6
 801fb92:	d831      	bhi.n	801fbf8 <PDM_Filter_setConfig+0x138>
 801fb94:	4a35      	ldr	r2, [pc, #212]	; (801fc6c <PDM_Filter_setConfig+0x1ac>)
 801fb96:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801fb9a:	eddf 0a35 	vldr	s1, [pc, #212]	; 801fc70 <PDM_Filter_setConfig+0x1b0>
 801fb9e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801fba2:	9001      	str	r0, [sp, #4]
 801fba4:	edd3 7a07 	vldr	s15, [r3, #28]
 801fba8:	ed93 8a00 	vldr	s16, [r3]
 801fbac:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801fbb0:	f005 f83a 	bl	8024c28 <powf>
 801fbb4:	eef0 8a40 	vmov.f32	s17, s0
 801fbb8:	9801      	ldr	r0, [sp, #4]
 801fbba:	ee07 7a90 	vmov	s15, r7
 801fbbe:	ee28 8a28 	vmul.f32	s16, s16, s17
 801fbc2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 801fbc6:	9001      	str	r0, [sp, #4]
 801fbc8:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801fbcc:	eddf 7a29 	vldr	s15, [pc, #164]	; 801fc74 <PDM_Filter_setConfig+0x1b4>
 801fbd0:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801fbd4:	f005 f828 	bl	8024c28 <powf>
 801fbd8:	ee28 8a00 	vmul.f32	s16, s16, s0
 801fbdc:	886b      	ldrh	r3, [r5, #2]
 801fbde:	9801      	ldr	r0, [sp, #4]
 801fbe0:	feb8 8a48 	vrinta.f32	s16, s16
 801fbe4:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 801fbe8:	8727      	strh	r7, [r4, #56]	; 0x38
 801fbea:	8663      	strh	r3, [r4, #50]	; 0x32
 801fbec:	8626      	strh	r6, [r4, #48]	; 0x30
 801fbee:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 801fbf2:	2800      	cmp	r0, #0
 801fbf4:	d0bf      	beq.n	801fb76 <PDM_Filter_setConfig+0xb6>
 801fbf6:	e7a9      	b.n	801fb4c <PDM_Filter_setConfig+0x8c>
 801fbf8:	eddf 8a1f 	vldr	s17, [pc, #124]	; 801fc78 <PDM_Filter_setConfig+0x1b8>
 801fbfc:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 801fc7c <PDM_Filter_setConfig+0x1bc>
 801fc00:	e7db      	b.n	801fbba <PDM_Filter_setConfig+0xfa>
 801fc02:	4b1f      	ldr	r3, [pc, #124]	; (801fc80 <PDM_Filter_setConfig+0x1c0>)
 801fc04:	64a3      	str	r3, [r4, #72]	; 0x48
 801fc06:	e7a7      	b.n	801fb58 <PDM_Filter_setConfig+0x98>
 801fc08:	4b1e      	ldr	r3, [pc, #120]	; (801fc84 <PDM_Filter_setConfig+0x1c4>)
 801fc0a:	64a3      	str	r3, [r4, #72]	; 0x48
 801fc0c:	e7a4      	b.n	801fb58 <PDM_Filter_setConfig+0x98>
 801fc0e:	4b1e      	ldr	r3, [pc, #120]	; (801fc88 <PDM_Filter_setConfig+0x1c8>)
 801fc10:	64a3      	str	r3, [r4, #72]	; 0x48
 801fc12:	e7a1      	b.n	801fb58 <PDM_Filter_setConfig+0x98>
 801fc14:	4b1d      	ldr	r3, [pc, #116]	; (801fc8c <PDM_Filter_setConfig+0x1cc>)
 801fc16:	64a3      	str	r3, [r4, #72]	; 0x48
 801fc18:	e79e      	b.n	801fb58 <PDM_Filter_setConfig+0x98>
 801fc1a:	4b1d      	ldr	r3, [pc, #116]	; (801fc90 <PDM_Filter_setConfig+0x1d0>)
 801fc1c:	64a3      	str	r3, [r4, #72]	; 0x48
 801fc1e:	e79b      	b.n	801fb58 <PDM_Filter_setConfig+0x98>
 801fc20:	4b1c      	ldr	r3, [pc, #112]	; (801fc94 <PDM_Filter_setConfig+0x1d4>)
 801fc22:	64a3      	str	r3, [r4, #72]	; 0x48
 801fc24:	e798      	b.n	801fb58 <PDM_Filter_setConfig+0x98>
 801fc26:	4b1c      	ldr	r3, [pc, #112]	; (801fc98 <PDM_Filter_setConfig+0x1d8>)
 801fc28:	64a3      	str	r3, [r4, #72]	; 0x48
 801fc2a:	e795      	b.n	801fb58 <PDM_Filter_setConfig+0x98>
 801fc2c:	4b1b      	ldr	r3, [pc, #108]	; (801fc9c <PDM_Filter_setConfig+0x1dc>)
 801fc2e:	64a3      	str	r3, [r4, #72]	; 0x48
 801fc30:	e792      	b.n	801fb58 <PDM_Filter_setConfig+0x98>
 801fc32:	4b1b      	ldr	r3, [pc, #108]	; (801fca0 <PDM_Filter_setConfig+0x1e0>)
 801fc34:	64a3      	str	r3, [r4, #72]	; 0x48
 801fc36:	e78f      	b.n	801fb58 <PDM_Filter_setConfig+0x98>
 801fc38:	4b1a      	ldr	r3, [pc, #104]	; (801fca4 <PDM_Filter_setConfig+0x1e4>)
 801fc3a:	64a3      	str	r3, [r4, #72]	; 0x48
 801fc3c:	e78c      	b.n	801fb58 <PDM_Filter_setConfig+0x98>
 801fc3e:	4b1a      	ldr	r3, [pc, #104]	; (801fca8 <PDM_Filter_setConfig+0x1e8>)
 801fc40:	64a3      	str	r3, [r4, #72]	; 0x48
 801fc42:	e789      	b.n	801fb58 <PDM_Filter_setConfig+0x98>
 801fc44:	4b19      	ldr	r3, [pc, #100]	; (801fcac <PDM_Filter_setConfig+0x1ec>)
 801fc46:	64a3      	str	r3, [r4, #72]	; 0x48
 801fc48:	e786      	b.n	801fb58 <PDM_Filter_setConfig+0x98>
 801fc4a:	4b19      	ldr	r3, [pc, #100]	; (801fcb0 <PDM_Filter_setConfig+0x1f0>)
 801fc4c:	64a3      	str	r3, [r4, #72]	; 0x48
 801fc4e:	e783      	b.n	801fb58 <PDM_Filter_setConfig+0x98>
 801fc50:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801fc52:	42b3      	cmp	r3, r6
 801fc54:	f47f af6e 	bne.w	801fb34 <PDM_Filter_setConfig+0x74>
 801fc58:	886b      	ldrh	r3, [r5, #2]
 801fc5a:	2008      	movs	r0, #8
 801fc5c:	8663      	strh	r3, [r4, #50]	; 0x32
 801fc5e:	e775      	b.n	801fb4c <PDM_Filter_setConfig+0x8c>
 801fc60:	b5e8b5cd 	.word	0xb5e8b5cd
 801fc64:	fffffef0 	.word	0xfffffef0
 801fc68:	0801edd9 	.word	0x0801edd9
 801fc6c:	08028aa4 	.word	0x08028aa4
 801fc70:	42000000 	.word	0x42000000
 801fc74:	3d4ccccd 	.word	0x3d4ccccd
 801fc78:	4f800000 	.word	0x4f800000
 801fc7c:	00000000 	.word	0x00000000
 801fc80:	0801e1e5 	.word	0x0801e1e5
 801fc84:	0801e06d 	.word	0x0801e06d
 801fc88:	0801df5d 	.word	0x0801df5d
 801fc8c:	0801ea21 	.word	0x0801ea21
 801fc90:	0801e789 	.word	0x0801e789
 801fc94:	0801e551 	.word	0x0801e551
 801fc98:	0801e36d 	.word	0x0801e36d
 801fc9c:	0801eff5 	.word	0x0801eff5
 801fca0:	0801eeb9 	.word	0x0801eeb9
 801fca4:	0801f635 	.word	0x0801f635
 801fca8:	0801f439 	.word	0x0801f439
 801fcac:	0801f28d 	.word	0x0801f28d
 801fcb0:	0801f121 	.word	0x0801f121

0801fcb4 <__libc_init_array>:
 801fcb4:	b570      	push	{r4, r5, r6, lr}
 801fcb6:	4d0d      	ldr	r5, [pc, #52]	; (801fcec <__libc_init_array+0x38>)
 801fcb8:	4c0d      	ldr	r4, [pc, #52]	; (801fcf0 <__libc_init_array+0x3c>)
 801fcba:	1b64      	subs	r4, r4, r5
 801fcbc:	10a4      	asrs	r4, r4, #2
 801fcbe:	2600      	movs	r6, #0
 801fcc0:	42a6      	cmp	r6, r4
 801fcc2:	d109      	bne.n	801fcd8 <__libc_init_array+0x24>
 801fcc4:	4d0b      	ldr	r5, [pc, #44]	; (801fcf4 <__libc_init_array+0x40>)
 801fcc6:	4c0c      	ldr	r4, [pc, #48]	; (801fcf8 <__libc_init_array+0x44>)
 801fcc8:	f005 ff8c 	bl	8025be4 <_init>
 801fccc:	1b64      	subs	r4, r4, r5
 801fcce:	10a4      	asrs	r4, r4, #2
 801fcd0:	2600      	movs	r6, #0
 801fcd2:	42a6      	cmp	r6, r4
 801fcd4:	d105      	bne.n	801fce2 <__libc_init_array+0x2e>
 801fcd6:	bd70      	pop	{r4, r5, r6, pc}
 801fcd8:	f855 3b04 	ldr.w	r3, [r5], #4
 801fcdc:	4798      	blx	r3
 801fcde:	3601      	adds	r6, #1
 801fce0:	e7ee      	b.n	801fcc0 <__libc_init_array+0xc>
 801fce2:	f855 3b04 	ldr.w	r3, [r5], #4
 801fce6:	4798      	blx	r3
 801fce8:	3601      	adds	r6, #1
 801fcea:	e7f2      	b.n	801fcd2 <__libc_init_array+0x1e>
 801fcec:	0802b470 	.word	0x0802b470
 801fcf0:	0802b470 	.word	0x0802b470
 801fcf4:	0802b470 	.word	0x0802b470
 801fcf8:	0802b474 	.word	0x0802b474

0801fcfc <malloc>:
 801fcfc:	4b02      	ldr	r3, [pc, #8]	; (801fd08 <malloc+0xc>)
 801fcfe:	4601      	mov	r1, r0
 801fd00:	6818      	ldr	r0, [r3, #0]
 801fd02:	f000 b891 	b.w	801fe28 <_malloc_r>
 801fd06:	bf00      	nop
 801fd08:	24003844 	.word	0x24003844

0801fd0c <memcmp>:
 801fd0c:	b530      	push	{r4, r5, lr}
 801fd0e:	3901      	subs	r1, #1
 801fd10:	2400      	movs	r4, #0
 801fd12:	42a2      	cmp	r2, r4
 801fd14:	d101      	bne.n	801fd1a <memcmp+0xe>
 801fd16:	2000      	movs	r0, #0
 801fd18:	e005      	b.n	801fd26 <memcmp+0x1a>
 801fd1a:	5d03      	ldrb	r3, [r0, r4]
 801fd1c:	3401      	adds	r4, #1
 801fd1e:	5d0d      	ldrb	r5, [r1, r4]
 801fd20:	42ab      	cmp	r3, r5
 801fd22:	d0f6      	beq.n	801fd12 <memcmp+0x6>
 801fd24:	1b58      	subs	r0, r3, r5
 801fd26:	bd30      	pop	{r4, r5, pc}

0801fd28 <memcpy>:
 801fd28:	440a      	add	r2, r1
 801fd2a:	4291      	cmp	r1, r2
 801fd2c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801fd30:	d100      	bne.n	801fd34 <memcpy+0xc>
 801fd32:	4770      	bx	lr
 801fd34:	b510      	push	{r4, lr}
 801fd36:	f811 4b01 	ldrb.w	r4, [r1], #1
 801fd3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801fd3e:	4291      	cmp	r1, r2
 801fd40:	d1f9      	bne.n	801fd36 <memcpy+0xe>
 801fd42:	bd10      	pop	{r4, pc}

0801fd44 <memmove>:
 801fd44:	4288      	cmp	r0, r1
 801fd46:	b510      	push	{r4, lr}
 801fd48:	eb01 0402 	add.w	r4, r1, r2
 801fd4c:	d902      	bls.n	801fd54 <memmove+0x10>
 801fd4e:	4284      	cmp	r4, r0
 801fd50:	4623      	mov	r3, r4
 801fd52:	d807      	bhi.n	801fd64 <memmove+0x20>
 801fd54:	1e43      	subs	r3, r0, #1
 801fd56:	42a1      	cmp	r1, r4
 801fd58:	d008      	beq.n	801fd6c <memmove+0x28>
 801fd5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801fd5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801fd62:	e7f8      	b.n	801fd56 <memmove+0x12>
 801fd64:	4402      	add	r2, r0
 801fd66:	4601      	mov	r1, r0
 801fd68:	428a      	cmp	r2, r1
 801fd6a:	d100      	bne.n	801fd6e <memmove+0x2a>
 801fd6c:	bd10      	pop	{r4, pc}
 801fd6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801fd72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801fd76:	e7f7      	b.n	801fd68 <memmove+0x24>

0801fd78 <memset>:
 801fd78:	4402      	add	r2, r0
 801fd7a:	4603      	mov	r3, r0
 801fd7c:	4293      	cmp	r3, r2
 801fd7e:	d100      	bne.n	801fd82 <memset+0xa>
 801fd80:	4770      	bx	lr
 801fd82:	f803 1b01 	strb.w	r1, [r3], #1
 801fd86:	e7f9      	b.n	801fd7c <memset+0x4>

0801fd88 <_free_r>:
 801fd88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801fd8a:	2900      	cmp	r1, #0
 801fd8c:	d048      	beq.n	801fe20 <_free_r+0x98>
 801fd8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fd92:	9001      	str	r0, [sp, #4]
 801fd94:	2b00      	cmp	r3, #0
 801fd96:	f1a1 0404 	sub.w	r4, r1, #4
 801fd9a:	bfb8      	it	lt
 801fd9c:	18e4      	addlt	r4, r4, r3
 801fd9e:	f003 fb21 	bl	80233e4 <__malloc_lock>
 801fda2:	4a20      	ldr	r2, [pc, #128]	; (801fe24 <_free_r+0x9c>)
 801fda4:	9801      	ldr	r0, [sp, #4]
 801fda6:	6813      	ldr	r3, [r2, #0]
 801fda8:	4615      	mov	r5, r2
 801fdaa:	b933      	cbnz	r3, 801fdba <_free_r+0x32>
 801fdac:	6063      	str	r3, [r4, #4]
 801fdae:	6014      	str	r4, [r2, #0]
 801fdb0:	b003      	add	sp, #12
 801fdb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801fdb6:	f003 bb1b 	b.w	80233f0 <__malloc_unlock>
 801fdba:	42a3      	cmp	r3, r4
 801fdbc:	d90b      	bls.n	801fdd6 <_free_r+0x4e>
 801fdbe:	6821      	ldr	r1, [r4, #0]
 801fdc0:	1862      	adds	r2, r4, r1
 801fdc2:	4293      	cmp	r3, r2
 801fdc4:	bf04      	itt	eq
 801fdc6:	681a      	ldreq	r2, [r3, #0]
 801fdc8:	685b      	ldreq	r3, [r3, #4]
 801fdca:	6063      	str	r3, [r4, #4]
 801fdcc:	bf04      	itt	eq
 801fdce:	1852      	addeq	r2, r2, r1
 801fdd0:	6022      	streq	r2, [r4, #0]
 801fdd2:	602c      	str	r4, [r5, #0]
 801fdd4:	e7ec      	b.n	801fdb0 <_free_r+0x28>
 801fdd6:	461a      	mov	r2, r3
 801fdd8:	685b      	ldr	r3, [r3, #4]
 801fdda:	b10b      	cbz	r3, 801fde0 <_free_r+0x58>
 801fddc:	42a3      	cmp	r3, r4
 801fdde:	d9fa      	bls.n	801fdd6 <_free_r+0x4e>
 801fde0:	6811      	ldr	r1, [r2, #0]
 801fde2:	1855      	adds	r5, r2, r1
 801fde4:	42a5      	cmp	r5, r4
 801fde6:	d10b      	bne.n	801fe00 <_free_r+0x78>
 801fde8:	6824      	ldr	r4, [r4, #0]
 801fdea:	4421      	add	r1, r4
 801fdec:	1854      	adds	r4, r2, r1
 801fdee:	42a3      	cmp	r3, r4
 801fdf0:	6011      	str	r1, [r2, #0]
 801fdf2:	d1dd      	bne.n	801fdb0 <_free_r+0x28>
 801fdf4:	681c      	ldr	r4, [r3, #0]
 801fdf6:	685b      	ldr	r3, [r3, #4]
 801fdf8:	6053      	str	r3, [r2, #4]
 801fdfa:	4421      	add	r1, r4
 801fdfc:	6011      	str	r1, [r2, #0]
 801fdfe:	e7d7      	b.n	801fdb0 <_free_r+0x28>
 801fe00:	d902      	bls.n	801fe08 <_free_r+0x80>
 801fe02:	230c      	movs	r3, #12
 801fe04:	6003      	str	r3, [r0, #0]
 801fe06:	e7d3      	b.n	801fdb0 <_free_r+0x28>
 801fe08:	6825      	ldr	r5, [r4, #0]
 801fe0a:	1961      	adds	r1, r4, r5
 801fe0c:	428b      	cmp	r3, r1
 801fe0e:	bf04      	itt	eq
 801fe10:	6819      	ldreq	r1, [r3, #0]
 801fe12:	685b      	ldreq	r3, [r3, #4]
 801fe14:	6063      	str	r3, [r4, #4]
 801fe16:	bf04      	itt	eq
 801fe18:	1949      	addeq	r1, r1, r5
 801fe1a:	6021      	streq	r1, [r4, #0]
 801fe1c:	6054      	str	r4, [r2, #4]
 801fe1e:	e7c7      	b.n	801fdb0 <_free_r+0x28>
 801fe20:	b003      	add	sp, #12
 801fe22:	bd30      	pop	{r4, r5, pc}
 801fe24:	240057ec 	.word	0x240057ec

0801fe28 <_malloc_r>:
 801fe28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fe2a:	1ccd      	adds	r5, r1, #3
 801fe2c:	f025 0503 	bic.w	r5, r5, #3
 801fe30:	3508      	adds	r5, #8
 801fe32:	2d0c      	cmp	r5, #12
 801fe34:	bf38      	it	cc
 801fe36:	250c      	movcc	r5, #12
 801fe38:	2d00      	cmp	r5, #0
 801fe3a:	4606      	mov	r6, r0
 801fe3c:	db01      	blt.n	801fe42 <_malloc_r+0x1a>
 801fe3e:	42a9      	cmp	r1, r5
 801fe40:	d903      	bls.n	801fe4a <_malloc_r+0x22>
 801fe42:	230c      	movs	r3, #12
 801fe44:	6033      	str	r3, [r6, #0]
 801fe46:	2000      	movs	r0, #0
 801fe48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fe4a:	f003 facb 	bl	80233e4 <__malloc_lock>
 801fe4e:	4921      	ldr	r1, [pc, #132]	; (801fed4 <_malloc_r+0xac>)
 801fe50:	680a      	ldr	r2, [r1, #0]
 801fe52:	4614      	mov	r4, r2
 801fe54:	b99c      	cbnz	r4, 801fe7e <_malloc_r+0x56>
 801fe56:	4f20      	ldr	r7, [pc, #128]	; (801fed8 <_malloc_r+0xb0>)
 801fe58:	683b      	ldr	r3, [r7, #0]
 801fe5a:	b923      	cbnz	r3, 801fe66 <_malloc_r+0x3e>
 801fe5c:	4621      	mov	r1, r4
 801fe5e:	4630      	mov	r0, r6
 801fe60:	f000 ff52 	bl	8020d08 <_sbrk_r>
 801fe64:	6038      	str	r0, [r7, #0]
 801fe66:	4629      	mov	r1, r5
 801fe68:	4630      	mov	r0, r6
 801fe6a:	f000 ff4d 	bl	8020d08 <_sbrk_r>
 801fe6e:	1c43      	adds	r3, r0, #1
 801fe70:	d123      	bne.n	801feba <_malloc_r+0x92>
 801fe72:	230c      	movs	r3, #12
 801fe74:	6033      	str	r3, [r6, #0]
 801fe76:	4630      	mov	r0, r6
 801fe78:	f003 faba 	bl	80233f0 <__malloc_unlock>
 801fe7c:	e7e3      	b.n	801fe46 <_malloc_r+0x1e>
 801fe7e:	6823      	ldr	r3, [r4, #0]
 801fe80:	1b5b      	subs	r3, r3, r5
 801fe82:	d417      	bmi.n	801feb4 <_malloc_r+0x8c>
 801fe84:	2b0b      	cmp	r3, #11
 801fe86:	d903      	bls.n	801fe90 <_malloc_r+0x68>
 801fe88:	6023      	str	r3, [r4, #0]
 801fe8a:	441c      	add	r4, r3
 801fe8c:	6025      	str	r5, [r4, #0]
 801fe8e:	e004      	b.n	801fe9a <_malloc_r+0x72>
 801fe90:	6863      	ldr	r3, [r4, #4]
 801fe92:	42a2      	cmp	r2, r4
 801fe94:	bf0c      	ite	eq
 801fe96:	600b      	streq	r3, [r1, #0]
 801fe98:	6053      	strne	r3, [r2, #4]
 801fe9a:	4630      	mov	r0, r6
 801fe9c:	f003 faa8 	bl	80233f0 <__malloc_unlock>
 801fea0:	f104 000b 	add.w	r0, r4, #11
 801fea4:	1d23      	adds	r3, r4, #4
 801fea6:	f020 0007 	bic.w	r0, r0, #7
 801feaa:	1ac2      	subs	r2, r0, r3
 801feac:	d0cc      	beq.n	801fe48 <_malloc_r+0x20>
 801feae:	1a1b      	subs	r3, r3, r0
 801feb0:	50a3      	str	r3, [r4, r2]
 801feb2:	e7c9      	b.n	801fe48 <_malloc_r+0x20>
 801feb4:	4622      	mov	r2, r4
 801feb6:	6864      	ldr	r4, [r4, #4]
 801feb8:	e7cc      	b.n	801fe54 <_malloc_r+0x2c>
 801feba:	1cc4      	adds	r4, r0, #3
 801febc:	f024 0403 	bic.w	r4, r4, #3
 801fec0:	42a0      	cmp	r0, r4
 801fec2:	d0e3      	beq.n	801fe8c <_malloc_r+0x64>
 801fec4:	1a21      	subs	r1, r4, r0
 801fec6:	4630      	mov	r0, r6
 801fec8:	f000 ff1e 	bl	8020d08 <_sbrk_r>
 801fecc:	3001      	adds	r0, #1
 801fece:	d1dd      	bne.n	801fe8c <_malloc_r+0x64>
 801fed0:	e7cf      	b.n	801fe72 <_malloc_r+0x4a>
 801fed2:	bf00      	nop
 801fed4:	240057ec 	.word	0x240057ec
 801fed8:	240057f0 	.word	0x240057f0

0801fedc <__cvt>:
 801fedc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fede:	ed2d 8b02 	vpush	{d8}
 801fee2:	eeb0 8b40 	vmov.f64	d8, d0
 801fee6:	b085      	sub	sp, #20
 801fee8:	4617      	mov	r7, r2
 801feea:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801feec:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801feee:	ee18 2a90 	vmov	r2, s17
 801fef2:	f025 0520 	bic.w	r5, r5, #32
 801fef6:	2a00      	cmp	r2, #0
 801fef8:	bfb6      	itet	lt
 801fefa:	222d      	movlt	r2, #45	; 0x2d
 801fefc:	2200      	movge	r2, #0
 801fefe:	eeb1 8b40 	vneglt.f64	d8, d0
 801ff02:	2d46      	cmp	r5, #70	; 0x46
 801ff04:	460c      	mov	r4, r1
 801ff06:	701a      	strb	r2, [r3, #0]
 801ff08:	d004      	beq.n	801ff14 <__cvt+0x38>
 801ff0a:	2d45      	cmp	r5, #69	; 0x45
 801ff0c:	d100      	bne.n	801ff10 <__cvt+0x34>
 801ff0e:	3401      	adds	r4, #1
 801ff10:	2102      	movs	r1, #2
 801ff12:	e000      	b.n	801ff16 <__cvt+0x3a>
 801ff14:	2103      	movs	r1, #3
 801ff16:	ab03      	add	r3, sp, #12
 801ff18:	9301      	str	r3, [sp, #4]
 801ff1a:	ab02      	add	r3, sp, #8
 801ff1c:	9300      	str	r3, [sp, #0]
 801ff1e:	4622      	mov	r2, r4
 801ff20:	4633      	mov	r3, r6
 801ff22:	eeb0 0b48 	vmov.f64	d0, d8
 801ff26:	f001 ff1f 	bl	8021d68 <_dtoa_r>
 801ff2a:	2d47      	cmp	r5, #71	; 0x47
 801ff2c:	d109      	bne.n	801ff42 <__cvt+0x66>
 801ff2e:	07fb      	lsls	r3, r7, #31
 801ff30:	d407      	bmi.n	801ff42 <__cvt+0x66>
 801ff32:	9b03      	ldr	r3, [sp, #12]
 801ff34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ff36:	1a1b      	subs	r3, r3, r0
 801ff38:	6013      	str	r3, [r2, #0]
 801ff3a:	b005      	add	sp, #20
 801ff3c:	ecbd 8b02 	vpop	{d8}
 801ff40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ff42:	2d46      	cmp	r5, #70	; 0x46
 801ff44:	eb00 0204 	add.w	r2, r0, r4
 801ff48:	d10c      	bne.n	801ff64 <__cvt+0x88>
 801ff4a:	7803      	ldrb	r3, [r0, #0]
 801ff4c:	2b30      	cmp	r3, #48	; 0x30
 801ff4e:	d107      	bne.n	801ff60 <__cvt+0x84>
 801ff50:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801ff54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ff58:	bf1c      	itt	ne
 801ff5a:	f1c4 0401 	rsbne	r4, r4, #1
 801ff5e:	6034      	strne	r4, [r6, #0]
 801ff60:	6833      	ldr	r3, [r6, #0]
 801ff62:	441a      	add	r2, r3
 801ff64:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801ff68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ff6c:	bf08      	it	eq
 801ff6e:	9203      	streq	r2, [sp, #12]
 801ff70:	2130      	movs	r1, #48	; 0x30
 801ff72:	9b03      	ldr	r3, [sp, #12]
 801ff74:	4293      	cmp	r3, r2
 801ff76:	d2dc      	bcs.n	801ff32 <__cvt+0x56>
 801ff78:	1c5c      	adds	r4, r3, #1
 801ff7a:	9403      	str	r4, [sp, #12]
 801ff7c:	7019      	strb	r1, [r3, #0]
 801ff7e:	e7f8      	b.n	801ff72 <__cvt+0x96>

0801ff80 <__exponent>:
 801ff80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ff82:	4603      	mov	r3, r0
 801ff84:	2900      	cmp	r1, #0
 801ff86:	bfb8      	it	lt
 801ff88:	4249      	neglt	r1, r1
 801ff8a:	f803 2b02 	strb.w	r2, [r3], #2
 801ff8e:	bfb4      	ite	lt
 801ff90:	222d      	movlt	r2, #45	; 0x2d
 801ff92:	222b      	movge	r2, #43	; 0x2b
 801ff94:	2909      	cmp	r1, #9
 801ff96:	7042      	strb	r2, [r0, #1]
 801ff98:	dd2a      	ble.n	801fff0 <__exponent+0x70>
 801ff9a:	f10d 0407 	add.w	r4, sp, #7
 801ff9e:	46a4      	mov	ip, r4
 801ffa0:	270a      	movs	r7, #10
 801ffa2:	46a6      	mov	lr, r4
 801ffa4:	460a      	mov	r2, r1
 801ffa6:	fb91 f6f7 	sdiv	r6, r1, r7
 801ffaa:	fb07 1516 	mls	r5, r7, r6, r1
 801ffae:	3530      	adds	r5, #48	; 0x30
 801ffb0:	2a63      	cmp	r2, #99	; 0x63
 801ffb2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801ffb6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801ffba:	4631      	mov	r1, r6
 801ffbc:	dcf1      	bgt.n	801ffa2 <__exponent+0x22>
 801ffbe:	3130      	adds	r1, #48	; 0x30
 801ffc0:	f1ae 0502 	sub.w	r5, lr, #2
 801ffc4:	f804 1c01 	strb.w	r1, [r4, #-1]
 801ffc8:	1c44      	adds	r4, r0, #1
 801ffca:	4629      	mov	r1, r5
 801ffcc:	4561      	cmp	r1, ip
 801ffce:	d30a      	bcc.n	801ffe6 <__exponent+0x66>
 801ffd0:	f10d 0209 	add.w	r2, sp, #9
 801ffd4:	eba2 020e 	sub.w	r2, r2, lr
 801ffd8:	4565      	cmp	r5, ip
 801ffda:	bf88      	it	hi
 801ffdc:	2200      	movhi	r2, #0
 801ffde:	4413      	add	r3, r2
 801ffe0:	1a18      	subs	r0, r3, r0
 801ffe2:	b003      	add	sp, #12
 801ffe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ffe6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ffea:	f804 2f01 	strb.w	r2, [r4, #1]!
 801ffee:	e7ed      	b.n	801ffcc <__exponent+0x4c>
 801fff0:	2330      	movs	r3, #48	; 0x30
 801fff2:	3130      	adds	r1, #48	; 0x30
 801fff4:	7083      	strb	r3, [r0, #2]
 801fff6:	70c1      	strb	r1, [r0, #3]
 801fff8:	1d03      	adds	r3, r0, #4
 801fffa:	e7f1      	b.n	801ffe0 <__exponent+0x60>
 801fffc:	0000      	movs	r0, r0
	...

08020000 <_printf_float>:
 8020000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020004:	b08b      	sub	sp, #44	; 0x2c
 8020006:	460c      	mov	r4, r1
 8020008:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 802000c:	4616      	mov	r6, r2
 802000e:	461f      	mov	r7, r3
 8020010:	4605      	mov	r5, r0
 8020012:	f003 f969 	bl	80232e8 <_localeconv_r>
 8020016:	f8d0 b000 	ldr.w	fp, [r0]
 802001a:	4658      	mov	r0, fp
 802001c:	f7e0 f960 	bl	80002e0 <strlen>
 8020020:	2300      	movs	r3, #0
 8020022:	9308      	str	r3, [sp, #32]
 8020024:	f8d8 3000 	ldr.w	r3, [r8]
 8020028:	f894 9018 	ldrb.w	r9, [r4, #24]
 802002c:	6822      	ldr	r2, [r4, #0]
 802002e:	3307      	adds	r3, #7
 8020030:	f023 0307 	bic.w	r3, r3, #7
 8020034:	f103 0108 	add.w	r1, r3, #8
 8020038:	f8c8 1000 	str.w	r1, [r8]
 802003c:	4682      	mov	sl, r0
 802003e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020042:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8020046:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80202a8 <_printf_float+0x2a8>
 802004a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 802004e:	eeb0 6bc0 	vabs.f64	d6, d0
 8020052:	eeb4 6b47 	vcmp.f64	d6, d7
 8020056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802005a:	dd24      	ble.n	80200a6 <_printf_float+0xa6>
 802005c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8020060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020064:	d502      	bpl.n	802006c <_printf_float+0x6c>
 8020066:	232d      	movs	r3, #45	; 0x2d
 8020068:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802006c:	4b90      	ldr	r3, [pc, #576]	; (80202b0 <_printf_float+0x2b0>)
 802006e:	4891      	ldr	r0, [pc, #580]	; (80202b4 <_printf_float+0x2b4>)
 8020070:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8020074:	bf94      	ite	ls
 8020076:	4698      	movls	r8, r3
 8020078:	4680      	movhi	r8, r0
 802007a:	2303      	movs	r3, #3
 802007c:	6123      	str	r3, [r4, #16]
 802007e:	f022 0204 	bic.w	r2, r2, #4
 8020082:	2300      	movs	r3, #0
 8020084:	6022      	str	r2, [r4, #0]
 8020086:	9304      	str	r3, [sp, #16]
 8020088:	9700      	str	r7, [sp, #0]
 802008a:	4633      	mov	r3, r6
 802008c:	aa09      	add	r2, sp, #36	; 0x24
 802008e:	4621      	mov	r1, r4
 8020090:	4628      	mov	r0, r5
 8020092:	f000 f9d3 	bl	802043c <_printf_common>
 8020096:	3001      	adds	r0, #1
 8020098:	f040 808a 	bne.w	80201b0 <_printf_float+0x1b0>
 802009c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80200a0:	b00b      	add	sp, #44	; 0x2c
 80200a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80200a6:	eeb4 0b40 	vcmp.f64	d0, d0
 80200aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80200ae:	d709      	bvc.n	80200c4 <_printf_float+0xc4>
 80200b0:	ee10 3a90 	vmov	r3, s1
 80200b4:	2b00      	cmp	r3, #0
 80200b6:	bfbc      	itt	lt
 80200b8:	232d      	movlt	r3, #45	; 0x2d
 80200ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80200be:	487e      	ldr	r0, [pc, #504]	; (80202b8 <_printf_float+0x2b8>)
 80200c0:	4b7e      	ldr	r3, [pc, #504]	; (80202bc <_printf_float+0x2bc>)
 80200c2:	e7d5      	b.n	8020070 <_printf_float+0x70>
 80200c4:	6863      	ldr	r3, [r4, #4]
 80200c6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80200ca:	9104      	str	r1, [sp, #16]
 80200cc:	1c59      	adds	r1, r3, #1
 80200ce:	d13c      	bne.n	802014a <_printf_float+0x14a>
 80200d0:	2306      	movs	r3, #6
 80200d2:	6063      	str	r3, [r4, #4]
 80200d4:	2300      	movs	r3, #0
 80200d6:	9303      	str	r3, [sp, #12]
 80200d8:	ab08      	add	r3, sp, #32
 80200da:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80200de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80200e2:	ab07      	add	r3, sp, #28
 80200e4:	6861      	ldr	r1, [r4, #4]
 80200e6:	9300      	str	r3, [sp, #0]
 80200e8:	6022      	str	r2, [r4, #0]
 80200ea:	f10d 031b 	add.w	r3, sp, #27
 80200ee:	4628      	mov	r0, r5
 80200f0:	f7ff fef4 	bl	801fedc <__cvt>
 80200f4:	9b04      	ldr	r3, [sp, #16]
 80200f6:	9907      	ldr	r1, [sp, #28]
 80200f8:	2b47      	cmp	r3, #71	; 0x47
 80200fa:	4680      	mov	r8, r0
 80200fc:	d108      	bne.n	8020110 <_printf_float+0x110>
 80200fe:	1cc8      	adds	r0, r1, #3
 8020100:	db02      	blt.n	8020108 <_printf_float+0x108>
 8020102:	6863      	ldr	r3, [r4, #4]
 8020104:	4299      	cmp	r1, r3
 8020106:	dd41      	ble.n	802018c <_printf_float+0x18c>
 8020108:	f1a9 0902 	sub.w	r9, r9, #2
 802010c:	fa5f f989 	uxtb.w	r9, r9
 8020110:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8020114:	d820      	bhi.n	8020158 <_printf_float+0x158>
 8020116:	3901      	subs	r1, #1
 8020118:	464a      	mov	r2, r9
 802011a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 802011e:	9107      	str	r1, [sp, #28]
 8020120:	f7ff ff2e 	bl	801ff80 <__exponent>
 8020124:	9a08      	ldr	r2, [sp, #32]
 8020126:	9004      	str	r0, [sp, #16]
 8020128:	1813      	adds	r3, r2, r0
 802012a:	2a01      	cmp	r2, #1
 802012c:	6123      	str	r3, [r4, #16]
 802012e:	dc02      	bgt.n	8020136 <_printf_float+0x136>
 8020130:	6822      	ldr	r2, [r4, #0]
 8020132:	07d2      	lsls	r2, r2, #31
 8020134:	d501      	bpl.n	802013a <_printf_float+0x13a>
 8020136:	3301      	adds	r3, #1
 8020138:	6123      	str	r3, [r4, #16]
 802013a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 802013e:	2b00      	cmp	r3, #0
 8020140:	d0a2      	beq.n	8020088 <_printf_float+0x88>
 8020142:	232d      	movs	r3, #45	; 0x2d
 8020144:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020148:	e79e      	b.n	8020088 <_printf_float+0x88>
 802014a:	9904      	ldr	r1, [sp, #16]
 802014c:	2947      	cmp	r1, #71	; 0x47
 802014e:	d1c1      	bne.n	80200d4 <_printf_float+0xd4>
 8020150:	2b00      	cmp	r3, #0
 8020152:	d1bf      	bne.n	80200d4 <_printf_float+0xd4>
 8020154:	2301      	movs	r3, #1
 8020156:	e7bc      	b.n	80200d2 <_printf_float+0xd2>
 8020158:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 802015c:	d118      	bne.n	8020190 <_printf_float+0x190>
 802015e:	2900      	cmp	r1, #0
 8020160:	6863      	ldr	r3, [r4, #4]
 8020162:	dd0b      	ble.n	802017c <_printf_float+0x17c>
 8020164:	6121      	str	r1, [r4, #16]
 8020166:	b913      	cbnz	r3, 802016e <_printf_float+0x16e>
 8020168:	6822      	ldr	r2, [r4, #0]
 802016a:	07d0      	lsls	r0, r2, #31
 802016c:	d502      	bpl.n	8020174 <_printf_float+0x174>
 802016e:	3301      	adds	r3, #1
 8020170:	440b      	add	r3, r1
 8020172:	6123      	str	r3, [r4, #16]
 8020174:	2300      	movs	r3, #0
 8020176:	65a1      	str	r1, [r4, #88]	; 0x58
 8020178:	9304      	str	r3, [sp, #16]
 802017a:	e7de      	b.n	802013a <_printf_float+0x13a>
 802017c:	b913      	cbnz	r3, 8020184 <_printf_float+0x184>
 802017e:	6822      	ldr	r2, [r4, #0]
 8020180:	07d2      	lsls	r2, r2, #31
 8020182:	d501      	bpl.n	8020188 <_printf_float+0x188>
 8020184:	3302      	adds	r3, #2
 8020186:	e7f4      	b.n	8020172 <_printf_float+0x172>
 8020188:	2301      	movs	r3, #1
 802018a:	e7f2      	b.n	8020172 <_printf_float+0x172>
 802018c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8020190:	9b08      	ldr	r3, [sp, #32]
 8020192:	4299      	cmp	r1, r3
 8020194:	db05      	blt.n	80201a2 <_printf_float+0x1a2>
 8020196:	6823      	ldr	r3, [r4, #0]
 8020198:	6121      	str	r1, [r4, #16]
 802019a:	07d8      	lsls	r0, r3, #31
 802019c:	d5ea      	bpl.n	8020174 <_printf_float+0x174>
 802019e:	1c4b      	adds	r3, r1, #1
 80201a0:	e7e7      	b.n	8020172 <_printf_float+0x172>
 80201a2:	2900      	cmp	r1, #0
 80201a4:	bfd4      	ite	le
 80201a6:	f1c1 0202 	rsble	r2, r1, #2
 80201aa:	2201      	movgt	r2, #1
 80201ac:	4413      	add	r3, r2
 80201ae:	e7e0      	b.n	8020172 <_printf_float+0x172>
 80201b0:	6823      	ldr	r3, [r4, #0]
 80201b2:	055a      	lsls	r2, r3, #21
 80201b4:	d407      	bmi.n	80201c6 <_printf_float+0x1c6>
 80201b6:	6923      	ldr	r3, [r4, #16]
 80201b8:	4642      	mov	r2, r8
 80201ba:	4631      	mov	r1, r6
 80201bc:	4628      	mov	r0, r5
 80201be:	47b8      	blx	r7
 80201c0:	3001      	adds	r0, #1
 80201c2:	d12a      	bne.n	802021a <_printf_float+0x21a>
 80201c4:	e76a      	b.n	802009c <_printf_float+0x9c>
 80201c6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80201ca:	f240 80e2 	bls.w	8020392 <_printf_float+0x392>
 80201ce:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80201d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80201d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80201da:	d133      	bne.n	8020244 <_printf_float+0x244>
 80201dc:	4a38      	ldr	r2, [pc, #224]	; (80202c0 <_printf_float+0x2c0>)
 80201de:	2301      	movs	r3, #1
 80201e0:	4631      	mov	r1, r6
 80201e2:	4628      	mov	r0, r5
 80201e4:	47b8      	blx	r7
 80201e6:	3001      	adds	r0, #1
 80201e8:	f43f af58 	beq.w	802009c <_printf_float+0x9c>
 80201ec:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80201f0:	429a      	cmp	r2, r3
 80201f2:	db02      	blt.n	80201fa <_printf_float+0x1fa>
 80201f4:	6823      	ldr	r3, [r4, #0]
 80201f6:	07d8      	lsls	r0, r3, #31
 80201f8:	d50f      	bpl.n	802021a <_printf_float+0x21a>
 80201fa:	4653      	mov	r3, sl
 80201fc:	465a      	mov	r2, fp
 80201fe:	4631      	mov	r1, r6
 8020200:	4628      	mov	r0, r5
 8020202:	47b8      	blx	r7
 8020204:	3001      	adds	r0, #1
 8020206:	f43f af49 	beq.w	802009c <_printf_float+0x9c>
 802020a:	f04f 0800 	mov.w	r8, #0
 802020e:	f104 091a 	add.w	r9, r4, #26
 8020212:	9b08      	ldr	r3, [sp, #32]
 8020214:	3b01      	subs	r3, #1
 8020216:	4543      	cmp	r3, r8
 8020218:	dc09      	bgt.n	802022e <_printf_float+0x22e>
 802021a:	6823      	ldr	r3, [r4, #0]
 802021c:	079b      	lsls	r3, r3, #30
 802021e:	f100 8108 	bmi.w	8020432 <_printf_float+0x432>
 8020222:	68e0      	ldr	r0, [r4, #12]
 8020224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020226:	4298      	cmp	r0, r3
 8020228:	bfb8      	it	lt
 802022a:	4618      	movlt	r0, r3
 802022c:	e738      	b.n	80200a0 <_printf_float+0xa0>
 802022e:	2301      	movs	r3, #1
 8020230:	464a      	mov	r2, r9
 8020232:	4631      	mov	r1, r6
 8020234:	4628      	mov	r0, r5
 8020236:	47b8      	blx	r7
 8020238:	3001      	adds	r0, #1
 802023a:	f43f af2f 	beq.w	802009c <_printf_float+0x9c>
 802023e:	f108 0801 	add.w	r8, r8, #1
 8020242:	e7e6      	b.n	8020212 <_printf_float+0x212>
 8020244:	9b07      	ldr	r3, [sp, #28]
 8020246:	2b00      	cmp	r3, #0
 8020248:	dc3c      	bgt.n	80202c4 <_printf_float+0x2c4>
 802024a:	4a1d      	ldr	r2, [pc, #116]	; (80202c0 <_printf_float+0x2c0>)
 802024c:	2301      	movs	r3, #1
 802024e:	4631      	mov	r1, r6
 8020250:	4628      	mov	r0, r5
 8020252:	47b8      	blx	r7
 8020254:	3001      	adds	r0, #1
 8020256:	f43f af21 	beq.w	802009c <_printf_float+0x9c>
 802025a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 802025e:	4313      	orrs	r3, r2
 8020260:	d102      	bne.n	8020268 <_printf_float+0x268>
 8020262:	6823      	ldr	r3, [r4, #0]
 8020264:	07d9      	lsls	r1, r3, #31
 8020266:	d5d8      	bpl.n	802021a <_printf_float+0x21a>
 8020268:	4653      	mov	r3, sl
 802026a:	465a      	mov	r2, fp
 802026c:	4631      	mov	r1, r6
 802026e:	4628      	mov	r0, r5
 8020270:	47b8      	blx	r7
 8020272:	3001      	adds	r0, #1
 8020274:	f43f af12 	beq.w	802009c <_printf_float+0x9c>
 8020278:	f04f 0900 	mov.w	r9, #0
 802027c:	f104 0a1a 	add.w	sl, r4, #26
 8020280:	9b07      	ldr	r3, [sp, #28]
 8020282:	425b      	negs	r3, r3
 8020284:	454b      	cmp	r3, r9
 8020286:	dc01      	bgt.n	802028c <_printf_float+0x28c>
 8020288:	9b08      	ldr	r3, [sp, #32]
 802028a:	e795      	b.n	80201b8 <_printf_float+0x1b8>
 802028c:	2301      	movs	r3, #1
 802028e:	4652      	mov	r2, sl
 8020290:	4631      	mov	r1, r6
 8020292:	4628      	mov	r0, r5
 8020294:	47b8      	blx	r7
 8020296:	3001      	adds	r0, #1
 8020298:	f43f af00 	beq.w	802009c <_printf_float+0x9c>
 802029c:	f109 0901 	add.w	r9, r9, #1
 80202a0:	e7ee      	b.n	8020280 <_printf_float+0x280>
 80202a2:	bf00      	nop
 80202a4:	f3af 8000 	nop.w
 80202a8:	ffffffff 	.word	0xffffffff
 80202ac:	7fefffff 	.word	0x7fefffff
 80202b0:	08029354 	.word	0x08029354
 80202b4:	08029358 	.word	0x08029358
 80202b8:	08029360 	.word	0x08029360
 80202bc:	0802935c 	.word	0x0802935c
 80202c0:	08029364 	.word	0x08029364
 80202c4:	9a08      	ldr	r2, [sp, #32]
 80202c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80202c8:	429a      	cmp	r2, r3
 80202ca:	bfa8      	it	ge
 80202cc:	461a      	movge	r2, r3
 80202ce:	2a00      	cmp	r2, #0
 80202d0:	4691      	mov	r9, r2
 80202d2:	dc38      	bgt.n	8020346 <_printf_float+0x346>
 80202d4:	2300      	movs	r3, #0
 80202d6:	9305      	str	r3, [sp, #20]
 80202d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80202dc:	f104 021a 	add.w	r2, r4, #26
 80202e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80202e2:	9905      	ldr	r1, [sp, #20]
 80202e4:	9304      	str	r3, [sp, #16]
 80202e6:	eba3 0309 	sub.w	r3, r3, r9
 80202ea:	428b      	cmp	r3, r1
 80202ec:	dc33      	bgt.n	8020356 <_printf_float+0x356>
 80202ee:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80202f2:	429a      	cmp	r2, r3
 80202f4:	db3c      	blt.n	8020370 <_printf_float+0x370>
 80202f6:	6823      	ldr	r3, [r4, #0]
 80202f8:	07da      	lsls	r2, r3, #31
 80202fa:	d439      	bmi.n	8020370 <_printf_float+0x370>
 80202fc:	9a08      	ldr	r2, [sp, #32]
 80202fe:	9b04      	ldr	r3, [sp, #16]
 8020300:	9907      	ldr	r1, [sp, #28]
 8020302:	1ad3      	subs	r3, r2, r3
 8020304:	eba2 0901 	sub.w	r9, r2, r1
 8020308:	4599      	cmp	r9, r3
 802030a:	bfa8      	it	ge
 802030c:	4699      	movge	r9, r3
 802030e:	f1b9 0f00 	cmp.w	r9, #0
 8020312:	dc35      	bgt.n	8020380 <_printf_float+0x380>
 8020314:	f04f 0800 	mov.w	r8, #0
 8020318:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802031c:	f104 0a1a 	add.w	sl, r4, #26
 8020320:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8020324:	1a9b      	subs	r3, r3, r2
 8020326:	eba3 0309 	sub.w	r3, r3, r9
 802032a:	4543      	cmp	r3, r8
 802032c:	f77f af75 	ble.w	802021a <_printf_float+0x21a>
 8020330:	2301      	movs	r3, #1
 8020332:	4652      	mov	r2, sl
 8020334:	4631      	mov	r1, r6
 8020336:	4628      	mov	r0, r5
 8020338:	47b8      	blx	r7
 802033a:	3001      	adds	r0, #1
 802033c:	f43f aeae 	beq.w	802009c <_printf_float+0x9c>
 8020340:	f108 0801 	add.w	r8, r8, #1
 8020344:	e7ec      	b.n	8020320 <_printf_float+0x320>
 8020346:	4613      	mov	r3, r2
 8020348:	4631      	mov	r1, r6
 802034a:	4642      	mov	r2, r8
 802034c:	4628      	mov	r0, r5
 802034e:	47b8      	blx	r7
 8020350:	3001      	adds	r0, #1
 8020352:	d1bf      	bne.n	80202d4 <_printf_float+0x2d4>
 8020354:	e6a2      	b.n	802009c <_printf_float+0x9c>
 8020356:	2301      	movs	r3, #1
 8020358:	4631      	mov	r1, r6
 802035a:	4628      	mov	r0, r5
 802035c:	9204      	str	r2, [sp, #16]
 802035e:	47b8      	blx	r7
 8020360:	3001      	adds	r0, #1
 8020362:	f43f ae9b 	beq.w	802009c <_printf_float+0x9c>
 8020366:	9b05      	ldr	r3, [sp, #20]
 8020368:	9a04      	ldr	r2, [sp, #16]
 802036a:	3301      	adds	r3, #1
 802036c:	9305      	str	r3, [sp, #20]
 802036e:	e7b7      	b.n	80202e0 <_printf_float+0x2e0>
 8020370:	4653      	mov	r3, sl
 8020372:	465a      	mov	r2, fp
 8020374:	4631      	mov	r1, r6
 8020376:	4628      	mov	r0, r5
 8020378:	47b8      	blx	r7
 802037a:	3001      	adds	r0, #1
 802037c:	d1be      	bne.n	80202fc <_printf_float+0x2fc>
 802037e:	e68d      	b.n	802009c <_printf_float+0x9c>
 8020380:	9a04      	ldr	r2, [sp, #16]
 8020382:	464b      	mov	r3, r9
 8020384:	4442      	add	r2, r8
 8020386:	4631      	mov	r1, r6
 8020388:	4628      	mov	r0, r5
 802038a:	47b8      	blx	r7
 802038c:	3001      	adds	r0, #1
 802038e:	d1c1      	bne.n	8020314 <_printf_float+0x314>
 8020390:	e684      	b.n	802009c <_printf_float+0x9c>
 8020392:	9a08      	ldr	r2, [sp, #32]
 8020394:	2a01      	cmp	r2, #1
 8020396:	dc01      	bgt.n	802039c <_printf_float+0x39c>
 8020398:	07db      	lsls	r3, r3, #31
 802039a:	d537      	bpl.n	802040c <_printf_float+0x40c>
 802039c:	2301      	movs	r3, #1
 802039e:	4642      	mov	r2, r8
 80203a0:	4631      	mov	r1, r6
 80203a2:	4628      	mov	r0, r5
 80203a4:	47b8      	blx	r7
 80203a6:	3001      	adds	r0, #1
 80203a8:	f43f ae78 	beq.w	802009c <_printf_float+0x9c>
 80203ac:	4653      	mov	r3, sl
 80203ae:	465a      	mov	r2, fp
 80203b0:	4631      	mov	r1, r6
 80203b2:	4628      	mov	r0, r5
 80203b4:	47b8      	blx	r7
 80203b6:	3001      	adds	r0, #1
 80203b8:	f43f ae70 	beq.w	802009c <_printf_float+0x9c>
 80203bc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80203c0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80203c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80203c8:	d01b      	beq.n	8020402 <_printf_float+0x402>
 80203ca:	9b08      	ldr	r3, [sp, #32]
 80203cc:	f108 0201 	add.w	r2, r8, #1
 80203d0:	3b01      	subs	r3, #1
 80203d2:	4631      	mov	r1, r6
 80203d4:	4628      	mov	r0, r5
 80203d6:	47b8      	blx	r7
 80203d8:	3001      	adds	r0, #1
 80203da:	d10e      	bne.n	80203fa <_printf_float+0x3fa>
 80203dc:	e65e      	b.n	802009c <_printf_float+0x9c>
 80203de:	2301      	movs	r3, #1
 80203e0:	464a      	mov	r2, r9
 80203e2:	4631      	mov	r1, r6
 80203e4:	4628      	mov	r0, r5
 80203e6:	47b8      	blx	r7
 80203e8:	3001      	adds	r0, #1
 80203ea:	f43f ae57 	beq.w	802009c <_printf_float+0x9c>
 80203ee:	f108 0801 	add.w	r8, r8, #1
 80203f2:	9b08      	ldr	r3, [sp, #32]
 80203f4:	3b01      	subs	r3, #1
 80203f6:	4543      	cmp	r3, r8
 80203f8:	dcf1      	bgt.n	80203de <_printf_float+0x3de>
 80203fa:	9b04      	ldr	r3, [sp, #16]
 80203fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8020400:	e6db      	b.n	80201ba <_printf_float+0x1ba>
 8020402:	f04f 0800 	mov.w	r8, #0
 8020406:	f104 091a 	add.w	r9, r4, #26
 802040a:	e7f2      	b.n	80203f2 <_printf_float+0x3f2>
 802040c:	2301      	movs	r3, #1
 802040e:	4642      	mov	r2, r8
 8020410:	e7df      	b.n	80203d2 <_printf_float+0x3d2>
 8020412:	2301      	movs	r3, #1
 8020414:	464a      	mov	r2, r9
 8020416:	4631      	mov	r1, r6
 8020418:	4628      	mov	r0, r5
 802041a:	47b8      	blx	r7
 802041c:	3001      	adds	r0, #1
 802041e:	f43f ae3d 	beq.w	802009c <_printf_float+0x9c>
 8020422:	f108 0801 	add.w	r8, r8, #1
 8020426:	68e3      	ldr	r3, [r4, #12]
 8020428:	9909      	ldr	r1, [sp, #36]	; 0x24
 802042a:	1a5b      	subs	r3, r3, r1
 802042c:	4543      	cmp	r3, r8
 802042e:	dcf0      	bgt.n	8020412 <_printf_float+0x412>
 8020430:	e6f7      	b.n	8020222 <_printf_float+0x222>
 8020432:	f04f 0800 	mov.w	r8, #0
 8020436:	f104 0919 	add.w	r9, r4, #25
 802043a:	e7f4      	b.n	8020426 <_printf_float+0x426>

0802043c <_printf_common>:
 802043c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020440:	4616      	mov	r6, r2
 8020442:	4699      	mov	r9, r3
 8020444:	688a      	ldr	r2, [r1, #8]
 8020446:	690b      	ldr	r3, [r1, #16]
 8020448:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802044c:	4293      	cmp	r3, r2
 802044e:	bfb8      	it	lt
 8020450:	4613      	movlt	r3, r2
 8020452:	6033      	str	r3, [r6, #0]
 8020454:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8020458:	4607      	mov	r7, r0
 802045a:	460c      	mov	r4, r1
 802045c:	b10a      	cbz	r2, 8020462 <_printf_common+0x26>
 802045e:	3301      	adds	r3, #1
 8020460:	6033      	str	r3, [r6, #0]
 8020462:	6823      	ldr	r3, [r4, #0]
 8020464:	0699      	lsls	r1, r3, #26
 8020466:	bf42      	ittt	mi
 8020468:	6833      	ldrmi	r3, [r6, #0]
 802046a:	3302      	addmi	r3, #2
 802046c:	6033      	strmi	r3, [r6, #0]
 802046e:	6825      	ldr	r5, [r4, #0]
 8020470:	f015 0506 	ands.w	r5, r5, #6
 8020474:	d106      	bne.n	8020484 <_printf_common+0x48>
 8020476:	f104 0a19 	add.w	sl, r4, #25
 802047a:	68e3      	ldr	r3, [r4, #12]
 802047c:	6832      	ldr	r2, [r6, #0]
 802047e:	1a9b      	subs	r3, r3, r2
 8020480:	42ab      	cmp	r3, r5
 8020482:	dc26      	bgt.n	80204d2 <_printf_common+0x96>
 8020484:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8020488:	1e13      	subs	r3, r2, #0
 802048a:	6822      	ldr	r2, [r4, #0]
 802048c:	bf18      	it	ne
 802048e:	2301      	movne	r3, #1
 8020490:	0692      	lsls	r2, r2, #26
 8020492:	d42b      	bmi.n	80204ec <_printf_common+0xb0>
 8020494:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020498:	4649      	mov	r1, r9
 802049a:	4638      	mov	r0, r7
 802049c:	47c0      	blx	r8
 802049e:	3001      	adds	r0, #1
 80204a0:	d01e      	beq.n	80204e0 <_printf_common+0xa4>
 80204a2:	6823      	ldr	r3, [r4, #0]
 80204a4:	68e5      	ldr	r5, [r4, #12]
 80204a6:	6832      	ldr	r2, [r6, #0]
 80204a8:	f003 0306 	and.w	r3, r3, #6
 80204ac:	2b04      	cmp	r3, #4
 80204ae:	bf08      	it	eq
 80204b0:	1aad      	subeq	r5, r5, r2
 80204b2:	68a3      	ldr	r3, [r4, #8]
 80204b4:	6922      	ldr	r2, [r4, #16]
 80204b6:	bf0c      	ite	eq
 80204b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80204bc:	2500      	movne	r5, #0
 80204be:	4293      	cmp	r3, r2
 80204c0:	bfc4      	itt	gt
 80204c2:	1a9b      	subgt	r3, r3, r2
 80204c4:	18ed      	addgt	r5, r5, r3
 80204c6:	2600      	movs	r6, #0
 80204c8:	341a      	adds	r4, #26
 80204ca:	42b5      	cmp	r5, r6
 80204cc:	d11a      	bne.n	8020504 <_printf_common+0xc8>
 80204ce:	2000      	movs	r0, #0
 80204d0:	e008      	b.n	80204e4 <_printf_common+0xa8>
 80204d2:	2301      	movs	r3, #1
 80204d4:	4652      	mov	r2, sl
 80204d6:	4649      	mov	r1, r9
 80204d8:	4638      	mov	r0, r7
 80204da:	47c0      	blx	r8
 80204dc:	3001      	adds	r0, #1
 80204de:	d103      	bne.n	80204e8 <_printf_common+0xac>
 80204e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80204e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80204e8:	3501      	adds	r5, #1
 80204ea:	e7c6      	b.n	802047a <_printf_common+0x3e>
 80204ec:	18e1      	adds	r1, r4, r3
 80204ee:	1c5a      	adds	r2, r3, #1
 80204f0:	2030      	movs	r0, #48	; 0x30
 80204f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80204f6:	4422      	add	r2, r4
 80204f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80204fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8020500:	3302      	adds	r3, #2
 8020502:	e7c7      	b.n	8020494 <_printf_common+0x58>
 8020504:	2301      	movs	r3, #1
 8020506:	4622      	mov	r2, r4
 8020508:	4649      	mov	r1, r9
 802050a:	4638      	mov	r0, r7
 802050c:	47c0      	blx	r8
 802050e:	3001      	adds	r0, #1
 8020510:	d0e6      	beq.n	80204e0 <_printf_common+0xa4>
 8020512:	3601      	adds	r6, #1
 8020514:	e7d9      	b.n	80204ca <_printf_common+0x8e>
	...

08020518 <_printf_i>:
 8020518:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802051c:	460c      	mov	r4, r1
 802051e:	4691      	mov	r9, r2
 8020520:	7e27      	ldrb	r7, [r4, #24]
 8020522:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020524:	2f78      	cmp	r7, #120	; 0x78
 8020526:	4680      	mov	r8, r0
 8020528:	469a      	mov	sl, r3
 802052a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802052e:	d807      	bhi.n	8020540 <_printf_i+0x28>
 8020530:	2f62      	cmp	r7, #98	; 0x62
 8020532:	d80a      	bhi.n	802054a <_printf_i+0x32>
 8020534:	2f00      	cmp	r7, #0
 8020536:	f000 80d8 	beq.w	80206ea <_printf_i+0x1d2>
 802053a:	2f58      	cmp	r7, #88	; 0x58
 802053c:	f000 80a3 	beq.w	8020686 <_printf_i+0x16e>
 8020540:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8020544:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8020548:	e03a      	b.n	80205c0 <_printf_i+0xa8>
 802054a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802054e:	2b15      	cmp	r3, #21
 8020550:	d8f6      	bhi.n	8020540 <_printf_i+0x28>
 8020552:	a001      	add	r0, pc, #4	; (adr r0, 8020558 <_printf_i+0x40>)
 8020554:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8020558:	080205b1 	.word	0x080205b1
 802055c:	080205c5 	.word	0x080205c5
 8020560:	08020541 	.word	0x08020541
 8020564:	08020541 	.word	0x08020541
 8020568:	08020541 	.word	0x08020541
 802056c:	08020541 	.word	0x08020541
 8020570:	080205c5 	.word	0x080205c5
 8020574:	08020541 	.word	0x08020541
 8020578:	08020541 	.word	0x08020541
 802057c:	08020541 	.word	0x08020541
 8020580:	08020541 	.word	0x08020541
 8020584:	080206d1 	.word	0x080206d1
 8020588:	080205f5 	.word	0x080205f5
 802058c:	080206b3 	.word	0x080206b3
 8020590:	08020541 	.word	0x08020541
 8020594:	08020541 	.word	0x08020541
 8020598:	080206f3 	.word	0x080206f3
 802059c:	08020541 	.word	0x08020541
 80205a0:	080205f5 	.word	0x080205f5
 80205a4:	08020541 	.word	0x08020541
 80205a8:	08020541 	.word	0x08020541
 80205ac:	080206bb 	.word	0x080206bb
 80205b0:	680b      	ldr	r3, [r1, #0]
 80205b2:	1d1a      	adds	r2, r3, #4
 80205b4:	681b      	ldr	r3, [r3, #0]
 80205b6:	600a      	str	r2, [r1, #0]
 80205b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80205bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80205c0:	2301      	movs	r3, #1
 80205c2:	e0a3      	b.n	802070c <_printf_i+0x1f4>
 80205c4:	6825      	ldr	r5, [r4, #0]
 80205c6:	6808      	ldr	r0, [r1, #0]
 80205c8:	062e      	lsls	r6, r5, #24
 80205ca:	f100 0304 	add.w	r3, r0, #4
 80205ce:	d50a      	bpl.n	80205e6 <_printf_i+0xce>
 80205d0:	6805      	ldr	r5, [r0, #0]
 80205d2:	600b      	str	r3, [r1, #0]
 80205d4:	2d00      	cmp	r5, #0
 80205d6:	da03      	bge.n	80205e0 <_printf_i+0xc8>
 80205d8:	232d      	movs	r3, #45	; 0x2d
 80205da:	426d      	negs	r5, r5
 80205dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80205e0:	485e      	ldr	r0, [pc, #376]	; (802075c <_printf_i+0x244>)
 80205e2:	230a      	movs	r3, #10
 80205e4:	e019      	b.n	802061a <_printf_i+0x102>
 80205e6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80205ea:	6805      	ldr	r5, [r0, #0]
 80205ec:	600b      	str	r3, [r1, #0]
 80205ee:	bf18      	it	ne
 80205f0:	b22d      	sxthne	r5, r5
 80205f2:	e7ef      	b.n	80205d4 <_printf_i+0xbc>
 80205f4:	680b      	ldr	r3, [r1, #0]
 80205f6:	6825      	ldr	r5, [r4, #0]
 80205f8:	1d18      	adds	r0, r3, #4
 80205fa:	6008      	str	r0, [r1, #0]
 80205fc:	0628      	lsls	r0, r5, #24
 80205fe:	d501      	bpl.n	8020604 <_printf_i+0xec>
 8020600:	681d      	ldr	r5, [r3, #0]
 8020602:	e002      	b.n	802060a <_printf_i+0xf2>
 8020604:	0669      	lsls	r1, r5, #25
 8020606:	d5fb      	bpl.n	8020600 <_printf_i+0xe8>
 8020608:	881d      	ldrh	r5, [r3, #0]
 802060a:	4854      	ldr	r0, [pc, #336]	; (802075c <_printf_i+0x244>)
 802060c:	2f6f      	cmp	r7, #111	; 0x6f
 802060e:	bf0c      	ite	eq
 8020610:	2308      	moveq	r3, #8
 8020612:	230a      	movne	r3, #10
 8020614:	2100      	movs	r1, #0
 8020616:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802061a:	6866      	ldr	r6, [r4, #4]
 802061c:	60a6      	str	r6, [r4, #8]
 802061e:	2e00      	cmp	r6, #0
 8020620:	bfa2      	ittt	ge
 8020622:	6821      	ldrge	r1, [r4, #0]
 8020624:	f021 0104 	bicge.w	r1, r1, #4
 8020628:	6021      	strge	r1, [r4, #0]
 802062a:	b90d      	cbnz	r5, 8020630 <_printf_i+0x118>
 802062c:	2e00      	cmp	r6, #0
 802062e:	d04d      	beq.n	80206cc <_printf_i+0x1b4>
 8020630:	4616      	mov	r6, r2
 8020632:	fbb5 f1f3 	udiv	r1, r5, r3
 8020636:	fb03 5711 	mls	r7, r3, r1, r5
 802063a:	5dc7      	ldrb	r7, [r0, r7]
 802063c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8020640:	462f      	mov	r7, r5
 8020642:	42bb      	cmp	r3, r7
 8020644:	460d      	mov	r5, r1
 8020646:	d9f4      	bls.n	8020632 <_printf_i+0x11a>
 8020648:	2b08      	cmp	r3, #8
 802064a:	d10b      	bne.n	8020664 <_printf_i+0x14c>
 802064c:	6823      	ldr	r3, [r4, #0]
 802064e:	07df      	lsls	r7, r3, #31
 8020650:	d508      	bpl.n	8020664 <_printf_i+0x14c>
 8020652:	6923      	ldr	r3, [r4, #16]
 8020654:	6861      	ldr	r1, [r4, #4]
 8020656:	4299      	cmp	r1, r3
 8020658:	bfde      	ittt	le
 802065a:	2330      	movle	r3, #48	; 0x30
 802065c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8020660:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8020664:	1b92      	subs	r2, r2, r6
 8020666:	6122      	str	r2, [r4, #16]
 8020668:	f8cd a000 	str.w	sl, [sp]
 802066c:	464b      	mov	r3, r9
 802066e:	aa03      	add	r2, sp, #12
 8020670:	4621      	mov	r1, r4
 8020672:	4640      	mov	r0, r8
 8020674:	f7ff fee2 	bl	802043c <_printf_common>
 8020678:	3001      	adds	r0, #1
 802067a:	d14c      	bne.n	8020716 <_printf_i+0x1fe>
 802067c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020680:	b004      	add	sp, #16
 8020682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020686:	4835      	ldr	r0, [pc, #212]	; (802075c <_printf_i+0x244>)
 8020688:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802068c:	6823      	ldr	r3, [r4, #0]
 802068e:	680e      	ldr	r6, [r1, #0]
 8020690:	061f      	lsls	r7, r3, #24
 8020692:	f856 5b04 	ldr.w	r5, [r6], #4
 8020696:	600e      	str	r6, [r1, #0]
 8020698:	d514      	bpl.n	80206c4 <_printf_i+0x1ac>
 802069a:	07d9      	lsls	r1, r3, #31
 802069c:	bf44      	itt	mi
 802069e:	f043 0320 	orrmi.w	r3, r3, #32
 80206a2:	6023      	strmi	r3, [r4, #0]
 80206a4:	b91d      	cbnz	r5, 80206ae <_printf_i+0x196>
 80206a6:	6823      	ldr	r3, [r4, #0]
 80206a8:	f023 0320 	bic.w	r3, r3, #32
 80206ac:	6023      	str	r3, [r4, #0]
 80206ae:	2310      	movs	r3, #16
 80206b0:	e7b0      	b.n	8020614 <_printf_i+0xfc>
 80206b2:	6823      	ldr	r3, [r4, #0]
 80206b4:	f043 0320 	orr.w	r3, r3, #32
 80206b8:	6023      	str	r3, [r4, #0]
 80206ba:	2378      	movs	r3, #120	; 0x78
 80206bc:	4828      	ldr	r0, [pc, #160]	; (8020760 <_printf_i+0x248>)
 80206be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80206c2:	e7e3      	b.n	802068c <_printf_i+0x174>
 80206c4:	065e      	lsls	r6, r3, #25
 80206c6:	bf48      	it	mi
 80206c8:	b2ad      	uxthmi	r5, r5
 80206ca:	e7e6      	b.n	802069a <_printf_i+0x182>
 80206cc:	4616      	mov	r6, r2
 80206ce:	e7bb      	b.n	8020648 <_printf_i+0x130>
 80206d0:	680b      	ldr	r3, [r1, #0]
 80206d2:	6826      	ldr	r6, [r4, #0]
 80206d4:	6960      	ldr	r0, [r4, #20]
 80206d6:	1d1d      	adds	r5, r3, #4
 80206d8:	600d      	str	r5, [r1, #0]
 80206da:	0635      	lsls	r5, r6, #24
 80206dc:	681b      	ldr	r3, [r3, #0]
 80206de:	d501      	bpl.n	80206e4 <_printf_i+0x1cc>
 80206e0:	6018      	str	r0, [r3, #0]
 80206e2:	e002      	b.n	80206ea <_printf_i+0x1d2>
 80206e4:	0671      	lsls	r1, r6, #25
 80206e6:	d5fb      	bpl.n	80206e0 <_printf_i+0x1c8>
 80206e8:	8018      	strh	r0, [r3, #0]
 80206ea:	2300      	movs	r3, #0
 80206ec:	6123      	str	r3, [r4, #16]
 80206ee:	4616      	mov	r6, r2
 80206f0:	e7ba      	b.n	8020668 <_printf_i+0x150>
 80206f2:	680b      	ldr	r3, [r1, #0]
 80206f4:	1d1a      	adds	r2, r3, #4
 80206f6:	600a      	str	r2, [r1, #0]
 80206f8:	681e      	ldr	r6, [r3, #0]
 80206fa:	6862      	ldr	r2, [r4, #4]
 80206fc:	2100      	movs	r1, #0
 80206fe:	4630      	mov	r0, r6
 8020700:	f7df fdf6 	bl	80002f0 <memchr>
 8020704:	b108      	cbz	r0, 802070a <_printf_i+0x1f2>
 8020706:	1b80      	subs	r0, r0, r6
 8020708:	6060      	str	r0, [r4, #4]
 802070a:	6863      	ldr	r3, [r4, #4]
 802070c:	6123      	str	r3, [r4, #16]
 802070e:	2300      	movs	r3, #0
 8020710:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020714:	e7a8      	b.n	8020668 <_printf_i+0x150>
 8020716:	6923      	ldr	r3, [r4, #16]
 8020718:	4632      	mov	r2, r6
 802071a:	4649      	mov	r1, r9
 802071c:	4640      	mov	r0, r8
 802071e:	47d0      	blx	sl
 8020720:	3001      	adds	r0, #1
 8020722:	d0ab      	beq.n	802067c <_printf_i+0x164>
 8020724:	6823      	ldr	r3, [r4, #0]
 8020726:	079b      	lsls	r3, r3, #30
 8020728:	d413      	bmi.n	8020752 <_printf_i+0x23a>
 802072a:	68e0      	ldr	r0, [r4, #12]
 802072c:	9b03      	ldr	r3, [sp, #12]
 802072e:	4298      	cmp	r0, r3
 8020730:	bfb8      	it	lt
 8020732:	4618      	movlt	r0, r3
 8020734:	e7a4      	b.n	8020680 <_printf_i+0x168>
 8020736:	2301      	movs	r3, #1
 8020738:	4632      	mov	r2, r6
 802073a:	4649      	mov	r1, r9
 802073c:	4640      	mov	r0, r8
 802073e:	47d0      	blx	sl
 8020740:	3001      	adds	r0, #1
 8020742:	d09b      	beq.n	802067c <_printf_i+0x164>
 8020744:	3501      	adds	r5, #1
 8020746:	68e3      	ldr	r3, [r4, #12]
 8020748:	9903      	ldr	r1, [sp, #12]
 802074a:	1a5b      	subs	r3, r3, r1
 802074c:	42ab      	cmp	r3, r5
 802074e:	dcf2      	bgt.n	8020736 <_printf_i+0x21e>
 8020750:	e7eb      	b.n	802072a <_printf_i+0x212>
 8020752:	2500      	movs	r5, #0
 8020754:	f104 0619 	add.w	r6, r4, #25
 8020758:	e7f5      	b.n	8020746 <_printf_i+0x22e>
 802075a:	bf00      	nop
 802075c:	08029366 	.word	0x08029366
 8020760:	08029377 	.word	0x08029377

08020764 <_scanf_float>:
 8020764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020768:	b087      	sub	sp, #28
 802076a:	4617      	mov	r7, r2
 802076c:	9303      	str	r3, [sp, #12]
 802076e:	688b      	ldr	r3, [r1, #8]
 8020770:	1e5a      	subs	r2, r3, #1
 8020772:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8020776:	bf83      	ittte	hi
 8020778:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 802077c:	195b      	addhi	r3, r3, r5
 802077e:	9302      	strhi	r3, [sp, #8]
 8020780:	2300      	movls	r3, #0
 8020782:	bf86      	itte	hi
 8020784:	f240 135d 	movwhi	r3, #349	; 0x15d
 8020788:	608b      	strhi	r3, [r1, #8]
 802078a:	9302      	strls	r3, [sp, #8]
 802078c:	680b      	ldr	r3, [r1, #0]
 802078e:	468b      	mov	fp, r1
 8020790:	2500      	movs	r5, #0
 8020792:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8020796:	f84b 3b1c 	str.w	r3, [fp], #28
 802079a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 802079e:	4680      	mov	r8, r0
 80207a0:	460c      	mov	r4, r1
 80207a2:	465e      	mov	r6, fp
 80207a4:	46aa      	mov	sl, r5
 80207a6:	46a9      	mov	r9, r5
 80207a8:	9501      	str	r5, [sp, #4]
 80207aa:	68a2      	ldr	r2, [r4, #8]
 80207ac:	b152      	cbz	r2, 80207c4 <_scanf_float+0x60>
 80207ae:	683b      	ldr	r3, [r7, #0]
 80207b0:	781b      	ldrb	r3, [r3, #0]
 80207b2:	2b4e      	cmp	r3, #78	; 0x4e
 80207b4:	d864      	bhi.n	8020880 <_scanf_float+0x11c>
 80207b6:	2b40      	cmp	r3, #64	; 0x40
 80207b8:	d83c      	bhi.n	8020834 <_scanf_float+0xd0>
 80207ba:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80207be:	b2c8      	uxtb	r0, r1
 80207c0:	280e      	cmp	r0, #14
 80207c2:	d93a      	bls.n	802083a <_scanf_float+0xd6>
 80207c4:	f1b9 0f00 	cmp.w	r9, #0
 80207c8:	d003      	beq.n	80207d2 <_scanf_float+0x6e>
 80207ca:	6823      	ldr	r3, [r4, #0]
 80207cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80207d0:	6023      	str	r3, [r4, #0]
 80207d2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80207d6:	f1ba 0f01 	cmp.w	sl, #1
 80207da:	f200 8113 	bhi.w	8020a04 <_scanf_float+0x2a0>
 80207de:	455e      	cmp	r6, fp
 80207e0:	f200 8105 	bhi.w	80209ee <_scanf_float+0x28a>
 80207e4:	2501      	movs	r5, #1
 80207e6:	4628      	mov	r0, r5
 80207e8:	b007      	add	sp, #28
 80207ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80207ee:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80207f2:	2a0d      	cmp	r2, #13
 80207f4:	d8e6      	bhi.n	80207c4 <_scanf_float+0x60>
 80207f6:	a101      	add	r1, pc, #4	; (adr r1, 80207fc <_scanf_float+0x98>)
 80207f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80207fc:	0802093b 	.word	0x0802093b
 8020800:	080207c5 	.word	0x080207c5
 8020804:	080207c5 	.word	0x080207c5
 8020808:	080207c5 	.word	0x080207c5
 802080c:	0802099b 	.word	0x0802099b
 8020810:	08020973 	.word	0x08020973
 8020814:	080207c5 	.word	0x080207c5
 8020818:	080207c5 	.word	0x080207c5
 802081c:	08020949 	.word	0x08020949
 8020820:	080207c5 	.word	0x080207c5
 8020824:	080207c5 	.word	0x080207c5
 8020828:	080207c5 	.word	0x080207c5
 802082c:	080207c5 	.word	0x080207c5
 8020830:	08020901 	.word	0x08020901
 8020834:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8020838:	e7db      	b.n	80207f2 <_scanf_float+0x8e>
 802083a:	290e      	cmp	r1, #14
 802083c:	d8c2      	bhi.n	80207c4 <_scanf_float+0x60>
 802083e:	a001      	add	r0, pc, #4	; (adr r0, 8020844 <_scanf_float+0xe0>)
 8020840:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8020844:	080208f3 	.word	0x080208f3
 8020848:	080207c5 	.word	0x080207c5
 802084c:	080208f3 	.word	0x080208f3
 8020850:	08020987 	.word	0x08020987
 8020854:	080207c5 	.word	0x080207c5
 8020858:	080208a1 	.word	0x080208a1
 802085c:	080208dd 	.word	0x080208dd
 8020860:	080208dd 	.word	0x080208dd
 8020864:	080208dd 	.word	0x080208dd
 8020868:	080208dd 	.word	0x080208dd
 802086c:	080208dd 	.word	0x080208dd
 8020870:	080208dd 	.word	0x080208dd
 8020874:	080208dd 	.word	0x080208dd
 8020878:	080208dd 	.word	0x080208dd
 802087c:	080208dd 	.word	0x080208dd
 8020880:	2b6e      	cmp	r3, #110	; 0x6e
 8020882:	d809      	bhi.n	8020898 <_scanf_float+0x134>
 8020884:	2b60      	cmp	r3, #96	; 0x60
 8020886:	d8b2      	bhi.n	80207ee <_scanf_float+0x8a>
 8020888:	2b54      	cmp	r3, #84	; 0x54
 802088a:	d077      	beq.n	802097c <_scanf_float+0x218>
 802088c:	2b59      	cmp	r3, #89	; 0x59
 802088e:	d199      	bne.n	80207c4 <_scanf_float+0x60>
 8020890:	2d07      	cmp	r5, #7
 8020892:	d197      	bne.n	80207c4 <_scanf_float+0x60>
 8020894:	2508      	movs	r5, #8
 8020896:	e029      	b.n	80208ec <_scanf_float+0x188>
 8020898:	2b74      	cmp	r3, #116	; 0x74
 802089a:	d06f      	beq.n	802097c <_scanf_float+0x218>
 802089c:	2b79      	cmp	r3, #121	; 0x79
 802089e:	e7f6      	b.n	802088e <_scanf_float+0x12a>
 80208a0:	6821      	ldr	r1, [r4, #0]
 80208a2:	05c8      	lsls	r0, r1, #23
 80208a4:	d51a      	bpl.n	80208dc <_scanf_float+0x178>
 80208a6:	9b02      	ldr	r3, [sp, #8]
 80208a8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80208ac:	6021      	str	r1, [r4, #0]
 80208ae:	f109 0901 	add.w	r9, r9, #1
 80208b2:	b11b      	cbz	r3, 80208bc <_scanf_float+0x158>
 80208b4:	3b01      	subs	r3, #1
 80208b6:	3201      	adds	r2, #1
 80208b8:	9302      	str	r3, [sp, #8]
 80208ba:	60a2      	str	r2, [r4, #8]
 80208bc:	68a3      	ldr	r3, [r4, #8]
 80208be:	3b01      	subs	r3, #1
 80208c0:	60a3      	str	r3, [r4, #8]
 80208c2:	6923      	ldr	r3, [r4, #16]
 80208c4:	3301      	adds	r3, #1
 80208c6:	6123      	str	r3, [r4, #16]
 80208c8:	687b      	ldr	r3, [r7, #4]
 80208ca:	3b01      	subs	r3, #1
 80208cc:	2b00      	cmp	r3, #0
 80208ce:	607b      	str	r3, [r7, #4]
 80208d0:	f340 8084 	ble.w	80209dc <_scanf_float+0x278>
 80208d4:	683b      	ldr	r3, [r7, #0]
 80208d6:	3301      	adds	r3, #1
 80208d8:	603b      	str	r3, [r7, #0]
 80208da:	e766      	b.n	80207aa <_scanf_float+0x46>
 80208dc:	eb1a 0f05 	cmn.w	sl, r5
 80208e0:	f47f af70 	bne.w	80207c4 <_scanf_float+0x60>
 80208e4:	6822      	ldr	r2, [r4, #0]
 80208e6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80208ea:	6022      	str	r2, [r4, #0]
 80208ec:	f806 3b01 	strb.w	r3, [r6], #1
 80208f0:	e7e4      	b.n	80208bc <_scanf_float+0x158>
 80208f2:	6822      	ldr	r2, [r4, #0]
 80208f4:	0610      	lsls	r0, r2, #24
 80208f6:	f57f af65 	bpl.w	80207c4 <_scanf_float+0x60>
 80208fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80208fe:	e7f4      	b.n	80208ea <_scanf_float+0x186>
 8020900:	f1ba 0f00 	cmp.w	sl, #0
 8020904:	d10e      	bne.n	8020924 <_scanf_float+0x1c0>
 8020906:	f1b9 0f00 	cmp.w	r9, #0
 802090a:	d10e      	bne.n	802092a <_scanf_float+0x1c6>
 802090c:	6822      	ldr	r2, [r4, #0]
 802090e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8020912:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8020916:	d108      	bne.n	802092a <_scanf_float+0x1c6>
 8020918:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 802091c:	6022      	str	r2, [r4, #0]
 802091e:	f04f 0a01 	mov.w	sl, #1
 8020922:	e7e3      	b.n	80208ec <_scanf_float+0x188>
 8020924:	f1ba 0f02 	cmp.w	sl, #2
 8020928:	d055      	beq.n	80209d6 <_scanf_float+0x272>
 802092a:	2d01      	cmp	r5, #1
 802092c:	d002      	beq.n	8020934 <_scanf_float+0x1d0>
 802092e:	2d04      	cmp	r5, #4
 8020930:	f47f af48 	bne.w	80207c4 <_scanf_float+0x60>
 8020934:	3501      	adds	r5, #1
 8020936:	b2ed      	uxtb	r5, r5
 8020938:	e7d8      	b.n	80208ec <_scanf_float+0x188>
 802093a:	f1ba 0f01 	cmp.w	sl, #1
 802093e:	f47f af41 	bne.w	80207c4 <_scanf_float+0x60>
 8020942:	f04f 0a02 	mov.w	sl, #2
 8020946:	e7d1      	b.n	80208ec <_scanf_float+0x188>
 8020948:	b97d      	cbnz	r5, 802096a <_scanf_float+0x206>
 802094a:	f1b9 0f00 	cmp.w	r9, #0
 802094e:	f47f af3c 	bne.w	80207ca <_scanf_float+0x66>
 8020952:	6822      	ldr	r2, [r4, #0]
 8020954:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8020958:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 802095c:	f47f af39 	bne.w	80207d2 <_scanf_float+0x6e>
 8020960:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8020964:	6022      	str	r2, [r4, #0]
 8020966:	2501      	movs	r5, #1
 8020968:	e7c0      	b.n	80208ec <_scanf_float+0x188>
 802096a:	2d03      	cmp	r5, #3
 802096c:	d0e2      	beq.n	8020934 <_scanf_float+0x1d0>
 802096e:	2d05      	cmp	r5, #5
 8020970:	e7de      	b.n	8020930 <_scanf_float+0x1cc>
 8020972:	2d02      	cmp	r5, #2
 8020974:	f47f af26 	bne.w	80207c4 <_scanf_float+0x60>
 8020978:	2503      	movs	r5, #3
 802097a:	e7b7      	b.n	80208ec <_scanf_float+0x188>
 802097c:	2d06      	cmp	r5, #6
 802097e:	f47f af21 	bne.w	80207c4 <_scanf_float+0x60>
 8020982:	2507      	movs	r5, #7
 8020984:	e7b2      	b.n	80208ec <_scanf_float+0x188>
 8020986:	6822      	ldr	r2, [r4, #0]
 8020988:	0591      	lsls	r1, r2, #22
 802098a:	f57f af1b 	bpl.w	80207c4 <_scanf_float+0x60>
 802098e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8020992:	6022      	str	r2, [r4, #0]
 8020994:	f8cd 9004 	str.w	r9, [sp, #4]
 8020998:	e7a8      	b.n	80208ec <_scanf_float+0x188>
 802099a:	6822      	ldr	r2, [r4, #0]
 802099c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80209a0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80209a4:	d006      	beq.n	80209b4 <_scanf_float+0x250>
 80209a6:	0550      	lsls	r0, r2, #21
 80209a8:	f57f af0c 	bpl.w	80207c4 <_scanf_float+0x60>
 80209ac:	f1b9 0f00 	cmp.w	r9, #0
 80209b0:	f43f af0f 	beq.w	80207d2 <_scanf_float+0x6e>
 80209b4:	0591      	lsls	r1, r2, #22
 80209b6:	bf58      	it	pl
 80209b8:	9901      	ldrpl	r1, [sp, #4]
 80209ba:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80209be:	bf58      	it	pl
 80209c0:	eba9 0101 	subpl.w	r1, r9, r1
 80209c4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80209c8:	bf58      	it	pl
 80209ca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80209ce:	6022      	str	r2, [r4, #0]
 80209d0:	f04f 0900 	mov.w	r9, #0
 80209d4:	e78a      	b.n	80208ec <_scanf_float+0x188>
 80209d6:	f04f 0a03 	mov.w	sl, #3
 80209da:	e787      	b.n	80208ec <_scanf_float+0x188>
 80209dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80209e0:	4639      	mov	r1, r7
 80209e2:	4640      	mov	r0, r8
 80209e4:	4798      	blx	r3
 80209e6:	2800      	cmp	r0, #0
 80209e8:	f43f aedf 	beq.w	80207aa <_scanf_float+0x46>
 80209ec:	e6ea      	b.n	80207c4 <_scanf_float+0x60>
 80209ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80209f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80209f6:	463a      	mov	r2, r7
 80209f8:	4640      	mov	r0, r8
 80209fa:	4798      	blx	r3
 80209fc:	6923      	ldr	r3, [r4, #16]
 80209fe:	3b01      	subs	r3, #1
 8020a00:	6123      	str	r3, [r4, #16]
 8020a02:	e6ec      	b.n	80207de <_scanf_float+0x7a>
 8020a04:	1e6b      	subs	r3, r5, #1
 8020a06:	2b06      	cmp	r3, #6
 8020a08:	d825      	bhi.n	8020a56 <_scanf_float+0x2f2>
 8020a0a:	2d02      	cmp	r5, #2
 8020a0c:	d836      	bhi.n	8020a7c <_scanf_float+0x318>
 8020a0e:	455e      	cmp	r6, fp
 8020a10:	f67f aee8 	bls.w	80207e4 <_scanf_float+0x80>
 8020a14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020a18:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8020a1c:	463a      	mov	r2, r7
 8020a1e:	4640      	mov	r0, r8
 8020a20:	4798      	blx	r3
 8020a22:	6923      	ldr	r3, [r4, #16]
 8020a24:	3b01      	subs	r3, #1
 8020a26:	6123      	str	r3, [r4, #16]
 8020a28:	e7f1      	b.n	8020a0e <_scanf_float+0x2aa>
 8020a2a:	9802      	ldr	r0, [sp, #8]
 8020a2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020a30:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8020a34:	9002      	str	r0, [sp, #8]
 8020a36:	463a      	mov	r2, r7
 8020a38:	4640      	mov	r0, r8
 8020a3a:	4798      	blx	r3
 8020a3c:	6923      	ldr	r3, [r4, #16]
 8020a3e:	3b01      	subs	r3, #1
 8020a40:	6123      	str	r3, [r4, #16]
 8020a42:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8020a46:	fa5f fa8a 	uxtb.w	sl, sl
 8020a4a:	f1ba 0f02 	cmp.w	sl, #2
 8020a4e:	d1ec      	bne.n	8020a2a <_scanf_float+0x2c6>
 8020a50:	3d03      	subs	r5, #3
 8020a52:	b2ed      	uxtb	r5, r5
 8020a54:	1b76      	subs	r6, r6, r5
 8020a56:	6823      	ldr	r3, [r4, #0]
 8020a58:	05da      	lsls	r2, r3, #23
 8020a5a:	d52f      	bpl.n	8020abc <_scanf_float+0x358>
 8020a5c:	055b      	lsls	r3, r3, #21
 8020a5e:	d510      	bpl.n	8020a82 <_scanf_float+0x31e>
 8020a60:	455e      	cmp	r6, fp
 8020a62:	f67f aebf 	bls.w	80207e4 <_scanf_float+0x80>
 8020a66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020a6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8020a6e:	463a      	mov	r2, r7
 8020a70:	4640      	mov	r0, r8
 8020a72:	4798      	blx	r3
 8020a74:	6923      	ldr	r3, [r4, #16]
 8020a76:	3b01      	subs	r3, #1
 8020a78:	6123      	str	r3, [r4, #16]
 8020a7a:	e7f1      	b.n	8020a60 <_scanf_float+0x2fc>
 8020a7c:	46aa      	mov	sl, r5
 8020a7e:	9602      	str	r6, [sp, #8]
 8020a80:	e7df      	b.n	8020a42 <_scanf_float+0x2de>
 8020a82:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8020a86:	6923      	ldr	r3, [r4, #16]
 8020a88:	2965      	cmp	r1, #101	; 0x65
 8020a8a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8020a8e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8020a92:	6123      	str	r3, [r4, #16]
 8020a94:	d00c      	beq.n	8020ab0 <_scanf_float+0x34c>
 8020a96:	2945      	cmp	r1, #69	; 0x45
 8020a98:	d00a      	beq.n	8020ab0 <_scanf_float+0x34c>
 8020a9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020a9e:	463a      	mov	r2, r7
 8020aa0:	4640      	mov	r0, r8
 8020aa2:	4798      	blx	r3
 8020aa4:	6923      	ldr	r3, [r4, #16]
 8020aa6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8020aaa:	3b01      	subs	r3, #1
 8020aac:	1eb5      	subs	r5, r6, #2
 8020aae:	6123      	str	r3, [r4, #16]
 8020ab0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020ab4:	463a      	mov	r2, r7
 8020ab6:	4640      	mov	r0, r8
 8020ab8:	4798      	blx	r3
 8020aba:	462e      	mov	r6, r5
 8020abc:	6825      	ldr	r5, [r4, #0]
 8020abe:	f015 0510 	ands.w	r5, r5, #16
 8020ac2:	d14d      	bne.n	8020b60 <_scanf_float+0x3fc>
 8020ac4:	7035      	strb	r5, [r6, #0]
 8020ac6:	6823      	ldr	r3, [r4, #0]
 8020ac8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8020acc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8020ad0:	d11a      	bne.n	8020b08 <_scanf_float+0x3a4>
 8020ad2:	9b01      	ldr	r3, [sp, #4]
 8020ad4:	454b      	cmp	r3, r9
 8020ad6:	eba3 0209 	sub.w	r2, r3, r9
 8020ada:	d122      	bne.n	8020b22 <_scanf_float+0x3be>
 8020adc:	2200      	movs	r2, #0
 8020ade:	4659      	mov	r1, fp
 8020ae0:	4640      	mov	r0, r8
 8020ae2:	f000 ff4b 	bl	802197c <_strtod_r>
 8020ae6:	9b03      	ldr	r3, [sp, #12]
 8020ae8:	6821      	ldr	r1, [r4, #0]
 8020aea:	681b      	ldr	r3, [r3, #0]
 8020aec:	f011 0f02 	tst.w	r1, #2
 8020af0:	f103 0204 	add.w	r2, r3, #4
 8020af4:	d020      	beq.n	8020b38 <_scanf_float+0x3d4>
 8020af6:	9903      	ldr	r1, [sp, #12]
 8020af8:	600a      	str	r2, [r1, #0]
 8020afa:	681b      	ldr	r3, [r3, #0]
 8020afc:	ed83 0b00 	vstr	d0, [r3]
 8020b00:	68e3      	ldr	r3, [r4, #12]
 8020b02:	3301      	adds	r3, #1
 8020b04:	60e3      	str	r3, [r4, #12]
 8020b06:	e66e      	b.n	80207e6 <_scanf_float+0x82>
 8020b08:	9b04      	ldr	r3, [sp, #16]
 8020b0a:	2b00      	cmp	r3, #0
 8020b0c:	d0e6      	beq.n	8020adc <_scanf_float+0x378>
 8020b0e:	9905      	ldr	r1, [sp, #20]
 8020b10:	230a      	movs	r3, #10
 8020b12:	462a      	mov	r2, r5
 8020b14:	3101      	adds	r1, #1
 8020b16:	4640      	mov	r0, r8
 8020b18:	f000 ffba 	bl	8021a90 <_strtol_r>
 8020b1c:	9b04      	ldr	r3, [sp, #16]
 8020b1e:	9e05      	ldr	r6, [sp, #20]
 8020b20:	1ac2      	subs	r2, r0, r3
 8020b22:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8020b26:	429e      	cmp	r6, r3
 8020b28:	bf28      	it	cs
 8020b2a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8020b2e:	490d      	ldr	r1, [pc, #52]	; (8020b64 <_scanf_float+0x400>)
 8020b30:	4630      	mov	r0, r6
 8020b32:	f000 f8ff 	bl	8020d34 <siprintf>
 8020b36:	e7d1      	b.n	8020adc <_scanf_float+0x378>
 8020b38:	f011 0f04 	tst.w	r1, #4
 8020b3c:	9903      	ldr	r1, [sp, #12]
 8020b3e:	600a      	str	r2, [r1, #0]
 8020b40:	d1db      	bne.n	8020afa <_scanf_float+0x396>
 8020b42:	eeb4 0b40 	vcmp.f64	d0, d0
 8020b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b4a:	681e      	ldr	r6, [r3, #0]
 8020b4c:	d705      	bvc.n	8020b5a <_scanf_float+0x3f6>
 8020b4e:	4806      	ldr	r0, [pc, #24]	; (8020b68 <_scanf_float+0x404>)
 8020b50:	f000 f8ea 	bl	8020d28 <nanf>
 8020b54:	ed86 0a00 	vstr	s0, [r6]
 8020b58:	e7d2      	b.n	8020b00 <_scanf_float+0x39c>
 8020b5a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8020b5e:	e7f9      	b.n	8020b54 <_scanf_float+0x3f0>
 8020b60:	2500      	movs	r5, #0
 8020b62:	e640      	b.n	80207e6 <_scanf_float+0x82>
 8020b64:	08029388 	.word	0x08029388
 8020b68:	08029493 	.word	0x08029493

08020b6c <iprintf>:
 8020b6c:	b40f      	push	{r0, r1, r2, r3}
 8020b6e:	4b0a      	ldr	r3, [pc, #40]	; (8020b98 <iprintf+0x2c>)
 8020b70:	b513      	push	{r0, r1, r4, lr}
 8020b72:	681c      	ldr	r4, [r3, #0]
 8020b74:	b124      	cbz	r4, 8020b80 <iprintf+0x14>
 8020b76:	69a3      	ldr	r3, [r4, #24]
 8020b78:	b913      	cbnz	r3, 8020b80 <iprintf+0x14>
 8020b7a:	4620      	mov	r0, r4
 8020b7c:	f001 ff96 	bl	8022aac <__sinit>
 8020b80:	ab05      	add	r3, sp, #20
 8020b82:	9a04      	ldr	r2, [sp, #16]
 8020b84:	68a1      	ldr	r1, [r4, #8]
 8020b86:	9301      	str	r3, [sp, #4]
 8020b88:	4620      	mov	r0, r4
 8020b8a:	f003 fa87 	bl	802409c <_vfiprintf_r>
 8020b8e:	b002      	add	sp, #8
 8020b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020b94:	b004      	add	sp, #16
 8020b96:	4770      	bx	lr
 8020b98:	24003844 	.word	0x24003844

08020b9c <_puts_r>:
 8020b9c:	b570      	push	{r4, r5, r6, lr}
 8020b9e:	460e      	mov	r6, r1
 8020ba0:	4605      	mov	r5, r0
 8020ba2:	b118      	cbz	r0, 8020bac <_puts_r+0x10>
 8020ba4:	6983      	ldr	r3, [r0, #24]
 8020ba6:	b90b      	cbnz	r3, 8020bac <_puts_r+0x10>
 8020ba8:	f001 ff80 	bl	8022aac <__sinit>
 8020bac:	69ab      	ldr	r3, [r5, #24]
 8020bae:	68ac      	ldr	r4, [r5, #8]
 8020bb0:	b913      	cbnz	r3, 8020bb8 <_puts_r+0x1c>
 8020bb2:	4628      	mov	r0, r5
 8020bb4:	f001 ff7a 	bl	8022aac <__sinit>
 8020bb8:	4b2c      	ldr	r3, [pc, #176]	; (8020c6c <_puts_r+0xd0>)
 8020bba:	429c      	cmp	r4, r3
 8020bbc:	d120      	bne.n	8020c00 <_puts_r+0x64>
 8020bbe:	686c      	ldr	r4, [r5, #4]
 8020bc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020bc2:	07db      	lsls	r3, r3, #31
 8020bc4:	d405      	bmi.n	8020bd2 <_puts_r+0x36>
 8020bc6:	89a3      	ldrh	r3, [r4, #12]
 8020bc8:	0598      	lsls	r0, r3, #22
 8020bca:	d402      	bmi.n	8020bd2 <_puts_r+0x36>
 8020bcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020bce:	f002 fb90 	bl	80232f2 <__retarget_lock_acquire_recursive>
 8020bd2:	89a3      	ldrh	r3, [r4, #12]
 8020bd4:	0719      	lsls	r1, r3, #28
 8020bd6:	d51d      	bpl.n	8020c14 <_puts_r+0x78>
 8020bd8:	6923      	ldr	r3, [r4, #16]
 8020bda:	b1db      	cbz	r3, 8020c14 <_puts_r+0x78>
 8020bdc:	3e01      	subs	r6, #1
 8020bde:	68a3      	ldr	r3, [r4, #8]
 8020be0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8020be4:	3b01      	subs	r3, #1
 8020be6:	60a3      	str	r3, [r4, #8]
 8020be8:	bb39      	cbnz	r1, 8020c3a <_puts_r+0x9e>
 8020bea:	2b00      	cmp	r3, #0
 8020bec:	da38      	bge.n	8020c60 <_puts_r+0xc4>
 8020bee:	4622      	mov	r2, r4
 8020bf0:	210a      	movs	r1, #10
 8020bf2:	4628      	mov	r0, r5
 8020bf4:	f000 ff4e 	bl	8021a94 <__swbuf_r>
 8020bf8:	3001      	adds	r0, #1
 8020bfa:	d011      	beq.n	8020c20 <_puts_r+0x84>
 8020bfc:	250a      	movs	r5, #10
 8020bfe:	e011      	b.n	8020c24 <_puts_r+0x88>
 8020c00:	4b1b      	ldr	r3, [pc, #108]	; (8020c70 <_puts_r+0xd4>)
 8020c02:	429c      	cmp	r4, r3
 8020c04:	d101      	bne.n	8020c0a <_puts_r+0x6e>
 8020c06:	68ac      	ldr	r4, [r5, #8]
 8020c08:	e7da      	b.n	8020bc0 <_puts_r+0x24>
 8020c0a:	4b1a      	ldr	r3, [pc, #104]	; (8020c74 <_puts_r+0xd8>)
 8020c0c:	429c      	cmp	r4, r3
 8020c0e:	bf08      	it	eq
 8020c10:	68ec      	ldreq	r4, [r5, #12]
 8020c12:	e7d5      	b.n	8020bc0 <_puts_r+0x24>
 8020c14:	4621      	mov	r1, r4
 8020c16:	4628      	mov	r0, r5
 8020c18:	f000 ff8e 	bl	8021b38 <__swsetup_r>
 8020c1c:	2800      	cmp	r0, #0
 8020c1e:	d0dd      	beq.n	8020bdc <_puts_r+0x40>
 8020c20:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8020c24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020c26:	07da      	lsls	r2, r3, #31
 8020c28:	d405      	bmi.n	8020c36 <_puts_r+0x9a>
 8020c2a:	89a3      	ldrh	r3, [r4, #12]
 8020c2c:	059b      	lsls	r3, r3, #22
 8020c2e:	d402      	bmi.n	8020c36 <_puts_r+0x9a>
 8020c30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020c32:	f002 fb5f 	bl	80232f4 <__retarget_lock_release_recursive>
 8020c36:	4628      	mov	r0, r5
 8020c38:	bd70      	pop	{r4, r5, r6, pc}
 8020c3a:	2b00      	cmp	r3, #0
 8020c3c:	da04      	bge.n	8020c48 <_puts_r+0xac>
 8020c3e:	69a2      	ldr	r2, [r4, #24]
 8020c40:	429a      	cmp	r2, r3
 8020c42:	dc06      	bgt.n	8020c52 <_puts_r+0xb6>
 8020c44:	290a      	cmp	r1, #10
 8020c46:	d004      	beq.n	8020c52 <_puts_r+0xb6>
 8020c48:	6823      	ldr	r3, [r4, #0]
 8020c4a:	1c5a      	adds	r2, r3, #1
 8020c4c:	6022      	str	r2, [r4, #0]
 8020c4e:	7019      	strb	r1, [r3, #0]
 8020c50:	e7c5      	b.n	8020bde <_puts_r+0x42>
 8020c52:	4622      	mov	r2, r4
 8020c54:	4628      	mov	r0, r5
 8020c56:	f000 ff1d 	bl	8021a94 <__swbuf_r>
 8020c5a:	3001      	adds	r0, #1
 8020c5c:	d1bf      	bne.n	8020bde <_puts_r+0x42>
 8020c5e:	e7df      	b.n	8020c20 <_puts_r+0x84>
 8020c60:	6823      	ldr	r3, [r4, #0]
 8020c62:	250a      	movs	r5, #10
 8020c64:	1c5a      	adds	r2, r3, #1
 8020c66:	6022      	str	r2, [r4, #0]
 8020c68:	701d      	strb	r5, [r3, #0]
 8020c6a:	e7db      	b.n	8020c24 <_puts_r+0x88>
 8020c6c:	08029534 	.word	0x08029534
 8020c70:	08029554 	.word	0x08029554
 8020c74:	08029514 	.word	0x08029514

08020c78 <puts>:
 8020c78:	4b02      	ldr	r3, [pc, #8]	; (8020c84 <puts+0xc>)
 8020c7a:	4601      	mov	r1, r0
 8020c7c:	6818      	ldr	r0, [r3, #0]
 8020c7e:	f7ff bf8d 	b.w	8020b9c <_puts_r>
 8020c82:	bf00      	nop
 8020c84:	24003844 	.word	0x24003844

08020c88 <rand>:
 8020c88:	4b17      	ldr	r3, [pc, #92]	; (8020ce8 <rand+0x60>)
 8020c8a:	b510      	push	{r4, lr}
 8020c8c:	681c      	ldr	r4, [r3, #0]
 8020c8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8020c90:	b9b3      	cbnz	r3, 8020cc0 <rand+0x38>
 8020c92:	2018      	movs	r0, #24
 8020c94:	f7ff f832 	bl	801fcfc <malloc>
 8020c98:	63a0      	str	r0, [r4, #56]	; 0x38
 8020c9a:	b928      	cbnz	r0, 8020ca8 <rand+0x20>
 8020c9c:	4602      	mov	r2, r0
 8020c9e:	4b13      	ldr	r3, [pc, #76]	; (8020cec <rand+0x64>)
 8020ca0:	4813      	ldr	r0, [pc, #76]	; (8020cf0 <rand+0x68>)
 8020ca2:	214e      	movs	r1, #78	; 0x4e
 8020ca4:	f000 ffb6 	bl	8021c14 <__assert_func>
 8020ca8:	4a12      	ldr	r2, [pc, #72]	; (8020cf4 <rand+0x6c>)
 8020caa:	4b13      	ldr	r3, [pc, #76]	; (8020cf8 <rand+0x70>)
 8020cac:	e9c0 2300 	strd	r2, r3, [r0]
 8020cb0:	4b12      	ldr	r3, [pc, #72]	; (8020cfc <rand+0x74>)
 8020cb2:	6083      	str	r3, [r0, #8]
 8020cb4:	230b      	movs	r3, #11
 8020cb6:	8183      	strh	r3, [r0, #12]
 8020cb8:	2201      	movs	r2, #1
 8020cba:	2300      	movs	r3, #0
 8020cbc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8020cc0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8020cc2:	480f      	ldr	r0, [pc, #60]	; (8020d00 <rand+0x78>)
 8020cc4:	690a      	ldr	r2, [r1, #16]
 8020cc6:	694b      	ldr	r3, [r1, #20]
 8020cc8:	4c0e      	ldr	r4, [pc, #56]	; (8020d04 <rand+0x7c>)
 8020cca:	4350      	muls	r0, r2
 8020ccc:	fb04 0003 	mla	r0, r4, r3, r0
 8020cd0:	fba2 3404 	umull	r3, r4, r2, r4
 8020cd4:	1c5a      	adds	r2, r3, #1
 8020cd6:	4404      	add	r4, r0
 8020cd8:	f144 0000 	adc.w	r0, r4, #0
 8020cdc:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8020ce0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8020ce4:	bd10      	pop	{r4, pc}
 8020ce6:	bf00      	nop
 8020ce8:	24003844 	.word	0x24003844
 8020cec:	0802938d 	.word	0x0802938d
 8020cf0:	080293a4 	.word	0x080293a4
 8020cf4:	abcd330e 	.word	0xabcd330e
 8020cf8:	e66d1234 	.word	0xe66d1234
 8020cfc:	0005deec 	.word	0x0005deec
 8020d00:	5851f42d 	.word	0x5851f42d
 8020d04:	4c957f2d 	.word	0x4c957f2d

08020d08 <_sbrk_r>:
 8020d08:	b538      	push	{r3, r4, r5, lr}
 8020d0a:	4d06      	ldr	r5, [pc, #24]	; (8020d24 <_sbrk_r+0x1c>)
 8020d0c:	2300      	movs	r3, #0
 8020d0e:	4604      	mov	r4, r0
 8020d10:	4608      	mov	r0, r1
 8020d12:	602b      	str	r3, [r5, #0]
 8020d14:	f7e2 faac 	bl	8003270 <_sbrk>
 8020d18:	1c43      	adds	r3, r0, #1
 8020d1a:	d102      	bne.n	8020d22 <_sbrk_r+0x1a>
 8020d1c:	682b      	ldr	r3, [r5, #0]
 8020d1e:	b103      	cbz	r3, 8020d22 <_sbrk_r+0x1a>
 8020d20:	6023      	str	r3, [r4, #0]
 8020d22:	bd38      	pop	{r3, r4, r5, pc}
 8020d24:	2400b6a8 	.word	0x2400b6a8

08020d28 <nanf>:
 8020d28:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8020d30 <nanf+0x8>
 8020d2c:	4770      	bx	lr
 8020d2e:	bf00      	nop
 8020d30:	7fc00000 	.word	0x7fc00000

08020d34 <siprintf>:
 8020d34:	b40e      	push	{r1, r2, r3}
 8020d36:	b500      	push	{lr}
 8020d38:	b09c      	sub	sp, #112	; 0x70
 8020d3a:	ab1d      	add	r3, sp, #116	; 0x74
 8020d3c:	9002      	str	r0, [sp, #8]
 8020d3e:	9006      	str	r0, [sp, #24]
 8020d40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8020d44:	4809      	ldr	r0, [pc, #36]	; (8020d6c <siprintf+0x38>)
 8020d46:	9107      	str	r1, [sp, #28]
 8020d48:	9104      	str	r1, [sp, #16]
 8020d4a:	4909      	ldr	r1, [pc, #36]	; (8020d70 <siprintf+0x3c>)
 8020d4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8020d50:	9105      	str	r1, [sp, #20]
 8020d52:	6800      	ldr	r0, [r0, #0]
 8020d54:	9301      	str	r3, [sp, #4]
 8020d56:	a902      	add	r1, sp, #8
 8020d58:	f003 f876 	bl	8023e48 <_svfiprintf_r>
 8020d5c:	9b02      	ldr	r3, [sp, #8]
 8020d5e:	2200      	movs	r2, #0
 8020d60:	701a      	strb	r2, [r3, #0]
 8020d62:	b01c      	add	sp, #112	; 0x70
 8020d64:	f85d eb04 	ldr.w	lr, [sp], #4
 8020d68:	b003      	add	sp, #12
 8020d6a:	4770      	bx	lr
 8020d6c:	24003844 	.word	0x24003844
 8020d70:	ffff0208 	.word	0xffff0208

08020d74 <strncmp>:
 8020d74:	b510      	push	{r4, lr}
 8020d76:	b16a      	cbz	r2, 8020d94 <strncmp+0x20>
 8020d78:	3901      	subs	r1, #1
 8020d7a:	1884      	adds	r4, r0, r2
 8020d7c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020d80:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8020d84:	4293      	cmp	r3, r2
 8020d86:	d103      	bne.n	8020d90 <strncmp+0x1c>
 8020d88:	42a0      	cmp	r0, r4
 8020d8a:	d001      	beq.n	8020d90 <strncmp+0x1c>
 8020d8c:	2b00      	cmp	r3, #0
 8020d8e:	d1f5      	bne.n	8020d7c <strncmp+0x8>
 8020d90:	1a98      	subs	r0, r3, r2
 8020d92:	bd10      	pop	{r4, pc}
 8020d94:	4610      	mov	r0, r2
 8020d96:	e7fc      	b.n	8020d92 <strncmp+0x1e>

08020d98 <sulp>:
 8020d98:	b570      	push	{r4, r5, r6, lr}
 8020d9a:	4604      	mov	r4, r0
 8020d9c:	460d      	mov	r5, r1
 8020d9e:	4616      	mov	r6, r2
 8020da0:	ec45 4b10 	vmov	d0, r4, r5
 8020da4:	f002 fe96 	bl	8023ad4 <__ulp>
 8020da8:	b17e      	cbz	r6, 8020dca <sulp+0x32>
 8020daa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8020dae:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8020db2:	2b00      	cmp	r3, #0
 8020db4:	dd09      	ble.n	8020dca <sulp+0x32>
 8020db6:	051b      	lsls	r3, r3, #20
 8020db8:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8020dbc:	2000      	movs	r0, #0
 8020dbe:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8020dc2:	ec41 0b17 	vmov	d7, r0, r1
 8020dc6:	ee20 0b07 	vmul.f64	d0, d0, d7
 8020dca:	bd70      	pop	{r4, r5, r6, pc}
 8020dcc:	0000      	movs	r0, r0
	...

08020dd0 <_strtod_l>:
 8020dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020dd4:	ed2d 8b0c 	vpush	{d8-d13}
 8020dd8:	b09d      	sub	sp, #116	; 0x74
 8020dda:	461f      	mov	r7, r3
 8020ddc:	2300      	movs	r3, #0
 8020dde:	9318      	str	r3, [sp, #96]	; 0x60
 8020de0:	4ba6      	ldr	r3, [pc, #664]	; (802107c <_strtod_l+0x2ac>)
 8020de2:	9213      	str	r2, [sp, #76]	; 0x4c
 8020de4:	681b      	ldr	r3, [r3, #0]
 8020de6:	9308      	str	r3, [sp, #32]
 8020de8:	4604      	mov	r4, r0
 8020dea:	4618      	mov	r0, r3
 8020dec:	468a      	mov	sl, r1
 8020dee:	f7df fa77 	bl	80002e0 <strlen>
 8020df2:	f04f 0800 	mov.w	r8, #0
 8020df6:	4605      	mov	r5, r0
 8020df8:	f04f 0900 	mov.w	r9, #0
 8020dfc:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8020e00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020e02:	781a      	ldrb	r2, [r3, #0]
 8020e04:	2a2b      	cmp	r2, #43	; 0x2b
 8020e06:	d04d      	beq.n	8020ea4 <_strtod_l+0xd4>
 8020e08:	d83a      	bhi.n	8020e80 <_strtod_l+0xb0>
 8020e0a:	2a0d      	cmp	r2, #13
 8020e0c:	d833      	bhi.n	8020e76 <_strtod_l+0xa6>
 8020e0e:	2a08      	cmp	r2, #8
 8020e10:	d833      	bhi.n	8020e7a <_strtod_l+0xaa>
 8020e12:	2a00      	cmp	r2, #0
 8020e14:	d03d      	beq.n	8020e92 <_strtod_l+0xc2>
 8020e16:	2300      	movs	r3, #0
 8020e18:	930b      	str	r3, [sp, #44]	; 0x2c
 8020e1a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8020e1c:	7833      	ldrb	r3, [r6, #0]
 8020e1e:	2b30      	cmp	r3, #48	; 0x30
 8020e20:	f040 80b6 	bne.w	8020f90 <_strtod_l+0x1c0>
 8020e24:	7873      	ldrb	r3, [r6, #1]
 8020e26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8020e2a:	2b58      	cmp	r3, #88	; 0x58
 8020e2c:	d16d      	bne.n	8020f0a <_strtod_l+0x13a>
 8020e2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020e30:	9301      	str	r3, [sp, #4]
 8020e32:	ab18      	add	r3, sp, #96	; 0x60
 8020e34:	9702      	str	r7, [sp, #8]
 8020e36:	9300      	str	r3, [sp, #0]
 8020e38:	4a91      	ldr	r2, [pc, #580]	; (8021080 <_strtod_l+0x2b0>)
 8020e3a:	ab19      	add	r3, sp, #100	; 0x64
 8020e3c:	a917      	add	r1, sp, #92	; 0x5c
 8020e3e:	4620      	mov	r0, r4
 8020e40:	f001 ff4a 	bl	8022cd8 <__gethex>
 8020e44:	f010 0507 	ands.w	r5, r0, #7
 8020e48:	4607      	mov	r7, r0
 8020e4a:	d005      	beq.n	8020e58 <_strtod_l+0x88>
 8020e4c:	2d06      	cmp	r5, #6
 8020e4e:	d12b      	bne.n	8020ea8 <_strtod_l+0xd8>
 8020e50:	3601      	adds	r6, #1
 8020e52:	2300      	movs	r3, #0
 8020e54:	9617      	str	r6, [sp, #92]	; 0x5c
 8020e56:	930b      	str	r3, [sp, #44]	; 0x2c
 8020e58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020e5a:	2b00      	cmp	r3, #0
 8020e5c:	f040 856e 	bne.w	802193c <_strtod_l+0xb6c>
 8020e60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020e62:	b1e3      	cbz	r3, 8020e9e <_strtod_l+0xce>
 8020e64:	ec49 8b17 	vmov	d7, r8, r9
 8020e68:	eeb1 0b47 	vneg.f64	d0, d7
 8020e6c:	b01d      	add	sp, #116	; 0x74
 8020e6e:	ecbd 8b0c 	vpop	{d8-d13}
 8020e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e76:	2a20      	cmp	r2, #32
 8020e78:	d1cd      	bne.n	8020e16 <_strtod_l+0x46>
 8020e7a:	3301      	adds	r3, #1
 8020e7c:	9317      	str	r3, [sp, #92]	; 0x5c
 8020e7e:	e7bf      	b.n	8020e00 <_strtod_l+0x30>
 8020e80:	2a2d      	cmp	r2, #45	; 0x2d
 8020e82:	d1c8      	bne.n	8020e16 <_strtod_l+0x46>
 8020e84:	2201      	movs	r2, #1
 8020e86:	920b      	str	r2, [sp, #44]	; 0x2c
 8020e88:	1c5a      	adds	r2, r3, #1
 8020e8a:	9217      	str	r2, [sp, #92]	; 0x5c
 8020e8c:	785b      	ldrb	r3, [r3, #1]
 8020e8e:	2b00      	cmp	r3, #0
 8020e90:	d1c3      	bne.n	8020e1a <_strtod_l+0x4a>
 8020e92:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020e94:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8020e98:	2b00      	cmp	r3, #0
 8020e9a:	f040 854d 	bne.w	8021938 <_strtod_l+0xb68>
 8020e9e:	ec49 8b10 	vmov	d0, r8, r9
 8020ea2:	e7e3      	b.n	8020e6c <_strtod_l+0x9c>
 8020ea4:	2200      	movs	r2, #0
 8020ea6:	e7ee      	b.n	8020e86 <_strtod_l+0xb6>
 8020ea8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8020eaa:	b13a      	cbz	r2, 8020ebc <_strtod_l+0xec>
 8020eac:	2135      	movs	r1, #53	; 0x35
 8020eae:	a81a      	add	r0, sp, #104	; 0x68
 8020eb0:	f002 ff1c 	bl	8023cec <__copybits>
 8020eb4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8020eb6:	4620      	mov	r0, r4
 8020eb8:	f002 fae0 	bl	802347c <_Bfree>
 8020ebc:	3d01      	subs	r5, #1
 8020ebe:	2d05      	cmp	r5, #5
 8020ec0:	d807      	bhi.n	8020ed2 <_strtod_l+0x102>
 8020ec2:	e8df f005 	tbb	[pc, r5]
 8020ec6:	0b0e      	.short	0x0b0e
 8020ec8:	030e1d18 	.word	0x030e1d18
 8020ecc:	f04f 0900 	mov.w	r9, #0
 8020ed0:	46c8      	mov	r8, r9
 8020ed2:	073b      	lsls	r3, r7, #28
 8020ed4:	d5c0      	bpl.n	8020e58 <_strtod_l+0x88>
 8020ed6:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8020eda:	e7bd      	b.n	8020e58 <_strtod_l+0x88>
 8020edc:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8020ee0:	e7f7      	b.n	8020ed2 <_strtod_l+0x102>
 8020ee2:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 8020ee6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8020ee8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8020eec:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8020ef0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8020ef4:	e7ed      	b.n	8020ed2 <_strtod_l+0x102>
 8020ef6:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8021084 <_strtod_l+0x2b4>
 8020efa:	f04f 0800 	mov.w	r8, #0
 8020efe:	e7e8      	b.n	8020ed2 <_strtod_l+0x102>
 8020f00:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8020f04:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8020f08:	e7e3      	b.n	8020ed2 <_strtod_l+0x102>
 8020f0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020f0c:	1c5a      	adds	r2, r3, #1
 8020f0e:	9217      	str	r2, [sp, #92]	; 0x5c
 8020f10:	785b      	ldrb	r3, [r3, #1]
 8020f12:	2b30      	cmp	r3, #48	; 0x30
 8020f14:	d0f9      	beq.n	8020f0a <_strtod_l+0x13a>
 8020f16:	2b00      	cmp	r3, #0
 8020f18:	d09e      	beq.n	8020e58 <_strtod_l+0x88>
 8020f1a:	2301      	movs	r3, #1
 8020f1c:	9306      	str	r3, [sp, #24]
 8020f1e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020f20:	930c      	str	r3, [sp, #48]	; 0x30
 8020f22:	2300      	movs	r3, #0
 8020f24:	9304      	str	r3, [sp, #16]
 8020f26:	930a      	str	r3, [sp, #40]	; 0x28
 8020f28:	461e      	mov	r6, r3
 8020f2a:	220a      	movs	r2, #10
 8020f2c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8020f2e:	f890 b000 	ldrb.w	fp, [r0]
 8020f32:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 8020f36:	b2d9      	uxtb	r1, r3
 8020f38:	2909      	cmp	r1, #9
 8020f3a:	d92b      	bls.n	8020f94 <_strtod_l+0x1c4>
 8020f3c:	9908      	ldr	r1, [sp, #32]
 8020f3e:	462a      	mov	r2, r5
 8020f40:	f7ff ff18 	bl	8020d74 <strncmp>
 8020f44:	2800      	cmp	r0, #0
 8020f46:	d035      	beq.n	8020fb4 <_strtod_l+0x1e4>
 8020f48:	2000      	movs	r0, #0
 8020f4a:	465a      	mov	r2, fp
 8020f4c:	4633      	mov	r3, r6
 8020f4e:	4683      	mov	fp, r0
 8020f50:	4601      	mov	r1, r0
 8020f52:	2a65      	cmp	r2, #101	; 0x65
 8020f54:	d001      	beq.n	8020f5a <_strtod_l+0x18a>
 8020f56:	2a45      	cmp	r2, #69	; 0x45
 8020f58:	d118      	bne.n	8020f8c <_strtod_l+0x1bc>
 8020f5a:	b91b      	cbnz	r3, 8020f64 <_strtod_l+0x194>
 8020f5c:	9b06      	ldr	r3, [sp, #24]
 8020f5e:	4303      	orrs	r3, r0
 8020f60:	d097      	beq.n	8020e92 <_strtod_l+0xc2>
 8020f62:	2300      	movs	r3, #0
 8020f64:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8020f68:	f10a 0201 	add.w	r2, sl, #1
 8020f6c:	9217      	str	r2, [sp, #92]	; 0x5c
 8020f6e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8020f72:	2a2b      	cmp	r2, #43	; 0x2b
 8020f74:	d077      	beq.n	8021066 <_strtod_l+0x296>
 8020f76:	2a2d      	cmp	r2, #45	; 0x2d
 8020f78:	d07d      	beq.n	8021076 <_strtod_l+0x2a6>
 8020f7a:	f04f 0e00 	mov.w	lr, #0
 8020f7e:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8020f82:	2d09      	cmp	r5, #9
 8020f84:	f240 8084 	bls.w	8021090 <_strtod_l+0x2c0>
 8020f88:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8020f8c:	2500      	movs	r5, #0
 8020f8e:	e09f      	b.n	80210d0 <_strtod_l+0x300>
 8020f90:	2300      	movs	r3, #0
 8020f92:	e7c3      	b.n	8020f1c <_strtod_l+0x14c>
 8020f94:	2e08      	cmp	r6, #8
 8020f96:	bfd5      	itete	le
 8020f98:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8020f9a:	9904      	ldrgt	r1, [sp, #16]
 8020f9c:	fb02 3301 	mlale	r3, r2, r1, r3
 8020fa0:	fb02 3301 	mlagt	r3, r2, r1, r3
 8020fa4:	f100 0001 	add.w	r0, r0, #1
 8020fa8:	bfd4      	ite	le
 8020faa:	930a      	strle	r3, [sp, #40]	; 0x28
 8020fac:	9304      	strgt	r3, [sp, #16]
 8020fae:	3601      	adds	r6, #1
 8020fb0:	9017      	str	r0, [sp, #92]	; 0x5c
 8020fb2:	e7bb      	b.n	8020f2c <_strtod_l+0x15c>
 8020fb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020fb6:	195a      	adds	r2, r3, r5
 8020fb8:	9217      	str	r2, [sp, #92]	; 0x5c
 8020fba:	5d5a      	ldrb	r2, [r3, r5]
 8020fbc:	b3ae      	cbz	r6, 802102a <_strtod_l+0x25a>
 8020fbe:	4683      	mov	fp, r0
 8020fc0:	4633      	mov	r3, r6
 8020fc2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8020fc6:	2909      	cmp	r1, #9
 8020fc8:	d912      	bls.n	8020ff0 <_strtod_l+0x220>
 8020fca:	2101      	movs	r1, #1
 8020fcc:	e7c1      	b.n	8020f52 <_strtod_l+0x182>
 8020fce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020fd0:	1c5a      	adds	r2, r3, #1
 8020fd2:	9217      	str	r2, [sp, #92]	; 0x5c
 8020fd4:	785a      	ldrb	r2, [r3, #1]
 8020fd6:	3001      	adds	r0, #1
 8020fd8:	2a30      	cmp	r2, #48	; 0x30
 8020fda:	d0f8      	beq.n	8020fce <_strtod_l+0x1fe>
 8020fdc:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8020fe0:	2b08      	cmp	r3, #8
 8020fe2:	f200 84b0 	bhi.w	8021946 <_strtod_l+0xb76>
 8020fe6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020fe8:	930c      	str	r3, [sp, #48]	; 0x30
 8020fea:	4683      	mov	fp, r0
 8020fec:	2000      	movs	r0, #0
 8020fee:	4603      	mov	r3, r0
 8020ff0:	3a30      	subs	r2, #48	; 0x30
 8020ff2:	f100 0101 	add.w	r1, r0, #1
 8020ff6:	d012      	beq.n	802101e <_strtod_l+0x24e>
 8020ff8:	448b      	add	fp, r1
 8020ffa:	eb00 0c03 	add.w	ip, r0, r3
 8020ffe:	4619      	mov	r1, r3
 8021000:	250a      	movs	r5, #10
 8021002:	4561      	cmp	r1, ip
 8021004:	d113      	bne.n	802102e <_strtod_l+0x25e>
 8021006:	1819      	adds	r1, r3, r0
 8021008:	2908      	cmp	r1, #8
 802100a:	f103 0301 	add.w	r3, r3, #1
 802100e:	4403      	add	r3, r0
 8021010:	dc1d      	bgt.n	802104e <_strtod_l+0x27e>
 8021012:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021014:	210a      	movs	r1, #10
 8021016:	fb01 2200 	mla	r2, r1, r0, r2
 802101a:	920a      	str	r2, [sp, #40]	; 0x28
 802101c:	2100      	movs	r1, #0
 802101e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8021020:	1c50      	adds	r0, r2, #1
 8021022:	9017      	str	r0, [sp, #92]	; 0x5c
 8021024:	7852      	ldrb	r2, [r2, #1]
 8021026:	4608      	mov	r0, r1
 8021028:	e7cb      	b.n	8020fc2 <_strtod_l+0x1f2>
 802102a:	4630      	mov	r0, r6
 802102c:	e7d4      	b.n	8020fd8 <_strtod_l+0x208>
 802102e:	2908      	cmp	r1, #8
 8021030:	dc04      	bgt.n	802103c <_strtod_l+0x26c>
 8021032:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8021034:	436f      	muls	r7, r5
 8021036:	970a      	str	r7, [sp, #40]	; 0x28
 8021038:	3101      	adds	r1, #1
 802103a:	e7e2      	b.n	8021002 <_strtod_l+0x232>
 802103c:	f101 0e01 	add.w	lr, r1, #1
 8021040:	f1be 0f10 	cmp.w	lr, #16
 8021044:	bfde      	ittt	le
 8021046:	9f04      	ldrle	r7, [sp, #16]
 8021048:	436f      	mulle	r7, r5
 802104a:	9704      	strle	r7, [sp, #16]
 802104c:	e7f4      	b.n	8021038 <_strtod_l+0x268>
 802104e:	2b10      	cmp	r3, #16
 8021050:	bfdf      	itttt	le
 8021052:	9804      	ldrle	r0, [sp, #16]
 8021054:	210a      	movle	r1, #10
 8021056:	fb01 2200 	mlale	r2, r1, r0, r2
 802105a:	9204      	strle	r2, [sp, #16]
 802105c:	e7de      	b.n	802101c <_strtod_l+0x24c>
 802105e:	f04f 0b00 	mov.w	fp, #0
 8021062:	2101      	movs	r1, #1
 8021064:	e77a      	b.n	8020f5c <_strtod_l+0x18c>
 8021066:	f04f 0e00 	mov.w	lr, #0
 802106a:	f10a 0202 	add.w	r2, sl, #2
 802106e:	9217      	str	r2, [sp, #92]	; 0x5c
 8021070:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8021074:	e783      	b.n	8020f7e <_strtod_l+0x1ae>
 8021076:	f04f 0e01 	mov.w	lr, #1
 802107a:	e7f6      	b.n	802106a <_strtod_l+0x29a>
 802107c:	080295e0 	.word	0x080295e0
 8021080:	08029404 	.word	0x08029404
 8021084:	7ff00000 	.word	0x7ff00000
 8021088:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 802108a:	1c55      	adds	r5, r2, #1
 802108c:	9517      	str	r5, [sp, #92]	; 0x5c
 802108e:	7852      	ldrb	r2, [r2, #1]
 8021090:	2a30      	cmp	r2, #48	; 0x30
 8021092:	d0f9      	beq.n	8021088 <_strtod_l+0x2b8>
 8021094:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8021098:	2d08      	cmp	r5, #8
 802109a:	f63f af77 	bhi.w	8020f8c <_strtod_l+0x1bc>
 802109e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80210a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80210a4:	9208      	str	r2, [sp, #32]
 80210a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80210a8:	1c55      	adds	r5, r2, #1
 80210aa:	9517      	str	r5, [sp, #92]	; 0x5c
 80210ac:	7852      	ldrb	r2, [r2, #1]
 80210ae:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 80210b2:	2f09      	cmp	r7, #9
 80210b4:	d937      	bls.n	8021126 <_strtod_l+0x356>
 80210b6:	9f08      	ldr	r7, [sp, #32]
 80210b8:	1bed      	subs	r5, r5, r7
 80210ba:	2d08      	cmp	r5, #8
 80210bc:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80210c0:	dc02      	bgt.n	80210c8 <_strtod_l+0x2f8>
 80210c2:	4565      	cmp	r5, ip
 80210c4:	bfa8      	it	ge
 80210c6:	4665      	movge	r5, ip
 80210c8:	f1be 0f00 	cmp.w	lr, #0
 80210cc:	d000      	beq.n	80210d0 <_strtod_l+0x300>
 80210ce:	426d      	negs	r5, r5
 80210d0:	2b00      	cmp	r3, #0
 80210d2:	d14f      	bne.n	8021174 <_strtod_l+0x3a4>
 80210d4:	9b06      	ldr	r3, [sp, #24]
 80210d6:	4303      	orrs	r3, r0
 80210d8:	f47f aebe 	bne.w	8020e58 <_strtod_l+0x88>
 80210dc:	2900      	cmp	r1, #0
 80210de:	f47f aed8 	bne.w	8020e92 <_strtod_l+0xc2>
 80210e2:	2a69      	cmp	r2, #105	; 0x69
 80210e4:	d027      	beq.n	8021136 <_strtod_l+0x366>
 80210e6:	dc24      	bgt.n	8021132 <_strtod_l+0x362>
 80210e8:	2a49      	cmp	r2, #73	; 0x49
 80210ea:	d024      	beq.n	8021136 <_strtod_l+0x366>
 80210ec:	2a4e      	cmp	r2, #78	; 0x4e
 80210ee:	f47f aed0 	bne.w	8020e92 <_strtod_l+0xc2>
 80210f2:	499b      	ldr	r1, [pc, #620]	; (8021360 <_strtod_l+0x590>)
 80210f4:	a817      	add	r0, sp, #92	; 0x5c
 80210f6:	f002 f847 	bl	8023188 <__match>
 80210fa:	2800      	cmp	r0, #0
 80210fc:	f43f aec9 	beq.w	8020e92 <_strtod_l+0xc2>
 8021100:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021102:	781b      	ldrb	r3, [r3, #0]
 8021104:	2b28      	cmp	r3, #40	; 0x28
 8021106:	d12d      	bne.n	8021164 <_strtod_l+0x394>
 8021108:	4996      	ldr	r1, [pc, #600]	; (8021364 <_strtod_l+0x594>)
 802110a:	aa1a      	add	r2, sp, #104	; 0x68
 802110c:	a817      	add	r0, sp, #92	; 0x5c
 802110e:	f002 f84f 	bl	80231b0 <__hexnan>
 8021112:	2805      	cmp	r0, #5
 8021114:	d126      	bne.n	8021164 <_strtod_l+0x394>
 8021116:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8021118:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 802111c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8021120:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8021124:	e698      	b.n	8020e58 <_strtod_l+0x88>
 8021126:	250a      	movs	r5, #10
 8021128:	fb05 250c 	mla	r5, r5, ip, r2
 802112c:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8021130:	e7b9      	b.n	80210a6 <_strtod_l+0x2d6>
 8021132:	2a6e      	cmp	r2, #110	; 0x6e
 8021134:	e7db      	b.n	80210ee <_strtod_l+0x31e>
 8021136:	498c      	ldr	r1, [pc, #560]	; (8021368 <_strtod_l+0x598>)
 8021138:	a817      	add	r0, sp, #92	; 0x5c
 802113a:	f002 f825 	bl	8023188 <__match>
 802113e:	2800      	cmp	r0, #0
 8021140:	f43f aea7 	beq.w	8020e92 <_strtod_l+0xc2>
 8021144:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021146:	4989      	ldr	r1, [pc, #548]	; (802136c <_strtod_l+0x59c>)
 8021148:	3b01      	subs	r3, #1
 802114a:	a817      	add	r0, sp, #92	; 0x5c
 802114c:	9317      	str	r3, [sp, #92]	; 0x5c
 802114e:	f002 f81b 	bl	8023188 <__match>
 8021152:	b910      	cbnz	r0, 802115a <_strtod_l+0x38a>
 8021154:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021156:	3301      	adds	r3, #1
 8021158:	9317      	str	r3, [sp, #92]	; 0x5c
 802115a:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8021380 <_strtod_l+0x5b0>
 802115e:	f04f 0800 	mov.w	r8, #0
 8021162:	e679      	b.n	8020e58 <_strtod_l+0x88>
 8021164:	4882      	ldr	r0, [pc, #520]	; (8021370 <_strtod_l+0x5a0>)
 8021166:	f003 f8cb 	bl	8024300 <nan>
 802116a:	ed8d 0b04 	vstr	d0, [sp, #16]
 802116e:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8021172:	e671      	b.n	8020e58 <_strtod_l+0x88>
 8021174:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8021178:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 802117c:	eba5 020b 	sub.w	r2, r5, fp
 8021180:	2e00      	cmp	r6, #0
 8021182:	bf08      	it	eq
 8021184:	461e      	moveq	r6, r3
 8021186:	2b10      	cmp	r3, #16
 8021188:	ed8d 7b08 	vstr	d7, [sp, #32]
 802118c:	9206      	str	r2, [sp, #24]
 802118e:	461a      	mov	r2, r3
 8021190:	bfa8      	it	ge
 8021192:	2210      	movge	r2, #16
 8021194:	2b09      	cmp	r3, #9
 8021196:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 802119a:	dd0e      	ble.n	80211ba <_strtod_l+0x3ea>
 802119c:	4975      	ldr	r1, [pc, #468]	; (8021374 <_strtod_l+0x5a4>)
 802119e:	eddd 7a04 	vldr	s15, [sp, #16]
 80211a2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80211a6:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 80211aa:	ed9d 5b08 	vldr	d5, [sp, #32]
 80211ae:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80211b2:	eea5 7b06 	vfma.f64	d7, d5, d6
 80211b6:	ec59 8b17 	vmov	r8, r9, d7
 80211ba:	2b0f      	cmp	r3, #15
 80211bc:	dc37      	bgt.n	802122e <_strtod_l+0x45e>
 80211be:	9906      	ldr	r1, [sp, #24]
 80211c0:	2900      	cmp	r1, #0
 80211c2:	f43f ae49 	beq.w	8020e58 <_strtod_l+0x88>
 80211c6:	dd23      	ble.n	8021210 <_strtod_l+0x440>
 80211c8:	2916      	cmp	r1, #22
 80211ca:	dc0b      	bgt.n	80211e4 <_strtod_l+0x414>
 80211cc:	4b69      	ldr	r3, [pc, #420]	; (8021374 <_strtod_l+0x5a4>)
 80211ce:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80211d2:	ed93 7b00 	vldr	d7, [r3]
 80211d6:	ec49 8b16 	vmov	d6, r8, r9
 80211da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80211de:	ec59 8b17 	vmov	r8, r9, d7
 80211e2:	e639      	b.n	8020e58 <_strtod_l+0x88>
 80211e4:	9806      	ldr	r0, [sp, #24]
 80211e6:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80211ea:	4281      	cmp	r1, r0
 80211ec:	db1f      	blt.n	802122e <_strtod_l+0x45e>
 80211ee:	4a61      	ldr	r2, [pc, #388]	; (8021374 <_strtod_l+0x5a4>)
 80211f0:	f1c3 030f 	rsb	r3, r3, #15
 80211f4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80211f8:	ed91 7b00 	vldr	d7, [r1]
 80211fc:	ec49 8b16 	vmov	d6, r8, r9
 8021200:	1ac3      	subs	r3, r0, r3
 8021202:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8021206:	ee27 7b06 	vmul.f64	d7, d7, d6
 802120a:	ed92 6b00 	vldr	d6, [r2]
 802120e:	e7e4      	b.n	80211da <_strtod_l+0x40a>
 8021210:	9906      	ldr	r1, [sp, #24]
 8021212:	3116      	adds	r1, #22
 8021214:	db0b      	blt.n	802122e <_strtod_l+0x45e>
 8021216:	4b57      	ldr	r3, [pc, #348]	; (8021374 <_strtod_l+0x5a4>)
 8021218:	ebab 0505 	sub.w	r5, fp, r5
 802121c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8021220:	ed95 7b00 	vldr	d7, [r5]
 8021224:	ec49 8b16 	vmov	d6, r8, r9
 8021228:	ee86 7b07 	vdiv.f64	d7, d6, d7
 802122c:	e7d7      	b.n	80211de <_strtod_l+0x40e>
 802122e:	9906      	ldr	r1, [sp, #24]
 8021230:	1a9a      	subs	r2, r3, r2
 8021232:	440a      	add	r2, r1
 8021234:	2a00      	cmp	r2, #0
 8021236:	dd74      	ble.n	8021322 <_strtod_l+0x552>
 8021238:	f012 000f 	ands.w	r0, r2, #15
 802123c:	d00a      	beq.n	8021254 <_strtod_l+0x484>
 802123e:	494d      	ldr	r1, [pc, #308]	; (8021374 <_strtod_l+0x5a4>)
 8021240:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8021244:	ed91 7b00 	vldr	d7, [r1]
 8021248:	ec49 8b16 	vmov	d6, r8, r9
 802124c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021250:	ec59 8b17 	vmov	r8, r9, d7
 8021254:	f032 020f 	bics.w	r2, r2, #15
 8021258:	d04f      	beq.n	80212fa <_strtod_l+0x52a>
 802125a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 802125e:	dd22      	ble.n	80212a6 <_strtod_l+0x4d6>
 8021260:	2500      	movs	r5, #0
 8021262:	462e      	mov	r6, r5
 8021264:	950a      	str	r5, [sp, #40]	; 0x28
 8021266:	462f      	mov	r7, r5
 8021268:	2322      	movs	r3, #34	; 0x22
 802126a:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8021380 <_strtod_l+0x5b0>
 802126e:	6023      	str	r3, [r4, #0]
 8021270:	f04f 0800 	mov.w	r8, #0
 8021274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021276:	2b00      	cmp	r3, #0
 8021278:	f43f adee 	beq.w	8020e58 <_strtod_l+0x88>
 802127c:	9918      	ldr	r1, [sp, #96]	; 0x60
 802127e:	4620      	mov	r0, r4
 8021280:	f002 f8fc 	bl	802347c <_Bfree>
 8021284:	4639      	mov	r1, r7
 8021286:	4620      	mov	r0, r4
 8021288:	f002 f8f8 	bl	802347c <_Bfree>
 802128c:	4631      	mov	r1, r6
 802128e:	4620      	mov	r0, r4
 8021290:	f002 f8f4 	bl	802347c <_Bfree>
 8021294:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021296:	4620      	mov	r0, r4
 8021298:	f002 f8f0 	bl	802347c <_Bfree>
 802129c:	4629      	mov	r1, r5
 802129e:	4620      	mov	r0, r4
 80212a0:	f002 f8ec 	bl	802347c <_Bfree>
 80212a4:	e5d8      	b.n	8020e58 <_strtod_l+0x88>
 80212a6:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80212aa:	2000      	movs	r0, #0
 80212ac:	4f32      	ldr	r7, [pc, #200]	; (8021378 <_strtod_l+0x5a8>)
 80212ae:	1112      	asrs	r2, r2, #4
 80212b0:	4601      	mov	r1, r0
 80212b2:	2a01      	cmp	r2, #1
 80212b4:	dc24      	bgt.n	8021300 <_strtod_l+0x530>
 80212b6:	b108      	cbz	r0, 80212bc <_strtod_l+0x4ec>
 80212b8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80212bc:	4a2e      	ldr	r2, [pc, #184]	; (8021378 <_strtod_l+0x5a8>)
 80212be:	482f      	ldr	r0, [pc, #188]	; (802137c <_strtod_l+0x5ac>)
 80212c0:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80212c4:	ed91 7b00 	vldr	d7, [r1]
 80212c8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80212cc:	ec49 8b16 	vmov	d6, r8, r9
 80212d0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80212d4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80212d8:	9905      	ldr	r1, [sp, #20]
 80212da:	4a29      	ldr	r2, [pc, #164]	; (8021380 <_strtod_l+0x5b0>)
 80212dc:	400a      	ands	r2, r1
 80212de:	4282      	cmp	r2, r0
 80212e0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80212e4:	d8bc      	bhi.n	8021260 <_strtod_l+0x490>
 80212e6:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80212ea:	4282      	cmp	r2, r0
 80212ec:	bf86      	itte	hi
 80212ee:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8021384 <_strtod_l+0x5b4>
 80212f2:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80212f6:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 80212fa:	2200      	movs	r2, #0
 80212fc:	9204      	str	r2, [sp, #16]
 80212fe:	e07f      	b.n	8021400 <_strtod_l+0x630>
 8021300:	f012 0f01 	tst.w	r2, #1
 8021304:	d00a      	beq.n	802131c <_strtod_l+0x54c>
 8021306:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 802130a:	ed90 7b00 	vldr	d7, [r0]
 802130e:	ed9d 6b04 	vldr	d6, [sp, #16]
 8021312:	ee26 7b07 	vmul.f64	d7, d6, d7
 8021316:	ed8d 7b04 	vstr	d7, [sp, #16]
 802131a:	2001      	movs	r0, #1
 802131c:	3101      	adds	r1, #1
 802131e:	1052      	asrs	r2, r2, #1
 8021320:	e7c7      	b.n	80212b2 <_strtod_l+0x4e2>
 8021322:	d0ea      	beq.n	80212fa <_strtod_l+0x52a>
 8021324:	4252      	negs	r2, r2
 8021326:	f012 000f 	ands.w	r0, r2, #15
 802132a:	d00a      	beq.n	8021342 <_strtod_l+0x572>
 802132c:	4911      	ldr	r1, [pc, #68]	; (8021374 <_strtod_l+0x5a4>)
 802132e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8021332:	ed91 7b00 	vldr	d7, [r1]
 8021336:	ec49 8b16 	vmov	d6, r8, r9
 802133a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 802133e:	ec59 8b17 	vmov	r8, r9, d7
 8021342:	1112      	asrs	r2, r2, #4
 8021344:	d0d9      	beq.n	80212fa <_strtod_l+0x52a>
 8021346:	2a1f      	cmp	r2, #31
 8021348:	dd1e      	ble.n	8021388 <_strtod_l+0x5b8>
 802134a:	2500      	movs	r5, #0
 802134c:	462e      	mov	r6, r5
 802134e:	950a      	str	r5, [sp, #40]	; 0x28
 8021350:	462f      	mov	r7, r5
 8021352:	2322      	movs	r3, #34	; 0x22
 8021354:	f04f 0800 	mov.w	r8, #0
 8021358:	f04f 0900 	mov.w	r9, #0
 802135c:	6023      	str	r3, [r4, #0]
 802135e:	e789      	b.n	8021274 <_strtod_l+0x4a4>
 8021360:	08029361 	.word	0x08029361
 8021364:	08029418 	.word	0x08029418
 8021368:	08029359 	.word	0x08029359
 802136c:	08029497 	.word	0x08029497
 8021370:	08029493 	.word	0x08029493
 8021374:	08029680 	.word	0x08029680
 8021378:	08029658 	.word	0x08029658
 802137c:	7ca00000 	.word	0x7ca00000
 8021380:	7ff00000 	.word	0x7ff00000
 8021384:	7fefffff 	.word	0x7fefffff
 8021388:	f012 0110 	ands.w	r1, r2, #16
 802138c:	bf18      	it	ne
 802138e:	216a      	movne	r1, #106	; 0x6a
 8021390:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8021394:	9104      	str	r1, [sp, #16]
 8021396:	49c0      	ldr	r1, [pc, #768]	; (8021698 <_strtod_l+0x8c8>)
 8021398:	2000      	movs	r0, #0
 802139a:	07d7      	lsls	r7, r2, #31
 802139c:	d508      	bpl.n	80213b0 <_strtod_l+0x5e0>
 802139e:	ed9d 6b08 	vldr	d6, [sp, #32]
 80213a2:	ed91 7b00 	vldr	d7, [r1]
 80213a6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80213aa:	ed8d 7b08 	vstr	d7, [sp, #32]
 80213ae:	2001      	movs	r0, #1
 80213b0:	1052      	asrs	r2, r2, #1
 80213b2:	f101 0108 	add.w	r1, r1, #8
 80213b6:	d1f0      	bne.n	802139a <_strtod_l+0x5ca>
 80213b8:	b108      	cbz	r0, 80213be <_strtod_l+0x5ee>
 80213ba:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80213be:	9a04      	ldr	r2, [sp, #16]
 80213c0:	b1ba      	cbz	r2, 80213f2 <_strtod_l+0x622>
 80213c2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80213c6:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 80213ca:	2a00      	cmp	r2, #0
 80213cc:	4649      	mov	r1, r9
 80213ce:	dd10      	ble.n	80213f2 <_strtod_l+0x622>
 80213d0:	2a1f      	cmp	r2, #31
 80213d2:	f340 8132 	ble.w	802163a <_strtod_l+0x86a>
 80213d6:	2a34      	cmp	r2, #52	; 0x34
 80213d8:	bfde      	ittt	le
 80213da:	3a20      	suble	r2, #32
 80213dc:	f04f 30ff 	movle.w	r0, #4294967295	; 0xffffffff
 80213e0:	fa00 f202 	lslle.w	r2, r0, r2
 80213e4:	f04f 0800 	mov.w	r8, #0
 80213e8:	bfcc      	ite	gt
 80213ea:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80213ee:	ea02 0901 	andle.w	r9, r2, r1
 80213f2:	ec49 8b17 	vmov	d7, r8, r9
 80213f6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80213fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80213fe:	d0a4      	beq.n	802134a <_strtod_l+0x57a>
 8021400:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021402:	9200      	str	r2, [sp, #0]
 8021404:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021406:	4632      	mov	r2, r6
 8021408:	4620      	mov	r0, r4
 802140a:	f002 f8a3 	bl	8023554 <__s2b>
 802140e:	900a      	str	r0, [sp, #40]	; 0x28
 8021410:	2800      	cmp	r0, #0
 8021412:	f43f af25 	beq.w	8021260 <_strtod_l+0x490>
 8021416:	9b06      	ldr	r3, [sp, #24]
 8021418:	ebab 0505 	sub.w	r5, fp, r5
 802141c:	2b00      	cmp	r3, #0
 802141e:	bfb4      	ite	lt
 8021420:	462b      	movlt	r3, r5
 8021422:	2300      	movge	r3, #0
 8021424:	930c      	str	r3, [sp, #48]	; 0x30
 8021426:	9b06      	ldr	r3, [sp, #24]
 8021428:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8021680 <_strtod_l+0x8b0>
 802142c:	ed9f ab96 	vldr	d10, [pc, #600]	; 8021688 <_strtod_l+0x8b8>
 8021430:	ed9f bb97 	vldr	d11, [pc, #604]	; 8021690 <_strtod_l+0x8c0>
 8021434:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021438:	2500      	movs	r5, #0
 802143a:	9312      	str	r3, [sp, #72]	; 0x48
 802143c:	462e      	mov	r6, r5
 802143e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021440:	4620      	mov	r0, r4
 8021442:	6859      	ldr	r1, [r3, #4]
 8021444:	f001 ffda 	bl	80233fc <_Balloc>
 8021448:	4607      	mov	r7, r0
 802144a:	2800      	cmp	r0, #0
 802144c:	f43f af0c 	beq.w	8021268 <_strtod_l+0x498>
 8021450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021452:	691a      	ldr	r2, [r3, #16]
 8021454:	3202      	adds	r2, #2
 8021456:	f103 010c 	add.w	r1, r3, #12
 802145a:	0092      	lsls	r2, r2, #2
 802145c:	300c      	adds	r0, #12
 802145e:	f7fe fc63 	bl	801fd28 <memcpy>
 8021462:	ec49 8b10 	vmov	d0, r8, r9
 8021466:	aa1a      	add	r2, sp, #104	; 0x68
 8021468:	a919      	add	r1, sp, #100	; 0x64
 802146a:	4620      	mov	r0, r4
 802146c:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8021470:	f002 fbac 	bl	8023bcc <__d2b>
 8021474:	9018      	str	r0, [sp, #96]	; 0x60
 8021476:	2800      	cmp	r0, #0
 8021478:	f43f aef6 	beq.w	8021268 <_strtod_l+0x498>
 802147c:	2101      	movs	r1, #1
 802147e:	4620      	mov	r0, r4
 8021480:	f002 f902 	bl	8023688 <__i2b>
 8021484:	4606      	mov	r6, r0
 8021486:	2800      	cmp	r0, #0
 8021488:	f43f aeee 	beq.w	8021268 <_strtod_l+0x498>
 802148c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802148e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8021490:	2b00      	cmp	r3, #0
 8021492:	bfab      	itete	ge
 8021494:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8021496:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8021498:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 802149c:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 80214a0:	bfac      	ite	ge
 80214a2:	eb03 0b02 	addge.w	fp, r3, r2
 80214a6:	eba2 0a03 	sublt.w	sl, r2, r3
 80214aa:	9a04      	ldr	r2, [sp, #16]
 80214ac:	1a9b      	subs	r3, r3, r2
 80214ae:	440b      	add	r3, r1
 80214b0:	4a7a      	ldr	r2, [pc, #488]	; (802169c <_strtod_l+0x8cc>)
 80214b2:	3b01      	subs	r3, #1
 80214b4:	4293      	cmp	r3, r2
 80214b6:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80214ba:	f280 80d1 	bge.w	8021660 <_strtod_l+0x890>
 80214be:	1ad2      	subs	r2, r2, r3
 80214c0:	2a1f      	cmp	r2, #31
 80214c2:	eba1 0102 	sub.w	r1, r1, r2
 80214c6:	f04f 0001 	mov.w	r0, #1
 80214ca:	f300 80bd 	bgt.w	8021648 <_strtod_l+0x878>
 80214ce:	fa00 f302 	lsl.w	r3, r0, r2
 80214d2:	930e      	str	r3, [sp, #56]	; 0x38
 80214d4:	2300      	movs	r3, #0
 80214d6:	930d      	str	r3, [sp, #52]	; 0x34
 80214d8:	eb0b 0301 	add.w	r3, fp, r1
 80214dc:	9a04      	ldr	r2, [sp, #16]
 80214de:	459b      	cmp	fp, r3
 80214e0:	448a      	add	sl, r1
 80214e2:	4492      	add	sl, r2
 80214e4:	465a      	mov	r2, fp
 80214e6:	bfa8      	it	ge
 80214e8:	461a      	movge	r2, r3
 80214ea:	4552      	cmp	r2, sl
 80214ec:	bfa8      	it	ge
 80214ee:	4652      	movge	r2, sl
 80214f0:	2a00      	cmp	r2, #0
 80214f2:	bfc2      	ittt	gt
 80214f4:	1a9b      	subgt	r3, r3, r2
 80214f6:	ebaa 0a02 	subgt.w	sl, sl, r2
 80214fa:	ebab 0b02 	subgt.w	fp, fp, r2
 80214fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021500:	2a00      	cmp	r2, #0
 8021502:	dd18      	ble.n	8021536 <_strtod_l+0x766>
 8021504:	4631      	mov	r1, r6
 8021506:	4620      	mov	r0, r4
 8021508:	9315      	str	r3, [sp, #84]	; 0x54
 802150a:	f002 f979 	bl	8023800 <__pow5mult>
 802150e:	4606      	mov	r6, r0
 8021510:	2800      	cmp	r0, #0
 8021512:	f43f aea9 	beq.w	8021268 <_strtod_l+0x498>
 8021516:	4601      	mov	r1, r0
 8021518:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802151a:	4620      	mov	r0, r4
 802151c:	f002 f8ca 	bl	80236b4 <__multiply>
 8021520:	9014      	str	r0, [sp, #80]	; 0x50
 8021522:	2800      	cmp	r0, #0
 8021524:	f43f aea0 	beq.w	8021268 <_strtod_l+0x498>
 8021528:	9918      	ldr	r1, [sp, #96]	; 0x60
 802152a:	4620      	mov	r0, r4
 802152c:	f001 ffa6 	bl	802347c <_Bfree>
 8021530:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021532:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021534:	9218      	str	r2, [sp, #96]	; 0x60
 8021536:	2b00      	cmp	r3, #0
 8021538:	f300 8097 	bgt.w	802166a <_strtod_l+0x89a>
 802153c:	9b06      	ldr	r3, [sp, #24]
 802153e:	2b00      	cmp	r3, #0
 8021540:	dd08      	ble.n	8021554 <_strtod_l+0x784>
 8021542:	4639      	mov	r1, r7
 8021544:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021546:	4620      	mov	r0, r4
 8021548:	f002 f95a 	bl	8023800 <__pow5mult>
 802154c:	4607      	mov	r7, r0
 802154e:	2800      	cmp	r0, #0
 8021550:	f43f ae8a 	beq.w	8021268 <_strtod_l+0x498>
 8021554:	f1ba 0f00 	cmp.w	sl, #0
 8021558:	dd08      	ble.n	802156c <_strtod_l+0x79c>
 802155a:	4639      	mov	r1, r7
 802155c:	4652      	mov	r2, sl
 802155e:	4620      	mov	r0, r4
 8021560:	f002 f9a8 	bl	80238b4 <__lshift>
 8021564:	4607      	mov	r7, r0
 8021566:	2800      	cmp	r0, #0
 8021568:	f43f ae7e 	beq.w	8021268 <_strtod_l+0x498>
 802156c:	f1bb 0f00 	cmp.w	fp, #0
 8021570:	dd08      	ble.n	8021584 <_strtod_l+0x7b4>
 8021572:	4631      	mov	r1, r6
 8021574:	465a      	mov	r2, fp
 8021576:	4620      	mov	r0, r4
 8021578:	f002 f99c 	bl	80238b4 <__lshift>
 802157c:	4606      	mov	r6, r0
 802157e:	2800      	cmp	r0, #0
 8021580:	f43f ae72 	beq.w	8021268 <_strtod_l+0x498>
 8021584:	9918      	ldr	r1, [sp, #96]	; 0x60
 8021586:	463a      	mov	r2, r7
 8021588:	4620      	mov	r0, r4
 802158a:	f002 fa1b 	bl	80239c4 <__mdiff>
 802158e:	4605      	mov	r5, r0
 8021590:	2800      	cmp	r0, #0
 8021592:	f43f ae69 	beq.w	8021268 <_strtod_l+0x498>
 8021596:	2300      	movs	r3, #0
 8021598:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 802159c:	60c3      	str	r3, [r0, #12]
 802159e:	4631      	mov	r1, r6
 80215a0:	f002 f9f4 	bl	802398c <__mcmp>
 80215a4:	2800      	cmp	r0, #0
 80215a6:	da7f      	bge.n	80216a8 <_strtod_l+0x8d8>
 80215a8:	ea5a 0308 	orrs.w	r3, sl, r8
 80215ac:	f040 80a5 	bne.w	80216fa <_strtod_l+0x92a>
 80215b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80215b4:	2b00      	cmp	r3, #0
 80215b6:	f040 80a0 	bne.w	80216fa <_strtod_l+0x92a>
 80215ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80215be:	0d1b      	lsrs	r3, r3, #20
 80215c0:	051b      	lsls	r3, r3, #20
 80215c2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80215c6:	f240 8098 	bls.w	80216fa <_strtod_l+0x92a>
 80215ca:	696b      	ldr	r3, [r5, #20]
 80215cc:	b91b      	cbnz	r3, 80215d6 <_strtod_l+0x806>
 80215ce:	692b      	ldr	r3, [r5, #16]
 80215d0:	2b01      	cmp	r3, #1
 80215d2:	f340 8092 	ble.w	80216fa <_strtod_l+0x92a>
 80215d6:	4629      	mov	r1, r5
 80215d8:	2201      	movs	r2, #1
 80215da:	4620      	mov	r0, r4
 80215dc:	f002 f96a 	bl	80238b4 <__lshift>
 80215e0:	4631      	mov	r1, r6
 80215e2:	4605      	mov	r5, r0
 80215e4:	f002 f9d2 	bl	802398c <__mcmp>
 80215e8:	2800      	cmp	r0, #0
 80215ea:	f340 8086 	ble.w	80216fa <_strtod_l+0x92a>
 80215ee:	9904      	ldr	r1, [sp, #16]
 80215f0:	4a2b      	ldr	r2, [pc, #172]	; (80216a0 <_strtod_l+0x8d0>)
 80215f2:	464b      	mov	r3, r9
 80215f4:	2900      	cmp	r1, #0
 80215f6:	f000 80a1 	beq.w	802173c <_strtod_l+0x96c>
 80215fa:	ea02 0109 	and.w	r1, r2, r9
 80215fe:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8021602:	f300 809b 	bgt.w	802173c <_strtod_l+0x96c>
 8021606:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 802160a:	f77f aea2 	ble.w	8021352 <_strtod_l+0x582>
 802160e:	4a25      	ldr	r2, [pc, #148]	; (80216a4 <_strtod_l+0x8d4>)
 8021610:	2300      	movs	r3, #0
 8021612:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8021616:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 802161a:	ec49 8b17 	vmov	d7, r8, r9
 802161e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021622:	ed8d 7b04 	vstr	d7, [sp, #16]
 8021626:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 802162a:	4313      	orrs	r3, r2
 802162c:	bf08      	it	eq
 802162e:	2322      	moveq	r3, #34	; 0x22
 8021630:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8021634:	bf08      	it	eq
 8021636:	6023      	streq	r3, [r4, #0]
 8021638:	e620      	b.n	802127c <_strtod_l+0x4ac>
 802163a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 802163e:	fa01 f202 	lsl.w	r2, r1, r2
 8021642:	ea02 0808 	and.w	r8, r2, r8
 8021646:	e6d4      	b.n	80213f2 <_strtod_l+0x622>
 8021648:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 802164c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8021650:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8021654:	33e2      	adds	r3, #226	; 0xe2
 8021656:	fa00 f303 	lsl.w	r3, r0, r3
 802165a:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 802165e:	e73b      	b.n	80214d8 <_strtod_l+0x708>
 8021660:	2000      	movs	r0, #0
 8021662:	2301      	movs	r3, #1
 8021664:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8021668:	e736      	b.n	80214d8 <_strtod_l+0x708>
 802166a:	9918      	ldr	r1, [sp, #96]	; 0x60
 802166c:	461a      	mov	r2, r3
 802166e:	4620      	mov	r0, r4
 8021670:	f002 f920 	bl	80238b4 <__lshift>
 8021674:	9018      	str	r0, [sp, #96]	; 0x60
 8021676:	2800      	cmp	r0, #0
 8021678:	f47f af60 	bne.w	802153c <_strtod_l+0x76c>
 802167c:	e5f4      	b.n	8021268 <_strtod_l+0x498>
 802167e:	bf00      	nop
 8021680:	94a03595 	.word	0x94a03595
 8021684:	3fcfffff 	.word	0x3fcfffff
 8021688:	94a03595 	.word	0x94a03595
 802168c:	3fdfffff 	.word	0x3fdfffff
 8021690:	35afe535 	.word	0x35afe535
 8021694:	3fe00000 	.word	0x3fe00000
 8021698:	08029430 	.word	0x08029430
 802169c:	fffffc02 	.word	0xfffffc02
 80216a0:	7ff00000 	.word	0x7ff00000
 80216a4:	39500000 	.word	0x39500000
 80216a8:	46cb      	mov	fp, r9
 80216aa:	d165      	bne.n	8021778 <_strtod_l+0x9a8>
 80216ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80216b0:	f1ba 0f00 	cmp.w	sl, #0
 80216b4:	d02a      	beq.n	802170c <_strtod_l+0x93c>
 80216b6:	4aaa      	ldr	r2, [pc, #680]	; (8021960 <_strtod_l+0xb90>)
 80216b8:	4293      	cmp	r3, r2
 80216ba:	d12b      	bne.n	8021714 <_strtod_l+0x944>
 80216bc:	9b04      	ldr	r3, [sp, #16]
 80216be:	4641      	mov	r1, r8
 80216c0:	b1fb      	cbz	r3, 8021702 <_strtod_l+0x932>
 80216c2:	4aa8      	ldr	r2, [pc, #672]	; (8021964 <_strtod_l+0xb94>)
 80216c4:	ea09 0202 	and.w	r2, r9, r2
 80216c8:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80216cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80216d0:	d81a      	bhi.n	8021708 <_strtod_l+0x938>
 80216d2:	0d12      	lsrs	r2, r2, #20
 80216d4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80216d8:	fa00 f303 	lsl.w	r3, r0, r3
 80216dc:	4299      	cmp	r1, r3
 80216de:	d119      	bne.n	8021714 <_strtod_l+0x944>
 80216e0:	4ba1      	ldr	r3, [pc, #644]	; (8021968 <_strtod_l+0xb98>)
 80216e2:	459b      	cmp	fp, r3
 80216e4:	d102      	bne.n	80216ec <_strtod_l+0x91c>
 80216e6:	3101      	adds	r1, #1
 80216e8:	f43f adbe 	beq.w	8021268 <_strtod_l+0x498>
 80216ec:	4b9d      	ldr	r3, [pc, #628]	; (8021964 <_strtod_l+0xb94>)
 80216ee:	ea0b 0303 	and.w	r3, fp, r3
 80216f2:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80216f6:	f04f 0800 	mov.w	r8, #0
 80216fa:	9b04      	ldr	r3, [sp, #16]
 80216fc:	2b00      	cmp	r3, #0
 80216fe:	d186      	bne.n	802160e <_strtod_l+0x83e>
 8021700:	e5bc      	b.n	802127c <_strtod_l+0x4ac>
 8021702:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021706:	e7e9      	b.n	80216dc <_strtod_l+0x90c>
 8021708:	4603      	mov	r3, r0
 802170a:	e7e7      	b.n	80216dc <_strtod_l+0x90c>
 802170c:	ea53 0308 	orrs.w	r3, r3, r8
 8021710:	f43f af6d 	beq.w	80215ee <_strtod_l+0x81e>
 8021714:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021716:	b1db      	cbz	r3, 8021750 <_strtod_l+0x980>
 8021718:	ea13 0f0b 	tst.w	r3, fp
 802171c:	d0ed      	beq.n	80216fa <_strtod_l+0x92a>
 802171e:	9a04      	ldr	r2, [sp, #16]
 8021720:	4640      	mov	r0, r8
 8021722:	4649      	mov	r1, r9
 8021724:	f1ba 0f00 	cmp.w	sl, #0
 8021728:	d016      	beq.n	8021758 <_strtod_l+0x988>
 802172a:	f7ff fb35 	bl	8020d98 <sulp>
 802172e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8021732:	ee37 7b00 	vadd.f64	d7, d7, d0
 8021736:	ec59 8b17 	vmov	r8, r9, d7
 802173a:	e7de      	b.n	80216fa <_strtod_l+0x92a>
 802173c:	4013      	ands	r3, r2
 802173e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8021742:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8021746:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 802174a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 802174e:	e7d4      	b.n	80216fa <_strtod_l+0x92a>
 8021750:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021752:	ea13 0f08 	tst.w	r3, r8
 8021756:	e7e1      	b.n	802171c <_strtod_l+0x94c>
 8021758:	f7ff fb1e 	bl	8020d98 <sulp>
 802175c:	ed9d 7b08 	vldr	d7, [sp, #32]
 8021760:	ee37 7b40 	vsub.f64	d7, d7, d0
 8021764:	ed8d 7b06 	vstr	d7, [sp, #24]
 8021768:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802176c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021770:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8021774:	d1c1      	bne.n	80216fa <_strtod_l+0x92a>
 8021776:	e5ec      	b.n	8021352 <_strtod_l+0x582>
 8021778:	4631      	mov	r1, r6
 802177a:	4628      	mov	r0, r5
 802177c:	f002 fa82 	bl	8023c84 <__ratio>
 8021780:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8021784:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8021788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802178c:	d867      	bhi.n	802185e <_strtod_l+0xa8e>
 802178e:	f1ba 0f00 	cmp.w	sl, #0
 8021792:	d044      	beq.n	802181e <_strtod_l+0xa4e>
 8021794:	4b75      	ldr	r3, [pc, #468]	; (802196c <_strtod_l+0xb9c>)
 8021796:	2200      	movs	r2, #0
 8021798:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 802179c:	4971      	ldr	r1, [pc, #452]	; (8021964 <_strtod_l+0xb94>)
 802179e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8021978 <_strtod_l+0xba8>
 80217a2:	ea0b 0001 	and.w	r0, fp, r1
 80217a6:	4560      	cmp	r0, ip
 80217a8:	900d      	str	r0, [sp, #52]	; 0x34
 80217aa:	f040 808b 	bne.w	80218c4 <_strtod_l+0xaf4>
 80217ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80217b2:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 80217b6:	ec49 8b10 	vmov	d0, r8, r9
 80217ba:	ec43 2b1c 	vmov	d12, r2, r3
 80217be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80217c2:	f002 f987 	bl	8023ad4 <__ulp>
 80217c6:	ec49 8b1d 	vmov	d13, r8, r9
 80217ca:	eeac db00 	vfma.f64	d13, d12, d0
 80217ce:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 80217d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80217d4:	4963      	ldr	r1, [pc, #396]	; (8021964 <_strtod_l+0xb94>)
 80217d6:	4a66      	ldr	r2, [pc, #408]	; (8021970 <_strtod_l+0xba0>)
 80217d8:	4019      	ands	r1, r3
 80217da:	4291      	cmp	r1, r2
 80217dc:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 80217e0:	d947      	bls.n	8021872 <_strtod_l+0xaa2>
 80217e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80217e4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80217e8:	4293      	cmp	r3, r2
 80217ea:	d103      	bne.n	80217f4 <_strtod_l+0xa24>
 80217ec:	9b08      	ldr	r3, [sp, #32]
 80217ee:	3301      	adds	r3, #1
 80217f0:	f43f ad3a 	beq.w	8021268 <_strtod_l+0x498>
 80217f4:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8021968 <_strtod_l+0xb98>
 80217f8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80217fc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80217fe:	4620      	mov	r0, r4
 8021800:	f001 fe3c 	bl	802347c <_Bfree>
 8021804:	4639      	mov	r1, r7
 8021806:	4620      	mov	r0, r4
 8021808:	f001 fe38 	bl	802347c <_Bfree>
 802180c:	4631      	mov	r1, r6
 802180e:	4620      	mov	r0, r4
 8021810:	f001 fe34 	bl	802347c <_Bfree>
 8021814:	4629      	mov	r1, r5
 8021816:	4620      	mov	r0, r4
 8021818:	f001 fe30 	bl	802347c <_Bfree>
 802181c:	e60f      	b.n	802143e <_strtod_l+0x66e>
 802181e:	f1b8 0f00 	cmp.w	r8, #0
 8021822:	d112      	bne.n	802184a <_strtod_l+0xa7a>
 8021824:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8021828:	b9b3      	cbnz	r3, 8021858 <_strtod_l+0xa88>
 802182a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 802182e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8021832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021836:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 802183a:	d401      	bmi.n	8021840 <_strtod_l+0xa70>
 802183c:	ee20 8b08 	vmul.f64	d8, d0, d8
 8021840:	eeb1 7b48 	vneg.f64	d7, d8
 8021844:	ec53 2b17 	vmov	r2, r3, d7
 8021848:	e7a8      	b.n	802179c <_strtod_l+0x9cc>
 802184a:	f1b8 0f01 	cmp.w	r8, #1
 802184e:	d103      	bne.n	8021858 <_strtod_l+0xa88>
 8021850:	f1b9 0f00 	cmp.w	r9, #0
 8021854:	f43f ad7d 	beq.w	8021352 <_strtod_l+0x582>
 8021858:	4b46      	ldr	r3, [pc, #280]	; (8021974 <_strtod_l+0xba4>)
 802185a:	2200      	movs	r2, #0
 802185c:	e79c      	b.n	8021798 <_strtod_l+0x9c8>
 802185e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8021862:	ee20 8b08 	vmul.f64	d8, d0, d8
 8021866:	f1ba 0f00 	cmp.w	sl, #0
 802186a:	d0e9      	beq.n	8021840 <_strtod_l+0xa70>
 802186c:	ec53 2b18 	vmov	r2, r3, d8
 8021870:	e794      	b.n	802179c <_strtod_l+0x9cc>
 8021872:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8021876:	9b04      	ldr	r3, [sp, #16]
 8021878:	2b00      	cmp	r3, #0
 802187a:	d1bf      	bne.n	80217fc <_strtod_l+0xa2c>
 802187c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8021880:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021882:	0d1b      	lsrs	r3, r3, #20
 8021884:	051b      	lsls	r3, r3, #20
 8021886:	429a      	cmp	r2, r3
 8021888:	d1b8      	bne.n	80217fc <_strtod_l+0xa2c>
 802188a:	ec51 0b18 	vmov	r0, r1, d8
 802188e:	f7de ff53 	bl	8000738 <__aeabi_d2lz>
 8021892:	f7de ff0b 	bl	80006ac <__aeabi_l2d>
 8021896:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802189a:	ec41 0b17 	vmov	d7, r0, r1
 802189e:	ea43 0308 	orr.w	r3, r3, r8
 80218a2:	ea53 030a 	orrs.w	r3, r3, sl
 80218a6:	ee38 8b47 	vsub.f64	d8, d8, d7
 80218aa:	d03e      	beq.n	802192a <_strtod_l+0xb5a>
 80218ac:	eeb4 8bca 	vcmpe.f64	d8, d10
 80218b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80218b4:	f53f ace2 	bmi.w	802127c <_strtod_l+0x4ac>
 80218b8:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80218bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80218c0:	dd9c      	ble.n	80217fc <_strtod_l+0xa2c>
 80218c2:	e4db      	b.n	802127c <_strtod_l+0x4ac>
 80218c4:	9904      	ldr	r1, [sp, #16]
 80218c6:	b301      	cbz	r1, 802190a <_strtod_l+0xb3a>
 80218c8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80218ca:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 80218ce:	d81c      	bhi.n	802190a <_strtod_l+0xb3a>
 80218d0:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8021958 <_strtod_l+0xb88>
 80218d4:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80218d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80218dc:	d811      	bhi.n	8021902 <_strtod_l+0xb32>
 80218de:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80218e2:	ee18 3a10 	vmov	r3, s16
 80218e6:	2b01      	cmp	r3, #1
 80218e8:	bf38      	it	cc
 80218ea:	2301      	movcc	r3, #1
 80218ec:	ee08 3a10 	vmov	s16, r3
 80218f0:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80218f4:	f1ba 0f00 	cmp.w	sl, #0
 80218f8:	d114      	bne.n	8021924 <_strtod_l+0xb54>
 80218fa:	eeb1 7b48 	vneg.f64	d7, d8
 80218fe:	ec53 2b17 	vmov	r2, r3, d7
 8021902:	980d      	ldr	r0, [sp, #52]	; 0x34
 8021904:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8021908:	1a0b      	subs	r3, r1, r0
 802190a:	ed9d 0b08 	vldr	d0, [sp, #32]
 802190e:	ec43 2b1c 	vmov	d12, r2, r3
 8021912:	f002 f8df 	bl	8023ad4 <__ulp>
 8021916:	ed9d 7b08 	vldr	d7, [sp, #32]
 802191a:	eeac 7b00 	vfma.f64	d7, d12, d0
 802191e:	ec59 8b17 	vmov	r8, r9, d7
 8021922:	e7a8      	b.n	8021876 <_strtod_l+0xaa6>
 8021924:	ec53 2b18 	vmov	r2, r3, d8
 8021928:	e7eb      	b.n	8021902 <_strtod_l+0xb32>
 802192a:	eeb4 8bc9 	vcmpe.f64	d8, d9
 802192e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021932:	f57f af63 	bpl.w	80217fc <_strtod_l+0xa2c>
 8021936:	e4a1      	b.n	802127c <_strtod_l+0x4ac>
 8021938:	2300      	movs	r3, #0
 802193a:	930b      	str	r3, [sp, #44]	; 0x2c
 802193c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802193e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021940:	6013      	str	r3, [r2, #0]
 8021942:	f7ff ba8d 	b.w	8020e60 <_strtod_l+0x90>
 8021946:	2a65      	cmp	r2, #101	; 0x65
 8021948:	f43f ab89 	beq.w	802105e <_strtod_l+0x28e>
 802194c:	2a45      	cmp	r2, #69	; 0x45
 802194e:	f43f ab86 	beq.w	802105e <_strtod_l+0x28e>
 8021952:	2101      	movs	r1, #1
 8021954:	f7ff bbbe 	b.w	80210d4 <_strtod_l+0x304>
 8021958:	ffc00000 	.word	0xffc00000
 802195c:	41dfffff 	.word	0x41dfffff
 8021960:	000fffff 	.word	0x000fffff
 8021964:	7ff00000 	.word	0x7ff00000
 8021968:	7fefffff 	.word	0x7fefffff
 802196c:	3ff00000 	.word	0x3ff00000
 8021970:	7c9fffff 	.word	0x7c9fffff
 8021974:	bff00000 	.word	0xbff00000
 8021978:	7fe00000 	.word	0x7fe00000

0802197c <_strtod_r>:
 802197c:	4b01      	ldr	r3, [pc, #4]	; (8021984 <_strtod_r+0x8>)
 802197e:	f7ff ba27 	b.w	8020dd0 <_strtod_l>
 8021982:	bf00      	nop
 8021984:	240038ac 	.word	0x240038ac

08021988 <_strtol_l.isra.0>:
 8021988:	2b01      	cmp	r3, #1
 802198a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802198e:	d001      	beq.n	8021994 <_strtol_l.isra.0+0xc>
 8021990:	2b24      	cmp	r3, #36	; 0x24
 8021992:	d906      	bls.n	80219a2 <_strtol_l.isra.0+0x1a>
 8021994:	f000 ff6a 	bl	802286c <__errno>
 8021998:	2316      	movs	r3, #22
 802199a:	6003      	str	r3, [r0, #0]
 802199c:	2000      	movs	r0, #0
 802199e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80219a2:	4f3a      	ldr	r7, [pc, #232]	; (8021a8c <_strtol_l.isra.0+0x104>)
 80219a4:	468e      	mov	lr, r1
 80219a6:	4676      	mov	r6, lr
 80219a8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80219ac:	5de5      	ldrb	r5, [r4, r7]
 80219ae:	f015 0508 	ands.w	r5, r5, #8
 80219b2:	d1f8      	bne.n	80219a6 <_strtol_l.isra.0+0x1e>
 80219b4:	2c2d      	cmp	r4, #45	; 0x2d
 80219b6:	d134      	bne.n	8021a22 <_strtol_l.isra.0+0x9a>
 80219b8:	f89e 4000 	ldrb.w	r4, [lr]
 80219bc:	f04f 0801 	mov.w	r8, #1
 80219c0:	f106 0e02 	add.w	lr, r6, #2
 80219c4:	2b00      	cmp	r3, #0
 80219c6:	d05c      	beq.n	8021a82 <_strtol_l.isra.0+0xfa>
 80219c8:	2b10      	cmp	r3, #16
 80219ca:	d10c      	bne.n	80219e6 <_strtol_l.isra.0+0x5e>
 80219cc:	2c30      	cmp	r4, #48	; 0x30
 80219ce:	d10a      	bne.n	80219e6 <_strtol_l.isra.0+0x5e>
 80219d0:	f89e 4000 	ldrb.w	r4, [lr]
 80219d4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80219d8:	2c58      	cmp	r4, #88	; 0x58
 80219da:	d14d      	bne.n	8021a78 <_strtol_l.isra.0+0xf0>
 80219dc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80219e0:	2310      	movs	r3, #16
 80219e2:	f10e 0e02 	add.w	lr, lr, #2
 80219e6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80219ea:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80219ee:	2600      	movs	r6, #0
 80219f0:	fbbc f9f3 	udiv	r9, ip, r3
 80219f4:	4635      	mov	r5, r6
 80219f6:	fb03 ca19 	mls	sl, r3, r9, ip
 80219fa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80219fe:	2f09      	cmp	r7, #9
 8021a00:	d818      	bhi.n	8021a34 <_strtol_l.isra.0+0xac>
 8021a02:	463c      	mov	r4, r7
 8021a04:	42a3      	cmp	r3, r4
 8021a06:	dd24      	ble.n	8021a52 <_strtol_l.isra.0+0xca>
 8021a08:	2e00      	cmp	r6, #0
 8021a0a:	db1f      	blt.n	8021a4c <_strtol_l.isra.0+0xc4>
 8021a0c:	45a9      	cmp	r9, r5
 8021a0e:	d31d      	bcc.n	8021a4c <_strtol_l.isra.0+0xc4>
 8021a10:	d101      	bne.n	8021a16 <_strtol_l.isra.0+0x8e>
 8021a12:	45a2      	cmp	sl, r4
 8021a14:	db1a      	blt.n	8021a4c <_strtol_l.isra.0+0xc4>
 8021a16:	fb05 4503 	mla	r5, r5, r3, r4
 8021a1a:	2601      	movs	r6, #1
 8021a1c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8021a20:	e7eb      	b.n	80219fa <_strtol_l.isra.0+0x72>
 8021a22:	2c2b      	cmp	r4, #43	; 0x2b
 8021a24:	bf08      	it	eq
 8021a26:	f89e 4000 	ldrbeq.w	r4, [lr]
 8021a2a:	46a8      	mov	r8, r5
 8021a2c:	bf08      	it	eq
 8021a2e:	f106 0e02 	addeq.w	lr, r6, #2
 8021a32:	e7c7      	b.n	80219c4 <_strtol_l.isra.0+0x3c>
 8021a34:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8021a38:	2f19      	cmp	r7, #25
 8021a3a:	d801      	bhi.n	8021a40 <_strtol_l.isra.0+0xb8>
 8021a3c:	3c37      	subs	r4, #55	; 0x37
 8021a3e:	e7e1      	b.n	8021a04 <_strtol_l.isra.0+0x7c>
 8021a40:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8021a44:	2f19      	cmp	r7, #25
 8021a46:	d804      	bhi.n	8021a52 <_strtol_l.isra.0+0xca>
 8021a48:	3c57      	subs	r4, #87	; 0x57
 8021a4a:	e7db      	b.n	8021a04 <_strtol_l.isra.0+0x7c>
 8021a4c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8021a50:	e7e4      	b.n	8021a1c <_strtol_l.isra.0+0x94>
 8021a52:	2e00      	cmp	r6, #0
 8021a54:	da05      	bge.n	8021a62 <_strtol_l.isra.0+0xda>
 8021a56:	2322      	movs	r3, #34	; 0x22
 8021a58:	6003      	str	r3, [r0, #0]
 8021a5a:	4665      	mov	r5, ip
 8021a5c:	b942      	cbnz	r2, 8021a70 <_strtol_l.isra.0+0xe8>
 8021a5e:	4628      	mov	r0, r5
 8021a60:	e79d      	b.n	802199e <_strtol_l.isra.0+0x16>
 8021a62:	f1b8 0f00 	cmp.w	r8, #0
 8021a66:	d000      	beq.n	8021a6a <_strtol_l.isra.0+0xe2>
 8021a68:	426d      	negs	r5, r5
 8021a6a:	2a00      	cmp	r2, #0
 8021a6c:	d0f7      	beq.n	8021a5e <_strtol_l.isra.0+0xd6>
 8021a6e:	b10e      	cbz	r6, 8021a74 <_strtol_l.isra.0+0xec>
 8021a70:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8021a74:	6011      	str	r1, [r2, #0]
 8021a76:	e7f2      	b.n	8021a5e <_strtol_l.isra.0+0xd6>
 8021a78:	2430      	movs	r4, #48	; 0x30
 8021a7a:	2b00      	cmp	r3, #0
 8021a7c:	d1b3      	bne.n	80219e6 <_strtol_l.isra.0+0x5e>
 8021a7e:	2308      	movs	r3, #8
 8021a80:	e7b1      	b.n	80219e6 <_strtol_l.isra.0+0x5e>
 8021a82:	2c30      	cmp	r4, #48	; 0x30
 8021a84:	d0a4      	beq.n	80219d0 <_strtol_l.isra.0+0x48>
 8021a86:	230a      	movs	r3, #10
 8021a88:	e7ad      	b.n	80219e6 <_strtol_l.isra.0+0x5e>
 8021a8a:	bf00      	nop
 8021a8c:	0802924d 	.word	0x0802924d

08021a90 <_strtol_r>:
 8021a90:	f7ff bf7a 	b.w	8021988 <_strtol_l.isra.0>

08021a94 <__swbuf_r>:
 8021a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021a96:	460e      	mov	r6, r1
 8021a98:	4614      	mov	r4, r2
 8021a9a:	4605      	mov	r5, r0
 8021a9c:	b118      	cbz	r0, 8021aa6 <__swbuf_r+0x12>
 8021a9e:	6983      	ldr	r3, [r0, #24]
 8021aa0:	b90b      	cbnz	r3, 8021aa6 <__swbuf_r+0x12>
 8021aa2:	f001 f803 	bl	8022aac <__sinit>
 8021aa6:	4b21      	ldr	r3, [pc, #132]	; (8021b2c <__swbuf_r+0x98>)
 8021aa8:	429c      	cmp	r4, r3
 8021aaa:	d12b      	bne.n	8021b04 <__swbuf_r+0x70>
 8021aac:	686c      	ldr	r4, [r5, #4]
 8021aae:	69a3      	ldr	r3, [r4, #24]
 8021ab0:	60a3      	str	r3, [r4, #8]
 8021ab2:	89a3      	ldrh	r3, [r4, #12]
 8021ab4:	071a      	lsls	r2, r3, #28
 8021ab6:	d52f      	bpl.n	8021b18 <__swbuf_r+0x84>
 8021ab8:	6923      	ldr	r3, [r4, #16]
 8021aba:	b36b      	cbz	r3, 8021b18 <__swbuf_r+0x84>
 8021abc:	6923      	ldr	r3, [r4, #16]
 8021abe:	6820      	ldr	r0, [r4, #0]
 8021ac0:	1ac0      	subs	r0, r0, r3
 8021ac2:	6963      	ldr	r3, [r4, #20]
 8021ac4:	b2f6      	uxtb	r6, r6
 8021ac6:	4283      	cmp	r3, r0
 8021ac8:	4637      	mov	r7, r6
 8021aca:	dc04      	bgt.n	8021ad6 <__swbuf_r+0x42>
 8021acc:	4621      	mov	r1, r4
 8021ace:	4628      	mov	r0, r5
 8021ad0:	f000 ff58 	bl	8022984 <_fflush_r>
 8021ad4:	bb30      	cbnz	r0, 8021b24 <__swbuf_r+0x90>
 8021ad6:	68a3      	ldr	r3, [r4, #8]
 8021ad8:	3b01      	subs	r3, #1
 8021ada:	60a3      	str	r3, [r4, #8]
 8021adc:	6823      	ldr	r3, [r4, #0]
 8021ade:	1c5a      	adds	r2, r3, #1
 8021ae0:	6022      	str	r2, [r4, #0]
 8021ae2:	701e      	strb	r6, [r3, #0]
 8021ae4:	6963      	ldr	r3, [r4, #20]
 8021ae6:	3001      	adds	r0, #1
 8021ae8:	4283      	cmp	r3, r0
 8021aea:	d004      	beq.n	8021af6 <__swbuf_r+0x62>
 8021aec:	89a3      	ldrh	r3, [r4, #12]
 8021aee:	07db      	lsls	r3, r3, #31
 8021af0:	d506      	bpl.n	8021b00 <__swbuf_r+0x6c>
 8021af2:	2e0a      	cmp	r6, #10
 8021af4:	d104      	bne.n	8021b00 <__swbuf_r+0x6c>
 8021af6:	4621      	mov	r1, r4
 8021af8:	4628      	mov	r0, r5
 8021afa:	f000 ff43 	bl	8022984 <_fflush_r>
 8021afe:	b988      	cbnz	r0, 8021b24 <__swbuf_r+0x90>
 8021b00:	4638      	mov	r0, r7
 8021b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021b04:	4b0a      	ldr	r3, [pc, #40]	; (8021b30 <__swbuf_r+0x9c>)
 8021b06:	429c      	cmp	r4, r3
 8021b08:	d101      	bne.n	8021b0e <__swbuf_r+0x7a>
 8021b0a:	68ac      	ldr	r4, [r5, #8]
 8021b0c:	e7cf      	b.n	8021aae <__swbuf_r+0x1a>
 8021b0e:	4b09      	ldr	r3, [pc, #36]	; (8021b34 <__swbuf_r+0xa0>)
 8021b10:	429c      	cmp	r4, r3
 8021b12:	bf08      	it	eq
 8021b14:	68ec      	ldreq	r4, [r5, #12]
 8021b16:	e7ca      	b.n	8021aae <__swbuf_r+0x1a>
 8021b18:	4621      	mov	r1, r4
 8021b1a:	4628      	mov	r0, r5
 8021b1c:	f000 f80c 	bl	8021b38 <__swsetup_r>
 8021b20:	2800      	cmp	r0, #0
 8021b22:	d0cb      	beq.n	8021abc <__swbuf_r+0x28>
 8021b24:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8021b28:	e7ea      	b.n	8021b00 <__swbuf_r+0x6c>
 8021b2a:	bf00      	nop
 8021b2c:	08029534 	.word	0x08029534
 8021b30:	08029554 	.word	0x08029554
 8021b34:	08029514 	.word	0x08029514

08021b38 <__swsetup_r>:
 8021b38:	4b32      	ldr	r3, [pc, #200]	; (8021c04 <__swsetup_r+0xcc>)
 8021b3a:	b570      	push	{r4, r5, r6, lr}
 8021b3c:	681d      	ldr	r5, [r3, #0]
 8021b3e:	4606      	mov	r6, r0
 8021b40:	460c      	mov	r4, r1
 8021b42:	b125      	cbz	r5, 8021b4e <__swsetup_r+0x16>
 8021b44:	69ab      	ldr	r3, [r5, #24]
 8021b46:	b913      	cbnz	r3, 8021b4e <__swsetup_r+0x16>
 8021b48:	4628      	mov	r0, r5
 8021b4a:	f000 ffaf 	bl	8022aac <__sinit>
 8021b4e:	4b2e      	ldr	r3, [pc, #184]	; (8021c08 <__swsetup_r+0xd0>)
 8021b50:	429c      	cmp	r4, r3
 8021b52:	d10f      	bne.n	8021b74 <__swsetup_r+0x3c>
 8021b54:	686c      	ldr	r4, [r5, #4]
 8021b56:	89a3      	ldrh	r3, [r4, #12]
 8021b58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021b5c:	0719      	lsls	r1, r3, #28
 8021b5e:	d42c      	bmi.n	8021bba <__swsetup_r+0x82>
 8021b60:	06dd      	lsls	r5, r3, #27
 8021b62:	d411      	bmi.n	8021b88 <__swsetup_r+0x50>
 8021b64:	2309      	movs	r3, #9
 8021b66:	6033      	str	r3, [r6, #0]
 8021b68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8021b6c:	81a3      	strh	r3, [r4, #12]
 8021b6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021b72:	e03e      	b.n	8021bf2 <__swsetup_r+0xba>
 8021b74:	4b25      	ldr	r3, [pc, #148]	; (8021c0c <__swsetup_r+0xd4>)
 8021b76:	429c      	cmp	r4, r3
 8021b78:	d101      	bne.n	8021b7e <__swsetup_r+0x46>
 8021b7a:	68ac      	ldr	r4, [r5, #8]
 8021b7c:	e7eb      	b.n	8021b56 <__swsetup_r+0x1e>
 8021b7e:	4b24      	ldr	r3, [pc, #144]	; (8021c10 <__swsetup_r+0xd8>)
 8021b80:	429c      	cmp	r4, r3
 8021b82:	bf08      	it	eq
 8021b84:	68ec      	ldreq	r4, [r5, #12]
 8021b86:	e7e6      	b.n	8021b56 <__swsetup_r+0x1e>
 8021b88:	0758      	lsls	r0, r3, #29
 8021b8a:	d512      	bpl.n	8021bb2 <__swsetup_r+0x7a>
 8021b8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021b8e:	b141      	cbz	r1, 8021ba2 <__swsetup_r+0x6a>
 8021b90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021b94:	4299      	cmp	r1, r3
 8021b96:	d002      	beq.n	8021b9e <__swsetup_r+0x66>
 8021b98:	4630      	mov	r0, r6
 8021b9a:	f7fe f8f5 	bl	801fd88 <_free_r>
 8021b9e:	2300      	movs	r3, #0
 8021ba0:	6363      	str	r3, [r4, #52]	; 0x34
 8021ba2:	89a3      	ldrh	r3, [r4, #12]
 8021ba4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8021ba8:	81a3      	strh	r3, [r4, #12]
 8021baa:	2300      	movs	r3, #0
 8021bac:	6063      	str	r3, [r4, #4]
 8021bae:	6923      	ldr	r3, [r4, #16]
 8021bb0:	6023      	str	r3, [r4, #0]
 8021bb2:	89a3      	ldrh	r3, [r4, #12]
 8021bb4:	f043 0308 	orr.w	r3, r3, #8
 8021bb8:	81a3      	strh	r3, [r4, #12]
 8021bba:	6923      	ldr	r3, [r4, #16]
 8021bbc:	b94b      	cbnz	r3, 8021bd2 <__swsetup_r+0x9a>
 8021bbe:	89a3      	ldrh	r3, [r4, #12]
 8021bc0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8021bc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021bc8:	d003      	beq.n	8021bd2 <__swsetup_r+0x9a>
 8021bca:	4621      	mov	r1, r4
 8021bcc:	4630      	mov	r0, r6
 8021bce:	f001 fbb7 	bl	8023340 <__smakebuf_r>
 8021bd2:	89a0      	ldrh	r0, [r4, #12]
 8021bd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021bd8:	f010 0301 	ands.w	r3, r0, #1
 8021bdc:	d00a      	beq.n	8021bf4 <__swsetup_r+0xbc>
 8021bde:	2300      	movs	r3, #0
 8021be0:	60a3      	str	r3, [r4, #8]
 8021be2:	6963      	ldr	r3, [r4, #20]
 8021be4:	425b      	negs	r3, r3
 8021be6:	61a3      	str	r3, [r4, #24]
 8021be8:	6923      	ldr	r3, [r4, #16]
 8021bea:	b943      	cbnz	r3, 8021bfe <__swsetup_r+0xc6>
 8021bec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8021bf0:	d1ba      	bne.n	8021b68 <__swsetup_r+0x30>
 8021bf2:	bd70      	pop	{r4, r5, r6, pc}
 8021bf4:	0781      	lsls	r1, r0, #30
 8021bf6:	bf58      	it	pl
 8021bf8:	6963      	ldrpl	r3, [r4, #20]
 8021bfa:	60a3      	str	r3, [r4, #8]
 8021bfc:	e7f4      	b.n	8021be8 <__swsetup_r+0xb0>
 8021bfe:	2000      	movs	r0, #0
 8021c00:	e7f7      	b.n	8021bf2 <__swsetup_r+0xba>
 8021c02:	bf00      	nop
 8021c04:	24003844 	.word	0x24003844
 8021c08:	08029534 	.word	0x08029534
 8021c0c:	08029554 	.word	0x08029554
 8021c10:	08029514 	.word	0x08029514

08021c14 <__assert_func>:
 8021c14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021c16:	4614      	mov	r4, r2
 8021c18:	461a      	mov	r2, r3
 8021c1a:	4b09      	ldr	r3, [pc, #36]	; (8021c40 <__assert_func+0x2c>)
 8021c1c:	681b      	ldr	r3, [r3, #0]
 8021c1e:	4605      	mov	r5, r0
 8021c20:	68d8      	ldr	r0, [r3, #12]
 8021c22:	b14c      	cbz	r4, 8021c38 <__assert_func+0x24>
 8021c24:	4b07      	ldr	r3, [pc, #28]	; (8021c44 <__assert_func+0x30>)
 8021c26:	9100      	str	r1, [sp, #0]
 8021c28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021c2c:	4906      	ldr	r1, [pc, #24]	; (8021c48 <__assert_func+0x34>)
 8021c2e:	462b      	mov	r3, r5
 8021c30:	f000 ffba 	bl	8022ba8 <fiprintf>
 8021c34:	f002 fbce 	bl	80243d4 <abort>
 8021c38:	4b04      	ldr	r3, [pc, #16]	; (8021c4c <__assert_func+0x38>)
 8021c3a:	461c      	mov	r4, r3
 8021c3c:	e7f3      	b.n	8021c26 <__assert_func+0x12>
 8021c3e:	bf00      	nop
 8021c40:	24003844 	.word	0x24003844
 8021c44:	08029458 	.word	0x08029458
 8021c48:	08029465 	.word	0x08029465
 8021c4c:	08029493 	.word	0x08029493

08021c50 <quorem>:
 8021c50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c54:	6903      	ldr	r3, [r0, #16]
 8021c56:	690c      	ldr	r4, [r1, #16]
 8021c58:	42a3      	cmp	r3, r4
 8021c5a:	4607      	mov	r7, r0
 8021c5c:	f2c0 8081 	blt.w	8021d62 <quorem+0x112>
 8021c60:	3c01      	subs	r4, #1
 8021c62:	f101 0814 	add.w	r8, r1, #20
 8021c66:	f100 0514 	add.w	r5, r0, #20
 8021c6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8021c6e:	9301      	str	r3, [sp, #4]
 8021c70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8021c74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8021c78:	3301      	adds	r3, #1
 8021c7a:	429a      	cmp	r2, r3
 8021c7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8021c80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8021c84:	fbb2 f6f3 	udiv	r6, r2, r3
 8021c88:	d331      	bcc.n	8021cee <quorem+0x9e>
 8021c8a:	f04f 0e00 	mov.w	lr, #0
 8021c8e:	4640      	mov	r0, r8
 8021c90:	46ac      	mov	ip, r5
 8021c92:	46f2      	mov	sl, lr
 8021c94:	f850 2b04 	ldr.w	r2, [r0], #4
 8021c98:	b293      	uxth	r3, r2
 8021c9a:	fb06 e303 	mla	r3, r6, r3, lr
 8021c9e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8021ca2:	b29b      	uxth	r3, r3
 8021ca4:	ebaa 0303 	sub.w	r3, sl, r3
 8021ca8:	0c12      	lsrs	r2, r2, #16
 8021caa:	f8dc a000 	ldr.w	sl, [ip]
 8021cae:	fb06 e202 	mla	r2, r6, r2, lr
 8021cb2:	fa13 f38a 	uxtah	r3, r3, sl
 8021cb6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8021cba:	fa1f fa82 	uxth.w	sl, r2
 8021cbe:	f8dc 2000 	ldr.w	r2, [ip]
 8021cc2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8021cc6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8021cca:	b29b      	uxth	r3, r3
 8021ccc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021cd0:	4581      	cmp	r9, r0
 8021cd2:	f84c 3b04 	str.w	r3, [ip], #4
 8021cd6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8021cda:	d2db      	bcs.n	8021c94 <quorem+0x44>
 8021cdc:	f855 300b 	ldr.w	r3, [r5, fp]
 8021ce0:	b92b      	cbnz	r3, 8021cee <quorem+0x9e>
 8021ce2:	9b01      	ldr	r3, [sp, #4]
 8021ce4:	3b04      	subs	r3, #4
 8021ce6:	429d      	cmp	r5, r3
 8021ce8:	461a      	mov	r2, r3
 8021cea:	d32e      	bcc.n	8021d4a <quorem+0xfa>
 8021cec:	613c      	str	r4, [r7, #16]
 8021cee:	4638      	mov	r0, r7
 8021cf0:	f001 fe4c 	bl	802398c <__mcmp>
 8021cf4:	2800      	cmp	r0, #0
 8021cf6:	db24      	blt.n	8021d42 <quorem+0xf2>
 8021cf8:	3601      	adds	r6, #1
 8021cfa:	4628      	mov	r0, r5
 8021cfc:	f04f 0c00 	mov.w	ip, #0
 8021d00:	f858 2b04 	ldr.w	r2, [r8], #4
 8021d04:	f8d0 e000 	ldr.w	lr, [r0]
 8021d08:	b293      	uxth	r3, r2
 8021d0a:	ebac 0303 	sub.w	r3, ip, r3
 8021d0e:	0c12      	lsrs	r2, r2, #16
 8021d10:	fa13 f38e 	uxtah	r3, r3, lr
 8021d14:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8021d18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8021d1c:	b29b      	uxth	r3, r3
 8021d1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021d22:	45c1      	cmp	r9, r8
 8021d24:	f840 3b04 	str.w	r3, [r0], #4
 8021d28:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8021d2c:	d2e8      	bcs.n	8021d00 <quorem+0xb0>
 8021d2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8021d32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8021d36:	b922      	cbnz	r2, 8021d42 <quorem+0xf2>
 8021d38:	3b04      	subs	r3, #4
 8021d3a:	429d      	cmp	r5, r3
 8021d3c:	461a      	mov	r2, r3
 8021d3e:	d30a      	bcc.n	8021d56 <quorem+0x106>
 8021d40:	613c      	str	r4, [r7, #16]
 8021d42:	4630      	mov	r0, r6
 8021d44:	b003      	add	sp, #12
 8021d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d4a:	6812      	ldr	r2, [r2, #0]
 8021d4c:	3b04      	subs	r3, #4
 8021d4e:	2a00      	cmp	r2, #0
 8021d50:	d1cc      	bne.n	8021cec <quorem+0x9c>
 8021d52:	3c01      	subs	r4, #1
 8021d54:	e7c7      	b.n	8021ce6 <quorem+0x96>
 8021d56:	6812      	ldr	r2, [r2, #0]
 8021d58:	3b04      	subs	r3, #4
 8021d5a:	2a00      	cmp	r2, #0
 8021d5c:	d1f0      	bne.n	8021d40 <quorem+0xf0>
 8021d5e:	3c01      	subs	r4, #1
 8021d60:	e7eb      	b.n	8021d3a <quorem+0xea>
 8021d62:	2000      	movs	r0, #0
 8021d64:	e7ee      	b.n	8021d44 <quorem+0xf4>
	...

08021d68 <_dtoa_r>:
 8021d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d6c:	ec59 8b10 	vmov	r8, r9, d0
 8021d70:	b095      	sub	sp, #84	; 0x54
 8021d72:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8021d74:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8021d76:	9107      	str	r1, [sp, #28]
 8021d78:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8021d7c:	4606      	mov	r6, r0
 8021d7e:	9209      	str	r2, [sp, #36]	; 0x24
 8021d80:	9310      	str	r3, [sp, #64]	; 0x40
 8021d82:	b975      	cbnz	r5, 8021da2 <_dtoa_r+0x3a>
 8021d84:	2010      	movs	r0, #16
 8021d86:	f7fd ffb9 	bl	801fcfc <malloc>
 8021d8a:	4602      	mov	r2, r0
 8021d8c:	6270      	str	r0, [r6, #36]	; 0x24
 8021d8e:	b920      	cbnz	r0, 8021d9a <_dtoa_r+0x32>
 8021d90:	4bab      	ldr	r3, [pc, #684]	; (8022040 <_dtoa_r+0x2d8>)
 8021d92:	21ea      	movs	r1, #234	; 0xea
 8021d94:	48ab      	ldr	r0, [pc, #684]	; (8022044 <_dtoa_r+0x2dc>)
 8021d96:	f7ff ff3d 	bl	8021c14 <__assert_func>
 8021d9a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8021d9e:	6005      	str	r5, [r0, #0]
 8021da0:	60c5      	str	r5, [r0, #12]
 8021da2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8021da4:	6819      	ldr	r1, [r3, #0]
 8021da6:	b151      	cbz	r1, 8021dbe <_dtoa_r+0x56>
 8021da8:	685a      	ldr	r2, [r3, #4]
 8021daa:	604a      	str	r2, [r1, #4]
 8021dac:	2301      	movs	r3, #1
 8021dae:	4093      	lsls	r3, r2
 8021db0:	608b      	str	r3, [r1, #8]
 8021db2:	4630      	mov	r0, r6
 8021db4:	f001 fb62 	bl	802347c <_Bfree>
 8021db8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8021dba:	2200      	movs	r2, #0
 8021dbc:	601a      	str	r2, [r3, #0]
 8021dbe:	f1b9 0300 	subs.w	r3, r9, #0
 8021dc2:	bfbb      	ittet	lt
 8021dc4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8021dc8:	9303      	strlt	r3, [sp, #12]
 8021dca:	2300      	movge	r3, #0
 8021dcc:	2201      	movlt	r2, #1
 8021dce:	bfac      	ite	ge
 8021dd0:	6023      	strge	r3, [r4, #0]
 8021dd2:	6022      	strlt	r2, [r4, #0]
 8021dd4:	4b9c      	ldr	r3, [pc, #624]	; (8022048 <_dtoa_r+0x2e0>)
 8021dd6:	9c03      	ldr	r4, [sp, #12]
 8021dd8:	43a3      	bics	r3, r4
 8021dda:	d11a      	bne.n	8021e12 <_dtoa_r+0xaa>
 8021ddc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021dde:	f242 730f 	movw	r3, #9999	; 0x270f
 8021de2:	6013      	str	r3, [r2, #0]
 8021de4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8021de8:	ea53 0308 	orrs.w	r3, r3, r8
 8021dec:	f000 8512 	beq.w	8022814 <_dtoa_r+0xaac>
 8021df0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8021df2:	b953      	cbnz	r3, 8021e0a <_dtoa_r+0xa2>
 8021df4:	4b95      	ldr	r3, [pc, #596]	; (802204c <_dtoa_r+0x2e4>)
 8021df6:	e01f      	b.n	8021e38 <_dtoa_r+0xd0>
 8021df8:	4b95      	ldr	r3, [pc, #596]	; (8022050 <_dtoa_r+0x2e8>)
 8021dfa:	9300      	str	r3, [sp, #0]
 8021dfc:	3308      	adds	r3, #8
 8021dfe:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8021e00:	6013      	str	r3, [r2, #0]
 8021e02:	9800      	ldr	r0, [sp, #0]
 8021e04:	b015      	add	sp, #84	; 0x54
 8021e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e0a:	4b90      	ldr	r3, [pc, #576]	; (802204c <_dtoa_r+0x2e4>)
 8021e0c:	9300      	str	r3, [sp, #0]
 8021e0e:	3303      	adds	r3, #3
 8021e10:	e7f5      	b.n	8021dfe <_dtoa_r+0x96>
 8021e12:	ed9d 7b02 	vldr	d7, [sp, #8]
 8021e16:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8021e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021e1e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8021e22:	d10b      	bne.n	8021e3c <_dtoa_r+0xd4>
 8021e24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021e26:	2301      	movs	r3, #1
 8021e28:	6013      	str	r3, [r2, #0]
 8021e2a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8021e2c:	2b00      	cmp	r3, #0
 8021e2e:	f000 84ee 	beq.w	802280e <_dtoa_r+0xaa6>
 8021e32:	4888      	ldr	r0, [pc, #544]	; (8022054 <_dtoa_r+0x2ec>)
 8021e34:	6018      	str	r0, [r3, #0]
 8021e36:	1e43      	subs	r3, r0, #1
 8021e38:	9300      	str	r3, [sp, #0]
 8021e3a:	e7e2      	b.n	8021e02 <_dtoa_r+0x9a>
 8021e3c:	a913      	add	r1, sp, #76	; 0x4c
 8021e3e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8021e42:	aa12      	add	r2, sp, #72	; 0x48
 8021e44:	4630      	mov	r0, r6
 8021e46:	f001 fec1 	bl	8023bcc <__d2b>
 8021e4a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8021e4e:	4605      	mov	r5, r0
 8021e50:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021e52:	2900      	cmp	r1, #0
 8021e54:	d047      	beq.n	8021ee6 <_dtoa_r+0x17e>
 8021e56:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021e58:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8021e5c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8021e60:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8021e64:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8021e68:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8021e6c:	2400      	movs	r4, #0
 8021e6e:	ec43 2b16 	vmov	d6, r2, r3
 8021e72:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8021e76:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8022028 <_dtoa_r+0x2c0>
 8021e7a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8021e7e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8022030 <_dtoa_r+0x2c8>
 8021e82:	eea7 6b05 	vfma.f64	d6, d7, d5
 8021e86:	eeb0 7b46 	vmov.f64	d7, d6
 8021e8a:	ee06 1a90 	vmov	s13, r1
 8021e8e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8021e92:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8022038 <_dtoa_r+0x2d0>
 8021e96:	eea5 7b06 	vfma.f64	d7, d5, d6
 8021e9a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8021e9e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8021ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021ea6:	ee16 ba90 	vmov	fp, s13
 8021eaa:	9411      	str	r4, [sp, #68]	; 0x44
 8021eac:	d508      	bpl.n	8021ec0 <_dtoa_r+0x158>
 8021eae:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8021eb2:	eeb4 6b47 	vcmp.f64	d6, d7
 8021eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021eba:	bf18      	it	ne
 8021ebc:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8021ec0:	f1bb 0f16 	cmp.w	fp, #22
 8021ec4:	d832      	bhi.n	8021f2c <_dtoa_r+0x1c4>
 8021ec6:	4b64      	ldr	r3, [pc, #400]	; (8022058 <_dtoa_r+0x2f0>)
 8021ec8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8021ecc:	ed93 7b00 	vldr	d7, [r3]
 8021ed0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8021ed4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8021ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021edc:	d501      	bpl.n	8021ee2 <_dtoa_r+0x17a>
 8021ede:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8021ee2:	2300      	movs	r3, #0
 8021ee4:	e023      	b.n	8021f2e <_dtoa_r+0x1c6>
 8021ee6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8021ee8:	4401      	add	r1, r0
 8021eea:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8021eee:	2b20      	cmp	r3, #32
 8021ef0:	bfc3      	ittte	gt
 8021ef2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8021ef6:	fa04 f303 	lslgt.w	r3, r4, r3
 8021efa:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8021efe:	f1c3 0320 	rsble	r3, r3, #32
 8021f02:	bfc6      	itte	gt
 8021f04:	fa28 f804 	lsrgt.w	r8, r8, r4
 8021f08:	ea43 0308 	orrgt.w	r3, r3, r8
 8021f0c:	fa08 f303 	lslle.w	r3, r8, r3
 8021f10:	ee07 3a90 	vmov	s15, r3
 8021f14:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8021f18:	3901      	subs	r1, #1
 8021f1a:	ed8d 7b00 	vstr	d7, [sp]
 8021f1e:	9c01      	ldr	r4, [sp, #4]
 8021f20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021f24:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8021f28:	2401      	movs	r4, #1
 8021f2a:	e7a0      	b.n	8021e6e <_dtoa_r+0x106>
 8021f2c:	2301      	movs	r3, #1
 8021f2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8021f30:	1a43      	subs	r3, r0, r1
 8021f32:	1e5a      	subs	r2, r3, #1
 8021f34:	bf45      	ittet	mi
 8021f36:	f1c3 0301 	rsbmi	r3, r3, #1
 8021f3a:	9305      	strmi	r3, [sp, #20]
 8021f3c:	2300      	movpl	r3, #0
 8021f3e:	2300      	movmi	r3, #0
 8021f40:	9206      	str	r2, [sp, #24]
 8021f42:	bf54      	ite	pl
 8021f44:	9305      	strpl	r3, [sp, #20]
 8021f46:	9306      	strmi	r3, [sp, #24]
 8021f48:	f1bb 0f00 	cmp.w	fp, #0
 8021f4c:	db18      	blt.n	8021f80 <_dtoa_r+0x218>
 8021f4e:	9b06      	ldr	r3, [sp, #24]
 8021f50:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8021f54:	445b      	add	r3, fp
 8021f56:	9306      	str	r3, [sp, #24]
 8021f58:	2300      	movs	r3, #0
 8021f5a:	9a07      	ldr	r2, [sp, #28]
 8021f5c:	2a09      	cmp	r2, #9
 8021f5e:	d849      	bhi.n	8021ff4 <_dtoa_r+0x28c>
 8021f60:	2a05      	cmp	r2, #5
 8021f62:	bfc4      	itt	gt
 8021f64:	3a04      	subgt	r2, #4
 8021f66:	9207      	strgt	r2, [sp, #28]
 8021f68:	9a07      	ldr	r2, [sp, #28]
 8021f6a:	f1a2 0202 	sub.w	r2, r2, #2
 8021f6e:	bfcc      	ite	gt
 8021f70:	2400      	movgt	r4, #0
 8021f72:	2401      	movle	r4, #1
 8021f74:	2a03      	cmp	r2, #3
 8021f76:	d848      	bhi.n	802200a <_dtoa_r+0x2a2>
 8021f78:	e8df f002 	tbb	[pc, r2]
 8021f7c:	3a2c2e0b 	.word	0x3a2c2e0b
 8021f80:	9b05      	ldr	r3, [sp, #20]
 8021f82:	2200      	movs	r2, #0
 8021f84:	eba3 030b 	sub.w	r3, r3, fp
 8021f88:	9305      	str	r3, [sp, #20]
 8021f8a:	920e      	str	r2, [sp, #56]	; 0x38
 8021f8c:	f1cb 0300 	rsb	r3, fp, #0
 8021f90:	e7e3      	b.n	8021f5a <_dtoa_r+0x1f2>
 8021f92:	2200      	movs	r2, #0
 8021f94:	9208      	str	r2, [sp, #32]
 8021f96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021f98:	2a00      	cmp	r2, #0
 8021f9a:	dc39      	bgt.n	8022010 <_dtoa_r+0x2a8>
 8021f9c:	f04f 0a01 	mov.w	sl, #1
 8021fa0:	46d1      	mov	r9, sl
 8021fa2:	4652      	mov	r2, sl
 8021fa4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8021fa8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8021faa:	2100      	movs	r1, #0
 8021fac:	6079      	str	r1, [r7, #4]
 8021fae:	2004      	movs	r0, #4
 8021fb0:	f100 0c14 	add.w	ip, r0, #20
 8021fb4:	4594      	cmp	ip, r2
 8021fb6:	6879      	ldr	r1, [r7, #4]
 8021fb8:	d92f      	bls.n	802201a <_dtoa_r+0x2b2>
 8021fba:	4630      	mov	r0, r6
 8021fbc:	930c      	str	r3, [sp, #48]	; 0x30
 8021fbe:	f001 fa1d 	bl	80233fc <_Balloc>
 8021fc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021fc4:	9000      	str	r0, [sp, #0]
 8021fc6:	4602      	mov	r2, r0
 8021fc8:	2800      	cmp	r0, #0
 8021fca:	d149      	bne.n	8022060 <_dtoa_r+0x2f8>
 8021fcc:	4b23      	ldr	r3, [pc, #140]	; (802205c <_dtoa_r+0x2f4>)
 8021fce:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8021fd2:	e6df      	b.n	8021d94 <_dtoa_r+0x2c>
 8021fd4:	2201      	movs	r2, #1
 8021fd6:	e7dd      	b.n	8021f94 <_dtoa_r+0x22c>
 8021fd8:	2200      	movs	r2, #0
 8021fda:	9208      	str	r2, [sp, #32]
 8021fdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021fde:	eb0b 0a02 	add.w	sl, fp, r2
 8021fe2:	f10a 0901 	add.w	r9, sl, #1
 8021fe6:	464a      	mov	r2, r9
 8021fe8:	2a01      	cmp	r2, #1
 8021fea:	bfb8      	it	lt
 8021fec:	2201      	movlt	r2, #1
 8021fee:	e7db      	b.n	8021fa8 <_dtoa_r+0x240>
 8021ff0:	2201      	movs	r2, #1
 8021ff2:	e7f2      	b.n	8021fda <_dtoa_r+0x272>
 8021ff4:	2401      	movs	r4, #1
 8021ff6:	2200      	movs	r2, #0
 8021ff8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8021ffc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8022000:	2100      	movs	r1, #0
 8022002:	46d1      	mov	r9, sl
 8022004:	2212      	movs	r2, #18
 8022006:	9109      	str	r1, [sp, #36]	; 0x24
 8022008:	e7ce      	b.n	8021fa8 <_dtoa_r+0x240>
 802200a:	2201      	movs	r2, #1
 802200c:	9208      	str	r2, [sp, #32]
 802200e:	e7f5      	b.n	8021ffc <_dtoa_r+0x294>
 8022010:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8022014:	46d1      	mov	r9, sl
 8022016:	4652      	mov	r2, sl
 8022018:	e7c6      	b.n	8021fa8 <_dtoa_r+0x240>
 802201a:	3101      	adds	r1, #1
 802201c:	6079      	str	r1, [r7, #4]
 802201e:	0040      	lsls	r0, r0, #1
 8022020:	e7c6      	b.n	8021fb0 <_dtoa_r+0x248>
 8022022:	bf00      	nop
 8022024:	f3af 8000 	nop.w
 8022028:	636f4361 	.word	0x636f4361
 802202c:	3fd287a7 	.word	0x3fd287a7
 8022030:	8b60c8b3 	.word	0x8b60c8b3
 8022034:	3fc68a28 	.word	0x3fc68a28
 8022038:	509f79fb 	.word	0x509f79fb
 802203c:	3fd34413 	.word	0x3fd34413
 8022040:	0802938d 	.word	0x0802938d
 8022044:	080294a1 	.word	0x080294a1
 8022048:	7ff00000 	.word	0x7ff00000
 802204c:	0802949d 	.word	0x0802949d
 8022050:	08029494 	.word	0x08029494
 8022054:	08029365 	.word	0x08029365
 8022058:	08029680 	.word	0x08029680
 802205c:	08029500 	.word	0x08029500
 8022060:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8022062:	9900      	ldr	r1, [sp, #0]
 8022064:	6011      	str	r1, [r2, #0]
 8022066:	f1b9 0f0e 	cmp.w	r9, #14
 802206a:	d872      	bhi.n	8022152 <_dtoa_r+0x3ea>
 802206c:	2c00      	cmp	r4, #0
 802206e:	d070      	beq.n	8022152 <_dtoa_r+0x3ea>
 8022070:	f1bb 0f00 	cmp.w	fp, #0
 8022074:	f340 80a6 	ble.w	80221c4 <_dtoa_r+0x45c>
 8022078:	49ca      	ldr	r1, [pc, #808]	; (80223a4 <_dtoa_r+0x63c>)
 802207a:	f00b 020f 	and.w	r2, fp, #15
 802207e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8022082:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8022086:	ed92 7b00 	vldr	d7, [r2]
 802208a:	ea4f 112b 	mov.w	r1, fp, asr #4
 802208e:	f000 808d 	beq.w	80221ac <_dtoa_r+0x444>
 8022092:	4ac5      	ldr	r2, [pc, #788]	; (80223a8 <_dtoa_r+0x640>)
 8022094:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8022098:	ed92 6b08 	vldr	d6, [r2, #32]
 802209c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80220a0:	ed8d 6b02 	vstr	d6, [sp, #8]
 80220a4:	f001 010f 	and.w	r1, r1, #15
 80220a8:	2203      	movs	r2, #3
 80220aa:	48bf      	ldr	r0, [pc, #764]	; (80223a8 <_dtoa_r+0x640>)
 80220ac:	2900      	cmp	r1, #0
 80220ae:	d17f      	bne.n	80221b0 <_dtoa_r+0x448>
 80220b0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80220b4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80220b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80220bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80220be:	2900      	cmp	r1, #0
 80220c0:	f000 80b2 	beq.w	8022228 <_dtoa_r+0x4c0>
 80220c4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80220c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80220cc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80220d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80220d4:	f140 80a8 	bpl.w	8022228 <_dtoa_r+0x4c0>
 80220d8:	f1b9 0f00 	cmp.w	r9, #0
 80220dc:	f000 80a4 	beq.w	8022228 <_dtoa_r+0x4c0>
 80220e0:	f1ba 0f00 	cmp.w	sl, #0
 80220e4:	dd31      	ble.n	802214a <_dtoa_r+0x3e2>
 80220e6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80220ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80220ee:	ed8d 7b02 	vstr	d7, [sp, #8]
 80220f2:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80220f6:	3201      	adds	r2, #1
 80220f8:	4650      	mov	r0, sl
 80220fa:	ed9d 6b02 	vldr	d6, [sp, #8]
 80220fe:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8022102:	ee07 2a90 	vmov	s15, r2
 8022106:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 802210a:	eea7 5b06 	vfma.f64	d5, d7, d6
 802210e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8022112:	9c03      	ldr	r4, [sp, #12]
 8022114:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8022118:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 802211c:	2800      	cmp	r0, #0
 802211e:	f040 8086 	bne.w	802222e <_dtoa_r+0x4c6>
 8022122:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8022126:	ee36 6b47 	vsub.f64	d6, d6, d7
 802212a:	ec42 1b17 	vmov	d7, r1, r2
 802212e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8022132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022136:	f300 8272 	bgt.w	802261e <_dtoa_r+0x8b6>
 802213a:	eeb1 7b47 	vneg.f64	d7, d7
 802213e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8022142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022146:	f100 8267 	bmi.w	8022618 <_dtoa_r+0x8b0>
 802214a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 802214e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8022152:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022154:	2a00      	cmp	r2, #0
 8022156:	f2c0 8129 	blt.w	80223ac <_dtoa_r+0x644>
 802215a:	f1bb 0f0e 	cmp.w	fp, #14
 802215e:	f300 8125 	bgt.w	80223ac <_dtoa_r+0x644>
 8022162:	4b90      	ldr	r3, [pc, #576]	; (80223a4 <_dtoa_r+0x63c>)
 8022164:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8022168:	ed93 6b00 	vldr	d6, [r3]
 802216c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802216e:	2b00      	cmp	r3, #0
 8022170:	f280 80c3 	bge.w	80222fa <_dtoa_r+0x592>
 8022174:	f1b9 0f00 	cmp.w	r9, #0
 8022178:	f300 80bf 	bgt.w	80222fa <_dtoa_r+0x592>
 802217c:	f040 824c 	bne.w	8022618 <_dtoa_r+0x8b0>
 8022180:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8022184:	ee26 6b07 	vmul.f64	d6, d6, d7
 8022188:	ed9d 7b02 	vldr	d7, [sp, #8]
 802218c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8022190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022194:	464c      	mov	r4, r9
 8022196:	464f      	mov	r7, r9
 8022198:	f280 8222 	bge.w	80225e0 <_dtoa_r+0x878>
 802219c:	f8dd 8000 	ldr.w	r8, [sp]
 80221a0:	2331      	movs	r3, #49	; 0x31
 80221a2:	f808 3b01 	strb.w	r3, [r8], #1
 80221a6:	f10b 0b01 	add.w	fp, fp, #1
 80221aa:	e21e      	b.n	80225ea <_dtoa_r+0x882>
 80221ac:	2202      	movs	r2, #2
 80221ae:	e77c      	b.n	80220aa <_dtoa_r+0x342>
 80221b0:	07cc      	lsls	r4, r1, #31
 80221b2:	d504      	bpl.n	80221be <_dtoa_r+0x456>
 80221b4:	ed90 6b00 	vldr	d6, [r0]
 80221b8:	3201      	adds	r2, #1
 80221ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80221be:	1049      	asrs	r1, r1, #1
 80221c0:	3008      	adds	r0, #8
 80221c2:	e773      	b.n	80220ac <_dtoa_r+0x344>
 80221c4:	d02e      	beq.n	8022224 <_dtoa_r+0x4bc>
 80221c6:	f1cb 0100 	rsb	r1, fp, #0
 80221ca:	4a76      	ldr	r2, [pc, #472]	; (80223a4 <_dtoa_r+0x63c>)
 80221cc:	f001 000f 	and.w	r0, r1, #15
 80221d0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80221d4:	ed92 7b00 	vldr	d7, [r2]
 80221d8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80221dc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80221e0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80221e4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80221e8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80221ec:	486e      	ldr	r0, [pc, #440]	; (80223a8 <_dtoa_r+0x640>)
 80221ee:	1109      	asrs	r1, r1, #4
 80221f0:	2400      	movs	r4, #0
 80221f2:	2202      	movs	r2, #2
 80221f4:	b939      	cbnz	r1, 8022206 <_dtoa_r+0x49e>
 80221f6:	2c00      	cmp	r4, #0
 80221f8:	f43f af60 	beq.w	80220bc <_dtoa_r+0x354>
 80221fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8022200:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022204:	e75a      	b.n	80220bc <_dtoa_r+0x354>
 8022206:	07cf      	lsls	r7, r1, #31
 8022208:	d509      	bpl.n	802221e <_dtoa_r+0x4b6>
 802220a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 802220e:	ed90 7b00 	vldr	d7, [r0]
 8022212:	ee26 7b07 	vmul.f64	d7, d6, d7
 8022216:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 802221a:	3201      	adds	r2, #1
 802221c:	2401      	movs	r4, #1
 802221e:	1049      	asrs	r1, r1, #1
 8022220:	3008      	adds	r0, #8
 8022222:	e7e7      	b.n	80221f4 <_dtoa_r+0x48c>
 8022224:	2202      	movs	r2, #2
 8022226:	e749      	b.n	80220bc <_dtoa_r+0x354>
 8022228:	465f      	mov	r7, fp
 802222a:	4648      	mov	r0, r9
 802222c:	e765      	b.n	80220fa <_dtoa_r+0x392>
 802222e:	ec42 1b17 	vmov	d7, r1, r2
 8022232:	4a5c      	ldr	r2, [pc, #368]	; (80223a4 <_dtoa_r+0x63c>)
 8022234:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8022238:	ed12 4b02 	vldr	d4, [r2, #-8]
 802223c:	9a00      	ldr	r2, [sp, #0]
 802223e:	1814      	adds	r4, r2, r0
 8022240:	9a08      	ldr	r2, [sp, #32]
 8022242:	b352      	cbz	r2, 802229a <_dtoa_r+0x532>
 8022244:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8022248:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 802224c:	f8dd 8000 	ldr.w	r8, [sp]
 8022250:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8022254:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8022258:	ee35 7b47 	vsub.f64	d7, d5, d7
 802225c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8022260:	ee14 2a90 	vmov	r2, s9
 8022264:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8022268:	3230      	adds	r2, #48	; 0x30
 802226a:	ee36 6b45 	vsub.f64	d6, d6, d5
 802226e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8022272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022276:	f808 2b01 	strb.w	r2, [r8], #1
 802227a:	d439      	bmi.n	80222f0 <_dtoa_r+0x588>
 802227c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8022280:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8022284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022288:	d472      	bmi.n	8022370 <_dtoa_r+0x608>
 802228a:	45a0      	cmp	r8, r4
 802228c:	f43f af5d 	beq.w	802214a <_dtoa_r+0x3e2>
 8022290:	ee27 7b03 	vmul.f64	d7, d7, d3
 8022294:	ee26 6b03 	vmul.f64	d6, d6, d3
 8022298:	e7e0      	b.n	802225c <_dtoa_r+0x4f4>
 802229a:	f8dd 8000 	ldr.w	r8, [sp]
 802229e:	ee27 7b04 	vmul.f64	d7, d7, d4
 80222a2:	4621      	mov	r1, r4
 80222a4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80222a8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80222ac:	ee14 2a90 	vmov	r2, s9
 80222b0:	3230      	adds	r2, #48	; 0x30
 80222b2:	f808 2b01 	strb.w	r2, [r8], #1
 80222b6:	45a0      	cmp	r8, r4
 80222b8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80222bc:	ee36 6b45 	vsub.f64	d6, d6, d5
 80222c0:	d118      	bne.n	80222f4 <_dtoa_r+0x58c>
 80222c2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80222c6:	ee37 4b05 	vadd.f64	d4, d7, d5
 80222ca:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80222ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80222d2:	dc4d      	bgt.n	8022370 <_dtoa_r+0x608>
 80222d4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80222d8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80222dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80222e0:	f57f af33 	bpl.w	802214a <_dtoa_r+0x3e2>
 80222e4:	4688      	mov	r8, r1
 80222e6:	3901      	subs	r1, #1
 80222e8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80222ec:	2b30      	cmp	r3, #48	; 0x30
 80222ee:	d0f9      	beq.n	80222e4 <_dtoa_r+0x57c>
 80222f0:	46bb      	mov	fp, r7
 80222f2:	e02a      	b.n	802234a <_dtoa_r+0x5e2>
 80222f4:	ee26 6b03 	vmul.f64	d6, d6, d3
 80222f8:	e7d6      	b.n	80222a8 <_dtoa_r+0x540>
 80222fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80222fe:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8022302:	f8dd 8000 	ldr.w	r8, [sp]
 8022306:	ee87 5b06 	vdiv.f64	d5, d7, d6
 802230a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 802230e:	ee15 3a10 	vmov	r3, s10
 8022312:	3330      	adds	r3, #48	; 0x30
 8022314:	f808 3b01 	strb.w	r3, [r8], #1
 8022318:	9b00      	ldr	r3, [sp, #0]
 802231a:	eba8 0303 	sub.w	r3, r8, r3
 802231e:	4599      	cmp	r9, r3
 8022320:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8022324:	eea3 7b46 	vfms.f64	d7, d3, d6
 8022328:	d133      	bne.n	8022392 <_dtoa_r+0x62a>
 802232a:	ee37 7b07 	vadd.f64	d7, d7, d7
 802232e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8022332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022336:	dc1a      	bgt.n	802236e <_dtoa_r+0x606>
 8022338:	eeb4 7b46 	vcmp.f64	d7, d6
 802233c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022340:	d103      	bne.n	802234a <_dtoa_r+0x5e2>
 8022342:	ee15 3a10 	vmov	r3, s10
 8022346:	07d9      	lsls	r1, r3, #31
 8022348:	d411      	bmi.n	802236e <_dtoa_r+0x606>
 802234a:	4629      	mov	r1, r5
 802234c:	4630      	mov	r0, r6
 802234e:	f001 f895 	bl	802347c <_Bfree>
 8022352:	2300      	movs	r3, #0
 8022354:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022356:	f888 3000 	strb.w	r3, [r8]
 802235a:	f10b 0301 	add.w	r3, fp, #1
 802235e:	6013      	str	r3, [r2, #0]
 8022360:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022362:	2b00      	cmp	r3, #0
 8022364:	f43f ad4d 	beq.w	8021e02 <_dtoa_r+0x9a>
 8022368:	f8c3 8000 	str.w	r8, [r3]
 802236c:	e549      	b.n	8021e02 <_dtoa_r+0x9a>
 802236e:	465f      	mov	r7, fp
 8022370:	4643      	mov	r3, r8
 8022372:	4698      	mov	r8, r3
 8022374:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8022378:	2a39      	cmp	r2, #57	; 0x39
 802237a:	d106      	bne.n	802238a <_dtoa_r+0x622>
 802237c:	9a00      	ldr	r2, [sp, #0]
 802237e:	429a      	cmp	r2, r3
 8022380:	d1f7      	bne.n	8022372 <_dtoa_r+0x60a>
 8022382:	9900      	ldr	r1, [sp, #0]
 8022384:	2230      	movs	r2, #48	; 0x30
 8022386:	3701      	adds	r7, #1
 8022388:	700a      	strb	r2, [r1, #0]
 802238a:	781a      	ldrb	r2, [r3, #0]
 802238c:	3201      	adds	r2, #1
 802238e:	701a      	strb	r2, [r3, #0]
 8022390:	e7ae      	b.n	80222f0 <_dtoa_r+0x588>
 8022392:	ee27 7b04 	vmul.f64	d7, d7, d4
 8022396:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802239a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802239e:	d1b2      	bne.n	8022306 <_dtoa_r+0x59e>
 80223a0:	e7d3      	b.n	802234a <_dtoa_r+0x5e2>
 80223a2:	bf00      	nop
 80223a4:	08029680 	.word	0x08029680
 80223a8:	08029658 	.word	0x08029658
 80223ac:	9908      	ldr	r1, [sp, #32]
 80223ae:	2900      	cmp	r1, #0
 80223b0:	f000 80d1 	beq.w	8022556 <_dtoa_r+0x7ee>
 80223b4:	9907      	ldr	r1, [sp, #28]
 80223b6:	2901      	cmp	r1, #1
 80223b8:	f300 80b4 	bgt.w	8022524 <_dtoa_r+0x7bc>
 80223bc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80223be:	2900      	cmp	r1, #0
 80223c0:	f000 80ac 	beq.w	802251c <_dtoa_r+0x7b4>
 80223c4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80223c8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80223cc:	461c      	mov	r4, r3
 80223ce:	930a      	str	r3, [sp, #40]	; 0x28
 80223d0:	9b05      	ldr	r3, [sp, #20]
 80223d2:	4413      	add	r3, r2
 80223d4:	9305      	str	r3, [sp, #20]
 80223d6:	9b06      	ldr	r3, [sp, #24]
 80223d8:	2101      	movs	r1, #1
 80223da:	4413      	add	r3, r2
 80223dc:	4630      	mov	r0, r6
 80223de:	9306      	str	r3, [sp, #24]
 80223e0:	f001 f952 	bl	8023688 <__i2b>
 80223e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80223e6:	4607      	mov	r7, r0
 80223e8:	f1b8 0f00 	cmp.w	r8, #0
 80223ec:	dd0d      	ble.n	802240a <_dtoa_r+0x6a2>
 80223ee:	9a06      	ldr	r2, [sp, #24]
 80223f0:	2a00      	cmp	r2, #0
 80223f2:	dd0a      	ble.n	802240a <_dtoa_r+0x6a2>
 80223f4:	4542      	cmp	r2, r8
 80223f6:	9905      	ldr	r1, [sp, #20]
 80223f8:	bfa8      	it	ge
 80223fa:	4642      	movge	r2, r8
 80223fc:	1a89      	subs	r1, r1, r2
 80223fe:	9105      	str	r1, [sp, #20]
 8022400:	9906      	ldr	r1, [sp, #24]
 8022402:	eba8 0802 	sub.w	r8, r8, r2
 8022406:	1a8a      	subs	r2, r1, r2
 8022408:	9206      	str	r2, [sp, #24]
 802240a:	b303      	cbz	r3, 802244e <_dtoa_r+0x6e6>
 802240c:	9a08      	ldr	r2, [sp, #32]
 802240e:	2a00      	cmp	r2, #0
 8022410:	f000 80a6 	beq.w	8022560 <_dtoa_r+0x7f8>
 8022414:	2c00      	cmp	r4, #0
 8022416:	dd13      	ble.n	8022440 <_dtoa_r+0x6d8>
 8022418:	4639      	mov	r1, r7
 802241a:	4622      	mov	r2, r4
 802241c:	4630      	mov	r0, r6
 802241e:	930c      	str	r3, [sp, #48]	; 0x30
 8022420:	f001 f9ee 	bl	8023800 <__pow5mult>
 8022424:	462a      	mov	r2, r5
 8022426:	4601      	mov	r1, r0
 8022428:	4607      	mov	r7, r0
 802242a:	4630      	mov	r0, r6
 802242c:	f001 f942 	bl	80236b4 <__multiply>
 8022430:	4629      	mov	r1, r5
 8022432:	900a      	str	r0, [sp, #40]	; 0x28
 8022434:	4630      	mov	r0, r6
 8022436:	f001 f821 	bl	802347c <_Bfree>
 802243a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802243c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802243e:	4615      	mov	r5, r2
 8022440:	1b1a      	subs	r2, r3, r4
 8022442:	d004      	beq.n	802244e <_dtoa_r+0x6e6>
 8022444:	4629      	mov	r1, r5
 8022446:	4630      	mov	r0, r6
 8022448:	f001 f9da 	bl	8023800 <__pow5mult>
 802244c:	4605      	mov	r5, r0
 802244e:	2101      	movs	r1, #1
 8022450:	4630      	mov	r0, r6
 8022452:	f001 f919 	bl	8023688 <__i2b>
 8022456:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022458:	2b00      	cmp	r3, #0
 802245a:	4604      	mov	r4, r0
 802245c:	f340 8082 	ble.w	8022564 <_dtoa_r+0x7fc>
 8022460:	461a      	mov	r2, r3
 8022462:	4601      	mov	r1, r0
 8022464:	4630      	mov	r0, r6
 8022466:	f001 f9cb 	bl	8023800 <__pow5mult>
 802246a:	9b07      	ldr	r3, [sp, #28]
 802246c:	2b01      	cmp	r3, #1
 802246e:	4604      	mov	r4, r0
 8022470:	dd7b      	ble.n	802256a <_dtoa_r+0x802>
 8022472:	2300      	movs	r3, #0
 8022474:	930a      	str	r3, [sp, #40]	; 0x28
 8022476:	6922      	ldr	r2, [r4, #16]
 8022478:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 802247c:	6910      	ldr	r0, [r2, #16]
 802247e:	f001 f8b3 	bl	80235e8 <__hi0bits>
 8022482:	f1c0 0020 	rsb	r0, r0, #32
 8022486:	9b06      	ldr	r3, [sp, #24]
 8022488:	4418      	add	r0, r3
 802248a:	f010 001f 	ands.w	r0, r0, #31
 802248e:	f000 808d 	beq.w	80225ac <_dtoa_r+0x844>
 8022492:	f1c0 0220 	rsb	r2, r0, #32
 8022496:	2a04      	cmp	r2, #4
 8022498:	f340 8086 	ble.w	80225a8 <_dtoa_r+0x840>
 802249c:	f1c0 001c 	rsb	r0, r0, #28
 80224a0:	9b05      	ldr	r3, [sp, #20]
 80224a2:	4403      	add	r3, r0
 80224a4:	9305      	str	r3, [sp, #20]
 80224a6:	9b06      	ldr	r3, [sp, #24]
 80224a8:	4403      	add	r3, r0
 80224aa:	4480      	add	r8, r0
 80224ac:	9306      	str	r3, [sp, #24]
 80224ae:	9b05      	ldr	r3, [sp, #20]
 80224b0:	2b00      	cmp	r3, #0
 80224b2:	dd05      	ble.n	80224c0 <_dtoa_r+0x758>
 80224b4:	4629      	mov	r1, r5
 80224b6:	461a      	mov	r2, r3
 80224b8:	4630      	mov	r0, r6
 80224ba:	f001 f9fb 	bl	80238b4 <__lshift>
 80224be:	4605      	mov	r5, r0
 80224c0:	9b06      	ldr	r3, [sp, #24]
 80224c2:	2b00      	cmp	r3, #0
 80224c4:	dd05      	ble.n	80224d2 <_dtoa_r+0x76a>
 80224c6:	4621      	mov	r1, r4
 80224c8:	461a      	mov	r2, r3
 80224ca:	4630      	mov	r0, r6
 80224cc:	f001 f9f2 	bl	80238b4 <__lshift>
 80224d0:	4604      	mov	r4, r0
 80224d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80224d4:	2b00      	cmp	r3, #0
 80224d6:	d06b      	beq.n	80225b0 <_dtoa_r+0x848>
 80224d8:	4621      	mov	r1, r4
 80224da:	4628      	mov	r0, r5
 80224dc:	f001 fa56 	bl	802398c <__mcmp>
 80224e0:	2800      	cmp	r0, #0
 80224e2:	da65      	bge.n	80225b0 <_dtoa_r+0x848>
 80224e4:	2300      	movs	r3, #0
 80224e6:	4629      	mov	r1, r5
 80224e8:	220a      	movs	r2, #10
 80224ea:	4630      	mov	r0, r6
 80224ec:	f000 ffe8 	bl	80234c0 <__multadd>
 80224f0:	9b08      	ldr	r3, [sp, #32]
 80224f2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80224f6:	4605      	mov	r5, r0
 80224f8:	2b00      	cmp	r3, #0
 80224fa:	f000 8192 	beq.w	8022822 <_dtoa_r+0xaba>
 80224fe:	4639      	mov	r1, r7
 8022500:	2300      	movs	r3, #0
 8022502:	220a      	movs	r2, #10
 8022504:	4630      	mov	r0, r6
 8022506:	f000 ffdb 	bl	80234c0 <__multadd>
 802250a:	f1ba 0f00 	cmp.w	sl, #0
 802250e:	4607      	mov	r7, r0
 8022510:	f300 808e 	bgt.w	8022630 <_dtoa_r+0x8c8>
 8022514:	9b07      	ldr	r3, [sp, #28]
 8022516:	2b02      	cmp	r3, #2
 8022518:	dc51      	bgt.n	80225be <_dtoa_r+0x856>
 802251a:	e089      	b.n	8022630 <_dtoa_r+0x8c8>
 802251c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802251e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8022522:	e751      	b.n	80223c8 <_dtoa_r+0x660>
 8022524:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8022528:	42a3      	cmp	r3, r4
 802252a:	bfbf      	itttt	lt
 802252c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 802252e:	1ae3      	sublt	r3, r4, r3
 8022530:	18d2      	addlt	r2, r2, r3
 8022532:	4613      	movlt	r3, r2
 8022534:	bfb7      	itett	lt
 8022536:	930e      	strlt	r3, [sp, #56]	; 0x38
 8022538:	1b1c      	subge	r4, r3, r4
 802253a:	4623      	movlt	r3, r4
 802253c:	2400      	movlt	r4, #0
 802253e:	f1b9 0f00 	cmp.w	r9, #0
 8022542:	bfb5      	itete	lt
 8022544:	9a05      	ldrlt	r2, [sp, #20]
 8022546:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 802254a:	eba2 0809 	sublt.w	r8, r2, r9
 802254e:	464a      	movge	r2, r9
 8022550:	bfb8      	it	lt
 8022552:	2200      	movlt	r2, #0
 8022554:	e73b      	b.n	80223ce <_dtoa_r+0x666>
 8022556:	f8dd 8014 	ldr.w	r8, [sp, #20]
 802255a:	9f08      	ldr	r7, [sp, #32]
 802255c:	461c      	mov	r4, r3
 802255e:	e743      	b.n	80223e8 <_dtoa_r+0x680>
 8022560:	461a      	mov	r2, r3
 8022562:	e76f      	b.n	8022444 <_dtoa_r+0x6dc>
 8022564:	9b07      	ldr	r3, [sp, #28]
 8022566:	2b01      	cmp	r3, #1
 8022568:	dc18      	bgt.n	802259c <_dtoa_r+0x834>
 802256a:	9b02      	ldr	r3, [sp, #8]
 802256c:	b9b3      	cbnz	r3, 802259c <_dtoa_r+0x834>
 802256e:	9b03      	ldr	r3, [sp, #12]
 8022570:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8022574:	b9a2      	cbnz	r2, 80225a0 <_dtoa_r+0x838>
 8022576:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 802257a:	0d12      	lsrs	r2, r2, #20
 802257c:	0512      	lsls	r2, r2, #20
 802257e:	b18a      	cbz	r2, 80225a4 <_dtoa_r+0x83c>
 8022580:	9b05      	ldr	r3, [sp, #20]
 8022582:	3301      	adds	r3, #1
 8022584:	9305      	str	r3, [sp, #20]
 8022586:	9b06      	ldr	r3, [sp, #24]
 8022588:	3301      	adds	r3, #1
 802258a:	9306      	str	r3, [sp, #24]
 802258c:	2301      	movs	r3, #1
 802258e:	930a      	str	r3, [sp, #40]	; 0x28
 8022590:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022592:	2b00      	cmp	r3, #0
 8022594:	f47f af6f 	bne.w	8022476 <_dtoa_r+0x70e>
 8022598:	2001      	movs	r0, #1
 802259a:	e774      	b.n	8022486 <_dtoa_r+0x71e>
 802259c:	2300      	movs	r3, #0
 802259e:	e7f6      	b.n	802258e <_dtoa_r+0x826>
 80225a0:	9b02      	ldr	r3, [sp, #8]
 80225a2:	e7f4      	b.n	802258e <_dtoa_r+0x826>
 80225a4:	920a      	str	r2, [sp, #40]	; 0x28
 80225a6:	e7f3      	b.n	8022590 <_dtoa_r+0x828>
 80225a8:	d081      	beq.n	80224ae <_dtoa_r+0x746>
 80225aa:	4610      	mov	r0, r2
 80225ac:	301c      	adds	r0, #28
 80225ae:	e777      	b.n	80224a0 <_dtoa_r+0x738>
 80225b0:	f1b9 0f00 	cmp.w	r9, #0
 80225b4:	dc37      	bgt.n	8022626 <_dtoa_r+0x8be>
 80225b6:	9b07      	ldr	r3, [sp, #28]
 80225b8:	2b02      	cmp	r3, #2
 80225ba:	dd34      	ble.n	8022626 <_dtoa_r+0x8be>
 80225bc:	46ca      	mov	sl, r9
 80225be:	f1ba 0f00 	cmp.w	sl, #0
 80225c2:	d10d      	bne.n	80225e0 <_dtoa_r+0x878>
 80225c4:	4621      	mov	r1, r4
 80225c6:	4653      	mov	r3, sl
 80225c8:	2205      	movs	r2, #5
 80225ca:	4630      	mov	r0, r6
 80225cc:	f000 ff78 	bl	80234c0 <__multadd>
 80225d0:	4601      	mov	r1, r0
 80225d2:	4604      	mov	r4, r0
 80225d4:	4628      	mov	r0, r5
 80225d6:	f001 f9d9 	bl	802398c <__mcmp>
 80225da:	2800      	cmp	r0, #0
 80225dc:	f73f adde 	bgt.w	802219c <_dtoa_r+0x434>
 80225e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80225e2:	f8dd 8000 	ldr.w	r8, [sp]
 80225e6:	ea6f 0b03 	mvn.w	fp, r3
 80225ea:	f04f 0900 	mov.w	r9, #0
 80225ee:	4621      	mov	r1, r4
 80225f0:	4630      	mov	r0, r6
 80225f2:	f000 ff43 	bl	802347c <_Bfree>
 80225f6:	2f00      	cmp	r7, #0
 80225f8:	f43f aea7 	beq.w	802234a <_dtoa_r+0x5e2>
 80225fc:	f1b9 0f00 	cmp.w	r9, #0
 8022600:	d005      	beq.n	802260e <_dtoa_r+0x8a6>
 8022602:	45b9      	cmp	r9, r7
 8022604:	d003      	beq.n	802260e <_dtoa_r+0x8a6>
 8022606:	4649      	mov	r1, r9
 8022608:	4630      	mov	r0, r6
 802260a:	f000 ff37 	bl	802347c <_Bfree>
 802260e:	4639      	mov	r1, r7
 8022610:	4630      	mov	r0, r6
 8022612:	f000 ff33 	bl	802347c <_Bfree>
 8022616:	e698      	b.n	802234a <_dtoa_r+0x5e2>
 8022618:	2400      	movs	r4, #0
 802261a:	4627      	mov	r7, r4
 802261c:	e7e0      	b.n	80225e0 <_dtoa_r+0x878>
 802261e:	46bb      	mov	fp, r7
 8022620:	4604      	mov	r4, r0
 8022622:	4607      	mov	r7, r0
 8022624:	e5ba      	b.n	802219c <_dtoa_r+0x434>
 8022626:	9b08      	ldr	r3, [sp, #32]
 8022628:	46ca      	mov	sl, r9
 802262a:	2b00      	cmp	r3, #0
 802262c:	f000 8100 	beq.w	8022830 <_dtoa_r+0xac8>
 8022630:	f1b8 0f00 	cmp.w	r8, #0
 8022634:	dd05      	ble.n	8022642 <_dtoa_r+0x8da>
 8022636:	4639      	mov	r1, r7
 8022638:	4642      	mov	r2, r8
 802263a:	4630      	mov	r0, r6
 802263c:	f001 f93a 	bl	80238b4 <__lshift>
 8022640:	4607      	mov	r7, r0
 8022642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022644:	2b00      	cmp	r3, #0
 8022646:	d05d      	beq.n	8022704 <_dtoa_r+0x99c>
 8022648:	6879      	ldr	r1, [r7, #4]
 802264a:	4630      	mov	r0, r6
 802264c:	f000 fed6 	bl	80233fc <_Balloc>
 8022650:	4680      	mov	r8, r0
 8022652:	b928      	cbnz	r0, 8022660 <_dtoa_r+0x8f8>
 8022654:	4b82      	ldr	r3, [pc, #520]	; (8022860 <_dtoa_r+0xaf8>)
 8022656:	4602      	mov	r2, r0
 8022658:	f240 21ea 	movw	r1, #746	; 0x2ea
 802265c:	f7ff bb9a 	b.w	8021d94 <_dtoa_r+0x2c>
 8022660:	693a      	ldr	r2, [r7, #16]
 8022662:	3202      	adds	r2, #2
 8022664:	0092      	lsls	r2, r2, #2
 8022666:	f107 010c 	add.w	r1, r7, #12
 802266a:	300c      	adds	r0, #12
 802266c:	f7fd fb5c 	bl	801fd28 <memcpy>
 8022670:	2201      	movs	r2, #1
 8022672:	4641      	mov	r1, r8
 8022674:	4630      	mov	r0, r6
 8022676:	f001 f91d 	bl	80238b4 <__lshift>
 802267a:	9b00      	ldr	r3, [sp, #0]
 802267c:	3301      	adds	r3, #1
 802267e:	9305      	str	r3, [sp, #20]
 8022680:	9b00      	ldr	r3, [sp, #0]
 8022682:	4453      	add	r3, sl
 8022684:	9309      	str	r3, [sp, #36]	; 0x24
 8022686:	9b02      	ldr	r3, [sp, #8]
 8022688:	f003 0301 	and.w	r3, r3, #1
 802268c:	46b9      	mov	r9, r7
 802268e:	9308      	str	r3, [sp, #32]
 8022690:	4607      	mov	r7, r0
 8022692:	9b05      	ldr	r3, [sp, #20]
 8022694:	4621      	mov	r1, r4
 8022696:	3b01      	subs	r3, #1
 8022698:	4628      	mov	r0, r5
 802269a:	9302      	str	r3, [sp, #8]
 802269c:	f7ff fad8 	bl	8021c50 <quorem>
 80226a0:	4603      	mov	r3, r0
 80226a2:	3330      	adds	r3, #48	; 0x30
 80226a4:	9006      	str	r0, [sp, #24]
 80226a6:	4649      	mov	r1, r9
 80226a8:	4628      	mov	r0, r5
 80226aa:	930a      	str	r3, [sp, #40]	; 0x28
 80226ac:	f001 f96e 	bl	802398c <__mcmp>
 80226b0:	463a      	mov	r2, r7
 80226b2:	4682      	mov	sl, r0
 80226b4:	4621      	mov	r1, r4
 80226b6:	4630      	mov	r0, r6
 80226b8:	f001 f984 	bl	80239c4 <__mdiff>
 80226bc:	68c2      	ldr	r2, [r0, #12]
 80226be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80226c0:	4680      	mov	r8, r0
 80226c2:	bb0a      	cbnz	r2, 8022708 <_dtoa_r+0x9a0>
 80226c4:	4601      	mov	r1, r0
 80226c6:	4628      	mov	r0, r5
 80226c8:	f001 f960 	bl	802398c <__mcmp>
 80226cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80226ce:	4602      	mov	r2, r0
 80226d0:	4641      	mov	r1, r8
 80226d2:	4630      	mov	r0, r6
 80226d4:	920e      	str	r2, [sp, #56]	; 0x38
 80226d6:	930a      	str	r3, [sp, #40]	; 0x28
 80226d8:	f000 fed0 	bl	802347c <_Bfree>
 80226dc:	9b07      	ldr	r3, [sp, #28]
 80226de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80226e0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80226e4:	ea43 0102 	orr.w	r1, r3, r2
 80226e8:	9b08      	ldr	r3, [sp, #32]
 80226ea:	430b      	orrs	r3, r1
 80226ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80226ee:	d10d      	bne.n	802270c <_dtoa_r+0x9a4>
 80226f0:	2b39      	cmp	r3, #57	; 0x39
 80226f2:	d029      	beq.n	8022748 <_dtoa_r+0x9e0>
 80226f4:	f1ba 0f00 	cmp.w	sl, #0
 80226f8:	dd01      	ble.n	80226fe <_dtoa_r+0x996>
 80226fa:	9b06      	ldr	r3, [sp, #24]
 80226fc:	3331      	adds	r3, #49	; 0x31
 80226fe:	9a02      	ldr	r2, [sp, #8]
 8022700:	7013      	strb	r3, [r2, #0]
 8022702:	e774      	b.n	80225ee <_dtoa_r+0x886>
 8022704:	4638      	mov	r0, r7
 8022706:	e7b8      	b.n	802267a <_dtoa_r+0x912>
 8022708:	2201      	movs	r2, #1
 802270a:	e7e1      	b.n	80226d0 <_dtoa_r+0x968>
 802270c:	f1ba 0f00 	cmp.w	sl, #0
 8022710:	db06      	blt.n	8022720 <_dtoa_r+0x9b8>
 8022712:	9907      	ldr	r1, [sp, #28]
 8022714:	ea41 0a0a 	orr.w	sl, r1, sl
 8022718:	9908      	ldr	r1, [sp, #32]
 802271a:	ea5a 0101 	orrs.w	r1, sl, r1
 802271e:	d120      	bne.n	8022762 <_dtoa_r+0x9fa>
 8022720:	2a00      	cmp	r2, #0
 8022722:	ddec      	ble.n	80226fe <_dtoa_r+0x996>
 8022724:	4629      	mov	r1, r5
 8022726:	2201      	movs	r2, #1
 8022728:	4630      	mov	r0, r6
 802272a:	9305      	str	r3, [sp, #20]
 802272c:	f001 f8c2 	bl	80238b4 <__lshift>
 8022730:	4621      	mov	r1, r4
 8022732:	4605      	mov	r5, r0
 8022734:	f001 f92a 	bl	802398c <__mcmp>
 8022738:	2800      	cmp	r0, #0
 802273a:	9b05      	ldr	r3, [sp, #20]
 802273c:	dc02      	bgt.n	8022744 <_dtoa_r+0x9dc>
 802273e:	d1de      	bne.n	80226fe <_dtoa_r+0x996>
 8022740:	07da      	lsls	r2, r3, #31
 8022742:	d5dc      	bpl.n	80226fe <_dtoa_r+0x996>
 8022744:	2b39      	cmp	r3, #57	; 0x39
 8022746:	d1d8      	bne.n	80226fa <_dtoa_r+0x992>
 8022748:	9a02      	ldr	r2, [sp, #8]
 802274a:	2339      	movs	r3, #57	; 0x39
 802274c:	7013      	strb	r3, [r2, #0]
 802274e:	4643      	mov	r3, r8
 8022750:	4698      	mov	r8, r3
 8022752:	3b01      	subs	r3, #1
 8022754:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8022758:	2a39      	cmp	r2, #57	; 0x39
 802275a:	d051      	beq.n	8022800 <_dtoa_r+0xa98>
 802275c:	3201      	adds	r2, #1
 802275e:	701a      	strb	r2, [r3, #0]
 8022760:	e745      	b.n	80225ee <_dtoa_r+0x886>
 8022762:	2a00      	cmp	r2, #0
 8022764:	dd03      	ble.n	802276e <_dtoa_r+0xa06>
 8022766:	2b39      	cmp	r3, #57	; 0x39
 8022768:	d0ee      	beq.n	8022748 <_dtoa_r+0x9e0>
 802276a:	3301      	adds	r3, #1
 802276c:	e7c7      	b.n	80226fe <_dtoa_r+0x996>
 802276e:	9a05      	ldr	r2, [sp, #20]
 8022770:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022772:	f802 3c01 	strb.w	r3, [r2, #-1]
 8022776:	428a      	cmp	r2, r1
 8022778:	d02b      	beq.n	80227d2 <_dtoa_r+0xa6a>
 802277a:	4629      	mov	r1, r5
 802277c:	2300      	movs	r3, #0
 802277e:	220a      	movs	r2, #10
 8022780:	4630      	mov	r0, r6
 8022782:	f000 fe9d 	bl	80234c0 <__multadd>
 8022786:	45b9      	cmp	r9, r7
 8022788:	4605      	mov	r5, r0
 802278a:	f04f 0300 	mov.w	r3, #0
 802278e:	f04f 020a 	mov.w	r2, #10
 8022792:	4649      	mov	r1, r9
 8022794:	4630      	mov	r0, r6
 8022796:	d107      	bne.n	80227a8 <_dtoa_r+0xa40>
 8022798:	f000 fe92 	bl	80234c0 <__multadd>
 802279c:	4681      	mov	r9, r0
 802279e:	4607      	mov	r7, r0
 80227a0:	9b05      	ldr	r3, [sp, #20]
 80227a2:	3301      	adds	r3, #1
 80227a4:	9305      	str	r3, [sp, #20]
 80227a6:	e774      	b.n	8022692 <_dtoa_r+0x92a>
 80227a8:	f000 fe8a 	bl	80234c0 <__multadd>
 80227ac:	4639      	mov	r1, r7
 80227ae:	4681      	mov	r9, r0
 80227b0:	2300      	movs	r3, #0
 80227b2:	220a      	movs	r2, #10
 80227b4:	4630      	mov	r0, r6
 80227b6:	f000 fe83 	bl	80234c0 <__multadd>
 80227ba:	4607      	mov	r7, r0
 80227bc:	e7f0      	b.n	80227a0 <_dtoa_r+0xa38>
 80227be:	f1ba 0f00 	cmp.w	sl, #0
 80227c2:	9a00      	ldr	r2, [sp, #0]
 80227c4:	bfcc      	ite	gt
 80227c6:	46d0      	movgt	r8, sl
 80227c8:	f04f 0801 	movle.w	r8, #1
 80227cc:	4490      	add	r8, r2
 80227ce:	f04f 0900 	mov.w	r9, #0
 80227d2:	4629      	mov	r1, r5
 80227d4:	2201      	movs	r2, #1
 80227d6:	4630      	mov	r0, r6
 80227d8:	9302      	str	r3, [sp, #8]
 80227da:	f001 f86b 	bl	80238b4 <__lshift>
 80227de:	4621      	mov	r1, r4
 80227e0:	4605      	mov	r5, r0
 80227e2:	f001 f8d3 	bl	802398c <__mcmp>
 80227e6:	2800      	cmp	r0, #0
 80227e8:	dcb1      	bgt.n	802274e <_dtoa_r+0x9e6>
 80227ea:	d102      	bne.n	80227f2 <_dtoa_r+0xa8a>
 80227ec:	9b02      	ldr	r3, [sp, #8]
 80227ee:	07db      	lsls	r3, r3, #31
 80227f0:	d4ad      	bmi.n	802274e <_dtoa_r+0x9e6>
 80227f2:	4643      	mov	r3, r8
 80227f4:	4698      	mov	r8, r3
 80227f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80227fa:	2a30      	cmp	r2, #48	; 0x30
 80227fc:	d0fa      	beq.n	80227f4 <_dtoa_r+0xa8c>
 80227fe:	e6f6      	b.n	80225ee <_dtoa_r+0x886>
 8022800:	9a00      	ldr	r2, [sp, #0]
 8022802:	429a      	cmp	r2, r3
 8022804:	d1a4      	bne.n	8022750 <_dtoa_r+0x9e8>
 8022806:	f10b 0b01 	add.w	fp, fp, #1
 802280a:	2331      	movs	r3, #49	; 0x31
 802280c:	e778      	b.n	8022700 <_dtoa_r+0x998>
 802280e:	4b15      	ldr	r3, [pc, #84]	; (8022864 <_dtoa_r+0xafc>)
 8022810:	f7ff bb12 	b.w	8021e38 <_dtoa_r+0xd0>
 8022814:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022816:	2b00      	cmp	r3, #0
 8022818:	f47f aaee 	bne.w	8021df8 <_dtoa_r+0x90>
 802281c:	4b12      	ldr	r3, [pc, #72]	; (8022868 <_dtoa_r+0xb00>)
 802281e:	f7ff bb0b 	b.w	8021e38 <_dtoa_r+0xd0>
 8022822:	f1ba 0f00 	cmp.w	sl, #0
 8022826:	dc03      	bgt.n	8022830 <_dtoa_r+0xac8>
 8022828:	9b07      	ldr	r3, [sp, #28]
 802282a:	2b02      	cmp	r3, #2
 802282c:	f73f aec7 	bgt.w	80225be <_dtoa_r+0x856>
 8022830:	f8dd 8000 	ldr.w	r8, [sp]
 8022834:	4621      	mov	r1, r4
 8022836:	4628      	mov	r0, r5
 8022838:	f7ff fa0a 	bl	8021c50 <quorem>
 802283c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8022840:	f808 3b01 	strb.w	r3, [r8], #1
 8022844:	9a00      	ldr	r2, [sp, #0]
 8022846:	eba8 0202 	sub.w	r2, r8, r2
 802284a:	4592      	cmp	sl, r2
 802284c:	ddb7      	ble.n	80227be <_dtoa_r+0xa56>
 802284e:	4629      	mov	r1, r5
 8022850:	2300      	movs	r3, #0
 8022852:	220a      	movs	r2, #10
 8022854:	4630      	mov	r0, r6
 8022856:	f000 fe33 	bl	80234c0 <__multadd>
 802285a:	4605      	mov	r5, r0
 802285c:	e7ea      	b.n	8022834 <_dtoa_r+0xacc>
 802285e:	bf00      	nop
 8022860:	08029500 	.word	0x08029500
 8022864:	08029364 	.word	0x08029364
 8022868:	08029494 	.word	0x08029494

0802286c <__errno>:
 802286c:	4b01      	ldr	r3, [pc, #4]	; (8022874 <__errno+0x8>)
 802286e:	6818      	ldr	r0, [r3, #0]
 8022870:	4770      	bx	lr
 8022872:	bf00      	nop
 8022874:	24003844 	.word	0x24003844

08022878 <__sflush_r>:
 8022878:	898a      	ldrh	r2, [r1, #12]
 802287a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802287e:	4605      	mov	r5, r0
 8022880:	0710      	lsls	r0, r2, #28
 8022882:	460c      	mov	r4, r1
 8022884:	d458      	bmi.n	8022938 <__sflush_r+0xc0>
 8022886:	684b      	ldr	r3, [r1, #4]
 8022888:	2b00      	cmp	r3, #0
 802288a:	dc05      	bgt.n	8022898 <__sflush_r+0x20>
 802288c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802288e:	2b00      	cmp	r3, #0
 8022890:	dc02      	bgt.n	8022898 <__sflush_r+0x20>
 8022892:	2000      	movs	r0, #0
 8022894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022898:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802289a:	2e00      	cmp	r6, #0
 802289c:	d0f9      	beq.n	8022892 <__sflush_r+0x1a>
 802289e:	2300      	movs	r3, #0
 80228a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80228a4:	682f      	ldr	r7, [r5, #0]
 80228a6:	602b      	str	r3, [r5, #0]
 80228a8:	d032      	beq.n	8022910 <__sflush_r+0x98>
 80228aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80228ac:	89a3      	ldrh	r3, [r4, #12]
 80228ae:	075a      	lsls	r2, r3, #29
 80228b0:	d505      	bpl.n	80228be <__sflush_r+0x46>
 80228b2:	6863      	ldr	r3, [r4, #4]
 80228b4:	1ac0      	subs	r0, r0, r3
 80228b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80228b8:	b10b      	cbz	r3, 80228be <__sflush_r+0x46>
 80228ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80228bc:	1ac0      	subs	r0, r0, r3
 80228be:	2300      	movs	r3, #0
 80228c0:	4602      	mov	r2, r0
 80228c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80228c4:	6a21      	ldr	r1, [r4, #32]
 80228c6:	4628      	mov	r0, r5
 80228c8:	47b0      	blx	r6
 80228ca:	1c43      	adds	r3, r0, #1
 80228cc:	89a3      	ldrh	r3, [r4, #12]
 80228ce:	d106      	bne.n	80228de <__sflush_r+0x66>
 80228d0:	6829      	ldr	r1, [r5, #0]
 80228d2:	291d      	cmp	r1, #29
 80228d4:	d82c      	bhi.n	8022930 <__sflush_r+0xb8>
 80228d6:	4a2a      	ldr	r2, [pc, #168]	; (8022980 <__sflush_r+0x108>)
 80228d8:	40ca      	lsrs	r2, r1
 80228da:	07d6      	lsls	r6, r2, #31
 80228dc:	d528      	bpl.n	8022930 <__sflush_r+0xb8>
 80228de:	2200      	movs	r2, #0
 80228e0:	6062      	str	r2, [r4, #4]
 80228e2:	04d9      	lsls	r1, r3, #19
 80228e4:	6922      	ldr	r2, [r4, #16]
 80228e6:	6022      	str	r2, [r4, #0]
 80228e8:	d504      	bpl.n	80228f4 <__sflush_r+0x7c>
 80228ea:	1c42      	adds	r2, r0, #1
 80228ec:	d101      	bne.n	80228f2 <__sflush_r+0x7a>
 80228ee:	682b      	ldr	r3, [r5, #0]
 80228f0:	b903      	cbnz	r3, 80228f4 <__sflush_r+0x7c>
 80228f2:	6560      	str	r0, [r4, #84]	; 0x54
 80228f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80228f6:	602f      	str	r7, [r5, #0]
 80228f8:	2900      	cmp	r1, #0
 80228fa:	d0ca      	beq.n	8022892 <__sflush_r+0x1a>
 80228fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022900:	4299      	cmp	r1, r3
 8022902:	d002      	beq.n	802290a <__sflush_r+0x92>
 8022904:	4628      	mov	r0, r5
 8022906:	f7fd fa3f 	bl	801fd88 <_free_r>
 802290a:	2000      	movs	r0, #0
 802290c:	6360      	str	r0, [r4, #52]	; 0x34
 802290e:	e7c1      	b.n	8022894 <__sflush_r+0x1c>
 8022910:	6a21      	ldr	r1, [r4, #32]
 8022912:	2301      	movs	r3, #1
 8022914:	4628      	mov	r0, r5
 8022916:	47b0      	blx	r6
 8022918:	1c41      	adds	r1, r0, #1
 802291a:	d1c7      	bne.n	80228ac <__sflush_r+0x34>
 802291c:	682b      	ldr	r3, [r5, #0]
 802291e:	2b00      	cmp	r3, #0
 8022920:	d0c4      	beq.n	80228ac <__sflush_r+0x34>
 8022922:	2b1d      	cmp	r3, #29
 8022924:	d001      	beq.n	802292a <__sflush_r+0xb2>
 8022926:	2b16      	cmp	r3, #22
 8022928:	d101      	bne.n	802292e <__sflush_r+0xb6>
 802292a:	602f      	str	r7, [r5, #0]
 802292c:	e7b1      	b.n	8022892 <__sflush_r+0x1a>
 802292e:	89a3      	ldrh	r3, [r4, #12]
 8022930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022934:	81a3      	strh	r3, [r4, #12]
 8022936:	e7ad      	b.n	8022894 <__sflush_r+0x1c>
 8022938:	690f      	ldr	r7, [r1, #16]
 802293a:	2f00      	cmp	r7, #0
 802293c:	d0a9      	beq.n	8022892 <__sflush_r+0x1a>
 802293e:	0793      	lsls	r3, r2, #30
 8022940:	680e      	ldr	r6, [r1, #0]
 8022942:	bf08      	it	eq
 8022944:	694b      	ldreq	r3, [r1, #20]
 8022946:	600f      	str	r7, [r1, #0]
 8022948:	bf18      	it	ne
 802294a:	2300      	movne	r3, #0
 802294c:	eba6 0807 	sub.w	r8, r6, r7
 8022950:	608b      	str	r3, [r1, #8]
 8022952:	f1b8 0f00 	cmp.w	r8, #0
 8022956:	dd9c      	ble.n	8022892 <__sflush_r+0x1a>
 8022958:	6a21      	ldr	r1, [r4, #32]
 802295a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802295c:	4643      	mov	r3, r8
 802295e:	463a      	mov	r2, r7
 8022960:	4628      	mov	r0, r5
 8022962:	47b0      	blx	r6
 8022964:	2800      	cmp	r0, #0
 8022966:	dc06      	bgt.n	8022976 <__sflush_r+0xfe>
 8022968:	89a3      	ldrh	r3, [r4, #12]
 802296a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802296e:	81a3      	strh	r3, [r4, #12]
 8022970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022974:	e78e      	b.n	8022894 <__sflush_r+0x1c>
 8022976:	4407      	add	r7, r0
 8022978:	eba8 0800 	sub.w	r8, r8, r0
 802297c:	e7e9      	b.n	8022952 <__sflush_r+0xda>
 802297e:	bf00      	nop
 8022980:	20400001 	.word	0x20400001

08022984 <_fflush_r>:
 8022984:	b538      	push	{r3, r4, r5, lr}
 8022986:	690b      	ldr	r3, [r1, #16]
 8022988:	4605      	mov	r5, r0
 802298a:	460c      	mov	r4, r1
 802298c:	b913      	cbnz	r3, 8022994 <_fflush_r+0x10>
 802298e:	2500      	movs	r5, #0
 8022990:	4628      	mov	r0, r5
 8022992:	bd38      	pop	{r3, r4, r5, pc}
 8022994:	b118      	cbz	r0, 802299e <_fflush_r+0x1a>
 8022996:	6983      	ldr	r3, [r0, #24]
 8022998:	b90b      	cbnz	r3, 802299e <_fflush_r+0x1a>
 802299a:	f000 f887 	bl	8022aac <__sinit>
 802299e:	4b14      	ldr	r3, [pc, #80]	; (80229f0 <_fflush_r+0x6c>)
 80229a0:	429c      	cmp	r4, r3
 80229a2:	d11b      	bne.n	80229dc <_fflush_r+0x58>
 80229a4:	686c      	ldr	r4, [r5, #4]
 80229a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80229aa:	2b00      	cmp	r3, #0
 80229ac:	d0ef      	beq.n	802298e <_fflush_r+0xa>
 80229ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80229b0:	07d0      	lsls	r0, r2, #31
 80229b2:	d404      	bmi.n	80229be <_fflush_r+0x3a>
 80229b4:	0599      	lsls	r1, r3, #22
 80229b6:	d402      	bmi.n	80229be <_fflush_r+0x3a>
 80229b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80229ba:	f000 fc9a 	bl	80232f2 <__retarget_lock_acquire_recursive>
 80229be:	4628      	mov	r0, r5
 80229c0:	4621      	mov	r1, r4
 80229c2:	f7ff ff59 	bl	8022878 <__sflush_r>
 80229c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80229c8:	07da      	lsls	r2, r3, #31
 80229ca:	4605      	mov	r5, r0
 80229cc:	d4e0      	bmi.n	8022990 <_fflush_r+0xc>
 80229ce:	89a3      	ldrh	r3, [r4, #12]
 80229d0:	059b      	lsls	r3, r3, #22
 80229d2:	d4dd      	bmi.n	8022990 <_fflush_r+0xc>
 80229d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80229d6:	f000 fc8d 	bl	80232f4 <__retarget_lock_release_recursive>
 80229da:	e7d9      	b.n	8022990 <_fflush_r+0xc>
 80229dc:	4b05      	ldr	r3, [pc, #20]	; (80229f4 <_fflush_r+0x70>)
 80229de:	429c      	cmp	r4, r3
 80229e0:	d101      	bne.n	80229e6 <_fflush_r+0x62>
 80229e2:	68ac      	ldr	r4, [r5, #8]
 80229e4:	e7df      	b.n	80229a6 <_fflush_r+0x22>
 80229e6:	4b04      	ldr	r3, [pc, #16]	; (80229f8 <_fflush_r+0x74>)
 80229e8:	429c      	cmp	r4, r3
 80229ea:	bf08      	it	eq
 80229ec:	68ec      	ldreq	r4, [r5, #12]
 80229ee:	e7da      	b.n	80229a6 <_fflush_r+0x22>
 80229f0:	08029534 	.word	0x08029534
 80229f4:	08029554 	.word	0x08029554
 80229f8:	08029514 	.word	0x08029514

080229fc <std>:
 80229fc:	2300      	movs	r3, #0
 80229fe:	b510      	push	{r4, lr}
 8022a00:	4604      	mov	r4, r0
 8022a02:	e9c0 3300 	strd	r3, r3, [r0]
 8022a06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8022a0a:	6083      	str	r3, [r0, #8]
 8022a0c:	8181      	strh	r1, [r0, #12]
 8022a0e:	6643      	str	r3, [r0, #100]	; 0x64
 8022a10:	81c2      	strh	r2, [r0, #14]
 8022a12:	6183      	str	r3, [r0, #24]
 8022a14:	4619      	mov	r1, r3
 8022a16:	2208      	movs	r2, #8
 8022a18:	305c      	adds	r0, #92	; 0x5c
 8022a1a:	f7fd f9ad 	bl	801fd78 <memset>
 8022a1e:	4b05      	ldr	r3, [pc, #20]	; (8022a34 <std+0x38>)
 8022a20:	6263      	str	r3, [r4, #36]	; 0x24
 8022a22:	4b05      	ldr	r3, [pc, #20]	; (8022a38 <std+0x3c>)
 8022a24:	62a3      	str	r3, [r4, #40]	; 0x28
 8022a26:	4b05      	ldr	r3, [pc, #20]	; (8022a3c <std+0x40>)
 8022a28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8022a2a:	4b05      	ldr	r3, [pc, #20]	; (8022a40 <std+0x44>)
 8022a2c:	6224      	str	r4, [r4, #32]
 8022a2e:	6323      	str	r3, [r4, #48]	; 0x30
 8022a30:	bd10      	pop	{r4, pc}
 8022a32:	bf00      	nop
 8022a34:	08024311 	.word	0x08024311
 8022a38:	08024333 	.word	0x08024333
 8022a3c:	0802436b 	.word	0x0802436b
 8022a40:	0802438f 	.word	0x0802438f

08022a44 <_cleanup_r>:
 8022a44:	4901      	ldr	r1, [pc, #4]	; (8022a4c <_cleanup_r+0x8>)
 8022a46:	f000 b8c1 	b.w	8022bcc <_fwalk_reent>
 8022a4a:	bf00      	nop
 8022a4c:	08022985 	.word	0x08022985

08022a50 <__sfmoreglue>:
 8022a50:	b570      	push	{r4, r5, r6, lr}
 8022a52:	1e4a      	subs	r2, r1, #1
 8022a54:	2568      	movs	r5, #104	; 0x68
 8022a56:	4355      	muls	r5, r2
 8022a58:	460e      	mov	r6, r1
 8022a5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8022a5e:	f7fd f9e3 	bl	801fe28 <_malloc_r>
 8022a62:	4604      	mov	r4, r0
 8022a64:	b140      	cbz	r0, 8022a78 <__sfmoreglue+0x28>
 8022a66:	2100      	movs	r1, #0
 8022a68:	e9c0 1600 	strd	r1, r6, [r0]
 8022a6c:	300c      	adds	r0, #12
 8022a6e:	60a0      	str	r0, [r4, #8]
 8022a70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8022a74:	f7fd f980 	bl	801fd78 <memset>
 8022a78:	4620      	mov	r0, r4
 8022a7a:	bd70      	pop	{r4, r5, r6, pc}

08022a7c <__sfp_lock_acquire>:
 8022a7c:	4801      	ldr	r0, [pc, #4]	; (8022a84 <__sfp_lock_acquire+0x8>)
 8022a7e:	f000 bc38 	b.w	80232f2 <__retarget_lock_acquire_recursive>
 8022a82:	bf00      	nop
 8022a84:	2400b6b4 	.word	0x2400b6b4

08022a88 <__sfp_lock_release>:
 8022a88:	4801      	ldr	r0, [pc, #4]	; (8022a90 <__sfp_lock_release+0x8>)
 8022a8a:	f000 bc33 	b.w	80232f4 <__retarget_lock_release_recursive>
 8022a8e:	bf00      	nop
 8022a90:	2400b6b4 	.word	0x2400b6b4

08022a94 <__sinit_lock_acquire>:
 8022a94:	4801      	ldr	r0, [pc, #4]	; (8022a9c <__sinit_lock_acquire+0x8>)
 8022a96:	f000 bc2c 	b.w	80232f2 <__retarget_lock_acquire_recursive>
 8022a9a:	bf00      	nop
 8022a9c:	2400b6af 	.word	0x2400b6af

08022aa0 <__sinit_lock_release>:
 8022aa0:	4801      	ldr	r0, [pc, #4]	; (8022aa8 <__sinit_lock_release+0x8>)
 8022aa2:	f000 bc27 	b.w	80232f4 <__retarget_lock_release_recursive>
 8022aa6:	bf00      	nop
 8022aa8:	2400b6af 	.word	0x2400b6af

08022aac <__sinit>:
 8022aac:	b510      	push	{r4, lr}
 8022aae:	4604      	mov	r4, r0
 8022ab0:	f7ff fff0 	bl	8022a94 <__sinit_lock_acquire>
 8022ab4:	69a3      	ldr	r3, [r4, #24]
 8022ab6:	b11b      	cbz	r3, 8022ac0 <__sinit+0x14>
 8022ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022abc:	f7ff bff0 	b.w	8022aa0 <__sinit_lock_release>
 8022ac0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8022ac4:	6523      	str	r3, [r4, #80]	; 0x50
 8022ac6:	4b13      	ldr	r3, [pc, #76]	; (8022b14 <__sinit+0x68>)
 8022ac8:	4a13      	ldr	r2, [pc, #76]	; (8022b18 <__sinit+0x6c>)
 8022aca:	681b      	ldr	r3, [r3, #0]
 8022acc:	62a2      	str	r2, [r4, #40]	; 0x28
 8022ace:	42a3      	cmp	r3, r4
 8022ad0:	bf04      	itt	eq
 8022ad2:	2301      	moveq	r3, #1
 8022ad4:	61a3      	streq	r3, [r4, #24]
 8022ad6:	4620      	mov	r0, r4
 8022ad8:	f000 f820 	bl	8022b1c <__sfp>
 8022adc:	6060      	str	r0, [r4, #4]
 8022ade:	4620      	mov	r0, r4
 8022ae0:	f000 f81c 	bl	8022b1c <__sfp>
 8022ae4:	60a0      	str	r0, [r4, #8]
 8022ae6:	4620      	mov	r0, r4
 8022ae8:	f000 f818 	bl	8022b1c <__sfp>
 8022aec:	2200      	movs	r2, #0
 8022aee:	60e0      	str	r0, [r4, #12]
 8022af0:	2104      	movs	r1, #4
 8022af2:	6860      	ldr	r0, [r4, #4]
 8022af4:	f7ff ff82 	bl	80229fc <std>
 8022af8:	68a0      	ldr	r0, [r4, #8]
 8022afa:	2201      	movs	r2, #1
 8022afc:	2109      	movs	r1, #9
 8022afe:	f7ff ff7d 	bl	80229fc <std>
 8022b02:	68e0      	ldr	r0, [r4, #12]
 8022b04:	2202      	movs	r2, #2
 8022b06:	2112      	movs	r1, #18
 8022b08:	f7ff ff78 	bl	80229fc <std>
 8022b0c:	2301      	movs	r3, #1
 8022b0e:	61a3      	str	r3, [r4, #24]
 8022b10:	e7d2      	b.n	8022ab8 <__sinit+0xc>
 8022b12:	bf00      	nop
 8022b14:	08029350 	.word	0x08029350
 8022b18:	08022a45 	.word	0x08022a45

08022b1c <__sfp>:
 8022b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022b1e:	4607      	mov	r7, r0
 8022b20:	f7ff ffac 	bl	8022a7c <__sfp_lock_acquire>
 8022b24:	4b1e      	ldr	r3, [pc, #120]	; (8022ba0 <__sfp+0x84>)
 8022b26:	681e      	ldr	r6, [r3, #0]
 8022b28:	69b3      	ldr	r3, [r6, #24]
 8022b2a:	b913      	cbnz	r3, 8022b32 <__sfp+0x16>
 8022b2c:	4630      	mov	r0, r6
 8022b2e:	f7ff ffbd 	bl	8022aac <__sinit>
 8022b32:	3648      	adds	r6, #72	; 0x48
 8022b34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8022b38:	3b01      	subs	r3, #1
 8022b3a:	d503      	bpl.n	8022b44 <__sfp+0x28>
 8022b3c:	6833      	ldr	r3, [r6, #0]
 8022b3e:	b30b      	cbz	r3, 8022b84 <__sfp+0x68>
 8022b40:	6836      	ldr	r6, [r6, #0]
 8022b42:	e7f7      	b.n	8022b34 <__sfp+0x18>
 8022b44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8022b48:	b9d5      	cbnz	r5, 8022b80 <__sfp+0x64>
 8022b4a:	4b16      	ldr	r3, [pc, #88]	; (8022ba4 <__sfp+0x88>)
 8022b4c:	60e3      	str	r3, [r4, #12]
 8022b4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8022b52:	6665      	str	r5, [r4, #100]	; 0x64
 8022b54:	f000 fbcc 	bl	80232f0 <__retarget_lock_init_recursive>
 8022b58:	f7ff ff96 	bl	8022a88 <__sfp_lock_release>
 8022b5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8022b60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8022b64:	6025      	str	r5, [r4, #0]
 8022b66:	61a5      	str	r5, [r4, #24]
 8022b68:	2208      	movs	r2, #8
 8022b6a:	4629      	mov	r1, r5
 8022b6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8022b70:	f7fd f902 	bl	801fd78 <memset>
 8022b74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8022b78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8022b7c:	4620      	mov	r0, r4
 8022b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022b80:	3468      	adds	r4, #104	; 0x68
 8022b82:	e7d9      	b.n	8022b38 <__sfp+0x1c>
 8022b84:	2104      	movs	r1, #4
 8022b86:	4638      	mov	r0, r7
 8022b88:	f7ff ff62 	bl	8022a50 <__sfmoreglue>
 8022b8c:	4604      	mov	r4, r0
 8022b8e:	6030      	str	r0, [r6, #0]
 8022b90:	2800      	cmp	r0, #0
 8022b92:	d1d5      	bne.n	8022b40 <__sfp+0x24>
 8022b94:	f7ff ff78 	bl	8022a88 <__sfp_lock_release>
 8022b98:	230c      	movs	r3, #12
 8022b9a:	603b      	str	r3, [r7, #0]
 8022b9c:	e7ee      	b.n	8022b7c <__sfp+0x60>
 8022b9e:	bf00      	nop
 8022ba0:	08029350 	.word	0x08029350
 8022ba4:	ffff0001 	.word	0xffff0001

08022ba8 <fiprintf>:
 8022ba8:	b40e      	push	{r1, r2, r3}
 8022baa:	b503      	push	{r0, r1, lr}
 8022bac:	4601      	mov	r1, r0
 8022bae:	ab03      	add	r3, sp, #12
 8022bb0:	4805      	ldr	r0, [pc, #20]	; (8022bc8 <fiprintf+0x20>)
 8022bb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8022bb6:	6800      	ldr	r0, [r0, #0]
 8022bb8:	9301      	str	r3, [sp, #4]
 8022bba:	f001 fa6f 	bl	802409c <_vfiprintf_r>
 8022bbe:	b002      	add	sp, #8
 8022bc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8022bc4:	b003      	add	sp, #12
 8022bc6:	4770      	bx	lr
 8022bc8:	24003844 	.word	0x24003844

08022bcc <_fwalk_reent>:
 8022bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022bd0:	4606      	mov	r6, r0
 8022bd2:	4688      	mov	r8, r1
 8022bd4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8022bd8:	2700      	movs	r7, #0
 8022bda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8022bde:	f1b9 0901 	subs.w	r9, r9, #1
 8022be2:	d505      	bpl.n	8022bf0 <_fwalk_reent+0x24>
 8022be4:	6824      	ldr	r4, [r4, #0]
 8022be6:	2c00      	cmp	r4, #0
 8022be8:	d1f7      	bne.n	8022bda <_fwalk_reent+0xe>
 8022bea:	4638      	mov	r0, r7
 8022bec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022bf0:	89ab      	ldrh	r3, [r5, #12]
 8022bf2:	2b01      	cmp	r3, #1
 8022bf4:	d907      	bls.n	8022c06 <_fwalk_reent+0x3a>
 8022bf6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8022bfa:	3301      	adds	r3, #1
 8022bfc:	d003      	beq.n	8022c06 <_fwalk_reent+0x3a>
 8022bfe:	4629      	mov	r1, r5
 8022c00:	4630      	mov	r0, r6
 8022c02:	47c0      	blx	r8
 8022c04:	4307      	orrs	r7, r0
 8022c06:	3568      	adds	r5, #104	; 0x68
 8022c08:	e7e9      	b.n	8022bde <_fwalk_reent+0x12>

08022c0a <rshift>:
 8022c0a:	6903      	ldr	r3, [r0, #16]
 8022c0c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8022c10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022c14:	ea4f 1261 	mov.w	r2, r1, asr #5
 8022c18:	f100 0414 	add.w	r4, r0, #20
 8022c1c:	dd45      	ble.n	8022caa <rshift+0xa0>
 8022c1e:	f011 011f 	ands.w	r1, r1, #31
 8022c22:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8022c26:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8022c2a:	d10c      	bne.n	8022c46 <rshift+0x3c>
 8022c2c:	f100 0710 	add.w	r7, r0, #16
 8022c30:	4629      	mov	r1, r5
 8022c32:	42b1      	cmp	r1, r6
 8022c34:	d334      	bcc.n	8022ca0 <rshift+0x96>
 8022c36:	1a9b      	subs	r3, r3, r2
 8022c38:	009b      	lsls	r3, r3, #2
 8022c3a:	1eea      	subs	r2, r5, #3
 8022c3c:	4296      	cmp	r6, r2
 8022c3e:	bf38      	it	cc
 8022c40:	2300      	movcc	r3, #0
 8022c42:	4423      	add	r3, r4
 8022c44:	e015      	b.n	8022c72 <rshift+0x68>
 8022c46:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8022c4a:	f1c1 0820 	rsb	r8, r1, #32
 8022c4e:	40cf      	lsrs	r7, r1
 8022c50:	f105 0e04 	add.w	lr, r5, #4
 8022c54:	46a1      	mov	r9, r4
 8022c56:	4576      	cmp	r6, lr
 8022c58:	46f4      	mov	ip, lr
 8022c5a:	d815      	bhi.n	8022c88 <rshift+0x7e>
 8022c5c:	1a9b      	subs	r3, r3, r2
 8022c5e:	009a      	lsls	r2, r3, #2
 8022c60:	3a04      	subs	r2, #4
 8022c62:	3501      	adds	r5, #1
 8022c64:	42ae      	cmp	r6, r5
 8022c66:	bf38      	it	cc
 8022c68:	2200      	movcc	r2, #0
 8022c6a:	18a3      	adds	r3, r4, r2
 8022c6c:	50a7      	str	r7, [r4, r2]
 8022c6e:	b107      	cbz	r7, 8022c72 <rshift+0x68>
 8022c70:	3304      	adds	r3, #4
 8022c72:	1b1a      	subs	r2, r3, r4
 8022c74:	42a3      	cmp	r3, r4
 8022c76:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8022c7a:	bf08      	it	eq
 8022c7c:	2300      	moveq	r3, #0
 8022c7e:	6102      	str	r2, [r0, #16]
 8022c80:	bf08      	it	eq
 8022c82:	6143      	streq	r3, [r0, #20]
 8022c84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022c88:	f8dc c000 	ldr.w	ip, [ip]
 8022c8c:	fa0c fc08 	lsl.w	ip, ip, r8
 8022c90:	ea4c 0707 	orr.w	r7, ip, r7
 8022c94:	f849 7b04 	str.w	r7, [r9], #4
 8022c98:	f85e 7b04 	ldr.w	r7, [lr], #4
 8022c9c:	40cf      	lsrs	r7, r1
 8022c9e:	e7da      	b.n	8022c56 <rshift+0x4c>
 8022ca0:	f851 cb04 	ldr.w	ip, [r1], #4
 8022ca4:	f847 cf04 	str.w	ip, [r7, #4]!
 8022ca8:	e7c3      	b.n	8022c32 <rshift+0x28>
 8022caa:	4623      	mov	r3, r4
 8022cac:	e7e1      	b.n	8022c72 <rshift+0x68>

08022cae <__hexdig_fun>:
 8022cae:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8022cb2:	2b09      	cmp	r3, #9
 8022cb4:	d802      	bhi.n	8022cbc <__hexdig_fun+0xe>
 8022cb6:	3820      	subs	r0, #32
 8022cb8:	b2c0      	uxtb	r0, r0
 8022cba:	4770      	bx	lr
 8022cbc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8022cc0:	2b05      	cmp	r3, #5
 8022cc2:	d801      	bhi.n	8022cc8 <__hexdig_fun+0x1a>
 8022cc4:	3847      	subs	r0, #71	; 0x47
 8022cc6:	e7f7      	b.n	8022cb8 <__hexdig_fun+0xa>
 8022cc8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8022ccc:	2b05      	cmp	r3, #5
 8022cce:	d801      	bhi.n	8022cd4 <__hexdig_fun+0x26>
 8022cd0:	3827      	subs	r0, #39	; 0x27
 8022cd2:	e7f1      	b.n	8022cb8 <__hexdig_fun+0xa>
 8022cd4:	2000      	movs	r0, #0
 8022cd6:	4770      	bx	lr

08022cd8 <__gethex>:
 8022cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022cdc:	ed2d 8b02 	vpush	{d8}
 8022ce0:	b089      	sub	sp, #36	; 0x24
 8022ce2:	ee08 0a10 	vmov	s16, r0
 8022ce6:	9304      	str	r3, [sp, #16]
 8022ce8:	4bbc      	ldr	r3, [pc, #752]	; (8022fdc <__gethex+0x304>)
 8022cea:	681b      	ldr	r3, [r3, #0]
 8022cec:	9301      	str	r3, [sp, #4]
 8022cee:	4618      	mov	r0, r3
 8022cf0:	468b      	mov	fp, r1
 8022cf2:	4690      	mov	r8, r2
 8022cf4:	f7dd faf4 	bl	80002e0 <strlen>
 8022cf8:	9b01      	ldr	r3, [sp, #4]
 8022cfa:	f8db 2000 	ldr.w	r2, [fp]
 8022cfe:	4403      	add	r3, r0
 8022d00:	4682      	mov	sl, r0
 8022d02:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8022d06:	9305      	str	r3, [sp, #20]
 8022d08:	1c93      	adds	r3, r2, #2
 8022d0a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8022d0e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8022d12:	32fe      	adds	r2, #254	; 0xfe
 8022d14:	18d1      	adds	r1, r2, r3
 8022d16:	461f      	mov	r7, r3
 8022d18:	f813 0b01 	ldrb.w	r0, [r3], #1
 8022d1c:	9100      	str	r1, [sp, #0]
 8022d1e:	2830      	cmp	r0, #48	; 0x30
 8022d20:	d0f8      	beq.n	8022d14 <__gethex+0x3c>
 8022d22:	f7ff ffc4 	bl	8022cae <__hexdig_fun>
 8022d26:	4604      	mov	r4, r0
 8022d28:	2800      	cmp	r0, #0
 8022d2a:	d13a      	bne.n	8022da2 <__gethex+0xca>
 8022d2c:	9901      	ldr	r1, [sp, #4]
 8022d2e:	4652      	mov	r2, sl
 8022d30:	4638      	mov	r0, r7
 8022d32:	f7fe f81f 	bl	8020d74 <strncmp>
 8022d36:	4605      	mov	r5, r0
 8022d38:	2800      	cmp	r0, #0
 8022d3a:	d168      	bne.n	8022e0e <__gethex+0x136>
 8022d3c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8022d40:	eb07 060a 	add.w	r6, r7, sl
 8022d44:	f7ff ffb3 	bl	8022cae <__hexdig_fun>
 8022d48:	2800      	cmp	r0, #0
 8022d4a:	d062      	beq.n	8022e12 <__gethex+0x13a>
 8022d4c:	4633      	mov	r3, r6
 8022d4e:	7818      	ldrb	r0, [r3, #0]
 8022d50:	2830      	cmp	r0, #48	; 0x30
 8022d52:	461f      	mov	r7, r3
 8022d54:	f103 0301 	add.w	r3, r3, #1
 8022d58:	d0f9      	beq.n	8022d4e <__gethex+0x76>
 8022d5a:	f7ff ffa8 	bl	8022cae <__hexdig_fun>
 8022d5e:	2301      	movs	r3, #1
 8022d60:	fab0 f480 	clz	r4, r0
 8022d64:	0964      	lsrs	r4, r4, #5
 8022d66:	4635      	mov	r5, r6
 8022d68:	9300      	str	r3, [sp, #0]
 8022d6a:	463a      	mov	r2, r7
 8022d6c:	4616      	mov	r6, r2
 8022d6e:	3201      	adds	r2, #1
 8022d70:	7830      	ldrb	r0, [r6, #0]
 8022d72:	f7ff ff9c 	bl	8022cae <__hexdig_fun>
 8022d76:	2800      	cmp	r0, #0
 8022d78:	d1f8      	bne.n	8022d6c <__gethex+0x94>
 8022d7a:	9901      	ldr	r1, [sp, #4]
 8022d7c:	4652      	mov	r2, sl
 8022d7e:	4630      	mov	r0, r6
 8022d80:	f7fd fff8 	bl	8020d74 <strncmp>
 8022d84:	b980      	cbnz	r0, 8022da8 <__gethex+0xd0>
 8022d86:	b94d      	cbnz	r5, 8022d9c <__gethex+0xc4>
 8022d88:	eb06 050a 	add.w	r5, r6, sl
 8022d8c:	462a      	mov	r2, r5
 8022d8e:	4616      	mov	r6, r2
 8022d90:	3201      	adds	r2, #1
 8022d92:	7830      	ldrb	r0, [r6, #0]
 8022d94:	f7ff ff8b 	bl	8022cae <__hexdig_fun>
 8022d98:	2800      	cmp	r0, #0
 8022d9a:	d1f8      	bne.n	8022d8e <__gethex+0xb6>
 8022d9c:	1bad      	subs	r5, r5, r6
 8022d9e:	00ad      	lsls	r5, r5, #2
 8022da0:	e004      	b.n	8022dac <__gethex+0xd4>
 8022da2:	2400      	movs	r4, #0
 8022da4:	4625      	mov	r5, r4
 8022da6:	e7e0      	b.n	8022d6a <__gethex+0x92>
 8022da8:	2d00      	cmp	r5, #0
 8022daa:	d1f7      	bne.n	8022d9c <__gethex+0xc4>
 8022dac:	7833      	ldrb	r3, [r6, #0]
 8022dae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8022db2:	2b50      	cmp	r3, #80	; 0x50
 8022db4:	d13b      	bne.n	8022e2e <__gethex+0x156>
 8022db6:	7873      	ldrb	r3, [r6, #1]
 8022db8:	2b2b      	cmp	r3, #43	; 0x2b
 8022dba:	d02c      	beq.n	8022e16 <__gethex+0x13e>
 8022dbc:	2b2d      	cmp	r3, #45	; 0x2d
 8022dbe:	d02e      	beq.n	8022e1e <__gethex+0x146>
 8022dc0:	1c71      	adds	r1, r6, #1
 8022dc2:	f04f 0900 	mov.w	r9, #0
 8022dc6:	7808      	ldrb	r0, [r1, #0]
 8022dc8:	f7ff ff71 	bl	8022cae <__hexdig_fun>
 8022dcc:	1e43      	subs	r3, r0, #1
 8022dce:	b2db      	uxtb	r3, r3
 8022dd0:	2b18      	cmp	r3, #24
 8022dd2:	d82c      	bhi.n	8022e2e <__gethex+0x156>
 8022dd4:	f1a0 0210 	sub.w	r2, r0, #16
 8022dd8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8022ddc:	f7ff ff67 	bl	8022cae <__hexdig_fun>
 8022de0:	1e43      	subs	r3, r0, #1
 8022de2:	b2db      	uxtb	r3, r3
 8022de4:	2b18      	cmp	r3, #24
 8022de6:	d91d      	bls.n	8022e24 <__gethex+0x14c>
 8022de8:	f1b9 0f00 	cmp.w	r9, #0
 8022dec:	d000      	beq.n	8022df0 <__gethex+0x118>
 8022dee:	4252      	negs	r2, r2
 8022df0:	4415      	add	r5, r2
 8022df2:	f8cb 1000 	str.w	r1, [fp]
 8022df6:	b1e4      	cbz	r4, 8022e32 <__gethex+0x15a>
 8022df8:	9b00      	ldr	r3, [sp, #0]
 8022dfa:	2b00      	cmp	r3, #0
 8022dfc:	bf14      	ite	ne
 8022dfe:	2700      	movne	r7, #0
 8022e00:	2706      	moveq	r7, #6
 8022e02:	4638      	mov	r0, r7
 8022e04:	b009      	add	sp, #36	; 0x24
 8022e06:	ecbd 8b02 	vpop	{d8}
 8022e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022e0e:	463e      	mov	r6, r7
 8022e10:	4625      	mov	r5, r4
 8022e12:	2401      	movs	r4, #1
 8022e14:	e7ca      	b.n	8022dac <__gethex+0xd4>
 8022e16:	f04f 0900 	mov.w	r9, #0
 8022e1a:	1cb1      	adds	r1, r6, #2
 8022e1c:	e7d3      	b.n	8022dc6 <__gethex+0xee>
 8022e1e:	f04f 0901 	mov.w	r9, #1
 8022e22:	e7fa      	b.n	8022e1a <__gethex+0x142>
 8022e24:	230a      	movs	r3, #10
 8022e26:	fb03 0202 	mla	r2, r3, r2, r0
 8022e2a:	3a10      	subs	r2, #16
 8022e2c:	e7d4      	b.n	8022dd8 <__gethex+0x100>
 8022e2e:	4631      	mov	r1, r6
 8022e30:	e7df      	b.n	8022df2 <__gethex+0x11a>
 8022e32:	1bf3      	subs	r3, r6, r7
 8022e34:	3b01      	subs	r3, #1
 8022e36:	4621      	mov	r1, r4
 8022e38:	2b07      	cmp	r3, #7
 8022e3a:	dc0b      	bgt.n	8022e54 <__gethex+0x17c>
 8022e3c:	ee18 0a10 	vmov	r0, s16
 8022e40:	f000 fadc 	bl	80233fc <_Balloc>
 8022e44:	4604      	mov	r4, r0
 8022e46:	b940      	cbnz	r0, 8022e5a <__gethex+0x182>
 8022e48:	4b65      	ldr	r3, [pc, #404]	; (8022fe0 <__gethex+0x308>)
 8022e4a:	4602      	mov	r2, r0
 8022e4c:	21de      	movs	r1, #222	; 0xde
 8022e4e:	4865      	ldr	r0, [pc, #404]	; (8022fe4 <__gethex+0x30c>)
 8022e50:	f7fe fee0 	bl	8021c14 <__assert_func>
 8022e54:	3101      	adds	r1, #1
 8022e56:	105b      	asrs	r3, r3, #1
 8022e58:	e7ee      	b.n	8022e38 <__gethex+0x160>
 8022e5a:	f100 0914 	add.w	r9, r0, #20
 8022e5e:	f04f 0b00 	mov.w	fp, #0
 8022e62:	f1ca 0301 	rsb	r3, sl, #1
 8022e66:	f8cd 9008 	str.w	r9, [sp, #8]
 8022e6a:	f8cd b000 	str.w	fp, [sp]
 8022e6e:	9306      	str	r3, [sp, #24]
 8022e70:	42b7      	cmp	r7, r6
 8022e72:	d340      	bcc.n	8022ef6 <__gethex+0x21e>
 8022e74:	9802      	ldr	r0, [sp, #8]
 8022e76:	9b00      	ldr	r3, [sp, #0]
 8022e78:	f840 3b04 	str.w	r3, [r0], #4
 8022e7c:	eba0 0009 	sub.w	r0, r0, r9
 8022e80:	1080      	asrs	r0, r0, #2
 8022e82:	0146      	lsls	r6, r0, #5
 8022e84:	6120      	str	r0, [r4, #16]
 8022e86:	4618      	mov	r0, r3
 8022e88:	f000 fbae 	bl	80235e8 <__hi0bits>
 8022e8c:	1a30      	subs	r0, r6, r0
 8022e8e:	f8d8 6000 	ldr.w	r6, [r8]
 8022e92:	42b0      	cmp	r0, r6
 8022e94:	dd63      	ble.n	8022f5e <__gethex+0x286>
 8022e96:	1b87      	subs	r7, r0, r6
 8022e98:	4639      	mov	r1, r7
 8022e9a:	4620      	mov	r0, r4
 8022e9c:	f000 ff49 	bl	8023d32 <__any_on>
 8022ea0:	4682      	mov	sl, r0
 8022ea2:	b1a8      	cbz	r0, 8022ed0 <__gethex+0x1f8>
 8022ea4:	1e7b      	subs	r3, r7, #1
 8022ea6:	1159      	asrs	r1, r3, #5
 8022ea8:	f003 021f 	and.w	r2, r3, #31
 8022eac:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8022eb0:	f04f 0a01 	mov.w	sl, #1
 8022eb4:	fa0a f202 	lsl.w	r2, sl, r2
 8022eb8:	420a      	tst	r2, r1
 8022eba:	d009      	beq.n	8022ed0 <__gethex+0x1f8>
 8022ebc:	4553      	cmp	r3, sl
 8022ebe:	dd05      	ble.n	8022ecc <__gethex+0x1f4>
 8022ec0:	1eb9      	subs	r1, r7, #2
 8022ec2:	4620      	mov	r0, r4
 8022ec4:	f000 ff35 	bl	8023d32 <__any_on>
 8022ec8:	2800      	cmp	r0, #0
 8022eca:	d145      	bne.n	8022f58 <__gethex+0x280>
 8022ecc:	f04f 0a02 	mov.w	sl, #2
 8022ed0:	4639      	mov	r1, r7
 8022ed2:	4620      	mov	r0, r4
 8022ed4:	f7ff fe99 	bl	8022c0a <rshift>
 8022ed8:	443d      	add	r5, r7
 8022eda:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8022ede:	42ab      	cmp	r3, r5
 8022ee0:	da4c      	bge.n	8022f7c <__gethex+0x2a4>
 8022ee2:	ee18 0a10 	vmov	r0, s16
 8022ee6:	4621      	mov	r1, r4
 8022ee8:	f000 fac8 	bl	802347c <_Bfree>
 8022eec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022eee:	2300      	movs	r3, #0
 8022ef0:	6013      	str	r3, [r2, #0]
 8022ef2:	27a3      	movs	r7, #163	; 0xa3
 8022ef4:	e785      	b.n	8022e02 <__gethex+0x12a>
 8022ef6:	1e73      	subs	r3, r6, #1
 8022ef8:	9a05      	ldr	r2, [sp, #20]
 8022efa:	9303      	str	r3, [sp, #12]
 8022efc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8022f00:	4293      	cmp	r3, r2
 8022f02:	d019      	beq.n	8022f38 <__gethex+0x260>
 8022f04:	f1bb 0f20 	cmp.w	fp, #32
 8022f08:	d107      	bne.n	8022f1a <__gethex+0x242>
 8022f0a:	9b02      	ldr	r3, [sp, #8]
 8022f0c:	9a00      	ldr	r2, [sp, #0]
 8022f0e:	f843 2b04 	str.w	r2, [r3], #4
 8022f12:	9302      	str	r3, [sp, #8]
 8022f14:	2300      	movs	r3, #0
 8022f16:	9300      	str	r3, [sp, #0]
 8022f18:	469b      	mov	fp, r3
 8022f1a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8022f1e:	f7ff fec6 	bl	8022cae <__hexdig_fun>
 8022f22:	9b00      	ldr	r3, [sp, #0]
 8022f24:	f000 000f 	and.w	r0, r0, #15
 8022f28:	fa00 f00b 	lsl.w	r0, r0, fp
 8022f2c:	4303      	orrs	r3, r0
 8022f2e:	9300      	str	r3, [sp, #0]
 8022f30:	f10b 0b04 	add.w	fp, fp, #4
 8022f34:	9b03      	ldr	r3, [sp, #12]
 8022f36:	e00d      	b.n	8022f54 <__gethex+0x27c>
 8022f38:	9b03      	ldr	r3, [sp, #12]
 8022f3a:	9a06      	ldr	r2, [sp, #24]
 8022f3c:	4413      	add	r3, r2
 8022f3e:	42bb      	cmp	r3, r7
 8022f40:	d3e0      	bcc.n	8022f04 <__gethex+0x22c>
 8022f42:	4618      	mov	r0, r3
 8022f44:	9901      	ldr	r1, [sp, #4]
 8022f46:	9307      	str	r3, [sp, #28]
 8022f48:	4652      	mov	r2, sl
 8022f4a:	f7fd ff13 	bl	8020d74 <strncmp>
 8022f4e:	9b07      	ldr	r3, [sp, #28]
 8022f50:	2800      	cmp	r0, #0
 8022f52:	d1d7      	bne.n	8022f04 <__gethex+0x22c>
 8022f54:	461e      	mov	r6, r3
 8022f56:	e78b      	b.n	8022e70 <__gethex+0x198>
 8022f58:	f04f 0a03 	mov.w	sl, #3
 8022f5c:	e7b8      	b.n	8022ed0 <__gethex+0x1f8>
 8022f5e:	da0a      	bge.n	8022f76 <__gethex+0x29e>
 8022f60:	1a37      	subs	r7, r6, r0
 8022f62:	4621      	mov	r1, r4
 8022f64:	ee18 0a10 	vmov	r0, s16
 8022f68:	463a      	mov	r2, r7
 8022f6a:	f000 fca3 	bl	80238b4 <__lshift>
 8022f6e:	1bed      	subs	r5, r5, r7
 8022f70:	4604      	mov	r4, r0
 8022f72:	f100 0914 	add.w	r9, r0, #20
 8022f76:	f04f 0a00 	mov.w	sl, #0
 8022f7a:	e7ae      	b.n	8022eda <__gethex+0x202>
 8022f7c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8022f80:	42a8      	cmp	r0, r5
 8022f82:	dd72      	ble.n	802306a <__gethex+0x392>
 8022f84:	1b45      	subs	r5, r0, r5
 8022f86:	42ae      	cmp	r6, r5
 8022f88:	dc36      	bgt.n	8022ff8 <__gethex+0x320>
 8022f8a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8022f8e:	2b02      	cmp	r3, #2
 8022f90:	d02a      	beq.n	8022fe8 <__gethex+0x310>
 8022f92:	2b03      	cmp	r3, #3
 8022f94:	d02c      	beq.n	8022ff0 <__gethex+0x318>
 8022f96:	2b01      	cmp	r3, #1
 8022f98:	d115      	bne.n	8022fc6 <__gethex+0x2ee>
 8022f9a:	42ae      	cmp	r6, r5
 8022f9c:	d113      	bne.n	8022fc6 <__gethex+0x2ee>
 8022f9e:	2e01      	cmp	r6, #1
 8022fa0:	d10b      	bne.n	8022fba <__gethex+0x2e2>
 8022fa2:	9a04      	ldr	r2, [sp, #16]
 8022fa4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8022fa8:	6013      	str	r3, [r2, #0]
 8022faa:	2301      	movs	r3, #1
 8022fac:	6123      	str	r3, [r4, #16]
 8022fae:	f8c9 3000 	str.w	r3, [r9]
 8022fb2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022fb4:	2762      	movs	r7, #98	; 0x62
 8022fb6:	601c      	str	r4, [r3, #0]
 8022fb8:	e723      	b.n	8022e02 <__gethex+0x12a>
 8022fba:	1e71      	subs	r1, r6, #1
 8022fbc:	4620      	mov	r0, r4
 8022fbe:	f000 feb8 	bl	8023d32 <__any_on>
 8022fc2:	2800      	cmp	r0, #0
 8022fc4:	d1ed      	bne.n	8022fa2 <__gethex+0x2ca>
 8022fc6:	ee18 0a10 	vmov	r0, s16
 8022fca:	4621      	mov	r1, r4
 8022fcc:	f000 fa56 	bl	802347c <_Bfree>
 8022fd0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022fd2:	2300      	movs	r3, #0
 8022fd4:	6013      	str	r3, [r2, #0]
 8022fd6:	2750      	movs	r7, #80	; 0x50
 8022fd8:	e713      	b.n	8022e02 <__gethex+0x12a>
 8022fda:	bf00      	nop
 8022fdc:	080295e0 	.word	0x080295e0
 8022fe0:	08029500 	.word	0x08029500
 8022fe4:	08029574 	.word	0x08029574
 8022fe8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022fea:	2b00      	cmp	r3, #0
 8022fec:	d1eb      	bne.n	8022fc6 <__gethex+0x2ee>
 8022fee:	e7d8      	b.n	8022fa2 <__gethex+0x2ca>
 8022ff0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022ff2:	2b00      	cmp	r3, #0
 8022ff4:	d1d5      	bne.n	8022fa2 <__gethex+0x2ca>
 8022ff6:	e7e6      	b.n	8022fc6 <__gethex+0x2ee>
 8022ff8:	1e6f      	subs	r7, r5, #1
 8022ffa:	f1ba 0f00 	cmp.w	sl, #0
 8022ffe:	d131      	bne.n	8023064 <__gethex+0x38c>
 8023000:	b127      	cbz	r7, 802300c <__gethex+0x334>
 8023002:	4639      	mov	r1, r7
 8023004:	4620      	mov	r0, r4
 8023006:	f000 fe94 	bl	8023d32 <__any_on>
 802300a:	4682      	mov	sl, r0
 802300c:	117b      	asrs	r3, r7, #5
 802300e:	2101      	movs	r1, #1
 8023010:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8023014:	f007 071f 	and.w	r7, r7, #31
 8023018:	fa01 f707 	lsl.w	r7, r1, r7
 802301c:	421f      	tst	r7, r3
 802301e:	4629      	mov	r1, r5
 8023020:	4620      	mov	r0, r4
 8023022:	bf18      	it	ne
 8023024:	f04a 0a02 	orrne.w	sl, sl, #2
 8023028:	1b76      	subs	r6, r6, r5
 802302a:	f7ff fdee 	bl	8022c0a <rshift>
 802302e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8023032:	2702      	movs	r7, #2
 8023034:	f1ba 0f00 	cmp.w	sl, #0
 8023038:	d048      	beq.n	80230cc <__gethex+0x3f4>
 802303a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802303e:	2b02      	cmp	r3, #2
 8023040:	d015      	beq.n	802306e <__gethex+0x396>
 8023042:	2b03      	cmp	r3, #3
 8023044:	d017      	beq.n	8023076 <__gethex+0x39e>
 8023046:	2b01      	cmp	r3, #1
 8023048:	d109      	bne.n	802305e <__gethex+0x386>
 802304a:	f01a 0f02 	tst.w	sl, #2
 802304e:	d006      	beq.n	802305e <__gethex+0x386>
 8023050:	f8d9 0000 	ldr.w	r0, [r9]
 8023054:	ea4a 0a00 	orr.w	sl, sl, r0
 8023058:	f01a 0f01 	tst.w	sl, #1
 802305c:	d10e      	bne.n	802307c <__gethex+0x3a4>
 802305e:	f047 0710 	orr.w	r7, r7, #16
 8023062:	e033      	b.n	80230cc <__gethex+0x3f4>
 8023064:	f04f 0a01 	mov.w	sl, #1
 8023068:	e7d0      	b.n	802300c <__gethex+0x334>
 802306a:	2701      	movs	r7, #1
 802306c:	e7e2      	b.n	8023034 <__gethex+0x35c>
 802306e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023070:	f1c3 0301 	rsb	r3, r3, #1
 8023074:	9315      	str	r3, [sp, #84]	; 0x54
 8023076:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023078:	2b00      	cmp	r3, #0
 802307a:	d0f0      	beq.n	802305e <__gethex+0x386>
 802307c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8023080:	f104 0314 	add.w	r3, r4, #20
 8023084:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8023088:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 802308c:	f04f 0c00 	mov.w	ip, #0
 8023090:	4618      	mov	r0, r3
 8023092:	f853 2b04 	ldr.w	r2, [r3], #4
 8023096:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 802309a:	d01c      	beq.n	80230d6 <__gethex+0x3fe>
 802309c:	3201      	adds	r2, #1
 802309e:	6002      	str	r2, [r0, #0]
 80230a0:	2f02      	cmp	r7, #2
 80230a2:	f104 0314 	add.w	r3, r4, #20
 80230a6:	d13f      	bne.n	8023128 <__gethex+0x450>
 80230a8:	f8d8 2000 	ldr.w	r2, [r8]
 80230ac:	3a01      	subs	r2, #1
 80230ae:	42b2      	cmp	r2, r6
 80230b0:	d10a      	bne.n	80230c8 <__gethex+0x3f0>
 80230b2:	1171      	asrs	r1, r6, #5
 80230b4:	2201      	movs	r2, #1
 80230b6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80230ba:	f006 061f 	and.w	r6, r6, #31
 80230be:	fa02 f606 	lsl.w	r6, r2, r6
 80230c2:	421e      	tst	r6, r3
 80230c4:	bf18      	it	ne
 80230c6:	4617      	movne	r7, r2
 80230c8:	f047 0720 	orr.w	r7, r7, #32
 80230cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80230ce:	601c      	str	r4, [r3, #0]
 80230d0:	9b04      	ldr	r3, [sp, #16]
 80230d2:	601d      	str	r5, [r3, #0]
 80230d4:	e695      	b.n	8022e02 <__gethex+0x12a>
 80230d6:	4299      	cmp	r1, r3
 80230d8:	f843 cc04 	str.w	ip, [r3, #-4]
 80230dc:	d8d8      	bhi.n	8023090 <__gethex+0x3b8>
 80230de:	68a3      	ldr	r3, [r4, #8]
 80230e0:	459b      	cmp	fp, r3
 80230e2:	db19      	blt.n	8023118 <__gethex+0x440>
 80230e4:	6861      	ldr	r1, [r4, #4]
 80230e6:	ee18 0a10 	vmov	r0, s16
 80230ea:	3101      	adds	r1, #1
 80230ec:	f000 f986 	bl	80233fc <_Balloc>
 80230f0:	4681      	mov	r9, r0
 80230f2:	b918      	cbnz	r0, 80230fc <__gethex+0x424>
 80230f4:	4b1a      	ldr	r3, [pc, #104]	; (8023160 <__gethex+0x488>)
 80230f6:	4602      	mov	r2, r0
 80230f8:	2184      	movs	r1, #132	; 0x84
 80230fa:	e6a8      	b.n	8022e4e <__gethex+0x176>
 80230fc:	6922      	ldr	r2, [r4, #16]
 80230fe:	3202      	adds	r2, #2
 8023100:	f104 010c 	add.w	r1, r4, #12
 8023104:	0092      	lsls	r2, r2, #2
 8023106:	300c      	adds	r0, #12
 8023108:	f7fc fe0e 	bl	801fd28 <memcpy>
 802310c:	4621      	mov	r1, r4
 802310e:	ee18 0a10 	vmov	r0, s16
 8023112:	f000 f9b3 	bl	802347c <_Bfree>
 8023116:	464c      	mov	r4, r9
 8023118:	6923      	ldr	r3, [r4, #16]
 802311a:	1c5a      	adds	r2, r3, #1
 802311c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8023120:	6122      	str	r2, [r4, #16]
 8023122:	2201      	movs	r2, #1
 8023124:	615a      	str	r2, [r3, #20]
 8023126:	e7bb      	b.n	80230a0 <__gethex+0x3c8>
 8023128:	6922      	ldr	r2, [r4, #16]
 802312a:	455a      	cmp	r2, fp
 802312c:	dd0b      	ble.n	8023146 <__gethex+0x46e>
 802312e:	2101      	movs	r1, #1
 8023130:	4620      	mov	r0, r4
 8023132:	f7ff fd6a 	bl	8022c0a <rshift>
 8023136:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802313a:	3501      	adds	r5, #1
 802313c:	42ab      	cmp	r3, r5
 802313e:	f6ff aed0 	blt.w	8022ee2 <__gethex+0x20a>
 8023142:	2701      	movs	r7, #1
 8023144:	e7c0      	b.n	80230c8 <__gethex+0x3f0>
 8023146:	f016 061f 	ands.w	r6, r6, #31
 802314a:	d0fa      	beq.n	8023142 <__gethex+0x46a>
 802314c:	449a      	add	sl, r3
 802314e:	f1c6 0620 	rsb	r6, r6, #32
 8023152:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8023156:	f000 fa47 	bl	80235e8 <__hi0bits>
 802315a:	42b0      	cmp	r0, r6
 802315c:	dbe7      	blt.n	802312e <__gethex+0x456>
 802315e:	e7f0      	b.n	8023142 <__gethex+0x46a>
 8023160:	08029500 	.word	0x08029500

08023164 <L_shift>:
 8023164:	f1c2 0208 	rsb	r2, r2, #8
 8023168:	0092      	lsls	r2, r2, #2
 802316a:	b570      	push	{r4, r5, r6, lr}
 802316c:	f1c2 0620 	rsb	r6, r2, #32
 8023170:	6843      	ldr	r3, [r0, #4]
 8023172:	6804      	ldr	r4, [r0, #0]
 8023174:	fa03 f506 	lsl.w	r5, r3, r6
 8023178:	432c      	orrs	r4, r5
 802317a:	40d3      	lsrs	r3, r2
 802317c:	6004      	str	r4, [r0, #0]
 802317e:	f840 3f04 	str.w	r3, [r0, #4]!
 8023182:	4288      	cmp	r0, r1
 8023184:	d3f4      	bcc.n	8023170 <L_shift+0xc>
 8023186:	bd70      	pop	{r4, r5, r6, pc}

08023188 <__match>:
 8023188:	b530      	push	{r4, r5, lr}
 802318a:	6803      	ldr	r3, [r0, #0]
 802318c:	3301      	adds	r3, #1
 802318e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8023192:	b914      	cbnz	r4, 802319a <__match+0x12>
 8023194:	6003      	str	r3, [r0, #0]
 8023196:	2001      	movs	r0, #1
 8023198:	bd30      	pop	{r4, r5, pc}
 802319a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802319e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80231a2:	2d19      	cmp	r5, #25
 80231a4:	bf98      	it	ls
 80231a6:	3220      	addls	r2, #32
 80231a8:	42a2      	cmp	r2, r4
 80231aa:	d0f0      	beq.n	802318e <__match+0x6>
 80231ac:	2000      	movs	r0, #0
 80231ae:	e7f3      	b.n	8023198 <__match+0x10>

080231b0 <__hexnan>:
 80231b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80231b4:	680b      	ldr	r3, [r1, #0]
 80231b6:	6801      	ldr	r1, [r0, #0]
 80231b8:	115e      	asrs	r6, r3, #5
 80231ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80231be:	f013 031f 	ands.w	r3, r3, #31
 80231c2:	b087      	sub	sp, #28
 80231c4:	bf18      	it	ne
 80231c6:	3604      	addne	r6, #4
 80231c8:	2500      	movs	r5, #0
 80231ca:	1f37      	subs	r7, r6, #4
 80231cc:	4682      	mov	sl, r0
 80231ce:	4690      	mov	r8, r2
 80231d0:	9301      	str	r3, [sp, #4]
 80231d2:	f846 5c04 	str.w	r5, [r6, #-4]
 80231d6:	46b9      	mov	r9, r7
 80231d8:	463c      	mov	r4, r7
 80231da:	9502      	str	r5, [sp, #8]
 80231dc:	46ab      	mov	fp, r5
 80231de:	784a      	ldrb	r2, [r1, #1]
 80231e0:	1c4b      	adds	r3, r1, #1
 80231e2:	9303      	str	r3, [sp, #12]
 80231e4:	b342      	cbz	r2, 8023238 <__hexnan+0x88>
 80231e6:	4610      	mov	r0, r2
 80231e8:	9105      	str	r1, [sp, #20]
 80231ea:	9204      	str	r2, [sp, #16]
 80231ec:	f7ff fd5f 	bl	8022cae <__hexdig_fun>
 80231f0:	2800      	cmp	r0, #0
 80231f2:	d14f      	bne.n	8023294 <__hexnan+0xe4>
 80231f4:	9a04      	ldr	r2, [sp, #16]
 80231f6:	9905      	ldr	r1, [sp, #20]
 80231f8:	2a20      	cmp	r2, #32
 80231fa:	d818      	bhi.n	802322e <__hexnan+0x7e>
 80231fc:	9b02      	ldr	r3, [sp, #8]
 80231fe:	459b      	cmp	fp, r3
 8023200:	dd13      	ble.n	802322a <__hexnan+0x7a>
 8023202:	454c      	cmp	r4, r9
 8023204:	d206      	bcs.n	8023214 <__hexnan+0x64>
 8023206:	2d07      	cmp	r5, #7
 8023208:	dc04      	bgt.n	8023214 <__hexnan+0x64>
 802320a:	462a      	mov	r2, r5
 802320c:	4649      	mov	r1, r9
 802320e:	4620      	mov	r0, r4
 8023210:	f7ff ffa8 	bl	8023164 <L_shift>
 8023214:	4544      	cmp	r4, r8
 8023216:	d950      	bls.n	80232ba <__hexnan+0x10a>
 8023218:	2300      	movs	r3, #0
 802321a:	f1a4 0904 	sub.w	r9, r4, #4
 802321e:	f844 3c04 	str.w	r3, [r4, #-4]
 8023222:	f8cd b008 	str.w	fp, [sp, #8]
 8023226:	464c      	mov	r4, r9
 8023228:	461d      	mov	r5, r3
 802322a:	9903      	ldr	r1, [sp, #12]
 802322c:	e7d7      	b.n	80231de <__hexnan+0x2e>
 802322e:	2a29      	cmp	r2, #41	; 0x29
 8023230:	d156      	bne.n	80232e0 <__hexnan+0x130>
 8023232:	3102      	adds	r1, #2
 8023234:	f8ca 1000 	str.w	r1, [sl]
 8023238:	f1bb 0f00 	cmp.w	fp, #0
 802323c:	d050      	beq.n	80232e0 <__hexnan+0x130>
 802323e:	454c      	cmp	r4, r9
 8023240:	d206      	bcs.n	8023250 <__hexnan+0xa0>
 8023242:	2d07      	cmp	r5, #7
 8023244:	dc04      	bgt.n	8023250 <__hexnan+0xa0>
 8023246:	462a      	mov	r2, r5
 8023248:	4649      	mov	r1, r9
 802324a:	4620      	mov	r0, r4
 802324c:	f7ff ff8a 	bl	8023164 <L_shift>
 8023250:	4544      	cmp	r4, r8
 8023252:	d934      	bls.n	80232be <__hexnan+0x10e>
 8023254:	f1a8 0204 	sub.w	r2, r8, #4
 8023258:	4623      	mov	r3, r4
 802325a:	f853 1b04 	ldr.w	r1, [r3], #4
 802325e:	f842 1f04 	str.w	r1, [r2, #4]!
 8023262:	429f      	cmp	r7, r3
 8023264:	d2f9      	bcs.n	802325a <__hexnan+0xaa>
 8023266:	1b3b      	subs	r3, r7, r4
 8023268:	f023 0303 	bic.w	r3, r3, #3
 802326c:	3304      	adds	r3, #4
 802326e:	3401      	adds	r4, #1
 8023270:	3e03      	subs	r6, #3
 8023272:	42b4      	cmp	r4, r6
 8023274:	bf88      	it	hi
 8023276:	2304      	movhi	r3, #4
 8023278:	4443      	add	r3, r8
 802327a:	2200      	movs	r2, #0
 802327c:	f843 2b04 	str.w	r2, [r3], #4
 8023280:	429f      	cmp	r7, r3
 8023282:	d2fb      	bcs.n	802327c <__hexnan+0xcc>
 8023284:	683b      	ldr	r3, [r7, #0]
 8023286:	b91b      	cbnz	r3, 8023290 <__hexnan+0xe0>
 8023288:	4547      	cmp	r7, r8
 802328a:	d127      	bne.n	80232dc <__hexnan+0x12c>
 802328c:	2301      	movs	r3, #1
 802328e:	603b      	str	r3, [r7, #0]
 8023290:	2005      	movs	r0, #5
 8023292:	e026      	b.n	80232e2 <__hexnan+0x132>
 8023294:	3501      	adds	r5, #1
 8023296:	2d08      	cmp	r5, #8
 8023298:	f10b 0b01 	add.w	fp, fp, #1
 802329c:	dd06      	ble.n	80232ac <__hexnan+0xfc>
 802329e:	4544      	cmp	r4, r8
 80232a0:	d9c3      	bls.n	802322a <__hexnan+0x7a>
 80232a2:	2300      	movs	r3, #0
 80232a4:	f844 3c04 	str.w	r3, [r4, #-4]
 80232a8:	2501      	movs	r5, #1
 80232aa:	3c04      	subs	r4, #4
 80232ac:	6822      	ldr	r2, [r4, #0]
 80232ae:	f000 000f 	and.w	r0, r0, #15
 80232b2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80232b6:	6022      	str	r2, [r4, #0]
 80232b8:	e7b7      	b.n	802322a <__hexnan+0x7a>
 80232ba:	2508      	movs	r5, #8
 80232bc:	e7b5      	b.n	802322a <__hexnan+0x7a>
 80232be:	9b01      	ldr	r3, [sp, #4]
 80232c0:	2b00      	cmp	r3, #0
 80232c2:	d0df      	beq.n	8023284 <__hexnan+0xd4>
 80232c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80232c8:	f1c3 0320 	rsb	r3, r3, #32
 80232cc:	fa22 f303 	lsr.w	r3, r2, r3
 80232d0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80232d4:	401a      	ands	r2, r3
 80232d6:	f846 2c04 	str.w	r2, [r6, #-4]
 80232da:	e7d3      	b.n	8023284 <__hexnan+0xd4>
 80232dc:	3f04      	subs	r7, #4
 80232de:	e7d1      	b.n	8023284 <__hexnan+0xd4>
 80232e0:	2004      	movs	r0, #4
 80232e2:	b007      	add	sp, #28
 80232e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080232e8 <_localeconv_r>:
 80232e8:	4800      	ldr	r0, [pc, #0]	; (80232ec <_localeconv_r+0x4>)
 80232ea:	4770      	bx	lr
 80232ec:	2400399c 	.word	0x2400399c

080232f0 <__retarget_lock_init_recursive>:
 80232f0:	4770      	bx	lr

080232f2 <__retarget_lock_acquire_recursive>:
 80232f2:	4770      	bx	lr

080232f4 <__retarget_lock_release_recursive>:
 80232f4:	4770      	bx	lr

080232f6 <__swhatbuf_r>:
 80232f6:	b570      	push	{r4, r5, r6, lr}
 80232f8:	460e      	mov	r6, r1
 80232fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80232fe:	2900      	cmp	r1, #0
 8023300:	b096      	sub	sp, #88	; 0x58
 8023302:	4614      	mov	r4, r2
 8023304:	461d      	mov	r5, r3
 8023306:	da07      	bge.n	8023318 <__swhatbuf_r+0x22>
 8023308:	2300      	movs	r3, #0
 802330a:	602b      	str	r3, [r5, #0]
 802330c:	89b3      	ldrh	r3, [r6, #12]
 802330e:	061a      	lsls	r2, r3, #24
 8023310:	d410      	bmi.n	8023334 <__swhatbuf_r+0x3e>
 8023312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023316:	e00e      	b.n	8023336 <__swhatbuf_r+0x40>
 8023318:	466a      	mov	r2, sp
 802331a:	f001 f873 	bl	8024404 <_fstat_r>
 802331e:	2800      	cmp	r0, #0
 8023320:	dbf2      	blt.n	8023308 <__swhatbuf_r+0x12>
 8023322:	9a01      	ldr	r2, [sp, #4]
 8023324:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8023328:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802332c:	425a      	negs	r2, r3
 802332e:	415a      	adcs	r2, r3
 8023330:	602a      	str	r2, [r5, #0]
 8023332:	e7ee      	b.n	8023312 <__swhatbuf_r+0x1c>
 8023334:	2340      	movs	r3, #64	; 0x40
 8023336:	2000      	movs	r0, #0
 8023338:	6023      	str	r3, [r4, #0]
 802333a:	b016      	add	sp, #88	; 0x58
 802333c:	bd70      	pop	{r4, r5, r6, pc}
	...

08023340 <__smakebuf_r>:
 8023340:	898b      	ldrh	r3, [r1, #12]
 8023342:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8023344:	079d      	lsls	r5, r3, #30
 8023346:	4606      	mov	r6, r0
 8023348:	460c      	mov	r4, r1
 802334a:	d507      	bpl.n	802335c <__smakebuf_r+0x1c>
 802334c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8023350:	6023      	str	r3, [r4, #0]
 8023352:	6123      	str	r3, [r4, #16]
 8023354:	2301      	movs	r3, #1
 8023356:	6163      	str	r3, [r4, #20]
 8023358:	b002      	add	sp, #8
 802335a:	bd70      	pop	{r4, r5, r6, pc}
 802335c:	ab01      	add	r3, sp, #4
 802335e:	466a      	mov	r2, sp
 8023360:	f7ff ffc9 	bl	80232f6 <__swhatbuf_r>
 8023364:	9900      	ldr	r1, [sp, #0]
 8023366:	4605      	mov	r5, r0
 8023368:	4630      	mov	r0, r6
 802336a:	f7fc fd5d 	bl	801fe28 <_malloc_r>
 802336e:	b948      	cbnz	r0, 8023384 <__smakebuf_r+0x44>
 8023370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023374:	059a      	lsls	r2, r3, #22
 8023376:	d4ef      	bmi.n	8023358 <__smakebuf_r+0x18>
 8023378:	f023 0303 	bic.w	r3, r3, #3
 802337c:	f043 0302 	orr.w	r3, r3, #2
 8023380:	81a3      	strh	r3, [r4, #12]
 8023382:	e7e3      	b.n	802334c <__smakebuf_r+0xc>
 8023384:	4b0d      	ldr	r3, [pc, #52]	; (80233bc <__smakebuf_r+0x7c>)
 8023386:	62b3      	str	r3, [r6, #40]	; 0x28
 8023388:	89a3      	ldrh	r3, [r4, #12]
 802338a:	6020      	str	r0, [r4, #0]
 802338c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023390:	81a3      	strh	r3, [r4, #12]
 8023392:	9b00      	ldr	r3, [sp, #0]
 8023394:	6163      	str	r3, [r4, #20]
 8023396:	9b01      	ldr	r3, [sp, #4]
 8023398:	6120      	str	r0, [r4, #16]
 802339a:	b15b      	cbz	r3, 80233b4 <__smakebuf_r+0x74>
 802339c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80233a0:	4630      	mov	r0, r6
 80233a2:	f001 f841 	bl	8024428 <_isatty_r>
 80233a6:	b128      	cbz	r0, 80233b4 <__smakebuf_r+0x74>
 80233a8:	89a3      	ldrh	r3, [r4, #12]
 80233aa:	f023 0303 	bic.w	r3, r3, #3
 80233ae:	f043 0301 	orr.w	r3, r3, #1
 80233b2:	81a3      	strh	r3, [r4, #12]
 80233b4:	89a0      	ldrh	r0, [r4, #12]
 80233b6:	4305      	orrs	r5, r0
 80233b8:	81a5      	strh	r5, [r4, #12]
 80233ba:	e7cd      	b.n	8023358 <__smakebuf_r+0x18>
 80233bc:	08022a45 	.word	0x08022a45

080233c0 <__ascii_mbtowc>:
 80233c0:	b082      	sub	sp, #8
 80233c2:	b901      	cbnz	r1, 80233c6 <__ascii_mbtowc+0x6>
 80233c4:	a901      	add	r1, sp, #4
 80233c6:	b142      	cbz	r2, 80233da <__ascii_mbtowc+0x1a>
 80233c8:	b14b      	cbz	r3, 80233de <__ascii_mbtowc+0x1e>
 80233ca:	7813      	ldrb	r3, [r2, #0]
 80233cc:	600b      	str	r3, [r1, #0]
 80233ce:	7812      	ldrb	r2, [r2, #0]
 80233d0:	1e10      	subs	r0, r2, #0
 80233d2:	bf18      	it	ne
 80233d4:	2001      	movne	r0, #1
 80233d6:	b002      	add	sp, #8
 80233d8:	4770      	bx	lr
 80233da:	4610      	mov	r0, r2
 80233dc:	e7fb      	b.n	80233d6 <__ascii_mbtowc+0x16>
 80233de:	f06f 0001 	mvn.w	r0, #1
 80233e2:	e7f8      	b.n	80233d6 <__ascii_mbtowc+0x16>

080233e4 <__malloc_lock>:
 80233e4:	4801      	ldr	r0, [pc, #4]	; (80233ec <__malloc_lock+0x8>)
 80233e6:	f7ff bf84 	b.w	80232f2 <__retarget_lock_acquire_recursive>
 80233ea:	bf00      	nop
 80233ec:	2400b6b0 	.word	0x2400b6b0

080233f0 <__malloc_unlock>:
 80233f0:	4801      	ldr	r0, [pc, #4]	; (80233f8 <__malloc_unlock+0x8>)
 80233f2:	f7ff bf7f 	b.w	80232f4 <__retarget_lock_release_recursive>
 80233f6:	bf00      	nop
 80233f8:	2400b6b0 	.word	0x2400b6b0

080233fc <_Balloc>:
 80233fc:	b570      	push	{r4, r5, r6, lr}
 80233fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8023400:	4604      	mov	r4, r0
 8023402:	460d      	mov	r5, r1
 8023404:	b976      	cbnz	r6, 8023424 <_Balloc+0x28>
 8023406:	2010      	movs	r0, #16
 8023408:	f7fc fc78 	bl	801fcfc <malloc>
 802340c:	4602      	mov	r2, r0
 802340e:	6260      	str	r0, [r4, #36]	; 0x24
 8023410:	b920      	cbnz	r0, 802341c <_Balloc+0x20>
 8023412:	4b18      	ldr	r3, [pc, #96]	; (8023474 <_Balloc+0x78>)
 8023414:	4818      	ldr	r0, [pc, #96]	; (8023478 <_Balloc+0x7c>)
 8023416:	2166      	movs	r1, #102	; 0x66
 8023418:	f7fe fbfc 	bl	8021c14 <__assert_func>
 802341c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8023420:	6006      	str	r6, [r0, #0]
 8023422:	60c6      	str	r6, [r0, #12]
 8023424:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8023426:	68f3      	ldr	r3, [r6, #12]
 8023428:	b183      	cbz	r3, 802344c <_Balloc+0x50>
 802342a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802342c:	68db      	ldr	r3, [r3, #12]
 802342e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8023432:	b9b8      	cbnz	r0, 8023464 <_Balloc+0x68>
 8023434:	2101      	movs	r1, #1
 8023436:	fa01 f605 	lsl.w	r6, r1, r5
 802343a:	1d72      	adds	r2, r6, #5
 802343c:	0092      	lsls	r2, r2, #2
 802343e:	4620      	mov	r0, r4
 8023440:	f000 fc98 	bl	8023d74 <_calloc_r>
 8023444:	b160      	cbz	r0, 8023460 <_Balloc+0x64>
 8023446:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802344a:	e00e      	b.n	802346a <_Balloc+0x6e>
 802344c:	2221      	movs	r2, #33	; 0x21
 802344e:	2104      	movs	r1, #4
 8023450:	4620      	mov	r0, r4
 8023452:	f000 fc8f 	bl	8023d74 <_calloc_r>
 8023456:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023458:	60f0      	str	r0, [r6, #12]
 802345a:	68db      	ldr	r3, [r3, #12]
 802345c:	2b00      	cmp	r3, #0
 802345e:	d1e4      	bne.n	802342a <_Balloc+0x2e>
 8023460:	2000      	movs	r0, #0
 8023462:	bd70      	pop	{r4, r5, r6, pc}
 8023464:	6802      	ldr	r2, [r0, #0]
 8023466:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802346a:	2300      	movs	r3, #0
 802346c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8023470:	e7f7      	b.n	8023462 <_Balloc+0x66>
 8023472:	bf00      	nop
 8023474:	0802938d 	.word	0x0802938d
 8023478:	080295f4 	.word	0x080295f4

0802347c <_Bfree>:
 802347c:	b570      	push	{r4, r5, r6, lr}
 802347e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8023480:	4605      	mov	r5, r0
 8023482:	460c      	mov	r4, r1
 8023484:	b976      	cbnz	r6, 80234a4 <_Bfree+0x28>
 8023486:	2010      	movs	r0, #16
 8023488:	f7fc fc38 	bl	801fcfc <malloc>
 802348c:	4602      	mov	r2, r0
 802348e:	6268      	str	r0, [r5, #36]	; 0x24
 8023490:	b920      	cbnz	r0, 802349c <_Bfree+0x20>
 8023492:	4b09      	ldr	r3, [pc, #36]	; (80234b8 <_Bfree+0x3c>)
 8023494:	4809      	ldr	r0, [pc, #36]	; (80234bc <_Bfree+0x40>)
 8023496:	218a      	movs	r1, #138	; 0x8a
 8023498:	f7fe fbbc 	bl	8021c14 <__assert_func>
 802349c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80234a0:	6006      	str	r6, [r0, #0]
 80234a2:	60c6      	str	r6, [r0, #12]
 80234a4:	b13c      	cbz	r4, 80234b6 <_Bfree+0x3a>
 80234a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80234a8:	6862      	ldr	r2, [r4, #4]
 80234aa:	68db      	ldr	r3, [r3, #12]
 80234ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80234b0:	6021      	str	r1, [r4, #0]
 80234b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80234b6:	bd70      	pop	{r4, r5, r6, pc}
 80234b8:	0802938d 	.word	0x0802938d
 80234bc:	080295f4 	.word	0x080295f4

080234c0 <__multadd>:
 80234c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80234c4:	690e      	ldr	r6, [r1, #16]
 80234c6:	4607      	mov	r7, r0
 80234c8:	4698      	mov	r8, r3
 80234ca:	460c      	mov	r4, r1
 80234cc:	f101 0014 	add.w	r0, r1, #20
 80234d0:	2300      	movs	r3, #0
 80234d2:	6805      	ldr	r5, [r0, #0]
 80234d4:	b2a9      	uxth	r1, r5
 80234d6:	fb02 8101 	mla	r1, r2, r1, r8
 80234da:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80234de:	0c2d      	lsrs	r5, r5, #16
 80234e0:	fb02 c505 	mla	r5, r2, r5, ip
 80234e4:	b289      	uxth	r1, r1
 80234e6:	3301      	adds	r3, #1
 80234e8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80234ec:	429e      	cmp	r6, r3
 80234ee:	f840 1b04 	str.w	r1, [r0], #4
 80234f2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80234f6:	dcec      	bgt.n	80234d2 <__multadd+0x12>
 80234f8:	f1b8 0f00 	cmp.w	r8, #0
 80234fc:	d022      	beq.n	8023544 <__multadd+0x84>
 80234fe:	68a3      	ldr	r3, [r4, #8]
 8023500:	42b3      	cmp	r3, r6
 8023502:	dc19      	bgt.n	8023538 <__multadd+0x78>
 8023504:	6861      	ldr	r1, [r4, #4]
 8023506:	4638      	mov	r0, r7
 8023508:	3101      	adds	r1, #1
 802350a:	f7ff ff77 	bl	80233fc <_Balloc>
 802350e:	4605      	mov	r5, r0
 8023510:	b928      	cbnz	r0, 802351e <__multadd+0x5e>
 8023512:	4602      	mov	r2, r0
 8023514:	4b0d      	ldr	r3, [pc, #52]	; (802354c <__multadd+0x8c>)
 8023516:	480e      	ldr	r0, [pc, #56]	; (8023550 <__multadd+0x90>)
 8023518:	21b5      	movs	r1, #181	; 0xb5
 802351a:	f7fe fb7b 	bl	8021c14 <__assert_func>
 802351e:	6922      	ldr	r2, [r4, #16]
 8023520:	3202      	adds	r2, #2
 8023522:	f104 010c 	add.w	r1, r4, #12
 8023526:	0092      	lsls	r2, r2, #2
 8023528:	300c      	adds	r0, #12
 802352a:	f7fc fbfd 	bl	801fd28 <memcpy>
 802352e:	4621      	mov	r1, r4
 8023530:	4638      	mov	r0, r7
 8023532:	f7ff ffa3 	bl	802347c <_Bfree>
 8023536:	462c      	mov	r4, r5
 8023538:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 802353c:	3601      	adds	r6, #1
 802353e:	f8c3 8014 	str.w	r8, [r3, #20]
 8023542:	6126      	str	r6, [r4, #16]
 8023544:	4620      	mov	r0, r4
 8023546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802354a:	bf00      	nop
 802354c:	08029500 	.word	0x08029500
 8023550:	080295f4 	.word	0x080295f4

08023554 <__s2b>:
 8023554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023558:	460c      	mov	r4, r1
 802355a:	4615      	mov	r5, r2
 802355c:	461f      	mov	r7, r3
 802355e:	2209      	movs	r2, #9
 8023560:	3308      	adds	r3, #8
 8023562:	4606      	mov	r6, r0
 8023564:	fb93 f3f2 	sdiv	r3, r3, r2
 8023568:	2100      	movs	r1, #0
 802356a:	2201      	movs	r2, #1
 802356c:	429a      	cmp	r2, r3
 802356e:	db09      	blt.n	8023584 <__s2b+0x30>
 8023570:	4630      	mov	r0, r6
 8023572:	f7ff ff43 	bl	80233fc <_Balloc>
 8023576:	b940      	cbnz	r0, 802358a <__s2b+0x36>
 8023578:	4602      	mov	r2, r0
 802357a:	4b19      	ldr	r3, [pc, #100]	; (80235e0 <__s2b+0x8c>)
 802357c:	4819      	ldr	r0, [pc, #100]	; (80235e4 <__s2b+0x90>)
 802357e:	21ce      	movs	r1, #206	; 0xce
 8023580:	f7fe fb48 	bl	8021c14 <__assert_func>
 8023584:	0052      	lsls	r2, r2, #1
 8023586:	3101      	adds	r1, #1
 8023588:	e7f0      	b.n	802356c <__s2b+0x18>
 802358a:	9b08      	ldr	r3, [sp, #32]
 802358c:	6143      	str	r3, [r0, #20]
 802358e:	2d09      	cmp	r5, #9
 8023590:	f04f 0301 	mov.w	r3, #1
 8023594:	6103      	str	r3, [r0, #16]
 8023596:	dd16      	ble.n	80235c6 <__s2b+0x72>
 8023598:	f104 0909 	add.w	r9, r4, #9
 802359c:	46c8      	mov	r8, r9
 802359e:	442c      	add	r4, r5
 80235a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80235a4:	4601      	mov	r1, r0
 80235a6:	3b30      	subs	r3, #48	; 0x30
 80235a8:	220a      	movs	r2, #10
 80235aa:	4630      	mov	r0, r6
 80235ac:	f7ff ff88 	bl	80234c0 <__multadd>
 80235b0:	45a0      	cmp	r8, r4
 80235b2:	d1f5      	bne.n	80235a0 <__s2b+0x4c>
 80235b4:	f1a5 0408 	sub.w	r4, r5, #8
 80235b8:	444c      	add	r4, r9
 80235ba:	1b2d      	subs	r5, r5, r4
 80235bc:	1963      	adds	r3, r4, r5
 80235be:	42bb      	cmp	r3, r7
 80235c0:	db04      	blt.n	80235cc <__s2b+0x78>
 80235c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80235c6:	340a      	adds	r4, #10
 80235c8:	2509      	movs	r5, #9
 80235ca:	e7f6      	b.n	80235ba <__s2b+0x66>
 80235cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80235d0:	4601      	mov	r1, r0
 80235d2:	3b30      	subs	r3, #48	; 0x30
 80235d4:	220a      	movs	r2, #10
 80235d6:	4630      	mov	r0, r6
 80235d8:	f7ff ff72 	bl	80234c0 <__multadd>
 80235dc:	e7ee      	b.n	80235bc <__s2b+0x68>
 80235de:	bf00      	nop
 80235e0:	08029500 	.word	0x08029500
 80235e4:	080295f4 	.word	0x080295f4

080235e8 <__hi0bits>:
 80235e8:	0c03      	lsrs	r3, r0, #16
 80235ea:	041b      	lsls	r3, r3, #16
 80235ec:	b9d3      	cbnz	r3, 8023624 <__hi0bits+0x3c>
 80235ee:	0400      	lsls	r0, r0, #16
 80235f0:	2310      	movs	r3, #16
 80235f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80235f6:	bf04      	itt	eq
 80235f8:	0200      	lsleq	r0, r0, #8
 80235fa:	3308      	addeq	r3, #8
 80235fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8023600:	bf04      	itt	eq
 8023602:	0100      	lsleq	r0, r0, #4
 8023604:	3304      	addeq	r3, #4
 8023606:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802360a:	bf04      	itt	eq
 802360c:	0080      	lsleq	r0, r0, #2
 802360e:	3302      	addeq	r3, #2
 8023610:	2800      	cmp	r0, #0
 8023612:	db05      	blt.n	8023620 <__hi0bits+0x38>
 8023614:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8023618:	f103 0301 	add.w	r3, r3, #1
 802361c:	bf08      	it	eq
 802361e:	2320      	moveq	r3, #32
 8023620:	4618      	mov	r0, r3
 8023622:	4770      	bx	lr
 8023624:	2300      	movs	r3, #0
 8023626:	e7e4      	b.n	80235f2 <__hi0bits+0xa>

08023628 <__lo0bits>:
 8023628:	6803      	ldr	r3, [r0, #0]
 802362a:	f013 0207 	ands.w	r2, r3, #7
 802362e:	4601      	mov	r1, r0
 8023630:	d00b      	beq.n	802364a <__lo0bits+0x22>
 8023632:	07da      	lsls	r2, r3, #31
 8023634:	d424      	bmi.n	8023680 <__lo0bits+0x58>
 8023636:	0798      	lsls	r0, r3, #30
 8023638:	bf49      	itett	mi
 802363a:	085b      	lsrmi	r3, r3, #1
 802363c:	089b      	lsrpl	r3, r3, #2
 802363e:	2001      	movmi	r0, #1
 8023640:	600b      	strmi	r3, [r1, #0]
 8023642:	bf5c      	itt	pl
 8023644:	600b      	strpl	r3, [r1, #0]
 8023646:	2002      	movpl	r0, #2
 8023648:	4770      	bx	lr
 802364a:	b298      	uxth	r0, r3
 802364c:	b9b0      	cbnz	r0, 802367c <__lo0bits+0x54>
 802364e:	0c1b      	lsrs	r3, r3, #16
 8023650:	2010      	movs	r0, #16
 8023652:	f013 0fff 	tst.w	r3, #255	; 0xff
 8023656:	bf04      	itt	eq
 8023658:	0a1b      	lsreq	r3, r3, #8
 802365a:	3008      	addeq	r0, #8
 802365c:	071a      	lsls	r2, r3, #28
 802365e:	bf04      	itt	eq
 8023660:	091b      	lsreq	r3, r3, #4
 8023662:	3004      	addeq	r0, #4
 8023664:	079a      	lsls	r2, r3, #30
 8023666:	bf04      	itt	eq
 8023668:	089b      	lsreq	r3, r3, #2
 802366a:	3002      	addeq	r0, #2
 802366c:	07da      	lsls	r2, r3, #31
 802366e:	d403      	bmi.n	8023678 <__lo0bits+0x50>
 8023670:	085b      	lsrs	r3, r3, #1
 8023672:	f100 0001 	add.w	r0, r0, #1
 8023676:	d005      	beq.n	8023684 <__lo0bits+0x5c>
 8023678:	600b      	str	r3, [r1, #0]
 802367a:	4770      	bx	lr
 802367c:	4610      	mov	r0, r2
 802367e:	e7e8      	b.n	8023652 <__lo0bits+0x2a>
 8023680:	2000      	movs	r0, #0
 8023682:	4770      	bx	lr
 8023684:	2020      	movs	r0, #32
 8023686:	4770      	bx	lr

08023688 <__i2b>:
 8023688:	b510      	push	{r4, lr}
 802368a:	460c      	mov	r4, r1
 802368c:	2101      	movs	r1, #1
 802368e:	f7ff feb5 	bl	80233fc <_Balloc>
 8023692:	4602      	mov	r2, r0
 8023694:	b928      	cbnz	r0, 80236a2 <__i2b+0x1a>
 8023696:	4b05      	ldr	r3, [pc, #20]	; (80236ac <__i2b+0x24>)
 8023698:	4805      	ldr	r0, [pc, #20]	; (80236b0 <__i2b+0x28>)
 802369a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 802369e:	f7fe fab9 	bl	8021c14 <__assert_func>
 80236a2:	2301      	movs	r3, #1
 80236a4:	6144      	str	r4, [r0, #20]
 80236a6:	6103      	str	r3, [r0, #16]
 80236a8:	bd10      	pop	{r4, pc}
 80236aa:	bf00      	nop
 80236ac:	08029500 	.word	0x08029500
 80236b0:	080295f4 	.word	0x080295f4

080236b4 <__multiply>:
 80236b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80236b8:	4614      	mov	r4, r2
 80236ba:	690a      	ldr	r2, [r1, #16]
 80236bc:	6923      	ldr	r3, [r4, #16]
 80236be:	429a      	cmp	r2, r3
 80236c0:	bfb8      	it	lt
 80236c2:	460b      	movlt	r3, r1
 80236c4:	460d      	mov	r5, r1
 80236c6:	bfbc      	itt	lt
 80236c8:	4625      	movlt	r5, r4
 80236ca:	461c      	movlt	r4, r3
 80236cc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80236d0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80236d4:	68ab      	ldr	r3, [r5, #8]
 80236d6:	6869      	ldr	r1, [r5, #4]
 80236d8:	eb0a 0709 	add.w	r7, sl, r9
 80236dc:	42bb      	cmp	r3, r7
 80236de:	b085      	sub	sp, #20
 80236e0:	bfb8      	it	lt
 80236e2:	3101      	addlt	r1, #1
 80236e4:	f7ff fe8a 	bl	80233fc <_Balloc>
 80236e8:	b930      	cbnz	r0, 80236f8 <__multiply+0x44>
 80236ea:	4602      	mov	r2, r0
 80236ec:	4b42      	ldr	r3, [pc, #264]	; (80237f8 <__multiply+0x144>)
 80236ee:	4843      	ldr	r0, [pc, #268]	; (80237fc <__multiply+0x148>)
 80236f0:	f240 115d 	movw	r1, #349	; 0x15d
 80236f4:	f7fe fa8e 	bl	8021c14 <__assert_func>
 80236f8:	f100 0614 	add.w	r6, r0, #20
 80236fc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8023700:	4633      	mov	r3, r6
 8023702:	2200      	movs	r2, #0
 8023704:	4543      	cmp	r3, r8
 8023706:	d31e      	bcc.n	8023746 <__multiply+0x92>
 8023708:	f105 0c14 	add.w	ip, r5, #20
 802370c:	f104 0314 	add.w	r3, r4, #20
 8023710:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8023714:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8023718:	9202      	str	r2, [sp, #8]
 802371a:	ebac 0205 	sub.w	r2, ip, r5
 802371e:	3a15      	subs	r2, #21
 8023720:	f022 0203 	bic.w	r2, r2, #3
 8023724:	3204      	adds	r2, #4
 8023726:	f105 0115 	add.w	r1, r5, #21
 802372a:	458c      	cmp	ip, r1
 802372c:	bf38      	it	cc
 802372e:	2204      	movcc	r2, #4
 8023730:	9201      	str	r2, [sp, #4]
 8023732:	9a02      	ldr	r2, [sp, #8]
 8023734:	9303      	str	r3, [sp, #12]
 8023736:	429a      	cmp	r2, r3
 8023738:	d808      	bhi.n	802374c <__multiply+0x98>
 802373a:	2f00      	cmp	r7, #0
 802373c:	dc55      	bgt.n	80237ea <__multiply+0x136>
 802373e:	6107      	str	r7, [r0, #16]
 8023740:	b005      	add	sp, #20
 8023742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023746:	f843 2b04 	str.w	r2, [r3], #4
 802374a:	e7db      	b.n	8023704 <__multiply+0x50>
 802374c:	f8b3 a000 	ldrh.w	sl, [r3]
 8023750:	f1ba 0f00 	cmp.w	sl, #0
 8023754:	d020      	beq.n	8023798 <__multiply+0xe4>
 8023756:	f105 0e14 	add.w	lr, r5, #20
 802375a:	46b1      	mov	r9, r6
 802375c:	2200      	movs	r2, #0
 802375e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8023762:	f8d9 b000 	ldr.w	fp, [r9]
 8023766:	b2a1      	uxth	r1, r4
 8023768:	fa1f fb8b 	uxth.w	fp, fp
 802376c:	fb0a b101 	mla	r1, sl, r1, fp
 8023770:	4411      	add	r1, r2
 8023772:	f8d9 2000 	ldr.w	r2, [r9]
 8023776:	0c24      	lsrs	r4, r4, #16
 8023778:	0c12      	lsrs	r2, r2, #16
 802377a:	fb0a 2404 	mla	r4, sl, r4, r2
 802377e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8023782:	b289      	uxth	r1, r1
 8023784:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8023788:	45f4      	cmp	ip, lr
 802378a:	f849 1b04 	str.w	r1, [r9], #4
 802378e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8023792:	d8e4      	bhi.n	802375e <__multiply+0xaa>
 8023794:	9901      	ldr	r1, [sp, #4]
 8023796:	5072      	str	r2, [r6, r1]
 8023798:	9a03      	ldr	r2, [sp, #12]
 802379a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802379e:	3304      	adds	r3, #4
 80237a0:	f1b9 0f00 	cmp.w	r9, #0
 80237a4:	d01f      	beq.n	80237e6 <__multiply+0x132>
 80237a6:	6834      	ldr	r4, [r6, #0]
 80237a8:	f105 0114 	add.w	r1, r5, #20
 80237ac:	46b6      	mov	lr, r6
 80237ae:	f04f 0a00 	mov.w	sl, #0
 80237b2:	880a      	ldrh	r2, [r1, #0]
 80237b4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80237b8:	fb09 b202 	mla	r2, r9, r2, fp
 80237bc:	4492      	add	sl, r2
 80237be:	b2a4      	uxth	r4, r4
 80237c0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80237c4:	f84e 4b04 	str.w	r4, [lr], #4
 80237c8:	f851 4b04 	ldr.w	r4, [r1], #4
 80237cc:	f8be 2000 	ldrh.w	r2, [lr]
 80237d0:	0c24      	lsrs	r4, r4, #16
 80237d2:	fb09 2404 	mla	r4, r9, r4, r2
 80237d6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80237da:	458c      	cmp	ip, r1
 80237dc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80237e0:	d8e7      	bhi.n	80237b2 <__multiply+0xfe>
 80237e2:	9a01      	ldr	r2, [sp, #4]
 80237e4:	50b4      	str	r4, [r6, r2]
 80237e6:	3604      	adds	r6, #4
 80237e8:	e7a3      	b.n	8023732 <__multiply+0x7e>
 80237ea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80237ee:	2b00      	cmp	r3, #0
 80237f0:	d1a5      	bne.n	802373e <__multiply+0x8a>
 80237f2:	3f01      	subs	r7, #1
 80237f4:	e7a1      	b.n	802373a <__multiply+0x86>
 80237f6:	bf00      	nop
 80237f8:	08029500 	.word	0x08029500
 80237fc:	080295f4 	.word	0x080295f4

08023800 <__pow5mult>:
 8023800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023804:	4615      	mov	r5, r2
 8023806:	f012 0203 	ands.w	r2, r2, #3
 802380a:	4606      	mov	r6, r0
 802380c:	460f      	mov	r7, r1
 802380e:	d007      	beq.n	8023820 <__pow5mult+0x20>
 8023810:	4c25      	ldr	r4, [pc, #148]	; (80238a8 <__pow5mult+0xa8>)
 8023812:	3a01      	subs	r2, #1
 8023814:	2300      	movs	r3, #0
 8023816:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802381a:	f7ff fe51 	bl	80234c0 <__multadd>
 802381e:	4607      	mov	r7, r0
 8023820:	10ad      	asrs	r5, r5, #2
 8023822:	d03d      	beq.n	80238a0 <__pow5mult+0xa0>
 8023824:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8023826:	b97c      	cbnz	r4, 8023848 <__pow5mult+0x48>
 8023828:	2010      	movs	r0, #16
 802382a:	f7fc fa67 	bl	801fcfc <malloc>
 802382e:	4602      	mov	r2, r0
 8023830:	6270      	str	r0, [r6, #36]	; 0x24
 8023832:	b928      	cbnz	r0, 8023840 <__pow5mult+0x40>
 8023834:	4b1d      	ldr	r3, [pc, #116]	; (80238ac <__pow5mult+0xac>)
 8023836:	481e      	ldr	r0, [pc, #120]	; (80238b0 <__pow5mult+0xb0>)
 8023838:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 802383c:	f7fe f9ea 	bl	8021c14 <__assert_func>
 8023840:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8023844:	6004      	str	r4, [r0, #0]
 8023846:	60c4      	str	r4, [r0, #12]
 8023848:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 802384c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8023850:	b94c      	cbnz	r4, 8023866 <__pow5mult+0x66>
 8023852:	f240 2171 	movw	r1, #625	; 0x271
 8023856:	4630      	mov	r0, r6
 8023858:	f7ff ff16 	bl	8023688 <__i2b>
 802385c:	2300      	movs	r3, #0
 802385e:	f8c8 0008 	str.w	r0, [r8, #8]
 8023862:	4604      	mov	r4, r0
 8023864:	6003      	str	r3, [r0, #0]
 8023866:	f04f 0900 	mov.w	r9, #0
 802386a:	07eb      	lsls	r3, r5, #31
 802386c:	d50a      	bpl.n	8023884 <__pow5mult+0x84>
 802386e:	4639      	mov	r1, r7
 8023870:	4622      	mov	r2, r4
 8023872:	4630      	mov	r0, r6
 8023874:	f7ff ff1e 	bl	80236b4 <__multiply>
 8023878:	4639      	mov	r1, r7
 802387a:	4680      	mov	r8, r0
 802387c:	4630      	mov	r0, r6
 802387e:	f7ff fdfd 	bl	802347c <_Bfree>
 8023882:	4647      	mov	r7, r8
 8023884:	106d      	asrs	r5, r5, #1
 8023886:	d00b      	beq.n	80238a0 <__pow5mult+0xa0>
 8023888:	6820      	ldr	r0, [r4, #0]
 802388a:	b938      	cbnz	r0, 802389c <__pow5mult+0x9c>
 802388c:	4622      	mov	r2, r4
 802388e:	4621      	mov	r1, r4
 8023890:	4630      	mov	r0, r6
 8023892:	f7ff ff0f 	bl	80236b4 <__multiply>
 8023896:	6020      	str	r0, [r4, #0]
 8023898:	f8c0 9000 	str.w	r9, [r0]
 802389c:	4604      	mov	r4, r0
 802389e:	e7e4      	b.n	802386a <__pow5mult+0x6a>
 80238a0:	4638      	mov	r0, r7
 80238a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80238a6:	bf00      	nop
 80238a8:	08029748 	.word	0x08029748
 80238ac:	0802938d 	.word	0x0802938d
 80238b0:	080295f4 	.word	0x080295f4

080238b4 <__lshift>:
 80238b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80238b8:	460c      	mov	r4, r1
 80238ba:	6849      	ldr	r1, [r1, #4]
 80238bc:	6923      	ldr	r3, [r4, #16]
 80238be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80238c2:	68a3      	ldr	r3, [r4, #8]
 80238c4:	4607      	mov	r7, r0
 80238c6:	4691      	mov	r9, r2
 80238c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80238cc:	f108 0601 	add.w	r6, r8, #1
 80238d0:	42b3      	cmp	r3, r6
 80238d2:	db0b      	blt.n	80238ec <__lshift+0x38>
 80238d4:	4638      	mov	r0, r7
 80238d6:	f7ff fd91 	bl	80233fc <_Balloc>
 80238da:	4605      	mov	r5, r0
 80238dc:	b948      	cbnz	r0, 80238f2 <__lshift+0x3e>
 80238de:	4602      	mov	r2, r0
 80238e0:	4b28      	ldr	r3, [pc, #160]	; (8023984 <__lshift+0xd0>)
 80238e2:	4829      	ldr	r0, [pc, #164]	; (8023988 <__lshift+0xd4>)
 80238e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80238e8:	f7fe f994 	bl	8021c14 <__assert_func>
 80238ec:	3101      	adds	r1, #1
 80238ee:	005b      	lsls	r3, r3, #1
 80238f0:	e7ee      	b.n	80238d0 <__lshift+0x1c>
 80238f2:	2300      	movs	r3, #0
 80238f4:	f100 0114 	add.w	r1, r0, #20
 80238f8:	f100 0210 	add.w	r2, r0, #16
 80238fc:	4618      	mov	r0, r3
 80238fe:	4553      	cmp	r3, sl
 8023900:	db33      	blt.n	802396a <__lshift+0xb6>
 8023902:	6920      	ldr	r0, [r4, #16]
 8023904:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8023908:	f104 0314 	add.w	r3, r4, #20
 802390c:	f019 091f 	ands.w	r9, r9, #31
 8023910:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8023914:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8023918:	d02b      	beq.n	8023972 <__lshift+0xbe>
 802391a:	f1c9 0e20 	rsb	lr, r9, #32
 802391e:	468a      	mov	sl, r1
 8023920:	2200      	movs	r2, #0
 8023922:	6818      	ldr	r0, [r3, #0]
 8023924:	fa00 f009 	lsl.w	r0, r0, r9
 8023928:	4302      	orrs	r2, r0
 802392a:	f84a 2b04 	str.w	r2, [sl], #4
 802392e:	f853 2b04 	ldr.w	r2, [r3], #4
 8023932:	459c      	cmp	ip, r3
 8023934:	fa22 f20e 	lsr.w	r2, r2, lr
 8023938:	d8f3      	bhi.n	8023922 <__lshift+0x6e>
 802393a:	ebac 0304 	sub.w	r3, ip, r4
 802393e:	3b15      	subs	r3, #21
 8023940:	f023 0303 	bic.w	r3, r3, #3
 8023944:	3304      	adds	r3, #4
 8023946:	f104 0015 	add.w	r0, r4, #21
 802394a:	4584      	cmp	ip, r0
 802394c:	bf38      	it	cc
 802394e:	2304      	movcc	r3, #4
 8023950:	50ca      	str	r2, [r1, r3]
 8023952:	b10a      	cbz	r2, 8023958 <__lshift+0xa4>
 8023954:	f108 0602 	add.w	r6, r8, #2
 8023958:	3e01      	subs	r6, #1
 802395a:	4638      	mov	r0, r7
 802395c:	612e      	str	r6, [r5, #16]
 802395e:	4621      	mov	r1, r4
 8023960:	f7ff fd8c 	bl	802347c <_Bfree>
 8023964:	4628      	mov	r0, r5
 8023966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802396a:	f842 0f04 	str.w	r0, [r2, #4]!
 802396e:	3301      	adds	r3, #1
 8023970:	e7c5      	b.n	80238fe <__lshift+0x4a>
 8023972:	3904      	subs	r1, #4
 8023974:	f853 2b04 	ldr.w	r2, [r3], #4
 8023978:	f841 2f04 	str.w	r2, [r1, #4]!
 802397c:	459c      	cmp	ip, r3
 802397e:	d8f9      	bhi.n	8023974 <__lshift+0xc0>
 8023980:	e7ea      	b.n	8023958 <__lshift+0xa4>
 8023982:	bf00      	nop
 8023984:	08029500 	.word	0x08029500
 8023988:	080295f4 	.word	0x080295f4

0802398c <__mcmp>:
 802398c:	b530      	push	{r4, r5, lr}
 802398e:	6902      	ldr	r2, [r0, #16]
 8023990:	690c      	ldr	r4, [r1, #16]
 8023992:	1b12      	subs	r2, r2, r4
 8023994:	d10e      	bne.n	80239b4 <__mcmp+0x28>
 8023996:	f100 0314 	add.w	r3, r0, #20
 802399a:	3114      	adds	r1, #20
 802399c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80239a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80239a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80239a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80239ac:	42a5      	cmp	r5, r4
 80239ae:	d003      	beq.n	80239b8 <__mcmp+0x2c>
 80239b0:	d305      	bcc.n	80239be <__mcmp+0x32>
 80239b2:	2201      	movs	r2, #1
 80239b4:	4610      	mov	r0, r2
 80239b6:	bd30      	pop	{r4, r5, pc}
 80239b8:	4283      	cmp	r3, r0
 80239ba:	d3f3      	bcc.n	80239a4 <__mcmp+0x18>
 80239bc:	e7fa      	b.n	80239b4 <__mcmp+0x28>
 80239be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80239c2:	e7f7      	b.n	80239b4 <__mcmp+0x28>

080239c4 <__mdiff>:
 80239c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80239c8:	460c      	mov	r4, r1
 80239ca:	4606      	mov	r6, r0
 80239cc:	4611      	mov	r1, r2
 80239ce:	4620      	mov	r0, r4
 80239d0:	4617      	mov	r7, r2
 80239d2:	f7ff ffdb 	bl	802398c <__mcmp>
 80239d6:	1e05      	subs	r5, r0, #0
 80239d8:	d110      	bne.n	80239fc <__mdiff+0x38>
 80239da:	4629      	mov	r1, r5
 80239dc:	4630      	mov	r0, r6
 80239de:	f7ff fd0d 	bl	80233fc <_Balloc>
 80239e2:	b930      	cbnz	r0, 80239f2 <__mdiff+0x2e>
 80239e4:	4b39      	ldr	r3, [pc, #228]	; (8023acc <__mdiff+0x108>)
 80239e6:	4602      	mov	r2, r0
 80239e8:	f240 2132 	movw	r1, #562	; 0x232
 80239ec:	4838      	ldr	r0, [pc, #224]	; (8023ad0 <__mdiff+0x10c>)
 80239ee:	f7fe f911 	bl	8021c14 <__assert_func>
 80239f2:	2301      	movs	r3, #1
 80239f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80239f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80239fc:	bfa4      	itt	ge
 80239fe:	463b      	movge	r3, r7
 8023a00:	4627      	movge	r7, r4
 8023a02:	4630      	mov	r0, r6
 8023a04:	6879      	ldr	r1, [r7, #4]
 8023a06:	bfa6      	itte	ge
 8023a08:	461c      	movge	r4, r3
 8023a0a:	2500      	movge	r5, #0
 8023a0c:	2501      	movlt	r5, #1
 8023a0e:	f7ff fcf5 	bl	80233fc <_Balloc>
 8023a12:	b920      	cbnz	r0, 8023a1e <__mdiff+0x5a>
 8023a14:	4b2d      	ldr	r3, [pc, #180]	; (8023acc <__mdiff+0x108>)
 8023a16:	4602      	mov	r2, r0
 8023a18:	f44f 7110 	mov.w	r1, #576	; 0x240
 8023a1c:	e7e6      	b.n	80239ec <__mdiff+0x28>
 8023a1e:	693e      	ldr	r6, [r7, #16]
 8023a20:	60c5      	str	r5, [r0, #12]
 8023a22:	6925      	ldr	r5, [r4, #16]
 8023a24:	f107 0114 	add.w	r1, r7, #20
 8023a28:	f104 0914 	add.w	r9, r4, #20
 8023a2c:	f100 0e14 	add.w	lr, r0, #20
 8023a30:	f107 0210 	add.w	r2, r7, #16
 8023a34:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8023a38:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8023a3c:	46f2      	mov	sl, lr
 8023a3e:	2700      	movs	r7, #0
 8023a40:	f859 3b04 	ldr.w	r3, [r9], #4
 8023a44:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8023a48:	fa1f f883 	uxth.w	r8, r3
 8023a4c:	fa17 f78b 	uxtah	r7, r7, fp
 8023a50:	0c1b      	lsrs	r3, r3, #16
 8023a52:	eba7 0808 	sub.w	r8, r7, r8
 8023a56:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8023a5a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8023a5e:	fa1f f888 	uxth.w	r8, r8
 8023a62:	141f      	asrs	r7, r3, #16
 8023a64:	454d      	cmp	r5, r9
 8023a66:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8023a6a:	f84a 3b04 	str.w	r3, [sl], #4
 8023a6e:	d8e7      	bhi.n	8023a40 <__mdiff+0x7c>
 8023a70:	1b2b      	subs	r3, r5, r4
 8023a72:	3b15      	subs	r3, #21
 8023a74:	f023 0303 	bic.w	r3, r3, #3
 8023a78:	3304      	adds	r3, #4
 8023a7a:	3415      	adds	r4, #21
 8023a7c:	42a5      	cmp	r5, r4
 8023a7e:	bf38      	it	cc
 8023a80:	2304      	movcc	r3, #4
 8023a82:	4419      	add	r1, r3
 8023a84:	4473      	add	r3, lr
 8023a86:	469e      	mov	lr, r3
 8023a88:	460d      	mov	r5, r1
 8023a8a:	4565      	cmp	r5, ip
 8023a8c:	d30e      	bcc.n	8023aac <__mdiff+0xe8>
 8023a8e:	f10c 0203 	add.w	r2, ip, #3
 8023a92:	1a52      	subs	r2, r2, r1
 8023a94:	f022 0203 	bic.w	r2, r2, #3
 8023a98:	3903      	subs	r1, #3
 8023a9a:	458c      	cmp	ip, r1
 8023a9c:	bf38      	it	cc
 8023a9e:	2200      	movcc	r2, #0
 8023aa0:	441a      	add	r2, r3
 8023aa2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8023aa6:	b17b      	cbz	r3, 8023ac8 <__mdiff+0x104>
 8023aa8:	6106      	str	r6, [r0, #16]
 8023aaa:	e7a5      	b.n	80239f8 <__mdiff+0x34>
 8023aac:	f855 8b04 	ldr.w	r8, [r5], #4
 8023ab0:	fa17 f488 	uxtah	r4, r7, r8
 8023ab4:	1422      	asrs	r2, r4, #16
 8023ab6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8023aba:	b2a4      	uxth	r4, r4
 8023abc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8023ac0:	f84e 4b04 	str.w	r4, [lr], #4
 8023ac4:	1417      	asrs	r7, r2, #16
 8023ac6:	e7e0      	b.n	8023a8a <__mdiff+0xc6>
 8023ac8:	3e01      	subs	r6, #1
 8023aca:	e7ea      	b.n	8023aa2 <__mdiff+0xde>
 8023acc:	08029500 	.word	0x08029500
 8023ad0:	080295f4 	.word	0x080295f4

08023ad4 <__ulp>:
 8023ad4:	b082      	sub	sp, #8
 8023ad6:	ed8d 0b00 	vstr	d0, [sp]
 8023ada:	9b01      	ldr	r3, [sp, #4]
 8023adc:	4912      	ldr	r1, [pc, #72]	; (8023b28 <__ulp+0x54>)
 8023ade:	4019      	ands	r1, r3
 8023ae0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8023ae4:	2900      	cmp	r1, #0
 8023ae6:	dd05      	ble.n	8023af4 <__ulp+0x20>
 8023ae8:	2200      	movs	r2, #0
 8023aea:	460b      	mov	r3, r1
 8023aec:	ec43 2b10 	vmov	d0, r2, r3
 8023af0:	b002      	add	sp, #8
 8023af2:	4770      	bx	lr
 8023af4:	4249      	negs	r1, r1
 8023af6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8023afa:	ea4f 5021 	mov.w	r0, r1, asr #20
 8023afe:	f04f 0200 	mov.w	r2, #0
 8023b02:	f04f 0300 	mov.w	r3, #0
 8023b06:	da04      	bge.n	8023b12 <__ulp+0x3e>
 8023b08:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8023b0c:	fa41 f300 	asr.w	r3, r1, r0
 8023b10:	e7ec      	b.n	8023aec <__ulp+0x18>
 8023b12:	f1a0 0114 	sub.w	r1, r0, #20
 8023b16:	291e      	cmp	r1, #30
 8023b18:	bfda      	itte	le
 8023b1a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8023b1e:	fa20 f101 	lsrle.w	r1, r0, r1
 8023b22:	2101      	movgt	r1, #1
 8023b24:	460a      	mov	r2, r1
 8023b26:	e7e1      	b.n	8023aec <__ulp+0x18>
 8023b28:	7ff00000 	.word	0x7ff00000

08023b2c <__b2d>:
 8023b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023b2e:	6905      	ldr	r5, [r0, #16]
 8023b30:	f100 0714 	add.w	r7, r0, #20
 8023b34:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8023b38:	1f2e      	subs	r6, r5, #4
 8023b3a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8023b3e:	4620      	mov	r0, r4
 8023b40:	f7ff fd52 	bl	80235e8 <__hi0bits>
 8023b44:	f1c0 0320 	rsb	r3, r0, #32
 8023b48:	280a      	cmp	r0, #10
 8023b4a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8023bc8 <__b2d+0x9c>
 8023b4e:	600b      	str	r3, [r1, #0]
 8023b50:	dc14      	bgt.n	8023b7c <__b2d+0x50>
 8023b52:	f1c0 0e0b 	rsb	lr, r0, #11
 8023b56:	fa24 f10e 	lsr.w	r1, r4, lr
 8023b5a:	42b7      	cmp	r7, r6
 8023b5c:	ea41 030c 	orr.w	r3, r1, ip
 8023b60:	bf34      	ite	cc
 8023b62:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8023b66:	2100      	movcs	r1, #0
 8023b68:	3015      	adds	r0, #21
 8023b6a:	fa04 f000 	lsl.w	r0, r4, r0
 8023b6e:	fa21 f10e 	lsr.w	r1, r1, lr
 8023b72:	ea40 0201 	orr.w	r2, r0, r1
 8023b76:	ec43 2b10 	vmov	d0, r2, r3
 8023b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023b7c:	42b7      	cmp	r7, r6
 8023b7e:	bf3a      	itte	cc
 8023b80:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8023b84:	f1a5 0608 	subcc.w	r6, r5, #8
 8023b88:	2100      	movcs	r1, #0
 8023b8a:	380b      	subs	r0, #11
 8023b8c:	d017      	beq.n	8023bbe <__b2d+0x92>
 8023b8e:	f1c0 0c20 	rsb	ip, r0, #32
 8023b92:	fa04 f500 	lsl.w	r5, r4, r0
 8023b96:	42be      	cmp	r6, r7
 8023b98:	fa21 f40c 	lsr.w	r4, r1, ip
 8023b9c:	ea45 0504 	orr.w	r5, r5, r4
 8023ba0:	bf8c      	ite	hi
 8023ba2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8023ba6:	2400      	movls	r4, #0
 8023ba8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8023bac:	fa01 f000 	lsl.w	r0, r1, r0
 8023bb0:	fa24 f40c 	lsr.w	r4, r4, ip
 8023bb4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8023bb8:	ea40 0204 	orr.w	r2, r0, r4
 8023bbc:	e7db      	b.n	8023b76 <__b2d+0x4a>
 8023bbe:	ea44 030c 	orr.w	r3, r4, ip
 8023bc2:	460a      	mov	r2, r1
 8023bc4:	e7d7      	b.n	8023b76 <__b2d+0x4a>
 8023bc6:	bf00      	nop
 8023bc8:	3ff00000 	.word	0x3ff00000

08023bcc <__d2b>:
 8023bcc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8023bd0:	4689      	mov	r9, r1
 8023bd2:	2101      	movs	r1, #1
 8023bd4:	ec57 6b10 	vmov	r6, r7, d0
 8023bd8:	4690      	mov	r8, r2
 8023bda:	f7ff fc0f 	bl	80233fc <_Balloc>
 8023bde:	4604      	mov	r4, r0
 8023be0:	b930      	cbnz	r0, 8023bf0 <__d2b+0x24>
 8023be2:	4602      	mov	r2, r0
 8023be4:	4b25      	ldr	r3, [pc, #148]	; (8023c7c <__d2b+0xb0>)
 8023be6:	4826      	ldr	r0, [pc, #152]	; (8023c80 <__d2b+0xb4>)
 8023be8:	f240 310a 	movw	r1, #778	; 0x30a
 8023bec:	f7fe f812 	bl	8021c14 <__assert_func>
 8023bf0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8023bf4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8023bf8:	bb35      	cbnz	r5, 8023c48 <__d2b+0x7c>
 8023bfa:	2e00      	cmp	r6, #0
 8023bfc:	9301      	str	r3, [sp, #4]
 8023bfe:	d028      	beq.n	8023c52 <__d2b+0x86>
 8023c00:	4668      	mov	r0, sp
 8023c02:	9600      	str	r6, [sp, #0]
 8023c04:	f7ff fd10 	bl	8023628 <__lo0bits>
 8023c08:	9900      	ldr	r1, [sp, #0]
 8023c0a:	b300      	cbz	r0, 8023c4e <__d2b+0x82>
 8023c0c:	9a01      	ldr	r2, [sp, #4]
 8023c0e:	f1c0 0320 	rsb	r3, r0, #32
 8023c12:	fa02 f303 	lsl.w	r3, r2, r3
 8023c16:	430b      	orrs	r3, r1
 8023c18:	40c2      	lsrs	r2, r0
 8023c1a:	6163      	str	r3, [r4, #20]
 8023c1c:	9201      	str	r2, [sp, #4]
 8023c1e:	9b01      	ldr	r3, [sp, #4]
 8023c20:	61a3      	str	r3, [r4, #24]
 8023c22:	2b00      	cmp	r3, #0
 8023c24:	bf14      	ite	ne
 8023c26:	2202      	movne	r2, #2
 8023c28:	2201      	moveq	r2, #1
 8023c2a:	6122      	str	r2, [r4, #16]
 8023c2c:	b1d5      	cbz	r5, 8023c64 <__d2b+0x98>
 8023c2e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8023c32:	4405      	add	r5, r0
 8023c34:	f8c9 5000 	str.w	r5, [r9]
 8023c38:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8023c3c:	f8c8 0000 	str.w	r0, [r8]
 8023c40:	4620      	mov	r0, r4
 8023c42:	b003      	add	sp, #12
 8023c44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023c48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8023c4c:	e7d5      	b.n	8023bfa <__d2b+0x2e>
 8023c4e:	6161      	str	r1, [r4, #20]
 8023c50:	e7e5      	b.n	8023c1e <__d2b+0x52>
 8023c52:	a801      	add	r0, sp, #4
 8023c54:	f7ff fce8 	bl	8023628 <__lo0bits>
 8023c58:	9b01      	ldr	r3, [sp, #4]
 8023c5a:	6163      	str	r3, [r4, #20]
 8023c5c:	2201      	movs	r2, #1
 8023c5e:	6122      	str	r2, [r4, #16]
 8023c60:	3020      	adds	r0, #32
 8023c62:	e7e3      	b.n	8023c2c <__d2b+0x60>
 8023c64:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8023c68:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8023c6c:	f8c9 0000 	str.w	r0, [r9]
 8023c70:	6918      	ldr	r0, [r3, #16]
 8023c72:	f7ff fcb9 	bl	80235e8 <__hi0bits>
 8023c76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8023c7a:	e7df      	b.n	8023c3c <__d2b+0x70>
 8023c7c:	08029500 	.word	0x08029500
 8023c80:	080295f4 	.word	0x080295f4

08023c84 <__ratio>:
 8023c84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c88:	468a      	mov	sl, r1
 8023c8a:	4669      	mov	r1, sp
 8023c8c:	4683      	mov	fp, r0
 8023c8e:	f7ff ff4d 	bl	8023b2c <__b2d>
 8023c92:	a901      	add	r1, sp, #4
 8023c94:	4650      	mov	r0, sl
 8023c96:	ec59 8b10 	vmov	r8, r9, d0
 8023c9a:	ee10 6a10 	vmov	r6, s0
 8023c9e:	f7ff ff45 	bl	8023b2c <__b2d>
 8023ca2:	f8db 3010 	ldr.w	r3, [fp, #16]
 8023ca6:	f8da 2010 	ldr.w	r2, [sl, #16]
 8023caa:	eba3 0c02 	sub.w	ip, r3, r2
 8023cae:	e9dd 3200 	ldrd	r3, r2, [sp]
 8023cb2:	1a9b      	subs	r3, r3, r2
 8023cb4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8023cb8:	ec55 4b10 	vmov	r4, r5, d0
 8023cbc:	2b00      	cmp	r3, #0
 8023cbe:	ee10 0a10 	vmov	r0, s0
 8023cc2:	bfce      	itee	gt
 8023cc4:	464a      	movgt	r2, r9
 8023cc6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8023cca:	462a      	movle	r2, r5
 8023ccc:	464f      	mov	r7, r9
 8023cce:	4629      	mov	r1, r5
 8023cd0:	bfcc      	ite	gt
 8023cd2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8023cd6:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8023cda:	ec47 6b17 	vmov	d7, r6, r7
 8023cde:	ec41 0b16 	vmov	d6, r0, r1
 8023ce2:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8023ce6:	b003      	add	sp, #12
 8023ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023cec <__copybits>:
 8023cec:	3901      	subs	r1, #1
 8023cee:	b570      	push	{r4, r5, r6, lr}
 8023cf0:	1149      	asrs	r1, r1, #5
 8023cf2:	6914      	ldr	r4, [r2, #16]
 8023cf4:	3101      	adds	r1, #1
 8023cf6:	f102 0314 	add.w	r3, r2, #20
 8023cfa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8023cfe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8023d02:	1f05      	subs	r5, r0, #4
 8023d04:	42a3      	cmp	r3, r4
 8023d06:	d30c      	bcc.n	8023d22 <__copybits+0x36>
 8023d08:	1aa3      	subs	r3, r4, r2
 8023d0a:	3b11      	subs	r3, #17
 8023d0c:	f023 0303 	bic.w	r3, r3, #3
 8023d10:	3211      	adds	r2, #17
 8023d12:	42a2      	cmp	r2, r4
 8023d14:	bf88      	it	hi
 8023d16:	2300      	movhi	r3, #0
 8023d18:	4418      	add	r0, r3
 8023d1a:	2300      	movs	r3, #0
 8023d1c:	4288      	cmp	r0, r1
 8023d1e:	d305      	bcc.n	8023d2c <__copybits+0x40>
 8023d20:	bd70      	pop	{r4, r5, r6, pc}
 8023d22:	f853 6b04 	ldr.w	r6, [r3], #4
 8023d26:	f845 6f04 	str.w	r6, [r5, #4]!
 8023d2a:	e7eb      	b.n	8023d04 <__copybits+0x18>
 8023d2c:	f840 3b04 	str.w	r3, [r0], #4
 8023d30:	e7f4      	b.n	8023d1c <__copybits+0x30>

08023d32 <__any_on>:
 8023d32:	f100 0214 	add.w	r2, r0, #20
 8023d36:	6900      	ldr	r0, [r0, #16]
 8023d38:	114b      	asrs	r3, r1, #5
 8023d3a:	4298      	cmp	r0, r3
 8023d3c:	b510      	push	{r4, lr}
 8023d3e:	db11      	blt.n	8023d64 <__any_on+0x32>
 8023d40:	dd0a      	ble.n	8023d58 <__any_on+0x26>
 8023d42:	f011 011f 	ands.w	r1, r1, #31
 8023d46:	d007      	beq.n	8023d58 <__any_on+0x26>
 8023d48:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8023d4c:	fa24 f001 	lsr.w	r0, r4, r1
 8023d50:	fa00 f101 	lsl.w	r1, r0, r1
 8023d54:	428c      	cmp	r4, r1
 8023d56:	d10b      	bne.n	8023d70 <__any_on+0x3e>
 8023d58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8023d5c:	4293      	cmp	r3, r2
 8023d5e:	d803      	bhi.n	8023d68 <__any_on+0x36>
 8023d60:	2000      	movs	r0, #0
 8023d62:	bd10      	pop	{r4, pc}
 8023d64:	4603      	mov	r3, r0
 8023d66:	e7f7      	b.n	8023d58 <__any_on+0x26>
 8023d68:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8023d6c:	2900      	cmp	r1, #0
 8023d6e:	d0f5      	beq.n	8023d5c <__any_on+0x2a>
 8023d70:	2001      	movs	r0, #1
 8023d72:	e7f6      	b.n	8023d62 <__any_on+0x30>

08023d74 <_calloc_r>:
 8023d74:	b513      	push	{r0, r1, r4, lr}
 8023d76:	434a      	muls	r2, r1
 8023d78:	4611      	mov	r1, r2
 8023d7a:	9201      	str	r2, [sp, #4]
 8023d7c:	f7fc f854 	bl	801fe28 <_malloc_r>
 8023d80:	4604      	mov	r4, r0
 8023d82:	b118      	cbz	r0, 8023d8c <_calloc_r+0x18>
 8023d84:	9a01      	ldr	r2, [sp, #4]
 8023d86:	2100      	movs	r1, #0
 8023d88:	f7fb fff6 	bl	801fd78 <memset>
 8023d8c:	4620      	mov	r0, r4
 8023d8e:	b002      	add	sp, #8
 8023d90:	bd10      	pop	{r4, pc}

08023d92 <__ssputs_r>:
 8023d92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023d96:	688e      	ldr	r6, [r1, #8]
 8023d98:	429e      	cmp	r6, r3
 8023d9a:	4682      	mov	sl, r0
 8023d9c:	460c      	mov	r4, r1
 8023d9e:	4690      	mov	r8, r2
 8023da0:	461f      	mov	r7, r3
 8023da2:	d838      	bhi.n	8023e16 <__ssputs_r+0x84>
 8023da4:	898a      	ldrh	r2, [r1, #12]
 8023da6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8023daa:	d032      	beq.n	8023e12 <__ssputs_r+0x80>
 8023dac:	6825      	ldr	r5, [r4, #0]
 8023dae:	6909      	ldr	r1, [r1, #16]
 8023db0:	eba5 0901 	sub.w	r9, r5, r1
 8023db4:	6965      	ldr	r5, [r4, #20]
 8023db6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023dba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8023dbe:	3301      	adds	r3, #1
 8023dc0:	444b      	add	r3, r9
 8023dc2:	106d      	asrs	r5, r5, #1
 8023dc4:	429d      	cmp	r5, r3
 8023dc6:	bf38      	it	cc
 8023dc8:	461d      	movcc	r5, r3
 8023dca:	0553      	lsls	r3, r2, #21
 8023dcc:	d531      	bpl.n	8023e32 <__ssputs_r+0xa0>
 8023dce:	4629      	mov	r1, r5
 8023dd0:	f7fc f82a 	bl	801fe28 <_malloc_r>
 8023dd4:	4606      	mov	r6, r0
 8023dd6:	b950      	cbnz	r0, 8023dee <__ssputs_r+0x5c>
 8023dd8:	230c      	movs	r3, #12
 8023dda:	f8ca 3000 	str.w	r3, [sl]
 8023dde:	89a3      	ldrh	r3, [r4, #12]
 8023de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023de4:	81a3      	strh	r3, [r4, #12]
 8023de6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023dee:	6921      	ldr	r1, [r4, #16]
 8023df0:	464a      	mov	r2, r9
 8023df2:	f7fb ff99 	bl	801fd28 <memcpy>
 8023df6:	89a3      	ldrh	r3, [r4, #12]
 8023df8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8023dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023e00:	81a3      	strh	r3, [r4, #12]
 8023e02:	6126      	str	r6, [r4, #16]
 8023e04:	6165      	str	r5, [r4, #20]
 8023e06:	444e      	add	r6, r9
 8023e08:	eba5 0509 	sub.w	r5, r5, r9
 8023e0c:	6026      	str	r6, [r4, #0]
 8023e0e:	60a5      	str	r5, [r4, #8]
 8023e10:	463e      	mov	r6, r7
 8023e12:	42be      	cmp	r6, r7
 8023e14:	d900      	bls.n	8023e18 <__ssputs_r+0x86>
 8023e16:	463e      	mov	r6, r7
 8023e18:	4632      	mov	r2, r6
 8023e1a:	6820      	ldr	r0, [r4, #0]
 8023e1c:	4641      	mov	r1, r8
 8023e1e:	f7fb ff91 	bl	801fd44 <memmove>
 8023e22:	68a3      	ldr	r3, [r4, #8]
 8023e24:	6822      	ldr	r2, [r4, #0]
 8023e26:	1b9b      	subs	r3, r3, r6
 8023e28:	4432      	add	r2, r6
 8023e2a:	60a3      	str	r3, [r4, #8]
 8023e2c:	6022      	str	r2, [r4, #0]
 8023e2e:	2000      	movs	r0, #0
 8023e30:	e7db      	b.n	8023dea <__ssputs_r+0x58>
 8023e32:	462a      	mov	r2, r5
 8023e34:	f000 fb1a 	bl	802446c <_realloc_r>
 8023e38:	4606      	mov	r6, r0
 8023e3a:	2800      	cmp	r0, #0
 8023e3c:	d1e1      	bne.n	8023e02 <__ssputs_r+0x70>
 8023e3e:	6921      	ldr	r1, [r4, #16]
 8023e40:	4650      	mov	r0, sl
 8023e42:	f7fb ffa1 	bl	801fd88 <_free_r>
 8023e46:	e7c7      	b.n	8023dd8 <__ssputs_r+0x46>

08023e48 <_svfiprintf_r>:
 8023e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e4c:	4698      	mov	r8, r3
 8023e4e:	898b      	ldrh	r3, [r1, #12]
 8023e50:	061b      	lsls	r3, r3, #24
 8023e52:	b09d      	sub	sp, #116	; 0x74
 8023e54:	4607      	mov	r7, r0
 8023e56:	460d      	mov	r5, r1
 8023e58:	4614      	mov	r4, r2
 8023e5a:	d50e      	bpl.n	8023e7a <_svfiprintf_r+0x32>
 8023e5c:	690b      	ldr	r3, [r1, #16]
 8023e5e:	b963      	cbnz	r3, 8023e7a <_svfiprintf_r+0x32>
 8023e60:	2140      	movs	r1, #64	; 0x40
 8023e62:	f7fb ffe1 	bl	801fe28 <_malloc_r>
 8023e66:	6028      	str	r0, [r5, #0]
 8023e68:	6128      	str	r0, [r5, #16]
 8023e6a:	b920      	cbnz	r0, 8023e76 <_svfiprintf_r+0x2e>
 8023e6c:	230c      	movs	r3, #12
 8023e6e:	603b      	str	r3, [r7, #0]
 8023e70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023e74:	e0d1      	b.n	802401a <_svfiprintf_r+0x1d2>
 8023e76:	2340      	movs	r3, #64	; 0x40
 8023e78:	616b      	str	r3, [r5, #20]
 8023e7a:	2300      	movs	r3, #0
 8023e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8023e7e:	2320      	movs	r3, #32
 8023e80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023e84:	f8cd 800c 	str.w	r8, [sp, #12]
 8023e88:	2330      	movs	r3, #48	; 0x30
 8023e8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8024034 <_svfiprintf_r+0x1ec>
 8023e8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023e92:	f04f 0901 	mov.w	r9, #1
 8023e96:	4623      	mov	r3, r4
 8023e98:	469a      	mov	sl, r3
 8023e9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023e9e:	b10a      	cbz	r2, 8023ea4 <_svfiprintf_r+0x5c>
 8023ea0:	2a25      	cmp	r2, #37	; 0x25
 8023ea2:	d1f9      	bne.n	8023e98 <_svfiprintf_r+0x50>
 8023ea4:	ebba 0b04 	subs.w	fp, sl, r4
 8023ea8:	d00b      	beq.n	8023ec2 <_svfiprintf_r+0x7a>
 8023eaa:	465b      	mov	r3, fp
 8023eac:	4622      	mov	r2, r4
 8023eae:	4629      	mov	r1, r5
 8023eb0:	4638      	mov	r0, r7
 8023eb2:	f7ff ff6e 	bl	8023d92 <__ssputs_r>
 8023eb6:	3001      	adds	r0, #1
 8023eb8:	f000 80aa 	beq.w	8024010 <_svfiprintf_r+0x1c8>
 8023ebc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023ebe:	445a      	add	r2, fp
 8023ec0:	9209      	str	r2, [sp, #36]	; 0x24
 8023ec2:	f89a 3000 	ldrb.w	r3, [sl]
 8023ec6:	2b00      	cmp	r3, #0
 8023ec8:	f000 80a2 	beq.w	8024010 <_svfiprintf_r+0x1c8>
 8023ecc:	2300      	movs	r3, #0
 8023ece:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023ed2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023ed6:	f10a 0a01 	add.w	sl, sl, #1
 8023eda:	9304      	str	r3, [sp, #16]
 8023edc:	9307      	str	r3, [sp, #28]
 8023ede:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023ee2:	931a      	str	r3, [sp, #104]	; 0x68
 8023ee4:	4654      	mov	r4, sl
 8023ee6:	2205      	movs	r2, #5
 8023ee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023eec:	4851      	ldr	r0, [pc, #324]	; (8024034 <_svfiprintf_r+0x1ec>)
 8023eee:	f7dc f9ff 	bl	80002f0 <memchr>
 8023ef2:	9a04      	ldr	r2, [sp, #16]
 8023ef4:	b9d8      	cbnz	r0, 8023f2e <_svfiprintf_r+0xe6>
 8023ef6:	06d0      	lsls	r0, r2, #27
 8023ef8:	bf44      	itt	mi
 8023efa:	2320      	movmi	r3, #32
 8023efc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023f00:	0711      	lsls	r1, r2, #28
 8023f02:	bf44      	itt	mi
 8023f04:	232b      	movmi	r3, #43	; 0x2b
 8023f06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023f0a:	f89a 3000 	ldrb.w	r3, [sl]
 8023f0e:	2b2a      	cmp	r3, #42	; 0x2a
 8023f10:	d015      	beq.n	8023f3e <_svfiprintf_r+0xf6>
 8023f12:	9a07      	ldr	r2, [sp, #28]
 8023f14:	4654      	mov	r4, sl
 8023f16:	2000      	movs	r0, #0
 8023f18:	f04f 0c0a 	mov.w	ip, #10
 8023f1c:	4621      	mov	r1, r4
 8023f1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023f22:	3b30      	subs	r3, #48	; 0x30
 8023f24:	2b09      	cmp	r3, #9
 8023f26:	d94e      	bls.n	8023fc6 <_svfiprintf_r+0x17e>
 8023f28:	b1b0      	cbz	r0, 8023f58 <_svfiprintf_r+0x110>
 8023f2a:	9207      	str	r2, [sp, #28]
 8023f2c:	e014      	b.n	8023f58 <_svfiprintf_r+0x110>
 8023f2e:	eba0 0308 	sub.w	r3, r0, r8
 8023f32:	fa09 f303 	lsl.w	r3, r9, r3
 8023f36:	4313      	orrs	r3, r2
 8023f38:	9304      	str	r3, [sp, #16]
 8023f3a:	46a2      	mov	sl, r4
 8023f3c:	e7d2      	b.n	8023ee4 <_svfiprintf_r+0x9c>
 8023f3e:	9b03      	ldr	r3, [sp, #12]
 8023f40:	1d19      	adds	r1, r3, #4
 8023f42:	681b      	ldr	r3, [r3, #0]
 8023f44:	9103      	str	r1, [sp, #12]
 8023f46:	2b00      	cmp	r3, #0
 8023f48:	bfbb      	ittet	lt
 8023f4a:	425b      	neglt	r3, r3
 8023f4c:	f042 0202 	orrlt.w	r2, r2, #2
 8023f50:	9307      	strge	r3, [sp, #28]
 8023f52:	9307      	strlt	r3, [sp, #28]
 8023f54:	bfb8      	it	lt
 8023f56:	9204      	strlt	r2, [sp, #16]
 8023f58:	7823      	ldrb	r3, [r4, #0]
 8023f5a:	2b2e      	cmp	r3, #46	; 0x2e
 8023f5c:	d10c      	bne.n	8023f78 <_svfiprintf_r+0x130>
 8023f5e:	7863      	ldrb	r3, [r4, #1]
 8023f60:	2b2a      	cmp	r3, #42	; 0x2a
 8023f62:	d135      	bne.n	8023fd0 <_svfiprintf_r+0x188>
 8023f64:	9b03      	ldr	r3, [sp, #12]
 8023f66:	1d1a      	adds	r2, r3, #4
 8023f68:	681b      	ldr	r3, [r3, #0]
 8023f6a:	9203      	str	r2, [sp, #12]
 8023f6c:	2b00      	cmp	r3, #0
 8023f6e:	bfb8      	it	lt
 8023f70:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8023f74:	3402      	adds	r4, #2
 8023f76:	9305      	str	r3, [sp, #20]
 8023f78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8024044 <_svfiprintf_r+0x1fc>
 8023f7c:	7821      	ldrb	r1, [r4, #0]
 8023f7e:	2203      	movs	r2, #3
 8023f80:	4650      	mov	r0, sl
 8023f82:	f7dc f9b5 	bl	80002f0 <memchr>
 8023f86:	b140      	cbz	r0, 8023f9a <_svfiprintf_r+0x152>
 8023f88:	2340      	movs	r3, #64	; 0x40
 8023f8a:	eba0 000a 	sub.w	r0, r0, sl
 8023f8e:	fa03 f000 	lsl.w	r0, r3, r0
 8023f92:	9b04      	ldr	r3, [sp, #16]
 8023f94:	4303      	orrs	r3, r0
 8023f96:	3401      	adds	r4, #1
 8023f98:	9304      	str	r3, [sp, #16]
 8023f9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023f9e:	4826      	ldr	r0, [pc, #152]	; (8024038 <_svfiprintf_r+0x1f0>)
 8023fa0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023fa4:	2206      	movs	r2, #6
 8023fa6:	f7dc f9a3 	bl	80002f0 <memchr>
 8023faa:	2800      	cmp	r0, #0
 8023fac:	d038      	beq.n	8024020 <_svfiprintf_r+0x1d8>
 8023fae:	4b23      	ldr	r3, [pc, #140]	; (802403c <_svfiprintf_r+0x1f4>)
 8023fb0:	bb1b      	cbnz	r3, 8023ffa <_svfiprintf_r+0x1b2>
 8023fb2:	9b03      	ldr	r3, [sp, #12]
 8023fb4:	3307      	adds	r3, #7
 8023fb6:	f023 0307 	bic.w	r3, r3, #7
 8023fba:	3308      	adds	r3, #8
 8023fbc:	9303      	str	r3, [sp, #12]
 8023fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023fc0:	4433      	add	r3, r6
 8023fc2:	9309      	str	r3, [sp, #36]	; 0x24
 8023fc4:	e767      	b.n	8023e96 <_svfiprintf_r+0x4e>
 8023fc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8023fca:	460c      	mov	r4, r1
 8023fcc:	2001      	movs	r0, #1
 8023fce:	e7a5      	b.n	8023f1c <_svfiprintf_r+0xd4>
 8023fd0:	2300      	movs	r3, #0
 8023fd2:	3401      	adds	r4, #1
 8023fd4:	9305      	str	r3, [sp, #20]
 8023fd6:	4619      	mov	r1, r3
 8023fd8:	f04f 0c0a 	mov.w	ip, #10
 8023fdc:	4620      	mov	r0, r4
 8023fde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023fe2:	3a30      	subs	r2, #48	; 0x30
 8023fe4:	2a09      	cmp	r2, #9
 8023fe6:	d903      	bls.n	8023ff0 <_svfiprintf_r+0x1a8>
 8023fe8:	2b00      	cmp	r3, #0
 8023fea:	d0c5      	beq.n	8023f78 <_svfiprintf_r+0x130>
 8023fec:	9105      	str	r1, [sp, #20]
 8023fee:	e7c3      	b.n	8023f78 <_svfiprintf_r+0x130>
 8023ff0:	fb0c 2101 	mla	r1, ip, r1, r2
 8023ff4:	4604      	mov	r4, r0
 8023ff6:	2301      	movs	r3, #1
 8023ff8:	e7f0      	b.n	8023fdc <_svfiprintf_r+0x194>
 8023ffa:	ab03      	add	r3, sp, #12
 8023ffc:	9300      	str	r3, [sp, #0]
 8023ffe:	462a      	mov	r2, r5
 8024000:	4b0f      	ldr	r3, [pc, #60]	; (8024040 <_svfiprintf_r+0x1f8>)
 8024002:	a904      	add	r1, sp, #16
 8024004:	4638      	mov	r0, r7
 8024006:	f7fb fffb 	bl	8020000 <_printf_float>
 802400a:	1c42      	adds	r2, r0, #1
 802400c:	4606      	mov	r6, r0
 802400e:	d1d6      	bne.n	8023fbe <_svfiprintf_r+0x176>
 8024010:	89ab      	ldrh	r3, [r5, #12]
 8024012:	065b      	lsls	r3, r3, #25
 8024014:	f53f af2c 	bmi.w	8023e70 <_svfiprintf_r+0x28>
 8024018:	9809      	ldr	r0, [sp, #36]	; 0x24
 802401a:	b01d      	add	sp, #116	; 0x74
 802401c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024020:	ab03      	add	r3, sp, #12
 8024022:	9300      	str	r3, [sp, #0]
 8024024:	462a      	mov	r2, r5
 8024026:	4b06      	ldr	r3, [pc, #24]	; (8024040 <_svfiprintf_r+0x1f8>)
 8024028:	a904      	add	r1, sp, #16
 802402a:	4638      	mov	r0, r7
 802402c:	f7fc fa74 	bl	8020518 <_printf_i>
 8024030:	e7eb      	b.n	802400a <_svfiprintf_r+0x1c2>
 8024032:	bf00      	nop
 8024034:	08029754 	.word	0x08029754
 8024038:	0802975e 	.word	0x0802975e
 802403c:	08020001 	.word	0x08020001
 8024040:	08023d93 	.word	0x08023d93
 8024044:	0802975a 	.word	0x0802975a

08024048 <__sfputc_r>:
 8024048:	6893      	ldr	r3, [r2, #8]
 802404a:	3b01      	subs	r3, #1
 802404c:	2b00      	cmp	r3, #0
 802404e:	b410      	push	{r4}
 8024050:	6093      	str	r3, [r2, #8]
 8024052:	da08      	bge.n	8024066 <__sfputc_r+0x1e>
 8024054:	6994      	ldr	r4, [r2, #24]
 8024056:	42a3      	cmp	r3, r4
 8024058:	db01      	blt.n	802405e <__sfputc_r+0x16>
 802405a:	290a      	cmp	r1, #10
 802405c:	d103      	bne.n	8024066 <__sfputc_r+0x1e>
 802405e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024062:	f7fd bd17 	b.w	8021a94 <__swbuf_r>
 8024066:	6813      	ldr	r3, [r2, #0]
 8024068:	1c58      	adds	r0, r3, #1
 802406a:	6010      	str	r0, [r2, #0]
 802406c:	7019      	strb	r1, [r3, #0]
 802406e:	4608      	mov	r0, r1
 8024070:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024074:	4770      	bx	lr

08024076 <__sfputs_r>:
 8024076:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024078:	4606      	mov	r6, r0
 802407a:	460f      	mov	r7, r1
 802407c:	4614      	mov	r4, r2
 802407e:	18d5      	adds	r5, r2, r3
 8024080:	42ac      	cmp	r4, r5
 8024082:	d101      	bne.n	8024088 <__sfputs_r+0x12>
 8024084:	2000      	movs	r0, #0
 8024086:	e007      	b.n	8024098 <__sfputs_r+0x22>
 8024088:	f814 1b01 	ldrb.w	r1, [r4], #1
 802408c:	463a      	mov	r2, r7
 802408e:	4630      	mov	r0, r6
 8024090:	f7ff ffda 	bl	8024048 <__sfputc_r>
 8024094:	1c43      	adds	r3, r0, #1
 8024096:	d1f3      	bne.n	8024080 <__sfputs_r+0xa>
 8024098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802409c <_vfiprintf_r>:
 802409c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80240a0:	460d      	mov	r5, r1
 80240a2:	b09d      	sub	sp, #116	; 0x74
 80240a4:	4614      	mov	r4, r2
 80240a6:	4698      	mov	r8, r3
 80240a8:	4606      	mov	r6, r0
 80240aa:	b118      	cbz	r0, 80240b4 <_vfiprintf_r+0x18>
 80240ac:	6983      	ldr	r3, [r0, #24]
 80240ae:	b90b      	cbnz	r3, 80240b4 <_vfiprintf_r+0x18>
 80240b0:	f7fe fcfc 	bl	8022aac <__sinit>
 80240b4:	4b89      	ldr	r3, [pc, #548]	; (80242dc <_vfiprintf_r+0x240>)
 80240b6:	429d      	cmp	r5, r3
 80240b8:	d11b      	bne.n	80240f2 <_vfiprintf_r+0x56>
 80240ba:	6875      	ldr	r5, [r6, #4]
 80240bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80240be:	07d9      	lsls	r1, r3, #31
 80240c0:	d405      	bmi.n	80240ce <_vfiprintf_r+0x32>
 80240c2:	89ab      	ldrh	r3, [r5, #12]
 80240c4:	059a      	lsls	r2, r3, #22
 80240c6:	d402      	bmi.n	80240ce <_vfiprintf_r+0x32>
 80240c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80240ca:	f7ff f912 	bl	80232f2 <__retarget_lock_acquire_recursive>
 80240ce:	89ab      	ldrh	r3, [r5, #12]
 80240d0:	071b      	lsls	r3, r3, #28
 80240d2:	d501      	bpl.n	80240d8 <_vfiprintf_r+0x3c>
 80240d4:	692b      	ldr	r3, [r5, #16]
 80240d6:	b9eb      	cbnz	r3, 8024114 <_vfiprintf_r+0x78>
 80240d8:	4629      	mov	r1, r5
 80240da:	4630      	mov	r0, r6
 80240dc:	f7fd fd2c 	bl	8021b38 <__swsetup_r>
 80240e0:	b1c0      	cbz	r0, 8024114 <_vfiprintf_r+0x78>
 80240e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80240e4:	07dc      	lsls	r4, r3, #31
 80240e6:	d50e      	bpl.n	8024106 <_vfiprintf_r+0x6a>
 80240e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80240ec:	b01d      	add	sp, #116	; 0x74
 80240ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80240f2:	4b7b      	ldr	r3, [pc, #492]	; (80242e0 <_vfiprintf_r+0x244>)
 80240f4:	429d      	cmp	r5, r3
 80240f6:	d101      	bne.n	80240fc <_vfiprintf_r+0x60>
 80240f8:	68b5      	ldr	r5, [r6, #8]
 80240fa:	e7df      	b.n	80240bc <_vfiprintf_r+0x20>
 80240fc:	4b79      	ldr	r3, [pc, #484]	; (80242e4 <_vfiprintf_r+0x248>)
 80240fe:	429d      	cmp	r5, r3
 8024100:	bf08      	it	eq
 8024102:	68f5      	ldreq	r5, [r6, #12]
 8024104:	e7da      	b.n	80240bc <_vfiprintf_r+0x20>
 8024106:	89ab      	ldrh	r3, [r5, #12]
 8024108:	0598      	lsls	r0, r3, #22
 802410a:	d4ed      	bmi.n	80240e8 <_vfiprintf_r+0x4c>
 802410c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802410e:	f7ff f8f1 	bl	80232f4 <__retarget_lock_release_recursive>
 8024112:	e7e9      	b.n	80240e8 <_vfiprintf_r+0x4c>
 8024114:	2300      	movs	r3, #0
 8024116:	9309      	str	r3, [sp, #36]	; 0x24
 8024118:	2320      	movs	r3, #32
 802411a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802411e:	f8cd 800c 	str.w	r8, [sp, #12]
 8024122:	2330      	movs	r3, #48	; 0x30
 8024124:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80242e8 <_vfiprintf_r+0x24c>
 8024128:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802412c:	f04f 0901 	mov.w	r9, #1
 8024130:	4623      	mov	r3, r4
 8024132:	469a      	mov	sl, r3
 8024134:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024138:	b10a      	cbz	r2, 802413e <_vfiprintf_r+0xa2>
 802413a:	2a25      	cmp	r2, #37	; 0x25
 802413c:	d1f9      	bne.n	8024132 <_vfiprintf_r+0x96>
 802413e:	ebba 0b04 	subs.w	fp, sl, r4
 8024142:	d00b      	beq.n	802415c <_vfiprintf_r+0xc0>
 8024144:	465b      	mov	r3, fp
 8024146:	4622      	mov	r2, r4
 8024148:	4629      	mov	r1, r5
 802414a:	4630      	mov	r0, r6
 802414c:	f7ff ff93 	bl	8024076 <__sfputs_r>
 8024150:	3001      	adds	r0, #1
 8024152:	f000 80aa 	beq.w	80242aa <_vfiprintf_r+0x20e>
 8024156:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024158:	445a      	add	r2, fp
 802415a:	9209      	str	r2, [sp, #36]	; 0x24
 802415c:	f89a 3000 	ldrb.w	r3, [sl]
 8024160:	2b00      	cmp	r3, #0
 8024162:	f000 80a2 	beq.w	80242aa <_vfiprintf_r+0x20e>
 8024166:	2300      	movs	r3, #0
 8024168:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802416c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024170:	f10a 0a01 	add.w	sl, sl, #1
 8024174:	9304      	str	r3, [sp, #16]
 8024176:	9307      	str	r3, [sp, #28]
 8024178:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802417c:	931a      	str	r3, [sp, #104]	; 0x68
 802417e:	4654      	mov	r4, sl
 8024180:	2205      	movs	r2, #5
 8024182:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024186:	4858      	ldr	r0, [pc, #352]	; (80242e8 <_vfiprintf_r+0x24c>)
 8024188:	f7dc f8b2 	bl	80002f0 <memchr>
 802418c:	9a04      	ldr	r2, [sp, #16]
 802418e:	b9d8      	cbnz	r0, 80241c8 <_vfiprintf_r+0x12c>
 8024190:	06d1      	lsls	r1, r2, #27
 8024192:	bf44      	itt	mi
 8024194:	2320      	movmi	r3, #32
 8024196:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802419a:	0713      	lsls	r3, r2, #28
 802419c:	bf44      	itt	mi
 802419e:	232b      	movmi	r3, #43	; 0x2b
 80241a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80241a4:	f89a 3000 	ldrb.w	r3, [sl]
 80241a8:	2b2a      	cmp	r3, #42	; 0x2a
 80241aa:	d015      	beq.n	80241d8 <_vfiprintf_r+0x13c>
 80241ac:	9a07      	ldr	r2, [sp, #28]
 80241ae:	4654      	mov	r4, sl
 80241b0:	2000      	movs	r0, #0
 80241b2:	f04f 0c0a 	mov.w	ip, #10
 80241b6:	4621      	mov	r1, r4
 80241b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80241bc:	3b30      	subs	r3, #48	; 0x30
 80241be:	2b09      	cmp	r3, #9
 80241c0:	d94e      	bls.n	8024260 <_vfiprintf_r+0x1c4>
 80241c2:	b1b0      	cbz	r0, 80241f2 <_vfiprintf_r+0x156>
 80241c4:	9207      	str	r2, [sp, #28]
 80241c6:	e014      	b.n	80241f2 <_vfiprintf_r+0x156>
 80241c8:	eba0 0308 	sub.w	r3, r0, r8
 80241cc:	fa09 f303 	lsl.w	r3, r9, r3
 80241d0:	4313      	orrs	r3, r2
 80241d2:	9304      	str	r3, [sp, #16]
 80241d4:	46a2      	mov	sl, r4
 80241d6:	e7d2      	b.n	802417e <_vfiprintf_r+0xe2>
 80241d8:	9b03      	ldr	r3, [sp, #12]
 80241da:	1d19      	adds	r1, r3, #4
 80241dc:	681b      	ldr	r3, [r3, #0]
 80241de:	9103      	str	r1, [sp, #12]
 80241e0:	2b00      	cmp	r3, #0
 80241e2:	bfbb      	ittet	lt
 80241e4:	425b      	neglt	r3, r3
 80241e6:	f042 0202 	orrlt.w	r2, r2, #2
 80241ea:	9307      	strge	r3, [sp, #28]
 80241ec:	9307      	strlt	r3, [sp, #28]
 80241ee:	bfb8      	it	lt
 80241f0:	9204      	strlt	r2, [sp, #16]
 80241f2:	7823      	ldrb	r3, [r4, #0]
 80241f4:	2b2e      	cmp	r3, #46	; 0x2e
 80241f6:	d10c      	bne.n	8024212 <_vfiprintf_r+0x176>
 80241f8:	7863      	ldrb	r3, [r4, #1]
 80241fa:	2b2a      	cmp	r3, #42	; 0x2a
 80241fc:	d135      	bne.n	802426a <_vfiprintf_r+0x1ce>
 80241fe:	9b03      	ldr	r3, [sp, #12]
 8024200:	1d1a      	adds	r2, r3, #4
 8024202:	681b      	ldr	r3, [r3, #0]
 8024204:	9203      	str	r2, [sp, #12]
 8024206:	2b00      	cmp	r3, #0
 8024208:	bfb8      	it	lt
 802420a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 802420e:	3402      	adds	r4, #2
 8024210:	9305      	str	r3, [sp, #20]
 8024212:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80242f8 <_vfiprintf_r+0x25c>
 8024216:	7821      	ldrb	r1, [r4, #0]
 8024218:	2203      	movs	r2, #3
 802421a:	4650      	mov	r0, sl
 802421c:	f7dc f868 	bl	80002f0 <memchr>
 8024220:	b140      	cbz	r0, 8024234 <_vfiprintf_r+0x198>
 8024222:	2340      	movs	r3, #64	; 0x40
 8024224:	eba0 000a 	sub.w	r0, r0, sl
 8024228:	fa03 f000 	lsl.w	r0, r3, r0
 802422c:	9b04      	ldr	r3, [sp, #16]
 802422e:	4303      	orrs	r3, r0
 8024230:	3401      	adds	r4, #1
 8024232:	9304      	str	r3, [sp, #16]
 8024234:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024238:	482c      	ldr	r0, [pc, #176]	; (80242ec <_vfiprintf_r+0x250>)
 802423a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802423e:	2206      	movs	r2, #6
 8024240:	f7dc f856 	bl	80002f0 <memchr>
 8024244:	2800      	cmp	r0, #0
 8024246:	d03f      	beq.n	80242c8 <_vfiprintf_r+0x22c>
 8024248:	4b29      	ldr	r3, [pc, #164]	; (80242f0 <_vfiprintf_r+0x254>)
 802424a:	bb1b      	cbnz	r3, 8024294 <_vfiprintf_r+0x1f8>
 802424c:	9b03      	ldr	r3, [sp, #12]
 802424e:	3307      	adds	r3, #7
 8024250:	f023 0307 	bic.w	r3, r3, #7
 8024254:	3308      	adds	r3, #8
 8024256:	9303      	str	r3, [sp, #12]
 8024258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802425a:	443b      	add	r3, r7
 802425c:	9309      	str	r3, [sp, #36]	; 0x24
 802425e:	e767      	b.n	8024130 <_vfiprintf_r+0x94>
 8024260:	fb0c 3202 	mla	r2, ip, r2, r3
 8024264:	460c      	mov	r4, r1
 8024266:	2001      	movs	r0, #1
 8024268:	e7a5      	b.n	80241b6 <_vfiprintf_r+0x11a>
 802426a:	2300      	movs	r3, #0
 802426c:	3401      	adds	r4, #1
 802426e:	9305      	str	r3, [sp, #20]
 8024270:	4619      	mov	r1, r3
 8024272:	f04f 0c0a 	mov.w	ip, #10
 8024276:	4620      	mov	r0, r4
 8024278:	f810 2b01 	ldrb.w	r2, [r0], #1
 802427c:	3a30      	subs	r2, #48	; 0x30
 802427e:	2a09      	cmp	r2, #9
 8024280:	d903      	bls.n	802428a <_vfiprintf_r+0x1ee>
 8024282:	2b00      	cmp	r3, #0
 8024284:	d0c5      	beq.n	8024212 <_vfiprintf_r+0x176>
 8024286:	9105      	str	r1, [sp, #20]
 8024288:	e7c3      	b.n	8024212 <_vfiprintf_r+0x176>
 802428a:	fb0c 2101 	mla	r1, ip, r1, r2
 802428e:	4604      	mov	r4, r0
 8024290:	2301      	movs	r3, #1
 8024292:	e7f0      	b.n	8024276 <_vfiprintf_r+0x1da>
 8024294:	ab03      	add	r3, sp, #12
 8024296:	9300      	str	r3, [sp, #0]
 8024298:	462a      	mov	r2, r5
 802429a:	4b16      	ldr	r3, [pc, #88]	; (80242f4 <_vfiprintf_r+0x258>)
 802429c:	a904      	add	r1, sp, #16
 802429e:	4630      	mov	r0, r6
 80242a0:	f7fb feae 	bl	8020000 <_printf_float>
 80242a4:	4607      	mov	r7, r0
 80242a6:	1c78      	adds	r0, r7, #1
 80242a8:	d1d6      	bne.n	8024258 <_vfiprintf_r+0x1bc>
 80242aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80242ac:	07d9      	lsls	r1, r3, #31
 80242ae:	d405      	bmi.n	80242bc <_vfiprintf_r+0x220>
 80242b0:	89ab      	ldrh	r3, [r5, #12]
 80242b2:	059a      	lsls	r2, r3, #22
 80242b4:	d402      	bmi.n	80242bc <_vfiprintf_r+0x220>
 80242b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80242b8:	f7ff f81c 	bl	80232f4 <__retarget_lock_release_recursive>
 80242bc:	89ab      	ldrh	r3, [r5, #12]
 80242be:	065b      	lsls	r3, r3, #25
 80242c0:	f53f af12 	bmi.w	80240e8 <_vfiprintf_r+0x4c>
 80242c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80242c6:	e711      	b.n	80240ec <_vfiprintf_r+0x50>
 80242c8:	ab03      	add	r3, sp, #12
 80242ca:	9300      	str	r3, [sp, #0]
 80242cc:	462a      	mov	r2, r5
 80242ce:	4b09      	ldr	r3, [pc, #36]	; (80242f4 <_vfiprintf_r+0x258>)
 80242d0:	a904      	add	r1, sp, #16
 80242d2:	4630      	mov	r0, r6
 80242d4:	f7fc f920 	bl	8020518 <_printf_i>
 80242d8:	e7e4      	b.n	80242a4 <_vfiprintf_r+0x208>
 80242da:	bf00      	nop
 80242dc:	08029534 	.word	0x08029534
 80242e0:	08029554 	.word	0x08029554
 80242e4:	08029514 	.word	0x08029514
 80242e8:	08029754 	.word	0x08029754
 80242ec:	0802975e 	.word	0x0802975e
 80242f0:	08020001 	.word	0x08020001
 80242f4:	08024077 	.word	0x08024077
 80242f8:	0802975a 	.word	0x0802975a
 80242fc:	00000000 	.word	0x00000000

08024300 <nan>:
 8024300:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8024308 <nan+0x8>
 8024304:	4770      	bx	lr
 8024306:	bf00      	nop
 8024308:	00000000 	.word	0x00000000
 802430c:	7ff80000 	.word	0x7ff80000

08024310 <__sread>:
 8024310:	b510      	push	{r4, lr}
 8024312:	460c      	mov	r4, r1
 8024314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024318:	f000 f8ce 	bl	80244b8 <_read_r>
 802431c:	2800      	cmp	r0, #0
 802431e:	bfab      	itete	ge
 8024320:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8024322:	89a3      	ldrhlt	r3, [r4, #12]
 8024324:	181b      	addge	r3, r3, r0
 8024326:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802432a:	bfac      	ite	ge
 802432c:	6563      	strge	r3, [r4, #84]	; 0x54
 802432e:	81a3      	strhlt	r3, [r4, #12]
 8024330:	bd10      	pop	{r4, pc}

08024332 <__swrite>:
 8024332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024336:	461f      	mov	r7, r3
 8024338:	898b      	ldrh	r3, [r1, #12]
 802433a:	05db      	lsls	r3, r3, #23
 802433c:	4605      	mov	r5, r0
 802433e:	460c      	mov	r4, r1
 8024340:	4616      	mov	r6, r2
 8024342:	d505      	bpl.n	8024350 <__swrite+0x1e>
 8024344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024348:	2302      	movs	r3, #2
 802434a:	2200      	movs	r2, #0
 802434c:	f000 f87c 	bl	8024448 <_lseek_r>
 8024350:	89a3      	ldrh	r3, [r4, #12]
 8024352:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024356:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802435a:	81a3      	strh	r3, [r4, #12]
 802435c:	4632      	mov	r2, r6
 802435e:	463b      	mov	r3, r7
 8024360:	4628      	mov	r0, r5
 8024362:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024366:	f000 b823 	b.w	80243b0 <_write_r>

0802436a <__sseek>:
 802436a:	b510      	push	{r4, lr}
 802436c:	460c      	mov	r4, r1
 802436e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024372:	f000 f869 	bl	8024448 <_lseek_r>
 8024376:	1c43      	adds	r3, r0, #1
 8024378:	89a3      	ldrh	r3, [r4, #12]
 802437a:	bf15      	itete	ne
 802437c:	6560      	strne	r0, [r4, #84]	; 0x54
 802437e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8024382:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8024386:	81a3      	strheq	r3, [r4, #12]
 8024388:	bf18      	it	ne
 802438a:	81a3      	strhne	r3, [r4, #12]
 802438c:	bd10      	pop	{r4, pc}

0802438e <__sclose>:
 802438e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024392:	f000 b827 	b.w	80243e4 <_close_r>

08024396 <__ascii_wctomb>:
 8024396:	b149      	cbz	r1, 80243ac <__ascii_wctomb+0x16>
 8024398:	2aff      	cmp	r2, #255	; 0xff
 802439a:	bf85      	ittet	hi
 802439c:	238a      	movhi	r3, #138	; 0x8a
 802439e:	6003      	strhi	r3, [r0, #0]
 80243a0:	700a      	strbls	r2, [r1, #0]
 80243a2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80243a6:	bf98      	it	ls
 80243a8:	2001      	movls	r0, #1
 80243aa:	4770      	bx	lr
 80243ac:	4608      	mov	r0, r1
 80243ae:	4770      	bx	lr

080243b0 <_write_r>:
 80243b0:	b538      	push	{r3, r4, r5, lr}
 80243b2:	4d07      	ldr	r5, [pc, #28]	; (80243d0 <_write_r+0x20>)
 80243b4:	4604      	mov	r4, r0
 80243b6:	4608      	mov	r0, r1
 80243b8:	4611      	mov	r1, r2
 80243ba:	2200      	movs	r2, #0
 80243bc:	602a      	str	r2, [r5, #0]
 80243be:	461a      	mov	r2, r3
 80243c0:	f7de ff05 	bl	80031ce <_write>
 80243c4:	1c43      	adds	r3, r0, #1
 80243c6:	d102      	bne.n	80243ce <_write_r+0x1e>
 80243c8:	682b      	ldr	r3, [r5, #0]
 80243ca:	b103      	cbz	r3, 80243ce <_write_r+0x1e>
 80243cc:	6023      	str	r3, [r4, #0]
 80243ce:	bd38      	pop	{r3, r4, r5, pc}
 80243d0:	2400b6a8 	.word	0x2400b6a8

080243d4 <abort>:
 80243d4:	b508      	push	{r3, lr}
 80243d6:	2006      	movs	r0, #6
 80243d8:	f000 f8a8 	bl	802452c <raise>
 80243dc:	2001      	movs	r0, #1
 80243de:	f7de fecf 	bl	8003180 <_exit>
	...

080243e4 <_close_r>:
 80243e4:	b538      	push	{r3, r4, r5, lr}
 80243e6:	4d06      	ldr	r5, [pc, #24]	; (8024400 <_close_r+0x1c>)
 80243e8:	2300      	movs	r3, #0
 80243ea:	4604      	mov	r4, r0
 80243ec:	4608      	mov	r0, r1
 80243ee:	602b      	str	r3, [r5, #0]
 80243f0:	f7de ff09 	bl	8003206 <_close>
 80243f4:	1c43      	adds	r3, r0, #1
 80243f6:	d102      	bne.n	80243fe <_close_r+0x1a>
 80243f8:	682b      	ldr	r3, [r5, #0]
 80243fa:	b103      	cbz	r3, 80243fe <_close_r+0x1a>
 80243fc:	6023      	str	r3, [r4, #0]
 80243fe:	bd38      	pop	{r3, r4, r5, pc}
 8024400:	2400b6a8 	.word	0x2400b6a8

08024404 <_fstat_r>:
 8024404:	b538      	push	{r3, r4, r5, lr}
 8024406:	4d07      	ldr	r5, [pc, #28]	; (8024424 <_fstat_r+0x20>)
 8024408:	2300      	movs	r3, #0
 802440a:	4604      	mov	r4, r0
 802440c:	4608      	mov	r0, r1
 802440e:	4611      	mov	r1, r2
 8024410:	602b      	str	r3, [r5, #0]
 8024412:	f7de ff04 	bl	800321e <_fstat>
 8024416:	1c43      	adds	r3, r0, #1
 8024418:	d102      	bne.n	8024420 <_fstat_r+0x1c>
 802441a:	682b      	ldr	r3, [r5, #0]
 802441c:	b103      	cbz	r3, 8024420 <_fstat_r+0x1c>
 802441e:	6023      	str	r3, [r4, #0]
 8024420:	bd38      	pop	{r3, r4, r5, pc}
 8024422:	bf00      	nop
 8024424:	2400b6a8 	.word	0x2400b6a8

08024428 <_isatty_r>:
 8024428:	b538      	push	{r3, r4, r5, lr}
 802442a:	4d06      	ldr	r5, [pc, #24]	; (8024444 <_isatty_r+0x1c>)
 802442c:	2300      	movs	r3, #0
 802442e:	4604      	mov	r4, r0
 8024430:	4608      	mov	r0, r1
 8024432:	602b      	str	r3, [r5, #0]
 8024434:	f7de ff03 	bl	800323e <_isatty>
 8024438:	1c43      	adds	r3, r0, #1
 802443a:	d102      	bne.n	8024442 <_isatty_r+0x1a>
 802443c:	682b      	ldr	r3, [r5, #0]
 802443e:	b103      	cbz	r3, 8024442 <_isatty_r+0x1a>
 8024440:	6023      	str	r3, [r4, #0]
 8024442:	bd38      	pop	{r3, r4, r5, pc}
 8024444:	2400b6a8 	.word	0x2400b6a8

08024448 <_lseek_r>:
 8024448:	b538      	push	{r3, r4, r5, lr}
 802444a:	4d07      	ldr	r5, [pc, #28]	; (8024468 <_lseek_r+0x20>)
 802444c:	4604      	mov	r4, r0
 802444e:	4608      	mov	r0, r1
 8024450:	4611      	mov	r1, r2
 8024452:	2200      	movs	r2, #0
 8024454:	602a      	str	r2, [r5, #0]
 8024456:	461a      	mov	r2, r3
 8024458:	f7de fefc 	bl	8003254 <_lseek>
 802445c:	1c43      	adds	r3, r0, #1
 802445e:	d102      	bne.n	8024466 <_lseek_r+0x1e>
 8024460:	682b      	ldr	r3, [r5, #0]
 8024462:	b103      	cbz	r3, 8024466 <_lseek_r+0x1e>
 8024464:	6023      	str	r3, [r4, #0]
 8024466:	bd38      	pop	{r3, r4, r5, pc}
 8024468:	2400b6a8 	.word	0x2400b6a8

0802446c <_realloc_r>:
 802446c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802446e:	4607      	mov	r7, r0
 8024470:	4614      	mov	r4, r2
 8024472:	460e      	mov	r6, r1
 8024474:	b921      	cbnz	r1, 8024480 <_realloc_r+0x14>
 8024476:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802447a:	4611      	mov	r1, r2
 802447c:	f7fb bcd4 	b.w	801fe28 <_malloc_r>
 8024480:	b922      	cbnz	r2, 802448c <_realloc_r+0x20>
 8024482:	f7fb fc81 	bl	801fd88 <_free_r>
 8024486:	4625      	mov	r5, r4
 8024488:	4628      	mov	r0, r5
 802448a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802448c:	f000 f86a 	bl	8024564 <_malloc_usable_size_r>
 8024490:	42a0      	cmp	r0, r4
 8024492:	d20f      	bcs.n	80244b4 <_realloc_r+0x48>
 8024494:	4621      	mov	r1, r4
 8024496:	4638      	mov	r0, r7
 8024498:	f7fb fcc6 	bl	801fe28 <_malloc_r>
 802449c:	4605      	mov	r5, r0
 802449e:	2800      	cmp	r0, #0
 80244a0:	d0f2      	beq.n	8024488 <_realloc_r+0x1c>
 80244a2:	4631      	mov	r1, r6
 80244a4:	4622      	mov	r2, r4
 80244a6:	f7fb fc3f 	bl	801fd28 <memcpy>
 80244aa:	4631      	mov	r1, r6
 80244ac:	4638      	mov	r0, r7
 80244ae:	f7fb fc6b 	bl	801fd88 <_free_r>
 80244b2:	e7e9      	b.n	8024488 <_realloc_r+0x1c>
 80244b4:	4635      	mov	r5, r6
 80244b6:	e7e7      	b.n	8024488 <_realloc_r+0x1c>

080244b8 <_read_r>:
 80244b8:	b538      	push	{r3, r4, r5, lr}
 80244ba:	4d07      	ldr	r5, [pc, #28]	; (80244d8 <_read_r+0x20>)
 80244bc:	4604      	mov	r4, r0
 80244be:	4608      	mov	r0, r1
 80244c0:	4611      	mov	r1, r2
 80244c2:	2200      	movs	r2, #0
 80244c4:	602a      	str	r2, [r5, #0]
 80244c6:	461a      	mov	r2, r3
 80244c8:	f7de fe64 	bl	8003194 <_read>
 80244cc:	1c43      	adds	r3, r0, #1
 80244ce:	d102      	bne.n	80244d6 <_read_r+0x1e>
 80244d0:	682b      	ldr	r3, [r5, #0]
 80244d2:	b103      	cbz	r3, 80244d6 <_read_r+0x1e>
 80244d4:	6023      	str	r3, [r4, #0]
 80244d6:	bd38      	pop	{r3, r4, r5, pc}
 80244d8:	2400b6a8 	.word	0x2400b6a8

080244dc <_raise_r>:
 80244dc:	291f      	cmp	r1, #31
 80244de:	b538      	push	{r3, r4, r5, lr}
 80244e0:	4604      	mov	r4, r0
 80244e2:	460d      	mov	r5, r1
 80244e4:	d904      	bls.n	80244f0 <_raise_r+0x14>
 80244e6:	2316      	movs	r3, #22
 80244e8:	6003      	str	r3, [r0, #0]
 80244ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80244ee:	bd38      	pop	{r3, r4, r5, pc}
 80244f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80244f2:	b112      	cbz	r2, 80244fa <_raise_r+0x1e>
 80244f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80244f8:	b94b      	cbnz	r3, 802450e <_raise_r+0x32>
 80244fa:	4620      	mov	r0, r4
 80244fc:	f000 f830 	bl	8024560 <_getpid_r>
 8024500:	462a      	mov	r2, r5
 8024502:	4601      	mov	r1, r0
 8024504:	4620      	mov	r0, r4
 8024506:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802450a:	f000 b817 	b.w	802453c <_kill_r>
 802450e:	2b01      	cmp	r3, #1
 8024510:	d00a      	beq.n	8024528 <_raise_r+0x4c>
 8024512:	1c59      	adds	r1, r3, #1
 8024514:	d103      	bne.n	802451e <_raise_r+0x42>
 8024516:	2316      	movs	r3, #22
 8024518:	6003      	str	r3, [r0, #0]
 802451a:	2001      	movs	r0, #1
 802451c:	e7e7      	b.n	80244ee <_raise_r+0x12>
 802451e:	2400      	movs	r4, #0
 8024520:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8024524:	4628      	mov	r0, r5
 8024526:	4798      	blx	r3
 8024528:	2000      	movs	r0, #0
 802452a:	e7e0      	b.n	80244ee <_raise_r+0x12>

0802452c <raise>:
 802452c:	4b02      	ldr	r3, [pc, #8]	; (8024538 <raise+0xc>)
 802452e:	4601      	mov	r1, r0
 8024530:	6818      	ldr	r0, [r3, #0]
 8024532:	f7ff bfd3 	b.w	80244dc <_raise_r>
 8024536:	bf00      	nop
 8024538:	24003844 	.word	0x24003844

0802453c <_kill_r>:
 802453c:	b538      	push	{r3, r4, r5, lr}
 802453e:	4d07      	ldr	r5, [pc, #28]	; (802455c <_kill_r+0x20>)
 8024540:	2300      	movs	r3, #0
 8024542:	4604      	mov	r4, r0
 8024544:	4608      	mov	r0, r1
 8024546:	4611      	mov	r1, r2
 8024548:	602b      	str	r3, [r5, #0]
 802454a:	f7de fe07 	bl	800315c <_kill>
 802454e:	1c43      	adds	r3, r0, #1
 8024550:	d102      	bne.n	8024558 <_kill_r+0x1c>
 8024552:	682b      	ldr	r3, [r5, #0]
 8024554:	b103      	cbz	r3, 8024558 <_kill_r+0x1c>
 8024556:	6023      	str	r3, [r4, #0]
 8024558:	bd38      	pop	{r3, r4, r5, pc}
 802455a:	bf00      	nop
 802455c:	2400b6a8 	.word	0x2400b6a8

08024560 <_getpid_r>:
 8024560:	f7de bdf4 	b.w	800314c <_getpid>

08024564 <_malloc_usable_size_r>:
 8024564:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024568:	1f18      	subs	r0, r3, #4
 802456a:	2b00      	cmp	r3, #0
 802456c:	bfbc      	itt	lt
 802456e:	580b      	ldrlt	r3, [r1, r0]
 8024570:	18c0      	addlt	r0, r0, r3
 8024572:	4770      	bx	lr

08024574 <checkint>:
 8024574:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8024578:	f240 33fe 	movw	r3, #1022	; 0x3fe
 802457c:	429a      	cmp	r2, r3
 802457e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024580:	dd2b      	ble.n	80245da <checkint+0x66>
 8024582:	f240 4333 	movw	r3, #1075	; 0x433
 8024586:	429a      	cmp	r2, r3
 8024588:	dc25      	bgt.n	80245d6 <checkint+0x62>
 802458a:	1a9b      	subs	r3, r3, r2
 802458c:	f1a3 0620 	sub.w	r6, r3, #32
 8024590:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024594:	fa02 f606 	lsl.w	r6, r2, r6
 8024598:	fa02 f403 	lsl.w	r4, r2, r3
 802459c:	f1c3 0520 	rsb	r5, r3, #32
 80245a0:	4334      	orrs	r4, r6
 80245a2:	fa22 f505 	lsr.w	r5, r2, r5
 80245a6:	432c      	orrs	r4, r5
 80245a8:	409a      	lsls	r2, r3
 80245aa:	ea20 0602 	bic.w	r6, r0, r2
 80245ae:	ea21 0704 	bic.w	r7, r1, r4
 80245b2:	ea56 0207 	orrs.w	r2, r6, r7
 80245b6:	f1a3 0420 	sub.w	r4, r3, #32
 80245ba:	f1c3 0220 	rsb	r2, r3, #32
 80245be:	d10c      	bne.n	80245da <checkint+0x66>
 80245c0:	40d8      	lsrs	r0, r3
 80245c2:	fa01 f302 	lsl.w	r3, r1, r2
 80245c6:	4318      	orrs	r0, r3
 80245c8:	40e1      	lsrs	r1, r4
 80245ca:	4308      	orrs	r0, r1
 80245cc:	f000 0301 	and.w	r3, r0, #1
 80245d0:	f1c3 0002 	rsb	r0, r3, #2
 80245d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80245d6:	2002      	movs	r0, #2
 80245d8:	e7fc      	b.n	80245d4 <checkint+0x60>
 80245da:	2000      	movs	r0, #0
 80245dc:	e7fa      	b.n	80245d4 <checkint+0x60>
	...

080245e0 <pow>:
 80245e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80245e4:	ed2d 8b0a 	vpush	{d8-d12}
 80245e8:	b09b      	sub	sp, #108	; 0x6c
 80245ea:	ed8d 0b02 	vstr	d0, [sp, #8]
 80245ee:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80245f2:	ed8d 1b00 	vstr	d1, [sp]
 80245f6:	ea4f 5915 	mov.w	r9, r5, lsr #20
 80245fa:	e9dd 6700 	ldrd	r6, r7, [sp]
 80245fe:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8024602:	f240 71fd 	movw	r1, #2045	; 0x7fd
 8024606:	4288      	cmp	r0, r1
 8024608:	46cc      	mov	ip, r9
 802460a:	ea4f 5817 	mov.w	r8, r7, lsr #20
 802460e:	d806      	bhi.n	802461e <pow+0x3e>
 8024610:	f3c8 010a 	ubfx	r1, r8, #0, #11
 8024614:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 8024618:	297f      	cmp	r1, #127	; 0x7f
 802461a:	f240 81ab 	bls.w	8024974 <pow+0x394>
 802461e:	19b1      	adds	r1, r6, r6
 8024620:	9104      	str	r1, [sp, #16]
 8024622:	eb47 0107 	adc.w	r1, r7, r7
 8024626:	9105      	str	r1, [sp, #20]
 8024628:	9904      	ldr	r1, [sp, #16]
 802462a:	f111 31ff 	adds.w	r1, r1, #4294967295	; 0xffffffff
 802462e:	460a      	mov	r2, r1
 8024630:	9905      	ldr	r1, [sp, #20]
 8024632:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 8024636:	460b      	mov	r3, r1
 8024638:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 802463c:	f06f 0001 	mvn.w	r0, #1
 8024640:	4299      	cmp	r1, r3
 8024642:	bf08      	it	eq
 8024644:	4290      	cmpeq	r0, r2
 8024646:	d260      	bcs.n	802470a <pow+0x12a>
 8024648:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802464c:	4313      	orrs	r3, r2
 802464e:	d11a      	bne.n	8024686 <pow+0xa6>
 8024650:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 8024654:	1923      	adds	r3, r4, r4
 8024656:	930c      	str	r3, [sp, #48]	; 0x30
 8024658:	eb42 0302 	adc.w	r3, r2, r2
 802465c:	930d      	str	r3, [sp, #52]	; 0x34
 802465e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8024662:	4bcf      	ldr	r3, [pc, #828]	; (80249a0 <pow+0x3c0>)
 8024664:	2200      	movs	r2, #0
 8024666:	428b      	cmp	r3, r1
 8024668:	bf08      	it	eq
 802466a:	4282      	cmpeq	r2, r0
 802466c:	f080 8265 	bcs.w	8024b3a <pow+0x55a>
 8024670:	ed9d 7b02 	vldr	d7, [sp, #8]
 8024674:	ed9d 6b00 	vldr	d6, [sp]
 8024678:	ee37 0b06 	vadd.f64	d0, d7, d6
 802467c:	b01b      	add	sp, #108	; 0x6c
 802467e:	ecbd 8b0a 	vpop	{d8-d12}
 8024682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024686:	49c7      	ldr	r1, [pc, #796]	; (80249a4 <pow+0x3c4>)
 8024688:	2000      	movs	r0, #0
 802468a:	428d      	cmp	r5, r1
 802468c:	bf08      	it	eq
 802468e:	4284      	cmpeq	r4, r0
 8024690:	d10b      	bne.n	80246aa <pow+0xca>
 8024692:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8024696:	19b3      	adds	r3, r6, r6
 8024698:	930e      	str	r3, [sp, #56]	; 0x38
 802469a:	eb42 0302 	adc.w	r3, r2, r2
 802469e:	930f      	str	r3, [sp, #60]	; 0x3c
 80246a0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80246a4:	4bbe      	ldr	r3, [pc, #760]	; (80249a0 <pow+0x3c0>)
 80246a6:	2200      	movs	r2, #0
 80246a8:	e7dd      	b.n	8024666 <pow+0x86>
 80246aa:	1921      	adds	r1, r4, r4
 80246ac:	9106      	str	r1, [sp, #24]
 80246ae:	eb45 0105 	adc.w	r1, r5, r5
 80246b2:	9107      	str	r1, [sp, #28]
 80246b4:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80246b8:	49bb      	ldr	r1, [pc, #748]	; (80249a8 <pow+0x3c8>)
 80246ba:	2000      	movs	r0, #0
 80246bc:	42a1      	cmp	r1, r4
 80246be:	bf08      	it	eq
 80246c0:	4298      	cmpeq	r0, r3
 80246c2:	d3d5      	bcc.n	8024670 <pow+0x90>
 80246c4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80246c8:	428c      	cmp	r4, r1
 80246ca:	bf08      	it	eq
 80246cc:	4283      	cmpeq	r3, r0
 80246ce:	d1cf      	bne.n	8024670 <pow+0x90>
 80246d0:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80246d4:	49b5      	ldr	r1, [pc, #724]	; (80249ac <pow+0x3cc>)
 80246d6:	2000      	movs	r0, #0
 80246d8:	428c      	cmp	r4, r1
 80246da:	bf08      	it	eq
 80246dc:	4283      	cmpeq	r3, r0
 80246de:	f000 822c 	beq.w	8024b3a <pow+0x55a>
 80246e2:	49b3      	ldr	r1, [pc, #716]	; (80249b0 <pow+0x3d0>)
 80246e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80246e8:	42a1      	cmp	r1, r4
 80246ea:	bf08      	it	eq
 80246ec:	4298      	cmpeq	r0, r3
 80246ee:	ea6f 0307 	mvn.w	r3, r7
 80246f2:	bf34      	ite	cc
 80246f4:	2201      	movcc	r2, #1
 80246f6:	2200      	movcs	r2, #0
 80246f8:	0fdb      	lsrs	r3, r3, #31
 80246fa:	429a      	cmp	r2, r3
 80246fc:	f040 821a 	bne.w	8024b34 <pow+0x554>
 8024700:	ed9d 7b00 	vldr	d7, [sp]
 8024704:	ee27 0b07 	vmul.f64	d0, d7, d7
 8024708:	e7b8      	b.n	802467c <pow+0x9c>
 802470a:	1923      	adds	r3, r4, r4
 802470c:	9308      	str	r3, [sp, #32]
 802470e:	eb45 0305 	adc.w	r3, r5, r5
 8024712:	9309      	str	r3, [sp, #36]	; 0x24
 8024714:	9b08      	ldr	r3, [sp, #32]
 8024716:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 802471a:	9310      	str	r3, [sp, #64]	; 0x40
 802471c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802471e:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 8024722:	9311      	str	r3, [sp, #68]	; 0x44
 8024724:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8024728:	4299      	cmp	r1, r3
 802472a:	bf08      	it	eq
 802472c:	4290      	cmpeq	r0, r2
 802472e:	d22d      	bcs.n	802478c <pow+0x1ac>
 8024730:	ed9d 7b02 	vldr	d7, [sp, #8]
 8024734:	2c00      	cmp	r4, #0
 8024736:	f175 0300 	sbcs.w	r3, r5, #0
 802473a:	ee27 0b07 	vmul.f64	d0, d7, d7
 802473e:	da16      	bge.n	802476e <pow+0x18e>
 8024740:	4630      	mov	r0, r6
 8024742:	4639      	mov	r1, r7
 8024744:	f7ff ff16 	bl	8024574 <checkint>
 8024748:	2801      	cmp	r0, #1
 802474a:	d110      	bne.n	802476e <pow+0x18e>
 802474c:	eeb1 0b40 	vneg.f64	d0, d0
 8024750:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8024754:	4323      	orrs	r3, r4
 8024756:	d10c      	bne.n	8024772 <pow+0x192>
 8024758:	2e00      	cmp	r6, #0
 802475a:	f177 0300 	sbcs.w	r3, r7, #0
 802475e:	da8d      	bge.n	802467c <pow+0x9c>
 8024760:	b01b      	add	sp, #108	; 0x6c
 8024762:	ecbd 8b0a 	vpop	{d8-d12}
 8024766:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802476a:	f001 b8a1 	b.w	80258b0 <__math_divzero>
 802476e:	2000      	movs	r0, #0
 8024770:	e7ee      	b.n	8024750 <pow+0x170>
 8024772:	2e00      	cmp	r6, #0
 8024774:	f177 0300 	sbcs.w	r3, r7, #0
 8024778:	da80      	bge.n	802467c <pow+0x9c>
 802477a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 802477e:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8024782:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8024786:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 802478a:	e777      	b.n	802467c <pow+0x9c>
 802478c:	2c00      	cmp	r4, #0
 802478e:	f175 0300 	sbcs.w	r3, r5, #0
 8024792:	da35      	bge.n	8024800 <pow+0x220>
 8024794:	4630      	mov	r0, r6
 8024796:	4639      	mov	r1, r7
 8024798:	f7ff feec 	bl	8024574 <checkint>
 802479c:	b940      	cbnz	r0, 80247b0 <pow+0x1d0>
 802479e:	ed9d 0b02 	vldr	d0, [sp, #8]
 80247a2:	b01b      	add	sp, #108	; 0x6c
 80247a4:	ecbd 8b0a 	vpop	{d8-d12}
 80247a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80247ac:	f001 b898 	b.w	80258e0 <__math_invalid>
 80247b0:	2801      	cmp	r0, #1
 80247b2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80247b6:	bf14      	ite	ne
 80247b8:	2000      	movne	r0, #0
 80247ba:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 80247be:	461d      	mov	r5, r3
 80247c0:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 80247c4:	f3c8 030a 	ubfx	r3, r8, #0, #11
 80247c8:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 80247cc:	2a7f      	cmp	r2, #127	; 0x7f
 80247ce:	d933      	bls.n	8024838 <pow+0x258>
 80247d0:	4974      	ldr	r1, [pc, #464]	; (80249a4 <pow+0x3c4>)
 80247d2:	2000      	movs	r0, #0
 80247d4:	428d      	cmp	r5, r1
 80247d6:	bf08      	it	eq
 80247d8:	4284      	cmpeq	r4, r0
 80247da:	f000 81ae 	beq.w	8024b3a <pow+0x55a>
 80247de:	f240 32bd 	movw	r2, #957	; 0x3bd
 80247e2:	4293      	cmp	r3, r2
 80247e4:	d80e      	bhi.n	8024804 <pow+0x224>
 80247e6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80247ea:	ed9d 7b00 	vldr	d7, [sp]
 80247ee:	42a9      	cmp	r1, r5
 80247f0:	bf08      	it	eq
 80247f2:	42a0      	cmpeq	r0, r4
 80247f4:	bf34      	ite	cc
 80247f6:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 80247fa:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 80247fe:	e73d      	b.n	802467c <pow+0x9c>
 8024800:	2000      	movs	r0, #0
 8024802:	e7df      	b.n	80247c4 <pow+0x1e4>
 8024804:	42a9      	cmp	r1, r5
 8024806:	bf08      	it	eq
 8024808:	42a0      	cmpeq	r0, r4
 802480a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 802480e:	bf2c      	ite	cs
 8024810:	2301      	movcs	r3, #1
 8024812:	2300      	movcc	r3, #0
 8024814:	4590      	cmp	r8, r2
 8024816:	bf8c      	ite	hi
 8024818:	f04f 0800 	movhi.w	r8, #0
 802481c:	f04f 0801 	movls.w	r8, #1
 8024820:	4543      	cmp	r3, r8
 8024822:	f04f 0000 	mov.w	r0, #0
 8024826:	f000 80af 	beq.w	8024988 <pow+0x3a8>
 802482a:	b01b      	add	sp, #108	; 0x6c
 802482c:	ecbd 8b0a 	vpop	{d8-d12}
 8024830:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024834:	f001 b834 	b.w	80258a0 <__math_oflow>
 8024838:	f1bc 0f00 	cmp.w	ip, #0
 802483c:	d10e      	bne.n	802485c <pow+0x27c>
 802483e:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8024998 <pow+0x3b8>
 8024842:	ed9d 6b02 	vldr	d6, [sp, #8]
 8024846:	ee26 7b07 	vmul.f64	d7, d6, d7
 802484a:	ec57 6b17 	vmov	r6, r7, d7
 802484e:	4b59      	ldr	r3, [pc, #356]	; (80249b4 <pow+0x3d4>)
 8024850:	2100      	movs	r1, #0
 8024852:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8024856:	1874      	adds	r4, r6, r1
 8024858:	eb42 0503 	adc.w	r5, r2, r3
 802485c:	2300      	movs	r3, #0
 802485e:	18e3      	adds	r3, r4, r3
 8024860:	4b55      	ldr	r3, [pc, #340]	; (80249b8 <pow+0x3d8>)
 8024862:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8024866:	eb45 0303 	adc.w	r3, r5, r3
 802486a:	1519      	asrs	r1, r3, #20
 802486c:	ee03 1a10 	vmov	s6, r1
 8024870:	0d1e      	lsrs	r6, r3, #20
 8024872:	2100      	movs	r1, #0
 8024874:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8024878:	0536      	lsls	r6, r6, #20
 802487a:	1a63      	subs	r3, r4, r1
 802487c:	9312      	str	r3, [sp, #72]	; 0x48
 802487e:	eb65 0306 	sbc.w	r3, r5, r6
 8024882:	9313      	str	r3, [sp, #76]	; 0x4c
 8024884:	4b4d      	ldr	r3, [pc, #308]	; (80249bc <pow+0x3dc>)
 8024886:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 802488a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 802488e:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 8024892:	eea5 6b07 	vfma.f64	d6, d5, d7
 8024896:	ed93 7b00 	vldr	d7, [r3]
 802489a:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 802489e:	ed93 4b02 	vldr	d4, [r3, #8]
 80248a2:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 80248a6:	eea3 5b07 	vfma.f64	d5, d3, d7
 80248aa:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 80248ae:	ee36 9b05 	vadd.f64	d9, d6, d5
 80248b2:	ee35 5b49 	vsub.f64	d5, d5, d9
 80248b6:	eea3 7b04 	vfma.f64	d7, d3, d4
 80248ba:	ed93 4b04 	vldr	d4, [r3, #16]
 80248be:	ee35 5b06 	vadd.f64	d5, d5, d6
 80248c2:	ee37 7b05 	vadd.f64	d7, d7, d5
 80248c6:	ee26 4b04 	vmul.f64	d4, d6, d4
 80248ca:	ed93 3b08 	vldr	d3, [r3, #32]
 80248ce:	ee26 0b04 	vmul.f64	d0, d6, d4
 80248d2:	eeb0 8b40 	vmov.f64	d8, d0
 80248d6:	ee94 8b06 	vfnms.f64	d8, d4, d6
 80248da:	ed93 4b06 	vldr	d4, [r3, #24]
 80248de:	ee26 ab00 	vmul.f64	d10, d6, d0
 80248e2:	ee39 1b00 	vadd.f64	d1, d9, d0
 80248e6:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 80248ea:	eea6 4b03 	vfma.f64	d4, d6, d3
 80248ee:	ee39 9b41 	vsub.f64	d9, d9, d1
 80248f2:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 80248f6:	ee37 8b08 	vadd.f64	d8, d7, d8
 80248fa:	ee39 9b00 	vadd.f64	d9, d9, d0
 80248fe:	eea6 3b02 	vfma.f64	d3, d6, d2
 8024902:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8024906:	ee38 9b09 	vadd.f64	d9, d8, d9
 802490a:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 802490e:	eea6 2b0c 	vfma.f64	d2, d6, d12
 8024912:	ed9d 6b00 	vldr	d6, [sp]
 8024916:	eea0 3b02 	vfma.f64	d3, d0, d2
 802491a:	eea0 4b03 	vfma.f64	d4, d0, d3
 802491e:	eeaa 9b04 	vfma.f64	d9, d10, d4
 8024922:	ee31 7b09 	vadd.f64	d7, d1, d9
 8024926:	ee26 6b07 	vmul.f64	d6, d6, d7
 802492a:	ed8d 6b02 	vstr	d6, [sp, #8]
 802492e:	eeb0 3b46 	vmov.f64	d3, d6
 8024932:	ee31 1b47 	vsub.f64	d1, d1, d7
 8024936:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802493a:	ee31 9b09 	vadd.f64	d9, d1, d9
 802493e:	ed9d 6b00 	vldr	d6, [sp]
 8024942:	f3c3 570a 	ubfx	r7, r3, #20, #11
 8024946:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 802494a:	193c      	adds	r4, r7, r4
 802494c:	2c3e      	cmp	r4, #62	; 0x3e
 802494e:	ee96 3b07 	vfnms.f64	d3, d6, d7
 8024952:	eea6 3b09 	vfma.f64	d3, d6, d9
 8024956:	d934      	bls.n	80249c2 <pow+0x3e2>
 8024958:	428c      	cmp	r4, r1
 802495a:	da0d      	bge.n	8024978 <pow+0x398>
 802495c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8024960:	ed9d 7b02 	vldr	d7, [sp, #8]
 8024964:	ee37 0b00 	vadd.f64	d0, d7, d0
 8024968:	2800      	cmp	r0, #0
 802496a:	f43f ae87 	beq.w	802467c <pow+0x9c>
 802496e:	eeb1 0b40 	vneg.f64	d0, d0
 8024972:	e683      	b.n	802467c <pow+0x9c>
 8024974:	2000      	movs	r0, #0
 8024976:	e771      	b.n	802485c <pow+0x27c>
 8024978:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 802497c:	d920      	bls.n	80249c0 <pow+0x3e0>
 802497e:	2a00      	cmp	r2, #0
 8024980:	f173 0300 	sbcs.w	r3, r3, #0
 8024984:	f6bf af51 	bge.w	802482a <pow+0x24a>
 8024988:	b01b      	add	sp, #108	; 0x6c
 802498a:	ecbd 8b0a 	vpop	{d8-d12}
 802498e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024992:	f000 bf7d 	b.w	8025890 <__math_uflow>
 8024996:	bf00      	nop
 8024998:	00000000 	.word	0x00000000
 802499c:	43300000 	.word	0x43300000
 80249a0:	fff00000 	.word	0xfff00000
 80249a4:	3ff00000 	.word	0x3ff00000
 80249a8:	ffe00000 	.word	0xffe00000
 80249ac:	7fe00000 	.word	0x7fe00000
 80249b0:	7fdfffff 	.word	0x7fdfffff
 80249b4:	fcc00000 	.word	0xfcc00000
 80249b8:	c0196aab 	.word	0xc0196aab
 80249bc:	08029768 	.word	0x08029768
 80249c0:	460f      	mov	r7, r1
 80249c2:	4e65      	ldr	r6, [pc, #404]	; (8024b58 <pow+0x578>)
 80249c4:	ed9d 4b02 	vldr	d4, [sp, #8]
 80249c8:	ed96 6b02 	vldr	d6, [r6, #8]
 80249cc:	ed96 7b00 	vldr	d7, [r6]
 80249d0:	eeb0 5b46 	vmov.f64	d5, d6
 80249d4:	eea4 5b07 	vfma.f64	d5, d4, d7
 80249d8:	ed8d 5b00 	vstr	d5, [sp]
 80249dc:	ee35 6b46 	vsub.f64	d6, d5, d6
 80249e0:	eeb0 5b44 	vmov.f64	d5, d4
 80249e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80249e8:	ed96 7b04 	vldr	d7, [r6, #16]
 80249ec:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 80249f0:	eea6 5b07 	vfma.f64	d5, d6, d7
 80249f4:	eeb0 7b45 	vmov.f64	d7, d5
 80249f8:	ed96 5b06 	vldr	d5, [r6, #24]
 80249fc:	1849      	adds	r1, r1, r1
 80249fe:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 8024a02:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 8024a06:	eea6 7b05 	vfma.f64	d7, d6, d5
 8024a0a:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 8024a0e:	ee33 3b07 	vadd.f64	d3, d3, d7
 8024a12:	ee23 6b03 	vmul.f64	d6, d3, d3
 8024a16:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 8024a1a:	ed96 5b08 	vldr	d5, [r6, #32]
 8024a1e:	ee33 7b07 	vadd.f64	d7, d3, d7
 8024a22:	1814      	adds	r4, r2, r0
 8024a24:	0365      	lsls	r5, r4, #13
 8024a26:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 8024a2a:	eea3 5b04 	vfma.f64	d5, d3, d4
 8024a2e:	eea6 7b05 	vfma.f64	d7, d6, d5
 8024a32:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 8024a36:	ee26 6b06 	vmul.f64	d6, d6, d6
 8024a3a:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 8024a3e:	2000      	movs	r0, #0
 8024a40:	eb10 0a04 	adds.w	sl, r0, r4
 8024a44:	eea3 5b04 	vfma.f64	d5, d3, d4
 8024a48:	eb45 0b0c 	adc.w	fp, r5, ip
 8024a4c:	eea6 7b05 	vfma.f64	d7, d6, d5
 8024a50:	2f00      	cmp	r7, #0
 8024a52:	d16a      	bne.n	8024b2a <pow+0x54a>
 8024a54:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 8024a58:	4639      	mov	r1, r7
 8024a5a:	ea50 0301 	orrs.w	r3, r0, r1
 8024a5e:	f04f 0300 	mov.w	r3, #0
 8024a62:	d115      	bne.n	8024a90 <pow+0x4b0>
 8024a64:	eb1a 0303 	adds.w	r3, sl, r3
 8024a68:	ee0b 3a10 	vmov	s22, r3
 8024a6c:	4b3b      	ldr	r3, [pc, #236]	; (8024b5c <pow+0x57c>)
 8024a6e:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8024b40 <pow+0x560>
 8024a72:	eb4b 0303 	adc.w	r3, fp, r3
 8024a76:	ee0b 3a90 	vmov	s23, r3
 8024a7a:	eea7 bb0b 	vfma.f64	d11, d7, d11
 8024a7e:	ee2b 0b00 	vmul.f64	d0, d11, d0
 8024a82:	b01b      	add	sp, #108	; 0x6c
 8024a84:	ecbd 8b0a 	vpop	{d8-d12}
 8024a88:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024a8c:	f000 bf40 	b.w	8025910 <__math_check_oflow>
 8024a90:	eb1a 0303 	adds.w	r3, sl, r3
 8024a94:	930a      	str	r3, [sp, #40]	; 0x28
 8024a96:	4b32      	ldr	r3, [pc, #200]	; (8024b60 <pow+0x580>)
 8024a98:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8024a9c:	eb4b 0303 	adc.w	r3, fp, r3
 8024aa0:	930b      	str	r3, [sp, #44]	; 0x2c
 8024aa2:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8024aa6:	ee27 6b05 	vmul.f64	d6, d7, d5
 8024aaa:	ee35 7b06 	vadd.f64	d7, d5, d6
 8024aae:	eeb0 3bc7 	vabs.f64	d3, d7
 8024ab2:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8024ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024aba:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8024b48 <pow+0x568>
 8024abe:	d52b      	bpl.n	8024b18 <pow+0x538>
 8024ac0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8024ac4:	ee35 5b47 	vsub.f64	d5, d5, d7
 8024ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024acc:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8024ad0:	ee35 6b06 	vadd.f64	d6, d5, d6
 8024ad4:	bf48      	it	mi
 8024ad6:	eeb0 4b43 	vmovmi.f64	d4, d3
 8024ada:	ee37 3b04 	vadd.f64	d3, d7, d4
 8024ade:	ee34 5b43 	vsub.f64	d5, d4, d3
 8024ae2:	ee35 7b07 	vadd.f64	d7, d5, d7
 8024ae6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8024aea:	ee37 7b03 	vadd.f64	d7, d7, d3
 8024aee:	ee37 7b44 	vsub.f64	d7, d7, d4
 8024af2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8024af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024afa:	d105      	bne.n	8024b08 <pow+0x528>
 8024afc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8024afe:	463a      	mov	r2, r7
 8024b00:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8024b04:	ec43 2b17 	vmov	d7, r2, r3
 8024b08:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 8024b0c:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 8024b10:	ee26 6b00 	vmul.f64	d6, d6, d0
 8024b14:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 8024b18:	ee27 0b00 	vmul.f64	d0, d7, d0
 8024b1c:	b01b      	add	sp, #108	; 0x6c
 8024b1e:	ecbd 8b0a 	vpop	{d8-d12}
 8024b22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024b26:	f000 beea 	b.w	80258fe <__math_check_uflow>
 8024b2a:	ec4b ab10 	vmov	d0, sl, fp
 8024b2e:	eea7 0b00 	vfma.f64	d0, d7, d0
 8024b32:	e5a3      	b.n	802467c <pow+0x9c>
 8024b34:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8024b50 <pow+0x570>
 8024b38:	e5a0      	b.n	802467c <pow+0x9c>
 8024b3a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8024b3e:	e59d      	b.n	802467c <pow+0x9c>
 8024b40:	00000000 	.word	0x00000000
 8024b44:	7f000000 	.word	0x7f000000
 8024b48:	00000000 	.word	0x00000000
 8024b4c:	00100000 	.word	0x00100000
	...
 8024b58:	0802aa60 	.word	0x0802aa60
 8024b5c:	c0f00000 	.word	0xc0f00000
 8024b60:	3fe00000 	.word	0x3fe00000
 8024b64:	00000000 	.word	0x00000000

08024b68 <sin>:
 8024b68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024b6a:	eeb0 7b40 	vmov.f64	d7, d0
 8024b6e:	ee17 3a90 	vmov	r3, s15
 8024b72:	4a1f      	ldr	r2, [pc, #124]	; (8024bf0 <sin+0x88>)
 8024b74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8024b78:	4293      	cmp	r3, r2
 8024b7a:	dc05      	bgt.n	8024b88 <sin+0x20>
 8024b7c:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8024be8 <sin+0x80>
 8024b80:	2000      	movs	r0, #0
 8024b82:	f000 fe11 	bl	80257a8 <__kernel_sin>
 8024b86:	e004      	b.n	8024b92 <sin+0x2a>
 8024b88:	4a1a      	ldr	r2, [pc, #104]	; (8024bf4 <sin+0x8c>)
 8024b8a:	4293      	cmp	r3, r2
 8024b8c:	dd04      	ble.n	8024b98 <sin+0x30>
 8024b8e:	ee30 0b40 	vsub.f64	d0, d0, d0
 8024b92:	b005      	add	sp, #20
 8024b94:	f85d fb04 	ldr.w	pc, [sp], #4
 8024b98:	4668      	mov	r0, sp
 8024b9a:	f000 f9d5 	bl	8024f48 <__ieee754_rem_pio2>
 8024b9e:	f000 0003 	and.w	r0, r0, #3
 8024ba2:	2801      	cmp	r0, #1
 8024ba4:	d008      	beq.n	8024bb8 <sin+0x50>
 8024ba6:	2802      	cmp	r0, #2
 8024ba8:	d00d      	beq.n	8024bc6 <sin+0x5e>
 8024baa:	b9b0      	cbnz	r0, 8024bda <sin+0x72>
 8024bac:	ed9d 1b02 	vldr	d1, [sp, #8]
 8024bb0:	ed9d 0b00 	vldr	d0, [sp]
 8024bb4:	2001      	movs	r0, #1
 8024bb6:	e7e4      	b.n	8024b82 <sin+0x1a>
 8024bb8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8024bbc:	ed9d 0b00 	vldr	d0, [sp]
 8024bc0:	f000 fb06 	bl	80251d0 <__kernel_cos>
 8024bc4:	e7e5      	b.n	8024b92 <sin+0x2a>
 8024bc6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8024bca:	ed9d 0b00 	vldr	d0, [sp]
 8024bce:	2001      	movs	r0, #1
 8024bd0:	f000 fdea 	bl	80257a8 <__kernel_sin>
 8024bd4:	eeb1 0b40 	vneg.f64	d0, d0
 8024bd8:	e7db      	b.n	8024b92 <sin+0x2a>
 8024bda:	ed9d 1b02 	vldr	d1, [sp, #8]
 8024bde:	ed9d 0b00 	vldr	d0, [sp]
 8024be2:	f000 faf5 	bl	80251d0 <__kernel_cos>
 8024be6:	e7f5      	b.n	8024bd4 <sin+0x6c>
	...
 8024bf0:	3fe921fb 	.word	0x3fe921fb
 8024bf4:	7fefffff 	.word	0x7fefffff

08024bf8 <checkint>:
 8024bf8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8024bfc:	2b7e      	cmp	r3, #126	; 0x7e
 8024bfe:	dd10      	ble.n	8024c22 <checkint+0x2a>
 8024c00:	2b96      	cmp	r3, #150	; 0x96
 8024c02:	dc0c      	bgt.n	8024c1e <checkint+0x26>
 8024c04:	2201      	movs	r2, #1
 8024c06:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8024c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8024c0e:	1e5a      	subs	r2, r3, #1
 8024c10:	4202      	tst	r2, r0
 8024c12:	d106      	bne.n	8024c22 <checkint+0x2a>
 8024c14:	4203      	tst	r3, r0
 8024c16:	bf0c      	ite	eq
 8024c18:	2002      	moveq	r0, #2
 8024c1a:	2001      	movne	r0, #1
 8024c1c:	4770      	bx	lr
 8024c1e:	2002      	movs	r0, #2
 8024c20:	4770      	bx	lr
 8024c22:	2000      	movs	r0, #0
 8024c24:	4770      	bx	lr
	...

08024c28 <powf>:
 8024c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024c2a:	ee10 1a10 	vmov	r1, s0
 8024c2e:	ee10 6a90 	vmov	r6, s1
 8024c32:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8024c36:	0072      	lsls	r2, r6, #1
 8024c38:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8024c3c:	b085      	sub	sp, #20
 8024c3e:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 8024c42:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8024c46:	d256      	bcs.n	8024cf6 <powf+0xce>
 8024c48:	4298      	cmp	r0, r3
 8024c4a:	d256      	bcs.n	8024cfa <powf+0xd2>
 8024c4c:	2000      	movs	r0, #0
 8024c4e:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 8024c52:	4ea3      	ldr	r6, [pc, #652]	; (8024ee0 <powf+0x2b8>)
 8024c54:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8024c58:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8024c5c:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 8024c60:	0dd2      	lsrs	r2, r2, #23
 8024c62:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 8024c66:	05d2      	lsls	r2, r2, #23
 8024c68:	1a8b      	subs	r3, r1, r2
 8024c6a:	ed97 5b00 	vldr	d5, [r7]
 8024c6e:	ee07 3a90 	vmov	s15, r3
 8024c72:	15d2      	asrs	r2, r2, #23
 8024c74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8024c78:	eea5 6b07 	vfma.f64	d6, d5, d7
 8024c7c:	ed97 5b02 	vldr	d5, [r7, #8]
 8024c80:	ee26 2b06 	vmul.f64	d2, d6, d6
 8024c84:	ee22 1b02 	vmul.f64	d1, d2, d2
 8024c88:	ee07 2a90 	vmov	s15, r2
 8024c8c:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 8024c90:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8024c94:	ee37 7b05 	vadd.f64	d7, d7, d5
 8024c98:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 8024c9c:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 8024ca0:	eea6 5b04 	vfma.f64	d5, d6, d4
 8024ca4:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 8024ca8:	eea6 4b03 	vfma.f64	d4, d6, d3
 8024cac:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 8024cb0:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 8024cb4:	eea6 7b03 	vfma.f64	d7, d6, d3
 8024cb8:	eea2 7b04 	vfma.f64	d7, d2, d4
 8024cbc:	eea5 7b01 	vfma.f64	d7, d5, d1
 8024cc0:	ee20 0b07 	vmul.f64	d0, d0, d7
 8024cc4:	ee10 1a90 	vmov	r1, s1
 8024cc8:	2300      	movs	r3, #0
 8024cca:	2700      	movs	r7, #0
 8024ccc:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 8024cd0:	f248 06be 	movw	r6, #32958	; 0x80be
 8024cd4:	429f      	cmp	r7, r3
 8024cd6:	bf08      	it	eq
 8024cd8:	4296      	cmpeq	r6, r2
 8024cda:	f080 80b1 	bcs.w	8024e40 <powf+0x218>
 8024cde:	ed9f 7b78 	vldr	d7, [pc, #480]	; 8024ec0 <powf+0x298>
 8024ce2:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8024ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024cea:	dd79      	ble.n	8024de0 <powf+0x1b8>
 8024cec:	b005      	add	sp, #20
 8024cee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8024cf2:	f000 be43 	b.w	802597c <__math_oflowf>
 8024cf6:	4298      	cmp	r0, r3
 8024cf8:	d32d      	bcc.n	8024d56 <powf+0x12e>
 8024cfa:	b952      	cbnz	r2, 8024d12 <powf+0xea>
 8024cfc:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8024d00:	005b      	lsls	r3, r3, #1
 8024d02:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8024d06:	f240 80cd 	bls.w	8024ea4 <powf+0x27c>
 8024d0a:	ee30 0a20 	vadd.f32	s0, s0, s1
 8024d0e:	b005      	add	sp, #20
 8024d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024d12:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8024d16:	d105      	bne.n	8024d24 <powf+0xfc>
 8024d18:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8024d1c:	0076      	lsls	r6, r6, #1
 8024d1e:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8024d22:	e7f0      	b.n	8024d06 <powf+0xde>
 8024d24:	004b      	lsls	r3, r1, #1
 8024d26:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8024d2a:	d8ee      	bhi.n	8024d0a <powf+0xe2>
 8024d2c:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8024d30:	d1eb      	bne.n	8024d0a <powf+0xe2>
 8024d32:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8024d36:	f000 80b5 	beq.w	8024ea4 <powf+0x27c>
 8024d3a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8024d3e:	ea6f 0606 	mvn.w	r6, r6
 8024d42:	bf34      	ite	cc
 8024d44:	2300      	movcc	r3, #0
 8024d46:	2301      	movcs	r3, #1
 8024d48:	0ff6      	lsrs	r6, r6, #31
 8024d4a:	42b3      	cmp	r3, r6
 8024d4c:	f040 80ad 	bne.w	8024eaa <powf+0x282>
 8024d50:	ee20 0aa0 	vmul.f32	s0, s1, s1
 8024d54:	e7db      	b.n	8024d0e <powf+0xe6>
 8024d56:	004f      	lsls	r7, r1, #1
 8024d58:	1e7a      	subs	r2, r7, #1
 8024d5a:	429a      	cmp	r2, r3
 8024d5c:	d31c      	bcc.n	8024d98 <powf+0x170>
 8024d5e:	2900      	cmp	r1, #0
 8024d60:	ee20 0a00 	vmul.f32	s0, s0, s0
 8024d64:	da0f      	bge.n	8024d86 <powf+0x15e>
 8024d66:	ee10 0a90 	vmov	r0, s1
 8024d6a:	f7ff ff45 	bl	8024bf8 <checkint>
 8024d6e:	2801      	cmp	r0, #1
 8024d70:	d109      	bne.n	8024d86 <powf+0x15e>
 8024d72:	eeb1 0a40 	vneg.f32	s0, s0
 8024d76:	b947      	cbnz	r7, 8024d8a <powf+0x162>
 8024d78:	2e00      	cmp	r6, #0
 8024d7a:	dac8      	bge.n	8024d0e <powf+0xe6>
 8024d7c:	b005      	add	sp, #20
 8024d7e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8024d82:	f000 be01 	b.w	8025988 <__math_divzerof>
 8024d86:	2000      	movs	r0, #0
 8024d88:	e7f5      	b.n	8024d76 <powf+0x14e>
 8024d8a:	2e00      	cmp	r6, #0
 8024d8c:	dabf      	bge.n	8024d0e <powf+0xe6>
 8024d8e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8024d92:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8024d96:	e7ba      	b.n	8024d0e <powf+0xe6>
 8024d98:	2900      	cmp	r1, #0
 8024d9a:	da1f      	bge.n	8024ddc <powf+0x1b4>
 8024d9c:	ee10 0a90 	vmov	r0, s1
 8024da0:	f7ff ff2a 	bl	8024bf8 <checkint>
 8024da4:	b920      	cbnz	r0, 8024db0 <powf+0x188>
 8024da6:	b005      	add	sp, #20
 8024da8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8024dac:	f000 bdfc 	b.w	80259a8 <__math_invalidf>
 8024db0:	2801      	cmp	r0, #1
 8024db2:	bf14      	ite	ne
 8024db4:	2000      	movne	r0, #0
 8024db6:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8024dba:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8024dbe:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8024dc2:	f4bf af44 	bcs.w	8024c4e <powf+0x26>
 8024dc6:	eddf 7a47 	vldr	s15, [pc, #284]	; 8024ee4 <powf+0x2bc>
 8024dca:	ee20 0a27 	vmul.f32	s0, s0, s15
 8024dce:	ee10 3a10 	vmov	r3, s0
 8024dd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8024dd6:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8024dda:	e738      	b.n	8024c4e <powf+0x26>
 8024ddc:	2000      	movs	r0, #0
 8024dde:	e7ee      	b.n	8024dbe <powf+0x196>
 8024de0:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8024ec8 <powf+0x2a0>
 8024de4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8024de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024dec:	dd10      	ble.n	8024e10 <powf+0x1e8>
 8024dee:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 8024df2:	2800      	cmp	r0, #0
 8024df4:	d15c      	bne.n	8024eb0 <powf+0x288>
 8024df6:	9302      	str	r3, [sp, #8]
 8024df8:	eddd 7a02 	vldr	s15, [sp, #8]
 8024dfc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024e00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8024e04:	eef4 7a47 	vcmp.f32	s15, s14
 8024e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024e0c:	f47f af6e 	bne.w	8024cec <powf+0xc4>
 8024e10:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8024ed0 <powf+0x2a8>
 8024e14:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8024e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024e1c:	d804      	bhi.n	8024e28 <powf+0x200>
 8024e1e:	b005      	add	sp, #20
 8024e20:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8024e24:	f000 bd9e 	b.w	8025964 <__math_uflowf>
 8024e28:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8024ed8 <powf+0x2b0>
 8024e2c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8024e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024e34:	d504      	bpl.n	8024e40 <powf+0x218>
 8024e36:	b005      	add	sp, #20
 8024e38:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8024e3c:	f000 bd98 	b.w	8025970 <__math_may_uflowf>
 8024e40:	4b29      	ldr	r3, [pc, #164]	; (8024ee8 <powf+0x2c0>)
 8024e42:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 8024e46:	ee30 6b07 	vadd.f64	d6, d0, d7
 8024e4a:	ed8d 6b00 	vstr	d6, [sp]
 8024e4e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8024e52:	ee30 7b47 	vsub.f64	d7, d0, d7
 8024e56:	e9dd 6700 	ldrd	r6, r7, [sp]
 8024e5a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8024e5e:	f006 011f 	and.w	r1, r6, #31
 8024e62:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8024e66:	e9d1 ce00 	ldrd	ip, lr, [r1]
 8024e6a:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 8024e6e:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 8024e72:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 8024e76:	eea7 6b05 	vfma.f64	d6, d7, d5
 8024e7a:	ee27 5b07 	vmul.f64	d5, d7, d7
 8024e7e:	1836      	adds	r6, r6, r0
 8024e80:	2300      	movs	r3, #0
 8024e82:	eb13 040c 	adds.w	r4, r3, ip
 8024e86:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 8024e8a:	eb41 050e 	adc.w	r5, r1, lr
 8024e8e:	eea7 0b04 	vfma.f64	d0, d7, d4
 8024e92:	ec45 4b17 	vmov	d7, r4, r5
 8024e96:	eea6 0b05 	vfma.f64	d0, d6, d5
 8024e9a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8024e9e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8024ea2:	e734      	b.n	8024d0e <powf+0xe6>
 8024ea4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8024ea8:	e731      	b.n	8024d0e <powf+0xe6>
 8024eaa:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8024eec <powf+0x2c4>
 8024eae:	e72e      	b.n	8024d0e <powf+0xe6>
 8024eb0:	9303      	str	r3, [sp, #12]
 8024eb2:	eddd 7a03 	vldr	s15, [sp, #12]
 8024eb6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8024eba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8024ebe:	e7a1      	b.n	8024e04 <powf+0x1dc>
 8024ec0:	ffd1d571 	.word	0xffd1d571
 8024ec4:	405fffff 	.word	0x405fffff
 8024ec8:	ffa3aae2 	.word	0xffa3aae2
 8024ecc:	405fffff 	.word	0x405fffff
 8024ed0:	00000000 	.word	0x00000000
 8024ed4:	c062c000 	.word	0xc062c000
 8024ed8:	00000000 	.word	0x00000000
 8024edc:	c062a000 	.word	0xc062a000
 8024ee0:	0802a7b0 	.word	0x0802a7b0
 8024ee4:	4b000000 	.word	0x4b000000
 8024ee8:	0802b320 	.word	0x0802b320
 8024eec:	00000000 	.word	0x00000000

08024ef0 <sqrt>:
 8024ef0:	b508      	push	{r3, lr}
 8024ef2:	ed2d 8b04 	vpush	{d8-d9}
 8024ef6:	eeb0 8b40 	vmov.f64	d8, d0
 8024efa:	f000 f965 	bl	80251c8 <__ieee754_sqrt>
 8024efe:	4b10      	ldr	r3, [pc, #64]	; (8024f40 <sqrt+0x50>)
 8024f00:	f993 3000 	ldrsb.w	r3, [r3]
 8024f04:	3301      	adds	r3, #1
 8024f06:	d011      	beq.n	8024f2c <sqrt+0x3c>
 8024f08:	eeb4 8b48 	vcmp.f64	d8, d8
 8024f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024f10:	d60c      	bvs.n	8024f2c <sqrt+0x3c>
 8024f12:	ed9f 9b09 	vldr	d9, [pc, #36]	; 8024f38 <sqrt+0x48>
 8024f16:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8024f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024f1e:	d505      	bpl.n	8024f2c <sqrt+0x3c>
 8024f20:	f7fd fca4 	bl	802286c <__errno>
 8024f24:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8024f28:	2321      	movs	r3, #33	; 0x21
 8024f2a:	6003      	str	r3, [r0, #0]
 8024f2c:	ecbd 8b04 	vpop	{d8-d9}
 8024f30:	bd08      	pop	{r3, pc}
 8024f32:	bf00      	nop
 8024f34:	f3af 8000 	nop.w
	...
 8024f40:	24003a18 	.word	0x24003a18
 8024f44:	00000000 	.word	0x00000000

08024f48 <__ieee754_rem_pio2>:
 8024f48:	b570      	push	{r4, r5, r6, lr}
 8024f4a:	eeb0 7b40 	vmov.f64	d7, d0
 8024f4e:	ee17 5a90 	vmov	r5, s15
 8024f52:	4b97      	ldr	r3, [pc, #604]	; (80251b0 <__ieee754_rem_pio2+0x268>)
 8024f54:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8024f58:	429e      	cmp	r6, r3
 8024f5a:	b088      	sub	sp, #32
 8024f5c:	4604      	mov	r4, r0
 8024f5e:	dc07      	bgt.n	8024f70 <__ieee754_rem_pio2+0x28>
 8024f60:	2200      	movs	r2, #0
 8024f62:	2300      	movs	r3, #0
 8024f64:	ed84 0b00 	vstr	d0, [r4]
 8024f68:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8024f6c:	2000      	movs	r0, #0
 8024f6e:	e01b      	b.n	8024fa8 <__ieee754_rem_pio2+0x60>
 8024f70:	4b90      	ldr	r3, [pc, #576]	; (80251b4 <__ieee754_rem_pio2+0x26c>)
 8024f72:	429e      	cmp	r6, r3
 8024f74:	dc3b      	bgt.n	8024fee <__ieee754_rem_pio2+0xa6>
 8024f76:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8024f7a:	2d00      	cmp	r5, #0
 8024f7c:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8025170 <__ieee754_rem_pio2+0x228>
 8024f80:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8024f84:	dd19      	ble.n	8024fba <__ieee754_rem_pio2+0x72>
 8024f86:	ee30 7b46 	vsub.f64	d7, d0, d6
 8024f8a:	429e      	cmp	r6, r3
 8024f8c:	d00e      	beq.n	8024fac <__ieee754_rem_pio2+0x64>
 8024f8e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8025178 <__ieee754_rem_pio2+0x230>
 8024f92:	ee37 5b46 	vsub.f64	d5, d7, d6
 8024f96:	ee37 7b45 	vsub.f64	d7, d7, d5
 8024f9a:	ed84 5b00 	vstr	d5, [r4]
 8024f9e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8024fa2:	ed84 7b02 	vstr	d7, [r4, #8]
 8024fa6:	2001      	movs	r0, #1
 8024fa8:	b008      	add	sp, #32
 8024faa:	bd70      	pop	{r4, r5, r6, pc}
 8024fac:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8025180 <__ieee754_rem_pio2+0x238>
 8024fb0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8024fb4:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8025188 <__ieee754_rem_pio2+0x240>
 8024fb8:	e7eb      	b.n	8024f92 <__ieee754_rem_pio2+0x4a>
 8024fba:	429e      	cmp	r6, r3
 8024fbc:	ee30 7b06 	vadd.f64	d7, d0, d6
 8024fc0:	d00e      	beq.n	8024fe0 <__ieee754_rem_pio2+0x98>
 8024fc2:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8025178 <__ieee754_rem_pio2+0x230>
 8024fc6:	ee37 5b06 	vadd.f64	d5, d7, d6
 8024fca:	ee37 7b45 	vsub.f64	d7, d7, d5
 8024fce:	ed84 5b00 	vstr	d5, [r4]
 8024fd2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8024fd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024fda:	ed84 7b02 	vstr	d7, [r4, #8]
 8024fde:	e7e3      	b.n	8024fa8 <__ieee754_rem_pio2+0x60>
 8024fe0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8025180 <__ieee754_rem_pio2+0x238>
 8024fe4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8024fe8:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8025188 <__ieee754_rem_pio2+0x240>
 8024fec:	e7eb      	b.n	8024fc6 <__ieee754_rem_pio2+0x7e>
 8024fee:	4b72      	ldr	r3, [pc, #456]	; (80251b8 <__ieee754_rem_pio2+0x270>)
 8024ff0:	429e      	cmp	r6, r3
 8024ff2:	dc6e      	bgt.n	80250d2 <__ieee754_rem_pio2+0x18a>
 8024ff4:	f000 fce7 	bl	80259c6 <fabs>
 8024ff8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8024ffc:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8025190 <__ieee754_rem_pio2+0x248>
 8025000:	eea0 7b06 	vfma.f64	d7, d0, d6
 8025004:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8025008:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 802500c:	ee17 0a90 	vmov	r0, s15
 8025010:	eeb1 4b45 	vneg.f64	d4, d5
 8025014:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8025170 <__ieee754_rem_pio2+0x228>
 8025018:	eea5 0b47 	vfms.f64	d0, d5, d7
 802501c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8025178 <__ieee754_rem_pio2+0x230>
 8025020:	281f      	cmp	r0, #31
 8025022:	ee25 7b07 	vmul.f64	d7, d5, d7
 8025026:	ee30 6b47 	vsub.f64	d6, d0, d7
 802502a:	dc08      	bgt.n	802503e <__ieee754_rem_pio2+0xf6>
 802502c:	4b63      	ldr	r3, [pc, #396]	; (80251bc <__ieee754_rem_pio2+0x274>)
 802502e:	1e42      	subs	r2, r0, #1
 8025030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8025034:	42b3      	cmp	r3, r6
 8025036:	d002      	beq.n	802503e <__ieee754_rem_pio2+0xf6>
 8025038:	ed84 6b00 	vstr	d6, [r4]
 802503c:	e024      	b.n	8025088 <__ieee754_rem_pio2+0x140>
 802503e:	ee16 3a90 	vmov	r3, s13
 8025042:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8025046:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 802504a:	2b10      	cmp	r3, #16
 802504c:	ea4f 5226 	mov.w	r2, r6, asr #20
 8025050:	ddf2      	ble.n	8025038 <__ieee754_rem_pio2+0xf0>
 8025052:	eeb0 6b40 	vmov.f64	d6, d0
 8025056:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8025180 <__ieee754_rem_pio2+0x238>
 802505a:	eea4 6b03 	vfma.f64	d6, d4, d3
 802505e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8025062:	eea4 7b03 	vfma.f64	d7, d4, d3
 8025066:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8025188 <__ieee754_rem_pio2+0x240>
 802506a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 802506e:	ee36 3b47 	vsub.f64	d3, d6, d7
 8025072:	ee13 3a90 	vmov	r3, s7
 8025076:	f3c3 530a 	ubfx	r3, r3, #20, #11
 802507a:	1ad3      	subs	r3, r2, r3
 802507c:	2b31      	cmp	r3, #49	; 0x31
 802507e:	dc17      	bgt.n	80250b0 <__ieee754_rem_pio2+0x168>
 8025080:	eeb0 0b46 	vmov.f64	d0, d6
 8025084:	ed84 3b00 	vstr	d3, [r4]
 8025088:	ed94 6b00 	vldr	d6, [r4]
 802508c:	2d00      	cmp	r5, #0
 802508e:	ee30 0b46 	vsub.f64	d0, d0, d6
 8025092:	ee30 7b47 	vsub.f64	d7, d0, d7
 8025096:	ed84 7b02 	vstr	d7, [r4, #8]
 802509a:	da85      	bge.n	8024fa8 <__ieee754_rem_pio2+0x60>
 802509c:	eeb1 6b46 	vneg.f64	d6, d6
 80250a0:	ed84 6b00 	vstr	d6, [r4]
 80250a4:	eeb1 7b47 	vneg.f64	d7, d7
 80250a8:	4240      	negs	r0, r0
 80250aa:	ed84 7b02 	vstr	d7, [r4, #8]
 80250ae:	e77b      	b.n	8024fa8 <__ieee754_rem_pio2+0x60>
 80250b0:	ed9f 3b39 	vldr	d3, [pc, #228]	; 8025198 <__ieee754_rem_pio2+0x250>
 80250b4:	eeb0 0b46 	vmov.f64	d0, d6
 80250b8:	eea4 0b03 	vfma.f64	d0, d4, d3
 80250bc:	ee36 7b40 	vsub.f64	d7, d6, d0
 80250c0:	ed9f 6b37 	vldr	d6, [pc, #220]	; 80251a0 <__ieee754_rem_pio2+0x258>
 80250c4:	eea4 7b03 	vfma.f64	d7, d4, d3
 80250c8:	ee95 7b06 	vfnms.f64	d7, d5, d6
 80250cc:	ee30 6b47 	vsub.f64	d6, d0, d7
 80250d0:	e7b2      	b.n	8025038 <__ieee754_rem_pio2+0xf0>
 80250d2:	4b3b      	ldr	r3, [pc, #236]	; (80251c0 <__ieee754_rem_pio2+0x278>)
 80250d4:	429e      	cmp	r6, r3
 80250d6:	dd06      	ble.n	80250e6 <__ieee754_rem_pio2+0x19e>
 80250d8:	ee30 7b40 	vsub.f64	d7, d0, d0
 80250dc:	ed80 7b02 	vstr	d7, [r0, #8]
 80250e0:	ed80 7b00 	vstr	d7, [r0]
 80250e4:	e742      	b.n	8024f6c <__ieee754_rem_pio2+0x24>
 80250e6:	1532      	asrs	r2, r6, #20
 80250e8:	ee10 0a10 	vmov	r0, s0
 80250ec:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 80250f0:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80250f4:	ec41 0b17 	vmov	d7, r0, r1
 80250f8:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80250fc:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 80251a8 <__ieee754_rem_pio2+0x260>
 8025100:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8025104:	ee37 7b46 	vsub.f64	d7, d7, d6
 8025108:	ed8d 6b02 	vstr	d6, [sp, #8]
 802510c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8025110:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8025114:	a902      	add	r1, sp, #8
 8025116:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 802511a:	ee37 7b46 	vsub.f64	d7, d7, d6
 802511e:	ed8d 6b04 	vstr	d6, [sp, #16]
 8025122:	ee27 7b05 	vmul.f64	d7, d7, d5
 8025126:	ed8d 7b06 	vstr	d7, [sp, #24]
 802512a:	2603      	movs	r6, #3
 802512c:	4608      	mov	r0, r1
 802512e:	ed91 7b04 	vldr	d7, [r1, #16]
 8025132:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8025136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802513a:	4633      	mov	r3, r6
 802513c:	f1a1 0108 	sub.w	r1, r1, #8
 8025140:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8025144:	d0f3      	beq.n	802512e <__ieee754_rem_pio2+0x1e6>
 8025146:	491f      	ldr	r1, [pc, #124]	; (80251c4 <__ieee754_rem_pio2+0x27c>)
 8025148:	9101      	str	r1, [sp, #4]
 802514a:	2102      	movs	r1, #2
 802514c:	9100      	str	r1, [sp, #0]
 802514e:	4621      	mov	r1, r4
 8025150:	f000 f8aa 	bl	80252a8 <__kernel_rem_pio2>
 8025154:	2d00      	cmp	r5, #0
 8025156:	f6bf af27 	bge.w	8024fa8 <__ieee754_rem_pio2+0x60>
 802515a:	ed94 7b00 	vldr	d7, [r4]
 802515e:	eeb1 7b47 	vneg.f64	d7, d7
 8025162:	ed84 7b00 	vstr	d7, [r4]
 8025166:	ed94 7b02 	vldr	d7, [r4, #8]
 802516a:	e79b      	b.n	80250a4 <__ieee754_rem_pio2+0x15c>
 802516c:	f3af 8000 	nop.w
 8025170:	54400000 	.word	0x54400000
 8025174:	3ff921fb 	.word	0x3ff921fb
 8025178:	1a626331 	.word	0x1a626331
 802517c:	3dd0b461 	.word	0x3dd0b461
 8025180:	1a600000 	.word	0x1a600000
 8025184:	3dd0b461 	.word	0x3dd0b461
 8025188:	2e037073 	.word	0x2e037073
 802518c:	3ba3198a 	.word	0x3ba3198a
 8025190:	6dc9c883 	.word	0x6dc9c883
 8025194:	3fe45f30 	.word	0x3fe45f30
 8025198:	2e000000 	.word	0x2e000000
 802519c:	3ba3198a 	.word	0x3ba3198a
 80251a0:	252049c1 	.word	0x252049c1
 80251a4:	397b839a 	.word	0x397b839a
 80251a8:	00000000 	.word	0x00000000
 80251ac:	41700000 	.word	0x41700000
 80251b0:	3fe921fb 	.word	0x3fe921fb
 80251b4:	4002d97b 	.word	0x4002d97b
 80251b8:	413921fb 	.word	0x413921fb
 80251bc:	0802a8d8 	.word	0x0802a8d8
 80251c0:	7fefffff 	.word	0x7fefffff
 80251c4:	0802a958 	.word	0x0802a958

080251c8 <__ieee754_sqrt>:
 80251c8:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80251cc:	4770      	bx	lr
	...

080251d0 <__kernel_cos>:
 80251d0:	ee10 1a90 	vmov	r1, s1
 80251d4:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80251d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80251dc:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 80251e0:	da05      	bge.n	80251ee <__kernel_cos+0x1e>
 80251e2:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80251e6:	ee17 3a90 	vmov	r3, s15
 80251ea:	2b00      	cmp	r3, #0
 80251ec:	d03d      	beq.n	802526a <__kernel_cos+0x9a>
 80251ee:	ee20 3b00 	vmul.f64	d3, d0, d0
 80251f2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8025270 <__kernel_cos+0xa0>
 80251f6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8025278 <__kernel_cos+0xa8>
 80251fa:	eea3 6b07 	vfma.f64	d6, d3, d7
 80251fe:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8025280 <__kernel_cos+0xb0>
 8025202:	eea6 7b03 	vfma.f64	d7, d6, d3
 8025206:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8025288 <__kernel_cos+0xb8>
 802520a:	eea7 6b03 	vfma.f64	d6, d7, d3
 802520e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8025290 <__kernel_cos+0xc0>
 8025212:	4b23      	ldr	r3, [pc, #140]	; (80252a0 <__kernel_cos+0xd0>)
 8025214:	eea6 7b03 	vfma.f64	d7, d6, d3
 8025218:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8025298 <__kernel_cos+0xc8>
 802521c:	4299      	cmp	r1, r3
 802521e:	eea7 6b03 	vfma.f64	d6, d7, d3
 8025222:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8025226:	ee26 5b03 	vmul.f64	d5, d6, d3
 802522a:	ee23 7b07 	vmul.f64	d7, d3, d7
 802522e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8025232:	eea3 6b05 	vfma.f64	d6, d3, d5
 8025236:	dc04      	bgt.n	8025242 <__kernel_cos+0x72>
 8025238:	ee37 6b46 	vsub.f64	d6, d7, d6
 802523c:	ee34 0b46 	vsub.f64	d0, d4, d6
 8025240:	4770      	bx	lr
 8025242:	4b18      	ldr	r3, [pc, #96]	; (80252a4 <__kernel_cos+0xd4>)
 8025244:	4299      	cmp	r1, r3
 8025246:	dc0d      	bgt.n	8025264 <__kernel_cos+0x94>
 8025248:	2200      	movs	r2, #0
 802524a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 802524e:	ec43 2b15 	vmov	d5, r2, r3
 8025252:	ee34 0b45 	vsub.f64	d0, d4, d5
 8025256:	ee37 7b45 	vsub.f64	d7, d7, d5
 802525a:	ee37 7b46 	vsub.f64	d7, d7, d6
 802525e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8025262:	4770      	bx	lr
 8025264:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8025268:	e7f3      	b.n	8025252 <__kernel_cos+0x82>
 802526a:	eeb0 0b44 	vmov.f64	d0, d4
 802526e:	4770      	bx	lr
 8025270:	be8838d4 	.word	0xbe8838d4
 8025274:	bda8fae9 	.word	0xbda8fae9
 8025278:	bdb4b1c4 	.word	0xbdb4b1c4
 802527c:	3e21ee9e 	.word	0x3e21ee9e
 8025280:	809c52ad 	.word	0x809c52ad
 8025284:	be927e4f 	.word	0xbe927e4f
 8025288:	19cb1590 	.word	0x19cb1590
 802528c:	3efa01a0 	.word	0x3efa01a0
 8025290:	16c15177 	.word	0x16c15177
 8025294:	bf56c16c 	.word	0xbf56c16c
 8025298:	5555554c 	.word	0x5555554c
 802529c:	3fa55555 	.word	0x3fa55555
 80252a0:	3fd33332 	.word	0x3fd33332
 80252a4:	3fe90000 	.word	0x3fe90000

080252a8 <__kernel_rem_pio2>:
 80252a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80252ac:	ed2d 8b06 	vpush	{d8-d10}
 80252b0:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 80252b4:	469b      	mov	fp, r3
 80252b6:	460f      	mov	r7, r1
 80252b8:	4bcf      	ldr	r3, [pc, #828]	; (80255f8 <__kernel_rem_pio2+0x350>)
 80252ba:	99a0      	ldr	r1, [sp, #640]	; 0x280
 80252bc:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 80252c0:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 80252c4:	9000      	str	r0, [sp, #0]
 80252c6:	f112 0f14 	cmn.w	r2, #20
 80252ca:	bfa8      	it	ge
 80252cc:	2318      	movge	r3, #24
 80252ce:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
 80252d2:	bfb8      	it	lt
 80252d4:	2300      	movlt	r3, #0
 80252d6:	f06f 0417 	mvn.w	r4, #23
 80252da:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 80255e0 <__kernel_rem_pio2+0x338>
 80252de:	bfa4      	itt	ge
 80252e0:	f1a2 0a03 	subge.w	sl, r2, #3
 80252e4:	fb9a f3f3 	sdivge	r3, sl, r3
 80252e8:	fb03 4404 	mla	r4, r3, r4, r4
 80252ec:	1a5d      	subs	r5, r3, r1
 80252ee:	4414      	add	r4, r2
 80252f0:	eb09 0601 	add.w	r6, r9, r1
 80252f4:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 80252f8:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 80252fc:	2200      	movs	r2, #0
 80252fe:	42b2      	cmp	r2, r6
 8025300:	dd12      	ble.n	8025328 <__kernel_rem_pio2+0x80>
 8025302:	aa18      	add	r2, sp, #96	; 0x60
 8025304:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8025308:	460e      	mov	r6, r1
 802530a:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 802530e:	f1cb 0a01 	rsb	sl, fp, #1
 8025312:	eb0a 0006 	add.w	r0, sl, r6
 8025316:	4581      	cmp	r9, r0
 8025318:	db25      	blt.n	8025366 <__kernel_rem_pio2+0xbe>
 802531a:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 80255e0 <__kernel_rem_pio2+0x338>
 802531e:	f8dd e000 	ldr.w	lr, [sp]
 8025322:	4615      	mov	r5, r2
 8025324:	2000      	movs	r0, #0
 8025326:	e015      	b.n	8025354 <__kernel_rem_pio2+0xac>
 8025328:	42d5      	cmn	r5, r2
 802532a:	d409      	bmi.n	8025340 <__kernel_rem_pio2+0x98>
 802532c:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 8025330:	ee07 0a90 	vmov	s15, r0
 8025334:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8025338:	eca8 7b02 	vstmia	r8!, {d7}
 802533c:	3201      	adds	r2, #1
 802533e:	e7de      	b.n	80252fe <__kernel_rem_pio2+0x56>
 8025340:	eeb0 7b46 	vmov.f64	d7, d6
 8025344:	e7f8      	b.n	8025338 <__kernel_rem_pio2+0x90>
 8025346:	ecbe 5b02 	vldmia	lr!, {d5}
 802534a:	ed95 6b00 	vldr	d6, [r5]
 802534e:	3001      	adds	r0, #1
 8025350:	eea5 7b06 	vfma.f64	d7, d5, d6
 8025354:	4288      	cmp	r0, r1
 8025356:	f1a5 0508 	sub.w	r5, r5, #8
 802535a:	ddf4      	ble.n	8025346 <__kernel_rem_pio2+0x9e>
 802535c:	eca8 7b02 	vstmia	r8!, {d7}
 8025360:	3208      	adds	r2, #8
 8025362:	3601      	adds	r6, #1
 8025364:	e7d5      	b.n	8025312 <__kernel_rem_pio2+0x6a>
 8025366:	aa04      	add	r2, sp, #16
 8025368:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 80255e8 <__kernel_rem_pio2+0x340>
 802536c:	ed9f aba0 	vldr	d10, [pc, #640]	; 80255f0 <__kernel_rem_pio2+0x348>
 8025370:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8025374:	9201      	str	r2, [sp, #4]
 8025376:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 802537a:	464e      	mov	r6, r9
 802537c:	ab90      	add	r3, sp, #576	; 0x240
 802537e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8025382:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 8025386:	ab04      	add	r3, sp, #16
 8025388:	4618      	mov	r0, r3
 802538a:	4632      	mov	r2, r6
 802538c:	2a00      	cmp	r2, #0
 802538e:	dc4e      	bgt.n	802542e <__kernel_rem_pio2+0x186>
 8025390:	4620      	mov	r0, r4
 8025392:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8025396:	f000 fb93 	bl	8025ac0 <scalbn>
 802539a:	eeb0 8b40 	vmov.f64	d8, d0
 802539e:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 80253a2:	ee28 0b00 	vmul.f64	d0, d8, d0
 80253a6:	f000 fb17 	bl	80259d8 <floor>
 80253aa:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 80253ae:	eea0 8b47 	vfms.f64	d8, d0, d7
 80253b2:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80253b6:	2c00      	cmp	r4, #0
 80253b8:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 80253bc:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 80253c0:	ee38 8b40 	vsub.f64	d8, d8, d0
 80253c4:	ee17 8a90 	vmov	r8, s15
 80253c8:	dd46      	ble.n	8025458 <__kernel_rem_pio2+0x1b0>
 80253ca:	1e70      	subs	r0, r6, #1
 80253cc:	aa04      	add	r2, sp, #16
 80253ce:	f1c4 0c18 	rsb	ip, r4, #24
 80253d2:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 80253d6:	fa45 f20c 	asr.w	r2, r5, ip
 80253da:	4490      	add	r8, r2
 80253dc:	fa02 f20c 	lsl.w	r2, r2, ip
 80253e0:	1aad      	subs	r5, r5, r2
 80253e2:	aa04      	add	r2, sp, #16
 80253e4:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 80253e8:	f1c4 0217 	rsb	r2, r4, #23
 80253ec:	4115      	asrs	r5, r2
 80253ee:	2d00      	cmp	r5, #0
 80253f0:	dd41      	ble.n	8025476 <__kernel_rem_pio2+0x1ce>
 80253f2:	f04f 0c00 	mov.w	ip, #0
 80253f6:	f108 0801 	add.w	r8, r8, #1
 80253fa:	4660      	mov	r0, ip
 80253fc:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8025400:	4566      	cmp	r6, ip
 8025402:	dc69      	bgt.n	80254d8 <__kernel_rem_pio2+0x230>
 8025404:	2c00      	cmp	r4, #0
 8025406:	dd03      	ble.n	8025410 <__kernel_rem_pio2+0x168>
 8025408:	2c01      	cmp	r4, #1
 802540a:	d076      	beq.n	80254fa <__kernel_rem_pio2+0x252>
 802540c:	2c02      	cmp	r4, #2
 802540e:	d07f      	beq.n	8025510 <__kernel_rem_pio2+0x268>
 8025410:	2d02      	cmp	r5, #2
 8025412:	d130      	bne.n	8025476 <__kernel_rem_pio2+0x1ce>
 8025414:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8025418:	ee30 8b48 	vsub.f64	d8, d0, d8
 802541c:	b358      	cbz	r0, 8025476 <__kernel_rem_pio2+0x1ce>
 802541e:	4620      	mov	r0, r4
 8025420:	9102      	str	r1, [sp, #8]
 8025422:	f000 fb4d 	bl	8025ac0 <scalbn>
 8025426:	9902      	ldr	r1, [sp, #8]
 8025428:	ee38 8b40 	vsub.f64	d8, d8, d0
 802542c:	e023      	b.n	8025476 <__kernel_rem_pio2+0x1ce>
 802542e:	ee20 7b09 	vmul.f64	d7, d0, d9
 8025432:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8025436:	3a01      	subs	r2, #1
 8025438:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 802543c:	ad68      	add	r5, sp, #416	; 0x1a0
 802543e:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8025442:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8025446:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 802544a:	eca0 0a01 	vstmia	r0!, {s0}
 802544e:	ed95 0b00 	vldr	d0, [r5]
 8025452:	ee37 0b00 	vadd.f64	d0, d7, d0
 8025456:	e799      	b.n	802538c <__kernel_rem_pio2+0xe4>
 8025458:	d105      	bne.n	8025466 <__kernel_rem_pio2+0x1be>
 802545a:	1e72      	subs	r2, r6, #1
 802545c:	a804      	add	r0, sp, #16
 802545e:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8025462:	15ed      	asrs	r5, r5, #23
 8025464:	e7c3      	b.n	80253ee <__kernel_rem_pio2+0x146>
 8025466:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 802546a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 802546e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025472:	da2f      	bge.n	80254d4 <__kernel_rem_pio2+0x22c>
 8025474:	2500      	movs	r5, #0
 8025476:	eeb5 8b40 	vcmp.f64	d8, #0.0
 802547a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802547e:	f040 8087 	bne.w	8025590 <__kernel_rem_pio2+0x2e8>
 8025482:	1e73      	subs	r3, r6, #1
 8025484:	4618      	mov	r0, r3
 8025486:	f04f 0c00 	mov.w	ip, #0
 802548a:	4548      	cmp	r0, r9
 802548c:	da47      	bge.n	802551e <__kernel_rem_pio2+0x276>
 802548e:	f1bc 0f00 	cmp.w	ip, #0
 8025492:	d070      	beq.n	8025576 <__kernel_rem_pio2+0x2ce>
 8025494:	aa04      	add	r2, sp, #16
 8025496:	3c18      	subs	r4, #24
 8025498:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 802549c:	2a00      	cmp	r2, #0
 802549e:	d075      	beq.n	802558c <__kernel_rem_pio2+0x2e4>
 80254a0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80254a4:	4620      	mov	r0, r4
 80254a6:	9300      	str	r3, [sp, #0]
 80254a8:	f000 fb0a 	bl	8025ac0 <scalbn>
 80254ac:	9b00      	ldr	r3, [sp, #0]
 80254ae:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80255e8 <__kernel_rem_pio2+0x340>
 80254b2:	461a      	mov	r2, r3
 80254b4:	2a00      	cmp	r2, #0
 80254b6:	f280 80ac 	bge.w	8025612 <__kernel_rem_pio2+0x36a>
 80254ba:	4619      	mov	r1, r3
 80254bc:	2000      	movs	r0, #0
 80254be:	2900      	cmp	r1, #0
 80254c0:	f2c0 80cd 	blt.w	802565e <__kernel_rem_pio2+0x3b6>
 80254c4:	aa68      	add	r2, sp, #416	; 0x1a0
 80254c6:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 80254ca:	ed9f 7b45 	vldr	d7, [pc, #276]	; 80255e0 <__kernel_rem_pio2+0x338>
 80254ce:	4e4b      	ldr	r6, [pc, #300]	; (80255fc <__kernel_rem_pio2+0x354>)
 80254d0:	2200      	movs	r2, #0
 80254d2:	e0b8      	b.n	8025646 <__kernel_rem_pio2+0x39e>
 80254d4:	2502      	movs	r5, #2
 80254d6:	e78c      	b.n	80253f2 <__kernel_rem_pio2+0x14a>
 80254d8:	681a      	ldr	r2, [r3, #0]
 80254da:	b948      	cbnz	r0, 80254f0 <__kernel_rem_pio2+0x248>
 80254dc:	b11a      	cbz	r2, 80254e6 <__kernel_rem_pio2+0x23e>
 80254de:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 80254e2:	601a      	str	r2, [r3, #0]
 80254e4:	2201      	movs	r2, #1
 80254e6:	f10c 0c01 	add.w	ip, ip, #1
 80254ea:	3304      	adds	r3, #4
 80254ec:	4610      	mov	r0, r2
 80254ee:	e787      	b.n	8025400 <__kernel_rem_pio2+0x158>
 80254f0:	ebae 0202 	sub.w	r2, lr, r2
 80254f4:	601a      	str	r2, [r3, #0]
 80254f6:	4602      	mov	r2, r0
 80254f8:	e7f5      	b.n	80254e6 <__kernel_rem_pio2+0x23e>
 80254fa:	1e72      	subs	r2, r6, #1
 80254fc:	ab04      	add	r3, sp, #16
 80254fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8025502:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8025506:	f10d 0c10 	add.w	ip, sp, #16
 802550a:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 802550e:	e77f      	b.n	8025410 <__kernel_rem_pio2+0x168>
 8025510:	1e72      	subs	r2, r6, #1
 8025512:	ab04      	add	r3, sp, #16
 8025514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8025518:	f3c3 0315 	ubfx	r3, r3, #0, #22
 802551c:	e7f3      	b.n	8025506 <__kernel_rem_pio2+0x25e>
 802551e:	aa04      	add	r2, sp, #16
 8025520:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8025524:	3801      	subs	r0, #1
 8025526:	ea4c 0c02 	orr.w	ip, ip, r2
 802552a:	e7ae      	b.n	802548a <__kernel_rem_pio2+0x1e2>
 802552c:	3001      	adds	r0, #1
 802552e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8025532:	2a00      	cmp	r2, #0
 8025534:	d0fa      	beq.n	802552c <__kernel_rem_pio2+0x284>
 8025536:	eb06 020b 	add.w	r2, r6, fp
 802553a:	ad18      	add	r5, sp, #96	; 0x60
 802553c:	1c73      	adds	r3, r6, #1
 802553e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8025542:	4406      	add	r6, r0
 8025544:	429e      	cmp	r6, r3
 8025546:	f6ff af19 	blt.w	802537c <__kernel_rem_pio2+0xd4>
 802554a:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 802554e:	9d00      	ldr	r5, [sp, #0]
 8025550:	ee07 0a90 	vmov	s15, r0
 8025554:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8025558:	2000      	movs	r0, #0
 802555a:	eca2 7b02 	vstmia	r2!, {d7}
 802555e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80255e0 <__kernel_rem_pio2+0x338>
 8025562:	4694      	mov	ip, r2
 8025564:	4288      	cmp	r0, r1
 8025566:	dd09      	ble.n	802557c <__kernel_rem_pio2+0x2d4>
 8025568:	a868      	add	r0, sp, #416	; 0x1a0
 802556a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 802556e:	ed80 7b00 	vstr	d7, [r0]
 8025572:	3301      	adds	r3, #1
 8025574:	e7e6      	b.n	8025544 <__kernel_rem_pio2+0x29c>
 8025576:	9b01      	ldr	r3, [sp, #4]
 8025578:	2001      	movs	r0, #1
 802557a:	e7d8      	b.n	802552e <__kernel_rem_pio2+0x286>
 802557c:	ecb5 5b02 	vldmia	r5!, {d5}
 8025580:	ed3c 6b02 	vldmdb	ip!, {d6}
 8025584:	3001      	adds	r0, #1
 8025586:	eea5 7b06 	vfma.f64	d7, d5, d6
 802558a:	e7eb      	b.n	8025564 <__kernel_rem_pio2+0x2bc>
 802558c:	3b01      	subs	r3, #1
 802558e:	e781      	b.n	8025494 <__kernel_rem_pio2+0x1ec>
 8025590:	4260      	negs	r0, r4
 8025592:	eeb0 0b48 	vmov.f64	d0, d8
 8025596:	f000 fa93 	bl	8025ac0 <scalbn>
 802559a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80255f0 <__kernel_rem_pio2+0x348>
 802559e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80255a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80255a6:	db2b      	blt.n	8025600 <__kernel_rem_pio2+0x358>
 80255a8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 80255e8 <__kernel_rem_pio2+0x340>
 80255ac:	ee20 7b07 	vmul.f64	d7, d0, d7
 80255b0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80255b4:	aa04      	add	r2, sp, #16
 80255b6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80255ba:	eea5 0b46 	vfms.f64	d0, d5, d6
 80255be:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80255c2:	a904      	add	r1, sp, #16
 80255c4:	ee10 3a10 	vmov	r3, s0
 80255c8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80255cc:	ee17 2a10 	vmov	r2, s14
 80255d0:	1c73      	adds	r3, r6, #1
 80255d2:	3418      	adds	r4, #24
 80255d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80255d8:	e762      	b.n	80254a0 <__kernel_rem_pio2+0x1f8>
 80255da:	bf00      	nop
 80255dc:	f3af 8000 	nop.w
	...
 80255ec:	3e700000 	.word	0x3e700000
 80255f0:	00000000 	.word	0x00000000
 80255f4:	41700000 	.word	0x41700000
 80255f8:	0802b310 	.word	0x0802b310
 80255fc:	0802b2d0 	.word	0x0802b2d0
 8025600:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8025604:	aa04      	add	r2, sp, #16
 8025606:	ee10 3a10 	vmov	r3, s0
 802560a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 802560e:	4633      	mov	r3, r6
 8025610:	e746      	b.n	80254a0 <__kernel_rem_pio2+0x1f8>
 8025612:	a804      	add	r0, sp, #16
 8025614:	a968      	add	r1, sp, #416	; 0x1a0
 8025616:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 802561a:	9000      	str	r0, [sp, #0]
 802561c:	ee07 0a90 	vmov	s15, r0
 8025620:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8025624:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8025628:	3a01      	subs	r2, #1
 802562a:	ee27 7b00 	vmul.f64	d7, d7, d0
 802562e:	ee20 0b06 	vmul.f64	d0, d0, d6
 8025632:	ed81 7b00 	vstr	d7, [r1]
 8025636:	e73d      	b.n	80254b4 <__kernel_rem_pio2+0x20c>
 8025638:	ecb6 5b02 	vldmia	r6!, {d5}
 802563c:	ecb4 6b02 	vldmia	r4!, {d6}
 8025640:	3201      	adds	r2, #1
 8025642:	eea5 7b06 	vfma.f64	d7, d5, d6
 8025646:	454a      	cmp	r2, r9
 8025648:	dc01      	bgt.n	802564e <__kernel_rem_pio2+0x3a6>
 802564a:	4290      	cmp	r0, r2
 802564c:	daf4      	bge.n	8025638 <__kernel_rem_pio2+0x390>
 802564e:	aa40      	add	r2, sp, #256	; 0x100
 8025650:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8025654:	ed82 7b00 	vstr	d7, [r2]
 8025658:	3901      	subs	r1, #1
 802565a:	3001      	adds	r0, #1
 802565c:	e72f      	b.n	80254be <__kernel_rem_pio2+0x216>
 802565e:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8025660:	2a02      	cmp	r2, #2
 8025662:	dc0a      	bgt.n	802567a <__kernel_rem_pio2+0x3d2>
 8025664:	2a00      	cmp	r2, #0
 8025666:	dc5a      	bgt.n	802571e <__kernel_rem_pio2+0x476>
 8025668:	d039      	beq.n	80256de <__kernel_rem_pio2+0x436>
 802566a:	f008 0007 	and.w	r0, r8, #7
 802566e:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8025672:	ecbd 8b06 	vpop	{d8-d10}
 8025676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802567a:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 802567c:	2a03      	cmp	r2, #3
 802567e:	d1f4      	bne.n	802566a <__kernel_rem_pio2+0x3c2>
 8025680:	aa40      	add	r2, sp, #256	; 0x100
 8025682:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8025686:	4611      	mov	r1, r2
 8025688:	4618      	mov	r0, r3
 802568a:	2800      	cmp	r0, #0
 802568c:	f1a1 0108 	sub.w	r1, r1, #8
 8025690:	dc52      	bgt.n	8025738 <__kernel_rem_pio2+0x490>
 8025692:	4619      	mov	r1, r3
 8025694:	2901      	cmp	r1, #1
 8025696:	f1a2 0208 	sub.w	r2, r2, #8
 802569a:	dc5d      	bgt.n	8025758 <__kernel_rem_pio2+0x4b0>
 802569c:	ed9f 7b40 	vldr	d7, [pc, #256]	; 80257a0 <__kernel_rem_pio2+0x4f8>
 80256a0:	2b01      	cmp	r3, #1
 80256a2:	dc69      	bgt.n	8025778 <__kernel_rem_pio2+0x4d0>
 80256a4:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 80256a8:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 80256ac:	2d00      	cmp	r5, #0
 80256ae:	d16c      	bne.n	802578a <__kernel_rem_pio2+0x4e2>
 80256b0:	ed87 5b00 	vstr	d5, [r7]
 80256b4:	ed87 6b02 	vstr	d6, [r7, #8]
 80256b8:	ed87 7b04 	vstr	d7, [r7, #16]
 80256bc:	e7d5      	b.n	802566a <__kernel_rem_pio2+0x3c2>
 80256be:	aa40      	add	r2, sp, #256	; 0x100
 80256c0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80256c4:	ed92 6b00 	vldr	d6, [r2]
 80256c8:	3b01      	subs	r3, #1
 80256ca:	ee37 7b06 	vadd.f64	d7, d7, d6
 80256ce:	2b00      	cmp	r3, #0
 80256d0:	daf5      	bge.n	80256be <__kernel_rem_pio2+0x416>
 80256d2:	b10d      	cbz	r5, 80256d8 <__kernel_rem_pio2+0x430>
 80256d4:	eeb1 7b47 	vneg.f64	d7, d7
 80256d8:	ed87 7b00 	vstr	d7, [r7]
 80256dc:	e7c5      	b.n	802566a <__kernel_rem_pio2+0x3c2>
 80256de:	ed9f 7b30 	vldr	d7, [pc, #192]	; 80257a0 <__kernel_rem_pio2+0x4f8>
 80256e2:	e7f4      	b.n	80256ce <__kernel_rem_pio2+0x426>
 80256e4:	a940      	add	r1, sp, #256	; 0x100
 80256e6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80256ea:	ed91 7b00 	vldr	d7, [r1]
 80256ee:	3a01      	subs	r2, #1
 80256f0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80256f4:	2a00      	cmp	r2, #0
 80256f6:	daf5      	bge.n	80256e4 <__kernel_rem_pio2+0x43c>
 80256f8:	b1ad      	cbz	r5, 8025726 <__kernel_rem_pio2+0x47e>
 80256fa:	eeb1 7b46 	vneg.f64	d7, d6
 80256fe:	ed87 7b00 	vstr	d7, [r7]
 8025702:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 8025706:	a942      	add	r1, sp, #264	; 0x108
 8025708:	2201      	movs	r2, #1
 802570a:	ee37 7b46 	vsub.f64	d7, d7, d6
 802570e:	4293      	cmp	r3, r2
 8025710:	da0c      	bge.n	802572c <__kernel_rem_pio2+0x484>
 8025712:	b10d      	cbz	r5, 8025718 <__kernel_rem_pio2+0x470>
 8025714:	eeb1 7b47 	vneg.f64	d7, d7
 8025718:	ed87 7b02 	vstr	d7, [r7, #8]
 802571c:	e7a5      	b.n	802566a <__kernel_rem_pio2+0x3c2>
 802571e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80257a0 <__kernel_rem_pio2+0x4f8>
 8025722:	461a      	mov	r2, r3
 8025724:	e7e6      	b.n	80256f4 <__kernel_rem_pio2+0x44c>
 8025726:	eeb0 7b46 	vmov.f64	d7, d6
 802572a:	e7e8      	b.n	80256fe <__kernel_rem_pio2+0x456>
 802572c:	ecb1 6b02 	vldmia	r1!, {d6}
 8025730:	3201      	adds	r2, #1
 8025732:	ee37 7b06 	vadd.f64	d7, d7, d6
 8025736:	e7ea      	b.n	802570e <__kernel_rem_pio2+0x466>
 8025738:	ed91 7b00 	vldr	d7, [r1]
 802573c:	ed91 5b02 	vldr	d5, [r1, #8]
 8025740:	3801      	subs	r0, #1
 8025742:	ee37 6b05 	vadd.f64	d6, d7, d5
 8025746:	ee37 7b46 	vsub.f64	d7, d7, d6
 802574a:	ed81 6b00 	vstr	d6, [r1]
 802574e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8025752:	ed81 7b02 	vstr	d7, [r1, #8]
 8025756:	e798      	b.n	802568a <__kernel_rem_pio2+0x3e2>
 8025758:	ed92 7b00 	vldr	d7, [r2]
 802575c:	ed92 5b02 	vldr	d5, [r2, #8]
 8025760:	3901      	subs	r1, #1
 8025762:	ee37 6b05 	vadd.f64	d6, d7, d5
 8025766:	ee37 7b46 	vsub.f64	d7, d7, d6
 802576a:	ed82 6b00 	vstr	d6, [r2]
 802576e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8025772:	ed82 7b02 	vstr	d7, [r2, #8]
 8025776:	e78d      	b.n	8025694 <__kernel_rem_pio2+0x3ec>
 8025778:	aa40      	add	r2, sp, #256	; 0x100
 802577a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 802577e:	ed92 6b00 	vldr	d6, [r2]
 8025782:	3b01      	subs	r3, #1
 8025784:	ee37 7b06 	vadd.f64	d7, d7, d6
 8025788:	e78a      	b.n	80256a0 <__kernel_rem_pio2+0x3f8>
 802578a:	eeb1 5b45 	vneg.f64	d5, d5
 802578e:	eeb1 6b46 	vneg.f64	d6, d6
 8025792:	ed87 5b00 	vstr	d5, [r7]
 8025796:	eeb1 7b47 	vneg.f64	d7, d7
 802579a:	ed87 6b02 	vstr	d6, [r7, #8]
 802579e:	e78b      	b.n	80256b8 <__kernel_rem_pio2+0x410>
	...

080257a8 <__kernel_sin>:
 80257a8:	ee10 3a90 	vmov	r3, s1
 80257ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80257b0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80257b4:	da04      	bge.n	80257c0 <__kernel_sin+0x18>
 80257b6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80257ba:	ee17 3a90 	vmov	r3, s15
 80257be:	b35b      	cbz	r3, 8025818 <__kernel_sin+0x70>
 80257c0:	ee20 6b00 	vmul.f64	d6, d0, d0
 80257c4:	ee20 5b06 	vmul.f64	d5, d0, d6
 80257c8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8025820 <__kernel_sin+0x78>
 80257cc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8025828 <__kernel_sin+0x80>
 80257d0:	eea6 4b07 	vfma.f64	d4, d6, d7
 80257d4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8025830 <__kernel_sin+0x88>
 80257d8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80257dc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8025838 <__kernel_sin+0x90>
 80257e0:	eea7 4b06 	vfma.f64	d4, d7, d6
 80257e4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8025840 <__kernel_sin+0x98>
 80257e8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80257ec:	b930      	cbnz	r0, 80257fc <__kernel_sin+0x54>
 80257ee:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8025848 <__kernel_sin+0xa0>
 80257f2:	eea6 4b07 	vfma.f64	d4, d6, d7
 80257f6:	eea4 0b05 	vfma.f64	d0, d4, d5
 80257fa:	4770      	bx	lr
 80257fc:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8025800:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8025804:	eea1 7b04 	vfma.f64	d7, d1, d4
 8025808:	ee97 1b06 	vfnms.f64	d1, d7, d6
 802580c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8025850 <__kernel_sin+0xa8>
 8025810:	eea5 1b07 	vfma.f64	d1, d5, d7
 8025814:	ee30 0b41 	vsub.f64	d0, d0, d1
 8025818:	4770      	bx	lr
 802581a:	bf00      	nop
 802581c:	f3af 8000 	nop.w
 8025820:	5acfd57c 	.word	0x5acfd57c
 8025824:	3de5d93a 	.word	0x3de5d93a
 8025828:	8a2b9ceb 	.word	0x8a2b9ceb
 802582c:	be5ae5e6 	.word	0xbe5ae5e6
 8025830:	57b1fe7d 	.word	0x57b1fe7d
 8025834:	3ec71de3 	.word	0x3ec71de3
 8025838:	19c161d5 	.word	0x19c161d5
 802583c:	bf2a01a0 	.word	0xbf2a01a0
 8025840:	1110f8a6 	.word	0x1110f8a6
 8025844:	3f811111 	.word	0x3f811111
 8025848:	55555549 	.word	0x55555549
 802584c:	bfc55555 	.word	0xbfc55555
 8025850:	55555549 	.word	0x55555549
 8025854:	3fc55555 	.word	0x3fc55555

08025858 <with_errno>:
 8025858:	b513      	push	{r0, r1, r4, lr}
 802585a:	4604      	mov	r4, r0
 802585c:	ed8d 0b00 	vstr	d0, [sp]
 8025860:	f7fd f804 	bl	802286c <__errno>
 8025864:	ed9d 0b00 	vldr	d0, [sp]
 8025868:	6004      	str	r4, [r0, #0]
 802586a:	b002      	add	sp, #8
 802586c:	bd10      	pop	{r4, pc}

0802586e <xflow>:
 802586e:	b082      	sub	sp, #8
 8025870:	b158      	cbz	r0, 802588a <xflow+0x1c>
 8025872:	eeb1 7b40 	vneg.f64	d7, d0
 8025876:	ed8d 7b00 	vstr	d7, [sp]
 802587a:	ed9d 7b00 	vldr	d7, [sp]
 802587e:	2022      	movs	r0, #34	; 0x22
 8025880:	ee20 0b07 	vmul.f64	d0, d0, d7
 8025884:	b002      	add	sp, #8
 8025886:	f7ff bfe7 	b.w	8025858 <with_errno>
 802588a:	eeb0 7b40 	vmov.f64	d7, d0
 802588e:	e7f2      	b.n	8025876 <xflow+0x8>

08025890 <__math_uflow>:
 8025890:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8025898 <__math_uflow+0x8>
 8025894:	f7ff bfeb 	b.w	802586e <xflow>
 8025898:	00000000 	.word	0x00000000
 802589c:	10000000 	.word	0x10000000

080258a0 <__math_oflow>:
 80258a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80258a8 <__math_oflow+0x8>
 80258a4:	f7ff bfe3 	b.w	802586e <xflow>
 80258a8:	00000000 	.word	0x00000000
 80258ac:	70000000 	.word	0x70000000

080258b0 <__math_divzero>:
 80258b0:	b082      	sub	sp, #8
 80258b2:	2800      	cmp	r0, #0
 80258b4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80258b8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 80258bc:	fe06 7b07 	vseleq.f64	d7, d6, d7
 80258c0:	ed8d 7b00 	vstr	d7, [sp]
 80258c4:	ed9d 0b00 	vldr	d0, [sp]
 80258c8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 80258d8 <__math_divzero+0x28>
 80258cc:	2022      	movs	r0, #34	; 0x22
 80258ce:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80258d2:	b002      	add	sp, #8
 80258d4:	f7ff bfc0 	b.w	8025858 <with_errno>
	...

080258e0 <__math_invalid>:
 80258e0:	eeb0 7b40 	vmov.f64	d7, d0
 80258e4:	eeb4 7b47 	vcmp.f64	d7, d7
 80258e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80258ec:	ee30 6b40 	vsub.f64	d6, d0, d0
 80258f0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80258f4:	d602      	bvs.n	80258fc <__math_invalid+0x1c>
 80258f6:	2021      	movs	r0, #33	; 0x21
 80258f8:	f7ff bfae 	b.w	8025858 <with_errno>
 80258fc:	4770      	bx	lr

080258fe <__math_check_uflow>:
 80258fe:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8025902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025906:	d102      	bne.n	802590e <__math_check_uflow+0x10>
 8025908:	2022      	movs	r0, #34	; 0x22
 802590a:	f7ff bfa5 	b.w	8025858 <with_errno>
 802590e:	4770      	bx	lr

08025910 <__math_check_oflow>:
 8025910:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8025930 <__math_check_oflow+0x20>
 8025914:	eeb0 7bc0 	vabs.f64	d7, d0
 8025918:	eeb4 7b46 	vcmp.f64	d7, d6
 802591c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025920:	dd02      	ble.n	8025928 <__math_check_oflow+0x18>
 8025922:	2022      	movs	r0, #34	; 0x22
 8025924:	f7ff bf98 	b.w	8025858 <with_errno>
 8025928:	4770      	bx	lr
 802592a:	bf00      	nop
 802592c:	f3af 8000 	nop.w
 8025930:	ffffffff 	.word	0xffffffff
 8025934:	7fefffff 	.word	0x7fefffff

08025938 <with_errnof>:
 8025938:	b513      	push	{r0, r1, r4, lr}
 802593a:	4604      	mov	r4, r0
 802593c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8025940:	f7fc ff94 	bl	802286c <__errno>
 8025944:	ed9d 0a01 	vldr	s0, [sp, #4]
 8025948:	6004      	str	r4, [r0, #0]
 802594a:	b002      	add	sp, #8
 802594c:	bd10      	pop	{r4, pc}

0802594e <xflowf>:
 802594e:	b130      	cbz	r0, 802595e <xflowf+0x10>
 8025950:	eef1 7a40 	vneg.f32	s15, s0
 8025954:	ee27 0a80 	vmul.f32	s0, s15, s0
 8025958:	2022      	movs	r0, #34	; 0x22
 802595a:	f7ff bfed 	b.w	8025938 <with_errnof>
 802595e:	eef0 7a40 	vmov.f32	s15, s0
 8025962:	e7f7      	b.n	8025954 <xflowf+0x6>

08025964 <__math_uflowf>:
 8025964:	ed9f 0a01 	vldr	s0, [pc, #4]	; 802596c <__math_uflowf+0x8>
 8025968:	f7ff bff1 	b.w	802594e <xflowf>
 802596c:	10000000 	.word	0x10000000

08025970 <__math_may_uflowf>:
 8025970:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8025978 <__math_may_uflowf+0x8>
 8025974:	f7ff bfeb 	b.w	802594e <xflowf>
 8025978:	1a200000 	.word	0x1a200000

0802597c <__math_oflowf>:
 802597c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8025984 <__math_oflowf+0x8>
 8025980:	f7ff bfe5 	b.w	802594e <xflowf>
 8025984:	70000000 	.word	0x70000000

08025988 <__math_divzerof>:
 8025988:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802598c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8025990:	2800      	cmp	r0, #0
 8025992:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8025996:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80259a4 <__math_divzerof+0x1c>
 802599a:	2022      	movs	r0, #34	; 0x22
 802599c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80259a0:	f7ff bfca 	b.w	8025938 <with_errnof>
 80259a4:	00000000 	.word	0x00000000

080259a8 <__math_invalidf>:
 80259a8:	eef0 7a40 	vmov.f32	s15, s0
 80259ac:	ee30 7a40 	vsub.f32	s14, s0, s0
 80259b0:	eef4 7a67 	vcmp.f32	s15, s15
 80259b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80259b8:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80259bc:	d602      	bvs.n	80259c4 <__math_invalidf+0x1c>
 80259be:	2021      	movs	r0, #33	; 0x21
 80259c0:	f7ff bfba 	b.w	8025938 <with_errnof>
 80259c4:	4770      	bx	lr

080259c6 <fabs>:
 80259c6:	ec51 0b10 	vmov	r0, r1, d0
 80259ca:	ee10 2a10 	vmov	r2, s0
 80259ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80259d2:	ec43 2b10 	vmov	d0, r2, r3
 80259d6:	4770      	bx	lr

080259d8 <floor>:
 80259d8:	ee10 1a90 	vmov	r1, s1
 80259dc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80259e0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80259e4:	2b13      	cmp	r3, #19
 80259e6:	b530      	push	{r4, r5, lr}
 80259e8:	ee10 0a10 	vmov	r0, s0
 80259ec:	ee10 5a10 	vmov	r5, s0
 80259f0:	dc31      	bgt.n	8025a56 <floor+0x7e>
 80259f2:	2b00      	cmp	r3, #0
 80259f4:	da15      	bge.n	8025a22 <floor+0x4a>
 80259f6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8025ab0 <floor+0xd8>
 80259fa:	ee30 0b07 	vadd.f64	d0, d0, d7
 80259fe:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8025a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025a06:	dd07      	ble.n	8025a18 <floor+0x40>
 8025a08:	2900      	cmp	r1, #0
 8025a0a:	da4e      	bge.n	8025aaa <floor+0xd2>
 8025a0c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8025a10:	4318      	orrs	r0, r3
 8025a12:	d001      	beq.n	8025a18 <floor+0x40>
 8025a14:	4928      	ldr	r1, [pc, #160]	; (8025ab8 <floor+0xe0>)
 8025a16:	2000      	movs	r0, #0
 8025a18:	460b      	mov	r3, r1
 8025a1a:	4602      	mov	r2, r0
 8025a1c:	ec43 2b10 	vmov	d0, r2, r3
 8025a20:	e020      	b.n	8025a64 <floor+0x8c>
 8025a22:	4a26      	ldr	r2, [pc, #152]	; (8025abc <floor+0xe4>)
 8025a24:	411a      	asrs	r2, r3
 8025a26:	ea01 0402 	and.w	r4, r1, r2
 8025a2a:	4304      	orrs	r4, r0
 8025a2c:	d01a      	beq.n	8025a64 <floor+0x8c>
 8025a2e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8025ab0 <floor+0xd8>
 8025a32:	ee30 0b07 	vadd.f64	d0, d0, d7
 8025a36:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8025a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025a3e:	ddeb      	ble.n	8025a18 <floor+0x40>
 8025a40:	2900      	cmp	r1, #0
 8025a42:	bfbe      	ittt	lt
 8025a44:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8025a48:	fa40 f303 	asrlt.w	r3, r0, r3
 8025a4c:	18c9      	addlt	r1, r1, r3
 8025a4e:	ea21 0102 	bic.w	r1, r1, r2
 8025a52:	2000      	movs	r0, #0
 8025a54:	e7e0      	b.n	8025a18 <floor+0x40>
 8025a56:	2b33      	cmp	r3, #51	; 0x33
 8025a58:	dd05      	ble.n	8025a66 <floor+0x8e>
 8025a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8025a5e:	d101      	bne.n	8025a64 <floor+0x8c>
 8025a60:	ee30 0b00 	vadd.f64	d0, d0, d0
 8025a64:	bd30      	pop	{r4, r5, pc}
 8025a66:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8025a6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8025a6e:	40e2      	lsrs	r2, r4
 8025a70:	4202      	tst	r2, r0
 8025a72:	d0f7      	beq.n	8025a64 <floor+0x8c>
 8025a74:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8025ab0 <floor+0xd8>
 8025a78:	ee30 0b07 	vadd.f64	d0, d0, d7
 8025a7c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8025a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025a84:	ddc8      	ble.n	8025a18 <floor+0x40>
 8025a86:	2900      	cmp	r1, #0
 8025a88:	da02      	bge.n	8025a90 <floor+0xb8>
 8025a8a:	2b14      	cmp	r3, #20
 8025a8c:	d103      	bne.n	8025a96 <floor+0xbe>
 8025a8e:	3101      	adds	r1, #1
 8025a90:	ea20 0002 	bic.w	r0, r0, r2
 8025a94:	e7c0      	b.n	8025a18 <floor+0x40>
 8025a96:	2401      	movs	r4, #1
 8025a98:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8025a9c:	fa04 f303 	lsl.w	r3, r4, r3
 8025aa0:	4418      	add	r0, r3
 8025aa2:	42a8      	cmp	r0, r5
 8025aa4:	bf38      	it	cc
 8025aa6:	1909      	addcc	r1, r1, r4
 8025aa8:	e7f2      	b.n	8025a90 <floor+0xb8>
 8025aaa:	2000      	movs	r0, #0
 8025aac:	4601      	mov	r1, r0
 8025aae:	e7b3      	b.n	8025a18 <floor+0x40>
 8025ab0:	8800759c 	.word	0x8800759c
 8025ab4:	7e37e43c 	.word	0x7e37e43c
 8025ab8:	bff00000 	.word	0xbff00000
 8025abc:	000fffff 	.word	0x000fffff

08025ac0 <scalbn>:
 8025ac0:	b082      	sub	sp, #8
 8025ac2:	ed8d 0b00 	vstr	d0, [sp]
 8025ac6:	9b01      	ldr	r3, [sp, #4]
 8025ac8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8025acc:	b9a2      	cbnz	r2, 8025af8 <scalbn+0x38>
 8025ace:	9a00      	ldr	r2, [sp, #0]
 8025ad0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8025ad4:	4313      	orrs	r3, r2
 8025ad6:	d03a      	beq.n	8025b4e <scalbn+0x8e>
 8025ad8:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8025bb0 <scalbn+0xf0>
 8025adc:	4b40      	ldr	r3, [pc, #256]	; (8025be0 <scalbn+0x120>)
 8025ade:	ee20 7b07 	vmul.f64	d7, d0, d7
 8025ae2:	4298      	cmp	r0, r3
 8025ae4:	ed8d 7b00 	vstr	d7, [sp]
 8025ae8:	da11      	bge.n	8025b0e <scalbn+0x4e>
 8025aea:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8025bb8 <scalbn+0xf8>
 8025aee:	ed9d 6b00 	vldr	d6, [sp]
 8025af2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8025af6:	e007      	b.n	8025b08 <scalbn+0x48>
 8025af8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8025afc:	428a      	cmp	r2, r1
 8025afe:	d10a      	bne.n	8025b16 <scalbn+0x56>
 8025b00:	ed9d 7b00 	vldr	d7, [sp]
 8025b04:	ee37 7b07 	vadd.f64	d7, d7, d7
 8025b08:	ed8d 7b00 	vstr	d7, [sp]
 8025b0c:	e01f      	b.n	8025b4e <scalbn+0x8e>
 8025b0e:	9b01      	ldr	r3, [sp, #4]
 8025b10:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8025b14:	3a36      	subs	r2, #54	; 0x36
 8025b16:	4402      	add	r2, r0
 8025b18:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8025b1c:	428a      	cmp	r2, r1
 8025b1e:	dd0a      	ble.n	8025b36 <scalbn+0x76>
 8025b20:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8025bc0 <scalbn+0x100>
 8025b24:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8025bc8 <scalbn+0x108>
 8025b28:	eeb0 6b47 	vmov.f64	d6, d7
 8025b2c:	9b01      	ldr	r3, [sp, #4]
 8025b2e:	2b00      	cmp	r3, #0
 8025b30:	fe27 7b05 	vselge.f64	d7, d7, d5
 8025b34:	e7dd      	b.n	8025af2 <scalbn+0x32>
 8025b36:	2a00      	cmp	r2, #0
 8025b38:	dd0d      	ble.n	8025b56 <scalbn+0x96>
 8025b3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8025b3e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8025b42:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8025b46:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8025b4a:	e9cd 0100 	strd	r0, r1, [sp]
 8025b4e:	ed9d 0b00 	vldr	d0, [sp]
 8025b52:	b002      	add	sp, #8
 8025b54:	4770      	bx	lr
 8025b56:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8025b5a:	da18      	bge.n	8025b8e <scalbn+0xce>
 8025b5c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8025b60:	4298      	cmp	r0, r3
 8025b62:	9b01      	ldr	r3, [sp, #4]
 8025b64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8025b68:	dd09      	ble.n	8025b7e <scalbn+0xbe>
 8025b6a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8025bc0 <scalbn+0x100>
 8025b6e:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8025bc8 <scalbn+0x108>
 8025b72:	eeb0 6b47 	vmov.f64	d6, d7
 8025b76:	2b00      	cmp	r3, #0
 8025b78:	fe07 7b05 	vseleq.f64	d7, d7, d5
 8025b7c:	e7b9      	b.n	8025af2 <scalbn+0x32>
 8025b7e:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8025bb8 <scalbn+0xf8>
 8025b82:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8025bd0 <scalbn+0x110>
 8025b86:	eeb0 6b47 	vmov.f64	d6, d7
 8025b8a:	2b00      	cmp	r3, #0
 8025b8c:	e7f4      	b.n	8025b78 <scalbn+0xb8>
 8025b8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8025b92:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8025b96:	3236      	adds	r2, #54	; 0x36
 8025b98:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8025b9c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8025ba0:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8025bd8 <scalbn+0x118>
 8025ba4:	ec41 0b17 	vmov	d7, r0, r1
 8025ba8:	e7a3      	b.n	8025af2 <scalbn+0x32>
 8025baa:	bf00      	nop
 8025bac:	f3af 8000 	nop.w
 8025bb0:	00000000 	.word	0x00000000
 8025bb4:	43500000 	.word	0x43500000
 8025bb8:	c2f8f359 	.word	0xc2f8f359
 8025bbc:	01a56e1f 	.word	0x01a56e1f
 8025bc0:	8800759c 	.word	0x8800759c
 8025bc4:	7e37e43c 	.word	0x7e37e43c
 8025bc8:	8800759c 	.word	0x8800759c
 8025bcc:	fe37e43c 	.word	0xfe37e43c
 8025bd0:	c2f8f359 	.word	0xc2f8f359
 8025bd4:	81a56e1f 	.word	0x81a56e1f
 8025bd8:	00000000 	.word	0x00000000
 8025bdc:	3c900000 	.word	0x3c900000
 8025be0:	ffff3cb0 	.word	0xffff3cb0

08025be4 <_init>:
 8025be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025be6:	bf00      	nop
 8025be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025bea:	bc08      	pop	{r3}
 8025bec:	469e      	mov	lr, r3
 8025bee:	4770      	bx	lr

08025bf0 <_fini>:
 8025bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025bf2:	bf00      	nop
 8025bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025bf6:	bc08      	pop	{r3}
 8025bf8:	469e      	mov	lr, r3
 8025bfa:	4770      	bx	lr
