
SSS_CIS_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc90  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  0800ff30  0800ff30  0001ff30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010374  08010374  000336a0  2**0
                  CONTENTS
  4 .ARM          00000008  08010374  08010374  00020374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801037c  0801037c  000336a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801037c  0801037c  0002037c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010380  08010380  00020380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000035e0  24000000  08010384  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  240035e0  08013964  000335e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24003640  080139c4  00033640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00002e34  240036a0  08013a24  000336a0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  240064d4  08013a24  000364d4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000336a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004394a  00000000  00000000  000336ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000067d4  00000000  00000000  00077018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001fa8  00000000  00000000  0007d7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001d88  00000000  00000000  0007f798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00008dc6  00000000  00000000  00081520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002c5c4  00000000  00000000  0008a2e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001ab9b6  00000000  00000000  000b68aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  00262260  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000093f4  00000000  00000000  002622b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240036a0 	.word	0x240036a0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ff18 	.word	0x0800ff18

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240036a4 	.word	0x240036a4
 80002dc:	0800ff18 	.word	0x0800ff18

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800068c:	4b3f      	ldr	r3, [pc, #252]	; (800078c <SystemInit+0x104>)
 800068e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000692:	4a3e      	ldr	r2, [pc, #248]	; (800078c <SystemInit+0x104>)
 8000694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800069c:	4b3b      	ldr	r3, [pc, #236]	; (800078c <SystemInit+0x104>)
 800069e:	691b      	ldr	r3, [r3, #16]
 80006a0:	4a3a      	ldr	r2, [pc, #232]	; (800078c <SystemInit+0x104>)
 80006a2:	f043 0310 	orr.w	r3, r3, #16
 80006a6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0x108>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f003 030f 	and.w	r3, r3, #15
 80006b0:	2b06      	cmp	r3, #6
 80006b2:	d807      	bhi.n	80006c4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b4:	4b36      	ldr	r3, [pc, #216]	; (8000790 <SystemInit+0x108>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f023 030f 	bic.w	r3, r3, #15
 80006bc:	4a34      	ldr	r2, [pc, #208]	; (8000790 <SystemInit+0x108>)
 80006be:	f043 0307 	orr.w	r3, r3, #7
 80006c2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c4:	4b33      	ldr	r3, [pc, #204]	; (8000794 <SystemInit+0x10c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x10c>)
 80006ca:	f043 0301 	orr.w	r3, r3, #1
 80006ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d0:	4b30      	ldr	r3, [pc, #192]	; (8000794 <SystemInit+0x10c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d6:	4b2f      	ldr	r3, [pc, #188]	; (8000794 <SystemInit+0x10c>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	492e      	ldr	r1, [pc, #184]	; (8000794 <SystemInit+0x10c>)
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x110>)
 80006de:	4013      	ands	r3, r2
 80006e0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006e2:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <SystemInit+0x108>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f003 0308 	and.w	r3, r3, #8
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d007      	beq.n	80006fe <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ee:	4b28      	ldr	r3, [pc, #160]	; (8000790 <SystemInit+0x108>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f023 030f 	bic.w	r3, r3, #15
 80006f6:	4a26      	ldr	r2, [pc, #152]	; (8000790 <SystemInit+0x108>)
 80006f8:	f043 0307 	orr.w	r3, r3, #7
 80006fc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fe:	4b25      	ldr	r3, [pc, #148]	; (8000794 <SystemInit+0x10c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000704:	4b23      	ldr	r3, [pc, #140]	; (8000794 <SystemInit+0x10c>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800070a:	4b22      	ldr	r3, [pc, #136]	; (8000794 <SystemInit+0x10c>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000710:	4b20      	ldr	r3, [pc, #128]	; (8000794 <SystemInit+0x10c>)
 8000712:	4a22      	ldr	r2, [pc, #136]	; (800079c <SystemInit+0x114>)
 8000714:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000716:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <SystemInit+0x10c>)
 8000718:	4a21      	ldr	r2, [pc, #132]	; (80007a0 <SystemInit+0x118>)
 800071a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <SystemInit+0x10c>)
 800071e:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <SystemInit+0x11c>)
 8000720:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <SystemInit+0x10c>)
 8000724:	2200      	movs	r2, #0
 8000726:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000728:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <SystemInit+0x10c>)
 800072a:	4a1e      	ldr	r2, [pc, #120]	; (80007a4 <SystemInit+0x11c>)
 800072c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <SystemInit+0x10c>)
 8000730:	2200      	movs	r2, #0
 8000732:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <SystemInit+0x10c>)
 8000736:	4a1b      	ldr	r2, [pc, #108]	; (80007a4 <SystemInit+0x11c>)
 8000738:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <SystemInit+0x10c>)
 800073c:	2200      	movs	r2, #0
 800073e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <SystemInit+0x10c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a13      	ldr	r2, [pc, #76]	; (8000794 <SystemInit+0x10c>)
 8000746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800074a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <SystemInit+0x10c>)
 800074e:	2200      	movs	r2, #0
 8000750:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <SystemInit+0x120>)
 8000754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000756:	4a14      	ldr	r2, [pc, #80]	; (80007a8 <SystemInit+0x120>)
 8000758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x124>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <SystemInit+0x128>)
 8000764:	4013      	ands	r3, r2
 8000766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800076a:	d202      	bcs.n	8000772 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x12c>)
 800076e:	2201      	movs	r2, #1
 8000770:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <SystemInit+0x130>)
 8000774:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000778:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <SystemInit+0x104>)
 800077c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000780:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	e000ed00 	.word	0xe000ed00
 8000790:	52002000 	.word	0x52002000
 8000794:	58024400 	.word	0x58024400
 8000798:	eaf6ed7f 	.word	0xeaf6ed7f
 800079c:	02020200 	.word	0x02020200
 80007a0:	01ff0000 	.word	0x01ff0000
 80007a4:	01010280 	.word	0x01010280
 80007a8:	580000c0 	.word	0x580000c0
 80007ac:	5c001000 	.word	0x5c001000
 80007b0:	ffff0000 	.word	0xffff0000
 80007b4:	51008108 	.word	0x51008108
 80007b8:	52004000 	.word	0x52004000

080007bc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	; 0x28
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007ce:	463b      	mov	r3, r7
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
 80007dc:	615a      	str	r2, [r3, #20]
 80007de:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80007e0:	4b2f      	ldr	r3, [pc, #188]	; (80008a0 <MX_ADC1_Init+0xe4>)
 80007e2:	4a30      	ldr	r2, [pc, #192]	; (80008a4 <MX_ADC1_Init+0xe8>)
 80007e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007e6:	4b2e      	ldr	r3, [pc, #184]	; (80008a0 <MX_ADC1_Init+0xe4>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80007ec:	4b2c      	ldr	r3, [pc, #176]	; (80008a0 <MX_ADC1_Init+0xe4>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007f2:	4b2b      	ldr	r3, [pc, #172]	; (80008a0 <MX_ADC1_Init+0xe4>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007f8:	4b29      	ldr	r3, [pc, #164]	; (80008a0 <MX_ADC1_Init+0xe4>)
 80007fa:	2204      	movs	r2, #4
 80007fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007fe:	4b28      	ldr	r3, [pc, #160]	; (80008a0 <MX_ADC1_Init+0xe4>)
 8000800:	2200      	movs	r2, #0
 8000802:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000804:	4b26      	ldr	r3, [pc, #152]	; (80008a0 <MX_ADC1_Init+0xe4>)
 8000806:	2200      	movs	r2, #0
 8000808:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800080a:	4b25      	ldr	r3, [pc, #148]	; (80008a0 <MX_ADC1_Init+0xe4>)
 800080c:	2201      	movs	r2, #1
 800080e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000810:	4b23      	ldr	r3, [pc, #140]	; (80008a0 <MX_ADC1_Init+0xe4>)
 8000812:	2200      	movs	r2, #0
 8000814:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000816:	4b22      	ldr	r3, [pc, #136]	; (80008a0 <MX_ADC1_Init+0xe4>)
 8000818:	2200      	movs	r2, #0
 800081a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800081c:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <MX_ADC1_Init+0xe4>)
 800081e:	2200      	movs	r2, #0
 8000820:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000822:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <MX_ADC1_Init+0xe4>)
 8000824:	2200      	movs	r2, #0
 8000826:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000828:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <MX_ADC1_Init+0xe4>)
 800082a:	2200      	movs	r2, #0
 800082c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800082e:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <MX_ADC1_Init+0xe4>)
 8000830:	2200      	movs	r2, #0
 8000832:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000834:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <MX_ADC1_Init+0xe4>)
 8000836:	2200      	movs	r2, #0
 8000838:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800083c:	4818      	ldr	r0, [pc, #96]	; (80008a0 <MX_ADC1_Init+0xe4>)
 800083e:	f002 f923 	bl	8002a88 <HAL_ADC_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000848:	f000 fec4 	bl	80015d4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800084c:	2300      	movs	r3, #0
 800084e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4619      	mov	r1, r3
 8000856:	4812      	ldr	r0, [pc, #72]	; (80008a0 <MX_ADC1_Init+0xe4>)
 8000858:	f002 ff36 	bl	80036c8 <HAL_ADCEx_MultiModeConfigChannel>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000862:	f000 feb7 	bl	80015d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000866:	2301      	movs	r3, #1
 8000868:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800086a:	2306      	movs	r3, #6
 800086c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000872:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000876:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000878:	2304      	movs	r3, #4
 800087a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000884:	463b      	mov	r3, r7
 8000886:	4619      	mov	r1, r3
 8000888:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_ADC1_Init+0xe4>)
 800088a:	f002 fa9d 	bl	8002dc8 <HAL_ADC_ConfigChannel>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000894:	f000 fe9e 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	3728      	adds	r7, #40	; 0x28
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	24003738 	.word	0x24003738
 80008a4:	40022000 	.word	0x40022000

080008a8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b088      	sub	sp, #32
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
 80008bc:	615a      	str	r2, [r3, #20]
 80008be:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80008c0:	4b29      	ldr	r3, [pc, #164]	; (8000968 <MX_ADC2_Init+0xc0>)
 80008c2:	4a2a      	ldr	r2, [pc, #168]	; (800096c <MX_ADC2_Init+0xc4>)
 80008c4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008c6:	4b28      	ldr	r3, [pc, #160]	; (8000968 <MX_ADC2_Init+0xc0>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80008cc:	4b26      	ldr	r3, [pc, #152]	; (8000968 <MX_ADC2_Init+0xc0>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008d2:	4b25      	ldr	r3, [pc, #148]	; (8000968 <MX_ADC2_Init+0xc0>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008d8:	4b23      	ldr	r3, [pc, #140]	; (8000968 <MX_ADC2_Init+0xc0>)
 80008da:	2204      	movs	r2, #4
 80008dc:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80008de:	4b22      	ldr	r3, [pc, #136]	; (8000968 <MX_ADC2_Init+0xc0>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80008e4:	4b20      	ldr	r3, [pc, #128]	; (8000968 <MX_ADC2_Init+0xc0>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80008ea:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <MX_ADC2_Init+0xc0>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008f0:	4b1d      	ldr	r3, [pc, #116]	; (8000968 <MX_ADC2_Init+0xc0>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008f6:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <MX_ADC2_Init+0xc0>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008fc:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <MX_ADC2_Init+0xc0>)
 80008fe:	2200      	movs	r2, #0
 8000900:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000902:	4b19      	ldr	r3, [pc, #100]	; (8000968 <MX_ADC2_Init+0xc0>)
 8000904:	2200      	movs	r2, #0
 8000906:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000908:	4b17      	ldr	r3, [pc, #92]	; (8000968 <MX_ADC2_Init+0xc0>)
 800090a:	2200      	movs	r2, #0
 800090c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800090e:	4b16      	ldr	r3, [pc, #88]	; (8000968 <MX_ADC2_Init+0xc0>)
 8000910:	2200      	movs	r2, #0
 8000912:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_ADC2_Init+0xc0>)
 8000916:	2200      	movs	r2, #0
 8000918:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800091c:	4812      	ldr	r0, [pc, #72]	; (8000968 <MX_ADC2_Init+0xc0>)
 800091e:	f002 f8b3 	bl	8002a88 <HAL_ADC_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000928:	f000 fe54 	bl	80015d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800092c:	4b10      	ldr	r3, [pc, #64]	; (8000970 <MX_ADC2_Init+0xc8>)
 800092e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000930:	2306      	movs	r3, #6
 8000932:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000934:	2300      	movs	r3, #0
 8000936:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000938:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800093c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800093e:	2304      	movs	r3, #4
 8000940:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000946:	2300      	movs	r3, #0
 8000948:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	4619      	mov	r1, r3
 800094e:	4806      	ldr	r0, [pc, #24]	; (8000968 <MX_ADC2_Init+0xc0>)
 8000950:	f002 fa3a 	bl	8002dc8 <HAL_ADC_ConfigChannel>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800095a:	f000 fe3b 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	3720      	adds	r7, #32
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	240036d4 	.word	0x240036d4
 800096c:	40022100 	.word	0x40022100
 8000970:	04300002 	.word	0x04300002

08000974 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b088      	sub	sp, #32
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
 8000988:	615a      	str	r2, [r3, #20]
 800098a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 800098c:	4b29      	ldr	r3, [pc, #164]	; (8000a34 <MX_ADC3_Init+0xc0>)
 800098e:	4a2a      	ldr	r2, [pc, #168]	; (8000a38 <MX_ADC3_Init+0xc4>)
 8000990:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000992:	4b28      	ldr	r3, [pc, #160]	; (8000a34 <MX_ADC3_Init+0xc0>)
 8000994:	2200      	movs	r2, #0
 8000996:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000998:	4b26      	ldr	r3, [pc, #152]	; (8000a34 <MX_ADC3_Init+0xc0>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800099e:	4b25      	ldr	r3, [pc, #148]	; (8000a34 <MX_ADC3_Init+0xc0>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009a4:	4b23      	ldr	r3, [pc, #140]	; (8000a34 <MX_ADC3_Init+0xc0>)
 80009a6:	2204      	movs	r2, #4
 80009a8:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80009aa:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <MX_ADC3_Init+0xc0>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80009b0:	4b20      	ldr	r3, [pc, #128]	; (8000a34 <MX_ADC3_Init+0xc0>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80009b6:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <MX_ADC3_Init+0xc0>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80009bc:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <MX_ADC3_Init+0xc0>)
 80009be:	2200      	movs	r2, #0
 80009c0:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009c2:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <MX_ADC3_Init+0xc0>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009c8:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <MX_ADC3_Init+0xc0>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80009ce:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <MX_ADC3_Init+0xc0>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009d4:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <MX_ADC3_Init+0xc0>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009da:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <MX_ADC3_Init+0xc0>)
 80009dc:	2200      	movs	r2, #0
 80009de:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80009e0:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_ADC3_Init+0xc0>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80009e8:	4812      	ldr	r0, [pc, #72]	; (8000a34 <MX_ADC3_Init+0xc0>)
 80009ea:	f002 f84d 	bl	8002a88 <HAL_ADC_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 80009f4:	f000 fdee 	bl	80015d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009f8:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <MX_ADC3_Init+0xc8>)
 80009fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009fc:	2306      	movs	r3, #6
 80009fe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a00:	2300      	movs	r3, #0
 8000a02:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a04:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a08:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4806      	ldr	r0, [pc, #24]	; (8000a34 <MX_ADC3_Init+0xc0>)
 8000a1c:	f002 f9d4 	bl	8002dc8 <HAL_ADC_ConfigChannel>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 8000a26:	f000 fdd5 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	3720      	adds	r7, #32
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	2400379c 	.word	0x2400379c
 8000a38:	58026000 	.word	0x58026000
 8000a3c:	04300002 	.word	0x04300002

08000a40 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b088      	sub	sp, #32
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a48      	ldr	r2, [pc, #288]	; (8000b70 <HAL_ADC_MspInit+0x130>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d12d      	bne.n	8000aae <HAL_ADC_MspInit+0x6e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a52:	4b48      	ldr	r3, [pc, #288]	; (8000b74 <HAL_ADC_MspInit+0x134>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	3301      	adds	r3, #1
 8000a58:	4a46      	ldr	r2, [pc, #280]	; (8000b74 <HAL_ADC_MspInit+0x134>)
 8000a5a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000a5c:	4b45      	ldr	r3, [pc, #276]	; (8000b74 <HAL_ADC_MspInit+0x134>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d10e      	bne.n	8000a82 <HAL_ADC_MspInit+0x42>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000a64:	4b44      	ldr	r3, [pc, #272]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000a66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a6a:	4a43      	ldr	r2, [pc, #268]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000a6c:	f043 0320 	orr.w	r3, r3, #32
 8000a70:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a74:	4b40      	ldr	r3, [pc, #256]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000a76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a7a:	f003 0320 	and.w	r3, r3, #32
 8000a7e:	61fb      	str	r3, [r7, #28]
 8000a80:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	4b3d      	ldr	r3, [pc, #244]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a88:	4a3b      	ldr	r2, [pc, #236]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000a8a:	f043 0301 	orr.w	r3, r3, #1
 8000a8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a92:	4b39      	ldr	r3, [pc, #228]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a98:	f003 0301 	and.w	r3, r3, #1
 8000a9c:	61bb      	str	r3, [r7, #24]
 8000a9e:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA0_C     ------> ADC1_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8000aa0:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8000aa4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000aa8:	f001 fe38 	bl	800271c <HAL_SYSCFG_AnalogSwitchConfig>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000aac:	e05b      	b.n	8000b66 <HAL_ADC_MspInit+0x126>
  else if(adcHandle->Instance==ADC2)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a32      	ldr	r2, [pc, #200]	; (8000b7c <HAL_ADC_MspInit+0x13c>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d12d      	bne.n	8000b14 <HAL_ADC_MspInit+0xd4>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ab8:	4b2e      	ldr	r3, [pc, #184]	; (8000b74 <HAL_ADC_MspInit+0x134>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	3301      	adds	r3, #1
 8000abe:	4a2d      	ldr	r2, [pc, #180]	; (8000b74 <HAL_ADC_MspInit+0x134>)
 8000ac0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ac2:	4b2c      	ldr	r3, [pc, #176]	; (8000b74 <HAL_ADC_MspInit+0x134>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d10e      	bne.n	8000ae8 <HAL_ADC_MspInit+0xa8>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000aca:	4b2b      	ldr	r3, [pc, #172]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000acc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ad0:	4a29      	ldr	r2, [pc, #164]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000ad2:	f043 0320 	orr.w	r3, r3, #32
 8000ad6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ada:	4b27      	ldr	r3, [pc, #156]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000adc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ae0:	f003 0320 	and.w	r3, r3, #32
 8000ae4:	617b      	str	r3, [r7, #20]
 8000ae6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae8:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aee:	4a22      	ldr	r2, [pc, #136]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af8:	4b1f      	ldr	r3, [pc, #124]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8000b06:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8000b0a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8000b0e:	f001 fe05 	bl	800271c <HAL_SYSCFG_AnalogSwitchConfig>
}
 8000b12:	e028      	b.n	8000b66 <HAL_ADC_MspInit+0x126>
  else if(adcHandle->Instance==ADC3)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a19      	ldr	r2, [pc, #100]	; (8000b80 <HAL_ADC_MspInit+0x140>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d123      	bne.n	8000b66 <HAL_ADC_MspInit+0x126>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000b1e:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b24:	4a14      	ldr	r2, [pc, #80]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000b26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b42:	4a0d      	ldr	r2, [pc, #52]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000b44:	f043 0304 	orr.w	r3, r3, #4
 8000b48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <HAL_ADC_MspInit+0x138>)
 8000b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b52:	f003 0304 	and.w	r3, r3, #4
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000b5a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000b5e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000b62:	f001 fddb 	bl	800271c <HAL_SYSCFG_AnalogSwitchConfig>
}
 8000b66:	bf00      	nop
 8000b68:	3720      	adds	r7, #32
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40022000 	.word	0x40022000
 8000b74:	240036bc 	.word	0x240036bc
 8000b78:	58024400 	.word	0x58024400
 8000b7c:	40022100 	.word	0x40022100
 8000b80:	58026000 	.word	0x58026000

08000b84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <MX_DMA_Init+0x3c>)
 8000b8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b90:	4a0b      	ldr	r2, [pc, #44]	; (8000bc0 <MX_DMA_Init+0x3c>)
 8000b92:	f043 0301 	orr.w	r3, r3, #1
 8000b96:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <MX_DMA_Init+0x3c>)
 8000b9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ba0:	f003 0301 	and.w	r3, r3, #1
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2100      	movs	r1, #0
 8000bac:	200b      	movs	r0, #11
 8000bae:	f002 ff44 	bl	8003a3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000bb2:	200b      	movs	r0, #11
 8000bb4:	f002 ff5b 	bl	8003a6e <HAL_NVIC_EnableIRQ>

}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	58024400 	.word	0x58024400

08000bc4 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000bc8:	4b22      	ldr	r3, [pc, #136]	; (8000c54 <MX_ETH_Init+0x90>)
 8000bca:	4a23      	ldr	r2, [pc, #140]	; (8000c58 <MX_ETH_Init+0x94>)
 8000bcc:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 8000bce:	4b21      	ldr	r3, [pc, #132]	; (8000c54 <MX_ETH_Init+0x90>)
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000bd6:	4b1f      	ldr	r3, [pc, #124]	; (8000c54 <MX_ETH_Init+0x90>)
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	2280      	movs	r2, #128	; 0x80
 8000bde:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000be0:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <MX_ETH_Init+0x90>)
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	3302      	adds	r3, #2
 8000be6:	22e1      	movs	r2, #225	; 0xe1
 8000be8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000bea:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <MX_ETH_Init+0x90>)
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	3303      	adds	r3, #3
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000bf4:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <MX_ETH_Init+0x90>)
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000bfe:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <MX_ETH_Init+0x90>)
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	3305      	adds	r3, #5
 8000c04:	2200      	movs	r2, #0
 8000c06:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000c08:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <MX_ETH_Init+0x90>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000c0e:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <MX_ETH_Init+0x90>)
 8000c10:	4a12      	ldr	r2, [pc, #72]	; (8000c5c <MX_ETH_Init+0x98>)
 8000c12:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <MX_ETH_Init+0x90>)
 8000c16:	4a12      	ldr	r2, [pc, #72]	; (8000c60 <MX_ETH_Init+0x9c>)
 8000c18:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <MX_ETH_Init+0x90>)
 8000c1c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000c20:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000c22:	480c      	ldr	r0, [pc, #48]	; (8000c54 <MX_ETH_Init+0x90>)
 8000c24:	f005 f962 	bl	8005eec <HAL_ETH_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000c2e:	f000 fcd1 	bl	80015d4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000c32:	2234      	movs	r2, #52	; 0x34
 8000c34:	2100      	movs	r1, #0
 8000c36:	480b      	ldr	r0, [pc, #44]	; (8000c64 <MX_ETH_Init+0xa0>)
 8000c38:	f00c fd30 	bl	800d69c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000c3c:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <MX_ETH_Init+0xa0>)
 8000c3e:	2221      	movs	r2, #33	; 0x21
 8000c40:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000c42:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <MX_ETH_Init+0xa0>)
 8000c44:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c48:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <MX_ETH_Init+0xa0>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	24003800 	.word	0x24003800
 8000c58:	40028000 	.word	0x40028000
 8000c5c:	24003640 	.word	0x24003640
 8000c60:	240035e0 	.word	0x240035e0
 8000c64:	24003888 	.word	0x24003888

08000c68 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08e      	sub	sp, #56	; 0x38
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a49      	ldr	r2, [pc, #292]	; (8000dac <HAL_ETH_MspInit+0x144>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	f040 808b 	bne.w	8000da2 <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000c8c:	4b48      	ldr	r3, [pc, #288]	; (8000db0 <HAL_ETH_MspInit+0x148>)
 8000c8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c92:	4a47      	ldr	r2, [pc, #284]	; (8000db0 <HAL_ETH_MspInit+0x148>)
 8000c94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c98:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c9c:	4b44      	ldr	r3, [pc, #272]	; (8000db0 <HAL_ETH_MspInit+0x148>)
 8000c9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ca2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ca6:	623b      	str	r3, [r7, #32]
 8000ca8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000caa:	4b41      	ldr	r3, [pc, #260]	; (8000db0 <HAL_ETH_MspInit+0x148>)
 8000cac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cb0:	4a3f      	ldr	r2, [pc, #252]	; (8000db0 <HAL_ETH_MspInit+0x148>)
 8000cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cb6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cba:	4b3d      	ldr	r3, [pc, #244]	; (8000db0 <HAL_ETH_MspInit+0x148>)
 8000cbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cc4:	61fb      	str	r3, [r7, #28]
 8000cc6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000cc8:	4b39      	ldr	r3, [pc, #228]	; (8000db0 <HAL_ETH_MspInit+0x148>)
 8000cca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cce:	4a38      	ldr	r2, [pc, #224]	; (8000db0 <HAL_ETH_MspInit+0x148>)
 8000cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cd8:	4b35      	ldr	r3, [pc, #212]	; (8000db0 <HAL_ETH_MspInit+0x148>)
 8000cda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce2:	61bb      	str	r3, [r7, #24]
 8000ce4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ce6:	4b32      	ldr	r3, [pc, #200]	; (8000db0 <HAL_ETH_MspInit+0x148>)
 8000ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cec:	4a30      	ldr	r2, [pc, #192]	; (8000db0 <HAL_ETH_MspInit+0x148>)
 8000cee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cf6:	4b2e      	ldr	r3, [pc, #184]	; (8000db0 <HAL_ETH_MspInit+0x148>)
 8000cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d00:	617b      	str	r3, [r7, #20]
 8000d02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d04:	4b2a      	ldr	r3, [pc, #168]	; (8000db0 <HAL_ETH_MspInit+0x148>)
 8000d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d0a:	4a29      	ldr	r2, [pc, #164]	; (8000db0 <HAL_ETH_MspInit+0x148>)
 8000d0c:	f043 0304 	orr.w	r3, r3, #4
 8000d10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d14:	4b26      	ldr	r3, [pc, #152]	; (8000db0 <HAL_ETH_MspInit+0x148>)
 8000d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1a:	f003 0304 	and.w	r3, r3, #4
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d22:	4b23      	ldr	r3, [pc, #140]	; (8000db0 <HAL_ETH_MspInit+0x148>)
 8000d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d28:	4a21      	ldr	r2, [pc, #132]	; (8000db0 <HAL_ETH_MspInit+0x148>)
 8000d2a:	f043 0301 	orr.w	r3, r3, #1
 8000d2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d32:	4b1f      	ldr	r3, [pc, #124]	; (8000db0 <HAL_ETH_MspInit+0x148>)
 8000d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d38:	f003 0301 	and.w	r3, r3, #1
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> ETH_CRS_DV
    PA1     ------> ETH_REF_CLK
    PA2     ------> ETH_MDIO
    PC4     ------> ETH_RXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8000d40:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d52:	230b      	movs	r3, #11
 8000d54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4815      	ldr	r0, [pc, #84]	; (8000db4 <HAL_ETH_MspInit+0x14c>)
 8000d5e:	f005 fcdb 	bl	8006718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_4;
 8000d62:	2332      	movs	r3, #50	; 0x32
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d72:	230b      	movs	r3, #11
 8000d74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	480e      	ldr	r0, [pc, #56]	; (8000db8 <HAL_ETH_MspInit+0x150>)
 8000d7e:	f005 fccb 	bl	8006718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1|GPIO_PIN_2;
 8000d82:	2386      	movs	r3, #134	; 0x86
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d92:	230b      	movs	r3, #11
 8000d94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4807      	ldr	r0, [pc, #28]	; (8000dbc <HAL_ETH_MspInit+0x154>)
 8000d9e:	f005 fcbb 	bl	8006718 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000da2:	bf00      	nop
 8000da4:	3738      	adds	r7, #56	; 0x38
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40028000 	.word	0x40028000
 8000db0:	58024400 	.word	0x58024400
 8000db4:	58021800 	.word	0x58021800
 8000db8:	58020800 	.word	0x58020800
 8000dbc:	58020000 	.word	0x58020000

08000dc0 <MX_FMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08e      	sub	sp, #56	; 0x38
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000dc6:	f107 031c 	add.w	r3, r7, #28
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
 8000dd4:	611a      	str	r2, [r3, #16]
 8000dd6:	615a      	str	r2, [r3, #20]
 8000dd8:	619a      	str	r2, [r3, #24]
  FMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000dda:	463b      	mov	r3, r7
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
 8000de8:	615a      	str	r2, [r3, #20]
 8000dea:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000dec:	4b32      	ldr	r3, [pc, #200]	; (8000eb8 <MX_FMC_Init+0xf8>)
 8000dee:	4a33      	ldr	r2, [pc, #204]	; (8000ebc <MX_FMC_Init+0xfc>)
 8000df0:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000df2:	4b31      	ldr	r3, [pc, #196]	; (8000eb8 <MX_FMC_Init+0xf8>)
 8000df4:	4a32      	ldr	r2, [pc, #200]	; (8000ec0 <MX_FMC_Init+0x100>)
 8000df6:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000df8:	4b2f      	ldr	r3, [pc, #188]	; (8000eb8 <MX_FMC_Init+0xf8>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000dfe:	4b2e      	ldr	r3, [pc, #184]	; (8000eb8 <MX_FMC_Init+0xf8>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000e04:	4b2c      	ldr	r3, [pc, #176]	; (8000eb8 <MX_FMC_Init+0xf8>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 8000e0a:	4b2b      	ldr	r3, [pc, #172]	; (8000eb8 <MX_FMC_Init+0xf8>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000e10:	4b29      	ldr	r3, [pc, #164]	; (8000eb8 <MX_FMC_Init+0xf8>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000e16:	4b28      	ldr	r3, [pc, #160]	; (8000eb8 <MX_FMC_Init+0xf8>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000e1c:	4b26      	ldr	r3, [pc, #152]	; (8000eb8 <MX_FMC_Init+0xf8>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000e22:	4b25      	ldr	r3, [pc, #148]	; (8000eb8 <MX_FMC_Init+0xf8>)
 8000e24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e28:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000e2a:	4b23      	ldr	r3, [pc, #140]	; (8000eb8 <MX_FMC_Init+0xf8>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_ENABLE;
 8000e30:	4b21      	ldr	r3, [pc, #132]	; (8000eb8 <MX_FMC_Init+0xf8>)
 8000e32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e36:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000e38:	4b1f      	ldr	r3, [pc, #124]	; (8000eb8 <MX_FMC_Init+0xf8>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000e3e:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <MX_FMC_Init+0xf8>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000e44:	4b1c      	ldr	r3, [pc, #112]	; (8000eb8 <MX_FMC_Init+0xf8>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000e4a:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <MX_FMC_Init+0xf8>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000e50:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <MX_FMC_Init+0xf8>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 8;
 8000e56:	2308      	movs	r3, #8
 8000e58:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000e5a:	230f      	movs	r3, #15
 8000e5c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 10;
 8000e5e:	230a      	movs	r3, #10
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 5;
 8000e62:	2305      	movs	r3, #5
 8000e64:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000e66:	2310      	movs	r3, #16
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000e6a:	2311      	movs	r3, #17
 8000e6c:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000e72:	2308      	movs	r3, #8
 8000e74:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000e76:	230f      	movs	r3, #15
 8000e78:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 10;
 8000e7a:	230a      	movs	r3, #10
 8000e7c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 5;
 8000e7e:	2305      	movs	r3, #5
 8000e80:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000e82:	2310      	movs	r3, #16
 8000e84:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000e86:	2311      	movs	r3, #17
 8000e88:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FMC_ACCESS_MODE_A;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000e8e:	463a      	mov	r2, r7
 8000e90:	f107 031c 	add.w	r3, r7, #28
 8000e94:	4619      	mov	r1, r3
 8000e96:	4808      	ldr	r0, [pc, #32]	; (8000eb8 <MX_FMC_Init+0xf8>)
 8000e98:	f00a f828 	bl	800aeec <HAL_SRAM_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_FMC_Init+0xe6>
  {
    Error_Handler( );
 8000ea2:	f000 fb97 	bl	80015d4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 8000ea6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000eaa:	f001 fc4d 	bl	8002748 <HAL_SetFMCMemorySwappingConfig>
  /* USER CODE END FMC_Init 2 */
}
 8000eae:	bf00      	nop
 8000eb0:	3738      	adds	r7, #56	; 0x38
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	240038bc 	.word	0x240038bc
 8000ebc:	52004000 	.word	0x52004000
 8000ec0:	52004104 	.word	0x52004104

08000ec4 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b0b6      	sub	sp, #216	; 0xd8
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eca:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
 8000ed8:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000eda:	4b39      	ldr	r3, [pc, #228]	; (8000fc0 <HAL_FMC_MspInit+0xfc>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d169      	bne.n	8000fb6 <HAL_FMC_MspInit+0xf2>
    return;
  }
  FMC_Initialized = 1;
 8000ee2:	4b37      	ldr	r3, [pc, #220]	; (8000fc0 <HAL_FMC_MspInit+0xfc>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ee8:	f107 0308 	add.w	r3, r7, #8
 8000eec:	22bc      	movs	r2, #188	; 0xbc
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f00c fbd3 	bl	800d69c <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000ef6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000efa:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8000efc:	2300      	movs	r3, #0
 8000efe:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f00:	f107 0308 	add.w	r3, r7, #8
 8000f04:	4618      	mov	r0, r3
 8000f06:	f006 fe29 	bl	8007b5c <HAL_RCCEx_PeriphCLKConfig>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <HAL_FMC_MspInit+0x50>
    {
      Error_Handler();
 8000f10:	f000 fb60 	bl	80015d4 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000f14:	4b2b      	ldr	r3, [pc, #172]	; (8000fc4 <HAL_FMC_MspInit+0x100>)
 8000f16:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f1a:	4a2a      	ldr	r2, [pc, #168]	; (8000fc4 <HAL_FMC_MspInit+0x100>)
 8000f1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f20:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000f24:	4b27      	ldr	r3, [pc, #156]	; (8000fc4 <HAL_FMC_MspInit+0x100>)
 8000f26:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE10   ------> FMC_D7
  PE9   ------> FMC_D6
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4
 8000f32:	f24c 03b3 	movw	r3, #49331	; 0xc0b3
 8000f36:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f46:	2303      	movs	r3, #3
 8000f48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f4c:	230c      	movs	r3, #12
 8000f4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f52:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f56:	4619      	mov	r1, r3
 8000f58:	481b      	ldr	r0, [pc, #108]	; (8000fc8 <HAL_FMC_MspInit+0x104>)
 8000f5a:	f005 fbdd 	bl	8006718 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f64:	2302      	movs	r3, #2
 8000f66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f70:	2303      	movs	r3, #3
 8000f72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f76:	230c      	movs	r3, #12
 8000f78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f7c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f80:	4619      	mov	r1, r3
 8000f82:	4812      	ldr	r0, [pc, #72]	; (8000fcc <HAL_FMC_MspInit+0x108>)
 8000f84:	f005 fbc8 	bl	8006718 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_9;
 8000f88:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000f8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000fa2:	230c      	movs	r3, #12
 8000fa4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fa8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000fac:	4619      	mov	r1, r3
 8000fae:	4808      	ldr	r0, [pc, #32]	; (8000fd0 <HAL_FMC_MspInit+0x10c>)
 8000fb0:	f005 fbb2 	bl	8006718 <HAL_GPIO_Init>
 8000fb4:	e000      	b.n	8000fb8 <HAL_FMC_MspInit+0xf4>
    return;
 8000fb6:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000fb8:	37d8      	adds	r7, #216	; 0xd8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	240036c0 	.word	0x240036c0
 8000fc4:	58024400 	.word	0x58024400
 8000fc8:	58020c00 	.word	0x58020c00
 8000fcc:	58021400 	.word	0x58021400
 8000fd0:	58021000 	.word	0x58021000

08000fd4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000fdc:	f7ff ff72 	bl	8000ec4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08e      	sub	sp, #56	; 0x38
 8000fec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffe:	4b8f      	ldr	r3, [pc, #572]	; (800123c <MX_GPIO_Init+0x254>)
 8001000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001004:	4a8d      	ldr	r2, [pc, #564]	; (800123c <MX_GPIO_Init+0x254>)
 8001006:	f043 0302 	orr.w	r3, r3, #2
 800100a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800100e:	4b8b      	ldr	r3, [pc, #556]	; (800123c <MX_GPIO_Init+0x254>)
 8001010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001014:	f003 0302 	and.w	r3, r3, #2
 8001018:	623b      	str	r3, [r7, #32]
 800101a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800101c:	4b87      	ldr	r3, [pc, #540]	; (800123c <MX_GPIO_Init+0x254>)
 800101e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001022:	4a86      	ldr	r2, [pc, #536]	; (800123c <MX_GPIO_Init+0x254>)
 8001024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001028:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800102c:	4b83      	ldr	r3, [pc, #524]	; (800123c <MX_GPIO_Init+0x254>)
 800102e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001036:	61fb      	str	r3, [r7, #28]
 8001038:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800103a:	4b80      	ldr	r3, [pc, #512]	; (800123c <MX_GPIO_Init+0x254>)
 800103c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001040:	4a7e      	ldr	r2, [pc, #504]	; (800123c <MX_GPIO_Init+0x254>)
 8001042:	f043 0308 	orr.w	r3, r3, #8
 8001046:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800104a:	4b7c      	ldr	r3, [pc, #496]	; (800123c <MX_GPIO_Init+0x254>)
 800104c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001050:	f003 0308 	and.w	r3, r3, #8
 8001054:	61bb      	str	r3, [r7, #24]
 8001056:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001058:	4b78      	ldr	r3, [pc, #480]	; (800123c <MX_GPIO_Init+0x254>)
 800105a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800105e:	4a77      	ldr	r2, [pc, #476]	; (800123c <MX_GPIO_Init+0x254>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001068:	4b74      	ldr	r3, [pc, #464]	; (800123c <MX_GPIO_Init+0x254>)
 800106a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001076:	4b71      	ldr	r3, [pc, #452]	; (800123c <MX_GPIO_Init+0x254>)
 8001078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800107c:	4a6f      	ldr	r2, [pc, #444]	; (800123c <MX_GPIO_Init+0x254>)
 800107e:	f043 0310 	orr.w	r3, r3, #16
 8001082:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001086:	4b6d      	ldr	r3, [pc, #436]	; (800123c <MX_GPIO_Init+0x254>)
 8001088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800108c:	f003 0310 	and.w	r3, r3, #16
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001094:	4b69      	ldr	r3, [pc, #420]	; (800123c <MX_GPIO_Init+0x254>)
 8001096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800109a:	4a68      	ldr	r2, [pc, #416]	; (800123c <MX_GPIO_Init+0x254>)
 800109c:	f043 0304 	orr.w	r3, r3, #4
 80010a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010a4:	4b65      	ldr	r3, [pc, #404]	; (800123c <MX_GPIO_Init+0x254>)
 80010a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010aa:	f003 0304 	and.w	r3, r3, #4
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010b2:	4b62      	ldr	r3, [pc, #392]	; (800123c <MX_GPIO_Init+0x254>)
 80010b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b8:	4a60      	ldr	r2, [pc, #384]	; (800123c <MX_GPIO_Init+0x254>)
 80010ba:	f043 0320 	orr.w	r3, r3, #32
 80010be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010c2:	4b5e      	ldr	r3, [pc, #376]	; (800123c <MX_GPIO_Init+0x254>)
 80010c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c8:	f003 0320 	and.w	r3, r3, #32
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010d0:	4b5a      	ldr	r3, [pc, #360]	; (800123c <MX_GPIO_Init+0x254>)
 80010d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d6:	4a59      	ldr	r2, [pc, #356]	; (800123c <MX_GPIO_Init+0x254>)
 80010d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e0:	4b56      	ldr	r3, [pc, #344]	; (800123c <MX_GPIO_Init+0x254>)
 80010e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RESET_GPIO_Port, OLED_RESET_Pin, GPIO_PIN_RESET);
 80010ee:	2200      	movs	r2, #0
 80010f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f4:	4852      	ldr	r0, [pc, #328]	; (8001240 <MX_GPIO_Init+0x258>)
 80010f6:	f005 fcbf 	bl	8006a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MEMS_Pin|CIS_RS_Pin, GPIO_PIN_RESET);
 80010fa:	2200      	movs	r2, #0
 80010fc:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8001100:	4850      	ldr	r0, [pc, #320]	; (8001244 <MX_GPIO_Init+0x25c>)
 8001102:	f005 fcb9 	bl	8006a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DAC_FLT_Pin|DAC_XSMT_Pin, GPIO_PIN_RESET);
 8001106:	2200      	movs	r2, #0
 8001108:	f242 0104 	movw	r1, #8196	; 0x2004
 800110c:	484e      	ldr	r0, [pc, #312]	; (8001248 <MX_GPIO_Init+0x260>)
 800110e:	f005 fcb3 	bl	8006a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, EN_12V_Pin|EN_5V_Pin, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	2124      	movs	r1, #36	; 0x24
 8001116:	484d      	ldr	r0, [pc, #308]	; (800124c <MX_GPIO_Init+0x264>)
 8001118:	f005 fcae 	bl	8006a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DAC_FMT_GPIO_Port, DAC_FMT_Pin, GPIO_PIN_RESET);
 800111c:	2200      	movs	r2, #0
 800111e:	2140      	movs	r1, #64	; 0x40
 8001120:	484b      	ldr	r0, [pc, #300]	; (8001250 <MX_GPIO_Init+0x268>)
 8001122:	f005 fca9 	bl	8006a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_Pin|DAC_DEMP_Pin, GPIO_PIN_RESET);
 8001126:	2200      	movs	r2, #0
 8001128:	2148      	movs	r1, #72	; 0x48
 800112a:	484a      	ldr	r0, [pc, #296]	; (8001254 <MX_GPIO_Init+0x26c>)
 800112c:	f005 fca4 	bl	8006a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RESET_Pin;
 8001130:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001136:	2301      	movs	r3, #1
 8001138:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	2300      	movs	r3, #0
 8001140:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OLED_RESET_GPIO_Port, &GPIO_InitStruct);
 8001142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001146:	4619      	mov	r1, r3
 8001148:	483d      	ldr	r0, [pc, #244]	; (8001240 <MX_GPIO_Init+0x258>)
 800114a:	f005 fae5 	bl	8006718 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MEMS_Pin|CIS_RS_Pin;
 800114e:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001154:	2301      	movs	r3, #1
 8001156:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2300      	movs	r3, #0
 800115e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001164:	4619      	mov	r1, r3
 8001166:	4837      	ldr	r0, [pc, #220]	; (8001244 <MX_GPIO_Init+0x25c>)
 8001168:	f005 fad6 	bl	8006718 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DAC_FLT_Pin|DAC_XSMT_Pin;
 800116c:	f242 0304 	movw	r3, #8196	; 0x2004
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001172:	2301      	movs	r3, #1
 8001174:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001182:	4619      	mov	r1, r3
 8001184:	4830      	ldr	r0, [pc, #192]	; (8001248 <MX_GPIO_Init+0x260>)
 8001186:	f005 fac7 	bl	8006718 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = EN_12V_Pin|EN_5V_Pin;
 800118a:	2324      	movs	r3, #36	; 0x24
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118e:	2301      	movs	r3, #1
 8001190:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001196:	2300      	movs	r3, #0
 8001198:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800119a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119e:	4619      	mov	r1, r3
 80011a0:	482a      	ldr	r0, [pc, #168]	; (800124c <MX_GPIO_Init+0x264>)
 80011a2:	f005 fab9 	bl	8006718 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_FMT_Pin;
 80011a6:	2340      	movs	r3, #64	; 0x40
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011aa:	2301      	movs	r3, #1
 80011ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b2:	2300      	movs	r3, #0
 80011b4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DAC_FMT_GPIO_Port, &GPIO_InitStruct);
 80011b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ba:	4619      	mov	r1, r3
 80011bc:	4824      	ldr	r0, [pc, #144]	; (8001250 <MX_GPIO_Init+0x268>)
 80011be:	f005 faab 	bl	8006718 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT_Pin;
 80011c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011c8:	4b23      	ldr	r3, [pc, #140]	; (8001258 <MX_GPIO_Init+0x270>)
 80011ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MEMS_INT_GPIO_Port, &GPIO_InitStruct);
 80011d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d4:	4619      	mov	r1, r3
 80011d6:	4821      	ldr	r0, [pc, #132]	; (800125c <MX_GPIO_Init+0x274>)
 80011d8:	f005 fa9e 	bl	8006718 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = SW_4_Pin|SW_5_Pin|SW_1_Pin|SW_3_Pin
 80011dc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
                          |SW_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011e2:	4b1d      	ldr	r3, [pc, #116]	; (8001258 <MX_GPIO_Init+0x270>)
 80011e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ee:	4619      	mov	r1, r3
 80011f0:	481b      	ldr	r0, [pc, #108]	; (8001260 <MX_GPIO_Init+0x278>)
 80011f2:	f005 fa91 	bl	8006718 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = LED_Pin|DAC_DEMP_Pin;
 80011f6:	2348      	movs	r3, #72	; 0x48
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fa:	2301      	movs	r3, #1
 80011fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120a:	4619      	mov	r1, r3
 800120c:	4811      	ldr	r0, [pc, #68]	; (8001254 <MX_GPIO_Init+0x26c>)
 800120e:	f005 fa83 	bl	8006718 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 7, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2107      	movs	r1, #7
 8001216:	2017      	movs	r0, #23
 8001218:	f002 fc0f 	bl	8003a3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800121c:	2017      	movs	r0, #23
 800121e:	f002 fc26 	bl	8003a6e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2107      	movs	r1, #7
 8001226:	2028      	movs	r0, #40	; 0x28
 8001228:	f002 fc07 	bl	8003a3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800122c:	2028      	movs	r0, #40	; 0x28
 800122e:	f002 fc1e 	bl	8003a6e <HAL_NVIC_EnableIRQ>

}
 8001232:	bf00      	nop
 8001234:	3738      	adds	r7, #56	; 0x38
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	58024400 	.word	0x58024400
 8001240:	58020400 	.word	0x58020400
 8001244:	58020000 	.word	0x58020000
 8001248:	58020800 	.word	0x58020800
 800124c:	58021800 	.word	0x58021800
 8001250:	58021400 	.word	0x58021400
 8001254:	58021c00 	.word	0x58021c00
 8001258:	11110000 	.word	0x11110000
 800125c:	58020c00 	.word	0x58020c00
 8001260:	58021000 	.word	0x58021000

08001264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af02      	add	r7, sp, #8
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800126a:	4b7c      	ldr	r3, [pc, #496]	; (800145c <main+0x1f8>)
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d11b      	bne.n	80012ae <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001276:	f3bf 8f4f 	dsb	sy
}
 800127a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800127c:	f3bf 8f6f 	isb	sy
}
 8001280:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001282:	4b76      	ldr	r3, [pc, #472]	; (800145c <main+0x1f8>)
 8001284:	2200      	movs	r2, #0
 8001286:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800128a:	f3bf 8f4f 	dsb	sy
}
 800128e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001290:	f3bf 8f6f 	isb	sy
}
 8001294:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001296:	4b71      	ldr	r3, [pc, #452]	; (800145c <main+0x1f8>)
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	4a70      	ldr	r2, [pc, #448]	; (800145c <main+0x1f8>)
 800129c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012a2:	f3bf 8f4f 	dsb	sy
}
 80012a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012a8:	f3bf 8f6f 	isb	sy
}
 80012ac:	e000      	b.n	80012b0 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80012ae:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80012b0:	4b6a      	ldr	r3, [pc, #424]	; (800145c <main+0x1f8>)
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d138      	bne.n	800132e <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80012bc:	4b67      	ldr	r3, [pc, #412]	; (800145c <main+0x1f8>)
 80012be:	2200      	movs	r2, #0
 80012c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80012c4:	f3bf 8f4f 	dsb	sy
}
 80012c8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80012ca:	4b64      	ldr	r3, [pc, #400]	; (800145c <main+0x1f8>)
 80012cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012d0:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	0b5b      	lsrs	r3, r3, #13
 80012d6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80012da:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	08db      	lsrs	r3, r3, #3
 80012e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012e4:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	015a      	lsls	r2, r3, #5
 80012ea:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80012ee:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80012f0:	68ba      	ldr	r2, [r7, #8]
 80012f2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80012f4:	4959      	ldr	r1, [pc, #356]	; (800145c <main+0x1f8>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	1e5a      	subs	r2, r3, #1
 8001300:	60ba      	str	r2, [r7, #8]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1ef      	bne.n	80012e6 <main+0x82>
    } while(sets-- != 0U);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	1e5a      	subs	r2, r3, #1
 800130a:	60fa      	str	r2, [r7, #12]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d1e5      	bne.n	80012dc <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8001310:	f3bf 8f4f 	dsb	sy
}
 8001314:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001316:	4b51      	ldr	r3, [pc, #324]	; (800145c <main+0x1f8>)
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	4a50      	ldr	r2, [pc, #320]	; (800145c <main+0x1f8>)
 800131c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001320:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001322:	f3bf 8f4f 	dsb	sy
}
 8001326:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001328:	f3bf 8f6f 	isb	sy
}
 800132c:	e000      	b.n	8001330 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800132e:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8001330:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001334:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001336:	bf00      	nop
 8001338:	4b49      	ldr	r3, [pc, #292]	; (8001460 <main+0x1fc>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d004      	beq.n	800134e <main+0xea>
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	1e5a      	subs	r2, r3, #1
 8001348:	617a      	str	r2, [r7, #20]
 800134a:	2b00      	cmp	r3, #0
 800134c:	dcf4      	bgt.n	8001338 <main+0xd4>
  if ( timeout < 0 )
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	2b00      	cmp	r3, #0
 8001352:	da01      	bge.n	8001358 <main+0xf4>
  {
  Error_Handler();
 8001354:	f000 f93e 	bl	80015d4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001358:	f001 f90a 	bl	8002570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800135c:	f000 f888 	bl	8001470 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001360:	f000 f90c 	bl	800157c <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001364:	4b3e      	ldr	r3, [pc, #248]	; (8001460 <main+0x1fc>)
 8001366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800136a:	4a3d      	ldr	r2, [pc, #244]	; (8001460 <main+0x1fc>)
 800136c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001370:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001374:	4b3a      	ldr	r3, [pc, #232]	; (8001460 <main+0x1fc>)
 8001376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800137a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001382:	2000      	movs	r0, #0
 8001384:	f005 fbc6 	bl	8006b14 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001388:	2100      	movs	r1, #0
 800138a:	2000      	movs	r0, #0
 800138c:	f005 fbdc 	bl	8006b48 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001390:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001394:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001396:	bf00      	nop
 8001398:	4b31      	ldr	r3, [pc, #196]	; (8001460 <main+0x1fc>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d104      	bne.n	80013ae <main+0x14a>
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	1e5a      	subs	r2, r3, #1
 80013a8:	617a      	str	r2, [r7, #20]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	dcf4      	bgt.n	8001398 <main+0x134>
if ( timeout < 0 )
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	da01      	bge.n	80013b8 <main+0x154>
{
Error_Handler();
 80013b4:	f000 f90e 	bl	80015d4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013b8:	f7ff fe16 	bl	8000fe8 <MX_GPIO_Init>
  MX_DMA_Init();
 80013bc:	f7ff fbe2 	bl	8000b84 <MX_DMA_Init>
  MX_ADC1_Init();
 80013c0:	f7ff f9fc 	bl	80007bc <MX_ADC1_Init>
  MX_ADC2_Init();
 80013c4:	f7ff fa70 	bl	80008a8 <MX_ADC2_Init>
  MX_ADC3_Init();
 80013c8:	f7ff fad4 	bl	8000974 <MX_ADC3_Init>
  MX_FMC_Init();
 80013cc:	f7ff fcf8 	bl	8000dc0 <MX_FMC_Init>
  MX_SAI1_Init();
 80013d0:	f000 f954 	bl	800167c <MX_SAI1_Init>
  MX_ETH_Init();
 80013d4:	f7ff fbf6 	bl	8000bc4 <MX_ETH_Init>
  MX_SPI2_Init();
 80013d8:	f000 fa44 	bl	8001864 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80013dc:	f000 ffee 	bl	80023bc <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80013e0:	f000 fc60 	bl	8001ca4 <MX_TIM1_Init>
  MX_TIM3_Init();
 80013e4:	f000 fcee 	bl	8001dc4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80013e8:	f000 fd46 	bl	8001e78 <MX_TIM4_Init>
  MX_TIM5_Init();
 80013ec:	f000 fd9e 	bl	8001f2c <MX_TIM5_Init>
  MX_TIM8_Init();
 80013f0:	f000 fdf6 	bl	8001fe0 <MX_TIM8_Init>
  MX_RNG_Init();
 80013f4:	f000 f8f4 	bl	80015e0 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(EN_12V_GPIO_Port, EN_12V_Pin, GPIO_PIN_SET);
 80013f8:	2201      	movs	r2, #1
 80013fa:	2120      	movs	r1, #32
 80013fc:	4819      	ldr	r0, [pc, #100]	; (8001464 <main+0x200>)
 80013fe:	f005 fb3b 	bl	8006a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN_5V_GPIO_Port, EN_5V_Pin, GPIO_PIN_SET);
 8001402:	2201      	movs	r2, #1
 8001404:	2104      	movs	r1, #4
 8001406:	4817      	ldr	r0, [pc, #92]	; (8001464 <main+0x200>)
 8001408:	f005 fb36 	bl	8006a78 <HAL_GPIO_WritePin>

//  int8_t timeText[] = {'1', '2', ':', '3', '5'};
//  uint32_t framecount = 0;

  ssd1362_init();
 800140c:	f00c f898 	bl	800d540 <ssd1362_init>

  ssd1362_clearBuffer();
 8001410:	f00c f836 	bl	800d480 <ssd1362_clearBuffer>
  ssd1362_drawHLine(0, 5, 256,0xF, 0);
 8001414:	2300      	movs	r3, #0
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	230f      	movs	r3, #15
 800141a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800141e:	2105      	movs	r1, #5
 8001420:	2000      	movs	r0, #0
 8001422:	f00b fe9b 	bl	800d15c <ssd1362_drawHLine>
  ssd1362_drawHLine(0, 40, 256,0xF, 0);
 8001426:	2300      	movs	r3, #0
 8001428:	9300      	str	r3, [sp, #0]
 800142a:	230f      	movs	r3, #15
 800142c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001430:	2128      	movs	r1, #40	; 0x28
 8001432:	2000      	movs	r0, #0
 8001434:	f00b fe92 	bl	800d15c <ssd1362_drawHLine>
  ssd1362_drawString(16, 15, (int8_t *)"Hello Spectral Sound Scanner", 0xF, 16);
 8001438:	2310      	movs	r3, #16
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	230f      	movs	r3, #15
 800143e:	4a0a      	ldr	r2, [pc, #40]	; (8001468 <main+0x204>)
 8001440:	210f      	movs	r1, #15
 8001442:	2010      	movs	r0, #16
 8001444:	f00b ff7b 	bl	800d33e <ssd1362_drawString>
  ssd1362_writeFullBuffer();
 8001448:	f00c f848 	bl	800d4dc <ssd1362_writeFullBuffer>
//	  ssd1362_drawString(0, 40, (int8_t *)"SSS CIS", 0xF, 16);
//	  ssd1362_drawString(84, 40, (int8_t *)"52.1%", 0xF, 16);
//	  ssd1362_writeFullBuffer();
//	  HAL_Delay(1);

	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800144c:	2140      	movs	r1, #64	; 0x40
 800144e:	4807      	ldr	r0, [pc, #28]	; (800146c <main+0x208>)
 8001450:	f005 fb2b 	bl	8006aaa <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8001454:	2064      	movs	r0, #100	; 0x64
 8001456:	f001 f91d 	bl	8002694 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800145a:	e7f7      	b.n	800144c <main+0x1e8>
 800145c:	e000ed00 	.word	0xe000ed00
 8001460:	58024400 	.word	0x58024400
 8001464:	58021800 	.word	0x58021800
 8001468:	0800ff30 	.word	0x0800ff30
 800146c:	58021c00 	.word	0x58021c00

08001470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b09c      	sub	sp, #112	; 0x70
 8001474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147a:	224c      	movs	r2, #76	; 0x4c
 800147c:	2100      	movs	r1, #0
 800147e:	4618      	mov	r0, r3
 8001480:	f00c f90c 	bl	800d69c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001484:	1d3b      	adds	r3, r7, #4
 8001486:	2220      	movs	r2, #32
 8001488:	2100      	movs	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f00c f906 	bl	800d69c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001490:	2004      	movs	r0, #4
 8001492:	f005 fb6d 	bl	8006b70 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001496:	2300      	movs	r3, #0
 8001498:	603b      	str	r3, [r7, #0]
 800149a:	4b35      	ldr	r3, [pc, #212]	; (8001570 <SystemClock_Config+0x100>)
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	4a34      	ldr	r2, [pc, #208]	; (8001570 <SystemClock_Config+0x100>)
 80014a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014a4:	6193      	str	r3, [r2, #24]
 80014a6:	4b32      	ldr	r3, [pc, #200]	; (8001570 <SystemClock_Config+0x100>)
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	4b30      	ldr	r3, [pc, #192]	; (8001574 <SystemClock_Config+0x104>)
 80014b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b4:	4a2f      	ldr	r2, [pc, #188]	; (8001574 <SystemClock_Config+0x104>)
 80014b6:	f043 0301 	orr.w	r3, r3, #1
 80014ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80014bc:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <SystemClock_Config+0x104>)
 80014be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	603b      	str	r3, [r7, #0]
 80014c6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80014c8:	bf00      	nop
 80014ca:	4b29      	ldr	r3, [pc, #164]	; (8001570 <SystemClock_Config+0x100>)
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014d6:	d1f8      	bne.n	80014ca <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80014d8:	4b27      	ldr	r3, [pc, #156]	; (8001578 <SystemClock_Config+0x108>)
 80014da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014dc:	f023 0303 	bic.w	r3, r3, #3
 80014e0:	4a25      	ldr	r2, [pc, #148]	; (8001578 <SystemClock_Config+0x108>)
 80014e2:	f043 0302 	orr.w	r3, r3, #2
 80014e6:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80014e8:	2321      	movs	r3, #33	; 0x21
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80014f2:	2301      	movs	r3, #1
 80014f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014f6:	2302      	movs	r3, #2
 80014f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014fa:	2302      	movs	r3, #2
 80014fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80014fe:	2305      	movs	r3, #5
 8001500:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001502:	23c0      	movs	r3, #192	; 0xc0
 8001504:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001506:	2302      	movs	r3, #2
 8001508:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800150a:	2308      	movs	r3, #8
 800150c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 8;
 800150e:	2308      	movs	r3, #8
 8001510:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001512:	2308      	movs	r3, #8
 8001514:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001516:	2300      	movs	r3, #0
 8001518:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800151e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001522:	4618      	mov	r0, r3
 8001524:	f005 fb7e 	bl	8006c24 <HAL_RCC_OscConfig>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800152e:	f000 f851 	bl	80015d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001532:	233f      	movs	r3, #63	; 0x3f
 8001534:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001536:	2303      	movs	r3, #3
 8001538:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800153e:	2308      	movs	r3, #8
 8001540:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001542:	2340      	movs	r3, #64	; 0x40
 8001544:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001546:	2340      	movs	r3, #64	; 0x40
 8001548:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800154a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800154e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001550:	2340      	movs	r3, #64	; 0x40
 8001552:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001554:	1d3b      	adds	r3, r7, #4
 8001556:	2104      	movs	r1, #4
 8001558:	4618      	mov	r0, r3
 800155a:	f005 ff73 	bl	8007444 <HAL_RCC_ClockConfig>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8001564:	f000 f836 	bl	80015d4 <Error_Handler>
  }
}
 8001568:	bf00      	nop
 800156a:	3770      	adds	r7, #112	; 0x70
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	58024800 	.word	0x58024800
 8001574:	58000400 	.word	0x58000400
 8001578:	58024400 	.word	0x58024400

0800157c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b0b0      	sub	sp, #192	; 0xc0
 8001580:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	22bc      	movs	r2, #188	; 0xbc
 8001586:	2100      	movs	r1, #0
 8001588:	4618      	mov	r0, r3
 800158a:	f00c f887 	bl	800d69c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800158e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001592:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 6;
 8001594:	2306      	movs	r3, #6
 8001596:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 192;
 8001598:	23c0      	movs	r3, #192	; 0xc0
 800159a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 10;
 800159c:	230a      	movs	r3, #10
 800159e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 10;
 80015a0:	230a      	movs	r3, #10
 80015a2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 10;
 80015a4:	230a      	movs	r3, #10
 80015a6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80015a8:	2380      	movs	r3, #128	; 0x80
 80015aa:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80015ac:	2300      	movs	r3, #0
 80015ae:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	4618      	mov	r0, r3
 80015be:	f006 facd 	bl	8007b5c <HAL_RCCEx_PeriphCLKConfig>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 80015c8:	f000 f804 	bl	80015d4 <Error_Handler>
  }
}
 80015cc:	bf00      	nop
 80015ce:	37c0      	adds	r7, #192	; 0xc0
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80015d8:	b672      	cpsid	i
}
 80015da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015dc:	e7fe      	b.n	80015dc <Error_Handler+0x8>
	...

080015e0 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80015e4:	4b07      	ldr	r3, [pc, #28]	; (8001604 <MX_RNG_Init+0x24>)
 80015e6:	4a08      	ldr	r2, [pc, #32]	; (8001608 <MX_RNG_Init+0x28>)
 80015e8:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <MX_RNG_Init+0x24>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80015f0:	4804      	ldr	r0, [pc, #16]	; (8001604 <MX_RNG_Init+0x24>)
 80015f2:	f008 fc39 	bl	8009e68 <HAL_RNG_Init>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80015fc:	f7ff ffea 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}
 8001604:	24003908 	.word	0x24003908
 8001608:	48021800 	.word	0x48021800

0800160c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b0b2      	sub	sp, #200	; 0xc8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001614:	f107 030c 	add.w	r3, r7, #12
 8001618:	22bc      	movs	r2, #188	; 0xbc
 800161a:	2100      	movs	r1, #0
 800161c:	4618      	mov	r0, r3
 800161e:	f00c f83d 	bl	800d69c <memset>
  if(rngHandle->Instance==RNG)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a13      	ldr	r2, [pc, #76]	; (8001674 <HAL_RNG_MspInit+0x68>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d11e      	bne.n	800166a <HAL_RNG_MspInit+0x5e>
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800162c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001630:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8001632:	2300      	movs	r3, #0
 8001634:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	4618      	mov	r0, r3
 800163e:	f006 fa8d 	bl	8007b5c <HAL_RCCEx_PeriphCLKConfig>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001648:	f7ff ffc4 	bl	80015d4 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800164c:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <HAL_RNG_MspInit+0x6c>)
 800164e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001652:	4a09      	ldr	r2, [pc, #36]	; (8001678 <HAL_RNG_MspInit+0x6c>)
 8001654:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001658:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_RNG_MspInit+0x6c>)
 800165e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800166a:	bf00      	nop
 800166c:	37c8      	adds	r7, #200	; 0xc8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	48021800 	.word	0x48021800
 8001678:	58024400 	.word	0x58024400

0800167c <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
DMA_HandleTypeDef hdma_sai1_a;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001680:	4b17      	ldr	r3, [pc, #92]	; (80016e0 <MX_SAI1_Init+0x64>)
 8001682:	4a18      	ldr	r2, [pc, #96]	; (80016e4 <MX_SAI1_Init+0x68>)
 8001684:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001686:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <MX_SAI1_Init+0x64>)
 8001688:	2200      	movs	r2, #0
 800168a:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800168c:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <MX_SAI1_Init+0x64>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001692:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <MX_SAI1_Init+0x64>)
 8001694:	2200      	movs	r2, #0
 8001696:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001698:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <MX_SAI1_Init+0x64>)
 800169a:	2200      	movs	r2, #0
 800169c:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800169e:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <MX_SAI1_Init+0x64>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 80016a4:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <MX_SAI1_Init+0x64>)
 80016a6:	f64a 4244 	movw	r2, #44100	; 0xac44
 80016aa:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80016ac:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <MX_SAI1_Init+0x64>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80016b2:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <MX_SAI1_Init+0x64>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80016b8:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <MX_SAI1_Init+0x64>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80016be:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <MX_SAI1_Init+0x64>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_PCM_SHORT, SAI_PROTOCOL_DATASIZE_16BIT, 1) != HAL_OK)
 80016c4:	2301      	movs	r3, #1
 80016c6:	2200      	movs	r2, #0
 80016c8:	2104      	movs	r1, #4
 80016ca:	4805      	ldr	r0, [pc, #20]	; (80016e0 <MX_SAI1_Init+0x64>)
 80016cc:	f008 fc27 	bl	8009f1e <HAL_SAI_InitProtocol>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 80016d6:	f7ff ff7d 	bl	80015d4 <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	24003994 	.word	0x24003994
 80016e4:	40015804 	.word	0x40015804

080016e8 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b0b8      	sub	sp, #224	; 0xe0
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016f0:	f107 0310 	add.w	r3, r7, #16
 80016f4:	22bc      	movs	r2, #188	; 0xbc
 80016f6:	2100      	movs	r1, #0
 80016f8:	4618      	mov	r0, r3
 80016fa:	f00b ffcf 	bl	800d69c <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a51      	ldr	r2, [pc, #324]	; (8001848 <HAL_SAI_MspInit+0x160>)
 8001704:	4293      	cmp	r3, r2
 8001706:	f040 809b 	bne.w	8001840 <HAL_SAI_MspInit+0x158>
    {
    /* SAI1 clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800170a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800170e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8001710:	2300      	movs	r3, #0
 8001712:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	4618      	mov	r0, r3
 800171a:	f006 fa1f 	bl	8007b5c <HAL_RCCEx_PeriphCLKConfig>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <HAL_SAI_MspInit+0x40>
    {
      Error_Handler();
 8001724:	f7ff ff56 	bl	80015d4 <Error_Handler>
    }

    if (SAI1_client == 0)
 8001728:	4b48      	ldr	r3, [pc, #288]	; (800184c <HAL_SAI_MspInit+0x164>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d116      	bne.n	800175e <HAL_SAI_MspInit+0x76>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001730:	4b47      	ldr	r3, [pc, #284]	; (8001850 <HAL_SAI_MspInit+0x168>)
 8001732:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001736:	4a46      	ldr	r2, [pc, #280]	; (8001850 <HAL_SAI_MspInit+0x168>)
 8001738:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800173c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001740:	4b43      	ldr	r3, [pc, #268]	; (8001850 <HAL_SAI_MspInit+0x168>)
 8001742:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 800174e:	2200      	movs	r2, #0
 8001750:	2100      	movs	r1, #0
 8001752:	2057      	movs	r0, #87	; 0x57
 8001754:	f002 f971 	bl	8003a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 8001758:	2057      	movs	r0, #87	; 0x57
 800175a:	f002 f988 	bl	8003a6e <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
 800175e:	4b3b      	ldr	r3, [pc, #236]	; (800184c <HAL_SAI_MspInit+0x164>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	3301      	adds	r3, #1
 8001764:	4a39      	ldr	r2, [pc, #228]	; (800184c <HAL_SAI_MspInit+0x164>)
 8001766:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE5     ------> SAI1_SCK_A
    PD6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_5;
 8001768:	2334      	movs	r3, #52	; 0x34
 800176a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176e:	2302      	movs	r3, #2
 8001770:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2300      	movs	r3, #0
 800177c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001780:	2306      	movs	r3, #6
 8001782:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001786:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800178a:	4619      	mov	r1, r3
 800178c:	4831      	ldr	r0, [pc, #196]	; (8001854 <HAL_SAI_MspInit+0x16c>)
 800178e:	f004 ffc3 	bl	8006718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001792:	2340      	movs	r3, #64	; 0x40
 8001794:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001798:	2302      	movs	r3, #2
 800179a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a4:	2300      	movs	r3, #0
 80017a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80017aa:	2306      	movs	r3, #6
 80017ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017b4:	4619      	mov	r1, r3
 80017b6:	4828      	ldr	r0, [pc, #160]	; (8001858 <HAL_SAI_MspInit+0x170>)
 80017b8:	f004 ffae 	bl	8006718 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 80017bc:	4b27      	ldr	r3, [pc, #156]	; (800185c <HAL_SAI_MspInit+0x174>)
 80017be:	4a28      	ldr	r2, [pc, #160]	; (8001860 <HAL_SAI_MspInit+0x178>)
 80017c0:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 80017c2:	4b26      	ldr	r3, [pc, #152]	; (800185c <HAL_SAI_MspInit+0x174>)
 80017c4:	2257      	movs	r2, #87	; 0x57
 80017c6:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017c8:	4b24      	ldr	r3, [pc, #144]	; (800185c <HAL_SAI_MspInit+0x174>)
 80017ca:	2240      	movs	r2, #64	; 0x40
 80017cc:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80017ce:	4b23      	ldr	r3, [pc, #140]	; (800185c <HAL_SAI_MspInit+0x174>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80017d4:	4b21      	ldr	r3, [pc, #132]	; (800185c <HAL_SAI_MspInit+0x174>)
 80017d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017da:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017dc:	4b1f      	ldr	r3, [pc, #124]	; (800185c <HAL_SAI_MspInit+0x174>)
 80017de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017e2:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017e4:	4b1d      	ldr	r3, [pc, #116]	; (800185c <HAL_SAI_MspInit+0x174>)
 80017e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017ea:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 80017ec:	4b1b      	ldr	r3, [pc, #108]	; (800185c <HAL_SAI_MspInit+0x174>)
 80017ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017f2:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
 80017f4:	4b19      	ldr	r3, [pc, #100]	; (800185c <HAL_SAI_MspInit+0x174>)
 80017f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017fa:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80017fc:	4b17      	ldr	r3, [pc, #92]	; (800185c <HAL_SAI_MspInit+0x174>)
 80017fe:	2204      	movs	r2, #4
 8001800:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001802:	4b16      	ldr	r3, [pc, #88]	; (800185c <HAL_SAI_MspInit+0x174>)
 8001804:	2203      	movs	r2, #3
 8001806:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 8001808:	4b14      	ldr	r3, [pc, #80]	; (800185c <HAL_SAI_MspInit+0x174>)
 800180a:	2200      	movs	r2, #0
 800180c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800180e:	4b13      	ldr	r3, [pc, #76]	; (800185c <HAL_SAI_MspInit+0x174>)
 8001810:	2200      	movs	r2, #0
 8001812:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001814:	4811      	ldr	r0, [pc, #68]	; (800185c <HAL_SAI_MspInit+0x174>)
 8001816:	f002 f945 	bl	8003aa4 <HAL_DMA_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <HAL_SAI_MspInit+0x13c>
    {
      Error_Handler();
 8001820:	f7ff fed8 	bl	80015d4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a0d      	ldr	r2, [pc, #52]	; (800185c <HAL_SAI_MspInit+0x174>)
 8001828:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800182c:	4a0b      	ldr	r2, [pc, #44]	; (800185c <HAL_SAI_MspInit+0x174>)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a09      	ldr	r2, [pc, #36]	; (800185c <HAL_SAI_MspInit+0x174>)
 8001836:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800183a:	4a08      	ldr	r2, [pc, #32]	; (800185c <HAL_SAI_MspInit+0x174>)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8001840:	bf00      	nop
 8001842:	37e0      	adds	r7, #224	; 0xe0
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40015804 	.word	0x40015804
 800184c:	240036c4 	.word	0x240036c4
 8001850:	58024400 	.word	0x58024400
 8001854:	58021000 	.word	0x58021000
 8001858:	58020c00 	.word	0x58020c00
 800185c:	2400391c 	.word	0x2400391c
 8001860:	40020010 	.word	0x40020010

08001864 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001868:	4b27      	ldr	r3, [pc, #156]	; (8001908 <MX_SPI2_Init+0xa4>)
 800186a:	4a28      	ldr	r2, [pc, #160]	; (800190c <MX_SPI2_Init+0xa8>)
 800186c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800186e:	4b26      	ldr	r3, [pc, #152]	; (8001908 <MX_SPI2_Init+0xa4>)
 8001870:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001874:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001876:	4b24      	ldr	r3, [pc, #144]	; (8001908 <MX_SPI2_Init+0xa4>)
 8001878:	2200      	movs	r2, #0
 800187a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800187c:	4b22      	ldr	r3, [pc, #136]	; (8001908 <MX_SPI2_Init+0xa4>)
 800187e:	2203      	movs	r2, #3
 8001880:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001882:	4b21      	ldr	r3, [pc, #132]	; (8001908 <MX_SPI2_Init+0xa4>)
 8001884:	2200      	movs	r2, #0
 8001886:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001888:	4b1f      	ldr	r3, [pc, #124]	; (8001908 <MX_SPI2_Init+0xa4>)
 800188a:	2200      	movs	r2, #0
 800188c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800188e:	4b1e      	ldr	r3, [pc, #120]	; (8001908 <MX_SPI2_Init+0xa4>)
 8001890:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001894:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001896:	4b1c      	ldr	r3, [pc, #112]	; (8001908 <MX_SPI2_Init+0xa4>)
 8001898:	2200      	movs	r2, #0
 800189a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800189c:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <MX_SPI2_Init+0xa4>)
 800189e:	2200      	movs	r2, #0
 80018a0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018a2:	4b19      	ldr	r3, [pc, #100]	; (8001908 <MX_SPI2_Init+0xa4>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018a8:	4b17      	ldr	r3, [pc, #92]	; (8001908 <MX_SPI2_Init+0xa4>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80018ae:	4b16      	ldr	r3, [pc, #88]	; (8001908 <MX_SPI2_Init+0xa4>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018b4:	4b14      	ldr	r3, [pc, #80]	; (8001908 <MX_SPI2_Init+0xa4>)
 80018b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018ba:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80018bc:	4b12      	ldr	r3, [pc, #72]	; (8001908 <MX_SPI2_Init+0xa4>)
 80018be:	2200      	movs	r2, #0
 80018c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80018c2:	4b11      	ldr	r3, [pc, #68]	; (8001908 <MX_SPI2_Init+0xa4>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018c8:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <MX_SPI2_Init+0xa4>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018ce:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <MX_SPI2_Init+0xa4>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <MX_SPI2_Init+0xa4>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80018da:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <MX_SPI2_Init+0xa4>)
 80018dc:	2200      	movs	r2, #0
 80018de:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80018e0:	4b09      	ldr	r3, [pc, #36]	; (8001908 <MX_SPI2_Init+0xa4>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80018e6:	4b08      	ldr	r3, [pc, #32]	; (8001908 <MX_SPI2_Init+0xa4>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <MX_SPI2_Init+0xa4>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018f2:	4805      	ldr	r0, [pc, #20]	; (8001908 <MX_SPI2_Init+0xa4>)
 80018f4:	f009 f9dc 	bl	800acb0 <HAL_SPI_Init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 80018fe:	f7ff fe69 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	24003a2c 	.word	0x24003a2c
 800190c:	40003800 	.word	0x40003800

08001910 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b0ba      	sub	sp, #232	; 0xe8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001928:	f107 0318 	add.w	r3, r7, #24
 800192c:	22bc      	movs	r2, #188	; 0xbc
 800192e:	2100      	movs	r1, #0
 8001930:	4618      	mov	r0, r3
 8001932:	f00b feb3 	bl	800d69c <memset>
  if(spiHandle->Instance==SPI2)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a37      	ldr	r2, [pc, #220]	; (8001a18 <HAL_SPI_MspInit+0x108>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d166      	bne.n	8001a0e <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001944:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001946:	2300      	movs	r3, #0
 8001948:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800194a:	f107 0318 	add.w	r3, r7, #24
 800194e:	4618      	mov	r0, r3
 8001950:	f006 f904 	bl	8007b5c <HAL_RCCEx_PeriphCLKConfig>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800195a:	f7ff fe3b 	bl	80015d4 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800195e:	4b2f      	ldr	r3, [pc, #188]	; (8001a1c <HAL_SPI_MspInit+0x10c>)
 8001960:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001964:	4a2d      	ldr	r2, [pc, #180]	; (8001a1c <HAL_SPI_MspInit+0x10c>)
 8001966:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800196a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800196e:	4b2b      	ldr	r3, [pc, #172]	; (8001a1c <HAL_SPI_MspInit+0x10c>)
 8001970:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001974:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001978:	617b      	str	r3, [r7, #20]
 800197a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800197c:	4b27      	ldr	r3, [pc, #156]	; (8001a1c <HAL_SPI_MspInit+0x10c>)
 800197e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001982:	4a26      	ldr	r2, [pc, #152]	; (8001a1c <HAL_SPI_MspInit+0x10c>)
 8001984:	f043 0308 	orr.w	r3, r3, #8
 8001988:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800198c:	4b23      	ldr	r3, [pc, #140]	; (8001a1c <HAL_SPI_MspInit+0x10c>)
 800198e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800199a:	4b20      	ldr	r3, [pc, #128]	; (8001a1c <HAL_SPI_MspInit+0x10c>)
 800199c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a0:	4a1e      	ldr	r2, [pc, #120]	; (8001a1c <HAL_SPI_MspInit+0x10c>)
 80019a2:	f043 0302 	orr.w	r3, r3, #2
 80019a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019aa:	4b1c      	ldr	r3, [pc, #112]	; (8001a1c <HAL_SPI_MspInit+0x10c>)
 80019ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> SPI2_SCK
    PB9     ------> SPI2_NSS
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019b8:	2308      	movs	r3, #8
 80019ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019be:	2302      	movs	r3, #2
 80019c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ca:	2300      	movs	r3, #0
 80019cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019d0:	2305      	movs	r3, #5
 80019d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019d6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80019da:	4619      	mov	r1, r3
 80019dc:	4810      	ldr	r0, [pc, #64]	; (8001a20 <HAL_SPI_MspInit+0x110>)
 80019de:	f004 fe9b 	bl	8006718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 80019e2:	f44f 4342 	mov.w	r3, #49664	; 0xc200
 80019e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ea:	2302      	movs	r3, #2
 80019ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f6:	2300      	movs	r3, #0
 80019f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019fc:	2305      	movs	r3, #5
 80019fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a02:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a06:	4619      	mov	r1, r3
 8001a08:	4806      	ldr	r0, [pc, #24]	; (8001a24 <HAL_SPI_MspInit+0x114>)
 8001a0a:	f004 fe85 	bl	8006718 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001a0e:	bf00      	nop
 8001a10:	37e8      	adds	r7, #232	; 0xe8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40003800 	.word	0x40003800
 8001a1c:	58024400 	.word	0x58024400
 8001a20:	58020c00 	.word	0x58020c00
 8001a24:	58020400 	.word	0x58020400

08001a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2e:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <HAL_MspInit+0x30>)
 8001a30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a34:	4a08      	ldr	r2, [pc, #32]	; (8001a58 <HAL_MspInit+0x30>)
 8001a36:	f043 0302 	orr.w	r3, r3, #2
 8001a3a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a3e:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <HAL_MspInit+0x30>)
 8001a40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	58024400 	.word	0x58024400

08001a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a60:	e7fe      	b.n	8001a60 <NMI_Handler+0x4>

08001a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a66:	e7fe      	b.n	8001a66 <HardFault_Handler+0x4>

08001a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <MemManage_Handler+0x4>

08001a6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a72:	e7fe      	b.n	8001a72 <BusFault_Handler+0x4>

08001a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a78:	e7fe      	b.n	8001a78 <UsageFault_Handler+0x4>

08001a7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aa8:	f000 fdd4 	bl	8002654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001ab4:	4802      	ldr	r0, [pc, #8]	; (8001ac0 <DMA1_Stream0_IRQHandler+0x10>)
 8001ab6:	f003 f8b3 	bl	8004c20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	2400391c 	.word	0x2400391c

08001ac4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001ac8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001acc:	f005 f807 	bl	8006ade <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ad0:	bf00      	nop
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001ad8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001adc:	f004 ffff 	bl	8006ade <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001ae0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001ae4:	f004 fffb 	bl	8006ade <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001ae8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001aec:	f004 fff7 	bl	8006ade <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001af0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001af4:	f004 fff3 	bl	8006ade <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001af8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001afc:	f004 ffef 	bl	8006ade <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b00:	bf00      	nop
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 8001b08:	4802      	ldr	r0, [pc, #8]	; (8001b14 <SAI1_IRQHandler+0x10>)
 8001b0a:	f008 fd69 	bl	800a5e0 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	24003994 	.word	0x24003994

08001b18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
	return 1;
 8001b1c:	2301      	movs	r3, #1
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <_kill>:

int _kill(int pid, int sig)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b32:	f00b fd81 	bl	800d638 <__errno>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2216      	movs	r2, #22
 8001b3a:	601a      	str	r2, [r3, #0]
	return -1;
 8001b3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <_exit>:

void _exit (int status)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff ffe7 	bl	8001b28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b5a:	e7fe      	b.n	8001b5a <_exit+0x12>

08001b5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	e00a      	b.n	8001b84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b6e:	f3af 8000 	nop.w
 8001b72:	4601      	mov	r1, r0
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	1c5a      	adds	r2, r3, #1
 8001b78:	60ba      	str	r2, [r7, #8]
 8001b7a:	b2ca      	uxtb	r2, r1
 8001b7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	3301      	adds	r3, #1
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	dbf0      	blt.n	8001b6e <_read+0x12>
	}

return len;
 8001b8c:	687b      	ldr	r3, [r7, #4]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b086      	sub	sp, #24
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	60f8      	str	r0, [r7, #12]
 8001b9e:	60b9      	str	r1, [r7, #8]
 8001ba0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	e009      	b.n	8001bbc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	1c5a      	adds	r2, r3, #1
 8001bac:	60ba      	str	r2, [r7, #8]
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	dbf1      	blt.n	8001ba8 <_write+0x12>
	}
	return len;
 8001bc4:	687b      	ldr	r3, [r7, #4]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <_close>:

int _close(int file)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
	return -1;
 8001bd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bf6:	605a      	str	r2, [r3, #4]
	return 0;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <_isatty>:

int _isatty(int file)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
	return 1;
 8001c0e:	2301      	movs	r3, #1
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
	return 0;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c40:	4a14      	ldr	r2, [pc, #80]	; (8001c94 <_sbrk+0x5c>)
 8001c42:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <_sbrk+0x60>)
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c4c:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <_sbrk+0x64>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d102      	bne.n	8001c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c54:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <_sbrk+0x64>)
 8001c56:	4a12      	ldr	r2, [pc, #72]	; (8001ca0 <_sbrk+0x68>)
 8001c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c5a:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <_sbrk+0x64>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d207      	bcs.n	8001c78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c68:	f00b fce6 	bl	800d638 <__errno>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	220c      	movs	r2, #12
 8001c70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c76:	e009      	b.n	8001c8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c78:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <_sbrk+0x64>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c7e:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <_sbrk+0x64>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	4a05      	ldr	r2, [pc, #20]	; (8001c9c <_sbrk+0x64>)
 8001c88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3718      	adds	r7, #24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	24040000 	.word	0x24040000
 8001c98:	00000400 	.word	0x00000400
 8001c9c:	240036c8 	.word	0x240036c8
 8001ca0:	240064d8 	.word	0x240064d8

08001ca4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b096      	sub	sp, #88	; 0x58
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001caa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	605a      	str	r2, [r3, #4]
 8001cc0:	609a      	str	r2, [r3, #8]
 8001cc2:	60da      	str	r2, [r3, #12]
 8001cc4:	611a      	str	r2, [r3, #16]
 8001cc6:	615a      	str	r2, [r3, #20]
 8001cc8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	222c      	movs	r2, #44	; 0x2c
 8001cce:	2100      	movs	r1, #0
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f00b fce3 	bl	800d69c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001cd6:	4b39      	ldr	r3, [pc, #228]	; (8001dbc <MX_TIM1_Init+0x118>)
 8001cd8:	4a39      	ldr	r2, [pc, #228]	; (8001dc0 <MX_TIM1_Init+0x11c>)
 8001cda:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001cdc:	4b37      	ldr	r3, [pc, #220]	; (8001dbc <MX_TIM1_Init+0x118>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce2:	4b36      	ldr	r3, [pc, #216]	; (8001dbc <MX_TIM1_Init+0x118>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ce8:	4b34      	ldr	r3, [pc, #208]	; (8001dbc <MX_TIM1_Init+0x118>)
 8001cea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cf0:	4b32      	ldr	r3, [pc, #200]	; (8001dbc <MX_TIM1_Init+0x118>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cf6:	4b31      	ldr	r3, [pc, #196]	; (8001dbc <MX_TIM1_Init+0x118>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cfc:	4b2f      	ldr	r3, [pc, #188]	; (8001dbc <MX_TIM1_Init+0x118>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001d02:	482e      	ldr	r0, [pc, #184]	; (8001dbc <MX_TIM1_Init+0x118>)
 8001d04:	f009 f986 	bl	800b014 <HAL_TIM_OC_Init>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001d0e:	f7ff fc61 	bl	80015d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d12:	2300      	movs	r3, #0
 8001d14:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d16:	2300      	movs	r3, #0
 8001d18:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d1e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d22:	4619      	mov	r1, r3
 8001d24:	4825      	ldr	r0, [pc, #148]	; (8001dbc <MX_TIM1_Init+0x118>)
 8001d26:	f009 fdab 	bl	800b880 <HAL_TIMEx_MasterConfigSynchronization>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001d30:	f7ff fc50 	bl	80015d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001d34:	2300      	movs	r3, #0
 8001d36:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d40:	2300      	movs	r3, #0
 8001d42:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d44:	2300      	movs	r3, #0
 8001d46:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d54:	2204      	movs	r2, #4
 8001d56:	4619      	mov	r1, r3
 8001d58:	4818      	ldr	r0, [pc, #96]	; (8001dbc <MX_TIM1_Init+0x118>)
 8001d5a:	f009 f9b3 	bl	800b0c4 <HAL_TIM_OC_ConfigChannel>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001d64:	f7ff fc36 	bl	80015d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d80:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d82:	2300      	movs	r3, #0
 8001d84:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d86:	2300      	movs	r3, #0
 8001d88:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d94:	2300      	movs	r3, #0
 8001d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d98:	1d3b      	adds	r3, r7, #4
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4807      	ldr	r0, [pc, #28]	; (8001dbc <MX_TIM1_Init+0x118>)
 8001d9e:	f009 fdf7 	bl	800b990 <HAL_TIMEx_ConfigBreakDeadTime>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001da8:	f7ff fc14 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001dac:	4803      	ldr	r0, [pc, #12]	; (8001dbc <MX_TIM1_Init+0x118>)
 8001dae:	f000 fa25 	bl	80021fc <HAL_TIM_MspPostInit>

}
 8001db2:	bf00      	nop
 8001db4:	3758      	adds	r7, #88	; 0x58
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	24003be4 	.word	0x24003be4
 8001dc0:	40010000 	.word	0x40010000

08001dc4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08a      	sub	sp, #40	; 0x28
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dca:	f107 031c 	add.w	r3, r7, #28
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	605a      	str	r2, [r3, #4]
 8001dd4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dd6:	463b      	mov	r3, r7
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
 8001de2:	611a      	str	r2, [r3, #16]
 8001de4:	615a      	str	r2, [r3, #20]
 8001de6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001de8:	4b21      	ldr	r3, [pc, #132]	; (8001e70 <MX_TIM3_Init+0xac>)
 8001dea:	4a22      	ldr	r2, [pc, #136]	; (8001e74 <MX_TIM3_Init+0xb0>)
 8001dec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001dee:	4b20      	ldr	r3, [pc, #128]	; (8001e70 <MX_TIM3_Init+0xac>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df4:	4b1e      	ldr	r3, [pc, #120]	; (8001e70 <MX_TIM3_Init+0xac>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001dfa:	4b1d      	ldr	r3, [pc, #116]	; (8001e70 <MX_TIM3_Init+0xac>)
 8001dfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e00:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e02:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <MX_TIM3_Init+0xac>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e08:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <MX_TIM3_Init+0xac>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001e0e:	4818      	ldr	r0, [pc, #96]	; (8001e70 <MX_TIM3_Init+0xac>)
 8001e10:	f009 f900 	bl	800b014 <HAL_TIM_OC_Init>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001e1a:	f7ff fbdb 	bl	80015d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e22:	2300      	movs	r3, #0
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e26:	f107 031c 	add.w	r3, r7, #28
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4810      	ldr	r0, [pc, #64]	; (8001e70 <MX_TIM3_Init+0xac>)
 8001e2e:	f009 fd27 	bl	800b880 <HAL_TIMEx_MasterConfigSynchronization>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001e38:	f7ff fbcc 	bl	80015d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e4c:	463b      	mov	r3, r7
 8001e4e:	2200      	movs	r2, #0
 8001e50:	4619      	mov	r1, r3
 8001e52:	4807      	ldr	r0, [pc, #28]	; (8001e70 <MX_TIM3_Init+0xac>)
 8001e54:	f009 f936 	bl	800b0c4 <HAL_TIM_OC_ConfigChannel>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001e5e:	f7ff fbb9 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e62:	4803      	ldr	r0, [pc, #12]	; (8001e70 <MX_TIM3_Init+0xac>)
 8001e64:	f000 f9ca 	bl	80021fc <HAL_TIM_MspPostInit>

}
 8001e68:	bf00      	nop
 8001e6a:	3728      	adds	r7, #40	; 0x28
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	24003b98 	.word	0x24003b98
 8001e74:	40000400 	.word	0x40000400

08001e78 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08a      	sub	sp, #40	; 0x28
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e7e:	f107 031c 	add.w	r3, r7, #28
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]
 8001e88:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e8a:	463b      	mov	r3, r7
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]
 8001e96:	611a      	str	r2, [r3, #16]
 8001e98:	615a      	str	r2, [r3, #20]
 8001e9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e9c:	4b21      	ldr	r3, [pc, #132]	; (8001f24 <MX_TIM4_Init+0xac>)
 8001e9e:	4a22      	ldr	r2, [pc, #136]	; (8001f28 <MX_TIM4_Init+0xb0>)
 8001ea0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001ea2:	4b20      	ldr	r3, [pc, #128]	; (8001f24 <MX_TIM4_Init+0xac>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea8:	4b1e      	ldr	r3, [pc, #120]	; (8001f24 <MX_TIM4_Init+0xac>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001eae:	4b1d      	ldr	r3, [pc, #116]	; (8001f24 <MX_TIM4_Init+0xac>)
 8001eb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eb4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb6:	4b1b      	ldr	r3, [pc, #108]	; (8001f24 <MX_TIM4_Init+0xac>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ebc:	4b19      	ldr	r3, [pc, #100]	; (8001f24 <MX_TIM4_Init+0xac>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001ec2:	4818      	ldr	r0, [pc, #96]	; (8001f24 <MX_TIM4_Init+0xac>)
 8001ec4:	f009 f8a6 	bl	800b014 <HAL_TIM_OC_Init>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001ece:	f7ff fb81 	bl	80015d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001eda:	f107 031c 	add.w	r3, r7, #28
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4810      	ldr	r0, [pc, #64]	; (8001f24 <MX_TIM4_Init+0xac>)
 8001ee2:	f009 fccd 	bl	800b880 <HAL_TIMEx_MasterConfigSynchronization>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001eec:	f7ff fb72 	bl	80015d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001efc:	2300      	movs	r3, #0
 8001efe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f00:	463b      	mov	r3, r7
 8001f02:	2204      	movs	r2, #4
 8001f04:	4619      	mov	r1, r3
 8001f06:	4807      	ldr	r0, [pc, #28]	; (8001f24 <MX_TIM4_Init+0xac>)
 8001f08:	f009 f8dc 	bl	800b0c4 <HAL_TIM_OC_ConfigChannel>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001f12:	f7ff fb5f 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001f16:	4803      	ldr	r0, [pc, #12]	; (8001f24 <MX_TIM4_Init+0xac>)
 8001f18:	f000 f970 	bl	80021fc <HAL_TIM_MspPostInit>

}
 8001f1c:	bf00      	nop
 8001f1e:	3728      	adds	r7, #40	; 0x28
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	24003b00 	.word	0x24003b00
 8001f28:	40000800 	.word	0x40000800

08001f2c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08a      	sub	sp, #40	; 0x28
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f32:	f107 031c 	add.w	r3, r7, #28
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	605a      	str	r2, [r3, #4]
 8001f3c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f3e:	463b      	mov	r3, r7
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]
 8001f4a:	611a      	str	r2, [r3, #16]
 8001f4c:	615a      	str	r2, [r3, #20]
 8001f4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001f50:	4b21      	ldr	r3, [pc, #132]	; (8001fd8 <MX_TIM5_Init+0xac>)
 8001f52:	4a22      	ldr	r2, [pc, #136]	; (8001fdc <MX_TIM5_Init+0xb0>)
 8001f54:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001f56:	4b20      	ldr	r3, [pc, #128]	; (8001fd8 <MX_TIM5_Init+0xac>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f5c:	4b1e      	ldr	r3, [pc, #120]	; (8001fd8 <MX_TIM5_Init+0xac>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001f62:	4b1d      	ldr	r3, [pc, #116]	; (8001fd8 <MX_TIM5_Init+0xac>)
 8001f64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f68:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f6a:	4b1b      	ldr	r3, [pc, #108]	; (8001fd8 <MX_TIM5_Init+0xac>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f70:	4b19      	ldr	r3, [pc, #100]	; (8001fd8 <MX_TIM5_Init+0xac>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8001f76:	4818      	ldr	r0, [pc, #96]	; (8001fd8 <MX_TIM5_Init+0xac>)
 8001f78:	f009 f84c 	bl	800b014 <HAL_TIM_OC_Init>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8001f82:	f7ff fb27 	bl	80015d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f86:	2300      	movs	r3, #0
 8001f88:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f8e:	f107 031c 	add.w	r3, r7, #28
 8001f92:	4619      	mov	r1, r3
 8001f94:	4810      	ldr	r0, [pc, #64]	; (8001fd8 <MX_TIM5_Init+0xac>)
 8001f96:	f009 fc73 	bl	800b880 <HAL_TIMEx_MasterConfigSynchronization>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001fa0:	f7ff fb18 	bl	80015d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fac:	2300      	movs	r3, #0
 8001fae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001fb4:	463b      	mov	r3, r7
 8001fb6:	2208      	movs	r2, #8
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4807      	ldr	r0, [pc, #28]	; (8001fd8 <MX_TIM5_Init+0xac>)
 8001fbc:	f009 f882 	bl	800b0c4 <HAL_TIM_OC_ConfigChannel>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001fc6:	f7ff fb05 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001fca:	4803      	ldr	r0, [pc, #12]	; (8001fd8 <MX_TIM5_Init+0xac>)
 8001fcc:	f000 f916 	bl	80021fc <HAL_TIM_MspPostInit>

}
 8001fd0:	bf00      	nop
 8001fd2:	3728      	adds	r7, #40	; 0x28
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	24003b4c 	.word	0x24003b4c
 8001fdc:	40000c00 	.word	0x40000c00

08001fe0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b096      	sub	sp, #88	; 0x58
 8001fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fe6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]
 8001ff0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ff2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	605a      	str	r2, [r3, #4]
 8001ffc:	609a      	str	r2, [r3, #8]
 8001ffe:	60da      	str	r2, [r3, #12]
 8002000:	611a      	str	r2, [r3, #16]
 8002002:	615a      	str	r2, [r3, #20]
 8002004:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002006:	1d3b      	adds	r3, r7, #4
 8002008:	222c      	movs	r2, #44	; 0x2c
 800200a:	2100      	movs	r1, #0
 800200c:	4618      	mov	r0, r3
 800200e:	f00b fb45 	bl	800d69c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002012:	4b39      	ldr	r3, [pc, #228]	; (80020f8 <MX_TIM8_Init+0x118>)
 8002014:	4a39      	ldr	r2, [pc, #228]	; (80020fc <MX_TIM8_Init+0x11c>)
 8002016:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002018:	4b37      	ldr	r3, [pc, #220]	; (80020f8 <MX_TIM8_Init+0x118>)
 800201a:	2200      	movs	r2, #0
 800201c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800201e:	4b36      	ldr	r3, [pc, #216]	; (80020f8 <MX_TIM8_Init+0x118>)
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002024:	4b34      	ldr	r3, [pc, #208]	; (80020f8 <MX_TIM8_Init+0x118>)
 8002026:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800202a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800202c:	4b32      	ldr	r3, [pc, #200]	; (80020f8 <MX_TIM8_Init+0x118>)
 800202e:	2200      	movs	r2, #0
 8002030:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002032:	4b31      	ldr	r3, [pc, #196]	; (80020f8 <MX_TIM8_Init+0x118>)
 8002034:	2200      	movs	r2, #0
 8002036:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002038:	4b2f      	ldr	r3, [pc, #188]	; (80020f8 <MX_TIM8_Init+0x118>)
 800203a:	2200      	movs	r2, #0
 800203c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800203e:	482e      	ldr	r0, [pc, #184]	; (80020f8 <MX_TIM8_Init+0x118>)
 8002040:	f008 ffe8 	bl	800b014 <HAL_TIM_OC_Init>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 800204a:	f7ff fac3 	bl	80015d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800204e:	2300      	movs	r3, #0
 8002050:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002052:	2300      	movs	r3, #0
 8002054:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002056:	2300      	movs	r3, #0
 8002058:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800205a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800205e:	4619      	mov	r1, r3
 8002060:	4825      	ldr	r0, [pc, #148]	; (80020f8 <MX_TIM8_Init+0x118>)
 8002062:	f009 fc0d 	bl	800b880 <HAL_TIMEx_MasterConfigSynchronization>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 800206c:	f7ff fab2 	bl	80015d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002070:	2300      	movs	r3, #0
 8002072:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002078:	2300      	movs	r3, #0
 800207a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800207c:	2300      	movs	r3, #0
 800207e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002080:	2300      	movs	r3, #0
 8002082:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002084:	2300      	movs	r3, #0
 8002086:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002088:	2300      	movs	r3, #0
 800208a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800208c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002090:	2208      	movs	r2, #8
 8002092:	4619      	mov	r1, r3
 8002094:	4818      	ldr	r0, [pc, #96]	; (80020f8 <MX_TIM8_Init+0x118>)
 8002096:	f009 f815 	bl	800b0c4 <HAL_TIM_OC_ConfigChannel>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80020a0:	f7ff fa98 	bl	80015d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020a4:	2300      	movs	r3, #0
 80020a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020a8:	2300      	movs	r3, #0
 80020aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020ac:	2300      	movs	r3, #0
 80020ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80020c2:	2300      	movs	r3, #0
 80020c4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80020c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020d0:	2300      	movs	r3, #0
 80020d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80020d4:	1d3b      	adds	r3, r7, #4
 80020d6:	4619      	mov	r1, r3
 80020d8:	4807      	ldr	r0, [pc, #28]	; (80020f8 <MX_TIM8_Init+0x118>)
 80020da:	f009 fc59 	bl	800b990 <HAL_TIMEx_ConfigBreakDeadTime>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 80020e4:	f7ff fa76 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80020e8:	4803      	ldr	r0, [pc, #12]	; (80020f8 <MX_TIM8_Init+0x118>)
 80020ea:	f000 f887 	bl	80021fc <HAL_TIM_MspPostInit>

}
 80020ee:	bf00      	nop
 80020f0:	3758      	adds	r7, #88	; 0x58
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	24003ab4 	.word	0x24003ab4
 80020fc:	40010400 	.word	0x40010400

08002100 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8002100:	b480      	push	{r7}
 8002102:	b089      	sub	sp, #36	; 0x24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a35      	ldr	r2, [pc, #212]	; (80021e4 <HAL_TIM_OC_MspInit+0xe4>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d10f      	bne.n	8002132 <HAL_TIM_OC_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002112:	4b35      	ldr	r3, [pc, #212]	; (80021e8 <HAL_TIM_OC_MspInit+0xe8>)
 8002114:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002118:	4a33      	ldr	r2, [pc, #204]	; (80021e8 <HAL_TIM_OC_MspInit+0xe8>)
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002122:	4b31      	ldr	r3, [pc, #196]	; (80021e8 <HAL_TIM_OC_MspInit+0xe8>)
 8002124:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	61fb      	str	r3, [r7, #28]
 800212e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002130:	e052      	b.n	80021d8 <HAL_TIM_OC_MspInit+0xd8>
  else if(tim_ocHandle->Instance==TIM3)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a2d      	ldr	r2, [pc, #180]	; (80021ec <HAL_TIM_OC_MspInit+0xec>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d10f      	bne.n	800215c <HAL_TIM_OC_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800213c:	4b2a      	ldr	r3, [pc, #168]	; (80021e8 <HAL_TIM_OC_MspInit+0xe8>)
 800213e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002142:	4a29      	ldr	r2, [pc, #164]	; (80021e8 <HAL_TIM_OC_MspInit+0xe8>)
 8002144:	f043 0302 	orr.w	r3, r3, #2
 8002148:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800214c:	4b26      	ldr	r3, [pc, #152]	; (80021e8 <HAL_TIM_OC_MspInit+0xe8>)
 800214e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	61bb      	str	r3, [r7, #24]
 8002158:	69bb      	ldr	r3, [r7, #24]
}
 800215a:	e03d      	b.n	80021d8 <HAL_TIM_OC_MspInit+0xd8>
  else if(tim_ocHandle->Instance==TIM4)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a23      	ldr	r2, [pc, #140]	; (80021f0 <HAL_TIM_OC_MspInit+0xf0>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d10f      	bne.n	8002186 <HAL_TIM_OC_MspInit+0x86>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002166:	4b20      	ldr	r3, [pc, #128]	; (80021e8 <HAL_TIM_OC_MspInit+0xe8>)
 8002168:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800216c:	4a1e      	ldr	r2, [pc, #120]	; (80021e8 <HAL_TIM_OC_MspInit+0xe8>)
 800216e:	f043 0304 	orr.w	r3, r3, #4
 8002172:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002176:	4b1c      	ldr	r3, [pc, #112]	; (80021e8 <HAL_TIM_OC_MspInit+0xe8>)
 8002178:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	617b      	str	r3, [r7, #20]
 8002182:	697b      	ldr	r3, [r7, #20]
}
 8002184:	e028      	b.n	80021d8 <HAL_TIM_OC_MspInit+0xd8>
  else if(tim_ocHandle->Instance==TIM5)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a1a      	ldr	r2, [pc, #104]	; (80021f4 <HAL_TIM_OC_MspInit+0xf4>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d10f      	bne.n	80021b0 <HAL_TIM_OC_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002190:	4b15      	ldr	r3, [pc, #84]	; (80021e8 <HAL_TIM_OC_MspInit+0xe8>)
 8002192:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002196:	4a14      	ldr	r2, [pc, #80]	; (80021e8 <HAL_TIM_OC_MspInit+0xe8>)
 8002198:	f043 0308 	orr.w	r3, r3, #8
 800219c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021a0:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <HAL_TIM_OC_MspInit+0xe8>)
 80021a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021a6:	f003 0308 	and.w	r3, r3, #8
 80021aa:	613b      	str	r3, [r7, #16]
 80021ac:	693b      	ldr	r3, [r7, #16]
}
 80021ae:	e013      	b.n	80021d8 <HAL_TIM_OC_MspInit+0xd8>
  else if(tim_ocHandle->Instance==TIM8)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a10      	ldr	r2, [pc, #64]	; (80021f8 <HAL_TIM_OC_MspInit+0xf8>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d10e      	bne.n	80021d8 <HAL_TIM_OC_MspInit+0xd8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80021ba:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <HAL_TIM_OC_MspInit+0xe8>)
 80021bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021c0:	4a09      	ldr	r2, [pc, #36]	; (80021e8 <HAL_TIM_OC_MspInit+0xe8>)
 80021c2:	f043 0302 	orr.w	r3, r3, #2
 80021c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80021ca:	4b07      	ldr	r3, [pc, #28]	; (80021e8 <HAL_TIM_OC_MspInit+0xe8>)
 80021cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	68fb      	ldr	r3, [r7, #12]
}
 80021d8:	bf00      	nop
 80021da:	3724      	adds	r7, #36	; 0x24
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	40010000 	.word	0x40010000
 80021e8:	58024400 	.word	0x58024400
 80021ec:	40000400 	.word	0x40000400
 80021f0:	40000800 	.word	0x40000800
 80021f4:	40000c00 	.word	0x40000c00
 80021f8:	40010400 	.word	0x40010400

080021fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08c      	sub	sp, #48	; 0x30
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	f107 031c 	add.w	r3, r7, #28
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a5e      	ldr	r2, [pc, #376]	; (8002394 <HAL_TIM_MspPostInit+0x198>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d120      	bne.n	8002260 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800221e:	4b5e      	ldr	r3, [pc, #376]	; (8002398 <HAL_TIM_MspPostInit+0x19c>)
 8002220:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002224:	4a5c      	ldr	r2, [pc, #368]	; (8002398 <HAL_TIM_MspPostInit+0x19c>)
 8002226:	f043 0301 	orr.w	r3, r3, #1
 800222a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800222e:	4b5a      	ldr	r3, [pc, #360]	; (8002398 <HAL_TIM_MspPostInit+0x19c>)
 8002230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	61bb      	str	r3, [r7, #24]
 800223a:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = CIS_CP_Pin;
 800223c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002242:	2302      	movs	r3, #2
 8002244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002246:	2300      	movs	r3, #0
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224a:	2300      	movs	r3, #0
 800224c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800224e:	2301      	movs	r3, #1
 8002250:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_CP_GPIO_Port, &GPIO_InitStruct);
 8002252:	f107 031c 	add.w	r3, r7, #28
 8002256:	4619      	mov	r1, r3
 8002258:	4850      	ldr	r0, [pc, #320]	; (800239c <HAL_TIM_MspPostInit+0x1a0>)
 800225a:	f004 fa5d 	bl	8006718 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800225e:	e095      	b.n	800238c <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM3)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a4e      	ldr	r2, [pc, #312]	; (80023a0 <HAL_TIM_MspPostInit+0x1a4>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d11f      	bne.n	80022aa <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800226a:	4b4b      	ldr	r3, [pc, #300]	; (8002398 <HAL_TIM_MspPostInit+0x19c>)
 800226c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002270:	4a49      	ldr	r2, [pc, #292]	; (8002398 <HAL_TIM_MspPostInit+0x19c>)
 8002272:	f043 0304 	orr.w	r3, r3, #4
 8002276:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800227a:	4b47      	ldr	r3, [pc, #284]	; (8002398 <HAL_TIM_MspPostInit+0x19c>)
 800227c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = CIS_VLED_R_Pin;
 8002288:	2340      	movs	r3, #64	; 0x40
 800228a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228c:	2302      	movs	r3, #2
 800228e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002294:	2300      	movs	r3, #0
 8002296:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002298:	2302      	movs	r3, #2
 800229a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_VLED_R_GPIO_Port, &GPIO_InitStruct);
 800229c:	f107 031c 	add.w	r3, r7, #28
 80022a0:	4619      	mov	r1, r3
 80022a2:	4840      	ldr	r0, [pc, #256]	; (80023a4 <HAL_TIM_MspPostInit+0x1a8>)
 80022a4:	f004 fa38 	bl	8006718 <HAL_GPIO_Init>
}
 80022a8:	e070      	b.n	800238c <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM4)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a3e      	ldr	r2, [pc, #248]	; (80023a8 <HAL_TIM_MspPostInit+0x1ac>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d120      	bne.n	80022f6 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022b4:	4b38      	ldr	r3, [pc, #224]	; (8002398 <HAL_TIM_MspPostInit+0x19c>)
 80022b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ba:	4a37      	ldr	r2, [pc, #220]	; (8002398 <HAL_TIM_MspPostInit+0x19c>)
 80022bc:	f043 0308 	orr.w	r3, r3, #8
 80022c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022c4:	4b34      	ldr	r3, [pc, #208]	; (8002398 <HAL_TIM_MspPostInit+0x19c>)
 80022c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	613b      	str	r3, [r7, #16]
 80022d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = CIS_VLED_G_Pin;
 80022d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d8:	2302      	movs	r3, #2
 80022da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e0:	2300      	movs	r3, #0
 80022e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80022e4:	2302      	movs	r3, #2
 80022e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_VLED_G_GPIO_Port, &GPIO_InitStruct);
 80022e8:	f107 031c 	add.w	r3, r7, #28
 80022ec:	4619      	mov	r1, r3
 80022ee:	482f      	ldr	r0, [pc, #188]	; (80023ac <HAL_TIM_MspPostInit+0x1b0>)
 80022f0:	f004 fa12 	bl	8006718 <HAL_GPIO_Init>
}
 80022f4:	e04a      	b.n	800238c <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM5)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a2d      	ldr	r2, [pc, #180]	; (80023b0 <HAL_TIM_MspPostInit+0x1b4>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d120      	bne.n	8002342 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002300:	4b25      	ldr	r3, [pc, #148]	; (8002398 <HAL_TIM_MspPostInit+0x19c>)
 8002302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002306:	4a24      	ldr	r2, [pc, #144]	; (8002398 <HAL_TIM_MspPostInit+0x19c>)
 8002308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800230c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002310:	4b21      	ldr	r3, [pc, #132]	; (8002398 <HAL_TIM_MspPostInit+0x19c>)
 8002312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CIS_VLED_B_Pin;
 800231e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002324:	2302      	movs	r3, #2
 8002326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232c:	2300      	movs	r3, #0
 800232e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002330:	2302      	movs	r3, #2
 8002332:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_VLED_B_GPIO_Port, &GPIO_InitStruct);
 8002334:	f107 031c 	add.w	r3, r7, #28
 8002338:	4619      	mov	r1, r3
 800233a:	481e      	ldr	r0, [pc, #120]	; (80023b4 <HAL_TIM_MspPostInit+0x1b8>)
 800233c:	f004 f9ec 	bl	8006718 <HAL_GPIO_Init>
}
 8002340:	e024      	b.n	800238c <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM8)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a1c      	ldr	r2, [pc, #112]	; (80023b8 <HAL_TIM_MspPostInit+0x1bc>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d11f      	bne.n	800238c <HAL_TIM_MspPostInit+0x190>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800234c:	4b12      	ldr	r3, [pc, #72]	; (8002398 <HAL_TIM_MspPostInit+0x19c>)
 800234e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002352:	4a11      	ldr	r2, [pc, #68]	; (8002398 <HAL_TIM_MspPostInit+0x19c>)
 8002354:	f043 0304 	orr.w	r3, r3, #4
 8002358:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800235c:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <HAL_TIM_MspPostInit+0x19c>)
 800235e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002362:	f003 0304 	and.w	r3, r3, #4
 8002366:	60bb      	str	r3, [r7, #8]
 8002368:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CIS_SP_Pin;
 800236a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800236e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002370:	2302      	movs	r3, #2
 8002372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002374:	2300      	movs	r3, #0
 8002376:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002378:	2300      	movs	r3, #0
 800237a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800237c:	2303      	movs	r3, #3
 800237e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_SP_GPIO_Port, &GPIO_InitStruct);
 8002380:	f107 031c 	add.w	r3, r7, #28
 8002384:	4619      	mov	r1, r3
 8002386:	4807      	ldr	r0, [pc, #28]	; (80023a4 <HAL_TIM_MspPostInit+0x1a8>)
 8002388:	f004 f9c6 	bl	8006718 <HAL_GPIO_Init>
}
 800238c:	bf00      	nop
 800238e:	3730      	adds	r7, #48	; 0x30
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40010000 	.word	0x40010000
 8002398:	58024400 	.word	0x58024400
 800239c:	58020000 	.word	0x58020000
 80023a0:	40000400 	.word	0x40000400
 80023a4:	58020800 	.word	0x58020800
 80023a8:	40000800 	.word	0x40000800
 80023ac:	58020c00 	.word	0x58020c00
 80023b0:	40000c00 	.word	0x40000c00
 80023b4:	58021c00 	.word	0x58021c00
 80023b8:	40010400 	.word	0x40010400

080023bc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023c0:	4b22      	ldr	r3, [pc, #136]	; (800244c <MX_USART1_UART_Init+0x90>)
 80023c2:	4a23      	ldr	r2, [pc, #140]	; (8002450 <MX_USART1_UART_Init+0x94>)
 80023c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023c6:	4b21      	ldr	r3, [pc, #132]	; (800244c <MX_USART1_UART_Init+0x90>)
 80023c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023ce:	4b1f      	ldr	r3, [pc, #124]	; (800244c <MX_USART1_UART_Init+0x90>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023d4:	4b1d      	ldr	r3, [pc, #116]	; (800244c <MX_USART1_UART_Init+0x90>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023da:	4b1c      	ldr	r3, [pc, #112]	; (800244c <MX_USART1_UART_Init+0x90>)
 80023dc:	2200      	movs	r2, #0
 80023de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023e0:	4b1a      	ldr	r3, [pc, #104]	; (800244c <MX_USART1_UART_Init+0x90>)
 80023e2:	220c      	movs	r2, #12
 80023e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023e6:	4b19      	ldr	r3, [pc, #100]	; (800244c <MX_USART1_UART_Init+0x90>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023ec:	4b17      	ldr	r3, [pc, #92]	; (800244c <MX_USART1_UART_Init+0x90>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023f2:	4b16      	ldr	r3, [pc, #88]	; (800244c <MX_USART1_UART_Init+0x90>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023f8:	4b14      	ldr	r3, [pc, #80]	; (800244c <MX_USART1_UART_Init+0x90>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023fe:	4b13      	ldr	r3, [pc, #76]	; (800244c <MX_USART1_UART_Init+0x90>)
 8002400:	2200      	movs	r2, #0
 8002402:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002404:	4811      	ldr	r0, [pc, #68]	; (800244c <MX_USART1_UART_Init+0x90>)
 8002406:	f009 fb41 	bl	800ba8c <HAL_UART_Init>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002410:	f7ff f8e0 	bl	80015d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002414:	2100      	movs	r1, #0
 8002416:	480d      	ldr	r0, [pc, #52]	; (800244c <MX_USART1_UART_Init+0x90>)
 8002418:	f00a fa8e 	bl	800c938 <HAL_UARTEx_SetTxFifoThreshold>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002422:	f7ff f8d7 	bl	80015d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002426:	2100      	movs	r1, #0
 8002428:	4808      	ldr	r0, [pc, #32]	; (800244c <MX_USART1_UART_Init+0x90>)
 800242a:	f00a fac3 	bl	800c9b4 <HAL_UARTEx_SetRxFifoThreshold>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002434:	f7ff f8ce 	bl	80015d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002438:	4804      	ldr	r0, [pc, #16]	; (800244c <MX_USART1_UART_Init+0x90>)
 800243a:	f00a fa44 	bl	800c8c6 <HAL_UARTEx_DisableFifoMode>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002444:	f7ff f8c6 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002448:	bf00      	nop
 800244a:	bd80      	pop	{r7, pc}
 800244c:	24003c30 	.word	0x24003c30
 8002450:	40011000 	.word	0x40011000

08002454 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b0b8      	sub	sp, #224	; 0xe0
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800245c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	60da      	str	r2, [r3, #12]
 800246a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800246c:	f107 0310 	add.w	r3, r7, #16
 8002470:	22bc      	movs	r2, #188	; 0xbc
 8002472:	2100      	movs	r1, #0
 8002474:	4618      	mov	r0, r3
 8002476:	f00b f911 	bl	800d69c <memset>
  if(uartHandle->Instance==USART1)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a24      	ldr	r2, [pc, #144]	; (8002510 <HAL_UART_MspInit+0xbc>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d141      	bne.n	8002508 <HAL_UART_MspInit+0xb4>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002484:	2301      	movs	r3, #1
 8002486:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002488:	2300      	movs	r3, #0
 800248a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800248e:	f107 0310 	add.w	r3, r7, #16
 8002492:	4618      	mov	r0, r3
 8002494:	f005 fb62 	bl	8007b5c <HAL_RCCEx_PeriphCLKConfig>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800249e:	f7ff f899 	bl	80015d4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024a2:	4b1c      	ldr	r3, [pc, #112]	; (8002514 <HAL_UART_MspInit+0xc0>)
 80024a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024a8:	4a1a      	ldr	r2, [pc, #104]	; (8002514 <HAL_UART_MspInit+0xc0>)
 80024aa:	f043 0310 	orr.w	r3, r3, #16
 80024ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80024b2:	4b18      	ldr	r3, [pc, #96]	; (8002514 <HAL_UART_MspInit+0xc0>)
 80024b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024b8:	f003 0310 	and.w	r3, r3, #16
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024c0:	4b14      	ldr	r3, [pc, #80]	; (8002514 <HAL_UART_MspInit+0xc0>)
 80024c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024c6:	4a13      	ldr	r2, [pc, #76]	; (8002514 <HAL_UART_MspInit+0xc0>)
 80024c8:	f043 0302 	orr.w	r3, r3, #2
 80024cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024d0:	4b10      	ldr	r3, [pc, #64]	; (8002514 <HAL_UART_MspInit+0xc0>)
 80024d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	60bb      	str	r3, [r7, #8]
 80024dc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024de:	23c0      	movs	r3, #192	; 0xc0
 80024e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e4:	2302      	movs	r3, #2
 80024e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ea:	2300      	movs	r3, #0
 80024ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f0:	2300      	movs	r3, #0
 80024f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024f6:	2307      	movs	r3, #7
 80024f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002500:	4619      	mov	r1, r3
 8002502:	4805      	ldr	r0, [pc, #20]	; (8002518 <HAL_UART_MspInit+0xc4>)
 8002504:	f004 f908 	bl	8006718 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002508:	bf00      	nop
 800250a:	37e0      	adds	r7, #224	; 0xe0
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40011000 	.word	0x40011000
 8002514:	58024400 	.word	0x58024400
 8002518:	58020400 	.word	0x58020400

0800251c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800251c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002554 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002520:	f7fe f8b2 	bl	8000688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002524:	480c      	ldr	r0, [pc, #48]	; (8002558 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002526:	490d      	ldr	r1, [pc, #52]	; (800255c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002528:	4a0d      	ldr	r2, [pc, #52]	; (8002560 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800252a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800252c:	e002      	b.n	8002534 <LoopCopyDataInit>

0800252e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800252e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002532:	3304      	adds	r3, #4

08002534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002538:	d3f9      	bcc.n	800252e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800253a:	4a0a      	ldr	r2, [pc, #40]	; (8002564 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800253c:	4c0a      	ldr	r4, [pc, #40]	; (8002568 <LoopFillZerobss+0x22>)
  movs r3, #0
 800253e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002540:	e001      	b.n	8002546 <LoopFillZerobss>

08002542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002544:	3204      	adds	r2, #4

08002546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002548:	d3fb      	bcc.n	8002542 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800254a:	f00b f87b 	bl	800d644 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800254e:	f7fe fe89 	bl	8001264 <main>
  bx  lr
 8002552:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002554:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8002558:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800255c:	240035e0 	.word	0x240035e0
  ldr r2, =_sidata
 8002560:	08010384 	.word	0x08010384
  ldr r2, =_sbss
 8002564:	240036a0 	.word	0x240036a0
  ldr r4, =_ebss
 8002568:	240064d4 	.word	0x240064d4

0800256c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800256c:	e7fe      	b.n	800256c <ADC3_IRQHandler>
	...

08002570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002576:	2003      	movs	r0, #3
 8002578:	f001 fa54 	bl	8003a24 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800257c:	f005 f918 	bl	80077b0 <HAL_RCC_GetSysClockFreq>
 8002580:	4602      	mov	r2, r0
 8002582:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <HAL_Init+0x68>)
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	0a1b      	lsrs	r3, r3, #8
 8002588:	f003 030f 	and.w	r3, r3, #15
 800258c:	4913      	ldr	r1, [pc, #76]	; (80025dc <HAL_Init+0x6c>)
 800258e:	5ccb      	ldrb	r3, [r1, r3]
 8002590:	f003 031f 	and.w	r3, r3, #31
 8002594:	fa22 f303 	lsr.w	r3, r2, r3
 8002598:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800259a:	4b0f      	ldr	r3, [pc, #60]	; (80025d8 <HAL_Init+0x68>)
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	4a0e      	ldr	r2, [pc, #56]	; (80025dc <HAL_Init+0x6c>)
 80025a4:	5cd3      	ldrb	r3, [r2, r3]
 80025a6:	f003 031f 	and.w	r3, r3, #31
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	fa22 f303 	lsr.w	r3, r2, r3
 80025b0:	4a0b      	ldr	r2, [pc, #44]	; (80025e0 <HAL_Init+0x70>)
 80025b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025b4:	4a0b      	ldr	r2, [pc, #44]	; (80025e4 <HAL_Init+0x74>)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025ba:	2000      	movs	r0, #0
 80025bc:	f000 f814 	bl	80025e8 <HAL_InitTick>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e002      	b.n	80025d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80025ca:	f7ff fa2d 	bl	8001a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	58024400 	.word	0x58024400
 80025dc:	0800ff50 	.word	0x0800ff50
 80025e0:	24000004 	.word	0x24000004
 80025e4:	24000000 	.word	0x24000000

080025e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80025f0:	4b15      	ldr	r3, [pc, #84]	; (8002648 <HAL_InitTick+0x60>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e021      	b.n	8002640 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80025fc:	4b13      	ldr	r3, [pc, #76]	; (800264c <HAL_InitTick+0x64>)
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	4b11      	ldr	r3, [pc, #68]	; (8002648 <HAL_InitTick+0x60>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	4619      	mov	r1, r3
 8002606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800260a:	fbb3 f3f1 	udiv	r3, r3, r1
 800260e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002612:	4618      	mov	r0, r3
 8002614:	f001 fa39 	bl	8003a8a <HAL_SYSTICK_Config>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e00e      	b.n	8002640 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b0f      	cmp	r3, #15
 8002626:	d80a      	bhi.n	800263e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002628:	2200      	movs	r2, #0
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002630:	f001 fa03 	bl	8003a3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002634:	4a06      	ldr	r2, [pc, #24]	; (8002650 <HAL_InitTick+0x68>)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800263a:	2300      	movs	r3, #0
 800263c:	e000      	b.n	8002640 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
}
 8002640:	4618      	mov	r0, r3
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	2400000c 	.word	0x2400000c
 800264c:	24000000 	.word	0x24000000
 8002650:	24000008 	.word	0x24000008

08002654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002658:	4b06      	ldr	r3, [pc, #24]	; (8002674 <HAL_IncTick+0x20>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	461a      	mov	r2, r3
 800265e:	4b06      	ldr	r3, [pc, #24]	; (8002678 <HAL_IncTick+0x24>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4413      	add	r3, r2
 8002664:	4a04      	ldr	r2, [pc, #16]	; (8002678 <HAL_IncTick+0x24>)
 8002666:	6013      	str	r3, [r2, #0]
}
 8002668:	bf00      	nop
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	2400000c 	.word	0x2400000c
 8002678:	24003cc0 	.word	0x24003cc0

0800267c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  return uwTick;
 8002680:	4b03      	ldr	r3, [pc, #12]	; (8002690 <HAL_GetTick+0x14>)
 8002682:	681b      	ldr	r3, [r3, #0]
}
 8002684:	4618      	mov	r0, r3
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	24003cc0 	.word	0x24003cc0

08002694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800269c:	f7ff ffee 	bl	800267c <HAL_GetTick>
 80026a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026ac:	d005      	beq.n	80026ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026ae:	4b0a      	ldr	r3, [pc, #40]	; (80026d8 <HAL_Delay+0x44>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	461a      	mov	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4413      	add	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026ba:	bf00      	nop
 80026bc:	f7ff ffde 	bl	800267c <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d8f7      	bhi.n	80026bc <HAL_Delay+0x28>
  {
  }
}
 80026cc:	bf00      	nop
 80026ce:	bf00      	nop
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	2400000c 	.word	0x2400000c

080026dc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80026e0:	4b03      	ldr	r3, [pc, #12]	; (80026f0 <HAL_GetREVID+0x14>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	0c1b      	lsrs	r3, r3, #16
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	5c001000 	.word	0x5c001000

080026f4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002704:	4904      	ldr	r1, [pc, #16]	; (8002718 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4313      	orrs	r3, r2
 800270a:	604b      	str	r3, [r1, #4]
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	58000400 	.word	0x58000400

0800271c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002726:	4b07      	ldr	r3, [pc, #28]	; (8002744 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	43db      	mvns	r3, r3
 800272e:	401a      	ands	r2, r3
 8002730:	4904      	ldr	r1, [pc, #16]	; (8002744 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	4313      	orrs	r3, r2
 8002736:	604b      	str	r3, [r1, #4]
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	58000400 	.word	0x58000400

08002748 <HAL_SetFMCMemorySwappingConfig>:
  * @param  BankMapConfig: Defines the FMC Bank mapping configuration. This parameter can be
            FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
  * @retval HAL state
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 8002750:	4b06      	ldr	r3, [pc, #24]	; (800276c <HAL_SetFMCMemorySwappingConfig+0x24>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002758:	4904      	ldr	r1, [pc, #16]	; (800276c <HAL_SetFMCMemorySwappingConfig+0x24>)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4313      	orrs	r3, r2
 800275e:	600b      	str	r3, [r1, #0]
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	52004000 	.word	0x52004000

08002770 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	431a      	orrs	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	609a      	str	r2, [r3, #8]
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
 800279e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	609a      	str	r2, [r3, #8]
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80027d8:	b480      	push	{r7}
 80027da:	b087      	sub	sp, #28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
 80027e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	3360      	adds	r3, #96	; 0x60
 80027ea:	461a      	mov	r2, r3
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	430b      	orrs	r3, r1
 8002806:	431a      	orrs	r2, r3
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800280c:	bf00      	nop
 800280e:	371c      	adds	r7, #28
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	f003 031f 	and.w	r3, r3, #31
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	fa01 f303 	lsl.w	r3, r1, r3
 8002838:	431a      	orrs	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	611a      	str	r2, [r3, #16]
}
 800283e:	bf00      	nop
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800284a:	b480      	push	{r7}
 800284c:	b087      	sub	sp, #28
 800284e:	af00      	add	r7, sp, #0
 8002850:	60f8      	str	r0, [r7, #12]
 8002852:	60b9      	str	r1, [r7, #8]
 8002854:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	3360      	adds	r3, #96	; 0x60
 800285a:	461a      	mov	r2, r3
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	431a      	orrs	r2, r3
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	601a      	str	r2, [r3, #0]
  }
}
 8002874:	bf00      	nop
 8002876:	371c      	adds	r7, #28
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002880:	b480      	push	{r7}
 8002882:	b087      	sub	sp, #28
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	3330      	adds	r3, #48	; 0x30
 8002890:	461a      	mov	r2, r3
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	0a1b      	lsrs	r3, r3, #8
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	f003 030c 	and.w	r3, r3, #12
 800289c:	4413      	add	r3, r2
 800289e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	f003 031f 	and.w	r3, r3, #31
 80028aa:	211f      	movs	r1, #31
 80028ac:	fa01 f303 	lsl.w	r3, r1, r3
 80028b0:	43db      	mvns	r3, r3
 80028b2:	401a      	ands	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	0e9b      	lsrs	r3, r3, #26
 80028b8:	f003 011f 	and.w	r1, r3, #31
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	f003 031f 	and.w	r3, r3, #31
 80028c2:	fa01 f303 	lsl.w	r3, r1, r3
 80028c6:	431a      	orrs	r2, r3
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80028cc:	bf00      	nop
 80028ce:	371c      	adds	r7, #28
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80028d8:	b480      	push	{r7}
 80028da:	b087      	sub	sp, #28
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	3314      	adds	r3, #20
 80028e8:	461a      	mov	r2, r3
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	0e5b      	lsrs	r3, r3, #25
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	4413      	add	r3, r2
 80028f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	0d1b      	lsrs	r3, r3, #20
 8002900:	f003 031f 	and.w	r3, r3, #31
 8002904:	2107      	movs	r1, #7
 8002906:	fa01 f303 	lsl.w	r3, r1, r3
 800290a:	43db      	mvns	r3, r3
 800290c:	401a      	ands	r2, r3
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	0d1b      	lsrs	r3, r3, #20
 8002912:	f003 031f 	and.w	r3, r3, #31
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	fa01 f303 	lsl.w	r3, r1, r3
 800291c:	431a      	orrs	r2, r3
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002922:	bf00      	nop
 8002924:	371c      	adds	r7, #28
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
	...

08002930 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002948:	43db      	mvns	r3, r3
 800294a:	401a      	ands	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f003 0318 	and.w	r3, r3, #24
 8002952:	4908      	ldr	r1, [pc, #32]	; (8002974 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002954:	40d9      	lsrs	r1, r3
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	400b      	ands	r3, r1
 800295a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800295e:	431a      	orrs	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002966:	bf00      	nop
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	000fffff 	.word	0x000fffff

08002978 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	4b04      	ldr	r3, [pc, #16]	; (8002998 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002986:	4013      	ands	r3, r2
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6093      	str	r3, [r2, #8]
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	5fffffc0 	.word	0x5fffffc0

0800299c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029b0:	d101      	bne.n	80029b6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80029b2:	2301      	movs	r3, #1
 80029b4:	e000      	b.n	80029b8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <LL_ADC_EnableInternalRegulator+0x24>)
 80029d2:	4013      	ands	r3, r2
 80029d4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	6fffffc0 	.word	0x6fffffc0

080029ec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a00:	d101      	bne.n	8002a06 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a02:	2301      	movs	r3, #1
 8002a04:	e000      	b.n	8002a08 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d101      	bne.n	8002a2c <LL_ADC_IsEnabled+0x18>
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e000      	b.n	8002a2e <LL_ADC_IsEnabled+0x1a>
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 0304 	and.w	r3, r3, #4
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d101      	bne.n	8002a52 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e000      	b.n	8002a54 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 0308 	and.w	r3, r3, #8
 8002a70:	2b08      	cmp	r3, #8
 8002a72:	d101      	bne.n	8002a78 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002a74:	2301      	movs	r3, #1
 8002a76:	e000      	b.n	8002a7a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
	...

08002a88 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a88:	b590      	push	{r4, r7, lr}
 8002a8a:	b089      	sub	sp, #36	; 0x24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a90:	2300      	movs	r3, #0
 8002a92:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e18e      	b.n	8002dc0 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d109      	bne.n	8002ac4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f7fd ffc5 	bl	8000a40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff ff67 	bl	800299c <LL_ADC_IsDeepPowerDownEnabled>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d004      	beq.n	8002ade <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff ff4d 	bl	8002978 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff ff82 	bl	80029ec <LL_ADC_IsInternalRegulatorEnabled>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d114      	bne.n	8002b18 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff ff66 	bl	80029c4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002af8:	4b9a      	ldr	r3, [pc, #616]	; (8002d64 <HAL_ADC_Init+0x2dc>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	099b      	lsrs	r3, r3, #6
 8002afe:	4a9a      	ldr	r2, [pc, #616]	; (8002d68 <HAL_ADC_Init+0x2e0>)
 8002b00:	fba2 2303 	umull	r2, r3, r2, r3
 8002b04:	099b      	lsrs	r3, r3, #6
 8002b06:	3301      	adds	r3, #1
 8002b08:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b0a:	e002      	b.n	8002b12 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1f9      	bne.n	8002b0c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff ff65 	bl	80029ec <LL_ADC_IsInternalRegulatorEnabled>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10d      	bne.n	8002b44 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2c:	f043 0210 	orr.w	r2, r3, #16
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b38:	f043 0201 	orr.w	r2, r3, #1
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff ff76 	bl	8002a3a <LL_ADC_REG_IsConversionOngoing>
 8002b4e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b54:	f003 0310 	and.w	r3, r3, #16
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f040 8128 	bne.w	8002dae <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f040 8124 	bne.w	8002dae <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002b6e:	f043 0202 	orr.w	r2, r3, #2
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff ff4a 	bl	8002a14 <LL_ADC_IsEnabled>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d136      	bne.n	8002bf4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a78      	ldr	r2, [pc, #480]	; (8002d6c <HAL_ADC_Init+0x2e4>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d004      	beq.n	8002b9a <HAL_ADC_Init+0x112>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a76      	ldr	r2, [pc, #472]	; (8002d70 <HAL_ADC_Init+0x2e8>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d10e      	bne.n	8002bb8 <HAL_ADC_Init+0x130>
 8002b9a:	4874      	ldr	r0, [pc, #464]	; (8002d6c <HAL_ADC_Init+0x2e4>)
 8002b9c:	f7ff ff3a 	bl	8002a14 <LL_ADC_IsEnabled>
 8002ba0:	4604      	mov	r4, r0
 8002ba2:	4873      	ldr	r0, [pc, #460]	; (8002d70 <HAL_ADC_Init+0x2e8>)
 8002ba4:	f7ff ff36 	bl	8002a14 <LL_ADC_IsEnabled>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	4323      	orrs	r3, r4
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	bf0c      	ite	eq
 8002bb0:	2301      	moveq	r3, #1
 8002bb2:	2300      	movne	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	e008      	b.n	8002bca <HAL_ADC_Init+0x142>
 8002bb8:	486e      	ldr	r0, [pc, #440]	; (8002d74 <HAL_ADC_Init+0x2ec>)
 8002bba:	f7ff ff2b 	bl	8002a14 <LL_ADC_IsEnabled>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	bf0c      	ite	eq
 8002bc4:	2301      	moveq	r3, #1
 8002bc6:	2300      	movne	r3, #0
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d012      	beq.n	8002bf4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a66      	ldr	r2, [pc, #408]	; (8002d6c <HAL_ADC_Init+0x2e4>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d004      	beq.n	8002be2 <HAL_ADC_Init+0x15a>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a64      	ldr	r2, [pc, #400]	; (8002d70 <HAL_ADC_Init+0x2e8>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d101      	bne.n	8002be6 <HAL_ADC_Init+0x15e>
 8002be2:	4a65      	ldr	r2, [pc, #404]	; (8002d78 <HAL_ADC_Init+0x2f0>)
 8002be4:	e000      	b.n	8002be8 <HAL_ADC_Init+0x160>
 8002be6:	4a65      	ldr	r2, [pc, #404]	; (8002d7c <HAL_ADC_Init+0x2f4>)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	4619      	mov	r1, r3
 8002bee:	4610      	mov	r0, r2
 8002bf0:	f7ff fdbe 	bl	8002770 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002bf4:	f7ff fd72 	bl	80026dc <HAL_GetREVID>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	f241 0203 	movw	r2, #4099	; 0x1003
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d914      	bls.n	8002c2c <HAL_ADC_Init+0x1a4>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	2b10      	cmp	r3, #16
 8002c08:	d110      	bne.n	8002c2c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	7d5b      	ldrb	r3, [r3, #21]
 8002c0e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c14:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002c1a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	7f1b      	ldrb	r3, [r3, #28]
 8002c20:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002c22:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c24:	f043 030c 	orr.w	r3, r3, #12
 8002c28:	61bb      	str	r3, [r7, #24]
 8002c2a:	e00d      	b.n	8002c48 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	7d5b      	ldrb	r3, [r3, #21]
 8002c30:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c36:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002c3c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	7f1b      	ldrb	r3, [r3, #28]
 8002c42:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c44:	4313      	orrs	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	7f1b      	ldrb	r3, [r3, #28]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d106      	bne.n	8002c5e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	3b01      	subs	r3, #1
 8002c56:	045b      	lsls	r3, r3, #17
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d009      	beq.n	8002c7a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c72:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	4b3f      	ldr	r3, [pc, #252]	; (8002d80 <HAL_ADC_Init+0x2f8>)
 8002c82:	4013      	ands	r3, r2
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6812      	ldr	r2, [r2, #0]
 8002c88:	69b9      	ldr	r1, [r7, #24]
 8002c8a:	430b      	orrs	r3, r1
 8002c8c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff fed1 	bl	8002a3a <LL_ADC_REG_IsConversionOngoing>
 8002c98:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff fede 	bl	8002a60 <LL_ADC_INJ_IsConversionOngoing>
 8002ca4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d14a      	bne.n	8002d42 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d147      	bne.n	8002d42 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	7d1b      	ldrb	r3, [r3, #20]
 8002cb6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68da      	ldr	r2, [r3, #12]
 8002cc6:	4b2f      	ldr	r3, [pc, #188]	; (8002d84 <HAL_ADC_Init+0x2fc>)
 8002cc8:	4013      	ands	r3, r2
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	6812      	ldr	r2, [r2, #0]
 8002cce:	69b9      	ldr	r1, [r7, #24]
 8002cd0:	430b      	orrs	r3, r1
 8002cd2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d11b      	bne.n	8002d16 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691a      	ldr	r2, [r3, #16]
 8002cea:	4b27      	ldr	r3, [pc, #156]	; (8002d88 <HAL_ADC_Init+0x300>)
 8002cec:	4013      	ands	r3, r2
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002cf2:	3a01      	subs	r2, #1
 8002cf4:	0411      	lsls	r1, r2, #16
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002cfa:	4311      	orrs	r1, r2
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002d00:	4311      	orrs	r1, r2
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d06:	430a      	orrs	r2, r1
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0201 	orr.w	r2, r2, #1
 8002d12:	611a      	str	r2, [r3, #16]
 8002d14:	e007      	b.n	8002d26 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	691a      	ldr	r2, [r3, #16]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0201 	bic.w	r2, r2, #1
 8002d24:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 fb93 	bl	8003468 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d120      	bne.n	8002d8c <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d50:	f023 010f 	bic.w	r1, r3, #15
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	1e5a      	subs	r2, r3, #1
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	631a      	str	r2, [r3, #48]	; 0x30
 8002d62:	e01b      	b.n	8002d9c <HAL_ADC_Init+0x314>
 8002d64:	24000000 	.word	0x24000000
 8002d68:	053e2d63 	.word	0x053e2d63
 8002d6c:	40022000 	.word	0x40022000
 8002d70:	40022100 	.word	0x40022100
 8002d74:	58026000 	.word	0x58026000
 8002d78:	40022300 	.word	0x40022300
 8002d7c:	58026300 	.word	0x58026300
 8002d80:	fff0c003 	.word	0xfff0c003
 8002d84:	ffffbffc 	.word	0xffffbffc
 8002d88:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 020f 	bic.w	r2, r2, #15
 8002d9a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da0:	f023 0303 	bic.w	r3, r3, #3
 8002da4:	f043 0201 	orr.w	r2, r3, #1
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	655a      	str	r2, [r3, #84]	; 0x54
 8002dac:	e007      	b.n	8002dbe <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db2:	f043 0210 	orr.w	r2, r3, #16
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002dbe:	7ffb      	ldrb	r3, [r7, #31]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3724      	adds	r7, #36	; 0x24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd90      	pop	{r4, r7, pc}

08002dc8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002dc8:	b590      	push	{r4, r7, lr}
 8002dca:	b0a1      	sub	sp, #132	; 0x84
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	4a9d      	ldr	r2, [pc, #628]	; (8003058 <HAL_ADC_ConfigChannel+0x290>)
 8002de2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d101      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x2a>
 8002dee:	2302      	movs	r3, #2
 8002df0:	e321      	b.n	8003436 <HAL_ADC_ConfigChannel+0x66e>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff fe1b 	bl	8002a3a <LL_ADC_REG_IsConversionOngoing>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f040 8306 	bne.w	8003418 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d108      	bne.n	8002e2a <HAL_ADC_ConfigChannel+0x62>
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	0e9b      	lsrs	r3, r3, #26
 8002e1e:	f003 031f 	and.w	r3, r3, #31
 8002e22:	2201      	movs	r2, #1
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	e016      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x90>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e32:	fa93 f3a3 	rbit	r3, r3
 8002e36:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e3a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002e42:	2320      	movs	r3, #32
 8002e44:	e003      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002e46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e48:	fab3 f383 	clz	r3, r3
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	f003 031f 	and.w	r3, r3, #31
 8002e52:	2201      	movs	r2, #1
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6812      	ldr	r2, [r2, #0]
 8002e5c:	69d1      	ldr	r1, [r2, #28]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6812      	ldr	r2, [r2, #0]
 8002e62:	430b      	orrs	r3, r1
 8002e64:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6818      	ldr	r0, [r3, #0]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	6859      	ldr	r1, [r3, #4]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	461a      	mov	r2, r3
 8002e74:	f7ff fd04 	bl	8002880 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff fddc 	bl	8002a3a <LL_ADC_REG_IsConversionOngoing>
 8002e82:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff fde9 	bl	8002a60 <LL_ADC_INJ_IsConversionOngoing>
 8002e8e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f040 80b3 	bne.w	8002ffe <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f040 80af 	bne.w	8002ffe <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6818      	ldr	r0, [r3, #0]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	6819      	ldr	r1, [r3, #0]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	461a      	mov	r2, r3
 8002eae:	f7ff fd13 	bl	80028d8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002eb2:	4b6a      	ldr	r3, [pc, #424]	; (800305c <HAL_ADC_ConfigChannel+0x294>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002eba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ebe:	d10b      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x110>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	695a      	ldr	r2, [r3, #20]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	089b      	lsrs	r3, r3, #2
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	e01d      	b.n	8002f14 <HAL_ADC_ConfigChannel+0x14c>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	f003 0310 	and.w	r3, r3, #16
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10b      	bne.n	8002efe <HAL_ADC_ConfigChannel+0x136>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	695a      	ldr	r2, [r3, #20]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	089b      	lsrs	r3, r3, #2
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	e00a      	b.n	8002f14 <HAL_ADC_ConfigChannel+0x14c>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	695a      	ldr	r2, [r3, #20]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	089b      	lsrs	r3, r3, #2
 8002f0a:	f003 0304 	and.w	r3, r3, #4
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	d027      	beq.n	8002f6e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6818      	ldr	r0, [r3, #0]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	6919      	ldr	r1, [r3, #16]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f2c:	f7ff fc54 	bl	80027d8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6818      	ldr	r0, [r3, #0]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	6919      	ldr	r1, [r3, #16]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	7e5b      	ldrb	r3, [r3, #25]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d102      	bne.n	8002f46 <HAL_ADC_ConfigChannel+0x17e>
 8002f40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002f44:	e000      	b.n	8002f48 <HAL_ADC_ConfigChannel+0x180>
 8002f46:	2300      	movs	r3, #0
 8002f48:	461a      	mov	r2, r3
 8002f4a:	f7ff fc7e 	bl	800284a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6818      	ldr	r0, [r3, #0]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	6919      	ldr	r1, [r3, #16]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	7e1b      	ldrb	r3, [r3, #24]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d102      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x19c>
 8002f5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f62:	e000      	b.n	8002f66 <HAL_ADC_ConfigChannel+0x19e>
 8002f64:	2300      	movs	r3, #0
 8002f66:	461a      	mov	r2, r3
 8002f68:	f7ff fc56 	bl	8002818 <LL_ADC_SetDataRightShift>
 8002f6c:	e047      	b.n	8002ffe <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f74:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	069b      	lsls	r3, r3, #26
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d107      	bne.n	8002f92 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f90:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	069b      	lsls	r3, r3, #26
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d107      	bne.n	8002fb6 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002fb4:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fbc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	069b      	lsls	r3, r3, #26
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d107      	bne.n	8002fda <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002fd8:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fe0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	069b      	lsls	r3, r3, #26
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d107      	bne.n	8002ffe <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ffc:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff fd06 	bl	8002a14 <LL_ADC_IsEnabled>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	f040 820d 	bne.w	800342a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6818      	ldr	r0, [r3, #0]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	6819      	ldr	r1, [r3, #0]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	461a      	mov	r2, r3
 800301e:	f7ff fc87 	bl	8002930 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	4a0c      	ldr	r2, [pc, #48]	; (8003058 <HAL_ADC_ConfigChannel+0x290>)
 8003028:	4293      	cmp	r3, r2
 800302a:	f040 8133 	bne.w	8003294 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800303a:	2b00      	cmp	r3, #0
 800303c:	d110      	bne.n	8003060 <HAL_ADC_ConfigChannel+0x298>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	0e9b      	lsrs	r3, r3, #26
 8003044:	3301      	adds	r3, #1
 8003046:	f003 031f 	and.w	r3, r3, #31
 800304a:	2b09      	cmp	r3, #9
 800304c:	bf94      	ite	ls
 800304e:	2301      	movls	r3, #1
 8003050:	2300      	movhi	r3, #0
 8003052:	b2db      	uxtb	r3, r3
 8003054:	e01e      	b.n	8003094 <HAL_ADC_ConfigChannel+0x2cc>
 8003056:	bf00      	nop
 8003058:	47ff0000 	.word	0x47ff0000
 800305c:	5c001000 	.word	0x5c001000
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003066:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003068:	fa93 f3a3 	rbit	r3, r3
 800306c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800306e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003070:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003072:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003074:	2b00      	cmp	r3, #0
 8003076:	d101      	bne.n	800307c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003078:	2320      	movs	r3, #32
 800307a:	e003      	b.n	8003084 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800307c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800307e:	fab3 f383 	clz	r3, r3
 8003082:	b2db      	uxtb	r3, r3
 8003084:	3301      	adds	r3, #1
 8003086:	f003 031f 	and.w	r3, r3, #31
 800308a:	2b09      	cmp	r3, #9
 800308c:	bf94      	ite	ls
 800308e:	2301      	movls	r3, #1
 8003090:	2300      	movhi	r3, #0
 8003092:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003094:	2b00      	cmp	r3, #0
 8003096:	d079      	beq.n	800318c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d107      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x2ec>
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	0e9b      	lsrs	r3, r3, #26
 80030aa:	3301      	adds	r3, #1
 80030ac:	069b      	lsls	r3, r3, #26
 80030ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030b2:	e015      	b.n	80030e0 <HAL_ADC_ConfigChannel+0x318>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030bc:	fa93 f3a3 	rbit	r3, r3
 80030c0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80030c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030c4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80030c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80030cc:	2320      	movs	r3, #32
 80030ce:	e003      	b.n	80030d8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80030d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030d2:	fab3 f383 	clz	r3, r3
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	3301      	adds	r3, #1
 80030da:	069b      	lsls	r3, r3, #26
 80030dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d109      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x338>
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	0e9b      	lsrs	r3, r3, #26
 80030f2:	3301      	adds	r3, #1
 80030f4:	f003 031f 	and.w	r3, r3, #31
 80030f8:	2101      	movs	r1, #1
 80030fa:	fa01 f303 	lsl.w	r3, r1, r3
 80030fe:	e017      	b.n	8003130 <HAL_ADC_ConfigChannel+0x368>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003108:	fa93 f3a3 	rbit	r3, r3
 800310c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800310e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003110:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003112:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003118:	2320      	movs	r3, #32
 800311a:	e003      	b.n	8003124 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 800311c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800311e:	fab3 f383 	clz	r3, r3
 8003122:	b2db      	uxtb	r3, r3
 8003124:	3301      	adds	r3, #1
 8003126:	f003 031f 	and.w	r3, r3, #31
 800312a:	2101      	movs	r1, #1
 800312c:	fa01 f303 	lsl.w	r3, r1, r3
 8003130:	ea42 0103 	orr.w	r1, r2, r3
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10a      	bne.n	8003156 <HAL_ADC_ConfigChannel+0x38e>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	0e9b      	lsrs	r3, r3, #26
 8003146:	3301      	adds	r3, #1
 8003148:	f003 021f 	and.w	r2, r3, #31
 800314c:	4613      	mov	r3, r2
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	4413      	add	r3, r2
 8003152:	051b      	lsls	r3, r3, #20
 8003154:	e018      	b.n	8003188 <HAL_ADC_ConfigChannel+0x3c0>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800315e:	fa93 f3a3 	rbit	r3, r3
 8003162:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003166:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800316e:	2320      	movs	r3, #32
 8003170:	e003      	b.n	800317a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003174:	fab3 f383 	clz	r3, r3
 8003178:	b2db      	uxtb	r3, r3
 800317a:	3301      	adds	r3, #1
 800317c:	f003 021f 	and.w	r2, r3, #31
 8003180:	4613      	mov	r3, r2
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	4413      	add	r3, r2
 8003186:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003188:	430b      	orrs	r3, r1
 800318a:	e07e      	b.n	800328a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003194:	2b00      	cmp	r3, #0
 8003196:	d107      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x3e0>
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	0e9b      	lsrs	r3, r3, #26
 800319e:	3301      	adds	r3, #1
 80031a0:	069b      	lsls	r3, r3, #26
 80031a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031a6:	e015      	b.n	80031d4 <HAL_ADC_ConfigChannel+0x40c>
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b0:	fa93 f3a3 	rbit	r3, r3
 80031b4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80031ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d101      	bne.n	80031c4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80031c0:	2320      	movs	r3, #32
 80031c2:	e003      	b.n	80031cc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80031c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c6:	fab3 f383 	clz	r3, r3
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	3301      	adds	r3, #1
 80031ce:	069b      	lsls	r3, r3, #26
 80031d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d109      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x42c>
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	0e9b      	lsrs	r3, r3, #26
 80031e6:	3301      	adds	r3, #1
 80031e8:	f003 031f 	and.w	r3, r3, #31
 80031ec:	2101      	movs	r1, #1
 80031ee:	fa01 f303 	lsl.w	r3, r1, r3
 80031f2:	e017      	b.n	8003224 <HAL_ADC_ConfigChannel+0x45c>
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	fa93 f3a3 	rbit	r3, r3
 8003200:	61bb      	str	r3, [r7, #24]
  return result;
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 800320c:	2320      	movs	r3, #32
 800320e:	e003      	b.n	8003218 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003210:	6a3b      	ldr	r3, [r7, #32]
 8003212:	fab3 f383 	clz	r3, r3
 8003216:	b2db      	uxtb	r3, r3
 8003218:	3301      	adds	r3, #1
 800321a:	f003 031f 	and.w	r3, r3, #31
 800321e:	2101      	movs	r1, #1
 8003220:	fa01 f303 	lsl.w	r3, r1, r3
 8003224:	ea42 0103 	orr.w	r1, r2, r3
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10d      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x488>
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	0e9b      	lsrs	r3, r3, #26
 800323a:	3301      	adds	r3, #1
 800323c:	f003 021f 	and.w	r2, r3, #31
 8003240:	4613      	mov	r3, r2
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	4413      	add	r3, r2
 8003246:	3b1e      	subs	r3, #30
 8003248:	051b      	lsls	r3, r3, #20
 800324a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800324e:	e01b      	b.n	8003288 <HAL_ADC_ConfigChannel+0x4c0>
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	fa93 f3a3 	rbit	r3, r3
 800325c:	60fb      	str	r3, [r7, #12]
  return result;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d101      	bne.n	800326c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003268:	2320      	movs	r3, #32
 800326a:	e003      	b.n	8003274 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	fab3 f383 	clz	r3, r3
 8003272:	b2db      	uxtb	r3, r3
 8003274:	3301      	adds	r3, #1
 8003276:	f003 021f 	and.w	r2, r3, #31
 800327a:	4613      	mov	r3, r2
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	4413      	add	r3, r2
 8003280:	3b1e      	subs	r3, #30
 8003282:	051b      	lsls	r3, r3, #20
 8003284:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003288:	430b      	orrs	r3, r1
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	6892      	ldr	r2, [r2, #8]
 800328e:	4619      	mov	r1, r3
 8003290:	f7ff fb22 	bl	80028d8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	f280 80c6 	bge.w	800342a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a67      	ldr	r2, [pc, #412]	; (8003440 <HAL_ADC_ConfigChannel+0x678>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d004      	beq.n	80032b2 <HAL_ADC_ConfigChannel+0x4ea>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a65      	ldr	r2, [pc, #404]	; (8003444 <HAL_ADC_ConfigChannel+0x67c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d101      	bne.n	80032b6 <HAL_ADC_ConfigChannel+0x4ee>
 80032b2:	4b65      	ldr	r3, [pc, #404]	; (8003448 <HAL_ADC_ConfigChannel+0x680>)
 80032b4:	e000      	b.n	80032b8 <HAL_ADC_ConfigChannel+0x4f0>
 80032b6:	4b65      	ldr	r3, [pc, #404]	; (800344c <HAL_ADC_ConfigChannel+0x684>)
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff fa7f 	bl	80027bc <LL_ADC_GetCommonPathInternalCh>
 80032be:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a5e      	ldr	r2, [pc, #376]	; (8003440 <HAL_ADC_ConfigChannel+0x678>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d004      	beq.n	80032d4 <HAL_ADC_ConfigChannel+0x50c>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a5d      	ldr	r2, [pc, #372]	; (8003444 <HAL_ADC_ConfigChannel+0x67c>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d10e      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x52a>
 80032d4:	485a      	ldr	r0, [pc, #360]	; (8003440 <HAL_ADC_ConfigChannel+0x678>)
 80032d6:	f7ff fb9d 	bl	8002a14 <LL_ADC_IsEnabled>
 80032da:	4604      	mov	r4, r0
 80032dc:	4859      	ldr	r0, [pc, #356]	; (8003444 <HAL_ADC_ConfigChannel+0x67c>)
 80032de:	f7ff fb99 	bl	8002a14 <LL_ADC_IsEnabled>
 80032e2:	4603      	mov	r3, r0
 80032e4:	4323      	orrs	r3, r4
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	bf0c      	ite	eq
 80032ea:	2301      	moveq	r3, #1
 80032ec:	2300      	movne	r3, #0
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	e008      	b.n	8003304 <HAL_ADC_ConfigChannel+0x53c>
 80032f2:	4857      	ldr	r0, [pc, #348]	; (8003450 <HAL_ADC_ConfigChannel+0x688>)
 80032f4:	f7ff fb8e 	bl	8002a14 <LL_ADC_IsEnabled>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	bf0c      	ite	eq
 80032fe:	2301      	moveq	r3, #1
 8003300:	2300      	movne	r3, #0
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	d07d      	beq.n	8003404 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a51      	ldr	r2, [pc, #324]	; (8003454 <HAL_ADC_ConfigChannel+0x68c>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d130      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x5ac>
 8003312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003314:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d12b      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a4b      	ldr	r2, [pc, #300]	; (8003450 <HAL_ADC_ConfigChannel+0x688>)
 8003322:	4293      	cmp	r3, r2
 8003324:	f040 8081 	bne.w	800342a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a44      	ldr	r2, [pc, #272]	; (8003440 <HAL_ADC_ConfigChannel+0x678>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d004      	beq.n	800333c <HAL_ADC_ConfigChannel+0x574>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a43      	ldr	r2, [pc, #268]	; (8003444 <HAL_ADC_ConfigChannel+0x67c>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d101      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x578>
 800333c:	4a42      	ldr	r2, [pc, #264]	; (8003448 <HAL_ADC_ConfigChannel+0x680>)
 800333e:	e000      	b.n	8003342 <HAL_ADC_ConfigChannel+0x57a>
 8003340:	4a42      	ldr	r2, [pc, #264]	; (800344c <HAL_ADC_ConfigChannel+0x684>)
 8003342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003344:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003348:	4619      	mov	r1, r3
 800334a:	4610      	mov	r0, r2
 800334c:	f7ff fa23 	bl	8002796 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003350:	4b41      	ldr	r3, [pc, #260]	; (8003458 <HAL_ADC_ConfigChannel+0x690>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	099b      	lsrs	r3, r3, #6
 8003356:	4a41      	ldr	r2, [pc, #260]	; (800345c <HAL_ADC_ConfigChannel+0x694>)
 8003358:	fba2 2303 	umull	r2, r3, r2, r3
 800335c:	099b      	lsrs	r3, r3, #6
 800335e:	3301      	adds	r3, #1
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003364:	e002      	b.n	800336c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	3b01      	subs	r3, #1
 800336a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1f9      	bne.n	8003366 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003372:	e05a      	b.n	800342a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a39      	ldr	r2, [pc, #228]	; (8003460 <HAL_ADC_ConfigChannel+0x698>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d11e      	bne.n	80033bc <HAL_ADC_ConfigChannel+0x5f4>
 800337e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003380:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d119      	bne.n	80033bc <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a30      	ldr	r2, [pc, #192]	; (8003450 <HAL_ADC_ConfigChannel+0x688>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d14b      	bne.n	800342a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a2a      	ldr	r2, [pc, #168]	; (8003440 <HAL_ADC_ConfigChannel+0x678>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d004      	beq.n	80033a6 <HAL_ADC_ConfigChannel+0x5de>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a28      	ldr	r2, [pc, #160]	; (8003444 <HAL_ADC_ConfigChannel+0x67c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d101      	bne.n	80033aa <HAL_ADC_ConfigChannel+0x5e2>
 80033a6:	4a28      	ldr	r2, [pc, #160]	; (8003448 <HAL_ADC_ConfigChannel+0x680>)
 80033a8:	e000      	b.n	80033ac <HAL_ADC_ConfigChannel+0x5e4>
 80033aa:	4a28      	ldr	r2, [pc, #160]	; (800344c <HAL_ADC_ConfigChannel+0x684>)
 80033ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033b2:	4619      	mov	r1, r3
 80033b4:	4610      	mov	r0, r2
 80033b6:	f7ff f9ee 	bl	8002796 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033ba:	e036      	b.n	800342a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a28      	ldr	r2, [pc, #160]	; (8003464 <HAL_ADC_ConfigChannel+0x69c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d131      	bne.n	800342a <HAL_ADC_ConfigChannel+0x662>
 80033c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d12c      	bne.n	800342a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a1e      	ldr	r2, [pc, #120]	; (8003450 <HAL_ADC_ConfigChannel+0x688>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d127      	bne.n	800342a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a18      	ldr	r2, [pc, #96]	; (8003440 <HAL_ADC_ConfigChannel+0x678>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d004      	beq.n	80033ee <HAL_ADC_ConfigChannel+0x626>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a16      	ldr	r2, [pc, #88]	; (8003444 <HAL_ADC_ConfigChannel+0x67c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d101      	bne.n	80033f2 <HAL_ADC_ConfigChannel+0x62a>
 80033ee:	4a16      	ldr	r2, [pc, #88]	; (8003448 <HAL_ADC_ConfigChannel+0x680>)
 80033f0:	e000      	b.n	80033f4 <HAL_ADC_ConfigChannel+0x62c>
 80033f2:	4a16      	ldr	r2, [pc, #88]	; (800344c <HAL_ADC_ConfigChannel+0x684>)
 80033f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033fa:	4619      	mov	r1, r3
 80033fc:	4610      	mov	r0, r2
 80033fe:	f7ff f9ca 	bl	8002796 <LL_ADC_SetCommonPathInternalCh>
 8003402:	e012      	b.n	800342a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003408:	f043 0220 	orr.w	r2, r3, #32
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003416:	e008      	b.n	800342a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341c:	f043 0220 	orr.w	r2, r3, #32
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003432:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003436:	4618      	mov	r0, r3
 8003438:	3784      	adds	r7, #132	; 0x84
 800343a:	46bd      	mov	sp, r7
 800343c:	bd90      	pop	{r4, r7, pc}
 800343e:	bf00      	nop
 8003440:	40022000 	.word	0x40022000
 8003444:	40022100 	.word	0x40022100
 8003448:	40022300 	.word	0x40022300
 800344c:	58026300 	.word	0x58026300
 8003450:	58026000 	.word	0x58026000
 8003454:	cb840000 	.word	0xcb840000
 8003458:	24000000 	.word	0x24000000
 800345c:	053e2d63 	.word	0x053e2d63
 8003460:	c7520000 	.word	0xc7520000
 8003464:	cfb80000 	.word	0xcfb80000

08003468 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a79      	ldr	r2, [pc, #484]	; (800365c <ADC_ConfigureBoostMode+0x1f4>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d004      	beq.n	8003484 <ADC_ConfigureBoostMode+0x1c>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a78      	ldr	r2, [pc, #480]	; (8003660 <ADC_ConfigureBoostMode+0x1f8>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d109      	bne.n	8003498 <ADC_ConfigureBoostMode+0x30>
 8003484:	4b77      	ldr	r3, [pc, #476]	; (8003664 <ADC_ConfigureBoostMode+0x1fc>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800348c:	2b00      	cmp	r3, #0
 800348e:	bf14      	ite	ne
 8003490:	2301      	movne	r3, #1
 8003492:	2300      	moveq	r3, #0
 8003494:	b2db      	uxtb	r3, r3
 8003496:	e008      	b.n	80034aa <ADC_ConfigureBoostMode+0x42>
 8003498:	4b73      	ldr	r3, [pc, #460]	; (8003668 <ADC_ConfigureBoostMode+0x200>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	bf14      	ite	ne
 80034a4:	2301      	movne	r3, #1
 80034a6:	2300      	moveq	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d01c      	beq.n	80034e8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80034ae:	f004 faf9 	bl	8007aa4 <HAL_RCC_GetHCLKFreq>
 80034b2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80034bc:	d010      	beq.n	80034e0 <ADC_ConfigureBoostMode+0x78>
 80034be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80034c2:	d871      	bhi.n	80035a8 <ADC_ConfigureBoostMode+0x140>
 80034c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034c8:	d002      	beq.n	80034d0 <ADC_ConfigureBoostMode+0x68>
 80034ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034ce:	d16b      	bne.n	80035a8 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	0c1b      	lsrs	r3, r3, #16
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034dc:	60fb      	str	r3, [r7, #12]
        break;
 80034de:	e066      	b.n	80035ae <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	089b      	lsrs	r3, r3, #2
 80034e4:	60fb      	str	r3, [r7, #12]
        break;
 80034e6:	e062      	b.n	80035ae <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80034e8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80034ec:	f005 fa76 	bl	80089dc <HAL_RCCEx_GetPeriphCLKFreq>
 80034f0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80034fa:	d051      	beq.n	80035a0 <ADC_ConfigureBoostMode+0x138>
 80034fc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003500:	d854      	bhi.n	80035ac <ADC_ConfigureBoostMode+0x144>
 8003502:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003506:	d047      	beq.n	8003598 <ADC_ConfigureBoostMode+0x130>
 8003508:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800350c:	d84e      	bhi.n	80035ac <ADC_ConfigureBoostMode+0x144>
 800350e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003512:	d03d      	beq.n	8003590 <ADC_ConfigureBoostMode+0x128>
 8003514:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003518:	d848      	bhi.n	80035ac <ADC_ConfigureBoostMode+0x144>
 800351a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800351e:	d033      	beq.n	8003588 <ADC_ConfigureBoostMode+0x120>
 8003520:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003524:	d842      	bhi.n	80035ac <ADC_ConfigureBoostMode+0x144>
 8003526:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800352a:	d029      	beq.n	8003580 <ADC_ConfigureBoostMode+0x118>
 800352c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003530:	d83c      	bhi.n	80035ac <ADC_ConfigureBoostMode+0x144>
 8003532:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003536:	d01a      	beq.n	800356e <ADC_ConfigureBoostMode+0x106>
 8003538:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800353c:	d836      	bhi.n	80035ac <ADC_ConfigureBoostMode+0x144>
 800353e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003542:	d014      	beq.n	800356e <ADC_ConfigureBoostMode+0x106>
 8003544:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003548:	d830      	bhi.n	80035ac <ADC_ConfigureBoostMode+0x144>
 800354a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800354e:	d00e      	beq.n	800356e <ADC_ConfigureBoostMode+0x106>
 8003550:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003554:	d82a      	bhi.n	80035ac <ADC_ConfigureBoostMode+0x144>
 8003556:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800355a:	d008      	beq.n	800356e <ADC_ConfigureBoostMode+0x106>
 800355c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003560:	d824      	bhi.n	80035ac <ADC_ConfigureBoostMode+0x144>
 8003562:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003566:	d002      	beq.n	800356e <ADC_ConfigureBoostMode+0x106>
 8003568:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800356c:	d11e      	bne.n	80035ac <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	0c9b      	lsrs	r3, r3, #18
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	fbb2 f3f3 	udiv	r3, r2, r3
 800357c:	60fb      	str	r3, [r7, #12]
        break;
 800357e:	e016      	b.n	80035ae <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	091b      	lsrs	r3, r3, #4
 8003584:	60fb      	str	r3, [r7, #12]
        break;
 8003586:	e012      	b.n	80035ae <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	095b      	lsrs	r3, r3, #5
 800358c:	60fb      	str	r3, [r7, #12]
        break;
 800358e:	e00e      	b.n	80035ae <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	099b      	lsrs	r3, r3, #6
 8003594:	60fb      	str	r3, [r7, #12]
        break;
 8003596:	e00a      	b.n	80035ae <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	09db      	lsrs	r3, r3, #7
 800359c:	60fb      	str	r3, [r7, #12]
        break;
 800359e:	e006      	b.n	80035ae <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	0a1b      	lsrs	r3, r3, #8
 80035a4:	60fb      	str	r3, [r7, #12]
        break;
 80035a6:	e002      	b.n	80035ae <ADC_ConfigureBoostMode+0x146>
        break;
 80035a8:	bf00      	nop
 80035aa:	e000      	b.n	80035ae <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80035ac:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80035ae:	f7ff f895 	bl	80026dc <HAL_GetREVID>
 80035b2:	4603      	mov	r3, r0
 80035b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d815      	bhi.n	80035e8 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4a2b      	ldr	r2, [pc, #172]	; (800366c <ADC_ConfigureBoostMode+0x204>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d908      	bls.n	80035d6 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689a      	ldr	r2, [r3, #8]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035d2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80035d4:	e03e      	b.n	8003654 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035e4:	609a      	str	r2, [r3, #8]
}
 80035e6:	e035      	b.n	8003654 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	085b      	lsrs	r3, r3, #1
 80035ec:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	4a1f      	ldr	r2, [pc, #124]	; (8003670 <ADC_ConfigureBoostMode+0x208>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d808      	bhi.n	8003608 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003604:	609a      	str	r2, [r3, #8]
}
 8003606:	e025      	b.n	8003654 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4a1a      	ldr	r2, [pc, #104]	; (8003674 <ADC_ConfigureBoostMode+0x20c>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d80a      	bhi.n	8003626 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003622:	609a      	str	r2, [r3, #8]
}
 8003624:	e016      	b.n	8003654 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	4a13      	ldr	r2, [pc, #76]	; (8003678 <ADC_ConfigureBoostMode+0x210>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d80a      	bhi.n	8003644 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003640:	609a      	str	r2, [r3, #8]
}
 8003642:	e007      	b.n	8003654 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003652:	609a      	str	r2, [r3, #8]
}
 8003654:	bf00      	nop
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	40022000 	.word	0x40022000
 8003660:	40022100 	.word	0x40022100
 8003664:	40022300 	.word	0x40022300
 8003668:	58026300 	.word	0x58026300
 800366c:	01312d00 	.word	0x01312d00
 8003670:	005f5e10 	.word	0x005f5e10
 8003674:	00bebc20 	.word	0x00bebc20
 8003678:	017d7840 	.word	0x017d7840

0800367c <LL_ADC_IsEnabled>:
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b01      	cmp	r3, #1
 800368e:	d101      	bne.n	8003694 <LL_ADC_IsEnabled+0x18>
 8003690:	2301      	movs	r3, #1
 8003692:	e000      	b.n	8003696 <LL_ADC_IsEnabled+0x1a>
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <LL_ADC_REG_IsConversionOngoing>:
{
 80036a2:	b480      	push	{r7}
 80036a4:	b083      	sub	sp, #12
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f003 0304 	and.w	r3, r3, #4
 80036b2:	2b04      	cmp	r3, #4
 80036b4:	d101      	bne.n	80036ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80036c8:	b590      	push	{r4, r7, lr}
 80036ca:	b09f      	sub	sp, #124	; 0x7c
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036d2:	2300      	movs	r3, #0
 80036d4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d101      	bne.n	80036e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80036e2:	2302      	movs	r3, #2
 80036e4:	e0be      	b.n	8003864 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80036ee:	2300      	movs	r3, #0
 80036f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80036f2:	2300      	movs	r3, #0
 80036f4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a5c      	ldr	r2, [pc, #368]	; (800386c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d102      	bne.n	8003706 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003700:	4b5b      	ldr	r3, [pc, #364]	; (8003870 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003702:	60bb      	str	r3, [r7, #8]
 8003704:	e001      	b.n	800370a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003706:	2300      	movs	r3, #0
 8003708:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10b      	bne.n	8003728 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003714:	f043 0220 	orr.w	r2, r3, #32
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e09d      	b.n	8003864 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	4618      	mov	r0, r3
 800372c:	f7ff ffb9 	bl	80036a2 <LL_ADC_REG_IsConversionOngoing>
 8003730:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff ffb3 	bl	80036a2 <LL_ADC_REG_IsConversionOngoing>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d17f      	bne.n	8003842 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003742:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003744:	2b00      	cmp	r3, #0
 8003746:	d17c      	bne.n	8003842 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a47      	ldr	r2, [pc, #284]	; (800386c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d004      	beq.n	800375c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a46      	ldr	r2, [pc, #280]	; (8003870 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d101      	bne.n	8003760 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800375c:	4b45      	ldr	r3, [pc, #276]	; (8003874 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800375e:	e000      	b.n	8003762 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003760:	4b45      	ldr	r3, [pc, #276]	; (8003878 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003762:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d039      	beq.n	80037e0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800376c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	431a      	orrs	r2, r3
 800377a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800377c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a3a      	ldr	r2, [pc, #232]	; (800386c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d004      	beq.n	8003792 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a38      	ldr	r2, [pc, #224]	; (8003870 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d10e      	bne.n	80037b0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003792:	4836      	ldr	r0, [pc, #216]	; (800386c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003794:	f7ff ff72 	bl	800367c <LL_ADC_IsEnabled>
 8003798:	4604      	mov	r4, r0
 800379a:	4835      	ldr	r0, [pc, #212]	; (8003870 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800379c:	f7ff ff6e 	bl	800367c <LL_ADC_IsEnabled>
 80037a0:	4603      	mov	r3, r0
 80037a2:	4323      	orrs	r3, r4
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	bf0c      	ite	eq
 80037a8:	2301      	moveq	r3, #1
 80037aa:	2300      	movne	r3, #0
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	e008      	b.n	80037c2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80037b0:	4832      	ldr	r0, [pc, #200]	; (800387c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80037b2:	f7ff ff63 	bl	800367c <LL_ADC_IsEnabled>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	bf0c      	ite	eq
 80037bc:	2301      	moveq	r3, #1
 80037be:	2300      	movne	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d047      	beq.n	8003856 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80037c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037c8:	689a      	ldr	r2, [r3, #8]
 80037ca:	4b2d      	ldr	r3, [pc, #180]	; (8003880 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80037cc:	4013      	ands	r3, r2
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	6811      	ldr	r1, [r2, #0]
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	6892      	ldr	r2, [r2, #8]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	431a      	orrs	r2, r3
 80037da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037dc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037de:	e03a      	b.n	8003856 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80037e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ea:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a1e      	ldr	r2, [pc, #120]	; (800386c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d004      	beq.n	8003800 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a1d      	ldr	r2, [pc, #116]	; (8003870 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d10e      	bne.n	800381e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003800:	481a      	ldr	r0, [pc, #104]	; (800386c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003802:	f7ff ff3b 	bl	800367c <LL_ADC_IsEnabled>
 8003806:	4604      	mov	r4, r0
 8003808:	4819      	ldr	r0, [pc, #100]	; (8003870 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800380a:	f7ff ff37 	bl	800367c <LL_ADC_IsEnabled>
 800380e:	4603      	mov	r3, r0
 8003810:	4323      	orrs	r3, r4
 8003812:	2b00      	cmp	r3, #0
 8003814:	bf0c      	ite	eq
 8003816:	2301      	moveq	r3, #1
 8003818:	2300      	movne	r3, #0
 800381a:	b2db      	uxtb	r3, r3
 800381c:	e008      	b.n	8003830 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800381e:	4817      	ldr	r0, [pc, #92]	; (800387c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003820:	f7ff ff2c 	bl	800367c <LL_ADC_IsEnabled>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	bf0c      	ite	eq
 800382a:	2301      	moveq	r3, #1
 800382c:	2300      	movne	r3, #0
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b00      	cmp	r3, #0
 8003832:	d010      	beq.n	8003856 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	4b11      	ldr	r3, [pc, #68]	; (8003880 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800383a:	4013      	ands	r3, r2
 800383c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800383e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003840:	e009      	b.n	8003856 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003846:	f043 0220 	orr.w	r2, r3, #32
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003854:	e000      	b.n	8003858 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003856:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003860:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003864:	4618      	mov	r0, r3
 8003866:	377c      	adds	r7, #124	; 0x7c
 8003868:	46bd      	mov	sp, r7
 800386a:	bd90      	pop	{r4, r7, pc}
 800386c:	40022000 	.word	0x40022000
 8003870:	40022100 	.word	0x40022100
 8003874:	40022300 	.word	0x40022300
 8003878:	58026300 	.word	0x58026300
 800387c:	58026000 	.word	0x58026000
 8003880:	fffff0e0 	.word	0xfffff0e0

08003884 <__NVIC_SetPriorityGrouping>:
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003894:	4b0b      	ldr	r3, [pc, #44]	; (80038c4 <__NVIC_SetPriorityGrouping+0x40>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038a0:	4013      	ands	r3, r2
 80038a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80038ac:	4b06      	ldr	r3, [pc, #24]	; (80038c8 <__NVIC_SetPriorityGrouping+0x44>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038b2:	4a04      	ldr	r2, [pc, #16]	; (80038c4 <__NVIC_SetPriorityGrouping+0x40>)
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	60d3      	str	r3, [r2, #12]
}
 80038b8:	bf00      	nop
 80038ba:	3714      	adds	r7, #20
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	e000ed00 	.word	0xe000ed00
 80038c8:	05fa0000 	.word	0x05fa0000

080038cc <__NVIC_GetPriorityGrouping>:
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038d0:	4b04      	ldr	r3, [pc, #16]	; (80038e4 <__NVIC_GetPriorityGrouping+0x18>)
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	0a1b      	lsrs	r3, r3, #8
 80038d6:	f003 0307 	and.w	r3, r3, #7
}
 80038da:	4618      	mov	r0, r3
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr
 80038e4:	e000ed00 	.word	0xe000ed00

080038e8 <__NVIC_EnableIRQ>:
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	4603      	mov	r3, r0
 80038f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80038f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	db0b      	blt.n	8003912 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038fa:	88fb      	ldrh	r3, [r7, #6]
 80038fc:	f003 021f 	and.w	r2, r3, #31
 8003900:	4907      	ldr	r1, [pc, #28]	; (8003920 <__NVIC_EnableIRQ+0x38>)
 8003902:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003906:	095b      	lsrs	r3, r3, #5
 8003908:	2001      	movs	r0, #1
 800390a:	fa00 f202 	lsl.w	r2, r0, r2
 800390e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	e000e100 	.word	0xe000e100

08003924 <__NVIC_SetPriority>:
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	4603      	mov	r3, r0
 800392c:	6039      	str	r1, [r7, #0]
 800392e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003930:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003934:	2b00      	cmp	r3, #0
 8003936:	db0a      	blt.n	800394e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	b2da      	uxtb	r2, r3
 800393c:	490c      	ldr	r1, [pc, #48]	; (8003970 <__NVIC_SetPriority+0x4c>)
 800393e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003942:	0112      	lsls	r2, r2, #4
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	440b      	add	r3, r1
 8003948:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800394c:	e00a      	b.n	8003964 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	b2da      	uxtb	r2, r3
 8003952:	4908      	ldr	r1, [pc, #32]	; (8003974 <__NVIC_SetPriority+0x50>)
 8003954:	88fb      	ldrh	r3, [r7, #6]
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	3b04      	subs	r3, #4
 800395c:	0112      	lsls	r2, r2, #4
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	440b      	add	r3, r1
 8003962:	761a      	strb	r2, [r3, #24]
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	e000e100 	.word	0xe000e100
 8003974:	e000ed00 	.word	0xe000ed00

08003978 <NVIC_EncodePriority>:
{
 8003978:	b480      	push	{r7}
 800397a:	b089      	sub	sp, #36	; 0x24
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f003 0307 	and.w	r3, r3, #7
 800398a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f1c3 0307 	rsb	r3, r3, #7
 8003992:	2b04      	cmp	r3, #4
 8003994:	bf28      	it	cs
 8003996:	2304      	movcs	r3, #4
 8003998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	3304      	adds	r3, #4
 800399e:	2b06      	cmp	r3, #6
 80039a0:	d902      	bls.n	80039a8 <NVIC_EncodePriority+0x30>
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	3b03      	subs	r3, #3
 80039a6:	e000      	b.n	80039aa <NVIC_EncodePriority+0x32>
 80039a8:	2300      	movs	r3, #0
 80039aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	fa02 f303 	lsl.w	r3, r2, r3
 80039b6:	43da      	mvns	r2, r3
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	401a      	ands	r2, r3
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	fa01 f303 	lsl.w	r3, r1, r3
 80039ca:	43d9      	mvns	r1, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039d0:	4313      	orrs	r3, r2
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3724      	adds	r7, #36	; 0x24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
	...

080039e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	3b01      	subs	r3, #1
 80039ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039f0:	d301      	bcc.n	80039f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039f2:	2301      	movs	r3, #1
 80039f4:	e00f      	b.n	8003a16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039f6:	4a0a      	ldr	r2, [pc, #40]	; (8003a20 <SysTick_Config+0x40>)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3b01      	subs	r3, #1
 80039fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039fe:	210f      	movs	r1, #15
 8003a00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a04:	f7ff ff8e 	bl	8003924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a08:	4b05      	ldr	r3, [pc, #20]	; (8003a20 <SysTick_Config+0x40>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a0e:	4b04      	ldr	r3, [pc, #16]	; (8003a20 <SysTick_Config+0x40>)
 8003a10:	2207      	movs	r2, #7
 8003a12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	e000e010 	.word	0xe000e010

08003a24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7ff ff29 	bl	8003884 <__NVIC_SetPriorityGrouping>
}
 8003a32:	bf00      	nop
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b086      	sub	sp, #24
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	4603      	mov	r3, r0
 8003a42:	60b9      	str	r1, [r7, #8]
 8003a44:	607a      	str	r2, [r7, #4]
 8003a46:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a48:	f7ff ff40 	bl	80038cc <__NVIC_GetPriorityGrouping>
 8003a4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	68b9      	ldr	r1, [r7, #8]
 8003a52:	6978      	ldr	r0, [r7, #20]
 8003a54:	f7ff ff90 	bl	8003978 <NVIC_EncodePriority>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a5e:	4611      	mov	r1, r2
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff ff5f 	bl	8003924 <__NVIC_SetPriority>
}
 8003a66:	bf00      	nop
 8003a68:	3718      	adds	r7, #24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b082      	sub	sp, #8
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	4603      	mov	r3, r0
 8003a76:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7ff ff33 	bl	80038e8 <__NVIC_EnableIRQ>
}
 8003a82:	bf00      	nop
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b082      	sub	sp, #8
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7ff ffa4 	bl	80039e0 <SysTick_Config>
 8003a98:	4603      	mov	r3, r0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
	...

08003aa4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003aac:	f7fe fde6 	bl	800267c <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e316      	b.n	80040ea <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a66      	ldr	r2, [pc, #408]	; (8003c5c <HAL_DMA_Init+0x1b8>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d04a      	beq.n	8003b5c <HAL_DMA_Init+0xb8>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a65      	ldr	r2, [pc, #404]	; (8003c60 <HAL_DMA_Init+0x1bc>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d045      	beq.n	8003b5c <HAL_DMA_Init+0xb8>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a63      	ldr	r2, [pc, #396]	; (8003c64 <HAL_DMA_Init+0x1c0>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d040      	beq.n	8003b5c <HAL_DMA_Init+0xb8>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a62      	ldr	r2, [pc, #392]	; (8003c68 <HAL_DMA_Init+0x1c4>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d03b      	beq.n	8003b5c <HAL_DMA_Init+0xb8>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a60      	ldr	r2, [pc, #384]	; (8003c6c <HAL_DMA_Init+0x1c8>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d036      	beq.n	8003b5c <HAL_DMA_Init+0xb8>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a5f      	ldr	r2, [pc, #380]	; (8003c70 <HAL_DMA_Init+0x1cc>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d031      	beq.n	8003b5c <HAL_DMA_Init+0xb8>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a5d      	ldr	r2, [pc, #372]	; (8003c74 <HAL_DMA_Init+0x1d0>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d02c      	beq.n	8003b5c <HAL_DMA_Init+0xb8>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a5c      	ldr	r2, [pc, #368]	; (8003c78 <HAL_DMA_Init+0x1d4>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d027      	beq.n	8003b5c <HAL_DMA_Init+0xb8>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a5a      	ldr	r2, [pc, #360]	; (8003c7c <HAL_DMA_Init+0x1d8>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d022      	beq.n	8003b5c <HAL_DMA_Init+0xb8>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a59      	ldr	r2, [pc, #356]	; (8003c80 <HAL_DMA_Init+0x1dc>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d01d      	beq.n	8003b5c <HAL_DMA_Init+0xb8>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a57      	ldr	r2, [pc, #348]	; (8003c84 <HAL_DMA_Init+0x1e0>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d018      	beq.n	8003b5c <HAL_DMA_Init+0xb8>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a56      	ldr	r2, [pc, #344]	; (8003c88 <HAL_DMA_Init+0x1e4>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d013      	beq.n	8003b5c <HAL_DMA_Init+0xb8>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a54      	ldr	r2, [pc, #336]	; (8003c8c <HAL_DMA_Init+0x1e8>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d00e      	beq.n	8003b5c <HAL_DMA_Init+0xb8>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a53      	ldr	r2, [pc, #332]	; (8003c90 <HAL_DMA_Init+0x1ec>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d009      	beq.n	8003b5c <HAL_DMA_Init+0xb8>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a51      	ldr	r2, [pc, #324]	; (8003c94 <HAL_DMA_Init+0x1f0>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d004      	beq.n	8003b5c <HAL_DMA_Init+0xb8>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a50      	ldr	r2, [pc, #320]	; (8003c98 <HAL_DMA_Init+0x1f4>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d101      	bne.n	8003b60 <HAL_DMA_Init+0xbc>
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e000      	b.n	8003b62 <HAL_DMA_Init+0xbe>
 8003b60:	2300      	movs	r3, #0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f000 813b 	beq.w	8003dde <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a37      	ldr	r2, [pc, #220]	; (8003c5c <HAL_DMA_Init+0x1b8>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d04a      	beq.n	8003c18 <HAL_DMA_Init+0x174>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a36      	ldr	r2, [pc, #216]	; (8003c60 <HAL_DMA_Init+0x1bc>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d045      	beq.n	8003c18 <HAL_DMA_Init+0x174>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a34      	ldr	r2, [pc, #208]	; (8003c64 <HAL_DMA_Init+0x1c0>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d040      	beq.n	8003c18 <HAL_DMA_Init+0x174>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a33      	ldr	r2, [pc, #204]	; (8003c68 <HAL_DMA_Init+0x1c4>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d03b      	beq.n	8003c18 <HAL_DMA_Init+0x174>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a31      	ldr	r2, [pc, #196]	; (8003c6c <HAL_DMA_Init+0x1c8>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d036      	beq.n	8003c18 <HAL_DMA_Init+0x174>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a30      	ldr	r2, [pc, #192]	; (8003c70 <HAL_DMA_Init+0x1cc>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d031      	beq.n	8003c18 <HAL_DMA_Init+0x174>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a2e      	ldr	r2, [pc, #184]	; (8003c74 <HAL_DMA_Init+0x1d0>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d02c      	beq.n	8003c18 <HAL_DMA_Init+0x174>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a2d      	ldr	r2, [pc, #180]	; (8003c78 <HAL_DMA_Init+0x1d4>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d027      	beq.n	8003c18 <HAL_DMA_Init+0x174>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a2b      	ldr	r2, [pc, #172]	; (8003c7c <HAL_DMA_Init+0x1d8>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d022      	beq.n	8003c18 <HAL_DMA_Init+0x174>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a2a      	ldr	r2, [pc, #168]	; (8003c80 <HAL_DMA_Init+0x1dc>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d01d      	beq.n	8003c18 <HAL_DMA_Init+0x174>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a28      	ldr	r2, [pc, #160]	; (8003c84 <HAL_DMA_Init+0x1e0>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d018      	beq.n	8003c18 <HAL_DMA_Init+0x174>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a27      	ldr	r2, [pc, #156]	; (8003c88 <HAL_DMA_Init+0x1e4>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d013      	beq.n	8003c18 <HAL_DMA_Init+0x174>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a25      	ldr	r2, [pc, #148]	; (8003c8c <HAL_DMA_Init+0x1e8>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d00e      	beq.n	8003c18 <HAL_DMA_Init+0x174>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a24      	ldr	r2, [pc, #144]	; (8003c90 <HAL_DMA_Init+0x1ec>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d009      	beq.n	8003c18 <HAL_DMA_Init+0x174>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a22      	ldr	r2, [pc, #136]	; (8003c94 <HAL_DMA_Init+0x1f0>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d004      	beq.n	8003c18 <HAL_DMA_Init+0x174>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a21      	ldr	r2, [pc, #132]	; (8003c98 <HAL_DMA_Init+0x1f4>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d108      	bne.n	8003c2a <HAL_DMA_Init+0x186>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0201 	bic.w	r2, r2, #1
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	e007      	b.n	8003c3a <HAL_DMA_Init+0x196>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0201 	bic.w	r2, r2, #1
 8003c38:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003c3a:	e02f      	b.n	8003c9c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c3c:	f7fe fd1e 	bl	800267c <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b05      	cmp	r3, #5
 8003c48:	d928      	bls.n	8003c9c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2203      	movs	r2, #3
 8003c54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e246      	b.n	80040ea <HAL_DMA_Init+0x646>
 8003c5c:	40020010 	.word	0x40020010
 8003c60:	40020028 	.word	0x40020028
 8003c64:	40020040 	.word	0x40020040
 8003c68:	40020058 	.word	0x40020058
 8003c6c:	40020070 	.word	0x40020070
 8003c70:	40020088 	.word	0x40020088
 8003c74:	400200a0 	.word	0x400200a0
 8003c78:	400200b8 	.word	0x400200b8
 8003c7c:	40020410 	.word	0x40020410
 8003c80:	40020428 	.word	0x40020428
 8003c84:	40020440 	.word	0x40020440
 8003c88:	40020458 	.word	0x40020458
 8003c8c:	40020470 	.word	0x40020470
 8003c90:	40020488 	.word	0x40020488
 8003c94:	400204a0 	.word	0x400204a0
 8003c98:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1c8      	bne.n	8003c3c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	4b83      	ldr	r3, [pc, #524]	; (8003ec4 <HAL_DMA_Init+0x420>)
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003cc2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cce:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cda:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	2b04      	cmp	r3, #4
 8003cee:	d107      	bne.n	8003d00 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003d00:	4b71      	ldr	r3, [pc, #452]	; (8003ec8 <HAL_DMA_Init+0x424>)
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	4b71      	ldr	r3, [pc, #452]	; (8003ecc <HAL_DMA_Init+0x428>)
 8003d06:	4013      	ands	r3, r2
 8003d08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d0c:	d328      	bcc.n	8003d60 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b28      	cmp	r3, #40	; 0x28
 8003d14:	d903      	bls.n	8003d1e <HAL_DMA_Init+0x27a>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2b2e      	cmp	r3, #46	; 0x2e
 8003d1c:	d917      	bls.n	8003d4e <HAL_DMA_Init+0x2aa>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2b3e      	cmp	r3, #62	; 0x3e
 8003d24:	d903      	bls.n	8003d2e <HAL_DMA_Init+0x28a>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2b42      	cmp	r3, #66	; 0x42
 8003d2c:	d90f      	bls.n	8003d4e <HAL_DMA_Init+0x2aa>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	2b46      	cmp	r3, #70	; 0x46
 8003d34:	d903      	bls.n	8003d3e <HAL_DMA_Init+0x29a>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	2b48      	cmp	r3, #72	; 0x48
 8003d3c:	d907      	bls.n	8003d4e <HAL_DMA_Init+0x2aa>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	2b4e      	cmp	r3, #78	; 0x4e
 8003d44:	d905      	bls.n	8003d52 <HAL_DMA_Init+0x2ae>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b52      	cmp	r3, #82	; 0x52
 8003d4c:	d801      	bhi.n	8003d52 <HAL_DMA_Init+0x2ae>
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e000      	b.n	8003d54 <HAL_DMA_Init+0x2b0>
 8003d52:	2300      	movs	r3, #0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d003      	beq.n	8003d60 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d5e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f023 0307 	bic.w	r3, r3, #7
 8003d76:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	d117      	bne.n	8003dba <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00e      	beq.n	8003dba <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f001 ff1b 	bl	8005bd8 <DMA_CheckFifoParam>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d008      	beq.n	8003dba <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2240      	movs	r2, #64	; 0x40
 8003dac:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e197      	b.n	80040ea <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f001 fe56 	bl	8005a74 <DMA_CalcBaseAndBitshift>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd0:	f003 031f 	and.w	r3, r3, #31
 8003dd4:	223f      	movs	r2, #63	; 0x3f
 8003dd6:	409a      	lsls	r2, r3
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	609a      	str	r2, [r3, #8]
 8003ddc:	e0cd      	b.n	8003f7a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a3b      	ldr	r2, [pc, #236]	; (8003ed0 <HAL_DMA_Init+0x42c>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d022      	beq.n	8003e2e <HAL_DMA_Init+0x38a>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a39      	ldr	r2, [pc, #228]	; (8003ed4 <HAL_DMA_Init+0x430>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d01d      	beq.n	8003e2e <HAL_DMA_Init+0x38a>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a38      	ldr	r2, [pc, #224]	; (8003ed8 <HAL_DMA_Init+0x434>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d018      	beq.n	8003e2e <HAL_DMA_Init+0x38a>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a36      	ldr	r2, [pc, #216]	; (8003edc <HAL_DMA_Init+0x438>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d013      	beq.n	8003e2e <HAL_DMA_Init+0x38a>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a35      	ldr	r2, [pc, #212]	; (8003ee0 <HAL_DMA_Init+0x43c>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d00e      	beq.n	8003e2e <HAL_DMA_Init+0x38a>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a33      	ldr	r2, [pc, #204]	; (8003ee4 <HAL_DMA_Init+0x440>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d009      	beq.n	8003e2e <HAL_DMA_Init+0x38a>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a32      	ldr	r2, [pc, #200]	; (8003ee8 <HAL_DMA_Init+0x444>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d004      	beq.n	8003e2e <HAL_DMA_Init+0x38a>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a30      	ldr	r2, [pc, #192]	; (8003eec <HAL_DMA_Init+0x448>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d101      	bne.n	8003e32 <HAL_DMA_Init+0x38e>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e000      	b.n	8003e34 <HAL_DMA_Init+0x390>
 8003e32:	2300      	movs	r3, #0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 8097 	beq.w	8003f68 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a24      	ldr	r2, [pc, #144]	; (8003ed0 <HAL_DMA_Init+0x42c>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d021      	beq.n	8003e88 <HAL_DMA_Init+0x3e4>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a22      	ldr	r2, [pc, #136]	; (8003ed4 <HAL_DMA_Init+0x430>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d01c      	beq.n	8003e88 <HAL_DMA_Init+0x3e4>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a21      	ldr	r2, [pc, #132]	; (8003ed8 <HAL_DMA_Init+0x434>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d017      	beq.n	8003e88 <HAL_DMA_Init+0x3e4>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a1f      	ldr	r2, [pc, #124]	; (8003edc <HAL_DMA_Init+0x438>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d012      	beq.n	8003e88 <HAL_DMA_Init+0x3e4>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a1e      	ldr	r2, [pc, #120]	; (8003ee0 <HAL_DMA_Init+0x43c>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d00d      	beq.n	8003e88 <HAL_DMA_Init+0x3e4>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a1c      	ldr	r2, [pc, #112]	; (8003ee4 <HAL_DMA_Init+0x440>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d008      	beq.n	8003e88 <HAL_DMA_Init+0x3e4>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a1b      	ldr	r2, [pc, #108]	; (8003ee8 <HAL_DMA_Init+0x444>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d003      	beq.n	8003e88 <HAL_DMA_Init+0x3e4>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a19      	ldr	r2, [pc, #100]	; (8003eec <HAL_DMA_Init+0x448>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2202      	movs	r2, #2
 8003e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	4b12      	ldr	r3, [pc, #72]	; (8003ef0 <HAL_DMA_Init+0x44c>)
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	2b40      	cmp	r3, #64	; 0x40
 8003eb0:	d020      	beq.n	8003ef4 <HAL_DMA_Init+0x450>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	2b80      	cmp	r3, #128	; 0x80
 8003eb8:	d102      	bne.n	8003ec0 <HAL_DMA_Init+0x41c>
 8003eba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ebe:	e01a      	b.n	8003ef6 <HAL_DMA_Init+0x452>
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	e018      	b.n	8003ef6 <HAL_DMA_Init+0x452>
 8003ec4:	fe10803f 	.word	0xfe10803f
 8003ec8:	5c001000 	.word	0x5c001000
 8003ecc:	ffff0000 	.word	0xffff0000
 8003ed0:	58025408 	.word	0x58025408
 8003ed4:	5802541c 	.word	0x5802541c
 8003ed8:	58025430 	.word	0x58025430
 8003edc:	58025444 	.word	0x58025444
 8003ee0:	58025458 	.word	0x58025458
 8003ee4:	5802546c 	.word	0x5802546c
 8003ee8:	58025480 	.word	0x58025480
 8003eec:	58025494 	.word	0x58025494
 8003ef0:	fffe000f 	.word	0xfffe000f
 8003ef4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	68d2      	ldr	r2, [r2, #12]
 8003efa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003efc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003f04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003f0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003f14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003f1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003f24:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	461a      	mov	r2, r3
 8003f3a:	4b6e      	ldr	r3, [pc, #440]	; (80040f4 <HAL_DMA_Init+0x650>)
 8003f3c:	4413      	add	r3, r2
 8003f3e:	4a6e      	ldr	r2, [pc, #440]	; (80040f8 <HAL_DMA_Init+0x654>)
 8003f40:	fba2 2303 	umull	r2, r3, r2, r3
 8003f44:	091b      	lsrs	r3, r3, #4
 8003f46:	009a      	lsls	r2, r3, #2
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f001 fd91 	bl	8005a74 <DMA_CalcBaseAndBitshift>
 8003f52:	4603      	mov	r3, r0
 8003f54:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f5a:	f003 031f 	and.w	r3, r3, #31
 8003f5e:	2201      	movs	r2, #1
 8003f60:	409a      	lsls	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	605a      	str	r2, [r3, #4]
 8003f66:	e008      	b.n	8003f7a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2240      	movs	r2, #64	; 0x40
 8003f6c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2203      	movs	r2, #3
 8003f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e0b7      	b.n	80040ea <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a5f      	ldr	r2, [pc, #380]	; (80040fc <HAL_DMA_Init+0x658>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d072      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a5d      	ldr	r2, [pc, #372]	; (8004100 <HAL_DMA_Init+0x65c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d06d      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a5c      	ldr	r2, [pc, #368]	; (8004104 <HAL_DMA_Init+0x660>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d068      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a5a      	ldr	r2, [pc, #360]	; (8004108 <HAL_DMA_Init+0x664>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d063      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a59      	ldr	r2, [pc, #356]	; (800410c <HAL_DMA_Init+0x668>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d05e      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a57      	ldr	r2, [pc, #348]	; (8004110 <HAL_DMA_Init+0x66c>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d059      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a56      	ldr	r2, [pc, #344]	; (8004114 <HAL_DMA_Init+0x670>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d054      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a54      	ldr	r2, [pc, #336]	; (8004118 <HAL_DMA_Init+0x674>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d04f      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a53      	ldr	r2, [pc, #332]	; (800411c <HAL_DMA_Init+0x678>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d04a      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a51      	ldr	r2, [pc, #324]	; (8004120 <HAL_DMA_Init+0x67c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d045      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a50      	ldr	r2, [pc, #320]	; (8004124 <HAL_DMA_Init+0x680>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d040      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a4e      	ldr	r2, [pc, #312]	; (8004128 <HAL_DMA_Init+0x684>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d03b      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a4d      	ldr	r2, [pc, #308]	; (800412c <HAL_DMA_Init+0x688>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d036      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a4b      	ldr	r2, [pc, #300]	; (8004130 <HAL_DMA_Init+0x68c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d031      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a4a      	ldr	r2, [pc, #296]	; (8004134 <HAL_DMA_Init+0x690>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d02c      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a48      	ldr	r2, [pc, #288]	; (8004138 <HAL_DMA_Init+0x694>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d027      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a47      	ldr	r2, [pc, #284]	; (800413c <HAL_DMA_Init+0x698>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d022      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a45      	ldr	r2, [pc, #276]	; (8004140 <HAL_DMA_Init+0x69c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d01d      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a44      	ldr	r2, [pc, #272]	; (8004144 <HAL_DMA_Init+0x6a0>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d018      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a42      	ldr	r2, [pc, #264]	; (8004148 <HAL_DMA_Init+0x6a4>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d013      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a41      	ldr	r2, [pc, #260]	; (800414c <HAL_DMA_Init+0x6a8>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d00e      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a3f      	ldr	r2, [pc, #252]	; (8004150 <HAL_DMA_Init+0x6ac>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d009      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a3e      	ldr	r2, [pc, #248]	; (8004154 <HAL_DMA_Init+0x6b0>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d004      	beq.n	800406a <HAL_DMA_Init+0x5c6>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a3c      	ldr	r2, [pc, #240]	; (8004158 <HAL_DMA_Init+0x6b4>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d101      	bne.n	800406e <HAL_DMA_Init+0x5ca>
 800406a:	2301      	movs	r3, #1
 800406c:	e000      	b.n	8004070 <HAL_DMA_Init+0x5cc>
 800406e:	2300      	movs	r3, #0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d032      	beq.n	80040da <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f001 fe2b 	bl	8005cd0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	2b80      	cmp	r3, #128	; 0x80
 8004080:	d102      	bne.n	8004088 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004090:	b2d2      	uxtb	r2, r2
 8004092:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800409c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d010      	beq.n	80040c8 <HAL_DMA_Init+0x624>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	2b08      	cmp	r3, #8
 80040ac:	d80c      	bhi.n	80040c8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f001 fea8 	bl	8005e04 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80040c4:	605a      	str	r2, [r3, #4]
 80040c6:	e008      	b.n	80040da <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3718      	adds	r7, #24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	a7fdabf8 	.word	0xa7fdabf8
 80040f8:	cccccccd 	.word	0xcccccccd
 80040fc:	40020010 	.word	0x40020010
 8004100:	40020028 	.word	0x40020028
 8004104:	40020040 	.word	0x40020040
 8004108:	40020058 	.word	0x40020058
 800410c:	40020070 	.word	0x40020070
 8004110:	40020088 	.word	0x40020088
 8004114:	400200a0 	.word	0x400200a0
 8004118:	400200b8 	.word	0x400200b8
 800411c:	40020410 	.word	0x40020410
 8004120:	40020428 	.word	0x40020428
 8004124:	40020440 	.word	0x40020440
 8004128:	40020458 	.word	0x40020458
 800412c:	40020470 	.word	0x40020470
 8004130:	40020488 	.word	0x40020488
 8004134:	400204a0 	.word	0x400204a0
 8004138:	400204b8 	.word	0x400204b8
 800413c:	58025408 	.word	0x58025408
 8004140:	5802541c 	.word	0x5802541c
 8004144:	58025430 	.word	0x58025430
 8004148:	58025444 	.word	0x58025444
 800414c:	58025458 	.word	0x58025458
 8004150:	5802546c 	.word	0x5802546c
 8004154:	58025480 	.word	0x58025480
 8004158:	58025494 	.word	0x58025494

0800415c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004164:	f7fe fa8a 	bl	800267c <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e2dc      	b.n	800472e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d008      	beq.n	8004192 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2280      	movs	r2, #128	; 0x80
 8004184:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e2cd      	b.n	800472e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a76      	ldr	r2, [pc, #472]	; (8004370 <HAL_DMA_Abort+0x214>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d04a      	beq.n	8004232 <HAL_DMA_Abort+0xd6>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a74      	ldr	r2, [pc, #464]	; (8004374 <HAL_DMA_Abort+0x218>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d045      	beq.n	8004232 <HAL_DMA_Abort+0xd6>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a73      	ldr	r2, [pc, #460]	; (8004378 <HAL_DMA_Abort+0x21c>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d040      	beq.n	8004232 <HAL_DMA_Abort+0xd6>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a71      	ldr	r2, [pc, #452]	; (800437c <HAL_DMA_Abort+0x220>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d03b      	beq.n	8004232 <HAL_DMA_Abort+0xd6>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a70      	ldr	r2, [pc, #448]	; (8004380 <HAL_DMA_Abort+0x224>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d036      	beq.n	8004232 <HAL_DMA_Abort+0xd6>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a6e      	ldr	r2, [pc, #440]	; (8004384 <HAL_DMA_Abort+0x228>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d031      	beq.n	8004232 <HAL_DMA_Abort+0xd6>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a6d      	ldr	r2, [pc, #436]	; (8004388 <HAL_DMA_Abort+0x22c>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d02c      	beq.n	8004232 <HAL_DMA_Abort+0xd6>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a6b      	ldr	r2, [pc, #428]	; (800438c <HAL_DMA_Abort+0x230>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d027      	beq.n	8004232 <HAL_DMA_Abort+0xd6>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a6a      	ldr	r2, [pc, #424]	; (8004390 <HAL_DMA_Abort+0x234>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d022      	beq.n	8004232 <HAL_DMA_Abort+0xd6>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a68      	ldr	r2, [pc, #416]	; (8004394 <HAL_DMA_Abort+0x238>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d01d      	beq.n	8004232 <HAL_DMA_Abort+0xd6>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a67      	ldr	r2, [pc, #412]	; (8004398 <HAL_DMA_Abort+0x23c>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d018      	beq.n	8004232 <HAL_DMA_Abort+0xd6>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a65      	ldr	r2, [pc, #404]	; (800439c <HAL_DMA_Abort+0x240>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d013      	beq.n	8004232 <HAL_DMA_Abort+0xd6>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a64      	ldr	r2, [pc, #400]	; (80043a0 <HAL_DMA_Abort+0x244>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d00e      	beq.n	8004232 <HAL_DMA_Abort+0xd6>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a62      	ldr	r2, [pc, #392]	; (80043a4 <HAL_DMA_Abort+0x248>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d009      	beq.n	8004232 <HAL_DMA_Abort+0xd6>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a61      	ldr	r2, [pc, #388]	; (80043a8 <HAL_DMA_Abort+0x24c>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d004      	beq.n	8004232 <HAL_DMA_Abort+0xd6>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a5f      	ldr	r2, [pc, #380]	; (80043ac <HAL_DMA_Abort+0x250>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d101      	bne.n	8004236 <HAL_DMA_Abort+0xda>
 8004232:	2301      	movs	r3, #1
 8004234:	e000      	b.n	8004238 <HAL_DMA_Abort+0xdc>
 8004236:	2300      	movs	r3, #0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d013      	beq.n	8004264 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 021e 	bic.w	r2, r2, #30
 800424a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	695a      	ldr	r2, [r3, #20]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800425a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	617b      	str	r3, [r7, #20]
 8004262:	e00a      	b.n	800427a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 020e 	bic.w	r2, r2, #14
 8004272:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a3c      	ldr	r2, [pc, #240]	; (8004370 <HAL_DMA_Abort+0x214>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d072      	beq.n	800436a <HAL_DMA_Abort+0x20e>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a3a      	ldr	r2, [pc, #232]	; (8004374 <HAL_DMA_Abort+0x218>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d06d      	beq.n	800436a <HAL_DMA_Abort+0x20e>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a39      	ldr	r2, [pc, #228]	; (8004378 <HAL_DMA_Abort+0x21c>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d068      	beq.n	800436a <HAL_DMA_Abort+0x20e>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a37      	ldr	r2, [pc, #220]	; (800437c <HAL_DMA_Abort+0x220>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d063      	beq.n	800436a <HAL_DMA_Abort+0x20e>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a36      	ldr	r2, [pc, #216]	; (8004380 <HAL_DMA_Abort+0x224>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d05e      	beq.n	800436a <HAL_DMA_Abort+0x20e>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a34      	ldr	r2, [pc, #208]	; (8004384 <HAL_DMA_Abort+0x228>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d059      	beq.n	800436a <HAL_DMA_Abort+0x20e>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a33      	ldr	r2, [pc, #204]	; (8004388 <HAL_DMA_Abort+0x22c>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d054      	beq.n	800436a <HAL_DMA_Abort+0x20e>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a31      	ldr	r2, [pc, #196]	; (800438c <HAL_DMA_Abort+0x230>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d04f      	beq.n	800436a <HAL_DMA_Abort+0x20e>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a30      	ldr	r2, [pc, #192]	; (8004390 <HAL_DMA_Abort+0x234>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d04a      	beq.n	800436a <HAL_DMA_Abort+0x20e>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a2e      	ldr	r2, [pc, #184]	; (8004394 <HAL_DMA_Abort+0x238>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d045      	beq.n	800436a <HAL_DMA_Abort+0x20e>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a2d      	ldr	r2, [pc, #180]	; (8004398 <HAL_DMA_Abort+0x23c>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d040      	beq.n	800436a <HAL_DMA_Abort+0x20e>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a2b      	ldr	r2, [pc, #172]	; (800439c <HAL_DMA_Abort+0x240>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d03b      	beq.n	800436a <HAL_DMA_Abort+0x20e>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a2a      	ldr	r2, [pc, #168]	; (80043a0 <HAL_DMA_Abort+0x244>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d036      	beq.n	800436a <HAL_DMA_Abort+0x20e>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a28      	ldr	r2, [pc, #160]	; (80043a4 <HAL_DMA_Abort+0x248>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d031      	beq.n	800436a <HAL_DMA_Abort+0x20e>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a27      	ldr	r2, [pc, #156]	; (80043a8 <HAL_DMA_Abort+0x24c>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d02c      	beq.n	800436a <HAL_DMA_Abort+0x20e>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a25      	ldr	r2, [pc, #148]	; (80043ac <HAL_DMA_Abort+0x250>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d027      	beq.n	800436a <HAL_DMA_Abort+0x20e>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a24      	ldr	r2, [pc, #144]	; (80043b0 <HAL_DMA_Abort+0x254>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d022      	beq.n	800436a <HAL_DMA_Abort+0x20e>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a22      	ldr	r2, [pc, #136]	; (80043b4 <HAL_DMA_Abort+0x258>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d01d      	beq.n	800436a <HAL_DMA_Abort+0x20e>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a21      	ldr	r2, [pc, #132]	; (80043b8 <HAL_DMA_Abort+0x25c>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d018      	beq.n	800436a <HAL_DMA_Abort+0x20e>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a1f      	ldr	r2, [pc, #124]	; (80043bc <HAL_DMA_Abort+0x260>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d013      	beq.n	800436a <HAL_DMA_Abort+0x20e>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a1e      	ldr	r2, [pc, #120]	; (80043c0 <HAL_DMA_Abort+0x264>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d00e      	beq.n	800436a <HAL_DMA_Abort+0x20e>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a1c      	ldr	r2, [pc, #112]	; (80043c4 <HAL_DMA_Abort+0x268>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d009      	beq.n	800436a <HAL_DMA_Abort+0x20e>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a1b      	ldr	r2, [pc, #108]	; (80043c8 <HAL_DMA_Abort+0x26c>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d004      	beq.n	800436a <HAL_DMA_Abort+0x20e>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a19      	ldr	r2, [pc, #100]	; (80043cc <HAL_DMA_Abort+0x270>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d132      	bne.n	80043d0 <HAL_DMA_Abort+0x274>
 800436a:	2301      	movs	r3, #1
 800436c:	e031      	b.n	80043d2 <HAL_DMA_Abort+0x276>
 800436e:	bf00      	nop
 8004370:	40020010 	.word	0x40020010
 8004374:	40020028 	.word	0x40020028
 8004378:	40020040 	.word	0x40020040
 800437c:	40020058 	.word	0x40020058
 8004380:	40020070 	.word	0x40020070
 8004384:	40020088 	.word	0x40020088
 8004388:	400200a0 	.word	0x400200a0
 800438c:	400200b8 	.word	0x400200b8
 8004390:	40020410 	.word	0x40020410
 8004394:	40020428 	.word	0x40020428
 8004398:	40020440 	.word	0x40020440
 800439c:	40020458 	.word	0x40020458
 80043a0:	40020470 	.word	0x40020470
 80043a4:	40020488 	.word	0x40020488
 80043a8:	400204a0 	.word	0x400204a0
 80043ac:	400204b8 	.word	0x400204b8
 80043b0:	58025408 	.word	0x58025408
 80043b4:	5802541c 	.word	0x5802541c
 80043b8:	58025430 	.word	0x58025430
 80043bc:	58025444 	.word	0x58025444
 80043c0:	58025458 	.word	0x58025458
 80043c4:	5802546c 	.word	0x5802546c
 80043c8:	58025480 	.word	0x58025480
 80043cc:	58025494 	.word	0x58025494
 80043d0:	2300      	movs	r3, #0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d007      	beq.n	80043e6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a6d      	ldr	r2, [pc, #436]	; (80045a0 <HAL_DMA_Abort+0x444>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d04a      	beq.n	8004486 <HAL_DMA_Abort+0x32a>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a6b      	ldr	r2, [pc, #428]	; (80045a4 <HAL_DMA_Abort+0x448>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d045      	beq.n	8004486 <HAL_DMA_Abort+0x32a>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a6a      	ldr	r2, [pc, #424]	; (80045a8 <HAL_DMA_Abort+0x44c>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d040      	beq.n	8004486 <HAL_DMA_Abort+0x32a>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a68      	ldr	r2, [pc, #416]	; (80045ac <HAL_DMA_Abort+0x450>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d03b      	beq.n	8004486 <HAL_DMA_Abort+0x32a>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a67      	ldr	r2, [pc, #412]	; (80045b0 <HAL_DMA_Abort+0x454>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d036      	beq.n	8004486 <HAL_DMA_Abort+0x32a>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a65      	ldr	r2, [pc, #404]	; (80045b4 <HAL_DMA_Abort+0x458>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d031      	beq.n	8004486 <HAL_DMA_Abort+0x32a>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a64      	ldr	r2, [pc, #400]	; (80045b8 <HAL_DMA_Abort+0x45c>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d02c      	beq.n	8004486 <HAL_DMA_Abort+0x32a>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a62      	ldr	r2, [pc, #392]	; (80045bc <HAL_DMA_Abort+0x460>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d027      	beq.n	8004486 <HAL_DMA_Abort+0x32a>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a61      	ldr	r2, [pc, #388]	; (80045c0 <HAL_DMA_Abort+0x464>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d022      	beq.n	8004486 <HAL_DMA_Abort+0x32a>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a5f      	ldr	r2, [pc, #380]	; (80045c4 <HAL_DMA_Abort+0x468>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d01d      	beq.n	8004486 <HAL_DMA_Abort+0x32a>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a5e      	ldr	r2, [pc, #376]	; (80045c8 <HAL_DMA_Abort+0x46c>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d018      	beq.n	8004486 <HAL_DMA_Abort+0x32a>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a5c      	ldr	r2, [pc, #368]	; (80045cc <HAL_DMA_Abort+0x470>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d013      	beq.n	8004486 <HAL_DMA_Abort+0x32a>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a5b      	ldr	r2, [pc, #364]	; (80045d0 <HAL_DMA_Abort+0x474>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d00e      	beq.n	8004486 <HAL_DMA_Abort+0x32a>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a59      	ldr	r2, [pc, #356]	; (80045d4 <HAL_DMA_Abort+0x478>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d009      	beq.n	8004486 <HAL_DMA_Abort+0x32a>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a58      	ldr	r2, [pc, #352]	; (80045d8 <HAL_DMA_Abort+0x47c>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d004      	beq.n	8004486 <HAL_DMA_Abort+0x32a>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a56      	ldr	r2, [pc, #344]	; (80045dc <HAL_DMA_Abort+0x480>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d108      	bne.n	8004498 <HAL_DMA_Abort+0x33c>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 0201 	bic.w	r2, r2, #1
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	e007      	b.n	80044a8 <HAL_DMA_Abort+0x34c>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 0201 	bic.w	r2, r2, #1
 80044a6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80044a8:	e013      	b.n	80044d2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044aa:	f7fe f8e7 	bl	800267c <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b05      	cmp	r3, #5
 80044b6:	d90c      	bls.n	80044d2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2220      	movs	r2, #32
 80044bc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2203      	movs	r2, #3
 80044ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e12d      	b.n	800472e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1e5      	bne.n	80044aa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a2f      	ldr	r2, [pc, #188]	; (80045a0 <HAL_DMA_Abort+0x444>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d04a      	beq.n	800457e <HAL_DMA_Abort+0x422>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a2d      	ldr	r2, [pc, #180]	; (80045a4 <HAL_DMA_Abort+0x448>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d045      	beq.n	800457e <HAL_DMA_Abort+0x422>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a2c      	ldr	r2, [pc, #176]	; (80045a8 <HAL_DMA_Abort+0x44c>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d040      	beq.n	800457e <HAL_DMA_Abort+0x422>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a2a      	ldr	r2, [pc, #168]	; (80045ac <HAL_DMA_Abort+0x450>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d03b      	beq.n	800457e <HAL_DMA_Abort+0x422>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a29      	ldr	r2, [pc, #164]	; (80045b0 <HAL_DMA_Abort+0x454>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d036      	beq.n	800457e <HAL_DMA_Abort+0x422>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a27      	ldr	r2, [pc, #156]	; (80045b4 <HAL_DMA_Abort+0x458>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d031      	beq.n	800457e <HAL_DMA_Abort+0x422>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a26      	ldr	r2, [pc, #152]	; (80045b8 <HAL_DMA_Abort+0x45c>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d02c      	beq.n	800457e <HAL_DMA_Abort+0x422>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a24      	ldr	r2, [pc, #144]	; (80045bc <HAL_DMA_Abort+0x460>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d027      	beq.n	800457e <HAL_DMA_Abort+0x422>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a23      	ldr	r2, [pc, #140]	; (80045c0 <HAL_DMA_Abort+0x464>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d022      	beq.n	800457e <HAL_DMA_Abort+0x422>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a21      	ldr	r2, [pc, #132]	; (80045c4 <HAL_DMA_Abort+0x468>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d01d      	beq.n	800457e <HAL_DMA_Abort+0x422>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a20      	ldr	r2, [pc, #128]	; (80045c8 <HAL_DMA_Abort+0x46c>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d018      	beq.n	800457e <HAL_DMA_Abort+0x422>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a1e      	ldr	r2, [pc, #120]	; (80045cc <HAL_DMA_Abort+0x470>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d013      	beq.n	800457e <HAL_DMA_Abort+0x422>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a1d      	ldr	r2, [pc, #116]	; (80045d0 <HAL_DMA_Abort+0x474>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d00e      	beq.n	800457e <HAL_DMA_Abort+0x422>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a1b      	ldr	r2, [pc, #108]	; (80045d4 <HAL_DMA_Abort+0x478>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d009      	beq.n	800457e <HAL_DMA_Abort+0x422>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a1a      	ldr	r2, [pc, #104]	; (80045d8 <HAL_DMA_Abort+0x47c>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d004      	beq.n	800457e <HAL_DMA_Abort+0x422>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a18      	ldr	r2, [pc, #96]	; (80045dc <HAL_DMA_Abort+0x480>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d101      	bne.n	8004582 <HAL_DMA_Abort+0x426>
 800457e:	2301      	movs	r3, #1
 8004580:	e000      	b.n	8004584 <HAL_DMA_Abort+0x428>
 8004582:	2300      	movs	r3, #0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d02b      	beq.n	80045e0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004592:	f003 031f 	and.w	r3, r3, #31
 8004596:	223f      	movs	r2, #63	; 0x3f
 8004598:	409a      	lsls	r2, r3
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	609a      	str	r2, [r3, #8]
 800459e:	e02a      	b.n	80045f6 <HAL_DMA_Abort+0x49a>
 80045a0:	40020010 	.word	0x40020010
 80045a4:	40020028 	.word	0x40020028
 80045a8:	40020040 	.word	0x40020040
 80045ac:	40020058 	.word	0x40020058
 80045b0:	40020070 	.word	0x40020070
 80045b4:	40020088 	.word	0x40020088
 80045b8:	400200a0 	.word	0x400200a0
 80045bc:	400200b8 	.word	0x400200b8
 80045c0:	40020410 	.word	0x40020410
 80045c4:	40020428 	.word	0x40020428
 80045c8:	40020440 	.word	0x40020440
 80045cc:	40020458 	.word	0x40020458
 80045d0:	40020470 	.word	0x40020470
 80045d4:	40020488 	.word	0x40020488
 80045d8:	400204a0 	.word	0x400204a0
 80045dc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ea:	f003 031f 	and.w	r3, r3, #31
 80045ee:	2201      	movs	r2, #1
 80045f0:	409a      	lsls	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a4f      	ldr	r2, [pc, #316]	; (8004738 <HAL_DMA_Abort+0x5dc>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d072      	beq.n	80046e6 <HAL_DMA_Abort+0x58a>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a4d      	ldr	r2, [pc, #308]	; (800473c <HAL_DMA_Abort+0x5e0>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d06d      	beq.n	80046e6 <HAL_DMA_Abort+0x58a>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a4c      	ldr	r2, [pc, #304]	; (8004740 <HAL_DMA_Abort+0x5e4>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d068      	beq.n	80046e6 <HAL_DMA_Abort+0x58a>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a4a      	ldr	r2, [pc, #296]	; (8004744 <HAL_DMA_Abort+0x5e8>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d063      	beq.n	80046e6 <HAL_DMA_Abort+0x58a>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a49      	ldr	r2, [pc, #292]	; (8004748 <HAL_DMA_Abort+0x5ec>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d05e      	beq.n	80046e6 <HAL_DMA_Abort+0x58a>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a47      	ldr	r2, [pc, #284]	; (800474c <HAL_DMA_Abort+0x5f0>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d059      	beq.n	80046e6 <HAL_DMA_Abort+0x58a>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a46      	ldr	r2, [pc, #280]	; (8004750 <HAL_DMA_Abort+0x5f4>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d054      	beq.n	80046e6 <HAL_DMA_Abort+0x58a>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a44      	ldr	r2, [pc, #272]	; (8004754 <HAL_DMA_Abort+0x5f8>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d04f      	beq.n	80046e6 <HAL_DMA_Abort+0x58a>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a43      	ldr	r2, [pc, #268]	; (8004758 <HAL_DMA_Abort+0x5fc>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d04a      	beq.n	80046e6 <HAL_DMA_Abort+0x58a>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a41      	ldr	r2, [pc, #260]	; (800475c <HAL_DMA_Abort+0x600>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d045      	beq.n	80046e6 <HAL_DMA_Abort+0x58a>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a40      	ldr	r2, [pc, #256]	; (8004760 <HAL_DMA_Abort+0x604>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d040      	beq.n	80046e6 <HAL_DMA_Abort+0x58a>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a3e      	ldr	r2, [pc, #248]	; (8004764 <HAL_DMA_Abort+0x608>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d03b      	beq.n	80046e6 <HAL_DMA_Abort+0x58a>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a3d      	ldr	r2, [pc, #244]	; (8004768 <HAL_DMA_Abort+0x60c>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d036      	beq.n	80046e6 <HAL_DMA_Abort+0x58a>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a3b      	ldr	r2, [pc, #236]	; (800476c <HAL_DMA_Abort+0x610>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d031      	beq.n	80046e6 <HAL_DMA_Abort+0x58a>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a3a      	ldr	r2, [pc, #232]	; (8004770 <HAL_DMA_Abort+0x614>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d02c      	beq.n	80046e6 <HAL_DMA_Abort+0x58a>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a38      	ldr	r2, [pc, #224]	; (8004774 <HAL_DMA_Abort+0x618>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d027      	beq.n	80046e6 <HAL_DMA_Abort+0x58a>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a37      	ldr	r2, [pc, #220]	; (8004778 <HAL_DMA_Abort+0x61c>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d022      	beq.n	80046e6 <HAL_DMA_Abort+0x58a>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a35      	ldr	r2, [pc, #212]	; (800477c <HAL_DMA_Abort+0x620>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d01d      	beq.n	80046e6 <HAL_DMA_Abort+0x58a>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a34      	ldr	r2, [pc, #208]	; (8004780 <HAL_DMA_Abort+0x624>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d018      	beq.n	80046e6 <HAL_DMA_Abort+0x58a>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a32      	ldr	r2, [pc, #200]	; (8004784 <HAL_DMA_Abort+0x628>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d013      	beq.n	80046e6 <HAL_DMA_Abort+0x58a>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a31      	ldr	r2, [pc, #196]	; (8004788 <HAL_DMA_Abort+0x62c>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d00e      	beq.n	80046e6 <HAL_DMA_Abort+0x58a>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a2f      	ldr	r2, [pc, #188]	; (800478c <HAL_DMA_Abort+0x630>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d009      	beq.n	80046e6 <HAL_DMA_Abort+0x58a>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a2e      	ldr	r2, [pc, #184]	; (8004790 <HAL_DMA_Abort+0x634>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d004      	beq.n	80046e6 <HAL_DMA_Abort+0x58a>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a2c      	ldr	r2, [pc, #176]	; (8004794 <HAL_DMA_Abort+0x638>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d101      	bne.n	80046ea <HAL_DMA_Abort+0x58e>
 80046e6:	2301      	movs	r3, #1
 80046e8:	e000      	b.n	80046ec <HAL_DMA_Abort+0x590>
 80046ea:	2300      	movs	r3, #0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d015      	beq.n	800471c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80046f8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00c      	beq.n	800471c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800470c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004710:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800471a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	40020010 	.word	0x40020010
 800473c:	40020028 	.word	0x40020028
 8004740:	40020040 	.word	0x40020040
 8004744:	40020058 	.word	0x40020058
 8004748:	40020070 	.word	0x40020070
 800474c:	40020088 	.word	0x40020088
 8004750:	400200a0 	.word	0x400200a0
 8004754:	400200b8 	.word	0x400200b8
 8004758:	40020410 	.word	0x40020410
 800475c:	40020428 	.word	0x40020428
 8004760:	40020440 	.word	0x40020440
 8004764:	40020458 	.word	0x40020458
 8004768:	40020470 	.word	0x40020470
 800476c:	40020488 	.word	0x40020488
 8004770:	400204a0 	.word	0x400204a0
 8004774:	400204b8 	.word	0x400204b8
 8004778:	58025408 	.word	0x58025408
 800477c:	5802541c 	.word	0x5802541c
 8004780:	58025430 	.word	0x58025430
 8004784:	58025444 	.word	0x58025444
 8004788:	58025458 	.word	0x58025458
 800478c:	5802546c 	.word	0x5802546c
 8004790:	58025480 	.word	0x58025480
 8004794:	58025494 	.word	0x58025494

08004798 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e205      	b.n	8004bb6 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d004      	beq.n	80047c0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2280      	movs	r2, #128	; 0x80
 80047ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e1fa      	b.n	8004bb6 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a8c      	ldr	r2, [pc, #560]	; (80049f8 <HAL_DMA_Abort_IT+0x260>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d04a      	beq.n	8004860 <HAL_DMA_Abort_IT+0xc8>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a8b      	ldr	r2, [pc, #556]	; (80049fc <HAL_DMA_Abort_IT+0x264>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d045      	beq.n	8004860 <HAL_DMA_Abort_IT+0xc8>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a89      	ldr	r2, [pc, #548]	; (8004a00 <HAL_DMA_Abort_IT+0x268>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d040      	beq.n	8004860 <HAL_DMA_Abort_IT+0xc8>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a88      	ldr	r2, [pc, #544]	; (8004a04 <HAL_DMA_Abort_IT+0x26c>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d03b      	beq.n	8004860 <HAL_DMA_Abort_IT+0xc8>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a86      	ldr	r2, [pc, #536]	; (8004a08 <HAL_DMA_Abort_IT+0x270>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d036      	beq.n	8004860 <HAL_DMA_Abort_IT+0xc8>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a85      	ldr	r2, [pc, #532]	; (8004a0c <HAL_DMA_Abort_IT+0x274>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d031      	beq.n	8004860 <HAL_DMA_Abort_IT+0xc8>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a83      	ldr	r2, [pc, #524]	; (8004a10 <HAL_DMA_Abort_IT+0x278>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d02c      	beq.n	8004860 <HAL_DMA_Abort_IT+0xc8>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a82      	ldr	r2, [pc, #520]	; (8004a14 <HAL_DMA_Abort_IT+0x27c>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d027      	beq.n	8004860 <HAL_DMA_Abort_IT+0xc8>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a80      	ldr	r2, [pc, #512]	; (8004a18 <HAL_DMA_Abort_IT+0x280>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d022      	beq.n	8004860 <HAL_DMA_Abort_IT+0xc8>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a7f      	ldr	r2, [pc, #508]	; (8004a1c <HAL_DMA_Abort_IT+0x284>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d01d      	beq.n	8004860 <HAL_DMA_Abort_IT+0xc8>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a7d      	ldr	r2, [pc, #500]	; (8004a20 <HAL_DMA_Abort_IT+0x288>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d018      	beq.n	8004860 <HAL_DMA_Abort_IT+0xc8>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a7c      	ldr	r2, [pc, #496]	; (8004a24 <HAL_DMA_Abort_IT+0x28c>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d013      	beq.n	8004860 <HAL_DMA_Abort_IT+0xc8>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a7a      	ldr	r2, [pc, #488]	; (8004a28 <HAL_DMA_Abort_IT+0x290>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d00e      	beq.n	8004860 <HAL_DMA_Abort_IT+0xc8>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a79      	ldr	r2, [pc, #484]	; (8004a2c <HAL_DMA_Abort_IT+0x294>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d009      	beq.n	8004860 <HAL_DMA_Abort_IT+0xc8>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a77      	ldr	r2, [pc, #476]	; (8004a30 <HAL_DMA_Abort_IT+0x298>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d004      	beq.n	8004860 <HAL_DMA_Abort_IT+0xc8>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a76      	ldr	r2, [pc, #472]	; (8004a34 <HAL_DMA_Abort_IT+0x29c>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d101      	bne.n	8004864 <HAL_DMA_Abort_IT+0xcc>
 8004860:	2301      	movs	r3, #1
 8004862:	e000      	b.n	8004866 <HAL_DMA_Abort_IT+0xce>
 8004864:	2300      	movs	r3, #0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d065      	beq.n	8004936 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2204      	movs	r2, #4
 800486e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a60      	ldr	r2, [pc, #384]	; (80049f8 <HAL_DMA_Abort_IT+0x260>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d04a      	beq.n	8004912 <HAL_DMA_Abort_IT+0x17a>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a5e      	ldr	r2, [pc, #376]	; (80049fc <HAL_DMA_Abort_IT+0x264>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d045      	beq.n	8004912 <HAL_DMA_Abort_IT+0x17a>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a5d      	ldr	r2, [pc, #372]	; (8004a00 <HAL_DMA_Abort_IT+0x268>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d040      	beq.n	8004912 <HAL_DMA_Abort_IT+0x17a>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a5b      	ldr	r2, [pc, #364]	; (8004a04 <HAL_DMA_Abort_IT+0x26c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d03b      	beq.n	8004912 <HAL_DMA_Abort_IT+0x17a>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a5a      	ldr	r2, [pc, #360]	; (8004a08 <HAL_DMA_Abort_IT+0x270>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d036      	beq.n	8004912 <HAL_DMA_Abort_IT+0x17a>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a58      	ldr	r2, [pc, #352]	; (8004a0c <HAL_DMA_Abort_IT+0x274>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d031      	beq.n	8004912 <HAL_DMA_Abort_IT+0x17a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a57      	ldr	r2, [pc, #348]	; (8004a10 <HAL_DMA_Abort_IT+0x278>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d02c      	beq.n	8004912 <HAL_DMA_Abort_IT+0x17a>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a55      	ldr	r2, [pc, #340]	; (8004a14 <HAL_DMA_Abort_IT+0x27c>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d027      	beq.n	8004912 <HAL_DMA_Abort_IT+0x17a>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a54      	ldr	r2, [pc, #336]	; (8004a18 <HAL_DMA_Abort_IT+0x280>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d022      	beq.n	8004912 <HAL_DMA_Abort_IT+0x17a>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a52      	ldr	r2, [pc, #328]	; (8004a1c <HAL_DMA_Abort_IT+0x284>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d01d      	beq.n	8004912 <HAL_DMA_Abort_IT+0x17a>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a51      	ldr	r2, [pc, #324]	; (8004a20 <HAL_DMA_Abort_IT+0x288>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d018      	beq.n	8004912 <HAL_DMA_Abort_IT+0x17a>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a4f      	ldr	r2, [pc, #316]	; (8004a24 <HAL_DMA_Abort_IT+0x28c>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d013      	beq.n	8004912 <HAL_DMA_Abort_IT+0x17a>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a4e      	ldr	r2, [pc, #312]	; (8004a28 <HAL_DMA_Abort_IT+0x290>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d00e      	beq.n	8004912 <HAL_DMA_Abort_IT+0x17a>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a4c      	ldr	r2, [pc, #304]	; (8004a2c <HAL_DMA_Abort_IT+0x294>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d009      	beq.n	8004912 <HAL_DMA_Abort_IT+0x17a>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a4b      	ldr	r2, [pc, #300]	; (8004a30 <HAL_DMA_Abort_IT+0x298>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d004      	beq.n	8004912 <HAL_DMA_Abort_IT+0x17a>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a49      	ldr	r2, [pc, #292]	; (8004a34 <HAL_DMA_Abort_IT+0x29c>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d108      	bne.n	8004924 <HAL_DMA_Abort_IT+0x18c>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f022 0201 	bic.w	r2, r2, #1
 8004920:	601a      	str	r2, [r3, #0]
 8004922:	e147      	b.n	8004bb4 <HAL_DMA_Abort_IT+0x41c>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f022 0201 	bic.w	r2, r2, #1
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	e13e      	b.n	8004bb4 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 020e 	bic.w	r2, r2, #14
 8004944:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a2b      	ldr	r2, [pc, #172]	; (80049f8 <HAL_DMA_Abort_IT+0x260>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d04a      	beq.n	80049e6 <HAL_DMA_Abort_IT+0x24e>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a29      	ldr	r2, [pc, #164]	; (80049fc <HAL_DMA_Abort_IT+0x264>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d045      	beq.n	80049e6 <HAL_DMA_Abort_IT+0x24e>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a28      	ldr	r2, [pc, #160]	; (8004a00 <HAL_DMA_Abort_IT+0x268>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d040      	beq.n	80049e6 <HAL_DMA_Abort_IT+0x24e>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a26      	ldr	r2, [pc, #152]	; (8004a04 <HAL_DMA_Abort_IT+0x26c>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d03b      	beq.n	80049e6 <HAL_DMA_Abort_IT+0x24e>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a25      	ldr	r2, [pc, #148]	; (8004a08 <HAL_DMA_Abort_IT+0x270>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d036      	beq.n	80049e6 <HAL_DMA_Abort_IT+0x24e>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a23      	ldr	r2, [pc, #140]	; (8004a0c <HAL_DMA_Abort_IT+0x274>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d031      	beq.n	80049e6 <HAL_DMA_Abort_IT+0x24e>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a22      	ldr	r2, [pc, #136]	; (8004a10 <HAL_DMA_Abort_IT+0x278>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d02c      	beq.n	80049e6 <HAL_DMA_Abort_IT+0x24e>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a20      	ldr	r2, [pc, #128]	; (8004a14 <HAL_DMA_Abort_IT+0x27c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d027      	beq.n	80049e6 <HAL_DMA_Abort_IT+0x24e>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a1f      	ldr	r2, [pc, #124]	; (8004a18 <HAL_DMA_Abort_IT+0x280>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d022      	beq.n	80049e6 <HAL_DMA_Abort_IT+0x24e>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a1d      	ldr	r2, [pc, #116]	; (8004a1c <HAL_DMA_Abort_IT+0x284>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d01d      	beq.n	80049e6 <HAL_DMA_Abort_IT+0x24e>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a1c      	ldr	r2, [pc, #112]	; (8004a20 <HAL_DMA_Abort_IT+0x288>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d018      	beq.n	80049e6 <HAL_DMA_Abort_IT+0x24e>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a1a      	ldr	r2, [pc, #104]	; (8004a24 <HAL_DMA_Abort_IT+0x28c>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d013      	beq.n	80049e6 <HAL_DMA_Abort_IT+0x24e>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a19      	ldr	r2, [pc, #100]	; (8004a28 <HAL_DMA_Abort_IT+0x290>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d00e      	beq.n	80049e6 <HAL_DMA_Abort_IT+0x24e>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a17      	ldr	r2, [pc, #92]	; (8004a2c <HAL_DMA_Abort_IT+0x294>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d009      	beq.n	80049e6 <HAL_DMA_Abort_IT+0x24e>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a16      	ldr	r2, [pc, #88]	; (8004a30 <HAL_DMA_Abort_IT+0x298>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d004      	beq.n	80049e6 <HAL_DMA_Abort_IT+0x24e>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a14      	ldr	r2, [pc, #80]	; (8004a34 <HAL_DMA_Abort_IT+0x29c>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d128      	bne.n	8004a38 <HAL_DMA_Abort_IT+0x2a0>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 0201 	bic.w	r2, r2, #1
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	e027      	b.n	8004a48 <HAL_DMA_Abort_IT+0x2b0>
 80049f8:	40020010 	.word	0x40020010
 80049fc:	40020028 	.word	0x40020028
 8004a00:	40020040 	.word	0x40020040
 8004a04:	40020058 	.word	0x40020058
 8004a08:	40020070 	.word	0x40020070
 8004a0c:	40020088 	.word	0x40020088
 8004a10:	400200a0 	.word	0x400200a0
 8004a14:	400200b8 	.word	0x400200b8
 8004a18:	40020410 	.word	0x40020410
 8004a1c:	40020428 	.word	0x40020428
 8004a20:	40020440 	.word	0x40020440
 8004a24:	40020458 	.word	0x40020458
 8004a28:	40020470 	.word	0x40020470
 8004a2c:	40020488 	.word	0x40020488
 8004a30:	400204a0 	.word	0x400204a0
 8004a34:	400204b8 	.word	0x400204b8
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 0201 	bic.w	r2, r2, #1
 8004a46:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a5c      	ldr	r2, [pc, #368]	; (8004bc0 <HAL_DMA_Abort_IT+0x428>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d072      	beq.n	8004b38 <HAL_DMA_Abort_IT+0x3a0>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a5b      	ldr	r2, [pc, #364]	; (8004bc4 <HAL_DMA_Abort_IT+0x42c>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d06d      	beq.n	8004b38 <HAL_DMA_Abort_IT+0x3a0>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a59      	ldr	r2, [pc, #356]	; (8004bc8 <HAL_DMA_Abort_IT+0x430>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d068      	beq.n	8004b38 <HAL_DMA_Abort_IT+0x3a0>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a58      	ldr	r2, [pc, #352]	; (8004bcc <HAL_DMA_Abort_IT+0x434>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d063      	beq.n	8004b38 <HAL_DMA_Abort_IT+0x3a0>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a56      	ldr	r2, [pc, #344]	; (8004bd0 <HAL_DMA_Abort_IT+0x438>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d05e      	beq.n	8004b38 <HAL_DMA_Abort_IT+0x3a0>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a55      	ldr	r2, [pc, #340]	; (8004bd4 <HAL_DMA_Abort_IT+0x43c>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d059      	beq.n	8004b38 <HAL_DMA_Abort_IT+0x3a0>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a53      	ldr	r2, [pc, #332]	; (8004bd8 <HAL_DMA_Abort_IT+0x440>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d054      	beq.n	8004b38 <HAL_DMA_Abort_IT+0x3a0>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a52      	ldr	r2, [pc, #328]	; (8004bdc <HAL_DMA_Abort_IT+0x444>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d04f      	beq.n	8004b38 <HAL_DMA_Abort_IT+0x3a0>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a50      	ldr	r2, [pc, #320]	; (8004be0 <HAL_DMA_Abort_IT+0x448>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d04a      	beq.n	8004b38 <HAL_DMA_Abort_IT+0x3a0>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a4f      	ldr	r2, [pc, #316]	; (8004be4 <HAL_DMA_Abort_IT+0x44c>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d045      	beq.n	8004b38 <HAL_DMA_Abort_IT+0x3a0>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a4d      	ldr	r2, [pc, #308]	; (8004be8 <HAL_DMA_Abort_IT+0x450>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d040      	beq.n	8004b38 <HAL_DMA_Abort_IT+0x3a0>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a4c      	ldr	r2, [pc, #304]	; (8004bec <HAL_DMA_Abort_IT+0x454>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d03b      	beq.n	8004b38 <HAL_DMA_Abort_IT+0x3a0>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a4a      	ldr	r2, [pc, #296]	; (8004bf0 <HAL_DMA_Abort_IT+0x458>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d036      	beq.n	8004b38 <HAL_DMA_Abort_IT+0x3a0>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a49      	ldr	r2, [pc, #292]	; (8004bf4 <HAL_DMA_Abort_IT+0x45c>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d031      	beq.n	8004b38 <HAL_DMA_Abort_IT+0x3a0>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a47      	ldr	r2, [pc, #284]	; (8004bf8 <HAL_DMA_Abort_IT+0x460>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d02c      	beq.n	8004b38 <HAL_DMA_Abort_IT+0x3a0>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a46      	ldr	r2, [pc, #280]	; (8004bfc <HAL_DMA_Abort_IT+0x464>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d027      	beq.n	8004b38 <HAL_DMA_Abort_IT+0x3a0>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a44      	ldr	r2, [pc, #272]	; (8004c00 <HAL_DMA_Abort_IT+0x468>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d022      	beq.n	8004b38 <HAL_DMA_Abort_IT+0x3a0>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a43      	ldr	r2, [pc, #268]	; (8004c04 <HAL_DMA_Abort_IT+0x46c>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d01d      	beq.n	8004b38 <HAL_DMA_Abort_IT+0x3a0>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a41      	ldr	r2, [pc, #260]	; (8004c08 <HAL_DMA_Abort_IT+0x470>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d018      	beq.n	8004b38 <HAL_DMA_Abort_IT+0x3a0>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a40      	ldr	r2, [pc, #256]	; (8004c0c <HAL_DMA_Abort_IT+0x474>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d013      	beq.n	8004b38 <HAL_DMA_Abort_IT+0x3a0>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a3e      	ldr	r2, [pc, #248]	; (8004c10 <HAL_DMA_Abort_IT+0x478>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d00e      	beq.n	8004b38 <HAL_DMA_Abort_IT+0x3a0>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a3d      	ldr	r2, [pc, #244]	; (8004c14 <HAL_DMA_Abort_IT+0x47c>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d009      	beq.n	8004b38 <HAL_DMA_Abort_IT+0x3a0>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a3b      	ldr	r2, [pc, #236]	; (8004c18 <HAL_DMA_Abort_IT+0x480>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d004      	beq.n	8004b38 <HAL_DMA_Abort_IT+0x3a0>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a3a      	ldr	r2, [pc, #232]	; (8004c1c <HAL_DMA_Abort_IT+0x484>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d101      	bne.n	8004b3c <HAL_DMA_Abort_IT+0x3a4>
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e000      	b.n	8004b3e <HAL_DMA_Abort_IT+0x3a6>
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d028      	beq.n	8004b94 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b50:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b56:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b5c:	f003 031f 	and.w	r3, r3, #31
 8004b60:	2201      	movs	r2, #1
 8004b62:	409a      	lsls	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004b70:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00c      	beq.n	8004b94 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b88:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004b92:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d003      	beq.n	8004bb4 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	40020010 	.word	0x40020010
 8004bc4:	40020028 	.word	0x40020028
 8004bc8:	40020040 	.word	0x40020040
 8004bcc:	40020058 	.word	0x40020058
 8004bd0:	40020070 	.word	0x40020070
 8004bd4:	40020088 	.word	0x40020088
 8004bd8:	400200a0 	.word	0x400200a0
 8004bdc:	400200b8 	.word	0x400200b8
 8004be0:	40020410 	.word	0x40020410
 8004be4:	40020428 	.word	0x40020428
 8004be8:	40020440 	.word	0x40020440
 8004bec:	40020458 	.word	0x40020458
 8004bf0:	40020470 	.word	0x40020470
 8004bf4:	40020488 	.word	0x40020488
 8004bf8:	400204a0 	.word	0x400204a0
 8004bfc:	400204b8 	.word	0x400204b8
 8004c00:	58025408 	.word	0x58025408
 8004c04:	5802541c 	.word	0x5802541c
 8004c08:	58025430 	.word	0x58025430
 8004c0c:	58025444 	.word	0x58025444
 8004c10:	58025458 	.word	0x58025458
 8004c14:	5802546c 	.word	0x5802546c
 8004c18:	58025480 	.word	0x58025480
 8004c1c:	58025494 	.word	0x58025494

08004c20 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b08a      	sub	sp, #40	; 0x28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004c2c:	4b67      	ldr	r3, [pc, #412]	; (8004dcc <HAL_DMA_IRQHandler+0x1ac>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a67      	ldr	r2, [pc, #412]	; (8004dd0 <HAL_DMA_IRQHandler+0x1b0>)
 8004c32:	fba2 2303 	umull	r2, r3, r2, r3
 8004c36:	0a9b      	lsrs	r3, r3, #10
 8004c38:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c3e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c44:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004c46:	6a3b      	ldr	r3, [r7, #32]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a5f      	ldr	r2, [pc, #380]	; (8004dd4 <HAL_DMA_IRQHandler+0x1b4>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d04a      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xd2>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a5d      	ldr	r2, [pc, #372]	; (8004dd8 <HAL_DMA_IRQHandler+0x1b8>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d045      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xd2>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a5c      	ldr	r2, [pc, #368]	; (8004ddc <HAL_DMA_IRQHandler+0x1bc>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d040      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xd2>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a5a      	ldr	r2, [pc, #360]	; (8004de0 <HAL_DMA_IRQHandler+0x1c0>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d03b      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xd2>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a59      	ldr	r2, [pc, #356]	; (8004de4 <HAL_DMA_IRQHandler+0x1c4>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d036      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xd2>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a57      	ldr	r2, [pc, #348]	; (8004de8 <HAL_DMA_IRQHandler+0x1c8>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d031      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xd2>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a56      	ldr	r2, [pc, #344]	; (8004dec <HAL_DMA_IRQHandler+0x1cc>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d02c      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xd2>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a54      	ldr	r2, [pc, #336]	; (8004df0 <HAL_DMA_IRQHandler+0x1d0>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d027      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xd2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a53      	ldr	r2, [pc, #332]	; (8004df4 <HAL_DMA_IRQHandler+0x1d4>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d022      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xd2>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a51      	ldr	r2, [pc, #324]	; (8004df8 <HAL_DMA_IRQHandler+0x1d8>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d01d      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xd2>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a50      	ldr	r2, [pc, #320]	; (8004dfc <HAL_DMA_IRQHandler+0x1dc>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d018      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xd2>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a4e      	ldr	r2, [pc, #312]	; (8004e00 <HAL_DMA_IRQHandler+0x1e0>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d013      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xd2>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a4d      	ldr	r2, [pc, #308]	; (8004e04 <HAL_DMA_IRQHandler+0x1e4>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d00e      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xd2>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a4b      	ldr	r2, [pc, #300]	; (8004e08 <HAL_DMA_IRQHandler+0x1e8>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d009      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xd2>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a4a      	ldr	r2, [pc, #296]	; (8004e0c <HAL_DMA_IRQHandler+0x1ec>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d004      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0xd2>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a48      	ldr	r2, [pc, #288]	; (8004e10 <HAL_DMA_IRQHandler+0x1f0>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d101      	bne.n	8004cf6 <HAL_DMA_IRQHandler+0xd6>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e000      	b.n	8004cf8 <HAL_DMA_IRQHandler+0xd8>
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f000 842b 	beq.w	8005554 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d02:	f003 031f 	and.w	r3, r3, #31
 8004d06:	2208      	movs	r2, #8
 8004d08:	409a      	lsls	r2, r3
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f000 80a2 	beq.w	8004e58 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a2e      	ldr	r2, [pc, #184]	; (8004dd4 <HAL_DMA_IRQHandler+0x1b4>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d04a      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x194>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a2d      	ldr	r2, [pc, #180]	; (8004dd8 <HAL_DMA_IRQHandler+0x1b8>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d045      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x194>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a2b      	ldr	r2, [pc, #172]	; (8004ddc <HAL_DMA_IRQHandler+0x1bc>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d040      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x194>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a2a      	ldr	r2, [pc, #168]	; (8004de0 <HAL_DMA_IRQHandler+0x1c0>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d03b      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x194>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a28      	ldr	r2, [pc, #160]	; (8004de4 <HAL_DMA_IRQHandler+0x1c4>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d036      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x194>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a27      	ldr	r2, [pc, #156]	; (8004de8 <HAL_DMA_IRQHandler+0x1c8>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d031      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x194>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a25      	ldr	r2, [pc, #148]	; (8004dec <HAL_DMA_IRQHandler+0x1cc>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d02c      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x194>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a24      	ldr	r2, [pc, #144]	; (8004df0 <HAL_DMA_IRQHandler+0x1d0>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d027      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x194>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a22      	ldr	r2, [pc, #136]	; (8004df4 <HAL_DMA_IRQHandler+0x1d4>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d022      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x194>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a21      	ldr	r2, [pc, #132]	; (8004df8 <HAL_DMA_IRQHandler+0x1d8>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d01d      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x194>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a1f      	ldr	r2, [pc, #124]	; (8004dfc <HAL_DMA_IRQHandler+0x1dc>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d018      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x194>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a1e      	ldr	r2, [pc, #120]	; (8004e00 <HAL_DMA_IRQHandler+0x1e0>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d013      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x194>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a1c      	ldr	r2, [pc, #112]	; (8004e04 <HAL_DMA_IRQHandler+0x1e4>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d00e      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x194>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a1b      	ldr	r2, [pc, #108]	; (8004e08 <HAL_DMA_IRQHandler+0x1e8>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d009      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x194>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a19      	ldr	r2, [pc, #100]	; (8004e0c <HAL_DMA_IRQHandler+0x1ec>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d004      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x194>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a18      	ldr	r2, [pc, #96]	; (8004e10 <HAL_DMA_IRQHandler+0x1f0>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d12f      	bne.n	8004e14 <HAL_DMA_IRQHandler+0x1f4>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0304 	and.w	r3, r3, #4
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	bf14      	ite	ne
 8004dc2:	2301      	movne	r3, #1
 8004dc4:	2300      	moveq	r3, #0
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	e02e      	b.n	8004e28 <HAL_DMA_IRQHandler+0x208>
 8004dca:	bf00      	nop
 8004dcc:	24000000 	.word	0x24000000
 8004dd0:	1b4e81b5 	.word	0x1b4e81b5
 8004dd4:	40020010 	.word	0x40020010
 8004dd8:	40020028 	.word	0x40020028
 8004ddc:	40020040 	.word	0x40020040
 8004de0:	40020058 	.word	0x40020058
 8004de4:	40020070 	.word	0x40020070
 8004de8:	40020088 	.word	0x40020088
 8004dec:	400200a0 	.word	0x400200a0
 8004df0:	400200b8 	.word	0x400200b8
 8004df4:	40020410 	.word	0x40020410
 8004df8:	40020428 	.word	0x40020428
 8004dfc:	40020440 	.word	0x40020440
 8004e00:	40020458 	.word	0x40020458
 8004e04:	40020470 	.word	0x40020470
 8004e08:	40020488 	.word	0x40020488
 8004e0c:	400204a0 	.word	0x400204a0
 8004e10:	400204b8 	.word	0x400204b8
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0308 	and.w	r3, r3, #8
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	bf14      	ite	ne
 8004e22:	2301      	movne	r3, #1
 8004e24:	2300      	moveq	r3, #0
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d015      	beq.n	8004e58 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f022 0204 	bic.w	r2, r2, #4
 8004e3a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e40:	f003 031f 	and.w	r3, r3, #31
 8004e44:	2208      	movs	r2, #8
 8004e46:	409a      	lsls	r2, r3
 8004e48:	6a3b      	ldr	r3, [r7, #32]
 8004e4a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e50:	f043 0201 	orr.w	r2, r3, #1
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e5c:	f003 031f 	and.w	r3, r3, #31
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	fa22 f303 	lsr.w	r3, r2, r3
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d06e      	beq.n	8004f4c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a69      	ldr	r2, [pc, #420]	; (8005018 <HAL_DMA_IRQHandler+0x3f8>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d04a      	beq.n	8004f0e <HAL_DMA_IRQHandler+0x2ee>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a67      	ldr	r2, [pc, #412]	; (800501c <HAL_DMA_IRQHandler+0x3fc>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d045      	beq.n	8004f0e <HAL_DMA_IRQHandler+0x2ee>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a66      	ldr	r2, [pc, #408]	; (8005020 <HAL_DMA_IRQHandler+0x400>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d040      	beq.n	8004f0e <HAL_DMA_IRQHandler+0x2ee>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a64      	ldr	r2, [pc, #400]	; (8005024 <HAL_DMA_IRQHandler+0x404>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d03b      	beq.n	8004f0e <HAL_DMA_IRQHandler+0x2ee>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a63      	ldr	r2, [pc, #396]	; (8005028 <HAL_DMA_IRQHandler+0x408>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d036      	beq.n	8004f0e <HAL_DMA_IRQHandler+0x2ee>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a61      	ldr	r2, [pc, #388]	; (800502c <HAL_DMA_IRQHandler+0x40c>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d031      	beq.n	8004f0e <HAL_DMA_IRQHandler+0x2ee>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a60      	ldr	r2, [pc, #384]	; (8005030 <HAL_DMA_IRQHandler+0x410>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d02c      	beq.n	8004f0e <HAL_DMA_IRQHandler+0x2ee>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a5e      	ldr	r2, [pc, #376]	; (8005034 <HAL_DMA_IRQHandler+0x414>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d027      	beq.n	8004f0e <HAL_DMA_IRQHandler+0x2ee>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a5d      	ldr	r2, [pc, #372]	; (8005038 <HAL_DMA_IRQHandler+0x418>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d022      	beq.n	8004f0e <HAL_DMA_IRQHandler+0x2ee>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a5b      	ldr	r2, [pc, #364]	; (800503c <HAL_DMA_IRQHandler+0x41c>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d01d      	beq.n	8004f0e <HAL_DMA_IRQHandler+0x2ee>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a5a      	ldr	r2, [pc, #360]	; (8005040 <HAL_DMA_IRQHandler+0x420>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d018      	beq.n	8004f0e <HAL_DMA_IRQHandler+0x2ee>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a58      	ldr	r2, [pc, #352]	; (8005044 <HAL_DMA_IRQHandler+0x424>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d013      	beq.n	8004f0e <HAL_DMA_IRQHandler+0x2ee>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a57      	ldr	r2, [pc, #348]	; (8005048 <HAL_DMA_IRQHandler+0x428>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d00e      	beq.n	8004f0e <HAL_DMA_IRQHandler+0x2ee>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a55      	ldr	r2, [pc, #340]	; (800504c <HAL_DMA_IRQHandler+0x42c>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d009      	beq.n	8004f0e <HAL_DMA_IRQHandler+0x2ee>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a54      	ldr	r2, [pc, #336]	; (8005050 <HAL_DMA_IRQHandler+0x430>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d004      	beq.n	8004f0e <HAL_DMA_IRQHandler+0x2ee>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a52      	ldr	r2, [pc, #328]	; (8005054 <HAL_DMA_IRQHandler+0x434>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d10a      	bne.n	8004f24 <HAL_DMA_IRQHandler+0x304>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	bf14      	ite	ne
 8004f1c:	2301      	movne	r3, #1
 8004f1e:	2300      	moveq	r3, #0
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	e003      	b.n	8004f2c <HAL_DMA_IRQHandler+0x30c>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00d      	beq.n	8004f4c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f34:	f003 031f 	and.w	r3, r3, #31
 8004f38:	2201      	movs	r2, #1
 8004f3a:	409a      	lsls	r2, r3
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f44:	f043 0202 	orr.w	r2, r3, #2
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f50:	f003 031f 	and.w	r3, r3, #31
 8004f54:	2204      	movs	r2, #4
 8004f56:	409a      	lsls	r2, r3
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f000 808f 	beq.w	8005080 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a2c      	ldr	r2, [pc, #176]	; (8005018 <HAL_DMA_IRQHandler+0x3f8>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d04a      	beq.n	8005002 <HAL_DMA_IRQHandler+0x3e2>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a2a      	ldr	r2, [pc, #168]	; (800501c <HAL_DMA_IRQHandler+0x3fc>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d045      	beq.n	8005002 <HAL_DMA_IRQHandler+0x3e2>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a29      	ldr	r2, [pc, #164]	; (8005020 <HAL_DMA_IRQHandler+0x400>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d040      	beq.n	8005002 <HAL_DMA_IRQHandler+0x3e2>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a27      	ldr	r2, [pc, #156]	; (8005024 <HAL_DMA_IRQHandler+0x404>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d03b      	beq.n	8005002 <HAL_DMA_IRQHandler+0x3e2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a26      	ldr	r2, [pc, #152]	; (8005028 <HAL_DMA_IRQHandler+0x408>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d036      	beq.n	8005002 <HAL_DMA_IRQHandler+0x3e2>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a24      	ldr	r2, [pc, #144]	; (800502c <HAL_DMA_IRQHandler+0x40c>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d031      	beq.n	8005002 <HAL_DMA_IRQHandler+0x3e2>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a23      	ldr	r2, [pc, #140]	; (8005030 <HAL_DMA_IRQHandler+0x410>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d02c      	beq.n	8005002 <HAL_DMA_IRQHandler+0x3e2>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a21      	ldr	r2, [pc, #132]	; (8005034 <HAL_DMA_IRQHandler+0x414>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d027      	beq.n	8005002 <HAL_DMA_IRQHandler+0x3e2>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a20      	ldr	r2, [pc, #128]	; (8005038 <HAL_DMA_IRQHandler+0x418>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d022      	beq.n	8005002 <HAL_DMA_IRQHandler+0x3e2>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a1e      	ldr	r2, [pc, #120]	; (800503c <HAL_DMA_IRQHandler+0x41c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d01d      	beq.n	8005002 <HAL_DMA_IRQHandler+0x3e2>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a1d      	ldr	r2, [pc, #116]	; (8005040 <HAL_DMA_IRQHandler+0x420>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d018      	beq.n	8005002 <HAL_DMA_IRQHandler+0x3e2>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a1b      	ldr	r2, [pc, #108]	; (8005044 <HAL_DMA_IRQHandler+0x424>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d013      	beq.n	8005002 <HAL_DMA_IRQHandler+0x3e2>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a1a      	ldr	r2, [pc, #104]	; (8005048 <HAL_DMA_IRQHandler+0x428>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d00e      	beq.n	8005002 <HAL_DMA_IRQHandler+0x3e2>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a18      	ldr	r2, [pc, #96]	; (800504c <HAL_DMA_IRQHandler+0x42c>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d009      	beq.n	8005002 <HAL_DMA_IRQHandler+0x3e2>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a17      	ldr	r2, [pc, #92]	; (8005050 <HAL_DMA_IRQHandler+0x430>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d004      	beq.n	8005002 <HAL_DMA_IRQHandler+0x3e2>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a15      	ldr	r2, [pc, #84]	; (8005054 <HAL_DMA_IRQHandler+0x434>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d12a      	bne.n	8005058 <HAL_DMA_IRQHandler+0x438>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b00      	cmp	r3, #0
 800500e:	bf14      	ite	ne
 8005010:	2301      	movne	r3, #1
 8005012:	2300      	moveq	r3, #0
 8005014:	b2db      	uxtb	r3, r3
 8005016:	e023      	b.n	8005060 <HAL_DMA_IRQHandler+0x440>
 8005018:	40020010 	.word	0x40020010
 800501c:	40020028 	.word	0x40020028
 8005020:	40020040 	.word	0x40020040
 8005024:	40020058 	.word	0x40020058
 8005028:	40020070 	.word	0x40020070
 800502c:	40020088 	.word	0x40020088
 8005030:	400200a0 	.word	0x400200a0
 8005034:	400200b8 	.word	0x400200b8
 8005038:	40020410 	.word	0x40020410
 800503c:	40020428 	.word	0x40020428
 8005040:	40020440 	.word	0x40020440
 8005044:	40020458 	.word	0x40020458
 8005048:	40020470 	.word	0x40020470
 800504c:	40020488 	.word	0x40020488
 8005050:	400204a0 	.word	0x400204a0
 8005054:	400204b8 	.word	0x400204b8
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2300      	movs	r3, #0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00d      	beq.n	8005080 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005068:	f003 031f 	and.w	r3, r3, #31
 800506c:	2204      	movs	r2, #4
 800506e:	409a      	lsls	r2, r3
 8005070:	6a3b      	ldr	r3, [r7, #32]
 8005072:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005078:	f043 0204 	orr.w	r2, r3, #4
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005084:	f003 031f 	and.w	r3, r3, #31
 8005088:	2210      	movs	r2, #16
 800508a:	409a      	lsls	r2, r3
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	4013      	ands	r3, r2
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 80a6 	beq.w	80051e2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a85      	ldr	r2, [pc, #532]	; (80052b0 <HAL_DMA_IRQHandler+0x690>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d04a      	beq.n	8005136 <HAL_DMA_IRQHandler+0x516>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a83      	ldr	r2, [pc, #524]	; (80052b4 <HAL_DMA_IRQHandler+0x694>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d045      	beq.n	8005136 <HAL_DMA_IRQHandler+0x516>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a82      	ldr	r2, [pc, #520]	; (80052b8 <HAL_DMA_IRQHandler+0x698>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d040      	beq.n	8005136 <HAL_DMA_IRQHandler+0x516>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a80      	ldr	r2, [pc, #512]	; (80052bc <HAL_DMA_IRQHandler+0x69c>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d03b      	beq.n	8005136 <HAL_DMA_IRQHandler+0x516>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a7f      	ldr	r2, [pc, #508]	; (80052c0 <HAL_DMA_IRQHandler+0x6a0>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d036      	beq.n	8005136 <HAL_DMA_IRQHandler+0x516>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a7d      	ldr	r2, [pc, #500]	; (80052c4 <HAL_DMA_IRQHandler+0x6a4>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d031      	beq.n	8005136 <HAL_DMA_IRQHandler+0x516>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a7c      	ldr	r2, [pc, #496]	; (80052c8 <HAL_DMA_IRQHandler+0x6a8>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d02c      	beq.n	8005136 <HAL_DMA_IRQHandler+0x516>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a7a      	ldr	r2, [pc, #488]	; (80052cc <HAL_DMA_IRQHandler+0x6ac>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d027      	beq.n	8005136 <HAL_DMA_IRQHandler+0x516>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a79      	ldr	r2, [pc, #484]	; (80052d0 <HAL_DMA_IRQHandler+0x6b0>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d022      	beq.n	8005136 <HAL_DMA_IRQHandler+0x516>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a77      	ldr	r2, [pc, #476]	; (80052d4 <HAL_DMA_IRQHandler+0x6b4>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d01d      	beq.n	8005136 <HAL_DMA_IRQHandler+0x516>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a76      	ldr	r2, [pc, #472]	; (80052d8 <HAL_DMA_IRQHandler+0x6b8>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d018      	beq.n	8005136 <HAL_DMA_IRQHandler+0x516>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a74      	ldr	r2, [pc, #464]	; (80052dc <HAL_DMA_IRQHandler+0x6bc>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d013      	beq.n	8005136 <HAL_DMA_IRQHandler+0x516>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a73      	ldr	r2, [pc, #460]	; (80052e0 <HAL_DMA_IRQHandler+0x6c0>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d00e      	beq.n	8005136 <HAL_DMA_IRQHandler+0x516>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a71      	ldr	r2, [pc, #452]	; (80052e4 <HAL_DMA_IRQHandler+0x6c4>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d009      	beq.n	8005136 <HAL_DMA_IRQHandler+0x516>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a70      	ldr	r2, [pc, #448]	; (80052e8 <HAL_DMA_IRQHandler+0x6c8>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d004      	beq.n	8005136 <HAL_DMA_IRQHandler+0x516>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a6e      	ldr	r2, [pc, #440]	; (80052ec <HAL_DMA_IRQHandler+0x6cc>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d10a      	bne.n	800514c <HAL_DMA_IRQHandler+0x52c>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0308 	and.w	r3, r3, #8
 8005140:	2b00      	cmp	r3, #0
 8005142:	bf14      	ite	ne
 8005144:	2301      	movne	r3, #1
 8005146:	2300      	moveq	r3, #0
 8005148:	b2db      	uxtb	r3, r3
 800514a:	e009      	b.n	8005160 <HAL_DMA_IRQHandler+0x540>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0304 	and.w	r3, r3, #4
 8005156:	2b00      	cmp	r3, #0
 8005158:	bf14      	ite	ne
 800515a:	2301      	movne	r3, #1
 800515c:	2300      	moveq	r3, #0
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	d03e      	beq.n	80051e2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005168:	f003 031f 	and.w	r3, r3, #31
 800516c:	2210      	movs	r2, #16
 800516e:	409a      	lsls	r2, r3
 8005170:	6a3b      	ldr	r3, [r7, #32]
 8005172:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d018      	beq.n	80051b4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d108      	bne.n	80051a2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005194:	2b00      	cmp	r3, #0
 8005196:	d024      	beq.n	80051e2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	4798      	blx	r3
 80051a0:	e01f      	b.n	80051e2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d01b      	beq.n	80051e2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	4798      	blx	r3
 80051b2:	e016      	b.n	80051e2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d107      	bne.n	80051d2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f022 0208 	bic.w	r2, r2, #8
 80051d0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051e6:	f003 031f 	and.w	r3, r3, #31
 80051ea:	2220      	movs	r2, #32
 80051ec:	409a      	lsls	r2, r3
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	4013      	ands	r3, r2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f000 8110 	beq.w	8005418 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a2c      	ldr	r2, [pc, #176]	; (80052b0 <HAL_DMA_IRQHandler+0x690>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d04a      	beq.n	8005298 <HAL_DMA_IRQHandler+0x678>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a2b      	ldr	r2, [pc, #172]	; (80052b4 <HAL_DMA_IRQHandler+0x694>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d045      	beq.n	8005298 <HAL_DMA_IRQHandler+0x678>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a29      	ldr	r2, [pc, #164]	; (80052b8 <HAL_DMA_IRQHandler+0x698>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d040      	beq.n	8005298 <HAL_DMA_IRQHandler+0x678>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a28      	ldr	r2, [pc, #160]	; (80052bc <HAL_DMA_IRQHandler+0x69c>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d03b      	beq.n	8005298 <HAL_DMA_IRQHandler+0x678>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a26      	ldr	r2, [pc, #152]	; (80052c0 <HAL_DMA_IRQHandler+0x6a0>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d036      	beq.n	8005298 <HAL_DMA_IRQHandler+0x678>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a25      	ldr	r2, [pc, #148]	; (80052c4 <HAL_DMA_IRQHandler+0x6a4>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d031      	beq.n	8005298 <HAL_DMA_IRQHandler+0x678>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a23      	ldr	r2, [pc, #140]	; (80052c8 <HAL_DMA_IRQHandler+0x6a8>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d02c      	beq.n	8005298 <HAL_DMA_IRQHandler+0x678>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a22      	ldr	r2, [pc, #136]	; (80052cc <HAL_DMA_IRQHandler+0x6ac>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d027      	beq.n	8005298 <HAL_DMA_IRQHandler+0x678>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a20      	ldr	r2, [pc, #128]	; (80052d0 <HAL_DMA_IRQHandler+0x6b0>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d022      	beq.n	8005298 <HAL_DMA_IRQHandler+0x678>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a1f      	ldr	r2, [pc, #124]	; (80052d4 <HAL_DMA_IRQHandler+0x6b4>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d01d      	beq.n	8005298 <HAL_DMA_IRQHandler+0x678>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a1d      	ldr	r2, [pc, #116]	; (80052d8 <HAL_DMA_IRQHandler+0x6b8>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d018      	beq.n	8005298 <HAL_DMA_IRQHandler+0x678>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a1c      	ldr	r2, [pc, #112]	; (80052dc <HAL_DMA_IRQHandler+0x6bc>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d013      	beq.n	8005298 <HAL_DMA_IRQHandler+0x678>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a1a      	ldr	r2, [pc, #104]	; (80052e0 <HAL_DMA_IRQHandler+0x6c0>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d00e      	beq.n	8005298 <HAL_DMA_IRQHandler+0x678>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a19      	ldr	r2, [pc, #100]	; (80052e4 <HAL_DMA_IRQHandler+0x6c4>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d009      	beq.n	8005298 <HAL_DMA_IRQHandler+0x678>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a17      	ldr	r2, [pc, #92]	; (80052e8 <HAL_DMA_IRQHandler+0x6c8>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d004      	beq.n	8005298 <HAL_DMA_IRQHandler+0x678>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a16      	ldr	r2, [pc, #88]	; (80052ec <HAL_DMA_IRQHandler+0x6cc>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d12b      	bne.n	80052f0 <HAL_DMA_IRQHandler+0x6d0>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0310 	and.w	r3, r3, #16
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	bf14      	ite	ne
 80052a6:	2301      	movne	r3, #1
 80052a8:	2300      	moveq	r3, #0
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	e02a      	b.n	8005304 <HAL_DMA_IRQHandler+0x6e4>
 80052ae:	bf00      	nop
 80052b0:	40020010 	.word	0x40020010
 80052b4:	40020028 	.word	0x40020028
 80052b8:	40020040 	.word	0x40020040
 80052bc:	40020058 	.word	0x40020058
 80052c0:	40020070 	.word	0x40020070
 80052c4:	40020088 	.word	0x40020088
 80052c8:	400200a0 	.word	0x400200a0
 80052cc:	400200b8 	.word	0x400200b8
 80052d0:	40020410 	.word	0x40020410
 80052d4:	40020428 	.word	0x40020428
 80052d8:	40020440 	.word	0x40020440
 80052dc:	40020458 	.word	0x40020458
 80052e0:	40020470 	.word	0x40020470
 80052e4:	40020488 	.word	0x40020488
 80052e8:	400204a0 	.word	0x400204a0
 80052ec:	400204b8 	.word	0x400204b8
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0302 	and.w	r3, r3, #2
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	bf14      	ite	ne
 80052fe:	2301      	movne	r3, #1
 8005300:	2300      	moveq	r3, #0
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b00      	cmp	r3, #0
 8005306:	f000 8087 	beq.w	8005418 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800530e:	f003 031f 	and.w	r3, r3, #31
 8005312:	2220      	movs	r2, #32
 8005314:	409a      	lsls	r2, r3
 8005316:	6a3b      	ldr	r3, [r7, #32]
 8005318:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b04      	cmp	r3, #4
 8005324:	d139      	bne.n	800539a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f022 0216 	bic.w	r2, r2, #22
 8005334:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	695a      	ldr	r2, [r3, #20]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005344:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534a:	2b00      	cmp	r3, #0
 800534c:	d103      	bne.n	8005356 <HAL_DMA_IRQHandler+0x736>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005352:	2b00      	cmp	r3, #0
 8005354:	d007      	beq.n	8005366 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f022 0208 	bic.w	r2, r2, #8
 8005364:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800536a:	f003 031f 	and.w	r3, r3, #31
 800536e:	223f      	movs	r2, #63	; 0x3f
 8005370:	409a      	lsls	r2, r3
 8005372:	6a3b      	ldr	r3, [r7, #32]
 8005374:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800538a:	2b00      	cmp	r3, #0
 800538c:	f000 834a 	beq.w	8005a24 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	4798      	blx	r3
          }
          return;
 8005398:	e344      	b.n	8005a24 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d018      	beq.n	80053da <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d108      	bne.n	80053c8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d02c      	beq.n	8005418 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	4798      	blx	r3
 80053c6:	e027      	b.n	8005418 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d023      	beq.n	8005418 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	4798      	blx	r3
 80053d8:	e01e      	b.n	8005418 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10f      	bne.n	8005408 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 0210 	bic.w	r2, r2, #16
 80053f6:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800540c:	2b00      	cmp	r3, #0
 800540e:	d003      	beq.n	8005418 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800541c:	2b00      	cmp	r3, #0
 800541e:	f000 8306 	beq.w	8005a2e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 8088 	beq.w	8005540 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2204      	movs	r2, #4
 8005434:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a7a      	ldr	r2, [pc, #488]	; (8005628 <HAL_DMA_IRQHandler+0xa08>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d04a      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x8b8>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a79      	ldr	r2, [pc, #484]	; (800562c <HAL_DMA_IRQHandler+0xa0c>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d045      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x8b8>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a77      	ldr	r2, [pc, #476]	; (8005630 <HAL_DMA_IRQHandler+0xa10>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d040      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x8b8>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a76      	ldr	r2, [pc, #472]	; (8005634 <HAL_DMA_IRQHandler+0xa14>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d03b      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x8b8>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a74      	ldr	r2, [pc, #464]	; (8005638 <HAL_DMA_IRQHandler+0xa18>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d036      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x8b8>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a73      	ldr	r2, [pc, #460]	; (800563c <HAL_DMA_IRQHandler+0xa1c>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d031      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x8b8>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a71      	ldr	r2, [pc, #452]	; (8005640 <HAL_DMA_IRQHandler+0xa20>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d02c      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x8b8>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a70      	ldr	r2, [pc, #448]	; (8005644 <HAL_DMA_IRQHandler+0xa24>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d027      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x8b8>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a6e      	ldr	r2, [pc, #440]	; (8005648 <HAL_DMA_IRQHandler+0xa28>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d022      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x8b8>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a6d      	ldr	r2, [pc, #436]	; (800564c <HAL_DMA_IRQHandler+0xa2c>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d01d      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x8b8>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a6b      	ldr	r2, [pc, #428]	; (8005650 <HAL_DMA_IRQHandler+0xa30>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d018      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x8b8>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a6a      	ldr	r2, [pc, #424]	; (8005654 <HAL_DMA_IRQHandler+0xa34>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d013      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x8b8>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a68      	ldr	r2, [pc, #416]	; (8005658 <HAL_DMA_IRQHandler+0xa38>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d00e      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x8b8>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a67      	ldr	r2, [pc, #412]	; (800565c <HAL_DMA_IRQHandler+0xa3c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d009      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x8b8>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a65      	ldr	r2, [pc, #404]	; (8005660 <HAL_DMA_IRQHandler+0xa40>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d004      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x8b8>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a64      	ldr	r2, [pc, #400]	; (8005664 <HAL_DMA_IRQHandler+0xa44>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d108      	bne.n	80054ea <HAL_DMA_IRQHandler+0x8ca>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f022 0201 	bic.w	r2, r2, #1
 80054e6:	601a      	str	r2, [r3, #0]
 80054e8:	e007      	b.n	80054fa <HAL_DMA_IRQHandler+0x8da>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f022 0201 	bic.w	r2, r2, #1
 80054f8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	3301      	adds	r3, #1
 80054fe:	60fb      	str	r3, [r7, #12]
 8005500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005502:	429a      	cmp	r2, r3
 8005504:	d307      	bcc.n	8005516 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0301 	and.w	r3, r3, #1
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1f2      	bne.n	80054fa <HAL_DMA_IRQHandler+0x8da>
 8005514:	e000      	b.n	8005518 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005516:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b00      	cmp	r3, #0
 800552c:	d004      	beq.n	8005538 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2203      	movs	r2, #3
 8005532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005536:	e003      	b.n	8005540 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005544:	2b00      	cmp	r3, #0
 8005546:	f000 8272 	beq.w	8005a2e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	4798      	blx	r3
 8005552:	e26c      	b.n	8005a2e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a43      	ldr	r2, [pc, #268]	; (8005668 <HAL_DMA_IRQHandler+0xa48>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d022      	beq.n	80055a4 <HAL_DMA_IRQHandler+0x984>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a42      	ldr	r2, [pc, #264]	; (800566c <HAL_DMA_IRQHandler+0xa4c>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d01d      	beq.n	80055a4 <HAL_DMA_IRQHandler+0x984>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a40      	ldr	r2, [pc, #256]	; (8005670 <HAL_DMA_IRQHandler+0xa50>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d018      	beq.n	80055a4 <HAL_DMA_IRQHandler+0x984>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a3f      	ldr	r2, [pc, #252]	; (8005674 <HAL_DMA_IRQHandler+0xa54>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d013      	beq.n	80055a4 <HAL_DMA_IRQHandler+0x984>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a3d      	ldr	r2, [pc, #244]	; (8005678 <HAL_DMA_IRQHandler+0xa58>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d00e      	beq.n	80055a4 <HAL_DMA_IRQHandler+0x984>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a3c      	ldr	r2, [pc, #240]	; (800567c <HAL_DMA_IRQHandler+0xa5c>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d009      	beq.n	80055a4 <HAL_DMA_IRQHandler+0x984>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a3a      	ldr	r2, [pc, #232]	; (8005680 <HAL_DMA_IRQHandler+0xa60>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d004      	beq.n	80055a4 <HAL_DMA_IRQHandler+0x984>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a39      	ldr	r2, [pc, #228]	; (8005684 <HAL_DMA_IRQHandler+0xa64>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d101      	bne.n	80055a8 <HAL_DMA_IRQHandler+0x988>
 80055a4:	2301      	movs	r3, #1
 80055a6:	e000      	b.n	80055aa <HAL_DMA_IRQHandler+0x98a>
 80055a8:	2300      	movs	r3, #0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 823f 	beq.w	8005a2e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055bc:	f003 031f 	and.w	r3, r3, #31
 80055c0:	2204      	movs	r2, #4
 80055c2:	409a      	lsls	r2, r3
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	4013      	ands	r3, r2
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f000 80cd 	beq.w	8005768 <HAL_DMA_IRQHandler+0xb48>
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	f003 0304 	and.w	r3, r3, #4
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 80c7 	beq.w	8005768 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055de:	f003 031f 	and.w	r3, r3, #31
 80055e2:	2204      	movs	r2, #4
 80055e4:	409a      	lsls	r2, r3
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d049      	beq.n	8005688 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d109      	bne.n	8005612 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005602:	2b00      	cmp	r3, #0
 8005604:	f000 8210 	beq.w	8005a28 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005610:	e20a      	b.n	8005a28 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 8206 	beq.w	8005a28 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005624:	e200      	b.n	8005a28 <HAL_DMA_IRQHandler+0xe08>
 8005626:	bf00      	nop
 8005628:	40020010 	.word	0x40020010
 800562c:	40020028 	.word	0x40020028
 8005630:	40020040 	.word	0x40020040
 8005634:	40020058 	.word	0x40020058
 8005638:	40020070 	.word	0x40020070
 800563c:	40020088 	.word	0x40020088
 8005640:	400200a0 	.word	0x400200a0
 8005644:	400200b8 	.word	0x400200b8
 8005648:	40020410 	.word	0x40020410
 800564c:	40020428 	.word	0x40020428
 8005650:	40020440 	.word	0x40020440
 8005654:	40020458 	.word	0x40020458
 8005658:	40020470 	.word	0x40020470
 800565c:	40020488 	.word	0x40020488
 8005660:	400204a0 	.word	0x400204a0
 8005664:	400204b8 	.word	0x400204b8
 8005668:	58025408 	.word	0x58025408
 800566c:	5802541c 	.word	0x5802541c
 8005670:	58025430 	.word	0x58025430
 8005674:	58025444 	.word	0x58025444
 8005678:	58025458 	.word	0x58025458
 800567c:	5802546c 	.word	0x5802546c
 8005680:	58025480 	.word	0x58025480
 8005684:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	f003 0320 	and.w	r3, r3, #32
 800568e:	2b00      	cmp	r3, #0
 8005690:	d160      	bne.n	8005754 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a8c      	ldr	r2, [pc, #560]	; (80058c8 <HAL_DMA_IRQHandler+0xca8>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d04a      	beq.n	8005732 <HAL_DMA_IRQHandler+0xb12>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a8a      	ldr	r2, [pc, #552]	; (80058cc <HAL_DMA_IRQHandler+0xcac>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d045      	beq.n	8005732 <HAL_DMA_IRQHandler+0xb12>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a89      	ldr	r2, [pc, #548]	; (80058d0 <HAL_DMA_IRQHandler+0xcb0>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d040      	beq.n	8005732 <HAL_DMA_IRQHandler+0xb12>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a87      	ldr	r2, [pc, #540]	; (80058d4 <HAL_DMA_IRQHandler+0xcb4>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d03b      	beq.n	8005732 <HAL_DMA_IRQHandler+0xb12>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a86      	ldr	r2, [pc, #536]	; (80058d8 <HAL_DMA_IRQHandler+0xcb8>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d036      	beq.n	8005732 <HAL_DMA_IRQHandler+0xb12>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a84      	ldr	r2, [pc, #528]	; (80058dc <HAL_DMA_IRQHandler+0xcbc>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d031      	beq.n	8005732 <HAL_DMA_IRQHandler+0xb12>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a83      	ldr	r2, [pc, #524]	; (80058e0 <HAL_DMA_IRQHandler+0xcc0>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d02c      	beq.n	8005732 <HAL_DMA_IRQHandler+0xb12>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a81      	ldr	r2, [pc, #516]	; (80058e4 <HAL_DMA_IRQHandler+0xcc4>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d027      	beq.n	8005732 <HAL_DMA_IRQHandler+0xb12>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a80      	ldr	r2, [pc, #512]	; (80058e8 <HAL_DMA_IRQHandler+0xcc8>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d022      	beq.n	8005732 <HAL_DMA_IRQHandler+0xb12>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a7e      	ldr	r2, [pc, #504]	; (80058ec <HAL_DMA_IRQHandler+0xccc>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d01d      	beq.n	8005732 <HAL_DMA_IRQHandler+0xb12>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a7d      	ldr	r2, [pc, #500]	; (80058f0 <HAL_DMA_IRQHandler+0xcd0>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d018      	beq.n	8005732 <HAL_DMA_IRQHandler+0xb12>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a7b      	ldr	r2, [pc, #492]	; (80058f4 <HAL_DMA_IRQHandler+0xcd4>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d013      	beq.n	8005732 <HAL_DMA_IRQHandler+0xb12>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a7a      	ldr	r2, [pc, #488]	; (80058f8 <HAL_DMA_IRQHandler+0xcd8>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d00e      	beq.n	8005732 <HAL_DMA_IRQHandler+0xb12>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a78      	ldr	r2, [pc, #480]	; (80058fc <HAL_DMA_IRQHandler+0xcdc>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d009      	beq.n	8005732 <HAL_DMA_IRQHandler+0xb12>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a77      	ldr	r2, [pc, #476]	; (8005900 <HAL_DMA_IRQHandler+0xce0>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d004      	beq.n	8005732 <HAL_DMA_IRQHandler+0xb12>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a75      	ldr	r2, [pc, #468]	; (8005904 <HAL_DMA_IRQHandler+0xce4>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d108      	bne.n	8005744 <HAL_DMA_IRQHandler+0xb24>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 0208 	bic.w	r2, r2, #8
 8005740:	601a      	str	r2, [r3, #0]
 8005742:	e007      	b.n	8005754 <HAL_DMA_IRQHandler+0xb34>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f022 0204 	bic.w	r2, r2, #4
 8005752:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 8165 	beq.w	8005a28 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005766:	e15f      	b.n	8005a28 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800576c:	f003 031f 	and.w	r3, r3, #31
 8005770:	2202      	movs	r2, #2
 8005772:	409a      	lsls	r2, r3
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	4013      	ands	r3, r2
 8005778:	2b00      	cmp	r3, #0
 800577a:	f000 80c5 	beq.w	8005908 <HAL_DMA_IRQHandler+0xce8>
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b00      	cmp	r3, #0
 8005786:	f000 80bf 	beq.w	8005908 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800578e:	f003 031f 	and.w	r3, r3, #31
 8005792:	2202      	movs	r2, #2
 8005794:	409a      	lsls	r2, r3
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d018      	beq.n	80057d6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d109      	bne.n	80057c2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f000 813a 	beq.w	8005a2c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057c0:	e134      	b.n	8005a2c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	f000 8130 	beq.w	8005a2c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057d4:	e12a      	b.n	8005a2c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	f003 0320 	and.w	r3, r3, #32
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d168      	bne.n	80058b2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a38      	ldr	r2, [pc, #224]	; (80058c8 <HAL_DMA_IRQHandler+0xca8>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d04a      	beq.n	8005880 <HAL_DMA_IRQHandler+0xc60>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a37      	ldr	r2, [pc, #220]	; (80058cc <HAL_DMA_IRQHandler+0xcac>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d045      	beq.n	8005880 <HAL_DMA_IRQHandler+0xc60>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a35      	ldr	r2, [pc, #212]	; (80058d0 <HAL_DMA_IRQHandler+0xcb0>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d040      	beq.n	8005880 <HAL_DMA_IRQHandler+0xc60>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a34      	ldr	r2, [pc, #208]	; (80058d4 <HAL_DMA_IRQHandler+0xcb4>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d03b      	beq.n	8005880 <HAL_DMA_IRQHandler+0xc60>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a32      	ldr	r2, [pc, #200]	; (80058d8 <HAL_DMA_IRQHandler+0xcb8>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d036      	beq.n	8005880 <HAL_DMA_IRQHandler+0xc60>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a31      	ldr	r2, [pc, #196]	; (80058dc <HAL_DMA_IRQHandler+0xcbc>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d031      	beq.n	8005880 <HAL_DMA_IRQHandler+0xc60>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a2f      	ldr	r2, [pc, #188]	; (80058e0 <HAL_DMA_IRQHandler+0xcc0>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d02c      	beq.n	8005880 <HAL_DMA_IRQHandler+0xc60>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a2e      	ldr	r2, [pc, #184]	; (80058e4 <HAL_DMA_IRQHandler+0xcc4>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d027      	beq.n	8005880 <HAL_DMA_IRQHandler+0xc60>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a2c      	ldr	r2, [pc, #176]	; (80058e8 <HAL_DMA_IRQHandler+0xcc8>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d022      	beq.n	8005880 <HAL_DMA_IRQHandler+0xc60>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a2b      	ldr	r2, [pc, #172]	; (80058ec <HAL_DMA_IRQHandler+0xccc>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d01d      	beq.n	8005880 <HAL_DMA_IRQHandler+0xc60>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a29      	ldr	r2, [pc, #164]	; (80058f0 <HAL_DMA_IRQHandler+0xcd0>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d018      	beq.n	8005880 <HAL_DMA_IRQHandler+0xc60>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a28      	ldr	r2, [pc, #160]	; (80058f4 <HAL_DMA_IRQHandler+0xcd4>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d013      	beq.n	8005880 <HAL_DMA_IRQHandler+0xc60>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a26      	ldr	r2, [pc, #152]	; (80058f8 <HAL_DMA_IRQHandler+0xcd8>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d00e      	beq.n	8005880 <HAL_DMA_IRQHandler+0xc60>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a25      	ldr	r2, [pc, #148]	; (80058fc <HAL_DMA_IRQHandler+0xcdc>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d009      	beq.n	8005880 <HAL_DMA_IRQHandler+0xc60>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a23      	ldr	r2, [pc, #140]	; (8005900 <HAL_DMA_IRQHandler+0xce0>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d004      	beq.n	8005880 <HAL_DMA_IRQHandler+0xc60>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a22      	ldr	r2, [pc, #136]	; (8005904 <HAL_DMA_IRQHandler+0xce4>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d108      	bne.n	8005892 <HAL_DMA_IRQHandler+0xc72>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f022 0214 	bic.w	r2, r2, #20
 800588e:	601a      	str	r2, [r3, #0]
 8005890:	e007      	b.n	80058a2 <HAL_DMA_IRQHandler+0xc82>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f022 020a 	bic.w	r2, r2, #10
 80058a0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f000 80b8 	beq.w	8005a2c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058c4:	e0b2      	b.n	8005a2c <HAL_DMA_IRQHandler+0xe0c>
 80058c6:	bf00      	nop
 80058c8:	40020010 	.word	0x40020010
 80058cc:	40020028 	.word	0x40020028
 80058d0:	40020040 	.word	0x40020040
 80058d4:	40020058 	.word	0x40020058
 80058d8:	40020070 	.word	0x40020070
 80058dc:	40020088 	.word	0x40020088
 80058e0:	400200a0 	.word	0x400200a0
 80058e4:	400200b8 	.word	0x400200b8
 80058e8:	40020410 	.word	0x40020410
 80058ec:	40020428 	.word	0x40020428
 80058f0:	40020440 	.word	0x40020440
 80058f4:	40020458 	.word	0x40020458
 80058f8:	40020470 	.word	0x40020470
 80058fc:	40020488 	.word	0x40020488
 8005900:	400204a0 	.word	0x400204a0
 8005904:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800590c:	f003 031f 	and.w	r3, r3, #31
 8005910:	2208      	movs	r2, #8
 8005912:	409a      	lsls	r2, r3
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	4013      	ands	r3, r2
 8005918:	2b00      	cmp	r3, #0
 800591a:	f000 8088 	beq.w	8005a2e <HAL_DMA_IRQHandler+0xe0e>
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	f003 0308 	and.w	r3, r3, #8
 8005924:	2b00      	cmp	r3, #0
 8005926:	f000 8082 	beq.w	8005a2e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a41      	ldr	r2, [pc, #260]	; (8005a34 <HAL_DMA_IRQHandler+0xe14>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d04a      	beq.n	80059ca <HAL_DMA_IRQHandler+0xdaa>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a3f      	ldr	r2, [pc, #252]	; (8005a38 <HAL_DMA_IRQHandler+0xe18>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d045      	beq.n	80059ca <HAL_DMA_IRQHandler+0xdaa>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a3e      	ldr	r2, [pc, #248]	; (8005a3c <HAL_DMA_IRQHandler+0xe1c>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d040      	beq.n	80059ca <HAL_DMA_IRQHandler+0xdaa>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a3c      	ldr	r2, [pc, #240]	; (8005a40 <HAL_DMA_IRQHandler+0xe20>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d03b      	beq.n	80059ca <HAL_DMA_IRQHandler+0xdaa>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a3b      	ldr	r2, [pc, #236]	; (8005a44 <HAL_DMA_IRQHandler+0xe24>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d036      	beq.n	80059ca <HAL_DMA_IRQHandler+0xdaa>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a39      	ldr	r2, [pc, #228]	; (8005a48 <HAL_DMA_IRQHandler+0xe28>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d031      	beq.n	80059ca <HAL_DMA_IRQHandler+0xdaa>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a38      	ldr	r2, [pc, #224]	; (8005a4c <HAL_DMA_IRQHandler+0xe2c>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d02c      	beq.n	80059ca <HAL_DMA_IRQHandler+0xdaa>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a36      	ldr	r2, [pc, #216]	; (8005a50 <HAL_DMA_IRQHandler+0xe30>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d027      	beq.n	80059ca <HAL_DMA_IRQHandler+0xdaa>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a35      	ldr	r2, [pc, #212]	; (8005a54 <HAL_DMA_IRQHandler+0xe34>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d022      	beq.n	80059ca <HAL_DMA_IRQHandler+0xdaa>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a33      	ldr	r2, [pc, #204]	; (8005a58 <HAL_DMA_IRQHandler+0xe38>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d01d      	beq.n	80059ca <HAL_DMA_IRQHandler+0xdaa>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a32      	ldr	r2, [pc, #200]	; (8005a5c <HAL_DMA_IRQHandler+0xe3c>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d018      	beq.n	80059ca <HAL_DMA_IRQHandler+0xdaa>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a30      	ldr	r2, [pc, #192]	; (8005a60 <HAL_DMA_IRQHandler+0xe40>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d013      	beq.n	80059ca <HAL_DMA_IRQHandler+0xdaa>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a2f      	ldr	r2, [pc, #188]	; (8005a64 <HAL_DMA_IRQHandler+0xe44>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d00e      	beq.n	80059ca <HAL_DMA_IRQHandler+0xdaa>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a2d      	ldr	r2, [pc, #180]	; (8005a68 <HAL_DMA_IRQHandler+0xe48>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d009      	beq.n	80059ca <HAL_DMA_IRQHandler+0xdaa>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a2c      	ldr	r2, [pc, #176]	; (8005a6c <HAL_DMA_IRQHandler+0xe4c>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d004      	beq.n	80059ca <HAL_DMA_IRQHandler+0xdaa>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a2a      	ldr	r2, [pc, #168]	; (8005a70 <HAL_DMA_IRQHandler+0xe50>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d108      	bne.n	80059dc <HAL_DMA_IRQHandler+0xdbc>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f022 021c 	bic.w	r2, r2, #28
 80059d8:	601a      	str	r2, [r3, #0]
 80059da:	e007      	b.n	80059ec <HAL_DMA_IRQHandler+0xdcc>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f022 020e 	bic.w	r2, r2, #14
 80059ea:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059f0:	f003 031f 	and.w	r3, r3, #31
 80059f4:	2201      	movs	r2, #1
 80059f6:	409a      	lsls	r2, r3
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d009      	beq.n	8005a2e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	4798      	blx	r3
 8005a22:	e004      	b.n	8005a2e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005a24:	bf00      	nop
 8005a26:	e002      	b.n	8005a2e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a28:	bf00      	nop
 8005a2a:	e000      	b.n	8005a2e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a2c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005a2e:	3728      	adds	r7, #40	; 0x28
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	40020010 	.word	0x40020010
 8005a38:	40020028 	.word	0x40020028
 8005a3c:	40020040 	.word	0x40020040
 8005a40:	40020058 	.word	0x40020058
 8005a44:	40020070 	.word	0x40020070
 8005a48:	40020088 	.word	0x40020088
 8005a4c:	400200a0 	.word	0x400200a0
 8005a50:	400200b8 	.word	0x400200b8
 8005a54:	40020410 	.word	0x40020410
 8005a58:	40020428 	.word	0x40020428
 8005a5c:	40020440 	.word	0x40020440
 8005a60:	40020458 	.word	0x40020458
 8005a64:	40020470 	.word	0x40020470
 8005a68:	40020488 	.word	0x40020488
 8005a6c:	400204a0 	.word	0x400204a0
 8005a70:	400204b8 	.word	0x400204b8

08005a74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a42      	ldr	r2, [pc, #264]	; (8005b8c <DMA_CalcBaseAndBitshift+0x118>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d04a      	beq.n	8005b1c <DMA_CalcBaseAndBitshift+0xa8>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a41      	ldr	r2, [pc, #260]	; (8005b90 <DMA_CalcBaseAndBitshift+0x11c>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d045      	beq.n	8005b1c <DMA_CalcBaseAndBitshift+0xa8>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a3f      	ldr	r2, [pc, #252]	; (8005b94 <DMA_CalcBaseAndBitshift+0x120>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d040      	beq.n	8005b1c <DMA_CalcBaseAndBitshift+0xa8>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a3e      	ldr	r2, [pc, #248]	; (8005b98 <DMA_CalcBaseAndBitshift+0x124>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d03b      	beq.n	8005b1c <DMA_CalcBaseAndBitshift+0xa8>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a3c      	ldr	r2, [pc, #240]	; (8005b9c <DMA_CalcBaseAndBitshift+0x128>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d036      	beq.n	8005b1c <DMA_CalcBaseAndBitshift+0xa8>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a3b      	ldr	r2, [pc, #236]	; (8005ba0 <DMA_CalcBaseAndBitshift+0x12c>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d031      	beq.n	8005b1c <DMA_CalcBaseAndBitshift+0xa8>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a39      	ldr	r2, [pc, #228]	; (8005ba4 <DMA_CalcBaseAndBitshift+0x130>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d02c      	beq.n	8005b1c <DMA_CalcBaseAndBitshift+0xa8>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a38      	ldr	r2, [pc, #224]	; (8005ba8 <DMA_CalcBaseAndBitshift+0x134>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d027      	beq.n	8005b1c <DMA_CalcBaseAndBitshift+0xa8>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a36      	ldr	r2, [pc, #216]	; (8005bac <DMA_CalcBaseAndBitshift+0x138>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d022      	beq.n	8005b1c <DMA_CalcBaseAndBitshift+0xa8>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a35      	ldr	r2, [pc, #212]	; (8005bb0 <DMA_CalcBaseAndBitshift+0x13c>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d01d      	beq.n	8005b1c <DMA_CalcBaseAndBitshift+0xa8>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a33      	ldr	r2, [pc, #204]	; (8005bb4 <DMA_CalcBaseAndBitshift+0x140>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d018      	beq.n	8005b1c <DMA_CalcBaseAndBitshift+0xa8>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a32      	ldr	r2, [pc, #200]	; (8005bb8 <DMA_CalcBaseAndBitshift+0x144>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d013      	beq.n	8005b1c <DMA_CalcBaseAndBitshift+0xa8>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a30      	ldr	r2, [pc, #192]	; (8005bbc <DMA_CalcBaseAndBitshift+0x148>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d00e      	beq.n	8005b1c <DMA_CalcBaseAndBitshift+0xa8>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a2f      	ldr	r2, [pc, #188]	; (8005bc0 <DMA_CalcBaseAndBitshift+0x14c>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d009      	beq.n	8005b1c <DMA_CalcBaseAndBitshift+0xa8>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a2d      	ldr	r2, [pc, #180]	; (8005bc4 <DMA_CalcBaseAndBitshift+0x150>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d004      	beq.n	8005b1c <DMA_CalcBaseAndBitshift+0xa8>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a2c      	ldr	r2, [pc, #176]	; (8005bc8 <DMA_CalcBaseAndBitshift+0x154>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d101      	bne.n	8005b20 <DMA_CalcBaseAndBitshift+0xac>
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e000      	b.n	8005b22 <DMA_CalcBaseAndBitshift+0xae>
 8005b20:	2300      	movs	r3, #0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d024      	beq.n	8005b70 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	3b10      	subs	r3, #16
 8005b2e:	4a27      	ldr	r2, [pc, #156]	; (8005bcc <DMA_CalcBaseAndBitshift+0x158>)
 8005b30:	fba2 2303 	umull	r2, r3, r2, r3
 8005b34:	091b      	lsrs	r3, r3, #4
 8005b36:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f003 0307 	and.w	r3, r3, #7
 8005b3e:	4a24      	ldr	r2, [pc, #144]	; (8005bd0 <DMA_CalcBaseAndBitshift+0x15c>)
 8005b40:	5cd3      	ldrb	r3, [r2, r3]
 8005b42:	461a      	mov	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2b03      	cmp	r3, #3
 8005b4c:	d908      	bls.n	8005b60 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	461a      	mov	r2, r3
 8005b54:	4b1f      	ldr	r3, [pc, #124]	; (8005bd4 <DMA_CalcBaseAndBitshift+0x160>)
 8005b56:	4013      	ands	r3, r2
 8005b58:	1d1a      	adds	r2, r3, #4
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	659a      	str	r2, [r3, #88]	; 0x58
 8005b5e:	e00d      	b.n	8005b7c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	461a      	mov	r2, r3
 8005b66:	4b1b      	ldr	r3, [pc, #108]	; (8005bd4 <DMA_CalcBaseAndBitshift+0x160>)
 8005b68:	4013      	ands	r3, r2
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	6593      	str	r3, [r2, #88]	; 0x58
 8005b6e:	e005      	b.n	8005b7c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	40020010 	.word	0x40020010
 8005b90:	40020028 	.word	0x40020028
 8005b94:	40020040 	.word	0x40020040
 8005b98:	40020058 	.word	0x40020058
 8005b9c:	40020070 	.word	0x40020070
 8005ba0:	40020088 	.word	0x40020088
 8005ba4:	400200a0 	.word	0x400200a0
 8005ba8:	400200b8 	.word	0x400200b8
 8005bac:	40020410 	.word	0x40020410
 8005bb0:	40020428 	.word	0x40020428
 8005bb4:	40020440 	.word	0x40020440
 8005bb8:	40020458 	.word	0x40020458
 8005bbc:	40020470 	.word	0x40020470
 8005bc0:	40020488 	.word	0x40020488
 8005bc4:	400204a0 	.word	0x400204a0
 8005bc8:	400204b8 	.word	0x400204b8
 8005bcc:	aaaaaaab 	.word	0xaaaaaaab
 8005bd0:	0800ff60 	.word	0x0800ff60
 8005bd4:	fffffc00 	.word	0xfffffc00

08005bd8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005be0:	2300      	movs	r3, #0
 8005be2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d120      	bne.n	8005c2e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf0:	2b03      	cmp	r3, #3
 8005bf2:	d858      	bhi.n	8005ca6 <DMA_CheckFifoParam+0xce>
 8005bf4:	a201      	add	r2, pc, #4	; (adr r2, 8005bfc <DMA_CheckFifoParam+0x24>)
 8005bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bfa:	bf00      	nop
 8005bfc:	08005c0d 	.word	0x08005c0d
 8005c00:	08005c1f 	.word	0x08005c1f
 8005c04:	08005c0d 	.word	0x08005c0d
 8005c08:	08005ca7 	.word	0x08005ca7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d048      	beq.n	8005caa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005c1c:	e045      	b.n	8005caa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c26:	d142      	bne.n	8005cae <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005c2c:	e03f      	b.n	8005cae <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c36:	d123      	bne.n	8005c80 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3c:	2b03      	cmp	r3, #3
 8005c3e:	d838      	bhi.n	8005cb2 <DMA_CheckFifoParam+0xda>
 8005c40:	a201      	add	r2, pc, #4	; (adr r2, 8005c48 <DMA_CheckFifoParam+0x70>)
 8005c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c46:	bf00      	nop
 8005c48:	08005c59 	.word	0x08005c59
 8005c4c:	08005c5f 	.word	0x08005c5f
 8005c50:	08005c59 	.word	0x08005c59
 8005c54:	08005c71 	.word	0x08005c71
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	73fb      	strb	r3, [r7, #15]
        break;
 8005c5c:	e030      	b.n	8005cc0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d025      	beq.n	8005cb6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005c6e:	e022      	b.n	8005cb6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c78:	d11f      	bne.n	8005cba <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005c7e:	e01c      	b.n	8005cba <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d902      	bls.n	8005c8e <DMA_CheckFifoParam+0xb6>
 8005c88:	2b03      	cmp	r3, #3
 8005c8a:	d003      	beq.n	8005c94 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005c8c:	e018      	b.n	8005cc0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	73fb      	strb	r3, [r7, #15]
        break;
 8005c92:	e015      	b.n	8005cc0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00e      	beq.n	8005cbe <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	73fb      	strb	r3, [r7, #15]
    break;
 8005ca4:	e00b      	b.n	8005cbe <DMA_CheckFifoParam+0xe6>
        break;
 8005ca6:	bf00      	nop
 8005ca8:	e00a      	b.n	8005cc0 <DMA_CheckFifoParam+0xe8>
        break;
 8005caa:	bf00      	nop
 8005cac:	e008      	b.n	8005cc0 <DMA_CheckFifoParam+0xe8>
        break;
 8005cae:	bf00      	nop
 8005cb0:	e006      	b.n	8005cc0 <DMA_CheckFifoParam+0xe8>
        break;
 8005cb2:	bf00      	nop
 8005cb4:	e004      	b.n	8005cc0 <DMA_CheckFifoParam+0xe8>
        break;
 8005cb6:	bf00      	nop
 8005cb8:	e002      	b.n	8005cc0 <DMA_CheckFifoParam+0xe8>
        break;
 8005cba:	bf00      	nop
 8005cbc:	e000      	b.n	8005cc0 <DMA_CheckFifoParam+0xe8>
    break;
 8005cbe:	bf00      	nop
    }
  }

  return status;
 8005cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop

08005cd0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a38      	ldr	r2, [pc, #224]	; (8005dc4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d022      	beq.n	8005d2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a36      	ldr	r2, [pc, #216]	; (8005dc8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d01d      	beq.n	8005d2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a35      	ldr	r2, [pc, #212]	; (8005dcc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d018      	beq.n	8005d2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a33      	ldr	r2, [pc, #204]	; (8005dd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d013      	beq.n	8005d2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a32      	ldr	r2, [pc, #200]	; (8005dd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d00e      	beq.n	8005d2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a30      	ldr	r2, [pc, #192]	; (8005dd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d009      	beq.n	8005d2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a2f      	ldr	r2, [pc, #188]	; (8005ddc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d004      	beq.n	8005d2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a2d      	ldr	r2, [pc, #180]	; (8005de0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d101      	bne.n	8005d32 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e000      	b.n	8005d34 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005d32:	2300      	movs	r3, #0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d01a      	beq.n	8005d6e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	3b08      	subs	r3, #8
 8005d40:	4a28      	ldr	r2, [pc, #160]	; (8005de4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005d42:	fba2 2303 	umull	r2, r3, r2, r3
 8005d46:	091b      	lsrs	r3, r3, #4
 8005d48:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	4b26      	ldr	r3, [pc, #152]	; (8005de8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005d4e:	4413      	add	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	461a      	mov	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a24      	ldr	r2, [pc, #144]	; (8005dec <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005d5c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f003 031f 	and.w	r3, r3, #31
 8005d64:	2201      	movs	r2, #1
 8005d66:	409a      	lsls	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005d6c:	e024      	b.n	8005db8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	3b10      	subs	r3, #16
 8005d76:	4a1e      	ldr	r2, [pc, #120]	; (8005df0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005d78:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7c:	091b      	lsrs	r3, r3, #4
 8005d7e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	4a1c      	ldr	r2, [pc, #112]	; (8005df4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d806      	bhi.n	8005d96 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	4a1b      	ldr	r2, [pc, #108]	; (8005df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d902      	bls.n	8005d96 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	3308      	adds	r3, #8
 8005d94:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	4b18      	ldr	r3, [pc, #96]	; (8005dfc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005d9a:	4413      	add	r3, r2
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	461a      	mov	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a16      	ldr	r2, [pc, #88]	; (8005e00 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005da8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f003 031f 	and.w	r3, r3, #31
 8005db0:	2201      	movs	r2, #1
 8005db2:	409a      	lsls	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005db8:	bf00      	nop
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr
 8005dc4:	58025408 	.word	0x58025408
 8005dc8:	5802541c 	.word	0x5802541c
 8005dcc:	58025430 	.word	0x58025430
 8005dd0:	58025444 	.word	0x58025444
 8005dd4:	58025458 	.word	0x58025458
 8005dd8:	5802546c 	.word	0x5802546c
 8005ddc:	58025480 	.word	0x58025480
 8005de0:	58025494 	.word	0x58025494
 8005de4:	cccccccd 	.word	0xcccccccd
 8005de8:	16009600 	.word	0x16009600
 8005dec:	58025880 	.word	0x58025880
 8005df0:	aaaaaaab 	.word	0xaaaaaaab
 8005df4:	400204b8 	.word	0x400204b8
 8005df8:	4002040f 	.word	0x4002040f
 8005dfc:	10008200 	.word	0x10008200
 8005e00:	40020880 	.word	0x40020880

08005e04 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d04a      	beq.n	8005eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2b08      	cmp	r3, #8
 8005e1e:	d847      	bhi.n	8005eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a25      	ldr	r2, [pc, #148]	; (8005ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d022      	beq.n	8005e70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a24      	ldr	r2, [pc, #144]	; (8005ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d01d      	beq.n	8005e70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a22      	ldr	r2, [pc, #136]	; (8005ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d018      	beq.n	8005e70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a21      	ldr	r2, [pc, #132]	; (8005ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d013      	beq.n	8005e70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a1f      	ldr	r2, [pc, #124]	; (8005ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d00e      	beq.n	8005e70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a1e      	ldr	r2, [pc, #120]	; (8005ed0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d009      	beq.n	8005e70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a1c      	ldr	r2, [pc, #112]	; (8005ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d004      	beq.n	8005e70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a1b      	ldr	r2, [pc, #108]	; (8005ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d101      	bne.n	8005e74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005e70:	2301      	movs	r3, #1
 8005e72:	e000      	b.n	8005e76 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005e74:	2300      	movs	r3, #0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00a      	beq.n	8005e90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	4b17      	ldr	r3, [pc, #92]	; (8005edc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005e7e:	4413      	add	r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	461a      	mov	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a15      	ldr	r2, [pc, #84]	; (8005ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005e8c:	671a      	str	r2, [r3, #112]	; 0x70
 8005e8e:	e009      	b.n	8005ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	4b14      	ldr	r3, [pc, #80]	; (8005ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005e94:	4413      	add	r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	461a      	mov	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a11      	ldr	r2, [pc, #68]	; (8005ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005ea2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	409a      	lsls	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005eb0:	bf00      	nop
 8005eb2:	3714      	adds	r7, #20
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr
 8005ebc:	58025408 	.word	0x58025408
 8005ec0:	5802541c 	.word	0x5802541c
 8005ec4:	58025430 	.word	0x58025430
 8005ec8:	58025444 	.word	0x58025444
 8005ecc:	58025458 	.word	0x58025458
 8005ed0:	5802546c 	.word	0x5802546c
 8005ed4:	58025480 	.word	0x58025480
 8005ed8:	58025494 	.word	0x58025494
 8005edc:	1600963f 	.word	0x1600963f
 8005ee0:	58025940 	.word	0x58025940
 8005ee4:	1000823f 	.word	0x1000823f
 8005ee8:	40020940 	.word	0x40020940

08005eec <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e0c6      	b.n	800608c <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d102      	bne.n	8005f0c <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f7fa feae 	bl	8000c68 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2223      	movs	r2, #35	; 0x23
 8005f10:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f12:	4b60      	ldr	r3, [pc, #384]	; (8006094 <HAL_ETH_Init+0x1a8>)
 8005f14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f18:	4a5e      	ldr	r2, [pc, #376]	; (8006094 <HAL_ETH_Init+0x1a8>)
 8005f1a:	f043 0302 	orr.w	r3, r3, #2
 8005f1e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005f22:	4b5c      	ldr	r3, [pc, #368]	; (8006094 <HAL_ETH_Init+0x1a8>)
 8005f24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	60bb      	str	r3, [r7, #8]
 8005f2e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	7a1b      	ldrb	r3, [r3, #8]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d103      	bne.n	8005f40 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005f38:	2000      	movs	r0, #0
 8005f3a:	f7fc fbdb 	bl	80026f4 <HAL_SYSCFG_ETHInterfaceSelect>
 8005f3e:	e003      	b.n	8005f48 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005f40:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005f44:	f7fc fbd6 	bl	80026f4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f042 0201 	orr.w	r2, r2, #1
 8005f5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f60:	f7fc fb8c 	bl	800267c <HAL_GetTick>
 8005f64:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005f66:	e00f      	b.n	8005f88 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8005f68:	f7fc fb88 	bl	800267c <HAL_GetTick>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005f76:	d907      	bls.n	8005f88 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2204      	movs	r2, #4
 8005f7c:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	22e0      	movs	r2, #224	; 0xe0
 8005f82:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e081      	b.n	800608c <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0301 	and.w	r3, r3, #1
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1e6      	bne.n	8005f68 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 fac0 	bl	8006520 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005fa0:	f001 fd80 	bl	8007aa4 <HAL_RCC_GetHCLKFreq>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	4a3c      	ldr	r2, [pc, #240]	; (8006098 <HAL_ETH_Init+0x1ac>)
 8005fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fac:	0c9a      	lsrs	r2, r3, #18
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	3a01      	subs	r2, #1
 8005fb4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 fa13 	bl	80063e4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8005fd4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005fd8:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	f003 0303 	and.w	r3, r3, #3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d007      	beq.n	8005ff6 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	22e0      	movs	r2, #224	; 0xe0
 8005ff0:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e04a      	b.n	800608c <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	f241 1308 	movw	r3, #4360	; 0x1108
 8005ffe:	4413      	add	r3, r2
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	4b26      	ldr	r3, [pc, #152]	; (800609c <HAL_ETH_Init+0x1b0>)
 8006004:	4013      	ands	r3, r2
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	6952      	ldr	r2, [r2, #20]
 800600a:	0052      	lsls	r2, r2, #1
 800600c:	6879      	ldr	r1, [r7, #4]
 800600e:	6809      	ldr	r1, [r1, #0]
 8006010:	431a      	orrs	r2, r3
 8006012:	f241 1308 	movw	r3, #4360	; 0x1108
 8006016:	440b      	add	r3, r1
 8006018:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 fad8 	bl	80065d0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 fb1c 	bl	800665e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	3305      	adds	r3, #5
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	021a      	lsls	r2, r3, #8
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	3304      	adds	r3, #4
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	4619      	mov	r1, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	430a      	orrs	r2, r1
 8006040:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	3303      	adds	r3, #3
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	061a      	lsls	r2, r3, #24
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	3302      	adds	r3, #2
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	041b      	lsls	r3, r3, #16
 8006058:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	3301      	adds	r3, #1
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006064:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006072:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006074:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2210      	movs	r2, #16
 8006082:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2210      	movs	r2, #16
 8006088:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	58024400 	.word	0x58024400
 8006098:	431bde83 	.word	0x431bde83
 800609c:	ffff8001 	.word	0xffff8001

080060a0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80060b2:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	791b      	ldrb	r3, [r3, #4]
 80060b8:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80060ba:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	7b1b      	ldrb	r3, [r3, #12]
 80060c0:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80060c2:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	7b5b      	ldrb	r3, [r3, #13]
 80060c8:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80060ca:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	7b9b      	ldrb	r3, [r3, #14]
 80060d0:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80060d2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	7bdb      	ldrb	r3, [r3, #15]
 80060d8:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80060da:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	7c12      	ldrb	r2, [r2, #16]
 80060e0:	2a00      	cmp	r2, #0
 80060e2:	d102      	bne.n	80060ea <ETH_SetMACConfig+0x4a>
 80060e4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80060e8:	e000      	b.n	80060ec <ETH_SetMACConfig+0x4c>
 80060ea:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80060ec:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	7c52      	ldrb	r2, [r2, #17]
 80060f2:	2a00      	cmp	r2, #0
 80060f4:	d102      	bne.n	80060fc <ETH_SetMACConfig+0x5c>
 80060f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80060fa:	e000      	b.n	80060fe <ETH_SetMACConfig+0x5e>
 80060fc:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80060fe:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	7c9b      	ldrb	r3, [r3, #18]
 8006104:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8006106:	431a      	orrs	r2, r3
                                macconf->Speed |
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 800610c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8006112:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	7f1b      	ldrb	r3, [r3, #28]
 8006118:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800611a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	7f5b      	ldrb	r3, [r3, #29]
 8006120:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8006122:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8006124:	683a      	ldr	r2, [r7, #0]
 8006126:	7f92      	ldrb	r2, [r2, #30]
 8006128:	2a00      	cmp	r2, #0
 800612a:	d102      	bne.n	8006132 <ETH_SetMACConfig+0x92>
 800612c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006130:	e000      	b.n	8006134 <ETH_SetMACConfig+0x94>
 8006132:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8006134:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	7fdb      	ldrb	r3, [r3, #31]
 800613a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800613c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006144:	2a00      	cmp	r2, #0
 8006146:	d102      	bne.n	800614e <ETH_SetMACConfig+0xae>
 8006148:	f44f 7280 	mov.w	r2, #256	; 0x100
 800614c:	e000      	b.n	8006150 <ETH_SetMACConfig+0xb0>
 800614e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8006150:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8006156:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800615e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8006160:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8006166:	4313      	orrs	r3, r2
 8006168:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	4b56      	ldr	r3, [pc, #344]	; (80062cc <ETH_SetMACConfig+0x22c>)
 8006172:	4013      	ands	r3, r2
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	6812      	ldr	r2, [r2, #0]
 8006178:	68f9      	ldr	r1, [r7, #12]
 800617a:	430b      	orrs	r3, r1
 800617c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006182:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800618a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800618c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006194:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8006196:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800619e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80061a0:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80061a8:	2a00      	cmp	r2, #0
 80061aa:	d102      	bne.n	80061b2 <ETH_SetMACConfig+0x112>
 80061ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80061b0:	e000      	b.n	80061b4 <ETH_SetMACConfig+0x114>
 80061b2:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80061b4:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80061ba:	4313      	orrs	r3, r2
 80061bc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	685a      	ldr	r2, [r3, #4]
 80061c4:	4b42      	ldr	r3, [pc, #264]	; (80062d0 <ETH_SetMACConfig+0x230>)
 80061c6:	4013      	ands	r3, r2
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	6812      	ldr	r2, [r2, #0]
 80061cc:	68f9      	ldr	r1, [r7, #12]
 80061ce:	430b      	orrs	r3, r1
 80061d0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061d8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80061de:	4313      	orrs	r3, r2
 80061e0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68da      	ldr	r2, [r3, #12]
 80061e8:	4b3a      	ldr	r3, [pc, #232]	; (80062d4 <ETH_SetMACConfig+0x234>)
 80061ea:	4013      	ands	r3, r2
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	6812      	ldr	r2, [r2, #0]
 80061f0:	68f9      	ldr	r1, [r7, #12]
 80061f2:	430b      	orrs	r3, r1
 80061f4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80061fc:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006202:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8006204:	683a      	ldr	r2, [r7, #0]
 8006206:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800620a:	2a00      	cmp	r2, #0
 800620c:	d101      	bne.n	8006212 <ETH_SetMACConfig+0x172>
 800620e:	2280      	movs	r2, #128	; 0x80
 8006210:	e000      	b.n	8006214 <ETH_SetMACConfig+0x174>
 8006212:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8006214:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800621a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800621c:	4313      	orrs	r3, r2
 800621e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006226:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800622a:	4013      	ands	r3, r2
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	6812      	ldr	r2, [r2, #0]
 8006230:	68f9      	ldr	r1, [r7, #12]
 8006232:	430b      	orrs	r3, r1
 8006234:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800623c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8006244:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8006246:	4313      	orrs	r3, r2
 8006248:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006252:	f023 0103 	bic.w	r1, r3, #3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	430a      	orrs	r2, r1
 800625e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800626a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	430a      	orrs	r2, r1
 8006278:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006280:	683a      	ldr	r2, [r7, #0]
 8006282:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8006286:	2a00      	cmp	r2, #0
 8006288:	d101      	bne.n	800628e <ETH_SetMACConfig+0x1ee>
 800628a:	2240      	movs	r2, #64	; 0x40
 800628c:	e000      	b.n	8006290 <ETH_SetMACConfig+0x1f0>
 800628e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8006290:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006298:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800629a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80062a2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80062a4:	4313      	orrs	r3, r2
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80062b0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	430a      	orrs	r2, r1
 80062bc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80062c0:	bf00      	nop
 80062c2:	3714      	adds	r7, #20
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr
 80062cc:	00048083 	.word	0x00048083
 80062d0:	c0f88000 	.word	0xc0f88000
 80062d4:	fffffef0 	.word	0xfffffef0

080062d8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	4b38      	ldr	r3, [pc, #224]	; (80063d0 <ETH_SetDMAConfig+0xf8>)
 80062ee:	4013      	ands	r3, r2
 80062f0:	683a      	ldr	r2, [r7, #0]
 80062f2:	6812      	ldr	r2, [r2, #0]
 80062f4:	6879      	ldr	r1, [r7, #4]
 80062f6:	6809      	ldr	r1, [r1, #0]
 80062f8:	431a      	orrs	r2, r3
 80062fa:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80062fe:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	791b      	ldrb	r3, [r3, #4]
 8006304:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800630a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	7b1b      	ldrb	r3, [r3, #12]
 8006310:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006312:	4313      	orrs	r3, r2
 8006314:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	f241 0304 	movw	r3, #4100	; 0x1004
 800631e:	4413      	add	r3, r2
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	4b2c      	ldr	r3, [pc, #176]	; (80063d4 <ETH_SetDMAConfig+0xfc>)
 8006324:	4013      	ands	r3, r2
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	6811      	ldr	r1, [r2, #0]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	431a      	orrs	r2, r3
 800632e:	f241 0304 	movw	r3, #4100	; 0x1004
 8006332:	440b      	add	r3, r1
 8006334:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	7b5b      	ldrb	r3, [r3, #13]
 800633a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8006340:	4313      	orrs	r3, r2
 8006342:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	4b22      	ldr	r3, [pc, #136]	; (80063d8 <ETH_SetDMAConfig+0x100>)
 8006350:	4013      	ands	r3, r2
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	6811      	ldr	r1, [r2, #0]
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	431a      	orrs	r2, r3
 800635a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800635e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	7d1b      	ldrb	r3, [r3, #20]
 8006368:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800636a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	7f5b      	ldrb	r3, [r3, #29]
 8006370:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8006372:	4313      	orrs	r3, r2
 8006374:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	f241 1304 	movw	r3, #4356	; 0x1104
 800637e:	4413      	add	r3, r2
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	4b16      	ldr	r3, [pc, #88]	; (80063dc <ETH_SetDMAConfig+0x104>)
 8006384:	4013      	ands	r3, r2
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	6811      	ldr	r1, [r2, #0]
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	431a      	orrs	r2, r3
 800638e:	f241 1304 	movw	r3, #4356	; 0x1104
 8006392:	440b      	add	r3, r1
 8006394:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	7f1b      	ldrb	r3, [r3, #28]
 800639a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80063a0:	4313      	orrs	r3, r2
 80063a2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	f241 1308 	movw	r3, #4360	; 0x1108
 80063ac:	4413      	add	r3, r2
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	4b0b      	ldr	r3, [pc, #44]	; (80063e0 <ETH_SetDMAConfig+0x108>)
 80063b2:	4013      	ands	r3, r2
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	6811      	ldr	r1, [r2, #0]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	431a      	orrs	r2, r3
 80063bc:	f241 1308 	movw	r3, #4360	; 0x1108
 80063c0:	440b      	add	r3, r1
 80063c2:	601a      	str	r2, [r3, #0]
}
 80063c4:	bf00      	nop
 80063c6:	3714      	adds	r7, #20
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr
 80063d0:	ffff87fd 	.word	0xffff87fd
 80063d4:	ffff2ffe 	.word	0xffff2ffe
 80063d8:	fffec000 	.word	0xfffec000
 80063dc:	ffc0efef 	.word	0xffc0efef
 80063e0:	7fc0ffff 	.word	0x7fc0ffff

080063e4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b0a4      	sub	sp, #144	; 0x90
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80063ec:	2301      	movs	r3, #1
 80063ee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80063f2:	2300      	movs	r3, #0
 80063f4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80063f6:	2300      	movs	r3, #0
 80063f8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80063fc:	2300      	movs	r3, #0
 80063fe:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8006402:	2301      	movs	r3, #1
 8006404:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8006408:	2301      	movs	r3, #1
 800640a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800640e:	2301      	movs	r3, #1
 8006410:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8006414:	2300      	movs	r3, #0
 8006416:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800641a:	2301      	movs	r3, #1
 800641c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8006420:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006424:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8006426:	2300      	movs	r3, #0
 8006428:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800642c:	2300      	movs	r3, #0
 800642e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8006430:	2300      	movs	r3, #0
 8006432:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8006436:	2300      	movs	r3, #0
 8006438:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800643c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8006440:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8006442:	2300      	movs	r3, #0
 8006444:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8006448:	2300      	movs	r3, #0
 800644a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800644c:	2301      	movs	r3, #1
 800644e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8006452:	2300      	movs	r3, #0
 8006454:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8006458:	2300      	movs	r3, #0
 800645a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800645e:	2300      	movs	r3, #0
 8006460:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8006462:	2300      	movs	r3, #0
 8006464:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8006466:	2300      	movs	r3, #0
 8006468:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800646a:	2300      	movs	r3, #0
 800646c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006470:	2300      	movs	r3, #0
 8006472:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8006476:	2301      	movs	r3, #1
 8006478:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800647c:	2320      	movs	r3, #32
 800647e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8006482:	2301      	movs	r3, #1
 8006484:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8006488:	2300      	movs	r3, #0
 800648a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800648e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8006492:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8006494:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006498:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800649a:	2300      	movs	r3, #0
 800649c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80064a0:	2302      	movs	r3, #2
 80064a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80064a6:	2300      	movs	r3, #0
 80064a8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80064ac:	2300      	movs	r3, #0
 80064ae:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80064b2:	2300      	movs	r3, #0
 80064b4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80064b8:	2301      	movs	r3, #1
 80064ba:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80064be:	2300      	movs	r3, #0
 80064c0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80064c2:	2301      	movs	r3, #1
 80064c4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80064c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80064cc:	4619      	mov	r1, r3
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f7ff fde6 	bl	80060a0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80064d4:	2301      	movs	r3, #1
 80064d6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80064d8:	2301      	movs	r3, #1
 80064da:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80064dc:	2300      	movs	r3, #0
 80064de:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80064e0:	2300      	movs	r3, #0
 80064e2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80064e6:	2300      	movs	r3, #0
 80064e8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80064ea:	2300      	movs	r3, #0
 80064ec:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80064ee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80064f2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80064f4:	2300      	movs	r3, #0
 80064f6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80064f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80064fc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80064fe:	2300      	movs	r3, #0
 8006500:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8006504:	f44f 7306 	mov.w	r3, #536	; 0x218
 8006508:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800650a:	f107 0308 	add.w	r3, r7, #8
 800650e:	4619      	mov	r1, r3
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f7ff fee1 	bl	80062d8 <ETH_SetDMAConfig>
}
 8006516:	bf00      	nop
 8006518:	3790      	adds	r7, #144	; 0x90
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
	...

08006520 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006530:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006538:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800653a:	f001 fab3 	bl	8007aa4 <HAL_RCC_GetHCLKFreq>
 800653e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	4a1e      	ldr	r2, [pc, #120]	; (80065bc <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d908      	bls.n	800655a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	4a1d      	ldr	r2, [pc, #116]	; (80065c0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d804      	bhi.n	800655a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006556:	60fb      	str	r3, [r7, #12]
 8006558:	e027      	b.n	80065aa <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	4a18      	ldr	r2, [pc, #96]	; (80065c0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d908      	bls.n	8006574 <ETH_MAC_MDIO_ClkConfig+0x54>
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	4a17      	ldr	r2, [pc, #92]	; (80065c4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d204      	bcs.n	8006574 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006570:	60fb      	str	r3, [r7, #12]
 8006572:	e01a      	b.n	80065aa <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	4a13      	ldr	r2, [pc, #76]	; (80065c4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d303      	bcc.n	8006584 <ETH_MAC_MDIO_ClkConfig+0x64>
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	4a12      	ldr	r2, [pc, #72]	; (80065c8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d911      	bls.n	80065a8 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	4a10      	ldr	r2, [pc, #64]	; (80065c8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d908      	bls.n	800659e <ETH_MAC_MDIO_ClkConfig+0x7e>
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	4a0f      	ldr	r2, [pc, #60]	; (80065cc <ETH_MAC_MDIO_ClkConfig+0xac>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d804      	bhi.n	800659e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800659a:	60fb      	str	r3, [r7, #12]
 800659c:	e005      	b.n	80065aa <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80065a4:	60fb      	str	r3, [r7, #12]
 80065a6:	e000      	b.n	80065aa <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80065a8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80065b4:	bf00      	nop
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	01312cff 	.word	0x01312cff
 80065c0:	02160ebf 	.word	0x02160ebf
 80065c4:	03938700 	.word	0x03938700
 80065c8:	05f5e0ff 	.word	0x05f5e0ff
 80065cc:	08f0d17f 	.word	0x08f0d17f

080065d0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b085      	sub	sp, #20
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80065d8:	2300      	movs	r3, #0
 80065da:	60fb      	str	r3, [r7, #12]
 80065dc:	e01d      	b.n	800661a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	68d9      	ldr	r1, [r3, #12]
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	4613      	mov	r3, r2
 80065e6:	005b      	lsls	r3, r3, #1
 80065e8:	4413      	add	r3, r2
 80065ea:	00db      	lsls	r3, r3, #3
 80065ec:	440b      	add	r3, r1
 80065ee:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	2200      	movs	r2, #0
 80065f4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	2200      	movs	r2, #0
 80065fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	2200      	movs	r2, #0
 8006600:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	2200      	movs	r2, #0
 8006606:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8006608:	68b9      	ldr	r1, [r7, #8]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	3206      	adds	r2, #6
 8006610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	3301      	adds	r3, #1
 8006618:	60fb      	str	r3, [r7, #12]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2b03      	cmp	r3, #3
 800661e:	d9de      	bls.n	80065de <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	f241 132c 	movw	r3, #4396	; 0x112c
 800662e:	4413      	add	r3, r2
 8006630:	2203      	movs	r2, #3
 8006632:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68d9      	ldr	r1, [r3, #12]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	f241 1314 	movw	r3, #4372	; 0x1114
 8006640:	4413      	add	r3, r2
 8006642:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	68da      	ldr	r2, [r3, #12]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8006650:	601a      	str	r2, [r3, #0]
}
 8006652:	bf00      	nop
 8006654:	3714      	adds	r7, #20
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800665e:	b480      	push	{r7}
 8006660:	b085      	sub	sp, #20
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006666:	2300      	movs	r3, #0
 8006668:	60fb      	str	r3, [r7, #12]
 800666a:	e024      	b.n	80066b6 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6919      	ldr	r1, [r3, #16]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	4613      	mov	r3, r2
 8006674:	005b      	lsls	r3, r3, #1
 8006676:	4413      	add	r3, r2
 8006678:	00db      	lsls	r3, r3, #3
 800667a:	440b      	add	r3, r1
 800667c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	2200      	movs	r2, #0
 8006682:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	2200      	movs	r2, #0
 8006688:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	2200      	movs	r2, #0
 800668e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	2200      	movs	r2, #0
 8006694:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	2200      	movs	r2, #0
 800669a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	2200      	movs	r2, #0
 80066a0:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	6879      	ldr	r1, [r7, #4]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	3310      	adds	r3, #16
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	440b      	add	r3, r1
 80066ae:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	3301      	adds	r3, #1
 80066b4:	60fb      	str	r3, [r7, #12]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2b03      	cmp	r3, #3
 80066ba:	d9d7      	bls.n	800666c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	f241 1330 	movw	r3, #4400	; 0x1130
 80066e2:	4413      	add	r3, r2
 80066e4:	2203      	movs	r2, #3
 80066e6:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6919      	ldr	r1, [r3, #16]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	f241 131c 	movw	r3, #4380	; 0x111c
 80066f4:	4413      	add	r3, r2
 80066f6:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	f241 1328 	movw	r3, #4392	; 0x1128
 8006708:	4413      	add	r3, r2
 800670a:	6019      	str	r1, [r3, #0]
}
 800670c:	bf00      	nop
 800670e:	3714      	adds	r7, #20
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006718:	b480      	push	{r7}
 800671a:	b089      	sub	sp, #36	; 0x24
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006722:	2300      	movs	r3, #0
 8006724:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006726:	4b89      	ldr	r3, [pc, #548]	; (800694c <HAL_GPIO_Init+0x234>)
 8006728:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800672a:	e194      	b.n	8006a56 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	2101      	movs	r1, #1
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	fa01 f303 	lsl.w	r3, r1, r3
 8006738:	4013      	ands	r3, r2
 800673a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	2b00      	cmp	r3, #0
 8006740:	f000 8186 	beq.w	8006a50 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	2b01      	cmp	r3, #1
 800674a:	d00b      	beq.n	8006764 <HAL_GPIO_Init+0x4c>
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	2b02      	cmp	r3, #2
 8006752:	d007      	beq.n	8006764 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006758:	2b11      	cmp	r3, #17
 800675a:	d003      	beq.n	8006764 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	2b12      	cmp	r3, #18
 8006762:	d130      	bne.n	80067c6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	005b      	lsls	r3, r3, #1
 800676e:	2203      	movs	r2, #3
 8006770:	fa02 f303 	lsl.w	r3, r2, r3
 8006774:	43db      	mvns	r3, r3
 8006776:	69ba      	ldr	r2, [r7, #24]
 8006778:	4013      	ands	r3, r2
 800677a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	68da      	ldr	r2, [r3, #12]
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	005b      	lsls	r3, r3, #1
 8006784:	fa02 f303 	lsl.w	r3, r2, r3
 8006788:	69ba      	ldr	r2, [r7, #24]
 800678a:	4313      	orrs	r3, r2
 800678c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	69ba      	ldr	r2, [r7, #24]
 8006792:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800679a:	2201      	movs	r2, #1
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	fa02 f303 	lsl.w	r3, r2, r3
 80067a2:	43db      	mvns	r3, r3
 80067a4:	69ba      	ldr	r2, [r7, #24]
 80067a6:	4013      	ands	r3, r2
 80067a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	091b      	lsrs	r3, r3, #4
 80067b0:	f003 0201 	and.w	r2, r3, #1
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	fa02 f303 	lsl.w	r3, r2, r3
 80067ba:	69ba      	ldr	r2, [r7, #24]
 80067bc:	4313      	orrs	r3, r2
 80067be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	69ba      	ldr	r2, [r7, #24]
 80067c4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	005b      	lsls	r3, r3, #1
 80067d0:	2203      	movs	r2, #3
 80067d2:	fa02 f303 	lsl.w	r3, r2, r3
 80067d6:	43db      	mvns	r3, r3
 80067d8:	69ba      	ldr	r2, [r7, #24]
 80067da:	4013      	ands	r3, r2
 80067dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	689a      	ldr	r2, [r3, #8]
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	005b      	lsls	r3, r3, #1
 80067e6:	fa02 f303 	lsl.w	r3, r2, r3
 80067ea:	69ba      	ldr	r2, [r7, #24]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	69ba      	ldr	r2, [r7, #24]
 80067f4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d003      	beq.n	8006806 <HAL_GPIO_Init+0xee>
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	2b12      	cmp	r3, #18
 8006804:	d123      	bne.n	800684e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	08da      	lsrs	r2, r3, #3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	3208      	adds	r2, #8
 800680e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006812:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	f003 0307 	and.w	r3, r3, #7
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	220f      	movs	r2, #15
 800681e:	fa02 f303 	lsl.w	r3, r2, r3
 8006822:	43db      	mvns	r3, r3
 8006824:	69ba      	ldr	r2, [r7, #24]
 8006826:	4013      	ands	r3, r2
 8006828:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	691a      	ldr	r2, [r3, #16]
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	f003 0307 	and.w	r3, r3, #7
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	fa02 f303 	lsl.w	r3, r2, r3
 800683a:	69ba      	ldr	r2, [r7, #24]
 800683c:	4313      	orrs	r3, r2
 800683e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	08da      	lsrs	r2, r3, #3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	3208      	adds	r2, #8
 8006848:	69b9      	ldr	r1, [r7, #24]
 800684a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	005b      	lsls	r3, r3, #1
 8006858:	2203      	movs	r2, #3
 800685a:	fa02 f303 	lsl.w	r3, r2, r3
 800685e:	43db      	mvns	r3, r3
 8006860:	69ba      	ldr	r2, [r7, #24]
 8006862:	4013      	ands	r3, r2
 8006864:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	f003 0203 	and.w	r2, r3, #3
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	005b      	lsls	r3, r3, #1
 8006872:	fa02 f303 	lsl.w	r3, r2, r3
 8006876:	69ba      	ldr	r2, [r7, #24]
 8006878:	4313      	orrs	r3, r2
 800687a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	69ba      	ldr	r2, [r7, #24]
 8006880:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800688a:	2b00      	cmp	r3, #0
 800688c:	f000 80e0 	beq.w	8006a50 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006890:	4b2f      	ldr	r3, [pc, #188]	; (8006950 <HAL_GPIO_Init+0x238>)
 8006892:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006896:	4a2e      	ldr	r2, [pc, #184]	; (8006950 <HAL_GPIO_Init+0x238>)
 8006898:	f043 0302 	orr.w	r3, r3, #2
 800689c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80068a0:	4b2b      	ldr	r3, [pc, #172]	; (8006950 <HAL_GPIO_Init+0x238>)
 80068a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80068a6:	f003 0302 	and.w	r3, r3, #2
 80068aa:	60fb      	str	r3, [r7, #12]
 80068ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80068ae:	4a29      	ldr	r2, [pc, #164]	; (8006954 <HAL_GPIO_Init+0x23c>)
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	089b      	lsrs	r3, r3, #2
 80068b4:	3302      	adds	r3, #2
 80068b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	f003 0303 	and.w	r3, r3, #3
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	220f      	movs	r2, #15
 80068c6:	fa02 f303 	lsl.w	r3, r2, r3
 80068ca:	43db      	mvns	r3, r3
 80068cc:	69ba      	ldr	r2, [r7, #24]
 80068ce:	4013      	ands	r3, r2
 80068d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a20      	ldr	r2, [pc, #128]	; (8006958 <HAL_GPIO_Init+0x240>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d052      	beq.n	8006980 <HAL_GPIO_Init+0x268>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a1f      	ldr	r2, [pc, #124]	; (800695c <HAL_GPIO_Init+0x244>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d031      	beq.n	8006946 <HAL_GPIO_Init+0x22e>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a1e      	ldr	r2, [pc, #120]	; (8006960 <HAL_GPIO_Init+0x248>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d02b      	beq.n	8006942 <HAL_GPIO_Init+0x22a>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a1d      	ldr	r2, [pc, #116]	; (8006964 <HAL_GPIO_Init+0x24c>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d025      	beq.n	800693e <HAL_GPIO_Init+0x226>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a1c      	ldr	r2, [pc, #112]	; (8006968 <HAL_GPIO_Init+0x250>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d01f      	beq.n	800693a <HAL_GPIO_Init+0x222>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a1b      	ldr	r2, [pc, #108]	; (800696c <HAL_GPIO_Init+0x254>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d019      	beq.n	8006936 <HAL_GPIO_Init+0x21e>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a1a      	ldr	r2, [pc, #104]	; (8006970 <HAL_GPIO_Init+0x258>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d013      	beq.n	8006932 <HAL_GPIO_Init+0x21a>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a19      	ldr	r2, [pc, #100]	; (8006974 <HAL_GPIO_Init+0x25c>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d00d      	beq.n	800692e <HAL_GPIO_Init+0x216>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a18      	ldr	r2, [pc, #96]	; (8006978 <HAL_GPIO_Init+0x260>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d007      	beq.n	800692a <HAL_GPIO_Init+0x212>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a17      	ldr	r2, [pc, #92]	; (800697c <HAL_GPIO_Init+0x264>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d101      	bne.n	8006926 <HAL_GPIO_Init+0x20e>
 8006922:	2309      	movs	r3, #9
 8006924:	e02d      	b.n	8006982 <HAL_GPIO_Init+0x26a>
 8006926:	230a      	movs	r3, #10
 8006928:	e02b      	b.n	8006982 <HAL_GPIO_Init+0x26a>
 800692a:	2308      	movs	r3, #8
 800692c:	e029      	b.n	8006982 <HAL_GPIO_Init+0x26a>
 800692e:	2307      	movs	r3, #7
 8006930:	e027      	b.n	8006982 <HAL_GPIO_Init+0x26a>
 8006932:	2306      	movs	r3, #6
 8006934:	e025      	b.n	8006982 <HAL_GPIO_Init+0x26a>
 8006936:	2305      	movs	r3, #5
 8006938:	e023      	b.n	8006982 <HAL_GPIO_Init+0x26a>
 800693a:	2304      	movs	r3, #4
 800693c:	e021      	b.n	8006982 <HAL_GPIO_Init+0x26a>
 800693e:	2303      	movs	r3, #3
 8006940:	e01f      	b.n	8006982 <HAL_GPIO_Init+0x26a>
 8006942:	2302      	movs	r3, #2
 8006944:	e01d      	b.n	8006982 <HAL_GPIO_Init+0x26a>
 8006946:	2301      	movs	r3, #1
 8006948:	e01b      	b.n	8006982 <HAL_GPIO_Init+0x26a>
 800694a:	bf00      	nop
 800694c:	58000080 	.word	0x58000080
 8006950:	58024400 	.word	0x58024400
 8006954:	58000400 	.word	0x58000400
 8006958:	58020000 	.word	0x58020000
 800695c:	58020400 	.word	0x58020400
 8006960:	58020800 	.word	0x58020800
 8006964:	58020c00 	.word	0x58020c00
 8006968:	58021000 	.word	0x58021000
 800696c:	58021400 	.word	0x58021400
 8006970:	58021800 	.word	0x58021800
 8006974:	58021c00 	.word	0x58021c00
 8006978:	58022000 	.word	0x58022000
 800697c:	58022400 	.word	0x58022400
 8006980:	2300      	movs	r3, #0
 8006982:	69fa      	ldr	r2, [r7, #28]
 8006984:	f002 0203 	and.w	r2, r2, #3
 8006988:	0092      	lsls	r2, r2, #2
 800698a:	4093      	lsls	r3, r2
 800698c:	69ba      	ldr	r2, [r7, #24]
 800698e:	4313      	orrs	r3, r2
 8006990:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006992:	4938      	ldr	r1, [pc, #224]	; (8006a74 <HAL_GPIO_Init+0x35c>)
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	089b      	lsrs	r3, r3, #2
 8006998:	3302      	adds	r3, #2
 800699a:	69ba      	ldr	r2, [r7, #24]
 800699c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	43db      	mvns	r3, r3
 80069aa:	69ba      	ldr	r2, [r7, #24]
 80069ac:	4013      	ands	r3, r2
 80069ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d003      	beq.n	80069c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80069bc:	69ba      	ldr	r2, [r7, #24]
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	69ba      	ldr	r2, [r7, #24]
 80069c8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	43db      	mvns	r3, r3
 80069d4:	69ba      	ldr	r2, [r7, #24]
 80069d6:	4013      	ands	r3, r2
 80069d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d003      	beq.n	80069ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80069e6:	69ba      	ldr	r2, [r7, #24]
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	69ba      	ldr	r2, [r7, #24]
 80069f2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80069f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	43db      	mvns	r3, r3
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	4013      	ands	r3, r2
 8006a04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d003      	beq.n	8006a1a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8006a12:	69ba      	ldr	r2, [r7, #24]
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006a1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	43db      	mvns	r3, r3
 8006a2e:	69ba      	ldr	r2, [r7, #24]
 8006a30:	4013      	ands	r3, r2
 8006a32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d003      	beq.n	8006a48 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8006a40:	69ba      	ldr	r2, [r7, #24]
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006a48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	3301      	adds	r3, #1
 8006a54:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f47f ae63 	bne.w	800672c <HAL_GPIO_Init+0x14>
  }
}
 8006a66:	bf00      	nop
 8006a68:	bf00      	nop
 8006a6a:	3724      	adds	r7, #36	; 0x24
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr
 8006a74:	58000400 	.word	0x58000400

08006a78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	460b      	mov	r3, r1
 8006a82:	807b      	strh	r3, [r7, #2]
 8006a84:	4613      	mov	r3, r2
 8006a86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006a88:	787b      	ldrb	r3, [r7, #1]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d003      	beq.n	8006a96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006a8e:	887a      	ldrh	r2, [r7, #2]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006a94:	e003      	b.n	8006a9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006a96:	887b      	ldrh	r3, [r7, #2]
 8006a98:	041a      	lsls	r2, r3, #16
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	619a      	str	r2, [r3, #24]
}
 8006a9e:	bf00      	nop
 8006aa0:	370c      	adds	r7, #12
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr

08006aaa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b085      	sub	sp, #20
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	695b      	ldr	r3, [r3, #20]
 8006aba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006abc:	887a      	ldrh	r2, [r7, #2]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	041a      	lsls	r2, r3, #16
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	43d9      	mvns	r1, r3
 8006ac8:	887b      	ldrh	r3, [r7, #2]
 8006aca:	400b      	ands	r3, r1
 8006acc:	431a      	orrs	r2, r3
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	619a      	str	r2, [r3, #24]
}
 8006ad2:	bf00      	nop
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b082      	sub	sp, #8
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006af0:	88fb      	ldrh	r3, [r7, #6]
 8006af2:	4013      	ands	r3, r2
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d008      	beq.n	8006b0a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006af8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006afc:	88fb      	ldrh	r3, [r7, #6]
 8006afe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006b02:	88fb      	ldrh	r3, [r7, #6]
 8006b04:	4618      	mov	r0, r3
 8006b06:	f006 f8f9 	bl	800ccfc <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006b0a:	bf00      	nop
 8006b0c:	3708      	adds	r7, #8
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
	...

08006b14 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8006b1c:	4a08      	ldr	r2, [pc, #32]	; (8006b40 <HAL_HSEM_FastTake+0x2c>)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	3320      	adds	r3, #32
 8006b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b26:	4a07      	ldr	r2, [pc, #28]	; (8006b44 <HAL_HSEM_FastTake+0x30>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d101      	bne.n	8006b30 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	e000      	b.n	8006b32 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	370c      	adds	r7, #12
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	58026400 	.word	0x58026400
 8006b44:	80000300 	.word	0x80000300

08006b48 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8006b52:	4906      	ldr	r1, [pc, #24]	; (8006b6c <HAL_HSEM_Release+0x24>)
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr
 8006b6c:	58026400 	.word	0x58026400

08006b70 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006b78:	4b29      	ldr	r3, [pc, #164]	; (8006c20 <HAL_PWREx_ConfigSupply+0xb0>)
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	f003 0307 	and.w	r3, r3, #7
 8006b80:	2b06      	cmp	r3, #6
 8006b82:	d00a      	beq.n	8006b9a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006b84:	4b26      	ldr	r3, [pc, #152]	; (8006c20 <HAL_PWREx_ConfigSupply+0xb0>)
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d001      	beq.n	8006b96 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e040      	b.n	8006c18 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006b96:	2300      	movs	r3, #0
 8006b98:	e03e      	b.n	8006c18 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006b9a:	4b21      	ldr	r3, [pc, #132]	; (8006c20 <HAL_PWREx_ConfigSupply+0xb0>)
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006ba2:	491f      	ldr	r1, [pc, #124]	; (8006c20 <HAL_PWREx_ConfigSupply+0xb0>)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006baa:	f7fb fd67 	bl	800267c <HAL_GetTick>
 8006bae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006bb0:	e009      	b.n	8006bc6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006bb2:	f7fb fd63 	bl	800267c <HAL_GetTick>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bc0:	d901      	bls.n	8006bc6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e028      	b.n	8006c18 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006bc6:	4b16      	ldr	r3, [pc, #88]	; (8006c20 <HAL_PWREx_ConfigSupply+0xb0>)
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bd2:	d1ee      	bne.n	8006bb2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2b1e      	cmp	r3, #30
 8006bd8:	d008      	beq.n	8006bec <HAL_PWREx_ConfigSupply+0x7c>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2b2e      	cmp	r3, #46	; 0x2e
 8006bde:	d005      	beq.n	8006bec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2b1d      	cmp	r3, #29
 8006be4:	d002      	beq.n	8006bec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2b2d      	cmp	r3, #45	; 0x2d
 8006bea:	d114      	bne.n	8006c16 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006bec:	f7fb fd46 	bl	800267c <HAL_GetTick>
 8006bf0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006bf2:	e009      	b.n	8006c08 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006bf4:	f7fb fd42 	bl	800267c <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c02:	d901      	bls.n	8006c08 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e007      	b.n	8006c18 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006c08:	4b05      	ldr	r3, [pc, #20]	; (8006c20 <HAL_PWREx_ConfigSupply+0xb0>)
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c14:	d1ee      	bne.n	8006bf4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	58024800 	.word	0x58024800

08006c24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b08c      	sub	sp, #48	; 0x30
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e3ff      	b.n	8007436 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0301 	and.w	r3, r3, #1
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	f000 8087 	beq.w	8006d52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c44:	4b99      	ldr	r3, [pc, #612]	; (8006eac <HAL_RCC_OscConfig+0x288>)
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006c4e:	4b97      	ldr	r3, [pc, #604]	; (8006eac <HAL_RCC_OscConfig+0x288>)
 8006c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c52:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c56:	2b10      	cmp	r3, #16
 8006c58:	d007      	beq.n	8006c6a <HAL_RCC_OscConfig+0x46>
 8006c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5c:	2b18      	cmp	r3, #24
 8006c5e:	d110      	bne.n	8006c82 <HAL_RCC_OscConfig+0x5e>
 8006c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c62:	f003 0303 	and.w	r3, r3, #3
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d10b      	bne.n	8006c82 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c6a:	4b90      	ldr	r3, [pc, #576]	; (8006eac <HAL_RCC_OscConfig+0x288>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d06c      	beq.n	8006d50 <HAL_RCC_OscConfig+0x12c>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d168      	bne.n	8006d50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e3d9      	b.n	8007436 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c8a:	d106      	bne.n	8006c9a <HAL_RCC_OscConfig+0x76>
 8006c8c:	4b87      	ldr	r3, [pc, #540]	; (8006eac <HAL_RCC_OscConfig+0x288>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a86      	ldr	r2, [pc, #536]	; (8006eac <HAL_RCC_OscConfig+0x288>)
 8006c92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c96:	6013      	str	r3, [r2, #0]
 8006c98:	e02e      	b.n	8006cf8 <HAL_RCC_OscConfig+0xd4>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d10c      	bne.n	8006cbc <HAL_RCC_OscConfig+0x98>
 8006ca2:	4b82      	ldr	r3, [pc, #520]	; (8006eac <HAL_RCC_OscConfig+0x288>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a81      	ldr	r2, [pc, #516]	; (8006eac <HAL_RCC_OscConfig+0x288>)
 8006ca8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cac:	6013      	str	r3, [r2, #0]
 8006cae:	4b7f      	ldr	r3, [pc, #508]	; (8006eac <HAL_RCC_OscConfig+0x288>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a7e      	ldr	r2, [pc, #504]	; (8006eac <HAL_RCC_OscConfig+0x288>)
 8006cb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cb8:	6013      	str	r3, [r2, #0]
 8006cba:	e01d      	b.n	8006cf8 <HAL_RCC_OscConfig+0xd4>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006cc4:	d10c      	bne.n	8006ce0 <HAL_RCC_OscConfig+0xbc>
 8006cc6:	4b79      	ldr	r3, [pc, #484]	; (8006eac <HAL_RCC_OscConfig+0x288>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a78      	ldr	r2, [pc, #480]	; (8006eac <HAL_RCC_OscConfig+0x288>)
 8006ccc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006cd0:	6013      	str	r3, [r2, #0]
 8006cd2:	4b76      	ldr	r3, [pc, #472]	; (8006eac <HAL_RCC_OscConfig+0x288>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a75      	ldr	r2, [pc, #468]	; (8006eac <HAL_RCC_OscConfig+0x288>)
 8006cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cdc:	6013      	str	r3, [r2, #0]
 8006cde:	e00b      	b.n	8006cf8 <HAL_RCC_OscConfig+0xd4>
 8006ce0:	4b72      	ldr	r3, [pc, #456]	; (8006eac <HAL_RCC_OscConfig+0x288>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a71      	ldr	r2, [pc, #452]	; (8006eac <HAL_RCC_OscConfig+0x288>)
 8006ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cea:	6013      	str	r3, [r2, #0]
 8006cec:	4b6f      	ldr	r3, [pc, #444]	; (8006eac <HAL_RCC_OscConfig+0x288>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a6e      	ldr	r2, [pc, #440]	; (8006eac <HAL_RCC_OscConfig+0x288>)
 8006cf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d013      	beq.n	8006d28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d00:	f7fb fcbc 	bl	800267c <HAL_GetTick>
 8006d04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d06:	e008      	b.n	8006d1a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d08:	f7fb fcb8 	bl	800267c <HAL_GetTick>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	2b64      	cmp	r3, #100	; 0x64
 8006d14:	d901      	bls.n	8006d1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	e38d      	b.n	8007436 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d1a:	4b64      	ldr	r3, [pc, #400]	; (8006eac <HAL_RCC_OscConfig+0x288>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d0f0      	beq.n	8006d08 <HAL_RCC_OscConfig+0xe4>
 8006d26:	e014      	b.n	8006d52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d28:	f7fb fca8 	bl	800267c <HAL_GetTick>
 8006d2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006d2e:	e008      	b.n	8006d42 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d30:	f7fb fca4 	bl	800267c <HAL_GetTick>
 8006d34:	4602      	mov	r2, r0
 8006d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	2b64      	cmp	r3, #100	; 0x64
 8006d3c:	d901      	bls.n	8006d42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e379      	b.n	8007436 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006d42:	4b5a      	ldr	r3, [pc, #360]	; (8006eac <HAL_RCC_OscConfig+0x288>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1f0      	bne.n	8006d30 <HAL_RCC_OscConfig+0x10c>
 8006d4e:	e000      	b.n	8006d52 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0302 	and.w	r3, r3, #2
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f000 80ae 	beq.w	8006ebc <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d60:	4b52      	ldr	r3, [pc, #328]	; (8006eac <HAL_RCC_OscConfig+0x288>)
 8006d62:	691b      	ldr	r3, [r3, #16]
 8006d64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d68:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d6a:	4b50      	ldr	r3, [pc, #320]	; (8006eac <HAL_RCC_OscConfig+0x288>)
 8006d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d6e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006d70:	6a3b      	ldr	r3, [r7, #32]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d007      	beq.n	8006d86 <HAL_RCC_OscConfig+0x162>
 8006d76:	6a3b      	ldr	r3, [r7, #32]
 8006d78:	2b18      	cmp	r3, #24
 8006d7a:	d13a      	bne.n	8006df2 <HAL_RCC_OscConfig+0x1ce>
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	f003 0303 	and.w	r3, r3, #3
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d135      	bne.n	8006df2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d86:	4b49      	ldr	r3, [pc, #292]	; (8006eac <HAL_RCC_OscConfig+0x288>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 0304 	and.w	r3, r3, #4
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d005      	beq.n	8006d9e <HAL_RCC_OscConfig+0x17a>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d101      	bne.n	8006d9e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e34b      	b.n	8007436 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d9e:	f7fb fc9d 	bl	80026dc <HAL_GetREVID>
 8006da2:	4603      	mov	r3, r0
 8006da4:	f241 0203 	movw	r2, #4099	; 0x1003
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d817      	bhi.n	8006ddc <HAL_RCC_OscConfig+0x1b8>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	2b40      	cmp	r3, #64	; 0x40
 8006db2:	d108      	bne.n	8006dc6 <HAL_RCC_OscConfig+0x1a2>
 8006db4:	4b3d      	ldr	r3, [pc, #244]	; (8006eac <HAL_RCC_OscConfig+0x288>)
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006dbc:	4a3b      	ldr	r2, [pc, #236]	; (8006eac <HAL_RCC_OscConfig+0x288>)
 8006dbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dc2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006dc4:	e07a      	b.n	8006ebc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dc6:	4b39      	ldr	r3, [pc, #228]	; (8006eac <HAL_RCC_OscConfig+0x288>)
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	031b      	lsls	r3, r3, #12
 8006dd4:	4935      	ldr	r1, [pc, #212]	; (8006eac <HAL_RCC_OscConfig+0x288>)
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006dda:	e06f      	b.n	8006ebc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ddc:	4b33      	ldr	r3, [pc, #204]	; (8006eac <HAL_RCC_OscConfig+0x288>)
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	061b      	lsls	r3, r3, #24
 8006dea:	4930      	ldr	r1, [pc, #192]	; (8006eac <HAL_RCC_OscConfig+0x288>)
 8006dec:	4313      	orrs	r3, r2
 8006dee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006df0:	e064      	b.n	8006ebc <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d045      	beq.n	8006e86 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006dfa:	4b2c      	ldr	r3, [pc, #176]	; (8006eac <HAL_RCC_OscConfig+0x288>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f023 0219 	bic.w	r2, r3, #25
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	4929      	ldr	r1, [pc, #164]	; (8006eac <HAL_RCC_OscConfig+0x288>)
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e0c:	f7fb fc36 	bl	800267c <HAL_GetTick>
 8006e10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e12:	e008      	b.n	8006e26 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e14:	f7fb fc32 	bl	800267c <HAL_GetTick>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d901      	bls.n	8006e26 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e307      	b.n	8007436 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e26:	4b21      	ldr	r3, [pc, #132]	; (8006eac <HAL_RCC_OscConfig+0x288>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 0304 	and.w	r3, r3, #4
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d0f0      	beq.n	8006e14 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e32:	f7fb fc53 	bl	80026dc <HAL_GetREVID>
 8006e36:	4603      	mov	r3, r0
 8006e38:	f241 0203 	movw	r2, #4099	; 0x1003
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d817      	bhi.n	8006e70 <HAL_RCC_OscConfig+0x24c>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	2b40      	cmp	r3, #64	; 0x40
 8006e46:	d108      	bne.n	8006e5a <HAL_RCC_OscConfig+0x236>
 8006e48:	4b18      	ldr	r3, [pc, #96]	; (8006eac <HAL_RCC_OscConfig+0x288>)
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006e50:	4a16      	ldr	r2, [pc, #88]	; (8006eac <HAL_RCC_OscConfig+0x288>)
 8006e52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e56:	6053      	str	r3, [r2, #4]
 8006e58:	e030      	b.n	8006ebc <HAL_RCC_OscConfig+0x298>
 8006e5a:	4b14      	ldr	r3, [pc, #80]	; (8006eac <HAL_RCC_OscConfig+0x288>)
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	031b      	lsls	r3, r3, #12
 8006e68:	4910      	ldr	r1, [pc, #64]	; (8006eac <HAL_RCC_OscConfig+0x288>)
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	604b      	str	r3, [r1, #4]
 8006e6e:	e025      	b.n	8006ebc <HAL_RCC_OscConfig+0x298>
 8006e70:	4b0e      	ldr	r3, [pc, #56]	; (8006eac <HAL_RCC_OscConfig+0x288>)
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	691b      	ldr	r3, [r3, #16]
 8006e7c:	061b      	lsls	r3, r3, #24
 8006e7e:	490b      	ldr	r1, [pc, #44]	; (8006eac <HAL_RCC_OscConfig+0x288>)
 8006e80:	4313      	orrs	r3, r2
 8006e82:	604b      	str	r3, [r1, #4]
 8006e84:	e01a      	b.n	8006ebc <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e86:	4b09      	ldr	r3, [pc, #36]	; (8006eac <HAL_RCC_OscConfig+0x288>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a08      	ldr	r2, [pc, #32]	; (8006eac <HAL_RCC_OscConfig+0x288>)
 8006e8c:	f023 0301 	bic.w	r3, r3, #1
 8006e90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e92:	f7fb fbf3 	bl	800267c <HAL_GetTick>
 8006e96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006e98:	e00a      	b.n	8006eb0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e9a:	f7fb fbef 	bl	800267c <HAL_GetTick>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	2b02      	cmp	r3, #2
 8006ea6:	d903      	bls.n	8006eb0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	e2c4      	b.n	8007436 <HAL_RCC_OscConfig+0x812>
 8006eac:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006eb0:	4ba4      	ldr	r3, [pc, #656]	; (8007144 <HAL_RCC_OscConfig+0x520>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 0304 	and.w	r3, r3, #4
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1ee      	bne.n	8006e9a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 0310 	and.w	r3, r3, #16
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f000 80a9 	beq.w	800701c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006eca:	4b9e      	ldr	r3, [pc, #632]	; (8007144 <HAL_RCC_OscConfig+0x520>)
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ed2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ed4:	4b9b      	ldr	r3, [pc, #620]	; (8007144 <HAL_RCC_OscConfig+0x520>)
 8006ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	2b08      	cmp	r3, #8
 8006ede:	d007      	beq.n	8006ef0 <HAL_RCC_OscConfig+0x2cc>
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	2b18      	cmp	r3, #24
 8006ee4:	d13a      	bne.n	8006f5c <HAL_RCC_OscConfig+0x338>
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	f003 0303 	and.w	r3, r3, #3
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d135      	bne.n	8006f5c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006ef0:	4b94      	ldr	r3, [pc, #592]	; (8007144 <HAL_RCC_OscConfig+0x520>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d005      	beq.n	8006f08 <HAL_RCC_OscConfig+0x2e4>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	69db      	ldr	r3, [r3, #28]
 8006f00:	2b80      	cmp	r3, #128	; 0x80
 8006f02:	d001      	beq.n	8006f08 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e296      	b.n	8007436 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006f08:	f7fb fbe8 	bl	80026dc <HAL_GetREVID>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	f241 0203 	movw	r2, #4099	; 0x1003
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d817      	bhi.n	8006f46 <HAL_RCC_OscConfig+0x322>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	2b20      	cmp	r3, #32
 8006f1c:	d108      	bne.n	8006f30 <HAL_RCC_OscConfig+0x30c>
 8006f1e:	4b89      	ldr	r3, [pc, #548]	; (8007144 <HAL_RCC_OscConfig+0x520>)
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006f26:	4a87      	ldr	r2, [pc, #540]	; (8007144 <HAL_RCC_OscConfig+0x520>)
 8006f28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f2c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006f2e:	e075      	b.n	800701c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006f30:	4b84      	ldr	r3, [pc, #528]	; (8007144 <HAL_RCC_OscConfig+0x520>)
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6a1b      	ldr	r3, [r3, #32]
 8006f3c:	069b      	lsls	r3, r3, #26
 8006f3e:	4981      	ldr	r1, [pc, #516]	; (8007144 <HAL_RCC_OscConfig+0x520>)
 8006f40:	4313      	orrs	r3, r2
 8006f42:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006f44:	e06a      	b.n	800701c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006f46:	4b7f      	ldr	r3, [pc, #508]	; (8007144 <HAL_RCC_OscConfig+0x520>)
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	061b      	lsls	r3, r3, #24
 8006f54:	497b      	ldr	r1, [pc, #492]	; (8007144 <HAL_RCC_OscConfig+0x520>)
 8006f56:	4313      	orrs	r3, r2
 8006f58:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006f5a:	e05f      	b.n	800701c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	69db      	ldr	r3, [r3, #28]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d042      	beq.n	8006fea <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006f64:	4b77      	ldr	r3, [pc, #476]	; (8007144 <HAL_RCC_OscConfig+0x520>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a76      	ldr	r2, [pc, #472]	; (8007144 <HAL_RCC_OscConfig+0x520>)
 8006f6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f70:	f7fb fb84 	bl	800267c <HAL_GetTick>
 8006f74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006f76:	e008      	b.n	8006f8a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006f78:	f7fb fb80 	bl	800267c <HAL_GetTick>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d901      	bls.n	8006f8a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e255      	b.n	8007436 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006f8a:	4b6e      	ldr	r3, [pc, #440]	; (8007144 <HAL_RCC_OscConfig+0x520>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d0f0      	beq.n	8006f78 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006f96:	f7fb fba1 	bl	80026dc <HAL_GetREVID>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d817      	bhi.n	8006fd4 <HAL_RCC_OscConfig+0x3b0>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a1b      	ldr	r3, [r3, #32]
 8006fa8:	2b20      	cmp	r3, #32
 8006faa:	d108      	bne.n	8006fbe <HAL_RCC_OscConfig+0x39a>
 8006fac:	4b65      	ldr	r3, [pc, #404]	; (8007144 <HAL_RCC_OscConfig+0x520>)
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006fb4:	4a63      	ldr	r2, [pc, #396]	; (8007144 <HAL_RCC_OscConfig+0x520>)
 8006fb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006fba:	6053      	str	r3, [r2, #4]
 8006fbc:	e02e      	b.n	800701c <HAL_RCC_OscConfig+0x3f8>
 8006fbe:	4b61      	ldr	r3, [pc, #388]	; (8007144 <HAL_RCC_OscConfig+0x520>)
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a1b      	ldr	r3, [r3, #32]
 8006fca:	069b      	lsls	r3, r3, #26
 8006fcc:	495d      	ldr	r1, [pc, #372]	; (8007144 <HAL_RCC_OscConfig+0x520>)
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	604b      	str	r3, [r1, #4]
 8006fd2:	e023      	b.n	800701c <HAL_RCC_OscConfig+0x3f8>
 8006fd4:	4b5b      	ldr	r3, [pc, #364]	; (8007144 <HAL_RCC_OscConfig+0x520>)
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a1b      	ldr	r3, [r3, #32]
 8006fe0:	061b      	lsls	r3, r3, #24
 8006fe2:	4958      	ldr	r1, [pc, #352]	; (8007144 <HAL_RCC_OscConfig+0x520>)
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	60cb      	str	r3, [r1, #12]
 8006fe8:	e018      	b.n	800701c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006fea:	4b56      	ldr	r3, [pc, #344]	; (8007144 <HAL_RCC_OscConfig+0x520>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a55      	ldr	r2, [pc, #340]	; (8007144 <HAL_RCC_OscConfig+0x520>)
 8006ff0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ff4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ff6:	f7fb fb41 	bl	800267c <HAL_GetTick>
 8006ffa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006ffc:	e008      	b.n	8007010 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006ffe:	f7fb fb3d 	bl	800267c <HAL_GetTick>
 8007002:	4602      	mov	r2, r0
 8007004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	2b02      	cmp	r3, #2
 800700a:	d901      	bls.n	8007010 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	e212      	b.n	8007436 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007010:	4b4c      	ldr	r3, [pc, #304]	; (8007144 <HAL_RCC_OscConfig+0x520>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007018:	2b00      	cmp	r3, #0
 800701a:	d1f0      	bne.n	8006ffe <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 0308 	and.w	r3, r3, #8
 8007024:	2b00      	cmp	r3, #0
 8007026:	d036      	beq.n	8007096 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	695b      	ldr	r3, [r3, #20]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d019      	beq.n	8007064 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007030:	4b44      	ldr	r3, [pc, #272]	; (8007144 <HAL_RCC_OscConfig+0x520>)
 8007032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007034:	4a43      	ldr	r2, [pc, #268]	; (8007144 <HAL_RCC_OscConfig+0x520>)
 8007036:	f043 0301 	orr.w	r3, r3, #1
 800703a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800703c:	f7fb fb1e 	bl	800267c <HAL_GetTick>
 8007040:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007042:	e008      	b.n	8007056 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007044:	f7fb fb1a 	bl	800267c <HAL_GetTick>
 8007048:	4602      	mov	r2, r0
 800704a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	2b02      	cmp	r3, #2
 8007050:	d901      	bls.n	8007056 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8007052:	2303      	movs	r3, #3
 8007054:	e1ef      	b.n	8007436 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007056:	4b3b      	ldr	r3, [pc, #236]	; (8007144 <HAL_RCC_OscConfig+0x520>)
 8007058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800705a:	f003 0302 	and.w	r3, r3, #2
 800705e:	2b00      	cmp	r3, #0
 8007060:	d0f0      	beq.n	8007044 <HAL_RCC_OscConfig+0x420>
 8007062:	e018      	b.n	8007096 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007064:	4b37      	ldr	r3, [pc, #220]	; (8007144 <HAL_RCC_OscConfig+0x520>)
 8007066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007068:	4a36      	ldr	r2, [pc, #216]	; (8007144 <HAL_RCC_OscConfig+0x520>)
 800706a:	f023 0301 	bic.w	r3, r3, #1
 800706e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007070:	f7fb fb04 	bl	800267c <HAL_GetTick>
 8007074:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007076:	e008      	b.n	800708a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007078:	f7fb fb00 	bl	800267c <HAL_GetTick>
 800707c:	4602      	mov	r2, r0
 800707e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	2b02      	cmp	r3, #2
 8007084:	d901      	bls.n	800708a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8007086:	2303      	movs	r3, #3
 8007088:	e1d5      	b.n	8007436 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800708a:	4b2e      	ldr	r3, [pc, #184]	; (8007144 <HAL_RCC_OscConfig+0x520>)
 800708c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800708e:	f003 0302 	and.w	r3, r3, #2
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1f0      	bne.n	8007078 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 0320 	and.w	r3, r3, #32
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d036      	beq.n	8007110 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	699b      	ldr	r3, [r3, #24]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d019      	beq.n	80070de <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80070aa:	4b26      	ldr	r3, [pc, #152]	; (8007144 <HAL_RCC_OscConfig+0x520>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a25      	ldr	r2, [pc, #148]	; (8007144 <HAL_RCC_OscConfig+0x520>)
 80070b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80070b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80070b6:	f7fb fae1 	bl	800267c <HAL_GetTick>
 80070ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80070bc:	e008      	b.n	80070d0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80070be:	f7fb fadd 	bl	800267c <HAL_GetTick>
 80070c2:	4602      	mov	r2, r0
 80070c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c6:	1ad3      	subs	r3, r2, r3
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d901      	bls.n	80070d0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80070cc:	2303      	movs	r3, #3
 80070ce:	e1b2      	b.n	8007436 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80070d0:	4b1c      	ldr	r3, [pc, #112]	; (8007144 <HAL_RCC_OscConfig+0x520>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d0f0      	beq.n	80070be <HAL_RCC_OscConfig+0x49a>
 80070dc:	e018      	b.n	8007110 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80070de:	4b19      	ldr	r3, [pc, #100]	; (8007144 <HAL_RCC_OscConfig+0x520>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a18      	ldr	r2, [pc, #96]	; (8007144 <HAL_RCC_OscConfig+0x520>)
 80070e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070e8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80070ea:	f7fb fac7 	bl	800267c <HAL_GetTick>
 80070ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80070f0:	e008      	b.n	8007104 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80070f2:	f7fb fac3 	bl	800267c <HAL_GetTick>
 80070f6:	4602      	mov	r2, r0
 80070f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fa:	1ad3      	subs	r3, r2, r3
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d901      	bls.n	8007104 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8007100:	2303      	movs	r3, #3
 8007102:	e198      	b.n	8007436 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007104:	4b0f      	ldr	r3, [pc, #60]	; (8007144 <HAL_RCC_OscConfig+0x520>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1f0      	bne.n	80070f2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 0304 	and.w	r3, r3, #4
 8007118:	2b00      	cmp	r3, #0
 800711a:	f000 8085 	beq.w	8007228 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800711e:	4b0a      	ldr	r3, [pc, #40]	; (8007148 <HAL_RCC_OscConfig+0x524>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a09      	ldr	r2, [pc, #36]	; (8007148 <HAL_RCC_OscConfig+0x524>)
 8007124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007128:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800712a:	f7fb faa7 	bl	800267c <HAL_GetTick>
 800712e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007130:	e00c      	b.n	800714c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007132:	f7fb faa3 	bl	800267c <HAL_GetTick>
 8007136:	4602      	mov	r2, r0
 8007138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	2b64      	cmp	r3, #100	; 0x64
 800713e:	d905      	bls.n	800714c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8007140:	2303      	movs	r3, #3
 8007142:	e178      	b.n	8007436 <HAL_RCC_OscConfig+0x812>
 8007144:	58024400 	.word	0x58024400
 8007148:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800714c:	4b96      	ldr	r3, [pc, #600]	; (80073a8 <HAL_RCC_OscConfig+0x784>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007154:	2b00      	cmp	r3, #0
 8007156:	d0ec      	beq.n	8007132 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d106      	bne.n	800716e <HAL_RCC_OscConfig+0x54a>
 8007160:	4b92      	ldr	r3, [pc, #584]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 8007162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007164:	4a91      	ldr	r2, [pc, #580]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 8007166:	f043 0301 	orr.w	r3, r3, #1
 800716a:	6713      	str	r3, [r2, #112]	; 0x70
 800716c:	e02d      	b.n	80071ca <HAL_RCC_OscConfig+0x5a6>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d10c      	bne.n	8007190 <HAL_RCC_OscConfig+0x56c>
 8007176:	4b8d      	ldr	r3, [pc, #564]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 8007178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800717a:	4a8c      	ldr	r2, [pc, #560]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 800717c:	f023 0301 	bic.w	r3, r3, #1
 8007180:	6713      	str	r3, [r2, #112]	; 0x70
 8007182:	4b8a      	ldr	r3, [pc, #552]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 8007184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007186:	4a89      	ldr	r2, [pc, #548]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 8007188:	f023 0304 	bic.w	r3, r3, #4
 800718c:	6713      	str	r3, [r2, #112]	; 0x70
 800718e:	e01c      	b.n	80071ca <HAL_RCC_OscConfig+0x5a6>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	2b05      	cmp	r3, #5
 8007196:	d10c      	bne.n	80071b2 <HAL_RCC_OscConfig+0x58e>
 8007198:	4b84      	ldr	r3, [pc, #528]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 800719a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800719c:	4a83      	ldr	r2, [pc, #524]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 800719e:	f043 0304 	orr.w	r3, r3, #4
 80071a2:	6713      	str	r3, [r2, #112]	; 0x70
 80071a4:	4b81      	ldr	r3, [pc, #516]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 80071a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071a8:	4a80      	ldr	r2, [pc, #512]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 80071aa:	f043 0301 	orr.w	r3, r3, #1
 80071ae:	6713      	str	r3, [r2, #112]	; 0x70
 80071b0:	e00b      	b.n	80071ca <HAL_RCC_OscConfig+0x5a6>
 80071b2:	4b7e      	ldr	r3, [pc, #504]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 80071b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071b6:	4a7d      	ldr	r2, [pc, #500]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 80071b8:	f023 0301 	bic.w	r3, r3, #1
 80071bc:	6713      	str	r3, [r2, #112]	; 0x70
 80071be:	4b7b      	ldr	r3, [pc, #492]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 80071c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071c2:	4a7a      	ldr	r2, [pc, #488]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 80071c4:	f023 0304 	bic.w	r3, r3, #4
 80071c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d015      	beq.n	80071fe <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071d2:	f7fb fa53 	bl	800267c <HAL_GetTick>
 80071d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80071d8:	e00a      	b.n	80071f0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071da:	f7fb fa4f 	bl	800267c <HAL_GetTick>
 80071de:	4602      	mov	r2, r0
 80071e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d901      	bls.n	80071f0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80071ec:	2303      	movs	r3, #3
 80071ee:	e122      	b.n	8007436 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80071f0:	4b6e      	ldr	r3, [pc, #440]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 80071f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f4:	f003 0302 	and.w	r3, r3, #2
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d0ee      	beq.n	80071da <HAL_RCC_OscConfig+0x5b6>
 80071fc:	e014      	b.n	8007228 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071fe:	f7fb fa3d 	bl	800267c <HAL_GetTick>
 8007202:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007204:	e00a      	b.n	800721c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007206:	f7fb fa39 	bl	800267c <HAL_GetTick>
 800720a:	4602      	mov	r2, r0
 800720c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720e:	1ad3      	subs	r3, r2, r3
 8007210:	f241 3288 	movw	r2, #5000	; 0x1388
 8007214:	4293      	cmp	r3, r2
 8007216:	d901      	bls.n	800721c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8007218:	2303      	movs	r3, #3
 800721a:	e10c      	b.n	8007436 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800721c:	4b63      	ldr	r3, [pc, #396]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 800721e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007220:	f003 0302 	and.w	r3, r3, #2
 8007224:	2b00      	cmp	r3, #0
 8007226:	d1ee      	bne.n	8007206 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722c:	2b00      	cmp	r3, #0
 800722e:	f000 8101 	beq.w	8007434 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007232:	4b5e      	ldr	r3, [pc, #376]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800723a:	2b18      	cmp	r3, #24
 800723c:	f000 80bc 	beq.w	80073b8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007244:	2b02      	cmp	r3, #2
 8007246:	f040 8095 	bne.w	8007374 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800724a:	4b58      	ldr	r3, [pc, #352]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a57      	ldr	r2, [pc, #348]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 8007250:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007254:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007256:	f7fb fa11 	bl	800267c <HAL_GetTick>
 800725a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800725c:	e008      	b.n	8007270 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800725e:	f7fb fa0d 	bl	800267c <HAL_GetTick>
 8007262:	4602      	mov	r2, r0
 8007264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	2b02      	cmp	r3, #2
 800726a:	d901      	bls.n	8007270 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800726c:	2303      	movs	r3, #3
 800726e:	e0e2      	b.n	8007436 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007270:	4b4e      	ldr	r3, [pc, #312]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007278:	2b00      	cmp	r3, #0
 800727a:	d1f0      	bne.n	800725e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800727c:	4b4b      	ldr	r3, [pc, #300]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 800727e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007280:	4b4b      	ldr	r3, [pc, #300]	; (80073b0 <HAL_RCC_OscConfig+0x78c>)
 8007282:	4013      	ands	r3, r2
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800728c:	0112      	lsls	r2, r2, #4
 800728e:	430a      	orrs	r2, r1
 8007290:	4946      	ldr	r1, [pc, #280]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 8007292:	4313      	orrs	r3, r2
 8007294:	628b      	str	r3, [r1, #40]	; 0x28
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729a:	3b01      	subs	r3, #1
 800729c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072a4:	3b01      	subs	r3, #1
 80072a6:	025b      	lsls	r3, r3, #9
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	431a      	orrs	r2, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b0:	3b01      	subs	r3, #1
 80072b2:	041b      	lsls	r3, r3, #16
 80072b4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80072b8:	431a      	orrs	r2, r3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072be:	3b01      	subs	r3, #1
 80072c0:	061b      	lsls	r3, r3, #24
 80072c2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80072c6:	4939      	ldr	r1, [pc, #228]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 80072c8:	4313      	orrs	r3, r2
 80072ca:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80072cc:	4b37      	ldr	r3, [pc, #220]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 80072ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d0:	4a36      	ldr	r2, [pc, #216]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 80072d2:	f023 0301 	bic.w	r3, r3, #1
 80072d6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80072d8:	4b34      	ldr	r3, [pc, #208]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 80072da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072dc:	4b35      	ldr	r3, [pc, #212]	; (80073b4 <HAL_RCC_OscConfig+0x790>)
 80072de:	4013      	ands	r3, r2
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80072e4:	00d2      	lsls	r2, r2, #3
 80072e6:	4931      	ldr	r1, [pc, #196]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 80072e8:	4313      	orrs	r3, r2
 80072ea:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80072ec:	4b2f      	ldr	r3, [pc, #188]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 80072ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f0:	f023 020c 	bic.w	r2, r3, #12
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f8:	492c      	ldr	r1, [pc, #176]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 80072fa:	4313      	orrs	r3, r2
 80072fc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80072fe:	4b2b      	ldr	r3, [pc, #172]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 8007300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007302:	f023 0202 	bic.w	r2, r3, #2
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800730a:	4928      	ldr	r1, [pc, #160]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 800730c:	4313      	orrs	r3, r2
 800730e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007310:	4b26      	ldr	r3, [pc, #152]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 8007312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007314:	4a25      	ldr	r2, [pc, #148]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 8007316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800731a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800731c:	4b23      	ldr	r3, [pc, #140]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 800731e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007320:	4a22      	ldr	r2, [pc, #136]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 8007322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007326:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007328:	4b20      	ldr	r3, [pc, #128]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 800732a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732c:	4a1f      	ldr	r2, [pc, #124]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 800732e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007332:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007334:	4b1d      	ldr	r3, [pc, #116]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 8007336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007338:	4a1c      	ldr	r2, [pc, #112]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 800733a:	f043 0301 	orr.w	r3, r3, #1
 800733e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007340:	4b1a      	ldr	r3, [pc, #104]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a19      	ldr	r2, [pc, #100]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 8007346:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800734a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800734c:	f7fb f996 	bl	800267c <HAL_GetTick>
 8007350:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007352:	e008      	b.n	8007366 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007354:	f7fb f992 	bl	800267c <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	2b02      	cmp	r3, #2
 8007360:	d901      	bls.n	8007366 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8007362:	2303      	movs	r3, #3
 8007364:	e067      	b.n	8007436 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007366:	4b11      	ldr	r3, [pc, #68]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800736e:	2b00      	cmp	r3, #0
 8007370:	d0f0      	beq.n	8007354 <HAL_RCC_OscConfig+0x730>
 8007372:	e05f      	b.n	8007434 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007374:	4b0d      	ldr	r3, [pc, #52]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a0c      	ldr	r2, [pc, #48]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 800737a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800737e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007380:	f7fb f97c 	bl	800267c <HAL_GetTick>
 8007384:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007386:	e008      	b.n	800739a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007388:	f7fb f978 	bl	800267c <HAL_GetTick>
 800738c:	4602      	mov	r2, r0
 800738e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	2b02      	cmp	r3, #2
 8007394:	d901      	bls.n	800739a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8007396:	2303      	movs	r3, #3
 8007398:	e04d      	b.n	8007436 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800739a:	4b04      	ldr	r3, [pc, #16]	; (80073ac <HAL_RCC_OscConfig+0x788>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1f0      	bne.n	8007388 <HAL_RCC_OscConfig+0x764>
 80073a6:	e045      	b.n	8007434 <HAL_RCC_OscConfig+0x810>
 80073a8:	58024800 	.word	0x58024800
 80073ac:	58024400 	.word	0x58024400
 80073b0:	fffffc0c 	.word	0xfffffc0c
 80073b4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80073b8:	4b21      	ldr	r3, [pc, #132]	; (8007440 <HAL_RCC_OscConfig+0x81c>)
 80073ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073bc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80073be:	4b20      	ldr	r3, [pc, #128]	; (8007440 <HAL_RCC_OscConfig+0x81c>)
 80073c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d031      	beq.n	8007430 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	f003 0203 	and.w	r2, r3, #3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d12a      	bne.n	8007430 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	091b      	lsrs	r3, r3, #4
 80073de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d122      	bne.n	8007430 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d11a      	bne.n	8007430 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	0a5b      	lsrs	r3, r3, #9
 80073fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007406:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007408:	429a      	cmp	r2, r3
 800740a:	d111      	bne.n	8007430 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	0c1b      	lsrs	r3, r3, #16
 8007410:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007418:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800741a:	429a      	cmp	r2, r3
 800741c:	d108      	bne.n	8007430 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	0e1b      	lsrs	r3, r3, #24
 8007422:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800742a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800742c:	429a      	cmp	r2, r3
 800742e:	d001      	beq.n	8007434 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	e000      	b.n	8007436 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3730      	adds	r7, #48	; 0x30
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	58024400 	.word	0x58024400

08007444 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b086      	sub	sp, #24
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d101      	bne.n	8007458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	e19c      	b.n	8007792 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007458:	4b8a      	ldr	r3, [pc, #552]	; (8007684 <HAL_RCC_ClockConfig+0x240>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 030f 	and.w	r3, r3, #15
 8007460:	683a      	ldr	r2, [r7, #0]
 8007462:	429a      	cmp	r2, r3
 8007464:	d910      	bls.n	8007488 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007466:	4b87      	ldr	r3, [pc, #540]	; (8007684 <HAL_RCC_ClockConfig+0x240>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f023 020f 	bic.w	r2, r3, #15
 800746e:	4985      	ldr	r1, [pc, #532]	; (8007684 <HAL_RCC_ClockConfig+0x240>)
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	4313      	orrs	r3, r2
 8007474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007476:	4b83      	ldr	r3, [pc, #524]	; (8007684 <HAL_RCC_ClockConfig+0x240>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 030f 	and.w	r3, r3, #15
 800747e:	683a      	ldr	r2, [r7, #0]
 8007480:	429a      	cmp	r2, r3
 8007482:	d001      	beq.n	8007488 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	e184      	b.n	8007792 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 0304 	and.w	r3, r3, #4
 8007490:	2b00      	cmp	r3, #0
 8007492:	d010      	beq.n	80074b6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	691a      	ldr	r2, [r3, #16]
 8007498:	4b7b      	ldr	r3, [pc, #492]	; (8007688 <HAL_RCC_ClockConfig+0x244>)
 800749a:	699b      	ldr	r3, [r3, #24]
 800749c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d908      	bls.n	80074b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80074a4:	4b78      	ldr	r3, [pc, #480]	; (8007688 <HAL_RCC_ClockConfig+0x244>)
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	4975      	ldr	r1, [pc, #468]	; (8007688 <HAL_RCC_ClockConfig+0x244>)
 80074b2:	4313      	orrs	r3, r2
 80074b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 0308 	and.w	r3, r3, #8
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d010      	beq.n	80074e4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	695a      	ldr	r2, [r3, #20]
 80074c6:	4b70      	ldr	r3, [pc, #448]	; (8007688 <HAL_RCC_ClockConfig+0x244>)
 80074c8:	69db      	ldr	r3, [r3, #28]
 80074ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d908      	bls.n	80074e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80074d2:	4b6d      	ldr	r3, [pc, #436]	; (8007688 <HAL_RCC_ClockConfig+0x244>)
 80074d4:	69db      	ldr	r3, [r3, #28]
 80074d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	695b      	ldr	r3, [r3, #20]
 80074de:	496a      	ldr	r1, [pc, #424]	; (8007688 <HAL_RCC_ClockConfig+0x244>)
 80074e0:	4313      	orrs	r3, r2
 80074e2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 0310 	and.w	r3, r3, #16
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d010      	beq.n	8007512 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	699a      	ldr	r2, [r3, #24]
 80074f4:	4b64      	ldr	r3, [pc, #400]	; (8007688 <HAL_RCC_ClockConfig+0x244>)
 80074f6:	69db      	ldr	r3, [r3, #28]
 80074f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d908      	bls.n	8007512 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007500:	4b61      	ldr	r3, [pc, #388]	; (8007688 <HAL_RCC_ClockConfig+0x244>)
 8007502:	69db      	ldr	r3, [r3, #28]
 8007504:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	699b      	ldr	r3, [r3, #24]
 800750c:	495e      	ldr	r1, [pc, #376]	; (8007688 <HAL_RCC_ClockConfig+0x244>)
 800750e:	4313      	orrs	r3, r2
 8007510:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f003 0320 	and.w	r3, r3, #32
 800751a:	2b00      	cmp	r3, #0
 800751c:	d010      	beq.n	8007540 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	69da      	ldr	r2, [r3, #28]
 8007522:	4b59      	ldr	r3, [pc, #356]	; (8007688 <HAL_RCC_ClockConfig+0x244>)
 8007524:	6a1b      	ldr	r3, [r3, #32]
 8007526:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800752a:	429a      	cmp	r2, r3
 800752c:	d908      	bls.n	8007540 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800752e:	4b56      	ldr	r3, [pc, #344]	; (8007688 <HAL_RCC_ClockConfig+0x244>)
 8007530:	6a1b      	ldr	r3, [r3, #32]
 8007532:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	69db      	ldr	r3, [r3, #28]
 800753a:	4953      	ldr	r1, [pc, #332]	; (8007688 <HAL_RCC_ClockConfig+0x244>)
 800753c:	4313      	orrs	r3, r2
 800753e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 0302 	and.w	r3, r3, #2
 8007548:	2b00      	cmp	r3, #0
 800754a:	d010      	beq.n	800756e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	68da      	ldr	r2, [r3, #12]
 8007550:	4b4d      	ldr	r3, [pc, #308]	; (8007688 <HAL_RCC_ClockConfig+0x244>)
 8007552:	699b      	ldr	r3, [r3, #24]
 8007554:	f003 030f 	and.w	r3, r3, #15
 8007558:	429a      	cmp	r2, r3
 800755a:	d908      	bls.n	800756e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800755c:	4b4a      	ldr	r3, [pc, #296]	; (8007688 <HAL_RCC_ClockConfig+0x244>)
 800755e:	699b      	ldr	r3, [r3, #24]
 8007560:	f023 020f 	bic.w	r2, r3, #15
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	4947      	ldr	r1, [pc, #284]	; (8007688 <HAL_RCC_ClockConfig+0x244>)
 800756a:	4313      	orrs	r3, r2
 800756c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 0301 	and.w	r3, r3, #1
 8007576:	2b00      	cmp	r3, #0
 8007578:	d055      	beq.n	8007626 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800757a:	4b43      	ldr	r3, [pc, #268]	; (8007688 <HAL_RCC_ClockConfig+0x244>)
 800757c:	699b      	ldr	r3, [r3, #24]
 800757e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	4940      	ldr	r1, [pc, #256]	; (8007688 <HAL_RCC_ClockConfig+0x244>)
 8007588:	4313      	orrs	r3, r2
 800758a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	2b02      	cmp	r3, #2
 8007592:	d107      	bne.n	80075a4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007594:	4b3c      	ldr	r3, [pc, #240]	; (8007688 <HAL_RCC_ClockConfig+0x244>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800759c:	2b00      	cmp	r3, #0
 800759e:	d121      	bne.n	80075e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	e0f6      	b.n	8007792 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	2b03      	cmp	r3, #3
 80075aa:	d107      	bne.n	80075bc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80075ac:	4b36      	ldr	r3, [pc, #216]	; (8007688 <HAL_RCC_ClockConfig+0x244>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d115      	bne.n	80075e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	e0ea      	b.n	8007792 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d107      	bne.n	80075d4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80075c4:	4b30      	ldr	r3, [pc, #192]	; (8007688 <HAL_RCC_ClockConfig+0x244>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d109      	bne.n	80075e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	e0de      	b.n	8007792 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80075d4:	4b2c      	ldr	r3, [pc, #176]	; (8007688 <HAL_RCC_ClockConfig+0x244>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 0304 	and.w	r3, r3, #4
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d101      	bne.n	80075e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	e0d6      	b.n	8007792 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80075e4:	4b28      	ldr	r3, [pc, #160]	; (8007688 <HAL_RCC_ClockConfig+0x244>)
 80075e6:	691b      	ldr	r3, [r3, #16]
 80075e8:	f023 0207 	bic.w	r2, r3, #7
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	4925      	ldr	r1, [pc, #148]	; (8007688 <HAL_RCC_ClockConfig+0x244>)
 80075f2:	4313      	orrs	r3, r2
 80075f4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075f6:	f7fb f841 	bl	800267c <HAL_GetTick>
 80075fa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075fc:	e00a      	b.n	8007614 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075fe:	f7fb f83d 	bl	800267c <HAL_GetTick>
 8007602:	4602      	mov	r2, r0
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	f241 3288 	movw	r2, #5000	; 0x1388
 800760c:	4293      	cmp	r3, r2
 800760e:	d901      	bls.n	8007614 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007610:	2303      	movs	r3, #3
 8007612:	e0be      	b.n	8007792 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007614:	4b1c      	ldr	r3, [pc, #112]	; (8007688 <HAL_RCC_ClockConfig+0x244>)
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	00db      	lsls	r3, r3, #3
 8007622:	429a      	cmp	r2, r3
 8007624:	d1eb      	bne.n	80075fe <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 0302 	and.w	r3, r3, #2
 800762e:	2b00      	cmp	r3, #0
 8007630:	d010      	beq.n	8007654 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	68da      	ldr	r2, [r3, #12]
 8007636:	4b14      	ldr	r3, [pc, #80]	; (8007688 <HAL_RCC_ClockConfig+0x244>)
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	f003 030f 	and.w	r3, r3, #15
 800763e:	429a      	cmp	r2, r3
 8007640:	d208      	bcs.n	8007654 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007642:	4b11      	ldr	r3, [pc, #68]	; (8007688 <HAL_RCC_ClockConfig+0x244>)
 8007644:	699b      	ldr	r3, [r3, #24]
 8007646:	f023 020f 	bic.w	r2, r3, #15
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	490e      	ldr	r1, [pc, #56]	; (8007688 <HAL_RCC_ClockConfig+0x244>)
 8007650:	4313      	orrs	r3, r2
 8007652:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007654:	4b0b      	ldr	r3, [pc, #44]	; (8007684 <HAL_RCC_ClockConfig+0x240>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 030f 	and.w	r3, r3, #15
 800765c:	683a      	ldr	r2, [r7, #0]
 800765e:	429a      	cmp	r2, r3
 8007660:	d214      	bcs.n	800768c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007662:	4b08      	ldr	r3, [pc, #32]	; (8007684 <HAL_RCC_ClockConfig+0x240>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f023 020f 	bic.w	r2, r3, #15
 800766a:	4906      	ldr	r1, [pc, #24]	; (8007684 <HAL_RCC_ClockConfig+0x240>)
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	4313      	orrs	r3, r2
 8007670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007672:	4b04      	ldr	r3, [pc, #16]	; (8007684 <HAL_RCC_ClockConfig+0x240>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f003 030f 	and.w	r3, r3, #15
 800767a:	683a      	ldr	r2, [r7, #0]
 800767c:	429a      	cmp	r2, r3
 800767e:	d005      	beq.n	800768c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	e086      	b.n	8007792 <HAL_RCC_ClockConfig+0x34e>
 8007684:	52002000 	.word	0x52002000
 8007688:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f003 0304 	and.w	r3, r3, #4
 8007694:	2b00      	cmp	r3, #0
 8007696:	d010      	beq.n	80076ba <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	691a      	ldr	r2, [r3, #16]
 800769c:	4b3f      	ldr	r3, [pc, #252]	; (800779c <HAL_RCC_ClockConfig+0x358>)
 800769e:	699b      	ldr	r3, [r3, #24]
 80076a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d208      	bcs.n	80076ba <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80076a8:	4b3c      	ldr	r3, [pc, #240]	; (800779c <HAL_RCC_ClockConfig+0x358>)
 80076aa:	699b      	ldr	r3, [r3, #24]
 80076ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	691b      	ldr	r3, [r3, #16]
 80076b4:	4939      	ldr	r1, [pc, #228]	; (800779c <HAL_RCC_ClockConfig+0x358>)
 80076b6:	4313      	orrs	r3, r2
 80076b8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0308 	and.w	r3, r3, #8
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d010      	beq.n	80076e8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	695a      	ldr	r2, [r3, #20]
 80076ca:	4b34      	ldr	r3, [pc, #208]	; (800779c <HAL_RCC_ClockConfig+0x358>)
 80076cc:	69db      	ldr	r3, [r3, #28]
 80076ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d208      	bcs.n	80076e8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80076d6:	4b31      	ldr	r3, [pc, #196]	; (800779c <HAL_RCC_ClockConfig+0x358>)
 80076d8:	69db      	ldr	r3, [r3, #28]
 80076da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	695b      	ldr	r3, [r3, #20]
 80076e2:	492e      	ldr	r1, [pc, #184]	; (800779c <HAL_RCC_ClockConfig+0x358>)
 80076e4:	4313      	orrs	r3, r2
 80076e6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0310 	and.w	r3, r3, #16
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d010      	beq.n	8007716 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	699a      	ldr	r2, [r3, #24]
 80076f8:	4b28      	ldr	r3, [pc, #160]	; (800779c <HAL_RCC_ClockConfig+0x358>)
 80076fa:	69db      	ldr	r3, [r3, #28]
 80076fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007700:	429a      	cmp	r2, r3
 8007702:	d208      	bcs.n	8007716 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007704:	4b25      	ldr	r3, [pc, #148]	; (800779c <HAL_RCC_ClockConfig+0x358>)
 8007706:	69db      	ldr	r3, [r3, #28]
 8007708:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	699b      	ldr	r3, [r3, #24]
 8007710:	4922      	ldr	r1, [pc, #136]	; (800779c <HAL_RCC_ClockConfig+0x358>)
 8007712:	4313      	orrs	r3, r2
 8007714:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f003 0320 	and.w	r3, r3, #32
 800771e:	2b00      	cmp	r3, #0
 8007720:	d010      	beq.n	8007744 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	69da      	ldr	r2, [r3, #28]
 8007726:	4b1d      	ldr	r3, [pc, #116]	; (800779c <HAL_RCC_ClockConfig+0x358>)
 8007728:	6a1b      	ldr	r3, [r3, #32]
 800772a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800772e:	429a      	cmp	r2, r3
 8007730:	d208      	bcs.n	8007744 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007732:	4b1a      	ldr	r3, [pc, #104]	; (800779c <HAL_RCC_ClockConfig+0x358>)
 8007734:	6a1b      	ldr	r3, [r3, #32]
 8007736:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	69db      	ldr	r3, [r3, #28]
 800773e:	4917      	ldr	r1, [pc, #92]	; (800779c <HAL_RCC_ClockConfig+0x358>)
 8007740:	4313      	orrs	r3, r2
 8007742:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007744:	f000 f834 	bl	80077b0 <HAL_RCC_GetSysClockFreq>
 8007748:	4602      	mov	r2, r0
 800774a:	4b14      	ldr	r3, [pc, #80]	; (800779c <HAL_RCC_ClockConfig+0x358>)
 800774c:	699b      	ldr	r3, [r3, #24]
 800774e:	0a1b      	lsrs	r3, r3, #8
 8007750:	f003 030f 	and.w	r3, r3, #15
 8007754:	4912      	ldr	r1, [pc, #72]	; (80077a0 <HAL_RCC_ClockConfig+0x35c>)
 8007756:	5ccb      	ldrb	r3, [r1, r3]
 8007758:	f003 031f 	and.w	r3, r3, #31
 800775c:	fa22 f303 	lsr.w	r3, r2, r3
 8007760:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007762:	4b0e      	ldr	r3, [pc, #56]	; (800779c <HAL_RCC_ClockConfig+0x358>)
 8007764:	699b      	ldr	r3, [r3, #24]
 8007766:	f003 030f 	and.w	r3, r3, #15
 800776a:	4a0d      	ldr	r2, [pc, #52]	; (80077a0 <HAL_RCC_ClockConfig+0x35c>)
 800776c:	5cd3      	ldrb	r3, [r2, r3]
 800776e:	f003 031f 	and.w	r3, r3, #31
 8007772:	693a      	ldr	r2, [r7, #16]
 8007774:	fa22 f303 	lsr.w	r3, r2, r3
 8007778:	4a0a      	ldr	r2, [pc, #40]	; (80077a4 <HAL_RCC_ClockConfig+0x360>)
 800777a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800777c:	4a0a      	ldr	r2, [pc, #40]	; (80077a8 <HAL_RCC_ClockConfig+0x364>)
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007782:	4b0a      	ldr	r3, [pc, #40]	; (80077ac <HAL_RCC_ClockConfig+0x368>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4618      	mov	r0, r3
 8007788:	f7fa ff2e 	bl	80025e8 <HAL_InitTick>
 800778c:	4603      	mov	r3, r0
 800778e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007790:	7bfb      	ldrb	r3, [r7, #15]
}
 8007792:	4618      	mov	r0, r3
 8007794:	3718      	adds	r7, #24
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	58024400 	.word	0x58024400
 80077a0:	0800ff50 	.word	0x0800ff50
 80077a4:	24000004 	.word	0x24000004
 80077a8:	24000000 	.word	0x24000000
 80077ac:	24000008 	.word	0x24000008

080077b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b089      	sub	sp, #36	; 0x24
 80077b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80077b6:	4bb3      	ldr	r3, [pc, #716]	; (8007a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077be:	2b18      	cmp	r3, #24
 80077c0:	f200 8155 	bhi.w	8007a6e <HAL_RCC_GetSysClockFreq+0x2be>
 80077c4:	a201      	add	r2, pc, #4	; (adr r2, 80077cc <HAL_RCC_GetSysClockFreq+0x1c>)
 80077c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ca:	bf00      	nop
 80077cc:	08007831 	.word	0x08007831
 80077d0:	08007a6f 	.word	0x08007a6f
 80077d4:	08007a6f 	.word	0x08007a6f
 80077d8:	08007a6f 	.word	0x08007a6f
 80077dc:	08007a6f 	.word	0x08007a6f
 80077e0:	08007a6f 	.word	0x08007a6f
 80077e4:	08007a6f 	.word	0x08007a6f
 80077e8:	08007a6f 	.word	0x08007a6f
 80077ec:	08007857 	.word	0x08007857
 80077f0:	08007a6f 	.word	0x08007a6f
 80077f4:	08007a6f 	.word	0x08007a6f
 80077f8:	08007a6f 	.word	0x08007a6f
 80077fc:	08007a6f 	.word	0x08007a6f
 8007800:	08007a6f 	.word	0x08007a6f
 8007804:	08007a6f 	.word	0x08007a6f
 8007808:	08007a6f 	.word	0x08007a6f
 800780c:	0800785d 	.word	0x0800785d
 8007810:	08007a6f 	.word	0x08007a6f
 8007814:	08007a6f 	.word	0x08007a6f
 8007818:	08007a6f 	.word	0x08007a6f
 800781c:	08007a6f 	.word	0x08007a6f
 8007820:	08007a6f 	.word	0x08007a6f
 8007824:	08007a6f 	.word	0x08007a6f
 8007828:	08007a6f 	.word	0x08007a6f
 800782c:	08007863 	.word	0x08007863
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007830:	4b94      	ldr	r3, [pc, #592]	; (8007a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 0320 	and.w	r3, r3, #32
 8007838:	2b00      	cmp	r3, #0
 800783a:	d009      	beq.n	8007850 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800783c:	4b91      	ldr	r3, [pc, #580]	; (8007a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	08db      	lsrs	r3, r3, #3
 8007842:	f003 0303 	and.w	r3, r3, #3
 8007846:	4a90      	ldr	r2, [pc, #576]	; (8007a88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007848:	fa22 f303 	lsr.w	r3, r2, r3
 800784c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800784e:	e111      	b.n	8007a74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007850:	4b8d      	ldr	r3, [pc, #564]	; (8007a88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007852:	61bb      	str	r3, [r7, #24]
    break;
 8007854:	e10e      	b.n	8007a74 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007856:	4b8d      	ldr	r3, [pc, #564]	; (8007a8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007858:	61bb      	str	r3, [r7, #24]
    break;
 800785a:	e10b      	b.n	8007a74 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800785c:	4b8c      	ldr	r3, [pc, #560]	; (8007a90 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800785e:	61bb      	str	r3, [r7, #24]
    break;
 8007860:	e108      	b.n	8007a74 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007862:	4b88      	ldr	r3, [pc, #544]	; (8007a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007866:	f003 0303 	and.w	r3, r3, #3
 800786a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800786c:	4b85      	ldr	r3, [pc, #532]	; (8007a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800786e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007870:	091b      	lsrs	r3, r3, #4
 8007872:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007876:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007878:	4b82      	ldr	r3, [pc, #520]	; (8007a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800787a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800787c:	f003 0301 	and.w	r3, r3, #1
 8007880:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007882:	4b80      	ldr	r3, [pc, #512]	; (8007a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007886:	08db      	lsrs	r3, r3, #3
 8007888:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	fb02 f303 	mul.w	r3, r2, r3
 8007892:	ee07 3a90 	vmov	s15, r3
 8007896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800789a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	f000 80e1 	beq.w	8007a68 <HAL_RCC_GetSysClockFreq+0x2b8>
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	f000 8083 	beq.w	80079b4 <HAL_RCC_GetSysClockFreq+0x204>
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	2b02      	cmp	r3, #2
 80078b2:	f200 80a1 	bhi.w	80079f8 <HAL_RCC_GetSysClockFreq+0x248>
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d003      	beq.n	80078c4 <HAL_RCC_GetSysClockFreq+0x114>
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d056      	beq.n	8007970 <HAL_RCC_GetSysClockFreq+0x1c0>
 80078c2:	e099      	b.n	80079f8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078c4:	4b6f      	ldr	r3, [pc, #444]	; (8007a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 0320 	and.w	r3, r3, #32
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d02d      	beq.n	800792c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80078d0:	4b6c      	ldr	r3, [pc, #432]	; (8007a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	08db      	lsrs	r3, r3, #3
 80078d6:	f003 0303 	and.w	r3, r3, #3
 80078da:	4a6b      	ldr	r2, [pc, #428]	; (8007a88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80078dc:	fa22 f303 	lsr.w	r3, r2, r3
 80078e0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	ee07 3a90 	vmov	s15, r3
 80078e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	ee07 3a90 	vmov	s15, r3
 80078f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078fa:	4b62      	ldr	r3, [pc, #392]	; (8007a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007902:	ee07 3a90 	vmov	s15, r3
 8007906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800790a:	ed97 6a02 	vldr	s12, [r7, #8]
 800790e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007a94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800791a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800791e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007926:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800792a:	e087      	b.n	8007a3c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	ee07 3a90 	vmov	s15, r3
 8007932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007936:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007a98 <HAL_RCC_GetSysClockFreq+0x2e8>
 800793a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800793e:	4b51      	ldr	r3, [pc, #324]	; (8007a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007946:	ee07 3a90 	vmov	s15, r3
 800794a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800794e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007952:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007a94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800795a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800795e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800796a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800796e:	e065      	b.n	8007a3c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	ee07 3a90 	vmov	s15, r3
 8007976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800797a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007a9c <HAL_RCC_GetSysClockFreq+0x2ec>
 800797e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007982:	4b40      	ldr	r3, [pc, #256]	; (8007a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800798a:	ee07 3a90 	vmov	s15, r3
 800798e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007992:	ed97 6a02 	vldr	s12, [r7, #8]
 8007996:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007a94 <HAL_RCC_GetSysClockFreq+0x2e4>
 800799a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800799e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079b2:	e043      	b.n	8007a3c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	ee07 3a90 	vmov	s15, r3
 80079ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079be:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007aa0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80079c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079c6:	4b2f      	ldr	r3, [pc, #188]	; (8007a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ce:	ee07 3a90 	vmov	s15, r3
 80079d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80079da:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007a94 <HAL_RCC_GetSysClockFreq+0x2e4>
 80079de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079f6:	e021      	b.n	8007a3c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	ee07 3a90 	vmov	s15, r3
 80079fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a02:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007a9c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a0a:	4b1e      	ldr	r3, [pc, #120]	; (8007a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a12:	ee07 3a90 	vmov	s15, r3
 8007a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a1e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007a94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a3a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007a3c:	4b11      	ldr	r3, [pc, #68]	; (8007a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a40:	0a5b      	lsrs	r3, r3, #9
 8007a42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a46:	3301      	adds	r3, #1
 8007a48:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	ee07 3a90 	vmov	s15, r3
 8007a50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007a54:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a60:	ee17 3a90 	vmov	r3, s15
 8007a64:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007a66:	e005      	b.n	8007a74 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	61bb      	str	r3, [r7, #24]
    break;
 8007a6c:	e002      	b.n	8007a74 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007a6e:	4b07      	ldr	r3, [pc, #28]	; (8007a8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007a70:	61bb      	str	r3, [r7, #24]
    break;
 8007a72:	bf00      	nop
  }

  return sysclockfreq;
 8007a74:	69bb      	ldr	r3, [r7, #24]
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3724      	adds	r7, #36	; 0x24
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr
 8007a82:	bf00      	nop
 8007a84:	58024400 	.word	0x58024400
 8007a88:	03d09000 	.word	0x03d09000
 8007a8c:	003d0900 	.word	0x003d0900
 8007a90:	017d7840 	.word	0x017d7840
 8007a94:	46000000 	.word	0x46000000
 8007a98:	4c742400 	.word	0x4c742400
 8007a9c:	4a742400 	.word	0x4a742400
 8007aa0:	4bbebc20 	.word	0x4bbebc20

08007aa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007aaa:	f7ff fe81 	bl	80077b0 <HAL_RCC_GetSysClockFreq>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	4b10      	ldr	r3, [pc, #64]	; (8007af4 <HAL_RCC_GetHCLKFreq+0x50>)
 8007ab2:	699b      	ldr	r3, [r3, #24]
 8007ab4:	0a1b      	lsrs	r3, r3, #8
 8007ab6:	f003 030f 	and.w	r3, r3, #15
 8007aba:	490f      	ldr	r1, [pc, #60]	; (8007af8 <HAL_RCC_GetHCLKFreq+0x54>)
 8007abc:	5ccb      	ldrb	r3, [r1, r3]
 8007abe:	f003 031f 	and.w	r3, r3, #31
 8007ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ac6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007ac8:	4b0a      	ldr	r3, [pc, #40]	; (8007af4 <HAL_RCC_GetHCLKFreq+0x50>)
 8007aca:	699b      	ldr	r3, [r3, #24]
 8007acc:	f003 030f 	and.w	r3, r3, #15
 8007ad0:	4a09      	ldr	r2, [pc, #36]	; (8007af8 <HAL_RCC_GetHCLKFreq+0x54>)
 8007ad2:	5cd3      	ldrb	r3, [r2, r3]
 8007ad4:	f003 031f 	and.w	r3, r3, #31
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	fa22 f303 	lsr.w	r3, r2, r3
 8007ade:	4a07      	ldr	r2, [pc, #28]	; (8007afc <HAL_RCC_GetHCLKFreq+0x58>)
 8007ae0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007ae2:	4a07      	ldr	r2, [pc, #28]	; (8007b00 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007ae8:	4b04      	ldr	r3, [pc, #16]	; (8007afc <HAL_RCC_GetHCLKFreq+0x58>)
 8007aea:	681b      	ldr	r3, [r3, #0]
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3708      	adds	r7, #8
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	58024400 	.word	0x58024400
 8007af8:	0800ff50 	.word	0x0800ff50
 8007afc:	24000004 	.word	0x24000004
 8007b00:	24000000 	.word	0x24000000

08007b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007b08:	f7ff ffcc 	bl	8007aa4 <HAL_RCC_GetHCLKFreq>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	4b06      	ldr	r3, [pc, #24]	; (8007b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b10:	69db      	ldr	r3, [r3, #28]
 8007b12:	091b      	lsrs	r3, r3, #4
 8007b14:	f003 0307 	and.w	r3, r3, #7
 8007b18:	4904      	ldr	r1, [pc, #16]	; (8007b2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8007b1a:	5ccb      	ldrb	r3, [r1, r3]
 8007b1c:	f003 031f 	and.w	r3, r3, #31
 8007b20:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	58024400 	.word	0x58024400
 8007b2c:	0800ff50 	.word	0x0800ff50

08007b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007b34:	f7ff ffb6 	bl	8007aa4 <HAL_RCC_GetHCLKFreq>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	4b06      	ldr	r3, [pc, #24]	; (8007b54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b3c:	69db      	ldr	r3, [r3, #28]
 8007b3e:	0a1b      	lsrs	r3, r3, #8
 8007b40:	f003 0307 	and.w	r3, r3, #7
 8007b44:	4904      	ldr	r1, [pc, #16]	; (8007b58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007b46:	5ccb      	ldrb	r3, [r1, r3]
 8007b48:	f003 031f 	and.w	r3, r3, #31
 8007b4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	58024400 	.word	0x58024400
 8007b58:	0800ff50 	.word	0x0800ff50

08007b5c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b086      	sub	sp, #24
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007b64:	2300      	movs	r3, #0
 8007b66:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007b68:	2300      	movs	r3, #0
 8007b6a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d03f      	beq.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b80:	d02a      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007b82:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b86:	d824      	bhi.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007b88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b8c:	d018      	beq.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007b8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b92:	d81e      	bhi.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d003      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007b98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b9c:	d007      	beq.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007b9e:	e018      	b.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ba0:	4bab      	ldr	r3, [pc, #684]	; (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba4:	4aaa      	ldr	r2, [pc, #680]	; (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ba6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007baa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007bac:	e015      	b.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	3304      	adds	r3, #4
 8007bb2:	2102      	movs	r1, #2
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f001 fff3 	bl	8009ba0 <RCCEx_PLL2_Config>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007bbe:	e00c      	b.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	3324      	adds	r3, #36	; 0x24
 8007bc4:	2102      	movs	r1, #2
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f002 f89c 	bl	8009d04 <RCCEx_PLL3_Config>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007bd0:	e003      	b.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	75fb      	strb	r3, [r7, #23]
      break;
 8007bd6:	e000      	b.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007bd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bda:	7dfb      	ldrb	r3, [r7, #23]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d109      	bne.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007be0:	4b9b      	ldr	r3, [pc, #620]	; (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007be4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bec:	4998      	ldr	r1, [pc, #608]	; (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	650b      	str	r3, [r1, #80]	; 0x50
 8007bf2:	e001      	b.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bf4:	7dfb      	ldrb	r3, [r7, #23]
 8007bf6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d03d      	beq.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c08:	2b04      	cmp	r3, #4
 8007c0a:	d826      	bhi.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007c0c:	a201      	add	r2, pc, #4	; (adr r2, 8007c14 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c12:	bf00      	nop
 8007c14:	08007c29 	.word	0x08007c29
 8007c18:	08007c37 	.word	0x08007c37
 8007c1c:	08007c49 	.word	0x08007c49
 8007c20:	08007c61 	.word	0x08007c61
 8007c24:	08007c61 	.word	0x08007c61
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c28:	4b89      	ldr	r3, [pc, #548]	; (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2c:	4a88      	ldr	r2, [pc, #544]	; (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007c34:	e015      	b.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	3304      	adds	r3, #4
 8007c3a:	2100      	movs	r1, #0
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f001 ffaf 	bl	8009ba0 <RCCEx_PLL2_Config>
 8007c42:	4603      	mov	r3, r0
 8007c44:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007c46:	e00c      	b.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	3324      	adds	r3, #36	; 0x24
 8007c4c:	2100      	movs	r1, #0
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f002 f858 	bl	8009d04 <RCCEx_PLL3_Config>
 8007c54:	4603      	mov	r3, r0
 8007c56:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007c58:	e003      	b.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	75fb      	strb	r3, [r7, #23]
      break;
 8007c5e:	e000      	b.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007c60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c62:	7dfb      	ldrb	r3, [r7, #23]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d109      	bne.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c68:	4b79      	ldr	r3, [pc, #484]	; (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c6c:	f023 0207 	bic.w	r2, r3, #7
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c74:	4976      	ldr	r1, [pc, #472]	; (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c76:	4313      	orrs	r3, r2
 8007c78:	650b      	str	r3, [r1, #80]	; 0x50
 8007c7a:	e001      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c7c:	7dfb      	ldrb	r3, [r7, #23]
 8007c7e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d042      	beq.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c94:	d02b      	beq.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007c96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c9a:	d825      	bhi.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007c9c:	2bc0      	cmp	r3, #192	; 0xc0
 8007c9e:	d028      	beq.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007ca0:	2bc0      	cmp	r3, #192	; 0xc0
 8007ca2:	d821      	bhi.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007ca4:	2b80      	cmp	r3, #128	; 0x80
 8007ca6:	d016      	beq.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007ca8:	2b80      	cmp	r3, #128	; 0x80
 8007caa:	d81d      	bhi.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d002      	beq.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007cb0:	2b40      	cmp	r3, #64	; 0x40
 8007cb2:	d007      	beq.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007cb4:	e018      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cb6:	4b66      	ldr	r3, [pc, #408]	; (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cba:	4a65      	ldr	r2, [pc, #404]	; (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cc0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007cc2:	e017      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	3304      	adds	r3, #4
 8007cc8:	2100      	movs	r1, #0
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f001 ff68 	bl	8009ba0 <RCCEx_PLL2_Config>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007cd4:	e00e      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	3324      	adds	r3, #36	; 0x24
 8007cda:	2100      	movs	r1, #0
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f002 f811 	bl	8009d04 <RCCEx_PLL3_Config>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007ce6:	e005      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	75fb      	strb	r3, [r7, #23]
      break;
 8007cec:	e002      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007cee:	bf00      	nop
 8007cf0:	e000      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007cf2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cf4:	7dfb      	ldrb	r3, [r7, #23]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d109      	bne.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007cfa:	4b55      	ldr	r3, [pc, #340]	; (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cfe:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d06:	4952      	ldr	r1, [pc, #328]	; (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	650b      	str	r3, [r1, #80]	; 0x50
 8007d0c:	e001      	b.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d0e:	7dfb      	ldrb	r3, [r7, #23]
 8007d10:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d049      	beq.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007d24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007d28:	d030      	beq.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007d2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007d2e:	d82a      	bhi.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007d30:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007d34:	d02c      	beq.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007d36:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007d3a:	d824      	bhi.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007d3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d40:	d018      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007d42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d46:	d81e      	bhi.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d003      	beq.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007d4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d50:	d007      	beq.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007d52:	e018      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d54:	4b3e      	ldr	r3, [pc, #248]	; (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d58:	4a3d      	ldr	r2, [pc, #244]	; (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007d60:	e017      	b.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	3304      	adds	r3, #4
 8007d66:	2100      	movs	r1, #0
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f001 ff19 	bl	8009ba0 <RCCEx_PLL2_Config>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007d72:	e00e      	b.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	3324      	adds	r3, #36	; 0x24
 8007d78:	2100      	movs	r1, #0
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f001 ffc2 	bl	8009d04 <RCCEx_PLL3_Config>
 8007d80:	4603      	mov	r3, r0
 8007d82:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007d84:	e005      	b.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	75fb      	strb	r3, [r7, #23]
      break;
 8007d8a:	e002      	b.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007d8c:	bf00      	nop
 8007d8e:	e000      	b.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007d90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d92:	7dfb      	ldrb	r3, [r7, #23]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d10a      	bne.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007d98:	4b2d      	ldr	r3, [pc, #180]	; (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d9c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007da6:	492a      	ldr	r1, [pc, #168]	; (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007da8:	4313      	orrs	r3, r2
 8007daa:	658b      	str	r3, [r1, #88]	; 0x58
 8007dac:	e001      	b.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dae:	7dfb      	ldrb	r3, [r7, #23]
 8007db0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d04c      	beq.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007dc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007dc8:	d030      	beq.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007dca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007dce:	d82a      	bhi.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007dd0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007dd4:	d02c      	beq.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007dd6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007dda:	d824      	bhi.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007ddc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007de0:	d018      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007de2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007de6:	d81e      	bhi.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d003      	beq.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007dec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007df0:	d007      	beq.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007df2:	e018      	b.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007df4:	4b16      	ldr	r3, [pc, #88]	; (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df8:	4a15      	ldr	r2, [pc, #84]	; (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007dfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dfe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e00:	e017      	b.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	3304      	adds	r3, #4
 8007e06:	2100      	movs	r1, #0
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f001 fec9 	bl	8009ba0 <RCCEx_PLL2_Config>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007e12:	e00e      	b.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	3324      	adds	r3, #36	; 0x24
 8007e18:	2100      	movs	r1, #0
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f001 ff72 	bl	8009d04 <RCCEx_PLL3_Config>
 8007e20:	4603      	mov	r3, r0
 8007e22:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e24:	e005      	b.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	75fb      	strb	r3, [r7, #23]
      break;
 8007e2a:	e002      	b.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007e2c:	bf00      	nop
 8007e2e:	e000      	b.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007e30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e32:	7dfb      	ldrb	r3, [r7, #23]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d10d      	bne.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007e38:	4b05      	ldr	r3, [pc, #20]	; (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e3c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007e46:	4902      	ldr	r1, [pc, #8]	; (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	658b      	str	r3, [r1, #88]	; 0x58
 8007e4c:	e004      	b.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007e4e:	bf00      	nop
 8007e50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e54:	7dfb      	ldrb	r3, [r7, #23]
 8007e56:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d032      	beq.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e68:	2b30      	cmp	r3, #48	; 0x30
 8007e6a:	d01c      	beq.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007e6c:	2b30      	cmp	r3, #48	; 0x30
 8007e6e:	d817      	bhi.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007e70:	2b20      	cmp	r3, #32
 8007e72:	d00c      	beq.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007e74:	2b20      	cmp	r3, #32
 8007e76:	d813      	bhi.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d016      	beq.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007e7c:	2b10      	cmp	r3, #16
 8007e7e:	d10f      	bne.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e80:	4baf      	ldr	r3, [pc, #700]	; (8008140 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e84:	4aae      	ldr	r2, [pc, #696]	; (8008140 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007e86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007e8c:	e00e      	b.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	3304      	adds	r3, #4
 8007e92:	2102      	movs	r1, #2
 8007e94:	4618      	mov	r0, r3
 8007e96:	f001 fe83 	bl	8009ba0 <RCCEx_PLL2_Config>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007e9e:	e005      	b.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ea4:	e002      	b.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007ea6:	bf00      	nop
 8007ea8:	e000      	b.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007eaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007eac:	7dfb      	ldrb	r3, [r7, #23]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d109      	bne.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007eb2:	4ba3      	ldr	r3, [pc, #652]	; (8008140 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eb6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ebe:	49a0      	ldr	r1, [pc, #640]	; (8008140 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007ec4:	e001      	b.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ec6:	7dfb      	ldrb	r3, [r7, #23]
 8007ec8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d047      	beq.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ede:	d030      	beq.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007ee0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ee4:	d82a      	bhi.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007ee6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007eea:	d02c      	beq.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8007eec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ef0:	d824      	bhi.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007ef2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ef6:	d018      	beq.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007ef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007efc:	d81e      	bhi.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d003      	beq.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8007f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f06:	d007      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007f08:	e018      	b.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f0a:	4b8d      	ldr	r3, [pc, #564]	; (8008140 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f0e:	4a8c      	ldr	r2, [pc, #560]	; (8008140 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007f16:	e017      	b.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	3304      	adds	r3, #4
 8007f1c:	2100      	movs	r1, #0
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f001 fe3e 	bl	8009ba0 <RCCEx_PLL2_Config>
 8007f24:	4603      	mov	r3, r0
 8007f26:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007f28:	e00e      	b.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	3324      	adds	r3, #36	; 0x24
 8007f2e:	2100      	movs	r1, #0
 8007f30:	4618      	mov	r0, r3
 8007f32:	f001 fee7 	bl	8009d04 <RCCEx_PLL3_Config>
 8007f36:	4603      	mov	r3, r0
 8007f38:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007f3a:	e005      	b.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	75fb      	strb	r3, [r7, #23]
      break;
 8007f40:	e002      	b.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007f42:	bf00      	nop
 8007f44:	e000      	b.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007f46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f48:	7dfb      	ldrb	r3, [r7, #23]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d109      	bne.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007f4e:	4b7c      	ldr	r3, [pc, #496]	; (8008140 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f52:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f5a:	4979      	ldr	r1, [pc, #484]	; (8008140 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	650b      	str	r3, [r1, #80]	; 0x50
 8007f60:	e001      	b.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f62:	7dfb      	ldrb	r3, [r7, #23]
 8007f64:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d049      	beq.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f7a:	d02e      	beq.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007f7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f80:	d828      	bhi.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007f82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007f86:	d02a      	beq.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x482>
 8007f88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007f8c:	d822      	bhi.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007f8e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007f92:	d026      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8007f94:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007f98:	d81c      	bhi.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007f9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f9e:	d010      	beq.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007fa0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fa4:	d816      	bhi.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d01d      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8007faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fae:	d111      	bne.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	3304      	adds	r3, #4
 8007fb4:	2101      	movs	r1, #1
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f001 fdf2 	bl	8009ba0 <RCCEx_PLL2_Config>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007fc0:	e012      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	3324      	adds	r3, #36	; 0x24
 8007fc6:	2101      	movs	r1, #1
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f001 fe9b 	bl	8009d04 <RCCEx_PLL3_Config>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007fd2:	e009      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	75fb      	strb	r3, [r7, #23]
      break;
 8007fd8:	e006      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007fda:	bf00      	nop
 8007fdc:	e004      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007fde:	bf00      	nop
 8007fe0:	e002      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007fe2:	bf00      	nop
 8007fe4:	e000      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007fe6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fe8:	7dfb      	ldrb	r3, [r7, #23]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d109      	bne.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007fee:	4b54      	ldr	r3, [pc, #336]	; (8008140 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ff2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ffa:	4951      	ldr	r1, [pc, #324]	; (8008140 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	650b      	str	r3, [r1, #80]	; 0x50
 8008000:	e001      	b.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008002:	7dfb      	ldrb	r3, [r7, #23]
 8008004:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800800e:	2b00      	cmp	r3, #0
 8008010:	d04b      	beq.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008018:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800801c:	d02e      	beq.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x520>
 800801e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008022:	d828      	bhi.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008028:	d02a      	beq.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800802a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800802e:	d822      	bhi.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008030:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008034:	d026      	beq.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8008036:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800803a:	d81c      	bhi.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800803c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008040:	d010      	beq.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8008042:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008046:	d816      	bhi.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008048:	2b00      	cmp	r3, #0
 800804a:	d01d      	beq.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800804c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008050:	d111      	bne.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	3304      	adds	r3, #4
 8008056:	2101      	movs	r1, #1
 8008058:	4618      	mov	r0, r3
 800805a:	f001 fda1 	bl	8009ba0 <RCCEx_PLL2_Config>
 800805e:	4603      	mov	r3, r0
 8008060:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008062:	e012      	b.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	3324      	adds	r3, #36	; 0x24
 8008068:	2101      	movs	r1, #1
 800806a:	4618      	mov	r0, r3
 800806c:	f001 fe4a 	bl	8009d04 <RCCEx_PLL3_Config>
 8008070:	4603      	mov	r3, r0
 8008072:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008074:	e009      	b.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008076:	2301      	movs	r3, #1
 8008078:	75fb      	strb	r3, [r7, #23]
      break;
 800807a:	e006      	b.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800807c:	bf00      	nop
 800807e:	e004      	b.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008080:	bf00      	nop
 8008082:	e002      	b.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008084:	bf00      	nop
 8008086:	e000      	b.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008088:	bf00      	nop
    }

    if(ret == HAL_OK)
 800808a:	7dfb      	ldrb	r3, [r7, #23]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d10a      	bne.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008090:	4b2b      	ldr	r3, [pc, #172]	; (8008140 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008094:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800809e:	4928      	ldr	r1, [pc, #160]	; (8008140 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80080a0:	4313      	orrs	r3, r2
 80080a2:	658b      	str	r3, [r1, #88]	; 0x58
 80080a4:	e001      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080a6:	7dfb      	ldrb	r3, [r7, #23]
 80080a8:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d02f      	beq.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080be:	d00e      	beq.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x582>
 80080c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080c4:	d814      	bhi.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d015      	beq.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80080ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080ce:	d10f      	bne.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080d0:	4b1b      	ldr	r3, [pc, #108]	; (8008140 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80080d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d4:	4a1a      	ldr	r2, [pc, #104]	; (8008140 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80080d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80080dc:	e00c      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	3304      	adds	r3, #4
 80080e2:	2101      	movs	r1, #1
 80080e4:	4618      	mov	r0, r3
 80080e6:	f001 fd5b 	bl	8009ba0 <RCCEx_PLL2_Config>
 80080ea:	4603      	mov	r3, r0
 80080ec:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80080ee:	e003      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	75fb      	strb	r3, [r7, #23]
      break;
 80080f4:	e000      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80080f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080f8:	7dfb      	ldrb	r3, [r7, #23]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d109      	bne.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80080fe:	4b10      	ldr	r3, [pc, #64]	; (8008140 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008102:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800810a:	490d      	ldr	r1, [pc, #52]	; (8008140 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800810c:	4313      	orrs	r3, r2
 800810e:	650b      	str	r3, [r1, #80]	; 0x50
 8008110:	e001      	b.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008112:	7dfb      	ldrb	r3, [r7, #23]
 8008114:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800811e:	2b00      	cmp	r3, #0
 8008120:	d033      	beq.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008126:	2b03      	cmp	r3, #3
 8008128:	d81c      	bhi.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800812a:	a201      	add	r2, pc, #4	; (adr r2, 8008130 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800812c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008130:	0800816b 	.word	0x0800816b
 8008134:	08008145 	.word	0x08008145
 8008138:	08008153 	.word	0x08008153
 800813c:	0800816b 	.word	0x0800816b
 8008140:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008144:	4bb8      	ldr	r3, [pc, #736]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008148:	4ab7      	ldr	r2, [pc, #732]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800814a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800814e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008150:	e00c      	b.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	3304      	adds	r3, #4
 8008156:	2102      	movs	r1, #2
 8008158:	4618      	mov	r0, r3
 800815a:	f001 fd21 	bl	8009ba0 <RCCEx_PLL2_Config>
 800815e:	4603      	mov	r3, r0
 8008160:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008162:	e003      	b.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	75fb      	strb	r3, [r7, #23]
      break;
 8008168:	e000      	b.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800816a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800816c:	7dfb      	ldrb	r3, [r7, #23]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d109      	bne.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008172:	4bad      	ldr	r3, [pc, #692]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008176:	f023 0203 	bic.w	r2, r3, #3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800817e:	49aa      	ldr	r1, [pc, #680]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008180:	4313      	orrs	r3, r2
 8008182:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008184:	e001      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008186:	7dfb      	ldrb	r3, [r7, #23]
 8008188:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008192:	2b00      	cmp	r3, #0
 8008194:	f000 8086 	beq.w	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008198:	4ba4      	ldr	r3, [pc, #656]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4aa3      	ldr	r2, [pc, #652]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800819e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80081a4:	f7fa fa6a 	bl	800267c <HAL_GetTick>
 80081a8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081aa:	e009      	b.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081ac:	f7fa fa66 	bl	800267c <HAL_GetTick>
 80081b0:	4602      	mov	r2, r0
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	1ad3      	subs	r3, r2, r3
 80081b6:	2b64      	cmp	r3, #100	; 0x64
 80081b8:	d902      	bls.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80081ba:	2303      	movs	r3, #3
 80081bc:	75fb      	strb	r3, [r7, #23]
        break;
 80081be:	e005      	b.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081c0:	4b9a      	ldr	r3, [pc, #616]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d0ef      	beq.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80081cc:	7dfb      	ldrb	r3, [r7, #23]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d166      	bne.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80081d2:	4b95      	ldr	r3, [pc, #596]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80081dc:	4053      	eors	r3, r2
 80081de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d013      	beq.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80081e6:	4b90      	ldr	r3, [pc, #576]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081ee:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80081f0:	4b8d      	ldr	r3, [pc, #564]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081f4:	4a8c      	ldr	r2, [pc, #560]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081fa:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80081fc:	4b8a      	ldr	r3, [pc, #552]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008200:	4a89      	ldr	r2, [pc, #548]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008206:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008208:	4a87      	ldr	r2, [pc, #540]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008214:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008218:	d115      	bne.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800821a:	f7fa fa2f 	bl	800267c <HAL_GetTick>
 800821e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008220:	e00b      	b.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008222:	f7fa fa2b 	bl	800267c <HAL_GetTick>
 8008226:	4602      	mov	r2, r0
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	1ad3      	subs	r3, r2, r3
 800822c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008230:	4293      	cmp	r3, r2
 8008232:	d902      	bls.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008234:	2303      	movs	r3, #3
 8008236:	75fb      	strb	r3, [r7, #23]
            break;
 8008238:	e005      	b.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800823a:	4b7b      	ldr	r3, [pc, #492]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800823c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800823e:	f003 0302 	and.w	r3, r3, #2
 8008242:	2b00      	cmp	r3, #0
 8008244:	d0ed      	beq.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8008246:	7dfb      	ldrb	r3, [r7, #23]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d126      	bne.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008256:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800825a:	d10d      	bne.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800825c:	4b72      	ldr	r3, [pc, #456]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800825e:	691b      	ldr	r3, [r3, #16]
 8008260:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800826a:	0919      	lsrs	r1, r3, #4
 800826c:	4b70      	ldr	r3, [pc, #448]	; (8008430 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800826e:	400b      	ands	r3, r1
 8008270:	496d      	ldr	r1, [pc, #436]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008272:	4313      	orrs	r3, r2
 8008274:	610b      	str	r3, [r1, #16]
 8008276:	e005      	b.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008278:	4b6b      	ldr	r3, [pc, #428]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	4a6a      	ldr	r2, [pc, #424]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800827e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008282:	6113      	str	r3, [r2, #16]
 8008284:	4b68      	ldr	r3, [pc, #416]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008286:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800828e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008292:	4965      	ldr	r1, [pc, #404]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008294:	4313      	orrs	r3, r2
 8008296:	670b      	str	r3, [r1, #112]	; 0x70
 8008298:	e004      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800829a:	7dfb      	ldrb	r3, [r7, #23]
 800829c:	75bb      	strb	r3, [r7, #22]
 800829e:	e001      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082a0:	7dfb      	ldrb	r3, [r7, #23]
 80082a2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f003 0301 	and.w	r3, r3, #1
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d07e      	beq.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082b4:	2b28      	cmp	r3, #40	; 0x28
 80082b6:	d867      	bhi.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80082b8:	a201      	add	r2, pc, #4	; (adr r2, 80082c0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80082ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082be:	bf00      	nop
 80082c0:	0800838f 	.word	0x0800838f
 80082c4:	08008389 	.word	0x08008389
 80082c8:	08008389 	.word	0x08008389
 80082cc:	08008389 	.word	0x08008389
 80082d0:	08008389 	.word	0x08008389
 80082d4:	08008389 	.word	0x08008389
 80082d8:	08008389 	.word	0x08008389
 80082dc:	08008389 	.word	0x08008389
 80082e0:	08008365 	.word	0x08008365
 80082e4:	08008389 	.word	0x08008389
 80082e8:	08008389 	.word	0x08008389
 80082ec:	08008389 	.word	0x08008389
 80082f0:	08008389 	.word	0x08008389
 80082f4:	08008389 	.word	0x08008389
 80082f8:	08008389 	.word	0x08008389
 80082fc:	08008389 	.word	0x08008389
 8008300:	08008377 	.word	0x08008377
 8008304:	08008389 	.word	0x08008389
 8008308:	08008389 	.word	0x08008389
 800830c:	08008389 	.word	0x08008389
 8008310:	08008389 	.word	0x08008389
 8008314:	08008389 	.word	0x08008389
 8008318:	08008389 	.word	0x08008389
 800831c:	08008389 	.word	0x08008389
 8008320:	0800838f 	.word	0x0800838f
 8008324:	08008389 	.word	0x08008389
 8008328:	08008389 	.word	0x08008389
 800832c:	08008389 	.word	0x08008389
 8008330:	08008389 	.word	0x08008389
 8008334:	08008389 	.word	0x08008389
 8008338:	08008389 	.word	0x08008389
 800833c:	08008389 	.word	0x08008389
 8008340:	0800838f 	.word	0x0800838f
 8008344:	08008389 	.word	0x08008389
 8008348:	08008389 	.word	0x08008389
 800834c:	08008389 	.word	0x08008389
 8008350:	08008389 	.word	0x08008389
 8008354:	08008389 	.word	0x08008389
 8008358:	08008389 	.word	0x08008389
 800835c:	08008389 	.word	0x08008389
 8008360:	0800838f 	.word	0x0800838f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	3304      	adds	r3, #4
 8008368:	2101      	movs	r1, #1
 800836a:	4618      	mov	r0, r3
 800836c:	f001 fc18 	bl	8009ba0 <RCCEx_PLL2_Config>
 8008370:	4603      	mov	r3, r0
 8008372:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008374:	e00c      	b.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	3324      	adds	r3, #36	; 0x24
 800837a:	2101      	movs	r1, #1
 800837c:	4618      	mov	r0, r3
 800837e:	f001 fcc1 	bl	8009d04 <RCCEx_PLL3_Config>
 8008382:	4603      	mov	r3, r0
 8008384:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008386:	e003      	b.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	75fb      	strb	r3, [r7, #23]
      break;
 800838c:	e000      	b.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800838e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008390:	7dfb      	ldrb	r3, [r7, #23]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d109      	bne.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008396:	4b24      	ldr	r3, [pc, #144]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800839a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083a2:	4921      	ldr	r1, [pc, #132]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80083a4:	4313      	orrs	r3, r2
 80083a6:	654b      	str	r3, [r1, #84]	; 0x54
 80083a8:	e001      	b.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083aa:	7dfb      	ldrb	r3, [r7, #23]
 80083ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f003 0302 	and.w	r3, r3, #2
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d03e      	beq.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083be:	2b05      	cmp	r3, #5
 80083c0:	d820      	bhi.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80083c2:	a201      	add	r2, pc, #4	; (adr r2, 80083c8 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80083c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c8:	0800840b 	.word	0x0800840b
 80083cc:	080083e1 	.word	0x080083e1
 80083d0:	080083f3 	.word	0x080083f3
 80083d4:	0800840b 	.word	0x0800840b
 80083d8:	0800840b 	.word	0x0800840b
 80083dc:	0800840b 	.word	0x0800840b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	3304      	adds	r3, #4
 80083e4:	2101      	movs	r1, #1
 80083e6:	4618      	mov	r0, r3
 80083e8:	f001 fbda 	bl	8009ba0 <RCCEx_PLL2_Config>
 80083ec:	4603      	mov	r3, r0
 80083ee:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80083f0:	e00c      	b.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	3324      	adds	r3, #36	; 0x24
 80083f6:	2101      	movs	r1, #1
 80083f8:	4618      	mov	r0, r3
 80083fa:	f001 fc83 	bl	8009d04 <RCCEx_PLL3_Config>
 80083fe:	4603      	mov	r3, r0
 8008400:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008402:	e003      	b.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	75fb      	strb	r3, [r7, #23]
      break;
 8008408:	e000      	b.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800840a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800840c:	7dfb      	ldrb	r3, [r7, #23]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d110      	bne.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008412:	4b05      	ldr	r3, [pc, #20]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008416:	f023 0207 	bic.w	r2, r3, #7
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800841e:	4902      	ldr	r1, [pc, #8]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008420:	4313      	orrs	r3, r2
 8008422:	654b      	str	r3, [r1, #84]	; 0x54
 8008424:	e008      	b.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8008426:	bf00      	nop
 8008428:	58024400 	.word	0x58024400
 800842c:	58024800 	.word	0x58024800
 8008430:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008434:	7dfb      	ldrb	r3, [r7, #23]
 8008436:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f003 0304 	and.w	r3, r3, #4
 8008440:	2b00      	cmp	r3, #0
 8008442:	d039      	beq.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800844a:	2b05      	cmp	r3, #5
 800844c:	d820      	bhi.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800844e:	a201      	add	r2, pc, #4	; (adr r2, 8008454 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8008450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008454:	08008497 	.word	0x08008497
 8008458:	0800846d 	.word	0x0800846d
 800845c:	0800847f 	.word	0x0800847f
 8008460:	08008497 	.word	0x08008497
 8008464:	08008497 	.word	0x08008497
 8008468:	08008497 	.word	0x08008497
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	3304      	adds	r3, #4
 8008470:	2101      	movs	r1, #1
 8008472:	4618      	mov	r0, r3
 8008474:	f001 fb94 	bl	8009ba0 <RCCEx_PLL2_Config>
 8008478:	4603      	mov	r3, r0
 800847a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800847c:	e00c      	b.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	3324      	adds	r3, #36	; 0x24
 8008482:	2101      	movs	r1, #1
 8008484:	4618      	mov	r0, r3
 8008486:	f001 fc3d 	bl	8009d04 <RCCEx_PLL3_Config>
 800848a:	4603      	mov	r3, r0
 800848c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800848e:	e003      	b.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	75fb      	strb	r3, [r7, #23]
      break;
 8008494:	e000      	b.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8008496:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008498:	7dfb      	ldrb	r3, [r7, #23]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d10a      	bne.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800849e:	4bb7      	ldr	r3, [pc, #732]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80084a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084a2:	f023 0207 	bic.w	r2, r3, #7
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084ac:	49b3      	ldr	r1, [pc, #716]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80084ae:	4313      	orrs	r3, r2
 80084b0:	658b      	str	r3, [r1, #88]	; 0x58
 80084b2:	e001      	b.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084b4:	7dfb      	ldrb	r3, [r7, #23]
 80084b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f003 0320 	and.w	r3, r3, #32
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d04b      	beq.n	800855c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084ce:	d02e      	beq.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80084d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084d4:	d828      	bhi.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80084d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084da:	d02a      	beq.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80084dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084e0:	d822      	bhi.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80084e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80084e6:	d026      	beq.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80084e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80084ec:	d81c      	bhi.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80084ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084f2:	d010      	beq.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80084f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084f8:	d816      	bhi.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d01d      	beq.n	800853a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80084fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008502:	d111      	bne.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	3304      	adds	r3, #4
 8008508:	2100      	movs	r1, #0
 800850a:	4618      	mov	r0, r3
 800850c:	f001 fb48 	bl	8009ba0 <RCCEx_PLL2_Config>
 8008510:	4603      	mov	r3, r0
 8008512:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008514:	e012      	b.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	3324      	adds	r3, #36	; 0x24
 800851a:	2102      	movs	r1, #2
 800851c:	4618      	mov	r0, r3
 800851e:	f001 fbf1 	bl	8009d04 <RCCEx_PLL3_Config>
 8008522:	4603      	mov	r3, r0
 8008524:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008526:	e009      	b.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	75fb      	strb	r3, [r7, #23]
      break;
 800852c:	e006      	b.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800852e:	bf00      	nop
 8008530:	e004      	b.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008532:	bf00      	nop
 8008534:	e002      	b.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008536:	bf00      	nop
 8008538:	e000      	b.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800853a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800853c:	7dfb      	ldrb	r3, [r7, #23]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d10a      	bne.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008542:	4b8e      	ldr	r3, [pc, #568]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008546:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008550:	498a      	ldr	r1, [pc, #552]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008552:	4313      	orrs	r3, r2
 8008554:	654b      	str	r3, [r1, #84]	; 0x54
 8008556:	e001      	b.n	800855c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008558:	7dfb      	ldrb	r3, [r7, #23]
 800855a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008564:	2b00      	cmp	r3, #0
 8008566:	d04b      	beq.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800856e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008572:	d02e      	beq.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8008574:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008578:	d828      	bhi.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800857a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800857e:	d02a      	beq.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008584:	d822      	bhi.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008586:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800858a:	d026      	beq.n	80085da <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800858c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008590:	d81c      	bhi.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008592:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008596:	d010      	beq.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8008598:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800859c:	d816      	bhi.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d01d      	beq.n	80085de <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80085a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085a6:	d111      	bne.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	3304      	adds	r3, #4
 80085ac:	2100      	movs	r1, #0
 80085ae:	4618      	mov	r0, r3
 80085b0:	f001 faf6 	bl	8009ba0 <RCCEx_PLL2_Config>
 80085b4:	4603      	mov	r3, r0
 80085b6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80085b8:	e012      	b.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	3324      	adds	r3, #36	; 0x24
 80085be:	2102      	movs	r1, #2
 80085c0:	4618      	mov	r0, r3
 80085c2:	f001 fb9f 	bl	8009d04 <RCCEx_PLL3_Config>
 80085c6:	4603      	mov	r3, r0
 80085c8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80085ca:	e009      	b.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	75fb      	strb	r3, [r7, #23]
      break;
 80085d0:	e006      	b.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80085d2:	bf00      	nop
 80085d4:	e004      	b.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80085d6:	bf00      	nop
 80085d8:	e002      	b.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80085da:	bf00      	nop
 80085dc:	e000      	b.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80085de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085e0:	7dfb      	ldrb	r3, [r7, #23]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d10a      	bne.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80085e6:	4b65      	ldr	r3, [pc, #404]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80085e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ea:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80085f4:	4961      	ldr	r1, [pc, #388]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80085f6:	4313      	orrs	r3, r2
 80085f8:	658b      	str	r3, [r1, #88]	; 0x58
 80085fa:	e001      	b.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085fc:	7dfb      	ldrb	r3, [r7, #23]
 80085fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008608:	2b00      	cmp	r3, #0
 800860a:	d04b      	beq.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008612:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008616:	d02e      	beq.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8008618:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800861c:	d828      	bhi.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800861e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008622:	d02a      	beq.n	800867a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8008624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008628:	d822      	bhi.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800862a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800862e:	d026      	beq.n	800867e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008630:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008634:	d81c      	bhi.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008636:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800863a:	d010      	beq.n	800865e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800863c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008640:	d816      	bhi.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008642:	2b00      	cmp	r3, #0
 8008644:	d01d      	beq.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800864a:	d111      	bne.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	3304      	adds	r3, #4
 8008650:	2100      	movs	r1, #0
 8008652:	4618      	mov	r0, r3
 8008654:	f001 faa4 	bl	8009ba0 <RCCEx_PLL2_Config>
 8008658:	4603      	mov	r3, r0
 800865a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800865c:	e012      	b.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	3324      	adds	r3, #36	; 0x24
 8008662:	2102      	movs	r1, #2
 8008664:	4618      	mov	r0, r3
 8008666:	f001 fb4d 	bl	8009d04 <RCCEx_PLL3_Config>
 800866a:	4603      	mov	r3, r0
 800866c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800866e:	e009      	b.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	75fb      	strb	r3, [r7, #23]
      break;
 8008674:	e006      	b.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008676:	bf00      	nop
 8008678:	e004      	b.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800867a:	bf00      	nop
 800867c:	e002      	b.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800867e:	bf00      	nop
 8008680:	e000      	b.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008682:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008684:	7dfb      	ldrb	r3, [r7, #23]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d10a      	bne.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800868a:	4b3c      	ldr	r3, [pc, #240]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800868c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800868e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008698:	4938      	ldr	r1, [pc, #224]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800869a:	4313      	orrs	r3, r2
 800869c:	658b      	str	r3, [r1, #88]	; 0x58
 800869e:	e001      	b.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086a0:	7dfb      	ldrb	r3, [r7, #23]
 80086a2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f003 0308 	and.w	r3, r3, #8
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d01a      	beq.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086ba:	d10a      	bne.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	3324      	adds	r3, #36	; 0x24
 80086c0:	2102      	movs	r1, #2
 80086c2:	4618      	mov	r0, r3
 80086c4:	f001 fb1e 	bl	8009d04 <RCCEx_PLL3_Config>
 80086c8:	4603      	mov	r3, r0
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d001      	beq.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
 80086d0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80086d2:	4b2a      	ldr	r3, [pc, #168]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80086d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086e0:	4926      	ldr	r1, [pc, #152]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80086e2:	4313      	orrs	r3, r2
 80086e4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f003 0310 	and.w	r3, r3, #16
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d01a      	beq.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086fc:	d10a      	bne.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	3324      	adds	r3, #36	; 0x24
 8008702:	2102      	movs	r1, #2
 8008704:	4618      	mov	r0, r3
 8008706:	f001 fafd 	bl	8009d04 <RCCEx_PLL3_Config>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d001      	beq.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8008710:	2301      	movs	r3, #1
 8008712:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008714:	4b19      	ldr	r3, [pc, #100]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008718:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008722:	4916      	ldr	r1, [pc, #88]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008724:	4313      	orrs	r3, r2
 8008726:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008730:	2b00      	cmp	r3, #0
 8008732:	d036      	beq.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800873a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800873e:	d01f      	beq.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008740:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008744:	d817      	bhi.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8008746:	2b00      	cmp	r3, #0
 8008748:	d003      	beq.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800874a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800874e:	d009      	beq.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8008750:	e011      	b.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	3304      	adds	r3, #4
 8008756:	2100      	movs	r1, #0
 8008758:	4618      	mov	r0, r3
 800875a:	f001 fa21 	bl	8009ba0 <RCCEx_PLL2_Config>
 800875e:	4603      	mov	r3, r0
 8008760:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008762:	e00e      	b.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	3324      	adds	r3, #36	; 0x24
 8008768:	2102      	movs	r1, #2
 800876a:	4618      	mov	r0, r3
 800876c:	f001 faca 	bl	8009d04 <RCCEx_PLL3_Config>
 8008770:	4603      	mov	r3, r0
 8008772:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008774:	e005      	b.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	75fb      	strb	r3, [r7, #23]
      break;
 800877a:	e002      	b.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800877c:	58024400 	.word	0x58024400
      break;
 8008780:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008782:	7dfb      	ldrb	r3, [r7, #23]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d10a      	bne.n	800879e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008788:	4b93      	ldr	r3, [pc, #588]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800878a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800878c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008796:	4990      	ldr	r1, [pc, #576]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008798:	4313      	orrs	r3, r2
 800879a:	658b      	str	r3, [r1, #88]	; 0x58
 800879c:	e001      	b.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800879e:	7dfb      	ldrb	r3, [r7, #23]
 80087a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d033      	beq.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80087b8:	d01c      	beq.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80087ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80087be:	d816      	bhi.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80087c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087c4:	d003      	beq.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80087c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80087ca:	d007      	beq.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80087cc:	e00f      	b.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087ce:	4b82      	ldr	r3, [pc, #520]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d2:	4a81      	ldr	r2, [pc, #516]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80087da:	e00c      	b.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	3324      	adds	r3, #36	; 0x24
 80087e0:	2101      	movs	r1, #1
 80087e2:	4618      	mov	r0, r3
 80087e4:	f001 fa8e 	bl	8009d04 <RCCEx_PLL3_Config>
 80087e8:	4603      	mov	r3, r0
 80087ea:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80087ec:	e003      	b.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087ee:	2301      	movs	r3, #1
 80087f0:	75fb      	strb	r3, [r7, #23]
      break;
 80087f2:	e000      	b.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80087f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087f6:	7dfb      	ldrb	r3, [r7, #23]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d10a      	bne.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80087fc:	4b76      	ldr	r3, [pc, #472]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008800:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800880a:	4973      	ldr	r1, [pc, #460]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800880c:	4313      	orrs	r3, r2
 800880e:	654b      	str	r3, [r1, #84]	; 0x54
 8008810:	e001      	b.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008812:	7dfb      	ldrb	r3, [r7, #23]
 8008814:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800881e:	2b00      	cmp	r3, #0
 8008820:	d029      	beq.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008826:	2b00      	cmp	r3, #0
 8008828:	d003      	beq.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800882a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800882e:	d007      	beq.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8008830:	e00f      	b.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008832:	4b69      	ldr	r3, [pc, #420]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008836:	4a68      	ldr	r2, [pc, #416]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800883c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800883e:	e00b      	b.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	3304      	adds	r3, #4
 8008844:	2102      	movs	r1, #2
 8008846:	4618      	mov	r0, r3
 8008848:	f001 f9aa 	bl	8009ba0 <RCCEx_PLL2_Config>
 800884c:	4603      	mov	r3, r0
 800884e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008850:	e002      	b.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	75fb      	strb	r3, [r7, #23]
      break;
 8008856:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008858:	7dfb      	ldrb	r3, [r7, #23]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d109      	bne.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800885e:	4b5e      	ldr	r3, [pc, #376]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008862:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800886a:	495b      	ldr	r1, [pc, #364]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800886c:	4313      	orrs	r3, r2
 800886e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008870:	e001      	b.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008872:	7dfb      	ldrb	r3, [r7, #23]
 8008874:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800887e:	2b00      	cmp	r3, #0
 8008880:	d00a      	beq.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	3324      	adds	r3, #36	; 0x24
 8008886:	2102      	movs	r1, #2
 8008888:	4618      	mov	r0, r3
 800888a:	f001 fa3b 	bl	8009d04 <RCCEx_PLL3_Config>
 800888e:	4603      	mov	r3, r0
 8008890:	2b00      	cmp	r3, #0
 8008892:	d001      	beq.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8008894:	2301      	movs	r3, #1
 8008896:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d030      	beq.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80088ac:	d017      	beq.n	80088de <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80088ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80088b2:	d811      	bhi.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80088b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088b8:	d013      	beq.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80088ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088be:	d80b      	bhi.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d010      	beq.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80088c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088c8:	d106      	bne.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088ca:	4b43      	ldr	r3, [pc, #268]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ce:	4a42      	ldr	r2, [pc, #264]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80088d6:	e007      	b.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	75fb      	strb	r3, [r7, #23]
      break;
 80088dc:	e004      	b.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80088de:	bf00      	nop
 80088e0:	e002      	b.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80088e2:	bf00      	nop
 80088e4:	e000      	b.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80088e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088e8:	7dfb      	ldrb	r3, [r7, #23]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d109      	bne.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80088ee:	4b3a      	ldr	r3, [pc, #232]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088fa:	4937      	ldr	r1, [pc, #220]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088fc:	4313      	orrs	r3, r2
 80088fe:	654b      	str	r3, [r1, #84]	; 0x54
 8008900:	e001      	b.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008902:	7dfb      	ldrb	r3, [r7, #23]
 8008904:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800890e:	2b00      	cmp	r3, #0
 8008910:	d008      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008912:	4b31      	ldr	r3, [pc, #196]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008916:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800891e:	492e      	ldr	r1, [pc, #184]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008920:	4313      	orrs	r3, r2
 8008922:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800892c:	2b00      	cmp	r3, #0
 800892e:	d009      	beq.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008930:	4b29      	ldr	r3, [pc, #164]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800893e:	4926      	ldr	r1, [pc, #152]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008940:	4313      	orrs	r3, r2
 8008942:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800894c:	2b00      	cmp	r3, #0
 800894e:	d008      	beq.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008950:	4b21      	ldr	r3, [pc, #132]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008954:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800895c:	491e      	ldr	r1, [pc, #120]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800895e:	4313      	orrs	r3, r2
 8008960:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800896a:	2b00      	cmp	r3, #0
 800896c:	d00d      	beq.n	800898a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800896e:	4b1a      	ldr	r3, [pc, #104]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008970:	691b      	ldr	r3, [r3, #16]
 8008972:	4a19      	ldr	r2, [pc, #100]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008974:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008978:	6113      	str	r3, [r2, #16]
 800897a:	4b17      	ldr	r3, [pc, #92]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800897c:	691a      	ldr	r2, [r3, #16]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008984:	4914      	ldr	r1, [pc, #80]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008986:	4313      	orrs	r3, r2
 8008988:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	2b00      	cmp	r3, #0
 8008990:	da08      	bge.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008992:	4b11      	ldr	r3, [pc, #68]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008996:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800899e:	490e      	ldr	r1, [pc, #56]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80089a0:	4313      	orrs	r3, r2
 80089a2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d009      	beq.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80089b0:	4b09      	ldr	r3, [pc, #36]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80089b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089be:	4906      	ldr	r1, [pc, #24]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80089c0:	4313      	orrs	r3, r2
 80089c2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80089c4:	7dbb      	ldrb	r3, [r7, #22]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d101      	bne.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80089ca:	2300      	movs	r3, #0
 80089cc:	e000      	b.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80089ce:	2301      	movs	r3, #1
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3718      	adds	r7, #24
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	58024400 	.word	0x58024400

080089dc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b090      	sub	sp, #64	; 0x40
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089ea:	f040 8095 	bne.w	8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80089ee:	4bae      	ldr	r3, [pc, #696]	; (8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80089f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089f2:	f003 0307 	and.w	r3, r3, #7
 80089f6:	633b      	str	r3, [r7, #48]	; 0x30
 80089f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fa:	2b04      	cmp	r3, #4
 80089fc:	f200 8088 	bhi.w	8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8008a00:	a201      	add	r2, pc, #4	; (adr r2, 8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8008a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a06:	bf00      	nop
 8008a08:	08008a1d 	.word	0x08008a1d
 8008a0c:	08008a45 	.word	0x08008a45
 8008a10:	08008a6d 	.word	0x08008a6d
 8008a14:	08008b09 	.word	0x08008b09
 8008a18:	08008a95 	.word	0x08008a95

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a1c:	4ba2      	ldr	r3, [pc, #648]	; (8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a28:	d108      	bne.n	8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f000 ff64 	bl	80098fc <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a36:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008a38:	f000 bc95 	b.w	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a40:	f000 bc91 	b.w	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a44:	4b98      	ldr	r3, [pc, #608]	; (8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a50:	d108      	bne.n	8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a52:	f107 0318 	add.w	r3, r7, #24
 8008a56:	4618      	mov	r0, r3
 8008a58:	f000 fca8 	bl	80093ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a5c:	69bb      	ldr	r3, [r7, #24]
 8008a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008a60:	f000 bc81 	b.w	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008a64:	2300      	movs	r3, #0
 8008a66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a68:	f000 bc7d 	b.w	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a6c:	4b8e      	ldr	r3, [pc, #568]	; (8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a78:	d108      	bne.n	8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a7a:	f107 030c 	add.w	r3, r7, #12
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f000 fde8 	bl	8009654 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008a88:	f000 bc6d 	b.w	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a90:	f000 bc69 	b.w	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008a94:	4b84      	ldr	r3, [pc, #528]	; (8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008a9c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a9e:	4b82      	ldr	r3, [pc, #520]	; (8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f003 0304 	and.w	r3, r3, #4
 8008aa6:	2b04      	cmp	r3, #4
 8008aa8:	d10c      	bne.n	8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8008aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d109      	bne.n	8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008ab0:	4b7d      	ldr	r3, [pc, #500]	; (8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	08db      	lsrs	r3, r3, #3
 8008ab6:	f003 0303 	and.w	r3, r3, #3
 8008aba:	4a7c      	ldr	r2, [pc, #496]	; (8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008abc:	fa22 f303 	lsr.w	r3, r2, r3
 8008ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ac2:	e01f      	b.n	8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ac4:	4b78      	ldr	r3, [pc, #480]	; (8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008acc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ad0:	d106      	bne.n	8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8008ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ad4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ad8:	d102      	bne.n	8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008ada:	4b75      	ldr	r3, [pc, #468]	; (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008adc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ade:	e011      	b.n	8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ae0:	4b71      	ldr	r3, [pc, #452]	; (8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ae8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008aec:	d106      	bne.n	8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8008aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008af0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008af4:	d102      	bne.n	8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008af6:	4b6f      	ldr	r3, [pc, #444]	; (8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008af8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008afa:	e003      	b.n	8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008afc:	2300      	movs	r3, #0
 8008afe:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008b00:	f000 bc31 	b.w	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008b04:	f000 bc2f 	b.w	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008b08:	4b6b      	ldr	r3, [pc, #428]	; (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8008b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b0c:	f000 bc2b 	b.w	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008b10:	2300      	movs	r3, #0
 8008b12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b14:	f000 bc27 	b.w	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b1e:	f040 8095 	bne.w	8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8008b22:	4b61      	ldr	r3, [pc, #388]	; (8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b26:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008b2a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b32:	d04d      	beq.n	8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8008b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b3a:	f200 8084 	bhi.w	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b40:	2bc0      	cmp	r3, #192	; 0xc0
 8008b42:	d07d      	beq.n	8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b46:	2bc0      	cmp	r3, #192	; 0xc0
 8008b48:	d87d      	bhi.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b4c:	2b80      	cmp	r3, #128	; 0x80
 8008b4e:	d02d      	beq.n	8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8008b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b52:	2b80      	cmp	r3, #128	; 0x80
 8008b54:	d877      	bhi.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d003      	beq.n	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8008b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5e:	2b40      	cmp	r3, #64	; 0x40
 8008b60:	d012      	beq.n	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8008b62:	e070      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b64:	4b50      	ldr	r3, [pc, #320]	; (8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b70:	d107      	bne.n	8008b82 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b76:	4618      	mov	r0, r3
 8008b78:	f000 fec0 	bl	80098fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008b80:	e3f1      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008b82:	2300      	movs	r3, #0
 8008b84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b86:	e3ee      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b88:	4b47      	ldr	r3, [pc, #284]	; (8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b94:	d107      	bne.n	8008ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b96:	f107 0318 	add.w	r3, r7, #24
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f000 fc06 	bl	80093ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008ba4:	e3df      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008baa:	e3dc      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008bac:	4b3e      	ldr	r3, [pc, #248]	; (8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008bb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bb8:	d107      	bne.n	8008bca <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bba:	f107 030c 	add.w	r3, r7, #12
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f000 fd48 	bl	8009654 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008bc8:	e3cd      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bce:	e3ca      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008bd0:	4b35      	ldr	r3, [pc, #212]	; (8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008bd8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008bda:	4b33      	ldr	r3, [pc, #204]	; (8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f003 0304 	and.w	r3, r3, #4
 8008be2:	2b04      	cmp	r3, #4
 8008be4:	d10c      	bne.n	8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8008be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d109      	bne.n	8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008bec:	4b2e      	ldr	r3, [pc, #184]	; (8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	08db      	lsrs	r3, r3, #3
 8008bf2:	f003 0303 	and.w	r3, r3, #3
 8008bf6:	4a2d      	ldr	r2, [pc, #180]	; (8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8008bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bfe:	e01e      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c00:	4b29      	ldr	r3, [pc, #164]	; (8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c0c:	d106      	bne.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8008c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c14:	d102      	bne.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008c16:	4b26      	ldr	r3, [pc, #152]	; (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008c18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c1a:	e010      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c1c:	4b22      	ldr	r3, [pc, #136]	; (8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c28:	d106      	bne.n	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8008c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c30:	d102      	bne.n	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008c32:	4b20      	ldr	r3, [pc, #128]	; (8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008c34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c36:	e002      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008c3c:	e393      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008c3e:	e392      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008c40:	4b1d      	ldr	r3, [pc, #116]	; (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8008c42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c44:	e38f      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008c46:	2300      	movs	r3, #0
 8008c48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c4a:	e38c      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c52:	f040 80a7 	bne.w	8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008c56:	4b14      	ldr	r3, [pc, #80]	; (8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c5a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008c5e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008c66:	d05f      	beq.n	8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008c6e:	f200 8096 	bhi.w	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c74:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008c78:	f000 808e 	beq.w	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8008c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008c82:	f200 808c 	bhi.w	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c8c:	d03a      	beq.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8008c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c94:	f200 8083 	bhi.w	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d00e      	beq.n	8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8008c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ca4:	d01c      	beq.n	8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8008ca6:	e07a      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008ca8:	58024400 	.word	0x58024400
 8008cac:	03d09000 	.word	0x03d09000
 8008cb0:	003d0900 	.word	0x003d0900
 8008cb4:	017d7840 	.word	0x017d7840
 8008cb8:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008cbc:	4baa      	ldr	r3, [pc, #680]	; (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008cc8:	d107      	bne.n	8008cda <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f000 fe14 	bl	80098fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008cd8:	e345      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cde:	e342      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ce0:	4ba1      	ldr	r3, [pc, #644]	; (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ce8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008cec:	d107      	bne.n	8008cfe <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cee:	f107 0318 	add.w	r3, r7, #24
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f000 fb5a 	bl	80093ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008cf8:	69bb      	ldr	r3, [r7, #24]
 8008cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008cfc:	e333      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d02:	e330      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d04:	4b98      	ldr	r3, [pc, #608]	; (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d10:	d107      	bne.n	8008d22 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d12:	f107 030c 	add.w	r3, r7, #12
 8008d16:	4618      	mov	r0, r3
 8008d18:	f000 fc9c 	bl	8009654 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008d20:	e321      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008d22:	2300      	movs	r3, #0
 8008d24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d26:	e31e      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008d28:	4b8f      	ldr	r3, [pc, #572]	; (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d30:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d32:	4b8d      	ldr	r3, [pc, #564]	; (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f003 0304 	and.w	r3, r3, #4
 8008d3a:	2b04      	cmp	r3, #4
 8008d3c:	d10c      	bne.n	8008d58 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8008d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d109      	bne.n	8008d58 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008d44:	4b88      	ldr	r3, [pc, #544]	; (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	08db      	lsrs	r3, r3, #3
 8008d4a:	f003 0303 	and.w	r3, r3, #3
 8008d4e:	4a87      	ldr	r2, [pc, #540]	; (8008f6c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008d50:	fa22 f303 	lsr.w	r3, r2, r3
 8008d54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d56:	e01e      	b.n	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d58:	4b83      	ldr	r3, [pc, #524]	; (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d64:	d106      	bne.n	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8008d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d6c:	d102      	bne.n	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008d6e:	4b80      	ldr	r3, [pc, #512]	; (8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008d70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d72:	e010      	b.n	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d74:	4b7c      	ldr	r3, [pc, #496]	; (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d80:	d106      	bne.n	8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8008d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d88:	d102      	bne.n	8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008d8a:	4b7a      	ldr	r3, [pc, #488]	; (8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d8e:	e002      	b.n	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008d90:	2300      	movs	r3, #0
 8008d92:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008d94:	e2e7      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008d96:	e2e6      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008d98:	4b77      	ldr	r3, [pc, #476]	; (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d9c:	e2e3      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008da2:	e2e0      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008daa:	f040 809c 	bne.w	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008dae:	4b6e      	ldr	r3, [pc, #440]	; (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008db2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008db6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008dbe:	d054      	beq.n	8008e6a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8008dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008dc6:	f200 808b 	bhi.w	8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dcc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008dd0:	f000 8083 	beq.w	8008eda <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8008dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008dda:	f200 8081 	bhi.w	8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008de4:	d02f      	beq.n	8008e46 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8008de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008dec:	d878      	bhi.n	8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d004      	beq.n	8008dfe <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008dfa:	d012      	beq.n	8008e22 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8008dfc:	e070      	b.n	8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008dfe:	4b5a      	ldr	r3, [pc, #360]	; (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e0a:	d107      	bne.n	8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e10:	4618      	mov	r0, r3
 8008e12:	f000 fd73 	bl	80098fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e18:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e1a:	e2a4      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e20:	e2a1      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e22:	4b51      	ldr	r3, [pc, #324]	; (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e2e:	d107      	bne.n	8008e40 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e30:	f107 0318 	add.w	r3, r7, #24
 8008e34:	4618      	mov	r0, r3
 8008e36:	f000 fab9 	bl	80093ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8008e3e:	e292      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008e40:	2300      	movs	r3, #0
 8008e42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e44:	e28f      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e46:	4b48      	ldr	r3, [pc, #288]	; (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e52:	d107      	bne.n	8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e54:	f107 030c 	add.w	r3, r7, #12
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f000 fbfb 	bl	8009654 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e62:	e280      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008e64:	2300      	movs	r3, #0
 8008e66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e68:	e27d      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008e6a:	4b3f      	ldr	r3, [pc, #252]	; (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008e72:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e74:	4b3c      	ldr	r3, [pc, #240]	; (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f003 0304 	and.w	r3, r3, #4
 8008e7c:	2b04      	cmp	r3, #4
 8008e7e:	d10c      	bne.n	8008e9a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8008e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d109      	bne.n	8008e9a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e86:	4b38      	ldr	r3, [pc, #224]	; (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	08db      	lsrs	r3, r3, #3
 8008e8c:	f003 0303 	and.w	r3, r3, #3
 8008e90:	4a36      	ldr	r2, [pc, #216]	; (8008f6c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008e92:	fa22 f303 	lsr.w	r3, r2, r3
 8008e96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e98:	e01e      	b.n	8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e9a:	4b33      	ldr	r3, [pc, #204]	; (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ea6:	d106      	bne.n	8008eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8008ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008eae:	d102      	bne.n	8008eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008eb0:	4b2f      	ldr	r3, [pc, #188]	; (8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008eb4:	e010      	b.n	8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008eb6:	4b2c      	ldr	r3, [pc, #176]	; (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ebe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ec2:	d106      	bne.n	8008ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8008ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ec6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008eca:	d102      	bne.n	8008ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008ecc:	4b29      	ldr	r3, [pc, #164]	; (8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008ece:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ed0:	e002      	b.n	8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008ed6:	e246      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008ed8:	e245      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008eda:	4b27      	ldr	r3, [pc, #156]	; (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008edc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ede:	e242      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ee4:	e23f      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008eec:	f040 80a8 	bne.w	8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008ef0:	4b1d      	ldr	r3, [pc, #116]	; (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ef4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008ef8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008efc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f00:	d060      	beq.n	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8008f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f08:	f200 8097 	bhi.w	800903a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f12:	f000 808f 	beq.w	8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8008f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f1c:	f200 808d 	bhi.w	800903a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f26:	d03b      	beq.n	8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8008f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f2e:	f200 8084 	bhi.w	800903a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d004      	beq.n	8008f42 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8008f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f3e:	d01d      	beq.n	8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8008f40:	e07b      	b.n	800903a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f42:	4b09      	ldr	r3, [pc, #36]	; (8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f4e:	d107      	bne.n	8008f60 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f54:	4618      	mov	r0, r3
 8008f56:	f000 fcd1 	bl	80098fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f5e:	e202      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008f60:	2300      	movs	r3, #0
 8008f62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f64:	e1ff      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008f66:	bf00      	nop
 8008f68:	58024400 	.word	0x58024400
 8008f6c:	03d09000 	.word	0x03d09000
 8008f70:	003d0900 	.word	0x003d0900
 8008f74:	017d7840 	.word	0x017d7840
 8008f78:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f7c:	4ba3      	ldr	r3, [pc, #652]	; (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f88:	d107      	bne.n	8008f9a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f8a:	f107 0318 	add.w	r3, r7, #24
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f000 fa0c 	bl	80093ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f94:	69bb      	ldr	r3, [r7, #24]
 8008f96:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f98:	e1e5      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f9e:	e1e2      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008fa0:	4b9a      	ldr	r3, [pc, #616]	; (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008fa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fac:	d107      	bne.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fae:	f107 030c 	add.w	r3, r7, #12
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f000 fb4e 	bl	8009654 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008fbc:	e1d3      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fc2:	e1d0      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008fc4:	4b91      	ldr	r3, [pc, #580]	; (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008fcc:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008fce:	4b8f      	ldr	r3, [pc, #572]	; (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f003 0304 	and.w	r3, r3, #4
 8008fd6:	2b04      	cmp	r3, #4
 8008fd8:	d10c      	bne.n	8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8008fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d109      	bne.n	8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008fe0:	4b8a      	ldr	r3, [pc, #552]	; (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	08db      	lsrs	r3, r3, #3
 8008fe6:	f003 0303 	and.w	r3, r3, #3
 8008fea:	4a89      	ldr	r2, [pc, #548]	; (8009210 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008fec:	fa22 f303 	lsr.w	r3, r2, r3
 8008ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ff2:	e01e      	b.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ff4:	4b85      	ldr	r3, [pc, #532]	; (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009000:	d106      	bne.n	8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8009002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009004:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009008:	d102      	bne.n	8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800900a:	4b82      	ldr	r3, [pc, #520]	; (8009214 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800900c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800900e:	e010      	b.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009010:	4b7e      	ldr	r3, [pc, #504]	; (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009018:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800901c:	d106      	bne.n	800902c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800901e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009020:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009024:	d102      	bne.n	800902c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009026:	4b7c      	ldr	r3, [pc, #496]	; (8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009028:	63fb      	str	r3, [r7, #60]	; 0x3c
 800902a:	e002      	b.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800902c:	2300      	movs	r3, #0
 800902e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009030:	e199      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009032:	e198      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009034:	4b79      	ldr	r3, [pc, #484]	; (800921c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009036:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009038:	e195      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800903a:	2300      	movs	r3, #0
 800903c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800903e:	e192      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009046:	d173      	bne.n	8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009048:	4b70      	ldr	r3, [pc, #448]	; (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800904a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800904c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009050:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009054:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009058:	d02f      	beq.n	80090ba <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800905a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800905c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009060:	d863      	bhi.n	800912a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8009062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009064:	2b00      	cmp	r3, #0
 8009066:	d004      	beq.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8009068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800906e:	d012      	beq.n	8009096 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8009070:	e05b      	b.n	800912a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009072:	4b66      	ldr	r3, [pc, #408]	; (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800907a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800907e:	d107      	bne.n	8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009080:	f107 0318 	add.w	r3, r7, #24
 8009084:	4618      	mov	r0, r3
 8009086:	f000 f991 	bl	80093ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800908a:	69bb      	ldr	r3, [r7, #24]
 800908c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800908e:	e16a      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009090:	2300      	movs	r3, #0
 8009092:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009094:	e167      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009096:	4b5d      	ldr	r3, [pc, #372]	; (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800909e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090a2:	d107      	bne.n	80090b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090a4:	f107 030c 	add.w	r3, r7, #12
 80090a8:	4618      	mov	r0, r3
 80090aa:	f000 fad3 	bl	8009654 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80090b2:	e158      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80090b4:	2300      	movs	r3, #0
 80090b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090b8:	e155      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80090ba:	4b54      	ldr	r3, [pc, #336]	; (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80090bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80090c2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80090c4:	4b51      	ldr	r3, [pc, #324]	; (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f003 0304 	and.w	r3, r3, #4
 80090cc:	2b04      	cmp	r3, #4
 80090ce:	d10c      	bne.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 80090d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d109      	bne.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80090d6:	4b4d      	ldr	r3, [pc, #308]	; (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	08db      	lsrs	r3, r3, #3
 80090dc:	f003 0303 	and.w	r3, r3, #3
 80090e0:	4a4b      	ldr	r2, [pc, #300]	; (8009210 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80090e2:	fa22 f303 	lsr.w	r3, r2, r3
 80090e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090e8:	e01e      	b.n	8009128 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80090ea:	4b48      	ldr	r3, [pc, #288]	; (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090f6:	d106      	bne.n	8009106 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 80090f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090fe:	d102      	bne.n	8009106 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009100:	4b44      	ldr	r3, [pc, #272]	; (8009214 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8009102:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009104:	e010      	b.n	8009128 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009106:	4b41      	ldr	r3, [pc, #260]	; (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800910e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009112:	d106      	bne.n	8009122 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8009114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009116:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800911a:	d102      	bne.n	8009122 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800911c:	4b3e      	ldr	r3, [pc, #248]	; (8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800911e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009120:	e002      	b.n	8009128 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009122:	2300      	movs	r3, #0
 8009124:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009126:	e11e      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009128:	e11d      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800912a:	2300      	movs	r3, #0
 800912c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800912e:	e11a      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009136:	d133      	bne.n	80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009138:	4b34      	ldr	r3, [pc, #208]	; (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800913a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800913c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009140:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009144:	2b00      	cmp	r3, #0
 8009146:	d004      	beq.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8009148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800914a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800914e:	d012      	beq.n	8009176 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8009150:	e023      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009152:	4b2e      	ldr	r3, [pc, #184]	; (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800915a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800915e:	d107      	bne.n	8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009164:	4618      	mov	r0, r3
 8009166:	f000 fbc9 	bl	80098fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800916a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800916e:	e0fa      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009170:	2300      	movs	r3, #0
 8009172:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009174:	e0f7      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009176:	4b25      	ldr	r3, [pc, #148]	; (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800917e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009182:	d107      	bne.n	8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009184:	f107 0318 	add.w	r3, r7, #24
 8009188:	4618      	mov	r0, r3
 800918a:	f000 f90f 	bl	80093ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800918e:	6a3b      	ldr	r3, [r7, #32]
 8009190:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009192:	e0e8      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009194:	2300      	movs	r3, #0
 8009196:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009198:	e0e5      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800919a:	2300      	movs	r3, #0
 800919c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800919e:	e0e2      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091a6:	f040 808f 	bne.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80091aa:	4b18      	ldr	r3, [pc, #96]	; (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80091ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091ae:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80091b2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80091b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091ba:	d075      	beq.n	80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 80091bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091c2:	d87e      	bhi.n	80092c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80091c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091ca:	d060      	beq.n	800928e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80091cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091d2:	d876      	bhi.n	80092c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80091d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80091da:	d045      	beq.n	8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 80091dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80091e2:	d86e      	bhi.n	80092c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80091e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091ea:	d02b      	beq.n	8009244 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 80091ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091f2:	d866      	bhi.n	80092c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80091f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d004      	beq.n	8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 80091fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009200:	d00e      	beq.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8009202:	e05e      	b.n	80092c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009204:	f000 f8bc 	bl	8009380 <HAL_RCCEx_GetD3PCLK1Freq>
 8009208:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800920a:	e0ac      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800920c:	58024400 	.word	0x58024400
 8009210:	03d09000 	.word	0x03d09000
 8009214:	003d0900 	.word	0x003d0900
 8009218:	017d7840 	.word	0x017d7840
 800921c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009220:	4b53      	ldr	r3, [pc, #332]	; (8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009228:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800922c:	d107      	bne.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800922e:	f107 0318 	add.w	r3, r7, #24
 8009232:	4618      	mov	r0, r3
 8009234:	f000 f8ba 	bl	80093ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800923c:	e093      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800923e:	2300      	movs	r3, #0
 8009240:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009242:	e090      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009244:	4b4a      	ldr	r3, [pc, #296]	; (8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800924c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009250:	d107      	bne.n	8009262 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009252:	f107 030c 	add.w	r3, r7, #12
 8009256:	4618      	mov	r0, r3
 8009258:	f000 f9fc 	bl	8009654 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009260:	e081      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009262:	2300      	movs	r3, #0
 8009264:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009266:	e07e      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009268:	4b41      	ldr	r3, [pc, #260]	; (8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f003 0304 	and.w	r3, r3, #4
 8009270:	2b04      	cmp	r3, #4
 8009272:	d109      	bne.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009274:	4b3e      	ldr	r3, [pc, #248]	; (8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	08db      	lsrs	r3, r3, #3
 800927a:	f003 0303 	and.w	r3, r3, #3
 800927e:	4a3d      	ldr	r2, [pc, #244]	; (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8009280:	fa22 f303 	lsr.w	r3, r2, r3
 8009284:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009286:	e06e      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009288:	2300      	movs	r3, #0
 800928a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800928c:	e06b      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800928e:	4b38      	ldr	r3, [pc, #224]	; (8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800929a:	d102      	bne.n	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 800929c:	4b36      	ldr	r3, [pc, #216]	; (8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800929e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80092a0:	e061      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80092a2:	2300      	movs	r3, #0
 80092a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092a6:	e05e      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80092a8:	4b31      	ldr	r3, [pc, #196]	; (8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092b4:	d102      	bne.n	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 80092b6:	4b31      	ldr	r3, [pc, #196]	; (800937c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80092b8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80092ba:	e054      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80092bc:	2300      	movs	r3, #0
 80092be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092c0:	e051      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80092c2:	2300      	movs	r3, #0
 80092c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092c6:	e04e      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092ce:	d148      	bne.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80092d0:	4b27      	ldr	r3, [pc, #156]	; (8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80092d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80092d8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80092da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092e0:	d02a      	beq.n	8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 80092e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092e8:	d838      	bhi.n	800935c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80092ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d004      	beq.n	80092fa <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80092f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80092f6:	d00d      	beq.n	8009314 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80092f8:	e030      	b.n	800935c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80092fa:	4b1d      	ldr	r3, [pc, #116]	; (8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009302:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009306:	d102      	bne.n	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8009308:	4b1c      	ldr	r3, [pc, #112]	; (800937c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800930a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800930c:	e02b      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800930e:	2300      	movs	r3, #0
 8009310:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009312:	e028      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009314:	4b16      	ldr	r3, [pc, #88]	; (8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800931c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009320:	d107      	bne.n	8009332 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009326:	4618      	mov	r0, r3
 8009328:	f000 fae8 	bl	80098fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800932c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009330:	e019      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009332:	2300      	movs	r3, #0
 8009334:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009336:	e016      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009338:	4b0d      	ldr	r3, [pc, #52]	; (8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009340:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009344:	d107      	bne.n	8009356 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009346:	f107 0318 	add.w	r3, r7, #24
 800934a:	4618      	mov	r0, r3
 800934c:	f000 f82e 	bl	80093ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009350:	69fb      	ldr	r3, [r7, #28]
 8009352:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009354:	e007      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009356:	2300      	movs	r3, #0
 8009358:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800935a:	e004      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800935c:	2300      	movs	r3, #0
 800935e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009360:	e001      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8009362:	2300      	movs	r3, #0
 8009364:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8009366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009368:	4618      	mov	r0, r3
 800936a:	3740      	adds	r7, #64	; 0x40
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}
 8009370:	58024400 	.word	0x58024400
 8009374:	03d09000 	.word	0x03d09000
 8009378:	003d0900 	.word	0x003d0900
 800937c:	017d7840 	.word	0x017d7840

08009380 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009384:	f7fe fb8e 	bl	8007aa4 <HAL_RCC_GetHCLKFreq>
 8009388:	4602      	mov	r2, r0
 800938a:	4b06      	ldr	r3, [pc, #24]	; (80093a4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800938c:	6a1b      	ldr	r3, [r3, #32]
 800938e:	091b      	lsrs	r3, r3, #4
 8009390:	f003 0307 	and.w	r3, r3, #7
 8009394:	4904      	ldr	r1, [pc, #16]	; (80093a8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009396:	5ccb      	ldrb	r3, [r1, r3]
 8009398:	f003 031f 	and.w	r3, r3, #31
 800939c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	58024400 	.word	0x58024400
 80093a8:	0800ff50 	.word	0x0800ff50

080093ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b089      	sub	sp, #36	; 0x24
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80093b4:	4ba1      	ldr	r3, [pc, #644]	; (800963c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093b8:	f003 0303 	and.w	r3, r3, #3
 80093bc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80093be:	4b9f      	ldr	r3, [pc, #636]	; (800963c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093c2:	0b1b      	lsrs	r3, r3, #12
 80093c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093c8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80093ca:	4b9c      	ldr	r3, [pc, #624]	; (800963c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ce:	091b      	lsrs	r3, r3, #4
 80093d0:	f003 0301 	and.w	r3, r3, #1
 80093d4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80093d6:	4b99      	ldr	r3, [pc, #612]	; (800963c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093da:	08db      	lsrs	r3, r3, #3
 80093dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80093e0:	693a      	ldr	r2, [r7, #16]
 80093e2:	fb02 f303 	mul.w	r3, r2, r3
 80093e6:	ee07 3a90 	vmov	s15, r3
 80093ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	f000 8111 	beq.w	800961c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	2b02      	cmp	r3, #2
 80093fe:	f000 8083 	beq.w	8009508 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009402:	69bb      	ldr	r3, [r7, #24]
 8009404:	2b02      	cmp	r3, #2
 8009406:	f200 80a1 	bhi.w	800954c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800940a:	69bb      	ldr	r3, [r7, #24]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d003      	beq.n	8009418 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009410:	69bb      	ldr	r3, [r7, #24]
 8009412:	2b01      	cmp	r3, #1
 8009414:	d056      	beq.n	80094c4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009416:	e099      	b.n	800954c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009418:	4b88      	ldr	r3, [pc, #544]	; (800963c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f003 0320 	and.w	r3, r3, #32
 8009420:	2b00      	cmp	r3, #0
 8009422:	d02d      	beq.n	8009480 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009424:	4b85      	ldr	r3, [pc, #532]	; (800963c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	08db      	lsrs	r3, r3, #3
 800942a:	f003 0303 	and.w	r3, r3, #3
 800942e:	4a84      	ldr	r2, [pc, #528]	; (8009640 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009430:	fa22 f303 	lsr.w	r3, r2, r3
 8009434:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	ee07 3a90 	vmov	s15, r3
 800943c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	ee07 3a90 	vmov	s15, r3
 8009446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800944a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800944e:	4b7b      	ldr	r3, [pc, #492]	; (800963c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009456:	ee07 3a90 	vmov	s15, r3
 800945a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800945e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009462:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009644 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800946a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800946e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800947a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800947e:	e087      	b.n	8009590 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	ee07 3a90 	vmov	s15, r3
 8009486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800948a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009648 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800948e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009492:	4b6a      	ldr	r3, [pc, #424]	; (800963c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800949a:	ee07 3a90 	vmov	s15, r3
 800949e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80094a6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009644 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80094aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80094c2:	e065      	b.n	8009590 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	ee07 3a90 	vmov	s15, r3
 80094ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800964c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80094d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094d6:	4b59      	ldr	r3, [pc, #356]	; (800963c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094de:	ee07 3a90 	vmov	s15, r3
 80094e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80094ea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009644 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80094ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009502:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009506:	e043      	b.n	8009590 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	ee07 3a90 	vmov	s15, r3
 800950e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009512:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009650 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800951a:	4b48      	ldr	r3, [pc, #288]	; (800963c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800951c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800951e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009522:	ee07 3a90 	vmov	s15, r3
 8009526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800952a:	ed97 6a03 	vldr	s12, [r7, #12]
 800952e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009644 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800953a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800953e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009546:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800954a:	e021      	b.n	8009590 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	ee07 3a90 	vmov	s15, r3
 8009552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009556:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800964c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800955a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800955e:	4b37      	ldr	r3, [pc, #220]	; (800963c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009566:	ee07 3a90 	vmov	s15, r3
 800956a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800956e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009572:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009644 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800957a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800957e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800958a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800958e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009590:	4b2a      	ldr	r3, [pc, #168]	; (800963c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009594:	0a5b      	lsrs	r3, r3, #9
 8009596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800959a:	ee07 3a90 	vmov	s15, r3
 800959e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80095a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80095aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80095ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095b6:	ee17 2a90 	vmov	r2, s15
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80095be:	4b1f      	ldr	r3, [pc, #124]	; (800963c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095c2:	0c1b      	lsrs	r3, r3, #16
 80095c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095c8:	ee07 3a90 	vmov	s15, r3
 80095cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80095d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80095d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80095dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095e4:	ee17 2a90 	vmov	r2, s15
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80095ec:	4b13      	ldr	r3, [pc, #76]	; (800963c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f0:	0e1b      	lsrs	r3, r3, #24
 80095f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095f6:	ee07 3a90 	vmov	s15, r3
 80095fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009602:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009606:	edd7 6a07 	vldr	s13, [r7, #28]
 800960a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800960e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009612:	ee17 2a90 	vmov	r2, s15
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800961a:	e008      	b.n	800962e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2200      	movs	r2, #0
 8009620:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2200      	movs	r2, #0
 8009626:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2200      	movs	r2, #0
 800962c:	609a      	str	r2, [r3, #8]
}
 800962e:	bf00      	nop
 8009630:	3724      	adds	r7, #36	; 0x24
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr
 800963a:	bf00      	nop
 800963c:	58024400 	.word	0x58024400
 8009640:	03d09000 	.word	0x03d09000
 8009644:	46000000 	.word	0x46000000
 8009648:	4c742400 	.word	0x4c742400
 800964c:	4a742400 	.word	0x4a742400
 8009650:	4bbebc20 	.word	0x4bbebc20

08009654 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009654:	b480      	push	{r7}
 8009656:	b089      	sub	sp, #36	; 0x24
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800965c:	4ba1      	ldr	r3, [pc, #644]	; (80098e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800965e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009660:	f003 0303 	and.w	r3, r3, #3
 8009664:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009666:	4b9f      	ldr	r3, [pc, #636]	; (80098e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800966a:	0d1b      	lsrs	r3, r3, #20
 800966c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009670:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009672:	4b9c      	ldr	r3, [pc, #624]	; (80098e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009676:	0a1b      	lsrs	r3, r3, #8
 8009678:	f003 0301 	and.w	r3, r3, #1
 800967c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800967e:	4b99      	ldr	r3, [pc, #612]	; (80098e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009682:	08db      	lsrs	r3, r3, #3
 8009684:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009688:	693a      	ldr	r2, [r7, #16]
 800968a:	fb02 f303 	mul.w	r3, r2, r3
 800968e:	ee07 3a90 	vmov	s15, r3
 8009692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009696:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	2b00      	cmp	r3, #0
 800969e:	f000 8111 	beq.w	80098c4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80096a2:	69bb      	ldr	r3, [r7, #24]
 80096a4:	2b02      	cmp	r3, #2
 80096a6:	f000 8083 	beq.w	80097b0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80096aa:	69bb      	ldr	r3, [r7, #24]
 80096ac:	2b02      	cmp	r3, #2
 80096ae:	f200 80a1 	bhi.w	80097f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80096b2:	69bb      	ldr	r3, [r7, #24]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d003      	beq.n	80096c0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80096b8:	69bb      	ldr	r3, [r7, #24]
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d056      	beq.n	800976c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80096be:	e099      	b.n	80097f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096c0:	4b88      	ldr	r3, [pc, #544]	; (80098e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f003 0320 	and.w	r3, r3, #32
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d02d      	beq.n	8009728 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80096cc:	4b85      	ldr	r3, [pc, #532]	; (80098e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	08db      	lsrs	r3, r3, #3
 80096d2:	f003 0303 	and.w	r3, r3, #3
 80096d6:	4a84      	ldr	r2, [pc, #528]	; (80098e8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80096d8:	fa22 f303 	lsr.w	r3, r2, r3
 80096dc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	ee07 3a90 	vmov	s15, r3
 80096e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	ee07 3a90 	vmov	s15, r3
 80096ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096f6:	4b7b      	ldr	r3, [pc, #492]	; (80098e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096fe:	ee07 3a90 	vmov	s15, r3
 8009702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009706:	ed97 6a03 	vldr	s12, [r7, #12]
 800970a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80098ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800970e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009716:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800971a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800971e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009722:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009726:	e087      	b.n	8009838 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	ee07 3a90 	vmov	s15, r3
 800972e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009732:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80098f0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800973a:	4b6a      	ldr	r3, [pc, #424]	; (80098e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800973c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800973e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009742:	ee07 3a90 	vmov	s15, r3
 8009746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800974a:	ed97 6a03 	vldr	s12, [r7, #12]
 800974e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80098ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009752:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800975a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800975e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009766:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800976a:	e065      	b.n	8009838 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	ee07 3a90 	vmov	s15, r3
 8009772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009776:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80098f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800977a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800977e:	4b59      	ldr	r3, [pc, #356]	; (80098e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009786:	ee07 3a90 	vmov	s15, r3
 800978a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800978e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009792:	eddf 5a56 	vldr	s11, [pc, #344]	; 80098ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800979a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800979e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80097ae:	e043      	b.n	8009838 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	ee07 3a90 	vmov	s15, r3
 80097b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097ba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80098f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80097be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097c2:	4b48      	ldr	r3, [pc, #288]	; (80098e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097ca:	ee07 3a90 	vmov	s15, r3
 80097ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80097d6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80098ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80097da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80097f2:	e021      	b.n	8009838 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	ee07 3a90 	vmov	s15, r3
 80097fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097fe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80098f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009806:	4b37      	ldr	r3, [pc, #220]	; (80098e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800980a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800980e:	ee07 3a90 	vmov	s15, r3
 8009812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009816:	ed97 6a03 	vldr	s12, [r7, #12]
 800981a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80098ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800981e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009826:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800982a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800982e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009832:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009836:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009838:	4b2a      	ldr	r3, [pc, #168]	; (80098e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800983a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800983c:	0a5b      	lsrs	r3, r3, #9
 800983e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009842:	ee07 3a90 	vmov	s15, r3
 8009846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800984a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800984e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009852:	edd7 6a07 	vldr	s13, [r7, #28]
 8009856:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800985a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800985e:	ee17 2a90 	vmov	r2, s15
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009866:	4b1f      	ldr	r3, [pc, #124]	; (80098e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800986a:	0c1b      	lsrs	r3, r3, #16
 800986c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009870:	ee07 3a90 	vmov	s15, r3
 8009874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009878:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800987c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009880:	edd7 6a07 	vldr	s13, [r7, #28]
 8009884:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009888:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800988c:	ee17 2a90 	vmov	r2, s15
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009894:	4b13      	ldr	r3, [pc, #76]	; (80098e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009898:	0e1b      	lsrs	r3, r3, #24
 800989a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800989e:	ee07 3a90 	vmov	s15, r3
 80098a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80098aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80098b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098ba:	ee17 2a90 	vmov	r2, s15
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80098c2:	e008      	b.n	80098d6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2200      	movs	r2, #0
 80098c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2200      	movs	r2, #0
 80098ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	609a      	str	r2, [r3, #8]
}
 80098d6:	bf00      	nop
 80098d8:	3724      	adds	r7, #36	; 0x24
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop
 80098e4:	58024400 	.word	0x58024400
 80098e8:	03d09000 	.word	0x03d09000
 80098ec:	46000000 	.word	0x46000000
 80098f0:	4c742400 	.word	0x4c742400
 80098f4:	4a742400 	.word	0x4a742400
 80098f8:	4bbebc20 	.word	0x4bbebc20

080098fc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b089      	sub	sp, #36	; 0x24
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009904:	4ba0      	ldr	r3, [pc, #640]	; (8009b88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009908:	f003 0303 	and.w	r3, r3, #3
 800990c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800990e:	4b9e      	ldr	r3, [pc, #632]	; (8009b88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009912:	091b      	lsrs	r3, r3, #4
 8009914:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009918:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800991a:	4b9b      	ldr	r3, [pc, #620]	; (8009b88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800991c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800991e:	f003 0301 	and.w	r3, r3, #1
 8009922:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009924:	4b98      	ldr	r3, [pc, #608]	; (8009b88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009928:	08db      	lsrs	r3, r3, #3
 800992a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800992e:	693a      	ldr	r2, [r7, #16]
 8009930:	fb02 f303 	mul.w	r3, r2, r3
 8009934:	ee07 3a90 	vmov	s15, r3
 8009938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800993c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	2b00      	cmp	r3, #0
 8009944:	f000 8111 	beq.w	8009b6a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009948:	69bb      	ldr	r3, [r7, #24]
 800994a:	2b02      	cmp	r3, #2
 800994c:	f000 8083 	beq.w	8009a56 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009950:	69bb      	ldr	r3, [r7, #24]
 8009952:	2b02      	cmp	r3, #2
 8009954:	f200 80a1 	bhi.w	8009a9a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009958:	69bb      	ldr	r3, [r7, #24]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d003      	beq.n	8009966 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800995e:	69bb      	ldr	r3, [r7, #24]
 8009960:	2b01      	cmp	r3, #1
 8009962:	d056      	beq.n	8009a12 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009964:	e099      	b.n	8009a9a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009966:	4b88      	ldr	r3, [pc, #544]	; (8009b88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f003 0320 	and.w	r3, r3, #32
 800996e:	2b00      	cmp	r3, #0
 8009970:	d02d      	beq.n	80099ce <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009972:	4b85      	ldr	r3, [pc, #532]	; (8009b88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	08db      	lsrs	r3, r3, #3
 8009978:	f003 0303 	and.w	r3, r3, #3
 800997c:	4a83      	ldr	r2, [pc, #524]	; (8009b8c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800997e:	fa22 f303 	lsr.w	r3, r2, r3
 8009982:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	ee07 3a90 	vmov	s15, r3
 800998a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	ee07 3a90 	vmov	s15, r3
 8009994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009998:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800999c:	4b7a      	ldr	r3, [pc, #488]	; (8009b88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800999e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099a4:	ee07 3a90 	vmov	s15, r3
 80099a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80099b0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009b90 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80099b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099c8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80099cc:	e087      	b.n	8009ade <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	ee07 3a90 	vmov	s15, r3
 80099d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099d8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009b94 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80099dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099e0:	4b69      	ldr	r3, [pc, #420]	; (8009b88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099e8:	ee07 3a90 	vmov	s15, r3
 80099ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80099f4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009b90 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80099f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a0c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a10:	e065      	b.n	8009ade <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	ee07 3a90 	vmov	s15, r3
 8009a18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a1c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009b98 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009a20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a24:	4b58      	ldr	r3, [pc, #352]	; (8009b88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a2c:	ee07 3a90 	vmov	s15, r3
 8009a30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a34:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a38:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009b90 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009a3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a50:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a54:	e043      	b.n	8009ade <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	ee07 3a90 	vmov	s15, r3
 8009a5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a60:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009b9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009a64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a68:	4b47      	ldr	r3, [pc, #284]	; (8009b88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a70:	ee07 3a90 	vmov	s15, r3
 8009a74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a78:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a7c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009b90 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009a80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a94:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a98:	e021      	b.n	8009ade <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	ee07 3a90 	vmov	s15, r3
 8009aa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aa4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009b94 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009aa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aac:	4b36      	ldr	r3, [pc, #216]	; (8009b88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ab4:	ee07 3a90 	vmov	s15, r3
 8009ab8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009abc:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ac0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009b90 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009ac4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ac8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009acc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ad0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ad4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ad8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009adc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009ade:	4b2a      	ldr	r3, [pc, #168]	; (8009b88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ae2:	0a5b      	lsrs	r3, r3, #9
 8009ae4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ae8:	ee07 3a90 	vmov	s15, r3
 8009aec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009af0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009af4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009af8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009afc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b04:	ee17 2a90 	vmov	r2, s15
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009b0c:	4b1e      	ldr	r3, [pc, #120]	; (8009b88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b10:	0c1b      	lsrs	r3, r3, #16
 8009b12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b16:	ee07 3a90 	vmov	s15, r3
 8009b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b26:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b32:	ee17 2a90 	vmov	r2, s15
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009b3a:	4b13      	ldr	r3, [pc, #76]	; (8009b88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b3e:	0e1b      	lsrs	r3, r3, #24
 8009b40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b44:	ee07 3a90 	vmov	s15, r3
 8009b48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b54:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b60:	ee17 2a90 	vmov	r2, s15
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009b68:	e008      	b.n	8009b7c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	609a      	str	r2, [r3, #8]
}
 8009b7c:	bf00      	nop
 8009b7e:	3724      	adds	r7, #36	; 0x24
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr
 8009b88:	58024400 	.word	0x58024400
 8009b8c:	03d09000 	.word	0x03d09000
 8009b90:	46000000 	.word	0x46000000
 8009b94:	4c742400 	.word	0x4c742400
 8009b98:	4a742400 	.word	0x4a742400
 8009b9c:	4bbebc20 	.word	0x4bbebc20

08009ba0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009baa:	2300      	movs	r3, #0
 8009bac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009bae:	4b53      	ldr	r3, [pc, #332]	; (8009cfc <RCCEx_PLL2_Config+0x15c>)
 8009bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bb2:	f003 0303 	and.w	r3, r3, #3
 8009bb6:	2b03      	cmp	r3, #3
 8009bb8:	d101      	bne.n	8009bbe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	e099      	b.n	8009cf2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009bbe:	4b4f      	ldr	r3, [pc, #316]	; (8009cfc <RCCEx_PLL2_Config+0x15c>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	4a4e      	ldr	r2, [pc, #312]	; (8009cfc <RCCEx_PLL2_Config+0x15c>)
 8009bc4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009bc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009bca:	f7f8 fd57 	bl	800267c <HAL_GetTick>
 8009bce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009bd0:	e008      	b.n	8009be4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009bd2:	f7f8 fd53 	bl	800267c <HAL_GetTick>
 8009bd6:	4602      	mov	r2, r0
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	1ad3      	subs	r3, r2, r3
 8009bdc:	2b02      	cmp	r3, #2
 8009bde:	d901      	bls.n	8009be4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009be0:	2303      	movs	r3, #3
 8009be2:	e086      	b.n	8009cf2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009be4:	4b45      	ldr	r3, [pc, #276]	; (8009cfc <RCCEx_PLL2_Config+0x15c>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d1f0      	bne.n	8009bd2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009bf0:	4b42      	ldr	r3, [pc, #264]	; (8009cfc <RCCEx_PLL2_Config+0x15c>)
 8009bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bf4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	031b      	lsls	r3, r3, #12
 8009bfe:	493f      	ldr	r1, [pc, #252]	; (8009cfc <RCCEx_PLL2_Config+0x15c>)
 8009c00:	4313      	orrs	r3, r2
 8009c02:	628b      	str	r3, [r1, #40]	; 0x28
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	3b01      	subs	r3, #1
 8009c0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	689b      	ldr	r3, [r3, #8]
 8009c12:	3b01      	subs	r3, #1
 8009c14:	025b      	lsls	r3, r3, #9
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	431a      	orrs	r2, r3
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	68db      	ldr	r3, [r3, #12]
 8009c1e:	3b01      	subs	r3, #1
 8009c20:	041b      	lsls	r3, r3, #16
 8009c22:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009c26:	431a      	orrs	r2, r3
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	691b      	ldr	r3, [r3, #16]
 8009c2c:	3b01      	subs	r3, #1
 8009c2e:	061b      	lsls	r3, r3, #24
 8009c30:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009c34:	4931      	ldr	r1, [pc, #196]	; (8009cfc <RCCEx_PLL2_Config+0x15c>)
 8009c36:	4313      	orrs	r3, r2
 8009c38:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009c3a:	4b30      	ldr	r3, [pc, #192]	; (8009cfc <RCCEx_PLL2_Config+0x15c>)
 8009c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c3e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	695b      	ldr	r3, [r3, #20]
 8009c46:	492d      	ldr	r1, [pc, #180]	; (8009cfc <RCCEx_PLL2_Config+0x15c>)
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009c4c:	4b2b      	ldr	r3, [pc, #172]	; (8009cfc <RCCEx_PLL2_Config+0x15c>)
 8009c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c50:	f023 0220 	bic.w	r2, r3, #32
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	699b      	ldr	r3, [r3, #24]
 8009c58:	4928      	ldr	r1, [pc, #160]	; (8009cfc <RCCEx_PLL2_Config+0x15c>)
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009c5e:	4b27      	ldr	r3, [pc, #156]	; (8009cfc <RCCEx_PLL2_Config+0x15c>)
 8009c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c62:	4a26      	ldr	r2, [pc, #152]	; (8009cfc <RCCEx_PLL2_Config+0x15c>)
 8009c64:	f023 0310 	bic.w	r3, r3, #16
 8009c68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009c6a:	4b24      	ldr	r3, [pc, #144]	; (8009cfc <RCCEx_PLL2_Config+0x15c>)
 8009c6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c6e:	4b24      	ldr	r3, [pc, #144]	; (8009d00 <RCCEx_PLL2_Config+0x160>)
 8009c70:	4013      	ands	r3, r2
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	69d2      	ldr	r2, [r2, #28]
 8009c76:	00d2      	lsls	r2, r2, #3
 8009c78:	4920      	ldr	r1, [pc, #128]	; (8009cfc <RCCEx_PLL2_Config+0x15c>)
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009c7e:	4b1f      	ldr	r3, [pc, #124]	; (8009cfc <RCCEx_PLL2_Config+0x15c>)
 8009c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c82:	4a1e      	ldr	r2, [pc, #120]	; (8009cfc <RCCEx_PLL2_Config+0x15c>)
 8009c84:	f043 0310 	orr.w	r3, r3, #16
 8009c88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d106      	bne.n	8009c9e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009c90:	4b1a      	ldr	r3, [pc, #104]	; (8009cfc <RCCEx_PLL2_Config+0x15c>)
 8009c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c94:	4a19      	ldr	r2, [pc, #100]	; (8009cfc <RCCEx_PLL2_Config+0x15c>)
 8009c96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009c9c:	e00f      	b.n	8009cbe <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d106      	bne.n	8009cb2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009ca4:	4b15      	ldr	r3, [pc, #84]	; (8009cfc <RCCEx_PLL2_Config+0x15c>)
 8009ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca8:	4a14      	ldr	r2, [pc, #80]	; (8009cfc <RCCEx_PLL2_Config+0x15c>)
 8009caa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009cae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009cb0:	e005      	b.n	8009cbe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009cb2:	4b12      	ldr	r3, [pc, #72]	; (8009cfc <RCCEx_PLL2_Config+0x15c>)
 8009cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb6:	4a11      	ldr	r2, [pc, #68]	; (8009cfc <RCCEx_PLL2_Config+0x15c>)
 8009cb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009cbc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009cbe:	4b0f      	ldr	r3, [pc, #60]	; (8009cfc <RCCEx_PLL2_Config+0x15c>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4a0e      	ldr	r2, [pc, #56]	; (8009cfc <RCCEx_PLL2_Config+0x15c>)
 8009cc4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009cc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009cca:	f7f8 fcd7 	bl	800267c <HAL_GetTick>
 8009cce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009cd0:	e008      	b.n	8009ce4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009cd2:	f7f8 fcd3 	bl	800267c <HAL_GetTick>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	1ad3      	subs	r3, r2, r3
 8009cdc:	2b02      	cmp	r3, #2
 8009cde:	d901      	bls.n	8009ce4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009ce0:	2303      	movs	r3, #3
 8009ce2:	e006      	b.n	8009cf2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ce4:	4b05      	ldr	r3, [pc, #20]	; (8009cfc <RCCEx_PLL2_Config+0x15c>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d0f0      	beq.n	8009cd2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3710      	adds	r7, #16
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	bf00      	nop
 8009cfc:	58024400 	.word	0x58024400
 8009d00:	ffff0007 	.word	0xffff0007

08009d04 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009d12:	4b53      	ldr	r3, [pc, #332]	; (8009e60 <RCCEx_PLL3_Config+0x15c>)
 8009d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d16:	f003 0303 	and.w	r3, r3, #3
 8009d1a:	2b03      	cmp	r3, #3
 8009d1c:	d101      	bne.n	8009d22 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e099      	b.n	8009e56 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009d22:	4b4f      	ldr	r3, [pc, #316]	; (8009e60 <RCCEx_PLL3_Config+0x15c>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4a4e      	ldr	r2, [pc, #312]	; (8009e60 <RCCEx_PLL3_Config+0x15c>)
 8009d28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d2e:	f7f8 fca5 	bl	800267c <HAL_GetTick>
 8009d32:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009d34:	e008      	b.n	8009d48 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009d36:	f7f8 fca1 	bl	800267c <HAL_GetTick>
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	1ad3      	subs	r3, r2, r3
 8009d40:	2b02      	cmp	r3, #2
 8009d42:	d901      	bls.n	8009d48 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009d44:	2303      	movs	r3, #3
 8009d46:	e086      	b.n	8009e56 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009d48:	4b45      	ldr	r3, [pc, #276]	; (8009e60 <RCCEx_PLL3_Config+0x15c>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d1f0      	bne.n	8009d36 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009d54:	4b42      	ldr	r3, [pc, #264]	; (8009e60 <RCCEx_PLL3_Config+0x15c>)
 8009d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d58:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	051b      	lsls	r3, r3, #20
 8009d62:	493f      	ldr	r1, [pc, #252]	; (8009e60 <RCCEx_PLL3_Config+0x15c>)
 8009d64:	4313      	orrs	r3, r2
 8009d66:	628b      	str	r3, [r1, #40]	; 0x28
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	3b01      	subs	r3, #1
 8009d6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	689b      	ldr	r3, [r3, #8]
 8009d76:	3b01      	subs	r3, #1
 8009d78:	025b      	lsls	r3, r3, #9
 8009d7a:	b29b      	uxth	r3, r3
 8009d7c:	431a      	orrs	r2, r3
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	68db      	ldr	r3, [r3, #12]
 8009d82:	3b01      	subs	r3, #1
 8009d84:	041b      	lsls	r3, r3, #16
 8009d86:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009d8a:	431a      	orrs	r2, r3
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	691b      	ldr	r3, [r3, #16]
 8009d90:	3b01      	subs	r3, #1
 8009d92:	061b      	lsls	r3, r3, #24
 8009d94:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009d98:	4931      	ldr	r1, [pc, #196]	; (8009e60 <RCCEx_PLL3_Config+0x15c>)
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009d9e:	4b30      	ldr	r3, [pc, #192]	; (8009e60 <RCCEx_PLL3_Config+0x15c>)
 8009da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	695b      	ldr	r3, [r3, #20]
 8009daa:	492d      	ldr	r1, [pc, #180]	; (8009e60 <RCCEx_PLL3_Config+0x15c>)
 8009dac:	4313      	orrs	r3, r2
 8009dae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009db0:	4b2b      	ldr	r3, [pc, #172]	; (8009e60 <RCCEx_PLL3_Config+0x15c>)
 8009db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	699b      	ldr	r3, [r3, #24]
 8009dbc:	4928      	ldr	r1, [pc, #160]	; (8009e60 <RCCEx_PLL3_Config+0x15c>)
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009dc2:	4b27      	ldr	r3, [pc, #156]	; (8009e60 <RCCEx_PLL3_Config+0x15c>)
 8009dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc6:	4a26      	ldr	r2, [pc, #152]	; (8009e60 <RCCEx_PLL3_Config+0x15c>)
 8009dc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009dcc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009dce:	4b24      	ldr	r3, [pc, #144]	; (8009e60 <RCCEx_PLL3_Config+0x15c>)
 8009dd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009dd2:	4b24      	ldr	r3, [pc, #144]	; (8009e64 <RCCEx_PLL3_Config+0x160>)
 8009dd4:	4013      	ands	r3, r2
 8009dd6:	687a      	ldr	r2, [r7, #4]
 8009dd8:	69d2      	ldr	r2, [r2, #28]
 8009dda:	00d2      	lsls	r2, r2, #3
 8009ddc:	4920      	ldr	r1, [pc, #128]	; (8009e60 <RCCEx_PLL3_Config+0x15c>)
 8009dde:	4313      	orrs	r3, r2
 8009de0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009de2:	4b1f      	ldr	r3, [pc, #124]	; (8009e60 <RCCEx_PLL3_Config+0x15c>)
 8009de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de6:	4a1e      	ldr	r2, [pc, #120]	; (8009e60 <RCCEx_PLL3_Config+0x15c>)
 8009de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009dec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d106      	bne.n	8009e02 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009df4:	4b1a      	ldr	r3, [pc, #104]	; (8009e60 <RCCEx_PLL3_Config+0x15c>)
 8009df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df8:	4a19      	ldr	r2, [pc, #100]	; (8009e60 <RCCEx_PLL3_Config+0x15c>)
 8009dfa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009dfe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009e00:	e00f      	b.n	8009e22 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	d106      	bne.n	8009e16 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009e08:	4b15      	ldr	r3, [pc, #84]	; (8009e60 <RCCEx_PLL3_Config+0x15c>)
 8009e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e0c:	4a14      	ldr	r2, [pc, #80]	; (8009e60 <RCCEx_PLL3_Config+0x15c>)
 8009e0e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009e12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009e14:	e005      	b.n	8009e22 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009e16:	4b12      	ldr	r3, [pc, #72]	; (8009e60 <RCCEx_PLL3_Config+0x15c>)
 8009e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e1a:	4a11      	ldr	r2, [pc, #68]	; (8009e60 <RCCEx_PLL3_Config+0x15c>)
 8009e1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009e20:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009e22:	4b0f      	ldr	r3, [pc, #60]	; (8009e60 <RCCEx_PLL3_Config+0x15c>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4a0e      	ldr	r2, [pc, #56]	; (8009e60 <RCCEx_PLL3_Config+0x15c>)
 8009e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e2e:	f7f8 fc25 	bl	800267c <HAL_GetTick>
 8009e32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009e34:	e008      	b.n	8009e48 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009e36:	f7f8 fc21 	bl	800267c <HAL_GetTick>
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	1ad3      	subs	r3, r2, r3
 8009e40:	2b02      	cmp	r3, #2
 8009e42:	d901      	bls.n	8009e48 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009e44:	2303      	movs	r3, #3
 8009e46:	e006      	b.n	8009e56 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009e48:	4b05      	ldr	r3, [pc, #20]	; (8009e60 <RCCEx_PLL3_Config+0x15c>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d0f0      	beq.n	8009e36 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3710      	adds	r7, #16
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	58024400 	.word	0x58024400
 8009e64:	ffff0007 	.word	0xffff0007

08009e68 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d101      	bne.n	8009e7a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8009e76:	2301      	movs	r3, #1
 8009e78:	e04d      	b.n	8009f16 <HAL_RNG_Init+0xae>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	7a5b      	ldrb	r3, [r3, #9]
 8009e7e:	b2db      	uxtb	r3, r3
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d105      	bne.n	8009e90 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2200      	movs	r2, #0
 8009e88:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f7f7 fbbe 	bl	800160c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2202      	movs	r2, #2
 8009e94:	725a      	strb	r2, [r3, #9]
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f023 0120 	bic.w	r1, r3, #32
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	685a      	ldr	r2, [r3, #4]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	430a      	orrs	r2, r1
 8009eaa:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	681a      	ldr	r2, [r3, #0]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f042 0204 	orr.w	r2, r2, #4
 8009eba:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ec6:	2b40      	cmp	r3, #64	; 0x40
 8009ec8:	d104      	bne.n	8009ed4 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2204      	movs	r2, #4
 8009ece:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	e020      	b.n	8009f16 <HAL_RNG_Init+0xae>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8009ed4:	f7f8 fbd2 	bl	800267c <HAL_GetTick>
 8009ed8:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8009eda:	e00e      	b.n	8009efa <HAL_RNG_Init+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8009edc:	f7f8 fbce 	bl	800267c <HAL_GetTick>
 8009ee0:	4602      	mov	r2, r0
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	1ad3      	subs	r3, r2, r3
 8009ee6:	2b02      	cmp	r3, #2
 8009ee8:	d907      	bls.n	8009efa <HAL_RNG_Init+0x92>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2204      	movs	r2, #4
 8009eee:	725a      	strb	r2, [r3, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2202      	movs	r2, #2
 8009ef4:	60da      	str	r2, [r3, #12]
      return HAL_ERROR;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	e00d      	b.n	8009f16 <HAL_RNG_Init+0xae>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	f003 0304 	and.w	r3, r3, #4
 8009f04:	2b04      	cmp	r3, #4
 8009f06:	d0e9      	beq.n	8009edc <HAL_RNG_Init+0x74>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2200      	movs	r2, #0
 8009f12:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8009f14:	2300      	movs	r3, #0
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3710      	adds	r7, #16
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}

08009f1e <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8009f1e:	b580      	push	{r7, lr}
 8009f20:	b086      	sub	sp, #24
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	60f8      	str	r0, [r7, #12]
 8009f26:	60b9      	str	r1, [r7, #8]
 8009f28:	607a      	str	r2, [r7, #4]
 8009f2a:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	2b02      	cmp	r3, #2
 8009f30:	d904      	bls.n	8009f3c <HAL_SAI_InitProtocol+0x1e>
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	3b03      	subs	r3, #3
 8009f36:	2b01      	cmp	r3, #1
 8009f38:	d812      	bhi.n	8009f60 <HAL_SAI_InitProtocol+0x42>
 8009f3a:	e008      	b.n	8009f4e <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	68b9      	ldr	r1, [r7, #8]
 8009f42:	68f8      	ldr	r0, [r7, #12]
 8009f44:	f000 fd0e 	bl	800a964 <SAI_InitI2S>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	75fb      	strb	r3, [r7, #23]
      break;
 8009f4c:	e00b      	b.n	8009f66 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	68b9      	ldr	r1, [r7, #8]
 8009f54:	68f8      	ldr	r0, [r7, #12]
 8009f56:	f000 fdb7 	bl	800aac8 <SAI_InitPCM>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	75fb      	strb	r3, [r7, #23]
      break;
 8009f5e:	e002      	b.n	8009f66 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8009f60:	2301      	movs	r3, #1
 8009f62:	75fb      	strb	r3, [r7, #23]
      break;
 8009f64:	bf00      	nop
  }

  if (status == HAL_OK)
 8009f66:	7dfb      	ldrb	r3, [r7, #23]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d104      	bne.n	8009f76 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8009f6c:	68f8      	ldr	r0, [r7, #12]
 8009f6e:	f000 f807 	bl	8009f80 <HAL_SAI_Init>
 8009f72:	4603      	mov	r3, r0
 8009f74:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3718      	adds	r7, #24
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b08a      	sub	sp, #40	; 0x28
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d101      	bne.n	8009f92 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e283      	b.n	800a49a <HAL_SAI_Init+0x51a>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8009f92:	f7f8 fba3 	bl	80026dc <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d113      	bne.n	8009fc8 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a94      	ldr	r2, [pc, #592]	; (800a1f8 <HAL_SAI_Init+0x278>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d004      	beq.n	8009fb4 <HAL_SAI_Init+0x34>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4a93      	ldr	r2, [pc, #588]	; (800a1fc <HAL_SAI_Init+0x27c>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d107      	bne.n	8009fc4 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d103      	bne.n	8009fc4 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d001      	beq.n	8009fc8 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	e268      	b.n	800a49a <HAL_SAI_Init+0x51a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4a8a      	ldr	r2, [pc, #552]	; (800a1f8 <HAL_SAI_Init+0x278>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d004      	beq.n	8009fdc <HAL_SAI_Init+0x5c>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a8a      	ldr	r2, [pc, #552]	; (800a200 <HAL_SAI_Init+0x280>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d102      	bne.n	8009fe2 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8009fdc:	4b89      	ldr	r3, [pc, #548]	; (800a204 <HAL_SAI_Init+0x284>)
 8009fde:	61bb      	str	r3, [r7, #24]
 8009fe0:	e028      	b.n	800a034 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	4a88      	ldr	r2, [pc, #544]	; (800a208 <HAL_SAI_Init+0x288>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d004      	beq.n	8009ff6 <HAL_SAI_Init+0x76>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4a86      	ldr	r2, [pc, #536]	; (800a20c <HAL_SAI_Init+0x28c>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d102      	bne.n	8009ffc <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8009ff6:	4b86      	ldr	r3, [pc, #536]	; (800a210 <HAL_SAI_Init+0x290>)
 8009ff8:	61bb      	str	r3, [r7, #24]
 8009ffa:	e01b      	b.n	800a034 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a84      	ldr	r2, [pc, #528]	; (800a214 <HAL_SAI_Init+0x294>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d004      	beq.n	800a010 <HAL_SAI_Init+0x90>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a83      	ldr	r2, [pc, #524]	; (800a218 <HAL_SAI_Init+0x298>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d102      	bne.n	800a016 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800a010:	4b82      	ldr	r3, [pc, #520]	; (800a21c <HAL_SAI_Init+0x29c>)
 800a012:	61bb      	str	r3, [r7, #24]
 800a014:	e00e      	b.n	800a034 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a78      	ldr	r2, [pc, #480]	; (800a1fc <HAL_SAI_Init+0x27c>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d004      	beq.n	800a02a <HAL_SAI_Init+0xaa>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4a7e      	ldr	r2, [pc, #504]	; (800a220 <HAL_SAI_Init+0x2a0>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d102      	bne.n	800a030 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800a02a:	4b7e      	ldr	r3, [pc, #504]	; (800a224 <HAL_SAI_Init+0x2a4>)
 800a02c:	61bb      	str	r3, [r7, #24]
 800a02e:	e001      	b.n	800a034 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800a030:	2301      	movs	r3, #1
 800a032:	e232      	b.n	800a49a <HAL_SAI_Init+0x51a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800a03a:	b2db      	uxtb	r3, r3
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d106      	bne.n	800a04e <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2200      	movs	r2, #0
 800a044:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f7f7 fb4d 	bl	80016e8 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 fdbc 	bl	800abcc <SAI_Disable>
 800a054:	4603      	mov	r3, r0
 800a056:	2b00      	cmp	r3, #0
 800a058:	d001      	beq.n	800a05e <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800a05a:	2301      	movs	r3, #1
 800a05c:	e21d      	b.n	800a49a <HAL_SAI_Init+0x51a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2202      	movs	r2, #2
 800a062:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	68db      	ldr	r3, [r3, #12]
 800a06a:	2b02      	cmp	r3, #2
 800a06c:	d00c      	beq.n	800a088 <HAL_SAI_Init+0x108>
 800a06e:	2b02      	cmp	r3, #2
 800a070:	d80d      	bhi.n	800a08e <HAL_SAI_Init+0x10e>
 800a072:	2b00      	cmp	r3, #0
 800a074:	d002      	beq.n	800a07c <HAL_SAI_Init+0xfc>
 800a076:	2b01      	cmp	r3, #1
 800a078:	d003      	beq.n	800a082 <HAL_SAI_Init+0x102>
 800a07a:	e008      	b.n	800a08e <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800a07c:	2300      	movs	r3, #0
 800a07e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a080:	e008      	b.n	800a094 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a082:	2310      	movs	r3, #16
 800a084:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a086:	e005      	b.n	800a094 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a088:	2320      	movs	r3, #32
 800a08a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a08c:	e002      	b.n	800a094 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800a08e:	2300      	movs	r3, #0
 800a090:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a092:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	689b      	ldr	r3, [r3, #8]
 800a098:	2b05      	cmp	r3, #5
 800a09a:	d832      	bhi.n	800a102 <HAL_SAI_Init+0x182>
 800a09c:	a201      	add	r2, pc, #4	; (adr r2, 800a0a4 <HAL_SAI_Init+0x124>)
 800a09e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a2:	bf00      	nop
 800a0a4:	0800a0bd 	.word	0x0800a0bd
 800a0a8:	0800a0c3 	.word	0x0800a0c3
 800a0ac:	0800a0cb 	.word	0x0800a0cb
 800a0b0:	0800a0d3 	.word	0x0800a0d3
 800a0b4:	0800a0e3 	.word	0x0800a0e3
 800a0b8:	0800a0f3 	.word	0x0800a0f3
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	61fb      	str	r3, [r7, #28]
      break;
 800a0c0:	e022      	b.n	800a108 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800a0c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0c6:	61fb      	str	r3, [r7, #28]
      break;
 800a0c8:	e01e      	b.n	800a108 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a0ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a0ce:	61fb      	str	r3, [r7, #28]
      break;
 800a0d0:	e01a      	b.n	800a108 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a0d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a0d6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800a0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0da:	f043 0301 	orr.w	r3, r3, #1
 800a0de:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a0e0:	e012      	b.n	800a108 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a0e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a0e6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800a0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ea:	f043 0302 	orr.w	r3, r3, #2
 800a0ee:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a0f0:	e00a      	b.n	800a108 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a0f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a0f6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800a0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fa:	f043 0303 	orr.w	r3, r3, #3
 800a0fe:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a100:	e002      	b.n	800a108 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800a102:	2300      	movs	r3, #0
 800a104:	61fb      	str	r3, [r7, #28]
      break;
 800a106:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800a108:	69bb      	ldr	r3, [r7, #24]
 800a10a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a10c:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6a1b      	ldr	r3, [r3, #32]
 800a112:	2b00      	cmp	r3, #0
 800a114:	f000 80ba 	beq.w	800a28c <HAL_SAI_Init+0x30c>
  {
    uint32_t freq = 0;
 800a118:	2300      	movs	r3, #0
 800a11a:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a35      	ldr	r2, [pc, #212]	; (800a1f8 <HAL_SAI_Init+0x278>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d004      	beq.n	800a130 <HAL_SAI_Init+0x1b0>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	4a35      	ldr	r2, [pc, #212]	; (800a200 <HAL_SAI_Init+0x280>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d104      	bne.n	800a13a <HAL_SAI_Init+0x1ba>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a130:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a134:	f7fe fc52 	bl	80089dc <HAL_RCCEx_GetPeriphCLKFreq>
 800a138:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a32      	ldr	r2, [pc, #200]	; (800a208 <HAL_SAI_Init+0x288>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d004      	beq.n	800a14e <HAL_SAI_Init+0x1ce>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4a30      	ldr	r2, [pc, #192]	; (800a20c <HAL_SAI_Init+0x28c>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d104      	bne.n	800a158 <HAL_SAI_Init+0x1d8>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800a14e:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a152:	f7fe fc43 	bl	80089dc <HAL_RCCEx_GetPeriphCLKFreq>
 800a156:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a2d      	ldr	r2, [pc, #180]	; (800a214 <HAL_SAI_Init+0x294>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d004      	beq.n	800a16c <HAL_SAI_Init+0x1ec>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4a2c      	ldr	r2, [pc, #176]	; (800a218 <HAL_SAI_Init+0x298>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d104      	bne.n	800a176 <HAL_SAI_Init+0x1f6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800a16c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a170:	f7fe fc34 	bl	80089dc <HAL_RCCEx_GetPeriphCLKFreq>
 800a174:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4a20      	ldr	r2, [pc, #128]	; (800a1fc <HAL_SAI_Init+0x27c>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d104      	bne.n	800a18a <HAL_SAI_Init+0x20a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800a180:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a184:	f7fe fc2a 	bl	80089dc <HAL_RCCEx_GetPeriphCLKFreq>
 800a188:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4a24      	ldr	r2, [pc, #144]	; (800a220 <HAL_SAI_Init+0x2a0>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d104      	bne.n	800a19e <HAL_SAI_Init+0x21e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800a194:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a198:	f7fe fc20 	bl	80089dc <HAL_RCCEx_GetPeriphCLKFreq>
 800a19c:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	699b      	ldr	r3, [r3, #24]
 800a1a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a1a6:	d120      	bne.n	800a1ea <HAL_SAI_Init+0x26a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1ac:	2b04      	cmp	r3, #4
 800a1ae:	d102      	bne.n	800a1b6 <HAL_SAI_Init+0x236>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 800a1b0:	2340      	movs	r3, #64	; 0x40
 800a1b2:	60fb      	str	r3, [r7, #12]
 800a1b4:	e00a      	b.n	800a1cc <HAL_SAI_Init+0x24c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1ba:	2b08      	cmp	r3, #8
 800a1bc:	d103      	bne.n	800a1c6 <HAL_SAI_Init+0x246>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 800a1be:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a1c2:	60fb      	str	r3, [r7, #12]
 800a1c4:	e002      	b.n	800a1cc <HAL_SAI_Init+0x24c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1ca:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800a1cc:	697a      	ldr	r2, [r7, #20]
 800a1ce:	4613      	mov	r3, r2
 800a1d0:	009b      	lsls	r3, r3, #2
 800a1d2:	4413      	add	r3, r2
 800a1d4:	005b      	lsls	r3, r3, #1
 800a1d6:	4619      	mov	r1, r3
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6a1b      	ldr	r3, [r3, #32]
 800a1dc:	68fa      	ldr	r2, [r7, #12]
 800a1de:	fb02 f303 	mul.w	r3, r2, r3
 800a1e2:	fbb1 f3f3 	udiv	r3, r1, r3
 800a1e6:	613b      	str	r3, [r7, #16]
 800a1e8:	e02f      	b.n	800a24a <HAL_SAI_Init+0x2ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a1f2:	d119      	bne.n	800a228 <HAL_SAI_Init+0x2a8>
 800a1f4:	2302      	movs	r3, #2
 800a1f6:	e018      	b.n	800a22a <HAL_SAI_Init+0x2aa>
 800a1f8:	40015804 	.word	0x40015804
 800a1fc:	58005404 	.word	0x58005404
 800a200:	40015824 	.word	0x40015824
 800a204:	40015800 	.word	0x40015800
 800a208:	40015c04 	.word	0x40015c04
 800a20c:	40015c24 	.word	0x40015c24
 800a210:	40015c00 	.word	0x40015c00
 800a214:	40016004 	.word	0x40016004
 800a218:	40016024 	.word	0x40016024
 800a21c:	40016000 	.word	0x40016000
 800a220:	58005424 	.word	0x58005424
 800a224:	58005400 	.word	0x58005400
 800a228:	2301      	movs	r3, #1
 800a22a:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800a22c:	697a      	ldr	r2, [r7, #20]
 800a22e:	4613      	mov	r3, r2
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	4413      	add	r3, r2
 800a234:	005b      	lsls	r3, r3, #1
 800a236:	4619      	mov	r1, r3
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6a1b      	ldr	r3, [r3, #32]
 800a23c:	68ba      	ldr	r2, [r7, #8]
 800a23e:	fb02 f303 	mul.w	r3, r2, r3
 800a242:	021b      	lsls	r3, r3, #8
 800a244:	fbb1 f3f3 	udiv	r3, r1, r3
 800a248:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	4a95      	ldr	r2, [pc, #596]	; (800a4a4 <HAL_SAI_Init+0x524>)
 800a24e:	fba2 2303 	umull	r2, r3, r2, r3
 800a252:	08da      	lsrs	r2, r3, #3
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800a258:	6939      	ldr	r1, [r7, #16]
 800a25a:	4b92      	ldr	r3, [pc, #584]	; (800a4a4 <HAL_SAI_Init+0x524>)
 800a25c:	fba3 2301 	umull	r2, r3, r3, r1
 800a260:	08da      	lsrs	r2, r3, #3
 800a262:	4613      	mov	r3, r2
 800a264:	009b      	lsls	r3, r3, #2
 800a266:	4413      	add	r3, r2
 800a268:	005b      	lsls	r3, r3, #1
 800a26a:	1aca      	subs	r2, r1, r3
 800a26c:	2a08      	cmp	r2, #8
 800a26e:	d904      	bls.n	800a27a <HAL_SAI_Init+0x2fa>
    {
      hsai->Init.Mckdiv += 1U;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a274:	1c5a      	adds	r2, r3, #1
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a27e:	2b04      	cmp	r3, #4
 800a280:	d104      	bne.n	800a28c <HAL_SAI_Init+0x30c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a286:	085a      	lsrs	r2, r3, #1
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d003      	beq.n	800a29c <HAL_SAI_Init+0x31c>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	2b02      	cmp	r3, #2
 800a29a:	d109      	bne.n	800a2b0 <HAL_SAI_Init+0x330>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d101      	bne.n	800a2a8 <HAL_SAI_Init+0x328>
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	e001      	b.n	800a2ac <HAL_SAI_Init+0x32c>
 800a2a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a2ac:	623b      	str	r3, [r7, #32]
 800a2ae:	e008      	b.n	800a2c2 <HAL_SAI_Init+0x342>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	d102      	bne.n	800a2be <HAL_SAI_Init+0x33e>
 800a2b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a2bc:	e000      	b.n	800a2c0 <HAL_SAI_Init+0x340>
 800a2be:	2300      	movs	r3, #0
 800a2c0:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800a2c2:	f7f8 fa0b 	bl	80026dc <HAL_GetREVID>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2cc:	d331      	bcc.n	800a332 <HAL_SAI_Init+0x3b2>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	6819      	ldr	r1, [r3, #0]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681a      	ldr	r2, [r3, #0]
 800a2d8:	4b73      	ldr	r3, [pc, #460]	; (800a4a8 <HAL_SAI_Init+0x528>)
 800a2da:	400b      	ands	r3, r1
 800a2dc:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	6819      	ldr	r1, [r3, #0]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	685a      	ldr	r2, [r3, #4]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2ec:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a2f2:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2f8:	431a      	orrs	r2, r3
 800a2fa:	6a3b      	ldr	r3, [r7, #32]
 800a2fc:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800a2fe:	69fb      	ldr	r3, [r7, #28]
 800a300:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800a306:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	695b      	ldr	r3, [r3, #20]
 800a30c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a312:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a318:	051b      	lsls	r3, r3, #20
 800a31a:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a320:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	691b      	ldr	r3, [r3, #16]
 800a326:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	430a      	orrs	r2, r1
 800a32e:	601a      	str	r2, [r3, #0]
 800a330:	e02d      	b.n	800a38e <HAL_SAI_Init+0x40e>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	6819      	ldr	r1, [r3, #0]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681a      	ldr	r2, [r3, #0]
 800a33c:	4b5b      	ldr	r3, [pc, #364]	; (800a4ac <HAL_SAI_Init+0x52c>)
 800a33e:	400b      	ands	r3, r1
 800a340:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	6819      	ldr	r1, [r3, #0]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	685a      	ldr	r2, [r3, #4]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a350:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a356:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a35c:	431a      	orrs	r2, r3
 800a35e:	6a3b      	ldr	r3, [r7, #32]
 800a360:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800a362:	69fb      	ldr	r3, [r7, #28]
 800a364:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800a36a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	695b      	ldr	r3, [r3, #20]
 800a370:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a376:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a37c:	051b      	lsls	r3, r3, #20
 800a37e:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a384:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	430a      	orrs	r2, r1
 800a38c:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	6859      	ldr	r1, [r3, #4]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681a      	ldr	r2, [r3, #0]
 800a398:	4b45      	ldr	r3, [pc, #276]	; (800a4b0 <HAL_SAI_Init+0x530>)
 800a39a:	400b      	ands	r3, r1
 800a39c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	6859      	ldr	r1, [r3, #4]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	69da      	ldr	r2, [r3, #28]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ac:	431a      	orrs	r2, r3
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3b2:	431a      	orrs	r2, r3
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	430a      	orrs	r2, r1
 800a3ba:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	6899      	ldr	r1, [r3, #8]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681a      	ldr	r2, [r3, #0]
 800a3c6:	4b3b      	ldr	r3, [pc, #236]	; (800a4b4 <HAL_SAI_Init+0x534>)
 800a3c8:	400b      	ands	r3, r1
 800a3ca:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	6899      	ldr	r1, [r3, #8]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3d6:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a3dc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800a3e2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800a3e8:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3ee:	3b01      	subs	r3, #1
 800a3f0:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800a3f2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	430a      	orrs	r2, r1
 800a3fa:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	68d9      	ldr	r1, [r3, #12]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681a      	ldr	r2, [r3, #0]
 800a406:	f24f 0320 	movw	r3, #61472	; 0xf020
 800a40a:	400b      	ands	r3, r1
 800a40c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	68d9      	ldr	r1, [r3, #12]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a41c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a422:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a424:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a42a:	3b01      	subs	r3, #1
 800a42c:	021b      	lsls	r3, r3, #8
 800a42e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	430a      	orrs	r2, r1
 800a436:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a1e      	ldr	r2, [pc, #120]	; (800a4b8 <HAL_SAI_Init+0x538>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d004      	beq.n	800a44c <HAL_SAI_Init+0x4cc>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4a1d      	ldr	r2, [pc, #116]	; (800a4bc <HAL_SAI_Init+0x53c>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d119      	bne.n	800a480 <HAL_SAI_Init+0x500>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800a44c:	69bb      	ldr	r3, [r7, #24]
 800a44e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a450:	f023 0201 	bic.w	r2, r3, #1
 800a454:	69bb      	ldr	r3, [r7, #24]
 800a456:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a45e:	2b01      	cmp	r3, #1
 800a460:	d10e      	bne.n	800a480 <HAL_SAI_Init+0x500>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a46a:	3b01      	subs	r3, #1
 800a46c:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a46e:	431a      	orrs	r2, r3
 800a470:	69bb      	ldr	r3, [r7, #24]
 800a472:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800a474:	69bb      	ldr	r3, [r7, #24]
 800a476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a478:	f043 0201 	orr.w	r2, r3, #1
 800a47c:	69bb      	ldr	r3, [r7, #24]
 800a47e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2200      	movs	r2, #0
 800a484:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2201      	movs	r2, #1
 800a48c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2200      	movs	r2, #0
 800a494:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800a498:	2300      	movs	r3, #0
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3728      	adds	r7, #40	; 0x28
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	cccccccd 	.word	0xcccccccd
 800a4a8:	f005c010 	.word	0xf005c010
 800a4ac:	f805c010 	.word	0xf805c010
 800a4b0:	ffff1ff0 	.word	0xffff1ff0
 800a4b4:	fff88000 	.word	0xfff88000
 800a4b8:	40015804 	.word	0x40015804
 800a4bc:	58005404 	.word	0x58005404

0800a4c0 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b084      	sub	sp, #16
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	d101      	bne.n	800a4da <HAL_SAI_Abort+0x1a>
 800a4d6:	2302      	movs	r3, #2
 800a4d8:	e07d      	b.n	800a5d6 <HAL_SAI_Abort+0x116>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2201      	movs	r2, #1
 800a4de:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a4f0:	d14f      	bne.n	800a592 <HAL_SAI_Abort+0xd2>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	681a      	ldr	r2, [r3, #0]
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a500:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800a508:	b2db      	uxtb	r3, r3
 800a50a:	2b12      	cmp	r3, #18
 800a50c:	d11d      	bne.n	800a54a <HAL_SAI_Abort+0x8a>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a514:	2b00      	cmp	r3, #0
 800a516:	d018      	beq.n	800a54a <HAL_SAI_Abort+0x8a>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a51e:	4618      	mov	r0, r3
 800a520:	f7f9 fe1c 	bl	800415c <HAL_DMA_Abort>
 800a524:	4603      	mov	r3, r0
 800a526:	2b00      	cmp	r3, #0
 800a528:	d00f      	beq.n	800a54a <HAL_SAI_Abort+0x8a>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a532:	2b80      	cmp	r3, #128	; 0x80
 800a534:	d009      	beq.n	800a54a <HAL_SAI_Abort+0x8a>
        {
          status = HAL_ERROR;
 800a536:	2301      	movs	r3, #1
 800a538:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a540:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800a550:	b2db      	uxtb	r3, r3
 800a552:	2b22      	cmp	r3, #34	; 0x22
 800a554:	d11d      	bne.n	800a592 <HAL_SAI_Abort+0xd2>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d018      	beq.n	800a592 <HAL_SAI_Abort+0xd2>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a566:	4618      	mov	r0, r3
 800a568:	f7f9 fdf8 	bl	800415c <HAL_DMA_Abort>
 800a56c:	4603      	mov	r3, r0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d00f      	beq.n	800a592 <HAL_SAI_Abort+0xd2>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a57a:	2b80      	cmp	r3, #128	; 0x80
 800a57c:	d009      	beq.n	800a592 <HAL_SAI_Abort+0xd2>
        {
          status = HAL_ERROR;
 800a57e:	2301      	movs	r3, #1
 800a580:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a588:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      }
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	2200      	movs	r2, #0
 800a598:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a5a2:	619a      	str	r2, [r3, #24]

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f000 fb11 	bl	800abcc <SAI_Disable>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d001      	beq.n	800a5b4 <HAL_SAI_Abort+0xf4>
  {
    status = HAL_ERROR;
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	685a      	ldr	r2, [r3, #4]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f042 0208 	orr.w	r2, r2, #8
 800a5c2:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return status;
 800a5d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3710      	adds	r7, #16
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
	...

0800a5e0 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b086      	sub	sp, #24
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	f000 81a7 	beq.w	800a944 <HAL_SAI_IRQHandler+0x364>
  {
    uint32_t itflags = hsai->Instance->SR;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	695b      	ldr	r3, [r3, #20]
 800a5fc:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	691b      	ldr	r3, [r3, #16]
 800a604:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred ------------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	f003 0308 	and.w	r3, r3, #8
 800a614:	2b00      	cmp	r3, #0
 800a616:	d00a      	beq.n	800a62e <HAL_SAI_IRQHandler+0x4e>
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	f003 0308 	and.w	r3, r3, #8
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d005      	beq.n	800a62e <HAL_SAI_IRQHandler+0x4e>
    {
      hsai->InterruptServiceRoutine(hsai);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	4798      	blx	r3
 800a62c:	e18a      	b.n	800a944 <HAL_SAI_IRQHandler+0x364>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	f003 0301 	and.w	r3, r3, #1
 800a634:	2b00      	cmp	r3, #0
 800a636:	d01e      	beq.n	800a676 <HAL_SAI_IRQHandler+0x96>
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	f003 0301 	and.w	r3, r3, #1
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d019      	beq.n	800a676 <HAL_SAI_IRQHandler+0x96>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	2201      	movs	r2, #1
 800a648:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800a650:	b2db      	uxtb	r3, r3
 800a652:	2b22      	cmp	r3, #34	; 0x22
 800a654:	d101      	bne.n	800a65a <HAL_SAI_IRQHandler+0x7a>
 800a656:	2301      	movs	r3, #1
 800a658:	e000      	b.n	800a65c <HAL_SAI_IRQHandler+0x7c>
 800a65a:	2302      	movs	r3, #2
 800a65c:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	431a      	orrs	r2, r3
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f000 f96e 	bl	800a950 <HAL_SAI_ErrorCallback>
 800a674:	e166      	b.n	800a944 <HAL_SAI_IRQHandler+0x364>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	f003 0302 	and.w	r3, r3, #2
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d013      	beq.n	800a6a8 <HAL_SAI_IRQHandler+0xc8>
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	f003 0302 	and.w	r3, r3, #2
 800a686:	2b00      	cmp	r3, #0
 800a688:	d00e      	beq.n	800a6a8 <HAL_SAI_IRQHandler+0xc8>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	2202      	movs	r2, #2
 800a690:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a698:	2b00      	cmp	r3, #0
 800a69a:	f000 8153 	beq.w	800a944 <HAL_SAI_IRQHandler+0x364>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6a4:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 800a6a6:	e14d      	b.n	800a944 <HAL_SAI_IRQHandler+0x364>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	f003 0320 	and.w	r3, r3, #32
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d05b      	beq.n	800a76a <HAL_SAI_IRQHandler+0x18a>
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	f003 0320 	and.w	r3, r3, #32
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d056      	beq.n	800a76a <HAL_SAI_IRQHandler+0x18a>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	2220      	movs	r2, #32
 800a6c2:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a6ca:	f043 0204 	orr.w	r2, r3, #4
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d03e      	beq.n	800a75c <HAL_SAI_IRQHandler+0x17c>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d018      	beq.n	800a71a <HAL_SAI_IRQHandler+0x13a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6ee:	4a97      	ldr	r2, [pc, #604]	; (800a94c <HAL_SAI_IRQHandler+0x36c>)
 800a6f0:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f7fa f84d 	bl	8004798 <HAL_DMA_Abort_IT>
 800a6fe:	4603      	mov	r3, r0
 800a700:	2b00      	cmp	r3, #0
 800a702:	d00a      	beq.n	800a71a <HAL_SAI_IRQHandler+0x13a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a70a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f000 f91b 	bl	800a950 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a720:	2b00      	cmp	r3, #0
 800a722:	f000 810a 	beq.w	800a93a <HAL_SAI_IRQHandler+0x35a>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a72c:	4a87      	ldr	r2, [pc, #540]	; (800a94c <HAL_SAI_IRQHandler+0x36c>)
 800a72e:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a736:	4618      	mov	r0, r3
 800a738:	f7fa f82e 	bl	8004798 <HAL_DMA_Abort_IT>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	f000 80fb 	beq.w	800a93a <HAL_SAI_IRQHandler+0x35a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a74a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f000 f8fb 	bl	800a950 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a75a:	e0ee      	b.n	800a93a <HAL_SAI_IRQHandler+0x35a>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f7ff feaf 	bl	800a4c0 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 f8f4 	bl	800a950 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a768:	e0e7      	b.n	800a93a <HAL_SAI_IRQHandler+0x35a>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a770:	2b00      	cmp	r3, #0
 800a772:	d05b      	beq.n	800a82c <HAL_SAI_IRQHandler+0x24c>
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d056      	beq.n	800a82c <HAL_SAI_IRQHandler+0x24c>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	2240      	movs	r2, #64	; 0x40
 800a784:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a78c:	f043 0208 	orr.w	r2, r3, #8
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d03e      	beq.n	800a81e <HAL_SAI_IRQHandler+0x23e>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d018      	beq.n	800a7dc <HAL_SAI_IRQHandler+0x1fc>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7b0:	4a66      	ldr	r2, [pc, #408]	; (800a94c <HAL_SAI_IRQHandler+0x36c>)
 800a7b2:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f7f9 ffec 	bl	8004798 <HAL_DMA_Abort_IT>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d00a      	beq.n	800a7dc <HAL_SAI_IRQHandler+0x1fc>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a7cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f000 f8ba 	bl	800a950 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	f000 80ab 	beq.w	800a93e <HAL_SAI_IRQHandler+0x35e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7ee:	4a57      	ldr	r2, [pc, #348]	; (800a94c <HAL_SAI_IRQHandler+0x36c>)
 800a7f0:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f7f9 ffcd 	bl	8004798 <HAL_DMA_Abort_IT>
 800a7fe:	4603      	mov	r3, r0
 800a800:	2b00      	cmp	r3, #0
 800a802:	f000 809c 	beq.w	800a93e <HAL_SAI_IRQHandler+0x35e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a80c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f000 f89a 	bl	800a950 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a81c:	e08f      	b.n	800a93e <HAL_SAI_IRQHandler+0x35e>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f7ff fe4e 	bl	800a4c0 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f000 f893 	bl	800a950 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a82a:	e088      	b.n	800a93e <HAL_SAI_IRQHandler+0x35e>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	f003 0304 	and.w	r3, r3, #4
 800a832:	2b00      	cmp	r3, #0
 800a834:	d067      	beq.n	800a906 <HAL_SAI_IRQHandler+0x326>
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	f003 0304 	and.w	r3, r3, #4
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d062      	beq.n	800a906 <HAL_SAI_IRQHandler+0x326>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	2204      	movs	r2, #4
 800a846:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a84e:	f043 0220 	orr.w	r2, r3, #32
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d03c      	beq.n	800a8dc <HAL_SAI_IRQHandler+0x2fc>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d018      	beq.n	800a89e <HAL_SAI_IRQHandler+0x2be>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a872:	4a36      	ldr	r2, [pc, #216]	; (800a94c <HAL_SAI_IRQHandler+0x36c>)
 800a874:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a87c:	4618      	mov	r0, r3
 800a87e:	f7f9 ff8b 	bl	8004798 <HAL_DMA_Abort_IT>
 800a882:	4603      	mov	r3, r0
 800a884:	2b00      	cmp	r3, #0
 800a886:	d00a      	beq.n	800a89e <HAL_SAI_IRQHandler+0x2be>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a88e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f000 f859 	bl	800a950 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d04c      	beq.n	800a942 <HAL_SAI_IRQHandler+0x362>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8ae:	4a27      	ldr	r2, [pc, #156]	; (800a94c <HAL_SAI_IRQHandler+0x36c>)
 800a8b0:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f7f9 ff6d 	bl	8004798 <HAL_DMA_Abort_IT>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d03e      	beq.n	800a942 <HAL_SAI_IRQHandler+0x362>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a8ca:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f000 f83b 	bl	800a950 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a8da:	e032      	b.n	800a942 <HAL_SAI_IRQHandler+0x362>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a8ec:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f000 f826 	bl	800a950 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a904:	e01d      	b.n	800a942 <HAL_SAI_IRQHandler+0x362>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	f003 0310 	and.w	r3, r3, #16
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d019      	beq.n	800a944 <HAL_SAI_IRQHandler+0x364>
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	f003 0310 	and.w	r3, r3, #16
 800a916:	2b00      	cmp	r3, #0
 800a918:	d014      	beq.n	800a944 <HAL_SAI_IRQHandler+0x364>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	2210      	movs	r2, #16
 800a920:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a928:	f043 0210 	orr.w	r2, r3, #16
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 f80c 	bl	800a950 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 800a938:	e004      	b.n	800a944 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a93a:	bf00      	nop
 800a93c:	e002      	b.n	800a944 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a93e:	bf00      	nop
 800a940:	e000      	b.n	800a944 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a942:	bf00      	nop
}
 800a944:	bf00      	nop
 800a946:	3718      	adds	r7, #24
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}
 800a94c:	0800ac41 	.word	0x0800ac41

0800a950 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800a950:	b480      	push	{r7}
 800a952:	b083      	sub	sp, #12
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800a958:	bf00      	nop
 800a95a:	370c      	adds	r7, #12
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr

0800a964 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a964:	b480      	push	{r7}
 800a966:	b087      	sub	sp, #28
 800a968:	af00      	add	r7, sp, #0
 800a96a:	60f8      	str	r0, [r7, #12]
 800a96c:	60b9      	str	r1, [r7, #8]
 800a96e:	607a      	str	r2, [r7, #4]
 800a970:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a972:	2300      	movs	r3, #0
 800a974:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2200      	movs	r2, #0
 800a97a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2200      	movs	r2, #0
 800a980:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	685b      	ldr	r3, [r3, #4]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d003      	beq.n	800a992 <SAI_InitI2S+0x2e>
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	685b      	ldr	r3, [r3, #4]
 800a98e:	2b02      	cmp	r3, #2
 800a990:	d103      	bne.n	800a99a <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2200      	movs	r2, #0
 800a996:	651a      	str	r2, [r3, #80]	; 0x50
 800a998:	e002      	b.n	800a9a0 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2201      	movs	r2, #1
 800a99e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a9a6:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a9ae:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	683a      	ldr	r2, [r7, #0]
 800a9ba:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	f003 0301 	and.w	r3, r3, #1
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d001      	beq.n	800a9ca <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	e077      	b.n	800aaba <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d107      	bne.n	800a9e0 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a9dc:	665a      	str	r2, [r3, #100]	; 0x64
 800a9de:	e006      	b.n	800a9ee <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a9e6:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	665a      	str	r2, [r3, #100]	; 0x64
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2b03      	cmp	r3, #3
 800a9f2:	d84f      	bhi.n	800aa94 <SAI_InitI2S+0x130>
 800a9f4:	a201      	add	r2, pc, #4	; (adr r2, 800a9fc <SAI_InitI2S+0x98>)
 800a9f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9fa:	bf00      	nop
 800a9fc:	0800aa0d 	.word	0x0800aa0d
 800aa00:	0800aa2f 	.word	0x0800aa2f
 800aa04:	0800aa51 	.word	0x0800aa51
 800aa08:	0800aa73 	.word	0x0800aa73

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2280      	movs	r2, #128	; 0x80
 800aa10:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	085b      	lsrs	r3, r3, #1
 800aa16:	015a      	lsls	r2, r3, #5
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	085b      	lsrs	r3, r3, #1
 800aa20:	011a      	lsls	r2, r3, #4
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2240      	movs	r2, #64	; 0x40
 800aa2a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800aa2c:	e035      	b.n	800aa9a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2280      	movs	r2, #128	; 0x80
 800aa32:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	085b      	lsrs	r3, r3, #1
 800aa38:	019a      	lsls	r2, r3, #6
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	085b      	lsrs	r3, r3, #1
 800aa42:	015a      	lsls	r2, r3, #5
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2280      	movs	r2, #128	; 0x80
 800aa4c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800aa4e:	e024      	b.n	800aa9a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	22c0      	movs	r2, #192	; 0xc0
 800aa54:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	085b      	lsrs	r3, r3, #1
 800aa5a:	019a      	lsls	r2, r3, #6
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	085b      	lsrs	r3, r3, #1
 800aa64:	015a      	lsls	r2, r3, #5
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	2280      	movs	r2, #128	; 0x80
 800aa6e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800aa70:	e013      	b.n	800aa9a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	22e0      	movs	r2, #224	; 0xe0
 800aa76:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	085b      	lsrs	r3, r3, #1
 800aa7c:	019a      	lsls	r2, r3, #6
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	085b      	lsrs	r3, r3, #1
 800aa86:	015a      	lsls	r2, r3, #5
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2280      	movs	r2, #128	; 0x80
 800aa90:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800aa92:	e002      	b.n	800aa9a <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800aa94:	2301      	movs	r3, #1
 800aa96:	75fb      	strb	r3, [r7, #23]
      break;
 800aa98:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	2b02      	cmp	r3, #2
 800aa9e:	d10b      	bne.n	800aab8 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2b01      	cmp	r3, #1
 800aaa4:	d102      	bne.n	800aaac <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	2210      	movs	r2, #16
 800aaaa:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2b02      	cmp	r3, #2
 800aab0:	d102      	bne.n	800aab8 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2208      	movs	r2, #8
 800aab6:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 800aab8:	7dfb      	ldrb	r3, [r7, #23]
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	371c      	adds	r7, #28
 800aabe:	46bd      	mov	sp, r7
 800aac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac4:	4770      	bx	lr
 800aac6:	bf00      	nop

0800aac8 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b087      	sub	sp, #28
 800aacc:	af00      	add	r7, sp, #0
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	60b9      	str	r1, [r7, #8]
 800aad2:	607a      	str	r2, [r7, #4]
 800aad4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aad6:	2300      	movs	r3, #0
 800aad8:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	2200      	movs	r2, #0
 800aade:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2200      	movs	r2, #0
 800aae4:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d003      	beq.n	800aaf6 <SAI_InitPCM+0x2e>
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	2b02      	cmp	r3, #2
 800aaf4:	d103      	bne.n	800aafe <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2201      	movs	r2, #1
 800aafa:	651a      	str	r2, [r3, #80]	; 0x50
 800aafc:	e002      	b.n	800ab04 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2200      	movs	r2, #0
 800ab02:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2200      	movs	r2, #0
 800ab08:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ab10:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800ab18:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	683a      	ldr	r2, [r7, #0]
 800ab24:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab2c:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	2b04      	cmp	r3, #4
 800ab32:	d103      	bne.n	800ab3c <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	2201      	movs	r2, #1
 800ab38:	659a      	str	r2, [r3, #88]	; 0x58
 800ab3a:	e002      	b.n	800ab42 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	220d      	movs	r2, #13
 800ab40:	659a      	str	r2, [r3, #88]	; 0x58
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2b03      	cmp	r3, #3
 800ab46:	d837      	bhi.n	800abb8 <SAI_InitPCM+0xf0>
 800ab48:	a201      	add	r2, pc, #4	; (adr r2, 800ab50 <SAI_InitPCM+0x88>)
 800ab4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab4e:	bf00      	nop
 800ab50:	0800ab61 	.word	0x0800ab61
 800ab54:	0800ab77 	.word	0x0800ab77
 800ab58:	0800ab8d 	.word	0x0800ab8d
 800ab5c:	0800aba3 	.word	0x0800aba3
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2280      	movs	r2, #128	; 0x80
 800ab64:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	011a      	lsls	r2, r3, #4
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2240      	movs	r2, #64	; 0x40
 800ab72:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800ab74:	e023      	b.n	800abbe <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2280      	movs	r2, #128	; 0x80
 800ab7a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	015a      	lsls	r2, r3, #5
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	2280      	movs	r2, #128	; 0x80
 800ab88:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800ab8a:	e018      	b.n	800abbe <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	22c0      	movs	r2, #192	; 0xc0
 800ab90:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	015a      	lsls	r2, r3, #5
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	2280      	movs	r2, #128	; 0x80
 800ab9e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800aba0:	e00d      	b.n	800abbe <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	22e0      	movs	r2, #224	; 0xe0
 800aba6:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	015a      	lsls	r2, r3, #5
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2280      	movs	r2, #128	; 0x80
 800abb4:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800abb6:	e002      	b.n	800abbe <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800abb8:	2301      	movs	r3, #1
 800abba:	75fb      	strb	r3, [r7, #23]
      break;
 800abbc:	bf00      	nop
  }

  return status;
 800abbe:	7dfb      	ldrb	r3, [r7, #23]
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	371c      	adds	r7, #28
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr

0800abcc <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800abcc:	b480      	push	{r7}
 800abce:	b085      	sub	sp, #20
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800abd4:	4b18      	ldr	r3, [pc, #96]	; (800ac38 <SAI_Disable+0x6c>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4a18      	ldr	r2, [pc, #96]	; (800ac3c <SAI_Disable+0x70>)
 800abda:	fba2 2303 	umull	r2, r3, r2, r3
 800abde:	0b1b      	lsrs	r3, r3, #12
 800abe0:	009b      	lsls	r3, r3, #2
 800abe2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800abe4:	2300      	movs	r3, #0
 800abe6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	681a      	ldr	r2, [r3, #0]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800abf6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d10a      	bne.n	800ac14 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ac04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800ac0e:	2303      	movs	r3, #3
 800ac10:	72fb      	strb	r3, [r7, #11]
      break;
 800ac12:	e009      	b.n	800ac28 <SAI_Disable+0x5c>
    }
    count--;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	3b01      	subs	r3, #1
 800ac18:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d1e7      	bne.n	800abf8 <SAI_Disable+0x2c>

  return status;
 800ac28:	7afb      	ldrb	r3, [r7, #11]
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3714      	adds	r7, #20
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr
 800ac36:	bf00      	nop
 800ac38:	24000000 	.word	0x24000000
 800ac3c:	95cbec1b 	.word	0x95cbec1b

0800ac40 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac4c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	681a      	ldr	r2, [r3, #0]
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800ac5c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	2200      	movs	r2, #0
 800ac64:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ac6e:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ac76:	2b20      	cmp	r3, #32
 800ac78:	d00a      	beq.n	800ac90 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800ac7a:	68f8      	ldr	r0, [r7, #12]
 800ac7c:	f7ff ffa6 	bl	800abcc <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	685a      	ldr	r2, [r3, #4]
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f042 0208 	orr.w	r2, r2, #8
 800ac8e:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2201      	movs	r2, #1
 800ac94:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800aca0:	68f8      	ldr	r0, [r7, #12]
 800aca2:	f7ff fe55 	bl	800a950 <HAL_SAI_ErrorCallback>
#endif
}
 800aca6:	bf00      	nop
 800aca8:	3710      	adds	r7, #16
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}
	...

0800acb0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b084      	sub	sp, #16
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800acb8:	2300      	movs	r3, #0
 800acba:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d101      	bne.n	800acc6 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800acc2:	2301      	movs	r3, #1
 800acc4:	e0eb      	b.n	800ae9e <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2200      	movs	r2, #0
 800acca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4a75      	ldr	r2, [pc, #468]	; (800aea8 <HAL_SPI_Init+0x1f8>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d00f      	beq.n	800acf6 <HAL_SPI_Init+0x46>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4a74      	ldr	r2, [pc, #464]	; (800aeac <HAL_SPI_Init+0x1fc>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d00a      	beq.n	800acf6 <HAL_SPI_Init+0x46>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4a72      	ldr	r2, [pc, #456]	; (800aeb0 <HAL_SPI_Init+0x200>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d005      	beq.n	800acf6 <HAL_SPI_Init+0x46>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	68db      	ldr	r3, [r3, #12]
 800acee:	2b0f      	cmp	r3, #15
 800acf0:	d901      	bls.n	800acf6 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800acf2:	2301      	movs	r3, #1
 800acf4:	e0d3      	b.n	800ae9e <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 f8dc 	bl	800aeb4 <SPI_GetPacketSize>
 800acfc:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	4a69      	ldr	r2, [pc, #420]	; (800aea8 <HAL_SPI_Init+0x1f8>)
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d00c      	beq.n	800ad22 <HAL_SPI_Init+0x72>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4a67      	ldr	r2, [pc, #412]	; (800aeac <HAL_SPI_Init+0x1fc>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d007      	beq.n	800ad22 <HAL_SPI_Init+0x72>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	4a66      	ldr	r2, [pc, #408]	; (800aeb0 <HAL_SPI_Init+0x200>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d002      	beq.n	800ad22 <HAL_SPI_Init+0x72>
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	2b08      	cmp	r3, #8
 800ad20:	d811      	bhi.n	800ad46 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ad26:	4a60      	ldr	r2, [pc, #384]	; (800aea8 <HAL_SPI_Init+0x1f8>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d009      	beq.n	800ad40 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4a5e      	ldr	r2, [pc, #376]	; (800aeac <HAL_SPI_Init+0x1fc>)
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d004      	beq.n	800ad40 <HAL_SPI_Init+0x90>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4a5d      	ldr	r2, [pc, #372]	; (800aeb0 <HAL_SPI_Init+0x200>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d104      	bne.n	800ad4a <HAL_SPI_Init+0x9a>
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	2b10      	cmp	r3, #16
 800ad44:	d901      	bls.n	800ad4a <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800ad46:	2301      	movs	r3, #1
 800ad48:	e0a9      	b.n	800ae9e <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d106      	bne.n	800ad64 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f7f6 fdd6 	bl	8001910 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2202      	movs	r2, #2
 800ad68:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	681a      	ldr	r2, [r3, #0]
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f022 0201 	bic.w	r2, r2, #1
 800ad7a:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	699b      	ldr	r3, [r3, #24]
 800ad80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ad84:	d119      	bne.n	800adba <HAL_SPI_Init+0x10a>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad8e:	d103      	bne.n	800ad98 <HAL_SPI_Init+0xe8>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d008      	beq.n	800adaa <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d10c      	bne.n	800adba <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ada4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ada8:	d107      	bne.n	800adba <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	681a      	ldr	r2, [r3, #0]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800adb8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	69da      	ldr	r2, [r3, #28]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adc2:	431a      	orrs	r2, r3
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	431a      	orrs	r2, r3
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adcc:	ea42 0103 	orr.w	r1, r2, r3
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	68da      	ldr	r2, [r3, #12]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	430a      	orrs	r2, r1
 800adda:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade4:	431a      	orrs	r2, r3
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adea:	431a      	orrs	r2, r3
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	699b      	ldr	r3, [r3, #24]
 800adf0:	431a      	orrs	r2, r3
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	691b      	ldr	r3, [r3, #16]
 800adf6:	431a      	orrs	r2, r3
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	695b      	ldr	r3, [r3, #20]
 800adfc:	431a      	orrs	r2, r3
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6a1b      	ldr	r3, [r3, #32]
 800ae02:	431a      	orrs	r2, r3
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	685b      	ldr	r3, [r3, #4]
 800ae08:	431a      	orrs	r2, r3
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae0e:	431a      	orrs	r2, r3
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	689b      	ldr	r3, [r3, #8]
 800ae14:	431a      	orrs	r2, r3
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae1a:	ea42 0103 	orr.w	r1, r2, r3
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	430a      	orrs	r2, r1
 800ae28:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d113      	bne.n	800ae5a <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	689b      	ldr	r3, [r3, #8]
 800ae38:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ae44:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	689b      	ldr	r3, [r3, #8]
 800ae4c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ae58:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f022 0201 	bic.w	r2, r2, #1
 800ae68:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d00a      	beq.n	800ae8c <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	68db      	ldr	r3, [r3, #12]
 800ae7c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	430a      	orrs	r2, r1
 800ae8a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2201      	movs	r2, #1
 800ae98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800ae9c:	2300      	movs	r3, #0
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3710      	adds	r7, #16
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}
 800aea6:	bf00      	nop
 800aea8:	40013000 	.word	0x40013000
 800aeac:	40003800 	.word	0x40003800
 800aeb0:	40003c00 	.word	0x40003c00

0800aeb4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b085      	sub	sp, #20
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aec0:	095b      	lsrs	r3, r3, #5
 800aec2:	3301      	adds	r3, #1
 800aec4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	68db      	ldr	r3, [r3, #12]
 800aeca:	3301      	adds	r3, #1
 800aecc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	3307      	adds	r3, #7
 800aed2:	08db      	lsrs	r3, r3, #3
 800aed4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	68fa      	ldr	r2, [r7, #12]
 800aeda:	fb02 f303 	mul.w	r3, r2, r3
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3714      	adds	r7, #20
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr
	...

0800aeec <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b084      	sub	sp, #16
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	60f8      	str	r0, [r7, #12]
 800aef4:	60b9      	str	r1, [r7, #8]
 800aef6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d101      	bne.n	800af02 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800aefe:	2301      	movs	r3, #1
 800af00:	e03e      	b.n	800af80 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af08:	b2db      	uxtb	r3, r3
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d106      	bne.n	800af1c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	2200      	movs	r2, #0
 800af12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800af16:	68f8      	ldr	r0, [r7, #12]
 800af18:	f7f6 f85c 	bl	8000fd4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681a      	ldr	r2, [r3, #0]
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	3308      	adds	r3, #8
 800af24:	4619      	mov	r1, r3
 800af26:	4610      	mov	r0, r2
 800af28:	f001 fdd0 	bl	800cacc <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	6818      	ldr	r0, [r3, #0]
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	689b      	ldr	r3, [r3, #8]
 800af34:	461a      	mov	r2, r3
 800af36:	68b9      	ldr	r1, [r7, #8]
 800af38:	f001 fe58 	bl	800cbec <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	6858      	ldr	r0, [r3, #4]
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	689a      	ldr	r2, [r3, #8]
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af48:	6879      	ldr	r1, [r7, #4]
 800af4a:	f001 fe9f 	bl	800cc8c <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	68fa      	ldr	r2, [r7, #12]
 800af54:	6892      	ldr	r2, [r2, #8]
 800af56:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	68fa      	ldr	r2, [r7, #12]
 800af60:	6892      	ldr	r2, [r2, #8]
 800af62:	f041 0101 	orr.w	r1, r1, #1
 800af66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800af6a:	4b07      	ldr	r3, [pc, #28]	; (800af88 <HAL_SRAM_Init+0x9c>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	4a06      	ldr	r2, [pc, #24]	; (800af88 <HAL_SRAM_Init+0x9c>)
 800af70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800af74:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2201      	movs	r2, #1
 800af7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800af7e:	2300      	movs	r3, #0
}
 800af80:	4618      	mov	r0, r3
 800af82:	3710      	adds	r7, #16
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}
 800af88:	52004000 	.word	0x52004000

0800af8c <HAL_SRAM_Write_8b>:
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pSrcBuffer,
                                    uint32_t BufferSize)
{
 800af8c:	b480      	push	{r7}
 800af8e:	b089      	sub	sp, #36	; 0x24
 800af90:	af00      	add	r7, sp, #0
 800af92:	60f8      	str	r0, [r7, #12]
 800af94:	60b9      	str	r1, [r7, #8]
 800af96:	607a      	str	r2, [r7, #4]
 800af98:	603b      	str	r3, [r7, #0]
  uint32_t size;
  __IO uint8_t *psramaddress = (uint8_t *)pAddress;
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	61bb      	str	r3, [r7, #24]
  uint8_t *psrcbuff = pSrcBuffer;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	617b      	str	r3, [r7, #20]

  /* Check the SRAM controller state */
  if (hsram->State == HAL_SRAM_STATE_READY)
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afa8:	b2db      	uxtb	r3, r3
 800afaa:	2b01      	cmp	r3, #1
 800afac:	d12b      	bne.n	800b006 <HAL_SRAM_Write_8b+0x7a>
  {
    /* Process Locked */
    __HAL_LOCK(hsram);
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d101      	bne.n	800afbc <HAL_SRAM_Write_8b+0x30>
 800afb8:	2302      	movs	r3, #2
 800afba:	e025      	b.n	800b008 <HAL_SRAM_Write_8b+0x7c>
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	2201      	movs	r2, #1
 800afc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_BUSY;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	2202      	movs	r2, #2
 800afc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Write data to memory */
    for (size = BufferSize; size != 0U; size--)
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	61fb      	str	r3, [r7, #28]
 800afd0:	e00c      	b.n	800afec <HAL_SRAM_Write_8b+0x60>
    {
      *psramaddress = *psrcbuff;
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	781a      	ldrb	r2, [r3, #0]
 800afd6:	69bb      	ldr	r3, [r7, #24]
 800afd8:	701a      	strb	r2, [r3, #0]
      psrcbuff++;
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	3301      	adds	r3, #1
 800afde:	617b      	str	r3, [r7, #20]
      psramaddress++;
 800afe0:	69bb      	ldr	r3, [r7, #24]
 800afe2:	3301      	adds	r3, #1
 800afe4:	61bb      	str	r3, [r7, #24]
    for (size = BufferSize; size != 0U; size--)
 800afe6:	69fb      	ldr	r3, [r7, #28]
 800afe8:	3b01      	subs	r3, #1
 800afea:	61fb      	str	r3, [r7, #28]
 800afec:	69fb      	ldr	r3, [r7, #28]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d1ef      	bne.n	800afd2 <HAL_SRAM_Write_8b+0x46>
    }

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_READY;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	2201      	movs	r2, #1
 800aff6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Process unlocked */
    __HAL_UNLOCK(hsram);
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2200      	movs	r2, #0
 800affe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800b002:	2300      	movs	r3, #0
 800b004:	e000      	b.n	800b008 <HAL_SRAM_Write_8b+0x7c>
    return HAL_ERROR;
 800b006:	2301      	movs	r3, #1
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3724      	adds	r7, #36	; 0x24
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr

0800b014 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b082      	sub	sp, #8
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d101      	bne.n	800b026 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800b022:	2301      	movs	r3, #1
 800b024:	e049      	b.n	800b0ba <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b02c:	b2db      	uxtb	r3, r3
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d106      	bne.n	800b040 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2200      	movs	r2, #0
 800b036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f7f7 f860 	bl	8002100 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2202      	movs	r2, #2
 800b044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681a      	ldr	r2, [r3, #0]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	3304      	adds	r3, #4
 800b050:	4619      	mov	r1, r3
 800b052:	4610      	mov	r0, r2
 800b054:	f000 f8ac 	bl	800b1b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2201      	movs	r2, #1
 800b05c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2201      	movs	r2, #1
 800b064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2201      	movs	r2, #1
 800b06c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2201      	movs	r2, #1
 800b074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2201      	movs	r2, #1
 800b07c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2201      	movs	r2, #1
 800b084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2201      	movs	r2, #1
 800b08c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2201      	movs	r2, #1
 800b094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2201      	movs	r2, #1
 800b09c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b0b8:	2300      	movs	r3, #0
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3708      	adds	r7, #8
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}
	...

0800b0c4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b084      	sub	sp, #16
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	60f8      	str	r0, [r7, #12]
 800b0cc:	60b9      	str	r1, [r7, #8]
 800b0ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0d6:	2b01      	cmp	r3, #1
 800b0d8:	d101      	bne.n	800b0de <HAL_TIM_OC_ConfigChannel+0x1a>
 800b0da:	2302      	movs	r3, #2
 800b0dc:	e064      	b.n	800b1a8 <HAL_TIM_OC_ConfigChannel+0xe4>
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2201      	movs	r2, #1
 800b0e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2b14      	cmp	r3, #20
 800b0ea:	d857      	bhi.n	800b19c <HAL_TIM_OC_ConfigChannel+0xd8>
 800b0ec:	a201      	add	r2, pc, #4	; (adr r2, 800b0f4 <HAL_TIM_OC_ConfigChannel+0x30>)
 800b0ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0f2:	bf00      	nop
 800b0f4:	0800b149 	.word	0x0800b149
 800b0f8:	0800b19d 	.word	0x0800b19d
 800b0fc:	0800b19d 	.word	0x0800b19d
 800b100:	0800b19d 	.word	0x0800b19d
 800b104:	0800b157 	.word	0x0800b157
 800b108:	0800b19d 	.word	0x0800b19d
 800b10c:	0800b19d 	.word	0x0800b19d
 800b110:	0800b19d 	.word	0x0800b19d
 800b114:	0800b165 	.word	0x0800b165
 800b118:	0800b19d 	.word	0x0800b19d
 800b11c:	0800b19d 	.word	0x0800b19d
 800b120:	0800b19d 	.word	0x0800b19d
 800b124:	0800b173 	.word	0x0800b173
 800b128:	0800b19d 	.word	0x0800b19d
 800b12c:	0800b19d 	.word	0x0800b19d
 800b130:	0800b19d 	.word	0x0800b19d
 800b134:	0800b181 	.word	0x0800b181
 800b138:	0800b19d 	.word	0x0800b19d
 800b13c:	0800b19d 	.word	0x0800b19d
 800b140:	0800b19d 	.word	0x0800b19d
 800b144:	0800b18f 	.word	0x0800b18f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	68b9      	ldr	r1, [r7, #8]
 800b14e:	4618      	mov	r0, r3
 800b150:	f000 f8c8 	bl	800b2e4 <TIM_OC1_SetConfig>
      break;
 800b154:	e023      	b.n	800b19e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	68b9      	ldr	r1, [r7, #8]
 800b15c:	4618      	mov	r0, r3
 800b15e:	f000 f951 	bl	800b404 <TIM_OC2_SetConfig>
      break;
 800b162:	e01c      	b.n	800b19e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	68b9      	ldr	r1, [r7, #8]
 800b16a:	4618      	mov	r0, r3
 800b16c:	f000 f9d4 	bl	800b518 <TIM_OC3_SetConfig>
      break;
 800b170:	e015      	b.n	800b19e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	68b9      	ldr	r1, [r7, #8]
 800b178:	4618      	mov	r0, r3
 800b17a:	f000 fa53 	bl	800b624 <TIM_OC4_SetConfig>
      break;
 800b17e:	e00e      	b.n	800b19e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	68b9      	ldr	r1, [r7, #8]
 800b186:	4618      	mov	r0, r3
 800b188:	f000 fab4 	bl	800b6f4 <TIM_OC5_SetConfig>
      break;
 800b18c:	e007      	b.n	800b19e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	68b9      	ldr	r1, [r7, #8]
 800b194:	4618      	mov	r0, r3
 800b196:	f000 fb0f 	bl	800b7b8 <TIM_OC6_SetConfig>
      break;
 800b19a:	e000      	b.n	800b19e <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 800b19c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b1a6:	2300      	movs	r3, #0
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	3710      	adds	r7, #16
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}

0800b1b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b085      	sub	sp, #20
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
 800b1b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	4a40      	ldr	r2, [pc, #256]	; (800b2c4 <TIM_Base_SetConfig+0x114>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d013      	beq.n	800b1f0 <TIM_Base_SetConfig+0x40>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1ce:	d00f      	beq.n	800b1f0 <TIM_Base_SetConfig+0x40>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	4a3d      	ldr	r2, [pc, #244]	; (800b2c8 <TIM_Base_SetConfig+0x118>)
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d00b      	beq.n	800b1f0 <TIM_Base_SetConfig+0x40>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	4a3c      	ldr	r2, [pc, #240]	; (800b2cc <TIM_Base_SetConfig+0x11c>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d007      	beq.n	800b1f0 <TIM_Base_SetConfig+0x40>
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	4a3b      	ldr	r2, [pc, #236]	; (800b2d0 <TIM_Base_SetConfig+0x120>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d003      	beq.n	800b1f0 <TIM_Base_SetConfig+0x40>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	4a3a      	ldr	r2, [pc, #232]	; (800b2d4 <TIM_Base_SetConfig+0x124>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d108      	bne.n	800b202 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	68fa      	ldr	r2, [r7, #12]
 800b1fe:	4313      	orrs	r3, r2
 800b200:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	4a2f      	ldr	r2, [pc, #188]	; (800b2c4 <TIM_Base_SetConfig+0x114>)
 800b206:	4293      	cmp	r3, r2
 800b208:	d01f      	beq.n	800b24a <TIM_Base_SetConfig+0x9a>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b210:	d01b      	beq.n	800b24a <TIM_Base_SetConfig+0x9a>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	4a2c      	ldr	r2, [pc, #176]	; (800b2c8 <TIM_Base_SetConfig+0x118>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d017      	beq.n	800b24a <TIM_Base_SetConfig+0x9a>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	4a2b      	ldr	r2, [pc, #172]	; (800b2cc <TIM_Base_SetConfig+0x11c>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	d013      	beq.n	800b24a <TIM_Base_SetConfig+0x9a>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	4a2a      	ldr	r2, [pc, #168]	; (800b2d0 <TIM_Base_SetConfig+0x120>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d00f      	beq.n	800b24a <TIM_Base_SetConfig+0x9a>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	4a29      	ldr	r2, [pc, #164]	; (800b2d4 <TIM_Base_SetConfig+0x124>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	d00b      	beq.n	800b24a <TIM_Base_SetConfig+0x9a>
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	4a28      	ldr	r2, [pc, #160]	; (800b2d8 <TIM_Base_SetConfig+0x128>)
 800b236:	4293      	cmp	r3, r2
 800b238:	d007      	beq.n	800b24a <TIM_Base_SetConfig+0x9a>
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	4a27      	ldr	r2, [pc, #156]	; (800b2dc <TIM_Base_SetConfig+0x12c>)
 800b23e:	4293      	cmp	r3, r2
 800b240:	d003      	beq.n	800b24a <TIM_Base_SetConfig+0x9a>
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	4a26      	ldr	r2, [pc, #152]	; (800b2e0 <TIM_Base_SetConfig+0x130>)
 800b246:	4293      	cmp	r3, r2
 800b248:	d108      	bne.n	800b25c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b250:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	68db      	ldr	r3, [r3, #12]
 800b256:	68fa      	ldr	r2, [r7, #12]
 800b258:	4313      	orrs	r3, r2
 800b25a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	695b      	ldr	r3, [r3, #20]
 800b266:	4313      	orrs	r3, r2
 800b268:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	68fa      	ldr	r2, [r7, #12]
 800b26e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	689a      	ldr	r2, [r3, #8]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	681a      	ldr	r2, [r3, #0]
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	4a10      	ldr	r2, [pc, #64]	; (800b2c4 <TIM_Base_SetConfig+0x114>)
 800b284:	4293      	cmp	r3, r2
 800b286:	d00f      	beq.n	800b2a8 <TIM_Base_SetConfig+0xf8>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	4a12      	ldr	r2, [pc, #72]	; (800b2d4 <TIM_Base_SetConfig+0x124>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d00b      	beq.n	800b2a8 <TIM_Base_SetConfig+0xf8>
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	4a11      	ldr	r2, [pc, #68]	; (800b2d8 <TIM_Base_SetConfig+0x128>)
 800b294:	4293      	cmp	r3, r2
 800b296:	d007      	beq.n	800b2a8 <TIM_Base_SetConfig+0xf8>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	4a10      	ldr	r2, [pc, #64]	; (800b2dc <TIM_Base_SetConfig+0x12c>)
 800b29c:	4293      	cmp	r3, r2
 800b29e:	d003      	beq.n	800b2a8 <TIM_Base_SetConfig+0xf8>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	4a0f      	ldr	r2, [pc, #60]	; (800b2e0 <TIM_Base_SetConfig+0x130>)
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d103      	bne.n	800b2b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	691a      	ldr	r2, [r3, #16]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	615a      	str	r2, [r3, #20]
}
 800b2b6:	bf00      	nop
 800b2b8:	3714      	adds	r7, #20
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c0:	4770      	bx	lr
 800b2c2:	bf00      	nop
 800b2c4:	40010000 	.word	0x40010000
 800b2c8:	40000400 	.word	0x40000400
 800b2cc:	40000800 	.word	0x40000800
 800b2d0:	40000c00 	.word	0x40000c00
 800b2d4:	40010400 	.word	0x40010400
 800b2d8:	40014000 	.word	0x40014000
 800b2dc:	40014400 	.word	0x40014400
 800b2e0:	40014800 	.word	0x40014800

0800b2e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b087      	sub	sp, #28
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6a1b      	ldr	r3, [r3, #32]
 800b2f2:	f023 0201 	bic.w	r2, r3, #1
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6a1b      	ldr	r3, [r3, #32]
 800b2fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	685b      	ldr	r3, [r3, #4]
 800b304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	699b      	ldr	r3, [r3, #24]
 800b30a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b30c:	68fa      	ldr	r2, [r7, #12]
 800b30e:	4b37      	ldr	r3, [pc, #220]	; (800b3ec <TIM_OC1_SetConfig+0x108>)
 800b310:	4013      	ands	r3, r2
 800b312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f023 0303 	bic.w	r3, r3, #3
 800b31a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	68fa      	ldr	r2, [r7, #12]
 800b322:	4313      	orrs	r3, r2
 800b324:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	f023 0302 	bic.w	r3, r3, #2
 800b32c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	689b      	ldr	r3, [r3, #8]
 800b332:	697a      	ldr	r2, [r7, #20]
 800b334:	4313      	orrs	r3, r2
 800b336:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	4a2d      	ldr	r2, [pc, #180]	; (800b3f0 <TIM_OC1_SetConfig+0x10c>)
 800b33c:	4293      	cmp	r3, r2
 800b33e:	d00f      	beq.n	800b360 <TIM_OC1_SetConfig+0x7c>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	4a2c      	ldr	r2, [pc, #176]	; (800b3f4 <TIM_OC1_SetConfig+0x110>)
 800b344:	4293      	cmp	r3, r2
 800b346:	d00b      	beq.n	800b360 <TIM_OC1_SetConfig+0x7c>
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	4a2b      	ldr	r2, [pc, #172]	; (800b3f8 <TIM_OC1_SetConfig+0x114>)
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d007      	beq.n	800b360 <TIM_OC1_SetConfig+0x7c>
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	4a2a      	ldr	r2, [pc, #168]	; (800b3fc <TIM_OC1_SetConfig+0x118>)
 800b354:	4293      	cmp	r3, r2
 800b356:	d003      	beq.n	800b360 <TIM_OC1_SetConfig+0x7c>
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	4a29      	ldr	r2, [pc, #164]	; (800b400 <TIM_OC1_SetConfig+0x11c>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d10c      	bne.n	800b37a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	f023 0308 	bic.w	r3, r3, #8
 800b366:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	68db      	ldr	r3, [r3, #12]
 800b36c:	697a      	ldr	r2, [r7, #20]
 800b36e:	4313      	orrs	r3, r2
 800b370:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b372:	697b      	ldr	r3, [r7, #20]
 800b374:	f023 0304 	bic.w	r3, r3, #4
 800b378:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	4a1c      	ldr	r2, [pc, #112]	; (800b3f0 <TIM_OC1_SetConfig+0x10c>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	d00f      	beq.n	800b3a2 <TIM_OC1_SetConfig+0xbe>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	4a1b      	ldr	r2, [pc, #108]	; (800b3f4 <TIM_OC1_SetConfig+0x110>)
 800b386:	4293      	cmp	r3, r2
 800b388:	d00b      	beq.n	800b3a2 <TIM_OC1_SetConfig+0xbe>
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	4a1a      	ldr	r2, [pc, #104]	; (800b3f8 <TIM_OC1_SetConfig+0x114>)
 800b38e:	4293      	cmp	r3, r2
 800b390:	d007      	beq.n	800b3a2 <TIM_OC1_SetConfig+0xbe>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	4a19      	ldr	r2, [pc, #100]	; (800b3fc <TIM_OC1_SetConfig+0x118>)
 800b396:	4293      	cmp	r3, r2
 800b398:	d003      	beq.n	800b3a2 <TIM_OC1_SetConfig+0xbe>
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	4a18      	ldr	r2, [pc, #96]	; (800b400 <TIM_OC1_SetConfig+0x11c>)
 800b39e:	4293      	cmp	r3, r2
 800b3a0:	d111      	bne.n	800b3c6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b3a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b3b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	695b      	ldr	r3, [r3, #20]
 800b3b6:	693a      	ldr	r2, [r7, #16]
 800b3b8:	4313      	orrs	r3, r2
 800b3ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	699b      	ldr	r3, [r3, #24]
 800b3c0:	693a      	ldr	r2, [r7, #16]
 800b3c2:	4313      	orrs	r3, r2
 800b3c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	693a      	ldr	r2, [r7, #16]
 800b3ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	68fa      	ldr	r2, [r7, #12]
 800b3d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	685a      	ldr	r2, [r3, #4]
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	697a      	ldr	r2, [r7, #20]
 800b3de:	621a      	str	r2, [r3, #32]
}
 800b3e0:	bf00      	nop
 800b3e2:	371c      	adds	r7, #28
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr
 800b3ec:	fffeff8f 	.word	0xfffeff8f
 800b3f0:	40010000 	.word	0x40010000
 800b3f4:	40010400 	.word	0x40010400
 800b3f8:	40014000 	.word	0x40014000
 800b3fc:	40014400 	.word	0x40014400
 800b400:	40014800 	.word	0x40014800

0800b404 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b404:	b480      	push	{r7}
 800b406:	b087      	sub	sp, #28
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6a1b      	ldr	r3, [r3, #32]
 800b412:	f023 0210 	bic.w	r2, r3, #16
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6a1b      	ldr	r3, [r3, #32]
 800b41e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	685b      	ldr	r3, [r3, #4]
 800b424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	699b      	ldr	r3, [r3, #24]
 800b42a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b42c:	68fa      	ldr	r2, [r7, #12]
 800b42e:	4b34      	ldr	r3, [pc, #208]	; (800b500 <TIM_OC2_SetConfig+0xfc>)
 800b430:	4013      	ands	r3, r2
 800b432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b43a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	021b      	lsls	r3, r3, #8
 800b442:	68fa      	ldr	r2, [r7, #12]
 800b444:	4313      	orrs	r3, r2
 800b446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	f023 0320 	bic.w	r3, r3, #32
 800b44e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	689b      	ldr	r3, [r3, #8]
 800b454:	011b      	lsls	r3, r3, #4
 800b456:	697a      	ldr	r2, [r7, #20]
 800b458:	4313      	orrs	r3, r2
 800b45a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	4a29      	ldr	r2, [pc, #164]	; (800b504 <TIM_OC2_SetConfig+0x100>)
 800b460:	4293      	cmp	r3, r2
 800b462:	d003      	beq.n	800b46c <TIM_OC2_SetConfig+0x68>
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	4a28      	ldr	r2, [pc, #160]	; (800b508 <TIM_OC2_SetConfig+0x104>)
 800b468:	4293      	cmp	r3, r2
 800b46a:	d10d      	bne.n	800b488 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b472:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	68db      	ldr	r3, [r3, #12]
 800b478:	011b      	lsls	r3, r3, #4
 800b47a:	697a      	ldr	r2, [r7, #20]
 800b47c:	4313      	orrs	r3, r2
 800b47e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b480:	697b      	ldr	r3, [r7, #20]
 800b482:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b486:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	4a1e      	ldr	r2, [pc, #120]	; (800b504 <TIM_OC2_SetConfig+0x100>)
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d00f      	beq.n	800b4b0 <TIM_OC2_SetConfig+0xac>
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	4a1d      	ldr	r2, [pc, #116]	; (800b508 <TIM_OC2_SetConfig+0x104>)
 800b494:	4293      	cmp	r3, r2
 800b496:	d00b      	beq.n	800b4b0 <TIM_OC2_SetConfig+0xac>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	4a1c      	ldr	r2, [pc, #112]	; (800b50c <TIM_OC2_SetConfig+0x108>)
 800b49c:	4293      	cmp	r3, r2
 800b49e:	d007      	beq.n	800b4b0 <TIM_OC2_SetConfig+0xac>
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	4a1b      	ldr	r2, [pc, #108]	; (800b510 <TIM_OC2_SetConfig+0x10c>)
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	d003      	beq.n	800b4b0 <TIM_OC2_SetConfig+0xac>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	4a1a      	ldr	r2, [pc, #104]	; (800b514 <TIM_OC2_SetConfig+0x110>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d113      	bne.n	800b4d8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b4b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b4be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	695b      	ldr	r3, [r3, #20]
 800b4c4:	009b      	lsls	r3, r3, #2
 800b4c6:	693a      	ldr	r2, [r7, #16]
 800b4c8:	4313      	orrs	r3, r2
 800b4ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	699b      	ldr	r3, [r3, #24]
 800b4d0:	009b      	lsls	r3, r3, #2
 800b4d2:	693a      	ldr	r2, [r7, #16]
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	693a      	ldr	r2, [r7, #16]
 800b4dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	68fa      	ldr	r2, [r7, #12]
 800b4e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	685a      	ldr	r2, [r3, #4]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	697a      	ldr	r2, [r7, #20]
 800b4f0:	621a      	str	r2, [r3, #32]
}
 800b4f2:	bf00      	nop
 800b4f4:	371c      	adds	r7, #28
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr
 800b4fe:	bf00      	nop
 800b500:	feff8fff 	.word	0xfeff8fff
 800b504:	40010000 	.word	0x40010000
 800b508:	40010400 	.word	0x40010400
 800b50c:	40014000 	.word	0x40014000
 800b510:	40014400 	.word	0x40014400
 800b514:	40014800 	.word	0x40014800

0800b518 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b518:	b480      	push	{r7}
 800b51a:	b087      	sub	sp, #28
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6a1b      	ldr	r3, [r3, #32]
 800b526:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6a1b      	ldr	r3, [r3, #32]
 800b532:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	685b      	ldr	r3, [r3, #4]
 800b538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	69db      	ldr	r3, [r3, #28]
 800b53e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f023 0303 	bic.w	r3, r3, #3
 800b54e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	68fa      	ldr	r2, [r7, #12]
 800b556:	4313      	orrs	r3, r2
 800b558:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b55a:	697b      	ldr	r3, [r7, #20]
 800b55c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b560:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	689b      	ldr	r3, [r3, #8]
 800b566:	021b      	lsls	r3, r3, #8
 800b568:	697a      	ldr	r2, [r7, #20]
 800b56a:	4313      	orrs	r3, r2
 800b56c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	4a27      	ldr	r2, [pc, #156]	; (800b610 <TIM_OC3_SetConfig+0xf8>)
 800b572:	4293      	cmp	r3, r2
 800b574:	d003      	beq.n	800b57e <TIM_OC3_SetConfig+0x66>
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	4a26      	ldr	r2, [pc, #152]	; (800b614 <TIM_OC3_SetConfig+0xfc>)
 800b57a:	4293      	cmp	r3, r2
 800b57c:	d10d      	bne.n	800b59a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b584:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	68db      	ldr	r3, [r3, #12]
 800b58a:	021b      	lsls	r3, r3, #8
 800b58c:	697a      	ldr	r2, [r7, #20]
 800b58e:	4313      	orrs	r3, r2
 800b590:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b598:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	4a1c      	ldr	r2, [pc, #112]	; (800b610 <TIM_OC3_SetConfig+0xf8>)
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d00f      	beq.n	800b5c2 <TIM_OC3_SetConfig+0xaa>
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	4a1b      	ldr	r2, [pc, #108]	; (800b614 <TIM_OC3_SetConfig+0xfc>)
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d00b      	beq.n	800b5c2 <TIM_OC3_SetConfig+0xaa>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	4a1a      	ldr	r2, [pc, #104]	; (800b618 <TIM_OC3_SetConfig+0x100>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d007      	beq.n	800b5c2 <TIM_OC3_SetConfig+0xaa>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	4a19      	ldr	r2, [pc, #100]	; (800b61c <TIM_OC3_SetConfig+0x104>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d003      	beq.n	800b5c2 <TIM_OC3_SetConfig+0xaa>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	4a18      	ldr	r2, [pc, #96]	; (800b620 <TIM_OC3_SetConfig+0x108>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d113      	bne.n	800b5ea <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b5c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b5d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	695b      	ldr	r3, [r3, #20]
 800b5d6:	011b      	lsls	r3, r3, #4
 800b5d8:	693a      	ldr	r2, [r7, #16]
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	699b      	ldr	r3, [r3, #24]
 800b5e2:	011b      	lsls	r3, r3, #4
 800b5e4:	693a      	ldr	r2, [r7, #16]
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	693a      	ldr	r2, [r7, #16]
 800b5ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	68fa      	ldr	r2, [r7, #12]
 800b5f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	685a      	ldr	r2, [r3, #4]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	697a      	ldr	r2, [r7, #20]
 800b602:	621a      	str	r2, [r3, #32]
}
 800b604:	bf00      	nop
 800b606:	371c      	adds	r7, #28
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr
 800b610:	40010000 	.word	0x40010000
 800b614:	40010400 	.word	0x40010400
 800b618:	40014000 	.word	0x40014000
 800b61c:	40014400 	.word	0x40014400
 800b620:	40014800 	.word	0x40014800

0800b624 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b624:	b480      	push	{r7}
 800b626:	b087      	sub	sp, #28
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
 800b62c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6a1b      	ldr	r3, [r3, #32]
 800b632:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6a1b      	ldr	r3, [r3, #32]
 800b63e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	685b      	ldr	r3, [r3, #4]
 800b644:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	69db      	ldr	r3, [r3, #28]
 800b64a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b65a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	021b      	lsls	r3, r3, #8
 800b662:	68fa      	ldr	r2, [r7, #12]
 800b664:	4313      	orrs	r3, r2
 800b666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b66e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	689b      	ldr	r3, [r3, #8]
 800b674:	031b      	lsls	r3, r3, #12
 800b676:	693a      	ldr	r2, [r7, #16]
 800b678:	4313      	orrs	r3, r2
 800b67a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	4a18      	ldr	r2, [pc, #96]	; (800b6e0 <TIM_OC4_SetConfig+0xbc>)
 800b680:	4293      	cmp	r3, r2
 800b682:	d00f      	beq.n	800b6a4 <TIM_OC4_SetConfig+0x80>
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	4a17      	ldr	r2, [pc, #92]	; (800b6e4 <TIM_OC4_SetConfig+0xc0>)
 800b688:	4293      	cmp	r3, r2
 800b68a:	d00b      	beq.n	800b6a4 <TIM_OC4_SetConfig+0x80>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	4a16      	ldr	r2, [pc, #88]	; (800b6e8 <TIM_OC4_SetConfig+0xc4>)
 800b690:	4293      	cmp	r3, r2
 800b692:	d007      	beq.n	800b6a4 <TIM_OC4_SetConfig+0x80>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	4a15      	ldr	r2, [pc, #84]	; (800b6ec <TIM_OC4_SetConfig+0xc8>)
 800b698:	4293      	cmp	r3, r2
 800b69a:	d003      	beq.n	800b6a4 <TIM_OC4_SetConfig+0x80>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	4a14      	ldr	r2, [pc, #80]	; (800b6f0 <TIM_OC4_SetConfig+0xcc>)
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d109      	bne.n	800b6b8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b6a4:	697b      	ldr	r3, [r7, #20]
 800b6a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b6aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	695b      	ldr	r3, [r3, #20]
 800b6b0:	019b      	lsls	r3, r3, #6
 800b6b2:	697a      	ldr	r2, [r7, #20]
 800b6b4:	4313      	orrs	r3, r2
 800b6b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	697a      	ldr	r2, [r7, #20]
 800b6bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	68fa      	ldr	r2, [r7, #12]
 800b6c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	685a      	ldr	r2, [r3, #4]
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	693a      	ldr	r2, [r7, #16]
 800b6d0:	621a      	str	r2, [r3, #32]
}
 800b6d2:	bf00      	nop
 800b6d4:	371c      	adds	r7, #28
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6dc:	4770      	bx	lr
 800b6de:	bf00      	nop
 800b6e0:	40010000 	.word	0x40010000
 800b6e4:	40010400 	.word	0x40010400
 800b6e8:	40014000 	.word	0x40014000
 800b6ec:	40014400 	.word	0x40014400
 800b6f0:	40014800 	.word	0x40014800

0800b6f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b087      	sub	sp, #28
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6a1b      	ldr	r3, [r3, #32]
 800b702:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6a1b      	ldr	r3, [r3, #32]
 800b70e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	685b      	ldr	r3, [r3, #4]
 800b714:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b71a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	68fa      	ldr	r2, [r7, #12]
 800b72a:	4313      	orrs	r3, r2
 800b72c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b734:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	689b      	ldr	r3, [r3, #8]
 800b73a:	041b      	lsls	r3, r3, #16
 800b73c:	693a      	ldr	r2, [r7, #16]
 800b73e:	4313      	orrs	r3, r2
 800b740:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	4a17      	ldr	r2, [pc, #92]	; (800b7a4 <TIM_OC5_SetConfig+0xb0>)
 800b746:	4293      	cmp	r3, r2
 800b748:	d00f      	beq.n	800b76a <TIM_OC5_SetConfig+0x76>
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	4a16      	ldr	r2, [pc, #88]	; (800b7a8 <TIM_OC5_SetConfig+0xb4>)
 800b74e:	4293      	cmp	r3, r2
 800b750:	d00b      	beq.n	800b76a <TIM_OC5_SetConfig+0x76>
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	4a15      	ldr	r2, [pc, #84]	; (800b7ac <TIM_OC5_SetConfig+0xb8>)
 800b756:	4293      	cmp	r3, r2
 800b758:	d007      	beq.n	800b76a <TIM_OC5_SetConfig+0x76>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	4a14      	ldr	r2, [pc, #80]	; (800b7b0 <TIM_OC5_SetConfig+0xbc>)
 800b75e:	4293      	cmp	r3, r2
 800b760:	d003      	beq.n	800b76a <TIM_OC5_SetConfig+0x76>
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	4a13      	ldr	r2, [pc, #76]	; (800b7b4 <TIM_OC5_SetConfig+0xc0>)
 800b766:	4293      	cmp	r3, r2
 800b768:	d109      	bne.n	800b77e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b770:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	695b      	ldr	r3, [r3, #20]
 800b776:	021b      	lsls	r3, r3, #8
 800b778:	697a      	ldr	r2, [r7, #20]
 800b77a:	4313      	orrs	r3, r2
 800b77c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	697a      	ldr	r2, [r7, #20]
 800b782:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	68fa      	ldr	r2, [r7, #12]
 800b788:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	685a      	ldr	r2, [r3, #4]
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	693a      	ldr	r2, [r7, #16]
 800b796:	621a      	str	r2, [r3, #32]
}
 800b798:	bf00      	nop
 800b79a:	371c      	adds	r7, #28
 800b79c:	46bd      	mov	sp, r7
 800b79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a2:	4770      	bx	lr
 800b7a4:	40010000 	.word	0x40010000
 800b7a8:	40010400 	.word	0x40010400
 800b7ac:	40014000 	.word	0x40014000
 800b7b0:	40014400 	.word	0x40014400
 800b7b4:	40014800 	.word	0x40014800

0800b7b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b087      	sub	sp, #28
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6a1b      	ldr	r3, [r3, #32]
 800b7c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6a1b      	ldr	r3, [r3, #32]
 800b7d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	685b      	ldr	r3, [r3, #4]
 800b7d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b7e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	021b      	lsls	r3, r3, #8
 800b7ee:	68fa      	ldr	r2, [r7, #12]
 800b7f0:	4313      	orrs	r3, r2
 800b7f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b7fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	689b      	ldr	r3, [r3, #8]
 800b800:	051b      	lsls	r3, r3, #20
 800b802:	693a      	ldr	r2, [r7, #16]
 800b804:	4313      	orrs	r3, r2
 800b806:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	4a18      	ldr	r2, [pc, #96]	; (800b86c <TIM_OC6_SetConfig+0xb4>)
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d00f      	beq.n	800b830 <TIM_OC6_SetConfig+0x78>
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	4a17      	ldr	r2, [pc, #92]	; (800b870 <TIM_OC6_SetConfig+0xb8>)
 800b814:	4293      	cmp	r3, r2
 800b816:	d00b      	beq.n	800b830 <TIM_OC6_SetConfig+0x78>
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	4a16      	ldr	r2, [pc, #88]	; (800b874 <TIM_OC6_SetConfig+0xbc>)
 800b81c:	4293      	cmp	r3, r2
 800b81e:	d007      	beq.n	800b830 <TIM_OC6_SetConfig+0x78>
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	4a15      	ldr	r2, [pc, #84]	; (800b878 <TIM_OC6_SetConfig+0xc0>)
 800b824:	4293      	cmp	r3, r2
 800b826:	d003      	beq.n	800b830 <TIM_OC6_SetConfig+0x78>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	4a14      	ldr	r2, [pc, #80]	; (800b87c <TIM_OC6_SetConfig+0xc4>)
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d109      	bne.n	800b844 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b836:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	695b      	ldr	r3, [r3, #20]
 800b83c:	029b      	lsls	r3, r3, #10
 800b83e:	697a      	ldr	r2, [r7, #20]
 800b840:	4313      	orrs	r3, r2
 800b842:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	697a      	ldr	r2, [r7, #20]
 800b848:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	68fa      	ldr	r2, [r7, #12]
 800b84e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	685a      	ldr	r2, [r3, #4]
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	693a      	ldr	r2, [r7, #16]
 800b85c:	621a      	str	r2, [r3, #32]
}
 800b85e:	bf00      	nop
 800b860:	371c      	adds	r7, #28
 800b862:	46bd      	mov	sp, r7
 800b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b868:	4770      	bx	lr
 800b86a:	bf00      	nop
 800b86c:	40010000 	.word	0x40010000
 800b870:	40010400 	.word	0x40010400
 800b874:	40014000 	.word	0x40014000
 800b878:	40014400 	.word	0x40014400
 800b87c:	40014800 	.word	0x40014800

0800b880 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b880:	b480      	push	{r7}
 800b882:	b085      	sub	sp, #20
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
 800b888:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b890:	2b01      	cmp	r3, #1
 800b892:	d101      	bne.n	800b898 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b894:	2302      	movs	r3, #2
 800b896:	e068      	b.n	800b96a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2201      	movs	r2, #1
 800b89c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2202      	movs	r2, #2
 800b8a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	685b      	ldr	r3, [r3, #4]
 800b8ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	689b      	ldr	r3, [r3, #8]
 800b8b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	4a2e      	ldr	r2, [pc, #184]	; (800b978 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d004      	beq.n	800b8cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	4a2d      	ldr	r2, [pc, #180]	; (800b97c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d108      	bne.n	800b8de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b8d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	685b      	ldr	r3, [r3, #4]
 800b8d8:	68fa      	ldr	r2, [r7, #12]
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	68fa      	ldr	r2, [r7, #12]
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	68fa      	ldr	r2, [r7, #12]
 800b8f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	4a1e      	ldr	r2, [pc, #120]	; (800b978 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d01d      	beq.n	800b93e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b90a:	d018      	beq.n	800b93e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4a1b      	ldr	r2, [pc, #108]	; (800b980 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d013      	beq.n	800b93e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	4a1a      	ldr	r2, [pc, #104]	; (800b984 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d00e      	beq.n	800b93e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	4a18      	ldr	r2, [pc, #96]	; (800b988 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b926:	4293      	cmp	r3, r2
 800b928:	d009      	beq.n	800b93e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	4a13      	ldr	r2, [pc, #76]	; (800b97c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b930:	4293      	cmp	r3, r2
 800b932:	d004      	beq.n	800b93e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	4a14      	ldr	r2, [pc, #80]	; (800b98c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d10c      	bne.n	800b958 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b944:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	689b      	ldr	r3, [r3, #8]
 800b94a:	68ba      	ldr	r2, [r7, #8]
 800b94c:	4313      	orrs	r3, r2
 800b94e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	68ba      	ldr	r2, [r7, #8]
 800b956:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2201      	movs	r2, #1
 800b95c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2200      	movs	r2, #0
 800b964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b968:	2300      	movs	r3, #0
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3714      	adds	r7, #20
 800b96e:	46bd      	mov	sp, r7
 800b970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b974:	4770      	bx	lr
 800b976:	bf00      	nop
 800b978:	40010000 	.word	0x40010000
 800b97c:	40010400 	.word	0x40010400
 800b980:	40000400 	.word	0x40000400
 800b984:	40000800 	.word	0x40000800
 800b988:	40000c00 	.word	0x40000c00
 800b98c:	40001800 	.word	0x40001800

0800b990 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b990:	b480      	push	{r7}
 800b992:	b085      	sub	sp, #20
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
 800b998:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b99a:	2300      	movs	r3, #0
 800b99c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	d101      	bne.n	800b9ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b9a8:	2302      	movs	r3, #2
 800b9aa:	e065      	b.n	800ba78 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	68db      	ldr	r3, [r3, #12]
 800b9be:	4313      	orrs	r3, r2
 800b9c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	689b      	ldr	r3, [r3, #8]
 800b9cc:	4313      	orrs	r3, r2
 800b9ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	685b      	ldr	r3, [r3, #4]
 800b9da:	4313      	orrs	r3, r2
 800b9dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	691b      	ldr	r3, [r3, #16]
 800b9f6:	4313      	orrs	r3, r2
 800b9f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	695b      	ldr	r3, [r3, #20]
 800ba04:	4313      	orrs	r3, r2
 800ba06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba12:	4313      	orrs	r3, r2
 800ba14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	699b      	ldr	r3, [r3, #24]
 800ba20:	041b      	lsls	r3, r3, #16
 800ba22:	4313      	orrs	r3, r2
 800ba24:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4a16      	ldr	r2, [pc, #88]	; (800ba84 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d004      	beq.n	800ba3a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	4a14      	ldr	r2, [pc, #80]	; (800ba88 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d115      	bne.n	800ba66 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba44:	051b      	lsls	r3, r3, #20
 800ba46:	4313      	orrs	r3, r2
 800ba48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	69db      	ldr	r3, [r3, #28]
 800ba54:	4313      	orrs	r3, r2
 800ba56:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	6a1b      	ldr	r3, [r3, #32]
 800ba62:	4313      	orrs	r3, r2
 800ba64:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	68fa      	ldr	r2, [r7, #12]
 800ba6c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2200      	movs	r2, #0
 800ba72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ba76:	2300      	movs	r3, #0
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3714      	adds	r7, #20
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba82:	4770      	bx	lr
 800ba84:	40010000 	.word	0x40010000
 800ba88:	40010400 	.word	0x40010400

0800ba8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b082      	sub	sp, #8
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d101      	bne.n	800ba9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	e042      	b.n	800bb24 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d106      	bne.n	800bab6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2200      	movs	r2, #0
 800baac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f7f6 fccf 	bl	8002454 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2224      	movs	r2, #36	; 0x24
 800baba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	681a      	ldr	r2, [r3, #0]
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f022 0201 	bic.w	r2, r2, #1
 800bacc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 f82c 	bl	800bb2c <UART_SetConfig>
 800bad4:	4603      	mov	r3, r0
 800bad6:	2b01      	cmp	r3, #1
 800bad8:	d101      	bne.n	800bade <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bada:	2301      	movs	r3, #1
 800badc:	e022      	b.n	800bb24 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d002      	beq.n	800baec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f000 fd80 	bl	800c5ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	685a      	ldr	r2, [r3, #4]
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bafa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	689a      	ldr	r2, [r3, #8]
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bb0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	681a      	ldr	r2, [r3, #0]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f042 0201 	orr.w	r2, r2, #1
 800bb1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f000 fe07 	bl	800c730 <UART_CheckIdleState>
 800bb22:	4603      	mov	r3, r0
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3708      	adds	r7, #8
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}

0800bb2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bb2c:	b5b0      	push	{r4, r5, r7, lr}
 800bb2e:	b08e      	sub	sp, #56	; 0x38
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bb34:	2300      	movs	r3, #0
 800bb36:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	689a      	ldr	r2, [r3, #8]
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	691b      	ldr	r3, [r3, #16]
 800bb42:	431a      	orrs	r2, r3
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	695b      	ldr	r3, [r3, #20]
 800bb48:	431a      	orrs	r2, r3
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	69db      	ldr	r3, [r3, #28]
 800bb4e:	4313      	orrs	r3, r2
 800bb50:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	681a      	ldr	r2, [r3, #0]
 800bb58:	4bbf      	ldr	r3, [pc, #764]	; (800be58 <UART_SetConfig+0x32c>)
 800bb5a:	4013      	ands	r3, r2
 800bb5c:	687a      	ldr	r2, [r7, #4]
 800bb5e:	6812      	ldr	r2, [r2, #0]
 800bb60:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bb62:	430b      	orrs	r3, r1
 800bb64:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	685b      	ldr	r3, [r3, #4]
 800bb6c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	68da      	ldr	r2, [r3, #12]
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	430a      	orrs	r2, r1
 800bb7a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	699b      	ldr	r3, [r3, #24]
 800bb80:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	4ab5      	ldr	r2, [pc, #724]	; (800be5c <UART_SetConfig+0x330>)
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	d004      	beq.n	800bb96 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6a1b      	ldr	r3, [r3, #32]
 800bb90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb92:	4313      	orrs	r3, r2
 800bb94:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	689a      	ldr	r2, [r3, #8]
 800bb9c:	4bb0      	ldr	r3, [pc, #704]	; (800be60 <UART_SetConfig+0x334>)
 800bb9e:	4013      	ands	r3, r2
 800bba0:	687a      	ldr	r2, [r7, #4]
 800bba2:	6812      	ldr	r2, [r2, #0]
 800bba4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bba6:	430b      	orrs	r3, r1
 800bba8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbb0:	f023 010f 	bic.w	r1, r3, #15
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	430a      	orrs	r2, r1
 800bbbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	4aa7      	ldr	r2, [pc, #668]	; (800be64 <UART_SetConfig+0x338>)
 800bbc6:	4293      	cmp	r3, r2
 800bbc8:	d176      	bne.n	800bcb8 <UART_SetConfig+0x18c>
 800bbca:	4ba7      	ldr	r3, [pc, #668]	; (800be68 <UART_SetConfig+0x33c>)
 800bbcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bbd2:	2b28      	cmp	r3, #40	; 0x28
 800bbd4:	d86c      	bhi.n	800bcb0 <UART_SetConfig+0x184>
 800bbd6:	a201      	add	r2, pc, #4	; (adr r2, 800bbdc <UART_SetConfig+0xb0>)
 800bbd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbdc:	0800bc81 	.word	0x0800bc81
 800bbe0:	0800bcb1 	.word	0x0800bcb1
 800bbe4:	0800bcb1 	.word	0x0800bcb1
 800bbe8:	0800bcb1 	.word	0x0800bcb1
 800bbec:	0800bcb1 	.word	0x0800bcb1
 800bbf0:	0800bcb1 	.word	0x0800bcb1
 800bbf4:	0800bcb1 	.word	0x0800bcb1
 800bbf8:	0800bcb1 	.word	0x0800bcb1
 800bbfc:	0800bc89 	.word	0x0800bc89
 800bc00:	0800bcb1 	.word	0x0800bcb1
 800bc04:	0800bcb1 	.word	0x0800bcb1
 800bc08:	0800bcb1 	.word	0x0800bcb1
 800bc0c:	0800bcb1 	.word	0x0800bcb1
 800bc10:	0800bcb1 	.word	0x0800bcb1
 800bc14:	0800bcb1 	.word	0x0800bcb1
 800bc18:	0800bcb1 	.word	0x0800bcb1
 800bc1c:	0800bc91 	.word	0x0800bc91
 800bc20:	0800bcb1 	.word	0x0800bcb1
 800bc24:	0800bcb1 	.word	0x0800bcb1
 800bc28:	0800bcb1 	.word	0x0800bcb1
 800bc2c:	0800bcb1 	.word	0x0800bcb1
 800bc30:	0800bcb1 	.word	0x0800bcb1
 800bc34:	0800bcb1 	.word	0x0800bcb1
 800bc38:	0800bcb1 	.word	0x0800bcb1
 800bc3c:	0800bc99 	.word	0x0800bc99
 800bc40:	0800bcb1 	.word	0x0800bcb1
 800bc44:	0800bcb1 	.word	0x0800bcb1
 800bc48:	0800bcb1 	.word	0x0800bcb1
 800bc4c:	0800bcb1 	.word	0x0800bcb1
 800bc50:	0800bcb1 	.word	0x0800bcb1
 800bc54:	0800bcb1 	.word	0x0800bcb1
 800bc58:	0800bcb1 	.word	0x0800bcb1
 800bc5c:	0800bca1 	.word	0x0800bca1
 800bc60:	0800bcb1 	.word	0x0800bcb1
 800bc64:	0800bcb1 	.word	0x0800bcb1
 800bc68:	0800bcb1 	.word	0x0800bcb1
 800bc6c:	0800bcb1 	.word	0x0800bcb1
 800bc70:	0800bcb1 	.word	0x0800bcb1
 800bc74:	0800bcb1 	.word	0x0800bcb1
 800bc78:	0800bcb1 	.word	0x0800bcb1
 800bc7c:	0800bca9 	.word	0x0800bca9
 800bc80:	2301      	movs	r3, #1
 800bc82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc86:	e222      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800bc88:	2304      	movs	r3, #4
 800bc8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc8e:	e21e      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800bc90:	2308      	movs	r3, #8
 800bc92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc96:	e21a      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800bc98:	2310      	movs	r3, #16
 800bc9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc9e:	e216      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800bca0:	2320      	movs	r3, #32
 800bca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bca6:	e212      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800bca8:	2340      	movs	r3, #64	; 0x40
 800bcaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcae:	e20e      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800bcb0:	2380      	movs	r3, #128	; 0x80
 800bcb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcb6:	e20a      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	4a6b      	ldr	r2, [pc, #428]	; (800be6c <UART_SetConfig+0x340>)
 800bcbe:	4293      	cmp	r3, r2
 800bcc0:	d130      	bne.n	800bd24 <UART_SetConfig+0x1f8>
 800bcc2:	4b69      	ldr	r3, [pc, #420]	; (800be68 <UART_SetConfig+0x33c>)
 800bcc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcc6:	f003 0307 	and.w	r3, r3, #7
 800bcca:	2b05      	cmp	r3, #5
 800bccc:	d826      	bhi.n	800bd1c <UART_SetConfig+0x1f0>
 800bcce:	a201      	add	r2, pc, #4	; (adr r2, 800bcd4 <UART_SetConfig+0x1a8>)
 800bcd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcd4:	0800bced 	.word	0x0800bced
 800bcd8:	0800bcf5 	.word	0x0800bcf5
 800bcdc:	0800bcfd 	.word	0x0800bcfd
 800bce0:	0800bd05 	.word	0x0800bd05
 800bce4:	0800bd0d 	.word	0x0800bd0d
 800bce8:	0800bd15 	.word	0x0800bd15
 800bcec:	2300      	movs	r3, #0
 800bcee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcf2:	e1ec      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800bcf4:	2304      	movs	r3, #4
 800bcf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcfa:	e1e8      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800bcfc:	2308      	movs	r3, #8
 800bcfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd02:	e1e4      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800bd04:	2310      	movs	r3, #16
 800bd06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd0a:	e1e0      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800bd0c:	2320      	movs	r3, #32
 800bd0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd12:	e1dc      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800bd14:	2340      	movs	r3, #64	; 0x40
 800bd16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd1a:	e1d8      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800bd1c:	2380      	movs	r3, #128	; 0x80
 800bd1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd22:	e1d4      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	4a51      	ldr	r2, [pc, #324]	; (800be70 <UART_SetConfig+0x344>)
 800bd2a:	4293      	cmp	r3, r2
 800bd2c:	d130      	bne.n	800bd90 <UART_SetConfig+0x264>
 800bd2e:	4b4e      	ldr	r3, [pc, #312]	; (800be68 <UART_SetConfig+0x33c>)
 800bd30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd32:	f003 0307 	and.w	r3, r3, #7
 800bd36:	2b05      	cmp	r3, #5
 800bd38:	d826      	bhi.n	800bd88 <UART_SetConfig+0x25c>
 800bd3a:	a201      	add	r2, pc, #4	; (adr r2, 800bd40 <UART_SetConfig+0x214>)
 800bd3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd40:	0800bd59 	.word	0x0800bd59
 800bd44:	0800bd61 	.word	0x0800bd61
 800bd48:	0800bd69 	.word	0x0800bd69
 800bd4c:	0800bd71 	.word	0x0800bd71
 800bd50:	0800bd79 	.word	0x0800bd79
 800bd54:	0800bd81 	.word	0x0800bd81
 800bd58:	2300      	movs	r3, #0
 800bd5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd5e:	e1b6      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800bd60:	2304      	movs	r3, #4
 800bd62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd66:	e1b2      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800bd68:	2308      	movs	r3, #8
 800bd6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd6e:	e1ae      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800bd70:	2310      	movs	r3, #16
 800bd72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd76:	e1aa      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800bd78:	2320      	movs	r3, #32
 800bd7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd7e:	e1a6      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800bd80:	2340      	movs	r3, #64	; 0x40
 800bd82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd86:	e1a2      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800bd88:	2380      	movs	r3, #128	; 0x80
 800bd8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd8e:	e19e      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	4a37      	ldr	r2, [pc, #220]	; (800be74 <UART_SetConfig+0x348>)
 800bd96:	4293      	cmp	r3, r2
 800bd98:	d130      	bne.n	800bdfc <UART_SetConfig+0x2d0>
 800bd9a:	4b33      	ldr	r3, [pc, #204]	; (800be68 <UART_SetConfig+0x33c>)
 800bd9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd9e:	f003 0307 	and.w	r3, r3, #7
 800bda2:	2b05      	cmp	r3, #5
 800bda4:	d826      	bhi.n	800bdf4 <UART_SetConfig+0x2c8>
 800bda6:	a201      	add	r2, pc, #4	; (adr r2, 800bdac <UART_SetConfig+0x280>)
 800bda8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdac:	0800bdc5 	.word	0x0800bdc5
 800bdb0:	0800bdcd 	.word	0x0800bdcd
 800bdb4:	0800bdd5 	.word	0x0800bdd5
 800bdb8:	0800bddd 	.word	0x0800bddd
 800bdbc:	0800bde5 	.word	0x0800bde5
 800bdc0:	0800bded 	.word	0x0800bded
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdca:	e180      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800bdcc:	2304      	movs	r3, #4
 800bdce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdd2:	e17c      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800bdd4:	2308      	movs	r3, #8
 800bdd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdda:	e178      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800bddc:	2310      	movs	r3, #16
 800bdde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bde2:	e174      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800bde4:	2320      	movs	r3, #32
 800bde6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdea:	e170      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800bdec:	2340      	movs	r3, #64	; 0x40
 800bdee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdf2:	e16c      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800bdf4:	2380      	movs	r3, #128	; 0x80
 800bdf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdfa:	e168      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	4a1d      	ldr	r2, [pc, #116]	; (800be78 <UART_SetConfig+0x34c>)
 800be02:	4293      	cmp	r3, r2
 800be04:	d142      	bne.n	800be8c <UART_SetConfig+0x360>
 800be06:	4b18      	ldr	r3, [pc, #96]	; (800be68 <UART_SetConfig+0x33c>)
 800be08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be0a:	f003 0307 	and.w	r3, r3, #7
 800be0e:	2b05      	cmp	r3, #5
 800be10:	d838      	bhi.n	800be84 <UART_SetConfig+0x358>
 800be12:	a201      	add	r2, pc, #4	; (adr r2, 800be18 <UART_SetConfig+0x2ec>)
 800be14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be18:	0800be31 	.word	0x0800be31
 800be1c:	0800be39 	.word	0x0800be39
 800be20:	0800be41 	.word	0x0800be41
 800be24:	0800be49 	.word	0x0800be49
 800be28:	0800be51 	.word	0x0800be51
 800be2c:	0800be7d 	.word	0x0800be7d
 800be30:	2300      	movs	r3, #0
 800be32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be36:	e14a      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800be38:	2304      	movs	r3, #4
 800be3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be3e:	e146      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800be40:	2308      	movs	r3, #8
 800be42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be46:	e142      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800be48:	2310      	movs	r3, #16
 800be4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be4e:	e13e      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800be50:	2320      	movs	r3, #32
 800be52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be56:	e13a      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800be58:	cfff69f3 	.word	0xcfff69f3
 800be5c:	58000c00 	.word	0x58000c00
 800be60:	11fff4ff 	.word	0x11fff4ff
 800be64:	40011000 	.word	0x40011000
 800be68:	58024400 	.word	0x58024400
 800be6c:	40004400 	.word	0x40004400
 800be70:	40004800 	.word	0x40004800
 800be74:	40004c00 	.word	0x40004c00
 800be78:	40005000 	.word	0x40005000
 800be7c:	2340      	movs	r3, #64	; 0x40
 800be7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be82:	e124      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800be84:	2380      	movs	r3, #128	; 0x80
 800be86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be8a:	e120      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4acc      	ldr	r2, [pc, #816]	; (800c1c4 <UART_SetConfig+0x698>)
 800be92:	4293      	cmp	r3, r2
 800be94:	d176      	bne.n	800bf84 <UART_SetConfig+0x458>
 800be96:	4bcc      	ldr	r3, [pc, #816]	; (800c1c8 <UART_SetConfig+0x69c>)
 800be98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800be9e:	2b28      	cmp	r3, #40	; 0x28
 800bea0:	d86c      	bhi.n	800bf7c <UART_SetConfig+0x450>
 800bea2:	a201      	add	r2, pc, #4	; (adr r2, 800bea8 <UART_SetConfig+0x37c>)
 800bea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bea8:	0800bf4d 	.word	0x0800bf4d
 800beac:	0800bf7d 	.word	0x0800bf7d
 800beb0:	0800bf7d 	.word	0x0800bf7d
 800beb4:	0800bf7d 	.word	0x0800bf7d
 800beb8:	0800bf7d 	.word	0x0800bf7d
 800bebc:	0800bf7d 	.word	0x0800bf7d
 800bec0:	0800bf7d 	.word	0x0800bf7d
 800bec4:	0800bf7d 	.word	0x0800bf7d
 800bec8:	0800bf55 	.word	0x0800bf55
 800becc:	0800bf7d 	.word	0x0800bf7d
 800bed0:	0800bf7d 	.word	0x0800bf7d
 800bed4:	0800bf7d 	.word	0x0800bf7d
 800bed8:	0800bf7d 	.word	0x0800bf7d
 800bedc:	0800bf7d 	.word	0x0800bf7d
 800bee0:	0800bf7d 	.word	0x0800bf7d
 800bee4:	0800bf7d 	.word	0x0800bf7d
 800bee8:	0800bf5d 	.word	0x0800bf5d
 800beec:	0800bf7d 	.word	0x0800bf7d
 800bef0:	0800bf7d 	.word	0x0800bf7d
 800bef4:	0800bf7d 	.word	0x0800bf7d
 800bef8:	0800bf7d 	.word	0x0800bf7d
 800befc:	0800bf7d 	.word	0x0800bf7d
 800bf00:	0800bf7d 	.word	0x0800bf7d
 800bf04:	0800bf7d 	.word	0x0800bf7d
 800bf08:	0800bf65 	.word	0x0800bf65
 800bf0c:	0800bf7d 	.word	0x0800bf7d
 800bf10:	0800bf7d 	.word	0x0800bf7d
 800bf14:	0800bf7d 	.word	0x0800bf7d
 800bf18:	0800bf7d 	.word	0x0800bf7d
 800bf1c:	0800bf7d 	.word	0x0800bf7d
 800bf20:	0800bf7d 	.word	0x0800bf7d
 800bf24:	0800bf7d 	.word	0x0800bf7d
 800bf28:	0800bf6d 	.word	0x0800bf6d
 800bf2c:	0800bf7d 	.word	0x0800bf7d
 800bf30:	0800bf7d 	.word	0x0800bf7d
 800bf34:	0800bf7d 	.word	0x0800bf7d
 800bf38:	0800bf7d 	.word	0x0800bf7d
 800bf3c:	0800bf7d 	.word	0x0800bf7d
 800bf40:	0800bf7d 	.word	0x0800bf7d
 800bf44:	0800bf7d 	.word	0x0800bf7d
 800bf48:	0800bf75 	.word	0x0800bf75
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf52:	e0bc      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800bf54:	2304      	movs	r3, #4
 800bf56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf5a:	e0b8      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800bf5c:	2308      	movs	r3, #8
 800bf5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf62:	e0b4      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800bf64:	2310      	movs	r3, #16
 800bf66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf6a:	e0b0      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800bf6c:	2320      	movs	r3, #32
 800bf6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf72:	e0ac      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800bf74:	2340      	movs	r3, #64	; 0x40
 800bf76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf7a:	e0a8      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800bf7c:	2380      	movs	r3, #128	; 0x80
 800bf7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf82:	e0a4      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	4a90      	ldr	r2, [pc, #576]	; (800c1cc <UART_SetConfig+0x6a0>)
 800bf8a:	4293      	cmp	r3, r2
 800bf8c:	d130      	bne.n	800bff0 <UART_SetConfig+0x4c4>
 800bf8e:	4b8e      	ldr	r3, [pc, #568]	; (800c1c8 <UART_SetConfig+0x69c>)
 800bf90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf92:	f003 0307 	and.w	r3, r3, #7
 800bf96:	2b05      	cmp	r3, #5
 800bf98:	d826      	bhi.n	800bfe8 <UART_SetConfig+0x4bc>
 800bf9a:	a201      	add	r2, pc, #4	; (adr r2, 800bfa0 <UART_SetConfig+0x474>)
 800bf9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfa0:	0800bfb9 	.word	0x0800bfb9
 800bfa4:	0800bfc1 	.word	0x0800bfc1
 800bfa8:	0800bfc9 	.word	0x0800bfc9
 800bfac:	0800bfd1 	.word	0x0800bfd1
 800bfb0:	0800bfd9 	.word	0x0800bfd9
 800bfb4:	0800bfe1 	.word	0x0800bfe1
 800bfb8:	2300      	movs	r3, #0
 800bfba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfbe:	e086      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800bfc0:	2304      	movs	r3, #4
 800bfc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfc6:	e082      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800bfc8:	2308      	movs	r3, #8
 800bfca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfce:	e07e      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800bfd0:	2310      	movs	r3, #16
 800bfd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfd6:	e07a      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800bfd8:	2320      	movs	r3, #32
 800bfda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfde:	e076      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800bfe0:	2340      	movs	r3, #64	; 0x40
 800bfe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfe6:	e072      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800bfe8:	2380      	movs	r3, #128	; 0x80
 800bfea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfee:	e06e      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	4a76      	ldr	r2, [pc, #472]	; (800c1d0 <UART_SetConfig+0x6a4>)
 800bff6:	4293      	cmp	r3, r2
 800bff8:	d130      	bne.n	800c05c <UART_SetConfig+0x530>
 800bffa:	4b73      	ldr	r3, [pc, #460]	; (800c1c8 <UART_SetConfig+0x69c>)
 800bffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bffe:	f003 0307 	and.w	r3, r3, #7
 800c002:	2b05      	cmp	r3, #5
 800c004:	d826      	bhi.n	800c054 <UART_SetConfig+0x528>
 800c006:	a201      	add	r2, pc, #4	; (adr r2, 800c00c <UART_SetConfig+0x4e0>)
 800c008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c00c:	0800c025 	.word	0x0800c025
 800c010:	0800c02d 	.word	0x0800c02d
 800c014:	0800c035 	.word	0x0800c035
 800c018:	0800c03d 	.word	0x0800c03d
 800c01c:	0800c045 	.word	0x0800c045
 800c020:	0800c04d 	.word	0x0800c04d
 800c024:	2300      	movs	r3, #0
 800c026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c02a:	e050      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800c02c:	2304      	movs	r3, #4
 800c02e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c032:	e04c      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800c034:	2308      	movs	r3, #8
 800c036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c03a:	e048      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800c03c:	2310      	movs	r3, #16
 800c03e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c042:	e044      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800c044:	2320      	movs	r3, #32
 800c046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c04a:	e040      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800c04c:	2340      	movs	r3, #64	; 0x40
 800c04e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c052:	e03c      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800c054:	2380      	movs	r3, #128	; 0x80
 800c056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c05a:	e038      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	4a5c      	ldr	r2, [pc, #368]	; (800c1d4 <UART_SetConfig+0x6a8>)
 800c062:	4293      	cmp	r3, r2
 800c064:	d130      	bne.n	800c0c8 <UART_SetConfig+0x59c>
 800c066:	4b58      	ldr	r3, [pc, #352]	; (800c1c8 <UART_SetConfig+0x69c>)
 800c068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c06a:	f003 0307 	and.w	r3, r3, #7
 800c06e:	2b05      	cmp	r3, #5
 800c070:	d826      	bhi.n	800c0c0 <UART_SetConfig+0x594>
 800c072:	a201      	add	r2, pc, #4	; (adr r2, 800c078 <UART_SetConfig+0x54c>)
 800c074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c078:	0800c091 	.word	0x0800c091
 800c07c:	0800c099 	.word	0x0800c099
 800c080:	0800c0a1 	.word	0x0800c0a1
 800c084:	0800c0a9 	.word	0x0800c0a9
 800c088:	0800c0b1 	.word	0x0800c0b1
 800c08c:	0800c0b9 	.word	0x0800c0b9
 800c090:	2302      	movs	r3, #2
 800c092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c096:	e01a      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800c098:	2304      	movs	r3, #4
 800c09a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c09e:	e016      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800c0a0:	2308      	movs	r3, #8
 800c0a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0a6:	e012      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800c0a8:	2310      	movs	r3, #16
 800c0aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0ae:	e00e      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800c0b0:	2320      	movs	r3, #32
 800c0b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0b6:	e00a      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800c0b8:	2340      	movs	r3, #64	; 0x40
 800c0ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0be:	e006      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800c0c0:	2380      	movs	r3, #128	; 0x80
 800c0c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0c6:	e002      	b.n	800c0ce <UART_SetConfig+0x5a2>
 800c0c8:	2380      	movs	r3, #128	; 0x80
 800c0ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	4a40      	ldr	r2, [pc, #256]	; (800c1d4 <UART_SetConfig+0x6a8>)
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	f040 80ef 	bne.w	800c2b8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c0da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c0de:	2b20      	cmp	r3, #32
 800c0e0:	dc46      	bgt.n	800c170 <UART_SetConfig+0x644>
 800c0e2:	2b02      	cmp	r3, #2
 800c0e4:	f2c0 8081 	blt.w	800c1ea <UART_SetConfig+0x6be>
 800c0e8:	3b02      	subs	r3, #2
 800c0ea:	2b1e      	cmp	r3, #30
 800c0ec:	d87d      	bhi.n	800c1ea <UART_SetConfig+0x6be>
 800c0ee:	a201      	add	r2, pc, #4	; (adr r2, 800c0f4 <UART_SetConfig+0x5c8>)
 800c0f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0f4:	0800c177 	.word	0x0800c177
 800c0f8:	0800c1eb 	.word	0x0800c1eb
 800c0fc:	0800c17f 	.word	0x0800c17f
 800c100:	0800c1eb 	.word	0x0800c1eb
 800c104:	0800c1eb 	.word	0x0800c1eb
 800c108:	0800c1eb 	.word	0x0800c1eb
 800c10c:	0800c18f 	.word	0x0800c18f
 800c110:	0800c1eb 	.word	0x0800c1eb
 800c114:	0800c1eb 	.word	0x0800c1eb
 800c118:	0800c1eb 	.word	0x0800c1eb
 800c11c:	0800c1eb 	.word	0x0800c1eb
 800c120:	0800c1eb 	.word	0x0800c1eb
 800c124:	0800c1eb 	.word	0x0800c1eb
 800c128:	0800c1eb 	.word	0x0800c1eb
 800c12c:	0800c19f 	.word	0x0800c19f
 800c130:	0800c1eb 	.word	0x0800c1eb
 800c134:	0800c1eb 	.word	0x0800c1eb
 800c138:	0800c1eb 	.word	0x0800c1eb
 800c13c:	0800c1eb 	.word	0x0800c1eb
 800c140:	0800c1eb 	.word	0x0800c1eb
 800c144:	0800c1eb 	.word	0x0800c1eb
 800c148:	0800c1eb 	.word	0x0800c1eb
 800c14c:	0800c1eb 	.word	0x0800c1eb
 800c150:	0800c1eb 	.word	0x0800c1eb
 800c154:	0800c1eb 	.word	0x0800c1eb
 800c158:	0800c1eb 	.word	0x0800c1eb
 800c15c:	0800c1eb 	.word	0x0800c1eb
 800c160:	0800c1eb 	.word	0x0800c1eb
 800c164:	0800c1eb 	.word	0x0800c1eb
 800c168:	0800c1eb 	.word	0x0800c1eb
 800c16c:	0800c1dd 	.word	0x0800c1dd
 800c170:	2b40      	cmp	r3, #64	; 0x40
 800c172:	d036      	beq.n	800c1e2 <UART_SetConfig+0x6b6>
 800c174:	e039      	b.n	800c1ea <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c176:	f7fd f903 	bl	8009380 <HAL_RCCEx_GetD3PCLK1Freq>
 800c17a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c17c:	e03b      	b.n	800c1f6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c17e:	f107 0314 	add.w	r3, r7, #20
 800c182:	4618      	mov	r0, r3
 800c184:	f7fd f912 	bl	80093ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c188:	69bb      	ldr	r3, [r7, #24]
 800c18a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c18c:	e033      	b.n	800c1f6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c18e:	f107 0308 	add.w	r3, r7, #8
 800c192:	4618      	mov	r0, r3
 800c194:	f7fd fa5e 	bl	8009654 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c19c:	e02b      	b.n	800c1f6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c19e:	4b0a      	ldr	r3, [pc, #40]	; (800c1c8 <UART_SetConfig+0x69c>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f003 0320 	and.w	r3, r3, #32
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d009      	beq.n	800c1be <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c1aa:	4b07      	ldr	r3, [pc, #28]	; (800c1c8 <UART_SetConfig+0x69c>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	08db      	lsrs	r3, r3, #3
 800c1b0:	f003 0303 	and.w	r3, r3, #3
 800c1b4:	4a08      	ldr	r2, [pc, #32]	; (800c1d8 <UART_SetConfig+0x6ac>)
 800c1b6:	fa22 f303 	lsr.w	r3, r2, r3
 800c1ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c1bc:	e01b      	b.n	800c1f6 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800c1be:	4b06      	ldr	r3, [pc, #24]	; (800c1d8 <UART_SetConfig+0x6ac>)
 800c1c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c1c2:	e018      	b.n	800c1f6 <UART_SetConfig+0x6ca>
 800c1c4:	40011400 	.word	0x40011400
 800c1c8:	58024400 	.word	0x58024400
 800c1cc:	40007800 	.word	0x40007800
 800c1d0:	40007c00 	.word	0x40007c00
 800c1d4:	58000c00 	.word	0x58000c00
 800c1d8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c1dc:	4bc4      	ldr	r3, [pc, #784]	; (800c4f0 <UART_SetConfig+0x9c4>)
 800c1de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c1e0:	e009      	b.n	800c1f6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c1e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c1e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c1e8:	e005      	b.n	800c1f6 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c1f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	f000 81da 	beq.w	800c5b2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c202:	4abc      	ldr	r2, [pc, #752]	; (800c4f4 <UART_SetConfig+0x9c8>)
 800c204:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c208:	461a      	mov	r2, r3
 800c20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c20c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c210:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	685a      	ldr	r2, [r3, #4]
 800c216:	4613      	mov	r3, r2
 800c218:	005b      	lsls	r3, r3, #1
 800c21a:	4413      	add	r3, r2
 800c21c:	6a3a      	ldr	r2, [r7, #32]
 800c21e:	429a      	cmp	r2, r3
 800c220:	d305      	bcc.n	800c22e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	685b      	ldr	r3, [r3, #4]
 800c226:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c228:	6a3a      	ldr	r2, [r7, #32]
 800c22a:	429a      	cmp	r2, r3
 800c22c:	d903      	bls.n	800c236 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800c22e:	2301      	movs	r3, #1
 800c230:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c234:	e1bd      	b.n	800c5b2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c238:	4618      	mov	r0, r3
 800c23a:	f04f 0100 	mov.w	r1, #0
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c242:	4aac      	ldr	r2, [pc, #688]	; (800c4f4 <UART_SetConfig+0x9c8>)
 800c244:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c248:	b29a      	uxth	r2, r3
 800c24a:	f04f 0300 	mov.w	r3, #0
 800c24e:	f7f4 f89f 	bl	8000390 <__aeabi_uldivmod>
 800c252:	4602      	mov	r2, r0
 800c254:	460b      	mov	r3, r1
 800c256:	4610      	mov	r0, r2
 800c258:	4619      	mov	r1, r3
 800c25a:	f04f 0200 	mov.w	r2, #0
 800c25e:	f04f 0300 	mov.w	r3, #0
 800c262:	020b      	lsls	r3, r1, #8
 800c264:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c268:	0202      	lsls	r2, r0, #8
 800c26a:	6879      	ldr	r1, [r7, #4]
 800c26c:	6849      	ldr	r1, [r1, #4]
 800c26e:	0849      	lsrs	r1, r1, #1
 800c270:	4608      	mov	r0, r1
 800c272:	f04f 0100 	mov.w	r1, #0
 800c276:	1814      	adds	r4, r2, r0
 800c278:	eb43 0501 	adc.w	r5, r3, r1
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	685b      	ldr	r3, [r3, #4]
 800c280:	461a      	mov	r2, r3
 800c282:	f04f 0300 	mov.w	r3, #0
 800c286:	4620      	mov	r0, r4
 800c288:	4629      	mov	r1, r5
 800c28a:	f7f4 f881 	bl	8000390 <__aeabi_uldivmod>
 800c28e:	4602      	mov	r2, r0
 800c290:	460b      	mov	r3, r1
 800c292:	4613      	mov	r3, r2
 800c294:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c298:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c29c:	d308      	bcc.n	800c2b0 <UART_SetConfig+0x784>
 800c29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c2a4:	d204      	bcs.n	800c2b0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2ac:	60da      	str	r2, [r3, #12]
 800c2ae:	e180      	b.n	800c5b2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c2b6:	e17c      	b.n	800c5b2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	69db      	ldr	r3, [r3, #28]
 800c2bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c2c0:	f040 80bf 	bne.w	800c442 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800c2c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c2c8:	2b20      	cmp	r3, #32
 800c2ca:	dc49      	bgt.n	800c360 <UART_SetConfig+0x834>
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	db7c      	blt.n	800c3ca <UART_SetConfig+0x89e>
 800c2d0:	2b20      	cmp	r3, #32
 800c2d2:	d87a      	bhi.n	800c3ca <UART_SetConfig+0x89e>
 800c2d4:	a201      	add	r2, pc, #4	; (adr r2, 800c2dc <UART_SetConfig+0x7b0>)
 800c2d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2da:	bf00      	nop
 800c2dc:	0800c367 	.word	0x0800c367
 800c2e0:	0800c36f 	.word	0x0800c36f
 800c2e4:	0800c3cb 	.word	0x0800c3cb
 800c2e8:	0800c3cb 	.word	0x0800c3cb
 800c2ec:	0800c377 	.word	0x0800c377
 800c2f0:	0800c3cb 	.word	0x0800c3cb
 800c2f4:	0800c3cb 	.word	0x0800c3cb
 800c2f8:	0800c3cb 	.word	0x0800c3cb
 800c2fc:	0800c387 	.word	0x0800c387
 800c300:	0800c3cb 	.word	0x0800c3cb
 800c304:	0800c3cb 	.word	0x0800c3cb
 800c308:	0800c3cb 	.word	0x0800c3cb
 800c30c:	0800c3cb 	.word	0x0800c3cb
 800c310:	0800c3cb 	.word	0x0800c3cb
 800c314:	0800c3cb 	.word	0x0800c3cb
 800c318:	0800c3cb 	.word	0x0800c3cb
 800c31c:	0800c397 	.word	0x0800c397
 800c320:	0800c3cb 	.word	0x0800c3cb
 800c324:	0800c3cb 	.word	0x0800c3cb
 800c328:	0800c3cb 	.word	0x0800c3cb
 800c32c:	0800c3cb 	.word	0x0800c3cb
 800c330:	0800c3cb 	.word	0x0800c3cb
 800c334:	0800c3cb 	.word	0x0800c3cb
 800c338:	0800c3cb 	.word	0x0800c3cb
 800c33c:	0800c3cb 	.word	0x0800c3cb
 800c340:	0800c3cb 	.word	0x0800c3cb
 800c344:	0800c3cb 	.word	0x0800c3cb
 800c348:	0800c3cb 	.word	0x0800c3cb
 800c34c:	0800c3cb 	.word	0x0800c3cb
 800c350:	0800c3cb 	.word	0x0800c3cb
 800c354:	0800c3cb 	.word	0x0800c3cb
 800c358:	0800c3cb 	.word	0x0800c3cb
 800c35c:	0800c3bd 	.word	0x0800c3bd
 800c360:	2b40      	cmp	r3, #64	; 0x40
 800c362:	d02e      	beq.n	800c3c2 <UART_SetConfig+0x896>
 800c364:	e031      	b.n	800c3ca <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c366:	f7fb fbcd 	bl	8007b04 <HAL_RCC_GetPCLK1Freq>
 800c36a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c36c:	e033      	b.n	800c3d6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c36e:	f7fb fbdf 	bl	8007b30 <HAL_RCC_GetPCLK2Freq>
 800c372:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c374:	e02f      	b.n	800c3d6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c376:	f107 0314 	add.w	r3, r7, #20
 800c37a:	4618      	mov	r0, r3
 800c37c:	f7fd f816 	bl	80093ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c380:	69bb      	ldr	r3, [r7, #24]
 800c382:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c384:	e027      	b.n	800c3d6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c386:	f107 0308 	add.w	r3, r7, #8
 800c38a:	4618      	mov	r0, r3
 800c38c:	f7fd f962 	bl	8009654 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c394:	e01f      	b.n	800c3d6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c396:	4b58      	ldr	r3, [pc, #352]	; (800c4f8 <UART_SetConfig+0x9cc>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	f003 0320 	and.w	r3, r3, #32
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d009      	beq.n	800c3b6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c3a2:	4b55      	ldr	r3, [pc, #340]	; (800c4f8 <UART_SetConfig+0x9cc>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	08db      	lsrs	r3, r3, #3
 800c3a8:	f003 0303 	and.w	r3, r3, #3
 800c3ac:	4a53      	ldr	r2, [pc, #332]	; (800c4fc <UART_SetConfig+0x9d0>)
 800c3ae:	fa22 f303 	lsr.w	r3, r2, r3
 800c3b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c3b4:	e00f      	b.n	800c3d6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800c3b6:	4b51      	ldr	r3, [pc, #324]	; (800c4fc <UART_SetConfig+0x9d0>)
 800c3b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c3ba:	e00c      	b.n	800c3d6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c3bc:	4b4c      	ldr	r3, [pc, #304]	; (800c4f0 <UART_SetConfig+0x9c4>)
 800c3be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c3c0:	e009      	b.n	800c3d6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c3c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c3c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c3c8:	e005      	b.n	800c3d6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c3d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	f000 80ea 	beq.w	800c5b2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3e2:	4a44      	ldr	r2, [pc, #272]	; (800c4f4 <UART_SetConfig+0x9c8>)
 800c3e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c3e8:	461a      	mov	r2, r3
 800c3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800c3f0:	005a      	lsls	r2, r3, #1
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	685b      	ldr	r3, [r3, #4]
 800c3f6:	085b      	lsrs	r3, r3, #1
 800c3f8:	441a      	add	r2, r3
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	685b      	ldr	r3, [r3, #4]
 800c3fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800c402:	b29b      	uxth	r3, r3
 800c404:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c408:	2b0f      	cmp	r3, #15
 800c40a:	d916      	bls.n	800c43a <UART_SetConfig+0x90e>
 800c40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c40e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c412:	d212      	bcs.n	800c43a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c416:	b29b      	uxth	r3, r3
 800c418:	f023 030f 	bic.w	r3, r3, #15
 800c41c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c420:	085b      	lsrs	r3, r3, #1
 800c422:	b29b      	uxth	r3, r3
 800c424:	f003 0307 	and.w	r3, r3, #7
 800c428:	b29a      	uxth	r2, r3
 800c42a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c42c:	4313      	orrs	r3, r2
 800c42e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c436:	60da      	str	r2, [r3, #12]
 800c438:	e0bb      	b.n	800c5b2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800c43a:	2301      	movs	r3, #1
 800c43c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c440:	e0b7      	b.n	800c5b2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c442:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c446:	2b20      	cmp	r3, #32
 800c448:	dc4a      	bgt.n	800c4e0 <UART_SetConfig+0x9b4>
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	f2c0 8086 	blt.w	800c55c <UART_SetConfig+0xa30>
 800c450:	2b20      	cmp	r3, #32
 800c452:	f200 8083 	bhi.w	800c55c <UART_SetConfig+0xa30>
 800c456:	a201      	add	r2, pc, #4	; (adr r2, 800c45c <UART_SetConfig+0x930>)
 800c458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c45c:	0800c4e7 	.word	0x0800c4e7
 800c460:	0800c501 	.word	0x0800c501
 800c464:	0800c55d 	.word	0x0800c55d
 800c468:	0800c55d 	.word	0x0800c55d
 800c46c:	0800c509 	.word	0x0800c509
 800c470:	0800c55d 	.word	0x0800c55d
 800c474:	0800c55d 	.word	0x0800c55d
 800c478:	0800c55d 	.word	0x0800c55d
 800c47c:	0800c519 	.word	0x0800c519
 800c480:	0800c55d 	.word	0x0800c55d
 800c484:	0800c55d 	.word	0x0800c55d
 800c488:	0800c55d 	.word	0x0800c55d
 800c48c:	0800c55d 	.word	0x0800c55d
 800c490:	0800c55d 	.word	0x0800c55d
 800c494:	0800c55d 	.word	0x0800c55d
 800c498:	0800c55d 	.word	0x0800c55d
 800c49c:	0800c529 	.word	0x0800c529
 800c4a0:	0800c55d 	.word	0x0800c55d
 800c4a4:	0800c55d 	.word	0x0800c55d
 800c4a8:	0800c55d 	.word	0x0800c55d
 800c4ac:	0800c55d 	.word	0x0800c55d
 800c4b0:	0800c55d 	.word	0x0800c55d
 800c4b4:	0800c55d 	.word	0x0800c55d
 800c4b8:	0800c55d 	.word	0x0800c55d
 800c4bc:	0800c55d 	.word	0x0800c55d
 800c4c0:	0800c55d 	.word	0x0800c55d
 800c4c4:	0800c55d 	.word	0x0800c55d
 800c4c8:	0800c55d 	.word	0x0800c55d
 800c4cc:	0800c55d 	.word	0x0800c55d
 800c4d0:	0800c55d 	.word	0x0800c55d
 800c4d4:	0800c55d 	.word	0x0800c55d
 800c4d8:	0800c55d 	.word	0x0800c55d
 800c4dc:	0800c54f 	.word	0x0800c54f
 800c4e0:	2b40      	cmp	r3, #64	; 0x40
 800c4e2:	d037      	beq.n	800c554 <UART_SetConfig+0xa28>
 800c4e4:	e03a      	b.n	800c55c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c4e6:	f7fb fb0d 	bl	8007b04 <HAL_RCC_GetPCLK1Freq>
 800c4ea:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c4ec:	e03c      	b.n	800c568 <UART_SetConfig+0xa3c>
 800c4ee:	bf00      	nop
 800c4f0:	003d0900 	.word	0x003d0900
 800c4f4:	0800ff68 	.word	0x0800ff68
 800c4f8:	58024400 	.word	0x58024400
 800c4fc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c500:	f7fb fb16 	bl	8007b30 <HAL_RCC_GetPCLK2Freq>
 800c504:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c506:	e02f      	b.n	800c568 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c508:	f107 0314 	add.w	r3, r7, #20
 800c50c:	4618      	mov	r0, r3
 800c50e:	f7fc ff4d 	bl	80093ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c512:	69bb      	ldr	r3, [r7, #24]
 800c514:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c516:	e027      	b.n	800c568 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c518:	f107 0308 	add.w	r3, r7, #8
 800c51c:	4618      	mov	r0, r3
 800c51e:	f7fd f899 	bl	8009654 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c526:	e01f      	b.n	800c568 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c528:	4b2c      	ldr	r3, [pc, #176]	; (800c5dc <UART_SetConfig+0xab0>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f003 0320 	and.w	r3, r3, #32
 800c530:	2b00      	cmp	r3, #0
 800c532:	d009      	beq.n	800c548 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c534:	4b29      	ldr	r3, [pc, #164]	; (800c5dc <UART_SetConfig+0xab0>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	08db      	lsrs	r3, r3, #3
 800c53a:	f003 0303 	and.w	r3, r3, #3
 800c53e:	4a28      	ldr	r2, [pc, #160]	; (800c5e0 <UART_SetConfig+0xab4>)
 800c540:	fa22 f303 	lsr.w	r3, r2, r3
 800c544:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c546:	e00f      	b.n	800c568 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800c548:	4b25      	ldr	r3, [pc, #148]	; (800c5e0 <UART_SetConfig+0xab4>)
 800c54a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c54c:	e00c      	b.n	800c568 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c54e:	4b25      	ldr	r3, [pc, #148]	; (800c5e4 <UART_SetConfig+0xab8>)
 800c550:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c552:	e009      	b.n	800c568 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c554:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c558:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c55a:	e005      	b.n	800c568 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800c55c:	2300      	movs	r3, #0
 800c55e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c560:	2301      	movs	r3, #1
 800c562:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c566:	bf00      	nop
    }

    if (pclk != 0U)
 800c568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d021      	beq.n	800c5b2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c572:	4a1d      	ldr	r2, [pc, #116]	; (800c5e8 <UART_SetConfig+0xabc>)
 800c574:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c578:	461a      	mov	r2, r3
 800c57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c57c:	fbb3 f2f2 	udiv	r2, r3, r2
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	685b      	ldr	r3, [r3, #4]
 800c584:	085b      	lsrs	r3, r3, #1
 800c586:	441a      	add	r2, r3
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	685b      	ldr	r3, [r3, #4]
 800c58c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c590:	b29b      	uxth	r3, r3
 800c592:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c596:	2b0f      	cmp	r3, #15
 800c598:	d908      	bls.n	800c5ac <UART_SetConfig+0xa80>
 800c59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c59c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5a0:	d204      	bcs.n	800c5ac <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5a8:	60da      	str	r2, [r3, #12]
 800c5aa:	e002      	b.n	800c5b2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2201      	movs	r2, #1
 800c5b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2201      	movs	r2, #1
 800c5be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c5ce:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3738      	adds	r7, #56	; 0x38
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bdb0      	pop	{r4, r5, r7, pc}
 800c5da:	bf00      	nop
 800c5dc:	58024400 	.word	0x58024400
 800c5e0:	03d09000 	.word	0x03d09000
 800c5e4:	003d0900 	.word	0x003d0900
 800c5e8:	0800ff68 	.word	0x0800ff68

0800c5ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b083      	sub	sp, #12
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5f8:	f003 0301 	and.w	r3, r3, #1
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d00a      	beq.n	800c616 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	685b      	ldr	r3, [r3, #4]
 800c606:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	430a      	orrs	r2, r1
 800c614:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c61a:	f003 0302 	and.w	r3, r3, #2
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d00a      	beq.n	800c638 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	685b      	ldr	r3, [r3, #4]
 800c628:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	430a      	orrs	r2, r1
 800c636:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c63c:	f003 0304 	and.w	r3, r3, #4
 800c640:	2b00      	cmp	r3, #0
 800c642:	d00a      	beq.n	800c65a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	685b      	ldr	r3, [r3, #4]
 800c64a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	430a      	orrs	r2, r1
 800c658:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c65e:	f003 0308 	and.w	r3, r3, #8
 800c662:	2b00      	cmp	r3, #0
 800c664:	d00a      	beq.n	800c67c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	685b      	ldr	r3, [r3, #4]
 800c66c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	430a      	orrs	r2, r1
 800c67a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c680:	f003 0310 	and.w	r3, r3, #16
 800c684:	2b00      	cmp	r3, #0
 800c686:	d00a      	beq.n	800c69e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	689b      	ldr	r3, [r3, #8]
 800c68e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	430a      	orrs	r2, r1
 800c69c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6a2:	f003 0320 	and.w	r3, r3, #32
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d00a      	beq.n	800c6c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	689b      	ldr	r3, [r3, #8]
 800c6b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	430a      	orrs	r2, r1
 800c6be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d01a      	beq.n	800c702 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	685b      	ldr	r3, [r3, #4]
 800c6d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	430a      	orrs	r2, r1
 800c6e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c6ea:	d10a      	bne.n	800c702 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	685b      	ldr	r3, [r3, #4]
 800c6f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	430a      	orrs	r2, r1
 800c700:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d00a      	beq.n	800c724 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	685b      	ldr	r3, [r3, #4]
 800c714:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	430a      	orrs	r2, r1
 800c722:	605a      	str	r2, [r3, #4]
  }
}
 800c724:	bf00      	nop
 800c726:	370c      	adds	r7, #12
 800c728:	46bd      	mov	sp, r7
 800c72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72e:	4770      	bx	lr

0800c730 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b086      	sub	sp, #24
 800c734:	af02      	add	r7, sp, #8
 800c736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2200      	movs	r2, #0
 800c73c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c740:	f7f5 ff9c 	bl	800267c <HAL_GetTick>
 800c744:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	f003 0308 	and.w	r3, r3, #8
 800c750:	2b08      	cmp	r3, #8
 800c752:	d10e      	bne.n	800c772 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c754:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c758:	9300      	str	r3, [sp, #0]
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	2200      	movs	r2, #0
 800c75e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f000 f82f 	bl	800c7c6 <UART_WaitOnFlagUntilTimeout>
 800c768:	4603      	mov	r3, r0
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d001      	beq.n	800c772 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c76e:	2303      	movs	r3, #3
 800c770:	e025      	b.n	800c7be <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f003 0304 	and.w	r3, r3, #4
 800c77c:	2b04      	cmp	r3, #4
 800c77e:	d10e      	bne.n	800c79e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c780:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c784:	9300      	str	r3, [sp, #0]
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	2200      	movs	r2, #0
 800c78a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f000 f819 	bl	800c7c6 <UART_WaitOnFlagUntilTimeout>
 800c794:	4603      	mov	r3, r0
 800c796:	2b00      	cmp	r3, #0
 800c798:	d001      	beq.n	800c79e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c79a:	2303      	movs	r3, #3
 800c79c:	e00f      	b.n	800c7be <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2220      	movs	r2, #32
 800c7a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2220      	movs	r2, #32
 800c7aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c7bc:	2300      	movs	r3, #0
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3710      	adds	r7, #16
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}

0800c7c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c7c6:	b580      	push	{r7, lr}
 800c7c8:	b084      	sub	sp, #16
 800c7ca:	af00      	add	r7, sp, #0
 800c7cc:	60f8      	str	r0, [r7, #12]
 800c7ce:	60b9      	str	r1, [r7, #8]
 800c7d0:	603b      	str	r3, [r7, #0]
 800c7d2:	4613      	mov	r3, r2
 800c7d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c7d6:	e062      	b.n	800c89e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c7d8:	69bb      	ldr	r3, [r7, #24]
 800c7da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7de:	d05e      	beq.n	800c89e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c7e0:	f7f5 ff4c 	bl	800267c <HAL_GetTick>
 800c7e4:	4602      	mov	r2, r0
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	1ad3      	subs	r3, r2, r3
 800c7ea:	69ba      	ldr	r2, [r7, #24]
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	d302      	bcc.n	800c7f6 <UART_WaitOnFlagUntilTimeout+0x30>
 800c7f0:	69bb      	ldr	r3, [r7, #24]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d11d      	bne.n	800c832 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	681a      	ldr	r2, [r3, #0]
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c804:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	689a      	ldr	r2, [r3, #8]
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	f022 0201 	bic.w	r2, r2, #1
 800c814:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	2220      	movs	r2, #32
 800c81a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	2220      	movs	r2, #32
 800c822:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	2200      	movs	r2, #0
 800c82a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c82e:	2303      	movs	r3, #3
 800c830:	e045      	b.n	800c8be <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	f003 0304 	and.w	r3, r3, #4
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d02e      	beq.n	800c89e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	69db      	ldr	r3, [r3, #28]
 800c846:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c84a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c84e:	d126      	bne.n	800c89e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c858:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	681a      	ldr	r2, [r3, #0]
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c868:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	689a      	ldr	r2, [r3, #8]
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	f022 0201 	bic.w	r2, r2, #1
 800c878:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	2220      	movs	r2, #32
 800c87e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	2220      	movs	r2, #32
 800c886:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	2220      	movs	r2, #32
 800c88e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	2200      	movs	r2, #0
 800c896:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c89a:	2303      	movs	r3, #3
 800c89c:	e00f      	b.n	800c8be <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	69da      	ldr	r2, [r3, #28]
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	4013      	ands	r3, r2
 800c8a8:	68ba      	ldr	r2, [r7, #8]
 800c8aa:	429a      	cmp	r2, r3
 800c8ac:	bf0c      	ite	eq
 800c8ae:	2301      	moveq	r3, #1
 800c8b0:	2300      	movne	r3, #0
 800c8b2:	b2db      	uxtb	r3, r3
 800c8b4:	461a      	mov	r2, r3
 800c8b6:	79fb      	ldrb	r3, [r7, #7]
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	d08d      	beq.n	800c7d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c8bc:	2300      	movs	r3, #0
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3710      	adds	r7, #16
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}

0800c8c6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c8c6:	b480      	push	{r7}
 800c8c8:	b085      	sub	sp, #20
 800c8ca:	af00      	add	r7, sp, #0
 800c8cc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c8d4:	2b01      	cmp	r3, #1
 800c8d6:	d101      	bne.n	800c8dc <HAL_UARTEx_DisableFifoMode+0x16>
 800c8d8:	2302      	movs	r3, #2
 800c8da:	e027      	b.n	800c92c <HAL_UARTEx_DisableFifoMode+0x66>
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2201      	movs	r2, #1
 800c8e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2224      	movs	r2, #36	; 0x24
 800c8e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	681a      	ldr	r2, [r3, #0]
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f022 0201 	bic.w	r2, r2, #1
 800c902:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c90a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2200      	movs	r2, #0
 800c910:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	68fa      	ldr	r2, [r7, #12]
 800c918:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2220      	movs	r2, #32
 800c91e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2200      	movs	r2, #0
 800c926:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c92a:	2300      	movs	r3, #0
}
 800c92c:	4618      	mov	r0, r3
 800c92e:	3714      	adds	r7, #20
 800c930:	46bd      	mov	sp, r7
 800c932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c936:	4770      	bx	lr

0800c938 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b084      	sub	sp, #16
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
 800c940:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c948:	2b01      	cmp	r3, #1
 800c94a:	d101      	bne.n	800c950 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c94c:	2302      	movs	r3, #2
 800c94e:	e02d      	b.n	800c9ac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2201      	movs	r2, #1
 800c954:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2224      	movs	r2, #36	; 0x24
 800c95c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	681a      	ldr	r2, [r3, #0]
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f022 0201 	bic.w	r2, r2, #1
 800c976:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	689b      	ldr	r3, [r3, #8]
 800c97e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	683a      	ldr	r2, [r7, #0]
 800c988:	430a      	orrs	r2, r1
 800c98a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f000 f84f 	bl	800ca30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	68fa      	ldr	r2, [r7, #12]
 800c998:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2220      	movs	r2, #32
 800c99e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c9aa:	2300      	movs	r3, #0
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3710      	adds	r7, #16
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}

0800c9b4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b084      	sub	sp, #16
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
 800c9bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c9c4:	2b01      	cmp	r3, #1
 800c9c6:	d101      	bne.n	800c9cc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c9c8:	2302      	movs	r3, #2
 800c9ca:	e02d      	b.n	800ca28 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2201      	movs	r2, #1
 800c9d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2224      	movs	r2, #36	; 0x24
 800c9d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	681a      	ldr	r2, [r3, #0]
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	f022 0201 	bic.w	r2, r2, #1
 800c9f2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	689b      	ldr	r3, [r3, #8]
 800c9fa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	683a      	ldr	r2, [r7, #0]
 800ca04:	430a      	orrs	r2, r1
 800ca06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f000 f811 	bl	800ca30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	68fa      	ldr	r2, [r7, #12]
 800ca14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2220      	movs	r2, #32
 800ca1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2200      	movs	r2, #0
 800ca22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ca26:	2300      	movs	r3, #0
}
 800ca28:	4618      	mov	r0, r3
 800ca2a:	3710      	adds	r7, #16
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}

0800ca30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ca30:	b480      	push	{r7}
 800ca32:	b085      	sub	sp, #20
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d108      	bne.n	800ca52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2201      	movs	r2, #1
 800ca44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2201      	movs	r2, #1
 800ca4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ca50:	e031      	b.n	800cab6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ca52:	2310      	movs	r3, #16
 800ca54:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ca56:	2310      	movs	r3, #16
 800ca58:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	689b      	ldr	r3, [r3, #8]
 800ca60:	0e5b      	lsrs	r3, r3, #25
 800ca62:	b2db      	uxtb	r3, r3
 800ca64:	f003 0307 	and.w	r3, r3, #7
 800ca68:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	689b      	ldr	r3, [r3, #8]
 800ca70:	0f5b      	lsrs	r3, r3, #29
 800ca72:	b2db      	uxtb	r3, r3
 800ca74:	f003 0307 	and.w	r3, r3, #7
 800ca78:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ca7a:	7bbb      	ldrb	r3, [r7, #14]
 800ca7c:	7b3a      	ldrb	r2, [r7, #12]
 800ca7e:	4911      	ldr	r1, [pc, #68]	; (800cac4 <UARTEx_SetNbDataToProcess+0x94>)
 800ca80:	5c8a      	ldrb	r2, [r1, r2]
 800ca82:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ca86:	7b3a      	ldrb	r2, [r7, #12]
 800ca88:	490f      	ldr	r1, [pc, #60]	; (800cac8 <UARTEx_SetNbDataToProcess+0x98>)
 800ca8a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ca8c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca90:	b29a      	uxth	r2, r3
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ca98:	7bfb      	ldrb	r3, [r7, #15]
 800ca9a:	7b7a      	ldrb	r2, [r7, #13]
 800ca9c:	4909      	ldr	r1, [pc, #36]	; (800cac4 <UARTEx_SetNbDataToProcess+0x94>)
 800ca9e:	5c8a      	ldrb	r2, [r1, r2]
 800caa0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800caa4:	7b7a      	ldrb	r2, [r7, #13]
 800caa6:	4908      	ldr	r1, [pc, #32]	; (800cac8 <UARTEx_SetNbDataToProcess+0x98>)
 800caa8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800caaa:	fb93 f3f2 	sdiv	r3, r3, r2
 800caae:	b29a      	uxth	r2, r3
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cab6:	bf00      	nop
 800cab8:	3714      	adds	r7, #20
 800caba:	46bd      	mov	sp, r7
 800cabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac0:	4770      	bx	lr
 800cac2:	bf00      	nop
 800cac4:	0800ff80 	.word	0x0800ff80
 800cac8:	0800ff88 	.word	0x0800ff88

0800cacc <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800cacc:	b480      	push	{r7}
 800cace:	b087      	sub	sp, #28
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	681a      	ldr	r2, [r3, #0]
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cae0:	683a      	ldr	r2, [r7, #0]
 800cae2:	6812      	ldr	r2, [r2, #0]
 800cae4:	f023 0101 	bic.w	r1, r3, #1
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	689b      	ldr	r3, [r3, #8]
 800caf2:	2b08      	cmp	r3, #8
 800caf4:	d102      	bne.n	800cafc <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800caf6:	2340      	movs	r3, #64	; 0x40
 800caf8:	617b      	str	r3, [r7, #20]
 800cafa:	e001      	b.n	800cb00 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800cafc:	2300      	movs	r3, #0
 800cafe:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800cb0c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800cb12:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800cb18:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800cb1e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800cb24:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800cb2a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800cb30:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800cb36:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800cb3c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800cb42:	4313      	orrs	r3, r2
 800cb44:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb4a:	693a      	ldr	r2, [r7, #16]
 800cb4c:	4313      	orrs	r3, r2
 800cb4e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb54:	693a      	ldr	r2, [r7, #16]
 800cb56:	4313      	orrs	r3, r2
 800cb58:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb5e:	693a      	ldr	r2, [r7, #16]
 800cb60:	4313      	orrs	r3, r2
 800cb62:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800cb64:	4b20      	ldr	r3, [pc, #128]	; (800cbe8 <FMC_NORSRAM_Init+0x11c>)
 800cb66:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb6e:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cb76:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800cb7e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	681a      	ldr	r2, [r3, #0]
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	43db      	mvns	r3, r3
 800cb8e:	ea02 0103 	and.w	r1, r2, r3
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	681a      	ldr	r2, [r3, #0]
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	4319      	orrs	r1, r3
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cba4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cba8:	d10c      	bne.n	800cbc4 <FMC_NORSRAM_Init+0xf8>
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d008      	beq.n	800cbc4 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbbe:	431a      	orrs	r2, r3
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d006      	beq.n	800cbda <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681a      	ldr	r2, [r3, #0]
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbd4:	431a      	orrs	r2, r3
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800cbda:	2300      	movs	r3, #0
}
 800cbdc:	4618      	mov	r0, r3
 800cbde:	371c      	adds	r7, #28
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe6:	4770      	bx	lr
 800cbe8:	0008fb7f 	.word	0x0008fb7f

0800cbec <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800cbec:	b480      	push	{r7}
 800cbee:	b087      	sub	sp, #28
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	60f8      	str	r0, [r7, #12]
 800cbf4:	60b9      	str	r1, [r7, #8]
 800cbf6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	1c5a      	adds	r2, r3, #1
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc02:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	681a      	ldr	r2, [r3, #0]
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	685b      	ldr	r3, [r3, #4]
 800cc0e:	011b      	lsls	r3, r3, #4
 800cc10:	431a      	orrs	r2, r3
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	689b      	ldr	r3, [r3, #8]
 800cc16:	021b      	lsls	r3, r3, #8
 800cc18:	431a      	orrs	r2, r3
 800cc1a:	68bb      	ldr	r3, [r7, #8]
 800cc1c:	68db      	ldr	r3, [r3, #12]
 800cc1e:	041b      	lsls	r3, r3, #16
 800cc20:	431a      	orrs	r2, r3
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	691b      	ldr	r3, [r3, #16]
 800cc26:	3b01      	subs	r3, #1
 800cc28:	051b      	lsls	r3, r3, #20
 800cc2a:	431a      	orrs	r2, r3
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	695b      	ldr	r3, [r3, #20]
 800cc30:	3b02      	subs	r3, #2
 800cc32:	061b      	lsls	r3, r3, #24
 800cc34:	431a      	orrs	r2, r3
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	699b      	ldr	r3, [r3, #24]
 800cc3a:	4313      	orrs	r3, r2
 800cc3c:	687a      	ldr	r2, [r7, #4]
 800cc3e:	3201      	adds	r2, #1
 800cc40:	4319      	orrs	r1, r3
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cc50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc54:	d113      	bne.n	800cc7e <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	685b      	ldr	r3, [r3, #4]
 800cc5a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cc5e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	691b      	ldr	r3, [r3, #16]
 800cc64:	3b01      	subs	r3, #1
 800cc66:	051b      	lsls	r3, r3, #20
 800cc68:	697a      	ldr	r2, [r7, #20]
 800cc6a:	4313      	orrs	r3, r2
 800cc6c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	685b      	ldr	r3, [r3, #4]
 800cc72:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800cc76:	697b      	ldr	r3, [r7, #20]
 800cc78:	431a      	orrs	r2, r3
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800cc7e:	2300      	movs	r3, #0
}
 800cc80:	4618      	mov	r0, r3
 800cc82:	371c      	adds	r7, #28
 800cc84:	46bd      	mov	sp, r7
 800cc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8a:	4770      	bx	lr

0800cc8c <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b085      	sub	sp, #20
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	60f8      	str	r0, [r7, #12]
 800cc94:	60b9      	str	r1, [r7, #8]
 800cc96:	607a      	str	r2, [r7, #4]
 800cc98:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cca0:	d11d      	bne.n	800ccde <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	687a      	ldr	r2, [r7, #4]
 800cca6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ccaa:	4b13      	ldr	r3, [pc, #76]	; (800ccf8 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800ccac:	4013      	ands	r3, r2
 800ccae:	68ba      	ldr	r2, [r7, #8]
 800ccb0:	6811      	ldr	r1, [r2, #0]
 800ccb2:	68ba      	ldr	r2, [r7, #8]
 800ccb4:	6852      	ldr	r2, [r2, #4]
 800ccb6:	0112      	lsls	r2, r2, #4
 800ccb8:	4311      	orrs	r1, r2
 800ccba:	68ba      	ldr	r2, [r7, #8]
 800ccbc:	6892      	ldr	r2, [r2, #8]
 800ccbe:	0212      	lsls	r2, r2, #8
 800ccc0:	4311      	orrs	r1, r2
 800ccc2:	68ba      	ldr	r2, [r7, #8]
 800ccc4:	6992      	ldr	r2, [r2, #24]
 800ccc6:	4311      	orrs	r1, r2
 800ccc8:	68ba      	ldr	r2, [r7, #8]
 800ccca:	68d2      	ldr	r2, [r2, #12]
 800cccc:	0412      	lsls	r2, r2, #16
 800ccce:	430a      	orrs	r2, r1
 800ccd0:	ea43 0102 	orr.w	r1, r3, r2
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	687a      	ldr	r2, [r7, #4]
 800ccd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ccdc:	e005      	b.n	800ccea <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	687a      	ldr	r2, [r7, #4]
 800cce2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800cce6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800ccea:	2300      	movs	r3, #0
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	3714      	adds	r7, #20
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf6:	4770      	bx	lr
 800ccf8:	cff00000 	.word	0xcff00000

0800ccfc <HAL_GPIO_EXTI_Callback>:
 * @brief EXTI line detection callbacks
 * @param GPIO_Pin: Specifies the pins connected EXTI line
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b084      	sub	sp, #16
 800cd00:	af02      	add	r7, sp, #8
 800cd02:	4603      	mov	r3, r0
 800cd04:	80fb      	strh	r3, [r7, #6]
	ssd1362_drawRect(0 + 10, 63, 10 + 10, 57, 0x05, 1);
 800cd06:	2301      	movs	r3, #1
 800cd08:	9301      	str	r3, [sp, #4]
 800cd0a:	2305      	movs	r3, #5
 800cd0c:	9300      	str	r3, [sp, #0]
 800cd0e:	2339      	movs	r3, #57	; 0x39
 800cd10:	2214      	movs	r2, #20
 800cd12:	213f      	movs	r1, #63	; 0x3f
 800cd14:	200a      	movs	r0, #10
 800cd16:	f000 f9d9 	bl	800d0cc <ssd1362_drawRect>
	ssd1362_drawRect(56 + 10, 63, 56 + 10 + 10, 57, 0x05, 1);
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	9301      	str	r3, [sp, #4]
 800cd1e:	2305      	movs	r3, #5
 800cd20:	9300      	str	r3, [sp, #0]
 800cd22:	2339      	movs	r3, #57	; 0x39
 800cd24:	224c      	movs	r2, #76	; 0x4c
 800cd26:	213f      	movs	r1, #63	; 0x3f
 800cd28:	2042      	movs	r0, #66	; 0x42
 800cd2a:	f000 f9cf 	bl	800d0cc <ssd1362_drawRect>
	ssd1362_drawRect(56 * 2 + 10, 63, 56 * 2 + 10 + 10, 57, 0x05, 1);
 800cd2e:	2301      	movs	r3, #1
 800cd30:	9301      	str	r3, [sp, #4]
 800cd32:	2305      	movs	r3, #5
 800cd34:	9300      	str	r3, [sp, #0]
 800cd36:	2339      	movs	r3, #57	; 0x39
 800cd38:	2284      	movs	r2, #132	; 0x84
 800cd3a:	213f      	movs	r1, #63	; 0x3f
 800cd3c:	207a      	movs	r0, #122	; 0x7a
 800cd3e:	f000 f9c5 	bl	800d0cc <ssd1362_drawRect>
	ssd1362_drawRect(56 * 3 + 10, 63, 56 * 3 + 10 + 10, 57, 0x05, 1);
 800cd42:	2301      	movs	r3, #1
 800cd44:	9301      	str	r3, [sp, #4]
 800cd46:	2305      	movs	r3, #5
 800cd48:	9300      	str	r3, [sp, #0]
 800cd4a:	2339      	movs	r3, #57	; 0x39
 800cd4c:	22bc      	movs	r2, #188	; 0xbc
 800cd4e:	213f      	movs	r1, #63	; 0x3f
 800cd50:	20b2      	movs	r0, #178	; 0xb2
 800cd52:	f000 f9bb 	bl	800d0cc <ssd1362_drawRect>
	ssd1362_drawRect(56 * 4 + 10, 63, 56 * 4 + 10 + 10, 57, 0x05, 1);
 800cd56:	2301      	movs	r3, #1
 800cd58:	9301      	str	r3, [sp, #4]
 800cd5a:	2305      	movs	r3, #5
 800cd5c:	9300      	str	r3, [sp, #0]
 800cd5e:	2339      	movs	r3, #57	; 0x39
 800cd60:	22f4      	movs	r2, #244	; 0xf4
 800cd62:	213f      	movs	r1, #63	; 0x3f
 800cd64:	20ea      	movs	r0, #234	; 0xea
 800cd66:	f000 f9b1 	bl	800d0cc <ssd1362_drawRect>

	switch (GPIO_Pin)
 800cd6a:	88fb      	ldrh	r3, [r7, #6]
 800cd6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cd70:	d02b      	beq.n	800cdca <HAL_GPIO_EXTI_Callback+0xce>
 800cd72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cd76:	dc49      	bgt.n	800ce0c <HAL_GPIO_EXTI_Callback+0x110>
 800cd78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cd7c:	d030      	beq.n	800cde0 <HAL_GPIO_EXTI_Callback+0xe4>
 800cd7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cd82:	dc43      	bgt.n	800ce0c <HAL_GPIO_EXTI_Callback+0x110>
 800cd84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd88:	d009      	beq.n	800cd9e <HAL_GPIO_EXTI_Callback+0xa2>
 800cd8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd8e:	dc3d      	bgt.n	800ce0c <HAL_GPIO_EXTI_Callback+0x110>
 800cd90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cd94:	d00e      	beq.n	800cdb4 <HAL_GPIO_EXTI_Callback+0xb8>
 800cd96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd9a:	d02c      	beq.n	800cdf6 <HAL_GPIO_EXTI_Callback+0xfa>
		break;
	case SW_5_Pin:
		ssd1362_drawRect(56 * 4 + 10, 63, 56 * 4 + 10 + 10, 57, 0x0F, 1);
		break;
	}
}
 800cd9c:	e036      	b.n	800ce0c <HAL_GPIO_EXTI_Callback+0x110>
		ssd1362_drawRect(0 + 10, 63, 10 + 10, 57, 0x0F, 1);
 800cd9e:	2301      	movs	r3, #1
 800cda0:	9301      	str	r3, [sp, #4]
 800cda2:	230f      	movs	r3, #15
 800cda4:	9300      	str	r3, [sp, #0]
 800cda6:	2339      	movs	r3, #57	; 0x39
 800cda8:	2214      	movs	r2, #20
 800cdaa:	213f      	movs	r1, #63	; 0x3f
 800cdac:	200a      	movs	r0, #10
 800cdae:	f000 f98d 	bl	800d0cc <ssd1362_drawRect>
		break;
 800cdb2:	e02b      	b.n	800ce0c <HAL_GPIO_EXTI_Callback+0x110>
		ssd1362_drawRect(56 + 10, 63, 56 + 10 + 10, 57, 0x0F, 1);
 800cdb4:	2301      	movs	r3, #1
 800cdb6:	9301      	str	r3, [sp, #4]
 800cdb8:	230f      	movs	r3, #15
 800cdba:	9300      	str	r3, [sp, #0]
 800cdbc:	2339      	movs	r3, #57	; 0x39
 800cdbe:	224c      	movs	r2, #76	; 0x4c
 800cdc0:	213f      	movs	r1, #63	; 0x3f
 800cdc2:	2042      	movs	r0, #66	; 0x42
 800cdc4:	f000 f982 	bl	800d0cc <ssd1362_drawRect>
		break;
 800cdc8:	e020      	b.n	800ce0c <HAL_GPIO_EXTI_Callback+0x110>
		ssd1362_drawRect(56 * 2 + 10, 63, 56 * 2 + 10 + 10, 57, 0x0F, 1);
 800cdca:	2301      	movs	r3, #1
 800cdcc:	9301      	str	r3, [sp, #4]
 800cdce:	230f      	movs	r3, #15
 800cdd0:	9300      	str	r3, [sp, #0]
 800cdd2:	2339      	movs	r3, #57	; 0x39
 800cdd4:	2284      	movs	r2, #132	; 0x84
 800cdd6:	213f      	movs	r1, #63	; 0x3f
 800cdd8:	207a      	movs	r0, #122	; 0x7a
 800cdda:	f000 f977 	bl	800d0cc <ssd1362_drawRect>
		break;
 800cdde:	e015      	b.n	800ce0c <HAL_GPIO_EXTI_Callback+0x110>
		ssd1362_drawRect(56 * 3 + 10, 63, 56 * 3 + 10 + 10, 57, 0x0F, 1);
 800cde0:	2301      	movs	r3, #1
 800cde2:	9301      	str	r3, [sp, #4]
 800cde4:	230f      	movs	r3, #15
 800cde6:	9300      	str	r3, [sp, #0]
 800cde8:	2339      	movs	r3, #57	; 0x39
 800cdea:	22bc      	movs	r2, #188	; 0xbc
 800cdec:	213f      	movs	r1, #63	; 0x3f
 800cdee:	20b2      	movs	r0, #178	; 0xb2
 800cdf0:	f000 f96c 	bl	800d0cc <ssd1362_drawRect>
		break;
 800cdf4:	e00a      	b.n	800ce0c <HAL_GPIO_EXTI_Callback+0x110>
		ssd1362_drawRect(56 * 4 + 10, 63, 56 * 4 + 10 + 10, 57, 0x0F, 1);
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	9301      	str	r3, [sp, #4]
 800cdfa:	230f      	movs	r3, #15
 800cdfc:	9300      	str	r3, [sp, #0]
 800cdfe:	2339      	movs	r3, #57	; 0x39
 800ce00:	22f4      	movs	r2, #244	; 0xf4
 800ce02:	213f      	movs	r1, #63	; 0x3f
 800ce04:	20ea      	movs	r0, #234	; 0xea
 800ce06:	f000 f961 	bl	800d0cc <ssd1362_drawRect>
		break;
 800ce0a:	bf00      	nop
}
 800ce0c:	bf00      	nop
 800ce0e:	3708      	adds	r7, #8
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}

0800ce14 <ssd1362_Reset>:
void ssd1362_writeCmd(uint8_t reg);
void ssd1362_writeData(uint8_t data);

/* Private user code ---------------------------------------------------------*/

void ssd1362_Reset(void) {
 800ce14:	b580      	push	{r7, lr}
 800ce16:	af00      	add	r7, sp, #0
    // Reset the OLED
    HAL_GPIO_WritePin(SSD1362_Reset_Port, SSD1362_Reset_Pin, GPIO_PIN_RESET);
 800ce18:	2200      	movs	r2, #0
 800ce1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ce1e:	4808      	ldr	r0, [pc, #32]	; (800ce40 <ssd1362_Reset+0x2c>)
 800ce20:	f7f9 fe2a 	bl	8006a78 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800ce24:	200a      	movs	r0, #10
 800ce26:	f7f5 fc35 	bl	8002694 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1362_Reset_Port, SSD1362_Reset_Pin, GPIO_PIN_SET);
 800ce2a:	2201      	movs	r2, #1
 800ce2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ce30:	4803      	ldr	r0, [pc, #12]	; (800ce40 <ssd1362_Reset+0x2c>)
 800ce32:	f7f9 fe21 	bl	8006a78 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800ce36:	200a      	movs	r0, #10
 800ce38:	f7f5 fc2c 	bl	8002694 <HAL_Delay>
}
 800ce3c:	bf00      	nop
 800ce3e:	bd80      	pop	{r7, pc}
 800ce40:	58020400 	.word	0x58020400

0800ce44 <ssd1362_writeCmd>:

//Writes a command byte to the driver
void ssd1362_writeCmd(uint8_t reg)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b082      	sub	sp, #8
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	71fb      	strb	r3, [r7, #7]
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)LCD_REG, (uint8_t *)&reg, 1);
 800ce4e:	1dfa      	adds	r2, r7, #7
 800ce50:	2301      	movs	r3, #1
 800ce52:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800ce56:	4803      	ldr	r0, [pc, #12]	; (800ce64 <ssd1362_writeCmd+0x20>)
 800ce58:	f7fe f898 	bl	800af8c <HAL_SRAM_Write_8b>
}
 800ce5c:	bf00      	nop
 800ce5e:	3708      	adds	r7, #8
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}
 800ce64:	240038bc 	.word	0x240038bc

0800ce68 <ssd1362_writeData>:

//Writes 1 byte to the display's memory
void ssd1362_writeData(uint8_t data)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b082      	sub	sp, #8
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	4603      	mov	r3, r0
 800ce70:	71fb      	strb	r3, [r7, #7]
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)LCD_RAM, (uint8_t *)&data, 1);
 800ce72:	1dfa      	adds	r2, r7, #7
 800ce74:	2301      	movs	r3, #1
 800ce76:	4904      	ldr	r1, [pc, #16]	; (800ce88 <ssd1362_writeData+0x20>)
 800ce78:	4804      	ldr	r0, [pc, #16]	; (800ce8c <ssd1362_writeData+0x24>)
 800ce7a:	f7fe f887 	bl	800af8c <HAL_SRAM_Write_8b>
}
 800ce7e:	bf00      	nop
 800ce80:	3708      	adds	r7, #8
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}
 800ce86:	bf00      	nop
 800ce88:	c0000001 	.word	0xc0000001
 800ce8c:	240038bc 	.word	0x240038bc

0800ce90 <bitWrite>:

void bitWrite(uint8_t *x, uint8_t n, uint8_t value) {
 800ce90:	b480      	push	{r7}
 800ce92:	b083      	sub	sp, #12
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	460b      	mov	r3, r1
 800ce9a:	70fb      	strb	r3, [r7, #3]
 800ce9c:	4613      	mov	r3, r2
 800ce9e:	70bb      	strb	r3, [r7, #2]
   if (value)
 800cea0:	78bb      	ldrb	r3, [r7, #2]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d00d      	beq.n	800cec2 <bitWrite+0x32>
      *x |= (1 << n);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	781b      	ldrb	r3, [r3, #0]
 800ceaa:	b25a      	sxtb	r2, r3
 800ceac:	78fb      	ldrb	r3, [r7, #3]
 800ceae:	2101      	movs	r1, #1
 800ceb0:	fa01 f303 	lsl.w	r3, r1, r3
 800ceb4:	b25b      	sxtb	r3, r3
 800ceb6:	4313      	orrs	r3, r2
 800ceb8:	b25b      	sxtb	r3, r3
 800ceba:	b2da      	uxtb	r2, r3
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	701a      	strb	r2, [r3, #0]
   else
      *x &= ~(1 << n);
}
 800cec0:	e00e      	b.n	800cee0 <bitWrite+0x50>
      *x &= ~(1 << n);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	781b      	ldrb	r3, [r3, #0]
 800cec6:	b25a      	sxtb	r2, r3
 800cec8:	78fb      	ldrb	r3, [r7, #3]
 800ceca:	2101      	movs	r1, #1
 800cecc:	fa01 f303 	lsl.w	r3, r1, r3
 800ced0:	b25b      	sxtb	r3, r3
 800ced2:	43db      	mvns	r3, r3
 800ced4:	b25b      	sxtb	r3, r3
 800ced6:	4013      	ands	r3, r2
 800ced8:	b25b      	sxtb	r3, r3
 800ceda:	b2da      	uxtb	r2, r3
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	701a      	strb	r2, [r3, #0]
}
 800cee0:	bf00      	nop
 800cee2:	370c      	adds	r7, #12
 800cee4:	46bd      	mov	sp, r7
 800cee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceea:	4770      	bx	lr

0800ceec <bitRead>:

char bitRead(uint8_t *x, uint8_t n) {
 800ceec:	b480      	push	{r7}
 800ceee:	b083      	sub	sp, #12
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
 800cef4:	460b      	mov	r3, r1
 800cef6:	70fb      	strb	r3, [r7, #3]
   return (*x & (1 << n)) ? 1 : 0;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	781b      	ldrb	r3, [r3, #0]
 800cefc:	461a      	mov	r2, r3
 800cefe:	78fb      	ldrb	r3, [r7, #3]
 800cf00:	fa42 f303 	asr.w	r3, r2, r3
 800cf04:	b2db      	uxtb	r3, r3
 800cf06:	f003 0301 	and.w	r3, r3, #1
 800cf0a:	b2db      	uxtb	r3, r3
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	370c      	adds	r7, #12
 800cf10:	46bd      	mov	sp, r7
 800cf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf16:	4770      	bx	lr

0800cf18 <ssd1362_setWriteZone>:

//defines a rectangular area of memory which the driver will itterate through. This function takes memory locations, meaning a 64x256 space
void ssd1362_setWriteZone(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 800cf18:	b590      	push	{r4, r7, lr}
 800cf1a:	b083      	sub	sp, #12
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	4604      	mov	r4, r0
 800cf20:	4608      	mov	r0, r1
 800cf22:	4611      	mov	r1, r2
 800cf24:	461a      	mov	r2, r3
 800cf26:	4623      	mov	r3, r4
 800cf28:	80fb      	strh	r3, [r7, #6]
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	80bb      	strh	r3, [r7, #4]
 800cf2e:	460b      	mov	r3, r1
 800cf30:	807b      	strh	r3, [r7, #2]
 800cf32:	4613      	mov	r3, r2
 800cf34:	803b      	strh	r3, [r7, #0]
	ssd1362_writeCmd(0x15); //Set Column Address
 800cf36:	2015      	movs	r0, #21
 800cf38:	f7ff ff84 	bl	800ce44 <ssd1362_writeCmd>
	ssd1362_writeCmd(x1); //Beginning. Note that you must divide the column by 2, since 1 byte in memory is 2 pixels
 800cf3c:	88fb      	ldrh	r3, [r7, #6]
 800cf3e:	b2db      	uxtb	r3, r3
 800cf40:	4618      	mov	r0, r3
 800cf42:	f7ff ff7f 	bl	800ce44 <ssd1362_writeCmd>
	ssd1362_writeCmd(x2); //End
 800cf46:	887b      	ldrh	r3, [r7, #2]
 800cf48:	b2db      	uxtb	r3, r3
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f7ff ff7a 	bl	800ce44 <ssd1362_writeCmd>

	ssd1362_writeCmd(0x75); //Set Row Address
 800cf50:	2075      	movs	r0, #117	; 0x75
 800cf52:	f7ff ff77 	bl	800ce44 <ssd1362_writeCmd>
	ssd1362_writeCmd(y1); //Beginning
 800cf56:	88bb      	ldrh	r3, [r7, #4]
 800cf58:	b2db      	uxtb	r3, r3
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f7ff ff72 	bl	800ce44 <ssd1362_writeCmd>
	ssd1362_writeCmd(y2); //End
 800cf60:	883b      	ldrh	r3, [r7, #0]
 800cf62:	b2db      	uxtb	r3, r3
 800cf64:	4618      	mov	r0, r3
 800cf66:	f7ff ff6d 	bl	800ce44 <ssd1362_writeCmd>
}
 800cf6a:	bf00      	nop
 800cf6c:	370c      	adds	r7, #12
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd90      	pop	{r4, r7, pc}

0800cf72 <ssd1362_coordsToAddress>:

//Converts a pixel location to a linear memory address
uint16_t ssd1362_coordsToAddress(uint16_t x, uint16_t y)
{
 800cf72:	b480      	push	{r7}
 800cf74:	b083      	sub	sp, #12
 800cf76:	af00      	add	r7, sp, #0
 800cf78:	4603      	mov	r3, r0
 800cf7a:	460a      	mov	r2, r1
 800cf7c:	80fb      	strh	r3, [r7, #6]
 800cf7e:	4613      	mov	r3, r2
 800cf80:	80bb      	strh	r3, [r7, #4]
	return (x/2)+(y*128);
 800cf82:	88fb      	ldrh	r3, [r7, #6]
 800cf84:	085b      	lsrs	r3, r3, #1
 800cf86:	b29a      	uxth	r2, r3
 800cf88:	88bb      	ldrh	r3, [r7, #4]
 800cf8a:	01db      	lsls	r3, r3, #7
 800cf8c:	b29b      	uxth	r3, r3
 800cf8e:	4413      	add	r3, r2
 800cf90:	b29b      	uxth	r3, r3
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	370c      	adds	r7, #12
 800cf96:	46bd      	mov	sp, r7
 800cf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9c:	4770      	bx	lr
	...

0800cfa0 <ssd1362_setPixelChanged>:

void ssd1362_setPixelChanged(uint16_t x, uint16_t y, bool changed)
{
 800cfa0:	b590      	push	{r4, r7, lr}
 800cfa2:	b085      	sub	sp, #20
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	80fb      	strh	r3, [r7, #6]
 800cfaa:	460b      	mov	r3, r1
 800cfac:	80bb      	strh	r3, [r7, #4]
 800cfae:	4613      	mov	r3, r2
 800cfb0:	70fb      	strb	r3, [r7, #3]
	uint16_t targetByte = ssd1362_coordsToAddress(x, y)/8;
 800cfb2:	88ba      	ldrh	r2, [r7, #4]
 800cfb4:	88fb      	ldrh	r3, [r7, #6]
 800cfb6:	4611      	mov	r1, r2
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f7ff ffda 	bl	800cf72 <ssd1362_coordsToAddress>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	08db      	lsrs	r3, r3, #3
 800cfc2:	81fb      	strh	r3, [r7, #14]
	bitWrite(&changedPixels[targetByte], ssd1362_coordsToAddress(x, y) % 8, changed);
 800cfc4:	89fb      	ldrh	r3, [r7, #14]
 800cfc6:	4a0b      	ldr	r2, [pc, #44]	; (800cff4 <ssd1362_setPixelChanged+0x54>)
 800cfc8:	189c      	adds	r4, r3, r2
 800cfca:	88ba      	ldrh	r2, [r7, #4]
 800cfcc:	88fb      	ldrh	r3, [r7, #6]
 800cfce:	4611      	mov	r1, r2
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f7ff ffce 	bl	800cf72 <ssd1362_coordsToAddress>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	b2db      	uxtb	r3, r3
 800cfda:	f003 0307 	and.w	r3, r3, #7
 800cfde:	b2db      	uxtb	r3, r3
 800cfe0:	78fa      	ldrb	r2, [r7, #3]
 800cfe2:	4619      	mov	r1, r3
 800cfe4:	4620      	mov	r0, r4
 800cfe6:	f7ff ff53 	bl	800ce90 <bitWrite>
}
 800cfea:	bf00      	nop
 800cfec:	3714      	adds	r7, #20
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd90      	pop	{r4, r7, pc}
 800cff2:	bf00      	nop
 800cff4:	24003cc4 	.word	0x24003cc4

0800cff8 <ssd1362_drawPixel>:

//pixel xy coordinates 0-255, color 0-15, and whether to immediately output it to the display or buffer it
void ssd1362_drawPixel(uint16_t x, uint16_t y, uint8_t color, bool display)
{
 800cff8:	b590      	push	{r4, r7, lr}
 800cffa:	b085      	sub	sp, #20
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	4604      	mov	r4, r0
 800d000:	4608      	mov	r0, r1
 800d002:	4611      	mov	r1, r2
 800d004:	461a      	mov	r2, r3
 800d006:	4623      	mov	r3, r4
 800d008:	80fb      	strh	r3, [r7, #6]
 800d00a:	4603      	mov	r3, r0
 800d00c:	80bb      	strh	r3, [r7, #4]
 800d00e:	460b      	mov	r3, r1
 800d010:	70fb      	strb	r3, [r7, #3]
 800d012:	4613      	mov	r3, r2
 800d014:	70bb      	strb	r3, [r7, #2]
	uint32_t address = ssd1362_coordsToAddress(x,y);
 800d016:	88ba      	ldrh	r2, [r7, #4]
 800d018:	88fb      	ldrh	r3, [r7, #6]
 800d01a:	4611      	mov	r1, r2
 800d01c:	4618      	mov	r0, r3
 800d01e:	f7ff ffa8 	bl	800cf72 <ssd1362_coordsToAddress>
 800d022:	4603      	mov	r3, r0
 800d024:	60fb      	str	r3, [r7, #12]
	if((x%2) == 0)
 800d026:	88fb      	ldrh	r3, [r7, #6]
 800d028:	f003 0301 	and.w	r3, r3, #1
 800d02c:	b29b      	uxth	r3, r3
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d113      	bne.n	800d05a <ssd1362_drawPixel+0x62>
	{//If this is an even pixel, and therefore needs shifting to the more significant nibble
		frameBuffer[address] = (frameBuffer[address] & 0x0f) | (color<<4);
 800d032:	4a25      	ldr	r2, [pc, #148]	; (800d0c8 <ssd1362_drawPixel+0xd0>)
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	4413      	add	r3, r2
 800d038:	781b      	ldrb	r3, [r3, #0]
 800d03a:	b25b      	sxtb	r3, r3
 800d03c:	f003 030f 	and.w	r3, r3, #15
 800d040:	b25a      	sxtb	r2, r3
 800d042:	78fb      	ldrb	r3, [r7, #3]
 800d044:	011b      	lsls	r3, r3, #4
 800d046:	b25b      	sxtb	r3, r3
 800d048:	4313      	orrs	r3, r2
 800d04a:	b25b      	sxtb	r3, r3
 800d04c:	b2d9      	uxtb	r1, r3
 800d04e:	4a1e      	ldr	r2, [pc, #120]	; (800d0c8 <ssd1362_drawPixel+0xd0>)
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	4413      	add	r3, r2
 800d054:	460a      	mov	r2, r1
 800d056:	701a      	strb	r2, [r3, #0]
 800d058:	e011      	b.n	800d07e <ssd1362_drawPixel+0x86>
	} else {
		frameBuffer[address] = (frameBuffer[address] & 0xf0) | (color);
 800d05a:	4a1b      	ldr	r2, [pc, #108]	; (800d0c8 <ssd1362_drawPixel+0xd0>)
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	4413      	add	r3, r2
 800d060:	781b      	ldrb	r3, [r3, #0]
 800d062:	b25b      	sxtb	r3, r3
 800d064:	f023 030f 	bic.w	r3, r3, #15
 800d068:	b25a      	sxtb	r2, r3
 800d06a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d06e:	4313      	orrs	r3, r2
 800d070:	b25b      	sxtb	r3, r3
 800d072:	b2d9      	uxtb	r1, r3
 800d074:	4a14      	ldr	r2, [pc, #80]	; (800d0c8 <ssd1362_drawPixel+0xd0>)
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	4413      	add	r3, r2
 800d07a:	460a      	mov	r2, r1
 800d07c:	701a      	strb	r2, [r3, #0]
	}

	if(display)
 800d07e:	78bb      	ldrb	r3, [r7, #2]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d017      	beq.n	800d0b4 <ssd1362_drawPixel+0xbc>
	{
		ssd1362_setWriteZone(x/2,y,x/2,y);
 800d084:	88fb      	ldrh	r3, [r7, #6]
 800d086:	085b      	lsrs	r3, r3, #1
 800d088:	b298      	uxth	r0, r3
 800d08a:	88fb      	ldrh	r3, [r7, #6]
 800d08c:	085b      	lsrs	r3, r3, #1
 800d08e:	b29a      	uxth	r2, r3
 800d090:	88bb      	ldrh	r3, [r7, #4]
 800d092:	88b9      	ldrh	r1, [r7, #4]
 800d094:	f7ff ff40 	bl	800cf18 <ssd1362_setWriteZone>
		ssd1362_writeData(frameBuffer[address]);
 800d098:	4a0b      	ldr	r2, [pc, #44]	; (800d0c8 <ssd1362_drawPixel+0xd0>)
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	4413      	add	r3, r2
 800d09e:	781b      	ldrb	r3, [r3, #0]
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f7ff fee1 	bl	800ce68 <ssd1362_writeData>
		ssd1362_setPixelChanged(x, y, false); // We've now synced the display with this byte of the buffer, no need to write it again
 800d0a6:	88b9      	ldrh	r1, [r7, #4]
 800d0a8:	88fb      	ldrh	r3, [r7, #6]
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f7ff ff77 	bl	800cfa0 <ssd1362_setPixelChanged>
	} else {
		ssd1362_setPixelChanged(x, y, true); // This pixel is due for an update next refresh
	}
}
 800d0b2:	e005      	b.n	800d0c0 <ssd1362_drawPixel+0xc8>
		ssd1362_setPixelChanged(x, y, true); // This pixel is due for an update next refresh
 800d0b4:	88b9      	ldrh	r1, [r7, #4]
 800d0b6:	88fb      	ldrh	r3, [r7, #6]
 800d0b8:	2201      	movs	r2, #1
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f7ff ff70 	bl	800cfa0 <ssd1362_setPixelChanged>
}
 800d0c0:	bf00      	nop
 800d0c2:	3714      	adds	r7, #20
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bd90      	pop	{r4, r7, pc}
 800d0c8:	240044c4 	.word	0x240044c4

0800d0cc <ssd1362_drawRect>:

//Draws a rectangle from x1,y1 to x2,y2.
void ssd1362_drawRect(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t color, bool display)
{
 800d0cc:	b590      	push	{r4, r7, lr}
 800d0ce:	b087      	sub	sp, #28
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	4604      	mov	r4, r0
 800d0d4:	4608      	mov	r0, r1
 800d0d6:	4611      	mov	r1, r2
 800d0d8:	461a      	mov	r2, r3
 800d0da:	4623      	mov	r3, r4
 800d0dc:	80fb      	strh	r3, [r7, #6]
 800d0de:	4603      	mov	r3, r0
 800d0e0:	80bb      	strh	r3, [r7, #4]
 800d0e2:	460b      	mov	r3, r1
 800d0e4:	807b      	strh	r3, [r7, #2]
 800d0e6:	4613      	mov	r3, r2
 800d0e8:	803b      	strh	r3, [r7, #0]
	uint16_t xMin = MIN(x1, x2); // TODO: double performance by writing whole bytes at a time
 800d0ea:	887a      	ldrh	r2, [r7, #2]
 800d0ec:	88fb      	ldrh	r3, [r7, #6]
 800d0ee:	4293      	cmp	r3, r2
 800d0f0:	bf28      	it	cs
 800d0f2:	4613      	movcs	r3, r2
 800d0f4:	827b      	strh	r3, [r7, #18]
	uint16_t xMax = MAX(x1, x2);
 800d0f6:	887a      	ldrh	r2, [r7, #2]
 800d0f8:	88fb      	ldrh	r3, [r7, #6]
 800d0fa:	4293      	cmp	r3, r2
 800d0fc:	bf38      	it	cc
 800d0fe:	4613      	movcc	r3, r2
 800d100:	823b      	strh	r3, [r7, #16]
	uint16_t yMin = MIN(y1, y2);
 800d102:	883a      	ldrh	r2, [r7, #0]
 800d104:	88bb      	ldrh	r3, [r7, #4]
 800d106:	4293      	cmp	r3, r2
 800d108:	bf28      	it	cs
 800d10a:	4613      	movcs	r3, r2
 800d10c:	81fb      	strh	r3, [r7, #14]
	uint16_t yMax = MAX(y1, y2);
 800d10e:	883a      	ldrh	r2, [r7, #0]
 800d110:	88bb      	ldrh	r3, [r7, #4]
 800d112:	4293      	cmp	r3, r2
 800d114:	bf38      	it	cc
 800d116:	4613      	movcc	r3, r2
 800d118:	81bb      	strh	r3, [r7, #12]
	for (uint16_t x = xMin; x <= xMax; x++)
 800d11a:	8a7b      	ldrh	r3, [r7, #18]
 800d11c:	82fb      	strh	r3, [r7, #22]
 800d11e:	e014      	b.n	800d14a <ssd1362_drawRect+0x7e>
	{
		for (uint16_t y = yMin; y <= yMax; y++)
 800d120:	89fb      	ldrh	r3, [r7, #14]
 800d122:	82bb      	strh	r3, [r7, #20]
 800d124:	e00a      	b.n	800d13c <ssd1362_drawRect+0x70>
		{
			ssd1362_drawPixel(x, y, color, display);
 800d126:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d12a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d12e:	8ab9      	ldrh	r1, [r7, #20]
 800d130:	8af8      	ldrh	r0, [r7, #22]
 800d132:	f7ff ff61 	bl	800cff8 <ssd1362_drawPixel>
		for (uint16_t y = yMin; y <= yMax; y++)
 800d136:	8abb      	ldrh	r3, [r7, #20]
 800d138:	3301      	adds	r3, #1
 800d13a:	82bb      	strh	r3, [r7, #20]
 800d13c:	8aba      	ldrh	r2, [r7, #20]
 800d13e:	89bb      	ldrh	r3, [r7, #12]
 800d140:	429a      	cmp	r2, r3
 800d142:	d9f0      	bls.n	800d126 <ssd1362_drawRect+0x5a>
	for (uint16_t x = xMin; x <= xMax; x++)
 800d144:	8afb      	ldrh	r3, [r7, #22]
 800d146:	3301      	adds	r3, #1
 800d148:	82fb      	strh	r3, [r7, #22]
 800d14a:	8afa      	ldrh	r2, [r7, #22]
 800d14c:	8a3b      	ldrh	r3, [r7, #16]
 800d14e:	429a      	cmp	r2, r3
 800d150:	d9e6      	bls.n	800d120 <ssd1362_drawRect+0x54>
		}
	}
}
 800d152:	bf00      	nop
 800d154:	bf00      	nop
 800d156:	371c      	adds	r7, #28
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd90      	pop	{r4, r7, pc}

0800d15c <ssd1362_drawHLine>:

void ssd1362_drawHLine(uint16_t x, uint16_t y, uint16_t length, uint8_t color, bool display)
	{
 800d15c:	b590      	push	{r4, r7, lr}
 800d15e:	b085      	sub	sp, #20
 800d160:	af00      	add	r7, sp, #0
 800d162:	4604      	mov	r4, r0
 800d164:	4608      	mov	r0, r1
 800d166:	4611      	mov	r1, r2
 800d168:	461a      	mov	r2, r3
 800d16a:	4623      	mov	r3, r4
 800d16c:	80fb      	strh	r3, [r7, #6]
 800d16e:	4603      	mov	r3, r0
 800d170:	80bb      	strh	r3, [r7, #4]
 800d172:	460b      	mov	r3, r1
 800d174:	807b      	strh	r3, [r7, #2]
 800d176:	4613      	mov	r3, r2
 800d178:	707b      	strb	r3, [r7, #1]
	for (uint32_t i = x; i < x+length; i++)
 800d17a:	88fb      	ldrh	r3, [r7, #6]
 800d17c:	60fb      	str	r3, [r7, #12]
 800d17e:	e00a      	b.n	800d196 <ssd1362_drawHLine+0x3a>
	{
		ssd1362_drawPixel(i, y, color, display);
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	b298      	uxth	r0, r3
 800d184:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d188:	787a      	ldrb	r2, [r7, #1]
 800d18a:	88b9      	ldrh	r1, [r7, #4]
 800d18c:	f7ff ff34 	bl	800cff8 <ssd1362_drawPixel>
	for (uint32_t i = x; i < x+length; i++)
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	3301      	adds	r3, #1
 800d194:	60fb      	str	r3, [r7, #12]
 800d196:	88fa      	ldrh	r2, [r7, #6]
 800d198:	887b      	ldrh	r3, [r7, #2]
 800d19a:	4413      	add	r3, r2
 800d19c:	461a      	mov	r2, r3
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	4293      	cmp	r3, r2
 800d1a2:	d3ed      	bcc.n	800d180 <ssd1362_drawHLine+0x24>
	}
}
 800d1a4:	bf00      	nop
 800d1a6:	bf00      	nop
 800d1a8:	3714      	adds	r7, #20
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd90      	pop	{r4, r7, pc}

0800d1ae <ssd1362_drawByteAsRow>:
	}
}

//Draws a byte as an 8 pixel row
void ssd1362_drawByteAsRow(uint16_t x, uint16_t y, uint8_t byte, uint8_t color)
{
 800d1ae:	b590      	push	{r4, r7, lr}
 800d1b0:	b085      	sub	sp, #20
 800d1b2:	af00      	add	r7, sp, #0
 800d1b4:	4604      	mov	r4, r0
 800d1b6:	4608      	mov	r0, r1
 800d1b8:	4611      	mov	r1, r2
 800d1ba:	461a      	mov	r2, r3
 800d1bc:	4623      	mov	r3, r4
 800d1be:	80fb      	strh	r3, [r7, #6]
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	80bb      	strh	r3, [r7, #4]
 800d1c4:	460b      	mov	r3, r1
 800d1c6:	70fb      	strb	r3, [r7, #3]
 800d1c8:	4613      	mov	r3, r2
 800d1ca:	70bb      	strb	r3, [r7, #2]
	for (uint32_t i = 0; i < 8; i++)
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	60fb      	str	r3, [r7, #12]
 800d1d0:	e016      	b.n	800d200 <ssd1362_drawByteAsRow+0x52>
	{
		if(bitRead(&byte, i))
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	b2da      	uxtb	r2, r3
 800d1d6:	1cfb      	adds	r3, r7, #3
 800d1d8:	4611      	mov	r1, r2
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f7ff fe86 	bl	800ceec <bitRead>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d009      	beq.n	800d1fa <ssd1362_drawByteAsRow+0x4c>
	{
			ssd1362_drawPixel(x+i, y, color, false);
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	b29a      	uxth	r2, r3
 800d1ea:	88fb      	ldrh	r3, [r7, #6]
 800d1ec:	4413      	add	r3, r2
 800d1ee:	b298      	uxth	r0, r3
 800d1f0:	78ba      	ldrb	r2, [r7, #2]
 800d1f2:	88b9      	ldrh	r1, [r7, #4]
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	f7ff feff 	bl	800cff8 <ssd1362_drawPixel>
	for (uint32_t i = 0; i < 8; i++)
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	3301      	adds	r3, #1
 800d1fe:	60fb      	str	r3, [r7, #12]
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	2b07      	cmp	r3, #7
 800d204:	d9e5      	bls.n	800d1d2 <ssd1362_drawByteAsRow+0x24>
		}
	}
}
 800d206:	bf00      	nop
 800d208:	bf00      	nop
 800d20a:	3714      	adds	r7, #20
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd90      	pop	{r4, r7, pc}

0800d210 <ssd1362_drawChar>:

void ssd1362_drawChar(uint16_t x, uint16_t y, uint8_t thisChar, uint8_t color)
{
 800d210:	b590      	push	{r4, r7, lr}
 800d212:	b085      	sub	sp, #20
 800d214:	af00      	add	r7, sp, #0
 800d216:	4604      	mov	r4, r0
 800d218:	4608      	mov	r0, r1
 800d21a:	4611      	mov	r1, r2
 800d21c:	461a      	mov	r2, r3
 800d21e:	4623      	mov	r3, r4
 800d220:	80fb      	strh	r3, [r7, #6]
 800d222:	4603      	mov	r3, r0
 800d224:	80bb      	strh	r3, [r7, #4]
 800d226:	460b      	mov	r3, r1
 800d228:	70fb      	strb	r3, [r7, #3]
 800d22a:	4613      	mov	r3, r2
 800d22c:	70bb      	strb	r3, [r7, #2]
	for (size_t i = 0; i < 8; i++)
 800d22e:	2300      	movs	r3, #0
 800d230:	60fb      	str	r3, [r7, #12]
 800d232:	e012      	b.n	800d25a <ssd1362_drawChar+0x4a>
	{
		ssd1362_drawByteAsRow(x, y+i, font8x8_basic[(unsigned char)thisChar][i], color);
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	b29a      	uxth	r2, r3
 800d238:	88bb      	ldrh	r3, [r7, #4]
 800d23a:	4413      	add	r3, r2
 800d23c:	b299      	uxth	r1, r3
 800d23e:	78fb      	ldrb	r3, [r7, #3]
 800d240:	4a0a      	ldr	r2, [pc, #40]	; (800d26c <ssd1362_drawChar+0x5c>)
 800d242:	00db      	lsls	r3, r3, #3
 800d244:	441a      	add	r2, r3
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	4413      	add	r3, r2
 800d24a:	781a      	ldrb	r2, [r3, #0]
 800d24c:	78bb      	ldrb	r3, [r7, #2]
 800d24e:	88f8      	ldrh	r0, [r7, #6]
 800d250:	f7ff ffad 	bl	800d1ae <ssd1362_drawByteAsRow>
	for (size_t i = 0; i < 8; i++)
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	3301      	adds	r3, #1
 800d258:	60fb      	str	r3, [r7, #12]
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	2b07      	cmp	r3, #7
 800d25e:	d9e9      	bls.n	800d234 <ssd1362_drawChar+0x24>
	}
}
 800d260:	bf00      	nop
 800d262:	bf00      	nop
 800d264:	3714      	adds	r7, #20
 800d266:	46bd      	mov	sp, r7
 800d268:	bd90      	pop	{r4, r7, pc}
 800d26a:	bf00      	nop
 800d26c:	24003010 	.word	0x24003010

0800d270 <ssd1362_drawCharArray>:

void ssd1362_drawCharArray(uint16_t x, uint16_t y, int8_t text[], uint8_t color, uint32_t size)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b086      	sub	sp, #24
 800d274:	af00      	add	r7, sp, #0
 800d276:	60ba      	str	r2, [r7, #8]
 800d278:	461a      	mov	r2, r3
 800d27a:	4603      	mov	r3, r0
 800d27c:	81fb      	strh	r3, [r7, #14]
 800d27e:	460b      	mov	r3, r1
 800d280:	81bb      	strh	r3, [r7, #12]
 800d282:	4613      	mov	r3, r2
 800d284:	71fb      	strb	r3, [r7, #7]
	const int8_t* thisChar;
	uint16_t xOffset = 0;
 800d286:	2300      	movs	r3, #0
 800d288:	827b      	strh	r3, [r7, #18]
	if(size==16)
 800d28a:	6a3b      	ldr	r3, [r7, #32]
 800d28c:	2b10      	cmp	r3, #16
 800d28e:	d11a      	bne.n	800d2c6 <ssd1362_drawCharArray+0x56>
	{
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 800d290:	68bb      	ldr	r3, [r7, #8]
 800d292:	617b      	str	r3, [r7, #20]
 800d294:	e011      	b.n	800d2ba <ssd1362_drawCharArray+0x4a>
		{
			ssd1362_drawChar16(x+xOffset, y, *thisChar, color);
 800d296:	89fa      	ldrh	r2, [r7, #14]
 800d298:	8a7b      	ldrh	r3, [r7, #18]
 800d29a:	4413      	add	r3, r2
 800d29c:	b298      	uxth	r0, r3
 800d29e:	697b      	ldr	r3, [r7, #20]
 800d2a0:	f993 3000 	ldrsb.w	r3, [r3]
 800d2a4:	b2da      	uxtb	r2, r3
 800d2a6:	79fb      	ldrb	r3, [r7, #7]
 800d2a8:	89b9      	ldrh	r1, [r7, #12]
 800d2aa:	f000 f861 	bl	800d370 <ssd1362_drawChar16>
			xOffset += 8;
 800d2ae:	8a7b      	ldrh	r3, [r7, #18]
 800d2b0:	3308      	adds	r3, #8
 800d2b2:	827b      	strh	r3, [r7, #18]
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 800d2b4:	697b      	ldr	r3, [r7, #20]
 800d2b6:	3301      	adds	r3, #1
 800d2b8:	617b      	str	r3, [r7, #20]
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	f993 3000 	ldrsb.w	r3, [r3]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d1e8      	bne.n	800d296 <ssd1362_drawCharArray+0x26>
		{
			ssd1362_drawChar(x+xOffset, y, *thisChar, color);
			xOffset += 8;
		}
	}
}
 800d2c4:	e037      	b.n	800d336 <ssd1362_drawCharArray+0xc6>
	} else if(size==32)
 800d2c6:	6a3b      	ldr	r3, [r7, #32]
 800d2c8:	2b20      	cmp	r3, #32
 800d2ca:	d11a      	bne.n	800d302 <ssd1362_drawCharArray+0x92>
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	617b      	str	r3, [r7, #20]
 800d2d0:	e011      	b.n	800d2f6 <ssd1362_drawCharArray+0x86>
			ssd1362_drawChar32(x+xOffset, y, *thisChar, color);
 800d2d2:	89fa      	ldrh	r2, [r7, #14]
 800d2d4:	8a7b      	ldrh	r3, [r7, #18]
 800d2d6:	4413      	add	r3, r2
 800d2d8:	b298      	uxth	r0, r3
 800d2da:	697b      	ldr	r3, [r7, #20]
 800d2dc:	f993 3000 	ldrsb.w	r3, [r3]
 800d2e0:	b2da      	uxtb	r2, r3
 800d2e2:	79fb      	ldrb	r3, [r7, #7]
 800d2e4:	89b9      	ldrh	r1, [r7, #12]
 800d2e6:	f000 f887 	bl	800d3f8 <ssd1362_drawChar32>
			xOffset += 16;
 800d2ea:	8a7b      	ldrh	r3, [r7, #18]
 800d2ec:	3310      	adds	r3, #16
 800d2ee:	827b      	strh	r3, [r7, #18]
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 800d2f0:	697b      	ldr	r3, [r7, #20]
 800d2f2:	3301      	adds	r3, #1
 800d2f4:	617b      	str	r3, [r7, #20]
 800d2f6:	697b      	ldr	r3, [r7, #20]
 800d2f8:	f993 3000 	ldrsb.w	r3, [r3]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d1e8      	bne.n	800d2d2 <ssd1362_drawCharArray+0x62>
}
 800d300:	e019      	b.n	800d336 <ssd1362_drawCharArray+0xc6>
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	617b      	str	r3, [r7, #20]
 800d306:	e011      	b.n	800d32c <ssd1362_drawCharArray+0xbc>
			ssd1362_drawChar(x+xOffset, y, *thisChar, color);
 800d308:	89fa      	ldrh	r2, [r7, #14]
 800d30a:	8a7b      	ldrh	r3, [r7, #18]
 800d30c:	4413      	add	r3, r2
 800d30e:	b298      	uxth	r0, r3
 800d310:	697b      	ldr	r3, [r7, #20]
 800d312:	f993 3000 	ldrsb.w	r3, [r3]
 800d316:	b2da      	uxtb	r2, r3
 800d318:	79fb      	ldrb	r3, [r7, #7]
 800d31a:	89b9      	ldrh	r1, [r7, #12]
 800d31c:	f7ff ff78 	bl	800d210 <ssd1362_drawChar>
			xOffset += 8;
 800d320:	8a7b      	ldrh	r3, [r7, #18]
 800d322:	3308      	adds	r3, #8
 800d324:	827b      	strh	r3, [r7, #18]
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 800d326:	697b      	ldr	r3, [r7, #20]
 800d328:	3301      	adds	r3, #1
 800d32a:	617b      	str	r3, [r7, #20]
 800d32c:	697b      	ldr	r3, [r7, #20]
 800d32e:	f993 3000 	ldrsb.w	r3, [r3]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d1e8      	bne.n	800d308 <ssd1362_drawCharArray+0x98>
}
 800d336:	bf00      	nop
 800d338:	3718      	adds	r7, #24
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}

0800d33e <ssd1362_drawString>:

void ssd1362_drawString(uint16_t x, uint16_t y, int8_t textString[], uint8_t color, uint32_t size)
{
 800d33e:	b580      	push	{r7, lr}
 800d340:	b086      	sub	sp, #24
 800d342:	af02      	add	r7, sp, #8
 800d344:	60ba      	str	r2, [r7, #8]
 800d346:	461a      	mov	r2, r3
 800d348:	4603      	mov	r3, r0
 800d34a:	81fb      	strh	r3, [r7, #14]
 800d34c:	460b      	mov	r3, r1
 800d34e:	81bb      	strh	r3, [r7, #12]
 800d350:	4613      	mov	r3, r2
 800d352:	71fb      	strb	r3, [r7, #7]
//	uint8_t text[64];
//	textString.toCharArray(text, 64);
	ssd1362_drawCharArray(x,y, textString, color, size);
 800d354:	79fa      	ldrb	r2, [r7, #7]
 800d356:	89b9      	ldrh	r1, [r7, #12]
 800d358:	89f8      	ldrh	r0, [r7, #14]
 800d35a:	69bb      	ldr	r3, [r7, #24]
 800d35c:	9300      	str	r3, [sp, #0]
 800d35e:	4613      	mov	r3, r2
 800d360:	68ba      	ldr	r2, [r7, #8]
 800d362:	f7ff ff85 	bl	800d270 <ssd1362_drawCharArray>
}
 800d366:	bf00      	nop
 800d368:	3710      	adds	r7, #16
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}
	...

0800d370 <ssd1362_drawChar16>:

void ssd1362_drawChar16(uint16_t x, uint16_t y, uint8_t thisChar, uint8_t color)
{
 800d370:	b590      	push	{r4, r7, lr}
 800d372:	b085      	sub	sp, #20
 800d374:	af00      	add	r7, sp, #0
 800d376:	4604      	mov	r4, r0
 800d378:	4608      	mov	r0, r1
 800d37a:	4611      	mov	r1, r2
 800d37c:	461a      	mov	r2, r3
 800d37e:	4623      	mov	r3, r4
 800d380:	80fb      	strh	r3, [r7, #6]
 800d382:	4603      	mov	r3, r0
 800d384:	80bb      	strh	r3, [r7, #4]
 800d386:	460b      	mov	r3, r1
 800d388:	70fb      	strb	r3, [r7, #3]
 800d38a:	4613      	mov	r3, r2
 800d38c:	70bb      	strb	r3, [r7, #2]
	for (size_t row = 0; row < 16; row++) {
 800d38e:	2300      	movs	r3, #0
 800d390:	60fb      	str	r3, [r7, #12]
 800d392:	e027      	b.n	800d3e4 <ssd1362_drawChar16+0x74>
		ssd1362_drawByteAsRow(x, y+row, font16x16[(unsigned char)thisChar][row*2], color);
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	b29a      	uxth	r2, r3
 800d398:	88bb      	ldrh	r3, [r7, #4]
 800d39a:	4413      	add	r3, r2
 800d39c:	b299      	uxth	r1, r3
 800d39e:	78fa      	ldrb	r2, [r7, #3]
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	005b      	lsls	r3, r3, #1
 800d3a4:	4813      	ldr	r0, [pc, #76]	; (800d3f4 <ssd1362_drawChar16+0x84>)
 800d3a6:	0152      	lsls	r2, r2, #5
 800d3a8:	4402      	add	r2, r0
 800d3aa:	4413      	add	r3, r2
 800d3ac:	781a      	ldrb	r2, [r3, #0]
 800d3ae:	78bb      	ldrb	r3, [r7, #2]
 800d3b0:	88f8      	ldrh	r0, [r7, #6]
 800d3b2:	f7ff fefc 	bl	800d1ae <ssd1362_drawByteAsRow>
		ssd1362_drawByteAsRow(x+8, y+row, font16x16[(unsigned char)thisChar][(row*2)+1], color);
 800d3b6:	88fb      	ldrh	r3, [r7, #6]
 800d3b8:	3308      	adds	r3, #8
 800d3ba:	b298      	uxth	r0, r3
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	b29a      	uxth	r2, r3
 800d3c0:	88bb      	ldrh	r3, [r7, #4]
 800d3c2:	4413      	add	r3, r2
 800d3c4:	b299      	uxth	r1, r3
 800d3c6:	78fa      	ldrb	r2, [r7, #3]
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	005b      	lsls	r3, r3, #1
 800d3cc:	3301      	adds	r3, #1
 800d3ce:	4c09      	ldr	r4, [pc, #36]	; (800d3f4 <ssd1362_drawChar16+0x84>)
 800d3d0:	0152      	lsls	r2, r2, #5
 800d3d2:	4422      	add	r2, r4
 800d3d4:	4413      	add	r3, r2
 800d3d6:	781a      	ldrb	r2, [r3, #0]
 800d3d8:	78bb      	ldrb	r3, [r7, #2]
 800d3da:	f7ff fee8 	bl	800d1ae <ssd1362_drawByteAsRow>
	for (size_t row = 0; row < 16; row++) {
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	3301      	adds	r3, #1
 800d3e2:	60fb      	str	r3, [r7, #12]
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	2b0f      	cmp	r3, #15
 800d3e8:	d9d4      	bls.n	800d394 <ssd1362_drawChar16+0x24>
	}
}
 800d3ea:	bf00      	nop
 800d3ec:	bf00      	nop
 800d3ee:	3714      	adds	r7, #20
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd90      	pop	{r4, r7, pc}
 800d3f4:	24000010 	.word	0x24000010

0800d3f8 <ssd1362_drawChar32>:

void ssd1362_drawChar32(uint16_t x, uint16_t y, uint8_t thisChar, uint8_t color)
{
 800d3f8:	b590      	push	{r4, r7, lr}
 800d3fa:	b085      	sub	sp, #20
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	4604      	mov	r4, r0
 800d400:	4608      	mov	r0, r1
 800d402:	4611      	mov	r1, r2
 800d404:	461a      	mov	r2, r3
 800d406:	4623      	mov	r3, r4
 800d408:	80fb      	strh	r3, [r7, #6]
 800d40a:	4603      	mov	r3, r0
 800d40c:	80bb      	strh	r3, [r7, #4]
 800d40e:	460b      	mov	r3, r1
 800d410:	70fb      	strb	r3, [r7, #3]
 800d412:	4613      	mov	r3, r2
 800d414:	70bb      	strb	r3, [r7, #2]
	for (size_t row = 0; row < 32; row++) {
 800d416:	2300      	movs	r3, #0
 800d418:	60fb      	str	r3, [r7, #12]
 800d41a:	e027      	b.n	800d46c <ssd1362_drawChar32+0x74>
		ssd1362_drawByteAsRow(x, y+row, font16x32[(unsigned char)thisChar][row*2], color);
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	b29a      	uxth	r2, r3
 800d420:	88bb      	ldrh	r3, [r7, #4]
 800d422:	4413      	add	r3, r2
 800d424:	b299      	uxth	r1, r3
 800d426:	78fa      	ldrb	r2, [r7, #3]
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	005b      	lsls	r3, r3, #1
 800d42c:	4813      	ldr	r0, [pc, #76]	; (800d47c <ssd1362_drawChar32+0x84>)
 800d42e:	0192      	lsls	r2, r2, #6
 800d430:	4402      	add	r2, r0
 800d432:	4413      	add	r3, r2
 800d434:	781a      	ldrb	r2, [r3, #0]
 800d436:	78bb      	ldrb	r3, [r7, #2]
 800d438:	88f8      	ldrh	r0, [r7, #6]
 800d43a:	f7ff feb8 	bl	800d1ae <ssd1362_drawByteAsRow>
		ssd1362_drawByteAsRow(x+8, y+row, font16x32[(unsigned char)thisChar][(row*2)+1], color);
 800d43e:	88fb      	ldrh	r3, [r7, #6]
 800d440:	3308      	adds	r3, #8
 800d442:	b298      	uxth	r0, r3
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	b29a      	uxth	r2, r3
 800d448:	88bb      	ldrh	r3, [r7, #4]
 800d44a:	4413      	add	r3, r2
 800d44c:	b299      	uxth	r1, r3
 800d44e:	78fa      	ldrb	r2, [r7, #3]
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	005b      	lsls	r3, r3, #1
 800d454:	3301      	adds	r3, #1
 800d456:	4c09      	ldr	r4, [pc, #36]	; (800d47c <ssd1362_drawChar32+0x84>)
 800d458:	0192      	lsls	r2, r2, #6
 800d45a:	4422      	add	r2, r4
 800d45c:	4413      	add	r3, r2
 800d45e:	781a      	ldrb	r2, [r3, #0]
 800d460:	78bb      	ldrb	r3, [r7, #2]
 800d462:	f7ff fea4 	bl	800d1ae <ssd1362_drawByteAsRow>
	for (size_t row = 0; row < 32; row++) {
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	3301      	adds	r3, #1
 800d46a:	60fb      	str	r3, [r7, #12]
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	2b1f      	cmp	r3, #31
 800d470:	d9d4      	bls.n	800d41c <ssd1362_drawChar32+0x24>
	}
}
 800d472:	bf00      	nop
 800d474:	bf00      	nop
 800d476:	3714      	adds	r7, #20
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd90      	pop	{r4, r7, pc}
 800d47c:	24001010 	.word	0x24001010

0800d480 <ssd1362_clearBuffer>:
	HAL_Delay(15);
	ssd1362_stopScrolling();
}

void ssd1362_clearBuffer()
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b082      	sub	sp, #8
 800d484:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < ((SSD1362_HEIGHT * SSD1362_WIDTH) / 2); i++)
 800d486:	2300      	movs	r3, #0
 800d488:	607b      	str	r3, [r7, #4]
 800d48a:	e01a      	b.n	800d4c2 <ssd1362_clearBuffer+0x42>
	{
		// If there is a non-zero (non-black) byte here, make sure it gets updated
		if (frameBuffer[i])
 800d48c:	4a11      	ldr	r2, [pc, #68]	; (800d4d4 <ssd1362_clearBuffer+0x54>)
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	4413      	add	r3, r2
 800d492:	781b      	ldrb	r3, [r3, #0]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d011      	beq.n	800d4bc <ssd1362_clearBuffer+0x3c>
		{
			frameBuffer[i] = 0;
 800d498:	4a0e      	ldr	r2, [pc, #56]	; (800d4d4 <ssd1362_clearBuffer+0x54>)
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	4413      	add	r3, r2
 800d49e:	2200      	movs	r2, #0
 800d4a0:	701a      	strb	r2, [r3, #0]
			bitWrite(&changedPixels[i/8], i%8, 1); // Mark this pixel as needing an update
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	08db      	lsrs	r3, r3, #3
 800d4a6:	4a0c      	ldr	r2, [pc, #48]	; (800d4d8 <ssd1362_clearBuffer+0x58>)
 800d4a8:	1898      	adds	r0, r3, r2
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	b2db      	uxtb	r3, r3
 800d4ae:	f003 0307 	and.w	r3, r3, #7
 800d4b2:	b2db      	uxtb	r3, r3
 800d4b4:	2201      	movs	r2, #1
 800d4b6:	4619      	mov	r1, r3
 800d4b8:	f7ff fcea 	bl	800ce90 <bitWrite>
	for (uint32_t i = 0; i < ((SSD1362_HEIGHT * SSD1362_WIDTH) / 2); i++)
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	3301      	adds	r3, #1
 800d4c0:	607b      	str	r3, [r7, #4]
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d4c8:	d3e0      	bcc.n	800d48c <ssd1362_clearBuffer+0xc>
		}
	}
}
 800d4ca:	bf00      	nop
 800d4cc:	bf00      	nop
 800d4ce:	3708      	adds	r7, #8
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}
 800d4d4:	240044c4 	.word	0x240044c4
 800d4d8:	24003cc4 	.word	0x24003cc4

0800d4dc <ssd1362_writeFullBuffer>:

//Outputs the full framebuffer to the display
void ssd1362_writeFullBuffer()
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b082      	sub	sp, #8
 800d4e0:	af00      	add	r7, sp, #0
	ssd1362_setWriteZone(0, 0, (SSD1362_WIDTH / 2) - 1, SSD1362_HEIGHT - 1); //Full display
 800d4e2:	233f      	movs	r3, #63	; 0x3f
 800d4e4:	227f      	movs	r2, #127	; 0x7f
 800d4e6:	2100      	movs	r1, #0
 800d4e8:	2000      	movs	r0, #0
 800d4ea:	f7ff fd15 	bl	800cf18 <ssd1362_setWriteZone>
	for(uint32_t i = 0; i < ((SSD1362_HEIGHT * SSD1362_WIDTH) / 2); i++)
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	607b      	str	r3, [r7, #4]
 800d4f2:	e009      	b.n	800d508 <ssd1362_writeFullBuffer+0x2c>
	{
		ssd1362_writeData(frameBuffer[i]);
 800d4f4:	4a10      	ldr	r2, [pc, #64]	; (800d538 <ssd1362_writeFullBuffer+0x5c>)
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	4413      	add	r3, r2
 800d4fa:	781b      	ldrb	r3, [r3, #0]
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f7ff fcb3 	bl	800ce68 <ssd1362_writeData>
	for(uint32_t i = 0; i < ((SSD1362_HEIGHT * SSD1362_WIDTH) / 2); i++)
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	3301      	adds	r3, #1
 800d506:	607b      	str	r3, [r7, #4]
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d50e:	d3f1      	bcc.n	800d4f4 <ssd1362_writeFullBuffer+0x18>
	}
	for (uint32_t i = 0; i < 1024; i++)
 800d510:	2300      	movs	r3, #0
 800d512:	603b      	str	r3, [r7, #0]
 800d514:	e007      	b.n	800d526 <ssd1362_writeFullBuffer+0x4a>
	{
		changedPixels[i] = 0; // Set all pixels as up to date.
 800d516:	4a09      	ldr	r2, [pc, #36]	; (800d53c <ssd1362_writeFullBuffer+0x60>)
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	4413      	add	r3, r2
 800d51c:	2200      	movs	r2, #0
 800d51e:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < 1024; i++)
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	3301      	adds	r3, #1
 800d524:	603b      	str	r3, [r7, #0]
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d52c:	d3f3      	bcc.n	800d516 <ssd1362_writeFullBuffer+0x3a>
	}
}
 800d52e:	bf00      	nop
 800d530:	bf00      	nop
 800d532:	3708      	adds	r7, #8
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}
 800d538:	240044c4 	.word	0x240044c4
 800d53c:	24003cc4 	.word	0x24003cc4

0800d540 <ssd1362_init>:
	ssd1362_writeCmd(contrast);  //Contrast byte
}

//Sends all the boilerplate startup and config commands to the driver
void ssd1362_init()
{
 800d540:	b580      	push	{r7, lr}
 800d542:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1362_Reset();
 800d544:	f7ff fc66 	bl	800ce14 <ssd1362_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800d548:	2064      	movs	r0, #100	; 0x64
 800d54a:	f7f5 f8a3 	bl	8002694 <HAL_Delay>

    // Init OLED
    ssd1362_writeCmd(0XFD); //Set Command Lock
 800d54e:	20fd      	movs	r0, #253	; 0xfd
 800d550:	f7ff fc78 	bl	800ce44 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X12); //(12H=Unlock,16H=Lock)
 800d554:	2012      	movs	r0, #18
 800d556:	f7ff fc75 	bl	800ce44 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XAE); //Display OFF(Sleep Mode)
 800d55a:	20ae      	movs	r0, #174	; 0xae
 800d55c:	f7ff fc72 	bl	800ce44 <ssd1362_writeCmd>

    ssd1362_writeCmd(0X15); //Set column Address
 800d560:	2015      	movs	r0, #21
 800d562:	f7ff fc6f 	bl	800ce44 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X00); //Start column Address
 800d566:	2000      	movs	r0, #0
 800d568:	f7ff fc6c 	bl	800ce44 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X7F); //End column Address
 800d56c:	207f      	movs	r0, #127	; 0x7f
 800d56e:	f7ff fc69 	bl	800ce44 <ssd1362_writeCmd>

    ssd1362_writeCmd(0X75); //Set Row Address
 800d572:	2075      	movs	r0, #117	; 0x75
 800d574:	f7ff fc66 	bl	800ce44 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X00); //Start Row Address
 800d578:	2000      	movs	r0, #0
 800d57a:	f7ff fc63 	bl	800ce44 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X3F); //End Row Address
 800d57e:	203f      	movs	r0, #63	; 0x3f
 800d580:	f7ff fc60 	bl	800ce44 <ssd1362_writeCmd>

    ssd1362_writeCmd(0X81); //Set contrast
 800d584:	2081      	movs	r0, #129	; 0x81
 800d586:	f7ff fc5d 	bl	800ce44 <ssd1362_writeCmd>
    ssd1362_writeCmd(0x2f);
 800d58a:	202f      	movs	r0, #47	; 0x2f
 800d58c:	f7ff fc5a 	bl	800ce44 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA0); //Set Remap
 800d590:	20a0      	movs	r0, #160	; 0xa0
 800d592:	f7ff fc57 	bl	800ce44 <ssd1362_writeCmd>
    ssd1362_writeCmd(0XC3);
 800d596:	20c3      	movs	r0, #195	; 0xc3
 800d598:	f7ff fc54 	bl	800ce44 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA1); //Set Display Start Line
 800d59c:	20a1      	movs	r0, #161	; 0xa1
 800d59e:	f7ff fc51 	bl	800ce44 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X00);
 800d5a2:	2000      	movs	r0, #0
 800d5a4:	f7ff fc4e 	bl	800ce44 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA2); //Set Display Offset
 800d5a8:	20a2      	movs	r0, #162	; 0xa2
 800d5aa:	f7ff fc4b 	bl	800ce44 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X00);
 800d5ae:	2000      	movs	r0, #0
 800d5b0:	f7ff fc48 	bl	800ce44 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA4); //Normal Display
 800d5b4:	20a4      	movs	r0, #164	; 0xa4
 800d5b6:	f7ff fc45 	bl	800ce44 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA8); //Set Multiplex Ratio
 800d5ba:	20a8      	movs	r0, #168	; 0xa8
 800d5bc:	f7ff fc42 	bl	800ce44 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X3F);
 800d5c0:	203f      	movs	r0, #63	; 0x3f
 800d5c2:	f7ff fc3f 	bl	800ce44 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XAB); //Set VDD regulator
 800d5c6:	20ab      	movs	r0, #171	; 0xab
 800d5c8:	f7ff fc3c 	bl	800ce44 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X01); //Regulator Enable
 800d5cc:	2001      	movs	r0, #1
 800d5ce:	f7ff fc39 	bl	800ce44 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XAD); //External /Internal IREF Selection
 800d5d2:	20ad      	movs	r0, #173	; 0xad
 800d5d4:	f7ff fc36 	bl	800ce44 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X8E);
 800d5d8:	208e      	movs	r0, #142	; 0x8e
 800d5da:	f7ff fc33 	bl	800ce44 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XB1); //Set Phase Length
 800d5de:	20b1      	movs	r0, #177	; 0xb1
 800d5e0:	f7ff fc30 	bl	800ce44 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X22);
 800d5e4:	2022      	movs	r0, #34	; 0x22
 800d5e6:	f7ff fc2d 	bl	800ce44 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XB3); //Display clock Divider
 800d5ea:	20b3      	movs	r0, #179	; 0xb3
 800d5ec:	f7ff fc2a 	bl	800ce44 <ssd1362_writeCmd>
    ssd1362_writeCmd(0XA0);
 800d5f0:	20a0      	movs	r0, #160	; 0xa0
 800d5f2:	f7ff fc27 	bl	800ce44 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XB6); //Set Second pre-charge Period
 800d5f6:	20b6      	movs	r0, #182	; 0xb6
 800d5f8:	f7ff fc24 	bl	800ce44 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X04);
 800d5fc:	2004      	movs	r0, #4
 800d5fe:	f7ff fc21 	bl	800ce44 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XB9); //Set Linear LUT
 800d602:	20b9      	movs	r0, #185	; 0xb9
 800d604:	f7ff fc1e 	bl	800ce44 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XBc); //Set pre-charge voltage level
 800d608:	20bc      	movs	r0, #188	; 0xbc
 800d60a:	f7ff fc1b 	bl	800ce44 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X10); //0.5*Vcc
 800d60e:	2010      	movs	r0, #16
 800d610:	f7ff fc18 	bl	800ce44 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XBD); //Pre-charge voltage capacitor Selection
 800d614:	20bd      	movs	r0, #189	; 0xbd
 800d616:	f7ff fc15 	bl	800ce44 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X01);
 800d61a:	2001      	movs	r0, #1
 800d61c:	f7ff fc12 	bl	800ce44 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XBE); //Set COM deselect voltage level
 800d620:	20be      	movs	r0, #190	; 0xbe
 800d622:	f7ff fc0f 	bl	800ce44 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X07); //0.82*Vcc
 800d626:	2007      	movs	r0, #7
 800d628:	f7ff fc0c 	bl	800ce44 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XAF); //Display ON
 800d62c:	20af      	movs	r0, #175	; 0xaf
 800d62e:	f7ff fc09 	bl	800ce44 <ssd1362_writeCmd>
}
 800d632:	bf00      	nop
 800d634:	bd80      	pop	{r7, pc}
	...

0800d638 <__errno>:
 800d638:	4b01      	ldr	r3, [pc, #4]	; (800d640 <__errno+0x8>)
 800d63a:	6818      	ldr	r0, [r3, #0]
 800d63c:	4770      	bx	lr
 800d63e:	bf00      	nop
 800d640:	24003410 	.word	0x24003410

0800d644 <__libc_init_array>:
 800d644:	b570      	push	{r4, r5, r6, lr}
 800d646:	4d0d      	ldr	r5, [pc, #52]	; (800d67c <__libc_init_array+0x38>)
 800d648:	4c0d      	ldr	r4, [pc, #52]	; (800d680 <__libc_init_array+0x3c>)
 800d64a:	1b64      	subs	r4, r4, r5
 800d64c:	10a4      	asrs	r4, r4, #2
 800d64e:	2600      	movs	r6, #0
 800d650:	42a6      	cmp	r6, r4
 800d652:	d109      	bne.n	800d668 <__libc_init_array+0x24>
 800d654:	4d0b      	ldr	r5, [pc, #44]	; (800d684 <__libc_init_array+0x40>)
 800d656:	4c0c      	ldr	r4, [pc, #48]	; (800d688 <__libc_init_array+0x44>)
 800d658:	f002 fc5e 	bl	800ff18 <_init>
 800d65c:	1b64      	subs	r4, r4, r5
 800d65e:	10a4      	asrs	r4, r4, #2
 800d660:	2600      	movs	r6, #0
 800d662:	42a6      	cmp	r6, r4
 800d664:	d105      	bne.n	800d672 <__libc_init_array+0x2e>
 800d666:	bd70      	pop	{r4, r5, r6, pc}
 800d668:	f855 3b04 	ldr.w	r3, [r5], #4
 800d66c:	4798      	blx	r3
 800d66e:	3601      	adds	r6, #1
 800d670:	e7ee      	b.n	800d650 <__libc_init_array+0xc>
 800d672:	f855 3b04 	ldr.w	r3, [r5], #4
 800d676:	4798      	blx	r3
 800d678:	3601      	adds	r6, #1
 800d67a:	e7f2      	b.n	800d662 <__libc_init_array+0x1e>
 800d67c:	0801037c 	.word	0x0801037c
 800d680:	0801037c 	.word	0x0801037c
 800d684:	0801037c 	.word	0x0801037c
 800d688:	08010380 	.word	0x08010380

0800d68c <malloc>:
 800d68c:	4b02      	ldr	r3, [pc, #8]	; (800d698 <malloc+0xc>)
 800d68e:	4601      	mov	r1, r0
 800d690:	6818      	ldr	r0, [r3, #0]
 800d692:	f000 b85b 	b.w	800d74c <_malloc_r>
 800d696:	bf00      	nop
 800d698:	24003410 	.word	0x24003410

0800d69c <memset>:
 800d69c:	4402      	add	r2, r0
 800d69e:	4603      	mov	r3, r0
 800d6a0:	4293      	cmp	r3, r2
 800d6a2:	d100      	bne.n	800d6a6 <memset+0xa>
 800d6a4:	4770      	bx	lr
 800d6a6:	f803 1b01 	strb.w	r1, [r3], #1
 800d6aa:	e7f9      	b.n	800d6a0 <memset+0x4>

0800d6ac <_free_r>:
 800d6ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d6ae:	2900      	cmp	r1, #0
 800d6b0:	d048      	beq.n	800d744 <_free_r+0x98>
 800d6b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6b6:	9001      	str	r0, [sp, #4]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	f1a1 0404 	sub.w	r4, r1, #4
 800d6be:	bfb8      	it	lt
 800d6c0:	18e4      	addlt	r4, r4, r3
 800d6c2:	f001 fdf1 	bl	800f2a8 <__malloc_lock>
 800d6c6:	4a20      	ldr	r2, [pc, #128]	; (800d748 <_free_r+0x9c>)
 800d6c8:	9801      	ldr	r0, [sp, #4]
 800d6ca:	6813      	ldr	r3, [r2, #0]
 800d6cc:	4615      	mov	r5, r2
 800d6ce:	b933      	cbnz	r3, 800d6de <_free_r+0x32>
 800d6d0:	6063      	str	r3, [r4, #4]
 800d6d2:	6014      	str	r4, [r2, #0]
 800d6d4:	b003      	add	sp, #12
 800d6d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d6da:	f001 bdeb 	b.w	800f2b4 <__malloc_unlock>
 800d6de:	42a3      	cmp	r3, r4
 800d6e0:	d90b      	bls.n	800d6fa <_free_r+0x4e>
 800d6e2:	6821      	ldr	r1, [r4, #0]
 800d6e4:	1862      	adds	r2, r4, r1
 800d6e6:	4293      	cmp	r3, r2
 800d6e8:	bf04      	itt	eq
 800d6ea:	681a      	ldreq	r2, [r3, #0]
 800d6ec:	685b      	ldreq	r3, [r3, #4]
 800d6ee:	6063      	str	r3, [r4, #4]
 800d6f0:	bf04      	itt	eq
 800d6f2:	1852      	addeq	r2, r2, r1
 800d6f4:	6022      	streq	r2, [r4, #0]
 800d6f6:	602c      	str	r4, [r5, #0]
 800d6f8:	e7ec      	b.n	800d6d4 <_free_r+0x28>
 800d6fa:	461a      	mov	r2, r3
 800d6fc:	685b      	ldr	r3, [r3, #4]
 800d6fe:	b10b      	cbz	r3, 800d704 <_free_r+0x58>
 800d700:	42a3      	cmp	r3, r4
 800d702:	d9fa      	bls.n	800d6fa <_free_r+0x4e>
 800d704:	6811      	ldr	r1, [r2, #0]
 800d706:	1855      	adds	r5, r2, r1
 800d708:	42a5      	cmp	r5, r4
 800d70a:	d10b      	bne.n	800d724 <_free_r+0x78>
 800d70c:	6824      	ldr	r4, [r4, #0]
 800d70e:	4421      	add	r1, r4
 800d710:	1854      	adds	r4, r2, r1
 800d712:	42a3      	cmp	r3, r4
 800d714:	6011      	str	r1, [r2, #0]
 800d716:	d1dd      	bne.n	800d6d4 <_free_r+0x28>
 800d718:	681c      	ldr	r4, [r3, #0]
 800d71a:	685b      	ldr	r3, [r3, #4]
 800d71c:	6053      	str	r3, [r2, #4]
 800d71e:	4421      	add	r1, r4
 800d720:	6011      	str	r1, [r2, #0]
 800d722:	e7d7      	b.n	800d6d4 <_free_r+0x28>
 800d724:	d902      	bls.n	800d72c <_free_r+0x80>
 800d726:	230c      	movs	r3, #12
 800d728:	6003      	str	r3, [r0, #0]
 800d72a:	e7d3      	b.n	800d6d4 <_free_r+0x28>
 800d72c:	6825      	ldr	r5, [r4, #0]
 800d72e:	1961      	adds	r1, r4, r5
 800d730:	428b      	cmp	r3, r1
 800d732:	bf04      	itt	eq
 800d734:	6819      	ldreq	r1, [r3, #0]
 800d736:	685b      	ldreq	r3, [r3, #4]
 800d738:	6063      	str	r3, [r4, #4]
 800d73a:	bf04      	itt	eq
 800d73c:	1949      	addeq	r1, r1, r5
 800d73e:	6021      	streq	r1, [r4, #0]
 800d740:	6054      	str	r4, [r2, #4]
 800d742:	e7c7      	b.n	800d6d4 <_free_r+0x28>
 800d744:	b003      	add	sp, #12
 800d746:	bd30      	pop	{r4, r5, pc}
 800d748:	240036cc 	.word	0x240036cc

0800d74c <_malloc_r>:
 800d74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d74e:	1ccd      	adds	r5, r1, #3
 800d750:	f025 0503 	bic.w	r5, r5, #3
 800d754:	3508      	adds	r5, #8
 800d756:	2d0c      	cmp	r5, #12
 800d758:	bf38      	it	cc
 800d75a:	250c      	movcc	r5, #12
 800d75c:	2d00      	cmp	r5, #0
 800d75e:	4606      	mov	r6, r0
 800d760:	db01      	blt.n	800d766 <_malloc_r+0x1a>
 800d762:	42a9      	cmp	r1, r5
 800d764:	d903      	bls.n	800d76e <_malloc_r+0x22>
 800d766:	230c      	movs	r3, #12
 800d768:	6033      	str	r3, [r6, #0]
 800d76a:	2000      	movs	r0, #0
 800d76c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d76e:	f001 fd9b 	bl	800f2a8 <__malloc_lock>
 800d772:	4921      	ldr	r1, [pc, #132]	; (800d7f8 <_malloc_r+0xac>)
 800d774:	680a      	ldr	r2, [r1, #0]
 800d776:	4614      	mov	r4, r2
 800d778:	b99c      	cbnz	r4, 800d7a2 <_malloc_r+0x56>
 800d77a:	4f20      	ldr	r7, [pc, #128]	; (800d7fc <_malloc_r+0xb0>)
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	b923      	cbnz	r3, 800d78a <_malloc_r+0x3e>
 800d780:	4621      	mov	r1, r4
 800d782:	4630      	mov	r0, r6
 800d784:	f000 fc7e 	bl	800e084 <_sbrk_r>
 800d788:	6038      	str	r0, [r7, #0]
 800d78a:	4629      	mov	r1, r5
 800d78c:	4630      	mov	r0, r6
 800d78e:	f000 fc79 	bl	800e084 <_sbrk_r>
 800d792:	1c43      	adds	r3, r0, #1
 800d794:	d123      	bne.n	800d7de <_malloc_r+0x92>
 800d796:	230c      	movs	r3, #12
 800d798:	6033      	str	r3, [r6, #0]
 800d79a:	4630      	mov	r0, r6
 800d79c:	f001 fd8a 	bl	800f2b4 <__malloc_unlock>
 800d7a0:	e7e3      	b.n	800d76a <_malloc_r+0x1e>
 800d7a2:	6823      	ldr	r3, [r4, #0]
 800d7a4:	1b5b      	subs	r3, r3, r5
 800d7a6:	d417      	bmi.n	800d7d8 <_malloc_r+0x8c>
 800d7a8:	2b0b      	cmp	r3, #11
 800d7aa:	d903      	bls.n	800d7b4 <_malloc_r+0x68>
 800d7ac:	6023      	str	r3, [r4, #0]
 800d7ae:	441c      	add	r4, r3
 800d7b0:	6025      	str	r5, [r4, #0]
 800d7b2:	e004      	b.n	800d7be <_malloc_r+0x72>
 800d7b4:	6863      	ldr	r3, [r4, #4]
 800d7b6:	42a2      	cmp	r2, r4
 800d7b8:	bf0c      	ite	eq
 800d7ba:	600b      	streq	r3, [r1, #0]
 800d7bc:	6053      	strne	r3, [r2, #4]
 800d7be:	4630      	mov	r0, r6
 800d7c0:	f001 fd78 	bl	800f2b4 <__malloc_unlock>
 800d7c4:	f104 000b 	add.w	r0, r4, #11
 800d7c8:	1d23      	adds	r3, r4, #4
 800d7ca:	f020 0007 	bic.w	r0, r0, #7
 800d7ce:	1ac2      	subs	r2, r0, r3
 800d7d0:	d0cc      	beq.n	800d76c <_malloc_r+0x20>
 800d7d2:	1a1b      	subs	r3, r3, r0
 800d7d4:	50a3      	str	r3, [r4, r2]
 800d7d6:	e7c9      	b.n	800d76c <_malloc_r+0x20>
 800d7d8:	4622      	mov	r2, r4
 800d7da:	6864      	ldr	r4, [r4, #4]
 800d7dc:	e7cc      	b.n	800d778 <_malloc_r+0x2c>
 800d7de:	1cc4      	adds	r4, r0, #3
 800d7e0:	f024 0403 	bic.w	r4, r4, #3
 800d7e4:	42a0      	cmp	r0, r4
 800d7e6:	d0e3      	beq.n	800d7b0 <_malloc_r+0x64>
 800d7e8:	1a21      	subs	r1, r4, r0
 800d7ea:	4630      	mov	r0, r6
 800d7ec:	f000 fc4a 	bl	800e084 <_sbrk_r>
 800d7f0:	3001      	adds	r0, #1
 800d7f2:	d1dd      	bne.n	800d7b0 <_malloc_r+0x64>
 800d7f4:	e7cf      	b.n	800d796 <_malloc_r+0x4a>
 800d7f6:	bf00      	nop
 800d7f8:	240036cc 	.word	0x240036cc
 800d7fc:	240036d0 	.word	0x240036d0

0800d800 <__cvt>:
 800d800:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d802:	ed2d 8b02 	vpush	{d8}
 800d806:	eeb0 8b40 	vmov.f64	d8, d0
 800d80a:	b085      	sub	sp, #20
 800d80c:	4617      	mov	r7, r2
 800d80e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d810:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d812:	ee18 2a90 	vmov	r2, s17
 800d816:	f025 0520 	bic.w	r5, r5, #32
 800d81a:	2a00      	cmp	r2, #0
 800d81c:	bfb6      	itet	lt
 800d81e:	222d      	movlt	r2, #45	; 0x2d
 800d820:	2200      	movge	r2, #0
 800d822:	eeb1 8b40 	vneglt.f64	d8, d0
 800d826:	2d46      	cmp	r5, #70	; 0x46
 800d828:	460c      	mov	r4, r1
 800d82a:	701a      	strb	r2, [r3, #0]
 800d82c:	d004      	beq.n	800d838 <__cvt+0x38>
 800d82e:	2d45      	cmp	r5, #69	; 0x45
 800d830:	d100      	bne.n	800d834 <__cvt+0x34>
 800d832:	3401      	adds	r4, #1
 800d834:	2102      	movs	r1, #2
 800d836:	e000      	b.n	800d83a <__cvt+0x3a>
 800d838:	2103      	movs	r1, #3
 800d83a:	ab03      	add	r3, sp, #12
 800d83c:	9301      	str	r3, [sp, #4]
 800d83e:	ab02      	add	r3, sp, #8
 800d840:	9300      	str	r3, [sp, #0]
 800d842:	4622      	mov	r2, r4
 800d844:	4633      	mov	r3, r6
 800d846:	eeb0 0b48 	vmov.f64	d0, d8
 800d84a:	f000 fd79 	bl	800e340 <_dtoa_r>
 800d84e:	2d47      	cmp	r5, #71	; 0x47
 800d850:	d109      	bne.n	800d866 <__cvt+0x66>
 800d852:	07fb      	lsls	r3, r7, #31
 800d854:	d407      	bmi.n	800d866 <__cvt+0x66>
 800d856:	9b03      	ldr	r3, [sp, #12]
 800d858:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d85a:	1a1b      	subs	r3, r3, r0
 800d85c:	6013      	str	r3, [r2, #0]
 800d85e:	b005      	add	sp, #20
 800d860:	ecbd 8b02 	vpop	{d8}
 800d864:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d866:	2d46      	cmp	r5, #70	; 0x46
 800d868:	eb00 0204 	add.w	r2, r0, r4
 800d86c:	d10c      	bne.n	800d888 <__cvt+0x88>
 800d86e:	7803      	ldrb	r3, [r0, #0]
 800d870:	2b30      	cmp	r3, #48	; 0x30
 800d872:	d107      	bne.n	800d884 <__cvt+0x84>
 800d874:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d87c:	bf1c      	itt	ne
 800d87e:	f1c4 0401 	rsbne	r4, r4, #1
 800d882:	6034      	strne	r4, [r6, #0]
 800d884:	6833      	ldr	r3, [r6, #0]
 800d886:	441a      	add	r2, r3
 800d888:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d88c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d890:	bf08      	it	eq
 800d892:	9203      	streq	r2, [sp, #12]
 800d894:	2130      	movs	r1, #48	; 0x30
 800d896:	9b03      	ldr	r3, [sp, #12]
 800d898:	4293      	cmp	r3, r2
 800d89a:	d2dc      	bcs.n	800d856 <__cvt+0x56>
 800d89c:	1c5c      	adds	r4, r3, #1
 800d89e:	9403      	str	r4, [sp, #12]
 800d8a0:	7019      	strb	r1, [r3, #0]
 800d8a2:	e7f8      	b.n	800d896 <__cvt+0x96>

0800d8a4 <__exponent>:
 800d8a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	2900      	cmp	r1, #0
 800d8aa:	bfb8      	it	lt
 800d8ac:	4249      	neglt	r1, r1
 800d8ae:	f803 2b02 	strb.w	r2, [r3], #2
 800d8b2:	bfb4      	ite	lt
 800d8b4:	222d      	movlt	r2, #45	; 0x2d
 800d8b6:	222b      	movge	r2, #43	; 0x2b
 800d8b8:	2909      	cmp	r1, #9
 800d8ba:	7042      	strb	r2, [r0, #1]
 800d8bc:	dd2a      	ble.n	800d914 <__exponent+0x70>
 800d8be:	f10d 0407 	add.w	r4, sp, #7
 800d8c2:	46a4      	mov	ip, r4
 800d8c4:	270a      	movs	r7, #10
 800d8c6:	46a6      	mov	lr, r4
 800d8c8:	460a      	mov	r2, r1
 800d8ca:	fb91 f6f7 	sdiv	r6, r1, r7
 800d8ce:	fb07 1516 	mls	r5, r7, r6, r1
 800d8d2:	3530      	adds	r5, #48	; 0x30
 800d8d4:	2a63      	cmp	r2, #99	; 0x63
 800d8d6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800d8da:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d8de:	4631      	mov	r1, r6
 800d8e0:	dcf1      	bgt.n	800d8c6 <__exponent+0x22>
 800d8e2:	3130      	adds	r1, #48	; 0x30
 800d8e4:	f1ae 0502 	sub.w	r5, lr, #2
 800d8e8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d8ec:	1c44      	adds	r4, r0, #1
 800d8ee:	4629      	mov	r1, r5
 800d8f0:	4561      	cmp	r1, ip
 800d8f2:	d30a      	bcc.n	800d90a <__exponent+0x66>
 800d8f4:	f10d 0209 	add.w	r2, sp, #9
 800d8f8:	eba2 020e 	sub.w	r2, r2, lr
 800d8fc:	4565      	cmp	r5, ip
 800d8fe:	bf88      	it	hi
 800d900:	2200      	movhi	r2, #0
 800d902:	4413      	add	r3, r2
 800d904:	1a18      	subs	r0, r3, r0
 800d906:	b003      	add	sp, #12
 800d908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d90a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d90e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d912:	e7ed      	b.n	800d8f0 <__exponent+0x4c>
 800d914:	2330      	movs	r3, #48	; 0x30
 800d916:	3130      	adds	r1, #48	; 0x30
 800d918:	7083      	strb	r3, [r0, #2]
 800d91a:	70c1      	strb	r1, [r0, #3]
 800d91c:	1d03      	adds	r3, r0, #4
 800d91e:	e7f1      	b.n	800d904 <__exponent+0x60>

0800d920 <_printf_float>:
 800d920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d924:	b08b      	sub	sp, #44	; 0x2c
 800d926:	460c      	mov	r4, r1
 800d928:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800d92c:	4616      	mov	r6, r2
 800d92e:	461f      	mov	r7, r3
 800d930:	4605      	mov	r5, r0
 800d932:	f001 fc3f 	bl	800f1b4 <_localeconv_r>
 800d936:	f8d0 b000 	ldr.w	fp, [r0]
 800d93a:	4658      	mov	r0, fp
 800d93c:	f7f2 fcd0 	bl	80002e0 <strlen>
 800d940:	2300      	movs	r3, #0
 800d942:	9308      	str	r3, [sp, #32]
 800d944:	f8d8 3000 	ldr.w	r3, [r8]
 800d948:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d94c:	6822      	ldr	r2, [r4, #0]
 800d94e:	3307      	adds	r3, #7
 800d950:	f023 0307 	bic.w	r3, r3, #7
 800d954:	f103 0108 	add.w	r1, r3, #8
 800d958:	f8c8 1000 	str.w	r1, [r8]
 800d95c:	4682      	mov	sl, r0
 800d95e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d962:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800d966:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800dbc8 <_printf_float+0x2a8>
 800d96a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800d96e:	eeb0 6bc0 	vabs.f64	d6, d0
 800d972:	eeb4 6b47 	vcmp.f64	d6, d7
 800d976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d97a:	dd24      	ble.n	800d9c6 <_printf_float+0xa6>
 800d97c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d984:	d502      	bpl.n	800d98c <_printf_float+0x6c>
 800d986:	232d      	movs	r3, #45	; 0x2d
 800d988:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d98c:	4b90      	ldr	r3, [pc, #576]	; (800dbd0 <_printf_float+0x2b0>)
 800d98e:	4891      	ldr	r0, [pc, #580]	; (800dbd4 <_printf_float+0x2b4>)
 800d990:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d994:	bf94      	ite	ls
 800d996:	4698      	movls	r8, r3
 800d998:	4680      	movhi	r8, r0
 800d99a:	2303      	movs	r3, #3
 800d99c:	6123      	str	r3, [r4, #16]
 800d99e:	f022 0204 	bic.w	r2, r2, #4
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	6022      	str	r2, [r4, #0]
 800d9a6:	9304      	str	r3, [sp, #16]
 800d9a8:	9700      	str	r7, [sp, #0]
 800d9aa:	4633      	mov	r3, r6
 800d9ac:	aa09      	add	r2, sp, #36	; 0x24
 800d9ae:	4621      	mov	r1, r4
 800d9b0:	4628      	mov	r0, r5
 800d9b2:	f000 f9d3 	bl	800dd5c <_printf_common>
 800d9b6:	3001      	adds	r0, #1
 800d9b8:	f040 808a 	bne.w	800dad0 <_printf_float+0x1b0>
 800d9bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d9c0:	b00b      	add	sp, #44	; 0x2c
 800d9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9c6:	eeb4 0b40 	vcmp.f64	d0, d0
 800d9ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9ce:	d709      	bvc.n	800d9e4 <_printf_float+0xc4>
 800d9d0:	ee10 3a90 	vmov	r3, s1
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	bfbc      	itt	lt
 800d9d8:	232d      	movlt	r3, #45	; 0x2d
 800d9da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d9de:	487e      	ldr	r0, [pc, #504]	; (800dbd8 <_printf_float+0x2b8>)
 800d9e0:	4b7e      	ldr	r3, [pc, #504]	; (800dbdc <_printf_float+0x2bc>)
 800d9e2:	e7d5      	b.n	800d990 <_printf_float+0x70>
 800d9e4:	6863      	ldr	r3, [r4, #4]
 800d9e6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800d9ea:	9104      	str	r1, [sp, #16]
 800d9ec:	1c59      	adds	r1, r3, #1
 800d9ee:	d13c      	bne.n	800da6a <_printf_float+0x14a>
 800d9f0:	2306      	movs	r3, #6
 800d9f2:	6063      	str	r3, [r4, #4]
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	9303      	str	r3, [sp, #12]
 800d9f8:	ab08      	add	r3, sp, #32
 800d9fa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800d9fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800da02:	ab07      	add	r3, sp, #28
 800da04:	6861      	ldr	r1, [r4, #4]
 800da06:	9300      	str	r3, [sp, #0]
 800da08:	6022      	str	r2, [r4, #0]
 800da0a:	f10d 031b 	add.w	r3, sp, #27
 800da0e:	4628      	mov	r0, r5
 800da10:	f7ff fef6 	bl	800d800 <__cvt>
 800da14:	9b04      	ldr	r3, [sp, #16]
 800da16:	9907      	ldr	r1, [sp, #28]
 800da18:	2b47      	cmp	r3, #71	; 0x47
 800da1a:	4680      	mov	r8, r0
 800da1c:	d108      	bne.n	800da30 <_printf_float+0x110>
 800da1e:	1cc8      	adds	r0, r1, #3
 800da20:	db02      	blt.n	800da28 <_printf_float+0x108>
 800da22:	6863      	ldr	r3, [r4, #4]
 800da24:	4299      	cmp	r1, r3
 800da26:	dd41      	ble.n	800daac <_printf_float+0x18c>
 800da28:	f1a9 0902 	sub.w	r9, r9, #2
 800da2c:	fa5f f989 	uxtb.w	r9, r9
 800da30:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800da34:	d820      	bhi.n	800da78 <_printf_float+0x158>
 800da36:	3901      	subs	r1, #1
 800da38:	464a      	mov	r2, r9
 800da3a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800da3e:	9107      	str	r1, [sp, #28]
 800da40:	f7ff ff30 	bl	800d8a4 <__exponent>
 800da44:	9a08      	ldr	r2, [sp, #32]
 800da46:	9004      	str	r0, [sp, #16]
 800da48:	1813      	adds	r3, r2, r0
 800da4a:	2a01      	cmp	r2, #1
 800da4c:	6123      	str	r3, [r4, #16]
 800da4e:	dc02      	bgt.n	800da56 <_printf_float+0x136>
 800da50:	6822      	ldr	r2, [r4, #0]
 800da52:	07d2      	lsls	r2, r2, #31
 800da54:	d501      	bpl.n	800da5a <_printf_float+0x13a>
 800da56:	3301      	adds	r3, #1
 800da58:	6123      	str	r3, [r4, #16]
 800da5a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d0a2      	beq.n	800d9a8 <_printf_float+0x88>
 800da62:	232d      	movs	r3, #45	; 0x2d
 800da64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da68:	e79e      	b.n	800d9a8 <_printf_float+0x88>
 800da6a:	9904      	ldr	r1, [sp, #16]
 800da6c:	2947      	cmp	r1, #71	; 0x47
 800da6e:	d1c1      	bne.n	800d9f4 <_printf_float+0xd4>
 800da70:	2b00      	cmp	r3, #0
 800da72:	d1bf      	bne.n	800d9f4 <_printf_float+0xd4>
 800da74:	2301      	movs	r3, #1
 800da76:	e7bc      	b.n	800d9f2 <_printf_float+0xd2>
 800da78:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800da7c:	d118      	bne.n	800dab0 <_printf_float+0x190>
 800da7e:	2900      	cmp	r1, #0
 800da80:	6863      	ldr	r3, [r4, #4]
 800da82:	dd0b      	ble.n	800da9c <_printf_float+0x17c>
 800da84:	6121      	str	r1, [r4, #16]
 800da86:	b913      	cbnz	r3, 800da8e <_printf_float+0x16e>
 800da88:	6822      	ldr	r2, [r4, #0]
 800da8a:	07d0      	lsls	r0, r2, #31
 800da8c:	d502      	bpl.n	800da94 <_printf_float+0x174>
 800da8e:	3301      	adds	r3, #1
 800da90:	440b      	add	r3, r1
 800da92:	6123      	str	r3, [r4, #16]
 800da94:	2300      	movs	r3, #0
 800da96:	65a1      	str	r1, [r4, #88]	; 0x58
 800da98:	9304      	str	r3, [sp, #16]
 800da9a:	e7de      	b.n	800da5a <_printf_float+0x13a>
 800da9c:	b913      	cbnz	r3, 800daa4 <_printf_float+0x184>
 800da9e:	6822      	ldr	r2, [r4, #0]
 800daa0:	07d2      	lsls	r2, r2, #31
 800daa2:	d501      	bpl.n	800daa8 <_printf_float+0x188>
 800daa4:	3302      	adds	r3, #2
 800daa6:	e7f4      	b.n	800da92 <_printf_float+0x172>
 800daa8:	2301      	movs	r3, #1
 800daaa:	e7f2      	b.n	800da92 <_printf_float+0x172>
 800daac:	f04f 0967 	mov.w	r9, #103	; 0x67
 800dab0:	9b08      	ldr	r3, [sp, #32]
 800dab2:	4299      	cmp	r1, r3
 800dab4:	db05      	blt.n	800dac2 <_printf_float+0x1a2>
 800dab6:	6823      	ldr	r3, [r4, #0]
 800dab8:	6121      	str	r1, [r4, #16]
 800daba:	07d8      	lsls	r0, r3, #31
 800dabc:	d5ea      	bpl.n	800da94 <_printf_float+0x174>
 800dabe:	1c4b      	adds	r3, r1, #1
 800dac0:	e7e7      	b.n	800da92 <_printf_float+0x172>
 800dac2:	2900      	cmp	r1, #0
 800dac4:	bfd4      	ite	le
 800dac6:	f1c1 0202 	rsble	r2, r1, #2
 800daca:	2201      	movgt	r2, #1
 800dacc:	4413      	add	r3, r2
 800dace:	e7e0      	b.n	800da92 <_printf_float+0x172>
 800dad0:	6823      	ldr	r3, [r4, #0]
 800dad2:	055a      	lsls	r2, r3, #21
 800dad4:	d407      	bmi.n	800dae6 <_printf_float+0x1c6>
 800dad6:	6923      	ldr	r3, [r4, #16]
 800dad8:	4642      	mov	r2, r8
 800dada:	4631      	mov	r1, r6
 800dadc:	4628      	mov	r0, r5
 800dade:	47b8      	blx	r7
 800dae0:	3001      	adds	r0, #1
 800dae2:	d12a      	bne.n	800db3a <_printf_float+0x21a>
 800dae4:	e76a      	b.n	800d9bc <_printf_float+0x9c>
 800dae6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800daea:	f240 80e2 	bls.w	800dcb2 <_printf_float+0x392>
 800daee:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800daf2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800daf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dafa:	d133      	bne.n	800db64 <_printf_float+0x244>
 800dafc:	4a38      	ldr	r2, [pc, #224]	; (800dbe0 <_printf_float+0x2c0>)
 800dafe:	2301      	movs	r3, #1
 800db00:	4631      	mov	r1, r6
 800db02:	4628      	mov	r0, r5
 800db04:	47b8      	blx	r7
 800db06:	3001      	adds	r0, #1
 800db08:	f43f af58 	beq.w	800d9bc <_printf_float+0x9c>
 800db0c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800db10:	429a      	cmp	r2, r3
 800db12:	db02      	blt.n	800db1a <_printf_float+0x1fa>
 800db14:	6823      	ldr	r3, [r4, #0]
 800db16:	07d8      	lsls	r0, r3, #31
 800db18:	d50f      	bpl.n	800db3a <_printf_float+0x21a>
 800db1a:	4653      	mov	r3, sl
 800db1c:	465a      	mov	r2, fp
 800db1e:	4631      	mov	r1, r6
 800db20:	4628      	mov	r0, r5
 800db22:	47b8      	blx	r7
 800db24:	3001      	adds	r0, #1
 800db26:	f43f af49 	beq.w	800d9bc <_printf_float+0x9c>
 800db2a:	f04f 0800 	mov.w	r8, #0
 800db2e:	f104 091a 	add.w	r9, r4, #26
 800db32:	9b08      	ldr	r3, [sp, #32]
 800db34:	3b01      	subs	r3, #1
 800db36:	4543      	cmp	r3, r8
 800db38:	dc09      	bgt.n	800db4e <_printf_float+0x22e>
 800db3a:	6823      	ldr	r3, [r4, #0]
 800db3c:	079b      	lsls	r3, r3, #30
 800db3e:	f100 8108 	bmi.w	800dd52 <_printf_float+0x432>
 800db42:	68e0      	ldr	r0, [r4, #12]
 800db44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db46:	4298      	cmp	r0, r3
 800db48:	bfb8      	it	lt
 800db4a:	4618      	movlt	r0, r3
 800db4c:	e738      	b.n	800d9c0 <_printf_float+0xa0>
 800db4e:	2301      	movs	r3, #1
 800db50:	464a      	mov	r2, r9
 800db52:	4631      	mov	r1, r6
 800db54:	4628      	mov	r0, r5
 800db56:	47b8      	blx	r7
 800db58:	3001      	adds	r0, #1
 800db5a:	f43f af2f 	beq.w	800d9bc <_printf_float+0x9c>
 800db5e:	f108 0801 	add.w	r8, r8, #1
 800db62:	e7e6      	b.n	800db32 <_printf_float+0x212>
 800db64:	9b07      	ldr	r3, [sp, #28]
 800db66:	2b00      	cmp	r3, #0
 800db68:	dc3c      	bgt.n	800dbe4 <_printf_float+0x2c4>
 800db6a:	4a1d      	ldr	r2, [pc, #116]	; (800dbe0 <_printf_float+0x2c0>)
 800db6c:	2301      	movs	r3, #1
 800db6e:	4631      	mov	r1, r6
 800db70:	4628      	mov	r0, r5
 800db72:	47b8      	blx	r7
 800db74:	3001      	adds	r0, #1
 800db76:	f43f af21 	beq.w	800d9bc <_printf_float+0x9c>
 800db7a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800db7e:	4313      	orrs	r3, r2
 800db80:	d102      	bne.n	800db88 <_printf_float+0x268>
 800db82:	6823      	ldr	r3, [r4, #0]
 800db84:	07d9      	lsls	r1, r3, #31
 800db86:	d5d8      	bpl.n	800db3a <_printf_float+0x21a>
 800db88:	4653      	mov	r3, sl
 800db8a:	465a      	mov	r2, fp
 800db8c:	4631      	mov	r1, r6
 800db8e:	4628      	mov	r0, r5
 800db90:	47b8      	blx	r7
 800db92:	3001      	adds	r0, #1
 800db94:	f43f af12 	beq.w	800d9bc <_printf_float+0x9c>
 800db98:	f04f 0900 	mov.w	r9, #0
 800db9c:	f104 0a1a 	add.w	sl, r4, #26
 800dba0:	9b07      	ldr	r3, [sp, #28]
 800dba2:	425b      	negs	r3, r3
 800dba4:	454b      	cmp	r3, r9
 800dba6:	dc01      	bgt.n	800dbac <_printf_float+0x28c>
 800dba8:	9b08      	ldr	r3, [sp, #32]
 800dbaa:	e795      	b.n	800dad8 <_printf_float+0x1b8>
 800dbac:	2301      	movs	r3, #1
 800dbae:	4652      	mov	r2, sl
 800dbb0:	4631      	mov	r1, r6
 800dbb2:	4628      	mov	r0, r5
 800dbb4:	47b8      	blx	r7
 800dbb6:	3001      	adds	r0, #1
 800dbb8:	f43f af00 	beq.w	800d9bc <_printf_float+0x9c>
 800dbbc:	f109 0901 	add.w	r9, r9, #1
 800dbc0:	e7ee      	b.n	800dba0 <_printf_float+0x280>
 800dbc2:	bf00      	nop
 800dbc4:	f3af 8000 	nop.w
 800dbc8:	ffffffff 	.word	0xffffffff
 800dbcc:	7fefffff 	.word	0x7fefffff
 800dbd0:	0800ff94 	.word	0x0800ff94
 800dbd4:	0800ff98 	.word	0x0800ff98
 800dbd8:	0800ffa0 	.word	0x0800ffa0
 800dbdc:	0800ff9c 	.word	0x0800ff9c
 800dbe0:	0800ffa4 	.word	0x0800ffa4
 800dbe4:	9a08      	ldr	r2, [sp, #32]
 800dbe6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dbe8:	429a      	cmp	r2, r3
 800dbea:	bfa8      	it	ge
 800dbec:	461a      	movge	r2, r3
 800dbee:	2a00      	cmp	r2, #0
 800dbf0:	4691      	mov	r9, r2
 800dbf2:	dc38      	bgt.n	800dc66 <_printf_float+0x346>
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	9305      	str	r3, [sp, #20]
 800dbf8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dbfc:	f104 021a 	add.w	r2, r4, #26
 800dc00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dc02:	9905      	ldr	r1, [sp, #20]
 800dc04:	9304      	str	r3, [sp, #16]
 800dc06:	eba3 0309 	sub.w	r3, r3, r9
 800dc0a:	428b      	cmp	r3, r1
 800dc0c:	dc33      	bgt.n	800dc76 <_printf_float+0x356>
 800dc0e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800dc12:	429a      	cmp	r2, r3
 800dc14:	db3c      	blt.n	800dc90 <_printf_float+0x370>
 800dc16:	6823      	ldr	r3, [r4, #0]
 800dc18:	07da      	lsls	r2, r3, #31
 800dc1a:	d439      	bmi.n	800dc90 <_printf_float+0x370>
 800dc1c:	9a08      	ldr	r2, [sp, #32]
 800dc1e:	9b04      	ldr	r3, [sp, #16]
 800dc20:	9907      	ldr	r1, [sp, #28]
 800dc22:	1ad3      	subs	r3, r2, r3
 800dc24:	eba2 0901 	sub.w	r9, r2, r1
 800dc28:	4599      	cmp	r9, r3
 800dc2a:	bfa8      	it	ge
 800dc2c:	4699      	movge	r9, r3
 800dc2e:	f1b9 0f00 	cmp.w	r9, #0
 800dc32:	dc35      	bgt.n	800dca0 <_printf_float+0x380>
 800dc34:	f04f 0800 	mov.w	r8, #0
 800dc38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dc3c:	f104 0a1a 	add.w	sl, r4, #26
 800dc40:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800dc44:	1a9b      	subs	r3, r3, r2
 800dc46:	eba3 0309 	sub.w	r3, r3, r9
 800dc4a:	4543      	cmp	r3, r8
 800dc4c:	f77f af75 	ble.w	800db3a <_printf_float+0x21a>
 800dc50:	2301      	movs	r3, #1
 800dc52:	4652      	mov	r2, sl
 800dc54:	4631      	mov	r1, r6
 800dc56:	4628      	mov	r0, r5
 800dc58:	47b8      	blx	r7
 800dc5a:	3001      	adds	r0, #1
 800dc5c:	f43f aeae 	beq.w	800d9bc <_printf_float+0x9c>
 800dc60:	f108 0801 	add.w	r8, r8, #1
 800dc64:	e7ec      	b.n	800dc40 <_printf_float+0x320>
 800dc66:	4613      	mov	r3, r2
 800dc68:	4631      	mov	r1, r6
 800dc6a:	4642      	mov	r2, r8
 800dc6c:	4628      	mov	r0, r5
 800dc6e:	47b8      	blx	r7
 800dc70:	3001      	adds	r0, #1
 800dc72:	d1bf      	bne.n	800dbf4 <_printf_float+0x2d4>
 800dc74:	e6a2      	b.n	800d9bc <_printf_float+0x9c>
 800dc76:	2301      	movs	r3, #1
 800dc78:	4631      	mov	r1, r6
 800dc7a:	4628      	mov	r0, r5
 800dc7c:	9204      	str	r2, [sp, #16]
 800dc7e:	47b8      	blx	r7
 800dc80:	3001      	adds	r0, #1
 800dc82:	f43f ae9b 	beq.w	800d9bc <_printf_float+0x9c>
 800dc86:	9b05      	ldr	r3, [sp, #20]
 800dc88:	9a04      	ldr	r2, [sp, #16]
 800dc8a:	3301      	adds	r3, #1
 800dc8c:	9305      	str	r3, [sp, #20]
 800dc8e:	e7b7      	b.n	800dc00 <_printf_float+0x2e0>
 800dc90:	4653      	mov	r3, sl
 800dc92:	465a      	mov	r2, fp
 800dc94:	4631      	mov	r1, r6
 800dc96:	4628      	mov	r0, r5
 800dc98:	47b8      	blx	r7
 800dc9a:	3001      	adds	r0, #1
 800dc9c:	d1be      	bne.n	800dc1c <_printf_float+0x2fc>
 800dc9e:	e68d      	b.n	800d9bc <_printf_float+0x9c>
 800dca0:	9a04      	ldr	r2, [sp, #16]
 800dca2:	464b      	mov	r3, r9
 800dca4:	4442      	add	r2, r8
 800dca6:	4631      	mov	r1, r6
 800dca8:	4628      	mov	r0, r5
 800dcaa:	47b8      	blx	r7
 800dcac:	3001      	adds	r0, #1
 800dcae:	d1c1      	bne.n	800dc34 <_printf_float+0x314>
 800dcb0:	e684      	b.n	800d9bc <_printf_float+0x9c>
 800dcb2:	9a08      	ldr	r2, [sp, #32]
 800dcb4:	2a01      	cmp	r2, #1
 800dcb6:	dc01      	bgt.n	800dcbc <_printf_float+0x39c>
 800dcb8:	07db      	lsls	r3, r3, #31
 800dcba:	d537      	bpl.n	800dd2c <_printf_float+0x40c>
 800dcbc:	2301      	movs	r3, #1
 800dcbe:	4642      	mov	r2, r8
 800dcc0:	4631      	mov	r1, r6
 800dcc2:	4628      	mov	r0, r5
 800dcc4:	47b8      	blx	r7
 800dcc6:	3001      	adds	r0, #1
 800dcc8:	f43f ae78 	beq.w	800d9bc <_printf_float+0x9c>
 800dccc:	4653      	mov	r3, sl
 800dcce:	465a      	mov	r2, fp
 800dcd0:	4631      	mov	r1, r6
 800dcd2:	4628      	mov	r0, r5
 800dcd4:	47b8      	blx	r7
 800dcd6:	3001      	adds	r0, #1
 800dcd8:	f43f ae70 	beq.w	800d9bc <_printf_float+0x9c>
 800dcdc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800dce0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dce8:	d01b      	beq.n	800dd22 <_printf_float+0x402>
 800dcea:	9b08      	ldr	r3, [sp, #32]
 800dcec:	f108 0201 	add.w	r2, r8, #1
 800dcf0:	3b01      	subs	r3, #1
 800dcf2:	4631      	mov	r1, r6
 800dcf4:	4628      	mov	r0, r5
 800dcf6:	47b8      	blx	r7
 800dcf8:	3001      	adds	r0, #1
 800dcfa:	d10e      	bne.n	800dd1a <_printf_float+0x3fa>
 800dcfc:	e65e      	b.n	800d9bc <_printf_float+0x9c>
 800dcfe:	2301      	movs	r3, #1
 800dd00:	464a      	mov	r2, r9
 800dd02:	4631      	mov	r1, r6
 800dd04:	4628      	mov	r0, r5
 800dd06:	47b8      	blx	r7
 800dd08:	3001      	adds	r0, #1
 800dd0a:	f43f ae57 	beq.w	800d9bc <_printf_float+0x9c>
 800dd0e:	f108 0801 	add.w	r8, r8, #1
 800dd12:	9b08      	ldr	r3, [sp, #32]
 800dd14:	3b01      	subs	r3, #1
 800dd16:	4543      	cmp	r3, r8
 800dd18:	dcf1      	bgt.n	800dcfe <_printf_float+0x3de>
 800dd1a:	9b04      	ldr	r3, [sp, #16]
 800dd1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800dd20:	e6db      	b.n	800dada <_printf_float+0x1ba>
 800dd22:	f04f 0800 	mov.w	r8, #0
 800dd26:	f104 091a 	add.w	r9, r4, #26
 800dd2a:	e7f2      	b.n	800dd12 <_printf_float+0x3f2>
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	4642      	mov	r2, r8
 800dd30:	e7df      	b.n	800dcf2 <_printf_float+0x3d2>
 800dd32:	2301      	movs	r3, #1
 800dd34:	464a      	mov	r2, r9
 800dd36:	4631      	mov	r1, r6
 800dd38:	4628      	mov	r0, r5
 800dd3a:	47b8      	blx	r7
 800dd3c:	3001      	adds	r0, #1
 800dd3e:	f43f ae3d 	beq.w	800d9bc <_printf_float+0x9c>
 800dd42:	f108 0801 	add.w	r8, r8, #1
 800dd46:	68e3      	ldr	r3, [r4, #12]
 800dd48:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dd4a:	1a5b      	subs	r3, r3, r1
 800dd4c:	4543      	cmp	r3, r8
 800dd4e:	dcf0      	bgt.n	800dd32 <_printf_float+0x412>
 800dd50:	e6f7      	b.n	800db42 <_printf_float+0x222>
 800dd52:	f04f 0800 	mov.w	r8, #0
 800dd56:	f104 0919 	add.w	r9, r4, #25
 800dd5a:	e7f4      	b.n	800dd46 <_printf_float+0x426>

0800dd5c <_printf_common>:
 800dd5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd60:	4616      	mov	r6, r2
 800dd62:	4699      	mov	r9, r3
 800dd64:	688a      	ldr	r2, [r1, #8]
 800dd66:	690b      	ldr	r3, [r1, #16]
 800dd68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dd6c:	4293      	cmp	r3, r2
 800dd6e:	bfb8      	it	lt
 800dd70:	4613      	movlt	r3, r2
 800dd72:	6033      	str	r3, [r6, #0]
 800dd74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dd78:	4607      	mov	r7, r0
 800dd7a:	460c      	mov	r4, r1
 800dd7c:	b10a      	cbz	r2, 800dd82 <_printf_common+0x26>
 800dd7e:	3301      	adds	r3, #1
 800dd80:	6033      	str	r3, [r6, #0]
 800dd82:	6823      	ldr	r3, [r4, #0]
 800dd84:	0699      	lsls	r1, r3, #26
 800dd86:	bf42      	ittt	mi
 800dd88:	6833      	ldrmi	r3, [r6, #0]
 800dd8a:	3302      	addmi	r3, #2
 800dd8c:	6033      	strmi	r3, [r6, #0]
 800dd8e:	6825      	ldr	r5, [r4, #0]
 800dd90:	f015 0506 	ands.w	r5, r5, #6
 800dd94:	d106      	bne.n	800dda4 <_printf_common+0x48>
 800dd96:	f104 0a19 	add.w	sl, r4, #25
 800dd9a:	68e3      	ldr	r3, [r4, #12]
 800dd9c:	6832      	ldr	r2, [r6, #0]
 800dd9e:	1a9b      	subs	r3, r3, r2
 800dda0:	42ab      	cmp	r3, r5
 800dda2:	dc26      	bgt.n	800ddf2 <_printf_common+0x96>
 800dda4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dda8:	1e13      	subs	r3, r2, #0
 800ddaa:	6822      	ldr	r2, [r4, #0]
 800ddac:	bf18      	it	ne
 800ddae:	2301      	movne	r3, #1
 800ddb0:	0692      	lsls	r2, r2, #26
 800ddb2:	d42b      	bmi.n	800de0c <_printf_common+0xb0>
 800ddb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ddb8:	4649      	mov	r1, r9
 800ddba:	4638      	mov	r0, r7
 800ddbc:	47c0      	blx	r8
 800ddbe:	3001      	adds	r0, #1
 800ddc0:	d01e      	beq.n	800de00 <_printf_common+0xa4>
 800ddc2:	6823      	ldr	r3, [r4, #0]
 800ddc4:	68e5      	ldr	r5, [r4, #12]
 800ddc6:	6832      	ldr	r2, [r6, #0]
 800ddc8:	f003 0306 	and.w	r3, r3, #6
 800ddcc:	2b04      	cmp	r3, #4
 800ddce:	bf08      	it	eq
 800ddd0:	1aad      	subeq	r5, r5, r2
 800ddd2:	68a3      	ldr	r3, [r4, #8]
 800ddd4:	6922      	ldr	r2, [r4, #16]
 800ddd6:	bf0c      	ite	eq
 800ddd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dddc:	2500      	movne	r5, #0
 800ddde:	4293      	cmp	r3, r2
 800dde0:	bfc4      	itt	gt
 800dde2:	1a9b      	subgt	r3, r3, r2
 800dde4:	18ed      	addgt	r5, r5, r3
 800dde6:	2600      	movs	r6, #0
 800dde8:	341a      	adds	r4, #26
 800ddea:	42b5      	cmp	r5, r6
 800ddec:	d11a      	bne.n	800de24 <_printf_common+0xc8>
 800ddee:	2000      	movs	r0, #0
 800ddf0:	e008      	b.n	800de04 <_printf_common+0xa8>
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	4652      	mov	r2, sl
 800ddf6:	4649      	mov	r1, r9
 800ddf8:	4638      	mov	r0, r7
 800ddfa:	47c0      	blx	r8
 800ddfc:	3001      	adds	r0, #1
 800ddfe:	d103      	bne.n	800de08 <_printf_common+0xac>
 800de00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800de04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de08:	3501      	adds	r5, #1
 800de0a:	e7c6      	b.n	800dd9a <_printf_common+0x3e>
 800de0c:	18e1      	adds	r1, r4, r3
 800de0e:	1c5a      	adds	r2, r3, #1
 800de10:	2030      	movs	r0, #48	; 0x30
 800de12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800de16:	4422      	add	r2, r4
 800de18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800de1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800de20:	3302      	adds	r3, #2
 800de22:	e7c7      	b.n	800ddb4 <_printf_common+0x58>
 800de24:	2301      	movs	r3, #1
 800de26:	4622      	mov	r2, r4
 800de28:	4649      	mov	r1, r9
 800de2a:	4638      	mov	r0, r7
 800de2c:	47c0      	blx	r8
 800de2e:	3001      	adds	r0, #1
 800de30:	d0e6      	beq.n	800de00 <_printf_common+0xa4>
 800de32:	3601      	adds	r6, #1
 800de34:	e7d9      	b.n	800ddea <_printf_common+0x8e>
	...

0800de38 <_printf_i>:
 800de38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800de3c:	460c      	mov	r4, r1
 800de3e:	4691      	mov	r9, r2
 800de40:	7e27      	ldrb	r7, [r4, #24]
 800de42:	990c      	ldr	r1, [sp, #48]	; 0x30
 800de44:	2f78      	cmp	r7, #120	; 0x78
 800de46:	4680      	mov	r8, r0
 800de48:	469a      	mov	sl, r3
 800de4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800de4e:	d807      	bhi.n	800de60 <_printf_i+0x28>
 800de50:	2f62      	cmp	r7, #98	; 0x62
 800de52:	d80a      	bhi.n	800de6a <_printf_i+0x32>
 800de54:	2f00      	cmp	r7, #0
 800de56:	f000 80d8 	beq.w	800e00a <_printf_i+0x1d2>
 800de5a:	2f58      	cmp	r7, #88	; 0x58
 800de5c:	f000 80a3 	beq.w	800dfa6 <_printf_i+0x16e>
 800de60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800de64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800de68:	e03a      	b.n	800dee0 <_printf_i+0xa8>
 800de6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800de6e:	2b15      	cmp	r3, #21
 800de70:	d8f6      	bhi.n	800de60 <_printf_i+0x28>
 800de72:	a001      	add	r0, pc, #4	; (adr r0, 800de78 <_printf_i+0x40>)
 800de74:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800de78:	0800ded1 	.word	0x0800ded1
 800de7c:	0800dee5 	.word	0x0800dee5
 800de80:	0800de61 	.word	0x0800de61
 800de84:	0800de61 	.word	0x0800de61
 800de88:	0800de61 	.word	0x0800de61
 800de8c:	0800de61 	.word	0x0800de61
 800de90:	0800dee5 	.word	0x0800dee5
 800de94:	0800de61 	.word	0x0800de61
 800de98:	0800de61 	.word	0x0800de61
 800de9c:	0800de61 	.word	0x0800de61
 800dea0:	0800de61 	.word	0x0800de61
 800dea4:	0800dff1 	.word	0x0800dff1
 800dea8:	0800df15 	.word	0x0800df15
 800deac:	0800dfd3 	.word	0x0800dfd3
 800deb0:	0800de61 	.word	0x0800de61
 800deb4:	0800de61 	.word	0x0800de61
 800deb8:	0800e013 	.word	0x0800e013
 800debc:	0800de61 	.word	0x0800de61
 800dec0:	0800df15 	.word	0x0800df15
 800dec4:	0800de61 	.word	0x0800de61
 800dec8:	0800de61 	.word	0x0800de61
 800decc:	0800dfdb 	.word	0x0800dfdb
 800ded0:	680b      	ldr	r3, [r1, #0]
 800ded2:	1d1a      	adds	r2, r3, #4
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	600a      	str	r2, [r1, #0]
 800ded8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800dedc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dee0:	2301      	movs	r3, #1
 800dee2:	e0a3      	b.n	800e02c <_printf_i+0x1f4>
 800dee4:	6825      	ldr	r5, [r4, #0]
 800dee6:	6808      	ldr	r0, [r1, #0]
 800dee8:	062e      	lsls	r6, r5, #24
 800deea:	f100 0304 	add.w	r3, r0, #4
 800deee:	d50a      	bpl.n	800df06 <_printf_i+0xce>
 800def0:	6805      	ldr	r5, [r0, #0]
 800def2:	600b      	str	r3, [r1, #0]
 800def4:	2d00      	cmp	r5, #0
 800def6:	da03      	bge.n	800df00 <_printf_i+0xc8>
 800def8:	232d      	movs	r3, #45	; 0x2d
 800defa:	426d      	negs	r5, r5
 800defc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800df00:	485e      	ldr	r0, [pc, #376]	; (800e07c <_printf_i+0x244>)
 800df02:	230a      	movs	r3, #10
 800df04:	e019      	b.n	800df3a <_printf_i+0x102>
 800df06:	f015 0f40 	tst.w	r5, #64	; 0x40
 800df0a:	6805      	ldr	r5, [r0, #0]
 800df0c:	600b      	str	r3, [r1, #0]
 800df0e:	bf18      	it	ne
 800df10:	b22d      	sxthne	r5, r5
 800df12:	e7ef      	b.n	800def4 <_printf_i+0xbc>
 800df14:	680b      	ldr	r3, [r1, #0]
 800df16:	6825      	ldr	r5, [r4, #0]
 800df18:	1d18      	adds	r0, r3, #4
 800df1a:	6008      	str	r0, [r1, #0]
 800df1c:	0628      	lsls	r0, r5, #24
 800df1e:	d501      	bpl.n	800df24 <_printf_i+0xec>
 800df20:	681d      	ldr	r5, [r3, #0]
 800df22:	e002      	b.n	800df2a <_printf_i+0xf2>
 800df24:	0669      	lsls	r1, r5, #25
 800df26:	d5fb      	bpl.n	800df20 <_printf_i+0xe8>
 800df28:	881d      	ldrh	r5, [r3, #0]
 800df2a:	4854      	ldr	r0, [pc, #336]	; (800e07c <_printf_i+0x244>)
 800df2c:	2f6f      	cmp	r7, #111	; 0x6f
 800df2e:	bf0c      	ite	eq
 800df30:	2308      	moveq	r3, #8
 800df32:	230a      	movne	r3, #10
 800df34:	2100      	movs	r1, #0
 800df36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800df3a:	6866      	ldr	r6, [r4, #4]
 800df3c:	60a6      	str	r6, [r4, #8]
 800df3e:	2e00      	cmp	r6, #0
 800df40:	bfa2      	ittt	ge
 800df42:	6821      	ldrge	r1, [r4, #0]
 800df44:	f021 0104 	bicge.w	r1, r1, #4
 800df48:	6021      	strge	r1, [r4, #0]
 800df4a:	b90d      	cbnz	r5, 800df50 <_printf_i+0x118>
 800df4c:	2e00      	cmp	r6, #0
 800df4e:	d04d      	beq.n	800dfec <_printf_i+0x1b4>
 800df50:	4616      	mov	r6, r2
 800df52:	fbb5 f1f3 	udiv	r1, r5, r3
 800df56:	fb03 5711 	mls	r7, r3, r1, r5
 800df5a:	5dc7      	ldrb	r7, [r0, r7]
 800df5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800df60:	462f      	mov	r7, r5
 800df62:	42bb      	cmp	r3, r7
 800df64:	460d      	mov	r5, r1
 800df66:	d9f4      	bls.n	800df52 <_printf_i+0x11a>
 800df68:	2b08      	cmp	r3, #8
 800df6a:	d10b      	bne.n	800df84 <_printf_i+0x14c>
 800df6c:	6823      	ldr	r3, [r4, #0]
 800df6e:	07df      	lsls	r7, r3, #31
 800df70:	d508      	bpl.n	800df84 <_printf_i+0x14c>
 800df72:	6923      	ldr	r3, [r4, #16]
 800df74:	6861      	ldr	r1, [r4, #4]
 800df76:	4299      	cmp	r1, r3
 800df78:	bfde      	ittt	le
 800df7a:	2330      	movle	r3, #48	; 0x30
 800df7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800df80:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800df84:	1b92      	subs	r2, r2, r6
 800df86:	6122      	str	r2, [r4, #16]
 800df88:	f8cd a000 	str.w	sl, [sp]
 800df8c:	464b      	mov	r3, r9
 800df8e:	aa03      	add	r2, sp, #12
 800df90:	4621      	mov	r1, r4
 800df92:	4640      	mov	r0, r8
 800df94:	f7ff fee2 	bl	800dd5c <_printf_common>
 800df98:	3001      	adds	r0, #1
 800df9a:	d14c      	bne.n	800e036 <_printf_i+0x1fe>
 800df9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dfa0:	b004      	add	sp, #16
 800dfa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfa6:	4835      	ldr	r0, [pc, #212]	; (800e07c <_printf_i+0x244>)
 800dfa8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800dfac:	6823      	ldr	r3, [r4, #0]
 800dfae:	680e      	ldr	r6, [r1, #0]
 800dfb0:	061f      	lsls	r7, r3, #24
 800dfb2:	f856 5b04 	ldr.w	r5, [r6], #4
 800dfb6:	600e      	str	r6, [r1, #0]
 800dfb8:	d514      	bpl.n	800dfe4 <_printf_i+0x1ac>
 800dfba:	07d9      	lsls	r1, r3, #31
 800dfbc:	bf44      	itt	mi
 800dfbe:	f043 0320 	orrmi.w	r3, r3, #32
 800dfc2:	6023      	strmi	r3, [r4, #0]
 800dfc4:	b91d      	cbnz	r5, 800dfce <_printf_i+0x196>
 800dfc6:	6823      	ldr	r3, [r4, #0]
 800dfc8:	f023 0320 	bic.w	r3, r3, #32
 800dfcc:	6023      	str	r3, [r4, #0]
 800dfce:	2310      	movs	r3, #16
 800dfd0:	e7b0      	b.n	800df34 <_printf_i+0xfc>
 800dfd2:	6823      	ldr	r3, [r4, #0]
 800dfd4:	f043 0320 	orr.w	r3, r3, #32
 800dfd8:	6023      	str	r3, [r4, #0]
 800dfda:	2378      	movs	r3, #120	; 0x78
 800dfdc:	4828      	ldr	r0, [pc, #160]	; (800e080 <_printf_i+0x248>)
 800dfde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dfe2:	e7e3      	b.n	800dfac <_printf_i+0x174>
 800dfe4:	065e      	lsls	r6, r3, #25
 800dfe6:	bf48      	it	mi
 800dfe8:	b2ad      	uxthmi	r5, r5
 800dfea:	e7e6      	b.n	800dfba <_printf_i+0x182>
 800dfec:	4616      	mov	r6, r2
 800dfee:	e7bb      	b.n	800df68 <_printf_i+0x130>
 800dff0:	680b      	ldr	r3, [r1, #0]
 800dff2:	6826      	ldr	r6, [r4, #0]
 800dff4:	6960      	ldr	r0, [r4, #20]
 800dff6:	1d1d      	adds	r5, r3, #4
 800dff8:	600d      	str	r5, [r1, #0]
 800dffa:	0635      	lsls	r5, r6, #24
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	d501      	bpl.n	800e004 <_printf_i+0x1cc>
 800e000:	6018      	str	r0, [r3, #0]
 800e002:	e002      	b.n	800e00a <_printf_i+0x1d2>
 800e004:	0671      	lsls	r1, r6, #25
 800e006:	d5fb      	bpl.n	800e000 <_printf_i+0x1c8>
 800e008:	8018      	strh	r0, [r3, #0]
 800e00a:	2300      	movs	r3, #0
 800e00c:	6123      	str	r3, [r4, #16]
 800e00e:	4616      	mov	r6, r2
 800e010:	e7ba      	b.n	800df88 <_printf_i+0x150>
 800e012:	680b      	ldr	r3, [r1, #0]
 800e014:	1d1a      	adds	r2, r3, #4
 800e016:	600a      	str	r2, [r1, #0]
 800e018:	681e      	ldr	r6, [r3, #0]
 800e01a:	6862      	ldr	r2, [r4, #4]
 800e01c:	2100      	movs	r1, #0
 800e01e:	4630      	mov	r0, r6
 800e020:	f7f2 f966 	bl	80002f0 <memchr>
 800e024:	b108      	cbz	r0, 800e02a <_printf_i+0x1f2>
 800e026:	1b80      	subs	r0, r0, r6
 800e028:	6060      	str	r0, [r4, #4]
 800e02a:	6863      	ldr	r3, [r4, #4]
 800e02c:	6123      	str	r3, [r4, #16]
 800e02e:	2300      	movs	r3, #0
 800e030:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e034:	e7a8      	b.n	800df88 <_printf_i+0x150>
 800e036:	6923      	ldr	r3, [r4, #16]
 800e038:	4632      	mov	r2, r6
 800e03a:	4649      	mov	r1, r9
 800e03c:	4640      	mov	r0, r8
 800e03e:	47d0      	blx	sl
 800e040:	3001      	adds	r0, #1
 800e042:	d0ab      	beq.n	800df9c <_printf_i+0x164>
 800e044:	6823      	ldr	r3, [r4, #0]
 800e046:	079b      	lsls	r3, r3, #30
 800e048:	d413      	bmi.n	800e072 <_printf_i+0x23a>
 800e04a:	68e0      	ldr	r0, [r4, #12]
 800e04c:	9b03      	ldr	r3, [sp, #12]
 800e04e:	4298      	cmp	r0, r3
 800e050:	bfb8      	it	lt
 800e052:	4618      	movlt	r0, r3
 800e054:	e7a4      	b.n	800dfa0 <_printf_i+0x168>
 800e056:	2301      	movs	r3, #1
 800e058:	4632      	mov	r2, r6
 800e05a:	4649      	mov	r1, r9
 800e05c:	4640      	mov	r0, r8
 800e05e:	47d0      	blx	sl
 800e060:	3001      	adds	r0, #1
 800e062:	d09b      	beq.n	800df9c <_printf_i+0x164>
 800e064:	3501      	adds	r5, #1
 800e066:	68e3      	ldr	r3, [r4, #12]
 800e068:	9903      	ldr	r1, [sp, #12]
 800e06a:	1a5b      	subs	r3, r3, r1
 800e06c:	42ab      	cmp	r3, r5
 800e06e:	dcf2      	bgt.n	800e056 <_printf_i+0x21e>
 800e070:	e7eb      	b.n	800e04a <_printf_i+0x212>
 800e072:	2500      	movs	r5, #0
 800e074:	f104 0619 	add.w	r6, r4, #25
 800e078:	e7f5      	b.n	800e066 <_printf_i+0x22e>
 800e07a:	bf00      	nop
 800e07c:	0800ffa6 	.word	0x0800ffa6
 800e080:	0800ffb7 	.word	0x0800ffb7

0800e084 <_sbrk_r>:
 800e084:	b538      	push	{r3, r4, r5, lr}
 800e086:	4d06      	ldr	r5, [pc, #24]	; (800e0a0 <_sbrk_r+0x1c>)
 800e088:	2300      	movs	r3, #0
 800e08a:	4604      	mov	r4, r0
 800e08c:	4608      	mov	r0, r1
 800e08e:	602b      	str	r3, [r5, #0]
 800e090:	f7f3 fdd2 	bl	8001c38 <_sbrk>
 800e094:	1c43      	adds	r3, r0, #1
 800e096:	d102      	bne.n	800e09e <_sbrk_r+0x1a>
 800e098:	682b      	ldr	r3, [r5, #0]
 800e09a:	b103      	cbz	r3, 800e09e <_sbrk_r+0x1a>
 800e09c:	6023      	str	r3, [r4, #0]
 800e09e:	bd38      	pop	{r3, r4, r5, pc}
 800e0a0:	240064d0 	.word	0x240064d0

0800e0a4 <__swbuf_r>:
 800e0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0a6:	460e      	mov	r6, r1
 800e0a8:	4614      	mov	r4, r2
 800e0aa:	4605      	mov	r5, r0
 800e0ac:	b118      	cbz	r0, 800e0b6 <__swbuf_r+0x12>
 800e0ae:	6983      	ldr	r3, [r0, #24]
 800e0b0:	b90b      	cbnz	r3, 800e0b6 <__swbuf_r+0x12>
 800e0b2:	f000 ffe1 	bl	800f078 <__sinit>
 800e0b6:	4b21      	ldr	r3, [pc, #132]	; (800e13c <__swbuf_r+0x98>)
 800e0b8:	429c      	cmp	r4, r3
 800e0ba:	d12b      	bne.n	800e114 <__swbuf_r+0x70>
 800e0bc:	686c      	ldr	r4, [r5, #4]
 800e0be:	69a3      	ldr	r3, [r4, #24]
 800e0c0:	60a3      	str	r3, [r4, #8]
 800e0c2:	89a3      	ldrh	r3, [r4, #12]
 800e0c4:	071a      	lsls	r2, r3, #28
 800e0c6:	d52f      	bpl.n	800e128 <__swbuf_r+0x84>
 800e0c8:	6923      	ldr	r3, [r4, #16]
 800e0ca:	b36b      	cbz	r3, 800e128 <__swbuf_r+0x84>
 800e0cc:	6923      	ldr	r3, [r4, #16]
 800e0ce:	6820      	ldr	r0, [r4, #0]
 800e0d0:	1ac0      	subs	r0, r0, r3
 800e0d2:	6963      	ldr	r3, [r4, #20]
 800e0d4:	b2f6      	uxtb	r6, r6
 800e0d6:	4283      	cmp	r3, r0
 800e0d8:	4637      	mov	r7, r6
 800e0da:	dc04      	bgt.n	800e0e6 <__swbuf_r+0x42>
 800e0dc:	4621      	mov	r1, r4
 800e0de:	4628      	mov	r0, r5
 800e0e0:	f000 ff36 	bl	800ef50 <_fflush_r>
 800e0e4:	bb30      	cbnz	r0, 800e134 <__swbuf_r+0x90>
 800e0e6:	68a3      	ldr	r3, [r4, #8]
 800e0e8:	3b01      	subs	r3, #1
 800e0ea:	60a3      	str	r3, [r4, #8]
 800e0ec:	6823      	ldr	r3, [r4, #0]
 800e0ee:	1c5a      	adds	r2, r3, #1
 800e0f0:	6022      	str	r2, [r4, #0]
 800e0f2:	701e      	strb	r6, [r3, #0]
 800e0f4:	6963      	ldr	r3, [r4, #20]
 800e0f6:	3001      	adds	r0, #1
 800e0f8:	4283      	cmp	r3, r0
 800e0fa:	d004      	beq.n	800e106 <__swbuf_r+0x62>
 800e0fc:	89a3      	ldrh	r3, [r4, #12]
 800e0fe:	07db      	lsls	r3, r3, #31
 800e100:	d506      	bpl.n	800e110 <__swbuf_r+0x6c>
 800e102:	2e0a      	cmp	r6, #10
 800e104:	d104      	bne.n	800e110 <__swbuf_r+0x6c>
 800e106:	4621      	mov	r1, r4
 800e108:	4628      	mov	r0, r5
 800e10a:	f000 ff21 	bl	800ef50 <_fflush_r>
 800e10e:	b988      	cbnz	r0, 800e134 <__swbuf_r+0x90>
 800e110:	4638      	mov	r0, r7
 800e112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e114:	4b0a      	ldr	r3, [pc, #40]	; (800e140 <__swbuf_r+0x9c>)
 800e116:	429c      	cmp	r4, r3
 800e118:	d101      	bne.n	800e11e <__swbuf_r+0x7a>
 800e11a:	68ac      	ldr	r4, [r5, #8]
 800e11c:	e7cf      	b.n	800e0be <__swbuf_r+0x1a>
 800e11e:	4b09      	ldr	r3, [pc, #36]	; (800e144 <__swbuf_r+0xa0>)
 800e120:	429c      	cmp	r4, r3
 800e122:	bf08      	it	eq
 800e124:	68ec      	ldreq	r4, [r5, #12]
 800e126:	e7ca      	b.n	800e0be <__swbuf_r+0x1a>
 800e128:	4621      	mov	r1, r4
 800e12a:	4628      	mov	r0, r5
 800e12c:	f000 f80c 	bl	800e148 <__swsetup_r>
 800e130:	2800      	cmp	r0, #0
 800e132:	d0cb      	beq.n	800e0cc <__swbuf_r+0x28>
 800e134:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e138:	e7ea      	b.n	800e110 <__swbuf_r+0x6c>
 800e13a:	bf00      	nop
 800e13c:	0801007c 	.word	0x0801007c
 800e140:	0801009c 	.word	0x0801009c
 800e144:	0801005c 	.word	0x0801005c

0800e148 <__swsetup_r>:
 800e148:	4b32      	ldr	r3, [pc, #200]	; (800e214 <__swsetup_r+0xcc>)
 800e14a:	b570      	push	{r4, r5, r6, lr}
 800e14c:	681d      	ldr	r5, [r3, #0]
 800e14e:	4606      	mov	r6, r0
 800e150:	460c      	mov	r4, r1
 800e152:	b125      	cbz	r5, 800e15e <__swsetup_r+0x16>
 800e154:	69ab      	ldr	r3, [r5, #24]
 800e156:	b913      	cbnz	r3, 800e15e <__swsetup_r+0x16>
 800e158:	4628      	mov	r0, r5
 800e15a:	f000 ff8d 	bl	800f078 <__sinit>
 800e15e:	4b2e      	ldr	r3, [pc, #184]	; (800e218 <__swsetup_r+0xd0>)
 800e160:	429c      	cmp	r4, r3
 800e162:	d10f      	bne.n	800e184 <__swsetup_r+0x3c>
 800e164:	686c      	ldr	r4, [r5, #4]
 800e166:	89a3      	ldrh	r3, [r4, #12]
 800e168:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e16c:	0719      	lsls	r1, r3, #28
 800e16e:	d42c      	bmi.n	800e1ca <__swsetup_r+0x82>
 800e170:	06dd      	lsls	r5, r3, #27
 800e172:	d411      	bmi.n	800e198 <__swsetup_r+0x50>
 800e174:	2309      	movs	r3, #9
 800e176:	6033      	str	r3, [r6, #0]
 800e178:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e17c:	81a3      	strh	r3, [r4, #12]
 800e17e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e182:	e03e      	b.n	800e202 <__swsetup_r+0xba>
 800e184:	4b25      	ldr	r3, [pc, #148]	; (800e21c <__swsetup_r+0xd4>)
 800e186:	429c      	cmp	r4, r3
 800e188:	d101      	bne.n	800e18e <__swsetup_r+0x46>
 800e18a:	68ac      	ldr	r4, [r5, #8]
 800e18c:	e7eb      	b.n	800e166 <__swsetup_r+0x1e>
 800e18e:	4b24      	ldr	r3, [pc, #144]	; (800e220 <__swsetup_r+0xd8>)
 800e190:	429c      	cmp	r4, r3
 800e192:	bf08      	it	eq
 800e194:	68ec      	ldreq	r4, [r5, #12]
 800e196:	e7e6      	b.n	800e166 <__swsetup_r+0x1e>
 800e198:	0758      	lsls	r0, r3, #29
 800e19a:	d512      	bpl.n	800e1c2 <__swsetup_r+0x7a>
 800e19c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e19e:	b141      	cbz	r1, 800e1b2 <__swsetup_r+0x6a>
 800e1a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e1a4:	4299      	cmp	r1, r3
 800e1a6:	d002      	beq.n	800e1ae <__swsetup_r+0x66>
 800e1a8:	4630      	mov	r0, r6
 800e1aa:	f7ff fa7f 	bl	800d6ac <_free_r>
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	6363      	str	r3, [r4, #52]	; 0x34
 800e1b2:	89a3      	ldrh	r3, [r4, #12]
 800e1b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e1b8:	81a3      	strh	r3, [r4, #12]
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	6063      	str	r3, [r4, #4]
 800e1be:	6923      	ldr	r3, [r4, #16]
 800e1c0:	6023      	str	r3, [r4, #0]
 800e1c2:	89a3      	ldrh	r3, [r4, #12]
 800e1c4:	f043 0308 	orr.w	r3, r3, #8
 800e1c8:	81a3      	strh	r3, [r4, #12]
 800e1ca:	6923      	ldr	r3, [r4, #16]
 800e1cc:	b94b      	cbnz	r3, 800e1e2 <__swsetup_r+0x9a>
 800e1ce:	89a3      	ldrh	r3, [r4, #12]
 800e1d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e1d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e1d8:	d003      	beq.n	800e1e2 <__swsetup_r+0x9a>
 800e1da:	4621      	mov	r1, r4
 800e1dc:	4630      	mov	r0, r6
 800e1de:	f001 f815 	bl	800f20c <__smakebuf_r>
 800e1e2:	89a0      	ldrh	r0, [r4, #12]
 800e1e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e1e8:	f010 0301 	ands.w	r3, r0, #1
 800e1ec:	d00a      	beq.n	800e204 <__swsetup_r+0xbc>
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	60a3      	str	r3, [r4, #8]
 800e1f2:	6963      	ldr	r3, [r4, #20]
 800e1f4:	425b      	negs	r3, r3
 800e1f6:	61a3      	str	r3, [r4, #24]
 800e1f8:	6923      	ldr	r3, [r4, #16]
 800e1fa:	b943      	cbnz	r3, 800e20e <__swsetup_r+0xc6>
 800e1fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e200:	d1ba      	bne.n	800e178 <__swsetup_r+0x30>
 800e202:	bd70      	pop	{r4, r5, r6, pc}
 800e204:	0781      	lsls	r1, r0, #30
 800e206:	bf58      	it	pl
 800e208:	6963      	ldrpl	r3, [r4, #20]
 800e20a:	60a3      	str	r3, [r4, #8]
 800e20c:	e7f4      	b.n	800e1f8 <__swsetup_r+0xb0>
 800e20e:	2000      	movs	r0, #0
 800e210:	e7f7      	b.n	800e202 <__swsetup_r+0xba>
 800e212:	bf00      	nop
 800e214:	24003410 	.word	0x24003410
 800e218:	0801007c 	.word	0x0801007c
 800e21c:	0801009c 	.word	0x0801009c
 800e220:	0801005c 	.word	0x0801005c

0800e224 <quorem>:
 800e224:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e228:	6903      	ldr	r3, [r0, #16]
 800e22a:	690c      	ldr	r4, [r1, #16]
 800e22c:	42a3      	cmp	r3, r4
 800e22e:	4607      	mov	r7, r0
 800e230:	f2c0 8081 	blt.w	800e336 <quorem+0x112>
 800e234:	3c01      	subs	r4, #1
 800e236:	f101 0814 	add.w	r8, r1, #20
 800e23a:	f100 0514 	add.w	r5, r0, #20
 800e23e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e242:	9301      	str	r3, [sp, #4]
 800e244:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e248:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e24c:	3301      	adds	r3, #1
 800e24e:	429a      	cmp	r2, r3
 800e250:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e254:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e258:	fbb2 f6f3 	udiv	r6, r2, r3
 800e25c:	d331      	bcc.n	800e2c2 <quorem+0x9e>
 800e25e:	f04f 0e00 	mov.w	lr, #0
 800e262:	4640      	mov	r0, r8
 800e264:	46ac      	mov	ip, r5
 800e266:	46f2      	mov	sl, lr
 800e268:	f850 2b04 	ldr.w	r2, [r0], #4
 800e26c:	b293      	uxth	r3, r2
 800e26e:	fb06 e303 	mla	r3, r6, r3, lr
 800e272:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e276:	b29b      	uxth	r3, r3
 800e278:	ebaa 0303 	sub.w	r3, sl, r3
 800e27c:	0c12      	lsrs	r2, r2, #16
 800e27e:	f8dc a000 	ldr.w	sl, [ip]
 800e282:	fb06 e202 	mla	r2, r6, r2, lr
 800e286:	fa13 f38a 	uxtah	r3, r3, sl
 800e28a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e28e:	fa1f fa82 	uxth.w	sl, r2
 800e292:	f8dc 2000 	ldr.w	r2, [ip]
 800e296:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800e29a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e29e:	b29b      	uxth	r3, r3
 800e2a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e2a4:	4581      	cmp	r9, r0
 800e2a6:	f84c 3b04 	str.w	r3, [ip], #4
 800e2aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e2ae:	d2db      	bcs.n	800e268 <quorem+0x44>
 800e2b0:	f855 300b 	ldr.w	r3, [r5, fp]
 800e2b4:	b92b      	cbnz	r3, 800e2c2 <quorem+0x9e>
 800e2b6:	9b01      	ldr	r3, [sp, #4]
 800e2b8:	3b04      	subs	r3, #4
 800e2ba:	429d      	cmp	r5, r3
 800e2bc:	461a      	mov	r2, r3
 800e2be:	d32e      	bcc.n	800e31e <quorem+0xfa>
 800e2c0:	613c      	str	r4, [r7, #16]
 800e2c2:	4638      	mov	r0, r7
 800e2c4:	f001 fa7a 	bl	800f7bc <__mcmp>
 800e2c8:	2800      	cmp	r0, #0
 800e2ca:	db24      	blt.n	800e316 <quorem+0xf2>
 800e2cc:	3601      	adds	r6, #1
 800e2ce:	4628      	mov	r0, r5
 800e2d0:	f04f 0c00 	mov.w	ip, #0
 800e2d4:	f858 2b04 	ldr.w	r2, [r8], #4
 800e2d8:	f8d0 e000 	ldr.w	lr, [r0]
 800e2dc:	b293      	uxth	r3, r2
 800e2de:	ebac 0303 	sub.w	r3, ip, r3
 800e2e2:	0c12      	lsrs	r2, r2, #16
 800e2e4:	fa13 f38e 	uxtah	r3, r3, lr
 800e2e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e2ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e2f0:	b29b      	uxth	r3, r3
 800e2f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e2f6:	45c1      	cmp	r9, r8
 800e2f8:	f840 3b04 	str.w	r3, [r0], #4
 800e2fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e300:	d2e8      	bcs.n	800e2d4 <quorem+0xb0>
 800e302:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e306:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e30a:	b922      	cbnz	r2, 800e316 <quorem+0xf2>
 800e30c:	3b04      	subs	r3, #4
 800e30e:	429d      	cmp	r5, r3
 800e310:	461a      	mov	r2, r3
 800e312:	d30a      	bcc.n	800e32a <quorem+0x106>
 800e314:	613c      	str	r4, [r7, #16]
 800e316:	4630      	mov	r0, r6
 800e318:	b003      	add	sp, #12
 800e31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e31e:	6812      	ldr	r2, [r2, #0]
 800e320:	3b04      	subs	r3, #4
 800e322:	2a00      	cmp	r2, #0
 800e324:	d1cc      	bne.n	800e2c0 <quorem+0x9c>
 800e326:	3c01      	subs	r4, #1
 800e328:	e7c7      	b.n	800e2ba <quorem+0x96>
 800e32a:	6812      	ldr	r2, [r2, #0]
 800e32c:	3b04      	subs	r3, #4
 800e32e:	2a00      	cmp	r2, #0
 800e330:	d1f0      	bne.n	800e314 <quorem+0xf0>
 800e332:	3c01      	subs	r4, #1
 800e334:	e7eb      	b.n	800e30e <quorem+0xea>
 800e336:	2000      	movs	r0, #0
 800e338:	e7ee      	b.n	800e318 <quorem+0xf4>
 800e33a:	0000      	movs	r0, r0
 800e33c:	0000      	movs	r0, r0
	...

0800e340 <_dtoa_r>:
 800e340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e344:	ec59 8b10 	vmov	r8, r9, d0
 800e348:	b095      	sub	sp, #84	; 0x54
 800e34a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e34c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800e34e:	9107      	str	r1, [sp, #28]
 800e350:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800e354:	4606      	mov	r6, r0
 800e356:	9209      	str	r2, [sp, #36]	; 0x24
 800e358:	9310      	str	r3, [sp, #64]	; 0x40
 800e35a:	b975      	cbnz	r5, 800e37a <_dtoa_r+0x3a>
 800e35c:	2010      	movs	r0, #16
 800e35e:	f7ff f995 	bl	800d68c <malloc>
 800e362:	4602      	mov	r2, r0
 800e364:	6270      	str	r0, [r6, #36]	; 0x24
 800e366:	b920      	cbnz	r0, 800e372 <_dtoa_r+0x32>
 800e368:	4bab      	ldr	r3, [pc, #684]	; (800e618 <_dtoa_r+0x2d8>)
 800e36a:	21ea      	movs	r1, #234	; 0xea
 800e36c:	48ab      	ldr	r0, [pc, #684]	; (800e61c <_dtoa_r+0x2dc>)
 800e36e:	f001 fce3 	bl	800fd38 <__assert_func>
 800e372:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e376:	6005      	str	r5, [r0, #0]
 800e378:	60c5      	str	r5, [r0, #12]
 800e37a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e37c:	6819      	ldr	r1, [r3, #0]
 800e37e:	b151      	cbz	r1, 800e396 <_dtoa_r+0x56>
 800e380:	685a      	ldr	r2, [r3, #4]
 800e382:	604a      	str	r2, [r1, #4]
 800e384:	2301      	movs	r3, #1
 800e386:	4093      	lsls	r3, r2
 800e388:	608b      	str	r3, [r1, #8]
 800e38a:	4630      	mov	r0, r6
 800e38c:	f000 ffd8 	bl	800f340 <_Bfree>
 800e390:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e392:	2200      	movs	r2, #0
 800e394:	601a      	str	r2, [r3, #0]
 800e396:	f1b9 0300 	subs.w	r3, r9, #0
 800e39a:	bfbb      	ittet	lt
 800e39c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e3a0:	9303      	strlt	r3, [sp, #12]
 800e3a2:	2300      	movge	r3, #0
 800e3a4:	2201      	movlt	r2, #1
 800e3a6:	bfac      	ite	ge
 800e3a8:	6023      	strge	r3, [r4, #0]
 800e3aa:	6022      	strlt	r2, [r4, #0]
 800e3ac:	4b9c      	ldr	r3, [pc, #624]	; (800e620 <_dtoa_r+0x2e0>)
 800e3ae:	9c03      	ldr	r4, [sp, #12]
 800e3b0:	43a3      	bics	r3, r4
 800e3b2:	d11a      	bne.n	800e3ea <_dtoa_r+0xaa>
 800e3b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e3b6:	f242 730f 	movw	r3, #9999	; 0x270f
 800e3ba:	6013      	str	r3, [r2, #0]
 800e3bc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800e3c0:	ea53 0308 	orrs.w	r3, r3, r8
 800e3c4:	f000 8512 	beq.w	800edec <_dtoa_r+0xaac>
 800e3c8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e3ca:	b953      	cbnz	r3, 800e3e2 <_dtoa_r+0xa2>
 800e3cc:	4b95      	ldr	r3, [pc, #596]	; (800e624 <_dtoa_r+0x2e4>)
 800e3ce:	e01f      	b.n	800e410 <_dtoa_r+0xd0>
 800e3d0:	4b95      	ldr	r3, [pc, #596]	; (800e628 <_dtoa_r+0x2e8>)
 800e3d2:	9300      	str	r3, [sp, #0]
 800e3d4:	3308      	adds	r3, #8
 800e3d6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e3d8:	6013      	str	r3, [r2, #0]
 800e3da:	9800      	ldr	r0, [sp, #0]
 800e3dc:	b015      	add	sp, #84	; 0x54
 800e3de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3e2:	4b90      	ldr	r3, [pc, #576]	; (800e624 <_dtoa_r+0x2e4>)
 800e3e4:	9300      	str	r3, [sp, #0]
 800e3e6:	3303      	adds	r3, #3
 800e3e8:	e7f5      	b.n	800e3d6 <_dtoa_r+0x96>
 800e3ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e3ee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e3f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3f6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800e3fa:	d10b      	bne.n	800e414 <_dtoa_r+0xd4>
 800e3fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e3fe:	2301      	movs	r3, #1
 800e400:	6013      	str	r3, [r2, #0]
 800e402:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e404:	2b00      	cmp	r3, #0
 800e406:	f000 84ee 	beq.w	800ede6 <_dtoa_r+0xaa6>
 800e40a:	4888      	ldr	r0, [pc, #544]	; (800e62c <_dtoa_r+0x2ec>)
 800e40c:	6018      	str	r0, [r3, #0]
 800e40e:	1e43      	subs	r3, r0, #1
 800e410:	9300      	str	r3, [sp, #0]
 800e412:	e7e2      	b.n	800e3da <_dtoa_r+0x9a>
 800e414:	a913      	add	r1, sp, #76	; 0x4c
 800e416:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800e41a:	aa12      	add	r2, sp, #72	; 0x48
 800e41c:	4630      	mov	r0, r6
 800e41e:	f001 fa71 	bl	800f904 <__d2b>
 800e422:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800e426:	4605      	mov	r5, r0
 800e428:	9812      	ldr	r0, [sp, #72]	; 0x48
 800e42a:	2900      	cmp	r1, #0
 800e42c:	d047      	beq.n	800e4be <_dtoa_r+0x17e>
 800e42e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800e430:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e434:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e438:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800e43c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e440:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800e444:	2400      	movs	r4, #0
 800e446:	ec43 2b16 	vmov	d6, r2, r3
 800e44a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800e44e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800e600 <_dtoa_r+0x2c0>
 800e452:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e456:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800e608 <_dtoa_r+0x2c8>
 800e45a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e45e:	eeb0 7b46 	vmov.f64	d7, d6
 800e462:	ee06 1a90 	vmov	s13, r1
 800e466:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800e46a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800e610 <_dtoa_r+0x2d0>
 800e46e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e472:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800e476:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800e47a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e47e:	ee16 ba90 	vmov	fp, s13
 800e482:	9411      	str	r4, [sp, #68]	; 0x44
 800e484:	d508      	bpl.n	800e498 <_dtoa_r+0x158>
 800e486:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800e48a:	eeb4 6b47 	vcmp.f64	d6, d7
 800e48e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e492:	bf18      	it	ne
 800e494:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 800e498:	f1bb 0f16 	cmp.w	fp, #22
 800e49c:	d832      	bhi.n	800e504 <_dtoa_r+0x1c4>
 800e49e:	4b64      	ldr	r3, [pc, #400]	; (800e630 <_dtoa_r+0x2f0>)
 800e4a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e4a4:	ed93 7b00 	vldr	d7, [r3]
 800e4a8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800e4ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e4b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4b4:	d501      	bpl.n	800e4ba <_dtoa_r+0x17a>
 800e4b6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	e023      	b.n	800e506 <_dtoa_r+0x1c6>
 800e4be:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800e4c0:	4401      	add	r1, r0
 800e4c2:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800e4c6:	2b20      	cmp	r3, #32
 800e4c8:	bfc3      	ittte	gt
 800e4ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e4ce:	fa04 f303 	lslgt.w	r3, r4, r3
 800e4d2:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800e4d6:	f1c3 0320 	rsble	r3, r3, #32
 800e4da:	bfc6      	itte	gt
 800e4dc:	fa28 f804 	lsrgt.w	r8, r8, r4
 800e4e0:	ea43 0308 	orrgt.w	r3, r3, r8
 800e4e4:	fa08 f303 	lslle.w	r3, r8, r3
 800e4e8:	ee07 3a90 	vmov	s15, r3
 800e4ec:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e4f0:	3901      	subs	r1, #1
 800e4f2:	ed8d 7b00 	vstr	d7, [sp]
 800e4f6:	9c01      	ldr	r4, [sp, #4]
 800e4f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e4fc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800e500:	2401      	movs	r4, #1
 800e502:	e7a0      	b.n	800e446 <_dtoa_r+0x106>
 800e504:	2301      	movs	r3, #1
 800e506:	930f      	str	r3, [sp, #60]	; 0x3c
 800e508:	1a43      	subs	r3, r0, r1
 800e50a:	1e5a      	subs	r2, r3, #1
 800e50c:	bf45      	ittet	mi
 800e50e:	f1c3 0301 	rsbmi	r3, r3, #1
 800e512:	9305      	strmi	r3, [sp, #20]
 800e514:	2300      	movpl	r3, #0
 800e516:	2300      	movmi	r3, #0
 800e518:	9206      	str	r2, [sp, #24]
 800e51a:	bf54      	ite	pl
 800e51c:	9305      	strpl	r3, [sp, #20]
 800e51e:	9306      	strmi	r3, [sp, #24]
 800e520:	f1bb 0f00 	cmp.w	fp, #0
 800e524:	db18      	blt.n	800e558 <_dtoa_r+0x218>
 800e526:	9b06      	ldr	r3, [sp, #24]
 800e528:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800e52c:	445b      	add	r3, fp
 800e52e:	9306      	str	r3, [sp, #24]
 800e530:	2300      	movs	r3, #0
 800e532:	9a07      	ldr	r2, [sp, #28]
 800e534:	2a09      	cmp	r2, #9
 800e536:	d849      	bhi.n	800e5cc <_dtoa_r+0x28c>
 800e538:	2a05      	cmp	r2, #5
 800e53a:	bfc4      	itt	gt
 800e53c:	3a04      	subgt	r2, #4
 800e53e:	9207      	strgt	r2, [sp, #28]
 800e540:	9a07      	ldr	r2, [sp, #28]
 800e542:	f1a2 0202 	sub.w	r2, r2, #2
 800e546:	bfcc      	ite	gt
 800e548:	2400      	movgt	r4, #0
 800e54a:	2401      	movle	r4, #1
 800e54c:	2a03      	cmp	r2, #3
 800e54e:	d848      	bhi.n	800e5e2 <_dtoa_r+0x2a2>
 800e550:	e8df f002 	tbb	[pc, r2]
 800e554:	3a2c2e0b 	.word	0x3a2c2e0b
 800e558:	9b05      	ldr	r3, [sp, #20]
 800e55a:	2200      	movs	r2, #0
 800e55c:	eba3 030b 	sub.w	r3, r3, fp
 800e560:	9305      	str	r3, [sp, #20]
 800e562:	920e      	str	r2, [sp, #56]	; 0x38
 800e564:	f1cb 0300 	rsb	r3, fp, #0
 800e568:	e7e3      	b.n	800e532 <_dtoa_r+0x1f2>
 800e56a:	2200      	movs	r2, #0
 800e56c:	9208      	str	r2, [sp, #32]
 800e56e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e570:	2a00      	cmp	r2, #0
 800e572:	dc39      	bgt.n	800e5e8 <_dtoa_r+0x2a8>
 800e574:	f04f 0a01 	mov.w	sl, #1
 800e578:	46d1      	mov	r9, sl
 800e57a:	4652      	mov	r2, sl
 800e57c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800e580:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800e582:	2100      	movs	r1, #0
 800e584:	6079      	str	r1, [r7, #4]
 800e586:	2004      	movs	r0, #4
 800e588:	f100 0c14 	add.w	ip, r0, #20
 800e58c:	4594      	cmp	ip, r2
 800e58e:	6879      	ldr	r1, [r7, #4]
 800e590:	d92f      	bls.n	800e5f2 <_dtoa_r+0x2b2>
 800e592:	4630      	mov	r0, r6
 800e594:	930c      	str	r3, [sp, #48]	; 0x30
 800e596:	f000 fe93 	bl	800f2c0 <_Balloc>
 800e59a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e59c:	9000      	str	r0, [sp, #0]
 800e59e:	4602      	mov	r2, r0
 800e5a0:	2800      	cmp	r0, #0
 800e5a2:	d149      	bne.n	800e638 <_dtoa_r+0x2f8>
 800e5a4:	4b23      	ldr	r3, [pc, #140]	; (800e634 <_dtoa_r+0x2f4>)
 800e5a6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e5aa:	e6df      	b.n	800e36c <_dtoa_r+0x2c>
 800e5ac:	2201      	movs	r2, #1
 800e5ae:	e7dd      	b.n	800e56c <_dtoa_r+0x22c>
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	9208      	str	r2, [sp, #32]
 800e5b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e5b6:	eb0b 0a02 	add.w	sl, fp, r2
 800e5ba:	f10a 0901 	add.w	r9, sl, #1
 800e5be:	464a      	mov	r2, r9
 800e5c0:	2a01      	cmp	r2, #1
 800e5c2:	bfb8      	it	lt
 800e5c4:	2201      	movlt	r2, #1
 800e5c6:	e7db      	b.n	800e580 <_dtoa_r+0x240>
 800e5c8:	2201      	movs	r2, #1
 800e5ca:	e7f2      	b.n	800e5b2 <_dtoa_r+0x272>
 800e5cc:	2401      	movs	r4, #1
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800e5d4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800e5d8:	2100      	movs	r1, #0
 800e5da:	46d1      	mov	r9, sl
 800e5dc:	2212      	movs	r2, #18
 800e5de:	9109      	str	r1, [sp, #36]	; 0x24
 800e5e0:	e7ce      	b.n	800e580 <_dtoa_r+0x240>
 800e5e2:	2201      	movs	r2, #1
 800e5e4:	9208      	str	r2, [sp, #32]
 800e5e6:	e7f5      	b.n	800e5d4 <_dtoa_r+0x294>
 800e5e8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800e5ec:	46d1      	mov	r9, sl
 800e5ee:	4652      	mov	r2, sl
 800e5f0:	e7c6      	b.n	800e580 <_dtoa_r+0x240>
 800e5f2:	3101      	adds	r1, #1
 800e5f4:	6079      	str	r1, [r7, #4]
 800e5f6:	0040      	lsls	r0, r0, #1
 800e5f8:	e7c6      	b.n	800e588 <_dtoa_r+0x248>
 800e5fa:	bf00      	nop
 800e5fc:	f3af 8000 	nop.w
 800e600:	636f4361 	.word	0x636f4361
 800e604:	3fd287a7 	.word	0x3fd287a7
 800e608:	8b60c8b3 	.word	0x8b60c8b3
 800e60c:	3fc68a28 	.word	0x3fc68a28
 800e610:	509f79fb 	.word	0x509f79fb
 800e614:	3fd34413 	.word	0x3fd34413
 800e618:	0800ffd5 	.word	0x0800ffd5
 800e61c:	0800ffec 	.word	0x0800ffec
 800e620:	7ff00000 	.word	0x7ff00000
 800e624:	0800ffd1 	.word	0x0800ffd1
 800e628:	0800ffc8 	.word	0x0800ffc8
 800e62c:	0800ffa5 	.word	0x0800ffa5
 800e630:	08010148 	.word	0x08010148
 800e634:	0801004b 	.word	0x0801004b
 800e638:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800e63a:	9900      	ldr	r1, [sp, #0]
 800e63c:	6011      	str	r1, [r2, #0]
 800e63e:	f1b9 0f0e 	cmp.w	r9, #14
 800e642:	d872      	bhi.n	800e72a <_dtoa_r+0x3ea>
 800e644:	2c00      	cmp	r4, #0
 800e646:	d070      	beq.n	800e72a <_dtoa_r+0x3ea>
 800e648:	f1bb 0f00 	cmp.w	fp, #0
 800e64c:	f340 80a6 	ble.w	800e79c <_dtoa_r+0x45c>
 800e650:	49ca      	ldr	r1, [pc, #808]	; (800e97c <_dtoa_r+0x63c>)
 800e652:	f00b 020f 	and.w	r2, fp, #15
 800e656:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800e65a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e65e:	ed92 7b00 	vldr	d7, [r2]
 800e662:	ea4f 112b 	mov.w	r1, fp, asr #4
 800e666:	f000 808d 	beq.w	800e784 <_dtoa_r+0x444>
 800e66a:	4ac5      	ldr	r2, [pc, #788]	; (800e980 <_dtoa_r+0x640>)
 800e66c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800e670:	ed92 6b08 	vldr	d6, [r2, #32]
 800e674:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800e678:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e67c:	f001 010f 	and.w	r1, r1, #15
 800e680:	2203      	movs	r2, #3
 800e682:	48bf      	ldr	r0, [pc, #764]	; (800e980 <_dtoa_r+0x640>)
 800e684:	2900      	cmp	r1, #0
 800e686:	d17f      	bne.n	800e788 <_dtoa_r+0x448>
 800e688:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e68c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e690:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e694:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e696:	2900      	cmp	r1, #0
 800e698:	f000 80b2 	beq.w	800e800 <_dtoa_r+0x4c0>
 800e69c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e6a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e6a4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e6a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6ac:	f140 80a8 	bpl.w	800e800 <_dtoa_r+0x4c0>
 800e6b0:	f1b9 0f00 	cmp.w	r9, #0
 800e6b4:	f000 80a4 	beq.w	800e800 <_dtoa_r+0x4c0>
 800e6b8:	f1ba 0f00 	cmp.w	sl, #0
 800e6bc:	dd31      	ble.n	800e722 <_dtoa_r+0x3e2>
 800e6be:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800e6c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e6c6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e6ca:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800e6ce:	3201      	adds	r2, #1
 800e6d0:	4650      	mov	r0, sl
 800e6d2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e6d6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800e6da:	ee07 2a90 	vmov	s15, r2
 800e6de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e6e2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800e6e6:	ed8d 5b02 	vstr	d5, [sp, #8]
 800e6ea:	9c03      	ldr	r4, [sp, #12]
 800e6ec:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800e6f0:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800e6f4:	2800      	cmp	r0, #0
 800e6f6:	f040 8086 	bne.w	800e806 <_dtoa_r+0x4c6>
 800e6fa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e6fe:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e702:	ec42 1b17 	vmov	d7, r1, r2
 800e706:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e70a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e70e:	f300 8272 	bgt.w	800ebf6 <_dtoa_r+0x8b6>
 800e712:	eeb1 7b47 	vneg.f64	d7, d7
 800e716:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e71a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e71e:	f100 8267 	bmi.w	800ebf0 <_dtoa_r+0x8b0>
 800e722:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800e726:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800e72a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e72c:	2a00      	cmp	r2, #0
 800e72e:	f2c0 8129 	blt.w	800e984 <_dtoa_r+0x644>
 800e732:	f1bb 0f0e 	cmp.w	fp, #14
 800e736:	f300 8125 	bgt.w	800e984 <_dtoa_r+0x644>
 800e73a:	4b90      	ldr	r3, [pc, #576]	; (800e97c <_dtoa_r+0x63c>)
 800e73c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e740:	ed93 6b00 	vldr	d6, [r3]
 800e744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e746:	2b00      	cmp	r3, #0
 800e748:	f280 80c3 	bge.w	800e8d2 <_dtoa_r+0x592>
 800e74c:	f1b9 0f00 	cmp.w	r9, #0
 800e750:	f300 80bf 	bgt.w	800e8d2 <_dtoa_r+0x592>
 800e754:	f040 824c 	bne.w	800ebf0 <_dtoa_r+0x8b0>
 800e758:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e75c:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e760:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e764:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e76c:	464c      	mov	r4, r9
 800e76e:	464f      	mov	r7, r9
 800e770:	f280 8222 	bge.w	800ebb8 <_dtoa_r+0x878>
 800e774:	f8dd 8000 	ldr.w	r8, [sp]
 800e778:	2331      	movs	r3, #49	; 0x31
 800e77a:	f808 3b01 	strb.w	r3, [r8], #1
 800e77e:	f10b 0b01 	add.w	fp, fp, #1
 800e782:	e21e      	b.n	800ebc2 <_dtoa_r+0x882>
 800e784:	2202      	movs	r2, #2
 800e786:	e77c      	b.n	800e682 <_dtoa_r+0x342>
 800e788:	07cc      	lsls	r4, r1, #31
 800e78a:	d504      	bpl.n	800e796 <_dtoa_r+0x456>
 800e78c:	ed90 6b00 	vldr	d6, [r0]
 800e790:	3201      	adds	r2, #1
 800e792:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e796:	1049      	asrs	r1, r1, #1
 800e798:	3008      	adds	r0, #8
 800e79a:	e773      	b.n	800e684 <_dtoa_r+0x344>
 800e79c:	d02e      	beq.n	800e7fc <_dtoa_r+0x4bc>
 800e79e:	f1cb 0100 	rsb	r1, fp, #0
 800e7a2:	4a76      	ldr	r2, [pc, #472]	; (800e97c <_dtoa_r+0x63c>)
 800e7a4:	f001 000f 	and.w	r0, r1, #15
 800e7a8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800e7ac:	ed92 7b00 	vldr	d7, [r2]
 800e7b0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800e7b4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e7b8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800e7bc:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800e7c0:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800e7c4:	486e      	ldr	r0, [pc, #440]	; (800e980 <_dtoa_r+0x640>)
 800e7c6:	1109      	asrs	r1, r1, #4
 800e7c8:	2400      	movs	r4, #0
 800e7ca:	2202      	movs	r2, #2
 800e7cc:	b939      	cbnz	r1, 800e7de <_dtoa_r+0x49e>
 800e7ce:	2c00      	cmp	r4, #0
 800e7d0:	f43f af60 	beq.w	800e694 <_dtoa_r+0x354>
 800e7d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e7d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7dc:	e75a      	b.n	800e694 <_dtoa_r+0x354>
 800e7de:	07cf      	lsls	r7, r1, #31
 800e7e0:	d509      	bpl.n	800e7f6 <_dtoa_r+0x4b6>
 800e7e2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800e7e6:	ed90 7b00 	vldr	d7, [r0]
 800e7ea:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e7ee:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800e7f2:	3201      	adds	r2, #1
 800e7f4:	2401      	movs	r4, #1
 800e7f6:	1049      	asrs	r1, r1, #1
 800e7f8:	3008      	adds	r0, #8
 800e7fa:	e7e7      	b.n	800e7cc <_dtoa_r+0x48c>
 800e7fc:	2202      	movs	r2, #2
 800e7fe:	e749      	b.n	800e694 <_dtoa_r+0x354>
 800e800:	465f      	mov	r7, fp
 800e802:	4648      	mov	r0, r9
 800e804:	e765      	b.n	800e6d2 <_dtoa_r+0x392>
 800e806:	ec42 1b17 	vmov	d7, r1, r2
 800e80a:	4a5c      	ldr	r2, [pc, #368]	; (800e97c <_dtoa_r+0x63c>)
 800e80c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800e810:	ed12 4b02 	vldr	d4, [r2, #-8]
 800e814:	9a00      	ldr	r2, [sp, #0]
 800e816:	1814      	adds	r4, r2, r0
 800e818:	9a08      	ldr	r2, [sp, #32]
 800e81a:	b352      	cbz	r2, 800e872 <_dtoa_r+0x532>
 800e81c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800e820:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800e824:	f8dd 8000 	ldr.w	r8, [sp]
 800e828:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800e82c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e830:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e834:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e838:	ee14 2a90 	vmov	r2, s9
 800e83c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e840:	3230      	adds	r2, #48	; 0x30
 800e842:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e846:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e84a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e84e:	f808 2b01 	strb.w	r2, [r8], #1
 800e852:	d439      	bmi.n	800e8c8 <_dtoa_r+0x588>
 800e854:	ee32 5b46 	vsub.f64	d5, d2, d6
 800e858:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800e85c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e860:	d472      	bmi.n	800e948 <_dtoa_r+0x608>
 800e862:	45a0      	cmp	r8, r4
 800e864:	f43f af5d 	beq.w	800e722 <_dtoa_r+0x3e2>
 800e868:	ee27 7b03 	vmul.f64	d7, d7, d3
 800e86c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e870:	e7e0      	b.n	800e834 <_dtoa_r+0x4f4>
 800e872:	f8dd 8000 	ldr.w	r8, [sp]
 800e876:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e87a:	4621      	mov	r1, r4
 800e87c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e880:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e884:	ee14 2a90 	vmov	r2, s9
 800e888:	3230      	adds	r2, #48	; 0x30
 800e88a:	f808 2b01 	strb.w	r2, [r8], #1
 800e88e:	45a0      	cmp	r8, r4
 800e890:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e894:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e898:	d118      	bne.n	800e8cc <_dtoa_r+0x58c>
 800e89a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e89e:	ee37 4b05 	vadd.f64	d4, d7, d5
 800e8a2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800e8a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8aa:	dc4d      	bgt.n	800e948 <_dtoa_r+0x608>
 800e8ac:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e8b0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e8b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8b8:	f57f af33 	bpl.w	800e722 <_dtoa_r+0x3e2>
 800e8bc:	4688      	mov	r8, r1
 800e8be:	3901      	subs	r1, #1
 800e8c0:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800e8c4:	2b30      	cmp	r3, #48	; 0x30
 800e8c6:	d0f9      	beq.n	800e8bc <_dtoa_r+0x57c>
 800e8c8:	46bb      	mov	fp, r7
 800e8ca:	e02a      	b.n	800e922 <_dtoa_r+0x5e2>
 800e8cc:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e8d0:	e7d6      	b.n	800e880 <_dtoa_r+0x540>
 800e8d2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e8d6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800e8da:	f8dd 8000 	ldr.w	r8, [sp]
 800e8de:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800e8e2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800e8e6:	ee15 3a10 	vmov	r3, s10
 800e8ea:	3330      	adds	r3, #48	; 0x30
 800e8ec:	f808 3b01 	strb.w	r3, [r8], #1
 800e8f0:	9b00      	ldr	r3, [sp, #0]
 800e8f2:	eba8 0303 	sub.w	r3, r8, r3
 800e8f6:	4599      	cmp	r9, r3
 800e8f8:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800e8fc:	eea3 7b46 	vfms.f64	d7, d3, d6
 800e900:	d133      	bne.n	800e96a <_dtoa_r+0x62a>
 800e902:	ee37 7b07 	vadd.f64	d7, d7, d7
 800e906:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e90a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e90e:	dc1a      	bgt.n	800e946 <_dtoa_r+0x606>
 800e910:	eeb4 7b46 	vcmp.f64	d7, d6
 800e914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e918:	d103      	bne.n	800e922 <_dtoa_r+0x5e2>
 800e91a:	ee15 3a10 	vmov	r3, s10
 800e91e:	07d9      	lsls	r1, r3, #31
 800e920:	d411      	bmi.n	800e946 <_dtoa_r+0x606>
 800e922:	4629      	mov	r1, r5
 800e924:	4630      	mov	r0, r6
 800e926:	f000 fd0b 	bl	800f340 <_Bfree>
 800e92a:	2300      	movs	r3, #0
 800e92c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e92e:	f888 3000 	strb.w	r3, [r8]
 800e932:	f10b 0301 	add.w	r3, fp, #1
 800e936:	6013      	str	r3, [r2, #0]
 800e938:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	f43f ad4d 	beq.w	800e3da <_dtoa_r+0x9a>
 800e940:	f8c3 8000 	str.w	r8, [r3]
 800e944:	e549      	b.n	800e3da <_dtoa_r+0x9a>
 800e946:	465f      	mov	r7, fp
 800e948:	4643      	mov	r3, r8
 800e94a:	4698      	mov	r8, r3
 800e94c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e950:	2a39      	cmp	r2, #57	; 0x39
 800e952:	d106      	bne.n	800e962 <_dtoa_r+0x622>
 800e954:	9a00      	ldr	r2, [sp, #0]
 800e956:	429a      	cmp	r2, r3
 800e958:	d1f7      	bne.n	800e94a <_dtoa_r+0x60a>
 800e95a:	9900      	ldr	r1, [sp, #0]
 800e95c:	2230      	movs	r2, #48	; 0x30
 800e95e:	3701      	adds	r7, #1
 800e960:	700a      	strb	r2, [r1, #0]
 800e962:	781a      	ldrb	r2, [r3, #0]
 800e964:	3201      	adds	r2, #1
 800e966:	701a      	strb	r2, [r3, #0]
 800e968:	e7ae      	b.n	800e8c8 <_dtoa_r+0x588>
 800e96a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e96e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e976:	d1b2      	bne.n	800e8de <_dtoa_r+0x59e>
 800e978:	e7d3      	b.n	800e922 <_dtoa_r+0x5e2>
 800e97a:	bf00      	nop
 800e97c:	08010148 	.word	0x08010148
 800e980:	08010120 	.word	0x08010120
 800e984:	9908      	ldr	r1, [sp, #32]
 800e986:	2900      	cmp	r1, #0
 800e988:	f000 80d1 	beq.w	800eb2e <_dtoa_r+0x7ee>
 800e98c:	9907      	ldr	r1, [sp, #28]
 800e98e:	2901      	cmp	r1, #1
 800e990:	f300 80b4 	bgt.w	800eafc <_dtoa_r+0x7bc>
 800e994:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e996:	2900      	cmp	r1, #0
 800e998:	f000 80ac 	beq.w	800eaf4 <_dtoa_r+0x7b4>
 800e99c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e9a0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800e9a4:	461c      	mov	r4, r3
 800e9a6:	930a      	str	r3, [sp, #40]	; 0x28
 800e9a8:	9b05      	ldr	r3, [sp, #20]
 800e9aa:	4413      	add	r3, r2
 800e9ac:	9305      	str	r3, [sp, #20]
 800e9ae:	9b06      	ldr	r3, [sp, #24]
 800e9b0:	2101      	movs	r1, #1
 800e9b2:	4413      	add	r3, r2
 800e9b4:	4630      	mov	r0, r6
 800e9b6:	9306      	str	r3, [sp, #24]
 800e9b8:	f000 fd7e 	bl	800f4b8 <__i2b>
 800e9bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9be:	4607      	mov	r7, r0
 800e9c0:	f1b8 0f00 	cmp.w	r8, #0
 800e9c4:	dd0d      	ble.n	800e9e2 <_dtoa_r+0x6a2>
 800e9c6:	9a06      	ldr	r2, [sp, #24]
 800e9c8:	2a00      	cmp	r2, #0
 800e9ca:	dd0a      	ble.n	800e9e2 <_dtoa_r+0x6a2>
 800e9cc:	4542      	cmp	r2, r8
 800e9ce:	9905      	ldr	r1, [sp, #20]
 800e9d0:	bfa8      	it	ge
 800e9d2:	4642      	movge	r2, r8
 800e9d4:	1a89      	subs	r1, r1, r2
 800e9d6:	9105      	str	r1, [sp, #20]
 800e9d8:	9906      	ldr	r1, [sp, #24]
 800e9da:	eba8 0802 	sub.w	r8, r8, r2
 800e9de:	1a8a      	subs	r2, r1, r2
 800e9e0:	9206      	str	r2, [sp, #24]
 800e9e2:	b303      	cbz	r3, 800ea26 <_dtoa_r+0x6e6>
 800e9e4:	9a08      	ldr	r2, [sp, #32]
 800e9e6:	2a00      	cmp	r2, #0
 800e9e8:	f000 80a6 	beq.w	800eb38 <_dtoa_r+0x7f8>
 800e9ec:	2c00      	cmp	r4, #0
 800e9ee:	dd13      	ble.n	800ea18 <_dtoa_r+0x6d8>
 800e9f0:	4639      	mov	r1, r7
 800e9f2:	4622      	mov	r2, r4
 800e9f4:	4630      	mov	r0, r6
 800e9f6:	930c      	str	r3, [sp, #48]	; 0x30
 800e9f8:	f000 fe1a 	bl	800f630 <__pow5mult>
 800e9fc:	462a      	mov	r2, r5
 800e9fe:	4601      	mov	r1, r0
 800ea00:	4607      	mov	r7, r0
 800ea02:	4630      	mov	r0, r6
 800ea04:	f000 fd6e 	bl	800f4e4 <__multiply>
 800ea08:	4629      	mov	r1, r5
 800ea0a:	900a      	str	r0, [sp, #40]	; 0x28
 800ea0c:	4630      	mov	r0, r6
 800ea0e:	f000 fc97 	bl	800f340 <_Bfree>
 800ea12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ea16:	4615      	mov	r5, r2
 800ea18:	1b1a      	subs	r2, r3, r4
 800ea1a:	d004      	beq.n	800ea26 <_dtoa_r+0x6e6>
 800ea1c:	4629      	mov	r1, r5
 800ea1e:	4630      	mov	r0, r6
 800ea20:	f000 fe06 	bl	800f630 <__pow5mult>
 800ea24:	4605      	mov	r5, r0
 800ea26:	2101      	movs	r1, #1
 800ea28:	4630      	mov	r0, r6
 800ea2a:	f000 fd45 	bl	800f4b8 <__i2b>
 800ea2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	4604      	mov	r4, r0
 800ea34:	f340 8082 	ble.w	800eb3c <_dtoa_r+0x7fc>
 800ea38:	461a      	mov	r2, r3
 800ea3a:	4601      	mov	r1, r0
 800ea3c:	4630      	mov	r0, r6
 800ea3e:	f000 fdf7 	bl	800f630 <__pow5mult>
 800ea42:	9b07      	ldr	r3, [sp, #28]
 800ea44:	2b01      	cmp	r3, #1
 800ea46:	4604      	mov	r4, r0
 800ea48:	dd7b      	ble.n	800eb42 <_dtoa_r+0x802>
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	930a      	str	r3, [sp, #40]	; 0x28
 800ea4e:	6922      	ldr	r2, [r4, #16]
 800ea50:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ea54:	6910      	ldr	r0, [r2, #16]
 800ea56:	f000 fcdf 	bl	800f418 <__hi0bits>
 800ea5a:	f1c0 0020 	rsb	r0, r0, #32
 800ea5e:	9b06      	ldr	r3, [sp, #24]
 800ea60:	4418      	add	r0, r3
 800ea62:	f010 001f 	ands.w	r0, r0, #31
 800ea66:	f000 808d 	beq.w	800eb84 <_dtoa_r+0x844>
 800ea6a:	f1c0 0220 	rsb	r2, r0, #32
 800ea6e:	2a04      	cmp	r2, #4
 800ea70:	f340 8086 	ble.w	800eb80 <_dtoa_r+0x840>
 800ea74:	f1c0 001c 	rsb	r0, r0, #28
 800ea78:	9b05      	ldr	r3, [sp, #20]
 800ea7a:	4403      	add	r3, r0
 800ea7c:	9305      	str	r3, [sp, #20]
 800ea7e:	9b06      	ldr	r3, [sp, #24]
 800ea80:	4403      	add	r3, r0
 800ea82:	4480      	add	r8, r0
 800ea84:	9306      	str	r3, [sp, #24]
 800ea86:	9b05      	ldr	r3, [sp, #20]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	dd05      	ble.n	800ea98 <_dtoa_r+0x758>
 800ea8c:	4629      	mov	r1, r5
 800ea8e:	461a      	mov	r2, r3
 800ea90:	4630      	mov	r0, r6
 800ea92:	f000 fe27 	bl	800f6e4 <__lshift>
 800ea96:	4605      	mov	r5, r0
 800ea98:	9b06      	ldr	r3, [sp, #24]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	dd05      	ble.n	800eaaa <_dtoa_r+0x76a>
 800ea9e:	4621      	mov	r1, r4
 800eaa0:	461a      	mov	r2, r3
 800eaa2:	4630      	mov	r0, r6
 800eaa4:	f000 fe1e 	bl	800f6e4 <__lshift>
 800eaa8:	4604      	mov	r4, r0
 800eaaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d06b      	beq.n	800eb88 <_dtoa_r+0x848>
 800eab0:	4621      	mov	r1, r4
 800eab2:	4628      	mov	r0, r5
 800eab4:	f000 fe82 	bl	800f7bc <__mcmp>
 800eab8:	2800      	cmp	r0, #0
 800eaba:	da65      	bge.n	800eb88 <_dtoa_r+0x848>
 800eabc:	2300      	movs	r3, #0
 800eabe:	4629      	mov	r1, r5
 800eac0:	220a      	movs	r2, #10
 800eac2:	4630      	mov	r0, r6
 800eac4:	f000 fc5e 	bl	800f384 <__multadd>
 800eac8:	9b08      	ldr	r3, [sp, #32]
 800eaca:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800eace:	4605      	mov	r5, r0
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	f000 8192 	beq.w	800edfa <_dtoa_r+0xaba>
 800ead6:	4639      	mov	r1, r7
 800ead8:	2300      	movs	r3, #0
 800eada:	220a      	movs	r2, #10
 800eadc:	4630      	mov	r0, r6
 800eade:	f000 fc51 	bl	800f384 <__multadd>
 800eae2:	f1ba 0f00 	cmp.w	sl, #0
 800eae6:	4607      	mov	r7, r0
 800eae8:	f300 808e 	bgt.w	800ec08 <_dtoa_r+0x8c8>
 800eaec:	9b07      	ldr	r3, [sp, #28]
 800eaee:	2b02      	cmp	r3, #2
 800eaf0:	dc51      	bgt.n	800eb96 <_dtoa_r+0x856>
 800eaf2:	e089      	b.n	800ec08 <_dtoa_r+0x8c8>
 800eaf4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800eaf6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800eafa:	e751      	b.n	800e9a0 <_dtoa_r+0x660>
 800eafc:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 800eb00:	42a3      	cmp	r3, r4
 800eb02:	bfbf      	itttt	lt
 800eb04:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800eb06:	1ae3      	sublt	r3, r4, r3
 800eb08:	18d2      	addlt	r2, r2, r3
 800eb0a:	4613      	movlt	r3, r2
 800eb0c:	bfb7      	itett	lt
 800eb0e:	930e      	strlt	r3, [sp, #56]	; 0x38
 800eb10:	1b1c      	subge	r4, r3, r4
 800eb12:	4623      	movlt	r3, r4
 800eb14:	2400      	movlt	r4, #0
 800eb16:	f1b9 0f00 	cmp.w	r9, #0
 800eb1a:	bfb5      	itete	lt
 800eb1c:	9a05      	ldrlt	r2, [sp, #20]
 800eb1e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800eb22:	eba2 0809 	sublt.w	r8, r2, r9
 800eb26:	464a      	movge	r2, r9
 800eb28:	bfb8      	it	lt
 800eb2a:	2200      	movlt	r2, #0
 800eb2c:	e73b      	b.n	800e9a6 <_dtoa_r+0x666>
 800eb2e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800eb32:	9f08      	ldr	r7, [sp, #32]
 800eb34:	461c      	mov	r4, r3
 800eb36:	e743      	b.n	800e9c0 <_dtoa_r+0x680>
 800eb38:	461a      	mov	r2, r3
 800eb3a:	e76f      	b.n	800ea1c <_dtoa_r+0x6dc>
 800eb3c:	9b07      	ldr	r3, [sp, #28]
 800eb3e:	2b01      	cmp	r3, #1
 800eb40:	dc18      	bgt.n	800eb74 <_dtoa_r+0x834>
 800eb42:	9b02      	ldr	r3, [sp, #8]
 800eb44:	b9b3      	cbnz	r3, 800eb74 <_dtoa_r+0x834>
 800eb46:	9b03      	ldr	r3, [sp, #12]
 800eb48:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800eb4c:	b9a2      	cbnz	r2, 800eb78 <_dtoa_r+0x838>
 800eb4e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800eb52:	0d12      	lsrs	r2, r2, #20
 800eb54:	0512      	lsls	r2, r2, #20
 800eb56:	b18a      	cbz	r2, 800eb7c <_dtoa_r+0x83c>
 800eb58:	9b05      	ldr	r3, [sp, #20]
 800eb5a:	3301      	adds	r3, #1
 800eb5c:	9305      	str	r3, [sp, #20]
 800eb5e:	9b06      	ldr	r3, [sp, #24]
 800eb60:	3301      	adds	r3, #1
 800eb62:	9306      	str	r3, [sp, #24]
 800eb64:	2301      	movs	r3, #1
 800eb66:	930a      	str	r3, [sp, #40]	; 0x28
 800eb68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	f47f af6f 	bne.w	800ea4e <_dtoa_r+0x70e>
 800eb70:	2001      	movs	r0, #1
 800eb72:	e774      	b.n	800ea5e <_dtoa_r+0x71e>
 800eb74:	2300      	movs	r3, #0
 800eb76:	e7f6      	b.n	800eb66 <_dtoa_r+0x826>
 800eb78:	9b02      	ldr	r3, [sp, #8]
 800eb7a:	e7f4      	b.n	800eb66 <_dtoa_r+0x826>
 800eb7c:	920a      	str	r2, [sp, #40]	; 0x28
 800eb7e:	e7f3      	b.n	800eb68 <_dtoa_r+0x828>
 800eb80:	d081      	beq.n	800ea86 <_dtoa_r+0x746>
 800eb82:	4610      	mov	r0, r2
 800eb84:	301c      	adds	r0, #28
 800eb86:	e777      	b.n	800ea78 <_dtoa_r+0x738>
 800eb88:	f1b9 0f00 	cmp.w	r9, #0
 800eb8c:	dc37      	bgt.n	800ebfe <_dtoa_r+0x8be>
 800eb8e:	9b07      	ldr	r3, [sp, #28]
 800eb90:	2b02      	cmp	r3, #2
 800eb92:	dd34      	ble.n	800ebfe <_dtoa_r+0x8be>
 800eb94:	46ca      	mov	sl, r9
 800eb96:	f1ba 0f00 	cmp.w	sl, #0
 800eb9a:	d10d      	bne.n	800ebb8 <_dtoa_r+0x878>
 800eb9c:	4621      	mov	r1, r4
 800eb9e:	4653      	mov	r3, sl
 800eba0:	2205      	movs	r2, #5
 800eba2:	4630      	mov	r0, r6
 800eba4:	f000 fbee 	bl	800f384 <__multadd>
 800eba8:	4601      	mov	r1, r0
 800ebaa:	4604      	mov	r4, r0
 800ebac:	4628      	mov	r0, r5
 800ebae:	f000 fe05 	bl	800f7bc <__mcmp>
 800ebb2:	2800      	cmp	r0, #0
 800ebb4:	f73f adde 	bgt.w	800e774 <_dtoa_r+0x434>
 800ebb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebba:	f8dd 8000 	ldr.w	r8, [sp]
 800ebbe:	ea6f 0b03 	mvn.w	fp, r3
 800ebc2:	f04f 0900 	mov.w	r9, #0
 800ebc6:	4621      	mov	r1, r4
 800ebc8:	4630      	mov	r0, r6
 800ebca:	f000 fbb9 	bl	800f340 <_Bfree>
 800ebce:	2f00      	cmp	r7, #0
 800ebd0:	f43f aea7 	beq.w	800e922 <_dtoa_r+0x5e2>
 800ebd4:	f1b9 0f00 	cmp.w	r9, #0
 800ebd8:	d005      	beq.n	800ebe6 <_dtoa_r+0x8a6>
 800ebda:	45b9      	cmp	r9, r7
 800ebdc:	d003      	beq.n	800ebe6 <_dtoa_r+0x8a6>
 800ebde:	4649      	mov	r1, r9
 800ebe0:	4630      	mov	r0, r6
 800ebe2:	f000 fbad 	bl	800f340 <_Bfree>
 800ebe6:	4639      	mov	r1, r7
 800ebe8:	4630      	mov	r0, r6
 800ebea:	f000 fba9 	bl	800f340 <_Bfree>
 800ebee:	e698      	b.n	800e922 <_dtoa_r+0x5e2>
 800ebf0:	2400      	movs	r4, #0
 800ebf2:	4627      	mov	r7, r4
 800ebf4:	e7e0      	b.n	800ebb8 <_dtoa_r+0x878>
 800ebf6:	46bb      	mov	fp, r7
 800ebf8:	4604      	mov	r4, r0
 800ebfa:	4607      	mov	r7, r0
 800ebfc:	e5ba      	b.n	800e774 <_dtoa_r+0x434>
 800ebfe:	9b08      	ldr	r3, [sp, #32]
 800ec00:	46ca      	mov	sl, r9
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	f000 8100 	beq.w	800ee08 <_dtoa_r+0xac8>
 800ec08:	f1b8 0f00 	cmp.w	r8, #0
 800ec0c:	dd05      	ble.n	800ec1a <_dtoa_r+0x8da>
 800ec0e:	4639      	mov	r1, r7
 800ec10:	4642      	mov	r2, r8
 800ec12:	4630      	mov	r0, r6
 800ec14:	f000 fd66 	bl	800f6e4 <__lshift>
 800ec18:	4607      	mov	r7, r0
 800ec1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d05d      	beq.n	800ecdc <_dtoa_r+0x99c>
 800ec20:	6879      	ldr	r1, [r7, #4]
 800ec22:	4630      	mov	r0, r6
 800ec24:	f000 fb4c 	bl	800f2c0 <_Balloc>
 800ec28:	4680      	mov	r8, r0
 800ec2a:	b928      	cbnz	r0, 800ec38 <_dtoa_r+0x8f8>
 800ec2c:	4b82      	ldr	r3, [pc, #520]	; (800ee38 <_dtoa_r+0xaf8>)
 800ec2e:	4602      	mov	r2, r0
 800ec30:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ec34:	f7ff bb9a 	b.w	800e36c <_dtoa_r+0x2c>
 800ec38:	693a      	ldr	r2, [r7, #16]
 800ec3a:	3202      	adds	r2, #2
 800ec3c:	0092      	lsls	r2, r2, #2
 800ec3e:	f107 010c 	add.w	r1, r7, #12
 800ec42:	300c      	adds	r0, #12
 800ec44:	f000 fb22 	bl	800f28c <memcpy>
 800ec48:	2201      	movs	r2, #1
 800ec4a:	4641      	mov	r1, r8
 800ec4c:	4630      	mov	r0, r6
 800ec4e:	f000 fd49 	bl	800f6e4 <__lshift>
 800ec52:	9b00      	ldr	r3, [sp, #0]
 800ec54:	3301      	adds	r3, #1
 800ec56:	9305      	str	r3, [sp, #20]
 800ec58:	9b00      	ldr	r3, [sp, #0]
 800ec5a:	4453      	add	r3, sl
 800ec5c:	9309      	str	r3, [sp, #36]	; 0x24
 800ec5e:	9b02      	ldr	r3, [sp, #8]
 800ec60:	f003 0301 	and.w	r3, r3, #1
 800ec64:	46b9      	mov	r9, r7
 800ec66:	9308      	str	r3, [sp, #32]
 800ec68:	4607      	mov	r7, r0
 800ec6a:	9b05      	ldr	r3, [sp, #20]
 800ec6c:	4621      	mov	r1, r4
 800ec6e:	3b01      	subs	r3, #1
 800ec70:	4628      	mov	r0, r5
 800ec72:	9302      	str	r3, [sp, #8]
 800ec74:	f7ff fad6 	bl	800e224 <quorem>
 800ec78:	4603      	mov	r3, r0
 800ec7a:	3330      	adds	r3, #48	; 0x30
 800ec7c:	9006      	str	r0, [sp, #24]
 800ec7e:	4649      	mov	r1, r9
 800ec80:	4628      	mov	r0, r5
 800ec82:	930a      	str	r3, [sp, #40]	; 0x28
 800ec84:	f000 fd9a 	bl	800f7bc <__mcmp>
 800ec88:	463a      	mov	r2, r7
 800ec8a:	4682      	mov	sl, r0
 800ec8c:	4621      	mov	r1, r4
 800ec8e:	4630      	mov	r0, r6
 800ec90:	f000 fdb0 	bl	800f7f4 <__mdiff>
 800ec94:	68c2      	ldr	r2, [r0, #12]
 800ec96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec98:	4680      	mov	r8, r0
 800ec9a:	bb0a      	cbnz	r2, 800ece0 <_dtoa_r+0x9a0>
 800ec9c:	4601      	mov	r1, r0
 800ec9e:	4628      	mov	r0, r5
 800eca0:	f000 fd8c 	bl	800f7bc <__mcmp>
 800eca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eca6:	4602      	mov	r2, r0
 800eca8:	4641      	mov	r1, r8
 800ecaa:	4630      	mov	r0, r6
 800ecac:	920e      	str	r2, [sp, #56]	; 0x38
 800ecae:	930a      	str	r3, [sp, #40]	; 0x28
 800ecb0:	f000 fb46 	bl	800f340 <_Bfree>
 800ecb4:	9b07      	ldr	r3, [sp, #28]
 800ecb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ecb8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800ecbc:	ea43 0102 	orr.w	r1, r3, r2
 800ecc0:	9b08      	ldr	r3, [sp, #32]
 800ecc2:	430b      	orrs	r3, r1
 800ecc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecc6:	d10d      	bne.n	800ece4 <_dtoa_r+0x9a4>
 800ecc8:	2b39      	cmp	r3, #57	; 0x39
 800ecca:	d029      	beq.n	800ed20 <_dtoa_r+0x9e0>
 800eccc:	f1ba 0f00 	cmp.w	sl, #0
 800ecd0:	dd01      	ble.n	800ecd6 <_dtoa_r+0x996>
 800ecd2:	9b06      	ldr	r3, [sp, #24]
 800ecd4:	3331      	adds	r3, #49	; 0x31
 800ecd6:	9a02      	ldr	r2, [sp, #8]
 800ecd8:	7013      	strb	r3, [r2, #0]
 800ecda:	e774      	b.n	800ebc6 <_dtoa_r+0x886>
 800ecdc:	4638      	mov	r0, r7
 800ecde:	e7b8      	b.n	800ec52 <_dtoa_r+0x912>
 800ece0:	2201      	movs	r2, #1
 800ece2:	e7e1      	b.n	800eca8 <_dtoa_r+0x968>
 800ece4:	f1ba 0f00 	cmp.w	sl, #0
 800ece8:	db06      	blt.n	800ecf8 <_dtoa_r+0x9b8>
 800ecea:	9907      	ldr	r1, [sp, #28]
 800ecec:	ea41 0a0a 	orr.w	sl, r1, sl
 800ecf0:	9908      	ldr	r1, [sp, #32]
 800ecf2:	ea5a 0101 	orrs.w	r1, sl, r1
 800ecf6:	d120      	bne.n	800ed3a <_dtoa_r+0x9fa>
 800ecf8:	2a00      	cmp	r2, #0
 800ecfa:	ddec      	ble.n	800ecd6 <_dtoa_r+0x996>
 800ecfc:	4629      	mov	r1, r5
 800ecfe:	2201      	movs	r2, #1
 800ed00:	4630      	mov	r0, r6
 800ed02:	9305      	str	r3, [sp, #20]
 800ed04:	f000 fcee 	bl	800f6e4 <__lshift>
 800ed08:	4621      	mov	r1, r4
 800ed0a:	4605      	mov	r5, r0
 800ed0c:	f000 fd56 	bl	800f7bc <__mcmp>
 800ed10:	2800      	cmp	r0, #0
 800ed12:	9b05      	ldr	r3, [sp, #20]
 800ed14:	dc02      	bgt.n	800ed1c <_dtoa_r+0x9dc>
 800ed16:	d1de      	bne.n	800ecd6 <_dtoa_r+0x996>
 800ed18:	07da      	lsls	r2, r3, #31
 800ed1a:	d5dc      	bpl.n	800ecd6 <_dtoa_r+0x996>
 800ed1c:	2b39      	cmp	r3, #57	; 0x39
 800ed1e:	d1d8      	bne.n	800ecd2 <_dtoa_r+0x992>
 800ed20:	9a02      	ldr	r2, [sp, #8]
 800ed22:	2339      	movs	r3, #57	; 0x39
 800ed24:	7013      	strb	r3, [r2, #0]
 800ed26:	4643      	mov	r3, r8
 800ed28:	4698      	mov	r8, r3
 800ed2a:	3b01      	subs	r3, #1
 800ed2c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800ed30:	2a39      	cmp	r2, #57	; 0x39
 800ed32:	d051      	beq.n	800edd8 <_dtoa_r+0xa98>
 800ed34:	3201      	adds	r2, #1
 800ed36:	701a      	strb	r2, [r3, #0]
 800ed38:	e745      	b.n	800ebc6 <_dtoa_r+0x886>
 800ed3a:	2a00      	cmp	r2, #0
 800ed3c:	dd03      	ble.n	800ed46 <_dtoa_r+0xa06>
 800ed3e:	2b39      	cmp	r3, #57	; 0x39
 800ed40:	d0ee      	beq.n	800ed20 <_dtoa_r+0x9e0>
 800ed42:	3301      	adds	r3, #1
 800ed44:	e7c7      	b.n	800ecd6 <_dtoa_r+0x996>
 800ed46:	9a05      	ldr	r2, [sp, #20]
 800ed48:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ed4a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ed4e:	428a      	cmp	r2, r1
 800ed50:	d02b      	beq.n	800edaa <_dtoa_r+0xa6a>
 800ed52:	4629      	mov	r1, r5
 800ed54:	2300      	movs	r3, #0
 800ed56:	220a      	movs	r2, #10
 800ed58:	4630      	mov	r0, r6
 800ed5a:	f000 fb13 	bl	800f384 <__multadd>
 800ed5e:	45b9      	cmp	r9, r7
 800ed60:	4605      	mov	r5, r0
 800ed62:	f04f 0300 	mov.w	r3, #0
 800ed66:	f04f 020a 	mov.w	r2, #10
 800ed6a:	4649      	mov	r1, r9
 800ed6c:	4630      	mov	r0, r6
 800ed6e:	d107      	bne.n	800ed80 <_dtoa_r+0xa40>
 800ed70:	f000 fb08 	bl	800f384 <__multadd>
 800ed74:	4681      	mov	r9, r0
 800ed76:	4607      	mov	r7, r0
 800ed78:	9b05      	ldr	r3, [sp, #20]
 800ed7a:	3301      	adds	r3, #1
 800ed7c:	9305      	str	r3, [sp, #20]
 800ed7e:	e774      	b.n	800ec6a <_dtoa_r+0x92a>
 800ed80:	f000 fb00 	bl	800f384 <__multadd>
 800ed84:	4639      	mov	r1, r7
 800ed86:	4681      	mov	r9, r0
 800ed88:	2300      	movs	r3, #0
 800ed8a:	220a      	movs	r2, #10
 800ed8c:	4630      	mov	r0, r6
 800ed8e:	f000 faf9 	bl	800f384 <__multadd>
 800ed92:	4607      	mov	r7, r0
 800ed94:	e7f0      	b.n	800ed78 <_dtoa_r+0xa38>
 800ed96:	f1ba 0f00 	cmp.w	sl, #0
 800ed9a:	9a00      	ldr	r2, [sp, #0]
 800ed9c:	bfcc      	ite	gt
 800ed9e:	46d0      	movgt	r8, sl
 800eda0:	f04f 0801 	movle.w	r8, #1
 800eda4:	4490      	add	r8, r2
 800eda6:	f04f 0900 	mov.w	r9, #0
 800edaa:	4629      	mov	r1, r5
 800edac:	2201      	movs	r2, #1
 800edae:	4630      	mov	r0, r6
 800edb0:	9302      	str	r3, [sp, #8]
 800edb2:	f000 fc97 	bl	800f6e4 <__lshift>
 800edb6:	4621      	mov	r1, r4
 800edb8:	4605      	mov	r5, r0
 800edba:	f000 fcff 	bl	800f7bc <__mcmp>
 800edbe:	2800      	cmp	r0, #0
 800edc0:	dcb1      	bgt.n	800ed26 <_dtoa_r+0x9e6>
 800edc2:	d102      	bne.n	800edca <_dtoa_r+0xa8a>
 800edc4:	9b02      	ldr	r3, [sp, #8]
 800edc6:	07db      	lsls	r3, r3, #31
 800edc8:	d4ad      	bmi.n	800ed26 <_dtoa_r+0x9e6>
 800edca:	4643      	mov	r3, r8
 800edcc:	4698      	mov	r8, r3
 800edce:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800edd2:	2a30      	cmp	r2, #48	; 0x30
 800edd4:	d0fa      	beq.n	800edcc <_dtoa_r+0xa8c>
 800edd6:	e6f6      	b.n	800ebc6 <_dtoa_r+0x886>
 800edd8:	9a00      	ldr	r2, [sp, #0]
 800edda:	429a      	cmp	r2, r3
 800eddc:	d1a4      	bne.n	800ed28 <_dtoa_r+0x9e8>
 800edde:	f10b 0b01 	add.w	fp, fp, #1
 800ede2:	2331      	movs	r3, #49	; 0x31
 800ede4:	e778      	b.n	800ecd8 <_dtoa_r+0x998>
 800ede6:	4b15      	ldr	r3, [pc, #84]	; (800ee3c <_dtoa_r+0xafc>)
 800ede8:	f7ff bb12 	b.w	800e410 <_dtoa_r+0xd0>
 800edec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800edee:	2b00      	cmp	r3, #0
 800edf0:	f47f aaee 	bne.w	800e3d0 <_dtoa_r+0x90>
 800edf4:	4b12      	ldr	r3, [pc, #72]	; (800ee40 <_dtoa_r+0xb00>)
 800edf6:	f7ff bb0b 	b.w	800e410 <_dtoa_r+0xd0>
 800edfa:	f1ba 0f00 	cmp.w	sl, #0
 800edfe:	dc03      	bgt.n	800ee08 <_dtoa_r+0xac8>
 800ee00:	9b07      	ldr	r3, [sp, #28]
 800ee02:	2b02      	cmp	r3, #2
 800ee04:	f73f aec7 	bgt.w	800eb96 <_dtoa_r+0x856>
 800ee08:	f8dd 8000 	ldr.w	r8, [sp]
 800ee0c:	4621      	mov	r1, r4
 800ee0e:	4628      	mov	r0, r5
 800ee10:	f7ff fa08 	bl	800e224 <quorem>
 800ee14:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ee18:	f808 3b01 	strb.w	r3, [r8], #1
 800ee1c:	9a00      	ldr	r2, [sp, #0]
 800ee1e:	eba8 0202 	sub.w	r2, r8, r2
 800ee22:	4592      	cmp	sl, r2
 800ee24:	ddb7      	ble.n	800ed96 <_dtoa_r+0xa56>
 800ee26:	4629      	mov	r1, r5
 800ee28:	2300      	movs	r3, #0
 800ee2a:	220a      	movs	r2, #10
 800ee2c:	4630      	mov	r0, r6
 800ee2e:	f000 faa9 	bl	800f384 <__multadd>
 800ee32:	4605      	mov	r5, r0
 800ee34:	e7ea      	b.n	800ee0c <_dtoa_r+0xacc>
 800ee36:	bf00      	nop
 800ee38:	0801004b 	.word	0x0801004b
 800ee3c:	0800ffa4 	.word	0x0800ffa4
 800ee40:	0800ffc8 	.word	0x0800ffc8

0800ee44 <__sflush_r>:
 800ee44:	898a      	ldrh	r2, [r1, #12]
 800ee46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee4a:	4605      	mov	r5, r0
 800ee4c:	0710      	lsls	r0, r2, #28
 800ee4e:	460c      	mov	r4, r1
 800ee50:	d458      	bmi.n	800ef04 <__sflush_r+0xc0>
 800ee52:	684b      	ldr	r3, [r1, #4]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	dc05      	bgt.n	800ee64 <__sflush_r+0x20>
 800ee58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	dc02      	bgt.n	800ee64 <__sflush_r+0x20>
 800ee5e:	2000      	movs	r0, #0
 800ee60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ee66:	2e00      	cmp	r6, #0
 800ee68:	d0f9      	beq.n	800ee5e <__sflush_r+0x1a>
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ee70:	682f      	ldr	r7, [r5, #0]
 800ee72:	602b      	str	r3, [r5, #0]
 800ee74:	d032      	beq.n	800eedc <__sflush_r+0x98>
 800ee76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ee78:	89a3      	ldrh	r3, [r4, #12]
 800ee7a:	075a      	lsls	r2, r3, #29
 800ee7c:	d505      	bpl.n	800ee8a <__sflush_r+0x46>
 800ee7e:	6863      	ldr	r3, [r4, #4]
 800ee80:	1ac0      	subs	r0, r0, r3
 800ee82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ee84:	b10b      	cbz	r3, 800ee8a <__sflush_r+0x46>
 800ee86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ee88:	1ac0      	subs	r0, r0, r3
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	4602      	mov	r2, r0
 800ee8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ee90:	6a21      	ldr	r1, [r4, #32]
 800ee92:	4628      	mov	r0, r5
 800ee94:	47b0      	blx	r6
 800ee96:	1c43      	adds	r3, r0, #1
 800ee98:	89a3      	ldrh	r3, [r4, #12]
 800ee9a:	d106      	bne.n	800eeaa <__sflush_r+0x66>
 800ee9c:	6829      	ldr	r1, [r5, #0]
 800ee9e:	291d      	cmp	r1, #29
 800eea0:	d82c      	bhi.n	800eefc <__sflush_r+0xb8>
 800eea2:	4a2a      	ldr	r2, [pc, #168]	; (800ef4c <__sflush_r+0x108>)
 800eea4:	40ca      	lsrs	r2, r1
 800eea6:	07d6      	lsls	r6, r2, #31
 800eea8:	d528      	bpl.n	800eefc <__sflush_r+0xb8>
 800eeaa:	2200      	movs	r2, #0
 800eeac:	6062      	str	r2, [r4, #4]
 800eeae:	04d9      	lsls	r1, r3, #19
 800eeb0:	6922      	ldr	r2, [r4, #16]
 800eeb2:	6022      	str	r2, [r4, #0]
 800eeb4:	d504      	bpl.n	800eec0 <__sflush_r+0x7c>
 800eeb6:	1c42      	adds	r2, r0, #1
 800eeb8:	d101      	bne.n	800eebe <__sflush_r+0x7a>
 800eeba:	682b      	ldr	r3, [r5, #0]
 800eebc:	b903      	cbnz	r3, 800eec0 <__sflush_r+0x7c>
 800eebe:	6560      	str	r0, [r4, #84]	; 0x54
 800eec0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eec2:	602f      	str	r7, [r5, #0]
 800eec4:	2900      	cmp	r1, #0
 800eec6:	d0ca      	beq.n	800ee5e <__sflush_r+0x1a>
 800eec8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eecc:	4299      	cmp	r1, r3
 800eece:	d002      	beq.n	800eed6 <__sflush_r+0x92>
 800eed0:	4628      	mov	r0, r5
 800eed2:	f7fe fbeb 	bl	800d6ac <_free_r>
 800eed6:	2000      	movs	r0, #0
 800eed8:	6360      	str	r0, [r4, #52]	; 0x34
 800eeda:	e7c1      	b.n	800ee60 <__sflush_r+0x1c>
 800eedc:	6a21      	ldr	r1, [r4, #32]
 800eede:	2301      	movs	r3, #1
 800eee0:	4628      	mov	r0, r5
 800eee2:	47b0      	blx	r6
 800eee4:	1c41      	adds	r1, r0, #1
 800eee6:	d1c7      	bne.n	800ee78 <__sflush_r+0x34>
 800eee8:	682b      	ldr	r3, [r5, #0]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d0c4      	beq.n	800ee78 <__sflush_r+0x34>
 800eeee:	2b1d      	cmp	r3, #29
 800eef0:	d001      	beq.n	800eef6 <__sflush_r+0xb2>
 800eef2:	2b16      	cmp	r3, #22
 800eef4:	d101      	bne.n	800eefa <__sflush_r+0xb6>
 800eef6:	602f      	str	r7, [r5, #0]
 800eef8:	e7b1      	b.n	800ee5e <__sflush_r+0x1a>
 800eefa:	89a3      	ldrh	r3, [r4, #12]
 800eefc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef00:	81a3      	strh	r3, [r4, #12]
 800ef02:	e7ad      	b.n	800ee60 <__sflush_r+0x1c>
 800ef04:	690f      	ldr	r7, [r1, #16]
 800ef06:	2f00      	cmp	r7, #0
 800ef08:	d0a9      	beq.n	800ee5e <__sflush_r+0x1a>
 800ef0a:	0793      	lsls	r3, r2, #30
 800ef0c:	680e      	ldr	r6, [r1, #0]
 800ef0e:	bf08      	it	eq
 800ef10:	694b      	ldreq	r3, [r1, #20]
 800ef12:	600f      	str	r7, [r1, #0]
 800ef14:	bf18      	it	ne
 800ef16:	2300      	movne	r3, #0
 800ef18:	eba6 0807 	sub.w	r8, r6, r7
 800ef1c:	608b      	str	r3, [r1, #8]
 800ef1e:	f1b8 0f00 	cmp.w	r8, #0
 800ef22:	dd9c      	ble.n	800ee5e <__sflush_r+0x1a>
 800ef24:	6a21      	ldr	r1, [r4, #32]
 800ef26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ef28:	4643      	mov	r3, r8
 800ef2a:	463a      	mov	r2, r7
 800ef2c:	4628      	mov	r0, r5
 800ef2e:	47b0      	blx	r6
 800ef30:	2800      	cmp	r0, #0
 800ef32:	dc06      	bgt.n	800ef42 <__sflush_r+0xfe>
 800ef34:	89a3      	ldrh	r3, [r4, #12]
 800ef36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef3a:	81a3      	strh	r3, [r4, #12]
 800ef3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ef40:	e78e      	b.n	800ee60 <__sflush_r+0x1c>
 800ef42:	4407      	add	r7, r0
 800ef44:	eba8 0800 	sub.w	r8, r8, r0
 800ef48:	e7e9      	b.n	800ef1e <__sflush_r+0xda>
 800ef4a:	bf00      	nop
 800ef4c:	20400001 	.word	0x20400001

0800ef50 <_fflush_r>:
 800ef50:	b538      	push	{r3, r4, r5, lr}
 800ef52:	690b      	ldr	r3, [r1, #16]
 800ef54:	4605      	mov	r5, r0
 800ef56:	460c      	mov	r4, r1
 800ef58:	b913      	cbnz	r3, 800ef60 <_fflush_r+0x10>
 800ef5a:	2500      	movs	r5, #0
 800ef5c:	4628      	mov	r0, r5
 800ef5e:	bd38      	pop	{r3, r4, r5, pc}
 800ef60:	b118      	cbz	r0, 800ef6a <_fflush_r+0x1a>
 800ef62:	6983      	ldr	r3, [r0, #24]
 800ef64:	b90b      	cbnz	r3, 800ef6a <_fflush_r+0x1a>
 800ef66:	f000 f887 	bl	800f078 <__sinit>
 800ef6a:	4b14      	ldr	r3, [pc, #80]	; (800efbc <_fflush_r+0x6c>)
 800ef6c:	429c      	cmp	r4, r3
 800ef6e:	d11b      	bne.n	800efa8 <_fflush_r+0x58>
 800ef70:	686c      	ldr	r4, [r5, #4]
 800ef72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d0ef      	beq.n	800ef5a <_fflush_r+0xa>
 800ef7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ef7c:	07d0      	lsls	r0, r2, #31
 800ef7e:	d404      	bmi.n	800ef8a <_fflush_r+0x3a>
 800ef80:	0599      	lsls	r1, r3, #22
 800ef82:	d402      	bmi.n	800ef8a <_fflush_r+0x3a>
 800ef84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ef86:	f000 f91a 	bl	800f1be <__retarget_lock_acquire_recursive>
 800ef8a:	4628      	mov	r0, r5
 800ef8c:	4621      	mov	r1, r4
 800ef8e:	f7ff ff59 	bl	800ee44 <__sflush_r>
 800ef92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ef94:	07da      	lsls	r2, r3, #31
 800ef96:	4605      	mov	r5, r0
 800ef98:	d4e0      	bmi.n	800ef5c <_fflush_r+0xc>
 800ef9a:	89a3      	ldrh	r3, [r4, #12]
 800ef9c:	059b      	lsls	r3, r3, #22
 800ef9e:	d4dd      	bmi.n	800ef5c <_fflush_r+0xc>
 800efa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800efa2:	f000 f90d 	bl	800f1c0 <__retarget_lock_release_recursive>
 800efa6:	e7d9      	b.n	800ef5c <_fflush_r+0xc>
 800efa8:	4b05      	ldr	r3, [pc, #20]	; (800efc0 <_fflush_r+0x70>)
 800efaa:	429c      	cmp	r4, r3
 800efac:	d101      	bne.n	800efb2 <_fflush_r+0x62>
 800efae:	68ac      	ldr	r4, [r5, #8]
 800efb0:	e7df      	b.n	800ef72 <_fflush_r+0x22>
 800efb2:	4b04      	ldr	r3, [pc, #16]	; (800efc4 <_fflush_r+0x74>)
 800efb4:	429c      	cmp	r4, r3
 800efb6:	bf08      	it	eq
 800efb8:	68ec      	ldreq	r4, [r5, #12]
 800efba:	e7da      	b.n	800ef72 <_fflush_r+0x22>
 800efbc:	0801007c 	.word	0x0801007c
 800efc0:	0801009c 	.word	0x0801009c
 800efc4:	0801005c 	.word	0x0801005c

0800efc8 <std>:
 800efc8:	2300      	movs	r3, #0
 800efca:	b510      	push	{r4, lr}
 800efcc:	4604      	mov	r4, r0
 800efce:	e9c0 3300 	strd	r3, r3, [r0]
 800efd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800efd6:	6083      	str	r3, [r0, #8]
 800efd8:	8181      	strh	r1, [r0, #12]
 800efda:	6643      	str	r3, [r0, #100]	; 0x64
 800efdc:	81c2      	strh	r2, [r0, #14]
 800efde:	6183      	str	r3, [r0, #24]
 800efe0:	4619      	mov	r1, r3
 800efe2:	2208      	movs	r2, #8
 800efe4:	305c      	adds	r0, #92	; 0x5c
 800efe6:	f7fe fb59 	bl	800d69c <memset>
 800efea:	4b05      	ldr	r3, [pc, #20]	; (800f000 <std+0x38>)
 800efec:	6263      	str	r3, [r4, #36]	; 0x24
 800efee:	4b05      	ldr	r3, [pc, #20]	; (800f004 <std+0x3c>)
 800eff0:	62a3      	str	r3, [r4, #40]	; 0x28
 800eff2:	4b05      	ldr	r3, [pc, #20]	; (800f008 <std+0x40>)
 800eff4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eff6:	4b05      	ldr	r3, [pc, #20]	; (800f00c <std+0x44>)
 800eff8:	6224      	str	r4, [r4, #32]
 800effa:	6323      	str	r3, [r4, #48]	; 0x30
 800effc:	bd10      	pop	{r4, pc}
 800effe:	bf00      	nop
 800f000:	0800fc8d 	.word	0x0800fc8d
 800f004:	0800fcaf 	.word	0x0800fcaf
 800f008:	0800fce7 	.word	0x0800fce7
 800f00c:	0800fd0b 	.word	0x0800fd0b

0800f010 <_cleanup_r>:
 800f010:	4901      	ldr	r1, [pc, #4]	; (800f018 <_cleanup_r+0x8>)
 800f012:	f000 b8af 	b.w	800f174 <_fwalk_reent>
 800f016:	bf00      	nop
 800f018:	0800ef51 	.word	0x0800ef51

0800f01c <__sfmoreglue>:
 800f01c:	b570      	push	{r4, r5, r6, lr}
 800f01e:	1e4a      	subs	r2, r1, #1
 800f020:	2568      	movs	r5, #104	; 0x68
 800f022:	4355      	muls	r5, r2
 800f024:	460e      	mov	r6, r1
 800f026:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f02a:	f7fe fb8f 	bl	800d74c <_malloc_r>
 800f02e:	4604      	mov	r4, r0
 800f030:	b140      	cbz	r0, 800f044 <__sfmoreglue+0x28>
 800f032:	2100      	movs	r1, #0
 800f034:	e9c0 1600 	strd	r1, r6, [r0]
 800f038:	300c      	adds	r0, #12
 800f03a:	60a0      	str	r0, [r4, #8]
 800f03c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f040:	f7fe fb2c 	bl	800d69c <memset>
 800f044:	4620      	mov	r0, r4
 800f046:	bd70      	pop	{r4, r5, r6, pc}

0800f048 <__sfp_lock_acquire>:
 800f048:	4801      	ldr	r0, [pc, #4]	; (800f050 <__sfp_lock_acquire+0x8>)
 800f04a:	f000 b8b8 	b.w	800f1be <__retarget_lock_acquire_recursive>
 800f04e:	bf00      	nop
 800f050:	240064cc 	.word	0x240064cc

0800f054 <__sfp_lock_release>:
 800f054:	4801      	ldr	r0, [pc, #4]	; (800f05c <__sfp_lock_release+0x8>)
 800f056:	f000 b8b3 	b.w	800f1c0 <__retarget_lock_release_recursive>
 800f05a:	bf00      	nop
 800f05c:	240064cc 	.word	0x240064cc

0800f060 <__sinit_lock_acquire>:
 800f060:	4801      	ldr	r0, [pc, #4]	; (800f068 <__sinit_lock_acquire+0x8>)
 800f062:	f000 b8ac 	b.w	800f1be <__retarget_lock_acquire_recursive>
 800f066:	bf00      	nop
 800f068:	240064c7 	.word	0x240064c7

0800f06c <__sinit_lock_release>:
 800f06c:	4801      	ldr	r0, [pc, #4]	; (800f074 <__sinit_lock_release+0x8>)
 800f06e:	f000 b8a7 	b.w	800f1c0 <__retarget_lock_release_recursive>
 800f072:	bf00      	nop
 800f074:	240064c7 	.word	0x240064c7

0800f078 <__sinit>:
 800f078:	b510      	push	{r4, lr}
 800f07a:	4604      	mov	r4, r0
 800f07c:	f7ff fff0 	bl	800f060 <__sinit_lock_acquire>
 800f080:	69a3      	ldr	r3, [r4, #24]
 800f082:	b11b      	cbz	r3, 800f08c <__sinit+0x14>
 800f084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f088:	f7ff bff0 	b.w	800f06c <__sinit_lock_release>
 800f08c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f090:	6523      	str	r3, [r4, #80]	; 0x50
 800f092:	4b13      	ldr	r3, [pc, #76]	; (800f0e0 <__sinit+0x68>)
 800f094:	4a13      	ldr	r2, [pc, #76]	; (800f0e4 <__sinit+0x6c>)
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	62a2      	str	r2, [r4, #40]	; 0x28
 800f09a:	42a3      	cmp	r3, r4
 800f09c:	bf04      	itt	eq
 800f09e:	2301      	moveq	r3, #1
 800f0a0:	61a3      	streq	r3, [r4, #24]
 800f0a2:	4620      	mov	r0, r4
 800f0a4:	f000 f820 	bl	800f0e8 <__sfp>
 800f0a8:	6060      	str	r0, [r4, #4]
 800f0aa:	4620      	mov	r0, r4
 800f0ac:	f000 f81c 	bl	800f0e8 <__sfp>
 800f0b0:	60a0      	str	r0, [r4, #8]
 800f0b2:	4620      	mov	r0, r4
 800f0b4:	f000 f818 	bl	800f0e8 <__sfp>
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	60e0      	str	r0, [r4, #12]
 800f0bc:	2104      	movs	r1, #4
 800f0be:	6860      	ldr	r0, [r4, #4]
 800f0c0:	f7ff ff82 	bl	800efc8 <std>
 800f0c4:	68a0      	ldr	r0, [r4, #8]
 800f0c6:	2201      	movs	r2, #1
 800f0c8:	2109      	movs	r1, #9
 800f0ca:	f7ff ff7d 	bl	800efc8 <std>
 800f0ce:	68e0      	ldr	r0, [r4, #12]
 800f0d0:	2202      	movs	r2, #2
 800f0d2:	2112      	movs	r1, #18
 800f0d4:	f7ff ff78 	bl	800efc8 <std>
 800f0d8:	2301      	movs	r3, #1
 800f0da:	61a3      	str	r3, [r4, #24]
 800f0dc:	e7d2      	b.n	800f084 <__sinit+0xc>
 800f0de:	bf00      	nop
 800f0e0:	0800ff90 	.word	0x0800ff90
 800f0e4:	0800f011 	.word	0x0800f011

0800f0e8 <__sfp>:
 800f0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0ea:	4607      	mov	r7, r0
 800f0ec:	f7ff ffac 	bl	800f048 <__sfp_lock_acquire>
 800f0f0:	4b1e      	ldr	r3, [pc, #120]	; (800f16c <__sfp+0x84>)
 800f0f2:	681e      	ldr	r6, [r3, #0]
 800f0f4:	69b3      	ldr	r3, [r6, #24]
 800f0f6:	b913      	cbnz	r3, 800f0fe <__sfp+0x16>
 800f0f8:	4630      	mov	r0, r6
 800f0fa:	f7ff ffbd 	bl	800f078 <__sinit>
 800f0fe:	3648      	adds	r6, #72	; 0x48
 800f100:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f104:	3b01      	subs	r3, #1
 800f106:	d503      	bpl.n	800f110 <__sfp+0x28>
 800f108:	6833      	ldr	r3, [r6, #0]
 800f10a:	b30b      	cbz	r3, 800f150 <__sfp+0x68>
 800f10c:	6836      	ldr	r6, [r6, #0]
 800f10e:	e7f7      	b.n	800f100 <__sfp+0x18>
 800f110:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f114:	b9d5      	cbnz	r5, 800f14c <__sfp+0x64>
 800f116:	4b16      	ldr	r3, [pc, #88]	; (800f170 <__sfp+0x88>)
 800f118:	60e3      	str	r3, [r4, #12]
 800f11a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f11e:	6665      	str	r5, [r4, #100]	; 0x64
 800f120:	f000 f84c 	bl	800f1bc <__retarget_lock_init_recursive>
 800f124:	f7ff ff96 	bl	800f054 <__sfp_lock_release>
 800f128:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f12c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f130:	6025      	str	r5, [r4, #0]
 800f132:	61a5      	str	r5, [r4, #24]
 800f134:	2208      	movs	r2, #8
 800f136:	4629      	mov	r1, r5
 800f138:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f13c:	f7fe faae 	bl	800d69c <memset>
 800f140:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f144:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f148:	4620      	mov	r0, r4
 800f14a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f14c:	3468      	adds	r4, #104	; 0x68
 800f14e:	e7d9      	b.n	800f104 <__sfp+0x1c>
 800f150:	2104      	movs	r1, #4
 800f152:	4638      	mov	r0, r7
 800f154:	f7ff ff62 	bl	800f01c <__sfmoreglue>
 800f158:	4604      	mov	r4, r0
 800f15a:	6030      	str	r0, [r6, #0]
 800f15c:	2800      	cmp	r0, #0
 800f15e:	d1d5      	bne.n	800f10c <__sfp+0x24>
 800f160:	f7ff ff78 	bl	800f054 <__sfp_lock_release>
 800f164:	230c      	movs	r3, #12
 800f166:	603b      	str	r3, [r7, #0]
 800f168:	e7ee      	b.n	800f148 <__sfp+0x60>
 800f16a:	bf00      	nop
 800f16c:	0800ff90 	.word	0x0800ff90
 800f170:	ffff0001 	.word	0xffff0001

0800f174 <_fwalk_reent>:
 800f174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f178:	4606      	mov	r6, r0
 800f17a:	4688      	mov	r8, r1
 800f17c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f180:	2700      	movs	r7, #0
 800f182:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f186:	f1b9 0901 	subs.w	r9, r9, #1
 800f18a:	d505      	bpl.n	800f198 <_fwalk_reent+0x24>
 800f18c:	6824      	ldr	r4, [r4, #0]
 800f18e:	2c00      	cmp	r4, #0
 800f190:	d1f7      	bne.n	800f182 <_fwalk_reent+0xe>
 800f192:	4638      	mov	r0, r7
 800f194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f198:	89ab      	ldrh	r3, [r5, #12]
 800f19a:	2b01      	cmp	r3, #1
 800f19c:	d907      	bls.n	800f1ae <_fwalk_reent+0x3a>
 800f19e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f1a2:	3301      	adds	r3, #1
 800f1a4:	d003      	beq.n	800f1ae <_fwalk_reent+0x3a>
 800f1a6:	4629      	mov	r1, r5
 800f1a8:	4630      	mov	r0, r6
 800f1aa:	47c0      	blx	r8
 800f1ac:	4307      	orrs	r7, r0
 800f1ae:	3568      	adds	r5, #104	; 0x68
 800f1b0:	e7e9      	b.n	800f186 <_fwalk_reent+0x12>
	...

0800f1b4 <_localeconv_r>:
 800f1b4:	4800      	ldr	r0, [pc, #0]	; (800f1b8 <_localeconv_r+0x4>)
 800f1b6:	4770      	bx	lr
 800f1b8:	24003564 	.word	0x24003564

0800f1bc <__retarget_lock_init_recursive>:
 800f1bc:	4770      	bx	lr

0800f1be <__retarget_lock_acquire_recursive>:
 800f1be:	4770      	bx	lr

0800f1c0 <__retarget_lock_release_recursive>:
 800f1c0:	4770      	bx	lr

0800f1c2 <__swhatbuf_r>:
 800f1c2:	b570      	push	{r4, r5, r6, lr}
 800f1c4:	460e      	mov	r6, r1
 800f1c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1ca:	2900      	cmp	r1, #0
 800f1cc:	b096      	sub	sp, #88	; 0x58
 800f1ce:	4614      	mov	r4, r2
 800f1d0:	461d      	mov	r5, r3
 800f1d2:	da07      	bge.n	800f1e4 <__swhatbuf_r+0x22>
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	602b      	str	r3, [r5, #0]
 800f1d8:	89b3      	ldrh	r3, [r6, #12]
 800f1da:	061a      	lsls	r2, r3, #24
 800f1dc:	d410      	bmi.n	800f200 <__swhatbuf_r+0x3e>
 800f1de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f1e2:	e00e      	b.n	800f202 <__swhatbuf_r+0x40>
 800f1e4:	466a      	mov	r2, sp
 800f1e6:	f000 fde7 	bl	800fdb8 <_fstat_r>
 800f1ea:	2800      	cmp	r0, #0
 800f1ec:	dbf2      	blt.n	800f1d4 <__swhatbuf_r+0x12>
 800f1ee:	9a01      	ldr	r2, [sp, #4]
 800f1f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f1f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f1f8:	425a      	negs	r2, r3
 800f1fa:	415a      	adcs	r2, r3
 800f1fc:	602a      	str	r2, [r5, #0]
 800f1fe:	e7ee      	b.n	800f1de <__swhatbuf_r+0x1c>
 800f200:	2340      	movs	r3, #64	; 0x40
 800f202:	2000      	movs	r0, #0
 800f204:	6023      	str	r3, [r4, #0]
 800f206:	b016      	add	sp, #88	; 0x58
 800f208:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f20c <__smakebuf_r>:
 800f20c:	898b      	ldrh	r3, [r1, #12]
 800f20e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f210:	079d      	lsls	r5, r3, #30
 800f212:	4606      	mov	r6, r0
 800f214:	460c      	mov	r4, r1
 800f216:	d507      	bpl.n	800f228 <__smakebuf_r+0x1c>
 800f218:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f21c:	6023      	str	r3, [r4, #0]
 800f21e:	6123      	str	r3, [r4, #16]
 800f220:	2301      	movs	r3, #1
 800f222:	6163      	str	r3, [r4, #20]
 800f224:	b002      	add	sp, #8
 800f226:	bd70      	pop	{r4, r5, r6, pc}
 800f228:	ab01      	add	r3, sp, #4
 800f22a:	466a      	mov	r2, sp
 800f22c:	f7ff ffc9 	bl	800f1c2 <__swhatbuf_r>
 800f230:	9900      	ldr	r1, [sp, #0]
 800f232:	4605      	mov	r5, r0
 800f234:	4630      	mov	r0, r6
 800f236:	f7fe fa89 	bl	800d74c <_malloc_r>
 800f23a:	b948      	cbnz	r0, 800f250 <__smakebuf_r+0x44>
 800f23c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f240:	059a      	lsls	r2, r3, #22
 800f242:	d4ef      	bmi.n	800f224 <__smakebuf_r+0x18>
 800f244:	f023 0303 	bic.w	r3, r3, #3
 800f248:	f043 0302 	orr.w	r3, r3, #2
 800f24c:	81a3      	strh	r3, [r4, #12]
 800f24e:	e7e3      	b.n	800f218 <__smakebuf_r+0xc>
 800f250:	4b0d      	ldr	r3, [pc, #52]	; (800f288 <__smakebuf_r+0x7c>)
 800f252:	62b3      	str	r3, [r6, #40]	; 0x28
 800f254:	89a3      	ldrh	r3, [r4, #12]
 800f256:	6020      	str	r0, [r4, #0]
 800f258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f25c:	81a3      	strh	r3, [r4, #12]
 800f25e:	9b00      	ldr	r3, [sp, #0]
 800f260:	6163      	str	r3, [r4, #20]
 800f262:	9b01      	ldr	r3, [sp, #4]
 800f264:	6120      	str	r0, [r4, #16]
 800f266:	b15b      	cbz	r3, 800f280 <__smakebuf_r+0x74>
 800f268:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f26c:	4630      	mov	r0, r6
 800f26e:	f000 fdb5 	bl	800fddc <_isatty_r>
 800f272:	b128      	cbz	r0, 800f280 <__smakebuf_r+0x74>
 800f274:	89a3      	ldrh	r3, [r4, #12]
 800f276:	f023 0303 	bic.w	r3, r3, #3
 800f27a:	f043 0301 	orr.w	r3, r3, #1
 800f27e:	81a3      	strh	r3, [r4, #12]
 800f280:	89a0      	ldrh	r0, [r4, #12]
 800f282:	4305      	orrs	r5, r0
 800f284:	81a5      	strh	r5, [r4, #12]
 800f286:	e7cd      	b.n	800f224 <__smakebuf_r+0x18>
 800f288:	0800f011 	.word	0x0800f011

0800f28c <memcpy>:
 800f28c:	440a      	add	r2, r1
 800f28e:	4291      	cmp	r1, r2
 800f290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f294:	d100      	bne.n	800f298 <memcpy+0xc>
 800f296:	4770      	bx	lr
 800f298:	b510      	push	{r4, lr}
 800f29a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f29e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f2a2:	4291      	cmp	r1, r2
 800f2a4:	d1f9      	bne.n	800f29a <memcpy+0xe>
 800f2a6:	bd10      	pop	{r4, pc}

0800f2a8 <__malloc_lock>:
 800f2a8:	4801      	ldr	r0, [pc, #4]	; (800f2b0 <__malloc_lock+0x8>)
 800f2aa:	f7ff bf88 	b.w	800f1be <__retarget_lock_acquire_recursive>
 800f2ae:	bf00      	nop
 800f2b0:	240064c8 	.word	0x240064c8

0800f2b4 <__malloc_unlock>:
 800f2b4:	4801      	ldr	r0, [pc, #4]	; (800f2bc <__malloc_unlock+0x8>)
 800f2b6:	f7ff bf83 	b.w	800f1c0 <__retarget_lock_release_recursive>
 800f2ba:	bf00      	nop
 800f2bc:	240064c8 	.word	0x240064c8

0800f2c0 <_Balloc>:
 800f2c0:	b570      	push	{r4, r5, r6, lr}
 800f2c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f2c4:	4604      	mov	r4, r0
 800f2c6:	460d      	mov	r5, r1
 800f2c8:	b976      	cbnz	r6, 800f2e8 <_Balloc+0x28>
 800f2ca:	2010      	movs	r0, #16
 800f2cc:	f7fe f9de 	bl	800d68c <malloc>
 800f2d0:	4602      	mov	r2, r0
 800f2d2:	6260      	str	r0, [r4, #36]	; 0x24
 800f2d4:	b920      	cbnz	r0, 800f2e0 <_Balloc+0x20>
 800f2d6:	4b18      	ldr	r3, [pc, #96]	; (800f338 <_Balloc+0x78>)
 800f2d8:	4818      	ldr	r0, [pc, #96]	; (800f33c <_Balloc+0x7c>)
 800f2da:	2166      	movs	r1, #102	; 0x66
 800f2dc:	f000 fd2c 	bl	800fd38 <__assert_func>
 800f2e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f2e4:	6006      	str	r6, [r0, #0]
 800f2e6:	60c6      	str	r6, [r0, #12]
 800f2e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f2ea:	68f3      	ldr	r3, [r6, #12]
 800f2ec:	b183      	cbz	r3, 800f310 <_Balloc+0x50>
 800f2ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f2f0:	68db      	ldr	r3, [r3, #12]
 800f2f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f2f6:	b9b8      	cbnz	r0, 800f328 <_Balloc+0x68>
 800f2f8:	2101      	movs	r1, #1
 800f2fa:	fa01 f605 	lsl.w	r6, r1, r5
 800f2fe:	1d72      	adds	r2, r6, #5
 800f300:	0092      	lsls	r2, r2, #2
 800f302:	4620      	mov	r0, r4
 800f304:	f000 fb5a 	bl	800f9bc <_calloc_r>
 800f308:	b160      	cbz	r0, 800f324 <_Balloc+0x64>
 800f30a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f30e:	e00e      	b.n	800f32e <_Balloc+0x6e>
 800f310:	2221      	movs	r2, #33	; 0x21
 800f312:	2104      	movs	r1, #4
 800f314:	4620      	mov	r0, r4
 800f316:	f000 fb51 	bl	800f9bc <_calloc_r>
 800f31a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f31c:	60f0      	str	r0, [r6, #12]
 800f31e:	68db      	ldr	r3, [r3, #12]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d1e4      	bne.n	800f2ee <_Balloc+0x2e>
 800f324:	2000      	movs	r0, #0
 800f326:	bd70      	pop	{r4, r5, r6, pc}
 800f328:	6802      	ldr	r2, [r0, #0]
 800f32a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f32e:	2300      	movs	r3, #0
 800f330:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f334:	e7f7      	b.n	800f326 <_Balloc+0x66>
 800f336:	bf00      	nop
 800f338:	0800ffd5 	.word	0x0800ffd5
 800f33c:	080100bc 	.word	0x080100bc

0800f340 <_Bfree>:
 800f340:	b570      	push	{r4, r5, r6, lr}
 800f342:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f344:	4605      	mov	r5, r0
 800f346:	460c      	mov	r4, r1
 800f348:	b976      	cbnz	r6, 800f368 <_Bfree+0x28>
 800f34a:	2010      	movs	r0, #16
 800f34c:	f7fe f99e 	bl	800d68c <malloc>
 800f350:	4602      	mov	r2, r0
 800f352:	6268      	str	r0, [r5, #36]	; 0x24
 800f354:	b920      	cbnz	r0, 800f360 <_Bfree+0x20>
 800f356:	4b09      	ldr	r3, [pc, #36]	; (800f37c <_Bfree+0x3c>)
 800f358:	4809      	ldr	r0, [pc, #36]	; (800f380 <_Bfree+0x40>)
 800f35a:	218a      	movs	r1, #138	; 0x8a
 800f35c:	f000 fcec 	bl	800fd38 <__assert_func>
 800f360:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f364:	6006      	str	r6, [r0, #0]
 800f366:	60c6      	str	r6, [r0, #12]
 800f368:	b13c      	cbz	r4, 800f37a <_Bfree+0x3a>
 800f36a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f36c:	6862      	ldr	r2, [r4, #4]
 800f36e:	68db      	ldr	r3, [r3, #12]
 800f370:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f374:	6021      	str	r1, [r4, #0]
 800f376:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f37a:	bd70      	pop	{r4, r5, r6, pc}
 800f37c:	0800ffd5 	.word	0x0800ffd5
 800f380:	080100bc 	.word	0x080100bc

0800f384 <__multadd>:
 800f384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f388:	690e      	ldr	r6, [r1, #16]
 800f38a:	4607      	mov	r7, r0
 800f38c:	4698      	mov	r8, r3
 800f38e:	460c      	mov	r4, r1
 800f390:	f101 0014 	add.w	r0, r1, #20
 800f394:	2300      	movs	r3, #0
 800f396:	6805      	ldr	r5, [r0, #0]
 800f398:	b2a9      	uxth	r1, r5
 800f39a:	fb02 8101 	mla	r1, r2, r1, r8
 800f39e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800f3a2:	0c2d      	lsrs	r5, r5, #16
 800f3a4:	fb02 c505 	mla	r5, r2, r5, ip
 800f3a8:	b289      	uxth	r1, r1
 800f3aa:	3301      	adds	r3, #1
 800f3ac:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800f3b0:	429e      	cmp	r6, r3
 800f3b2:	f840 1b04 	str.w	r1, [r0], #4
 800f3b6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800f3ba:	dcec      	bgt.n	800f396 <__multadd+0x12>
 800f3bc:	f1b8 0f00 	cmp.w	r8, #0
 800f3c0:	d022      	beq.n	800f408 <__multadd+0x84>
 800f3c2:	68a3      	ldr	r3, [r4, #8]
 800f3c4:	42b3      	cmp	r3, r6
 800f3c6:	dc19      	bgt.n	800f3fc <__multadd+0x78>
 800f3c8:	6861      	ldr	r1, [r4, #4]
 800f3ca:	4638      	mov	r0, r7
 800f3cc:	3101      	adds	r1, #1
 800f3ce:	f7ff ff77 	bl	800f2c0 <_Balloc>
 800f3d2:	4605      	mov	r5, r0
 800f3d4:	b928      	cbnz	r0, 800f3e2 <__multadd+0x5e>
 800f3d6:	4602      	mov	r2, r0
 800f3d8:	4b0d      	ldr	r3, [pc, #52]	; (800f410 <__multadd+0x8c>)
 800f3da:	480e      	ldr	r0, [pc, #56]	; (800f414 <__multadd+0x90>)
 800f3dc:	21b5      	movs	r1, #181	; 0xb5
 800f3de:	f000 fcab 	bl	800fd38 <__assert_func>
 800f3e2:	6922      	ldr	r2, [r4, #16]
 800f3e4:	3202      	adds	r2, #2
 800f3e6:	f104 010c 	add.w	r1, r4, #12
 800f3ea:	0092      	lsls	r2, r2, #2
 800f3ec:	300c      	adds	r0, #12
 800f3ee:	f7ff ff4d 	bl	800f28c <memcpy>
 800f3f2:	4621      	mov	r1, r4
 800f3f4:	4638      	mov	r0, r7
 800f3f6:	f7ff ffa3 	bl	800f340 <_Bfree>
 800f3fa:	462c      	mov	r4, r5
 800f3fc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800f400:	3601      	adds	r6, #1
 800f402:	f8c3 8014 	str.w	r8, [r3, #20]
 800f406:	6126      	str	r6, [r4, #16]
 800f408:	4620      	mov	r0, r4
 800f40a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f40e:	bf00      	nop
 800f410:	0801004b 	.word	0x0801004b
 800f414:	080100bc 	.word	0x080100bc

0800f418 <__hi0bits>:
 800f418:	0c03      	lsrs	r3, r0, #16
 800f41a:	041b      	lsls	r3, r3, #16
 800f41c:	b9d3      	cbnz	r3, 800f454 <__hi0bits+0x3c>
 800f41e:	0400      	lsls	r0, r0, #16
 800f420:	2310      	movs	r3, #16
 800f422:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f426:	bf04      	itt	eq
 800f428:	0200      	lsleq	r0, r0, #8
 800f42a:	3308      	addeq	r3, #8
 800f42c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f430:	bf04      	itt	eq
 800f432:	0100      	lsleq	r0, r0, #4
 800f434:	3304      	addeq	r3, #4
 800f436:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f43a:	bf04      	itt	eq
 800f43c:	0080      	lsleq	r0, r0, #2
 800f43e:	3302      	addeq	r3, #2
 800f440:	2800      	cmp	r0, #0
 800f442:	db05      	blt.n	800f450 <__hi0bits+0x38>
 800f444:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f448:	f103 0301 	add.w	r3, r3, #1
 800f44c:	bf08      	it	eq
 800f44e:	2320      	moveq	r3, #32
 800f450:	4618      	mov	r0, r3
 800f452:	4770      	bx	lr
 800f454:	2300      	movs	r3, #0
 800f456:	e7e4      	b.n	800f422 <__hi0bits+0xa>

0800f458 <__lo0bits>:
 800f458:	6803      	ldr	r3, [r0, #0]
 800f45a:	f013 0207 	ands.w	r2, r3, #7
 800f45e:	4601      	mov	r1, r0
 800f460:	d00b      	beq.n	800f47a <__lo0bits+0x22>
 800f462:	07da      	lsls	r2, r3, #31
 800f464:	d424      	bmi.n	800f4b0 <__lo0bits+0x58>
 800f466:	0798      	lsls	r0, r3, #30
 800f468:	bf49      	itett	mi
 800f46a:	085b      	lsrmi	r3, r3, #1
 800f46c:	089b      	lsrpl	r3, r3, #2
 800f46e:	2001      	movmi	r0, #1
 800f470:	600b      	strmi	r3, [r1, #0]
 800f472:	bf5c      	itt	pl
 800f474:	600b      	strpl	r3, [r1, #0]
 800f476:	2002      	movpl	r0, #2
 800f478:	4770      	bx	lr
 800f47a:	b298      	uxth	r0, r3
 800f47c:	b9b0      	cbnz	r0, 800f4ac <__lo0bits+0x54>
 800f47e:	0c1b      	lsrs	r3, r3, #16
 800f480:	2010      	movs	r0, #16
 800f482:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f486:	bf04      	itt	eq
 800f488:	0a1b      	lsreq	r3, r3, #8
 800f48a:	3008      	addeq	r0, #8
 800f48c:	071a      	lsls	r2, r3, #28
 800f48e:	bf04      	itt	eq
 800f490:	091b      	lsreq	r3, r3, #4
 800f492:	3004      	addeq	r0, #4
 800f494:	079a      	lsls	r2, r3, #30
 800f496:	bf04      	itt	eq
 800f498:	089b      	lsreq	r3, r3, #2
 800f49a:	3002      	addeq	r0, #2
 800f49c:	07da      	lsls	r2, r3, #31
 800f49e:	d403      	bmi.n	800f4a8 <__lo0bits+0x50>
 800f4a0:	085b      	lsrs	r3, r3, #1
 800f4a2:	f100 0001 	add.w	r0, r0, #1
 800f4a6:	d005      	beq.n	800f4b4 <__lo0bits+0x5c>
 800f4a8:	600b      	str	r3, [r1, #0]
 800f4aa:	4770      	bx	lr
 800f4ac:	4610      	mov	r0, r2
 800f4ae:	e7e8      	b.n	800f482 <__lo0bits+0x2a>
 800f4b0:	2000      	movs	r0, #0
 800f4b2:	4770      	bx	lr
 800f4b4:	2020      	movs	r0, #32
 800f4b6:	4770      	bx	lr

0800f4b8 <__i2b>:
 800f4b8:	b510      	push	{r4, lr}
 800f4ba:	460c      	mov	r4, r1
 800f4bc:	2101      	movs	r1, #1
 800f4be:	f7ff feff 	bl	800f2c0 <_Balloc>
 800f4c2:	4602      	mov	r2, r0
 800f4c4:	b928      	cbnz	r0, 800f4d2 <__i2b+0x1a>
 800f4c6:	4b05      	ldr	r3, [pc, #20]	; (800f4dc <__i2b+0x24>)
 800f4c8:	4805      	ldr	r0, [pc, #20]	; (800f4e0 <__i2b+0x28>)
 800f4ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f4ce:	f000 fc33 	bl	800fd38 <__assert_func>
 800f4d2:	2301      	movs	r3, #1
 800f4d4:	6144      	str	r4, [r0, #20]
 800f4d6:	6103      	str	r3, [r0, #16]
 800f4d8:	bd10      	pop	{r4, pc}
 800f4da:	bf00      	nop
 800f4dc:	0801004b 	.word	0x0801004b
 800f4e0:	080100bc 	.word	0x080100bc

0800f4e4 <__multiply>:
 800f4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4e8:	4614      	mov	r4, r2
 800f4ea:	690a      	ldr	r2, [r1, #16]
 800f4ec:	6923      	ldr	r3, [r4, #16]
 800f4ee:	429a      	cmp	r2, r3
 800f4f0:	bfb8      	it	lt
 800f4f2:	460b      	movlt	r3, r1
 800f4f4:	460d      	mov	r5, r1
 800f4f6:	bfbc      	itt	lt
 800f4f8:	4625      	movlt	r5, r4
 800f4fa:	461c      	movlt	r4, r3
 800f4fc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800f500:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f504:	68ab      	ldr	r3, [r5, #8]
 800f506:	6869      	ldr	r1, [r5, #4]
 800f508:	eb0a 0709 	add.w	r7, sl, r9
 800f50c:	42bb      	cmp	r3, r7
 800f50e:	b085      	sub	sp, #20
 800f510:	bfb8      	it	lt
 800f512:	3101      	addlt	r1, #1
 800f514:	f7ff fed4 	bl	800f2c0 <_Balloc>
 800f518:	b930      	cbnz	r0, 800f528 <__multiply+0x44>
 800f51a:	4602      	mov	r2, r0
 800f51c:	4b42      	ldr	r3, [pc, #264]	; (800f628 <__multiply+0x144>)
 800f51e:	4843      	ldr	r0, [pc, #268]	; (800f62c <__multiply+0x148>)
 800f520:	f240 115d 	movw	r1, #349	; 0x15d
 800f524:	f000 fc08 	bl	800fd38 <__assert_func>
 800f528:	f100 0614 	add.w	r6, r0, #20
 800f52c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800f530:	4633      	mov	r3, r6
 800f532:	2200      	movs	r2, #0
 800f534:	4543      	cmp	r3, r8
 800f536:	d31e      	bcc.n	800f576 <__multiply+0x92>
 800f538:	f105 0c14 	add.w	ip, r5, #20
 800f53c:	f104 0314 	add.w	r3, r4, #20
 800f540:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800f544:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800f548:	9202      	str	r2, [sp, #8]
 800f54a:	ebac 0205 	sub.w	r2, ip, r5
 800f54e:	3a15      	subs	r2, #21
 800f550:	f022 0203 	bic.w	r2, r2, #3
 800f554:	3204      	adds	r2, #4
 800f556:	f105 0115 	add.w	r1, r5, #21
 800f55a:	458c      	cmp	ip, r1
 800f55c:	bf38      	it	cc
 800f55e:	2204      	movcc	r2, #4
 800f560:	9201      	str	r2, [sp, #4]
 800f562:	9a02      	ldr	r2, [sp, #8]
 800f564:	9303      	str	r3, [sp, #12]
 800f566:	429a      	cmp	r2, r3
 800f568:	d808      	bhi.n	800f57c <__multiply+0x98>
 800f56a:	2f00      	cmp	r7, #0
 800f56c:	dc55      	bgt.n	800f61a <__multiply+0x136>
 800f56e:	6107      	str	r7, [r0, #16]
 800f570:	b005      	add	sp, #20
 800f572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f576:	f843 2b04 	str.w	r2, [r3], #4
 800f57a:	e7db      	b.n	800f534 <__multiply+0x50>
 800f57c:	f8b3 a000 	ldrh.w	sl, [r3]
 800f580:	f1ba 0f00 	cmp.w	sl, #0
 800f584:	d020      	beq.n	800f5c8 <__multiply+0xe4>
 800f586:	f105 0e14 	add.w	lr, r5, #20
 800f58a:	46b1      	mov	r9, r6
 800f58c:	2200      	movs	r2, #0
 800f58e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800f592:	f8d9 b000 	ldr.w	fp, [r9]
 800f596:	b2a1      	uxth	r1, r4
 800f598:	fa1f fb8b 	uxth.w	fp, fp
 800f59c:	fb0a b101 	mla	r1, sl, r1, fp
 800f5a0:	4411      	add	r1, r2
 800f5a2:	f8d9 2000 	ldr.w	r2, [r9]
 800f5a6:	0c24      	lsrs	r4, r4, #16
 800f5a8:	0c12      	lsrs	r2, r2, #16
 800f5aa:	fb0a 2404 	mla	r4, sl, r4, r2
 800f5ae:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800f5b2:	b289      	uxth	r1, r1
 800f5b4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800f5b8:	45f4      	cmp	ip, lr
 800f5ba:	f849 1b04 	str.w	r1, [r9], #4
 800f5be:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800f5c2:	d8e4      	bhi.n	800f58e <__multiply+0xaa>
 800f5c4:	9901      	ldr	r1, [sp, #4]
 800f5c6:	5072      	str	r2, [r6, r1]
 800f5c8:	9a03      	ldr	r2, [sp, #12]
 800f5ca:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f5ce:	3304      	adds	r3, #4
 800f5d0:	f1b9 0f00 	cmp.w	r9, #0
 800f5d4:	d01f      	beq.n	800f616 <__multiply+0x132>
 800f5d6:	6834      	ldr	r4, [r6, #0]
 800f5d8:	f105 0114 	add.w	r1, r5, #20
 800f5dc:	46b6      	mov	lr, r6
 800f5de:	f04f 0a00 	mov.w	sl, #0
 800f5e2:	880a      	ldrh	r2, [r1, #0]
 800f5e4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800f5e8:	fb09 b202 	mla	r2, r9, r2, fp
 800f5ec:	4492      	add	sl, r2
 800f5ee:	b2a4      	uxth	r4, r4
 800f5f0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800f5f4:	f84e 4b04 	str.w	r4, [lr], #4
 800f5f8:	f851 4b04 	ldr.w	r4, [r1], #4
 800f5fc:	f8be 2000 	ldrh.w	r2, [lr]
 800f600:	0c24      	lsrs	r4, r4, #16
 800f602:	fb09 2404 	mla	r4, r9, r4, r2
 800f606:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800f60a:	458c      	cmp	ip, r1
 800f60c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f610:	d8e7      	bhi.n	800f5e2 <__multiply+0xfe>
 800f612:	9a01      	ldr	r2, [sp, #4]
 800f614:	50b4      	str	r4, [r6, r2]
 800f616:	3604      	adds	r6, #4
 800f618:	e7a3      	b.n	800f562 <__multiply+0x7e>
 800f61a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d1a5      	bne.n	800f56e <__multiply+0x8a>
 800f622:	3f01      	subs	r7, #1
 800f624:	e7a1      	b.n	800f56a <__multiply+0x86>
 800f626:	bf00      	nop
 800f628:	0801004b 	.word	0x0801004b
 800f62c:	080100bc 	.word	0x080100bc

0800f630 <__pow5mult>:
 800f630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f634:	4615      	mov	r5, r2
 800f636:	f012 0203 	ands.w	r2, r2, #3
 800f63a:	4606      	mov	r6, r0
 800f63c:	460f      	mov	r7, r1
 800f63e:	d007      	beq.n	800f650 <__pow5mult+0x20>
 800f640:	4c25      	ldr	r4, [pc, #148]	; (800f6d8 <__pow5mult+0xa8>)
 800f642:	3a01      	subs	r2, #1
 800f644:	2300      	movs	r3, #0
 800f646:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f64a:	f7ff fe9b 	bl	800f384 <__multadd>
 800f64e:	4607      	mov	r7, r0
 800f650:	10ad      	asrs	r5, r5, #2
 800f652:	d03d      	beq.n	800f6d0 <__pow5mult+0xa0>
 800f654:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f656:	b97c      	cbnz	r4, 800f678 <__pow5mult+0x48>
 800f658:	2010      	movs	r0, #16
 800f65a:	f7fe f817 	bl	800d68c <malloc>
 800f65e:	4602      	mov	r2, r0
 800f660:	6270      	str	r0, [r6, #36]	; 0x24
 800f662:	b928      	cbnz	r0, 800f670 <__pow5mult+0x40>
 800f664:	4b1d      	ldr	r3, [pc, #116]	; (800f6dc <__pow5mult+0xac>)
 800f666:	481e      	ldr	r0, [pc, #120]	; (800f6e0 <__pow5mult+0xb0>)
 800f668:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f66c:	f000 fb64 	bl	800fd38 <__assert_func>
 800f670:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f674:	6004      	str	r4, [r0, #0]
 800f676:	60c4      	str	r4, [r0, #12]
 800f678:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f67c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f680:	b94c      	cbnz	r4, 800f696 <__pow5mult+0x66>
 800f682:	f240 2171 	movw	r1, #625	; 0x271
 800f686:	4630      	mov	r0, r6
 800f688:	f7ff ff16 	bl	800f4b8 <__i2b>
 800f68c:	2300      	movs	r3, #0
 800f68e:	f8c8 0008 	str.w	r0, [r8, #8]
 800f692:	4604      	mov	r4, r0
 800f694:	6003      	str	r3, [r0, #0]
 800f696:	f04f 0900 	mov.w	r9, #0
 800f69a:	07eb      	lsls	r3, r5, #31
 800f69c:	d50a      	bpl.n	800f6b4 <__pow5mult+0x84>
 800f69e:	4639      	mov	r1, r7
 800f6a0:	4622      	mov	r2, r4
 800f6a2:	4630      	mov	r0, r6
 800f6a4:	f7ff ff1e 	bl	800f4e4 <__multiply>
 800f6a8:	4639      	mov	r1, r7
 800f6aa:	4680      	mov	r8, r0
 800f6ac:	4630      	mov	r0, r6
 800f6ae:	f7ff fe47 	bl	800f340 <_Bfree>
 800f6b2:	4647      	mov	r7, r8
 800f6b4:	106d      	asrs	r5, r5, #1
 800f6b6:	d00b      	beq.n	800f6d0 <__pow5mult+0xa0>
 800f6b8:	6820      	ldr	r0, [r4, #0]
 800f6ba:	b938      	cbnz	r0, 800f6cc <__pow5mult+0x9c>
 800f6bc:	4622      	mov	r2, r4
 800f6be:	4621      	mov	r1, r4
 800f6c0:	4630      	mov	r0, r6
 800f6c2:	f7ff ff0f 	bl	800f4e4 <__multiply>
 800f6c6:	6020      	str	r0, [r4, #0]
 800f6c8:	f8c0 9000 	str.w	r9, [r0]
 800f6cc:	4604      	mov	r4, r0
 800f6ce:	e7e4      	b.n	800f69a <__pow5mult+0x6a>
 800f6d0:	4638      	mov	r0, r7
 800f6d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6d6:	bf00      	nop
 800f6d8:	08010210 	.word	0x08010210
 800f6dc:	0800ffd5 	.word	0x0800ffd5
 800f6e0:	080100bc 	.word	0x080100bc

0800f6e4 <__lshift>:
 800f6e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6e8:	460c      	mov	r4, r1
 800f6ea:	6849      	ldr	r1, [r1, #4]
 800f6ec:	6923      	ldr	r3, [r4, #16]
 800f6ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f6f2:	68a3      	ldr	r3, [r4, #8]
 800f6f4:	4607      	mov	r7, r0
 800f6f6:	4691      	mov	r9, r2
 800f6f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f6fc:	f108 0601 	add.w	r6, r8, #1
 800f700:	42b3      	cmp	r3, r6
 800f702:	db0b      	blt.n	800f71c <__lshift+0x38>
 800f704:	4638      	mov	r0, r7
 800f706:	f7ff fddb 	bl	800f2c0 <_Balloc>
 800f70a:	4605      	mov	r5, r0
 800f70c:	b948      	cbnz	r0, 800f722 <__lshift+0x3e>
 800f70e:	4602      	mov	r2, r0
 800f710:	4b28      	ldr	r3, [pc, #160]	; (800f7b4 <__lshift+0xd0>)
 800f712:	4829      	ldr	r0, [pc, #164]	; (800f7b8 <__lshift+0xd4>)
 800f714:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f718:	f000 fb0e 	bl	800fd38 <__assert_func>
 800f71c:	3101      	adds	r1, #1
 800f71e:	005b      	lsls	r3, r3, #1
 800f720:	e7ee      	b.n	800f700 <__lshift+0x1c>
 800f722:	2300      	movs	r3, #0
 800f724:	f100 0114 	add.w	r1, r0, #20
 800f728:	f100 0210 	add.w	r2, r0, #16
 800f72c:	4618      	mov	r0, r3
 800f72e:	4553      	cmp	r3, sl
 800f730:	db33      	blt.n	800f79a <__lshift+0xb6>
 800f732:	6920      	ldr	r0, [r4, #16]
 800f734:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f738:	f104 0314 	add.w	r3, r4, #20
 800f73c:	f019 091f 	ands.w	r9, r9, #31
 800f740:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f744:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f748:	d02b      	beq.n	800f7a2 <__lshift+0xbe>
 800f74a:	f1c9 0e20 	rsb	lr, r9, #32
 800f74e:	468a      	mov	sl, r1
 800f750:	2200      	movs	r2, #0
 800f752:	6818      	ldr	r0, [r3, #0]
 800f754:	fa00 f009 	lsl.w	r0, r0, r9
 800f758:	4302      	orrs	r2, r0
 800f75a:	f84a 2b04 	str.w	r2, [sl], #4
 800f75e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f762:	459c      	cmp	ip, r3
 800f764:	fa22 f20e 	lsr.w	r2, r2, lr
 800f768:	d8f3      	bhi.n	800f752 <__lshift+0x6e>
 800f76a:	ebac 0304 	sub.w	r3, ip, r4
 800f76e:	3b15      	subs	r3, #21
 800f770:	f023 0303 	bic.w	r3, r3, #3
 800f774:	3304      	adds	r3, #4
 800f776:	f104 0015 	add.w	r0, r4, #21
 800f77a:	4584      	cmp	ip, r0
 800f77c:	bf38      	it	cc
 800f77e:	2304      	movcc	r3, #4
 800f780:	50ca      	str	r2, [r1, r3]
 800f782:	b10a      	cbz	r2, 800f788 <__lshift+0xa4>
 800f784:	f108 0602 	add.w	r6, r8, #2
 800f788:	3e01      	subs	r6, #1
 800f78a:	4638      	mov	r0, r7
 800f78c:	612e      	str	r6, [r5, #16]
 800f78e:	4621      	mov	r1, r4
 800f790:	f7ff fdd6 	bl	800f340 <_Bfree>
 800f794:	4628      	mov	r0, r5
 800f796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f79a:	f842 0f04 	str.w	r0, [r2, #4]!
 800f79e:	3301      	adds	r3, #1
 800f7a0:	e7c5      	b.n	800f72e <__lshift+0x4a>
 800f7a2:	3904      	subs	r1, #4
 800f7a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7a8:	f841 2f04 	str.w	r2, [r1, #4]!
 800f7ac:	459c      	cmp	ip, r3
 800f7ae:	d8f9      	bhi.n	800f7a4 <__lshift+0xc0>
 800f7b0:	e7ea      	b.n	800f788 <__lshift+0xa4>
 800f7b2:	bf00      	nop
 800f7b4:	0801004b 	.word	0x0801004b
 800f7b8:	080100bc 	.word	0x080100bc

0800f7bc <__mcmp>:
 800f7bc:	b530      	push	{r4, r5, lr}
 800f7be:	6902      	ldr	r2, [r0, #16]
 800f7c0:	690c      	ldr	r4, [r1, #16]
 800f7c2:	1b12      	subs	r2, r2, r4
 800f7c4:	d10e      	bne.n	800f7e4 <__mcmp+0x28>
 800f7c6:	f100 0314 	add.w	r3, r0, #20
 800f7ca:	3114      	adds	r1, #20
 800f7cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f7d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f7d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f7d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f7dc:	42a5      	cmp	r5, r4
 800f7de:	d003      	beq.n	800f7e8 <__mcmp+0x2c>
 800f7e0:	d305      	bcc.n	800f7ee <__mcmp+0x32>
 800f7e2:	2201      	movs	r2, #1
 800f7e4:	4610      	mov	r0, r2
 800f7e6:	bd30      	pop	{r4, r5, pc}
 800f7e8:	4283      	cmp	r3, r0
 800f7ea:	d3f3      	bcc.n	800f7d4 <__mcmp+0x18>
 800f7ec:	e7fa      	b.n	800f7e4 <__mcmp+0x28>
 800f7ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f7f2:	e7f7      	b.n	800f7e4 <__mcmp+0x28>

0800f7f4 <__mdiff>:
 800f7f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7f8:	460c      	mov	r4, r1
 800f7fa:	4606      	mov	r6, r0
 800f7fc:	4611      	mov	r1, r2
 800f7fe:	4620      	mov	r0, r4
 800f800:	4617      	mov	r7, r2
 800f802:	f7ff ffdb 	bl	800f7bc <__mcmp>
 800f806:	1e05      	subs	r5, r0, #0
 800f808:	d110      	bne.n	800f82c <__mdiff+0x38>
 800f80a:	4629      	mov	r1, r5
 800f80c:	4630      	mov	r0, r6
 800f80e:	f7ff fd57 	bl	800f2c0 <_Balloc>
 800f812:	b930      	cbnz	r0, 800f822 <__mdiff+0x2e>
 800f814:	4b39      	ldr	r3, [pc, #228]	; (800f8fc <__mdiff+0x108>)
 800f816:	4602      	mov	r2, r0
 800f818:	f240 2132 	movw	r1, #562	; 0x232
 800f81c:	4838      	ldr	r0, [pc, #224]	; (800f900 <__mdiff+0x10c>)
 800f81e:	f000 fa8b 	bl	800fd38 <__assert_func>
 800f822:	2301      	movs	r3, #1
 800f824:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f828:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f82c:	bfa4      	itt	ge
 800f82e:	463b      	movge	r3, r7
 800f830:	4627      	movge	r7, r4
 800f832:	4630      	mov	r0, r6
 800f834:	6879      	ldr	r1, [r7, #4]
 800f836:	bfa6      	itte	ge
 800f838:	461c      	movge	r4, r3
 800f83a:	2500      	movge	r5, #0
 800f83c:	2501      	movlt	r5, #1
 800f83e:	f7ff fd3f 	bl	800f2c0 <_Balloc>
 800f842:	b920      	cbnz	r0, 800f84e <__mdiff+0x5a>
 800f844:	4b2d      	ldr	r3, [pc, #180]	; (800f8fc <__mdiff+0x108>)
 800f846:	4602      	mov	r2, r0
 800f848:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f84c:	e7e6      	b.n	800f81c <__mdiff+0x28>
 800f84e:	693e      	ldr	r6, [r7, #16]
 800f850:	60c5      	str	r5, [r0, #12]
 800f852:	6925      	ldr	r5, [r4, #16]
 800f854:	f107 0114 	add.w	r1, r7, #20
 800f858:	f104 0914 	add.w	r9, r4, #20
 800f85c:	f100 0e14 	add.w	lr, r0, #20
 800f860:	f107 0210 	add.w	r2, r7, #16
 800f864:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800f868:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800f86c:	46f2      	mov	sl, lr
 800f86e:	2700      	movs	r7, #0
 800f870:	f859 3b04 	ldr.w	r3, [r9], #4
 800f874:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f878:	fa1f f883 	uxth.w	r8, r3
 800f87c:	fa17 f78b 	uxtah	r7, r7, fp
 800f880:	0c1b      	lsrs	r3, r3, #16
 800f882:	eba7 0808 	sub.w	r8, r7, r8
 800f886:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f88a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f88e:	fa1f f888 	uxth.w	r8, r8
 800f892:	141f      	asrs	r7, r3, #16
 800f894:	454d      	cmp	r5, r9
 800f896:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f89a:	f84a 3b04 	str.w	r3, [sl], #4
 800f89e:	d8e7      	bhi.n	800f870 <__mdiff+0x7c>
 800f8a0:	1b2b      	subs	r3, r5, r4
 800f8a2:	3b15      	subs	r3, #21
 800f8a4:	f023 0303 	bic.w	r3, r3, #3
 800f8a8:	3304      	adds	r3, #4
 800f8aa:	3415      	adds	r4, #21
 800f8ac:	42a5      	cmp	r5, r4
 800f8ae:	bf38      	it	cc
 800f8b0:	2304      	movcc	r3, #4
 800f8b2:	4419      	add	r1, r3
 800f8b4:	4473      	add	r3, lr
 800f8b6:	469e      	mov	lr, r3
 800f8b8:	460d      	mov	r5, r1
 800f8ba:	4565      	cmp	r5, ip
 800f8bc:	d30e      	bcc.n	800f8dc <__mdiff+0xe8>
 800f8be:	f10c 0203 	add.w	r2, ip, #3
 800f8c2:	1a52      	subs	r2, r2, r1
 800f8c4:	f022 0203 	bic.w	r2, r2, #3
 800f8c8:	3903      	subs	r1, #3
 800f8ca:	458c      	cmp	ip, r1
 800f8cc:	bf38      	it	cc
 800f8ce:	2200      	movcc	r2, #0
 800f8d0:	441a      	add	r2, r3
 800f8d2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f8d6:	b17b      	cbz	r3, 800f8f8 <__mdiff+0x104>
 800f8d8:	6106      	str	r6, [r0, #16]
 800f8da:	e7a5      	b.n	800f828 <__mdiff+0x34>
 800f8dc:	f855 8b04 	ldr.w	r8, [r5], #4
 800f8e0:	fa17 f488 	uxtah	r4, r7, r8
 800f8e4:	1422      	asrs	r2, r4, #16
 800f8e6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800f8ea:	b2a4      	uxth	r4, r4
 800f8ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800f8f0:	f84e 4b04 	str.w	r4, [lr], #4
 800f8f4:	1417      	asrs	r7, r2, #16
 800f8f6:	e7e0      	b.n	800f8ba <__mdiff+0xc6>
 800f8f8:	3e01      	subs	r6, #1
 800f8fa:	e7ea      	b.n	800f8d2 <__mdiff+0xde>
 800f8fc:	0801004b 	.word	0x0801004b
 800f900:	080100bc 	.word	0x080100bc

0800f904 <__d2b>:
 800f904:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f908:	4689      	mov	r9, r1
 800f90a:	2101      	movs	r1, #1
 800f90c:	ec57 6b10 	vmov	r6, r7, d0
 800f910:	4690      	mov	r8, r2
 800f912:	f7ff fcd5 	bl	800f2c0 <_Balloc>
 800f916:	4604      	mov	r4, r0
 800f918:	b930      	cbnz	r0, 800f928 <__d2b+0x24>
 800f91a:	4602      	mov	r2, r0
 800f91c:	4b25      	ldr	r3, [pc, #148]	; (800f9b4 <__d2b+0xb0>)
 800f91e:	4826      	ldr	r0, [pc, #152]	; (800f9b8 <__d2b+0xb4>)
 800f920:	f240 310a 	movw	r1, #778	; 0x30a
 800f924:	f000 fa08 	bl	800fd38 <__assert_func>
 800f928:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f92c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f930:	bb35      	cbnz	r5, 800f980 <__d2b+0x7c>
 800f932:	2e00      	cmp	r6, #0
 800f934:	9301      	str	r3, [sp, #4]
 800f936:	d028      	beq.n	800f98a <__d2b+0x86>
 800f938:	4668      	mov	r0, sp
 800f93a:	9600      	str	r6, [sp, #0]
 800f93c:	f7ff fd8c 	bl	800f458 <__lo0bits>
 800f940:	9900      	ldr	r1, [sp, #0]
 800f942:	b300      	cbz	r0, 800f986 <__d2b+0x82>
 800f944:	9a01      	ldr	r2, [sp, #4]
 800f946:	f1c0 0320 	rsb	r3, r0, #32
 800f94a:	fa02 f303 	lsl.w	r3, r2, r3
 800f94e:	430b      	orrs	r3, r1
 800f950:	40c2      	lsrs	r2, r0
 800f952:	6163      	str	r3, [r4, #20]
 800f954:	9201      	str	r2, [sp, #4]
 800f956:	9b01      	ldr	r3, [sp, #4]
 800f958:	61a3      	str	r3, [r4, #24]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	bf14      	ite	ne
 800f95e:	2202      	movne	r2, #2
 800f960:	2201      	moveq	r2, #1
 800f962:	6122      	str	r2, [r4, #16]
 800f964:	b1d5      	cbz	r5, 800f99c <__d2b+0x98>
 800f966:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f96a:	4405      	add	r5, r0
 800f96c:	f8c9 5000 	str.w	r5, [r9]
 800f970:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f974:	f8c8 0000 	str.w	r0, [r8]
 800f978:	4620      	mov	r0, r4
 800f97a:	b003      	add	sp, #12
 800f97c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f980:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f984:	e7d5      	b.n	800f932 <__d2b+0x2e>
 800f986:	6161      	str	r1, [r4, #20]
 800f988:	e7e5      	b.n	800f956 <__d2b+0x52>
 800f98a:	a801      	add	r0, sp, #4
 800f98c:	f7ff fd64 	bl	800f458 <__lo0bits>
 800f990:	9b01      	ldr	r3, [sp, #4]
 800f992:	6163      	str	r3, [r4, #20]
 800f994:	2201      	movs	r2, #1
 800f996:	6122      	str	r2, [r4, #16]
 800f998:	3020      	adds	r0, #32
 800f99a:	e7e3      	b.n	800f964 <__d2b+0x60>
 800f99c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f9a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f9a4:	f8c9 0000 	str.w	r0, [r9]
 800f9a8:	6918      	ldr	r0, [r3, #16]
 800f9aa:	f7ff fd35 	bl	800f418 <__hi0bits>
 800f9ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f9b2:	e7df      	b.n	800f974 <__d2b+0x70>
 800f9b4:	0801004b 	.word	0x0801004b
 800f9b8:	080100bc 	.word	0x080100bc

0800f9bc <_calloc_r>:
 800f9bc:	b513      	push	{r0, r1, r4, lr}
 800f9be:	434a      	muls	r2, r1
 800f9c0:	4611      	mov	r1, r2
 800f9c2:	9201      	str	r2, [sp, #4]
 800f9c4:	f7fd fec2 	bl	800d74c <_malloc_r>
 800f9c8:	4604      	mov	r4, r0
 800f9ca:	b118      	cbz	r0, 800f9d4 <_calloc_r+0x18>
 800f9cc:	9a01      	ldr	r2, [sp, #4]
 800f9ce:	2100      	movs	r1, #0
 800f9d0:	f7fd fe64 	bl	800d69c <memset>
 800f9d4:	4620      	mov	r0, r4
 800f9d6:	b002      	add	sp, #8
 800f9d8:	bd10      	pop	{r4, pc}

0800f9da <__sfputc_r>:
 800f9da:	6893      	ldr	r3, [r2, #8]
 800f9dc:	3b01      	subs	r3, #1
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	b410      	push	{r4}
 800f9e2:	6093      	str	r3, [r2, #8]
 800f9e4:	da08      	bge.n	800f9f8 <__sfputc_r+0x1e>
 800f9e6:	6994      	ldr	r4, [r2, #24]
 800f9e8:	42a3      	cmp	r3, r4
 800f9ea:	db01      	blt.n	800f9f0 <__sfputc_r+0x16>
 800f9ec:	290a      	cmp	r1, #10
 800f9ee:	d103      	bne.n	800f9f8 <__sfputc_r+0x1e>
 800f9f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f9f4:	f7fe bb56 	b.w	800e0a4 <__swbuf_r>
 800f9f8:	6813      	ldr	r3, [r2, #0]
 800f9fa:	1c58      	adds	r0, r3, #1
 800f9fc:	6010      	str	r0, [r2, #0]
 800f9fe:	7019      	strb	r1, [r3, #0]
 800fa00:	4608      	mov	r0, r1
 800fa02:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa06:	4770      	bx	lr

0800fa08 <__sfputs_r>:
 800fa08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa0a:	4606      	mov	r6, r0
 800fa0c:	460f      	mov	r7, r1
 800fa0e:	4614      	mov	r4, r2
 800fa10:	18d5      	adds	r5, r2, r3
 800fa12:	42ac      	cmp	r4, r5
 800fa14:	d101      	bne.n	800fa1a <__sfputs_r+0x12>
 800fa16:	2000      	movs	r0, #0
 800fa18:	e007      	b.n	800fa2a <__sfputs_r+0x22>
 800fa1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa1e:	463a      	mov	r2, r7
 800fa20:	4630      	mov	r0, r6
 800fa22:	f7ff ffda 	bl	800f9da <__sfputc_r>
 800fa26:	1c43      	adds	r3, r0, #1
 800fa28:	d1f3      	bne.n	800fa12 <__sfputs_r+0xa>
 800fa2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fa2c <_vfiprintf_r>:
 800fa2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa30:	460d      	mov	r5, r1
 800fa32:	b09d      	sub	sp, #116	; 0x74
 800fa34:	4614      	mov	r4, r2
 800fa36:	4698      	mov	r8, r3
 800fa38:	4606      	mov	r6, r0
 800fa3a:	b118      	cbz	r0, 800fa44 <_vfiprintf_r+0x18>
 800fa3c:	6983      	ldr	r3, [r0, #24]
 800fa3e:	b90b      	cbnz	r3, 800fa44 <_vfiprintf_r+0x18>
 800fa40:	f7ff fb1a 	bl	800f078 <__sinit>
 800fa44:	4b89      	ldr	r3, [pc, #548]	; (800fc6c <_vfiprintf_r+0x240>)
 800fa46:	429d      	cmp	r5, r3
 800fa48:	d11b      	bne.n	800fa82 <_vfiprintf_r+0x56>
 800fa4a:	6875      	ldr	r5, [r6, #4]
 800fa4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa4e:	07d9      	lsls	r1, r3, #31
 800fa50:	d405      	bmi.n	800fa5e <_vfiprintf_r+0x32>
 800fa52:	89ab      	ldrh	r3, [r5, #12]
 800fa54:	059a      	lsls	r2, r3, #22
 800fa56:	d402      	bmi.n	800fa5e <_vfiprintf_r+0x32>
 800fa58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa5a:	f7ff fbb0 	bl	800f1be <__retarget_lock_acquire_recursive>
 800fa5e:	89ab      	ldrh	r3, [r5, #12]
 800fa60:	071b      	lsls	r3, r3, #28
 800fa62:	d501      	bpl.n	800fa68 <_vfiprintf_r+0x3c>
 800fa64:	692b      	ldr	r3, [r5, #16]
 800fa66:	b9eb      	cbnz	r3, 800faa4 <_vfiprintf_r+0x78>
 800fa68:	4629      	mov	r1, r5
 800fa6a:	4630      	mov	r0, r6
 800fa6c:	f7fe fb6c 	bl	800e148 <__swsetup_r>
 800fa70:	b1c0      	cbz	r0, 800faa4 <_vfiprintf_r+0x78>
 800fa72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa74:	07dc      	lsls	r4, r3, #31
 800fa76:	d50e      	bpl.n	800fa96 <_vfiprintf_r+0x6a>
 800fa78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fa7c:	b01d      	add	sp, #116	; 0x74
 800fa7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa82:	4b7b      	ldr	r3, [pc, #492]	; (800fc70 <_vfiprintf_r+0x244>)
 800fa84:	429d      	cmp	r5, r3
 800fa86:	d101      	bne.n	800fa8c <_vfiprintf_r+0x60>
 800fa88:	68b5      	ldr	r5, [r6, #8]
 800fa8a:	e7df      	b.n	800fa4c <_vfiprintf_r+0x20>
 800fa8c:	4b79      	ldr	r3, [pc, #484]	; (800fc74 <_vfiprintf_r+0x248>)
 800fa8e:	429d      	cmp	r5, r3
 800fa90:	bf08      	it	eq
 800fa92:	68f5      	ldreq	r5, [r6, #12]
 800fa94:	e7da      	b.n	800fa4c <_vfiprintf_r+0x20>
 800fa96:	89ab      	ldrh	r3, [r5, #12]
 800fa98:	0598      	lsls	r0, r3, #22
 800fa9a:	d4ed      	bmi.n	800fa78 <_vfiprintf_r+0x4c>
 800fa9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa9e:	f7ff fb8f 	bl	800f1c0 <__retarget_lock_release_recursive>
 800faa2:	e7e9      	b.n	800fa78 <_vfiprintf_r+0x4c>
 800faa4:	2300      	movs	r3, #0
 800faa6:	9309      	str	r3, [sp, #36]	; 0x24
 800faa8:	2320      	movs	r3, #32
 800faaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800faae:	f8cd 800c 	str.w	r8, [sp, #12]
 800fab2:	2330      	movs	r3, #48	; 0x30
 800fab4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fc78 <_vfiprintf_r+0x24c>
 800fab8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fabc:	f04f 0901 	mov.w	r9, #1
 800fac0:	4623      	mov	r3, r4
 800fac2:	469a      	mov	sl, r3
 800fac4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fac8:	b10a      	cbz	r2, 800face <_vfiprintf_r+0xa2>
 800faca:	2a25      	cmp	r2, #37	; 0x25
 800facc:	d1f9      	bne.n	800fac2 <_vfiprintf_r+0x96>
 800face:	ebba 0b04 	subs.w	fp, sl, r4
 800fad2:	d00b      	beq.n	800faec <_vfiprintf_r+0xc0>
 800fad4:	465b      	mov	r3, fp
 800fad6:	4622      	mov	r2, r4
 800fad8:	4629      	mov	r1, r5
 800fada:	4630      	mov	r0, r6
 800fadc:	f7ff ff94 	bl	800fa08 <__sfputs_r>
 800fae0:	3001      	adds	r0, #1
 800fae2:	f000 80aa 	beq.w	800fc3a <_vfiprintf_r+0x20e>
 800fae6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fae8:	445a      	add	r2, fp
 800faea:	9209      	str	r2, [sp, #36]	; 0x24
 800faec:	f89a 3000 	ldrb.w	r3, [sl]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	f000 80a2 	beq.w	800fc3a <_vfiprintf_r+0x20e>
 800faf6:	2300      	movs	r3, #0
 800faf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fafc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fb00:	f10a 0a01 	add.w	sl, sl, #1
 800fb04:	9304      	str	r3, [sp, #16]
 800fb06:	9307      	str	r3, [sp, #28]
 800fb08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fb0c:	931a      	str	r3, [sp, #104]	; 0x68
 800fb0e:	4654      	mov	r4, sl
 800fb10:	2205      	movs	r2, #5
 800fb12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb16:	4858      	ldr	r0, [pc, #352]	; (800fc78 <_vfiprintf_r+0x24c>)
 800fb18:	f7f0 fbea 	bl	80002f0 <memchr>
 800fb1c:	9a04      	ldr	r2, [sp, #16]
 800fb1e:	b9d8      	cbnz	r0, 800fb58 <_vfiprintf_r+0x12c>
 800fb20:	06d1      	lsls	r1, r2, #27
 800fb22:	bf44      	itt	mi
 800fb24:	2320      	movmi	r3, #32
 800fb26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb2a:	0713      	lsls	r3, r2, #28
 800fb2c:	bf44      	itt	mi
 800fb2e:	232b      	movmi	r3, #43	; 0x2b
 800fb30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb34:	f89a 3000 	ldrb.w	r3, [sl]
 800fb38:	2b2a      	cmp	r3, #42	; 0x2a
 800fb3a:	d015      	beq.n	800fb68 <_vfiprintf_r+0x13c>
 800fb3c:	9a07      	ldr	r2, [sp, #28]
 800fb3e:	4654      	mov	r4, sl
 800fb40:	2000      	movs	r0, #0
 800fb42:	f04f 0c0a 	mov.w	ip, #10
 800fb46:	4621      	mov	r1, r4
 800fb48:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fb4c:	3b30      	subs	r3, #48	; 0x30
 800fb4e:	2b09      	cmp	r3, #9
 800fb50:	d94e      	bls.n	800fbf0 <_vfiprintf_r+0x1c4>
 800fb52:	b1b0      	cbz	r0, 800fb82 <_vfiprintf_r+0x156>
 800fb54:	9207      	str	r2, [sp, #28]
 800fb56:	e014      	b.n	800fb82 <_vfiprintf_r+0x156>
 800fb58:	eba0 0308 	sub.w	r3, r0, r8
 800fb5c:	fa09 f303 	lsl.w	r3, r9, r3
 800fb60:	4313      	orrs	r3, r2
 800fb62:	9304      	str	r3, [sp, #16]
 800fb64:	46a2      	mov	sl, r4
 800fb66:	e7d2      	b.n	800fb0e <_vfiprintf_r+0xe2>
 800fb68:	9b03      	ldr	r3, [sp, #12]
 800fb6a:	1d19      	adds	r1, r3, #4
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	9103      	str	r1, [sp, #12]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	bfbb      	ittet	lt
 800fb74:	425b      	neglt	r3, r3
 800fb76:	f042 0202 	orrlt.w	r2, r2, #2
 800fb7a:	9307      	strge	r3, [sp, #28]
 800fb7c:	9307      	strlt	r3, [sp, #28]
 800fb7e:	bfb8      	it	lt
 800fb80:	9204      	strlt	r2, [sp, #16]
 800fb82:	7823      	ldrb	r3, [r4, #0]
 800fb84:	2b2e      	cmp	r3, #46	; 0x2e
 800fb86:	d10c      	bne.n	800fba2 <_vfiprintf_r+0x176>
 800fb88:	7863      	ldrb	r3, [r4, #1]
 800fb8a:	2b2a      	cmp	r3, #42	; 0x2a
 800fb8c:	d135      	bne.n	800fbfa <_vfiprintf_r+0x1ce>
 800fb8e:	9b03      	ldr	r3, [sp, #12]
 800fb90:	1d1a      	adds	r2, r3, #4
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	9203      	str	r2, [sp, #12]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	bfb8      	it	lt
 800fb9a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800fb9e:	3402      	adds	r4, #2
 800fba0:	9305      	str	r3, [sp, #20]
 800fba2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fc88 <_vfiprintf_r+0x25c>
 800fba6:	7821      	ldrb	r1, [r4, #0]
 800fba8:	2203      	movs	r2, #3
 800fbaa:	4650      	mov	r0, sl
 800fbac:	f7f0 fba0 	bl	80002f0 <memchr>
 800fbb0:	b140      	cbz	r0, 800fbc4 <_vfiprintf_r+0x198>
 800fbb2:	2340      	movs	r3, #64	; 0x40
 800fbb4:	eba0 000a 	sub.w	r0, r0, sl
 800fbb8:	fa03 f000 	lsl.w	r0, r3, r0
 800fbbc:	9b04      	ldr	r3, [sp, #16]
 800fbbe:	4303      	orrs	r3, r0
 800fbc0:	3401      	adds	r4, #1
 800fbc2:	9304      	str	r3, [sp, #16]
 800fbc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbc8:	482c      	ldr	r0, [pc, #176]	; (800fc7c <_vfiprintf_r+0x250>)
 800fbca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fbce:	2206      	movs	r2, #6
 800fbd0:	f7f0 fb8e 	bl	80002f0 <memchr>
 800fbd4:	2800      	cmp	r0, #0
 800fbd6:	d03f      	beq.n	800fc58 <_vfiprintf_r+0x22c>
 800fbd8:	4b29      	ldr	r3, [pc, #164]	; (800fc80 <_vfiprintf_r+0x254>)
 800fbda:	bb1b      	cbnz	r3, 800fc24 <_vfiprintf_r+0x1f8>
 800fbdc:	9b03      	ldr	r3, [sp, #12]
 800fbde:	3307      	adds	r3, #7
 800fbe0:	f023 0307 	bic.w	r3, r3, #7
 800fbe4:	3308      	adds	r3, #8
 800fbe6:	9303      	str	r3, [sp, #12]
 800fbe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbea:	443b      	add	r3, r7
 800fbec:	9309      	str	r3, [sp, #36]	; 0x24
 800fbee:	e767      	b.n	800fac0 <_vfiprintf_r+0x94>
 800fbf0:	fb0c 3202 	mla	r2, ip, r2, r3
 800fbf4:	460c      	mov	r4, r1
 800fbf6:	2001      	movs	r0, #1
 800fbf8:	e7a5      	b.n	800fb46 <_vfiprintf_r+0x11a>
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	3401      	adds	r4, #1
 800fbfe:	9305      	str	r3, [sp, #20]
 800fc00:	4619      	mov	r1, r3
 800fc02:	f04f 0c0a 	mov.w	ip, #10
 800fc06:	4620      	mov	r0, r4
 800fc08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc0c:	3a30      	subs	r2, #48	; 0x30
 800fc0e:	2a09      	cmp	r2, #9
 800fc10:	d903      	bls.n	800fc1a <_vfiprintf_r+0x1ee>
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d0c5      	beq.n	800fba2 <_vfiprintf_r+0x176>
 800fc16:	9105      	str	r1, [sp, #20]
 800fc18:	e7c3      	b.n	800fba2 <_vfiprintf_r+0x176>
 800fc1a:	fb0c 2101 	mla	r1, ip, r1, r2
 800fc1e:	4604      	mov	r4, r0
 800fc20:	2301      	movs	r3, #1
 800fc22:	e7f0      	b.n	800fc06 <_vfiprintf_r+0x1da>
 800fc24:	ab03      	add	r3, sp, #12
 800fc26:	9300      	str	r3, [sp, #0]
 800fc28:	462a      	mov	r2, r5
 800fc2a:	4b16      	ldr	r3, [pc, #88]	; (800fc84 <_vfiprintf_r+0x258>)
 800fc2c:	a904      	add	r1, sp, #16
 800fc2e:	4630      	mov	r0, r6
 800fc30:	f7fd fe76 	bl	800d920 <_printf_float>
 800fc34:	4607      	mov	r7, r0
 800fc36:	1c78      	adds	r0, r7, #1
 800fc38:	d1d6      	bne.n	800fbe8 <_vfiprintf_r+0x1bc>
 800fc3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc3c:	07d9      	lsls	r1, r3, #31
 800fc3e:	d405      	bmi.n	800fc4c <_vfiprintf_r+0x220>
 800fc40:	89ab      	ldrh	r3, [r5, #12]
 800fc42:	059a      	lsls	r2, r3, #22
 800fc44:	d402      	bmi.n	800fc4c <_vfiprintf_r+0x220>
 800fc46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc48:	f7ff faba 	bl	800f1c0 <__retarget_lock_release_recursive>
 800fc4c:	89ab      	ldrh	r3, [r5, #12]
 800fc4e:	065b      	lsls	r3, r3, #25
 800fc50:	f53f af12 	bmi.w	800fa78 <_vfiprintf_r+0x4c>
 800fc54:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fc56:	e711      	b.n	800fa7c <_vfiprintf_r+0x50>
 800fc58:	ab03      	add	r3, sp, #12
 800fc5a:	9300      	str	r3, [sp, #0]
 800fc5c:	462a      	mov	r2, r5
 800fc5e:	4b09      	ldr	r3, [pc, #36]	; (800fc84 <_vfiprintf_r+0x258>)
 800fc60:	a904      	add	r1, sp, #16
 800fc62:	4630      	mov	r0, r6
 800fc64:	f7fe f8e8 	bl	800de38 <_printf_i>
 800fc68:	e7e4      	b.n	800fc34 <_vfiprintf_r+0x208>
 800fc6a:	bf00      	nop
 800fc6c:	0801007c 	.word	0x0801007c
 800fc70:	0801009c 	.word	0x0801009c
 800fc74:	0801005c 	.word	0x0801005c
 800fc78:	0801021c 	.word	0x0801021c
 800fc7c:	08010226 	.word	0x08010226
 800fc80:	0800d921 	.word	0x0800d921
 800fc84:	0800fa09 	.word	0x0800fa09
 800fc88:	08010222 	.word	0x08010222

0800fc8c <__sread>:
 800fc8c:	b510      	push	{r4, lr}
 800fc8e:	460c      	mov	r4, r1
 800fc90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc94:	f000 f8d6 	bl	800fe44 <_read_r>
 800fc98:	2800      	cmp	r0, #0
 800fc9a:	bfab      	itete	ge
 800fc9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fc9e:	89a3      	ldrhlt	r3, [r4, #12]
 800fca0:	181b      	addge	r3, r3, r0
 800fca2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fca6:	bfac      	ite	ge
 800fca8:	6563      	strge	r3, [r4, #84]	; 0x54
 800fcaa:	81a3      	strhlt	r3, [r4, #12]
 800fcac:	bd10      	pop	{r4, pc}

0800fcae <__swrite>:
 800fcae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcb2:	461f      	mov	r7, r3
 800fcb4:	898b      	ldrh	r3, [r1, #12]
 800fcb6:	05db      	lsls	r3, r3, #23
 800fcb8:	4605      	mov	r5, r0
 800fcba:	460c      	mov	r4, r1
 800fcbc:	4616      	mov	r6, r2
 800fcbe:	d505      	bpl.n	800fccc <__swrite+0x1e>
 800fcc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcc4:	2302      	movs	r3, #2
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	f000 f898 	bl	800fdfc <_lseek_r>
 800fccc:	89a3      	ldrh	r3, [r4, #12]
 800fcce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fcd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fcd6:	81a3      	strh	r3, [r4, #12]
 800fcd8:	4632      	mov	r2, r6
 800fcda:	463b      	mov	r3, r7
 800fcdc:	4628      	mov	r0, r5
 800fcde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fce2:	f000 b817 	b.w	800fd14 <_write_r>

0800fce6 <__sseek>:
 800fce6:	b510      	push	{r4, lr}
 800fce8:	460c      	mov	r4, r1
 800fcea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcee:	f000 f885 	bl	800fdfc <_lseek_r>
 800fcf2:	1c43      	adds	r3, r0, #1
 800fcf4:	89a3      	ldrh	r3, [r4, #12]
 800fcf6:	bf15      	itete	ne
 800fcf8:	6560      	strne	r0, [r4, #84]	; 0x54
 800fcfa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fcfe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fd02:	81a3      	strheq	r3, [r4, #12]
 800fd04:	bf18      	it	ne
 800fd06:	81a3      	strhne	r3, [r4, #12]
 800fd08:	bd10      	pop	{r4, pc}

0800fd0a <__sclose>:
 800fd0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd0e:	f000 b831 	b.w	800fd74 <_close_r>
	...

0800fd14 <_write_r>:
 800fd14:	b538      	push	{r3, r4, r5, lr}
 800fd16:	4d07      	ldr	r5, [pc, #28]	; (800fd34 <_write_r+0x20>)
 800fd18:	4604      	mov	r4, r0
 800fd1a:	4608      	mov	r0, r1
 800fd1c:	4611      	mov	r1, r2
 800fd1e:	2200      	movs	r2, #0
 800fd20:	602a      	str	r2, [r5, #0]
 800fd22:	461a      	mov	r2, r3
 800fd24:	f7f1 ff37 	bl	8001b96 <_write>
 800fd28:	1c43      	adds	r3, r0, #1
 800fd2a:	d102      	bne.n	800fd32 <_write_r+0x1e>
 800fd2c:	682b      	ldr	r3, [r5, #0]
 800fd2e:	b103      	cbz	r3, 800fd32 <_write_r+0x1e>
 800fd30:	6023      	str	r3, [r4, #0]
 800fd32:	bd38      	pop	{r3, r4, r5, pc}
 800fd34:	240064d0 	.word	0x240064d0

0800fd38 <__assert_func>:
 800fd38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd3a:	4614      	mov	r4, r2
 800fd3c:	461a      	mov	r2, r3
 800fd3e:	4b09      	ldr	r3, [pc, #36]	; (800fd64 <__assert_func+0x2c>)
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	4605      	mov	r5, r0
 800fd44:	68d8      	ldr	r0, [r3, #12]
 800fd46:	b14c      	cbz	r4, 800fd5c <__assert_func+0x24>
 800fd48:	4b07      	ldr	r3, [pc, #28]	; (800fd68 <__assert_func+0x30>)
 800fd4a:	9100      	str	r1, [sp, #0]
 800fd4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fd50:	4906      	ldr	r1, [pc, #24]	; (800fd6c <__assert_func+0x34>)
 800fd52:	462b      	mov	r3, r5
 800fd54:	f000 f81e 	bl	800fd94 <fiprintf>
 800fd58:	f000 f893 	bl	800fe82 <abort>
 800fd5c:	4b04      	ldr	r3, [pc, #16]	; (800fd70 <__assert_func+0x38>)
 800fd5e:	461c      	mov	r4, r3
 800fd60:	e7f3      	b.n	800fd4a <__assert_func+0x12>
 800fd62:	bf00      	nop
 800fd64:	24003410 	.word	0x24003410
 800fd68:	0801022d 	.word	0x0801022d
 800fd6c:	0801023a 	.word	0x0801023a
 800fd70:	08010268 	.word	0x08010268

0800fd74 <_close_r>:
 800fd74:	b538      	push	{r3, r4, r5, lr}
 800fd76:	4d06      	ldr	r5, [pc, #24]	; (800fd90 <_close_r+0x1c>)
 800fd78:	2300      	movs	r3, #0
 800fd7a:	4604      	mov	r4, r0
 800fd7c:	4608      	mov	r0, r1
 800fd7e:	602b      	str	r3, [r5, #0]
 800fd80:	f7f1 ff25 	bl	8001bce <_close>
 800fd84:	1c43      	adds	r3, r0, #1
 800fd86:	d102      	bne.n	800fd8e <_close_r+0x1a>
 800fd88:	682b      	ldr	r3, [r5, #0]
 800fd8a:	b103      	cbz	r3, 800fd8e <_close_r+0x1a>
 800fd8c:	6023      	str	r3, [r4, #0]
 800fd8e:	bd38      	pop	{r3, r4, r5, pc}
 800fd90:	240064d0 	.word	0x240064d0

0800fd94 <fiprintf>:
 800fd94:	b40e      	push	{r1, r2, r3}
 800fd96:	b503      	push	{r0, r1, lr}
 800fd98:	4601      	mov	r1, r0
 800fd9a:	ab03      	add	r3, sp, #12
 800fd9c:	4805      	ldr	r0, [pc, #20]	; (800fdb4 <fiprintf+0x20>)
 800fd9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fda2:	6800      	ldr	r0, [r0, #0]
 800fda4:	9301      	str	r3, [sp, #4]
 800fda6:	f7ff fe41 	bl	800fa2c <_vfiprintf_r>
 800fdaa:	b002      	add	sp, #8
 800fdac:	f85d eb04 	ldr.w	lr, [sp], #4
 800fdb0:	b003      	add	sp, #12
 800fdb2:	4770      	bx	lr
 800fdb4:	24003410 	.word	0x24003410

0800fdb8 <_fstat_r>:
 800fdb8:	b538      	push	{r3, r4, r5, lr}
 800fdba:	4d07      	ldr	r5, [pc, #28]	; (800fdd8 <_fstat_r+0x20>)
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	4604      	mov	r4, r0
 800fdc0:	4608      	mov	r0, r1
 800fdc2:	4611      	mov	r1, r2
 800fdc4:	602b      	str	r3, [r5, #0]
 800fdc6:	f7f1 ff0e 	bl	8001be6 <_fstat>
 800fdca:	1c43      	adds	r3, r0, #1
 800fdcc:	d102      	bne.n	800fdd4 <_fstat_r+0x1c>
 800fdce:	682b      	ldr	r3, [r5, #0]
 800fdd0:	b103      	cbz	r3, 800fdd4 <_fstat_r+0x1c>
 800fdd2:	6023      	str	r3, [r4, #0]
 800fdd4:	bd38      	pop	{r3, r4, r5, pc}
 800fdd6:	bf00      	nop
 800fdd8:	240064d0 	.word	0x240064d0

0800fddc <_isatty_r>:
 800fddc:	b538      	push	{r3, r4, r5, lr}
 800fdde:	4d06      	ldr	r5, [pc, #24]	; (800fdf8 <_isatty_r+0x1c>)
 800fde0:	2300      	movs	r3, #0
 800fde2:	4604      	mov	r4, r0
 800fde4:	4608      	mov	r0, r1
 800fde6:	602b      	str	r3, [r5, #0]
 800fde8:	f7f1 ff0d 	bl	8001c06 <_isatty>
 800fdec:	1c43      	adds	r3, r0, #1
 800fdee:	d102      	bne.n	800fdf6 <_isatty_r+0x1a>
 800fdf0:	682b      	ldr	r3, [r5, #0]
 800fdf2:	b103      	cbz	r3, 800fdf6 <_isatty_r+0x1a>
 800fdf4:	6023      	str	r3, [r4, #0]
 800fdf6:	bd38      	pop	{r3, r4, r5, pc}
 800fdf8:	240064d0 	.word	0x240064d0

0800fdfc <_lseek_r>:
 800fdfc:	b538      	push	{r3, r4, r5, lr}
 800fdfe:	4d07      	ldr	r5, [pc, #28]	; (800fe1c <_lseek_r+0x20>)
 800fe00:	4604      	mov	r4, r0
 800fe02:	4608      	mov	r0, r1
 800fe04:	4611      	mov	r1, r2
 800fe06:	2200      	movs	r2, #0
 800fe08:	602a      	str	r2, [r5, #0]
 800fe0a:	461a      	mov	r2, r3
 800fe0c:	f7f1 ff06 	bl	8001c1c <_lseek>
 800fe10:	1c43      	adds	r3, r0, #1
 800fe12:	d102      	bne.n	800fe1a <_lseek_r+0x1e>
 800fe14:	682b      	ldr	r3, [r5, #0]
 800fe16:	b103      	cbz	r3, 800fe1a <_lseek_r+0x1e>
 800fe18:	6023      	str	r3, [r4, #0]
 800fe1a:	bd38      	pop	{r3, r4, r5, pc}
 800fe1c:	240064d0 	.word	0x240064d0

0800fe20 <__ascii_mbtowc>:
 800fe20:	b082      	sub	sp, #8
 800fe22:	b901      	cbnz	r1, 800fe26 <__ascii_mbtowc+0x6>
 800fe24:	a901      	add	r1, sp, #4
 800fe26:	b142      	cbz	r2, 800fe3a <__ascii_mbtowc+0x1a>
 800fe28:	b14b      	cbz	r3, 800fe3e <__ascii_mbtowc+0x1e>
 800fe2a:	7813      	ldrb	r3, [r2, #0]
 800fe2c:	600b      	str	r3, [r1, #0]
 800fe2e:	7812      	ldrb	r2, [r2, #0]
 800fe30:	1e10      	subs	r0, r2, #0
 800fe32:	bf18      	it	ne
 800fe34:	2001      	movne	r0, #1
 800fe36:	b002      	add	sp, #8
 800fe38:	4770      	bx	lr
 800fe3a:	4610      	mov	r0, r2
 800fe3c:	e7fb      	b.n	800fe36 <__ascii_mbtowc+0x16>
 800fe3e:	f06f 0001 	mvn.w	r0, #1
 800fe42:	e7f8      	b.n	800fe36 <__ascii_mbtowc+0x16>

0800fe44 <_read_r>:
 800fe44:	b538      	push	{r3, r4, r5, lr}
 800fe46:	4d07      	ldr	r5, [pc, #28]	; (800fe64 <_read_r+0x20>)
 800fe48:	4604      	mov	r4, r0
 800fe4a:	4608      	mov	r0, r1
 800fe4c:	4611      	mov	r1, r2
 800fe4e:	2200      	movs	r2, #0
 800fe50:	602a      	str	r2, [r5, #0]
 800fe52:	461a      	mov	r2, r3
 800fe54:	f7f1 fe82 	bl	8001b5c <_read>
 800fe58:	1c43      	adds	r3, r0, #1
 800fe5a:	d102      	bne.n	800fe62 <_read_r+0x1e>
 800fe5c:	682b      	ldr	r3, [r5, #0]
 800fe5e:	b103      	cbz	r3, 800fe62 <_read_r+0x1e>
 800fe60:	6023      	str	r3, [r4, #0]
 800fe62:	bd38      	pop	{r3, r4, r5, pc}
 800fe64:	240064d0 	.word	0x240064d0

0800fe68 <__ascii_wctomb>:
 800fe68:	b149      	cbz	r1, 800fe7e <__ascii_wctomb+0x16>
 800fe6a:	2aff      	cmp	r2, #255	; 0xff
 800fe6c:	bf85      	ittet	hi
 800fe6e:	238a      	movhi	r3, #138	; 0x8a
 800fe70:	6003      	strhi	r3, [r0, #0]
 800fe72:	700a      	strbls	r2, [r1, #0]
 800fe74:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800fe78:	bf98      	it	ls
 800fe7a:	2001      	movls	r0, #1
 800fe7c:	4770      	bx	lr
 800fe7e:	4608      	mov	r0, r1
 800fe80:	4770      	bx	lr

0800fe82 <abort>:
 800fe82:	b508      	push	{r3, lr}
 800fe84:	2006      	movs	r0, #6
 800fe86:	f000 f82b 	bl	800fee0 <raise>
 800fe8a:	2001      	movs	r0, #1
 800fe8c:	f7f1 fe5c 	bl	8001b48 <_exit>

0800fe90 <_raise_r>:
 800fe90:	291f      	cmp	r1, #31
 800fe92:	b538      	push	{r3, r4, r5, lr}
 800fe94:	4604      	mov	r4, r0
 800fe96:	460d      	mov	r5, r1
 800fe98:	d904      	bls.n	800fea4 <_raise_r+0x14>
 800fe9a:	2316      	movs	r3, #22
 800fe9c:	6003      	str	r3, [r0, #0]
 800fe9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fea2:	bd38      	pop	{r3, r4, r5, pc}
 800fea4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fea6:	b112      	cbz	r2, 800feae <_raise_r+0x1e>
 800fea8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800feac:	b94b      	cbnz	r3, 800fec2 <_raise_r+0x32>
 800feae:	4620      	mov	r0, r4
 800feb0:	f000 f830 	bl	800ff14 <_getpid_r>
 800feb4:	462a      	mov	r2, r5
 800feb6:	4601      	mov	r1, r0
 800feb8:	4620      	mov	r0, r4
 800feba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800febe:	f000 b817 	b.w	800fef0 <_kill_r>
 800fec2:	2b01      	cmp	r3, #1
 800fec4:	d00a      	beq.n	800fedc <_raise_r+0x4c>
 800fec6:	1c59      	adds	r1, r3, #1
 800fec8:	d103      	bne.n	800fed2 <_raise_r+0x42>
 800feca:	2316      	movs	r3, #22
 800fecc:	6003      	str	r3, [r0, #0]
 800fece:	2001      	movs	r0, #1
 800fed0:	e7e7      	b.n	800fea2 <_raise_r+0x12>
 800fed2:	2400      	movs	r4, #0
 800fed4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fed8:	4628      	mov	r0, r5
 800feda:	4798      	blx	r3
 800fedc:	2000      	movs	r0, #0
 800fede:	e7e0      	b.n	800fea2 <_raise_r+0x12>

0800fee0 <raise>:
 800fee0:	4b02      	ldr	r3, [pc, #8]	; (800feec <raise+0xc>)
 800fee2:	4601      	mov	r1, r0
 800fee4:	6818      	ldr	r0, [r3, #0]
 800fee6:	f7ff bfd3 	b.w	800fe90 <_raise_r>
 800feea:	bf00      	nop
 800feec:	24003410 	.word	0x24003410

0800fef0 <_kill_r>:
 800fef0:	b538      	push	{r3, r4, r5, lr}
 800fef2:	4d07      	ldr	r5, [pc, #28]	; (800ff10 <_kill_r+0x20>)
 800fef4:	2300      	movs	r3, #0
 800fef6:	4604      	mov	r4, r0
 800fef8:	4608      	mov	r0, r1
 800fefa:	4611      	mov	r1, r2
 800fefc:	602b      	str	r3, [r5, #0]
 800fefe:	f7f1 fe13 	bl	8001b28 <_kill>
 800ff02:	1c43      	adds	r3, r0, #1
 800ff04:	d102      	bne.n	800ff0c <_kill_r+0x1c>
 800ff06:	682b      	ldr	r3, [r5, #0]
 800ff08:	b103      	cbz	r3, 800ff0c <_kill_r+0x1c>
 800ff0a:	6023      	str	r3, [r4, #0]
 800ff0c:	bd38      	pop	{r3, r4, r5, pc}
 800ff0e:	bf00      	nop
 800ff10:	240064d0 	.word	0x240064d0

0800ff14 <_getpid_r>:
 800ff14:	f7f1 be00 	b.w	8001b18 <_getpid>

0800ff18 <_init>:
 800ff18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff1a:	bf00      	nop
 800ff1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff1e:	bc08      	pop	{r3}
 800ff20:	469e      	mov	lr, r3
 800ff22:	4770      	bx	lr

0800ff24 <_fini>:
 800ff24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff26:	bf00      	nop
 800ff28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff2a:	bc08      	pop	{r3}
 800ff2c:	469e      	mov	lr, r3
 800ff2e:	4770      	bx	lr
